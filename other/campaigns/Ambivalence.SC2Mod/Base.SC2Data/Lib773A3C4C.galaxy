include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/VoidCampaignLib"
include "TriggerLibs/VoidCampaignMissionLib"
include "TriggerLibs/VoidCampaignUILib"
include "LibCOOC"
include "LibCOMI"

include "Lib773A3C4C_h"

//--------------------------------------------------------------------------------------------------
// Library: Ambivalence
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib773A3C4C_InitLibraries () {
    libNtve_InitVariables();
    libLbty_InitVariables();
    libVoiC_InitVariables();
    libVCMI_InitVariables();
    libVCUI_InitVariables();
    libCOOC_InitVariables();
    libCOMI_InitVariables();
}

// Variable Initialization
bool lib773A3C4C_InitVariables_completed = false;

void lib773A3C4C_InitVariables () {
    int init_i;
    int init_j;

    if (lib773A3C4C_InitVariables_completed) {
        return;
    }

    lib773A3C4C_InitVariables_completed = true;

    lib773A3C4C_gv_achievementDialog = c_invalidDialogId;
    lib773A3C4C_gv_achievementDialogBorder = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lib773A3C4C_gv_achievementFirstImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lib773A3C4C_gv_achievementSecondaryImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lib773A3C4C_gv_achievements[init_i].lv_name = "";
        lib773A3C4C_gv_achievements[init_i].lv_description = "";
    }
    lib773A3C4C_gv_pM_MissionHelpButtonTipPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        lib773A3C4C_gv_cU_GPCutsceneFilter[init_i] = "";
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        lib773A3C4C_gv_cU_GPCasterGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        lib773A3C4C_gv_cU_GPCasterGroupSecondary[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        lib773A3C4C_gv_cU_GPPanel[init_i] = c_invalidDialogControlId;
    }
    lib773A3C4C_gv_cU_GPPanelHolder = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        lib773A3C4C_gv_cU_GPEnergyBar[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        lib773A3C4C_gv_cU_GPEnergyTooltip[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        lib773A3C4C_gv_cU_GPEnergyBarScene[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        lib773A3C4C_gv_cU_GPEnergyGlassScene[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        lib773A3C4C_gv_cU_GPEnergyLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        lib773A3C4C_gv_cU_GPCmdPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        lib773A3C4C_gv_cU_GPCmdPanelUnitStatus[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        lib773A3C4C_gv_cU_GPCutscene[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= libCOOC_gv_cCC_MAXPLAYERS; init_j += 1) {
            lib773A3C4C_gv_cU_GPCmdButtons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= libCOOC_gv_cCC_MAXPLAYERS; init_j += 1) {
            lib773A3C4C_gv_cU_GPCmdButtonArrows[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= libCOOC_gv_cCC_MAXPLAYERS; init_j += 1) {
            lib773A3C4C_gv_cU_GPUnitEnergyLinks[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= libCOOC_gv_cCC_MAXPLAYERS; init_j += 1) {
            lib773A3C4C_gv_cU_GPCmdButtonActiveImage[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= libCOOC_gv_cCC_MAXPLAYERS; init_j += 1) {
            lib773A3C4C_gv_cU_GPCmdButtonBackgroundImage[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lib773A3C4C_gv_objectives[init_i] = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib773A3C4C_gv_heroPings[init_i] = c_invalidPingId;
    }
    lib773A3C4C_gv_cU_HealthWatchDialog = c_invalidDialogId;
    lib773A3C4C_gv_cU_HealthWatchImage = c_invalidDialogControlId;
    for (init_i = 0; init_i <= lib773A3C4C_gv_cUC_HeroMaxCount; init_i += 1) {
        for (init_j = 0; init_j <= libCOOC_gv_cCC_MAXPLAYERS; init_j += 1) {
            lib773A3C4C_gv_cU_HeroReviveTimer[init_i][init_j] = 60.0;
        }
    }
    lib773A3C4C_gv_cU_HeroCooldownTime = 60.0;
    for (init_i = 0; init_i <= lib773A3C4C_gv_cUC_HeroMaxCount; init_i += 1) {
        for (init_j = 0; init_j <= libCOOC_gv_cCC_MAXPLAYERS; init_j += 1) {
            lib773A3C4C_gv_cU_HeroPositionX[init_i][init_j] = 20;
        }
    }
    for (init_i = 0; init_i <= lib773A3C4C_gv_cUC_HeroMaxCount; init_i += 1) {
        for (init_j = 0; init_j <= libCOOC_gv_cCC_MAXPLAYERS; init_j += 1) {
            lib773A3C4C_gv_cU_HeroPositionY[init_i][init_j] = 30;
        }
    }
    for (init_i = 0; init_i <= lib773A3C4C_gv_cUC_HeroMaxCount; init_i += 1) {
        for (init_j = 0; init_j <= libCOOC_gv_cCC_MAXPLAYERS; init_j += 1) {
            lib773A3C4C_gv_cU_HeroShowLevel[init_i][init_j] = true;
        }
    }
    for (init_i = 0; init_i <= lib773A3C4C_gv_cUC_HeroMaxCount; init_i += 1) {
        lib773A3C4C_gv_cU_HeroPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib773A3C4C_gv_cUC_HeroMaxCount; init_i += 1) {
        lib773A3C4C_gv_cU_HeroDialogBorderImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib773A3C4C_gv_cUC_HeroMaxCount; init_i += 1) {
        lib773A3C4C_gv_cU_HeroDialogBorderImageNoEnergy[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib773A3C4C_gv_cUC_HeroMaxCount; init_i += 1) {
        lib773A3C4C_gv_cU_HeroDialogBorderImageAll[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib773A3C4C_gv_cUC_HeroMaxCount; init_i += 1) {
        lib773A3C4C_gv_cU_HeroDialogIconImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib773A3C4C_gv_cUC_HeroMaxCount; init_i += 1) {
        lib773A3C4C_gv_cU_HeroDialogCooldownImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib773A3C4C_gv_cUC_HeroMaxCount; init_i += 1) {
        lib773A3C4C_gv_cU_HeroDialogDamageTakenImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib773A3C4C_gv_cUC_HeroMaxCount; init_i += 1) {
        lib773A3C4C_gv_cU_HeroDialogDamageTakenLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib773A3C4C_gv_cUC_HeroMaxCount; init_i += 1) {
        lib773A3C4C_gv_cU_HeroDialogNameLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib773A3C4C_gv_cUC_HeroMaxCount; init_i += 1) {
        lib773A3C4C_gv_cU_HeroDialogLevelLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib773A3C4C_gv_cUC_HeroMaxCount; init_i += 1) {
        lib773A3C4C_gv_cU_HeroDialogHealthBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib773A3C4C_gv_cUC_HeroMaxCount; init_i += 1) {
        lib773A3C4C_gv_cU_HeroDialogHealthBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib773A3C4C_gv_cUC_HeroMaxCount; init_i += 1) {
        lib773A3C4C_gv_cU_HeroDialogShieldBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib773A3C4C_gv_cUC_HeroMaxCount; init_i += 1) {
        lib773A3C4C_gv_cU_HeroDialogShieldBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib773A3C4C_gv_cUC_HeroMaxCount; init_i += 1) {
        lib773A3C4C_gv_cU_HeroDialogEnergyBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib773A3C4C_gv_cUC_HeroMaxCount; init_i += 1) {
        lib773A3C4C_gv_cU_HeroDialogEnergyBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib773A3C4C_gv_cUC_HeroMaxCount; init_i += 1) {
        lib773A3C4C_gv_cU_HeroDialogHealthLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib773A3C4C_gv_cUC_HeroMaxCount; init_i += 1) {
        lib773A3C4C_gv_cU_HeroDialogEnergyLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib773A3C4C_gv_cUC_HeroMaxCount; init_i += 1) {
        lib773A3C4C_gv_cU_HeroDialogShieldLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib773A3C4C_gv_cUC_HeroMaxCount; init_i += 1) {
        lib773A3C4C_gv_cU_HeroDialogButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib773A3C4C_gv_cUC_HeroMaxCount; init_i += 1) {
        lib773A3C4C_gv_cU_HeroDialogLevelBox[init_i] = c_invalidDialogControlId;
    }
    lib773A3C4C_gv_pointsDialogContinueButton = c_invalidDialogControlId;
    lib773A3C4C_gv_pointsDialogResetPointsButton = c_invalidDialogControlId;
    lib773A3C4C_gv_pointsDialogTutorialButton = c_invalidDialogControlId;
    lib773A3C4C_gv_pointsDialogTutoialDialogContinueButton = c_invalidDialogControlId;
    lib773A3C4C_gv_pointsDialog = c_invalidDialogId;
    lib773A3C4C_gv_pointsDialogTitleDialog = c_invalidDialogId;
    lib773A3C4C_gv_pointsDialogBorder = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib773A3C4C_gv_pointsDialogColumns[init_i] = c_invalidDialogControlId;
    }
    lib773A3C4C_gv_pointsDialogPointsAmountLabel = c_invalidDialogControlId;
    lib773A3C4C_gv_pointsDialogTutorialDialog = c_invalidDialogId;
    lib773A3C4C_gv_pointsDialogTutorialTitleDialog = c_invalidDialogId;
    lib773A3C4C_gv_pointsDialogTutorialDialogText = c_invalidDialogControlId;
    lib773A3C4C_gv_pointsDialogTutorialDialogBorder = c_invalidDialogControlId;
    lib773A3C4C_gv_blackHoleDurationLabel = c_invalidDialogControlId;
    lib773A3C4C_gv_chronoBoostSpeedLabel = c_invalidDialogControlId;
    lib773A3C4C_gv_darkPylonRadiusLabel = c_invalidDialogControlId;
    lib773A3C4C_gv_shadowGuardDurationLabel = c_invalidDialogControlId;
    lib773A3C4C_gv_startingAndMaxSOAEnergyLabel = c_invalidDialogControlId;
    lib773A3C4C_gv_startingSupplyLabel = c_invalidDialogControlId;
    lib773A3C4C_gv_timeStopHasteLabel = c_invalidDialogControlId;
    lib773A3C4C_gv_startingMineralsLabel = c_invalidDialogControlId;
    lib773A3C4C_gv_blackHoleDurationValueLabel = c_invalidDialogControlId;
    lib773A3C4C_gv_chronoBoostSpeedValueLabel = c_invalidDialogControlId;
    lib773A3C4C_gv_darkPylonRadiusValueLabel = c_invalidDialogControlId;
    lib773A3C4C_gv_shadowGuardDurationValueLabel = c_invalidDialogControlId;
    lib773A3C4C_gv_startingAndMaxSOAEnergyValueLabel = c_invalidDialogControlId;
    lib773A3C4C_gv_startingSupplyValueLabel = c_invalidDialogControlId;
    lib773A3C4C_gv_timeStopHasteValueLabel = c_invalidDialogControlId;
    lib773A3C4C_gv_startingMineralsValueLabel = c_invalidDialogControlId;
    lib773A3C4C_gv_blackHoleDurationMinusButton = c_invalidDialogControlId;
    lib773A3C4C_gv_chronoBoostSpeedMinusButton = c_invalidDialogControlId;
    lib773A3C4C_gv_darkPylonRadiusMinusButton = c_invalidDialogControlId;
    lib773A3C4C_gv_shadowGuardDurationMinusButton = c_invalidDialogControlId;
    lib773A3C4C_gv_startingAndMaxSOAEnergyMinusButton = c_invalidDialogControlId;
    lib773A3C4C_gv_startingSupplyMinusButton = c_invalidDialogControlId;
    lib773A3C4C_gv_timeStopHasteMinusButton = c_invalidDialogControlId;
    lib773A3C4C_gv_startingMineralsMinusButton = c_invalidDialogControlId;
    lib773A3C4C_gv_blackHoleDurationPlusButton = c_invalidDialogControlId;
    lib773A3C4C_gv_chronoBoostSpeedPlusButton = c_invalidDialogControlId;
    lib773A3C4C_gv_darkPylonRadiusPlusButton = c_invalidDialogControlId;
    lib773A3C4C_gv_shadowGuardDurationPlusButton = c_invalidDialogControlId;
    lib773A3C4C_gv_startingAndMaxSOAEnergyPlusButton = c_invalidDialogControlId;
    lib773A3C4C_gv_startingSupplyPlusButton = c_invalidDialogControlId;
    lib773A3C4C_gv_timeStopHastePlusButton = c_invalidDialogControlId;
    lib773A3C4C_gv_startingMineralsPlusButton = c_invalidDialogControlId;
    lib773A3C4C_gv_pM_SendTransmissionCampaignPlayingTick = 3;
    lib773A3C4C_gv_pM_SendTransmissionCampaignChatBubbleOn = true;
    lib773A3C4C_gv_pM_SendTransmissionCampaignPortrait = c_invalidPortraitId;
    lib773A3C4C_gv_pU_VSDialog = c_invalidDialogId;
    lib773A3C4C_gv_pU_VSDialog2 = c_invalidDialogId;
    lib773A3C4C_gv_pU_VSDialog3 = c_invalidDialogId;
    lib773A3C4C_gv_pU_VSDialog4 = c_invalidDialogId;
    lib773A3C4C_gv_pU_VSLabelVictoryTitle = c_invalidDialogControlId;
    lib773A3C4C_gv_pU_VSLabelTime = c_invalidDialogControlId;
    lib773A3C4C_gv_pU_VSBtnContinue = c_invalidDialogControlId;
    lib773A3C4C_gv_pU_VSBtnPlayAgain = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib773A3C4C_gv_pU_VSBtnPlayAgain2[init_i] = c_invalidDialogControlId;
    }
    lib773A3C4C_gv_victoryBorder = c_invalidDialogControlId;
    lib773A3C4C_gv_victoryRecapLabel = c_invalidDialogControlId;
    lib773A3C4C_gv_difficulty = StringExternal("Param/Value/lib_773A3C4C_B327A650");
    lib773A3C4C_gv_replayMissionButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lib773A3C4C_gv_achievementImages[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lib773A3C4C_gv_difficutliesDialogItems[init_i] = c_invalidDialogControlId;
    }
    lib773A3C4C_gv_difficultiesDialog = c_invalidDialogId;
    lib773A3C4C_gv_difficultiesTitleDialog = c_invalidDialogId;
    lib773A3C4C_gv_difficultyDialogBorder = c_invalidDialogControlId;
    lib773A3C4C_gv_alliedPlayergroup = PlayerGroupEmpty();
    lib773A3C4C_gv_enemyPlayergroup = PlayerGroupEmpty();
}

// Presets
// Functions
void lib773A3C4C_gf_PC_CampaignPreload () {
    // Automatic Variable Declarations
    // Implementation
    BankLoad("AmbLau", 1);
    lib773A3C4C_gv_ambivalence = BankLastCreated();
    PreloadModel("Assets\\Annihilator_Portrait_GreenEyes.m3", false);
    PreloadModel("Assets\\Avenger.m3", false);
    PreloadModel("Assets\\AvengerPortrait.m3", false);
    PreloadModel("Assets\\Centurion_New.m3", false);
    PreloadModel("Assets\\Centurion_WarpIn.m3", false);
    PreloadModel("Assets\\Corsair_Nerazim.m3", false);
    PreloadModel("Assets\\CorsairShakurasEx2Portrait.m3", false);
    PreloadModel("Assets\\DarkArtanisPortrait.m3", false);
    PreloadModel("Assets\\Executor_Nerazim_Portrait.m3_fixed.m3", false);
    PreloadModel("Assets\\Female_Zeratai_DarkTemplar_Portrait.m3", false);
    PreloadModel("Assets\\Female_Zeratai_DarkTemplar.m3", false);
    PreloadModel("Assets\\Hunted_Marine2.m3", false);
    PreloadModel("Assets\\Nera_Assimilator.m3", false);
    PreloadModel("Assets\\Nera_CyberneticsCore.m3", false);
    PreloadModel("Assets\\Nera_FleetBeacon.m3", false);
    PreloadModel("Assets\\Nera_Gateway.m3", false);
    PreloadModel("Assets\\Nera_Nexus.m3", false);
    PreloadModel("Assets\\Nera_PhotonCannon.m3", false);
    PreloadModel("Assets\\Nera_Stargate.m3", false);
    PreloadModel("Assets\\Nerazim_ProtossShield_Battery_Death.m3", false);
    PreloadModel("Assets\\Nerazim_ProtossShield_Battery_WarpIn.m3", false);
    PreloadModel("Assets\\Nerazim_ProtossShield_Battery.m3", false);
    PreloadModel("Assets\\Nerazim_StalkerPlacement2.m3", false);
    PreloadModel("Assets\\NerazimAssimilatorDeathEx1.m3", false);
    PreloadModel("Assets\\NerazimAssimilatorWarpIn.m3", false);
    PreloadModel("Assets\\NerazimCyberneticsCoreDeathEx1.m3", false);
    PreloadModel("Assets\\NerazimCyberneticsCoreWarpIn.m3", false);
    PreloadModel("Assets\\NerazimFleetBeaconDeathEx1.m3", false);
    PreloadModel("Assets\\NerazimFleetBeaconWarpIn.m3", false);
    PreloadModel("Assets\\NerazimGatewayDeathEx1.m3", false);
    PreloadModel("Assets\\NerazimGatewayWarpIn.m3", false);
    PreloadModel("Assets\\NerazimNexusDeathEx1.m3", false);
    PreloadModel("Assets\\NerazimPhotonCannonDeathEx2_01.m3", false);
    PreloadModel("Assets\\NerazimPhotonCannonWarpIn.m3", false);
    PreloadModel("Assets\\NerazimStargateDeathEx1.m3", false);
    PreloadModel("Assets\\NerazimStargateWarpIn.m3", false);
    PreloadModel("Assets\\NerazimWarpGateDeathEx1.m3", false);
    PreloadModel("Assets\\NexusnerWarpIn.m3", false);
    PreloadModel("Assets\\Probe_Nerazim_Collection_Portrait.m3", false);
    PreloadModel("Assets\\Probe_Nerazim_Collection.m3", false);
    PreloadModel("Assets\\RaszagalPortrait.m3", false);
    PreloadModel("Assets\\RaszagalSignifierUnit.m3", false);
    PreloadModel("Assets\\RayOfShakuras_Portrait.m3", false);
    PreloadModel("Assets\\RohanaNoBraids.m3", false);
    PreloadModel("Assets\\Selendis_NoCords_Zealot.m3", false);
    PreloadModel("Assets\\Signifier.m3", false);
    PreloadModel("Assets\\SignifierPortrait.m3", false);
    PreloadModel("Assets\\SMX3_Urun_NoBraids.m3", false);
    PreloadModel("Assets\\Stalker_Nerazim_Collection.m3", false);
    PreloadModel("Assets\\VoidRay_NerazimCollection.m3", false);
    PreloadModel("Assets\\Votary_Dark.m3", false);
}

void lib773A3C4C_gf_PlayerTechTree () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib773A3C4C_gv_pC_CurrentMap == "TheUnitedOrder")) {
        PlayerSetConsoleSkin(1, "ConsoleProtoss_Nerazim");
        TechTreeUpgradeAddLevel(1, "VoidStalkerBlinkShieldRestore", 1);
        TechTreeUpgradeAddLevel(1, "VoidStalkerStandard", 1);
        TechTreeUpgradeAddLevel(1, "VoidZealotShadowCharge", 1);
        TechTreeUnitAllow(1, "DarkArchon", false);
        TechTreeUnitAllow(1, "HighTemplarShakuras", false);
        TechTreeUnitAllow(1, "CorsairMP", false);
        TechTreeUnitAllow(1, "DarkTemplarShakuras", false);
        TechTreeUnitAllow(1, "VoidRayShakuras", false);
        TechTreeUnitAllow(1, "Oracle", false);
        TechTreeAbilityAllow(1, AbilityCommand("ProtossBuild", 24), false);
        TechTreeAbilityAllow(1, AbilityCommand("ProtossBuild", 18), false);
        TechTreeAbilityAllow(1, AbilityCommand("ProtossBuild", 5), false);
        TechTreeAbilityAllow(1, AbilityCommand("ProtossBuild", 9), false);
        TechTreeAbilityAllow(1, AbilityCommand("ProtossBuild", 11), false);
        TechTreeAbilityAllow(1, AbilityCommand("MaxiumThrust", 0), false);
        TechTreeUpgradeAllow(1, "HiddenProtossAirWeaponsLevel1", false);
        TechTreeUpgradeAllow(1, "ProtossAirWeaponsLevel1", false);
        TechTreeUpgradeAllow(1, "HiddenProtossAirWeaponsLevel2", false);
        TechTreeUpgradeAllow(1, "ProtossAirWeaponsLevel2", false);
        TechTreeUpgradeAllow(1, "ProtossAirWeaponsLevel3", false);
        TechTreeUpgradeAllow(1, "HiddenProtossAirWeaponsLevel3", false);
        TechTreeUpgradeAllow(1, "ProtossAirArmorsLevel1", false);
        TechTreeUpgradeAllow(1, "HiddenProtossAirArmorsLevel1", false);
        TechTreeUpgradeAllow(1, "ProtossAirArmorsLevel2", false);
        TechTreeUpgradeAllow(1, "HiddenProtossAirArmorsLevel2", false);
        TechTreeUpgradeAllow(1, "HiddenProtossAirArmorsLevel3", false);
        TechTreeUpgradeAllow(1, "ProtossAirArmorsLevel3", false);
        TechTreeUpgradeAllow(1, "KaraxTurretRange", false);
        TechTreeUpgradeAllow(1, "KaraxTurretAttackSpeed", false);
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "Allies")) {
        PlayerSetConsoleSkin(1, "ConsoleProtoss_Nerazim");
        TechTreeUpgradeAddLevel(1, "VoidStalkerBlinkShieldRestore", 1);
        TechTreeUpgradeAddLevel(1, "VoidStalkerStandard", 1);
        TechTreeUpgradeAddLevel(1, "VoidZealotShadowCharge", 1);
        TechTreeUpgradeAddLevel(1, "HaveDarkTemplar", 1);
        TechTreeUpgradeAddLevel(1, "VoidDarkTemplarStandard", 1);
        TechTreeUpgradeAddLevel(1, "HaveKhaydarinMonolith", 1);
        TechTreeUnitAllow(1, "CorsairMP", false);
        TechTreeUnitAllow(1, "VoidRayShakuras", false);
        TechTreeUnitAllow(1, "Oracle", false);
        TechTreeAbilityAllow(1, AbilityCommand("ProtossBuild", 9), false);
        TechTreeAbilityAllow(1, AbilityCommand("ProtossBuild", 5), false);
        TechTreeAbilityAllow(1, AbilityCommand("MaxiumThrust", 0), false);
        TechTreeUpgradeAllow(1, "HiddenProtossAirWeaponsLevel1", false);
        TechTreeUpgradeAllow(1, "ProtossAirWeaponsLevel1", false);
        TechTreeUpgradeAllow(1, "HiddenProtossAirWeaponsLevel2", false);
        TechTreeUpgradeAllow(1, "ProtossAirWeaponsLevel2", false);
        TechTreeUpgradeAllow(1, "ProtossAirWeaponsLevel3", false);
        TechTreeUpgradeAllow(1, "HiddenProtossAirWeaponsLevel3", false);
        TechTreeUpgradeAllow(1, "ProtossAirArmorsLevel1", false);
        TechTreeUpgradeAllow(1, "HiddenProtossAirArmorsLevel1", false);
        TechTreeUpgradeAllow(1, "ProtossAirArmorsLevel2", false);
        TechTreeUpgradeAllow(1, "HiddenProtossAirArmorsLevel2", false);
        TechTreeUpgradeAllow(1, "HiddenProtossAirArmorsLevel3", false);
        TechTreeUpgradeAllow(1, "ProtossAirArmorsLevel3", false);
        TechTreeUpgradeAllow(1, "ZeratulArmorsLevel2", false);
        TechTreeUpgradeAllow(1, "ZeratulArmorsLevel3", false);
        TechTreeUpgradeAllow(1, "ProtossGroundArmorsLevel2", false);
        TechTreeUpgradeAllow(1, "ProtossGroundArmorsLevel3", false);
        TechTreeUpgradeAllow(1, "ZeratulShieldsLevel2", false);
        TechTreeUpgradeAllow(1, "ProtossShieldsLevel2", false);
        TechTreeUpgradeAllow(1, "ProtossShieldsLevel12222", false);
        TechTreeUpgradeAllow(1, "ProtossShieldsLevel3", false);
        TechTreeUpgradeAllow(1, "ZeratulShieldsLevel3", false);
        TechTreeUpgradeAllow(1, "ProtossShieldsLevel1222", false);
        TechTreeUpgradeAllow(1, "ProtossGroundWeaponsLevel2", false);
        TechTreeUpgradeAllow(1, "ProtossGroundWeaponsLevel3", false);
        TechTreeUpgradeAllow(1, "ZeratulWeaponsLevel2", false);
        TechTreeUpgradeAllow(1, "ZeratulWeaponsLevel3", false);
        TechTreeUpgradeAllow(1, "ProtossGroundArmorsLevel22", false);
        TechTreeUpgradeAllow(1, "ProtossGroundArmorsLevel32", false);
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "ShroudofShadows")) {
        PlayerSetConsoleSkin(1, "ConsoleProtoss_Nerazim");
        TechTreeAbilityAllow(1, AbilityCommand("VorazunShadowFury", 0), false);
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "TheSlums")) {
        PlayerSetConsoleSkin(1, "ConsoleProtoss_Nerazim");
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "TestofStrength")) {
        PlayerSetConsoleSkin(1, "ConsoleProtoss_Forged");
        TechTreeUpgradeAllow(1, "HiddenProtossAirWeaponsLevel1", false);
        TechTreeUpgradeAllow(1, "HiddenProtossAirWeaponsLevel2", false);
        TechTreeUpgradeAllow(1, "HiddenProtossAirWeaponsLevel3", false);
        TechTreeUpgradeAllow(1, "HiddenProtossAirArmorsLevel1", false);
        TechTreeUpgradeAllow(1, "HiddenProtossAirArmorsLevel2", false);
        TechTreeUpgradeAllow(1, "HiddenProtossAirArmorsLevel3", false);
        TechTreeUpgradeAllow(1, "ZeratulShieldsLevel2", false);
        TechTreeUpgradeAllow(1, "ZeratulShieldsLevel3", false);
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "EnforcingJustice")) {
        PlayerSetConsoleSkin(1, "ConsoleProtoss_Nerazim");
        TechTreeUpgradeAddLevel(1, "VoidStalkerBlinkShieldRestore", 1);
        TechTreeUpgradeAddLevel(1, "VoidStalkerStandard", 1);
        TechTreeUpgradeAddLevel(1, "VoidZealotShadowCharge", 1);
        TechTreeUpgradeAddLevel(1, "VoidDarkTemplarStandard", 1);
        TechTreeUpgradeAddLevel(1, "HaveDarkTemplar", 1);
        TechTreeUpgradeAddLevel(1, "HaveVoidCorsair", 1);
        TechTreeUpgradeAddLevel(1, "HaveKhaydarinMonolith", 1);
        TechTreeUpgradeAddLevel(1, "ShadowGuard", 1);
        TechTreeUpgradeAddLevel(1, "ShadowGuardSpawnCount", 1);
        TechTreeUnitAllow(1, "VoidRayShakuras", false);
        TechTreeUpgradeAllow(1, "ProtossAirWeaponsLevel3", false);
        TechTreeUpgradeAllow(1, "HiddenProtossAirWeaponsLevel3", false);
        TechTreeUpgradeAllow(1, "HiddenProtossAirArmorsLevel3", false);
        TechTreeUpgradeAllow(1, "ProtossAirArmorsLevel3", false);
        TechTreeUpgradeAllow(1, "ZeratulArmorsLevel3", false);
        TechTreeUpgradeAllow(1, "ProtossGroundArmorsLevel3", false);
        TechTreeUpgradeAllow(1, "ProtossShieldsLevel3", false);
        TechTreeUpgradeAllow(1, "ZeratulShieldsLevel3", false);
        TechTreeUpgradeAllow(1, "ProtossGroundWeaponsLevel3", false);
        TechTreeUpgradeAllow(1, "ZeratulWeaponsLevel3", false);
        TechTreeUpgradeAllow(1, "ProtossShieldsLevel1222", false);
        TechTreeUpgradeAllow(1, "ProtossGroundArmorsLevel32", false);
        TechTreeUpgradeAllow(1, "VoidRayPrismaticRange", false);
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "KhalaiCohort")) {
        PlayerSetConsoleSkin(1, "ConsoleProtoss_Classic");
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "BrokenFaith")) {
        PlayerSetConsoleSkin(1, "ConsoleProtoss_Nerazim");
        TechTreeUpgradeAddLevel(1, "VoidStalkerBlinkShieldRestore", 1);
        TechTreeUpgradeAddLevel(1, "VoidStalkerStandard", 1);
        TechTreeUpgradeAddLevel(1, "VoidZealotShadowCharge", 1);
        TechTreeUpgradeAddLevel(1, "VoidDarkTemplarStandard", 1);
        TechTreeUpgradeAddLevel(1, "HaveDarkTemplar", 1);
        TechTreeUpgradeAddLevel(1, "ShadowGuard", 1);
        TechTreeUpgradeAddLevel(1, "ShadowGuardSpawnCount", 1);
        TechTreeUpgradeAddLevel(1, "HaveKhaydarinMonolith", 1);
        TechTreeUpgradeAddLevel(1, "HaveVoidCorsair", 1);
        TechTreeUpgradeAddLevel(1, "VoidVoidRayShakuras", 1);
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "ANewPath")) {
        PlayerSetConsoleSkin(1, "ConsoleProtoss_Nerazim");
    }

}

void lib773A3C4C_gf_AddStartingResources (int lp_startingMinerals, int lp_startingVespene) {
    // Automatic Variable Declarations
    // Implementation
    lib773A3C4C_gv_startingMinerals += lp_startingMinerals;
    PlayerModifyPropertyInt(1, c_playerPropMinerals, c_playerPropOperSetTo, lib773A3C4C_gv_startingMinerals);
    PlayerModifyPropertyInt(1, c_playerPropVespene, c_playerPropOperSetTo, lp_startingVespene);
}

void lib773A3C4C_gf_MakePlayerNerazim (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUpgradeAddLevel(lp_player, "VorazunCommander", 1);
    TechTreeUpgradeAddLevel(lp_player, "Nerazim02", 1);
    TechTreeUpgradeAddLevel(lp_player, "SOAAutoAssimilator", 1);
    TechTreeUpgradeAddLevel(lp_player, "HaveVoidCorsair", 1);
    TechTreeUpgradeAddLevel(lp_player, "ProphecyArtifactResearchZeratulBlink", 1);
    TechTreeUpgradeAddLevel(lp_player, "ZeratulArtifactTier3_DarkShine", 1);
    TechTreeUpgradeAddLevel(lp_player, "ZeratulArtifactTier1_CyberneticsCore", 1);
    TechTreeUpgradeAddLevel(lp_player, "ZeratulArtifactTier2_CyberneticsCore", 1);
    TechTreeUpgradeAddLevel(lp_player, "ZeratulArtifactUpgradeTier2A", 1);
    TechTreeUpgradeAddLevel(lp_player, "ZeratulArtifactTier3", 1);
    TechTreeUpgradeAddLevel(lp_player, "ZeratulArtifactTier1", 1);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "AssimilatorIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "PhotonCannonIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "CyberneticsCoreIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "GatewayIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "NexusIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ShieldBatteryIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ProbeIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "PylonIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "DarkShrineIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "StargateIhanrii", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "FleetBeaconIhanrii", true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 10), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 6), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 13), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 12), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 4), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("SpectreNuke", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("WarpGateTrain", 10), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 20), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 21), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 22), false);
    TechTreeUnitAllow(lp_player, "ScoutMP", false);
    TechTreeUnitAllow(lp_player, "Carrier", false);
    TechTreeUnitAllow(lp_player, "CarrierAiur", false);
    TechTreeUnitAllow(lp_player, "ArbiterMP", false);
    TechTreeUnitAllow(lp_player, "Flagship", false);
    TechTreeUnitAllow(lp_player, "TalDarimMothership", false);
    TechTreeUnitAllow(lp_player, "Mothership", false);
    TechTreeUnitAllow(lp_player, "TempestPurifier", false);
    TechTreeUnitAllow(lp_player, "Tempest", false);
    TechTreeUnitAllow(lp_player, "PhoenixPurifier", false);
    TechTreeUnitAllow(lp_player, "PhoenixAiur", false);
    TechTreeUnitAllow(lp_player, "Phoenix", false);
    TechTreeUnitAllow(lp_player, "ScoutMP", false);
    TechTreeUnitAllow(lp_player, "Scout", false);
    TechTreeUnitAllow(lp_player, "Zealot", false);
    TechTreeUnitAllow(lp_player, "ZealotAiur", false);
    TechTreeUnitAllow(lp_player, "ZealotPurifier", false);
    TechTreeUnitAllow(lp_player, "Stalker", false);
    TechTreeUnitAllow(lp_player, "Dragoon", false);
    TechTreeUnitAllow(lp_player, "Sentry", false);
    TechTreeUnitAllow(lp_player, "SentryAiur", false);
    TechTreeUnitAllow(lp_player, "SentryPurifier", false);
    TechTreeUnitAllow(lp_player, "HighTemplar", false);
    TechTreeUnitAllow(lp_player, "DarkTemplar", false);
    TechTreeUnitAllow(lp_player, "DarkTemplarTaldarim", false);
    TechTreeUnitAllow(lp_player, "VoidRayTaldarim", false);
    TechTreeUnitAllow(lp_player, "Supplicant", false);
    TechTreeUnitAllow(lp_player, "Monitor", false);
    TechTreeUnitAllow(lp_player, "HighTemplarTaldarim", false);
}

void lib773A3C4C_gf_MakePlayerTaldarim (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUpgradeAddLevel(lp_player, "DarkProtoss", 1);
    TechTreeUpgradeAddLevel(lp_player, "Taldarim", 1);
    TechTreeUpgradeAddLevel(lp_player, "AlarakCommander", 1);
    TechTreeUpgradeAddLevel(lp_player, "HaveMonitor", 1);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "AssimilatorTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "FleetBeaconTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ForgeTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "GatewayTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "PhotonCannonTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "PylonTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "RoboticsFacilityTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "RoboticsSupportBayTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "StargateTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ColossusTal", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "HighTemplarTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ImmortalTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "MothershipTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ProbeTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "StalkerTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "VoidRayTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ZealotTaldarim", true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 24), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 21), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 11), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UpgradeToRoboticsFacilityWarpInstant", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UpgradeToRoboticsFacilityWarp", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UpgradeToStargateWarp", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UpgradeToStargateWarpInstant", 0), false);
    TechTreeUnitAllow(lp_player, "DarkPylon", false);
    TechTreeUnitAllow(lp_player, "DarkShrine", false);
    TechTreeUnitAllow(lp_player, "AutomatedAssimilator", false);
    TechTreeUnitAllow(lp_player, "ScoutMP", false);
    TechTreeUnitAllow(lp_player, "Carrier", false);
    TechTreeUnitAllow(lp_player, "CarrierAiur", false);
    TechTreeUnitAllow(lp_player, "ArbiterMP", false);
    TechTreeUnitAllow(lp_player, "Mothership", false);
    TechTreeUnitAllow(lp_player, "TempestPurifier", false);
    TechTreeUnitAllow(lp_player, "Tempest", false);
    TechTreeUnitAllow(lp_player, "PhoenixPurifier", false);
    TechTreeUnitAllow(lp_player, "PhoenixAiur", false);
    TechTreeUnitAllow(lp_player, "Phoenix", false);
    TechTreeUnitAllow(lp_player, "ScoutMP", false);
    TechTreeUnitAllow(lp_player, "Scout", false);
    TechTreeUnitAllow(lp_player, "ZealotAiur", false);
    TechTreeUnitAllow(lp_player, "ZealotPurifier", false);
    TechTreeUnitAllow(lp_player, "Dragoon", false);
    TechTreeUnitAllow(lp_player, "StalkerShakuras", false);
    TechTreeUnitAllow(lp_player, "ZealotShakuras", false);
    TechTreeUnitAllow(lp_player, "DarkTemplarShakuras", false);
    TechTreeUnitAllow(lp_player, "Oracle", false);
    TechTreeUnitAllow(lp_player, "CorsairMP", false);
    TechTreeUnitAllow(lp_player, "DarkArchon", false);
    TechTreeUnitAllow(lp_player, "HighTemplarShakuras", false);
    TechTreeUnitAllow(lp_player, "VoidRayShakuras", false);
    TechTreeUnitAllow(lp_player, "Disruptor", false);
    TechTreeUnitAllow(lp_player, "Sentry", false);
    TechTreeUnitAllow(lp_player, "SentryAiur", false);
    TechTreeUnitAllow(lp_player, "SentryPurifier", false);
    TechTreeUnitAllow(lp_player, "HighTemplar", false);
    TechTreeUnitAllow(lp_player, "DarkTemplar", false);
    TechTreeUnitAllow(lp_player, "ImmortalAiur", false);
    TechTreeUnitAllow(lp_player, "Immortal", false);
    TechTreeUnitAllow(lp_player, "Colossus", false);
    TechTreeUnitAllow(lp_player, "Observer", false);
    TechTreeUnitAllow(lp_player, "Reaver", false);
    TechTreeUpgradeAllow(lp_player, "ProtossShieldsLevel122222", false);
    TechTreeUpgradeAllow(lp_player, "ProtossShieldsLevel12222", false);
    TechTreeUpgradeAllow(lp_player, "ProtossShieldsLevel1222", false);
    TechTreeUpgradeAllow(lp_player, "ProtossGroundArmorsLevel12", false);
    TechTreeUpgradeAllow(lp_player, "ProtossGroundArmorsLevel22", false);
    TechTreeUpgradeAllow(lp_player, "ProtossGroundArmorsLevel32", false);
    TechTreeUpgradeAllow(lp_player, "KaraxTurretRange", false);
    TechTreeUpgradeAllow(lp_player, "KaraxTurretAttackSpeed", false);
    TechTreeUpgradeAllow(lp_player, "ParticleDisruptorEfficency", false);
    TechTreeUpgradeAllow(lp_player, "StalkerResearchBlinkShieldRestore", false);
    TechTreeUpgradeAllow(lp_player, "LegEnhancements", false);
    TechTreeUpgradeAllow(lp_player, "DarkArchonFullStartingEnergy", false);
    TechTreeUpgradeAllow(lp_player, "Heal", false);
    TechTreeUpgradeAllow(lp_player, "MaximumThrust", false);
    TechTreeUpgradeAllow(lp_player, "CorsairPermanentCloak", false);
    TechTreeUpgradeAllow(lp_player, "OracleStasisWardUpgrade", false);
    TechTreeUpgradeAllow(lp_player, "VoidRayPrismaticRange", false);
    TechTreeUpgradeAllow(lp_player, "DarkTemplarResearchShadowDash", false);
    TechTreeUpgradeAllow(lp_player, "SOAWarpGateCharges", false);
}

void lib773A3C4C_gf_InitiateNewMusic (string lp_sountrack) {
    // Automatic Variable Declarations
    // Implementation
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, lp_sountrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
}

void lib773A3C4C_gf_StartofaMissionStart (point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(1, CameraInfoDefault(), 0.0, -1, 10.0, true);
    CameraPan(1, lp_point, 0.0, -1, 10.0, false);
}

void lib773A3C4C_gf_StartofaMissionEnd () {
    // Variable Declarations
    fixed lv_originalDistance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_originalDistance = 35.0;

    // Implementation
    CinematicFade(true, 1.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    VisRevealerDestroy(lib773A3C4C_gv_revealer);
    CameraSetValue(1, c_cameraValueDistance, (lv_originalDistance + 8.0), 0.0, -1, 10.0);
    CameraSetValue(1, c_cameraValueDistance, lv_originalDistance, 1.5, -1, 10.0);
    Wait(1.5, c_timeGame);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.0);
    libNtve_gf_HideScreenButton(true, 1);
    UnitPauseAll(false);
    GameSetMissionTimePaused(false);
}

void lib773A3C4C_gf_StartofaMissionEndMicro () {
    // Variable Declarations
    fixed lv_originalDistance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_originalDistance = 33.0;

    // Implementation
    CinematicFade(true, 1.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    VisRevealerDestroy(lib773A3C4C_gv_revealer);
    CameraSetData(PlayerGroupAll(), "Installation");
    CameraSetValue(1, c_cameraValueDistance, (lv_originalDistance + 8.0), 0.0, -1, 10.0);
    CameraSetValue(1, c_cameraValueDistance, (lv_originalDistance - 4.0), 1.5, -1, 10.0);
    Wait(1.5, c_timeGame);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 1.0);
    libNtve_gf_HideScreenButton(true, 1);
    UnitPauseAll(false);
    GameSetMissionTimePaused(false);
}

void lib773A3C4C_gf_PM_VoidCampaignMissionInit (string lp_map, trigger lp_trigger, int lp_typeOfMission, int lp_enemyDefensePlayer, camerainfo lp_difficultyDialogCamera) {
    // Variable Declarations
    int lv_indexPlayer;
    unit lv_indexUnit;

    // Automatic Variable Declarations
    playergroup auto3A62F774_g;
    unitgroup auto48DBA5D7_g;
    int auto48DBA5D7_u;

    // Variable Initialization

    // Implementation
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAchievementMenuButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartDifficultyPulldown, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogPauseButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartButton, true);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogAbortButton, false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "InfT", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Neut", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "ProZ", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "TerH", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "TerT", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "PZrg", false);
    HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
    UIUnitColorStyleOverride(PlayerGroupAll(), c_unitColorStyleNormal);
    UIStatusBarOverride(PlayerGroupAll(), c_unitStatusGroupAll);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogGenericButton1, true);
    UISetGameMenuItemText(PlayerGroupAll(), c_gameMenuDialogGenericButton1, StringExternal("Param/Value/lib_773A3C4C_BDDF2058"));
    UISetGameMenuItemShortcut(PlayerGroupAll(), c_gameMenuDialogGenericButton1, StringExternal("Param/Value/lib_773A3C4C_2D042632"));
    libCOMI_gf_CM_ChatBarSetMode(libCOMI_ge_CM_ChatBarMode_CM_ChatBarNormal, PlayerGroupAll());
    GameCheatAllow(c_gameCheatCredits, false);
    GameCheatAllow(c_gameCheatTV, false);
    GameCheatAllow(c_gameCheatVictory, false);
    GameCheatAllow(c_gameCheatDefeat, false);
    GameCheatAllow(c_gameCheatNoDefeat, false);
    GameCheatAllow(c_gameCheatNoVictory, false);
    GameCheatAllow(c_gameCheatResourceCustom, false);
    GameCheatAllow(c_gameCheatTechTree, false);
    GameCheatAllow(c_gameCheatTerrazine, false);
    GameCheatAllow(c_gameCheatResearch, false);
    GameCheatAllow(c_gameCheatProgress, false);
    GameCheatAllow(c_gameCheatScene, false);
    GameCheatAllow(c_gameCheatUpgrade, false);
    libNtve_gf_DisplayScreenButton(1, StringExternal("Param/Value/lib_773A3C4C_18183860"), 100, 60, c_anchorCenter, 650, 300, lib773A3C4C_gt_ShowAchievementPanel);
    libNtve_gf_HideScreenButton(false, 1);
    libLbty_gf_EnableDisablePingPanel(false, PlayerGroupAll());
    GameSetMissionTimePaused(true);
    GameSetPauseable(false);
    GamePauseAllCooldowns(true);
    GameSetSpeedValue(c_gameSpeedNormal);
    CameraApplyInfo(1, lp_difficultyDialogCamera, 0.0, -1, 10.0, true);
    lib773A3C4C_gv_pC_CurrentMap = lp_map;
    lib773A3C4C_gv_beginCineTrigger = lp_trigger;
    lib773A3C4C_gv_typeOfMission = lp_typeOfMission;
    lib773A3C4C_gv_defenseEnemyPlayer = lp_enemyDefensePlayer;
    if ((lib773A3C4C_gv_typeOfMission == 1)) {
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    }
    else {
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, true);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    }
    TransmissionSetOption(c_transmissionOptionHideAlertPanel, true);
    PlayerOptionOverride(1, "selectuncontrolable", "1");
    PlayerOptionOverride(1, "simplecommandcard", "0");
    PlayerOptionOverride(1, "displayflyerhelper", "All");
    PlayerOptionOverride(1, "showunitpoints", "0");
    auto3A62F774_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto3A62F774_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) != c_playerTypeUser)) {
            PlayerSetState(lv_indexPlayer, c_playerStateXPGain, false);
            PlayerSetState(lv_indexPlayer, c_playerStateDisplayInLeaderPanel, false);
            PlayerSetState(lv_indexPlayer, c_playerStateDisplayInViewMenu, false);
            PlayerSetState(lv_indexPlayer, c_playerStateShowScore, false);
            PlayerSetState(lv_indexPlayer, c_playerStateFidgetingEnabled, false);
        }
        else {
            PlayerSetState(lv_indexPlayer, c_playerStateXPGain, false);
        }
    }
    UnitEventSetNullVariableInvalid(true);
    auto48DBA5D7_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto48DBA5D7_u = UnitGroupCount(auto48DBA5D7_g, c_unitCountAll);
    for (;; auto48DBA5D7_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto48DBA5D7_g, auto48DBA5D7_u);
        if (lv_indexUnit == null) { break; }
        if ((UnitGetType(lv_indexUnit) != "SoACasterVorazun")) {
            UnitSetPropertyFixed(lv_indexUnit, c_unitPropEnergyPercent, 100.0);
        }

    }
    TriggerExecute(lib773A3C4C_gt_NameUnit, true, false);
    TriggerExecute(lib773A3C4C_gt_EnsureUIOverride, true, false);
    lib773A3C4C_gf_PC_CampaignPreload();
    lib773A3C4C_gf_RemoveUnitOutline();
    lib773A3C4C_gf_InitializePlayers();
    lib773A3C4C_gf_PlayerTechTree();
    lib773A3C4C_gf_InitiateNewMusic("nDLC_Music_Blank");
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
    if (((lib773A3C4C_gv_pC_CurrentMap == "Allies") || (lib773A3C4C_gv_pC_CurrentMap == "EnforcingJustice") || (lib773A3C4C_gv_pC_CurrentMap == "BrokenFaith"))) {
        TriggerEnable(lib773A3C4C_gt_MindControlShieldFix, true);
        lib773A3C4C_gf_PointsDialogCreate();
        TriggerWaitForTrigger(lib773A3C4C_gt_ApplyPointValues, true);
    }

    lib773A3C4C_gv_vICTORYTITLEXSize = 270;
    if ((lib773A3C4C_gv_pC_CurrentMap == "TheUnitedOrder")) {
        lib773A3C4C_gv_missionNameOffsetX = 55;
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "Allies")) {
        lib773A3C4C_gv_missionNameOffsetX = 140;
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "ShroudofShadows")) {
        lib773A3C4C_gv_missionNameOffsetX = 55;
        lib773A3C4C_gv_vICTORYTITLEXSize = 320;
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "TestofStrength")) {
        lib773A3C4C_gv_missionNameOffsetX = 65;
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "EnforcingJustice")) {
        lib773A3C4C_gv_missionNameOffsetX = 65;
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "KhalaiCohort")) {
        lib773A3C4C_gv_missionNameOffsetX = 80;
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "BrokenFaith")) {
        lib773A3C4C_gv_missionNameOffsetX = 80;
    }

    if (((lib773A3C4C_gv_pC_CurrentMap != "ANewPath") && (lib773A3C4C_gv_pC_CurrentMap != "TheSlums"))) {
        lib773A3C4C_gf_CreateDifficultyDialog();
    }
    else {
        TriggerExecute(lib773A3C4C_gv_beginCineTrigger, true, false);
    }
}

void lib773A3C4C_gf_CreateAchievementPanel () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_index = 1;

    // Implementation
    DialogCreate(300, 300, c_anchorRight, 500, 160, true);
    DialogSetTransparency(DialogLastCreated(), 0.0);
    lib773A3C4C_gv_achievementDialog = DialogLastCreated();
    DialogSetVisible(lib773A3C4C_gv_achievementDialog, PlayerGroupAll(), false);
    DialogSetImageVisible(lib773A3C4C_gv_achievementDialog, false);
    libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_achievementDialog, 300, 300, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_glues_pageassets_dialogbg.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    lib773A3C4C_gv_achievementDialogBorder = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lib773A3C4C_gv_achievementDialog, 300, 50, c_anchorCenter, 70, -100, StringExternal("Param/Value/lib_773A3C4C_BDE43183"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lib773A3C4C_gv_achievementDialog, 300, 50, c_anchorCenter, 70, -70, (StringExternal("Param/Value/lib_773A3C4C_870D5827") + lib773A3C4C_gf_GetMissionName()), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_achievementDialog, 70, 70, c_anchorCenter, -75, -30, StringToText(""), "Assets/Textures/btn-border-ability.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lib773A3C4C_gv_achievementSecondaryImage[lv_index] = DialogControlLastCreated();
    if ((BankKeyExists(lib773A3C4C_gv_ambivalence, "Achievements", lib773A3C4C_gv_achievements[lv_index].lv_name) == true)) {
        libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_achievementDialog, 70, 70, c_anchorCenter, -75, -30, (StringExternal("Param/Value/lib_773A3C4C_CDCD28CE") + (StringToText(lib773A3C4C_gv_achievements[lv_index].lv_name) + (StringExternal("Param/Value/lib_773A3C4C_E0A6AD61") + StringToText(lib773A3C4C_gv_achievements[lv_index].lv_description)))), "Assets\\Textures\\ui_battlenet_glue_icons_league_bronze.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        lib773A3C4C_gv_achievementFirstImage[lv_index] = DialogControlLastCreated();
    }
    else {
        libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_achievementDialog, 70, 70, c_anchorCenter, -75, -30, (StringExternal("Param/Value/lib_773A3C4C_B9EA37FE") + (StringToText(lib773A3C4C_gv_achievements[lv_index].lv_name) + (StringExternal("Param/Value/lib_773A3C4C_DDEDE087") + StringToText(lib773A3C4C_gv_achievements[lv_index].lv_description)))), "Assets\\Textures\\sc2_ui_ingame_storymode_panel_faction_lock.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        lib773A3C4C_gv_achievementFirstImage[lv_index] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemColor(lib773A3C4C_gv_achievementFirstImage[lv_index], Color(22*100/255,128*100/255,0), PlayerGroupAll());
    }
    lv_index += 1;
    libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_achievementDialog, 70, 70, c_anchorCenter, 75, -30, StringToText(""), "Assets/Textures/btn-border-ability.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lib773A3C4C_gv_achievementSecondaryImage[lv_index] = DialogControlLastCreated();
    if ((BankKeyExists(lib773A3C4C_gv_ambivalence, "Achievements", lib773A3C4C_gv_achievements[lv_index].lv_name) == true)) {
        libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_achievementDialog, 70, 70, c_anchorCenter, 75, -30, (StringExternal("Param/Value/lib_773A3C4C_6990CE2C") + (StringToText(lib773A3C4C_gv_achievements[lv_index].lv_name) + (StringExternal("Param/Value/lib_773A3C4C_D1081B77") + StringToText(lib773A3C4C_gv_achievements[lv_index].lv_description)))), "Assets\\Textures\\ui_battlenet_glue_icons_league_silver.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        lib773A3C4C_gv_achievementFirstImage[lv_index] = DialogControlLastCreated();
    }
    else {
        libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_achievementDialog, 70, 70, c_anchorCenter, 75, -30, (StringExternal("Param/Value/lib_773A3C4C_92C5A318") + (StringToText(lib773A3C4C_gv_achievements[lv_index].lv_name) + (StringExternal("Param/Value/lib_773A3C4C_713DEDAB") + StringToText(lib773A3C4C_gv_achievements[lv_index].lv_description)))), "Assets\\Textures\\sc2_ui_ingame_storymode_panel_faction_lock.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        lib773A3C4C_gv_achievementFirstImage[lv_index] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemColor(lib773A3C4C_gv_achievementFirstImage[lv_index], Color(22*100/255,128*100/255,0), PlayerGroupAll());
    }
    lv_index += 1;
    libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_achievementDialog, 70, 70, c_anchorCenter, -75, 75, StringToText(""), "Assets/Textures/btn-border-ability.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lib773A3C4C_gv_achievementSecondaryImage[lv_index] = DialogControlLastCreated();
    if ((BankKeyExists(lib773A3C4C_gv_ambivalence, "Achievements", lib773A3C4C_gv_achievements[lv_index].lv_name) == true)) {
        libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_achievementDialog, 70, 70, c_anchorCenter, -75, 75, (StringExternal("Param/Value/lib_773A3C4C_D1AA2572") + (StringToText(lib773A3C4C_gv_achievements[lv_index].lv_name) + (StringExternal("Param/Value/lib_773A3C4C_1B459684") + StringToText(lib773A3C4C_gv_achievements[lv_index].lv_description)))), "Assets\\Textures\\ui_battlenet_glue_icons_league_gold.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        lib773A3C4C_gv_achievementFirstImage[lv_index] = DialogControlLastCreated();
    }
    else {
        libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_achievementDialog, 70, 70, c_anchorCenter, -75, 75, (StringExternal("Param/Value/lib_773A3C4C_AFEB5FF3") + (StringToText(lib773A3C4C_gv_achievements[lv_index].lv_name) + (StringExternal("Param/Value/lib_773A3C4C_2EA83CEE") + StringToText(lib773A3C4C_gv_achievements[lv_index].lv_description)))), "Assets\\Textures\\sc2_ui_ingame_storymode_panel_faction_lock.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        lib773A3C4C_gv_achievementFirstImage[lv_index] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemColor(lib773A3C4C_gv_achievementFirstImage[lv_index], Color(22*100/255,128*100/255,0), PlayerGroupAll());
    }
    lv_index += 1;
    libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_achievementDialog, 70, 70, c_anchorCenter, 75, 75, StringToText(""), "Assets/Textures/btn-border-ability.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lib773A3C4C_gv_achievementSecondaryImage[lv_index] = DialogControlLastCreated();
    if ((BankKeyExists(lib773A3C4C_gv_ambivalence, "Achievements", lib773A3C4C_gv_achievements[lv_index].lv_name) == true)) {
        libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_achievementDialog, 70, 70, c_anchorCenter, 75, 75, (StringExternal("Param/Value/lib_773A3C4C_332B514D") + (StringToText(lib773A3C4C_gv_achievements[lv_index].lv_name) + (StringExternal("Param/Value/lib_773A3C4C_F1B4961C") + StringToText(lib773A3C4C_gv_achievements[lv_index].lv_description)))), "Assets\\Textures\\ui_battlenet_glue_icons_league_grandmaster.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        lib773A3C4C_gv_achievementFirstImage[lv_index] = DialogControlLastCreated();
    }
    else {
        libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_achievementDialog, 70, 70, c_anchorCenter, 75, 75, (StringExternal("Param/Value/lib_773A3C4C_D42B0E96") + (StringToText(lib773A3C4C_gv_achievements[lv_index].lv_name) + (StringExternal("Param/Value/lib_773A3C4C_2CE2B77E") + StringToText(lib773A3C4C_gv_achievements[lv_index].lv_description)))), "Assets\\Textures\\sc2_ui_ingame_storymode_panel_faction_lock.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        lib773A3C4C_gv_achievementFirstImage[lv_index] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemColor(lib773A3C4C_gv_achievementFirstImage[lv_index], Color(22*100/255,128*100/255,0), PlayerGroupAll());
    }
    libNtve_gf_SetDialogItemColor(lib773A3C4C_gv_achievementDialogBorder, Color(22*100/255,128*100/255,0), PlayerGroupAll());
}

trigger auto_lib773A3C4C_gf_AwardAchievement_Trigger = null;
int auto_lib773A3C4C_gf_AwardAchievement_lp_points;
string auto_lib773A3C4C_gf_AwardAchievement_lp_achievementIcon;
string auto_lib773A3C4C_gf_AwardAchievement_lp_achievementName;
text auto_lib773A3C4C_gf_AwardAchievement_lp_achievementDescription;

void lib773A3C4C_gf_AwardAchievement (int lp_points, string lp_achievementIcon, string lp_achievementName, text lp_achievementDescription) {
    auto_lib773A3C4C_gf_AwardAchievement_lp_points = lp_points;
    auto_lib773A3C4C_gf_AwardAchievement_lp_achievementIcon = lp_achievementIcon;
    auto_lib773A3C4C_gf_AwardAchievement_lp_achievementName = lp_achievementName;
    auto_lib773A3C4C_gf_AwardAchievement_lp_achievementDescription = lp_achievementDescription;

    if (auto_lib773A3C4C_gf_AwardAchievement_Trigger == null) {
        auto_lib773A3C4C_gf_AwardAchievement_Trigger = TriggerCreate("auto_lib773A3C4C_gf_AwardAchievement_TriggerFunc");
    }

    TriggerExecute(auto_lib773A3C4C_gf_AwardAchievement_Trigger, false, false);
}

bool auto_lib773A3C4C_gf_AwardAchievement_TriggerFunc (bool testConds, bool runActions) {
    int lp_points = auto_lib773A3C4C_gf_AwardAchievement_lp_points;
    string lp_achievementIcon = auto_lib773A3C4C_gf_AwardAchievement_lp_achievementIcon;
    string lp_achievementName = auto_lib773A3C4C_gf_AwardAchievement_lp_achievementName;
    text lp_achievementDescription = auto_lib773A3C4C_gf_AwardAchievement_lp_achievementDescription;

    int init_i;

    // Variable Declarations
    int lv_achievementNameLabel;
    int lv_description;
    int lv_achievementBackground;
    int[3] lv_achievementDialog;
    color lv_awardColor;
    color lv_nameColor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_achievementNameLabel = c_invalidDialogControlId;
    lv_description = c_invalidDialogControlId;
    lv_achievementBackground = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_achievementDialog[init_i] = c_invalidDialogId;
    }
    lv_awardColor = Color(100,100,100);
    lv_nameColor = Color(100,100,100);

    // Implementation
    if ((BankValueGetAsFlag(lib773A3C4C_gv_ambivalence, "Achievements", lp_achievementName) == false)) {
        BankValueSetFromFlag(lib773A3C4C_gv_ambivalence, "Achievements", lp_achievementName, true);
        BankSave(lib773A3C4C_gv_ambivalence);
        if ((DialogIsVisible(lib773A3C4C_gv_achievementDialog, 1) == true)) {
            DialogDestroy(lib773A3C4C_gv_achievementDialog);
            lib773A3C4C_gf_CreateAchievementPanel();
            DialogSetVisible(lib773A3C4C_gv_achievementDialog, PlayerGroupAll(), true);
        }

        while (!(((lib773A3C4C_gv_achievementSlotFilled[1] == false) || (lib773A3C4C_gv_achievementSlotFilled[2] == false)))) {
            Wait(1.0, c_timeGame);
        }
        if ((lib773A3C4C_gv_achievementSlotFilled[1] == false)) {
            lib773A3C4C_gv_achievementSlotFilled[1] = true;
            DialogCreate(640, 153, c_anchorTop, 0, 0, true);
            lv_achievementDialog[1] = DialogLastCreated();
            DialogSetImageVisible(lv_achievementDialog[1], false);
            libNtve_gf_CreateDialogItemImage(lv_achievementDialog[1], 800, 191, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_achievement_metalframe.dds", c_triggerImageTypeEndCap, true, Color(100,100,100), c_triggerBlendModeNormal);
            lv_achievementBackground = DialogControlLastCreated();
            lv_awardColor = Color(77.25, 96.08, 100.00);
            lv_nameColor = Color(21.18, 61.18, 85.49);
            DialogControlSetFullDialog(lv_achievementBackground, PlayerGroupAll(), true);
            DialogSetVisible(lv_achievementDialog[1], PlayerGroupAll(), true);
            SoundPlay(SoundLink("UI_BNet_Achievement", -1), PlayerGroupAll(), 100.0, 0.0);
            DialogSetTransparency(lv_achievementDialog[1], 100.0);
            Wait(0.1, c_timeGame);
            DialogSetTransparency(lv_achievementDialog[1], 90.0);
            Wait(0.1, c_timeGame);
            DialogSetTransparency(lv_achievementDialog[1], 80.0);
            Wait(0.1, c_timeGame);
            DialogSetTransparency(lv_achievementDialog[1], 70.0);
            Wait(0.1, c_timeGame);
            DialogSetTransparency(lv_achievementDialog[1], 60.0);
            Wait(0.1, c_timeGame);
            DialogSetTransparency(lv_achievementDialog[1], 50.0);
            Wait(0.1, c_timeGame);
            DialogSetTransparency(lv_achievementDialog[1], 40.0);
            Wait(0.1, c_timeGame);
            DialogSetTransparency(lv_achievementDialog[1], 30.0);
            Wait(0.1, c_timeGame);
            DialogSetTransparency(lv_achievementDialog[1], 20.0);
            Wait(0.1, c_timeGame);
            DialogSetTransparency(lv_achievementDialog[1], 10.0);
            Wait(0.1, c_timeGame);
            DialogSetTransparency(lv_achievementDialog[1], 0.0);
            libNtve_gf_CreateDialogItemLabel(lv_achievementDialog[1], 500, 50, c_anchorTopLeft, 145, 40, (StringExternal("Param/Value/lib_773A3C4C_92299D76") + StringToText(lp_achievementName)), ColorWithAlpha(0,0,0,0), false, 0.5);
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_awardColor, PlayerGroupAll());
            lv_achievementNameLabel = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(lv_achievementDialog[1], 353, 100, c_anchorTopLeft, 0, 0, (StringExternal("Param/Value/lib_773A3C4C_5013A0D0") + (lp_achievementDescription + StringExternal("Param/Value/lib_773A3C4C_F24D346C"))), ColorWithAlpha(0,0,0,0), false, 0.5);
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_nameColor, PlayerGroupAll());
            lv_description = DialogControlLastCreated();
            DialogControlSetPositionRelative(lv_description, PlayerGroupAll(), c_anchorTopLeft, lv_achievementNameLabel, c_anchorBottomLeft, 0, -25);
            libNtve_gf_CreateDialogItemLabel(lv_achievementDialog[1], 84, 50, c_anchorTopRight, 40, 60, (StringExternal("Param/Value/lib_773A3C4C_7E2CD885") + (IntToText(lp_points) + StringExternal("Param/Value/lib_773A3C4C_9DD19647"))), ColorWithAlpha(0,0,0,0), false, 0.5);
            libNtve_gf_CreateDialogItemImage(lv_achievementDialog[1], 76, 76, c_anchorTopLeft, 44, 40, StringToText(""), lp_achievementIcon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            Wait(5.0, c_timeGame);
            DialogSetTransparency(lv_achievementDialog[1], 10.0);
            Wait(0.1, c_timeGame);
            DialogSetTransparency(lv_achievementDialog[1], 20.0);
            Wait(0.1, c_timeGame);
            DialogSetTransparency(lv_achievementDialog[1], 30.0);
            Wait(0.1, c_timeGame);
            DialogSetTransparency(lv_achievementDialog[1], 40.0);
            Wait(0.1, c_timeGame);
            DialogSetTransparency(lv_achievementDialog[1], 50.0);
            Wait(0.1, c_timeGame);
            DialogSetTransparency(lv_achievementDialog[1], 60.0);
            Wait(0.1, c_timeGame);
            DialogSetTransparency(lv_achievementDialog[1], 70.0);
            Wait(0.1, c_timeGame);
            DialogSetTransparency(lv_achievementDialog[1], 80.0);
            Wait(0.1, c_timeGame);
            DialogSetTransparency(lv_achievementDialog[1], 90.0);
            Wait(0.1, c_timeGame);
            DialogSetTransparency(lv_achievementDialog[1], 100.0);
            Wait(0.1, c_timeGame);
            DialogDestroy(lv_achievementDialog[1]);

            lib773A3C4C_gv_achievementSlotFilled[1] = false;
        }
        else {
            if ((lib773A3C4C_gv_achievementSlotFilled[2] == false)) {
                lib773A3C4C_gv_achievementSlotFilled[2] = true;
                DialogCreate(640, 153, c_anchorTop, 0, 250, true);
                lv_achievementDialog[2] = DialogLastCreated();
                DialogSetImageVisible(lv_achievementDialog[2], false);
                libNtve_gf_CreateDialogItemImage(lv_achievementDialog[2], 800, 191, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_achievement_metalframe.dds", c_triggerImageTypeEndCap, true, Color(100,100,100), c_triggerBlendModeNormal);
                lv_achievementBackground = DialogControlLastCreated();
                lv_awardColor = Color(77.25, 96.08, 100.00);
                lv_nameColor = Color(21.18, 61.18, 85.49);
                DialogControlSetFullDialog(lv_achievementBackground, PlayerGroupAll(), true);
                DialogSetVisible(lv_achievementDialog[2], PlayerGroupAll(), true);
                SoundPlay(SoundLink("UI_BNet_Achievement", -1), PlayerGroupAll(), 100.0, 0.0);
                DialogSetTransparency(lv_achievementDialog[2], 100.0);
                Wait(0.1, c_timeGame);
                DialogSetTransparency(lv_achievementDialog[2], 90.0);
                Wait(0.1, c_timeGame);
                DialogSetTransparency(lv_achievementDialog[2], 80.0);
                Wait(0.1, c_timeGame);
                DialogSetTransparency(lv_achievementDialog[2], 70.0);
                Wait(0.1, c_timeGame);
                DialogSetTransparency(lv_achievementDialog[2], 60.0);
                Wait(0.1, c_timeGame);
                DialogSetTransparency(lv_achievementDialog[2], 50.0);
                Wait(0.1, c_timeGame);
                DialogSetTransparency(lv_achievementDialog[2], 40.0);
                Wait(0.1, c_timeGame);
                DialogSetTransparency(lv_achievementDialog[2], 30.0);
                Wait(0.1, c_timeGame);
                DialogSetTransparency(lv_achievementDialog[2], 20.0);
                Wait(0.1, c_timeGame);
                DialogSetTransparency(lv_achievementDialog[2], 10.0);
                Wait(0.1, c_timeGame);
                DialogSetTransparency(lv_achievementDialog[2], 0.0);
                libNtve_gf_CreateDialogItemLabel(lv_achievementDialog[2], 500, 50, c_anchorTopLeft, 145, 40, (StringExternal("Param/Value/lib_773A3C4C_98000BDF") + StringToText(lp_achievementName)), ColorWithAlpha(0,0,0,0), false, 0.5);
                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_awardColor, PlayerGroupAll());
                lv_achievementNameLabel = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemLabel(lv_achievementDialog[2], 353, 100, c_anchorTopLeft, 0, 0, (StringExternal("Param/Value/lib_773A3C4C_697DD81A") + (lp_achievementDescription + StringExternal("Param/Value/lib_773A3C4C_25F36F1B"))), ColorWithAlpha(0,0,0,0), false, 0.5);
                libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_nameColor, PlayerGroupAll());
                lv_description = DialogControlLastCreated();
                DialogControlSetPositionRelative(lv_description, PlayerGroupAll(), c_anchorTopLeft, lv_achievementNameLabel, c_anchorBottomLeft, 0, -25);
                libNtve_gf_CreateDialogItemLabel(lv_achievementDialog[2], 84, 50, c_anchorTopRight, 40, 60, (StringExternal("Param/Value/lib_773A3C4C_BE96AA2B") + (IntToText(lp_points) + StringExternal("Param/Value/lib_773A3C4C_1247D095"))), ColorWithAlpha(0,0,0,0), false, 0.5);
                libNtve_gf_CreateDialogItemImage(lv_achievementDialog[2], 76, 76, c_anchorTopLeft, 44, 40, StringToText(""), lp_achievementIcon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                Wait(5.0, c_timeGame);
                DialogSetTransparency(lv_achievementDialog[2], 10.0);
                Wait(0.1, c_timeGame);
                DialogSetTransparency(lv_achievementDialog[2], 20.0);
                Wait(0.1, c_timeGame);
                DialogSetTransparency(lv_achievementDialog[2], 30.0);
                Wait(0.1, c_timeGame);
                DialogSetTransparency(lv_achievementDialog[2], 40.0);
                Wait(0.1, c_timeGame);
                DialogSetTransparency(lv_achievementDialog[2], 50.0);
                Wait(0.1, c_timeGame);
                DialogSetTransparency(lv_achievementDialog[2], 60.0);
                Wait(0.1, c_timeGame);
                DialogSetTransparency(lv_achievementDialog[2], 70.0);
                Wait(0.1, c_timeGame);
                DialogSetTransparency(lv_achievementDialog[2], 80.0);
                Wait(0.1, c_timeGame);
                DialogSetTransparency(lv_achievementDialog[2], 90.0);
                Wait(0.1, c_timeGame);
                DialogSetTransparency(lv_achievementDialog[2], 100.0);
                Wait(0.1, c_timeGame);
                DialogDestroy(lv_achievementDialog[2]);

                lib773A3C4C_gv_achievementSlotFilled[2] = false;
            }

        }
    }

    return true;
}

void lib773A3C4C_gf_CheckIfInAchievementDialog () {
    // Automatic Variable Declarations
    // Implementation
    if ((DialogIsVisible(lib773A3C4C_gv_achievementDialog, 1) == true)) {
        DialogSetVisible(lib773A3C4C_gv_achievementDialog, PlayerGroupAll(), false);
    }

    libNtve_gf_HideScreenButton(false, 1);
    if ((TransmissionPlayerHasActiveTransmission(1) == true)) {
        PortraitSetVisible(lib773A3C4C_gv_pM_SendTransmissionCampaignPortrait, PlayerGroupAll(), false, false);
    }

}

trigger auto_lib773A3C4C_gf_DisplayMissionTip_Trigger = null;

void lib773A3C4C_gf_DisplayMissionTip () {
    if (auto_lib773A3C4C_gf_DisplayMissionTip_Trigger == null) {
        auto_lib773A3C4C_gf_DisplayMissionTip_Trigger = TriggerCreate("auto_lib773A3C4C_gf_DisplayMissionTip_TriggerFunc");
    }

    TriggerExecute(auto_lib773A3C4C_gf_DisplayMissionTip_Trigger, false, false);
}

bool auto_lib773A3C4C_gf_DisplayMissionTip_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/HelpTipCallout");
    lib773A3C4C_gv_pM_MissionHelpButtonTipPanel = DialogControlLastCreated();
    DialogControlSetVisible(lib773A3C4C_gv_pM_MissionHelpButtonTipPanel, PlayerGroupAll(), true);
    Wait(4.0, c_timeReal);
    if ((lib773A3C4C_gv_pM_MissionHelpButtonTipPanel != c_invalidDialogControlId)) {
        DialogControlSetVisible(lib773A3C4C_gv_pM_MissionHelpButtonTipPanel, PlayerGroupAll(), false);
    }

    return true;
}

void lib773A3C4C_gf_RemoveUnitOutline () {
    // Automatic Variable Declarations
    unitgroup auto76147245_g;
    int auto76147245_u;
    unit auto76147245_var;

    // Implementation
    auto76147245_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto76147245_u = UnitGroupCount(auto76147245_g, c_unitCountAll);
    for (;; auto76147245_u -= 1) {
        auto76147245_var = UnitGroupUnitFromEnd(auto76147245_g, auto76147245_u);
        if (auto76147245_var == null) { break; }
        if ((UnitFilterMatch(auto76147245_var, UnitGetOwner(auto76147245_var), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) && (UnitGetOwner(auto76147245_var) != 0)) {
            libNtve_gf_SendActorMessageToUnit(auto76147245_var, "ModelFlagsClear OutlineEmitter,OutlineOccluder");
        }

    }
}

void lib773A3C4C_gf_AddUnitOutline () {
    // Automatic Variable Declarations
    unitgroup autoE0D362BF_g;
    int autoE0D362BF_u;
    unit autoE0D362BF_var;

    // Implementation
    autoE0D362BF_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE0D362BF_u = UnitGroupCount(autoE0D362BF_g, c_unitCountAll);
    for (;; autoE0D362BF_u -= 1) {
        autoE0D362BF_var = UnitGroupUnitFromEnd(autoE0D362BF_g, autoE0D362BF_u);
        if (autoE0D362BF_var == null) { break; }
        if ((UnitFilterMatch(autoE0D362BF_var, UnitGetOwner(autoE0D362BF_var), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) && (UnitGetOwner(autoE0D362BF_var) != 0)) {
            libNtve_gf_SendActorMessageToUnit(autoE0D362BF_var, "ModelFlagsSet OutlineEmitter,OutlineOccluder");
        }

    }
}

void lib773A3C4C_gf_SOAInit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib773A3C4C_gv_cU_GPInitialized[lp_player] == true)) {
        return ;
    }

    lib773A3C4C_gv_cU_GPInitialized[lp_player] = true;
    if ((lib773A3C4C_gv_cU_GPPanelHolder == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/GlobalCastingPanel");
        lib773A3C4C_gv_cU_GPPanelHolder = DialogControlLastCreated();
        DialogControlSetVisible(lib773A3C4C_gv_cU_GPPanelHolder, PlayerGroupAll(), false);
    }

    lib773A3C4C_gf_CU_GPInitProtoss(lp_player);
}

void lib773A3C4C_gf_CU_GPInitProtoss (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int auto5DD2B944_ae = 4;
    const int auto5DD2B944_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    TriggerEnable(lib773A3C4C_gt_CU_GPVitalChangesP1, true);
    DialogControlCreateInPanelFromTemplate(lib773A3C4C_gv_cU_GPPanelHolder, c_triggerControlTypePanel, "Coop_GlobalCastingTemplates/ProtossCasterPanelTemplate");
    lib773A3C4C_gv_cU_GPPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(lib773A3C4C_gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "SoAButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "LotV_SoAMissionUIPanel/SoACommandPanelTemplate");
    lib773A3C4C_gv_cU_GPCmdPanel[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (auto5DD2B944_ai >= 0 && lv_buttonIndex <= auto5DD2B944_ae) || (auto5DD2B944_ai < 0 && lv_buttonIndex >= auto5DD2B944_ae) ) ; lv_buttonIndex += auto5DD2B944_ai ) {
        DialogControlHookup(lib773A3C4C_gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        lib773A3C4C_gv_cU_GPCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(lib773A3C4C_gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "SoAAbilityArrow0" + IntToString(lv_buttonIndex));
        lib773A3C4C_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlSetPositionRelative(lib773A3C4C_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player], PlayerGroupSingle(lp_player), c_anchorTop, lib773A3C4C_gv_cU_GPCmdButtons[lv_buttonIndex][lp_player], c_anchorBottom, 0, 15);
    }
    DialogControlHookup(lib773A3C4C_gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "SoAEnergyTooltipHitFrame");
    lib773A3C4C_gv_cU_GPEnergyTooltip[lp_player] = DialogControlLastCreated();
    DialogControlHookup(lib773A3C4C_gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "SoAEnergyBarFill");
    lib773A3C4C_gv_cU_GPEnergyBar[lp_player] = DialogControlLastCreated();
    DialogControlHookup(lib773A3C4C_gv_cU_GPPanel[lp_player], c_triggerControlTypeLabel, "SoAEnergyLabel");
    lib773A3C4C_gv_cU_GPEnergyLabel[lp_player] = DialogControlLastCreated();
    DialogControlSetVisible(lib773A3C4C_gv_cU_GPPanel[lp_player], PlayerGroupAll(), false);
    DialogControlHookup(lib773A3C4C_gv_cU_GPPanel[lp_player], c_triggerControlTypeCutscene, "SoACommandCutscene");
    lib773A3C4C_gv_cU_GPCutscene[lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemCutscene(lib773A3C4C_gv_cU_GPCutscene[lp_player], "Cutscenes\\UI_SoAMission.SC2Cutscene", PlayerGroupAll());
    CutscenePlay(CutsceneGetTriggerControl(lib773A3C4C_gv_cU_GPCutscene[lp_player]));
    DialogControlHookup(lib773A3C4C_gv_cU_GPEnergyBar[lp_player], c_triggerControlTypeCutscene, "SoAFillScene");
    lib773A3C4C_gv_cU_GPEnergyBarScene[lp_player] = DialogControlLastCreated();
    CutscenePlay(CutsceneGetTriggerControl(lib773A3C4C_gv_cU_GPEnergyBarScene[lp_player]));
    DialogControlHookup(lib773A3C4C_gv_cU_GPPanel[lp_player], c_triggerControlTypeCutscene, "SoAOverlayCutscene");
    lib773A3C4C_gv_cU_GPEnergyGlassScene[lp_player] = DialogControlLastCreated();
    CutscenePlay(CutsceneGetTriggerControl(lib773A3C4C_gv_cU_GPEnergyGlassScene[lp_player]));
    if ((lib773A3C4C_gv_startingAndMaxSOAEnergyValue != 0)) {
        TextExpressionSetToken("Param/Expression/lib_773A3C4C_A5113BE0", "STDTOOLTIP", StringExternal("UI/SoAMissionEnergyTooltip"));
        TextExpressionSetToken("Param/Expression/lib_773A3C4C_A5113BE0", "ENERGY", IntToText(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryVorazunStartingAndMaxSoAEnergyDisplayDummy", "Amount", lp_player)));
        libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_cU_GPEnergyTooltip[lp_player], TextExpressionAssemble("Param/Expression/lib_773A3C4C_A5113BE0"), PlayerGroupSingle(lp_player));
    }
    else {
        libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_cU_GPEnergyTooltip[lp_player], StringExternal("Param/Value/lib_773A3C4C_2F43CE29"), PlayerGroupSingle(lp_player));
    }
}

abilcmd lib773A3C4C_gf_CU_GPActiveAbilityCommand (int lp_slot, int lp_player) {
    // Variable Declarations
    int lv_cardIndex;
    int lv_buttonIndex;
    string lv_path;
    abilcmd lv_command;

    // Automatic Variable Declarations
    int auto66624DBF_ae;
    const int auto66624DBF_ai = 1;
    int auto8488DC05_ae;
    const int auto8488DC05_ai = 1;

    // Variable Initialization
    lv_path = "";

    // Implementation
    auto66624DBF_ae = (CatalogFieldValueCount(c_gameCatalogUnit, "SoACaster", "CardLayouts", lp_player)-1);
    lv_cardIndex = 0;
    for ( ; ( (auto66624DBF_ai >= 0 && lv_cardIndex <= auto66624DBF_ae) || (auto66624DBF_ai < 0 && lv_cardIndex >= auto66624DBF_ae) ) ; lv_cardIndex += auto66624DBF_ai ) {
        auto8488DC05_ae = (CatalogFieldValueCount(c_gameCatalogUnit, "SoACaster", (("CardLayouts[" + IntToString(lv_cardIndex) + "].LayoutButtons")), lp_player)-1);
        lv_buttonIndex = 0;
        for ( ; ( (auto8488DC05_ai >= 0 && lv_buttonIndex <= auto8488DC05_ae) || (auto8488DC05_ai < 0 && lv_buttonIndex >= auto8488DC05_ae) ) ; lv_buttonIndex += auto8488DC05_ai ) {
            lv_path = ("CardLayouts[" + IntToString(lv_cardIndex) + "].LayoutButtons[" + IntToString(lv_buttonIndex) + "]");
            if ((CatalogFieldValueGet(c_gameCatalogUnit, "SoACaster", ((lv_path + ".Type")), lp_player) == "AbilCmd") && (CatalogFieldValueGetAsInt(c_gameCatalogUnit, "SoACaster", ((lv_path + ".Row")), lp_player) == 0) && (CatalogFieldValueGetAsInt(c_gameCatalogUnit, "SoACaster", ((lv_path + ".Column")), lp_player) == (lp_slot-1))) {
                lv_command = StringToAbilCmd(CatalogFieldValueGet(c_gameCatalogUnit, "SoACaster", ((lv_path + ".AbilCmd")), lp_player));
                if ((TechTreeAbilityIsAllowed(lp_player, lv_command) == true)) {
                    return lv_command;
                }

            }

        }
    }
    return null;
}

void lib773A3C4C_gf_CU_GPSoAUpdateVitals (int lp_player) {
    // Variable Declarations
    playergroup lv_soAPlayers;
    int lv_orbHeight;
    fixed lv_energyFloored;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_soAPlayers = PlayerGroupEmpty();

    // Implementation
    lv_energyFloored = Floor(UnitGetPropertyFixed(lib773A3C4C_gv_cU_GPUnit[lp_player], c_unitPropEnergy, c_unitPropCurrent));
    if ((lv_energyFloored == lib773A3C4C_gv_cU_GPLastEnergyUpdate[lp_player])) {
        return ;
    }

    lib773A3C4C_gv_cU_GPLastEnergyUpdate[lp_player] = lv_energyFloored;
    lv_soAPlayers = PlayerGroupSingle(lp_player);
    TextExpressionSetToken("Param/Expression/lib_773A3C4C_12D07E36", "A", IntToText(FixedToInt(lv_energyFloored)));
    libNtve_gf_SetDialogItemText(lib773A3C4C_gv_cU_GPEnergyLabel[lp_player], TextExpressionAssemble("Param/Expression/lib_773A3C4C_12D07E36"), lv_soAPlayers);
    DialogControlSendAnimationEvent(lib773A3C4C_gv_cU_GPEnergyBarScene[lp_player], PlayerGroupAll(), "SetEnergyPlay");
    DialogControlSetAnimationTime(lib773A3C4C_gv_cU_GPEnergyBarScene[lp_player], PlayerGroupAll(), "EnergyLevel", UnitGetPropertyFixed(lib773A3C4C_gv_cU_GPUnit[lp_player], c_unitPropEnergyPercent, c_unitPropCurrent));
    DialogControlSendAnimationEvent(lib773A3C4C_gv_cU_GPEnergyBarScene[lp_player], PlayerGroupAll(), "SetEnergyPause");
    lib773A3C4C_gf_CU_GPCheckForEnergyHighlight(lp_player);
}

void lib773A3C4C_gf_CU_GPHighlightButton (int lp_slot, bool lp_on, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib773A3C4C_gv_cU_GPCmdButtonArrows[lp_slot][lp_player] == c_invalidDialogControlId)) {
        return ;
    }

    lib773A3C4C_gv_cU_GPButtonHighlighted[lp_slot][lp_player] = lp_on;
    if ((lp_on == true) && (DialogControlIsVisible(lib773A3C4C_gv_cU_GPPanel[lp_player], lp_player) == true)) {
        DialogControlSetVisible(lib773A3C4C_gv_cU_GPCmdButtonArrows[lp_slot][lp_player], PlayerGroupSingle(lp_player), true);
    }
    else {
        DialogControlSetVisible(lib773A3C4C_gv_cU_GPCmdButtonArrows[lp_slot][lp_player], PlayerGroupSingle(lp_player), false);
    }
}

void lib773A3C4C_gf_CU_GPCheckForEnergyHighlight (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerRace(lp_player) != "Prot") || (libCOOC_gf_ActiveCommanderForPlayer(lp_player) == "ProtossAlarak") || (libCOOC_gf_ActiveCommanderForPlayer(lp_player) == "ProtossFenix") || (DialogControlIsVisible(lib773A3C4C_gv_cU_GPCmdPanel[lp_player], lp_player) == false))) {
        return ;
    }

    if ((UnitGetPropertyFixed(lib773A3C4C_gv_cU_GPUnit[lp_player], c_unitPropEnergyPercent, c_unitPropCurrent) == 100.0)) {
        lib773A3C4C_gf_CU_GPEnergyHighlight(true, lp_player);
    }
    else {
        lib773A3C4C_gf_CU_GPEnergyHighlight(false, lp_player);
    }
}

void lib773A3C4C_gf_CU_GPEnergyHighlight (bool lp_enable, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_enable == true)) {
        lib773A3C4C_gv_cU_GPEnergyHighlighting[lp_player] = true;
        CutsceneGoToBookmark(CutsceneGetTriggerControl(lib773A3C4C_gv_cU_GPEnergyGlassScene[lp_player]), "PowerUp");
        CutsceneGoToBookmark(CutsceneGetTriggerControl(lib773A3C4C_gv_cU_GPEnergyBarScene[lp_player]), "PowerUp");
        CutsceneGoToBookmark(CutsceneGetTriggerControl(lib773A3C4C_gv_cU_GPCutscene[lp_player]), "PowerUp");
    }
    else {
        if ((lib773A3C4C_gv_cU_GPEnergyHighlighting[lp_player] == true)) {
            CutsceneGoToBookmark(CutsceneGetTriggerControl(lib773A3C4C_gv_cU_GPEnergyGlassScene[lp_player]), "PowerDown");
            CutsceneGoToBookmark(CutsceneGetTriggerControl(lib773A3C4C_gv_cU_GPEnergyBarScene[lp_player]), "PowerDown");
            CutsceneGoToBookmark(CutsceneGetTriggerControl(lib773A3C4C_gv_cU_GPCutscene[lp_player]), "PowerDown");
            lib773A3C4C_gv_cU_GPEnergyHighlighting[lp_player] = false;
        }

    }
}

void lib773A3C4C_gf_LinkUnitEnergyToGlobalCasterButton (unit lp_unit, int lp_player, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemUnit(lib773A3C4C_gv_cU_GPUnitEnergyLinks[lp_index][lp_player], lp_unit, PlayerGroupSingle(lp_player));
    DialogControlSetVisible(lib773A3C4C_gv_cU_GPUnitEnergyLinks[lp_index][lp_player], PlayerGroupSingle(lp_player), true);
}

void lib773A3C4C_gf_SOASetUnit (unit lp_casterUnit, int lp_player) {
    // Automatic Variable Declarations
    unitgroup auto09674BB1_g;
    int auto09674BB1_u;
    unit auto09674BB1_var;

    // Implementation
    lib773A3C4C_gf_SOAInit(lp_player);
    lib773A3C4C_gv_cU_GPUnit[lp_player] = lp_casterUnit;
    auto09674BB1_g = lib773A3C4C_gv_cU_GPCasterGroup[lp_player];
    auto09674BB1_u = UnitGroupCount(auto09674BB1_g, c_unitCountAll);
    for (;; auto09674BB1_u -= 1) {
        auto09674BB1_var = UnitGroupUnitFromEnd(auto09674BB1_g, auto09674BB1_u);
        if (auto09674BB1_var == null) { break; }
        UnitGroupRemove(lib773A3C4C_gv_cU_GPCasterGroup[lp_player], auto09674BB1_var);
    }
    UnitGroupAdd(lib773A3C4C_gv_cU_GPCasterGroup[lp_player], lp_casterUnit);
    libNtve_gf_SetDialogItemUnitGroup(lib773A3C4C_gv_cU_GPCmdPanel[lp_player], lib773A3C4C_gv_cU_GPCasterGroup[lp_player], PlayerGroupSingle(lp_player));
    lib773A3C4C_gf_CU_GPSoAUpdateVitals(lp_player);
}

void lib773A3C4C_gf_SOAShowHide (bool lp_showHide, int lp_player, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    lib773A3C4C_gv_cU_GPVisible[lp_player] = (lp_showHide == true);
    lib773A3C4C_gf_CU_GPVisibilitySet(lp_showHide, lp_player, lp_duration);
}

void lib773A3C4C_gf_CU_GPVisibilitySet (bool lp_showHide, int lp_player, fixed lp_duration) {
    // Variable Declarations
    playergroup lv_updatePlayers;
    int lv_buttonIndex;
    int lv__2DGlobalPanel;

    // Automatic Variable Declarations
    const int auto8C43B708_ae = 4;
    const int auto8C43B708_ai = 1;
    const int autoF1A0F968_ae = 4;
    const int autoF1A0F968_ai = 1;

    // Variable Initialization
    lv_updatePlayers = PlayerGroupEmpty();
    lv__2DGlobalPanel = UserDataGetInt("PlayerCommanders", libCOOC_gf_CC_CommanderUserInstance(PlayerCommander(lp_player)), "GlobalCast2D", 1);

    // Implementation
    lv_updatePlayers = PlayerGroupSingle(lp_player);
    lib773A3C4C_gf_SOAInit(lp_player);
    if ((lib773A3C4C_gv_cU_GPPanel[lp_player] == c_invalidDialogControlId)) {
        return ;
    }

    if ((lv__2DGlobalPanel == 1)) {
        DialogControlSetVisible(lib773A3C4C_gv_cU_GPPanel[lp_player], lv_updatePlayers, lp_showHide);
        return ;
    }

    if ((lib773A3C4C_gv_cU_GPCutsceneFilter[lp_player] != "")) {
        CutsceneAddFilter(CutsceneGetTriggerControl(lib773A3C4C_gv_cU_GPCutscene[lp_player]), lib773A3C4C_gv_cU_GPCutsceneFilter[lp_player]);
    }

    if ((lp_showHide == true)) {
        DialogControlSetVisible(lib773A3C4C_gv_cU_GPPanelHolder, lv_updatePlayers, lp_showHide);
        DialogControlSetVisible(lib773A3C4C_gv_cU_GPPanel[lp_player], lv_updatePlayers, lp_showHide);
        if ((lib773A3C4C_gv_cU_GPCutscene[lp_player] == c_invalidDialogControlId)) {
            return ;
        }

        CutsceneSetTime(CutsceneGetTriggerControl(lib773A3C4C_gv_cU_GPCutscene[lp_player]), 0);
        CutscenePlay(CutsceneGetTriggerControl(lib773A3C4C_gv_cU_GPCutscene[lp_player]));
        if ((lib773A3C4C_gv_cU_GPEnergyBarScene[lp_player] != c_invalidDialogControlId)) {
            CutsceneSetTime(CutsceneGetTriggerControl(lib773A3C4C_gv_cU_GPEnergyBarScene[lp_player]), 0);
        }

        if ((lib773A3C4C_gv_cU_GPEnergyGlassScene[lp_player] != c_invalidDialogControlId)) {
            CutsceneSetTime(CutsceneGetTriggerControl(lib773A3C4C_gv_cU_GPEnergyGlassScene[lp_player]), 0);
        }

        if ((lp_duration == c_transitionDurationImmediate)) {
            lv_buttonIndex = 1;
            for ( ; ( (autoF1A0F968_ai >= 0 && lv_buttonIndex <= autoF1A0F968_ae) || (autoF1A0F968_ai < 0 && lv_buttonIndex >= autoF1A0F968_ae) ) ; lv_buttonIndex += autoF1A0F968_ai ) {
                if ((lib773A3C4C_gv_cU_GPButtonHighlighted[lv_buttonIndex][lp_player] == true) && (lib773A3C4C_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(lib773A3C4C_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player], lv_updatePlayers, true);
                }

            }
            CutsceneGoToBookmark(CutsceneGetTriggerControl(lib773A3C4C_gv_cU_GPCutscene[lp_player]), "LoopStart");
            if ((lib773A3C4C_gv_cU_GPEnergyBarScene[lp_player] != c_invalidDialogControlId)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(lib773A3C4C_gv_cU_GPEnergyBarScene[lp_player]), "LoopStart");
            }

            if ((lib773A3C4C_gv_cU_GPEnergyGlassScene[lp_player] != c_invalidDialogControlId)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(lib773A3C4C_gv_cU_GPEnergyGlassScene[lp_player]), "LoopStart");
            }

            DialogControlSetVisible(lib773A3C4C_gv_cU_GPCmdPanel[lp_player], lv_updatePlayers, lp_showHide);
            if ((lib773A3C4C_gv_cU_GPEnergyLabel[lp_player] != c_invalidDialogControlId)) {
                DialogControlSetVisible(lib773A3C4C_gv_cU_GPEnergyLabel[lp_player], lv_updatePlayers, lp_showHide);
            }

        }
        else {
            DialogControlSetVisible(lib773A3C4C_gv_cU_GPCmdPanel[lp_player], lv_updatePlayers, false);
            if ((lib773A3C4C_gv_cU_GPEnergyLabel[lp_player] != c_invalidDialogControlId)) {
                DialogControlSetVisible(lib773A3C4C_gv_cU_GPEnergyLabel[lp_player], lv_updatePlayers, false);
            }

        }
    }
    else {
        if ((lp_duration == c_transitionDurationImmediate)) {
            lv_buttonIndex = 1;
            for ( ; ( (auto8C43B708_ai >= 0 && lv_buttonIndex <= auto8C43B708_ae) || (auto8C43B708_ai < 0 && lv_buttonIndex >= auto8C43B708_ae) ) ; lv_buttonIndex += auto8C43B708_ai ) {
                if ((lib773A3C4C_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(lib773A3C4C_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player], lv_updatePlayers, false);
                }

            }
            DialogControlSetVisible(lib773A3C4C_gv_cU_GPPanelHolder, lv_updatePlayers, lp_showHide);
            DialogControlSetVisible(lib773A3C4C_gv_cU_GPPanel[lp_player], lv_updatePlayers, lp_showHide);
            DialogControlSetVisible(lib773A3C4C_gv_cU_GPCmdPanel[lp_player], lv_updatePlayers, lp_showHide);
            if ((lib773A3C4C_gv_cU_GPEnergyLabel[lp_player] != c_invalidDialogControlId)) {
                DialogControlSetVisible(lib773A3C4C_gv_cU_GPEnergyLabel[lp_player], lv_updatePlayers, lp_showHide);
            }

            if ((lib773A3C4C_gv_cU_GPEnergyTooltip[lp_player] != c_invalidDialogControlId)) {
                DialogControlSetVisible(lib773A3C4C_gv_cU_GPEnergyTooltip[lp_player], lv_updatePlayers, lp_showHide);
            }

        }
        else {
            CutsceneGoToBookmark(CutsceneGetTriggerControl(lib773A3C4C_gv_cU_GPCutscene[lp_player]), "Death");
            if ((lib773A3C4C_gv_cU_GPEnergyBarScene[lp_player] != c_invalidDialogControlId)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(lib773A3C4C_gv_cU_GPEnergyBarScene[lp_player]), "Death");
            }

            if ((lib773A3C4C_gv_cU_GPEnergyGlassScene[lp_player] != c_invalidDialogControlId)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(lib773A3C4C_gv_cU_GPEnergyGlassScene[lp_player]), "Death");
            }

        }
    }
}

void lib773A3C4C_gf_CU_GPVisibilityAutoUpdate (bool lp_showHide, int lp_player, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib773A3C4C_gv_cU_GPVisible[lp_player] == false)) {
        return ;
    }

    lib773A3C4C_gf_CU_GPVisibilitySet(lp_showHide, lp_player, lp_duration);
}

void lib773A3C4C_gf_PM_UseUnitNameAsUnitTip (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "ZergDropPod") || (UnitGetType(lp_unit) == "ZergDropPodLarge") || (UnitGetType(lp_unit) == "TerranDropPod") || (UnitGetType(lp_unit) == "ZergDropPodCreep"))) {
        return ;
    }

    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void lib773A3C4C_gf_CreatePrimaryObjective (text lp_text, text lp_description, int lp_objectiveCount, bool lp_hasCount, bool lp_hasTimer, int lp_count, int lp_countMax, timer lp_timer) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_hasCount == false) && (lp_hasTimer == false))) {
        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Nerazim")) {
            ObjectiveCreate((StringExternal("Param/Value/lib_773A3C4C_BFEE7137") + (lp_text + StringExternal("Param/Value/lib_773A3C4C_7622999F"))), lp_description, c_objectiveStateActive, true);
        }

        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Taldarim")) {
            ObjectiveCreate((StringExternal("Param/Value/lib_773A3C4C_A836B6D4") + (lp_text + StringExternal("Param/Value/lib_773A3C4C_45CD8B78"))), lp_description, c_objectiveStateActive, true);
        }

        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Khalai")) {
            ObjectiveCreate((StringExternal("Param/Value/lib_773A3C4C_B244E6D5") + (lp_text + StringExternal("Param/Value/lib_773A3C4C_BF6B90C9"))), lp_description, c_objectiveStateActive, true);
        }

    }

    if (((lp_hasCount == true) && (lp_hasTimer == false))) {
        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Nerazim")) {
            ObjectiveCreate(((StringExternal("Param/Value/lib_773A3C4C_2A5EEA07") + lp_text) + (StringExternal("Param/Value/lib_773A3C4C_7F8AE07E") + (IntToText(lp_count) + (StringExternal("Param/Value/lib_773A3C4C_9D3707B5") + (IntToText(lp_countMax) + StringExternal("Param/Value/lib_773A3C4C_D6DF0767")))))), lp_description, c_objectiveStateActive, true);
        }

        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Taldarim")) {
            ObjectiveCreate(((StringExternal("Param/Value/lib_773A3C4C_0732211A") + lp_text) + (StringExternal("Param/Value/lib_773A3C4C_C79CED1F") + (IntToText(lp_count) + (StringExternal("Param/Value/lib_773A3C4C_8856D8E7") + (IntToText(lp_countMax) + StringExternal("Param/Value/lib_773A3C4C_68029AD2")))))), lp_description, c_objectiveStateActive, true);
        }

        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Khalai")) {
            ObjectiveCreate(((StringExternal("Param/Value/lib_773A3C4C_D39E5F60") + lp_text) + (StringExternal("Param/Value/lib_773A3C4C_A523E2AC") + (IntToText(lp_count) + (StringExternal("Param/Value/lib_773A3C4C_F9802769") + (IntToText(lp_countMax) + StringExternal("Param/Value/lib_773A3C4C_16917BDB")))))), lp_description, c_objectiveStateActive, true);
        }

    }

    if (((lp_hasCount == false) && (lp_hasTimer == true))) {
        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Nerazim")) {
            ObjectiveCreate(((StringExternal("Param/Value/lib_773A3C4C_CC46A7CB") + lp_text) + (StringExternal("Param/Value/lib_773A3C4C_A74B15FA") + (TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(lp_timer))) + StringExternal("Param/Value/lib_773A3C4C_B9F167E1")))), lp_description, c_objectiveStateActive, true);
        }

        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Taldarim")) {
            ObjectiveCreate(((StringExternal("Param/Value/lib_773A3C4C_737136C2") + lp_text) + (StringExternal("Param/Value/lib_773A3C4C_567E7EED") + (TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(lp_timer))) + StringExternal("Param/Value/lib_773A3C4C_BE44F531")))), lp_description, c_objectiveStateActive, true);
        }

        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Khalai")) {
            ObjectiveCreate(((StringExternal("Param/Value/lib_773A3C4C_448A7348") + lp_text) + (StringExternal("Param/Value/lib_773A3C4C_A0415B0D") + (TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(lp_timer))) + StringExternal("Param/Value/lib_773A3C4C_874AC54E")))), lp_description, c_objectiveStateActive, true);
        }

    }

    if (((lp_hasCount == true) && (lp_hasTimer == true))) {
        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Nerazim")) {
            ObjectiveCreate(((StringExternal("Param/Value/lib_773A3C4C_ECD80E70") + lp_text) + (StringExternal("Param/Value/lib_773A3C4C_3C8300F1") + (IntToText(lp_count) + (StringExternal("Param/Value/lib_773A3C4C_1BE64AF2") + (IntToText(lp_countMax) + (StringExternal("Param/Value/lib_773A3C4C_B8D8D892") + (TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(lp_timer))) + StringExternal("Param/Value/lib_773A3C4C_2049E51A")))))))), lp_description, c_objectiveStateActive, true);
        }

        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Taldarim")) {
            ObjectiveCreate(((StringExternal("Param/Value/lib_773A3C4C_D8A3E0A9") + lp_text) + (StringExternal("Param/Value/lib_773A3C4C_BAADED23") + (IntToText(lp_count) + (StringExternal("Param/Value/lib_773A3C4C_B48FC514") + (IntToText(lp_countMax) + (StringExternal("Param/Value/lib_773A3C4C_ED0838B1") + (TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(lp_timer))) + StringExternal("Param/Value/lib_773A3C4C_800F2F94")))))))), lp_description, c_objectiveStateActive, true);
        }

        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Khalai")) {
            ObjectiveCreate(((StringExternal("Param/Value/lib_773A3C4C_0B18BC43") + lp_text) + (StringExternal("Param/Value/lib_773A3C4C_30FA9D1B") + (IntToText(lp_count) + (StringExternal("Param/Value/lib_773A3C4C_0DA423E7") + (IntToText(lp_countMax) + (StringExternal("Param/Value/lib_773A3C4C_68D46267") + (TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(lp_timer))) + StringExternal("Param/Value/lib_773A3C4C_5F833272")))))))), lp_description, c_objectiveStateActive, true);
        }

    }

    lib773A3C4C_gv_objectives[lp_objectiveCount] = ObjectiveLastCreated();
}

void lib773A3C4C_gf_CreateSecondaryObjective (text lp_text, text lp_description, int lp_objectiveCount, bool lp_hasCount, bool lp_hasTimer, int lp_count, int lp_countMax, timer lp_timer) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_hasCount == true) && (lp_hasTimer == false))) {
        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Nerazim")) {
            ObjectiveCreate(((StringExternal("Param/Value/lib_773A3C4C_A7E53F2D") + lp_text) + (StringExternal("Param/Value/lib_773A3C4C_6031833C") + (IntToText(lp_count) + (StringExternal("Param/Value/lib_773A3C4C_61E84A29") + (IntToText(lp_countMax) + StringExternal("Param/Value/lib_773A3C4C_DCE72D88")))))), lp_description, c_objectiveStateActive, false);
        }

        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Taldarim")) {
            ObjectiveCreate(((StringExternal("Param/Value/lib_773A3C4C_6E5C49F3") + lp_text) + (StringExternal("Param/Value/lib_773A3C4C_C9B0457F") + (IntToText(lp_count) + (StringExternal("Param/Value/lib_773A3C4C_1C7CBCE6") + (IntToText(lp_countMax) + StringExternal("Param/Value/lib_773A3C4C_EC4BE585")))))), lp_description, c_objectiveStateActive, false);
        }

        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Khalai")) {
            ObjectiveCreate(((StringExternal("Param/Value/lib_773A3C4C_3E504948") + lp_text) + (StringExternal("Param/Value/lib_773A3C4C_A0E6E957") + (IntToText(lp_count) + (StringExternal("Param/Value/lib_773A3C4C_32D4EE47") + (IntToText(lp_countMax) + StringExternal("Param/Value/lib_773A3C4C_245B0872")))))), lp_description, c_objectiveStateActive, false);
        }

    }

    if (((lp_hasCount == true) && (lp_hasTimer == true))) {
        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Nerazim")) {
            ObjectiveCreate(((StringExternal("Param/Value/lib_773A3C4C_37169072") + lp_text) + (StringExternal("Param/Value/lib_773A3C4C_A62F6EB5") + (IntToText(lp_count) + (StringExternal("Param/Value/lib_773A3C4C_A7BC48C2") + (IntToText(lp_countMax) + (StringExternal("Param/Value/lib_773A3C4C_B5E01FC8") + (TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(lp_timer))) + StringExternal("Param/Value/lib_773A3C4C_4517B56A")))))))), lp_description, c_objectiveStateActive, false);
        }

        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Taldarim")) {
            ObjectiveCreate(((StringExternal("Param/Value/lib_773A3C4C_B372DD24") + lp_text) + (StringExternal("Param/Value/lib_773A3C4C_268650DF") + (IntToText(lp_count) + (StringExternal("Param/Value/lib_773A3C4C_9A7990F0") + (IntToText(lp_countMax) + (StringExternal("Param/Value/lib_773A3C4C_2D9284F4") + (TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(lp_timer))) + StringExternal("Param/Value/lib_773A3C4C_19E944AE")))))))), lp_description, c_objectiveStateActive, false);
        }

        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Khalai")) {
            ObjectiveCreate(((StringExternal("Param/Value/lib_773A3C4C_B48635A7") + lp_text) + (StringExternal("Param/Value/lib_773A3C4C_5879D1B6") + (IntToText(lp_count) + (StringExternal("Param/Value/lib_773A3C4C_4EB5DDF0") + (IntToText(lp_countMax) + (StringExternal("Param/Value/lib_773A3C4C_8DAA38C2") + (TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(lp_timer))) + StringExternal("Param/Value/lib_773A3C4C_0953D2F9")))))))), lp_description, c_objectiveStateActive, false);
        }

    }

    if (((lp_hasCount == false) && (lp_hasTimer == true))) {
        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Nerazim")) {
            ObjectiveCreate(((StringExternal("Param/Value/lib_773A3C4C_631749F9") + lp_text) + (StringExternal("Param/Value/lib_773A3C4C_AEE43EC9") + (TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(lp_timer))) + StringExternal("Param/Value/lib_773A3C4C_5A4014A0")))), lp_description, c_objectiveStateActive, false);
        }

        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Taldarim")) {
            ObjectiveCreate(((StringExternal("Param/Value/lib_773A3C4C_79EE9991") + lp_text) + (StringExternal("Param/Value/lib_773A3C4C_59EFF157") + (TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(lp_timer))) + StringExternal("Param/Value/lib_773A3C4C_232FFF7B")))), lp_description, c_objectiveStateActive, false);
        }

        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Khalai")) {
            ObjectiveCreate(((StringExternal("Param/Value/lib_773A3C4C_AFDE5D7A") + lp_text) + (StringExternal("Param/Value/lib_773A3C4C_DAFD749A") + (TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(lp_timer))) + StringExternal("Param/Value/lib_773A3C4C_52FAA9F5")))), lp_description, c_objectiveStateActive, false);
        }

    }

    if (((lp_hasCount == false) && (lp_hasTimer == false))) {
        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Nerazim")) {
            ObjectiveCreate((StringExternal("Param/Value/lib_773A3C4C_2463290A") + (lp_text + StringExternal("Param/Value/lib_773A3C4C_13CA5B4C"))), lp_description, c_objectiveStateActive, false);
        }

        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Taldarim")) {
            ObjectiveCreate((StringExternal("Param/Value/lib_773A3C4C_4F3D80CE") + (lp_text + StringExternal("Param/Value/lib_773A3C4C_F756FDB8"))), lp_description, c_objectiveStateActive, false);
        }

        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Khalai")) {
            ObjectiveCreate((StringExternal("Param/Value/lib_773A3C4C_1E1AA929") + (lp_text + StringExternal("Param/Value/lib_773A3C4C_CDC4BDFC"))), lp_description, c_objectiveStateActive, false);
        }

    }

    lib773A3C4C_gv_objectives[lp_objectiveCount] = ObjectiveLastCreated();
}

void lib773A3C4C_gf_UpdateObjective (text lp_text, int lp_objectiveCount, bool lp_hasCount, bool lp_hasTimer, int lp_count, int lp_countMax, timer lp_timer) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_hasCount == true) && (lp_hasTimer == false))) {
        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Nerazim")) {
            ObjectiveSetName(lib773A3C4C_gv_objectives[lp_objectiveCount], (StringExternal("Param/Value/lib_773A3C4C_32F10087") + (lp_text + (StringExternal("Param/Value/lib_773A3C4C_AF432870") + (IntToText(lp_count) + (StringExternal("Param/Value/lib_773A3C4C_5A80670E") + (IntToText(lp_countMax) + StringExternal("Param/Value/lib_773A3C4C_6CA294AA"))))))));
        }

        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Taldarim")) {
            ObjectiveSetName(lib773A3C4C_gv_objectives[lp_objectiveCount], (StringExternal("Param/Value/lib_773A3C4C_F306B1E6") + (lp_text + (StringExternal("Param/Value/lib_773A3C4C_5705213F") + (IntToText(lp_count) + (StringExternal("Param/Value/lib_773A3C4C_1447654E") + (IntToText(lp_countMax) + StringExternal("Param/Value/lib_773A3C4C_0B12A4A4"))))))));
        }

        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Khalai")) {
            ObjectiveSetName(lib773A3C4C_gv_objectives[lp_objectiveCount], (StringExternal("Param/Value/lib_773A3C4C_7D44CF56") + (lp_text + (StringExternal("Param/Value/lib_773A3C4C_33AA9C53") + (IntToText(lp_count) + (StringExternal("Param/Value/lib_773A3C4C_ED01E17F") + (IntToText(lp_countMax) + StringExternal("Param/Value/lib_773A3C4C_417D18EC"))))))));
        }

    }

    if (((lp_hasCount == true) && (lp_hasTimer == true))) {
        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Nerazim")) {
            ObjectiveSetName(lib773A3C4C_gv_objectives[lp_objectiveCount], (StringExternal("Param/Value/lib_773A3C4C_48B4A838") + (lp_text + (StringExternal("Param/Value/lib_773A3C4C_CE4A6D03") + (IntToText(lp_count) + (StringExternal("Param/Value/lib_773A3C4C_39ED2A59") + (IntToText(lp_countMax) + (StringExternal("Param/Value/lib_773A3C4C_60D4874B") + (TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(lp_timer))) + StringExternal("Param/Value/lib_773A3C4C_1413EF1E"))))))))));
        }

        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Taldarim")) {
            ObjectiveSetName(lib773A3C4C_gv_objectives[lp_objectiveCount], (StringExternal("Param/Value/lib_773A3C4C_53AF84F4") + (lp_text + (StringExternal("Param/Value/lib_773A3C4C_0FC1E7E5") + (IntToText(lp_count) + (StringExternal("Param/Value/lib_773A3C4C_84B39A15") + (IntToText(lp_countMax) + (StringExternal("Param/Value/lib_773A3C4C_21046790") + (TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(lp_timer))) + StringExternal("Param/Value/lib_773A3C4C_449A6069"))))))))));
        }

        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Khalai")) {
            ObjectiveSetName(lib773A3C4C_gv_objectives[lp_objectiveCount], (StringExternal("Param/Value/lib_773A3C4C_20735EFD") + (lp_text + (StringExternal("Param/Value/lib_773A3C4C_4DBB535C") + (IntToText(lp_count) + (StringExternal("Param/Value/lib_773A3C4C_F47F402D") + (IntToText(lp_countMax) + (StringExternal("Param/Value/lib_773A3C4C_3CD3B918") + (TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(lp_timer))) + StringExternal("Param/Value/lib_773A3C4C_2D2024A3"))))))))));
        }

    }

    if (((lp_hasCount == false) && (lp_hasTimer == true))) {
        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Nerazim")) {
            ObjectiveSetName(lib773A3C4C_gv_objectives[lp_objectiveCount], (StringExternal("Param/Value/lib_773A3C4C_F72E179A") + (lp_text + (StringExternal("Param/Value/lib_773A3C4C_1EB411D1") + (TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(lp_timer))) + StringExternal("Param/Value/lib_773A3C4C_37AAA607"))))));
        }

        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Taldarim")) {
            ObjectiveSetName(lib773A3C4C_gv_objectives[lp_objectiveCount], (StringExternal("Param/Value/lib_773A3C4C_F172D0E2") + (lp_text + (StringExternal("Param/Value/lib_773A3C4C_C4B2EF7B") + (TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(lp_timer))) + StringExternal("Param/Value/lib_773A3C4C_DC50A40B"))))));
        }

        if ((lib773A3C4C_gf_DeterminePlayerFaction() == "Khalai")) {
            ObjectiveSetName(lib773A3C4C_gv_objectives[lp_objectiveCount], (StringExternal("Param/Value/lib_773A3C4C_407EA8EC") + (lp_text + (StringExternal("Param/Value/lib_773A3C4C_7B71FEDE") + (TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(lp_timer))) + StringExternal("Param/Value/lib_773A3C4C_F3D12666"))))));
        }

    }

}

void lib773A3C4C_gf_FailObjective (int lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    ObjectiveSetState(lp_objective, c_objectiveStateFailed);
    ObjectiveSetName(lp_objective, (StringExternal("Param/Value/lib_773A3C4C_DD16FF3D") + ObjectiveGetName(lp_objective)));
}

string lib773A3C4C_gf_DeterminePlayerFaction () {
    // Automatic Variable Declarations
    // Implementation
    if ((TechTreeUpgradeCount(1, "VorazunCommander", c_techCountCompleteOnly) == 1)) {
        return "Nerazim";
    }

    if ((TechTreeUpgradeCount(1, "Taldarim", c_techCountCompleteOnly) == 1)) {
        return "Taldarim";
    }

    return "Khalai";
}

string lib773A3C4C_gf_PM_ReticleModelOfStyle (int lp_size) {
    // Variable Declarations
    string lv_model;

    // Automatic Variable Declarations
    int auto7EC268F4_val;

    // Variable Initialization

    // Implementation
    auto7EC268F4_val = lp_size;
    if (auto7EC268F4_val == lib773A3C4C_ge_VorazunReticleSize_Large) {
        lv_model = "BriefingUnitSelectProtossLarge";
    }
    else if (auto7EC268F4_val == lib773A3C4C_ge_VorazunReticleSize_Medium) {
        lv_model = "BriefingUnitSelectProtoss";
    }
    else if (auto7EC268F4_val == lib773A3C4C_ge_VorazunReticleSize_Small) {
        lv_model = "BriefingUnitSelectProtossSmall";
    }
    else {
    }
    return lv_model;
}

void lib773A3C4C_gf_VorazunReticleApplyTint (actor lp_reticle, int lp_type) {
    // Automatic Variable Declarations
    int autoCC915AFD_val;

    // Implementation
    autoCC915AFD_val = lp_type;
    if (autoCC915AFD_val == lib773A3C4C_ge_VorazunReticleType_ProtossMainObjective) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTeamColor NULL 0,255,0");
    }
    else if (autoCC915AFD_val == lib773A3C4C_ge_VorazunReticleType_ProtossEnemy) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTeamColor NULL 255,0,0");
    }
    else if (autoCC915AFD_val == lib773A3C4C_ge_VorazunReticleType_ProtossBonusObjective) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTeamColor NULL 0,255,0");
    }
    else {
    }
}

void lib773A3C4C_gf_CreateReticleEffectAndTextTagAtPoint (int lp_type, int lp_size, point lp_location) {
    // Variable Declarations
    string lv_model;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_model = lib773A3C4C_gf_PM_ReticleModelOfStyle(lp_size);
    if ((lv_model == null)) {
        return ;
    }

    libNtve_gf_CreateModelAtPoint(lv_model, lp_location);
    lib773A3C4C_gf_VorazunReticleApplyTint(libNtve_gf_ActorLastCreated(), lp_type);
}

void lib773A3C4C_gf_AttachReticleEffectAndTextTagOnUnit (int lp_type, int lp_size, unit lp_target, string lp_attachPoint) {
    // Variable Declarations
    string lv_model;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_model = lib773A3C4C_gf_PM_ReticleModelOfStyle(lp_size);
    if ((lv_model == null)) {
        return ;
    }

    libNtve_gf_AttachModelToUnitInheritVisibility(lp_target, lv_model, lp_attachPoint);
    lib773A3C4C_gf_VorazunReticleApplyTint(libNtve_gf_ActorLastCreated(), lp_type);
}

void lib773A3C4C_gf_CreateHeroPing (unit lp_unit, int lp_heroPingType, int lp_heroPingType2) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingCircle", UnitGetPosition(lp_unit), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    lib773A3C4C_gv_heroPings[lp_heroPingType2] = PingLastCreated();
    PingSetScale(lib773A3C4C_gv_heroPings[lp_heroPingType2], 0.5);
    PingSetUnit(lib773A3C4C_gv_heroPings[lp_heroPingType2], lp_unit);
    PingSetUseUnitTeamColor(lib773A3C4C_gv_heroPings[lp_heroPingType2], false);
    PingSetUseUnitVisibility(lib773A3C4C_gv_heroPings[lp_heroPingType2], true);
    PingSetTooltip(lib773A3C4C_gv_heroPings[lp_heroPingType2], UnitGetName(lp_unit));
}

void lib773A3C4C_gf_EnableLowHealthWarning (unit lp_watchedUnit) {
    // Automatic Variable Declarations
    // Implementation
    lib773A3C4C_gv_cU_HealthWatchUnit = lp_watchedUnit;
    TriggerEnable(lib773A3C4C_gt_CU_HealthWatchLifeCheck, true);
}

void lib773A3C4C_gf_CU_HealthWatchCreate () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib773A3C4C_gv_cU_HealthWatchDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(1600, 1200, c_anchorCenter, 0, 0, false);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    lib773A3C4C_gv_cU_HealthWatchDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1600, 1200, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_ingame_effects_splash2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lib773A3C4C_gv_cU_HealthWatchImage = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
}

void lib773A3C4C_gf_SetHeroPanelUnit (int lp_index, unit lp_heroUnit, int lp_player) {
    // Variable Declarations
    bool lv_noValidHeroes;
    int lv_heroHotkey;
    playergroup lv_heroGroup;

    // Automatic Variable Declarations
    int autoF0212CF2_val;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();

    // Implementation
    lv_heroGroup = PlayerGroupSingle(lp_player);
    lib773A3C4C_gv_cU_HeroUnit[lp_index][lp_player] = lp_heroUnit;
    lib773A3C4C_gf_EnableLowHealthWarning(lp_heroUnit);
    lib773A3C4C_gv_cU_HeroType[lp_index][lp_player] = lib773A3C4C_gf_CU_HeroTypeFromUnitType(UnitGetType(lp_heroUnit));
    lib773A3C4C_gv_cU_HeroShowLevel[lp_index][lp_player] = false;
    lib773A3C4C_gf_CU_UpdateHeroPanel(lp_index, lp_player);
    lib773A3C4C_gf_CreateHeroPing(lp_heroUnit, lib773A3C4C_ge_HeroPingType_Ally, lp_index);
    if ((PlayerRace(lp_player) == "Zerg")) {
        DialogControlSendAnimationEvent(lib773A3C4C_gv_cU_HeroPanel[lp_index], PlayerGroupSingle(lp_player), "SwitchZerg");
    }
    else if ((UnitGetType(lp_heroUnit) == "WarPig") && (UnitGetType(lp_heroUnit) == "OrbitalCommand")) {
        DialogControlSendAnimationEvent(lib773A3C4C_gv_cU_HeroPanel[lp_index], PlayerGroupSingle(lp_player), "SwitchTerran");
    }
    else if ((lib773A3C4C_gf_CU_ChampionHasShields2(lib773A3C4C_gf_CU_HeroTypeFromUnitType(UnitGetType(lp_heroUnit))) == true)) {
        DialogControlSendAnimationEvent(lib773A3C4C_gv_cU_HeroPanel[lp_index], PlayerGroupSingle(lp_player), "DefaultBarOffset");
    }
    else if (true) {
        DialogControlSendAnimationEvent(lib773A3C4C_gv_cU_HeroPanel[lp_index], PlayerGroupSingle(lp_player), "EnergyBarOffset");
    }
    lib773A3C4C_gv_cU_HeroExists[lp_player][lp_index] = true;
    if ((lib773A3C4C_gv_cU_HeroUnit[lp_index][lp_player] == null)) {
        lib773A3C4C_gv_cU_HeroExists[lp_player][lp_index] = false;
    }
    else {
        TriggerEnable(lib773A3C4C_gt_CU_HeroPanelUpdate, true);
        TriggerEnable(lib773A3C4C_gt_CU_HeroUnitDamaged, true);
        TriggerEnable(lib773A3C4C_gt_CU_HeroMouseHoverText, true);
        TriggerEnable(lib773A3C4C_gt_CU_HeroUnitVitalChange, true);
        libNtve_gf_SetDialogItemAnimationDuration(lib773A3C4C_gv_cU_HeroDialogCooldownImage[lp_index], 60.0, lv_heroGroup);
        autoF0212CF2_val = lp_index;
        if (autoF0212CF2_val == 1) {
            lv_heroHotkey = c_hotkeyHeroSelect0;
        }
        else if (autoF0212CF2_val == 2) {
            lv_heroHotkey = c_hotkeyHeroSelect1;
        }
        else {
        }
        if ((lp_index <= lib773A3C4C_gv_cUC_HeroMaxCount)) {
            libNtve_gf_SetDialogItemHotkey(lib773A3C4C_gv_cU_HeroDialogButton[lp_index], lv_heroHotkey, lv_heroGroup);
        }
        else {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_773A3C4C_205642B8"), false);
        }
    }
}

void lib773A3C4C_gf_CU_ShowHideHeroPanel (bool lp_showHide, int lp_index) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lib773A3C4C_gv_cU_HeroPanel[lp_index] != c_invalidDialogControlId)) {
        DialogControlSetVisible(lib773A3C4C_gv_cU_HeroPanel[lp_index], PlayerGroupAll(), lp_showHide);
    }

}

void lib773A3C4C_gf_CU_CreateHeroPanel (int lp_index) {
    // Automatic Variable Declarations
    int autoB7BB5A38_val;

    // Implementation
    if ((lp_index == 1)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/VoidHeroUnitFrame");
    }
    else {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/SecondaryVoidHeroUnitFrame");
    }
    lib773A3C4C_gv_cU_HeroPanel[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lib773A3C4C_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BorderImage");
    lib773A3C4C_gv_cU_HeroDialogBorderImage[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(lib773A3C4C_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BorderNoEnergyImage");
    lib773A3C4C_gv_cU_HeroDialogBorderImageNoEnergy[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(lib773A3C4C_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BorderImageAll");
    lib773A3C4C_gv_cU_HeroDialogBorderImageAll[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(lib773A3C4C_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "LevelBox");
    lib773A3C4C_gv_cU_HeroDialogLevelBox[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogLevelBox[lp_index], PlayerGroupAll(), false);
    DialogControlHookup(lib773A3C4C_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "LevelLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lib773A3C4C_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "CooldownImage");
    lib773A3C4C_gv_cU_HeroDialogCooldownImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib773A3C4C_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "DamageTakenImage");
    lib773A3C4C_gv_cU_HeroDialogDamageTakenImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib773A3C4C_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "EnergyBarImage");
    lib773A3C4C_gv_cU_HeroDialogEnergyBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib773A3C4C_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "EnergyBarBackground");
    lib773A3C4C_gv_cU_HeroDialogEnergyBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib773A3C4C_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "HealthBarImage");
    lib773A3C4C_gv_cU_HeroDialogHealthBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib773A3C4C_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BarBackground");
    lib773A3C4C_gv_cU_HeroDialogHealthBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib773A3C4C_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "ShieldBarImage");
    lib773A3C4C_gv_cU_HeroDialogShieldBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib773A3C4C_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "ShieldBarBackground");
    lib773A3C4C_gv_cU_HeroDialogShieldBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib773A3C4C_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "IconImage");
    lib773A3C4C_gv_cU_HeroDialogIconImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib773A3C4C_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "DamageTakenLabel");
    lib773A3C4C_gv_cU_HeroDialogDamageTakenLabel[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lib773A3C4C_gv_cU_HeroDialogDamageTakenLabel[lp_index], StringToText(""), PlayerGroupAll());
    DialogControlHookup(lib773A3C4C_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "EnergyLabel");
    lib773A3C4C_gv_cU_HeroDialogEnergyLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib773A3C4C_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "HealthLabel");
    lib773A3C4C_gv_cU_HeroDialogHealthLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib773A3C4C_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "ShieldLabel");
    lib773A3C4C_gv_cU_HeroDialogShieldLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib773A3C4C_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "LevelLabel");
    lib773A3C4C_gv_cU_HeroDialogLevelLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib773A3C4C_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "NameLabel");
    lib773A3C4C_gv_cU_HeroDialogNameLabel[lp_index] = DialogControlLastCreated();
    autoB7BB5A38_val = lp_index;
    if (autoB7BB5A38_val == 1) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/VoidHeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect0, PlayerGroupAll());
    }
    else if (autoB7BB5A38_val == 2) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/SecondaryVoidHeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect1, PlayerGroupAll());
    }
    else {
    }
    lib773A3C4C_gv_cU_HeroDialogButton[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogDamageTakenImage[lp_index], PlayerGroupAll(), false);
    DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogCooldownImage[lp_index], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemRenderPriority(lib773A3C4C_gv_cU_HeroDialogEnergyBarBackground[lp_index], 505, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(lib773A3C4C_gv_cU_HeroDialogHealthBarBackground[lp_index], 505, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(lib773A3C4C_gv_cU_HeroDialogShieldBarImage[lp_index], 511, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(lib773A3C4C_gv_cU_HeroDialogShieldBarBackground[lp_index], 510, PlayerGroupAll());
}

int lib773A3C4C_gf_CU_HeroTypeFromUnitType (string lp_unitType) {
    // Automatic Variable Declarations
    string auto72A4E7E4_val;

    // Implementation
    auto72A4E7E4_val = lp_unitType;
    if (auto72A4E7E4_val == "AlarakChampion") {
        return lib773A3C4C_ge_CampaignHeroes_Alarak;
    }
    else if (auto72A4E7E4_val == "Selendis2") {
        return lib773A3C4C_ge_CampaignHeroes_Selendis;
    }
    else if (auto72A4E7E4_val == "FenixChampion") {
        return lib773A3C4C_ge_CampaignHeroes_Talandar;
    }
    else if (auto72A4E7E4_val == "ZeratulVoidAiur01") {
        return lib773A3C4C_ge_CampaignHeroes_Zeratul;
    }
    else if (auto72A4E7E4_val == "ArtanisVoid") {
        return lib773A3C4C_ge_CampaignHeroes_Artanis;
    }
    else if (auto72A4E7E4_val == "WarPig") {
        return lib773A3C4C_ge_CampaignHeroes_John;
    }
    else if (auto72A4E7E4_val == "OrbitalCommand") {
        return lib773A3C4C_ge_CampaignHeroes_JohnsCommandCenter;
    }
    else if (auto72A4E7E4_val == "KaraxChampion") {
        return lib773A3C4C_ge_CampaignHeroes_Karax;
    }
    else if (auto72A4E7E4_val == "Rohana") {
        return lib773A3C4C_ge_CampaignHeroes_Rohana;
    }
    else if (auto72A4E7E4_val == "VorazunChampion") {
        return lib773A3C4C_ge_CampaignHeroes_Vorazun;
    }
    else if (auto72A4E7E4_val == "Zul") {
        return lib773A3C4C_ge_CampaignHeroes_Zul;
    }
    else {
    }
    return lib773A3C4C_ge_CampaignHeroes_None;
}

string lib773A3C4C_gf_CU_HeroIcon (int lp_heroType, unit lp_heroUnit) {
    // Automatic Variable Declarations
    int autoEDB07344_val;

    // Implementation
    autoEDB07344_val = lp_heroType;
    if (autoEDB07344_val == lib773A3C4C_ge_CampaignHeroes_Artanis) {
        return "Assets\\Textures\\btn-hero-artanis.dds";
    }
    else if (autoEDB07344_val == lib773A3C4C_ge_CampaignHeroes_Alarak) {
        return "Assets\\Textures\\btn-hero-alarak.dds";
    }
    else if (autoEDB07344_val == lib773A3C4C_ge_CampaignHeroes_Selendis) {
        return "Assets\\Textures\\btn-hero-selendis.dds";
    }
    else if (autoEDB07344_val == lib773A3C4C_ge_CampaignHeroes_Talandar) {
        return "Assets\\Textures\\btn-hero-fenix.dds";
    }
    else if (autoEDB07344_val == lib773A3C4C_ge_CampaignHeroes_Zeratul) {
        return "Assets\\Textures\\zeratul_ingame_heroportrait.dds";
    }
    else if (autoEDB07344_val == lib773A3C4C_ge_CampaignHeroes_Zul) {
        return "Assets\\Textures\\ZulHeroIcon.dds";
    }
    else if (autoEDB07344_val == lib773A3C4C_ge_CampaignHeroes_Vorazun) {
        return "Assets\\Textures\\btn-hero-vorazun.dds";
    }
    else if (autoEDB07344_val == lib773A3C4C_ge_CampaignHeroes_Rohana) {
        return "Assets\\Textures\\btn-hero-rohana.dds";
    }
    else if (autoEDB07344_val == lib773A3C4C_ge_CampaignHeroes_Karax) {
        return "Assets\\Textures\\btn-hero-karax.dds";
    }
    else if (autoEDB07344_val == lib773A3C4C_ge_CampaignHeroes_John) {
        return "Assets\\Textures\\JohnLongtreeHeroIcon.dds";
    }
    else if (autoEDB07344_val == lib773A3C4C_ge_CampaignHeroes_JohnsCommandCenter) {
        return "Assets\\Textures\\JohnLongtreeHeroIcon.dds";
    }
    else {
        return "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds";
    }
}

void lib773A3C4C_gf_CU_UpdateHeroPanel (int lp_index, int lp_player) {
    // Variable Declarations
    text lv_hotkey;
    int lv_life;
    int lv_shields;
    int lv_energy;
    playergroup lv_updateGroup;

    // Automatic Variable Declarations
    int auto3455E103_val;

    // Variable Initialization
    lv_updateGroup = PlayerGroupEmpty();

    // Implementation
    lv_updateGroup = PlayerGroupSingle(lp_player);
    if ((lib773A3C4C_gv_cU_HeroUnit[lp_index][lp_player] == null)) {
        if ((lib773A3C4C_gv_cU_HeroPanel[lp_index] != c_invalidDialogControlId)) {
            DialogControlSetVisible(lib773A3C4C_gv_cU_HeroPanel[lp_index], lv_updateGroup, false);
        }

        return ;
    }

    if ((lib773A3C4C_gv_cU_HeroPanel[lp_index] == c_invalidDialogControlId)) {
        lib773A3C4C_gf_CU_CreateHeroPanel(lp_index);
    }

    DialogControlSetVisible(lib773A3C4C_gv_cU_HeroPanel[lp_index], lv_updateGroup, true);
    auto3455E103_val = lp_index;
    if (auto3455E103_val == 1) {
        lv_hotkey = StringExternal("Param/Value/lib_773A3C4C_3C3A14D2");
    }
    else if (auto3455E103_val == 2) {
        lv_hotkey = StringExternal("Param/Value/lib_773A3C4C_0C897217");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_773A3C4C_D2282FBD", "A", UnitGetName(lib773A3C4C_gv_cU_HeroUnit[lp_index][lp_player]));
    TextExpressionSetToken("Param/Expression/lib_773A3C4C_D2282FBD", "B", lv_hotkey);
    libNtve_gf_SetDialogItemText(lib773A3C4C_gv_cU_HeroDialogNameLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_773A3C4C_D2282FBD"), lv_updateGroup);
    libNtve_gf_SetDialogItemImage(lib773A3C4C_gv_cU_HeroDialogIconImage[lp_index], lib773A3C4C_gf_CU_HeroIcon(lib773A3C4C_gv_cU_HeroType[lp_index][lp_player], lib773A3C4C_gv_cU_HeroUnit[lp_index][lp_player]), lv_updateGroup);
    TextExpressionSetToken("Param/Expression/lib_773A3C4C_5A82E9C0", "CurrentLife", FixedToText(UnitGetPropertyFixed(lib773A3C4C_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropLife, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_773A3C4C_5A82E9C0", "MaxLife", FixedToText(UnitGetPropertyFixed(lib773A3C4C_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropLifeMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(lib773A3C4C_gv_cU_HeroDialogHealthLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_773A3C4C_5A82E9C0"), lv_updateGroup);
    lv_life = FixedToInt((UnitGetPropertyFixed(lib773A3C4C_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropLifePercent, c_unitPropCurrent) * (IntToFixed(lib773A3C4C_gv_cUC_HEROUIBARWIDTH) / 100.0)));
    if ((lv_life > 0)) {
        DialogControlSetSize(lib773A3C4C_gv_cU_HeroDialogHealthBarImage[lp_index], lv_updateGroup, lv_life, lib773A3C4C_gv_cUC_HEROUILIFEBARHEIGHT);
        DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogHealthBarImage[lp_index], lv_updateGroup, true);
    }
    else {
        DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogHealthBarImage[lp_index], lv_updateGroup, false);
    }
    if ((UnitGetPropertyFixed(lib773A3C4C_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropShieldsMax, c_unitPropCurrent) > 0)) {
        DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogShieldBarBackground[lp_index], lv_updateGroup, true);
        TextExpressionSetToken("Param/Expression/lib_773A3C4C_00976803", "CurrentLife", FixedToText(UnitGetPropertyFixed(lib773A3C4C_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropShields, c_unitPropCurrent), 0));
        TextExpressionSetToken("Param/Expression/lib_773A3C4C_00976803", "MaxLife", FixedToText(UnitGetPropertyFixed(lib773A3C4C_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropShieldsMax, c_unitPropCurrent), 0));
        libNtve_gf_SetDialogItemText(lib773A3C4C_gv_cU_HeroDialogShieldLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_773A3C4C_00976803"), lv_updateGroup);
        lv_shields = FixedToInt((UnitGetPropertyFixed(lib773A3C4C_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropShieldsPercent, c_unitPropCurrent) * (IntToFixed(lib773A3C4C_gv_cUC_HEROUIBARWIDTH) / 100.0)));
        if ((lv_shields > 0)) {
            DialogControlSetSize(lib773A3C4C_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, lv_shields, lib773A3C4C_gv_cUC_HEROUISHIELDBARHEIGHT);
            DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, true);
        }
        else {
            DialogControlSetSize(lib773A3C4C_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, 1, lib773A3C4C_gv_cUC_HEROUISHIELDBARHEIGHT);
            DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, false);
        }
    }
    else {
        DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, false);
        DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogShieldBarBackground[lp_index], lv_updateGroup, false);
    }
    TextExpressionSetToken("Param/Expression/lib_773A3C4C_BA1EE6C5", "CurrentEnergy", FixedToText(UnitGetPropertyFixed(lib773A3C4C_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropEnergy, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_773A3C4C_BA1EE6C5", "MaxEnergy", FixedToText(UnitGetPropertyFixed(lib773A3C4C_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropEnergyMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(lib773A3C4C_gv_cU_HeroDialogEnergyLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_773A3C4C_BA1EE6C5"), lv_updateGroup);
    if ((UnitGetPropertyFixed(lib773A3C4C_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropEnergyMax, c_unitPropCurrent) == 0)) {
        lv_energy = 0;
        if ((lib773A3C4C_gf_CU_ChampionHasShields2(lib773A3C4C_gv_cU_HeroType[lp_index][lp_player]) == true)) {
            DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogBorderImageNoEnergy[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogBorderImage[lp_index], lv_updateGroup, true);
            DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogBorderImageAll[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogEnergyBarBackground[lp_index], lv_updateGroup, false);
        }
        else {
            DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogBorderImageNoEnergy[lp_index], lv_updateGroup, true);
            DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogBorderImage[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogBorderImageAll[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogEnergyBarBackground[lp_index], lv_updateGroup, false);
        }
    }
    else {
        lv_energy = FixedToInt((UnitGetPropertyFixed(lib773A3C4C_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropEnergyPercent, c_unitPropCurrent) * (IntToFixed(lib773A3C4C_gv_cUC_HEROUIBARWIDTH) / 100.0)));
        if ((lib773A3C4C_gf_CU_ChampionHasShields(lib773A3C4C_gv_cU_HeroType[lp_index][lp_player]) == true)) {
            DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogBorderImageAll[lp_index], lv_updateGroup, true);
            DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogBorderImageNoEnergy[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogBorderImage[lp_index], lv_updateGroup, false);
        }
        else {
            DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogBorderImageAll[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogBorderImageNoEnergy[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogBorderImage[lp_index], lv_updateGroup, true);
        }
        DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogEnergyBarBackground[lp_index], lv_updateGroup, true);
    }
    if ((lv_energy > 0)) {
        DialogControlSetSize(lib773A3C4C_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, lv_energy, lib773A3C4C_gv_cUC_HEROUIENERGYBARHEIGHT);
        DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, true);
    }
    else {
        DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, false);
    }
    libNtve_gf_SetDialogItemText(lib773A3C4C_gv_cU_HeroDialogLevelLabel[lp_index], IntToText(libCOOC_gf_CC_CommanderLevel(lp_player, libCOOC_gf_ActiveCommanderForPlayer(lp_player))), lv_updateGroup);
    if ((lib773A3C4C_gv_cU_VoidHeroUIDamageTimer[lp_index][lp_player] > 0.0)) {
        lib773A3C4C_gv_cU_VoidHeroUIDamageTimer[lp_index][lp_player] -= lib773A3C4C_gv_cUC_HeroUpdateFrequency;
        if ((lib773A3C4C_gv_cU_VoidHeroUIDamageTimer[lp_index][lp_player] <= 0.0)) {
            DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogDamageTakenLabel[lp_index], lv_updateGroup, false);
            DialogControlFadeTransparency(lib773A3C4C_gv_cU_HeroDialogDamageTakenImage[lp_index], lv_updateGroup, 1.0, 100.0);
        }

    }

    if ((UnitGetType(lib773A3C4C_gv_cU_HeroUnit[lp_index][lp_player]) == "VorazunChampion") && (UnitGetType(lib773A3C4C_gv_cU_HeroUnit[lp_index][lp_player]) == "Zul")) {
        libNtve_gf_SetDialogItemColor(lib773A3C4C_gv_cU_HeroDialogBorderImage[lp_index], libNtve_gf_ConvertPlayerColorToColor(7), PlayerGroupAll());
    }

    if ((UnitIsAlive(lib773A3C4C_gv_cU_HeroUnit[lp_index][lp_player]) == false) && (libCOMI_gf_GameIsOver() == false)) {
        DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogCooldownImage[lp_index], lv_updateGroup, false);
        if ((UnitGetPropertyFixed(lib773A3C4C_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, false);
        }

    }
    else {
        DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogCooldownImage[lp_index], lv_updateGroup, false);
    }
    libNtve_gf_SetDialogItemUnit(lib773A3C4C_gv_cU_HeroDialogButton[lp_index], lib773A3C4C_gv_cU_HeroUnit[lp_index][lp_player], lv_updateGroup);
}

string lib773A3C4C_gf_CU_PresetToHeroGameLink (int lp_championPreset) {
    // Automatic Variable Declarations
    int auto29DA7FE2_val;

    // Implementation
    auto29DA7FE2_val = lp_championPreset;
    {
        return null;
    }
}

bool lib773A3C4C_gf_CU_ChampionHasShields (int lp_heroType) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_heroType == lib773A3C4C_ge_CampaignHeroes_Alarak) || (lp_heroType == lib773A3C4C_ge_CampaignHeroes_Talandar) || (lp_heroType == lib773A3C4C_ge_CampaignHeroes_Zul) || (lp_heroType == lib773A3C4C_ge_CampaignHeroes_Zeratul) || (lp_heroType == lib773A3C4C_ge_CampaignHeroes_Vorazun) || (lp_heroType == lib773A3C4C_ge_CampaignHeroes_Selendis) || (lp_heroType == lib773A3C4C_ge_CampaignHeroes_Rohana) || (lp_heroType == lib773A3C4C_ge_CampaignHeroes_Karax) || (lp_heroType == lib773A3C4C_ge_CampaignHeroes_Artanis))) {
        return true;
    }
    else {
        return false;
    }
}

bool lib773A3C4C_gf_CU_ChampionHasShields2 (int lp_heroType) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_heroType == lib773A3C4C_ge_CampaignHeroes_Alarak) || (lp_heroType == lib773A3C4C_ge_CampaignHeroes_Vorazun) || (lp_heroType == lib773A3C4C_ge_CampaignHeroes_Talandar) || (lp_heroType == lib773A3C4C_ge_CampaignHeroes_Zul) || (lp_heroType == lib773A3C4C_ge_CampaignHeroes_Zeratul) || (lp_heroType == lib773A3C4C_ge_CampaignHeroes_Selendis) || (lp_heroType == lib773A3C4C_ge_CampaignHeroes_Rohana) || (lp_heroType == lib773A3C4C_ge_CampaignHeroes_Karax) || (lp_heroType == lib773A3C4C_ge_CampaignHeroes_Artanis))) {
        return true;
    }
    else {
        return false;
    }
}

void lib773A3C4C_gf_PointsDialogCreate () {
    // Automatic Variable Declarations
    // Implementation
    UISetCursorVisible(PlayerGroupAll(), true);
    DialogCreate(1250, 700, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    lib773A3C4C_gv_pointsDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_pointsDialog, 1250, 700, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_glues_pageassets_dialogbg.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    lib773A3C4C_gv_pointsDialogBorder = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_pointsDialog, 310, 450, c_anchorLeft, 120, 30, StringToText(""), "Assets\\Textures\\ui_frame_big_innerline_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    lib773A3C4C_gv_pointsDialogColumns[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_pointsDialog, 310, 450, c_anchorRight, 120, 30, StringToText(""), "Assets\\Textures\\ui_frame_big_innerline_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    lib773A3C4C_gv_pointsDialogColumns[2] = DialogControlLastCreated();
    DialogCreate(1250, 700, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    lib773A3C4C_gv_pointsDialogTitleDialog = DialogLastCreated();
    DialogSetTitle(lib773A3C4C_gv_pointsDialogTitleDialog, StringExternal("Param/Value/lib_773A3C4C_AB4EA73B"));
    DialogControlCreateFromTemplate(lib773A3C4C_gv_pointsDialog, c_triggerControlTypeButton, "LotV_StorySet/StorySetButtonTemplate");
    lib773A3C4C_gv_pointsDialogContinueButton = DialogControlLastCreated();
    DialogControlSetPosition(lib773A3C4C_gv_pointsDialogContinueButton, PlayerGroupAll(), c_anchorBottomRight, 20, 20);
    libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogContinueButton, StringExternal("Param/Value/lib_773A3C4C_B905ADAC"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_pointsDialogContinueButton, StringExternal("Param/Value/lib_773A3C4C_51AA5447"), PlayerGroupAll());
    DialogControlCreateFromTemplate(lib773A3C4C_gv_pointsDialog, c_triggerControlTypeButton, "LotV_StorySet/StorySetButtonTemplate");
    lib773A3C4C_gv_pointsDialogTutorialButton = DialogControlLastCreated();
    DialogControlSetPosition(lib773A3C4C_gv_pointsDialogTutorialButton, PlayerGroupAll(), c_anchorBottomLeft, 20, 20);
    libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogTutorialButton, StringExternal("Param/Value/lib_773A3C4C_D2E04F1B"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_pointsDialogTutorialButton, StringExternal("Param/Value/lib_773A3C4C_0FE7E03B"), PlayerGroupAll());
    DialogControlCreateFromTemplate(lib773A3C4C_gv_pointsDialog, c_triggerControlTypeButton, "LotV_StorySet/StorySetButtonTemplate");
    lib773A3C4C_gv_pointsDialogResetPointsButton = DialogControlLastCreated();
    DialogControlSetPosition(lib773A3C4C_gv_pointsDialogResetPointsButton, PlayerGroupAll(), c_anchorCenter, 0, 80);
    libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogResetPointsButton, StringExternal("Param/Value/lib_773A3C4C_C4721446"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_pointsDialogResetPointsButton, StringExternal("Param/Value/lib_773A3C4C_FA8C4375"), PlayerGroupAll());
    DialogCreate(800, 450, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    lib773A3C4C_gv_pointsDialogTutorialDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_pointsDialogTutorialDialog, 800, 450, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_glues_pageassets_dialogbg.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    lib773A3C4C_gv_pointsDialogTutorialDialogBorder = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(lib773A3C4C_gv_pointsDialogTutorialDialog, 750, 425, c_anchorCenter, 15, 100, StringExternal("Param/Value/lib_773A3C4C_72527CC5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib773A3C4C_gv_pointsDialogTutorialDialogText = DialogControlLastCreated();
    DialogCreate(800, 450, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    lib773A3C4C_gv_pointsDialogTutorialTitleDialog = DialogLastCreated();
    DialogSetTitle(lib773A3C4C_gv_pointsDialogTutorialTitleDialog, StringExternal("Param/Value/lib_773A3C4C_7E43B25C"));
    DialogControlCreateFromTemplate(lib773A3C4C_gv_pointsDialogTutorialDialog, c_triggerControlTypeButton, "LotV_StorySet/StorySetButtonTemplate");
    lib773A3C4C_gv_pointsDialogTutoialDialogContinueButton = DialogControlLastCreated();
    DialogControlSetPosition(lib773A3C4C_gv_pointsDialogTutoialDialogContinueButton, PlayerGroupAll(), c_anchorBottom, 0, 20);
    libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogTutoialDialogContinueButton, StringExternal("Param/Value/lib_773A3C4C_9F526836"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_pointsDialogTutoialDialogContinueButton, StringExternal("Param/Value/lib_773A3C4C_552DF831"), PlayerGroupAll());
    lib773A3C4C_gv_blackHoleDurationValue = 0;
    lib773A3C4C_gv_chronoBoostSpeedValue = 0;
    lib773A3C4C_gv_darkPylonRadiusValue = 0;
    lib773A3C4C_gv_shadowGuardDurationValue = 0;
    lib773A3C4C_gv_startingAndMaxSOAEnergyValue = 0;
    lib773A3C4C_gv_startingMineralsValue = 0;
    lib773A3C4C_gv_startingSupplyValue = 0;
    lib773A3C4C_gv_timeStopHasteValue = 0;
    lib773A3C4C_gv_pointsDialogPointsAmount = 0;
    lib773A3C4C_gv_pointsDialogPointsAmount = 15;
    if ((lib773A3C4C_gv_pC_CurrentMap == "Allies")) {
        lib773A3C4C_gv_pointsDialogPointsAmount = 15;
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "EnforcingJustice")) {
        lib773A3C4C_gv_pointsDialogPointsAmount = 25;
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "BrokenFaith")) {
        lib773A3C4C_gv_pointsDialogPointsAmount = 35;
    }

    libNtve_gf_CreateDialogItemLabel(lib773A3C4C_gv_pointsDialog, 200, 100, c_anchorCenter, 0, -140, (StringExternal("Param/Value/lib_773A3C4C_FCC385EE") + (IntToText(lib773A3C4C_gv_pointsDialogPointsAmount) + StringExternal("Param/Value/lib_773A3C4C_975CEC3F"))), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib773A3C4C_gv_pointsDialogPointsAmountLabel = DialogControlLastCreated();
    DialogControlCreateFromTemplate(lib773A3C4C_gv_pointsDialog, c_triggerControlTypeButton, "LotV_ShipUpgradeUI/ShipAuxiliaryTemplate/AuxiliaryPlusButton");
    lib773A3C4C_gv_blackHoleDurationPlusButton = DialogControlLastCreated();
    DialogControlSetPosition(lib773A3C4C_gv_blackHoleDurationPlusButton, PlayerGroupAll(), c_anchorLeft, 320, -100);
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_blackHoleDurationPlusButton, StringExternal("Param/Value/lib_773A3C4C_5A5601CB"), PlayerGroupAll());
    DialogControlCreateFromTemplate(lib773A3C4C_gv_pointsDialog, c_triggerControlTypeButton, "LotV_ShipUpgradeUI/ShipAuxiliaryTemplate/AuxiliaryMinusButton");
    lib773A3C4C_gv_blackHoleDurationMinusButton = DialogControlLastCreated();
    DialogControlSetPosition(lib773A3C4C_gv_blackHoleDurationMinusButton, PlayerGroupAll(), c_anchorLeft, 200, -100);
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_blackHoleDurationMinusButton, StringExternal("Param/Value/lib_773A3C4C_C5C5431A"), PlayerGroupAll());
    DialogControlCreateFromTemplate(lib773A3C4C_gv_pointsDialog, c_triggerControlTypeButton, "LotV_ShipUpgradeUI/ShipAuxiliaryTemplate/AuxiliaryPlusButton");
    lib773A3C4C_gv_startingMineralsPlusButton = DialogControlLastCreated();
    DialogControlSetPosition(lib773A3C4C_gv_startingMineralsPlusButton, PlayerGroupAll(), c_anchorLeft, 320, -10);
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_startingMineralsPlusButton, StringExternal("Param/Value/lib_773A3C4C_32B057BF"), PlayerGroupAll());
    DialogControlCreateFromTemplate(lib773A3C4C_gv_pointsDialog, c_triggerControlTypeButton, "LotV_ShipUpgradeUI/ShipAuxiliaryTemplate/AuxiliaryMinusButton");
    lib773A3C4C_gv_startingMineralsMinusButton = DialogControlLastCreated();
    DialogControlSetPosition(lib773A3C4C_gv_startingMineralsMinusButton, PlayerGroupAll(), c_anchorLeft, 200, -10);
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_startingMineralsMinusButton, StringExternal("Param/Value/lib_773A3C4C_6617DF50"), PlayerGroupAll());
    DialogControlCreateFromTemplate(lib773A3C4C_gv_pointsDialog, c_triggerControlTypeButton, "LotV_ShipUpgradeUI/ShipAuxiliaryTemplate/AuxiliaryPlusButton");
    lib773A3C4C_gv_startingSupplyPlusButton = DialogControlLastCreated();
    DialogControlSetPosition(lib773A3C4C_gv_startingSupplyPlusButton, PlayerGroupAll(), c_anchorLeft, 320, 80);
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_startingSupplyPlusButton, StringExternal("Param/Value/lib_773A3C4C_99F22C29"), PlayerGroupAll());
    DialogControlCreateFromTemplate(lib773A3C4C_gv_pointsDialog, c_triggerControlTypeButton, "LotV_ShipUpgradeUI/ShipAuxiliaryTemplate/AuxiliaryMinusButton");
    lib773A3C4C_gv_startingSupplyMinusButton = DialogControlLastCreated();
    DialogControlSetPosition(lib773A3C4C_gv_startingSupplyMinusButton, PlayerGroupAll(), c_anchorLeft, 200, 80);
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_startingSupplyMinusButton, StringExternal("Param/Value/lib_773A3C4C_114C9C89"), PlayerGroupAll());
    DialogControlCreateFromTemplate(lib773A3C4C_gv_pointsDialog, c_triggerControlTypeButton, "LotV_ShipUpgradeUI/ShipAuxiliaryTemplate/AuxiliaryPlusButton");
    lib773A3C4C_gv_darkPylonRadiusPlusButton = DialogControlLastCreated();
    DialogControlSetPosition(lib773A3C4C_gv_darkPylonRadiusPlusButton, PlayerGroupAll(), c_anchorLeft, 320, 170);
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_darkPylonRadiusPlusButton, StringExternal("Param/Value/lib_773A3C4C_5F1CAE81"), PlayerGroupAll());
    DialogControlCreateFromTemplate(lib773A3C4C_gv_pointsDialog, c_triggerControlTypeButton, "LotV_ShipUpgradeUI/ShipAuxiliaryTemplate/AuxiliaryMinusButton");
    lib773A3C4C_gv_darkPylonRadiusMinusButton = DialogControlLastCreated();
    DialogControlSetPosition(lib773A3C4C_gv_darkPylonRadiusMinusButton, PlayerGroupAll(), c_anchorLeft, 200, 170);
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_darkPylonRadiusMinusButton, StringExternal("Param/Value/lib_773A3C4C_6125AB00"), PlayerGroupAll());
    DialogControlCreateFromTemplate(lib773A3C4C_gv_pointsDialog, c_triggerControlTypeButton, "LotV_ShipUpgradeUI/ShipAuxiliaryTemplate/AuxiliaryPlusButton");
    lib773A3C4C_gv_startingAndMaxSOAEnergyPlusButton = DialogControlLastCreated();
    DialogControlSetPosition(lib773A3C4C_gv_startingAndMaxSOAEnergyPlusButton, PlayerGroupAll(), c_anchorRight, 200, -100);
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_startingAndMaxSOAEnergyPlusButton, StringExternal("Param/Value/lib_773A3C4C_85869B4E"), PlayerGroupAll());
    DialogControlCreateFromTemplate(lib773A3C4C_gv_pointsDialog, c_triggerControlTypeButton, "LotV_ShipUpgradeUI/ShipAuxiliaryTemplate/AuxiliaryMinusButton");
    lib773A3C4C_gv_startingAndMaxSOAEnergyMinusButton = DialogControlLastCreated();
    DialogControlSetPosition(lib773A3C4C_gv_startingAndMaxSOAEnergyMinusButton, PlayerGroupAll(), c_anchorRight, 320, -100);
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_startingAndMaxSOAEnergyMinusButton, StringExternal("Param/Value/lib_773A3C4C_17BBC9E5"), PlayerGroupAll());
    DialogControlCreateFromTemplate(lib773A3C4C_gv_pointsDialog, c_triggerControlTypeButton, "LotV_ShipUpgradeUI/ShipAuxiliaryTemplate/AuxiliaryPlusButton");
    lib773A3C4C_gv_chronoBoostSpeedPlusButton = DialogControlLastCreated();
    DialogControlSetPosition(lib773A3C4C_gv_chronoBoostSpeedPlusButton, PlayerGroupAll(), c_anchorRight, 200, -10);
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_chronoBoostSpeedPlusButton, StringExternal("Param/Value/lib_773A3C4C_58677D86"), PlayerGroupAll());
    DialogControlCreateFromTemplate(lib773A3C4C_gv_pointsDialog, c_triggerControlTypeButton, "LotV_ShipUpgradeUI/ShipAuxiliaryTemplate/AuxiliaryMinusButton");
    lib773A3C4C_gv_chronoBoostSpeedMinusButton = DialogControlLastCreated();
    DialogControlSetPosition(lib773A3C4C_gv_chronoBoostSpeedMinusButton, PlayerGroupAll(), c_anchorRight, 320, -10);
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_chronoBoostSpeedMinusButton, StringExternal("Param/Value/lib_773A3C4C_2011CB53"), PlayerGroupAll());
    DialogControlCreateFromTemplate(lib773A3C4C_gv_pointsDialog, c_triggerControlTypeButton, "LotV_ShipUpgradeUI/ShipAuxiliaryTemplate/AuxiliaryPlusButton");
    lib773A3C4C_gv_shadowGuardDurationPlusButton = DialogControlLastCreated();
    DialogControlSetPosition(lib773A3C4C_gv_shadowGuardDurationPlusButton, PlayerGroupAll(), c_anchorRight, 200, 80);
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_shadowGuardDurationPlusButton, StringExternal("Param/Value/lib_773A3C4C_A5D2EB74"), PlayerGroupAll());
    DialogControlCreateFromTemplate(lib773A3C4C_gv_pointsDialog, c_triggerControlTypeButton, "LotV_ShipUpgradeUI/ShipAuxiliaryTemplate/AuxiliaryMinusButton");
    lib773A3C4C_gv_shadowGuardDurationMinusButton = DialogControlLastCreated();
    DialogControlSetPosition(lib773A3C4C_gv_shadowGuardDurationMinusButton, PlayerGroupAll(), c_anchorRight, 320, 80);
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_shadowGuardDurationMinusButton, StringExternal("Param/Value/lib_773A3C4C_2F00D2FE"), PlayerGroupAll());
    DialogControlCreateFromTemplate(lib773A3C4C_gv_pointsDialog, c_triggerControlTypeButton, "LotV_ShipUpgradeUI/ShipAuxiliaryTemplate/AuxiliaryPlusButton");
    lib773A3C4C_gv_timeStopHastePlusButton = DialogControlLastCreated();
    DialogControlSetPosition(lib773A3C4C_gv_timeStopHastePlusButton, PlayerGroupAll(), c_anchorRight, 200, 170);
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_timeStopHastePlusButton, StringExternal("Param/Value/lib_773A3C4C_E0DCF575"), PlayerGroupAll());
    DialogControlCreateFromTemplate(lib773A3C4C_gv_pointsDialog, c_triggerControlTypeButton, "LotV_ShipUpgradeUI/ShipAuxiliaryTemplate/AuxiliaryMinusButton");
    lib773A3C4C_gv_timeStopHasteMinusButton = DialogControlLastCreated();
    DialogControlSetPosition(lib773A3C4C_gv_timeStopHasteMinusButton, PlayerGroupAll(), c_anchorRight, 320, 170);
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_timeStopHasteMinusButton, StringExternal("Param/Value/lib_773A3C4C_916A3949"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(lib773A3C4C_gv_pointsDialog, 250, 30, c_anchorLeft, 185, -130, StringExternal("Param/Value/lib_773A3C4C_6937E8FA"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib773A3C4C_gv_blackHoleDurationLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_blackHoleDurationLabel, StringExternal("Param/Value/lib_773A3C4C_283F4052"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(lib773A3C4C_gv_pointsDialog, 250, 30, c_anchorLeft, 185, -40, StringExternal("Param/Value/lib_773A3C4C_66A1F7DA"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib773A3C4C_gv_startingMineralsLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_startingMineralsLabel, StringExternal("Param/Value/lib_773A3C4C_39136EAC"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(lib773A3C4C_gv_pointsDialog, 250, 30, c_anchorLeft, 185, 50, StringExternal("Param/Value/lib_773A3C4C_604E7FD8"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib773A3C4C_gv_startingSupplyLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_startingSupplyLabel, StringExternal("Param/Value/lib_773A3C4C_C4D9B669"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(lib773A3C4C_gv_pointsDialog, 250, 30, c_anchorLeft, 185, 140, StringExternal("Param/Value/lib_773A3C4C_7636959D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib773A3C4C_gv_darkPylonRadiusLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_darkPylonRadiusLabel, StringExternal("Param/Value/lib_773A3C4C_52821A36"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(lib773A3C4C_gv_pointsDialog, 270, 30, c_anchorRight, 140, -130, StringExternal("Param/Value/lib_773A3C4C_04B20548"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib773A3C4C_gv_startingAndMaxSOAEnergyLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_startingAndMaxSOAEnergyLabel, StringExternal("Param/Value/lib_773A3C4C_B46300C3"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(lib773A3C4C_gv_pointsDialog, 250, 30, c_anchorRight, 130, -40, StringExternal("Param/Value/lib_773A3C4C_275D8C1C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib773A3C4C_gv_chronoBoostSpeedLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_chronoBoostSpeedLabel, StringExternal("Param/Value/lib_773A3C4C_C38EFECE"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(lib773A3C4C_gv_pointsDialog, 250, 30, c_anchorRight, 130, 50, StringExternal("Param/Value/lib_773A3C4C_1817AF1D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib773A3C4C_gv_shadowGuardDurationLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_shadowGuardDurationLabel, StringExternal("Param/Value/lib_773A3C4C_F8273D3C"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(lib773A3C4C_gv_pointsDialog, 250, 30, c_anchorRight, 115, 140, StringExternal("Param/Value/lib_773A3C4C_5D5D1817"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib773A3C4C_gv_timeStopHasteLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_timeStopHasteLabel, StringExternal("Param/Value/lib_773A3C4C_A57AA8C3"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(lib773A3C4C_gv_pointsDialog, 90, 20, c_anchorLeft, 238, -100, ((StringExternal("Param/Value/lib_773A3C4C_DDC51158") + IntToText(lib773A3C4C_gv_blackHoleDurationValue)) + StringExternal("Param/Value/lib_773A3C4C_61BF9A2C")), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib773A3C4C_gv_blackHoleDurationValueLabel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lib773A3C4C_gv_pointsDialog, 90, 20, c_anchorLeft, 238, -10, ((StringExternal("Param/Value/lib_773A3C4C_D1E4C06B") + IntToText(lib773A3C4C_gv_startingMineralsValue)) + StringExternal("Param/Value/lib_773A3C4C_E8D66B00")), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib773A3C4C_gv_startingMineralsValueLabel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lib773A3C4C_gv_pointsDialog, 90, 20, c_anchorLeft, 238, 80, ((StringExternal("Param/Value/lib_773A3C4C_46AD6CFC") + IntToText(lib773A3C4C_gv_startingSupplyValue)) + StringExternal("Param/Value/lib_773A3C4C_01E85D21")), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib773A3C4C_gv_startingSupplyValueLabel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lib773A3C4C_gv_pointsDialog, 90, 20, c_anchorLeft, 238, 170, ((StringExternal("Param/Value/lib_773A3C4C_9D087121") + IntToText(lib773A3C4C_gv_darkPylonRadiusValue)) + StringExternal("Param/Value/lib_773A3C4C_5BA100C3")), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib773A3C4C_gv_darkPylonRadiusValueLabel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lib773A3C4C_gv_pointsDialog, 80, 20, c_anchorRight, 238, -100, ((StringExternal("Param/Value/lib_773A3C4C_D5E3043E") + IntToText(lib773A3C4C_gv_startingAndMaxSOAEnergyValue)) + StringExternal("Param/Value/lib_773A3C4C_6FE5E39A")), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib773A3C4C_gv_startingAndMaxSOAEnergyValueLabel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lib773A3C4C_gv_pointsDialog, 80, 20, c_anchorRight, 238, -10, ((StringExternal("Param/Value/lib_773A3C4C_DC0C9278") + IntToText(lib773A3C4C_gv_chronoBoostSpeedValue)) + StringExternal("Param/Value/lib_773A3C4C_E0E3419C")), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib773A3C4C_gv_chronoBoostSpeedValueLabel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lib773A3C4C_gv_pointsDialog, 80, 20, c_anchorRight, 238, 80, ((StringExternal("Param/Value/lib_773A3C4C_218CE62B") + IntToText(lib773A3C4C_gv_shadowGuardDurationValue)) + StringExternal("Param/Value/lib_773A3C4C_F899B64B")), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib773A3C4C_gv_shadowGuardDurationValueLabel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lib773A3C4C_gv_pointsDialog, 80, 20, c_anchorRight, 238, 170, ((StringExternal("Param/Value/lib_773A3C4C_17D10989") + IntToText(lib773A3C4C_gv_timeStopHasteValue)) + StringExternal("Param/Value/lib_773A3C4C_2E856952")), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib773A3C4C_gv_timeStopHasteValueLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemColor(lib773A3C4C_gv_pointsDialogBorder, Color(22*100/255,128*100/255,0), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(lib773A3C4C_gv_pointsDialogContinueButton, Color(22*100/255,128*100/255,0), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(lib773A3C4C_gv_pointsDialogResetPointsButton, Color(22*100/255,128*100/255,0), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(lib773A3C4C_gv_pointsDialogTutorialButton, Color(22*100/255,128*100/255,0), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(lib773A3C4C_gv_pointsDialogTutoialDialogContinueButton, Color(22*100/255,128*100/255,0), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(lib773A3C4C_gv_pointsDialogTutorialDialogBorder, Color(22*100/255,128*100/255,0), PlayerGroupAll());
    if ((lib773A3C4C_gv_pC_CurrentMap == "Allies")) {
        DialogControlDestroy(lib773A3C4C_gv_chronoBoostSpeedLabel);
        DialogControlDestroy(lib773A3C4C_gv_chronoBoostSpeedMinusButton);
        DialogControlDestroy(lib773A3C4C_gv_chronoBoostSpeedPlusButton);
        DialogControlDestroy(lib773A3C4C_gv_chronoBoostSpeedValueLabel);
        DialogControlDestroy(lib773A3C4C_gv_shadowGuardDurationLabel);
        DialogControlDestroy(lib773A3C4C_gv_shadowGuardDurationMinusButton);
        DialogControlDestroy(lib773A3C4C_gv_shadowGuardDurationPlusButton);
        DialogControlDestroy(lib773A3C4C_gv_shadowGuardDurationValueLabel);
        DialogControlDestroy(lib773A3C4C_gv_startingAndMaxSOAEnergyLabel);
        DialogControlDestroy(lib773A3C4C_gv_startingAndMaxSOAEnergyMinusButton);
        DialogControlDestroy(lib773A3C4C_gv_startingAndMaxSOAEnergyPlusButton);
        DialogControlDestroy(lib773A3C4C_gv_startingAndMaxSOAEnergyValueLabel);
        DialogControlDestroy(lib773A3C4C_gv_timeStopHasteLabel);
        DialogControlDestroy(lib773A3C4C_gv_timeStopHasteMinusButton);
        DialogControlDestroy(lib773A3C4C_gv_timeStopHastePlusButton);
        DialogControlDestroy(lib773A3C4C_gv_timeStopHasteValueLabel);
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "EnforcingJustice")) {
        DialogControlDestroy(lib773A3C4C_gv_shadowGuardDurationLabel);
        DialogControlDestroy(lib773A3C4C_gv_shadowGuardDurationMinusButton);
        DialogControlDestroy(lib773A3C4C_gv_shadowGuardDurationPlusButton);
        DialogControlDestroy(lib773A3C4C_gv_shadowGuardDurationValueLabel);
        DialogControlDestroy(lib773A3C4C_gv_timeStopHasteLabel);
        DialogControlDestroy(lib773A3C4C_gv_timeStopHasteMinusButton);
        DialogControlDestroy(lib773A3C4C_gv_timeStopHastePlusButton);
        DialogControlDestroy(lib773A3C4C_gv_timeStopHasteValueLabel);
    }

    DialogSetVisible(lib773A3C4C_gv_pointsDialog, PlayerGroupAll(), true);
    DialogSetVisible(lib773A3C4C_gv_pointsDialogTitleDialog, PlayerGroupAll(), true);
    DialogSetVisible(lib773A3C4C_gv_pointsDialogTutorialTitleDialog, PlayerGroupAll(), false);
    DialogSetVisible(lib773A3C4C_gv_pointsDialogTutorialDialog, PlayerGroupAll(), false);
}

void lib773A3C4C_gf_SendTransmissionCampaign (text lp_name, string lp_potraitModel, text lp_message, unit lp_unit, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption, string lp_portraitActor) {
    // Automatic Variable Declarations
    // Implementation
    lib773A3C4C_gf_PM_SendTransmissionCampaignInternal(lp_unit, lp_potraitModel, lp_name, lp_message, lp_durationType, lp_duration, lp_waitUntilDone, lp_keepPortraitVisible, lp_cueSoundOption, lp_portraitActor);
}

void lib773A3C4C_gf_PM_SendTransmissionCampaignInternal (unit lp_unit, string lp_model, text lp_speaker, text lp_message, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption, string lp_portraitActor) {
    // Variable Declarations
    int lv_portrait;
    transmissionsource lv_source;
    int lv_localIndex;
    unit lv_oldSpeaker;
    trigger lv_oldTrigger;
    actor lv_talkBubble;
    actor lv_talkRing;
    int lv_ping;
    bool lv_flashOption;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_portrait = c_invalidPortraitId;
    lv_source = TransmissionSource();
    lv_ping = c_invalidPingId;
    lv_flashOption = true;

    // Implementation
    lib773A3C4C_gv_pM_SendTransmissionCampaignIndex += 1;
    lv_localIndex = lib773A3C4C_gv_pM_SendTransmissionCampaignIndex;
    lv_oldSpeaker = lib773A3C4C_gv_pM_SendTransmissionCampaignSpeaker;
    lib773A3C4C_gv_pM_SendTransmissionCampaignSpeaker = lp_unit;
    lv_oldTrigger = lib773A3C4C_gv_pM_SendTransmissionCampaignTrigger;
    lib773A3C4C_gv_pM_SendTransmissionCampaignTrigger = TriggerGetCurrent();
    if ((lp_keepPortraitVisible != lib773A3C4C_ge_MissionTransmissionPortraitOptioins_DontShowPortrait) && ((lp_model != null) || ((lp_model == null)) || ((lp_unit != null)))) {
        if ((libNtve_gf_PlayerInCinematicMode(1) == false)) {
            lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft);
        }
        else {
            lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft);
        }
    }
    else {
        lv_portrait = c_invalidPortraitId;
    }
    if (((lp_cueSoundOption == lib773A3C4C_ge_MissionTransmissionCueSoundOptions_PlayCueSound) || ((lp_cueSoundOption == lib773A3C4C_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior) && (libNtve_gf_PlayerInCinematicMode(1) == false) && (lv_portrait != c_invalidPortraitId) && (PortraitVisible(lib773A3C4C_gv_pM_SendTransmissionCampaignPortrait, 1) == false)))) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    lib773A3C4C_gv_pM_SendTransmissionCampaignPortrait = lv_portrait;
    if ((lib773A3C4C_gv_pM_SendTransmissionCampaignPortrait != c_invalidPortraitId)) {
        PortraitSetVisible(lib773A3C4C_gv_pM_SendTransmissionCampaignPortrait, PlayerGroupAll(), true, false);
    }

    lib773A3C4C_gv_pM_SendTransmissionCampaignPlayingTick = 3;
    if ((lp_unit == null)) {
        if ((lv_portrait == c_invalidPortraitId)) {
            lv_source = TransmissionSource();
        }
        else {
            if ((lp_model == null)) {
                lv_source = TransmissionSourceFromModel(null);
            }
            else {
                lv_source = TransmissionSourceFromModel(lp_model);
            }
        }
    }
    else {
        if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
            lv_flashOption = false;
        }
        else {
            lv_flashOption = true;
        }
        if ((lp_model == null)) {
            if ((UnitGetOwner(lp_unit) == 1)) {
                lv_source = TransmissionSourceFromUnit(lp_unit, lv_flashOption, true, "Talk");
            }

        }
        else {
            lv_source = TransmissionSourceFromModel(lp_model);
        }
    }
    if ((lp_unit != null) && (lp_unit != lv_oldSpeaker) && (UnitIsAlive(lp_unit) == true)) {
        if ((libNtve_gf_UnitIsVisibleToPlayer(lp_unit, 1) == true)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "TalkIcon", PointWithOffset(UnitGetPosition(lp_unit), 0.5, 3.5), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 2.0, 270.0);
            lv_ping = PingLastCreated();
            PingSetScale(PingLastCreated(), 0.3);
        }

    }

    if ((lp_unit != null)) {
        TransmissionSendForPlayerSelect(PlayerGroupSingle(1), TransmissionSourceFromUnit(lp_unit, true, false, "Talk"), lv_portrait, lp_portraitActor, "Talk", null, lp_speaker, lp_message, lp_duration, lp_durationType, lp_waitUntilDone, c_maxPlayers, false);
    }
    else {
        TransmissionSendForPlayerSelect(PlayerGroupSingle(1), TransmissionSourceFromModel(lp_model), lv_portrait, lp_portraitActor, "Talk", null, lp_speaker, lp_message, lp_duration, lp_durationType, lp_waitUntilDone, c_maxPlayers, false);
    }
    if ((lp_waitUntilDone == false)) {
        lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp(TransmissionLastSent(), lp_keepPortraitVisible, lv_portrait, lv_talkBubble, lv_talkRing, lv_ping, lv_localIndex);
    }
    else {
        lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp(c_invalidTransmissionId, lp_keepPortraitVisible, lv_portrait, lv_talkBubble, lv_talkRing, lv_ping, lv_localIndex);
    }
}

trigger auto_lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp_Trigger = null;
int auto_lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp_lp_transmission;
int auto_lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible;
int auto_lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp_lp_portrait;
actor auto_lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp_lp_talkIcon;
actor auto_lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp_lp_talkRing;
int auto_lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp_lp_ping;
int auto_lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp_lp_localIndex;

void lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp (int lp_transmission, int lp_keepPortraitVisible, int lp_portrait, actor lp_talkIcon, actor lp_talkRing, int lp_ping, int lp_localIndex) {
    auto_lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp_lp_transmission = lp_transmission;
    auto_lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible = lp_keepPortraitVisible;
    auto_lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp_lp_portrait = lp_portrait;
    auto_lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp_lp_talkIcon = lp_talkIcon;
    auto_lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp_lp_talkRing = lp_talkRing;
    auto_lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp_lp_ping = lp_ping;
    auto_lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp_lp_localIndex = lp_localIndex;

    if (auto_lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp_Trigger == null) {
        auto_lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp_Trigger = TriggerCreate("auto_lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp_TriggerFunc");
    }

    TriggerExecute(auto_lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp_Trigger, false, false);
}

bool auto_lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp_TriggerFunc (bool testConds, bool runActions) {
    int lp_transmission = auto_lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp_lp_transmission;
    int lp_keepPortraitVisible = auto_lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible;
    int lp_portrait = auto_lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp_lp_portrait;
    actor lp_talkIcon = auto_lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp_lp_talkIcon;
    actor lp_talkRing = auto_lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp_lp_talkRing;
    int lp_ping = auto_lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp_lp_ping;
    int lp_localIndex = auto_lib773A3C4C_gf_PM_SendTransmissionCampaignCleanUp_lp_localIndex;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_transmission != c_invalidTransmissionId)) {
        TransmissionWait(lp_transmission, 0.0);
    }

    Wait(0.75, c_timeReal);
    if ((lp_localIndex != lib773A3C4C_gv_pM_SendTransmissionCampaignIndex)) {
        if ((lib773A3C4C_gv_pM_SendTransmissionCampaignPortrait != lp_portrait) && (lp_portrait != c_invalidPortraitId) && (lp_keepPortraitVisible == lib773A3C4C_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter)) {
            PortraitSetModel(lp_portrait, "StaticPortrait", false);
            PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
        }

        if ((lp_talkIcon != null)) {
            libNtve_gf_KillModel(lp_talkIcon);
        }

        if ((lp_talkRing != null)) {
            libNtve_gf_KillModel(lp_talkRing);
        }

        return true;
    }

    lib773A3C4C_gv_pM_SendTransmissionCampaignIndex = 0;
    lib773A3C4C_gv_pM_SendTransmissionCampaignSpeaker = null;
    TriggerExecute(lib773A3C4C_gt_VorazunSendTransmissionTick, true, false);
    if ((lp_keepPortraitVisible == lib773A3C4C_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter) && (lp_portrait != c_invalidPortraitId)) {
        PortraitSetModel(lp_portrait, "StaticPortrait", false);
        PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    }

    if ((lp_talkIcon != null)) {
        libNtve_gf_KillModel(lp_talkIcon);
    }

    if ((lp_talkRing != null)) {
        libNtve_gf_KillModel(lp_talkRing);
    }

    if ((lp_ping != c_invalidPingId)) {
        PingDestroy(lp_ping);
    }

    return true;
}

void lib773A3C4C_gf_DisplayCampaignMessage (int lp_messageType, text lp_message, text lp_message3, string lp_message2) {
    // Automatic Variable Declarations
    int autoB28D862D_val;

    // Implementation
    autoB28D862D_val = lp_messageType;
    if (autoB28D862D_val == lib773A3C4C_ge_CampaignMessageType_NewHero) {
        TextExpressionSetToken("Param/Expression/lib_773A3C4C_CFFC4BE5", "A", lp_message3);
        TextExpressionSetToken("Param/Expression/lib_773A3C4C_D613B67B", "A", lp_message3);
        HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(TextExpressionAssemble("Param/Expression/lib_773A3C4C_CFFC4BE5"), libNtve_ge_TipType_NormalTip), lp_message, TextExpressionAssemble("Param/Expression/lib_773A3C4C_D613B67B"), lp_message2);
    }
    else if (autoB28D862D_val == lib773A3C4C_ge_CampaignMessageType_NewEnemy) {
        TextExpressionSetToken("Param/Expression/lib_773A3C4C_55F98ED4", "A", lp_message3);
        TextExpressionSetToken("Param/Expression/lib_773A3C4C_E97D2CD7", "A", lp_message3);
        HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(TextExpressionAssemble("Param/Expression/lib_773A3C4C_55F98ED4"), libNtve_ge_TipType_NormalTip), lp_message, TextExpressionAssemble("Param/Expression/lib_773A3C4C_E97D2CD7"), lp_message2);
    }
    else if (autoB28D862D_val == lib773A3C4C_ge_CampaignMessageType_MissionStrategy) {
        TextExpressionSetToken("Param/Expression/lib_773A3C4C_5115A96A", "A", lp_message3);
        TextExpressionSetToken("Param/Expression/lib_773A3C4C_8B5F8A16", "A", lp_message3);
        HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(TextExpressionAssemble("Param/Expression/lib_773A3C4C_5115A96A"), libNtve_ge_TipType_NormalTip), lp_message, TextExpressionAssemble("Param/Expression/lib_773A3C4C_8B5F8A16"), lp_message2);
    }
    else if (autoB28D862D_val == lib773A3C4C_ge_CampaignMessageType_Faction) {
        TextExpressionSetToken("Param/Expression/lib_773A3C4C_C2F8563E", "A", lp_message3);
        TextExpressionSetToken("Param/Expression/lib_773A3C4C_D8B54EAC", "A", lp_message3);
        HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(TextExpressionAssemble("Param/Expression/lib_773A3C4C_C2F8563E"), libNtve_ge_TipType_NormalTip), lp_message, TextExpressionAssemble("Param/Expression/lib_773A3C4C_D8B54EAC"), lp_message2);
    }
    else if (autoB28D862D_val == lib773A3C4C_ge_CampaignMessageType_NewUnit) {
        TextExpressionSetToken("Param/Expression/lib_773A3C4C_B3535450", "A", lp_message3);
        TextExpressionSetToken("Param/Expression/lib_773A3C4C_2EB6BD96", "A", lp_message3);
        HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(TextExpressionAssemble("Param/Expression/lib_773A3C4C_B3535450"), libNtve_ge_TipType_NormalTip), lp_message, TextExpressionAssemble("Param/Expression/lib_773A3C4C_2EB6BD96"), lp_message2);
    }
    else if (autoB28D862D_val == lib773A3C4C_ge_CampaignMessageType_NewAbility) {
        TextExpressionSetToken("Param/Expression/lib_773A3C4C_856C001D", "A", lp_message3);
        TextExpressionSetToken("Param/Expression/lib_773A3C4C_36DA6E16", "A", lp_message3);
        HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(TextExpressionAssemble("Param/Expression/lib_773A3C4C_856C001D"), libNtve_ge_TipType_NormalTip), lp_message, TextExpressionAssemble("Param/Expression/lib_773A3C4C_36DA6E16"), lp_message2);
    }
    else if (autoB28D862D_val == lib773A3C4C_ge_CampaignMessageType_NewLocation) {
        TextExpressionSetToken("Param/Expression/lib_773A3C4C_79FB3B49", "A", lp_message3);
        TextExpressionSetToken("Param/Expression/lib_773A3C4C_C6AB494F", "A", lp_message3);
        HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(TextExpressionAssemble("Param/Expression/lib_773A3C4C_79FB3B49"), libNtve_ge_TipType_NormalTip), lp_message, TextExpressionAssemble("Param/Expression/lib_773A3C4C_C6AB494F"), lp_message2);
    }
    else if (autoB28D862D_val == lib773A3C4C_ge_CampaignMessageType_None) {
        TextExpressionSetToken("Param/Expression/lib_773A3C4C_70DDBBD9", "A", lp_message3);
        TextExpressionSetToken("Param/Expression/lib_773A3C4C_8C63057E", "A", lp_message3);
        HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(TextExpressionAssemble("Param/Expression/lib_773A3C4C_70DDBBD9"), libNtve_ge_TipType_NormalTip), lp_message, TextExpressionAssemble("Param/Expression/lib_773A3C4C_8C63057E"), lp_message2);
    }
    else {
    }
}

void lib773A3C4C_gf_DisplayTextCrawl (text lp_title, text lp_body, int lp_time) {
    // Automatic Variable Declarations
    // Implementation
    UIShowTextCrawl(PlayerGroupAll(), lp_title, lp_body, lp_time, SoundLink("TextCrawlType", -1), SoundLink("TextCrawlType", -1));
    Wait((lp_time + 2), c_timeGame);
    UIHideTextCrawl(PlayerGroupAll());
}

void lib773A3C4C_gf_HeroDies (int lp_objective, unit lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    lib773A3C4C_gf_FailObjective(lp_objective);
    lib773A3C4C_gf_DisplayMissionFailed((UnitGetName(lp_hero) + StringExternal("Param/Value/lib_773A3C4C_CB398811")));
    Wait(3.0, c_timeGame);
    GameOver(1, c_gameOverDefeat, true, true);
}

void lib773A3C4C_gf_DisplayMissionFailed (text lp_message) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupSingle(1), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_773A3C4C_813D1BBF") + lp_message));
    SoundPlay(SoundLink("TUIWarning", 0), PlayerGroupSingle(1), 100.0, 0.0);
}

void lib773A3C4C_gf_DisplayTip (text lp_message) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupSingle(1), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_773A3C4C_B5325B58") + lp_message));
    SoundPlay(SoundLink("UI_TerranHint", 0), PlayerGroupSingle(1), 100.0, 0.0);
}

void lib773A3C4C_gf_DisplayNewUnitAcquired (text lp_message) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupSingle(1), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_773A3C4C_53323647") + lp_message));
    SoundPlay(SoundLink("UI_TerranNewUnitAcquired", 0), PlayerGroupSingle(1), 100.0, 0.0);
}

void lib773A3C4C_gf_DisplayNewUnitAvailable (text lp_message) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupSingle(1), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_773A3C4C_D96607CB") + lp_message));
    SoundPlay(SoundLink("UI_TerranNewUnitAvailable", 0), PlayerGroupSingle(1), 100.0, 0.0);
}

void lib773A3C4C_gf_DisplayAWarning (text lp_message) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupSingle(1), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_773A3C4C_D4BA8D48") + lp_message));
    SoundPlay(SoundLink("TUIWarning", 0), PlayerGroupSingle(1), 100.0, 0.0);
}

void lib773A3C4C_gf_DisplayCampaignVictoryScoreScreen () {
    // Automatic Variable Declarations
    // Implementation
    if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    }

    CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UISetWorldVisible(PlayerGroupAll(), false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    libVCUI_gf_PU_GPVisibilityAutoUpdate(false, c_transitionDurationImmediate);
    libVCUI_gf_HideCampaignDirective();
    UISetCursorVisible(PlayerGroupAll(), true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, true);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    TransmissionClearAll();
    ConversationDataStop();
    libVoiC_gf_SetAllSoundChannelVolumesCampaign(libVoiC_ge_VolumeChannelModeCampaign_Victory);
    if ((lib773A3C4C_gv_pC_CurrentMap != "ShroudofShadows")) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "VictoryScreenMusic", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "VictoryScreenMusicSoS", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    lib773A3C4C_gf_PU_CreateVictoryScreen();
    lib773A3C4C_gf_PU_UpdateVictoryScreen();
}

void lib773A3C4C_gf_PU_CreateVictoryScreen () {
    // Variable Declarations
    text lv_missionName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_missionName = lib773A3C4C_gf_GetMissionName();

    // Implementation
    DialogCreate(2560, 1440, c_anchorCenter, 0, 0, true);
    lib773A3C4C_gv_pU_VSDialog4 = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(lib773A3C4C_gv_pU_VSDialog4, true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2560, 1440, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\space-space-art-planet-joeyjazz.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogCreate(1100, 750, c_anchorCenter, 0, 70, true);
    lib773A3C4C_gv_pU_VSDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_pU_VSDialog, 1100, 750, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_glues_pageassets_dialogbg.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    lib773A3C4C_gv_victoryBorder = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 495, 151, c_anchorBottomRight, 0, 169, StringToText(""), "Assets\\Textures\\ui_void_spearofadun_callout.dds", c_triggerImageTypeNormal, true, Color(22*100/255,128*100/255,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 495, 151, c_anchorTopLeft, 0, 150, StringToText(""), "Assets\\Textures\\ui_void_spearofadun_callout_highlight.dds", c_triggerImageTypeNormal, true, Color(22*100/255,128*100/255,0), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 590, 80, c_anchorBottomLeft, 0, 210, StringToText(""), "Assets\\Textures\\ui_void_armyupgrade_categorybutton_selected.dds", c_triggerImageTypeNormal, true, Color(22*100/255,128*100/255,0), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 590, 80, c_anchorTopRight, 0, 194, StringToText(""), "Assets\\Textures\\ui_void_armyupgrade_categorybutton_selected.dds", c_triggerImageTypeNormal, true, Color(22*100/255,128*100/255,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 359, 38, c_anchorCenter, 0, -170, StringToText(""), "Assets\\Textures\\ui_void_armyupgrade_factionnerazim_underline.dds", c_triggerImageTypeNormal, true, Color(22*100/255,128*100/255,0), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 359, 38, c_anchorCenter, 0, -290, StringToText(""), "Assets\\Textures\\ui_void_armyupgrade_factionnerazim_underline.dds", c_triggerImageTypeNormal, true, Color(22*100/255,128*100/255,0), c_triggerBlendModeNormal);
    lib773A3C4C_gv_pU_VSBtnPlayAgain2[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 359, 38, c_anchorCenter, 0, 155, StringToText(""), "Assets\\Textures\\ui_void_armyupgrade_factionnerazim_underline.dds", c_triggerImageTypeNormal, true, Color(22*100/255,128*100/255,0), c_triggerBlendModeNormal);
    lib773A3C4C_gv_pU_VSBtnPlayAgain2[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 200, c_anchorTop, 50, 30, StringExternal("Param/Value/lib_773A3C4C_A5F73B0E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib773A3C4C_gv_pU_VSLabelTime = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 75, c_anchorLeft, 50, -200, StringExternal("Param/Value/lib_773A3C4C_7BC4C3DD"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib773A3C4C_gv_victoryRecapLabel = DialogControlLastCreated();
    DialogCreate(400, 300, c_anchorTop, 0, 0, true);
    lib773A3C4C_gv_pU_VSDialog2 = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lib773A3C4C_gv_vICTORYTITLEXSize, 100, c_anchorCenter, 0, -50, StringExternal("Param/Value/lib_773A3C4C_A57487D2"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib773A3C4C_gv_pU_VSLabelVictoryTitle = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 380, 60, c_anchorCenter, lib773A3C4C_gv_missionNameOffsetX, -20, (StringExternal("Param/Value/lib_773A3C4C_EC083E8D") + lv_missionName), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 60, c_anchorCenter, lib773A3C4C_gv_difficultyOffsetX, 20, (StringExternal("Param/Value/lib_773A3C4C_8D4462DC") + lib773A3C4C_gv_difficulty), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_pU_VSDialog, 138, 138, c_anchorBottomLeft, 175, 25, StringToText(""), "Assets/Textures/btn-border-ability.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_pU_VSDialog, 138, 138, c_anchorBottom, -100, 25, StringToText(""), "Assets/Textures/btn-border-ability.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_pU_VSDialog, 138, 138, c_anchorBottom, 100, 25, StringToText(""), "Assets/Textures/btn-border-ability.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_pU_VSDialog, 138, 138, c_anchorBottomRight, 175, 25, StringToText(""), "Assets/Textures/btn-border-ability.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogCreate(1000, 300, c_anchorBottom, 0, -50, true);
    lib773A3C4C_gv_pU_VSDialog3 = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreateFromTemplate(lib773A3C4C_gv_pU_VSDialog3, c_triggerControlTypeButton, "LotV_StorySet/StorySetButtonTemplate");
    lib773A3C4C_gv_pU_VSBtnContinue = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorRight, 0, 0);
    libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pU_VSBtnContinue, StringExternal("Param/Value/lib_773A3C4C_3A2B687E"), PlayerGroupAll());
    DialogControlCreateFromTemplate(lib773A3C4C_gv_pU_VSDialog3, c_triggerControlTypeButton, "LotV_StorySet/StorySetButtonTemplate");
    lib773A3C4C_gv_replayMissionButton = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemText(lib773A3C4C_gv_replayMissionButton, StringExternal("Param/Value/lib_773A3C4C_D8B39F2B"), PlayerGroupAll());
    DialogControlCreateFromTemplate(lib773A3C4C_gv_pU_VSDialog3, c_triggerControlTypeButton, "LotV_StorySet/StorySetButtonTemplate");
    lib773A3C4C_gv_pU_VSBtnPlayAgain = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, 0, 0);
    libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pU_VSBtnPlayAgain, StringExternal("Param/Value/lib_773A3C4C_E0D8C741"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_pU_VSBtnContinue, StringExternal("Param/Value/lib_773A3C4C_61C3D05E"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_pU_VSBtnPlayAgain, StringExternal("Param/Value/lib_773A3C4C_CEB4BD02"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_replayMissionButton, StringExternal("Param/Value/lib_773A3C4C_76E7BD7C"), PlayerGroupAll());
}

void lib773A3C4C_gf_PU_UpdateVictoryScreen () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib773A3C4C_gv_totalMissionTime = FixedToInt(GameGetMissionTime());
    libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pU_VSLabelTime, (StringExternal("Param/Value/lib_773A3C4C_4DFDDA6C") + (StringExternal("Param/Value/lib_773A3C4C_17D01597") + (libVoiC_gf_FormatTimeCampaign(lib773A3C4C_gv_totalMissionTime) + StringExternal("Param/Value/lib_773A3C4C_2E4084E7")))), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(lib773A3C4C_gv_pU_VSBtnPlayAgain, Color(22*100/255,128*100/255,0), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(lib773A3C4C_gv_pU_VSBtnContinue, Color(22*100/255,128*100/255,0), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(lib773A3C4C_gv_replayMissionButton, Color(22*100/255,128*100/255,0), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(lib773A3C4C_gv_victoryBorder, Color(22*100/255,128*100/255,0), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(lib773A3C4C_gv_victoryRecapLabel, Color(100,100,100), PlayerGroupAll());
    lv_index += 1;
    if ((BankKeyExists(lib773A3C4C_gv_ambivalence, "Achievements", lib773A3C4C_gv_achievements[lv_index].lv_name) == true)) {
        libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_pU_VSDialog, 128, 128, c_anchorBottomLeft, 178, 25, (StringExternal("Param/Value/lib_773A3C4C_FEC522B8") + (StringToText(lib773A3C4C_gv_achievements[lv_index].lv_name) + (StringExternal("Param/Value/lib_773A3C4C_6CFE0A57") + StringToText(lib773A3C4C_gv_achievements[lv_index].lv_description)))), "Assets\\Textures\\ui_battlenet_glue_icons_league_bronze.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        lib773A3C4C_gv_achievementImages[lv_index] = DialogControlLastCreated();
    }
    else {
        libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_pU_VSDialog, 128, 128, c_anchorBottomLeft, 178, 25, (StringExternal("Param/Value/lib_773A3C4C_08A3D3AA") + (StringToText(lib773A3C4C_gv_achievements[lv_index].lv_name) + (StringExternal("Param/Value/lib_773A3C4C_2F53C1DC") + StringToText(lib773A3C4C_gv_achievements[lv_index].lv_description)))), "Assets\\Textures\\sc2_ui_ingame_storymode_panel_faction_lock.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(22*100/255,128*100/255,0), PlayerGroupAll());
        lib773A3C4C_gv_achievementImages[lv_index] = DialogControlLastCreated();
    }
    lv_index += 1;
    if ((BankKeyExists(lib773A3C4C_gv_ambivalence, "Achievements", lib773A3C4C_gv_achievements[lv_index].lv_name) == true)) {
        libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_pU_VSDialog, 128, 128, c_anchorBottom, -100, 25, (StringExternal("Param/Value/lib_773A3C4C_011B7DE3") + (StringToText(lib773A3C4C_gv_achievements[lv_index].lv_name) + (StringExternal("Param/Value/lib_773A3C4C_F3AC3819") + StringToText(lib773A3C4C_gv_achievements[lv_index].lv_description)))), "Assets\\Textures\\ui_battlenet_glue_icons_league_silver.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        lib773A3C4C_gv_achievementImages[lv_index] = DialogControlLastCreated();
    }
    else {
        libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_pU_VSDialog, 128, 128, c_anchorBottom, -100, 25, (StringExternal("Param/Value/lib_773A3C4C_8BC23C23") + (StringToText(lib773A3C4C_gv_achievements[lv_index].lv_name) + (StringExternal("Param/Value/lib_773A3C4C_5ED0053B") + StringToText(lib773A3C4C_gv_achievements[lv_index].lv_description)))), "Assets\\Textures\\sc2_ui_ingame_storymode_panel_faction_lock.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(22*100/255,128*100/255,0), PlayerGroupAll());
        lib773A3C4C_gv_achievementImages[lv_index] = DialogControlLastCreated();
    }
    lv_index += 1;
    if ((BankKeyExists(lib773A3C4C_gv_ambivalence, "Achievements", lib773A3C4C_gv_achievements[lv_index].lv_name) == true)) {
        libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_pU_VSDialog, 128, 128, c_anchorBottom, 100, 25, (StringExternal("Param/Value/lib_773A3C4C_6CA7634C") + (StringToText(lib773A3C4C_gv_achievements[lv_index].lv_name) + (StringExternal("Param/Value/lib_773A3C4C_47FBCA9E") + StringToText(lib773A3C4C_gv_achievements[lv_index].lv_description)))), "Assets/Textures/ui_battlenet_glue_icons_league_gold.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        lib773A3C4C_gv_achievementImages[lv_index] = DialogControlLastCreated();
    }
    else {
        libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_pU_VSDialog, 128, 128, c_anchorBottom, 100, 25, (StringExternal("Param/Value/lib_773A3C4C_35B7B61F") + (StringToText(lib773A3C4C_gv_achievements[lv_index].lv_name) + (StringExternal("Param/Value/lib_773A3C4C_48D7A404") + StringToText(lib773A3C4C_gv_achievements[lv_index].lv_description)))), "Assets\\Textures\\sc2_ui_ingame_storymode_panel_faction_lock.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(22*100/255,128*100/255,0), PlayerGroupAll());
        lib773A3C4C_gv_achievementImages[lv_index] = DialogControlLastCreated();
    }
    lv_index += 1;
    if ((BankKeyExists(lib773A3C4C_gv_ambivalence, "Achievements", lib773A3C4C_gv_achievements[lv_index].lv_name) == true)) {
        libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_pU_VSDialog, 128, 128, c_anchorBottomRight, 178, 25, (StringExternal("Param/Value/lib_773A3C4C_539A1EB9") + (StringToText(lib773A3C4C_gv_achievements[lv_index].lv_name) + (StringExternal("Param/Value/lib_773A3C4C_E3AA05B1") + StringToText(lib773A3C4C_gv_achievements[lv_index].lv_description)))), "Assets\\Textures\\ui_battlenet_glue_icons_league_grandmaster.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    }
    else {
        libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_pU_VSDialog, 128, 128, c_anchorBottomRight, 178, 25, (StringExternal("Param/Value/lib_773A3C4C_28355428") + (StringToText(lib773A3C4C_gv_achievements[lv_index].lv_name) + (StringExternal("Param/Value/lib_773A3C4C_108B81E3") + StringToText(lib773A3C4C_gv_achievements[lv_index].lv_description)))), "Assets\\Textures\\sc2_ui_ingame_storymode_panel_faction_lock.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(22*100/255,128*100/255,0), PlayerGroupAll());
        lib773A3C4C_gv_achievementImages[lv_index] = DialogControlLastCreated();
    }
    if ((lib773A3C4C_gv_pC_CurrentMap == "TheUnitedOrder")) {
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "Allies")) {
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "ShroudofShadows")) {
        libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pU_VSLabelVictoryTitle, StringExternal("Param/Value/lib_773A3C4C_B184D6BF"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pU_VSBtnContinue, StringExternal("Param/Value/lib_773A3C4C_79558EE4"), PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_pU_VSBtnContinue, StringExternal("Param/Value/lib_773A3C4C_E5B8C4A3"), PlayerGroupAll());
        DialogSetVisible(lib773A3C4C_gv_pU_VSDialog, PlayerGroupAll(), false);
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "TheSlums")) {
        libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_replayMissionButton, StringExternal("Param/Value/lib_773A3C4C_2ACF1727"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(lib773A3C4C_gv_replayMissionButton, StringExternal("Param/Value/lib_773A3C4C_52BFE3A5"), PlayerGroupAll());
        DialogDestroy(lib773A3C4C_gv_pU_VSDialog);
        DialogDestroy(lib773A3C4C_gv_pU_VSDialog2);
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "TestofStrength")) {
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "EnforcingJustice")) {
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "KhalaiCohort")) {
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "BrokenFaith")) {
        libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pU_VSBtnContinue, StringExternal("Param/Value/lib_773A3C4C_B7095CCE"), PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_pU_VSBtnContinue, StringExternal("Param/Value/lib_773A3C4C_3EEDDBF1"), PlayerGroupAll());
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "ANewPath")) {
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, true);
        DialogControlSetVisible(lib773A3C4C_gv_pU_VSBtnContinue, PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_replayMissionButton, StringExternal("Param/Value/lib_773A3C4C_629475F5"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(lib773A3C4C_gv_replayMissionButton, StringExternal("Param/Value/lib_773A3C4C_ED784DC6"), PlayerGroupAll());
        DialogDestroy(lib773A3C4C_gv_pU_VSDialog);
        DialogDestroy(lib773A3C4C_gv_pU_VSDialog2);
    }

}

void lib773A3C4C_gf_PU_UpdateVictoryScreen2 () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_index += 1;
    if ((BankKeyExists(lib773A3C4C_gv_ambivalence, "Achievements", lib773A3C4C_gv_achievements[lv_index].lv_name) == true)) {
        libNtve_gf_SetDialogItemImage(lib773A3C4C_gv_achievementImages[lv_index], "Assets\\Textures\\ui_battlenet_glue_icons_league_bronze.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(lib773A3C4C_gv_achievementImages[lv_index], ColorWithAlpha(0,0,0,0), PlayerGroupAll());
    }

    lv_index += 1;
    if ((BankKeyExists(lib773A3C4C_gv_ambivalence, "Achievements", lib773A3C4C_gv_achievements[lv_index].lv_name) == true)) {
        libNtve_gf_SetDialogItemImage(lib773A3C4C_gv_achievementImages[lv_index], "Assets\\Textures\\ui_battlenet_glue_icons_league_silver.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(lib773A3C4C_gv_achievementImages[lv_index], ColorWithAlpha(0,0,0,0), PlayerGroupAll());
    }

    lv_index += 1;
    if ((BankKeyExists(lib773A3C4C_gv_ambivalence, "Achievements", lib773A3C4C_gv_achievements[lv_index].lv_name) == true)) {
        libNtve_gf_SetDialogItemImage(lib773A3C4C_gv_achievementImages[lv_index], "Assets\\Textures\\ui_battlenet_glue_icons_league_gold.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(lib773A3C4C_gv_achievementImages[lv_index], ColorWithAlpha(0,0,0,0), PlayerGroupAll());
    }

    lv_index += 1;
    if ((BankKeyExists(lib773A3C4C_gv_ambivalence, "Achievements", lib773A3C4C_gv_achievements[lv_index].lv_name) == true)) {
        libNtve_gf_SetDialogItemImage(lib773A3C4C_gv_achievementImages[lv_index], "Assets\\Textures\\ui_battlenet_glue_icons_league_grandmaster.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(lib773A3C4C_gv_achievementImages[lv_index], ColorWithAlpha(0,0,0,0), PlayerGroupAll());
    }

}

void lib773A3C4C_gf_VorazunVictoryScreenAddDataSlot (text lp_name, int lp_amount, int lp_amountMax, bool lp_amountB, int lp_slot, bool lp_amountisBoolean, bool lp_amounthasMaxValue) {
    // Variable Declarations
    int lv_yPosition;

    // Automatic Variable Declarations
    int autoEB557582_val;

    // Variable Initialization

    // Implementation
    autoEB557582_val = lp_slot;
    if (autoEB557582_val == 1) {
        lv_yPosition = -100;
    }
    else if (autoEB557582_val == 2) {
        lv_yPosition = -70;
    }
    else if (autoEB557582_val == 3) {
        lv_yPosition = -40;
    }
    else if (autoEB557582_val == 4) {
        lv_yPosition = -10;
    }
    else if (autoEB557582_val == 5) {
        lv_yPosition = 20;
    }
    else if (autoEB557582_val == 6) {
        lv_yPosition = 50;
    }
    else if (autoEB557582_val == 7) {
        lv_yPosition = 80;
    }
    else if (autoEB557582_val == 8) {
        lv_yPosition = 110;
    }
    else {
    }
    libNtve_gf_CreateDialogItemLabel(lib773A3C4C_gv_pU_VSDialog, 500, 100, c_anchorLeft, 150, lv_yPosition, lp_name, ColorWithAlpha(0,0,0,0), false, 2.0);
    if ((lp_amountisBoolean == false)) {
        if ((lp_amounthasMaxValue == false)) {
            libNtve_gf_CreateDialogItemLabel(lib773A3C4C_gv_pU_VSDialog, 300, 100, c_anchorRight, -150, lv_yPosition, IntToText(lp_amount), ColorWithAlpha(0,0,0,0), false, 2.0);
        }
        else {
            libNtve_gf_CreateDialogItemLabel(lib773A3C4C_gv_pU_VSDialog, 300, 100, c_anchorRight, -150, lv_yPosition, (IntToText(lp_amount) + (StringExternal("Param/Value/lib_773A3C4C_F176E8C4") + IntToText(lp_amountMax))), ColorWithAlpha(0,0,0,0), false, 2.0);
        }
    }
    else {
        libNtve_gf_CreateDialogItemLabel(lib773A3C4C_gv_pU_VSDialog, 300, 100, c_anchorRight, -150, lv_yPosition, libNtve_gf_ConvertBooleanToText(lp_amountB), ColorWithAlpha(0,0,0,0), false, 2.0);
    }
}

void lib773A3C4C_gf_VorazunVictoryScreenShow () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib773A3C4C_gv_pC_CurrentMap != "ANewPath")) {
        DialogSetVisible(lib773A3C4C_gv_pU_VSDialog, PlayerGroupAll(), true);
    }

    DialogSetVisible(lib773A3C4C_gv_pU_VSDialog4, PlayerGroupAll(), true);
    DialogSetVisible(lib773A3C4C_gv_pU_VSDialog2, PlayerGroupAll(), true);
    DialogSetVisible(lib773A3C4C_gv_pU_VSDialog3, PlayerGroupAll(), true);
    TriggerEnable(lib773A3C4C_gt_ToNextMission, true);
    TriggerEnable(lib773A3C4C_gt_BackToLauncher, true);
    TriggerEnable(lib773A3C4C_gt_ReplayMission, true);
    if ((lib773A3C4C_gv_pC_CurrentMap != "ANewPath")) {
        BankValueSetFromFlag(lib773A3C4C_gv_ambivalence, "Missions", lib773A3C4C_gf_GetMissionNameString(), true);
        BankSave(lib773A3C4C_gv_ambivalence);
    }

}

string lib773A3C4C_gf_GetNextMission () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib773A3C4C_gv_pC_CurrentMap == "TheUnitedOrder")) {
        return "Ambivalence/Ambivalence 02 - Allies";
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "Allies")) {
        return "Ambivalence/Ambivalence 03 - Shroud Of Shadows";
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "ShroudofShadows")) {
        return "Ambivalence/Ambivalence - The Slums";
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "TheSlums")) {
        return "Ambivalence/Ambivalence 04 - Test Of Strength";
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "TestofStrength")) {
        return "Ambivalence/Ambivalence 05 - Enforcing Justice";
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "EnforcingJustice")) {
        return "Ambivalence/Ambivalence 06 - Khalai Cohort";
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "KhalaiCohort")) {
        return "Ambivalence/Ambivalence 07 - Broken Nation";
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "BrokenFaith")) {
        return "Ambivalence/Ambivalence - A New Path";
    }

    return "Ambivalence/Ambivalence Launcher";
}

text lib773A3C4C_gf_GetMissionName () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib773A3C4C_gv_pC_CurrentMap == "TheUnitedOrder")) {
        return StringExternal("Param/Value/lib_773A3C4C_F842F060");
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "Allies")) {
        return StringExternal("Param/Value/lib_773A3C4C_106DFB47");
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "ShroudofShadows")) {
        return StringExternal("Param/Value/lib_773A3C4C_4467AD2A");
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "TheSlums")) {
        return StringExternal("Param/Value/lib_773A3C4C_F8D704F5");
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "TestofStrength")) {
        return StringExternal("Param/Value/lib_773A3C4C_93454FDF");
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "EnforcingJustice")) {
        return StringExternal("Param/Value/lib_773A3C4C_E0F8DBC3");
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "KhalaiCohort")) {
        return StringExternal("Param/Value/lib_773A3C4C_E8FCB9D5");
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "BrokenFaith")) {
        return StringExternal("Param/Value/lib_773A3C4C_C9CD9004");
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "ANewPath")) {
        return StringExternal("Param/Value/lib_773A3C4C_C76A5603");
    }

    return StringExternal("Param/Value/lib_773A3C4C_5749E422");
}

string lib773A3C4C_gf_GetMissionNameString () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib773A3C4C_gv_pC_CurrentMap == "TheUnitedOrder")) {
        return "TheUnitedOrder";
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "Allies")) {
        return "Allies";
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "ShroudofShadows")) {
        return "ShroudOfShadows";
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "TheSlums")) {
        return "TheSlums";
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "TestofStrength")) {
        return "TestOfStrength";
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "EnforcingJustice")) {
        return "EnforcingJustice";
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "KhalaiCohort")) {
        return "KhalaiCohort";
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "BrokenFaith")) {
        return "BrokenNation";
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "ANewPath")) {
        return "ANewPath";
    }

    return "GetNameFailed";
}

void lib773A3C4C_gf_CreateDifficultyDialog () {
    // Automatic Variable Declarations
    // Implementation
    VisRevealerCreate(1, RegionEntireMap());
    lib773A3C4C_gv_revealer = VisRevealerLastCreated();
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, false);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(1.0, c_timeGame);
    DialogCreate(400, 500, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    lib773A3C4C_gv_difficultiesDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_difficultiesDialog, 400, 500, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_glues_pageassets_dialogbg.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    lib773A3C4C_gv_difficultyDialogBorder = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_difficultiesDialog, 400, 150, c_anchorTop, 0, 10, StringToText(""), "Assets\\Textures\\ui_battlenet_glues_pageassets_dialog_hexpattern.dds", c_triggerImageTypeNormal, false, Color(22*100/255,128*100/255,0), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(lib773A3C4C_gv_difficultiesDialog, 400, 150, c_anchorBottom, 0, 10, StringToText(""), "Assets\\Textures\\ui_battlenet_glues_pageassets_dialog_hexpattern.dds", c_triggerImageTypeNormal, false, Color(22*100/255,128*100/255,0), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
    DialogControlCreateFromTemplate(lib773A3C4C_gv_difficultiesDialog, c_triggerControlTypeButton, "LotV_StorySet/StorySetButtonTemplate");
    lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Easy] = DialogControlLastCreated();
    DialogControlSetPosition(lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Easy], PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemText(lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Easy], StringExternal("Param/Value/lib_773A3C4C_7ED0D783"), PlayerGroupAll());
    DialogControlCreateFromTemplate(lib773A3C4C_gv_difficultiesDialog, c_triggerControlTypeButton, "LotV_StorySet/StorySetButtonTemplate");
    lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Standard] = DialogControlLastCreated();
    DialogControlSetPosition(lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Standard], PlayerGroupAll(), c_anchorCenter, 0, 60);
    libNtve_gf_SetDialogItemText(lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Standard], StringExternal("Param/Value/lib_773A3C4C_E345682B"), PlayerGroupAll());
    DialogControlCreateFromTemplate(lib773A3C4C_gv_difficultiesDialog, c_triggerControlTypeButton, "LotV_StorySet/StorySetButtonTemplate");
    lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Challenging] = DialogControlLastCreated();
    DialogControlSetPosition(lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Challenging], PlayerGroupAll(), c_anchorCenter, 0, 120);
    libNtve_gf_SetDialogItemText(lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Challenging], StringExternal("Param/Value/lib_773A3C4C_BB45800F"), PlayerGroupAll());
    DialogControlCreateFromTemplate(lib773A3C4C_gv_difficultiesDialog, c_triggerControlTypeButton, "LotV_StorySet/StorySetButtonTemplate");
    lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Extreme] = DialogControlLastCreated();
    DialogControlSetPosition(lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Extreme], PlayerGroupAll(), c_anchorCenter, 0, 180);
    libNtve_gf_SetDialogItemText(lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Extreme], StringExternal("Param/Value/lib_773A3C4C_89D3235E"), PlayerGroupAll());
    DialogCreate(400, 500, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    lib773A3C4C_gv_difficultiesTitleDialog = DialogLastCreated();
    DialogSetTitle(lib773A3C4C_gv_difficultiesTitleDialog, StringExternal("Param/Value/lib_773A3C4C_614A5CB3"));
    libNtve_gf_SetDialogItemColor(lib773A3C4C_gv_difficultyDialogBorder, Color(22*100/255,128*100/255,0), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Easy], Color(22*100/255,128*100/255,0), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Standard], Color(22*100/255,128*100/255,0), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Challenging], Color(22*100/255,128*100/255,0), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Extreme], Color(22*100/255,128*100/255,0), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Easy], StringExternal("Param/Value/lib_773A3C4C_0D264AC8"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Standard], StringExternal("Param/Value/lib_773A3C4C_6EA1D09F"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Challenging], StringExternal("Param/Value/lib_773A3C4C_DA4419C9"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Extreme], StringExternal("Param/Value/lib_773A3C4C_20E5A67F"), PlayerGroupAll());
    DialogSetVisible(lib773A3C4C_gv_difficultiesDialog, PlayerGroupSingle(1), true);
    DialogSetVisible(lib773A3C4C_gv_difficultiesTitleDialog, PlayerGroupSingle(1), true);
}

void lib773A3C4C_gf_AddRemoveVorazunCloak (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitBehaviorEnabled(lp_unit, "PermanentlyCloaked") == true)) {
        UnitBehaviorRemove(lp_unit, "PermanentlyCloaked", 1);
    }
    else {
        UnitBehaviorAdd(lp_unit, "PermanentlyCloaked", lp_unit, 1);
    }
}

void lib773A3C4C_gf_RemindPlayerToSave () {
    // Automatic Variable Declarations
    // Implementation
    if ((GameIsOnline() == false)) {
        while (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            Wait(1.0, c_timeGame);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_773A3C4C_5116C8BA"));
    }

}

void lib773A3C4C_gf_OrderUnitToAttack (unit lp_unit, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lp_point), c_orderQueueReplace);
}

void lib773A3C4C_gf_OrderUnitToMove (unit lp_unit, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lp_point), c_orderQueueReplace);
}

void lib773A3C4C_gf_MakeTwoUnitsFaceEachOther (unit lp_unit1, unit lp_unit2, fixed lp_time) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_MakeUnitFacePoint(lp_unit1, UnitGetPosition(lp_unit2), lp_time);
    libNtve_gf_MakeUnitFacePoint(lp_unit2, UnitGetPosition(lp_unit1), lp_time);
}

void lib773A3C4C_gf_MakeUnitNonInteractive (unit lp_chosenUnit) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_MakeUnitInvulnerable(lp_chosenUnit, true);
    UnitSetState(lp_chosenUnit, c_unitStateHighlightable, false);
    UnitSetState(lp_chosenUnit, c_unitStateTargetable, false);
    UnitSetState(lp_chosenUnit, c_unitStateStatusBar, false);
    UnitSetState(lp_chosenUnit, c_unitStateSelectable, false);
}

void lib773A3C4C_gf_MakeUnitInteractive (unit lp_chosenUnit) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_MakeUnitInvulnerable(lp_chosenUnit, false);
    UnitSetState(lp_chosenUnit, c_unitStateHighlightable, true);
    UnitSetState(lp_chosenUnit, c_unitStateTargetable, true);
    UnitSetState(lp_chosenUnit, c_unitStateStatusBar, true);
    UnitSetState(lp_chosenUnit, c_unitStateSelectable, true);
}

void lib773A3C4C_gf_SwitchMircoToMacroUI () {
    // Automatic Variable Declarations
    // Implementation
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
}

void lib773A3C4C_gf_PlayProtossRescue () {
    // Automatic Variable Declarations
    // Implementation
    SoundPlayForPlayer(SoundLink("ProtossRescue", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
}

void lib773A3C4C_gf_InitializePlayers () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetPlayerGroupAlliance(lib773A3C4C_gv_alliedPlayergroup, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetPlayerGroupAlliance(lib773A3C4C_gv_enemyPlayergroup, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
}

void lib773A3C4C_gf_MakeEnemyPlayersSameColour (int lp_colour) {
    // Automatic Variable Declarations
    playergroup autoCDC63520_g;
    int autoCDC63520_var;

    // Implementation
    autoCDC63520_g = lib773A3C4C_gv_enemyPlayergroup;
    autoCDC63520_var = -1;
    while (true) {
        autoCDC63520_var = PlayerGroupNextPlayer(autoCDC63520_g, autoCDC63520_var);
        if (autoCDC63520_var < 0) { break; }
        PlayerSetColorIndex(autoCDC63520_var, lp_colour, true);
    }
}

void lib773A3C4C_gf_AI (int lp_player, int lp_staringMinerals, int lp_startingGas) {
    // Automatic Variable Declarations
    unitgroup auto9DAE39AE_g;
    int auto9DAE39AE_u;
    unit auto9DAE39AE_var;
    playergroup auto87F90D69_g;
    int auto87F90D69_var;
    playergroup autoD5DD376C_g;
    int autoD5DD376C_var;
    playergroup auto3FD486CD_g;
    int auto3FD486CD_var;
    playergroup autoD7CFF74E_g;
    int autoD7CFF74E_var;
    playergroup auto6644C00F_g;
    int auto6644C00F_var;
    playergroup autoB3DF3E57_g;
    int autoB3DF3E57_var;
    playergroup auto14C3A45F_g;
    int auto14C3A45F_var;

    // Implementation
    PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperAdd, lp_staringMinerals);
    PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperAdd, lp_startingGas);
    PlayerModifyPropertyInt(lp_player, c_playerPropSuppliesMade, c_playerPropOperSetTo, 2000);
    PlayerModifyPropertyInt(lp_player, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 2000);
    AISetDefenseRadii(lp_player, 9.0, 14.0, 17.0);
    AICampaignStart(lp_player);
    AIStart(lp_player, true, 9999999);
    libVCMI_gf_EnableVoidCampaignAIBehaviorForPlayer(lp_player);
    AISetGeneralRebuildCount(libNtve_gf_DifficultyValueInt(6, 9, 14, 14), false, lp_player);
    AISetGeneralRebuildCount(libNtve_gf_DifficultyValueInt(1, 2, 3, 5), true, lp_player);
    auto9DAE39AE_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9DAE39AE_u = UnitGroupCount(auto9DAE39AE_g, c_unitCountAll);
    for (;; auto9DAE39AE_u -= 1) {
        auto9DAE39AE_var = UnitGroupUnitFromEnd(auto9DAE39AE_g, auto9DAE39AE_u);
        if (auto9DAE39AE_var == null) { break; }
        AISetUnitNotUsableInWaves(auto9DAE39AE_var, false);
    }
    if ((PlayerDifficulty(1) == 1)) {
        auto87F90D69_g = lib773A3C4C_gv_alliedPlayergroup;
        auto87F90D69_var = -1;
        while (true) {
            auto87F90D69_var = PlayerGroupNextPlayer(auto87F90D69_g, auto87F90D69_var);
            if (auto87F90D69_var < 0) { break; }
            if ((auto87F90D69_var != 1)) {
                if ((PlayerRace(auto87F90D69_var) == "Terr")) {
                    AISetDifficulty(auto87F90D69_var, c_diffRepairDamage, true);
                    AISetDifficulty(auto87F90D69_var, c_diffEarlyGameRepair, true);
                    AISetDifficulty(auto87F90D69_var, c_diffAutoLoadBunkers, true);
                }

                AISetDifficulty(auto87F90D69_var, c_diffAdvancedRetreatLogic, true);
                AISetDifficulty(auto87F90D69_var, c_diffOptimizeGas, true);
                AISetDifficulty(auto87F90D69_var, c_diffFleeDanger, true);
                AISetDifficulty(auto87F90D69_var, c_diffPressForward, true);
                AISetDifficulty(auto87F90D69_var, c_diffTargetSpawners, true);
                AISetDifficulty(auto87F90D69_var, c_diffFleeDamage, true);
            }

        }
    }

    if ((PlayerDifficulty(1) == 2)) {
        autoD5DD376C_g = lib773A3C4C_gv_alliedPlayergroup;
        autoD5DD376C_var = -1;
        while (true) {
            autoD5DD376C_var = PlayerGroupNextPlayer(autoD5DD376C_g, autoD5DD376C_var);
            if (autoD5DD376C_var < 0) { break; }
            if ((autoD5DD376C_var != 1)) {
                if ((PlayerRace(autoD5DD376C_var) == "Terr")) {
                    AISetDifficulty(autoD5DD376C_var, c_diffRepairDamage, true);
                    AISetDifficulty(autoD5DD376C_var, c_diffEarlyGameRepair, true);
                    AISetDifficulty(autoD5DD376C_var, c_diffAutoLoadBunkers, true);
                }

                AISetDifficulty(autoD5DD376C_var, c_diffAdvancedRetreatLogic, true);
                AISetDifficulty(autoD5DD376C_var, c_diffOptimizeGas, true);
                AISetDifficulty(autoD5DD376C_var, c_diffFleeDanger, true);
                AISetDifficulty(autoD5DD376C_var, c_diffPressForward, true);
                AISetDifficulty(autoD5DD376C_var, c_diffTargetSpawners, true);
                AISetDifficulty(autoD5DD376C_var, c_diffFleeDamage, true);
            }

        }
        auto3FD486CD_g = lib773A3C4C_gv_enemyPlayergroup;
        auto3FD486CD_var = -1;
        while (true) {
            auto3FD486CD_var = PlayerGroupNextPlayer(auto3FD486CD_g, auto3FD486CD_var);
            if (auto3FD486CD_var < 0) { break; }
            if ((auto3FD486CD_var != lib773A3C4C_gv_defenseEnemyPlayer)) {
                if ((PlayerRace(auto3FD486CD_var) == "Terr")) {
                    AISetDifficulty(auto3FD486CD_var, c_diffAutoLoadBunkers, true);
                }

                AISetDifficulty(auto3FD486CD_var, c_diffAdvancedRetreatLogic, true);
                AISetDifficulty(auto3FD486CD_var, c_diffFleeDamage, true);
            }

        }
    }

    if ((PlayerDifficulty(1) == 3)) {
        autoD7CFF74E_g = lib773A3C4C_gv_alliedPlayergroup;
        autoD7CFF74E_var = -1;
        while (true) {
            autoD7CFF74E_var = PlayerGroupNextPlayer(autoD7CFF74E_g, autoD7CFF74E_var);
            if (autoD7CFF74E_var < 0) { break; }
            if ((autoD7CFF74E_var != 1)) {
                if ((PlayerRace(autoD7CFF74E_var) == "Terr")) {
                    AISetDifficulty(autoD7CFF74E_var, c_diffRepairDamage, true);
                    AISetDifficulty(autoD7CFF74E_var, c_diffAutoLoadBunkers, true);
                }

                AISetDifficulty(autoD7CFF74E_var, c_diffAdvancedRetreatLogic, true);
                AISetDifficulty(autoD7CFF74E_var, c_diffOptimizeGas, true);
                AISetDifficulty(autoD7CFF74E_var, c_diffFleeDanger, true);
                AISetDifficulty(autoD7CFF74E_var, c_diffFleeDamage, true);
            }

        }
        auto6644C00F_g = lib773A3C4C_gv_enemyPlayergroup;
        auto6644C00F_var = -1;
        while (true) {
            auto6644C00F_var = PlayerGroupNextPlayer(auto6644C00F_g, auto6644C00F_var);
            if (auto6644C00F_var < 0) { break; }
            if ((auto6644C00F_var != lib773A3C4C_gv_defenseEnemyPlayer)) {
                if ((PlayerRace(auto6644C00F_var) == "Terr")) {
                    AISetDifficulty(auto6644C00F_var, c_diffAutoLoadBunkers, true);
                    AISetDifficulty(auto6644C00F_var, c_diffRepairDamage, true);
                }

                AISetDifficulty(auto6644C00F_var, c_diffAdvancedRetreatLogic, true);
                AISetDifficulty(auto6644C00F_var, c_diffFleeDamage, true);
                AISetDifficulty(auto6644C00F_var, c_diffFleeDanger, true);
                AISetDifficulty(auto6644C00F_var, c_diffTargetSpawners, true);
            }

        }
    }

    if ((PlayerDifficulty(1) == 4)) {
        autoB3DF3E57_g = lib773A3C4C_gv_alliedPlayergroup;
        autoB3DF3E57_var = -1;
        while (true) {
            autoB3DF3E57_var = PlayerGroupNextPlayer(autoB3DF3E57_g, autoB3DF3E57_var);
            if (autoB3DF3E57_var < 0) { break; }
            if ((autoB3DF3E57_var != 1)) {
                if ((PlayerRace(autoB3DF3E57_var) == "Terr")) {
                    AISetDifficulty(autoB3DF3E57_var, c_diffAutoLoadBunkers, true);
                }

                AISetDifficulty(autoB3DF3E57_var, c_diffAdvancedRetreatLogic, true);
                AISetDifficulty(autoB3DF3E57_var, c_diffFleeDamage, true);
            }

        }
        auto14C3A45F_g = lib773A3C4C_gv_enemyPlayergroup;
        auto14C3A45F_var = -1;
        while (true) {
            auto14C3A45F_var = PlayerGroupNextPlayer(auto14C3A45F_g, auto14C3A45F_var);
            if (auto14C3A45F_var < 0) { break; }
            if ((auto14C3A45F_var != lib773A3C4C_gv_defenseEnemyPlayer)) {
                if ((PlayerRace(auto14C3A45F_var) == "Terr")) {
                    AISetDifficulty(auto14C3A45F_var, c_diffRepairDamage, true);
                    AISetDifficulty(auto14C3A45F_var, c_diffEarlyGameRepair, true);
                    AISetDifficulty(auto14C3A45F_var, c_diffAutoLoadBunkers, true);
                }

                AISetDifficulty(auto14C3A45F_var, c_diffAdvancedRetreatLogic, true);
                AISetDifficulty(auto14C3A45F_var, c_diffOptimizeGas, true);
                AISetDifficulty(auto14C3A45F_var, c_diffFleeDanger, true);
                AISetDifficulty(auto14C3A45F_var, c_diffPressForward, true);
                AISetDifficulty(auto14C3A45F_var, c_diffTargetSpawners, true);
                AISetDifficulty(auto14C3A45F_var, c_diffFleeDamage, true);
            }

        }
    }

}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Ensure UI Override
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_EnsureUIOverride_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        PlayerOptionOverride(1, "selectuncontrolable", "1");
        PlayerOptionOverride(1, "simplecommandcard", "0");
        PlayerOptionOverride(1, "displayflyerhelper", "All");
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAchievementMenuButton, false);
        UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartDifficultyPulldown, false);
        UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogPauseButton, false);
        UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartButton, true);
        UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogAbortButton, false);
        HelpPanelShowTechTreeRace(PlayerGroupAll(), "InfT", false);
        HelpPanelShowTechTreeRace(PlayerGroupAll(), "Neut", false);
        HelpPanelShowTechTreeRace(PlayerGroupAll(), "ProZ", false);
        HelpPanelShowTechTreeRace(PlayerGroupAll(), "TerH", false);
        HelpPanelShowTechTreeRace(PlayerGroupAll(), "TerT", false);
        HelpPanelShowTechTreeRace(PlayerGroupAll(), "PZrg", false);
        HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
        UIUnitColorStyleOverride(PlayerGroupAll(), c_unitColorStyleNormal);
        UIStatusBarOverride(PlayerGroupAll(), c_unitStatusGroupAll);
        UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogGenericButton1, true);
        UISetGameMenuItemText(PlayerGroupAll(), c_gameMenuDialogGenericButton1, StringExternal("Param/Value/lib_773A3C4C_C62A1783"));
        UISetGameMenuItemShortcut(PlayerGroupAll(), c_gameMenuDialogGenericButton1, StringExternal("Param/Value/lib_773A3C4C_7FF1F2F4"));
        libLbty_gf_EnableDisablePingPanel(false, PlayerGroupAll());
        GameSetPauseable(false);
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_EnsureUIOverride_Init () {
    lib773A3C4C_gt_EnsureUIOverride = TriggerCreate("lib773A3C4C_gt_EnsureUIOverride_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return To The Launcher
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_ReturnToTheLauncher_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    OnlineMapToMapLoad(1, PlayerGroupEmpty(), PlayerGroupEmpty());
    GameSetNextMap("Ambivalence/Ambivalence Launcher");
    Wait(0.2, c_timeGame);
    GameOver(1, c_gameOverDefeat, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_ReturnToTheLauncher_Init () {
    lib773A3C4C_gt_ReturnToTheLauncher = TriggerCreate("lib773A3C4C_gt_ReturnToTheLauncher_Func");
    TriggerAddEventGameMenuItemSelected(lib773A3C4C_gt_ReturnToTheLauncher, 1, c_gameMenuDialogGenericButton1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mind Control Shield Fix
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_MindControlShieldFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(1, "ProtossShieldsLevel122222", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(1, "ProtossShieldsLevel12", c_techCountCompleteOnly) == 0)) {
        TechTreeUpgradeAddLevel(1, "ProtossShieldsLevel12", 1);
        TechTreeUpgradeAddLevel(1, "AvengersShields1", 1);
    }

    if ((TechTreeUpgradeCount(1, "ProtossShieldsLevel12222", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(1, "ProtossShieldsLevel122", c_techCountCompleteOnly) == 0)) {
        TechTreeUpgradeAddLevel(1, "ProtossShieldsLevel122", 1);
        TechTreeUpgradeAddLevel(1, "AvengersShields12", 1);
    }

    if ((TechTreeUpgradeCount(1, "ProtossShieldsLevel1222", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(1, "ProtossShieldsLevel1223", c_techCountCompleteOnly) == 0)) {
        TechTreeUpgradeAddLevel(1, "ProtossShieldsLevel1223", 1);
        TechTreeUpgradeAddLevel(1, "AvengersShields122", 1);
    }

    if ((TechTreeUpgradeCount(1, "ProtossShieldsLevel12", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(1, "ProtossShieldsLevel122", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(1, "ProtossShieldsLevel1223", c_techCountCompleteOnly) == 1)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_MindControlShieldFix_Init () {
    lib773A3C4C_gt_MindControlShieldFix = TriggerCreate("lib773A3C4C_gt_MindControlShieldFix_Func");
    TriggerEnable(lib773A3C4C_gt_MindControlShieldFix, false);
    TriggerAddEventTimePeriodic(lib773A3C4C_gt_MindControlShieldFix, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Achievement Panel
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_ShowAchievementPanel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(lib773A3C4C_gv_achievementDialog, 1) == true)) {
        DialogSetVisible(lib773A3C4C_gv_achievementDialog, PlayerGroupAll(), false);
    }
    else {
        lib773A3C4C_gf_CreateAchievementPanel();
        DialogSetVisible(lib773A3C4C_gv_achievementDialog, PlayerGroupAll(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_ShowAchievementPanel_Init () {
    lib773A3C4C_gt_ShowAchievementPanel = TriggerCreate("lib773A3C4C_gt_ShowAchievementPanel_Func");
    TriggerAddEventKeyPressed(lib773A3C4C_gt_ShowAchievementPanel, 1, c_keyF8, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_GPVitalChangesP1
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_CU_GPVitalChangesP1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib773A3C4C_gf_CU_GPSoAUpdateVitals(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_CU_GPVitalChangesP1_Init () {
    lib773A3C4C_gt_CU_GPVitalChangesP1 = TriggerCreate("lib773A3C4C_gt_CU_GPVitalChangesP1_Func");
    TriggerEnable(lib773A3C4C_gt_CU_GPVitalChangesP1, false);
    TriggerAddEventUnitProperty(lib773A3C4C_gt_CU_GPVitalChangesP1, UnitRefFromVariable("lib773A3C4C_gv_cU_GPUnit[1]"), c_unitPropEnergy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_GPBirthFinished
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_CU_GPBirthFinished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_updatePlayers;
    int lv_indexPlayer;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    playergroup autoD87BC38F_g;
    const int auto712E0AA0_ae = 4;
    const int auto712E0AA0_ai = 1;

    // Variable Initialization
    lv_updatePlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoD87BC38F_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoD87BC38F_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((lib773A3C4C_gv_cU_GPCutscene[lv_indexPlayer] != c_invalidDialogControlId) && (EventCutsceneId() == CutsceneGetTriggerControl(lib773A3C4C_gv_cU_GPCutscene[lv_indexPlayer]))) {
            lv_updatePlayers = PlayerGroupSingle(lv_indexPlayer);
            lv_buttonIndex = 1;
            for ( ; ( (auto712E0AA0_ai >= 0 && lv_buttonIndex <= auto712E0AA0_ae) || (auto712E0AA0_ai < 0 && lv_buttonIndex >= auto712E0AA0_ae) ) ; lv_buttonIndex += auto712E0AA0_ai ) {
                if ((lib773A3C4C_gv_cU_GPButtonHighlighted[lv_buttonIndex][lv_indexPlayer] == true) && (lib773A3C4C_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lv_indexPlayer] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(lib773A3C4C_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lv_indexPlayer], lv_updatePlayers, true);
                }

            }
            if ((lib773A3C4C_gv_cU_GPEnergyLabel[lv_indexPlayer] != c_invalidDialogControlId)) {
                DialogControlSetVisible(lib773A3C4C_gv_cU_GPEnergyLabel[lv_indexPlayer], lv_updatePlayers, true);
            }

            if ((lib773A3C4C_gv_cU_GPEnergyTooltip[lv_indexPlayer] != c_invalidDialogControlId)) {
                DialogControlSetVisible(lib773A3C4C_gv_cU_GPEnergyTooltip[lv_indexPlayer], lv_updatePlayers, true);
            }

            DialogControlSetVisible(lib773A3C4C_gv_cU_GPCmdPanel[lv_indexPlayer], lv_updatePlayers, true);
            lib773A3C4C_gf_CU_GPCheckForEnergyHighlight(lv_indexPlayer);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_CU_GPBirthFinished_Init () {
    lib773A3C4C_gt_CU_GPBirthFinished = TriggerCreate("lib773A3C4C_gt_CU_GPBirthFinished_Func");
    TriggerAddEventCutsceneBookmarkFired(lib773A3C4C_gt_CU_GPBirthFinished, c_cutsceneNone, "2DBirth");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_GPDeathRemove2D
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_CU_GPDeathRemove2D_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    playergroup lv_updatePlayers;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    playergroup autoD70DE44C_g;
    const int auto20F5BDE4_ae = 4;
    const int auto20F5BDE4_ai = 1;

    // Variable Initialization
    lv_updatePlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoD70DE44C_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoD70DE44C_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((lib773A3C4C_gv_cU_GPCutscene[lv_indexPlayer] != c_invalidDialogControlId) && (EventCutsceneId() == CutsceneGetTriggerControl(lib773A3C4C_gv_cU_GPCutscene[lv_indexPlayer]))) {
            lv_updatePlayers = PlayerGroupSingle(lv_indexPlayer);
            lv_buttonIndex = 1;
            for ( ; ( (auto20F5BDE4_ai >= 0 && lv_buttonIndex <= auto20F5BDE4_ae) || (auto20F5BDE4_ai < 0 && lv_buttonIndex >= auto20F5BDE4_ae) ) ; lv_buttonIndex += auto20F5BDE4_ai ) {
                if ((lib773A3C4C_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lv_indexPlayer] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(lib773A3C4C_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lv_indexPlayer], lv_updatePlayers, false);
                }

            }
            DialogControlSetVisible(lib773A3C4C_gv_cU_GPCmdPanel[lv_indexPlayer], lv_updatePlayers, false);
            if ((lib773A3C4C_gv_cU_GPEnergyLabel[lv_indexPlayer] != c_invalidDialogControlId)) {
                DialogControlSetVisible(lib773A3C4C_gv_cU_GPEnergyLabel[lv_indexPlayer], lv_updatePlayers, false);
            }

            if ((lib773A3C4C_gv_cU_GPEnergyTooltip[lv_indexPlayer] != c_invalidDialogControlId)) {
                DialogControlSetVisible(lib773A3C4C_gv_cU_GPEnergyTooltip[lv_indexPlayer], lv_updatePlayers, false);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_CU_GPDeathRemove2D_Init () {
    lib773A3C4C_gt_CU_GPDeathRemove2D = TriggerCreate("lib773A3C4C_gt_CU_GPDeathRemove2D_Func");
    TriggerAddEventCutsceneBookmarkFired(lib773A3C4C_gt_CU_GPDeathRemove2D, c_cutsceneNone, "2DDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Name Unit
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_NameUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2878AAE5_g;
    int auto2878AAE5_u;
    unit auto2878AAE5_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto2878AAE5_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2878AAE5_u = UnitGroupCount(auto2878AAE5_g, c_unitCountAll);
    for (;; auto2878AAE5_u -= 1) {
        auto2878AAE5_var = UnitGroupUnitFromEnd(auto2878AAE5_g, auto2878AAE5_u);
        if (auto2878AAE5_var == null) { break; }
        lib773A3C4C_gf_PM_UseUnitNameAsUnitTip(auto2878AAE5_var);
    }
    TriggerEnable(lib773A3C4C_gt_NameUnitCreated, true);
    TriggerEnable(lib773A3C4C_gt_NameUnitChangeOwner, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_NameUnit_Init () {
    lib773A3C4C_gt_NameUnit = TriggerCreate("lib773A3C4C_gt_NameUnit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Name Unit Created
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_NameUnitCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libVCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitCreatedUnit()) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitCreatedUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_PM_UseUnitNameAsUnitTip(EventUnitCreatedUnit());
    libVCMI_gf_PM_ApplyCampaignTeachingToUnit(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_NameUnitCreated_Init () {
    lib773A3C4C_gt_NameUnitCreated = TriggerCreate("lib773A3C4C_gt_NameUnitCreated_Func");
    TriggerEnable(lib773A3C4C_gt_NameUnitCreated, false);
    TriggerAddEventUnitCreated(lib773A3C4C_gt_NameUnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Name Unit Change Owner
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_NameUnitChangeOwner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libVCMI_gf_PM_UseUnitNameAsUnitTip(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_NameUnitChangeOwner_Init () {
    lib773A3C4C_gt_NameUnitChangeOwner = TriggerCreate("lib773A3C4C_gt_NameUnitChangeOwner_Func");
    TriggerEnable(lib773A3C4C_gt_NameUnitChangeOwner, false);
    TriggerAddEventUnitChangeOwner(lib773A3C4C_gt_NameUnitChangeOwner, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HealthWatchLifeCheck
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_CU_HealthWatchLifeCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_old;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(lib773A3C4C_gv_cU_HealthWatchUnit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_old = lib773A3C4C_gv_cU_HealthWatchLastHP;
    lib773A3C4C_gv_cU_HealthWatchLastHP = (UnitGetPropertyFixed(lib773A3C4C_gv_cU_HealthWatchUnit, c_unitPropLife, c_unitPropCurrent)+UnitGetPropertyFixed(lib773A3C4C_gv_cU_HealthWatchUnit, c_unitPropShields, c_unitPropCurrent));
    if ((lib773A3C4C_gv_cU_HealthWatchLastHP < lv_old) && (lib773A3C4C_gv_pUC_HealthWatchThreshold > ((UnitGetPropertyFixed(lib773A3C4C_gv_cU_HealthWatchUnit, c_unitPropLife, c_unitPropCurrent)+UnitGetPropertyFixed(lib773A3C4C_gv_cU_HealthWatchUnit, c_unitPropShields, c_unitPropCurrent))/(UnitGetPropertyFixed(lib773A3C4C_gv_cU_HealthWatchUnit, c_unitPropLifeMax, c_unitPropCurrent)+UnitGetPropertyFixed(lib773A3C4C_gv_cU_HealthWatchUnit, c_unitPropShieldsMax, c_unitPropCurrent)))) && (lib773A3C4C_gv_cU_HealthWatchFlashing == false)) {
        TriggerExecute(lib773A3C4C_gt_CU_HealthWatchFlash, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_CU_HealthWatchLifeCheck_Init () {
    lib773A3C4C_gt_CU_HealthWatchLifeCheck = TriggerCreate("lib773A3C4C_gt_CU_HealthWatchLifeCheck_Func");
    TriggerEnable(lib773A3C4C_gt_CU_HealthWatchLifeCheck, false);
    TriggerAddEventUnitProperty(lib773A3C4C_gt_CU_HealthWatchLifeCheck, UnitRefFromVariable("lib773A3C4C_gv_cU_HealthWatchUnit"), c_unitPropLife);
    TriggerAddEventUnitProperty(lib773A3C4C_gt_CU_HealthWatchLifeCheck, UnitRefFromVariable("lib773A3C4C_gv_cU_HealthWatchUnit"), c_unitPropShields);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HealthWatchFlash
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_CU_HealthWatchFlash_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoED217B08_n = 3;
    int autoED217B08_i;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libCOMI_gf_GameIsOver() == true) || (UnitIsAlive(lib773A3C4C_gv_cU_HealthWatchUnit) == false) || (lib773A3C4C_gv_cU_HealthWatchFlashing == true))) {
        return true;
    }

    lib773A3C4C_gv_cU_HealthWatchFlashing = true;
    for (autoED217B08_i = 1; autoED217B08_i <= autoED217B08_n; autoED217B08_i += 1) {
        if (((libCOMI_gf_GameIsOver() == true) || ((lib773A3C4C_gv_pUC_HealthWatchThreshold * 100.0) <= ((UnitGetPropertyFixed(lib773A3C4C_gv_cU_HealthWatchUnit, c_unitPropLife, c_unitPropCurrent)+UnitGetPropertyFixed(lib773A3C4C_gv_cU_HealthWatchUnit, c_unitPropShields, c_unitPropCurrent))/(UnitGetPropertyFixed(lib773A3C4C_gv_cU_HealthWatchUnit, c_unitPropLifeMax, c_unitPropCurrent)+UnitGetPropertyFixed(lib773A3C4C_gv_cU_HealthWatchUnit, c_unitPropShieldsMax, c_unitPropCurrent)))) || (UnitIsAlive(lib773A3C4C_gv_cU_HealthWatchUnit) == false))) {
            break;
        }

        lib773A3C4C_gf_CU_HealthWatchCreate();
        DialogControlFadeTransparency(lib773A3C4C_gv_cU_HealthWatchImage, libCOOC_gf_HumanPlayers(), 0.25, 30.0);
        Wait(0.3, c_timeGame);
        DialogControlFadeTransparency(lib773A3C4C_gv_cU_HealthWatchImage, libCOOC_gf_HumanPlayers(), 0.625, 100.0);
        Wait(0.8, c_timeGame);
    }
    DialogControlFadeTransparency(lib773A3C4C_gv_cU_HealthWatchImage, libCOOC_gf_HumanPlayers(), 0.0, 100.0);
    lib773A3C4C_gv_cU_HealthWatchFlashing = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_CU_HealthWatchFlash_Init () {
    lib773A3C4C_gt_CU_HealthWatchFlash = TriggerCreate("lib773A3C4C_gt_CU_HealthWatchFlash_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroPanelUpdate
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_CU_HeroPanelUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto993E4F38_g;
    const int auto8116B256_ae = lib773A3C4C_gv_cUC_HeroMaxCount;
    int auto8116B256_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto993E4F38_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto993E4F38_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        auto8116B256_var = 1;
        for ( ; auto8116B256_var <= auto8116B256_ae; auto8116B256_var += 1 ) {
            if ((lib773A3C4C_gv_cU_HeroExists[lv_indexPlayer][auto8116B256_var] == true)) {
                lib773A3C4C_gf_CU_UpdateHeroPanel(auto8116B256_var, lv_indexPlayer);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_CU_HeroPanelUpdate_Init () {
    lib773A3C4C_gt_CU_HeroPanelUpdate = TriggerCreate("lib773A3C4C_gt_CU_HeroPanelUpdate_Func");
    TriggerEnable(lib773A3C4C_gt_CU_HeroPanelUpdate, false);
    TriggerAddEventTimePeriodic(lib773A3C4C_gt_CU_HeroPanelUpdate, lib773A3C4C_gv_cUC_HeroUpdateFrequency, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroUnitDamaged
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_CU_HeroUnitDamaged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_indexPlayer;
    int lv_player;
    playergroup lv_heroGroup;

    // Automatic Variable Declarations
    playergroup auto963A63D9_g;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto963A63D9_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto963A63D9_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((EventUnit() == lib773A3C4C_gv_cU_HeroUnit[1][lv_indexPlayer])) {
            lv_index = 1;
            lv_player = lv_indexPlayer;
            break;
        }
        else if ((EventUnit() == lib773A3C4C_gv_cU_HeroUnit[2][lv_indexPlayer])) {
            lv_index = 2;
            lv_player = lv_indexPlayer;
            break;
        }
    }
    if ((lv_index == 0)) {
        return true;
    }

    lv_heroGroup = PlayerGroupSingle(lv_player);
    DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, true);
    if ((lib773A3C4C_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] <= 0.0)) {
    }
    else {
        DialogControlFadeTransparency(lib773A3C4C_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 0.25, 0.0);
    }
    if ((EventUnitDamageAmount() < 5.0)) {
        if ((lib773A3C4C_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] <= 0.25)) {
            lib773A3C4C_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] = 0.26;
            DialogControlFadeTransparency(lib773A3C4C_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 0.25, 0.0);
        }

    }
    else {
        if ((EventUnitDamageAmount() >= 5.0) && (EventUnitDamageAmount() <= 15.0)) {
            if ((lib773A3C4C_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] <= 0.5)) {
                lib773A3C4C_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] = 0.51;
                DialogControlFadeTransparency(lib773A3C4C_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 0.5, 0.0);
            }

        }
        else {
            if ((lib773A3C4C_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] <= 1.0)) {
                lib773A3C4C_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] = 1.01;
                DialogControlFadeTransparency(lib773A3C4C_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 1.0, 0.0);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_CU_HeroUnitDamaged_Init () {
    lib773A3C4C_gt_CU_HeroUnitDamaged = TriggerCreate("lib773A3C4C_gt_CU_HeroUnitDamaged_Func");
    TriggerEnable(lib773A3C4C_gt_CU_HeroUnitDamaged, false);
    TriggerAddEventUnitDamaged(lib773A3C4C_gt_CU_HeroUnitDamaged, UnitRefFromVariable("lib773A3C4C_gv_cU_HeroUnit[1][1]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(lib773A3C4C_gt_CU_HeroUnitDamaged, UnitRefFromVariable("lib773A3C4C_gv_cU_HeroUnit[1][2]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(lib773A3C4C_gt_CU_HeroUnitDamaged, UnitRefFromVariable("lib773A3C4C_gv_cU_HeroUnit[2][1]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(lib773A3C4C_gt_CU_HeroUnitDamaged, UnitRefFromVariable("lib773A3C4C_gv_cU_HeroUnit[2][2]"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroUnitVitalChange
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_CU_HeroUnitVitalChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_indexPlayer;
    int lv_player;
    playergroup lv_heroGroup;
    int lv_damageBar;
    int lv_damageBarWidth;
    int lv_damageBarHeight;

    // Automatic Variable Declarations
    playergroup auto59450270_g;
    unit autoFFDE413B_val;
    int auto5621BDE6_val;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();
    lv_damageBar = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((EventUnitPropertyChangeFixed() < 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto59450270_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto59450270_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        autoFFDE413B_val = EventUnit();
        if (autoFFDE413B_val == lib773A3C4C_gv_cU_HeroUnit[1][lv_indexPlayer]) {
            lv_index = 1;
            lv_player = lv_indexPlayer;
            break;
        }
        else if (autoFFDE413B_val == lib773A3C4C_gv_cU_HeroUnit[2][lv_indexPlayer]) {
            lv_index = 2;
            lv_player = lv_indexPlayer;
            break;
        }
        else {
        }
    }
    if ((lv_index == 0)) {
        return true;
    }

    lv_heroGroup = PlayerGroupSingle(lv_player);
    auto5621BDE6_val = EventUnitProperty();
    if (auto5621BDE6_val == c_unitPropEnergy) {
        DialogControlCreateInPanelFromTemplate(lib773A3C4C_gv_cU_HeroPanel[lv_index], c_triggerControlTypeImage, "HotS_GameUnitFrame/HeroEnergyBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_heroGroup, c_anchorLeft, lib773A3C4C_gv_cU_HeroDialogEnergyBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(lib773A3C4C_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropEnergy, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(lib773A3C4C_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropEnergyMax, c_unitPropCurrent)) * IntToFixed(lib773A3C4C_gv_cUC_HEROUIBARWIDTH)));
        lv_damageBarHeight = DialogControlGetHeight(lib773A3C4C_gv_cU_HeroDialogEnergyBarImage[lv_index], lv_player);
    }
    else if (auto5621BDE6_val == c_unitPropLife) {
        DialogControlCreateInPanelFromTemplate(lib773A3C4C_gv_cU_HeroPanel[lv_index], c_triggerControlTypeImage, "HotS_GameUnitFrame/HeroHealthBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_heroGroup, c_anchorLeft, lib773A3C4C_gv_cU_HeroDialogHealthBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(lib773A3C4C_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropLife, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(lib773A3C4C_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropLifeMax, c_unitPropCurrent)) * IntToFixed(lib773A3C4C_gv_cUC_HEROUIBARWIDTH)));
        lv_damageBarHeight = DialogControlGetHeight(lib773A3C4C_gv_cU_HeroDialogHealthBarImage[lv_index], lv_player);
    }
    else if (auto5621BDE6_val == c_unitPropShields) {
        DialogControlCreateInPanelFromTemplate(lib773A3C4C_gv_cU_HeroPanel[lv_index], c_triggerControlTypeImage, "HotS_GameUnitFrame/HeroHealthBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_heroGroup, c_anchorLeft, lib773A3C4C_gv_cU_HeroDialogShieldBarImage[lv_index], c_anchorLeft, 0, 0);
        if ((UnitGetPropertyFixed(lib773A3C4C_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropShieldsMax, c_unitPropCurrent) != 0.0)) {
            lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(lib773A3C4C_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropShields, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(lib773A3C4C_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropShieldsMax, c_unitPropCurrent)) * IntToFixed(lib773A3C4C_gv_cUC_HEROUIBARWIDTH)));
        }
        else {
            lv_damageBarWidth = 0;
        }
        lv_damageBarHeight = DialogControlGetHeight(lib773A3C4C_gv_cU_HeroDialogShieldBarImage[lv_index], lv_player);
    }
    else {
    }
    lv_damageBar = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(lv_damageBar, 506, lv_heroGroup);
    DialogControlSetVisible(lv_damageBar, PlayerGroupAll(), false);
    DialogControlSetVisible(lv_damageBar, lv_heroGroup, true);
    DialogControlSetSize(lv_damageBar, PlayerGroupAll(), MaxI(MinI(lv_damageBarWidth, 244), 1), lv_damageBarHeight);
    Wait(1.0, c_timeReal);
    DialogControlFadeTransparency(lv_damageBar, lv_heroGroup, 1.0, 100.0);
    Wait(1.1, c_timeReal);
    DialogControlDestroy(lv_damageBar);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_CU_HeroUnitVitalChange_Init () {
    lib773A3C4C_gt_CU_HeroUnitVitalChange = TriggerCreate("lib773A3C4C_gt_CU_HeroUnitVitalChange_Func");
    TriggerEnable(lib773A3C4C_gt_CU_HeroUnitVitalChange, false);
    TriggerAddEventUnitProperty(lib773A3C4C_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib773A3C4C_gv_cU_HeroUnit[1][1]"), c_unitPropLife);
    TriggerAddEventUnitProperty(lib773A3C4C_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib773A3C4C_gv_cU_HeroUnit[2][1]"), c_unitPropLife);
    TriggerAddEventUnitProperty(lib773A3C4C_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib773A3C4C_gv_cU_HeroUnit[1][1]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(lib773A3C4C_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib773A3C4C_gv_cU_HeroUnit[2][1]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(lib773A3C4C_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib773A3C4C_gv_cU_HeroUnit[1][1]"), c_unitPropShields);
    TriggerAddEventUnitProperty(lib773A3C4C_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib773A3C4C_gv_cU_HeroUnit[2][1]"), c_unitPropShields);
    TriggerAddEventUnitProperty(lib773A3C4C_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib773A3C4C_gv_cU_HeroUnit[1][2]"), c_unitPropLife);
    TriggerAddEventUnitProperty(lib773A3C4C_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib773A3C4C_gv_cU_HeroUnit[2][2]"), c_unitPropLife);
    TriggerAddEventUnitProperty(lib773A3C4C_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib773A3C4C_gv_cU_HeroUnit[1][2]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(lib773A3C4C_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib773A3C4C_gv_cU_HeroUnit[2][2]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(lib773A3C4C_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib773A3C4C_gv_cU_HeroUnit[1][2]"), c_unitPropShields);
    TriggerAddEventUnitProperty(lib773A3C4C_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib773A3C4C_gv_cU_HeroUnit[2][2]"), c_unitPropShields);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroMouseHoverText
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_CU_HeroMouseHoverText_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    playergroup lv_heroGroup;

    // Automatic Variable Declarations
    int auto7C53C942_val;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == lib773A3C4C_gv_cU_HeroDialogBorderImage[1]) || (EventDialogControl() == lib773A3C4C_gv_cU_HeroDialogBorderImageNoEnergy[1]) || (EventDialogControl() == lib773A3C4C_gv_cU_HeroDialogBorderImage[2]) || (EventDialogControl() == lib773A3C4C_gv_cU_HeroDialogBorderImageNoEnergy[2]) || (EventDialogControl() == lib773A3C4C_gv_cU_HeroDialogButton[1]) || (EventDialogControl() == lib773A3C4C_gv_cU_HeroDialogButton[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroGroup = PlayerGroupSingle(EventPlayer());
    if (((EventDialogControl() == lib773A3C4C_gv_cU_HeroDialogBorderImage[1]) || (EventDialogControl() == lib773A3C4C_gv_cU_HeroDialogBorderImageNoEnergy[1]) || (EventDialogControl() == lib773A3C4C_gv_cU_HeroDialogButton[1]))) {
        lv_index = 1;
    }
    else {
        if (((EventDialogControl() == lib773A3C4C_gv_cU_HeroDialogBorderImage[2]) || (EventDialogControl() == lib773A3C4C_gv_cU_HeroDialogBorderImageNoEnergy[2]) || (EventDialogControl() == lib773A3C4C_gv_cU_HeroDialogButton[2]))) {
            lv_index = 2;
        }
        else {
            return true;
        }
    }
    auto7C53C942_val = EventDialogControlEventType();
    if (auto7C53C942_val == c_triggerControlEventTypeMouseEnter) {
        if ((UnitGetPropertyFixed(lib773A3C4C_gv_cU_HeroUnit[lv_index][EventPlayer()], c_unitPropLifeMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogHealthLabel[lv_index], lv_heroGroup, true);
        }

        if ((UnitGetPropertyFixed(lib773A3C4C_gv_cU_HeroUnit[lv_index][EventPlayer()], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogEnergyLabel[lv_index], lv_heroGroup, true);
        }

        if ((UnitGetPropertyFixed(lib773A3C4C_gv_cU_HeroUnit[lv_index][EventPlayer()], c_unitPropShieldsMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogShieldLabel[lv_index], lv_heroGroup, true);
        }

    }
    else if (auto7C53C942_val == c_triggerControlEventTypeMouseExit) {
        DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogHealthLabel[lv_index], lv_heroGroup, false);
        DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogEnergyLabel[lv_index], lv_heroGroup, false);
        DialogControlSetVisible(lib773A3C4C_gv_cU_HeroDialogShieldLabel[lv_index], lv_heroGroup, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_CU_HeroMouseHoverText_Init () {
    lib773A3C4C_gt_CU_HeroMouseHoverText = TriggerCreate("lib773A3C4C_gt_CU_HeroMouseHoverText_Func");
    TriggerEnable(lib773A3C4C_gt_CU_HeroMouseHoverText, false);
    TriggerAddEventDialogControl(lib773A3C4C_gt_CU_HeroMouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
    TriggerAddEventDialogControl(lib773A3C4C_gt_CU_HeroMouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Change Label Values
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_ChangeLabelValues_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib773A3C4C_gv_blackHoleDurationValue < 15) && (lib773A3C4C_gv_pointsDialogPointsAmount > 0) && (EventDialogControl() == lib773A3C4C_gv_blackHoleDurationPlusButton)) {
        if ((lib773A3C4C_gv_blackHoleDurationValue < 9)) {
            lib773A3C4C_gv_blackHoleDurationValue += 1;
            lib773A3C4C_gv_pointsDialogPointsAmount -= 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_blackHoleDurationValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_AB148494") + IntToText(lib773A3C4C_gv_blackHoleDurationValue)) + StringExternal("Param/Value/lib_773A3C4C_981A6C24")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_0227AE96") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_1FBB706F")), PlayerGroupAll());
        }
        else {
            lib773A3C4C_gv_blackHoleDurationValue += 1;
            lib773A3C4C_gv_pointsDialogPointsAmount -= 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_blackHoleDurationValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_5F616FCE") + IntToText(lib773A3C4C_gv_blackHoleDurationValue)) + StringExternal("Param/Value/lib_773A3C4C_C6F25515")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_0A79BE73") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_AC028343")), PlayerGroupAll());
        }
    }

    if ((lib773A3C4C_gv_blackHoleDurationValue > 0) && (EventDialogControl() == lib773A3C4C_gv_blackHoleDurationMinusButton)) {
        if ((lib773A3C4C_gv_blackHoleDurationValue <= 10)) {
            lib773A3C4C_gv_blackHoleDurationValue -= 1;
            lib773A3C4C_gv_pointsDialogPointsAmount += 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_blackHoleDurationValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_24889BB3") + IntToText(lib773A3C4C_gv_blackHoleDurationValue)) + StringExternal("Param/Value/lib_773A3C4C_9CD5FE9D")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_83175F8B") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_B22CDECC")), PlayerGroupAll());
        }

        if ((lib773A3C4C_gv_blackHoleDurationValue >= 11)) {
            lib773A3C4C_gv_blackHoleDurationValue -= 1;
            lib773A3C4C_gv_pointsDialogPointsAmount += 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_blackHoleDurationValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_E9A41B4E") + IntToText(lib773A3C4C_gv_blackHoleDurationValue)) + StringExternal("Param/Value/lib_773A3C4C_121804B3")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_83AB15B8") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_3C59A8F9")), PlayerGroupAll());
        }

    }

    if ((lib773A3C4C_gv_startingSupplyValue < 15) && (lib773A3C4C_gv_pointsDialogPointsAmount > 0) && (EventDialogControl() == lib773A3C4C_gv_startingSupplyPlusButton)) {
        if ((lib773A3C4C_gv_startingSupplyValue < 9)) {
            lib773A3C4C_gv_startingSupplyValue += 1;
            lib773A3C4C_gv_pointsDialogPointsAmount -= 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_startingSupplyValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_EA687540") + IntToText(lib773A3C4C_gv_startingSupplyValue)) + StringExternal("Param/Value/lib_773A3C4C_355D44FA")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_B7B69F25") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_5FAD33C2")), PlayerGroupAll());
        }
        else {
            lib773A3C4C_gv_startingSupplyValue += 1;
            lib773A3C4C_gv_pointsDialogPointsAmount -= 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_startingSupplyValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_921C840E") + IntToText(lib773A3C4C_gv_startingSupplyValue)) + StringExternal("Param/Value/lib_773A3C4C_19913168")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_842E4D76") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_4BE33F27")), PlayerGroupAll());
        }
    }

    if ((lib773A3C4C_gv_startingSupplyValue > 0) && (EventDialogControl() == lib773A3C4C_gv_startingSupplyMinusButton)) {
        if ((lib773A3C4C_gv_startingSupplyValue <= 10)) {
            lib773A3C4C_gv_startingSupplyValue -= 1;
            lib773A3C4C_gv_pointsDialogPointsAmount += 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_startingSupplyValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_ED96FD6F") + IntToText(lib773A3C4C_gv_startingSupplyValue)) + StringExternal("Param/Value/lib_773A3C4C_C8345623")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_394718FD") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_8E4DF482")), PlayerGroupAll());
        }

        if ((lib773A3C4C_gv_startingSupplyValue >= 11)) {
            lib773A3C4C_gv_startingSupplyValue -= 1;
            lib773A3C4C_gv_pointsDialogPointsAmount += 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_startingSupplyValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_90643975") + IntToText(lib773A3C4C_gv_startingSupplyValue)) + StringExternal("Param/Value/lib_773A3C4C_8EDB6EA2")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_C803BE9B") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_F315EA93")), PlayerGroupAll());
        }

    }

    if ((lib773A3C4C_gv_startingMineralsValue < 15) && (lib773A3C4C_gv_pointsDialogPointsAmount > 0) && (EventDialogControl() == lib773A3C4C_gv_startingMineralsPlusButton)) {
        if ((lib773A3C4C_gv_startingMineralsValue < 9)) {
            lib773A3C4C_gv_startingMineralsValue += 1;
            lib773A3C4C_gv_pointsDialogPointsAmount -= 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_startingMineralsValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_6A3944B0") + IntToText(lib773A3C4C_gv_startingMineralsValue)) + StringExternal("Param/Value/lib_773A3C4C_08249F6D")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_37455638") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_A03FBD08")), PlayerGroupAll());
        }
        else {
            lib773A3C4C_gv_startingMineralsValue += 1;
            lib773A3C4C_gv_pointsDialogPointsAmount -= 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_startingMineralsValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_BAB77365") + IntToText(lib773A3C4C_gv_startingMineralsValue)) + StringExternal("Param/Value/lib_773A3C4C_434D6CCE")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_3559AAD4") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_F62133C8")), PlayerGroupAll());
        }
    }

    if ((lib773A3C4C_gv_startingMineralsValue > 0) && (EventDialogControl() == lib773A3C4C_gv_startingMineralsMinusButton)) {
        if ((lib773A3C4C_gv_startingMineralsValue <= 10)) {
            lib773A3C4C_gv_startingMineralsValue -= 1;
            lib773A3C4C_gv_pointsDialogPointsAmount += 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_startingMineralsValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_E5924790") + IntToText(lib773A3C4C_gv_startingMineralsValue)) + StringExternal("Param/Value/lib_773A3C4C_48675D89")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_1D9945DF") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_CABE20DF")), PlayerGroupAll());
        }

        if ((lib773A3C4C_gv_startingMineralsValue >= 11)) {
            lib773A3C4C_gv_startingMineralsValue -= 1;
            lib773A3C4C_gv_pointsDialogPointsAmount += 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_startingMineralsValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_F36D6C11") + IntToText(lib773A3C4C_gv_startingMineralsValue)) + StringExternal("Param/Value/lib_773A3C4C_99445311")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_DCADD0A8") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_E0767D48")), PlayerGroupAll());
        }

    }

    if ((lib773A3C4C_gv_darkPylonRadiusValue < 15) && (lib773A3C4C_gv_pointsDialogPointsAmount > 0) && (EventDialogControl() == lib773A3C4C_gv_darkPylonRadiusPlusButton)) {
        if ((lib773A3C4C_gv_darkPylonRadiusValue < 9)) {
            lib773A3C4C_gv_darkPylonRadiusValue += 1;
            lib773A3C4C_gv_pointsDialogPointsAmount -= 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_darkPylonRadiusValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_AFAFA05F") + IntToText(lib773A3C4C_gv_darkPylonRadiusValue)) + StringExternal("Param/Value/lib_773A3C4C_6412EBB2")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_C1188EC1") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_34CBA022")), PlayerGroupAll());
        }
        else {
            lib773A3C4C_gv_darkPylonRadiusValue += 1;
            lib773A3C4C_gv_pointsDialogPointsAmount -= 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_darkPylonRadiusValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_E40D76B1") + IntToText(lib773A3C4C_gv_darkPylonRadiusValue)) + StringExternal("Param/Value/lib_773A3C4C_DCD4CAE7")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_194EB3E0") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_C7558566")), PlayerGroupAll());
        }
    }

    if ((lib773A3C4C_gv_darkPylonRadiusValue > 0) && (EventDialogControl() == lib773A3C4C_gv_darkPylonRadiusMinusButton)) {
        if ((lib773A3C4C_gv_darkPylonRadiusValue <= 10)) {
            lib773A3C4C_gv_darkPylonRadiusValue -= 1;
            lib773A3C4C_gv_pointsDialogPointsAmount += 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_darkPylonRadiusValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_B77C9DF6") + IntToText(lib773A3C4C_gv_darkPylonRadiusValue)) + StringExternal("Param/Value/lib_773A3C4C_C5EEF07A")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_2BEF939C") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_A79A0E3D")), PlayerGroupAll());
        }

        if ((lib773A3C4C_gv_darkPylonRadiusValue >= 11)) {
            lib773A3C4C_gv_darkPylonRadiusValue -= 1;
            lib773A3C4C_gv_pointsDialogPointsAmount += 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_darkPylonRadiusValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_712C44D4") + IntToText(lib773A3C4C_gv_darkPylonRadiusValue)) + StringExternal("Param/Value/lib_773A3C4C_6FB4B515")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_7502C5E8") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_5CC0892F")), PlayerGroupAll());
        }

    }

    if ((lib773A3C4C_gv_startingAndMaxSOAEnergyValue < 15) && (lib773A3C4C_gv_pointsDialogPointsAmount > 0) && (EventDialogControl() == lib773A3C4C_gv_startingAndMaxSOAEnergyPlusButton)) {
        if ((lib773A3C4C_gv_startingAndMaxSOAEnergyValue < 9)) {
            lib773A3C4C_gv_startingAndMaxSOAEnergyValue += 1;
            lib773A3C4C_gv_pointsDialogPointsAmount -= 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_startingAndMaxSOAEnergyValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_BF198984") + IntToText(lib773A3C4C_gv_startingAndMaxSOAEnergyValue)) + StringExternal("Param/Value/lib_773A3C4C_93770AA2")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_274804FA") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_738296BC")), PlayerGroupAll());
        }
        else {
            lib773A3C4C_gv_startingAndMaxSOAEnergyValue += 1;
            lib773A3C4C_gv_pointsDialogPointsAmount -= 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_startingAndMaxSOAEnergyValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_C2C2EB72") + IntToText(lib773A3C4C_gv_startingAndMaxSOAEnergyValue)) + StringExternal("Param/Value/lib_773A3C4C_551605B0")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_E6E98312") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_711E942F")), PlayerGroupAll());
        }
    }

    if ((lib773A3C4C_gv_startingAndMaxSOAEnergyValue > 0) && (EventDialogControl() == lib773A3C4C_gv_startingAndMaxSOAEnergyMinusButton)) {
        if ((lib773A3C4C_gv_startingAndMaxSOAEnergyValue <= 10)) {
            lib773A3C4C_gv_startingAndMaxSOAEnergyValue -= 1;
            lib773A3C4C_gv_pointsDialogPointsAmount += 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_startingAndMaxSOAEnergyValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_7619D739") + IntToText(lib773A3C4C_gv_startingAndMaxSOAEnergyValue)) + StringExternal("Param/Value/lib_773A3C4C_FA9971EC")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_29302BA1") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_9BF5485D")), PlayerGroupAll());
        }

        if ((lib773A3C4C_gv_startingAndMaxSOAEnergyValue >= 11)) {
            lib773A3C4C_gv_startingAndMaxSOAEnergyValue -= 1;
            lib773A3C4C_gv_pointsDialogPointsAmount += 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_startingAndMaxSOAEnergyValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_C990C109") + IntToText(lib773A3C4C_gv_startingAndMaxSOAEnergyValue)) + StringExternal("Param/Value/lib_773A3C4C_CC0EEDDC")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_6A488F76") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_47EC796C")), PlayerGroupAll());
        }

    }

    if ((lib773A3C4C_gv_chronoBoostSpeedValue < 15) && (lib773A3C4C_gv_pointsDialogPointsAmount > 0) && (EventDialogControl() == lib773A3C4C_gv_chronoBoostSpeedPlusButton)) {
        if ((lib773A3C4C_gv_chronoBoostSpeedValue < 9)) {
            lib773A3C4C_gv_chronoBoostSpeedValue += 1;
            lib773A3C4C_gv_pointsDialogPointsAmount -= 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_chronoBoostSpeedValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_8F6D7752") + IntToText(lib773A3C4C_gv_chronoBoostSpeedValue)) + StringExternal("Param/Value/lib_773A3C4C_74197BCC")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_06973BD6") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_3D14B540")), PlayerGroupAll());
        }
        else {
            lib773A3C4C_gv_chronoBoostSpeedValue += 1;
            lib773A3C4C_gv_pointsDialogPointsAmount -= 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_chronoBoostSpeedValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_2AF8C466") + IntToText(lib773A3C4C_gv_chronoBoostSpeedValue)) + StringExternal("Param/Value/lib_773A3C4C_B676C111")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_49B2EDA0") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_82B6D6CF")), PlayerGroupAll());
        }
    }

    if ((lib773A3C4C_gv_chronoBoostSpeedValue > 0) && (EventDialogControl() == lib773A3C4C_gv_chronoBoostSpeedMinusButton)) {
        if ((lib773A3C4C_gv_chronoBoostSpeedValue <= 10)) {
            lib773A3C4C_gv_chronoBoostSpeedValue -= 1;
            lib773A3C4C_gv_pointsDialogPointsAmount += 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_chronoBoostSpeedValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_48B279D8") + IntToText(lib773A3C4C_gv_chronoBoostSpeedValue)) + StringExternal("Param/Value/lib_773A3C4C_24D7D87E")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_1E790203") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_64810B80")), PlayerGroupAll());
        }

        if ((lib773A3C4C_gv_chronoBoostSpeedValue >= 11)) {
            lib773A3C4C_gv_chronoBoostSpeedValue -= 1;
            lib773A3C4C_gv_pointsDialogPointsAmount += 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_chronoBoostSpeedValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_2763EC97") + IntToText(lib773A3C4C_gv_chronoBoostSpeedValue)) + StringExternal("Param/Value/lib_773A3C4C_11D70074")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_34B9C7B5") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_1B5331B7")), PlayerGroupAll());
        }

    }

    if ((lib773A3C4C_gv_shadowGuardDurationValue < 15) && (lib773A3C4C_gv_pointsDialogPointsAmount > 0) && (EventDialogControl() == lib773A3C4C_gv_shadowGuardDurationPlusButton)) {
        if ((lib773A3C4C_gv_shadowGuardDurationValue < 9)) {
            lib773A3C4C_gv_shadowGuardDurationValue += 1;
            lib773A3C4C_gv_pointsDialogPointsAmount -= 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_shadowGuardDurationValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_0113670E") + IntToText(lib773A3C4C_gv_shadowGuardDurationValue)) + StringExternal("Param/Value/lib_773A3C4C_1E94E0FA")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_4755C351") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_7681A049")), PlayerGroupAll());
        }
        else {
            lib773A3C4C_gv_shadowGuardDurationValue += 1;
            lib773A3C4C_gv_pointsDialogPointsAmount -= 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_shadowGuardDurationValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_4168FFF0") + IntToText(lib773A3C4C_gv_shadowGuardDurationValue)) + StringExternal("Param/Value/lib_773A3C4C_D0256A01")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_599741D7") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_B2CD65B2")), PlayerGroupAll());
        }
    }

    if ((lib773A3C4C_gv_shadowGuardDurationValue > 0) && (EventDialogControl() == lib773A3C4C_gv_shadowGuardDurationMinusButton)) {
        if ((lib773A3C4C_gv_shadowGuardDurationValue <= 10)) {
            lib773A3C4C_gv_shadowGuardDurationValue -= 1;
            lib773A3C4C_gv_pointsDialogPointsAmount += 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_shadowGuardDurationValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_E7BA7D95") + IntToText(lib773A3C4C_gv_shadowGuardDurationValue)) + StringExternal("Param/Value/lib_773A3C4C_589B583B")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_460F895F") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_F27B2BB5")), PlayerGroupAll());
        }

        if ((lib773A3C4C_gv_shadowGuardDurationValue >= 11)) {
            lib773A3C4C_gv_shadowGuardDurationValue -= 1;
            lib773A3C4C_gv_pointsDialogPointsAmount += 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_shadowGuardDurationValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_3AFCA3B4") + IntToText(lib773A3C4C_gv_shadowGuardDurationValue)) + StringExternal("Param/Value/lib_773A3C4C_7BFC6DFD")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_EA13DC04") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_81B379D5")), PlayerGroupAll());
        }

    }

    if ((lib773A3C4C_gv_timeStopHasteValue < 15) && (lib773A3C4C_gv_pointsDialogPointsAmount > 0) && (EventDialogControl() == lib773A3C4C_gv_timeStopHastePlusButton)) {
        if ((lib773A3C4C_gv_timeStopHasteValue < 9)) {
            lib773A3C4C_gv_timeStopHasteValue += 1;
            lib773A3C4C_gv_pointsDialogPointsAmount -= 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_timeStopHasteValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_166F9B90") + IntToText(lib773A3C4C_gv_timeStopHasteValue)) + StringExternal("Param/Value/lib_773A3C4C_8CB76DF2")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_2AC45513") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_AB159B03")), PlayerGroupAll());
        }
        else {
            lib773A3C4C_gv_timeStopHasteValue += 1;
            lib773A3C4C_gv_pointsDialogPointsAmount -= 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_timeStopHasteValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_C5F26F78") + IntToText(lib773A3C4C_gv_timeStopHasteValue)) + StringExternal("Param/Value/lib_773A3C4C_7ABF8745")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_42070FAD") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_2D09F2A0")), PlayerGroupAll());
        }
    }

    if ((lib773A3C4C_gv_timeStopHasteValue > 0) && (EventDialogControl() == lib773A3C4C_gv_timeStopHasteMinusButton)) {
        if ((lib773A3C4C_gv_timeStopHasteValue <= 10)) {
            lib773A3C4C_gv_timeStopHasteValue -= 1;
            lib773A3C4C_gv_pointsDialogPointsAmount += 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_timeStopHasteValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_B397E709") + IntToText(lib773A3C4C_gv_timeStopHasteValue)) + StringExternal("Param/Value/lib_773A3C4C_388F64C7")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_C3BD5A83") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_6EC4ABB2")), PlayerGroupAll());
        }

        if ((lib773A3C4C_gv_timeStopHasteValue >= 11)) {
            lib773A3C4C_gv_timeStopHasteValue -= 1;
            lib773A3C4C_gv_pointsDialogPointsAmount += 1;
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_timeStopHasteValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_1B1BE188") + IntToText(lib773A3C4C_gv_timeStopHasteValue)) + StringExternal("Param/Value/lib_773A3C4C_80842759")), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_5DCD4D88") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_64F3D914")), PlayerGroupAll());
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_ChangeLabelValues_Init () {
    lib773A3C4C_gt_ChangeLabelValues = TriggerCreate("lib773A3C4C_gt_ChangeLabelValues_Func");
    TriggerAddEventDialogControl(lib773A3C4C_gt_ChangeLabelValues, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset Points
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_ResetPoints_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib773A3C4C_gv_pointsDialogResetPointsButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib773A3C4C_gv_blackHoleDurationValue = 0;
    lib773A3C4C_gv_chronoBoostSpeedValue = 0;
    lib773A3C4C_gv_darkPylonRadiusValue = 0;
    lib773A3C4C_gv_shadowGuardDurationValue = 0;
    lib773A3C4C_gv_startingAndMaxSOAEnergyValue = 0;
    lib773A3C4C_gv_startingMineralsValue = 0;
    lib773A3C4C_gv_startingSupplyValue = 0;
    lib773A3C4C_gv_timeStopHasteValue = 0;
    lib773A3C4C_gv_pointsDialogPointsAmount = 0;
    if ((lib773A3C4C_gv_pC_CurrentMap == "Allies")) {
        lib773A3C4C_gv_pointsDialogPointsAmount = 15;
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "EnforcingJustice")) {
        lib773A3C4C_gv_pointsDialogPointsAmount = 25;
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "BrokenFaith")) {
        lib773A3C4C_gv_pointsDialogPointsAmount = 35;
    }

    libNtve_gf_SetDialogItemText(lib773A3C4C_gv_blackHoleDurationValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_0C0D90BD") + IntToText(lib773A3C4C_gv_blackHoleDurationValue)) + StringExternal("Param/Value/lib_773A3C4C_41681E5B")), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib773A3C4C_gv_startingSupplyValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_0D1A2CFA") + IntToText(lib773A3C4C_gv_startingSupplyValue)) + StringExternal("Param/Value/lib_773A3C4C_99675176")), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib773A3C4C_gv_startingMineralsValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_01C38FCB") + IntToText(lib773A3C4C_gv_startingMineralsValue)) + StringExternal("Param/Value/lib_773A3C4C_B0618585")), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib773A3C4C_gv_darkPylonRadiusValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_BAD0E4A3") + IntToText(lib773A3C4C_gv_darkPylonRadiusValue)) + StringExternal("Param/Value/lib_773A3C4C_30C9EA39")), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib773A3C4C_gv_startingAndMaxSOAEnergyValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_981ED382") + IntToText(lib773A3C4C_gv_startingAndMaxSOAEnergyValue)) + StringExternal("Param/Value/lib_773A3C4C_1815C6AF")), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib773A3C4C_gv_chronoBoostSpeedValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_33B61EA7") + IntToText(lib773A3C4C_gv_chronoBoostSpeedValue)) + StringExternal("Param/Value/lib_773A3C4C_52D754A7")), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib773A3C4C_gv_shadowGuardDurationValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_4AB90267") + IntToText(lib773A3C4C_gv_shadowGuardDurationValue)) + StringExternal("Param/Value/lib_773A3C4C_4A5493CA")), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib773A3C4C_gv_timeStopHasteValueLabel, ((StringExternal("Param/Value/lib_773A3C4C_9050EA9E") + IntToText(lib773A3C4C_gv_timeStopHasteValue)) + StringExternal("Param/Value/lib_773A3C4C_930005AF")), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib773A3C4C_gv_pointsDialogPointsAmountLabel, ((StringExternal("Param/Value/lib_773A3C4C_90F03DE5") + IntToText(lib773A3C4C_gv_pointsDialogPointsAmount)) + StringExternal("Param/Value/lib_773A3C4C_53EBCC60")), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_ResetPoints_Init () {
    lib773A3C4C_gt_ResetPoints = TriggerCreate("lib773A3C4C_gt_ResetPoints_Func");
    TriggerAddEventDialogControl(lib773A3C4C_gt_ResetPoints, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apply Point Values
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_ApplyPointValues_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoAA2E7CE6_n;
    int autoAA2E7CE6_i;
    int autoA1EA8080_n;
    int autoA1EA8080_i;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib773A3C4C_gv_pointsDialogContinueButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libVoiC_gf_MuteUnmuteAllSoundChannelsExcept(false, c_soundCategoryUI, PlayerGroupAll());
    DialogSetVisible(lib773A3C4C_gv_pointsDialog, PlayerGroupAll(), false);
    DialogDestroy(lib773A3C4C_gv_pointsDialog);
    DialogDestroy(lib773A3C4C_gv_pointsDialogTitleDialog);
    TriggerStop(lib773A3C4C_gt_ChangeLabelValues);
    TriggerStop(lib773A3C4C_gt_ResetPoints);
    TriggerStop(lib773A3C4C_gt_PointsDialogTutorial);
    TriggerStop(lib773A3C4C_gt_PointsDialogTutorialContinue);
    TriggerEnable(lib773A3C4C_gt_ChangeLabelValues, false);
    TriggerEnable(lib773A3C4C_gt_ResetPoints, false);
    TriggerEnable(lib773A3C4C_gt_PointsDialogTutorial, false);
    TriggerEnable(lib773A3C4C_gt_PointsDialogTutorialContinue, false);
    TechTreeUpgradeAddLevel(1, "MasteryVorazunBlackHoleDuration", lib773A3C4C_gv_blackHoleDurationValue);
    TechTreeUpgradeAddLevel(1, "MasteryVorazunChronoBoostSpeed", lib773A3C4C_gv_chronoBoostSpeedValue);
    TechTreeUpgradeAddLevel(1, "MasteryVorazunDarkPylonRadius", lib773A3C4C_gv_darkPylonRadiusValue);
    TechTreeUpgradeAddLevel(1, "MasteryVorazunShadowGuardDuration", lib773A3C4C_gv_shadowGuardDurationValue);
    TechTreeUpgradeAddLevel(1, "MasteryVorazunStartingAndMaxSoAEnergy", lib773A3C4C_gv_startingAndMaxSOAEnergyValue);
    autoAA2E7CE6_n = lib773A3C4C_gv_startingAndMaxSOAEnergyValue;
    for (autoAA2E7CE6_i = 1; autoAA2E7CE6_i <= autoAA2E7CE6_n; autoAA2E7CE6_i += 1) {
        lib773A3C4C_gv_startingSOAEngery += 3.0;
    }
    TechTreeUpgradeAddLevel(1, "MasteryVorazunStartingSupply", lib773A3C4C_gv_startingSupplyValue);
    autoA1EA8080_n = lib773A3C4C_gv_startingMineralsValue;
    for (autoA1EA8080_i = 1; autoA1EA8080_i <= autoA1EA8080_n; autoA1EA8080_i += 1) {
        lib773A3C4C_gv_startingMinerals += 25;
    }
    TechTreeUpgradeAddLevel(1, "MasteryVorazunTimeStopHaste", lib773A3C4C_gv_timeStopHasteValue);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_ApplyPointValues_Init () {
    lib773A3C4C_gt_ApplyPointValues = TriggerCreate("lib773A3C4C_gt_ApplyPointValues_Func");
    TriggerAddEventDialogControl(lib773A3C4C_gt_ApplyPointValues, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Points Dialog Tutorial
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_PointsDialogTutorial_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib773A3C4C_gv_pointsDialogTutorialButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(lib773A3C4C_gv_pointsDialog, PlayerGroupAll(), false);
    DialogSetVisible(lib773A3C4C_gv_pointsDialogTitleDialog, PlayerGroupAll(), false);
    DialogSetVisible(lib773A3C4C_gv_pointsDialogTutorialDialog, PlayerGroupAll(), true);
    DialogSetVisible(lib773A3C4C_gv_pointsDialogTutorialTitleDialog, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_PointsDialogTutorial_Init () {
    lib773A3C4C_gt_PointsDialogTutorial = TriggerCreate("lib773A3C4C_gt_PointsDialogTutorial_Func");
    TriggerAddEventDialogControl(lib773A3C4C_gt_PointsDialogTutorial, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Points Dialog Tutorial Continue
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_PointsDialogTutorialContinue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib773A3C4C_gv_pointsDialogTutoialDialogContinueButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(lib773A3C4C_gv_pointsDialogTutorialDialog, PlayerGroupAll(), false);
    DialogSetVisible(lib773A3C4C_gv_pointsDialogTutorialTitleDialog, PlayerGroupAll(), false);
    DialogSetVisible(lib773A3C4C_gv_pointsDialog, PlayerGroupAll(), true);
    DialogSetVisible(lib773A3C4C_gv_pointsDialogTitleDialog, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_PointsDialogTutorialContinue_Init () {
    lib773A3C4C_gt_PointsDialogTutorialContinue = TriggerCreate("lib773A3C4C_gt_PointsDialogTutorialContinue_Func");
    TriggerAddEventDialogControl(lib773A3C4C_gt_PointsDialogTutorialContinue, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vorazun - Send Transmission Tick
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_VorazunSendTransmissionTick_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((lib773A3C4C_gv_pM_SendTransmissionCampaignIndex == 0) && (lib773A3C4C_gv_pM_SendTransmissionCampaignPlayingTick > 0)) {
            lib773A3C4C_gv_pM_SendTransmissionCampaignPlayingTick -= 1;
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_VorazunSendTransmissionTick_Init () {
    lib773A3C4C_gt_VorazunSendTransmissionTick = TriggerCreate("lib773A3C4C_gt_VorazunSendTransmissionTick_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kills Victory Screen
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_KillsVictoryScreen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA3282E4D_g;
    int autoA3282E4D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetOwner(EventUnit()) == 1) && (UnitGetType(EventUnit()) != "Scarab"))) {
        lib773A3C4C_gv_unitsLost += 1;
    }

    autoA3282E4D_g = lib773A3C4C_gv_enemyPlayergroup;
    autoA3282E4D_var = -1;
    while (true) {
        autoA3282E4D_var = PlayerGroupNextPlayer(autoA3282E4D_g, autoA3282E4D_var);
        if (autoA3282E4D_var < 0) { break; }
        if ((UnitGetOwner(EventUnit()) == autoA3282E4D_var) && (UnitGetOwner(libNtve_gf_KillingUnit()) == 1)) {
            lib773A3C4C_gv_enemyUnitsKilled += 1;
            if ((UnitGetType(libNtve_gf_KillingUnit()) == "VorazunChampion")) {
                lib773A3C4C_gv_enemyUnitsKilledByVorazun += 1;
            }

            if ((UnitGetType(libNtve_gf_KillingUnit()) == "Zul")) {
                lib773A3C4C_gv_enemyUnitsKilledByZul += 1;
            }

            if ((UnitGetType(libNtve_gf_KillingUnit()) == "WarPig")) {
                lib773A3C4C_gv_enemyUnitsKilledByJohn += 1;
            }

            if ((UnitGetType(libNtve_gf_KillingUnit()) == "ColossusTaldarim")) {
                lib773A3C4C_gv_enemyUnitsKilledByWrathwalkers += 1;
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_KillsVictoryScreen_Init () {
    lib773A3C4C_gt_KillsVictoryScreen = TriggerCreate("lib773A3C4C_gt_KillsVictoryScreen_Func");
    TriggerAddEventUnitDied(lib773A3C4C_gt_KillsVictoryScreen, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: To Next Mission
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_ToNextMission_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_nextMission;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nextMission = lib773A3C4C_gf_GetNextMission();

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib773A3C4C_gv_pU_VSBtnContinue))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(lib773A3C4C_gv_pU_VSBtnContinue, PlayerGroupAll(), false);
    DialogControlSetEnabled(lib773A3C4C_gv_replayMissionButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(lib773A3C4C_gv_pU_VSBtnPlayAgain, PlayerGroupAll(), false);
    TriggerEnable(lib773A3C4C_gt_ToNextMission, false);
    TriggerEnable(lib773A3C4C_gt_ReplayMission, false);
    TriggerEnable(lib773A3C4C_gt_BackToLauncher, false);
    if (true) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Silence", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    DialogSetVisible(lib773A3C4C_gv_pU_VSDialog, PlayerGroupAll(), false);
    DialogSetVisible(lib773A3C4C_gv_pU_VSDialog2, PlayerGroupAll(), false);
    DialogSetVisible(lib773A3C4C_gv_pU_VSDialog3, PlayerGroupAll(), false);
    libVoiC_gf_CinematicFade(false, 1.0, Color(0.00, 0.00, 0.00), true);
    GameSetNextMap(lv_nextMission);
    GameOver(1, c_gameOverVictory, false, false);
    if ((lib773A3C4C_gv_pC_CurrentMap == "TheUnitedOrder")) {
        OnlineMapToMapLoad(3, PlayerGroupEmpty(), PlayerGroupEmpty());
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "Allies")) {
        OnlineMapToMapLoad(4, PlayerGroupEmpty(), PlayerGroupEmpty());
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "ShroudofShadows")) {
        OnlineMapToMapLoad(5, PlayerGroupEmpty(), PlayerGroupEmpty());
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "TheSlums")) {
        OnlineMapToMapLoad(6, PlayerGroupEmpty(), PlayerGroupEmpty());
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "TestofStrength")) {
        OnlineMapToMapLoad(7, PlayerGroupEmpty(), PlayerGroupEmpty());
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "EnforcingJustice")) {
        OnlineMapToMapLoad(8, PlayerGroupEmpty(), PlayerGroupEmpty());
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "KhalaiCohort")) {
        OnlineMapToMapLoad(9, PlayerGroupEmpty(), PlayerGroupEmpty());
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "BrokenFaith")) {
        OnlineMapToMapLoad(10, PlayerGroupEmpty(), PlayerGroupEmpty());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_ToNextMission_Init () {
    lib773A3C4C_gt_ToNextMission = TriggerCreate("lib773A3C4C_gt_ToNextMission_Func");
    TriggerEnable(lib773A3C4C_gt_ToNextMission, false);
    TriggerAddEventDialogControl(lib773A3C4C_gt_ToNextMission, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Replay Mission
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_ReplayMission_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_nextMission;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nextMission = lib773A3C4C_gf_GetNextMission();

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib773A3C4C_gv_replayMissionButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(lib773A3C4C_gv_pU_VSBtnContinue, PlayerGroupAll(), false);
    DialogControlSetEnabled(lib773A3C4C_gv_replayMissionButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(lib773A3C4C_gv_pU_VSBtnPlayAgain, PlayerGroupAll(), false);
    TriggerEnable(lib773A3C4C_gt_ReplayMission, false);
    TriggerEnable(lib773A3C4C_gt_ToNextMission, false);
    TriggerEnable(lib773A3C4C_gt_BackToLauncher, false);
    if (true) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Silence", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    DialogSetVisible(lib773A3C4C_gv_pU_VSDialog, PlayerGroupAll(), false);
    DialogSetVisible(lib773A3C4C_gv_pU_VSDialog2, PlayerGroupAll(), false);
    DialogSetVisible(lib773A3C4C_gv_pU_VSDialog3, PlayerGroupAll(), false);
    libVoiC_gf_CinematicFade(false, 1.0, Color(0.00, 0.00, 0.00), true);
    GameSetNextMap("CURRENT");
    GameOver(1, c_gameOverVictory, false, false);
    if ((lib773A3C4C_gv_pC_CurrentMap == "TheUnitedOrder")) {
        OnlineMapToMapLoad(2, PlayerGroupEmpty(), PlayerGroupEmpty());
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "Allies")) {
        OnlineMapToMapLoad(3, PlayerGroupEmpty(), PlayerGroupEmpty());
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "ShroudofShadows")) {
        OnlineMapToMapLoad(4, PlayerGroupEmpty(), PlayerGroupEmpty());
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "TheSlums")) {
        OnlineMapToMapLoad(5, PlayerGroupEmpty(), PlayerGroupEmpty());
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "TestofStrength")) {
        OnlineMapToMapLoad(6, PlayerGroupEmpty(), PlayerGroupEmpty());
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "EnforcingJustice")) {
        OnlineMapToMapLoad(7, PlayerGroupEmpty(), PlayerGroupEmpty());
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "KhalaiCohort")) {
        OnlineMapToMapLoad(8, PlayerGroupEmpty(), PlayerGroupEmpty());
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "BrokenFaith")) {
        OnlineMapToMapLoad(9, PlayerGroupEmpty(), PlayerGroupEmpty());
    }

    if ((lib773A3C4C_gv_pC_CurrentMap == "ANewPath")) {
        OnlineMapToMapLoad(10, PlayerGroupEmpty(), PlayerGroupEmpty());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_ReplayMission_Init () {
    lib773A3C4C_gt_ReplayMission = TriggerCreate("lib773A3C4C_gt_ReplayMission_Func");
    TriggerEnable(lib773A3C4C_gt_ReplayMission, false);
    TriggerAddEventDialogControl(lib773A3C4C_gt_ReplayMission, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Back To Launcher
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_BackToLauncher_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib773A3C4C_gv_pU_VSBtnPlayAgain))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(lib773A3C4C_gv_pU_VSBtnContinue, PlayerGroupAll(), false);
    DialogControlSetEnabled(lib773A3C4C_gv_replayMissionButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(lib773A3C4C_gv_pU_VSBtnPlayAgain, PlayerGroupAll(), false);
    TriggerEnable(lib773A3C4C_gt_ToNextMission, false);
    TriggerEnable(lib773A3C4C_gt_ReplayMission, false);
    TriggerEnable(lib773A3C4C_gt_BackToLauncher, false);
    if (true) {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Silence", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }

    DialogSetVisible(lib773A3C4C_gv_pU_VSDialog, PlayerGroupAll(), false);
    DialogSetVisible(lib773A3C4C_gv_pU_VSDialog2, PlayerGroupAll(), false);
    DialogSetVisible(lib773A3C4C_gv_pU_VSDialog3, PlayerGroupAll(), false);
    libVoiC_gf_CinematicFade(false, 1.0, Color(0.00, 0.00, 0.00), true);
    GameSetNextMap("Ambivalence/Ambivalence Launcher");
    Wait(0.2, c_timeGame);
    GameOver(1, c_gameOverVictory, false, false);
    OnlineMapToMapLoad(1, PlayerGroupEmpty(), PlayerGroupEmpty());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_BackToLauncher_Init () {
    lib773A3C4C_gt_BackToLauncher = TriggerCreate("lib773A3C4C_gt_BackToLauncher_Func");
    TriggerEnable(lib773A3C4C_gt_BackToLauncher, false);
    TriggerAddEventDialogControl(lib773A3C4C_gt_BackToLauncher, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Difficulty Selected
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_DifficultySelected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto9C048B54_g;
    int auto9C048B54_var;
    playergroup auto486FA29E_g;
    int auto486FA29E_var;
    playergroup autoAA5CAC5F_g;
    int autoAA5CAC5F_var;
    playergroup autoC99B800E_g;
    int autoC99B800E_var;
    playergroup autoB0372DFA_g;
    int autoB0372DFA_var;
    playergroup auto73E68A10_g;
    int auto73E68A10_var;
    playergroup auto7739B176_g;
    int auto7739B176_var;
    playergroup autoDA11D827_g;
    int autoDA11D827_var;

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Easy]) || (EventDialogControl() == lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Standard]) || (EventDialogControl() == lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Challenging]) || (EventDialogControl() == lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Extreme])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Easy])) {
        lib773A3C4C_gv_difficulty = StringExternal("Param/Value/lib_773A3C4C_471054B6");
        lib773A3C4C_gv_difficultyOffsetX = 55;
        GameSetSpeedValueMinimum(c_gameSpeedSlow);
        TechTreeUpgradeAddLevel(1, "SOAWarpGateCharges", 1);
        auto7739B176_g = lib773A3C4C_gv_alliedPlayergroup;
        auto7739B176_var = -1;
        while (true) {
            auto7739B176_var = PlayerGroupNextPlayer(auto7739B176_g, auto7739B176_var);
            if (auto7739B176_var < 0) { break; }
            if ((auto7739B176_var == 1)) {
                PlayerSetDifficulty(1, 1);
            }
            else {
                PlayerSetDifficulty(auto7739B176_var, 4);
                lib773A3C4C_gf_AI(auto7739B176_var, 1000000000, 1000000000);
            }
        }
        autoDA11D827_g = lib773A3C4C_gv_enemyPlayergroup;
        autoDA11D827_var = -1;
        while (true) {
            autoDA11D827_var = PlayerGroupNextPlayer(autoDA11D827_g, autoDA11D827_var);
            if (autoDA11D827_var < 0) { break; }
            PlayerModifyPropertyInt(autoDA11D827_var, c_playerPropHandicap, c_playerPropOperSetTo, 50);
            if ((autoDA11D827_var != lib773A3C4C_gv_defenseEnemyPlayer)) {
                PlayerSetDifficulty(autoDA11D827_var, 1);
                lib773A3C4C_gf_AI(autoDA11D827_var, 1000000000, 1000000000);
            }
            else {
                PlayerSetDifficulty(autoDA11D827_var, 1);
            }
            TechTreeAbilityAllow(autoDA11D827_var, AbilityCommand("BlinkShieldRestore", 0), false);
            TechTreeAbilityAllow(autoDA11D827_var, AbilityCommand("Blink", 0), false);
            TechTreeAbilityAllow(autoDA11D827_var, AbilityCommand("DarkTemplarShadowDash", 0), false);
            TechTreeAbilityAllow(autoDA11D827_var, AbilityCommand("VoidZealotWhirlwind2", 0), false);
            TechTreeAbilityAllow(autoDA11D827_var, AbilityCommand("VoidZealotWhirlwind", 0), false);
            TechTreeAbilityAllow(autoDA11D827_var, AbilityCommand("Charge", 0), false);
            TechTreeAbilityAllow(autoDA11D827_var, AbilityCommand("CorsairMPDisruptionWeb", 0), false);
            TechTreeAbilityAllow(autoDA11D827_var, AbilityCommand("PhoenixDoubleGravitonBeam", 0), false);
            TechTreeAbilityAllow(autoDA11D827_var, AbilityCommand("ShadowChargeStun", 0), false);
            TechTreeAbilityAllow(autoDA11D827_var, AbilityCommand("ShadowCharge", 0), false);
            TechTreeAbilityAllow(autoDA11D827_var, AbilityCommand("DarkArchonMindControl", 0), false);
            TechTreeAbilityAllow(autoDA11D827_var, AbilityCommand("OracleRevelation", 0), false);
            TechTreeAbilityAllow(autoDA11D827_var, AbilityCommand("ScoutSpeedBoost", 0), false);
            TechTreeAbilityAllow(autoDA11D827_var, AbilityCommand("PsiStorm", 0), false);
            TechTreeAbilityAllow(autoDA11D827_var, AbilityCommand("Feedback", 0), false);
            TechTreeAbilityAllow(autoDA11D827_var, AbilityCommand("VoidHighTemplarPsiOrb", 0), false);
            TechTreeAbilityAllow(autoDA11D827_var, AbilityCommand("DarkArchonConfusion", 0), false);
            TechTreeAbilityAllow(autoDA11D827_var, AbilityCommand("VoidHighTemplarMindBlast", 0), false);
            TechTreeAbilityAllow(autoDA11D827_var, AbilityCommand("VoidSentryShieldRepairDouble", 0), false);
            TechTreeAbilityAllow(autoDA11D827_var, AbilityCommand("VoidSentryShieldRepair", 0), false);
            TechTreeAbilityAllow(autoDA11D827_var, AbilityCommand("ArbiterMPStasisField", 0), false);
            TechTreeAbilityAllow(autoDA11D827_var, AbilityCommand("Snipe_BlackOps", 0), false);
        }
    }
    else {
        if ((EventDialogControl() == lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Standard])) {
            TriggerEnable(TriggerGetCurrent(), false);
            lib773A3C4C_gv_difficulty = StringExternal("Param/Value/lib_773A3C4C_9701A10C");
            lib773A3C4C_gv_difficultyOffsetX = 15;
            GameSetSpeedValueMinimum(c_gameSpeedNormal);
            TechTreeUpgradeAddLevel(1, "SOAWarpGateCharges", 1);
            autoB0372DFA_g = lib773A3C4C_gv_alliedPlayergroup;
            autoB0372DFA_var = -1;
            while (true) {
                autoB0372DFA_var = PlayerGroupNextPlayer(autoB0372DFA_g, autoB0372DFA_var);
                if (autoB0372DFA_var < 0) { break; }
                if ((autoB0372DFA_var == 1)) {
                    PlayerSetDifficulty(1, 2);
                }
                else {
                    PlayerSetDifficulty(autoB0372DFA_var, 4);
                    lib773A3C4C_gf_AI(autoB0372DFA_var, 1000000000, 1000000000);
                }
            }
            auto73E68A10_g = lib773A3C4C_gv_enemyPlayergroup;
            auto73E68A10_var = -1;
            while (true) {
                auto73E68A10_var = PlayerGroupNextPlayer(auto73E68A10_g, auto73E68A10_var);
                if (auto73E68A10_var < 0) { break; }
                PlayerModifyPropertyInt(auto73E68A10_var, c_playerPropHandicap, c_playerPropOperSetTo, 70);
                if ((auto73E68A10_var != lib773A3C4C_gv_defenseEnemyPlayer)) {
                    PlayerSetDifficulty(auto73E68A10_var, 2);
                    lib773A3C4C_gf_AI(auto73E68A10_var, 1000000000, 1000000000);
                }
                else {
                    PlayerSetDifficulty(auto73E68A10_var, 2);
                }
                TechTreeAbilityAllow(auto73E68A10_var, AbilityCommand("ShadowChargeStun", 0), false);
                TechTreeAbilityAllow(auto73E68A10_var, AbilityCommand("ShadowCharge", 0), false);
                TechTreeAbilityAllow(auto73E68A10_var, AbilityCommand("DarkArchonMindControl", 0), false);
                TechTreeAbilityAllow(auto73E68A10_var, AbilityCommand("OracleRevelation", 0), false);
                TechTreeAbilityAllow(auto73E68A10_var, AbilityCommand("ScoutSpeedBoost", 0), false);
                TechTreeAbilityAllow(auto73E68A10_var, AbilityCommand("PsiStorm", 0), false);
                TechTreeAbilityAllow(auto73E68A10_var, AbilityCommand("Feedback", 0), false);
                TechTreeAbilityAllow(auto73E68A10_var, AbilityCommand("VoidHighTemplarPsiOrb", 0), false);
                TechTreeAbilityAllow(auto73E68A10_var, AbilityCommand("DarkArchonConfusion", 0), false);
                TechTreeAbilityAllow(auto73E68A10_var, AbilityCommand("VoidHighTemplarMindBlast", 0), false);
                TechTreeAbilityAllow(auto73E68A10_var, AbilityCommand("VoidSentryShieldRepairDouble", 0), false);
                TechTreeAbilityAllow(auto73E68A10_var, AbilityCommand("VoidSentryShieldRepair", 0), false);
                TechTreeAbilityAllow(auto73E68A10_var, AbilityCommand("ArbiterMPStasisField", 0), false);
                TechTreeAbilityAllow(auto73E68A10_var, AbilityCommand("Snipe_BlackOps", 0), false);
            }
        }
        else {
            if ((EventDialogControl() == lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Challenging])) {
                lib773A3C4C_gv_difficulty = StringExternal("Param/Value/lib_773A3C4C_9FE572AE");
                lib773A3C4C_gv_difficultyOffsetX = 0;
                TechTreeUpgradeAddLevel(1, "SOAWarpGateCharges", 1);
                GameSetSpeedValueMinimum(c_gameSpeedFast);
                auto9C048B54_g = lib773A3C4C_gv_alliedPlayergroup;
                auto9C048B54_var = -1;
                while (true) {
                    auto9C048B54_var = PlayerGroupNextPlayer(auto9C048B54_g, auto9C048B54_var);
                    if (auto9C048B54_var < 0) { break; }
                    if ((auto9C048B54_var == 1)) {
                        PlayerSetDifficulty(1, 3);
                    }
                    else {
                        PlayerSetDifficulty(auto9C048B54_var, 4);
                        lib773A3C4C_gf_AI(auto9C048B54_var, 1000000000, 1000000000);
                    }
                }
                auto486FA29E_g = lib773A3C4C_gv_enemyPlayergroup;
                auto486FA29E_var = -1;
                while (true) {
                    auto486FA29E_var = PlayerGroupNextPlayer(auto486FA29E_g, auto486FA29E_var);
                    if (auto486FA29E_var < 0) { break; }
                    PlayerModifyPropertyInt(auto486FA29E_var, c_playerPropHandicap, c_playerPropOperSetTo, 90);
                    if ((auto486FA29E_var != lib773A3C4C_gv_defenseEnemyPlayer)) {
                        TechTreeUpgradeAddLevel(auto486FA29E_var, "SOAWarpGateCharges", 1);
                        PlayerSetDifficulty(auto486FA29E_var, 3);
                        lib773A3C4C_gf_AI(auto486FA29E_var, 1000000000, 1000000000);
                    }
                    else {
                        PlayerSetDifficulty(auto486FA29E_var, 3);
                    }
                    TechTreeAbilityAllow(auto486FA29E_var, AbilityCommand("DarkArchonConfusion", 0), false);
                    TechTreeAbilityAllow(auto486FA29E_var, AbilityCommand("VoidHighTemplarMindBlast", 0), false);
                    TechTreeAbilityAllow(auto486FA29E_var, AbilityCommand("VoidSentryShieldRepairDouble", 0), false);
                    TechTreeAbilityAllow(auto486FA29E_var, AbilityCommand("VoidSentryShieldRepair", 0), false);
                    TechTreeAbilityAllow(auto486FA29E_var, AbilityCommand("ArbiterMPStasisField", 0), false);
                }
            }
            else {
                if ((EventDialogControl() == lib773A3C4C_gv_difficutliesDialogItems[lib773A3C4C_ge_Difficulties_Extreme])) {
                    lib773A3C4C_gv_difficulty = StringExternal("Param/Value/lib_773A3C4C_DA96C8B7");
                    lib773A3C4C_gv_difficultyOffsetX = 30;
                    TechTreeUpgradeAddLevel(1, "SOAWarpGateCharges", 1);
                    GameSetSpeedValueMinimum(c_gameSpeedFaster);
                    autoAA5CAC5F_g = lib773A3C4C_gv_alliedPlayergroup;
                    autoAA5CAC5F_var = -1;
                    while (true) {
                        autoAA5CAC5F_var = PlayerGroupNextPlayer(autoAA5CAC5F_g, autoAA5CAC5F_var);
                        if (autoAA5CAC5F_var < 0) { break; }
                        if ((autoAA5CAC5F_var == 1)) {
                            PlayerSetDifficulty(1, 4);
                        }
                        else {
                            PlayerSetDifficulty(autoAA5CAC5F_var, 4);
                            lib773A3C4C_gf_AI(autoAA5CAC5F_var, 1000000000, 1000000000);
                        }
                    }
                    autoC99B800E_g = lib773A3C4C_gv_enemyPlayergroup;
                    autoC99B800E_var = -1;
                    while (true) {
                        autoC99B800E_var = PlayerGroupNextPlayer(autoC99B800E_g, autoC99B800E_var);
                        if (autoC99B800E_var < 0) { break; }
                        if ((autoC99B800E_var != lib773A3C4C_gv_defenseEnemyPlayer)) {
                            TechTreeUpgradeAddLevel(autoC99B800E_var, "SOAWarpGateCharges", 1);
                            PlayerSetDifficulty(autoC99B800E_var, 4);
                            lib773A3C4C_gf_AI(autoC99B800E_var, 1000000000, 1000000000);
                        }
                        else {
                            PlayerSetDifficulty(autoC99B800E_var, 4);
                        }
                    }
                }

            }
        }
    }
    DialogDestroy(lib773A3C4C_gv_difficultiesDialog);
    DialogDestroy(lib773A3C4C_gv_difficultiesTitleDialog);
    TriggerExecute(lib773A3C4C_gv_beginCineTrigger, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_DifficultySelected_Init () {
    lib773A3C4C_gt_DifficultySelected = TriggerCreate("lib773A3C4C_gt_DifficultySelected_Func");
    TriggerAddEventDialogControl(lib773A3C4C_gt_DifficultySelected, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blink AI (Stalker, Nerazim Stalker, Dark Templar)
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_BlinkAIStalkerNerazimStalkerDarkTemplar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Stalker") || (UnitGetType(EventUnit()) == "StalkerShakuras") || (UnitGetType(EventUnit()) == "DarkTemplarShakuras") || (UnitGetType(EventUnit()) == "VorazunShadowGuard") || ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "BlinkTech", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "StalkerResearchBlinkShieldRestore", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "DarkTemplarResearchShadowDash", c_techCountCompleteOnly) == 1)) || ((TechTreeUpgradeIsAllowed(UnitGetOwner(EventUnit()), "BlinkTech") == true) || (TechTreeUpgradeIsAllowed(UnitGetOwner(EventUnit()), "DarkTemplarResearchShadowDash") == true))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "StalkerShakuras")) {
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent) == 0.0) && (UnitCheckAbilCmdState(EventUnit(), AbilityCommand("BlinkShieldRestore", 0), c_cmdStateCooldown) == false)) {
            lv_targetPoint = PointWithOffsetPolar(UnitGetPosition(EventUnit()), -4.0, UnitGetFacing(EventUnit()));
            libNtve_gf_AICast(EventUnit(), OrderTargetingPoint(AbilityCommand("BlinkShieldRestore", 0), lv_targetPoint));
        }

    }
    else {
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent) == 0.0) && (UnitCheckAbilCmdState(EventUnit(), AbilityCommand("Blink", 0), c_cmdStateCooldown) == false)) {
            lv_targetPoint = PointWithOffsetPolar(UnitGetPosition(EventUnit()), -4.0, UnitGetFacing(EventUnit()));
            libNtve_gf_AICast(EventUnit(), OrderTargetingPoint(AbilityCommand("Blink", 0), lv_targetPoint));
        }

    }
    if ((UnitGetType(EventUnit()) == "DarkTemplarShakuras")) {
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent) == 0.0) && (UnitCheckAbilCmdState(EventUnit(), AbilityCommand("DarkTemplarShadowDash", 0), c_cmdStateCooldown) == false)) {
            lv_targetPoint = PointWithOffsetPolar(UnitGetPosition(EventUnit()), -4.0, UnitGetFacing(EventUnit()));
            libNtve_gf_AICast(EventUnit(), OrderTargetingPoint(AbilityCommand("DarkTemplarShadowDash", 0), lv_targetPoint));
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_BlinkAIStalkerNerazimStalkerDarkTemplar_Init () {
    lib773A3C4C_gt_BlinkAIStalkerNerazimStalkerDarkTemplar = TriggerCreate("lib773A3C4C_gt_BlinkAIStalkerNerazimStalkerDarkTemplar_Func");
    TriggerAddEventUnitDamaged(lib773A3C4C_gt_BlinkAIStalkerNerazimStalkerDarkTemplar, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mind Control Handicap Reset
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_MindControlHandicapReset_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnitTargetUnit(), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(EventUnitTargetUnit(), c_unitPropShieldsPercent, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_MindControlHandicapReset_Init () {
    lib773A3C4C_gt_MindControlHandicapReset = TriggerCreate("lib773A3C4C_gt_MindControlHandicapReset_Func");
    TriggerAddEventUnitAbility(lib773A3C4C_gt_MindControlHandicapReset, null, AbilityCommand("DarkArchonMindControl", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stasis (Arbiter)
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_StasisArbiter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "ArbiterMP"))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 50.0))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitTarget()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((UnitAbilityCheck(EventUnit(), "ArbiterMPStasisField", true) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_AICast(EventUnit(), OrderTargetingPoint(AbilityCommand("ArbiterMPStasisField", 0), UnitGetPosition(EventUnitTarget())));
    Wait(2.0, c_timeGame);
    UnitAbilityEnable(EventUnit(), "ArbiterMPStasisField", false);
    Wait(libNtve_gf_DifficultyValueInt(100, 90, 80, 60), c_timeGame);
    UnitAbilityEnable(EventUnit(), "ArbiterMPStasisField", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_StasisArbiter_Init () {
    lib773A3C4C_gt_StasisArbiter = TriggerCreate("lib773A3C4C_gt_StasisArbiter_Func");
    TriggerAddEventUnitAttacked2(lib773A3C4C_gt_StasisArbiter, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infinite Resources
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_gt_InfiniteResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventPlayer() != lib773A3C4C_gv_defenseEnemyPlayer) && (EventPlayer() != 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerProperty() == c_playerPropMinerals)) {
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, EventPlayerPropertyChangeInt());
    }

    if ((EventPlayerProperty() == c_playerPropVespene)) {
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, EventPlayerPropertyChangeInt());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib773A3C4C_gt_InfiniteResources_Init () {
    lib773A3C4C_gt_InfiniteResources = TriggerCreate("lib773A3C4C_gt_InfiniteResources_Func");
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_enemyPlayergroup, 1), c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_enemyPlayergroup, 2), c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_enemyPlayergroup, 3), c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_enemyPlayergroup, 4), c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_enemyPlayergroup, 5), c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_enemyPlayergroup, 6), c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_enemyPlayergroup, 7), c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_enemyPlayergroup, 8), c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_enemyPlayergroup, 9), c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_enemyPlayergroup, 10), c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_enemyPlayergroup, 1), c_playerPropVespene);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_enemyPlayergroup, 2), c_playerPropVespene);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_enemyPlayergroup, 3), c_playerPropVespene);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_enemyPlayergroup, 4), c_playerPropVespene);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_enemyPlayergroup, 5), c_playerPropVespene);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_enemyPlayergroup, 6), c_playerPropVespene);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_enemyPlayergroup, 7), c_playerPropVespene);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_enemyPlayergroup, 8), c_playerPropVespene);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_enemyPlayergroup, 9), c_playerPropVespene);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_enemyPlayergroup, 10), c_playerPropVespene);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_enemyPlayergroup, 11), c_playerPropVespene);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_enemyPlayergroup, 12), c_playerPropVespene);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_enemyPlayergroup, 13), c_playerPropVespene);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_enemyPlayergroup, 14), c_playerPropVespene);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_alliedPlayergroup, 1), c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_alliedPlayergroup, 2), c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_alliedPlayergroup, 3), c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_alliedPlayergroup, 4), c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_alliedPlayergroup, 5), c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_alliedPlayergroup, 6), c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_alliedPlayergroup, 7), c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_alliedPlayergroup, 8), c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_alliedPlayergroup, 9), c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_alliedPlayergroup, 10), c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_alliedPlayergroup, 1), c_playerPropVespene);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_alliedPlayergroup, 2), c_playerPropVespene);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_alliedPlayergroup, 3), c_playerPropVespene);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_alliedPlayergroup, 4), c_playerPropVespene);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_alliedPlayergroup, 5), c_playerPropVespene);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_alliedPlayergroup, 6), c_playerPropVespene);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_alliedPlayergroup, 7), c_playerPropVespene);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_alliedPlayergroup, 8), c_playerPropVespene);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_alliedPlayergroup, 9), c_playerPropVespene);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_alliedPlayergroup, 10), c_playerPropVespene);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_alliedPlayergroup, 11), c_playerPropVespene);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_alliedPlayergroup, 12), c_playerPropVespene);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_alliedPlayergroup, 13), c_playerPropVespene);
    TriggerAddEventPlayerPropChange(lib773A3C4C_gt_InfiniteResources, PlayerGroupPlayer(lib773A3C4C_gv_alliedPlayergroup, 14), c_playerPropVespene);
}

void lib773A3C4C_InitTriggers () {
    lib773A3C4C_gt_EnsureUIOverride_Init();
    lib773A3C4C_gt_ReturnToTheLauncher_Init();
    lib773A3C4C_gt_MindControlShieldFix_Init();
    lib773A3C4C_gt_ShowAchievementPanel_Init();
    lib773A3C4C_gt_CU_GPVitalChangesP1_Init();
    lib773A3C4C_gt_CU_GPBirthFinished_Init();
    lib773A3C4C_gt_CU_GPDeathRemove2D_Init();
    lib773A3C4C_gt_NameUnit_Init();
    lib773A3C4C_gt_NameUnitCreated_Init();
    lib773A3C4C_gt_NameUnitChangeOwner_Init();
    lib773A3C4C_gt_CU_HealthWatchLifeCheck_Init();
    lib773A3C4C_gt_CU_HealthWatchFlash_Init();
    lib773A3C4C_gt_CU_HeroPanelUpdate_Init();
    lib773A3C4C_gt_CU_HeroUnitDamaged_Init();
    lib773A3C4C_gt_CU_HeroUnitVitalChange_Init();
    lib773A3C4C_gt_CU_HeroMouseHoverText_Init();
    lib773A3C4C_gt_ChangeLabelValues_Init();
    lib773A3C4C_gt_ResetPoints_Init();
    lib773A3C4C_gt_ApplyPointValues_Init();
    lib773A3C4C_gt_PointsDialogTutorial_Init();
    lib773A3C4C_gt_PointsDialogTutorialContinue_Init();
    lib773A3C4C_gt_VorazunSendTransmissionTick_Init();
    lib773A3C4C_gt_KillsVictoryScreen_Init();
    lib773A3C4C_gt_ToNextMission_Init();
    lib773A3C4C_gt_ReplayMission_Init();
    lib773A3C4C_gt_BackToLauncher_Init();
    lib773A3C4C_gt_DifficultySelected_Init();
    lib773A3C4C_gt_BlinkAIStalkerNerazimStalkerDarkTemplar_Init();
    lib773A3C4C_gt_MindControlHandicapReset_Init();
    lib773A3C4C_gt_StasisArbiter_Init();
    lib773A3C4C_gt_InfiniteResources_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib773A3C4C_InitLib_completed = false;

void lib773A3C4C_InitLib () {
    if (lib773A3C4C_InitLib_completed) {
        return;
    }

    lib773A3C4C_InitLib_completed = true;

    lib773A3C4C_InitLibraries();
    lib773A3C4C_InitVariables();
    lib773A3C4C_InitTriggers();
}

