include "TriggerLibs/NativeLib"

include "Lib9770F675_h"

//--------------------------------------------------------------------------------------------------
// Library: SCMR
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib9770F675_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool lib9770F675_InitVariables_completed = false;

void lib9770F675_InitVariables () {
    if (lib9770F675_InitVariables_completed) {
        return;
    }

    lib9770F675_InitVariables_completed = true;

    lib9770F675_gv_aITerranComSat = UnitGroupEmpty();
}

// Functions
void lib9770F675_gf_InitializeBWRace (int lp_player) {
    // Automatic Variable Declarations
    string auto8E93C85F_val;

    // Implementation
    auto8E93C85F_val = PlayerRace(lp_player);
    if (auto8E93C85F_val == "TerrBW") {
        SoundtrackDefault(PlayerGroupSingle(1), c_soundtrackCategoryMusic, "MusicTerranEpisode13", c_soundtrackCueAny, c_soundtrackIndexAny);
    }
    else if (auto8E93C85F_val == "ZergBW") {
        SoundtrackDefault(PlayerGroupSingle(1), c_soundtrackCategoryMusic, "MusicZergEpisode13", c_soundtrackCueAny, c_soundtrackIndexAny);
    }
    else if (auto8E93C85F_val == "ProtBW") {
        SoundtrackDefault(PlayerGroupSingle(1), c_soundtrackCategoryMusic, "MusicProtossEpisode13", c_soundtrackCueAny, c_soundtrackIndexAny);
    }
    else {
    }
    TriggerEnable(lib9770F675_gt_DestroyedStructures, false);
    TriggerEnable(lib9770F675_gt_Nukes, false);
    TriggerEnable(lib9770F675_gt_DestroyedVehicles, false);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWAudioBuildings", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWAudioAbilities", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWAudioWeapons", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOAdjutant", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVORaynor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOSCV", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOMarine", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOFirebat", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOMedic", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOGhost", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOVulture", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOSiegeTank", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOGoliath", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOWraith", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVODropship", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOScienceVessel", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOBattlecruiser", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOValkyrie", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOCerebrate", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOLarva", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVODrone", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOOverlord", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOZergling", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOHydralisk", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOLurker", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOInfestedTerran", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVODefiler", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOUltralisk", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOScourge", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOQueen", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOMutalisk", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOGuardian", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVODevourer", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOProbe", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOAdvisor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOZealot", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVODragoon", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOHighTemplar", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVODarkTemplar", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOArchon", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVODarkArchon", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOShuttle", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOReaver", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOObserver", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOScout", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOCarrier", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOArbiter", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWVOCorsair", 1);
    TechTreeUnitAllow(lp_player, "Marauder", false);
    TechTreeUnitAllow(lp_player, "Reaper", false);
    TechTreeUnitAllow(lp_player, "Hellion", false);
    TechTreeUnitAllow(lp_player, "HellionTank", false);
    TechTreeUnitAllow(lp_player, "Diamondback", false);
    TechTreeUnitAllow(lp_player, "Predator", false);
    TechTreeUnitAllow(lp_player, "Banshee", false);
    TechTreeUnitAllow(lp_player, "VikingAssault", false);
    TechTreeUnitAllow(lp_player, "VikingFighter", false);
    TechTreeUnitAllow(lp_player, "Raven", false);
    TechTreeUnitAllow(lp_player, "WidowMine", false);
    TechTreeUnitAllow(lp_player, "WarHound", false);
    TechTreeUnitAllow(lp_player, "ThorAP", false);
    TechTreeUnitAllow(lp_player, "LiberatorSkinPreview", false);
    TechTreeUnitAllow(lp_player, "MercCompound", false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 12), false);
    TechTreeUnitAllow(lp_player, "PerditionTurret", false);
    TechTreeUnitAllow(lp_player, "SensorTower", false);
    TechTreeUnitAllow(lp_player, "Phoenix", false);
    TechTreeUnitAllow(lp_player, "VoidRay", false);
    TechTreeUnitAllow(lp_player, "VoidRayShakuras", false);
    TechTreeUnitAllow(lp_player, "VoidRayTaldarim", false);
    TechTreeUnitAllow(lp_player, "VoidRayAiur", false);
    TechTreeUnitAllow(lp_player, "StalkerShakuras", false);
    TechTreeUnitAllow(lp_player, "Stalker", false);
    TechTreeUnitAllow(lp_player, "StalkerShakurasHallucination", false);
    TechTreeUnitAllow(lp_player, "StalkerShakurasACGluescreenDummy", false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 21), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("GatewayTrain", 5), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("RoboticsFacilityTrain", 4), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("StargateTrain", 1), false);
    TechTreeUnitAllow(lp_player, "Immortal", false);
    TechTreeUnitAllow(lp_player, "ImmortalShakuras", false);
    TechTreeUnitAllow(lp_player, "ImmortalTaldarim", false);
    TechTreeUnitAllow(lp_player, "Oracle", false);
    TechTreeUnitAllow(lp_player, "Tempest", false);
    TechTreeUnitAllow(lp_player, "CarrierAiur", false);
    TechTreeUnitAllow(lp_player, "CarrierTaldarim", false);
    TechTreeUnitAllow(lp_player, "Mothership", false);
    TechTreeUnitAllow(lp_player, "MothershipCore", false);
    TechTreeUnitAllow(lp_player, "Disruptor", false);
    TechTreeUnitAllow(lp_player, "ShieldBatteryNerazim", false);
    TechTreeUnitAllow(lp_player, "Adept", false);
    TechTreeUnitAllow(lp_player, "WarpPrism", false);
    TechTreeUnitAllow(lp_player, "WarpPrismPhasing", false);
    TechTreeUnitAllow(lp_player, "Sentry", false);
    TechTreeUnitAllow(lp_player, "SentryAiur", false);
    TechTreeUnitAllow(lp_player, "Monitor", false);
    TechTreeUnitAllow(lp_player, "Colossus", false);
    TechTreeUnitAllow(lp_player, "ColossusTaldarim", false);
    TechTreeUnitAllow(lp_player, "DarkShrine", false);
    TechTreeUnitAllow(lp_player, "KhaydarinMonolith", false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("LarvaTrain", 9), false);
    TechTreeUnitAllow(lp_player, "Queen", false);
    TechTreeUnitAllow(lp_player, "Roach", false);
    TechTreeUnitAllow(lp_player, "Ravager", false);
    TechTreeUnitAllow(lp_player, "Baneling", false);
    TechTreeUnitAllow(lp_player, "BanelingNest", false);
    TechTreeUnitAllow(lp_player, "InfestedAbomination", false);
    TechTreeUnitAllow(lp_player, "Brutalisk", false);
    TechTreeUnitAllow(lp_player, "Infestor", false);
    TechTreeUnitAllow(lp_player, "BroodLord", false);
    TechTreeUnitAllow(lp_player, "Corruptor", false);
    TechTreeUnitAllow(lp_player, "SpineCrawler", false);
    TechTreeUnitAllow(lp_player, "Overseer", false);
    TechTreeUnitAllow(lp_player, "Viper", false);
    TechTreeUnitAllow(lp_player, "SwarmHostMP", false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("MorphUltraliskToTorrasque", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("MorphToRavager", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("MorphToOverseer", 0), false);
    PlayerSetConsoleSkin(lp_player, "ConsoleZerg_Classic");
    PlayerSetConsoleSkin(lp_player, "ConsoleProtoss_Classic");
    PlayerSetConsoleSkin(lp_player, "ConsoleTerran_Classic");
    lib9770F675_gf_FactionModelSonsOfKorhal(lp_player);
    lib9770F675_gf_FactionModelZerg(lp_player);
    lib9770F675_gf_FactionModelProtoss(lp_player);
}

void lib9770F675_gf_FactionModelSonsOfKorhal (int lp_player) {
    // Automatic Variable Declarations
    unitgroup auto0C6ED169_g;
    int auto0C6ED169_u;
    unit auto0C6ED169_var;
    unitgroup auto301B631F_g;
    int auto301B631F_u;
    unit auto301B631F_var;
    unitgroup auto9CDB5CDF_g;
    int auto9CDB5CDF_u;
    unit auto9CDB5CDF_var;
    unitgroup autoD8B56731_g;
    int autoD8B56731_u;
    unit autoD8B56731_var;
    unitgroup autoF4AD6614_g;
    int autoF4AD6614_u;
    unit autoF4AD6614_var;
    unitgroup autoE9741CD3_g;
    int autoE9741CD3_u;
    unit autoE9741CD3_var;

    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMORaynor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOMengsk", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOKerrigan", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOAdjutant", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOSCV", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOMarine", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOFirebat", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOMedic", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOGhost", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOVulture", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOSiegeTank", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOGoliath", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOWraith", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOScienceVessel", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOBattlecruiser", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOCommandCenter", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOOtherBuildingsT", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMORefinery", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOSupplyDepot", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOBarracks", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOEngineeringBay", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOBunker", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOAcademy", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOMissileTurret", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOFactory", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOStarport", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOArmory", 1);
    auto0C6ED169_g = UnitGroup("CommandCenterFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0C6ED169_u = UnitGroupCount(auto0C6ED169_g, c_unitCountAll);
    for (;; auto0C6ED169_u -= 1) {
        auto0C6ED169_var = UnitGroupUnitFromEnd(auto0C6ED169_g, auto0C6ED169_u);
        if (auto0C6ED169_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto0C6ED169_var, "ModelSwap SC1CommandCenter 255 PredecessorDestroyImmediate,PreventAllDynamicTextureTransfers");
        libNtve_gf_SendActorMessageToUnit(auto0C6ED169_var, "AnimGroupApply Fly Fly,Start Fly,End Instant");
    }
    auto301B631F_g = UnitGroup("BarracksFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto301B631F_u = UnitGroupCount(auto301B631F_g, c_unitCountAll);
    for (;; auto301B631F_u -= 1) {
        auto301B631F_var = UnitGroupUnitFromEnd(auto301B631F_g, auto301B631F_u);
        if (auto301B631F_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto301B631F_var, "ModelSwap SC1Barracks 255 PredecessorDestroyImmediate,PreventAllDynamicTextureTransfers");
        libNtve_gf_SendActorMessageToUnit(auto301B631F_var, "AnimGroupApply Fly Fly,Start Fly,End Instant");
    }
    auto9CDB5CDF_g = UnitGroup("EngineeringBayFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9CDB5CDF_u = UnitGroupCount(auto9CDB5CDF_g, c_unitCountAll);
    for (;; auto9CDB5CDF_u -= 1) {
        auto9CDB5CDF_var = UnitGroupUnitFromEnd(auto9CDB5CDF_g, auto9CDB5CDF_u);
        if (auto9CDB5CDF_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto9CDB5CDF_var, "ModelSwap SC1EngineeringBay 255 PredecessorDestroyImmediate,PreventAllDynamicTextureTransfers");
        libNtve_gf_SendActorMessageToUnit(auto9CDB5CDF_var, "AnimGroupApply Fly Fly,Start Fly,End Instant");
    }
    autoD8B56731_g = UnitGroup("FactoryFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD8B56731_u = UnitGroupCount(autoD8B56731_g, c_unitCountAll);
    for (;; autoD8B56731_u -= 1) {
        autoD8B56731_var = UnitGroupUnitFromEnd(autoD8B56731_g, autoD8B56731_u);
        if (autoD8B56731_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(autoD8B56731_var, "ModelSwap SC1Factory 255 PredecessorDestroyImmediate,PreventAllDynamicTextureTransfers");
        libNtve_gf_SendActorMessageToUnit(autoD8B56731_var, "AnimGroupApply Fly Fly,Start Fly,End Instant");
    }
    autoF4AD6614_g = UnitGroup("StarportFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF4AD6614_u = UnitGroupCount(autoF4AD6614_g, c_unitCountAll);
    for (;; autoF4AD6614_u -= 1) {
        autoF4AD6614_var = UnitGroupUnitFromEnd(autoF4AD6614_g, autoF4AD6614_u);
        if (autoF4AD6614_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(autoF4AD6614_var, "ModelSwap SC1Starport 255 PredecessorDestroyImmediate,PreventAllDynamicTextureTransfers");
        libNtve_gf_SendActorMessageToUnit(autoF4AD6614_var, "AnimGroupApply Fly Fly,Start Fly,End Instant");
    }
    autoE9741CD3_g = UnitGroup("ScienceFacilityFlying", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE9741CD3_u = UnitGroupCount(autoE9741CD3_g, c_unitCountAll);
    for (;; autoE9741CD3_u -= 1) {
        autoE9741CD3_var = UnitGroupUnitFromEnd(autoE9741CD3_g, autoE9741CD3_u);
        if (autoE9741CD3_var == null) { break; }
    }
}

void lib9770F675_gf_FactionModelZerg (int lp_player) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOOvermind", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOCerebrate", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOInfestedKerrigan", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOInfestedTerran", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOHatchery", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOOtherBuildingsZ", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOExtractor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOSunkenColony", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOSporeColony", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOUltraliskCavern", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOSpire", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMONydusCanal", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOEvolutionChamber", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMODrone", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOOverlord", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOZergling", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOHydralisk", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOLurker", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMODefiler", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOInfestedTerran", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOUltralisk", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOQueen", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOMutalisk", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOGuardian", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMODevourer", 1);
}

void lib9770F675_gf_FactionModelProtoss (int lp_player) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOArtanis", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOZeratul", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOProbe", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOZealot", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMODragoon", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOHighTemplar", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMODarkTemplar", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOArchon", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMODarkArchon", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOReaver", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOObserver", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOScout", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOCorsair", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOCarrier", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOArbiter", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMONexus", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOOtherBuildingsP", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOAssimilator", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOPylon", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOGateway", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOForge", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOCyberneticsCore", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOShieldBattery", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOPhotonCannon", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOCitadelOfAdun", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOStargate", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMORoboticsFacility", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOSupportBay", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BWMOFleetBeacon", 1);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Initialize BW
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_InitializeBW_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoEEDDDA9D_g;
    int autoEEDDDA9D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoEEDDDA9D_g = PlayerGroupAll();
    autoEEDDDA9D_var = -1;
    while (true) {
        autoEEDDDA9D_var = PlayerGroupNextPlayer(autoEEDDDA9D_g, autoEEDDDA9D_var);
        if (autoEEDDDA9D_var < 0) { break; }
        if (((PlayerRace(autoEEDDDA9D_var) == "TerrBW") || (PlayerRace(autoEEDDDA9D_var) == "ProtBW") || (PlayerRace(autoEEDDDA9D_var) == "ZergBW"))) {
            lib9770F675_gf_InitializeBWRace(autoEEDDDA9D_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_InitializeBW_Init () {
    lib9770F675_gt_InitializeBW = TriggerCreate("lib9770F675_gt_InitializeBW_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Anim Bandaid Fix
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_DropAnimBandaidFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 1) || (libNtve_gf_PlayerIsEnemy(EventPlayer(), 1, libNtve_ge_PlayerRelation_Ally) == true) || (libNtve_gf_PlayerIsEnemy(EventPlayer(), 1, libNtve_ge_PlayerRelation_Neutral) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(EventUnitCargo()), 0.15, UnitGetFacing(EventUnitCargo()))), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_DropAnimBandaidFix_Init () {
    lib9770F675_gt_DropAnimBandaidFix = TriggerCreate("lib9770F675_gt_DropAnimBandaidFix_Func");
    TriggerAddEventUnitCargo(lib9770F675_gt_DropAnimBandaidFix, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nukes
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_Nukes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeGame);
    libNtve_gf_CreateActorAtPoint("NukeCracks", EventUnitTargetPoint());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_Nukes_Init () {
    lib9770F675_gt_Nukes = TriggerCreate("lib9770F675_gt_Nukes_Func");
    TriggerAddEventUnitAbility(lib9770F675_gt_Nukes, null, AbilityCommand("TacNukeStrike", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroyed Structures
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_DestroyedStructures_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeBiological) == false)) {
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropNormal) >= 550.0)) {
            libNtve_gf_CreateActorAtPoint("BuildingCracks", UnitGetPosition(EventUnit()));
            if ((RandomInt(1, 10) >= 8)) {
                libNtve_gf_CreateActorAtPoint("BuildingDebris", UnitGetPosition(EventUnit()));
            }

        }
        else {
            libNtve_gf_CreateActorAtPoint("BuildingCracksSmall", UnitGetPosition(EventUnit()));
        }
    }
    else {
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropNormal) >= 550.0)) {
            libNtve_gf_CreateActorAtPoint("ZergStructureRemains", UnitGetPosition(EventUnit()));
            ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight -3.800000");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor {187,187,255 0.800000}");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_DestroyedStructures_Init () {
    lib9770F675_gt_DestroyedStructures = TriggerCreate("lib9770F675_gt_DestroyedStructures_Func");
    TriggerAddEventUnitDied(lib9770F675_gt_DestroyedStructures, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroyed Vehicles
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_DestroyedVehicles_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_actor1;
    actor lv_actor2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeBiological) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeUser1) == false))) {
            return false;
        }

        if (!((UnitTestPlane(EventUnit(), c_planeGround) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RandomInt(1, 10) >= 8)) {
        if ((PlayerRace(EventPlayer()) == "Terr")) {
            libNtve_gf_CreateActorAtPoint("Fire", UnitGetPosition(EventUnit()));
            ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight -2.500000");
            Wait(RandomFixed(15.0, 70.0), c_timeGame);
            ActorSend(libNtve_gf_ActorLastCreated(), "Destroy");
        }
        else {
            libNtve_gf_CreateActorAtPoint("GenericProtossFire_Medium", UnitGetPosition(EventUnit()));
            lv_actor1 = libNtve_gf_ActorLastCreated();
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.000000,1.000000,0.500000");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight -0.400000");
            libNtve_gf_CreateActorAtPoint("FireProtoss", UnitGetPosition(EventUnit()));
            lv_actor2 = libNtve_gf_ActorLastCreated();
            ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight -2.000000");
            ActorSend(libNtve_gf_ActorLastCreated(), "AddRoll -10.000000");
            Wait(RandomFixed(15.0, 70.0), c_timeGame);
            ActorSend(lv_actor1, "Destroy");
            ActorSend(lv_actor2, "Destroy");
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_DestroyedVehicles_Init () {
    lib9770F675_gt_DestroyedVehicles = TriggerCreate("lib9770F675_gt_DestroyedVehicles_Func");
    TriggerAddEventUnitDied(lib9770F675_gt_DestroyedVehicles, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI General Micro
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_GeneralMicro_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto9F4E8D23_g;
    int auto9F4E8D23_var;
    int auto1565AD1D_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto9F4E8D23_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto9F4E8D23_var = -1;
    while (true) {
        auto9F4E8D23_var = PlayerGroupNextPlayer(auto9F4E8D23_g, auto9F4E8D23_var);
        if (auto9F4E8D23_var < 0) { break; }
        auto1565AD1D_val = PlayerDifficulty(auto9F4E8D23_var);
        if (auto1565AD1D_val == 1) {
            AISetDifficulty(auto9F4E8D23_var, c_diffRepairDamage, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffOptimizeGas, true);
        }
        else if (auto1565AD1D_val == 2) {
            AISetDifficulty(auto9F4E8D23_var, c_diffRepairDamage, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffOptimizeGas, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffEarlyGameRepair, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffPressForward, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffNormalTargetPrio, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffFleeWorkers, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffDefendWithPeons, true);
        }
        else if (auto1565AD1D_val == 3) {
            AISetDifficulty(auto9F4E8D23_var, c_diffRepairDamage, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffOptimizeGas, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffEarlyGameRepair, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffPressForward, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffNormalTargetPrio, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffFleeWorkers, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffDefendWithPeons, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffFleeDanger, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffEarlyDefenseScout, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffFleeDamage, true);
        }
        else if (auto1565AD1D_val == 4) {
            AISetDifficulty(auto9F4E8D23_var, c_diffRepairDamage, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffOptimizeGas, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffEarlyGameRepair, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffPressForward, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffNormalTargetPrio, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffFleeWorkers, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffDefendWithPeons, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffFleeDanger, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffEarlyDefenseScout, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffFleeDamage, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffAllowKiting, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffAdvancedRetreatLogic, true);
        }
        else if (auto1565AD1D_val == 5) {
            AISetDifficulty(auto9F4E8D23_var, c_diffRepairDamage, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffOptimizeGas, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffEarlyGameRepair, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffPressForward, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffFleeDamage, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffNormalTargetPrio, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffFleeDanger, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffFleeWorkers, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffEarlyDefenseScout, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffDefendWithPeons, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffAllowKiting, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffAdvancedRetreatLogic, true);
        }
        else {
            AISetDifficulty(auto9F4E8D23_var, c_diffRepairDamage, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffOptimizeGas, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffEarlyGameRepair, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffPressForward, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffFleeDamage, true);
            AISetDifficulty(auto9F4E8D23_var, c_diffNormalTargetPrio, true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_GeneralMicro_Init () {
    lib9770F675_gt_GeneralMicro = TriggerCreate("lib9770F675_gt_GeneralMicro_Func");
    TriggerEnable(lib9770F675_gt_GeneralMicro, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Comsat Add to Group
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranComsatAddtoGroup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lib9770F675_gv_aITerranComSat, EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranComsatAddtoGroup_Init () {
    lib9770F675_gt_AITerranComsatAddtoGroup = TriggerCreate("lib9770F675_gt_AITerranComsatAddtoGroup_Func");
    TriggerEnable(lib9770F675_gt_AITerranComsatAddtoGroup, false);
    TriggerAddEventUnitCreated(lib9770F675_gt_AITerranComsatAddtoGroup, null, "ScannerSweep", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Comsat
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranComsat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(EventPlayer(), 1, libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((PlayerRace(EventPlayer()) == "Terr"))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(EventUnitDamageSourceUnit(), EventPlayer()) == false))) {
            return false;
        }

        if (!((true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(0.2, 1.0), c_timeGame);
    libNtve_gf_AICast(UnitGroupRandomUnit(UnitGroupFilterPlayer(lib9770F675_gv_aITerranComSat, EventPlayer(), 1), c_unitCountAlive), OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), UnitGetPosition(EventUnitDamageSourceUnit())));
    Wait(1.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranComsat_Init () {
    lib9770F675_gt_AITerranComsat = TriggerCreate("lib9770F675_gt_AITerranComsat_Func");
    TriggerEnable(lib9770F675_gt_AITerranComsat, false);
    TriggerAddEventUnitDamaged(lib9770F675_gt_AITerranComsat, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Comsat - Force Scan Lurkers/DarkTemplar
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranComsatForceScanLurkersDarkTemplar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "LurkerBurrowed") || (UnitGetType(EventUnitDamageSourceUnit()) == "DarkTemplar")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitGroupRandomUnit(lib9770F675_gv_aITerranComSat, c_unitCountAlive), OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), UnitGetPosition(EventUnitDamageSourceUnit())), c_orderQueueReplace);
    Wait(5.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranComsatForceScanLurkersDarkTemplar_Init () {
    lib9770F675_gt_AITerranComsatForceScanLurkersDarkTemplar = TriggerCreate("lib9770F675_gt_AITerranComsatForceScanLurkersDarkTemplar_Func");
    TriggerEnable(lib9770F675_gt_AITerranComsatForceScanLurkersDarkTemplar, false);
    TriggerAddEventUnitDamaged(lib9770F675_gt_AITerranComsatForceScanLurkersDarkTemplar, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Medic - Optical Flare Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranMedicOpticalFlareResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medic;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Medic"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("OpticalFlare", 0), EventUnitDamageSourceUnit()), c_orderQueueReplace);
    Wait(15.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranMedicOpticalFlareResponse_Init () {
    lib9770F675_gt_AITerranMedicOpticalFlareResponse = TriggerCreate("lib9770F675_gt_AITerranMedicOpticalFlareResponse_Func");
    TriggerEnable(lib9770F675_gt_AITerranMedicOpticalFlareResponse, false);
    TriggerAddEventUnitDamaged(lib9770F675_gt_AITerranMedicOpticalFlareResponse, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Medic - Restore Defense
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranMedicRestoreDefense_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medic;
    unitgroup lv_medicGroup;

    // Automatic Variable Declarations
    playergroup auto66C22FD9_g;
    int auto66C22FD9_var;
    unitgroup auto3C76524F_g;
    int auto3C76524F_u;
    unit auto3C76524F_var;

    // Variable Initialization
    lv_medicGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTargetUnit()) != 1))) {
            return false;
        }

        if (!(((EventUnitAbility() == AbilityCommand("Irradiate", 0)) || (EventUnitAbility() == AbilityCommand("Lockdown", 0)) || (EventUnitAbility() == AbilityCommand("OpticalFlare", 0)) || (EventUnitAbility() == AbilityCommand("Parasite", 0)) || (EventUnitAbility() == AbilityCommand("Ensnare", 0)) || (EventUnitAbility() == AbilityCommand("Plague", 0)) || (EventUnitAbility() == AbilityCommand("Maelstrom", 0))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto66C22FD9_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto66C22FD9_var = -1;
    while (true) {
        auto66C22FD9_var = PlayerGroupNextPlayer(auto66C22FD9_g, auto66C22FD9_var);
        if (auto66C22FD9_var < 0) { break; }
        auto3C76524F_g = UnitGroup("Medic", auto66C22FD9_var, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3C76524F_u = UnitGroupCount(auto3C76524F_g, c_unitCountAll);
        for (;; auto3C76524F_u -= 1) {
            auto3C76524F_var = UnitGroupUnitFromEnd(auto3C76524F_g, auto3C76524F_u);
            if (auto3C76524F_var == null) { break; }
            UnitGroupAdd(lv_medicGroup, auto3C76524F_var);
        }
    }
    Wait(RandomFixed(1.5, 3.0), c_timeGame);
    UnitIssueOrder(UnitGroupClosestToPoint(lv_medicGroup, UnitGetPosition(EventUnitTargetUnit())), OrderTargetingUnit(AbilityCommand("Restoration", 0), EventUnitTargetUnit()), c_orderQueueReplace);
    Wait(5.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranMedicRestoreDefense_Init () {
    lib9770F675_gt_AITerranMedicRestoreDefense = TriggerCreate("lib9770F675_gt_AITerranMedicRestoreDefense_Func");
    TriggerEnable(lib9770F675_gt_AITerranMedicRestoreDefense, false);
    TriggerAddEventUnitAbility(lib9770F675_gt_AITerranMedicRestoreDefense, null, null, c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Marine/Firebat - Stim Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranMarineFirebatStimResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto12156BF7_g;
    int auto12156BF7_u;
    unit auto12156BF7_var;
    unitgroup autoC04C743A_g;
    int autoC04C743A_u;
    unit autoC04C743A_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Marine") || (UnitGetType(EventUnit()) == "Firebat")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    auto12156BF7_g = UnitGroup("Marine", UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(EventUnit()), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto12156BF7_u = UnitGroupCount(auto12156BF7_g, c_unitCountAll);
    for (;; auto12156BF7_u -= 1) {
        auto12156BF7_var = UnitGroupUnitFromEnd(auto12156BF7_g, auto12156BF7_u);
        if (auto12156BF7_var == null) { break; }
        UnitIssueOrder(auto12156BF7_var, Order(AbilityCommand("Stimpack", 0)), c_orderQueueAddToFront);
    }
    autoC04C743A_g = UnitGroup("Firebat", UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(EventUnit()), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC04C743A_u = UnitGroupCount(autoC04C743A_g, c_unitCountAll);
    for (;; autoC04C743A_u -= 1) {
        autoC04C743A_var = UnitGroupUnitFromEnd(autoC04C743A_g, autoC04C743A_u);
        if (autoC04C743A_var == null) { break; }
        UnitIssueOrder(autoC04C743A_var, Order(AbilityCommand("Stimpack", 0)), c_orderQueueAddToFront);
    }
    Wait(20.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranMarineFirebatStimResponse_Init () {
    lib9770F675_gt_AITerranMarineFirebatStimResponse = TriggerCreate("lib9770F675_gt_AITerranMarineFirebatStimResponse_Func");
    TriggerEnable(lib9770F675_gt_AITerranMarineFirebatStimResponse, false);
    TriggerAddEventUnitStartedAttack2(lib9770F675_gt_AITerranMarineFirebatStimResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Science Vessel - Defensive Matrix Defense
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranScienceVesselDefensiveMatrixDefense_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Battlecruiser") || (UnitGetType(EventUnit()) == "SiegeTank") || (UnitGetType(EventUnit()) == "SiegeTankSieged") || (UnitGetType(EventUnit()) == "Goliath")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("ScienceVessel", "", "", 1, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        UnitIssueOrder(UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("ScienceVessel", "", "", 1, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit())), OrderTargetingUnit(AbilityCommand("DefensiveMatrix2", 0), EventUnit()), c_orderQueueReplace);
        Wait(30.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    else {
        Wait(5.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranScienceVesselDefensiveMatrixDefense_Init () {
    lib9770F675_gt_AITerranScienceVesselDefensiveMatrixDefense = TriggerCreate("lib9770F675_gt_AITerranScienceVesselDefensiveMatrixDefense_Func");
    TriggerEnable(lib9770F675_gt_AITerranScienceVesselDefensiveMatrixDefense, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AITerranScienceVesselDefensiveMatrixDefense, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Science Vessel - Irradiate/EMP Harass
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranScienceVesselIrradiateEMPHarass_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_scienceVessel;
    unitgroup lv_enemyPlayers;
    unitgroup lv_playerUnits;

    // Automatic Variable Declarations
    playergroup auto33FA3DB6_g;
    int auto33FA3DB6_var;

    // Variable Initialization
    lv_enemyPlayers = UnitGroupEmpty();
    lv_playerUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto33FA3DB6_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto33FA3DB6_var = -1;
    while (true) {
        auto33FA3DB6_var = PlayerGroupNextPlayer(auto33FA3DB6_g, auto33FA3DB6_var);
        if (auto33FA3DB6_var < 0) { break; }
        lv_scienceVessel = UnitGroupRandomUnit(UnitGroup("ScienceVessel", auto33FA3DB6_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    Wait(1.0, c_timeGame);
    if ((RandomInt(1, 2) == 1)) {
        if ((PlayerRace(1) == "Terr")) {
            UnitIssueOrder(lv_scienceVessel, OrderTargetingUnit(AbilityCommand("Irradiate", 0), UnitGroupClosestToPoint(UnitGroup("SCV", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_scienceVessel))), c_orderQueueReplace);
        }
        else {
            if ((PlayerRace(1) == "Zerg")) {
                UnitIssueOrder(lv_scienceVessel, OrderTargetingUnit(AbilityCommand("Irradiate", 0), UnitGroupClosestToPoint(UnitGroup("Overlord", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_scienceVessel))), c_orderQueueReplace);
            }
            else {
                if ((PlayerRace(1) == "Prot")) {
                    UnitIssueOrder(lv_scienceVessel, OrderTargetingUnit(AbilityCommand("Irradiate", 0), UnitGroupClosestToPoint(UnitGroup("Zealot", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_scienceVessel))), c_orderQueueReplace);
                }

            }
        }
    }
    else {
        UnitIssueOrder(lv_scienceVessel, OrderTargetingPoint(AbilityCommand("EMP", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHasEnergy - 32)), (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_scienceVessel)))), c_orderQueueReplace);
    }
    UnitIssueOrder(lv_scienceVessel, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib9770F675_gv_aIBase[UnitGetOwner(lv_scienceVessel)])), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranScienceVesselIrradiateEMPHarass_Init () {
    lib9770F675_gt_AITerranScienceVesselIrradiateEMPHarass = TriggerCreate("lib9770F675_gt_AITerranScienceVesselIrradiateEMPHarass_Func");
    TriggerEnable(lib9770F675_gt_AITerranScienceVesselIrradiateEMPHarass, false);
    TriggerAddEventTimePeriodic(lib9770F675_gt_AITerranScienceVesselIrradiateEMPHarass, libNtve_gf_DifficultyValueInt(200, 180, 160, 140), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Science Vessel - Irradiate Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranScienceVesselIrradiateResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "ScienceVessel"))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitTarget()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitTarget()), c_unitAttributeBiological) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("Irradiate", 0), EventUnitTarget()), c_orderQueueAddToEnd);
    Wait(30.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranScienceVesselIrradiateResponse_Init () {
    lib9770F675_gt_AITerranScienceVesselIrradiateResponse = TriggerCreate("lib9770F675_gt_AITerranScienceVesselIrradiateResponse_Func");
    TriggerEnable(lib9770F675_gt_AITerranScienceVesselIrradiateResponse, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AITerranScienceVesselIrradiateResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Science Vessel - EMP Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranScienceVesselEMPResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "ScienceVessel"))) {
            return false;
        }

        if (!((UnitTypeGetProperty(UnitGetType(EventUnitTarget()), c_unitPropEnergyPercent) >= 5.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("EMP", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranScienceVesselEMPResponse_Init () {
    lib9770F675_gt_AITerranScienceVesselEMPResponse = TriggerCreate("lib9770F675_gt_AITerranScienceVesselEMPResponse_Func");
    TriggerEnable(lib9770F675_gt_AITerranScienceVesselEMPResponse, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AITerranScienceVesselEMPResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Launch Nuke
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranLaunchNuke_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ghost;

    // Automatic Variable Declarations
    playergroup auto8DE3CB7A_g;
    int auto8DE3CB7A_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto8DE3CB7A_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto8DE3CB7A_var = -1;
    while (true) {
        auto8DE3CB7A_var = PlayerGroupNextPlayer(auto8DE3CB7A_g, auto8DE3CB7A_var);
        if (auto8DE3CB7A_var < 0) { break; }
        lv_ghost = UnitGroupRandomUnit(UnitGroup("Ghost", auto8DE3CB7A_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    Wait(1.0, c_timeGame);
    UnitIssueOrder(lv_ghost, Order(AbilityCommand("GhostCloak", 0)), c_orderQueueReplace);
    UnitIssueOrder(lv_ghost, OrderTargetingPoint(AbilityCommand("TacNukeStrike", 0), UnitGetPosition(libNtve_gf_ClosestUnitToPoint(UnitGetPosition(lv_ghost), UnitGroup(null, 1, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0)))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranLaunchNuke_Init () {
    lib9770F675_gt_AITerranLaunchNuke = TriggerCreate("lib9770F675_gt_AITerranLaunchNuke_Func");
    TriggerEnable(lib9770F675_gt_AITerranLaunchNuke, false);
    TriggerAddEventTimePeriodic(lib9770F675_gt_AITerranLaunchNuke, libNtve_gf_DifficultyValueInt(380, 360, 340, 320), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Rebuild Nukes
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranRebuildNukes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto48521756_g;
    int auto48521756_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(25.0, c_timeGame);
    auto48521756_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto48521756_var = -1;
    while (true) {
        auto48521756_var = PlayerGroupNextPlayer(auto48521756_g, auto48521756_var);
        if (auto48521756_var < 0) { break; }
        UnitGroupIssueOrder(UnitGroup("BarracksReactor", auto48521756_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), Order(AbilityCommand("ArmSiloWithNuke", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranRebuildNukes_Init () {
    lib9770F675_gt_AITerranRebuildNukes = TriggerCreate("lib9770F675_gt_AITerranRebuildNukes_Func");
    TriggerEnable(lib9770F675_gt_AITerranRebuildNukes, false);
    TriggerAddEventUnitAbility(lib9770F675_gt_AITerranRebuildNukes, null, AbilityCommand("TacNukeStrike", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Ghost - Cloak Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranGhostCloakResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Ghost"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("GhostCloak", 0)), c_orderQueueReplace);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranGhostCloakResponse_Init () {
    lib9770F675_gt_AITerranGhostCloakResponse = TriggerCreate("lib9770F675_gt_AITerranGhostCloakResponse_Func");
    TriggerEnable(lib9770F675_gt_AITerranGhostCloakResponse, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AITerranGhostCloakResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Ghost - Lockdown Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranGhostLockdownResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Ghost"))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitTarget()), c_unitAttributeMechanical) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitTarget()), c_unitAttributeStructure) != true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("Lockdown", 0), EventUnitTarget()), c_orderQueueReplace);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranGhostLockdownResponse_Init () {
    lib9770F675_gt_AITerranGhostLockdownResponse = TriggerCreate("lib9770F675_gt_AITerranGhostLockdownResponse_Func");
    TriggerEnable(lib9770F675_gt_AITerranGhostLockdownResponse, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AITerranGhostLockdownResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Wraith - Cloak Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranWraithCloakResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Wraith"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitTarget()) != "SporeCrawler"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitTarget()) != "MissileTurret"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitTarget()) != "PhotonCannon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("WraithCloak", 0)), c_orderQueueReplace);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranWraithCloakResponse_Init () {
    lib9770F675_gt_AITerranWraithCloakResponse = TriggerCreate("lib9770F675_gt_AITerranWraithCloakResponse_Func");
    TriggerEnable(lib9770F675_gt_AITerranWraithCloakResponse, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AITerranWraithCloakResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Battlecruiser - Yamato Cannon Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranBattlecruiserYamatoCannonResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Battlecruiser"))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitTarget()) == "DevourerMP") || (UnitGetType(EventUnitTarget()) == "Battlecruiser") || (UnitGetType(EventUnitTarget()) == "Carrier") || (UnitGetType(EventUnitTarget()) == "SporeCrawler") || (UnitGetType(EventUnitTarget()) == "PhotonCannon") || (UnitGetType(EventUnitTarget()) == "MissileTurret") || (UnitGetType(EventUnitTarget()) == "ImmortalAiur") || (UnitGetType(EventUnitTarget()) == "VoidRay") || (UnitGetType(EventUnitTarget()) == "Corruptor")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("Yamato", 0), EventUnitTarget()), c_orderQueueReplace);
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranBattlecruiserYamatoCannonResponse_Init () {
    lib9770F675_gt_AITerranBattlecruiserYamatoCannonResponse = TriggerCreate("lib9770F675_gt_AITerranBattlecruiserYamatoCannonResponse_Func");
    TriggerEnable(lib9770F675_gt_AITerranBattlecruiserYamatoCannonResponse, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AITerranBattlecruiserYamatoCannonResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Terran Battlecruiser - Yamato Cannon Harass
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AITerranBattlecruiserYamatoCannonHarass_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_battlecruiser;
    unitgroup lv_enemyPlayers;
    unitgroup lv_playerUnits;

    // Automatic Variable Declarations
    playergroup autoDB1B17B3_g;
    int autoDB1B17B3_var;

    // Variable Initialization
    lv_enemyPlayers = UnitGroupEmpty();
    lv_playerUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDB1B17B3_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    autoDB1B17B3_var = -1;
    while (true) {
        autoDB1B17B3_var = PlayerGroupNextPlayer(autoDB1B17B3_g, autoDB1B17B3_var);
        if (autoDB1B17B3_var < 0) { break; }
        lv_battlecruiser = UnitGroupRandomUnit(UnitGroup("Battlecruiser", autoDB1B17B3_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    Wait(1.0, c_timeGame);
    if ((RandomInt(1, 2) == 1)) {
        if ((PlayerRace(1) == "Terr")) {
            UnitIssueOrder(lv_battlecruiser, OrderTargetingUnit(AbilityCommand("Yamato", 0), UnitGroupClosestToPoint(UnitGroup("MissileTurret", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_battlecruiser))), c_orderQueueReplace);
        }
        else {
            if ((PlayerRace(1) == "Zerg")) {
                UnitIssueOrder(lv_battlecruiser, OrderTargetingUnit(AbilityCommand("Yamato", 0), UnitGroupClosestToPoint(UnitGroup("SunkenColony", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_battlecruiser))), c_orderQueueReplace);
            }
            else {
                if ((PlayerRace(1) == "Prot")) {
                    UnitIssueOrder(lv_battlecruiser, OrderTargetingUnit(AbilityCommand("Yamato", 0), UnitGroupClosestToPoint(UnitGroup("PhotonCannon", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_battlecruiser))), c_orderQueueReplace);
                }

            }
        }
    }
    else {
        if ((PlayerRace(1) == "Terr")) {
            UnitIssueOrder(lv_battlecruiser, OrderTargetingUnit(AbilityCommand("Yamato", 0), UnitGroupClosestToPoint(UnitGroup("Bunker", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_battlecruiser))), c_orderQueueReplace);
        }
        else {
            if ((PlayerRace(1) == "Zerg")) {
                UnitIssueOrder(lv_battlecruiser, OrderTargetingUnit(AbilityCommand("Yamato", 0), UnitGroupClosestToPoint(UnitGroup("Overlord", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_battlecruiser))), c_orderQueueReplace);
            }
            else {
                if ((PlayerRace(1) == "Prot")) {
                    UnitIssueOrder(lv_battlecruiser, OrderTargetingUnit(AbilityCommand("Yamato", 0), UnitGroupClosestToPoint(UnitGroup("Pylon", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_battlecruiser))), c_orderQueueReplace);
                }

            }
        }
    }
    UnitIssueOrder(lv_battlecruiser, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib9770F675_gv_aIBase[UnitGetOwner(lv_battlecruiser)])), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AITerranBattlecruiserYamatoCannonHarass_Init () {
    lib9770F675_gt_AITerranBattlecruiserYamatoCannonHarass = TriggerCreate("lib9770F675_gt_AITerranBattlecruiserYamatoCannonHarass_Func");
    TriggerEnable(lib9770F675_gt_AITerranBattlecruiserYamatoCannonHarass, false);
    TriggerAddEventTimePeriodic(lib9770F675_gt_AITerranBattlecruiserYamatoCannonHarass, libNtve_gf_DifficultyValueInt(320, 300, 280, 260), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Zerg Queen - Broodlings/Ensare Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIZergQueenBroodlingsEnsareResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "QueenClassic"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if (((UnitGetType(EventUnitTarget()) == "Dragoon") || (UnitGetType(EventUnitTarget()) == "Goliath") || (UnitGetType(EventUnitTarget()) == "Stalker"))) {
        libNtve_gf_AICast(EventUnit(), OrderTargetingUnit(AbilityCommand("SpawnBroodling", 0), EventUnitTarget()));
    }
    else {
        libNtve_gf_AICast(EventUnit(), OrderTargetingPoint(AbilityCommand("Ensnare", 0), UnitGetPosition(EventUnitTarget())));
        Wait(15.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIZergQueenBroodlingsEnsareResponse_Init () {
    lib9770F675_gt_AIZergQueenBroodlingsEnsareResponse = TriggerCreate("lib9770F675_gt_AIZergQueenBroodlingsEnsareResponse_Func");
    TriggerEnable(lib9770F675_gt_AIZergQueenBroodlingsEnsareResponse, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AIZergQueenBroodlingsEnsareResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Zerg Queen - Parasite/Broodlings Harass
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIZergQueenParasiteBroodlingsHarass_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_queen;
    unitgroup lv_playerUnits;

    // Automatic Variable Declarations
    playergroup auto236E942B_g;
    int auto236E942B_var;
    unitgroup auto6E77C80F_g;
    int auto6E77C80F_u;
    unit auto6E77C80F_var;

    // Variable Initialization
    lv_playerUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto236E942B_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto236E942B_var = -1;
    while (true) {
        auto236E942B_var = PlayerGroupNextPlayer(auto236E942B_g, auto236E942B_var);
        if (auto236E942B_var < 0) { break; }
        lv_queen = UnitGroupRandomUnit(UnitGroup("QueenClassic", auto236E942B_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    Wait(1.0, c_timeGame);
    if ((RandomInt(1, 2) == 1)) {
        auto6E77C80F_g = UnitGroup(null, 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto6E77C80F_u = UnitGroupCount(auto6E77C80F_g, c_unitCountAll);
        for (;; auto6E77C80F_u -= 1) {
            auto6E77C80F_var = UnitGroupUnitFromEnd(auto6E77C80F_g, auto6E77C80F_u);
            if (auto6E77C80F_var == null) { break; }
            UnitGroupAdd(lv_playerUnits, auto6E77C80F_var);
        }
        Wait(1.0, c_timeGame);
        UnitIssueOrder(lv_queen, OrderTargetingUnit(AbilityCommand("Parasite", 0), UnitGroupClosestToPoint(UnitGroupFilterPlayer(lv_playerUnits, 1, 0), UnitGetPosition(lv_queen))), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(lv_queen, OrderTargetingUnit(AbilityCommand("SpawnBroodling", 0), UnitGroupClosestToPoint(UnitGroupFilterPlayer(lv_playerUnits, 1, 0), UnitGetPosition(lv_queen))), c_orderQueueReplace);
    }
    UnitIssueOrder(lv_queen, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib9770F675_gv_aIBase[UnitGetOwner(lv_queen)])), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIZergQueenParasiteBroodlingsHarass_Init () {
    lib9770F675_gt_AIZergQueenParasiteBroodlingsHarass = TriggerCreate("lib9770F675_gt_AIZergQueenParasiteBroodlingsHarass_Func");
    TriggerEnable(lib9770F675_gt_AIZergQueenParasiteBroodlingsHarass, false);
    TriggerAddEventTimePeriodic(lib9770F675_gt_AIZergQueenParasiteBroodlingsHarass, libNtve_gf_DifficultyValueInt(300, 280, 260, 240), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Zerg Defiler - Dark Swarm Defense
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIZergDefilerDarkSwarmDefense_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_defiler;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGroupCount(UnitGroup("DefilerMP", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        lv_defiler = UnitGroupClosestToPoint(UnitGroup("DefilerMP", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()));
        libNtve_gf_AICast(EventUnit(), OrderTargetingPoint(AbilityCommand("DarkSwarm", 0), UnitGetPosition(EventUnitTarget())));
        Wait(40.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    else {
        Wait(1.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIZergDefilerDarkSwarmDefense_Init () {
    lib9770F675_gt_AIZergDefilerDarkSwarmDefense = TriggerCreate("lib9770F675_gt_AIZergDefilerDarkSwarmDefense_Func");
    TriggerEnable(lib9770F675_gt_AIZergDefilerDarkSwarmDefense, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AIZergDefilerDarkSwarmDefense, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Zerg Defiler - Plague Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIZergDefilerPlagueResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "DefilerMP"))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) > 150.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_AICast(EventUnit(), OrderTargetingPoint(AbilityCommand("Plague", 0), UnitGetPosition(EventUnitTarget())));
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIZergDefilerPlagueResponse_Init () {
    lib9770F675_gt_AIZergDefilerPlagueResponse = TriggerCreate("lib9770F675_gt_AIZergDefilerPlagueResponse_Func");
    TriggerEnable(lib9770F675_gt_AIZergDefilerPlagueResponse, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AIZergDefilerPlagueResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Zerg Defiler - Plague Harass Structures
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIZergDefilerPlagueHarassStructures_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_defiler;
    unitgroup lv_playerStructures;

    // Automatic Variable Declarations
    playergroup autoDF7CE07D_g;
    int autoDF7CE07D_var;
    unitgroup autoB5AB63D5_g;
    int autoB5AB63D5_u;
    unit autoB5AB63D5_var;

    // Variable Initialization
    lv_playerStructures = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoDF7CE07D_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    autoDF7CE07D_var = -1;
    while (true) {
        autoDF7CE07D_var = PlayerGroupNextPlayer(autoDF7CE07D_g, autoDF7CE07D_var);
        if (autoDF7CE07D_var < 0) { break; }
        lv_defiler = UnitGroupRandomUnit(UnitGroup("DefilerMP", autoDF7CE07D_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    Wait(1.0, c_timeGame);
    if ((RandomInt(1, 2) == 1)) {
        autoB5AB63D5_g = UnitGroup(null, 1, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoB5AB63D5_u = UnitGroupCount(autoB5AB63D5_g, c_unitCountAll);
        for (;; autoB5AB63D5_u -= 1) {
            autoB5AB63D5_var = UnitGroupUnitFromEnd(autoB5AB63D5_g, autoB5AB63D5_u);
            if (autoB5AB63D5_var == null) { break; }
            UnitGroupAdd(lv_playerStructures, autoB5AB63D5_var);
        }
        Wait(1.0, c_timeGame);
        UnitIssueOrder(lv_defiler, OrderTargetingPoint(AbilityCommand("Plague", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupFilterPlayer(lv_playerStructures, 1, 0), UnitGetPosition(lv_defiler)))), c_orderQueueReplace);
    }

    UnitIssueOrder(lv_defiler, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib9770F675_gv_aIBase[UnitGetOwner(lv_defiler)])), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIZergDefilerPlagueHarassStructures_Init () {
    lib9770F675_gt_AIZergDefilerPlagueHarassStructures = TriggerCreate("lib9770F675_gt_AIZergDefilerPlagueHarassStructures_Func");
    TriggerEnable(lib9770F675_gt_AIZergDefilerPlagueHarassStructures, false);
    TriggerAddEventTimePeriodic(lib9770F675_gt_AIZergDefilerPlagueHarassStructures, libNtve_gf_DifficultyValueInt(420, 360, 320, 280), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Zerg Infestor - Fungal Growth
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIZergInfestorFungalGrowth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Infestor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("FungalGrowth", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    Wait(15.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIZergInfestorFungalGrowth_Init () {
    lib9770F675_gt_AIZergInfestorFungalGrowth = TriggerCreate("lib9770F675_gt_AIZergInfestorFungalGrowth_Func");
    TriggerEnable(lib9770F675_gt_AIZergInfestorFungalGrowth, false);
    TriggerAddEventUnitAttacked(lib9770F675_gt_AIZergInfestorFungalGrowth, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Zerg Infestor - Infested Terrans
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_DarkSwarm3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_infestor;

    // Automatic Variable Declarations
    unitgroup autoDA9E779E_g;
    int autoDA9E779E_u;
    unit autoDA9E779E_var;

    // Variable Initialization
    lv_infestor = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTarget()) == 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("Infestor", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(lv_infestor, UnitGroup("Infestor", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    autoDA9E779E_g = lv_infestor;
    autoDA9E779E_u = UnitGroupCount(autoDA9E779E_g, c_unitCountAll);
    for (;; autoDA9E779E_u -= 1) {
        autoDA9E779E_var = UnitGroupUnitFromEnd(autoDA9E779E_g, autoDA9E779E_u);
        if (autoDA9E779E_var == null) { break; }
        if (((UnitGetOwner(autoDA9E779E_var) == 1) || (UnitGetPropertyFixed(autoDA9E779E_var, c_unitPropEnergy, c_unitPropCurrent) < 100.0))) {
            UnitGroupRemove(lv_infestor, autoDA9E779E_var);
        }

    }
    if ((UnitGroupCount(lv_infestor, c_unitCountAlive) >= 1)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libNtve_gf_AICast(UnitGroupRandomUnit(lv_infestor, c_unitCountAlive), OrderTargetingPoint(AbilityCommand("InfestedTerrans", 0), UnitGetPosition(EventUnit())));
        Wait(2.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_DarkSwarm3_Init () {
    lib9770F675_gt_DarkSwarm3 = TriggerCreate("lib9770F675_gt_DarkSwarm3_Func");
    TriggerEnable(lib9770F675_gt_DarkSwarm3, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_DarkSwarm3, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Zerg Corruptor - Corruption
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIZergCorruptorCorruption_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Corruptor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("Corruption", 0), EventUnitTarget()), c_orderQueueReplace);
    Wait(15.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIZergCorruptorCorruption_Init () {
    lib9770F675_gt_AIZergCorruptorCorruption = TriggerCreate("lib9770F675_gt_AIZergCorruptorCorruption_Func");
    TriggerEnable(lib9770F675_gt_AIZergCorruptorCorruption, false);
    TriggerAddEventUnitAttacked(lib9770F675_gt_AIZergCorruptorCorruption, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Dark Archon - Mind Control/Maelstrom Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIProtossDarkArchonMindControlMaelstromResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "DarkArchon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGetPropertyFixed(EventUnitTarget(), c_unitPropLife, c_unitPropNormal) >= 130.0)) {
        UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("MindControl2", 0), EventUnitTarget()), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("Maelstrom", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueAddToFront);
    }
    Wait(4.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIProtossDarkArchonMindControlMaelstromResponse_Init () {
    lib9770F675_gt_AIProtossDarkArchonMindControlMaelstromResponse = TriggerCreate("lib9770F675_gt_AIProtossDarkArchonMindControlMaelstromResponse_Func");
    TriggerEnable(lib9770F675_gt_AIProtossDarkArchonMindControlMaelstromResponse, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AIProtossDarkArchonMindControlMaelstromResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Dark Archon - Mind Control Harass
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIProtossDarkArchonMindControlHarass_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_darkArchon;
    unitgroup lv_playerUnits;

    // Automatic Variable Declarations
    playergroup autoBC7F0587_g;
    int autoBC7F0587_var;

    // Variable Initialization
    lv_playerUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoBC7F0587_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    autoBC7F0587_var = -1;
    while (true) {
        autoBC7F0587_var = PlayerGroupNextPlayer(autoBC7F0587_g, autoBC7F0587_var);
        if (autoBC7F0587_var < 0) { break; }
        lv_darkArchon = UnitGroupRandomUnit(UnitGroup("DarkArchon", autoBC7F0587_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    Wait(2.0, c_timeGame);
    if ((RandomInt(1, 2) == 1)) {
        UnitIssueOrder(lv_darkArchon, OrderTargetingUnit(AbilityCommand("MindControl2", 0), UnitGroupClosestToPoint(UnitGroup(null, 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterArmored) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32))), 0), UnitGetPosition(lv_darkArchon))), c_orderQueueReplace);
    }
    else {
        if ((RandomInt(1, 2) == 1)) {
            if ((PlayerRace(1) == "Terr")) {
                UnitIssueOrder(lv_darkArchon, OrderTargetingUnit(AbilityCommand("MindControl2", 0), UnitGroupClosestToPoint(UnitGroup("SiegeTankSieged", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_darkArchon))), c_orderQueueReplace);
            }
            else {
                if ((PlayerRace(1) == "Zerg")) {
                    UnitIssueOrder(lv_darkArchon, OrderTargetingUnit(AbilityCommand("MindControl2", 0), UnitGroupClosestToPoint(UnitGroup("Ultralisk", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_darkArchon))), c_orderQueueReplace);
                }
                else {
                    if ((PlayerRace(1) == "Prot")) {
                        UnitIssueOrder(lv_darkArchon, OrderTargetingUnit(AbilityCommand("MindControl2", 0), UnitGroupClosestToPoint(UnitGroup("Archon", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_darkArchon))), c_orderQueueReplace);
                    }

                }
            }
        }
        else {
            if ((PlayerRace(1) == "Terr")) {
                UnitIssueOrder(lv_darkArchon, OrderTargetingUnit(AbilityCommand("MindControl2", 0), UnitGroupClosestToPoint(UnitGroup("Battlecruiser", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_darkArchon))), c_orderQueueReplace);
            }
            else {
                if ((PlayerRace(1) == "Zerg")) {
                    UnitIssueOrder(lv_darkArchon, OrderTargetingUnit(AbilityCommand("MindControl2", 0), UnitGroupClosestToPoint(UnitGroup("GuardianMP", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_darkArchon))), c_orderQueueReplace);
                }
                else {
                    if ((PlayerRace(1) == "Prot")) {
                        UnitIssueOrder(lv_darkArchon, OrderTargetingUnit(AbilityCommand("MindControl2", 0), UnitGroupClosestToPoint(UnitGroup("Carrier", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_darkArchon))), c_orderQueueReplace);
                    }

                }
            }
        }
    }
    UnitIssueOrder(lv_darkArchon, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib9770F675_gv_aIBase[UnitGetOwner(lv_darkArchon)])), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIProtossDarkArchonMindControlHarass_Init () {
    lib9770F675_gt_AIProtossDarkArchonMindControlHarass = TriggerCreate("lib9770F675_gt_AIProtossDarkArchonMindControlHarass_Func");
    TriggerEnable(lib9770F675_gt_AIProtossDarkArchonMindControlHarass, false);
    TriggerAddEventTimePeriodic(lib9770F675_gt_AIProtossDarkArchonMindControlHarass, libNtve_gf_DifficultyValueInt(220, 200, 180, 160), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Corsair - Disruption Web Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIProtossCorsairDisruptionWebResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_corsair;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "CorsairMP"))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitTarget()) == "SporeCrawler") || (UnitGetType(EventUnitTarget()) == "PhotonCannon") || (UnitGetType(EventUnitTarget()) == "MissileTurret") || (UnitGetType(EventUnitTarget()) == "Marine") || (UnitGetType(EventUnitTarget()) == "Ghost") || (UnitGetType(EventUnitTarget()) == "Goliath") || (UnitGetType(EventUnitTarget()) == "Hydralisk") || (UnitGetType(EventUnitTarget()) == "Dragoon") || (UnitGetType(EventUnitTarget()) == "Archon") || (UnitGetType(EventUnitTarget()) == "Stalker")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("DisruptionWeb", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIProtossCorsairDisruptionWebResponse_Init () {
    lib9770F675_gt_AIProtossCorsairDisruptionWebResponse = TriggerCreate("lib9770F675_gt_AIProtossCorsairDisruptionWebResponse_Func");
    TriggerEnable(lib9770F675_gt_AIProtossCorsairDisruptionWebResponse, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AIProtossCorsairDisruptionWebResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss High Templar - Psi Storm Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIProtossHighTemplarPsiStormResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "HighTemplar"))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitTarget()), c_unitAttributeStructure) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("PsiStorm", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIProtossHighTemplarPsiStormResponse_Init () {
    lib9770F675_gt_AIProtossHighTemplarPsiStormResponse = TriggerCreate("lib9770F675_gt_AIProtossHighTemplarPsiStormResponse_Func");
    TriggerEnable(lib9770F675_gt_AIProtossHighTemplarPsiStormResponse, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AIProtossHighTemplarPsiStormResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss High Templar - Psi Storm Harass
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIProtossHighTemplarPsiStormHarass_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_highTemplar;
    unitgroup lv_playerUnits;

    // Automatic Variable Declarations
    playergroup autoC8B1DAFE_g;
    int autoC8B1DAFE_var;
    unitgroup autoDCB42C4B_g;
    int autoDCB42C4B_u;
    unit autoDCB42C4B_var;

    // Variable Initialization
    lv_playerUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoC8B1DAFE_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    autoC8B1DAFE_var = -1;
    while (true) {
        autoC8B1DAFE_var = PlayerGroupNextPlayer(autoC8B1DAFE_g, autoC8B1DAFE_var);
        if (autoC8B1DAFE_var < 0) { break; }
        lv_highTemplar = UnitGroupRandomUnit(UnitGroup("HighTemplar", autoC8B1DAFE_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    Wait(1.0, c_timeGame);
    autoDCB42C4B_g = UnitGroup(null, 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    autoDCB42C4B_u = UnitGroupCount(autoDCB42C4B_g, c_unitCountAll);
    for (;; autoDCB42C4B_u -= 1) {
        autoDCB42C4B_var = UnitGroupUnitFromEnd(autoDCB42C4B_g, autoDCB42C4B_u);
        if (autoDCB42C4B_var == null) { break; }
        UnitGroupAdd(lv_playerUnits, autoDCB42C4B_var);
    }
    Wait(1.0, c_timeGame);
    UnitIssueOrder(lv_highTemplar, OrderTargetingPoint(AbilityCommand("PsiStorm", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupFilterPlayer(lv_playerUnits, 1, 0), UnitGetPosition(lv_highTemplar)))), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(lv_highTemplar, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib9770F675_gv_aIBase[UnitGetOwner(lv_highTemplar)])), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIProtossHighTemplarPsiStormHarass_Init () {
    lib9770F675_gt_AIProtossHighTemplarPsiStormHarass = TriggerCreate("lib9770F675_gt_AIProtossHighTemplarPsiStormHarass_Func");
    TriggerEnable(lib9770F675_gt_AIProtossHighTemplarPsiStormHarass, false);
    TriggerAddEventTimePeriodic(lib9770F675_gt_AIProtossHighTemplarPsiStormHarass, libNtve_gf_DifficultyValueInt(300, 280, 260, 240), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Reaver - Scarab Build
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIProtossReaverScarabBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto3078513A_g;
    int auto3078513A_var;
    unitgroup auto9F6A78E4_g;
    int auto9F6A78E4_u;
    unit auto9F6A78E4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto3078513A_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto3078513A_var = -1;
    while (true) {
        auto3078513A_var = PlayerGroupNextPlayer(auto3078513A_g, auto3078513A_var);
        if (auto3078513A_var < 0) { break; }
        auto9F6A78E4_g = UnitGroup("Reaver", auto3078513A_var, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9F6A78E4_u = UnitGroupCount(auto9F6A78E4_g, c_unitCountAll);
        for (;; auto9F6A78E4_u -= 1) {
            auto9F6A78E4_var = UnitGroupUnitFromEnd(auto9F6A78E4_g, auto9F6A78E4_u);
            if (auto9F6A78E4_var == null) { break; }
            libNtve_gf_AICast(auto9F6A78E4_var, Order(AbilityCommand("ReaverHangar", 0)));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIProtossReaverScarabBuild_Init () {
    lib9770F675_gt_AIProtossReaverScarabBuild = TriggerCreate("lib9770F675_gt_AIProtossReaverScarabBuild_Func");
    TriggerEnable(lib9770F675_gt_AIProtossReaverScarabBuild, false);
    TriggerAddEventTimePeriodic(lib9770F675_gt_AIProtossReaverScarabBuild, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Carrier- Interceptor Build
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIProtossCarrierInterceptorBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto83FF15F6_g;
    int auto83FF15F6_var;
    unitgroup auto51800DB1_g;
    int auto51800DB1_u;
    unit auto51800DB1_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto83FF15F6_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto83FF15F6_var = -1;
    while (true) {
        auto83FF15F6_var = PlayerGroupNextPlayer(auto83FF15F6_g, auto83FF15F6_var);
        if (auto83FF15F6_var < 0) { break; }
        auto51800DB1_g = UnitGroup("Carrier", auto83FF15F6_var, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto51800DB1_u = UnitGroupCount(auto51800DB1_g, c_unitCountAll);
        for (;; auto51800DB1_u -= 1) {
            auto51800DB1_var = UnitGroupUnitFromEnd(auto51800DB1_g, auto51800DB1_u);
            if (auto51800DB1_var == null) { break; }
            libNtve_gf_AICast(auto51800DB1_var, Order(AbilityCommand("CarrierHangar", 0)));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIProtossCarrierInterceptorBuild_Init () {
    lib9770F675_gt_AIProtossCarrierInterceptorBuild = TriggerCreate("lib9770F675_gt_AIProtossCarrierInterceptorBuild_Func");
    TriggerEnable(lib9770F675_gt_AIProtossCarrierInterceptorBuild, false);
    TriggerAddEventTimePeriodic(lib9770F675_gt_AIProtossCarrierInterceptorBuild, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Arbiter - Stasis Timed Response
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIProtossArbiterStasisTimedResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "ArbiterMP"))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 150.0))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitTarget()), c_unitAttributeStructure) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("ArbiterMPStasisField", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    Wait(libNtve_gf_DifficultyValueInt(400, 360, 320, 280), c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIProtossArbiterStasisTimedResponse_Init () {
    lib9770F675_gt_AIProtossArbiterStasisTimedResponse = TriggerCreate("lib9770F675_gt_AIProtossArbiterStasisTimedResponse_Func");
    TriggerEnable(lib9770F675_gt_AIProtossArbiterStasisTimedResponse, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AIProtossArbiterStasisTimedResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Arbiter - Stasis Harass
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIProtossArbiterStasisHarass_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_arbiter;
    unitgroup lv_playerUnits;

    // Automatic Variable Declarations
    playergroup auto019CCEDE_g;
    int auto019CCEDE_var;
    unitgroup auto829D8C67_g;
    int auto829D8C67_u;
    unit auto829D8C67_var;

    // Variable Initialization
    lv_playerUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto019CCEDE_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto019CCEDE_var = -1;
    while (true) {
        auto019CCEDE_var = PlayerGroupNextPlayer(auto019CCEDE_g, auto019CCEDE_var);
        if (auto019CCEDE_var < 0) { break; }
        lv_arbiter = UnitGroupRandomUnit(UnitGroup("ArbiterMP", auto019CCEDE_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    Wait(1.0, c_timeGame);
    auto829D8C67_g = UnitGroup(null, 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto829D8C67_u = UnitGroupCount(auto829D8C67_g, c_unitCountAll);
    for (;; auto829D8C67_u -= 1) {
        auto829D8C67_var = UnitGroupUnitFromEnd(auto829D8C67_g, auto829D8C67_u);
        if (auto829D8C67_var == null) { break; }
        UnitGroupAdd(lv_playerUnits, auto829D8C67_var);
    }
    Wait(1.0, c_timeGame);
    UnitIssueOrder(lv_arbiter, OrderTargetingPoint(AbilityCommand("ArbiterMPStasisField", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroupFilterPlayer(lv_playerUnits, 1, 0), UnitGetPosition(lv_arbiter)))), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(lv_arbiter, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib9770F675_gv_aIBase[UnitGetOwner(lv_arbiter)])), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIProtossArbiterStasisHarass_Init () {
    lib9770F675_gt_AIProtossArbiterStasisHarass = TriggerCreate("lib9770F675_gt_AIProtossArbiterStasisHarass_Func");
    TriggerEnable(lib9770F675_gt_AIProtossArbiterStasisHarass, false);
    TriggerAddEventTimePeriodic(lib9770F675_gt_AIProtossArbiterStasisHarass, libNtve_gf_DifficultyValueInt(400, 380, 360, 340), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Arbiter - Recall Defense
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIProtossArbiterRecallDefense_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_arbiter;

    // Automatic Variable Declarations
    playergroup autoC2D74F8E_g;
    int autoC2D74F8E_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Carrier") || (UnitGetType(EventUnit()) == "Reaver") || (UnitGetType(EventUnit()) == "Archon")))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, c_unitPropCurrent) <= 5.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoC2D74F8E_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    autoC2D74F8E_var = -1;
    while (true) {
        autoC2D74F8E_var = PlayerGroupNextPlayer(autoC2D74F8E_g, autoC2D74F8E_var);
        if (autoC2D74F8E_var < 0) { break; }
        lv_arbiter = UnitGroupRandomUnit(UnitGroup("ArbiterMP", autoC2D74F8E_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        Wait(0.1, c_timeGame);
        UnitIssueOrder(lv_arbiter, OrderTargetingPoint(AbilityCommand("ArbiterMPRecall", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    }
    Wait(1.0, c_timeGame);
    UnitIssueOrder(lv_arbiter, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib9770F675_gv_aIBase[UnitGetOwner(lv_arbiter)])), c_orderQueueAddToEnd);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIProtossArbiterRecallDefense_Init () {
    lib9770F675_gt_AIProtossArbiterRecallDefense = TriggerCreate("lib9770F675_gt_AIProtossArbiterRecallDefense_Func");
    TriggerEnable(lib9770F675_gt_AIProtossArbiterRecallDefense, false);
    TriggerAddEventUnitAttacked2(lib9770F675_gt_AIProtossArbiterRecallDefense, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Stalker - Blink
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_AIProtossStalkerBlink_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Stalker"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 60.0)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("Blink", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnitDamageSourceUnit()), 3.0))), c_orderQueueReplace);
    }

    Wait(7.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_AIProtossStalkerBlink_Init () {
    lib9770F675_gt_AIProtossStalkerBlink = TriggerCreate("lib9770F675_gt_AIProtossStalkerBlink_Func");
    TriggerEnable(lib9770F675_gt_AIProtossStalkerBlink, false);
    TriggerAddEventUnitDamaged(lib9770F675_gt_AIProtossStalkerBlink, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Protoss Sentry - Force Field
//--------------------------------------------------------------------------------------------------
bool lib9770F675_gt_PsiStorm8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Monitor") || (UnitGetType(EventUnit()) == "Sentry")))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitDamageSourceUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    if ((UnitGetType(EventUnit()) == "Sentry")) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("ForceField", 0), UnitGetPosition(EventUnitDamageSourceUnit())), c_orderQueueReplace);
    }

    if ((UnitGetType(EventUnit()) == "Monitor")) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("ForceFieldMonitor", 0), UnitGetPosition(EventUnitDamageSourceUnit())), c_orderQueueReplace);
    }

    Wait(8.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9770F675_gt_PsiStorm8_Init () {
    lib9770F675_gt_PsiStorm8 = TriggerCreate("lib9770F675_gt_PsiStorm8_Func");
    TriggerEnable(lib9770F675_gt_PsiStorm8, false);
    TriggerAddEventUnitDamaged(lib9770F675_gt_PsiStorm8, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

void lib9770F675_InitTriggers () {
    lib9770F675_gt_InitializeBW_Init();
    lib9770F675_gt_DropAnimBandaidFix_Init();
    lib9770F675_gt_Nukes_Init();
    lib9770F675_gt_DestroyedStructures_Init();
    lib9770F675_gt_DestroyedVehicles_Init();
    lib9770F675_gt_GeneralMicro_Init();
    lib9770F675_gt_AITerranComsatAddtoGroup_Init();
    lib9770F675_gt_AITerranComsat_Init();
    lib9770F675_gt_AITerranComsatForceScanLurkersDarkTemplar_Init();
    lib9770F675_gt_AITerranMedicOpticalFlareResponse_Init();
    lib9770F675_gt_AITerranMedicRestoreDefense_Init();
    lib9770F675_gt_AITerranMarineFirebatStimResponse_Init();
    lib9770F675_gt_AITerranScienceVesselDefensiveMatrixDefense_Init();
    lib9770F675_gt_AITerranScienceVesselIrradiateEMPHarass_Init();
    lib9770F675_gt_AITerranScienceVesselIrradiateResponse_Init();
    lib9770F675_gt_AITerranScienceVesselEMPResponse_Init();
    lib9770F675_gt_AITerranLaunchNuke_Init();
    lib9770F675_gt_AITerranRebuildNukes_Init();
    lib9770F675_gt_AITerranGhostCloakResponse_Init();
    lib9770F675_gt_AITerranGhostLockdownResponse_Init();
    lib9770F675_gt_AITerranWraithCloakResponse_Init();
    lib9770F675_gt_AITerranBattlecruiserYamatoCannonResponse_Init();
    lib9770F675_gt_AITerranBattlecruiserYamatoCannonHarass_Init();
    lib9770F675_gt_AIZergQueenBroodlingsEnsareResponse_Init();
    lib9770F675_gt_AIZergQueenParasiteBroodlingsHarass_Init();
    lib9770F675_gt_AIZergDefilerDarkSwarmDefense_Init();
    lib9770F675_gt_AIZergDefilerPlagueResponse_Init();
    lib9770F675_gt_AIZergDefilerPlagueHarassStructures_Init();
    lib9770F675_gt_AIZergInfestorFungalGrowth_Init();
    lib9770F675_gt_DarkSwarm3_Init();
    lib9770F675_gt_AIZergCorruptorCorruption_Init();
    lib9770F675_gt_AIProtossDarkArchonMindControlMaelstromResponse_Init();
    lib9770F675_gt_AIProtossDarkArchonMindControlHarass_Init();
    lib9770F675_gt_AIProtossCorsairDisruptionWebResponse_Init();
    lib9770F675_gt_AIProtossHighTemplarPsiStormResponse_Init();
    lib9770F675_gt_AIProtossHighTemplarPsiStormHarass_Init();
    lib9770F675_gt_AIProtossReaverScarabBuild_Init();
    lib9770F675_gt_AIProtossCarrierInterceptorBuild_Init();
    lib9770F675_gt_AIProtossArbiterStasisTimedResponse_Init();
    lib9770F675_gt_AIProtossArbiterStasisHarass_Init();
    lib9770F675_gt_AIProtossArbiterRecallDefense_Init();
    lib9770F675_gt_AIProtossStalkerBlink_Init();
    lib9770F675_gt_PsiStorm8_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib9770F675_InitLib_completed = false;

void lib9770F675_InitLib () {
    if (lib9770F675_InitLib_completed) {
        return;
    }

    lib9770F675_InitLib_completed = true;

    lib9770F675_InitLibraries();
    lib9770F675_InitVariables();
    lib9770F675_InitTriggers();
}

