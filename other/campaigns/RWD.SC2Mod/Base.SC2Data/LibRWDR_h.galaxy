include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Library: RWDR Triggers
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libRWDR_ge_Faction_Nerazim = 0;
const int libRWDR_ge_Faction_Laziot = 1;
const int libRWDR_ge_Faction_Aiur = 2;
const int libRWDR_ge_Faction_Purifier = 3;
const int libRWDR_ge_Faction_Taldarim = 4;
const int libRWDR_ge_Faction_Marauder = 5;
const int libRWDR_ge_Faction_Umojan = 6;
const int libRWDR_ge_Faction_Stetman = 7;
const int libRWDR_ge_ArmyType_ZealotNerazim = 0;
const int libRWDR_ge_ArmyType_ZealotLaziot = 1;
const int libRWDR_ge_ArmyType_ZealotAiur = 2;
const int libRWDR_ge_ArmyType_ZealotPurifier = 3;
const int libRWDR_ge_ArmyType_StalkerNerazim = 4;
const int libRWDR_ge_ArmyType_StalkerPurifier = 5;
const int libRWDR_ge_ArmyType_StalkerAiur = 6;
const int libRWDR_ge_ArmyType_Adept = 7;
const int libRWDR_ge_ArmyType_SentryAiur = 8;
const int libRWDR_ge_ArmyType_SentryPurifier = 9;
const int libRWDR_ge_ArmyType_SentryTaldarim = 10;
const int libRWDR_ge_ArmyType_SentryNerazim = 11;
const int libRWDR_ge_ArmyType_HighTemplarNerazim = 12;
const int libRWDR_ge_ArmyType_HighTemplarTaldarim = 13;
const int libRWDR_ge_ArmyType_DarkTemplarNerazim = 14;
const int libRWDR_ge_ArmyType_ImmortalLaziot = 15;
const int libRWDR_ge_ArmyType_ImmortalNerazim = 16;
const int libRWDR_ge_ArmyType_ImmortalTaldarim = 17;
const int libRWDR_ge_ArmyType_ColossusPurifier = 18;
const int libRWDR_ge_ArmyType_ColossusTaldarim = 19;
const int libRWDR_ge_ArmyType_PhoenixNerazim = 20;
const int libRWDR_ge_ArmyType_ScoutLaziot = 21;
const int libRWDR_ge_ArmyType_VoidrayNerazim = 22;
const int libRWDR_ge_ArmyType_CarrierPurifier = 23;
const int libRWDR_ge_ArmyType_ZerglingImitator = 24;
const int libRWDR_ge_ArmyType_RoachImitator = 25;
const int libRWDR_ge_ArmyType_HydraliskImitator = 26;
const int libRWDR_ge_ArmyType_InfestorImitator = 27;
const int libRWDR_ge_ArmyType_UltraliskImitator = 28;
const int libRWDR_ge_ArmyType_MutaliskImitator = 29;
const int libRWDR_ge_ArmyType_CorruptorImitator = 30;
const int libRWDR_ge_CatagoryType_Zealot = 0;
const int libRWDR_ge_CatagoryType_Stalker = 1;
const int libRWDR_ge_CatagoryType_Sentry = 2;
const int libRWDR_ge_CatagoryType_HighTemplar = 3;
const int libRWDR_ge_CatagoryType_DarkTemplar = 4;
const int libRWDR_ge_CatagoryType_Immortal = 5;
const int libRWDR_ge_CatagoryType_Colossus = 6;
const int libRWDR_ge_CatagoryType_Phoenix = 7;
const int libRWDR_ge_CatagoryType_Voidray = 8;
const int libRWDR_ge_CatagoryType_Carrier = 9;
const int libRWDR_ge_CatagoryType_Zergling = 10;
const int libRWDR_ge_CatagoryType_Roach = 11;
const int libRWDR_ge_CatagoryType_Hydralisk = 12;
const int libRWDR_ge_CatagoryType_Infestor = 13;
const int libRWDR_ge_CatagoryType_Ultralisk = 14;
const int libRWDR_ge_CatagoryType_Mutalisk = 15;
const int libRWDR_ge_CatagoryType_Corruptor = 16;
const int libRWDR_ge_SingularBossBarStyle_BossEnemy = 0;
const int libRWDR_ge_SingularBossBarStyle_Objective = 1;
const int libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog = 0;
const int libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Panel = 1;
const int libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Label = 2;
const int libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value = 3;
const int libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar = 4;
const int libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_MinValue = 0;
const int libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_CurValue = 1;
const int libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_MaxValue = 2;
const int libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_OffsetX = 3;
const int libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_OffsetY = 4;
const int libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_Attachment = 5;
const int libRWDR_ge_PU_UnitProgressBarDataName_MinValue = 0;
const int libRWDR_ge_PU_UnitProgressBarDataName_CurValue = 1;
const int libRWDR_ge_PU_UnitProgressBarDataName_MaxValue = 2;
const int libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Label = 0;
const int libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Value = 1;
const int libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Bar = 2;
const int libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Broder = 3;
const int libRWDR_ge_PU_UnitProgressBar_Style_Protoss = 0;
const int libRWDR_ge_PU_UnitProgressBar_Style_Terran = 1;
const int libRWDR_ge_PU_UnitProgressBar_Style_Zerg = 2;
const int libRWDR_ge_ZergOrProtossRescueEffect_Protoss = 0;
const int libRWDR_ge_ZergOrProtossRescueEffect_Zerg = 1;
const int libRWDR_ge_ZergOrProtossRescueEffect_Terran = 2;
const int libRWDR_ge_HeroPingType_Ally = 0;
const int libRWDR_ge_HeroPingType_Enemy = 1;
const int libRWDR_ge_SCMRReticleType_ZergMainObjective = 0;
const int libRWDR_ge_SCMRReticleType_ZergBonusObjective = 1;
const int libRWDR_ge_SCMRReticleType_ZergEnemy = 2;
const int libRWDR_ge_SCMRReticleType_TerranMainObjective = 3;
const int libRWDR_ge_SCMRReticleType_TerranBonusObjective = 4;
const int libRWDR_ge_SCMRReticleType_TerranEnemy = 5;
const int libRWDR_ge_SCMRReticleType_ProtossMainObjective = 6;
const int libRWDR_ge_SCMRReticleType_ProtossBonusObjective = 7;
const int libRWDR_ge_SCMRReticleType_ProtossEnemy = 8;
const int libRWDR_ge_SCMRReticleSize_Large = 0;
const int libRWDR_ge_SCMRReticleSize_Medium = 1;
const int libRWDR_ge_SCMRReticleSize_Small = 2;
const int libRWDR_ge_SCMRCampaignHeroes_None = 0;
const int libRWDR_ge_SCMRCampaignHeroes_Tolaris = 1;
const int libRWDR_ge_SCMRCampaignHeroes_Delanar = 2;
const int libRWDR_ge_SCMRCampaignHeroes_Avalax = 3;
const int libRWDR_ge_SCMRCampaignHeroes_ByronKane = 4;
const int libRWDR_ge_SCMRCampaignHeroes_Eledis = 5;
const int libRWDR_ge_SCMRCampaignHeroes_BarryClark = 6;
const int libRWDR_ge_SCMRCampaignHeroes_Leslie = 7;
const int libRWDR_ge_InOut_In = 0;
const int libRWDR_ge_InOut_Out = 1;
const int libRWDR_ge_VolumeChannelModeCampaign_Cinematic = 0;
const int libRWDR_ge_VolumeChannelModeCampaign_Speech = 1;
const int libRWDR_ge_VolumeChannelModeCampaign_Game = 2;
const int libRWDR_ge_VolumeChannelModeCampaign_Victory = 3;
const int libRWDR_ge_VolumeChannelModeCampaign_Speech2 = 4;
const int libRWDR_ge_VolumeChannelModeCampaign_Speech3 = 5;
const int libRWDR_ge_VolumeChannelModeCampaign_SpeechAndMusicNoEffects = 6;
const int libRWDR_ge_VolumeChannelModeCampaign_LowHealthBegin = 7;
const int libRWDR_ge_VolumeChannelModeCampaign_LowHealthEnd = 8;
const int libRWDR_ge_VolumeChannelModeCampaign_Game2 = 9;
const int libRWDR_ge_VolumeChannelModeCampaign_Game3 = 10;
const int libRWDR_ge_VolumeChannelModeCampaign_MissionLaunchUI = 11;
const int libRWDR_ge_VolumeChannelModeCampaign_VictoryInstant = 12;
const int libRWDR_ge_DropPodRace_Terran = 0;
const int libRWDR_ge_DropPodRace_Zerg = 1;
const int libRWDR_ge_Type_Tolaris = 0;
const int libRWDR_ge_Type_Moriy = 1;
const int libRWDR_ge_BeginEnd_Begin = 0;
const int libRWDR_ge_BeginEnd_End = 1;

// Constants
const fixed libRWDR_gv_pUC_BB_HPBarWidth = 289.0;
const int libRWDR_gv_pUC_BB_HPBarHeight = 30;
const fixed libRWDR_gv_SCMR_HeroUIUpdateFrequency = 0.25;
const int libRWDR_gv_SCMR_HerioUIMaxHeroCount = 3;
const int libRWDR_gv_sOTP_MUTATOR_MAX_DISPLAY_SMALL = 5;
const int libRWDR_gv_sOTP_MUTATOR_MAX_DISPLAY_LARGE = 10;
const int libRWDR_gv_pCC_DifficultyCount = 4;

// Structures
struct libRWDR_gs_AchievementFanfarePanel {
    int lv_container;
    int[11] lv_achievementFrames;
    int[11] lv_title;
    int[11] lv_description;
    int[11] lv_points;
    int[11] lv_icon;
};

struct libRWDR_gs_TalentPanel {
    int lv_dialog;
    int lv_container;
    int[18] lv_button;
    int[18] lv_icon;
    int[18] lv_name;
    int[8] lv_levelBox;
    int[8] lv_levelLabel;
    int lv_headerPanel;
    int lv_headerLabel;
    int lv_reset;
    int lv_close;
    int lv_points;
    int[8] lv_selectedItem;
    bool[18] lv_buttonEnabled;
};

struct libRWDR_gs_ScoreScreenPanel {
    int lv_dialog;
    int lv_container;
    int lv_mainPanel;
    int lv_victoryTitle;
    int lv_missionTitle;
    int lv_timeLabel;
    int lv_backgroundImage;
    int lv_backgroundCover;
    int[6] lv_rewardPanel;
    int[6] lv_rewardTitle;
    int[6] lv_rewardText;
    int lv_rewardHeadingLabel;
    int lv_rewardHeadingUnderLine;
    int[7] lv_statsPanel;
    int[7] lv_statsTitle;
    int[7] lv_statsText;
    int[5] lv_achievementPanel;
    int[5] lv_achievementIcon;
    int[5] lv_achievementTooltip;
    int[5] lv_achievementTooltipIcon;
    int[5] lv_achievementTooltipName;
    int[5] lv_achievementTooltipDescription;
    int[5] lv_achievementTooltipPoints;
    int lv_miniAchievementHolder;
    int[5] lv_miniAchievementPanel;
    int[5] lv_miniAchievementIcon;
    int lv_btn_Launcher;
    int lv_btn_Continue;
};

struct libRWDR_gs_BriefDefault {
    text lv_repeat;
    text lv_exit;
    text lv_launcher;
    text lv_chooseDifficulty;
    text lv_easy;
    text lv_normal;
    text lv_hard;
    text lv_easy_Clean;
    text lv_normal_Clean;
    text lv_hard_Clean;
    text lv_mainObjective;
    text lv_bonusObjective;
    text lv_skipCinematic;
    text lv_skipCinematicYellow;
    text lv_reward_Mastery;
    text lv_reward_Tech;
    text lv_reward_Faction;
    text lv_stats_TotalKill;
    text lv_stats_HeroKill;
    text lv_stats_UnitLost;
    text lv_continue;
};

struct libRWDR_gs_EnemyHeroAbility {
    text lv_begin;
    text lv_end;
    text lv_delanar01;
    text lv_delanar02;
    text lv_delanar03;
    text lv_delanar04;
    text lv_delanar05;
    text lv_fenix01;
    text lv_fenix02;
    text lv_fenix03;
    text lv_fenix04;
    text lv_fenix05;
    text lv_eledis01;
    text lv_eledis02;
    text lv_eledis03;
    text lv_eledis04;
    text lv_eledis05;
    text lv_eledis06;
    text lv_tolaris01;
    text lv_tolaris02;
    text lv_tolaris03;
    text lv_tolaris04;
    text lv_moriy01;
    text lv_moriy02;
    text lv_moriy03;
    text lv_moriy04;
    text lv_moriy05;
    text lv_lathrezit01;
    text lv_lathrezit02;
    text lv_lathrezit03;
};

// Variable Declarations
bool[16] libRWDR_gv_imitatorPlayer;
trigger libRWDR_gv_heroXPTrigger;
string[13] libRWDR_gv_learnAbility;
int libRWDR_gv_tolarisLevel;
int libRWDR_gv_tolarisMastery;
int[5] libRWDR_gv_tolarisAbil;
int libRWDR_gv_delanarLevel;
int libRWDR_gv_delanarMastery;
int[5] libRWDR_gv_delanarAbil;
int libRWDR_gv_avalaxLevel;
int libRWDR_gv_avalaxMastery;
int[5] libRWDR_gv_avalaxAbil;
int libRWDR_gv_byronLevel;
int libRWDR_gv_byronMastery;
int[5] libRWDR_gv_byronAbil;
int libRWDR_gv_eledisLevel;
int libRWDR_gv_eledisMastery;
int[5] libRWDR_gv_eledisAbil;
trigger libRWDR_gv_defaultHeroSettings;
bool libRWDR_gv_rewards_SuperWarpgate;
bool libRWDR_gv_rewards_AutoAssimilator;
bool libRWDR_gv_rewards_FastBuild;
bool libRWDR_gv_rewards_FastUpgrade;
bool libRWDR_gv_rewards_ImprovedOverlords;
bool libRWDR_gv_rewards_DoubleResearch;
bool libRWDR_gv_rewards_PowerfulHatchery;
bool libRWDR_gv_rewards_AutoExtractor;
bool libRWDR_gv_purifierTechDisabled;
bool libRWDR_gv_secretFound;
libRWDR_gs_AchievementFanfarePanel libRWDR_gv_achievementFanfarePanel;
bool[11] libRWDR_gv_achievementUsing;
string libRWDR_gv_pU_BB_Portraits;
text libRWDR_gv_pU_BB_Title;
unit libRWDR_gv_pU_BB_Boss;
fixed libRWDR_gv_pU_BB_MaxValue;
fixed libRWDR_gv_pU_BB_CurrentValue;
int libRWDR_gv_pU_BB_HPOldWidth;
int libRWDR_gv_pU_BB_Style;
int libRWDR_gv_pU_BB_Panel;
int libRWDR_gv_pU_BB_ClickableAreaHealthBar;
int libRWDR_gv_pU_BB_ClickableAreaNameLabel;
int libRWDR_gv_pU_BB_TitleLabel;
int libRWDR_gv_pU_BB_HpLabel;
int libRWDR_gv_pU_BB_HpFullImage;
int libRWDR_gv_pU_BB_HpCurrentImage;
int libRWDR_gv_pU_BB_BossBG;
int libRWDR_gv_pU_BB_ObjectiveBG;
int libRWDR_gv_RWDR_ProgressBarPanel;
int libRWDR_gv_RWDR_ProgressBarLabelTitle;
int libRWDR_gv_RWDR_ProgressBarLabelBarLeft;
int libRWDR_gv_RWDR_ProgressBarImageBar;
int libRWDR_gv_RWDR_ProgressBarMax;
bool libRWDR_gv_RWDR_ProgressBarShowing;
int libRWDR_gv_RWDR_ProgressBarMin;
int libRWDR_gv_RWDRProgressBarProgress;
int libRWDR_gv_RWDR_ProgressBarWidth;
int libRWDR_gv_RWDR_ProgressBarHeight;
int libRWDR_gv_pU_UnitProgressBarPanel;
bool libRWDR_gv_scmr_PanelInitialized;
int libRWDR_gv_scmr_PanelHolder;
int libRWDR_gv_scmr_Panel;
int libRWDR_gv_scmr_Cutscene;
int libRWDR_gv_scmr_CommandPanel;
int[5] libRWDR_gv_scmr_CommandButtons;
int[5] libRWDR_gv_scmr_CommandButtonArrows;
string libRWDR_gv_scmr_CutsceneFilter;
unit libRWDR_gv_scmr_PanelUnit;
unitgroup libRWDR_gv_scmr_PanelCasterGroup;
bool[5] libRWDR_gv_scmr_ButtonHighlighted;
bool libRWDR_gv_scmr_visible;
int libRWDR_gv_scmr_EnergyTooltip;
int libRWDR_gv_scmr_EnergyBar;
int libRWDR_gv_scmr_EnergyBarScene;
int libRWDR_gv_scmr_EnergyLabel;
int libRWDR_gv_scmr_EnergyGlassScene;
fixed libRWDR_gv_scmr_LastEnergyUpdate;
bool libRWDR_gv_scmr_EnergyHighlighting;
int libRWDR_gv_scmr_TimerWindowHighlightFrame;
fixed libRWDR_gv_sCMR_TimerWindowHighlightDuration;
fixed libRWDR_gv_sCMR_TimerWindowDangerThreshold;
bool libRWDR_gv_sCMR_TimerWindowInDanger;
timer libRWDR_gv_sCMR_TimerWindowTimer;
int libRWDR_gv_SCMR_HEROUILIFEBARHEIGHT;
int libRWDR_gv_SCMR_HEROUISHIELDBARHEIGHT;
int libRWDR_gv_SCMR_HEROUIENERGYBARHEIGHT;
int libRWDR_gv_SCMR_HEROUIBARWIDTH;
fixed libRWDR_gv_pU_ChampionReviveTimer;
fixed libRWDR_gv_SCMR_ChampionCooldownTime;
unit[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_scmr_HeroUIUnit;
int[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_SCMR_HeroUIType;
string[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_scmr_HeroUIIcon;
bool[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_SCMR_HeroUIShowLevel;
int[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_scmr_HeroUIPanel;
int[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_scmr_HeroUIDialogBorderImageAll;
int[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_scmr_HeroUIDialogBorderImage;
int[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_SCMR_HeroUIDialogBorderImageNoEnergy;
int[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_scmr_HeroUIDialogIconImage;
int[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_scmr_HeroUIDialogCooldownImage;
int[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_scmr_HeroUIDialogDamageTakenImage;
int[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_scmr_HeroUIDialogDamageTakenLabel;
int[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_scmr_HeroUIDialogNameLabel;
int[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_scmr_HeroUIDialogLevelLabel;
int[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_scmr_HeroUIDialogHealthBarImage;
int[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_scmr_HeroUIDialogHealthBarBackground;
int[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_scmr_HeroUIDialogShieldBarImage;
int[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_scmr_HeroUIDialogShieldBarBackground;
int[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_scmr_HeroUIDialogEnergyBarImage;
int[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_scmr_HeroUIDialogEnergyBarBackground;
int[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_scmr_HeroUIDialogHealthLabel;
int[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_scmr_HeroUIDialogEnergyLabel;
int[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_scmr_HeroUIDialogShieldLabel;
int[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_scmr_HeroUIDialogButton;
int[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_scmr_HeroUIDialogLevelBox;
int[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_scmr_HeroUIDialogLevelupPortrait;
bool[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_sCMR_HeroUILevelUpEffectPlaying;
fixed[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_scmr_HeroUIDamageTimer;
bool[libRWDR_gv_SCMR_HerioUIMaxHeroCount + 1] libRWDR_gv_pU_VoidHeroUIRevivable;
int libRWDR_gv_pU_VoidHeroUIAutomaticIndex;
int libRWDR_gv_pU_VoidHeroUIWarpingInType;
int libRWDR_gv_sOTP_MutatorListSmallPanel;
int libRWDR_gv_sOTP_MutatorListLargePanel;
int libRWDR_gv_sOTP_MutatorListNotificationLabel;
timer libRWDR_gv_sOTP_MutatorListNotificationTimer;
int[libRWDR_gv_sOTP_MUTATOR_MAX_DISPLAY_SMALL + 1] libRWDR_gv_sOTP_MutatorListSmallIcon;
int[libRWDR_gv_sOTP_MUTATOR_MAX_DISPLAY_SMALL + 1] libRWDR_gv_sOTP_MutatorListSmallItems;
int[libRWDR_gv_sOTP_MUTATOR_MAX_DISPLAY_LARGE + 1] libRWDR_gv_sOTP_MutatorListLargeIcon;
int[libRWDR_gv_sOTP_MUTATOR_MAX_DISPLAY_LARGE + 1] libRWDR_gv_sOTP_MutatorListLargeItems;
libRWDR_gs_TalentPanel libRWDR_gv_talentPanel;
libRWDR_gs_ScoreScreenPanel libRWDR_gv_scoreScreenPanel;
trigger libRWDR_gv_victoryContinueButtonTrig;
trigger libRWDR_gv_victoryExitButtonTrig;
actor libRWDR_gv_darkWarpActor;
bool libRWDR_gv_pC_VolumeChannelModeInSpeech;
bool libRWDR_gv_pC_VolumeChannelModeInLowHP;
point libRWDR_gv_SCMR_TP_DropPod_Location;
unitgroup libRWDR_gv_SCMR_TP_DropPod_Units;
int libRWDR_gv_SCMR_TP_DropPod_Player;
unit libRWDR_gv__TP_ZergDropPod_Building;
int libRWDR_gv_pCX_CampaignDifficulty;
int libRWDR_gv_nemezithPlayer;
unitgroup libRWDR_gv_plagueGroup;
unit libRWDR_gv_Delanar;
unit libRWDR_gv_Tolaris;
unit libRWDR_gv_Avalax;
unit libRWDR_gv_ByronKane;
unit libRWDR_gv_Eledis;
unit libRWDR_gv_BarryClark;
unit libRWDR_gv_Zortalas;
unit libRWDR_gv_Fenix;
unit libRWDR_gv_Vorazun;
int libRWDR_gv_delanarMAXLevel;
int libRWDR_gv_tolarisMAXLevel;
int libRWDR_gv_avalaxMAXLevel;
int libRWDR_gv_byronKaneMAXLevel;
int libRWDR_gv_eledisMAXLevel;
int libRWDR_gv_barryMAXLevel;
bool libRWDR_gv_tolarisisDead;
unit libRWDR_gv_tolarisUnit;
unit libRWDR_gv_tolarisCocoon;
int libRWDR_gv_tolarisRevivePlayer;
bool libRWDR_gv_delanarisDead;
unit libRWDR_gv_delanarUnit;
unit libRWDR_gv_delanarCocoon;
int libRWDR_gv_delanarRevivePlayer;
unit libRWDR_gv_byronUnit;
unit libRWDR_gv_byronCocoon;
int libRWDR_gv_byronRevivePlayer;
unit libRWDR_gv_eledisUnit;
unit libRWDR_gv_eledisCocoon;
int libRWDR_gv_eledisRevivePlayer;
bool libRWDR_gv_avalaxisDead;
bool libRWDR_gv_byronisDead;
bool libRWDR_gv_eledisisDead;
bool[11][5] libRWDR_gv_rWD_AchievementAwarded;
bool[12][5] libRWDR_gv_sOTP_AchievementAwarded;
int libRWDR_gv_stats_UnitLost;
int libRWDR_gv_stats_TotalKill;
int libRWDR_gv_stats_HeroKill;
fixed libRWDR_gv_stats_MissionTime;
int libRWDR_gv_stats_MasteryAwarded;
int libRWDR_gv_stats_ExraCount;
fixed libRWDR_gv_stats_ExraCount2;
int libRWDR_gv_difficultySelect;
int libRWDR_gv_factionSelect;
libRWDR_gs_BriefDefault libRWDR_gv_briefDefault;
libRWDR_gs_EnemyHeroAbility libRWDR_gv_enemyHeroAbility;

// Function Declarations
void libRWDR_gf_FactionTechUpdate (int lp_player, int lp_faction);
void libRWDR_gf_SetPlayerFaction (int lp_player, int lp_faction);
void libRWDR_gf_HeroVariableandTriggerUpdate (int lp_player, int lp_hero, unit lp_heroUnit);
void libRWDR_gf_InitializeHeroforPlayer (int lp_player, int lp_hero, unit lp_heroUnit, int lp_currentLevel, int lp_maxLevel, int lp_q, int lp_w, int lp_e, int lp_r);
void libRWDR_gf_InitializeBacktoLauncherButton (string lp_race);
string libRWDR_gf_UnitTypeFromArmyCatagory (int lp_type);
string libRWDR_gf_UnitTypeOrigin (int lp_catagory);
string libRWDR_gf_UnitOriginButton (int lp_catagory);
string libRWDR_gf_UnitArmyButton (int lp_type);
string libRWDR_gf_UnitArmyButtonTexture (int lp_type);
string libRWDR_gf_UnitArmyButtonName (int lp_player, int lp_type);
string libRWDR_gf_UnitArmyButtonTooptip (int lp_player, int lp_type);
void libRWDR_gf_SetCampaignUnitForPlayer (int lp_player, int lp_unitOrigin, int lp_campaignUnit);
void libRWDR_gf_AwardAchi (string lp_achievement);
void libRWDR_gf_DisplayAchievement (string lp_achievement);
int libRWDR_gf_PU_BB_HPBarCurrentWidth ();
text libRWDR_gf_PU_BB_HPBarFormatLabel ();
void libRWDR_gf_PU_BB_HPBarChange ();
void libRWDR_gf_DisplaySingularBossBarVoidCampaign (string lp_portrait, text lp_title, int lp_max);
void libRWDR_gf_SetSingularBossBarMaximumValueVoidCampaign (int lp_max, bool lp_refresh);
void libRWDR_gf_SetSingularBossBarCurrentValueVoidCampaign (int lp_current, bool lp_refresh);
void libRWDR_gf_SetSingularBossBarBossVoidCampaign (unit lp_boss, bool lp_refresh);
void libRWDR_gf_ShowHideSingularBossBarVoidCampaign (bool lp_showHide);
void libRWDR_gf_RefreshSingularBossBarVoidCampaign ();
void libRWDR_gf_SetSingularBossBarColor (color lp_color);
void libRWDR_gf_SetSingularBossBarTitleColor (color lp_color);
void libRWDR_gf_SetSingularBossBarStyle (int lp_style);
void libRWDR_gf_TextCrawl (text lp_line1, text lp_line2, fixed lp_line1writeout, fixed lp_line2writeout);
void libRWDR_gf_DisplayProgressBar (text lp_title, int lp_min, int lp_max);
void libRWDR_gf_SetProgressBarTitle (text lp_title);
void libRWDR_gf_SetProgressBarValueRange (int lp_min, int lp_max);
void libRWDR_gf_SetProgressBarLabel (text lp_label);
void libRWDR_gf_SetProgressBarProgress (int lp_progress);
void libRWDR_gf_SetProgressBarColor (color lp_color);
void libRWDR_gf_ShowHideProgressBar (bool lp_showHide);
void libRWDR_gf_RWDR_UpdateProgressBar ();
color libRWDR_gf_GetProgressBarColorCampaign ();
void libRWDR_gf_DisplayProgressBarUnitOld (unit lp_unit, int lp_minValue, int lp_maxValue, text lp_labelText, int lp_offsetX, int lp_offsetY, string lp_attachment);
void libRWDR_gf_DestroyProgressBarUnitOld (unit lp_unit);
void libRWDR_gf_SetProgressBarProgressUnitOld (unit lp_unit, int lp_value);
void libRWDR_gf_MoveProgressBarUnitOld (unit lp_unit, int lp_offsetX, int lp_offsetY);
void libRWDR_gf_SetProgresBarTitleUnitOld (unit lp_unit, text lp_titleText);
void libRWDR_gf_SetProgressBarValueRangeUnitOld (unit lp_unit, int lp_minValue, int lp_maxValue);
void libRWDR_gf_ShowHideProgressBarUnitOld (unit lp_unit, bool lp_showHide);
void libRWDR_gf_PU_UpdateProgressBarUnitOld (unit lp_unit);
string libRWDR_gf_PU_ProgressBarUnit_DataNameOld (unit lp_unit, int lp_type);
string libRWDR_gf_PU_ProgressBarUnit_DialogNameOld (unit lp_unit, int lp_type);
void libRWDR_gf_DisplayUnitProgressBar (unit lp_unit, text lp_title, int lp_minValue, int lp_maxValue, int lp_style);
void libRWDR_gf_SetUnitProgressBarProgress (unit lp_unit, int lp_value);
void libRWDR_gf_SetUnitProgresBarTitle (unit lp_unit, text lp_titleText);
void libRWDR_gf_SetUnitProgressBarValueRange (unit lp_unit, int lp_minValue, int lp_maxValue);
void libRWDR_gf_ShowHideUnitProgressBar (unit lp_unit, bool lp_showHide);
void libRWDR_gf_PU_UpdateUnitProgressBar (unit lp_unit);
string libRWDR_gf_PU_UnitProgressBar_Data (unit lp_unit, int lp_type);
string libRWDR_gf_PU_UnitProgressBar_Dialog (unit lp_unit, int lp_type);
void libRWDR_gf_rwdrSetUnitInfoTextCampaign (unit lp_unit, text lp_info, text lp_tip, text lp_subTip);
void libRWDR_gf_rwdrSetUnitInfoTextCampaignDetailed (unit lp_unit, text lp_info, text lp_tip, text lp_subTip);
void libRWDR_gf_RescueUnitSCMR (unit lp_unit, int lp_player, bool lp_changeColor, int lp_protosseffect);
void libRWDR_gf_RescueUnitGroupSCMR (unitgroup lp_unit, int lp_player, bool lp_changeColor, int lp_protosseffect);
void libRWDR_gf_CreateObjectivePing (bool lp_objectiveType, point lp_position, text lp_tooltip);
void libRWDR_gf_PingMinimapCampaign (playergroup lp_players, point lp_pos, fixed lp_dur, color lp_color);
void libRWDR_gf_CreateHeroPing (unit lp_unit, int lp_heroPingType);
string libRWDR_gf_PM_ReticleModelOfStyle (int lp_type, int lp_size);
string libRWDR_gf_PM_ReticleTextFontOfStyle (int lp_type);
void libRWDR_gf_SCMR_ReticleApplyTint (actor lp_reticle, int lp_type);
void libRWDR_gf_CreateSCMRReticleEffectAndTextTagAtPoint (int lp_type, int lp_size, text lp_text, point lp_location);
void libRWDR_gf_AttachReticleEffectAndTextTagOnUnit (int lp_type, int lp_size, text lp_text, unit lp_target, string lp_attachPoint);
void libRWDR_gf_SCMR_PannelInit ();
void libRWDR_gf_SCMR_PanelInitNova ();
void libRWDR_gf_SCMR_PanelInitProtoss ();
void libRWDR_gf_SCMR_PanelInitDehaka ();
void libRWDR_gf_SCMR_PanelSetUnit (unit lp_casterUnit);
void libRWDR_gf_SCMR_PanelShowHide (bool lp_showHide, fixed lp_duration);
void libRWDR_gf_SCMR_PanelVisibilitySet (bool lp_showHide, fixed lp_duration);
void libRWDR_gf_SCMR_PanelVisibilityAutoUpdate (bool lp_showHide, fixed lp_duration);
void libRWDR_gf_SCMR_SoAUpdateVitals ();
void libRWDR_gf_SCMR_CheckForEnergyHighlight ();
void libRWDR_gf_SCMR_EnergyHighlight (bool lp_enable);
void libRWDR_gf_SCMRTimerWindowCreate (timer lp_timer, text lp_title, bool lp_visible, bool lp_elapsed);
void libRWDR_gf_scmr_RepositionTimerWindow (int lp_timerWindow);
void libRWDR_gf_SCMR_FlashTimerWindow (fixed lp_duration, bool lp_waitOption);
void libRWDR_gf_SCMR_SetTimerWindowDangerThreshold (fixed lp_thresholdTime);
void libRWDR_gf_SCMR_SetHeroPanelUnit (int lp_index, unit lp_heroUnit);
void libRWDR_gf_PU_ShowHideHeroPanel (bool lp_showHide);
void libRWDR_gf_SCMR_CreateHeroPanel (int lp_index);
int libRWDR_gf_scmr_HeroTypeFromUnitType (string lp_unitType);
string libRWDR_gf_scmr_VoidHeroIcon (int lp_heroType);
void libRWDR_gf_SCMR_UpdateHeroPanel (int lp_index);
string libRWDR_gf_SCMR_PresetToHeroUnit (int lp_championPreset);
bool libRWDR_gf_scmr_HeroHasShields (int lp_champion);
void libRWDR_gf_SCMR_PlayHeroPanelLevelUpEffect (int lp_index, int lp_protosseffect);
void libRWDR_gf_SOTP_MutatorListCreate ();
void libRWDR_gf_SOTP_MutatorListInit ();
void libRWDR_gf_SOTP_MutatorListInitSmall ();
void libRWDR_gf_SOTP_MutatorListInitLarge ();
void libRWDR_gf_SOTP_MutatorListSetItem (int lp_index);
void libRWDR_gf_SOTP_MutatorListHideItem (int lp_index);
void libRWDR_gf_SOTP_MutatorListShowNotification (text lp_message);
void libRWDR_gf_SOTP_MutatorListShowNotificationToPlayer (text lp_message, int lp_player);
void libRWDR_gf_TalentPanelCreate ();
void libRWDR_gf_TalentPanelUpdate ();
void libRWDR_gf_ShowHideTGHTalentPanel (bool lp_showHide);
void libRWDR_gf_VictoryPanelCreate_RWD ();
void libRWDR_gf_VictoryPanelUpdate_RWD (int lp_mission);
void libRWDR_gf_VictoryPanelCreate_SOTP ();
void libRWDR_gf_VictoryPanelUpdate_SOTP (int lp_mission);
void libRWDR_gf_VictoryScreenDisplay (string lp_race, int lp_mission);
void libRWDR_gf_AIDarkArchon (int lp_owner, unit lp_darkArchon, unitgroup lp_nearbyUnits);
void libRWDR_gf_AIHighTemplarTaldarim (int lp_owner, unit lp_highTemplarTaldarim, unitgroup lp_nearbyUnits);
void libRWDR_gf_AIGhostSpecial (int lp_owner, unit lp_aIUnit, unitgroup lp_nearbyUnits);
void libRWDR_gf_AIDukesRevenge (int lp_owner, unit lp_aIUnit, unitgroup lp_nearbyUnits);
void libRWDR_gf_AIHybridDominatorVoid (int lp_owner, unit lp_aIUnit, unitgroup lp_nearbyUnits);
void libRWDR_gf_AIHybridBehemoth (int lp_owner, unit lp_aIUnit, unitgroup lp_nearbyUnits);
void libRWDR_gf_AIShadowCannon (int lp_owner, unit lp_aIUnit, unitgroup lp_nearbyUnits);
void libRWDR_gf_AIProtector (int lp_owner, unit lp_aIUnit, unitgroup lp_nearbyUnits);
void libRWDR_gf_AIBroodQueen (int lp_owner, unit lp_aIUnit, unitgroup lp_nearbyUnits);
unitgroup libRWDR_gf_AITacticalEnemiesWithinRange (unit lp_unit, fixed lp_range, unitfilter lp_filter);
unitgroup libRWDR_gf_AITacticalEnemiesWithinRange2 (unit lp_unit, fixed lp_range, unitfilter lp_filter);
unitgroup libRWDR_gf_AITacticalEnemiesWithinRange3 (unit lp_unit, fixed lp_range, unitfilter lp_filter);
void libRWDR_gf_AIDelanar (int lp_owner, unit lp_delanar, unitgroup lp_nearbyUnits);
void libRWDR_gf_AILightningDash (int lp_owner, unit lp_aIUnit, unitgroup lp_nearbyUnits, string lp_abil, unit lp_item);
void libRWDR_gf_AIVoidField (int lp_owner, unit lp_aIUnit, unitgroup lp_nearbyUnits, string lp_abil, unit lp_item);
void libRWDR_gf_AIBarryClark (int lp_owner, unit lp_aIUnit, unitgroup lp_nearbyUnits);
void libRWDR_gf_AINemezith (int lp_owner, unit lp_nemezith, unitgroup lp_nearbyUnits);
void libRWDR_gf_AIXarmat (int lp_owner, unit lp_xarmat, unitgroup lp_nearbyUnits);
void libRWDR_gf_AIProtossPaladin (int lp_owner, unit lp_protossPaladin, unitgroup lp_nearbyUnits);
void libRWDR_gf_AIEledis (int lp_owner, unit lp_eledis, unitgroup lp_nearbyUnits);
void libRWDR_gf_AILathrezit (int lp_owner, unit lp_lathrezit, unitgroup lp_nearbyUnits);
void libRWDR_gf_SendActorMessageToDoodadsInRegion (string lp_message, string lp_doodadType, region lp_target);
void libRWDR_gf_WarpInPurifier (unit lp_unit, fixed lp_time);
void libRWDR_gf_WarpInOutProtossUnit (int lp_inOut, unit lp_unit);
void libRWDR_gf_WarpInOutMoriy (unit lp_unit, int lp_inOut);
void libRWDR_gf_SetAllSoundChannelVolumesCampaign (int lp_mode);
void libRWDR_gf_MuteUnmuteAllSoundChannelsExcept (bool lp_muteUnmute, int lp_ignoredChannel, playergroup lp_players);
void libRWDR_gf_PC_MuteUnmuteExclusive (bool lp_muteUnmute, int lp_muteChannel, int lp_ignoredChannel, playergroup lp_players);
void libRWDR_gf_RWDR_TimeFreezeVisual (fixed lp_cameraPOSX, fixed lp_cameraPOSY);
void libRWDR_gf__ZergDropPod (point lp_location, unitgroup lp_units, int lp_player);
void libRWDR_gf__TerranDropPod (point lp_location, unitgroup lp_units, int lp_player);
void libRWDR_gf_SCMR_CreateDropPod (int lp_race, point lp_location, unitgroup lp_units, bool lp_waitDontWait, int lp_player);
void libRWDR_gf_CreateDropPodForZergBuilding (string lp_buildingType, point lp_landingPoint, int lp_player, bool lp_waitDontWait);
void libRWDR_gf__CreateDropPodForBuildingDontWait (string lp_buildingType, point lp_landingPoint, int lp_player);
void libRWDR_gf__CreateDropPodForBuildingWait (string lp_buildingType, point lp_landingPoint, int lp_player);
string libRWDR_gf__LastDroppedUnitsDataTableName ();
unitgroup libRWDR_gf_LastDroppedUnits ();
int libRWDR_gf_PC_DifficultyIndex (int lp_difficulty);
int libRWDR_gf_PC_DifficultyFromIndex (int lp_index);
void libRWDR_gf_PC_SetCampaignDifficulty (int lp_difficulty);
void libRWDR_gf_SetEnemyHeroGCD (fixed lp_seconds, int lp_player);
void libRWDR_gf_InitializeSignifer (int lp_player);
void libRWDR_gf_InitializeZortalas (unit lp_unit);
void libRWDR_gf_SetAutocastonoff (unit lp_unit, int lp_type, bool lp_onOff);
unit libRWDR_gf_HeroTypetoHeroUnitVariable (int lp_heroUnit);
void libRWDR_gf_AddMasteryPointsForHero (int lp_heroUnit, int lp_player, int lp_points);
void libRWDR_gf_SetCurrentLevelForHero (int lp_player, int lp_level, int lp_heroUnit);
void libRWDR_gf_DisplayMasteryPointsGiventoPlayer (unit lp_DisplayUnit, int lp_MasteryPoint, int lp_player, int lp_protosseffect);
void libRWDR_gf_DisplayMasteryPointsatPoint (point lp_Location, int lp_MasteryPoint, int lp_player, int lp_protosseffect);
void libRWDR_gf_HandleTolarisDeath (int lp_player, point lp_point, unit lp_targetUnit);
void libRWDR_gf_HandleDelanarDeath (int lp_player, point lp_point, unit lp_targetUnit);
void libRWDR_gf_HandleByronDeath (int lp_player, point lp_point, unit lp_targetUnit);
void libRWDR_gf_HandleEledisDeath (int lp_player, point lp_point, unit lp_targetUnit);
text libRWDR_gf_MissionName (int lp_mission);
text libRWDR_gf_ZMissionName (int lp_mission);
string libRWDR_gf_SOTPLoadingScreen (int lp_mission);
text libRWDR_gf_DifficultyDisplay ();
text libRWDR_gf_FactionSelect79 ();
text libRWDR_gf_HeroSelect7 ();
int libRWDR_gf_HeroSelect7Level ();
text libRWDR_gf_TrueFalseText (bool lp_variable);
void libRWDR_gf_SOTPExtraPanel (int lp_mission);
void libRWDR_gf_MissionTimeCount (bool lp_startStop);
void libRWDR_gf_ShowRWDAchievementIcon (string lp_achievement, int lp_mission, int lp_index, int lp_beginEnd);
void libRWDR_gf_ShowSOTPAchievementIcon (string lp_achievement, int lp_mission, int lp_index, int lp_beginEnd);
void libRWDR_gf_DisplayRWDScorescreenAchi (int lp_mission);
void libRWDR_gf_DisplaySOTPScorescreenAchi (int lp_mission);
void libRWDR_gf_DisplayRWDBriefAchi (int lp_mission);
void libRWDR_gf_DisplaySOTPBriefAchi (int lp_mission);
void libRWDR_gf_CreateAchievementforBrief (int lp_mission, int lp_dialog);
void libRWDR_gf_CreateAchievementforSOTPBrief (int lp_mission, int lp_dialog);

// Trigger Declarations
trigger libRWDR_gt_ImitatorZergArmorSwitch;
trigger libRWDR_gt_BacktoLauncherProtoss;
trigger libRWDR_gt_BacktoLauncherZerg;
trigger libRWDR_gt_ShowMenuOnEsc;
trigger libRWDR_gt_InitAchievement;
trigger libRWDR_gt_PU_BossBarFocusOnTarget;
trigger libRWDR_gt_PU_BB_BossHPChanged;
trigger libRWDR_gt_PU_BB_LoadUpdate;
trigger libRWDR_gt_TextCrawlSound;
trigger libRWDR_gt_SwarmPingSound;
trigger libRWDR_gt_SCMR_PanelBirth;
trigger libRWDR_gt_SCMR_PanelRemove;
trigger libRWDR_gt_SCMR_SoaVitalCharges;
trigger libRWDR_gt_PU_TimerWindowFlash;
trigger libRWDR_gt_PU_TimerWindowThresholdCrossed;
trigger libRWDR_gt_PU_TimerWindowLoadUpdate;
trigger libRWDR_gt_scmr_HeroDebugSetWidth;
trigger libRWDR_gt_SCMR_HeroDebugSetHeightL;
trigger libRWDR_gt_SCMR_HeroDebugSetHeightS;
trigger libRWDR_gt_SCMR_HeroDebugSetHeightE;
trigger libRWDR_gt_SCMR_HeroPanelUpdate;
trigger libRWDR_gt_SCMR_HeroPanelUpdate2;
trigger libRWDR_gt_SCMR_VoidHeroUIUnitDamaged;
trigger libRWDR_gt_SCMR_HeroUIUnitVitalChange;
trigger libRWDR_gt_SCMR_HeroUIMouseHoverText;
trigger libRWDR_gt_SOTP_MutatorListNotificationExpired;
trigger libRWDR_gt_TalentPanelController;
trigger libRWDR_gt_RWDR_SoATimeFreezeCast;
trigger libRWDR_gt_SCMR_ZergDropPod;
trigger libRWDR_gt_SCMR_TerranDropPod;
trigger libRWDR_gt_EnemyHeroAbilityGCD;
trigger libRWDR_gt_ApocaliskLifeandArmor;
trigger libRWDR_gt_DelanarExtra;
trigger libRWDR_gt_BarryE;
trigger libRWDR_gt_Fenix11;
trigger libRWDR_gt_AvalaxCharging;
trigger libRWDR_gt_AvalaxUpgrade04Trig;
trigger libRWDR_gt_SigniferAutoCastHeal;
trigger libRWDR_gt_SigniferAutoCastMindPower;
trigger libRWDR_gt_TeburusGuardianShield;
trigger libRWDR_gt_UnholyBladesUsed;
trigger libRWDR_gt_BlackDeathCustomValue;
trigger libRWDR_gt_PlagueUnitDeath;
trigger libRWDR_gt_ClosePlagueTrig;
trigger libRWDR_gt_RemovePlagueRestore;
trigger libRWDR_gt_KerriganEFearEffect2;
trigger libRWDR_gt_ZortalasKillLaziotImmortal;
trigger libRWDR_gt_ZortalasFury;
trigger libRWDR_gt_ZortalasCancelAvalaxChannel;
trigger libRWDR_gt_KerriganEFearEffect4;
trigger libRWDR_gt_CreepTumorExhausted;
trigger libRWDR_gt_LifeHeal;
trigger libRWDR_gt_EnergyRestore;
trigger libRWDR_gt_KerriganEFearEffect3;
trigger libRWDR_gt_InfestedTerransRandomSpawn;
trigger libRWDR_gt_InfestedTerranRemoveInvernable;
trigger libRWDR_gt_InfestedHercRemoveInvernableExtra;
trigger libRWDR_gt_VorazunFakeShadowFury;
trigger libRWDR_gt_ShadowUnitRemoveDebug;
trigger libRWDR_gt_VorazunPassive;
trigger libRWDR_gt_MoriyVoidServant;
trigger libRWDR_gt_KerriganEFearEffect5;
trigger libRWDR_gt_MoriyVoidCloud;
trigger libRWDR_gt_MoriyCreaturesFollow;
trigger libRWDR_gt_MoriyVoidArrow;
trigger libRWDR_gt_DelanarGainXP;
trigger libRWDR_gt_ToarisGainXP;
trigger libRWDR_gt_AvalaxGainXP;
trigger libRWDR_gt_BarryGainXP;
trigger libRWDR_gt_ByronGainXP;
trigger libRWDR_gt_EledisGainXP;
trigger libRWDR_gt_TolarisReviveUpdate;
trigger libRWDR_gt_DelanarReviveUpdate;
trigger libRWDR_gt_ByronReviveUpdate;
trigger libRWDR_gt_EledisReviveUpdate;
trigger libRWDR_gt_RWDR_HeroReviveUsed;
trigger libRWDR_gt_RWDR_HeroReviveFailSafe;
trigger libRWDR_gt_HeroReviveFinished;
trigger libRWDR_gt_MissionTimeTrig;
trigger libRWDR_gt_KillandLostCount;
trigger libRWDR_gt_ShowScorescreenAchiTooltip;
trigger libRWDR_gt_HideScorescreenAchiTooltip;

// Library Initialization
void libRWDR_InitVariables ();

