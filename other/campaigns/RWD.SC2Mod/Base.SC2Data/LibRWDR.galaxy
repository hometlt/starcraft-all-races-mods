include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"

include "LibRWDR_h"

//--------------------------------------------------------------------------------------------------
// Library: RWDR Triggers
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libRWDR_InitLibraries () {
    libNtve_InitVariables();
    libLbty_InitVariables();
}

// Variable Initialization
bool libRWDR_InitVariables_completed = false;

void libRWDR_InitVariables () {
    int init_i;
    int init_i1;

    if (libRWDR_InitVariables_completed) {
        return;
    }

    libRWDR_InitVariables_completed = true;

    libRWDR_gv_achievementFanfarePanel.lv_container = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        libRWDR_gv_achievementFanfarePanel.lv_achievementFrames[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        libRWDR_gv_achievementFanfarePanel.lv_title[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        libRWDR_gv_achievementFanfarePanel.lv_description[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        libRWDR_gv_achievementFanfarePanel.lv_points[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        libRWDR_gv_achievementFanfarePanel.lv_icon[init_i1] = c_invalidDialogControlId;
    }
    libRWDR_gv_pU_BB_Style = libRWDR_ge_SingularBossBarStyle_Objective;
    libRWDR_gv_pU_BB_Panel = c_invalidDialogControlId;
    libRWDR_gv_pU_BB_ClickableAreaHealthBar = c_invalidDialogControlId;
    libRWDR_gv_pU_BB_ClickableAreaNameLabel = c_invalidDialogControlId;
    libRWDR_gv_pU_BB_TitleLabel = c_invalidDialogControlId;
    libRWDR_gv_pU_BB_HpLabel = c_invalidDialogControlId;
    libRWDR_gv_pU_BB_HpFullImage = c_invalidDialogControlId;
    libRWDR_gv_pU_BB_HpCurrentImage = c_invalidDialogControlId;
    libRWDR_gv_pU_BB_BossBG = c_invalidDialogControlId;
    libRWDR_gv_pU_BB_ObjectiveBG = c_invalidDialogControlId;
    libRWDR_gv_RWDR_ProgressBarPanel = c_invalidDialogControlId;
    libRWDR_gv_RWDR_ProgressBarLabelTitle = c_invalidDialogControlId;
    libRWDR_gv_RWDR_ProgressBarLabelBarLeft = c_invalidDialogControlId;
    libRWDR_gv_RWDR_ProgressBarImageBar = c_invalidDialogControlId;
    libRWDR_gv_RWDR_ProgressBarMax = 100;
    libRWDR_gv_RWDR_ProgressBarWidth = 280;
    libRWDR_gv_RWDR_ProgressBarHeight = 20;
    libRWDR_gv_pU_UnitProgressBarPanel = c_invalidDialogControlId;
    libRWDR_gv_scmr_PanelHolder = c_invalidDialogControlId;
    libRWDR_gv_scmr_Panel = c_invalidDialogControlId;
    libRWDR_gv_scmr_Cutscene = c_invalidDialogControlId;
    libRWDR_gv_scmr_CommandPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        libRWDR_gv_scmr_CommandButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        libRWDR_gv_scmr_CommandButtonArrows[init_i] = c_invalidDialogControlId;
    }
    libRWDR_gv_scmr_CutsceneFilter = "";
    libRWDR_gv_scmr_PanelCasterGroup = UnitGroupEmpty();
    libRWDR_gv_scmr_EnergyTooltip = c_invalidDialogControlId;
    libRWDR_gv_scmr_EnergyBar = c_invalidDialogControlId;
    libRWDR_gv_scmr_EnergyBarScene = c_invalidDialogControlId;
    libRWDR_gv_scmr_EnergyLabel = c_invalidDialogControlId;
    libRWDR_gv_scmr_EnergyGlassScene = c_invalidDialogControlId;
    libRWDR_gv_scmr_TimerWindowHighlightFrame = c_invalidDialogControlId;
    libRWDR_gv_sCMR_TimerWindowDangerThreshold = 180.0;
    libRWDR_gv_sCMR_TimerWindowTimer = TimerCreate();
    libRWDR_gv_SCMR_HEROUILIFEBARHEIGHT = 20;
    libRWDR_gv_SCMR_HEROUISHIELDBARHEIGHT = 8;
    libRWDR_gv_SCMR_HEROUIENERGYBARHEIGHT = 8;
    libRWDR_gv_SCMR_HEROUIBARWIDTH = 200;
    libRWDR_gv_pU_ChampionReviveTimer = 180.0;
    libRWDR_gv_SCMR_ChampionCooldownTime = 60.0;
    for (init_i = 0; init_i <= libRWDR_gv_SCMR_HerioUIMaxHeroCount; init_i += 1) {
        libRWDR_gv_scmr_HeroUIPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libRWDR_gv_SCMR_HerioUIMaxHeroCount; init_i += 1) {
        libRWDR_gv_scmr_HeroUIDialogBorderImageAll[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libRWDR_gv_SCMR_HerioUIMaxHeroCount; init_i += 1) {
        libRWDR_gv_scmr_HeroUIDialogBorderImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libRWDR_gv_SCMR_HerioUIMaxHeroCount; init_i += 1) {
        libRWDR_gv_SCMR_HeroUIDialogBorderImageNoEnergy[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libRWDR_gv_SCMR_HerioUIMaxHeroCount; init_i += 1) {
        libRWDR_gv_scmr_HeroUIDialogIconImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libRWDR_gv_SCMR_HerioUIMaxHeroCount; init_i += 1) {
        libRWDR_gv_scmr_HeroUIDialogCooldownImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libRWDR_gv_SCMR_HerioUIMaxHeroCount; init_i += 1) {
        libRWDR_gv_scmr_HeroUIDialogDamageTakenImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libRWDR_gv_SCMR_HerioUIMaxHeroCount; init_i += 1) {
        libRWDR_gv_scmr_HeroUIDialogDamageTakenLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libRWDR_gv_SCMR_HerioUIMaxHeroCount; init_i += 1) {
        libRWDR_gv_scmr_HeroUIDialogNameLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libRWDR_gv_SCMR_HerioUIMaxHeroCount; init_i += 1) {
        libRWDR_gv_scmr_HeroUIDialogLevelLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libRWDR_gv_SCMR_HerioUIMaxHeroCount; init_i += 1) {
        libRWDR_gv_scmr_HeroUIDialogHealthBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libRWDR_gv_SCMR_HerioUIMaxHeroCount; init_i += 1) {
        libRWDR_gv_scmr_HeroUIDialogHealthBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libRWDR_gv_SCMR_HerioUIMaxHeroCount; init_i += 1) {
        libRWDR_gv_scmr_HeroUIDialogShieldBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libRWDR_gv_SCMR_HerioUIMaxHeroCount; init_i += 1) {
        libRWDR_gv_scmr_HeroUIDialogShieldBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libRWDR_gv_SCMR_HerioUIMaxHeroCount; init_i += 1) {
        libRWDR_gv_scmr_HeroUIDialogEnergyBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libRWDR_gv_SCMR_HerioUIMaxHeroCount; init_i += 1) {
        libRWDR_gv_scmr_HeroUIDialogEnergyBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libRWDR_gv_SCMR_HerioUIMaxHeroCount; init_i += 1) {
        libRWDR_gv_scmr_HeroUIDialogHealthLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libRWDR_gv_SCMR_HerioUIMaxHeroCount; init_i += 1) {
        libRWDR_gv_scmr_HeroUIDialogEnergyLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libRWDR_gv_SCMR_HerioUIMaxHeroCount; init_i += 1) {
        libRWDR_gv_scmr_HeroUIDialogShieldLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libRWDR_gv_SCMR_HerioUIMaxHeroCount; init_i += 1) {
        libRWDR_gv_scmr_HeroUIDialogButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libRWDR_gv_SCMR_HerioUIMaxHeroCount; init_i += 1) {
        libRWDR_gv_scmr_HeroUIDialogLevelBox[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libRWDR_gv_SCMR_HerioUIMaxHeroCount; init_i += 1) {
        libRWDR_gv_scmr_HeroUIDialogLevelupPortrait[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libRWDR_gv_SCMR_HerioUIMaxHeroCount; init_i += 1) {
        libRWDR_gv_pU_VoidHeroUIRevivable[init_i] = true;
    }
    libRWDR_gv_pU_VoidHeroUIAutomaticIndex = 1;
    libRWDR_gv_sOTP_MutatorListSmallPanel = c_invalidDialogControlId;
    libRWDR_gv_sOTP_MutatorListLargePanel = c_invalidDialogControlId;
    libRWDR_gv_sOTP_MutatorListNotificationLabel = c_invalidDialogControlId;
    libRWDR_gv_sOTP_MutatorListNotificationTimer = TimerCreate();
    for (init_i = 0; init_i <= libRWDR_gv_sOTP_MUTATOR_MAX_DISPLAY_SMALL; init_i += 1) {
        libRWDR_gv_sOTP_MutatorListSmallIcon[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libRWDR_gv_sOTP_MUTATOR_MAX_DISPLAY_SMALL; init_i += 1) {
        libRWDR_gv_sOTP_MutatorListSmallItems[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libRWDR_gv_sOTP_MUTATOR_MAX_DISPLAY_LARGE; init_i += 1) {
        libRWDR_gv_sOTP_MutatorListLargeIcon[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libRWDR_gv_sOTP_MUTATOR_MAX_DISPLAY_LARGE; init_i += 1) {
        libRWDR_gv_sOTP_MutatorListLargeItems[init_i] = c_invalidDialogControlId;
    }
    libRWDR_gv_talentPanel.lv_dialog = c_invalidDialogId;
    libRWDR_gv_talentPanel.lv_container = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 17; init_i1 += 1) {
        libRWDR_gv_talentPanel.lv_button[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 17; init_i1 += 1) {
        libRWDR_gv_talentPanel.lv_icon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 17; init_i1 += 1) {
        libRWDR_gv_talentPanel.lv_name[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 7; init_i1 += 1) {
        libRWDR_gv_talentPanel.lv_levelBox[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 7; init_i1 += 1) {
        libRWDR_gv_talentPanel.lv_levelLabel[init_i1] = c_invalidDialogControlId;
    }
    libRWDR_gv_talentPanel.lv_headerPanel = c_invalidDialogControlId;
    libRWDR_gv_talentPanel.lv_headerLabel = c_invalidDialogControlId;
    libRWDR_gv_talentPanel.lv_reset = c_invalidDialogControlId;
    libRWDR_gv_talentPanel.lv_close = c_invalidDialogControlId;
    libRWDR_gv_talentPanel.lv_points = 10;
    for (init_i1 = 0; init_i1 <= 17; init_i1 += 1) {
        libRWDR_gv_talentPanel.lv_buttonEnabled[init_i1] = true;
    }
    libRWDR_gv_scoreScreenPanel.lv_dialog = c_invalidDialogId;
    libRWDR_gv_scoreScreenPanel.lv_container = c_invalidDialogControlId;
    libRWDR_gv_scoreScreenPanel.lv_mainPanel = c_invalidDialogControlId;
    libRWDR_gv_scoreScreenPanel.lv_victoryTitle = c_invalidDialogControlId;
    libRWDR_gv_scoreScreenPanel.lv_missionTitle = c_invalidDialogControlId;
    libRWDR_gv_scoreScreenPanel.lv_timeLabel = c_invalidDialogControlId;
    libRWDR_gv_scoreScreenPanel.lv_backgroundImage = c_invalidDialogControlId;
    libRWDR_gv_scoreScreenPanel.lv_backgroundCover = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        libRWDR_gv_scoreScreenPanel.lv_rewardPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        libRWDR_gv_scoreScreenPanel.lv_rewardTitle[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        libRWDR_gv_scoreScreenPanel.lv_rewardText[init_i1] = c_invalidDialogControlId;
    }
    libRWDR_gv_scoreScreenPanel.lv_rewardHeadingLabel = c_invalidDialogControlId;
    libRWDR_gv_scoreScreenPanel.lv_rewardHeadingUnderLine = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 6; init_i1 += 1) {
        libRWDR_gv_scoreScreenPanel.lv_statsPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 6; init_i1 += 1) {
        libRWDR_gv_scoreScreenPanel.lv_statsTitle[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 6; init_i1 += 1) {
        libRWDR_gv_scoreScreenPanel.lv_statsText[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        libRWDR_gv_scoreScreenPanel.lv_achievementPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        libRWDR_gv_scoreScreenPanel.lv_achievementIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        libRWDR_gv_scoreScreenPanel.lv_achievementTooltip[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        libRWDR_gv_scoreScreenPanel.lv_achievementTooltipIcon[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        libRWDR_gv_scoreScreenPanel.lv_achievementTooltipName[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        libRWDR_gv_scoreScreenPanel.lv_achievementTooltipDescription[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        libRWDR_gv_scoreScreenPanel.lv_achievementTooltipPoints[init_i1] = c_invalidDialogControlId;
    }
    libRWDR_gv_scoreScreenPanel.lv_miniAchievementHolder = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        libRWDR_gv_scoreScreenPanel.lv_miniAchievementPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        libRWDR_gv_scoreScreenPanel.lv_miniAchievementIcon[init_i1] = c_invalidDialogControlId;
    }
    libRWDR_gv_scoreScreenPanel.lv_btn_Launcher = c_invalidDialogControlId;
    libRWDR_gv_scoreScreenPanel.lv_btn_Continue = c_invalidDialogControlId;
    libRWDR_gv_SCMR_TP_DropPod_Units = UnitGroupEmpty();
    libRWDR_gv_pCX_CampaignDifficulty = 2;
    libRWDR_gv_plagueGroup = UnitGroupEmpty();
    libRWDR_gv_delanarMAXLevel = 10;
    libRWDR_gv_tolarisMAXLevel = 10;
    libRWDR_gv_avalaxMAXLevel = 10;
    libRWDR_gv_byronKaneMAXLevel = 10;
    libRWDR_gv_eledisMAXLevel = 10;
    libRWDR_gv_barryMAXLevel = 10;
    libRWDR_gv_difficultySelect = 2;
    libRWDR_gv_briefDefault.lv_repeat = StringExternal("Param/Value/lib_RWDR_31687320");
    libRWDR_gv_briefDefault.lv_exit = StringExternal("Param/Value/lib_RWDR_65A36541");
    libRWDR_gv_briefDefault.lv_launcher = StringExternal("Param/Value/lib_RWDR_D6C49047");
    libRWDR_gv_briefDefault.lv_chooseDifficulty = StringExternal("Param/Value/lib_RWDR_18B14634");
    libRWDR_gv_briefDefault.lv_easy = StringExternal("Param/Value/lib_RWDR_ED45AB2D");
    libRWDR_gv_briefDefault.lv_normal = StringExternal("Param/Value/lib_RWDR_C6A5057E");
    libRWDR_gv_briefDefault.lv_hard = StringExternal("Param/Value/lib_RWDR_101D8561");
    libRWDR_gv_briefDefault.lv_easy_Clean = StringExternal("Param/Value/lib_RWDR_0D690D32");
    libRWDR_gv_briefDefault.lv_normal_Clean = StringExternal("Param/Value/lib_RWDR_F2607B24");
    libRWDR_gv_briefDefault.lv_hard_Clean = StringExternal("Param/Value/lib_RWDR_41370418");
    libRWDR_gv_briefDefault.lv_mainObjective = StringExternal("Param/Value/lib_RWDR_B109100B");
    libRWDR_gv_briefDefault.lv_bonusObjective = StringExternal("Param/Value/lib_RWDR_9E2847E9");
    libRWDR_gv_briefDefault.lv_skipCinematic = StringExternal("Param/Value/lib_RWDR_05DE8F91");
    libRWDR_gv_briefDefault.lv_skipCinematicYellow = StringExternal("Param/Value/lib_RWDR_9AE94964");
    libRWDR_gv_briefDefault.lv_reward_Mastery = StringExternal("Param/Value/lib_RWDR_DC230D58");
    libRWDR_gv_briefDefault.lv_reward_Tech = StringExternal("Param/Value/lib_RWDR_8FAA13D2");
    libRWDR_gv_briefDefault.lv_reward_Faction = StringExternal("Param/Value/lib_RWDR_90E334E7");
    libRWDR_gv_briefDefault.lv_stats_TotalKill = StringExternal("Param/Value/lib_RWDR_72FDD524");
    libRWDR_gv_briefDefault.lv_stats_HeroKill = StringExternal("Param/Value/lib_RWDR_2E78314D");
    libRWDR_gv_briefDefault.lv_stats_UnitLost = StringExternal("Param/Value/lib_RWDR_3F50F106");
    libRWDR_gv_briefDefault.lv_continue = StringExternal("Param/Value/lib_RWDR_5516F05B");
    libRWDR_gv_enemyHeroAbility.lv_begin = StringExternal("Param/Value/lib_RWDR_B29FD081");
    libRWDR_gv_enemyHeroAbility.lv_end = StringExternal("Param/Value/lib_RWDR_B740977C");
    libRWDR_gv_enemyHeroAbility.lv_delanar01 = StringExternal("Param/Value/lib_RWDR_BFE7845A");
    libRWDR_gv_enemyHeroAbility.lv_delanar02 = StringExternal("Param/Value/lib_RWDR_3155C888");
    libRWDR_gv_enemyHeroAbility.lv_delanar03 = StringExternal("Param/Value/lib_RWDR_88BEE3DE");
    libRWDR_gv_enemyHeroAbility.lv_delanar04 = StringExternal("Param/Value/lib_RWDR_C749D135");
    libRWDR_gv_enemyHeroAbility.lv_delanar05 = StringExternal("Param/Value/lib_RWDR_450B3CF1");
    libRWDR_gv_enemyHeroAbility.lv_fenix01 = StringExternal("Param/Value/lib_RWDR_20373E5E");
    libRWDR_gv_enemyHeroAbility.lv_fenix02 = StringExternal("Param/Value/lib_RWDR_332A9DA3");
    libRWDR_gv_enemyHeroAbility.lv_fenix03 = StringExternal("Param/Value/lib_RWDR_4C53DBB8");
    libRWDR_gv_enemyHeroAbility.lv_fenix04 = StringExternal("Param/Value/lib_RWDR_1D8568AC");
    libRWDR_gv_enemyHeroAbility.lv_fenix05 = StringExternal("Param/Value/lib_RWDR_C768C251");
    libRWDR_gv_enemyHeroAbility.lv_eledis01 = StringExternal("Param/Value/lib_RWDR_843EAEB6");
    libRWDR_gv_enemyHeroAbility.lv_eledis02 = StringExternal("Param/Value/lib_RWDR_03CCC280");
    libRWDR_gv_enemyHeroAbility.lv_eledis03 = StringExternal("Param/Value/lib_RWDR_A42DFF85");
    libRWDR_gv_enemyHeroAbility.lv_eledis04 = StringExternal("Param/Value/lib_RWDR_DC3A86C1");
    libRWDR_gv_enemyHeroAbility.lv_eledis05 = StringExternal("Param/Value/lib_RWDR_7791C748");
    libRWDR_gv_enemyHeroAbility.lv_eledis06 = StringExternal("Param/Value/lib_RWDR_288FE69D");
    libRWDR_gv_enemyHeroAbility.lv_tolaris01 = StringExternal("Param/Value/lib_RWDR_AD51F60A");
    libRWDR_gv_enemyHeroAbility.lv_tolaris02 = StringExternal("Param/Value/lib_RWDR_DF9FC779");
    libRWDR_gv_enemyHeroAbility.lv_tolaris03 = StringExternal("Param/Value/lib_RWDR_071638DF");
    libRWDR_gv_enemyHeroAbility.lv_tolaris04 = StringExternal("Param/Value/lib_RWDR_0478084B");
    libRWDR_gv_enemyHeroAbility.lv_moriy01 = StringExternal("Param/Value/lib_RWDR_17B766DB");
    libRWDR_gv_enemyHeroAbility.lv_moriy02 = StringExternal("Param/Value/lib_RWDR_B8C86111");
    libRWDR_gv_enemyHeroAbility.lv_moriy03 = StringExternal("Param/Value/lib_RWDR_4747D835");
    libRWDR_gv_enemyHeroAbility.lv_moriy04 = StringExternal("Param/Value/lib_RWDR_2D423D59");
    libRWDR_gv_enemyHeroAbility.lv_moriy05 = StringExternal("Param/Value/lib_RWDR_CBB57686");
    libRWDR_gv_enemyHeroAbility.lv_lathrezit01 = StringExternal("Param/Value/lib_RWDR_01B3E2A8");
    libRWDR_gv_enemyHeroAbility.lv_lathrezit02 = StringExternal("Param/Value/lib_RWDR_44A1ADEC");
    libRWDR_gv_enemyHeroAbility.lv_lathrezit03 = StringExternal("Param/Value/lib_RWDR_EDD4A357");
}

// Presets
// Functions
void libRWDR_gf_FactionTechUpdate (int lp_player, int lp_faction) {
    // Automatic Variable Declarations
    int auto8C1B70BB_val;

    // Implementation
    if ((lp_player != 1)) {
        return ;
    }

    auto8C1B70BB_val = lp_faction;
    if (auto8C1B70BB_val == libRWDR_ge_Faction_Nerazim) {
        libRWDR_gf_SetCampaignUnitForPlayer(lp_player, libRWDR_ge_CatagoryType_Zealot, libRWDR_ge_ArmyType_ZealotNerazim);
        libRWDR_gf_SetCampaignUnitForPlayer(lp_player, libRWDR_ge_CatagoryType_Stalker, libRWDR_ge_ArmyType_StalkerNerazim);
        libRWDR_gf_SetCampaignUnitForPlayer(lp_player, libRWDR_ge_CatagoryType_Sentry, libRWDR_ge_ArmyType_SentryNerazim);
        libRWDR_gf_SetCampaignUnitForPlayer(lp_player, libRWDR_ge_CatagoryType_HighTemplar, libRWDR_ge_ArmyType_HighTemplarNerazim);
        libRWDR_gf_SetCampaignUnitForPlayer(lp_player, libRWDR_ge_CatagoryType_Immortal, libRWDR_ge_ArmyType_ImmortalNerazim);
        libRWDR_gf_SetCampaignUnitForPlayer(lp_player, libRWDR_ge_CatagoryType_Voidray, libRWDR_ge_ArmyType_VoidrayNerazim);
        TechTreeAbilityAllow(lp_player, AbilityCommand("RoboticsFacilityTrain", 2), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("RoboticsFacilityTrain", 4), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("RoboticsFacilityTrain", 1), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("StargateTrain", 0), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("StargateTrain", 5), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("StargateTrain", 2), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("StargateTrain", 9), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("StargateTrain", 12), false);
        TechTreeUnitAllow(lp_player, "RoboticsBay", false);
        TechTreeUnitAllow(lp_player, "TwilightCouncil", false);
        TechTreeUnitAllow(lp_player, "FleetBeacon", false);
    }
    else if (auto8C1B70BB_val == libRWDR_ge_Faction_Laziot) {
        libRWDR_gf_SetCampaignUnitForPlayer(lp_player, libRWDR_ge_CatagoryType_Zealot, libRWDR_ge_ArmyType_ZealotLaziot);
        libRWDR_gf_SetCampaignUnitForPlayer(lp_player, libRWDR_ge_CatagoryType_Stalker, libRWDR_ge_ArmyType_StalkerPurifier);
        libRWDR_gf_SetCampaignUnitForPlayer(lp_player, libRWDR_ge_CatagoryType_Sentry, libRWDR_ge_ArmyType_SentryPurifier);
        libRWDR_gf_SetCampaignUnitForPlayer(lp_player, libRWDR_ge_CatagoryType_Immortal, libRWDR_ge_ArmyType_ImmortalLaziot);
        libRWDR_gf_SetCampaignUnitForPlayer(lp_player, libRWDR_ge_CatagoryType_Colossus, libRWDR_ge_ArmyType_ColossusPurifier);
        TechTreeAbilityAllow(lp_player, AbilityCommand("RoboticsBayResearch", 5), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("GatewayTrain", 3), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("GatewayTrain", 4), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("WarpGateTrain", 3), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("WarpGateTrain", 4), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("RoboticsFacilityTrain", 4), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("RoboticsFacilityTrain", 1), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("StargateTrain", 0), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("StargateTrain", 4), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("StargateTrain", 8), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("StargateTrain", 11), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("StargateTrain", 2), false);
        TechTreeUnitAllow(lp_player, "KhaydarinMonolith", false);
        TechTreeUnitAllow(lp_player, "TemplarArchive", false);
        TechTreeUnitAllow(lp_player, "TwilightCouncil", false);
        TechTreeUnitAllow(lp_player, "DarkShrine", false);
    }
    else if (auto8C1B70BB_val == libRWDR_ge_Faction_Stetman) {
        libRWDR_gf_SetCampaignUnitForPlayer(lp_player, libRWDR_ge_CatagoryType_Zergling, libRWDR_ge_ArmyType_ZerglingImitator);
        libRWDR_gf_SetCampaignUnitForPlayer(lp_player, libRWDR_ge_CatagoryType_Roach, libRWDR_ge_ArmyType_RoachImitator);
        libRWDR_gf_SetCampaignUnitForPlayer(lp_player, libRWDR_ge_CatagoryType_Hydralisk, libRWDR_ge_ArmyType_HydraliskImitator);
        libRWDR_gf_SetCampaignUnitForPlayer(lp_player, libRWDR_ge_CatagoryType_Infestor, libRWDR_ge_ArmyType_InfestorImitator);
        libRWDR_gf_SetCampaignUnitForPlayer(lp_player, libRWDR_ge_CatagoryType_Ultralisk, libRWDR_ge_ArmyType_UltraliskImitator);
        libRWDR_gf_SetCampaignUnitForPlayer(lp_player, libRWDR_ge_CatagoryType_Mutalisk, libRWDR_ge_ArmyType_MutaliskImitator);
        libRWDR_gf_SetCampaignUnitForPlayer(lp_player, libRWDR_ge_CatagoryType_Corruptor, libRWDR_ge_ArmyType_CorruptorImitator);
        TechTreeAbilityAllow(lp_player, AbilityCommand("RoachWarrenResearch", 1), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("HydraliskDenResearch", 2), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("InfestationPitResearch", 3), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("TrainQueen", 0), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("LarvaTrain", 14), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("LarvaTrainSwarm", 27), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("MorphToOverseer", 0), false);
        TechTreeUpgradeAddLevel(lp_player, "CreepTumorHidden", 1);
        TechTreeUpgradeAddLevel(lp_player, "overlordtransport", 1);
        TechTreeUpgradeAddLevel(lp_player, "overlordspeed", 1);
    }
    else {
    }
}

void libRWDR_gf_SetPlayerFaction (int lp_player, int lp_faction) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto56A230D3_val;
    const int auto0B6E6434_ae = 14;
    const int auto0B6E6434_ai = 1;
    const int autoE08600D2_ae = 15;
    const int autoE08600D2_ai = 1;
    const int autoD163A52A_ae = 13;
    const int autoD163A52A_ai = 1;
    const int autoF9331CBB_ae = 23;
    const int autoF9331CBB_ai = 1;
    const int auto0A24FBE5_ae = 15;
    const int auto0A24FBE5_ai = 1;
    const int auto79BFD0B0_ae = 19;
    const int auto79BFD0B0_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_player == 1)) {
        libRWDR_gf_FactionTechUpdate(lp_player, lp_faction);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "FactionTrainAI", 1);
    }
    auto56A230D3_val = lp_faction;
    if (auto56A230D3_val == libRWDR_ge_Faction_Nerazim) {
        TechTreeUpgradeAddLevel(lp_player, "Nerazim", 1);
        lv_index = 1;
        for ( ; ( (auto0B6E6434_ai >= 0 && lv_index <= auto0B6E6434_ae) || (auto0B6E6434_ai < 0 && lv_index >= auto0B6E6434_ae) ) ; lv_index += auto0B6E6434_ai ) {
            PlayerApplySkin(lp_player, UserDataGetGameLink("RWDR_Basic_Settings", "Nerazim", "UnitSkin", lv_index), true);
            libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, UserDataGetGameLink("RWDR_Basic_Settings", "Nerazim", "UnitSkin", lv_index), true);
        }
    }
    else if (auto56A230D3_val == libRWDR_ge_Faction_Laziot) {
        TechTreeUpgradeAddLevel(lp_player, "Laziot", 1);
        lv_index = 1;
        for ( ; ( (autoE08600D2_ai >= 0 && lv_index <= autoE08600D2_ae) || (autoE08600D2_ai < 0 && lv_index >= autoE08600D2_ae) ) ; lv_index += autoE08600D2_ai ) {
            PlayerApplySkin(lp_player, UserDataGetGameLink("RWDR_Basic_Settings", "Laziot", "UnitSkin", lv_index), true);
            libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, UserDataGetGameLink("RWDR_Basic_Settings", "Laziot", "UnitSkin", lv_index), true);
        }
    }
    else if (auto56A230D3_val == libRWDR_ge_Faction_Marauder) {
        TechTreeUpgradeAddLevel(lp_player, "Junker", 1);
        lv_index = 1;
        for ( ; ( (autoD163A52A_ai >= 0 && lv_index <= autoD163A52A_ae) || (autoD163A52A_ai < 0 && lv_index >= autoD163A52A_ae) ) ; lv_index += autoD163A52A_ai ) {
            PlayerApplySkin(lp_player, UserDataGetGameLink("RWDR_Basic_Settings", "Junker", "UnitSkin", lv_index), true);
            libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, UserDataGetGameLink("RWDR_Basic_Settings", "Junker", "UnitSkin", lv_index), true);
        }
    }
    else if (auto56A230D3_val == libRWDR_ge_Faction_Umojan) {
        TechTreeUpgradeAddLevel(lp_player, "Umojan", 1);
        lv_index = 1;
        for ( ; ( (autoF9331CBB_ai >= 0 && lv_index <= autoF9331CBB_ae) || (autoF9331CBB_ai < 0 && lv_index >= autoF9331CBB_ae) ) ; lv_index += autoF9331CBB_ai ) {
            PlayerApplySkin(lp_player, UserDataGetGameLink("RWDR_Basic_Settings", "Umojan", "UnitSkin", lv_index), true);
            libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, UserDataGetGameLink("RWDR_Basic_Settings", "Umojan", "UnitSkin", lv_index), true);
        }
    }
    else if (auto56A230D3_val == libRWDR_ge_Faction_Taldarim) {
        TechTreeUpgradeAddLevel(lp_player, "DarkProtoss", 1);
    }
    else if (auto56A230D3_val == libRWDR_ge_Faction_Purifier) {
        TechTreeUpgradeAddLevel(lp_player, "PurifierSkin", 1);
        lv_index = 1;
        for ( ; ( (auto0A24FBE5_ai >= 0 && lv_index <= auto0A24FBE5_ae) || (auto0A24FBE5_ai < 0 && lv_index >= auto0A24FBE5_ae) ) ; lv_index += auto0A24FBE5_ai ) {
            PlayerApplySkin(lp_player, UserDataGetGameLink("RWDR_Basic_Settings", "Purifier", "UnitSkin", lv_index), true);
            libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, UserDataGetGameLink("RWDR_Basic_Settings", "Purifier", "UnitSkin", lv_index), true);
        }
    }
    else if (auto56A230D3_val == libRWDR_ge_Faction_Stetman) {
        TechTreeUpgradeAddLevel(lp_player, "Imitator", 1);
        libRWDR_gv_imitatorPlayer[lp_player] = true;
        lv_index = 1;
        for ( ; ( (auto79BFD0B0_ai >= 0 && lv_index <= auto79BFD0B0_ae) || (auto79BFD0B0_ai < 0 && lv_index >= auto79BFD0B0_ae) ) ; lv_index += auto79BFD0B0_ai ) {
            PlayerApplySkin(lp_player, UserDataGetGameLink("RWDR_Basic_Settings", "Imitator", "UnitSkin", lv_index), true);
            libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, UserDataGetGameLink("RWDR_Basic_Settings", "Imitator", "UnitSkin", lv_index), true);
        }
    }
    else {
    }
}

void libRWDR_gf_HeroVariableandTriggerUpdate (int lp_player, int lp_hero, unit lp_heroUnit) {
    // Automatic Variable Declarations
    int autoC5F2405B_val;

    // Implementation
    autoC5F2405B_val = lp_hero;
    if (autoC5F2405B_val == libRWDR_ge_SCMRCampaignHeroes_Tolaris) {
        libRWDR_gv_Tolaris = lp_heroUnit;
        libRWDR_gv_heroXPTrigger = libRWDR_gt_ToarisGainXP;
        libRWDR_gv_learnAbility[lp_player] = "TolarisLearn";
    }
    else if (autoC5F2405B_val == libRWDR_ge_SCMRCampaignHeroes_Delanar) {
        libRWDR_gv_Delanar = lp_heroUnit;
        libRWDR_gv_heroXPTrigger = libRWDR_gt_DelanarGainXP;
        libRWDR_gv_learnAbility[lp_player] = "DelanarLearn";
    }
    else if (autoC5F2405B_val == libRWDR_ge_SCMRCampaignHeroes_Avalax) {
        libRWDR_gv_Avalax = lp_heroUnit;
        libRWDR_gv_heroXPTrigger = libRWDR_gt_AvalaxGainXP;
        libRWDR_gv_learnAbility[lp_player] = "AvalaxLearn";
    }
    else if (autoC5F2405B_val == libRWDR_ge_SCMRCampaignHeroes_BarryClark) {
        libRWDR_gv_BarryClark = lp_heroUnit;
        libRWDR_gv_heroXPTrigger = libRWDR_gt_BarryGainXP;
        libRWDR_gv_learnAbility[lp_player] = "BarryLearn";
    }
    else if (autoC5F2405B_val == libRWDR_ge_SCMRCampaignHeroes_ByronKane) {
        libRWDR_gv_ByronKane = lp_heroUnit;
        libRWDR_gv_heroXPTrigger = libRWDR_gt_ByronGainXP;
        libRWDR_gv_learnAbility[lp_player] = "ByronLearn";
    }
    else if (autoC5F2405B_val == libRWDR_ge_SCMRCampaignHeroes_Eledis) {
        libRWDR_gv_Eledis = lp_heroUnit;
        libRWDR_gv_heroXPTrigger = libRWDR_gt_EledisGainXP;
        libRWDR_gv_learnAbility[lp_player] = "EledisLearn";
    }
    else {
    }
}

void libRWDR_gf_InitializeHeroforPlayer (int lp_player, int lp_hero, unit lp_heroUnit, int lp_currentLevel, int lp_maxLevel, int lp_q, int lp_w, int lp_e, int lp_r) {
    // Automatic Variable Declarations
    int auto0FAF4ECA_val;

    // Implementation
    auto0FAF4ECA_val = lp_hero;
    if (auto0FAF4ECA_val == libRWDR_ge_SCMRCampaignHeroes_Tolaris) {
        libRWDR_gv_tolarisMAXLevel = lp_maxLevel;
    }
    else if (auto0FAF4ECA_val == libRWDR_ge_SCMRCampaignHeroes_Delanar) {
        libRWDR_gv_delanarMAXLevel = lp_maxLevel;
    }
    else if (auto0FAF4ECA_val == libRWDR_ge_SCMRCampaignHeroes_Avalax) {
        libRWDR_gv_avalaxMAXLevel = lp_maxLevel;
    }
    else if (auto0FAF4ECA_val == libRWDR_ge_SCMRCampaignHeroes_BarryClark) {
        libRWDR_gv_barryMAXLevel = lp_maxLevel;
    }
    else if (auto0FAF4ECA_val == libRWDR_ge_SCMRCampaignHeroes_ByronKane) {
        libRWDR_gv_byronKaneMAXLevel = lp_maxLevel;
    }
    else if (auto0FAF4ECA_val == libRWDR_ge_SCMRCampaignHeroes_Eledis) {
        libRWDR_gv_eledisMAXLevel = lp_maxLevel;
    }
    else {
    }
    libRWDR_gf_HeroVariableandTriggerUpdate(lp_player, lp_hero, lp_heroUnit);
    libRWDR_gf_SetCurrentLevelForHero(lp_player, lp_currentLevel, lp_hero);
    UnitLearnAbilAddLevel(lp_heroUnit, libRWDR_gv_learnAbility[lp_player], 0, lp_q);
    UnitLearnAbilAddLevel(lp_heroUnit, libRWDR_gv_learnAbility[lp_player], 1, lp_w);
    UnitLearnAbilAddLevel(lp_heroUnit, libRWDR_gv_learnAbility[lp_player], 2, lp_e);
    UnitLearnAbilAddLevel(lp_heroUnit, libRWDR_gv_learnAbility[lp_player], 3, lp_r);
    TriggerEnable(libRWDR_gv_heroXPTrigger, true);
}

trigger auto_libRWDR_gf_InitializeBacktoLauncherButton_Trigger = null;
string auto_libRWDR_gf_InitializeBacktoLauncherButton_lp_race;

void libRWDR_gf_InitializeBacktoLauncherButton (string lp_race) {
    auto_libRWDR_gf_InitializeBacktoLauncherButton_lp_race = lp_race;

    if (auto_libRWDR_gf_InitializeBacktoLauncherButton_Trigger == null) {
        auto_libRWDR_gf_InitializeBacktoLauncherButton_Trigger = TriggerCreate("auto_libRWDR_gf_InitializeBacktoLauncherButton_TriggerFunc");
    }

    TriggerExecute(auto_libRWDR_gf_InitializeBacktoLauncherButton_Trigger, false, false);
}

bool auto_libRWDR_gf_InitializeBacktoLauncherButton_TriggerFunc (bool testConds, bool runActions) {
    string lp_race = auto_libRWDR_gf_InitializeBacktoLauncherButton_lp_race;

    // Automatic Variable Declarations
    string auto7903A3A8_val;

    // Implementation
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogAbortButton, true);
    Wait(2.0, c_timeGame);
    auto7903A3A8_val = lp_race;
    if (auto7903A3A8_val == "Prot") {
        TriggerEnable(libRWDR_gt_BacktoLauncherProtoss, true);
    }
    else if (auto7903A3A8_val == "Zerg") {
        TriggerEnable(libRWDR_gt_BacktoLauncherZerg, true);
    }
    else {
    }
    return true;
}

string libRWDR_gf_UnitTypeFromArmyCatagory (int lp_type) {
    // Automatic Variable Declarations
    int autoB30ADF6F_val;

    // Implementation
    autoB30ADF6F_val = lp_type;
    if (autoB30ADF6F_val == libRWDR_ge_ArmyType_ZealotNerazim) {
        return "ZealotShakuras";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_ZealotAiur) {
        return "ZealotAiur";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_ZealotPurifier) {
        return "ZealotPurifier";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_ZealotLaziot) {
        return "ZealotLaziot";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_StalkerNerazim) {
        return "StalkerNerazim";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_StalkerPurifier) {
        return "StalkerPurifier";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_StalkerAiur) {
        return "Dragoon";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_Adept) {
        return "Adept";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_SentryPurifier) {
        return "SentryPurifier";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_SentryAiur) {
        return "SentryAiur";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_SentryNerazim) {
        return "SentryNerazim";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_HighTemplarNerazim) {
        return "NerazimHT";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_HighTemplarTaldarim) {
        return "HighTemplarTaldarim";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_DarkTemplarNerazim) {
        return "DarkTemplarShakuras";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_ImmortalNerazim) {
        return "ImmortalShakuras";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_ImmortalTaldarim) {
        return "ImmortalTaldarim";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_ImmortalLaziot) {
        return "ImmortalLaziot";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_ColossusPurifier) {
        return "ColossusPurifier";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_ColossusTaldarim) {
        return "ColossusTaldarim";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_PhoenixNerazim) {
        return "CorsairMP";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_ScoutLaziot) {
        return "ScoutLaziot";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_VoidrayNerazim) {
        return "VoidRayShakuras";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_CarrierPurifier) {
        return "TempestPurifier";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_ZerglingImitator) {
        return "ZerglingImitator";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_RoachImitator) {
        return "RoachImitator";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_HydraliskImitator) {
        return "HydraliskImitator";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_InfestorImitator) {
        return "InfestorImitator";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_UltraliskImitator) {
        return "UltraliskImitator";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_MutaliskImitator) {
        return "MutaliskImitator";
    }
    else if (autoB30ADF6F_val == libRWDR_ge_ArmyType_CorruptorImitator) {
        return "CorruptorImitator";
    }
    else {
    }
    return "ArtanisVoid";
}

string libRWDR_gf_UnitTypeOrigin (int lp_catagory) {
    // Automatic Variable Declarations
    int auto30E864DA_val;

    // Implementation
    auto30E864DA_val = lp_catagory;
    if (auto30E864DA_val == libRWDR_ge_CatagoryType_Zealot) {
        return "Zealot";
    }
    else if (auto30E864DA_val == libRWDR_ge_CatagoryType_Stalker) {
        return "Stalker";
    }
    else if (auto30E864DA_val == libRWDR_ge_CatagoryType_Sentry) {
        return "Sentry";
    }
    else if (auto30E864DA_val == libRWDR_ge_CatagoryType_HighTemplar) {
        return "HighTemplar";
    }
    else if (auto30E864DA_val == libRWDR_ge_CatagoryType_DarkTemplar) {
        return "DarkTemplar";
    }
    else if (auto30E864DA_val == libRWDR_ge_CatagoryType_Immortal) {
        return "Immortal";
    }
    else if (auto30E864DA_val == libRWDR_ge_CatagoryType_Colossus) {
        return "Colossus";
    }
    else if (auto30E864DA_val == libRWDR_ge_CatagoryType_Phoenix) {
        return "Phoenix";
    }
    else if (auto30E864DA_val == libRWDR_ge_CatagoryType_Voidray) {
        return "VoidRay";
    }
    else if (auto30E864DA_val == libRWDR_ge_CatagoryType_Carrier) {
        return "Carrier";
    }
    else if (auto30E864DA_val == libRWDR_ge_CatagoryType_Zergling) {
        return "Zergling";
    }
    else if (auto30E864DA_val == libRWDR_ge_CatagoryType_Roach) {
        return "Roach";
    }
    else if (auto30E864DA_val == libRWDR_ge_CatagoryType_Hydralisk) {
        return "Hydralisk";
    }
    else if (auto30E864DA_val == libRWDR_ge_CatagoryType_Infestor) {
        return "Infestor";
    }
    else if (auto30E864DA_val == libRWDR_ge_CatagoryType_Mutalisk) {
        return "Mutalisk";
    }
    else if (auto30E864DA_val == libRWDR_ge_CatagoryType_Corruptor) {
        return "Corruptor";
    }
    else if (auto30E864DA_val == libRWDR_ge_CatagoryType_Ultralisk) {
        return "Ultralisk";
    }
    else {
    }
    return "ArtanisVoid";
}

string libRWDR_gf_UnitOriginButton (int lp_catagory) {
    // Automatic Variable Declarations
    int auto8455ED9A_val;

    // Implementation
    auto8455ED9A_val = lp_catagory;
    if (auto8455ED9A_val == libRWDR_ge_CatagoryType_Zealot) {
        return "Zealot";
    }
    else if (auto8455ED9A_val == libRWDR_ge_CatagoryType_Stalker) {
        return "Stalker";
    }
    else if (auto8455ED9A_val == libRWDR_ge_CatagoryType_Sentry) {
        return "Sentry";
    }
    else if (auto8455ED9A_val == libRWDR_ge_CatagoryType_HighTemplar) {
        return "HighTemplar";
    }
    else if (auto8455ED9A_val == libRWDR_ge_CatagoryType_DarkTemplar) {
        return "DarkTemplar";
    }
    else if (auto8455ED9A_val == libRWDR_ge_CatagoryType_Immortal) {
        return "Immortal";
    }
    else if (auto8455ED9A_val == libRWDR_ge_CatagoryType_Colossus) {
        return "Colossus";
    }
    else if (auto8455ED9A_val == libRWDR_ge_CatagoryType_Phoenix) {
        return "Phoenix";
    }
    else if (auto8455ED9A_val == libRWDR_ge_CatagoryType_Voidray) {
        return "VoidRay";
    }
    else if (auto8455ED9A_val == libRWDR_ge_CatagoryType_Carrier) {
        return "Carrier";
    }
    else if (auto8455ED9A_val == libRWDR_ge_CatagoryType_Zergling) {
        return "Zergling";
    }
    else if (auto8455ED9A_val == libRWDR_ge_CatagoryType_Roach) {
        return "Roach";
    }
    else if (auto8455ED9A_val == libRWDR_ge_CatagoryType_Hydralisk) {
        return "Hydralisk";
    }
    else if (auto8455ED9A_val == libRWDR_ge_CatagoryType_Infestor) {
        return "Infestor";
    }
    else if (auto8455ED9A_val == libRWDR_ge_CatagoryType_Ultralisk) {
        return "Ultralisk";
    }
    else if (auto8455ED9A_val == libRWDR_ge_CatagoryType_Mutalisk) {
        return "Mutalisk";
    }
    else if (auto8455ED9A_val == libRWDR_ge_CatagoryType_Corruptor) {
        return "Corruptor";
    }
    else {
    }
    return "WarpInArtanisChampion";
}

string libRWDR_gf_UnitArmyButton (int lp_type) {
    // Automatic Variable Declarations
    int auto0712818B_val;

    // Implementation
    auto0712818B_val = lp_type;
    if (auto0712818B_val == libRWDR_ge_ArmyType_ZealotAiur) {
        return "ZealotAiur";
    }
    else if (auto0712818B_val == libRWDR_ge_ArmyType_ZealotNerazim) {
        return "ZealotShakuras";
    }
    else if (auto0712818B_val == libRWDR_ge_ArmyType_ZealotPurifier) {
        return "ZealotPurifier";
    }
    else if (auto0712818B_val == libRWDR_ge_ArmyType_ZealotLaziot) {
        return "ZealotLaziot";
    }
    else if (auto0712818B_val == libRWDR_ge_ArmyType_StalkerNerazim) {
        return "StalkerNerazim";
    }
    else if (auto0712818B_val == libRWDR_ge_ArmyType_StalkerPurifier) {
        return "StalkerPurifier";
    }
    else if (auto0712818B_val == libRWDR_ge_ArmyType_SentryAiur) {
        return "SentryAiur";
    }
    else if (auto0712818B_val == libRWDR_ge_ArmyType_SentryPurifier) {
        return "SentryPurifier";
    }
    else if (auto0712818B_val == libRWDR_ge_ArmyType_SentryNerazim) {
        return "SentryNerazim";
    }
    else if (auto0712818B_val == libRWDR_ge_ArmyType_HighTemplarNerazim) {
        return "NerazimHT";
    }
    else if (auto0712818B_val == libRWDR_ge_ArmyType_ImmortalLaziot) {
        return "ImmortalLaziot";
    }
    else if (auto0712818B_val == libRWDR_ge_ArmyType_ImmortalNerazim) {
        return "ImmortalShakuras";
    }
    else if (auto0712818B_val == libRWDR_ge_ArmyType_ColossusPurifier) {
        return "ColossusPurifier";
    }
    else if (auto0712818B_val == libRWDR_ge_ArmyType_VoidrayNerazim) {
        return "VoidRayShakuras";
    }
    else if (auto0712818B_val == libRWDR_ge_ArmyType_ZerglingImitator) {
        return "ZerglingImitator";
    }
    else if (auto0712818B_val == libRWDR_ge_ArmyType_RoachImitator) {
        return "RoachImitator";
    }
    else if (auto0712818B_val == libRWDR_ge_ArmyType_HydraliskImitator) {
        return "HydraliskImitator";
    }
    else if (auto0712818B_val == libRWDR_ge_ArmyType_InfestorImitator) {
        return "InfestorImitator";
    }
    else if (auto0712818B_val == libRWDR_ge_ArmyType_UltraliskImitator) {
        return "UltraliskImitator";
    }
    else if (auto0712818B_val == libRWDR_ge_ArmyType_MutaliskImitator) {
        return "MutaliskImitator";
    }
    else if (auto0712818B_val == libRWDR_ge_ArmyType_CorruptorImitator) {
        return "Corruptor2";
    }
    else {
    }
    return "ZealotAiur";
}

string libRWDR_gf_UnitArmyButtonTexture (int lp_type) {
    // Automatic Variable Declarations
    int autoC8019415_val;

    // Implementation
    autoC8019415_val = lp_type;
    if (autoC8019415_val == libRWDR_ge_ArmyType_ZealotAiur) {
        return "Assets\\Textures\\btn-unit-protoss-zealot-aiur.dds";
    }
    else if (autoC8019415_val == libRWDR_ge_ArmyType_ZealotNerazim) {
        return "Assets\\Textures\\btn-unit-protoss-zealot-nerazim.dds";
    }
    else if (autoC8019415_val == libRWDR_ge_ArmyType_ZealotPurifier) {
        return "Assets\\Textures\\btn-unit-protoss-zealot-purifier.dds";
    }
    else if (autoC8019415_val == libRWDR_ge_ArmyType_ZealotLaziot) {
        return "Assets\\Textures\\btn-unit-protoss-zealot-golden.dds";
    }
    else if (autoC8019415_val == libRWDR_ge_ArmyType_StalkerPurifier) {
        return "Assets\\Textures\\btn-unit-protoss-stalker-golden.dds";
    }
    else if (autoC8019415_val == libRWDR_ge_ArmyType_StalkerNerazim) {
        return "Assets\\Textures\\btn-unit-protoss-stalker-nerazim.dds";
    }
    else if (autoC8019415_val == libRWDR_ge_ArmyType_SentryAiur) {
        return "Assets\\Textures\\btn-unit-protoss-sentry.dds";
    }
    else if (autoC8019415_val == libRWDR_ge_ArmyType_SentryPurifier) {
        return "Assets\\Textures\\btn-unit-collection-purifier-sentry.dds";
    }
    else if (autoC8019415_val == libRWDR_ge_ArmyType_SentryNerazim) {
        return "Assets\\Textures\\btn-unit-protoss-sentry-nerazim.dds";
    }
    else if (autoC8019415_val == libRWDR_ge_ArmyType_HighTemplarNerazim) {
        return "Assets\\Textures\\btn-unit-protoss-hightemplar-ihanrii.dds";
    }
    else if (autoC8019415_val == libRWDR_ge_ArmyType_ImmortalLaziot) {
        return "Assets\\Textures\\btn-unit-collection-immortal-golden.dds";
    }
    else if (autoC8019415_val == libRWDR_ge_ArmyType_ImmortalNerazim) {
        return "Assets\\Textures\\btn-unit-protoss-annihilator-green.dds";
    }
    else if (autoC8019415_val == libRWDR_ge_ArmyType_ColossusPurifier) {
        return "Assets\\Textures\\btn-unit-protoss-colossus-purifier.dds";
    }
    else if (autoC8019415_val == libRWDR_ge_ArmyType_VoidrayNerazim) {
        return "Assets\\Textures\\btn-unit-protoss-voidray-nerazim.dds";
    }
    else if (autoC8019415_val == libRWDR_ge_ArmyType_ZerglingImitator) {
        return "Assets\\Textures\\btn-unit-zerg-zergling-mecha.dds";
    }
    else if (autoC8019415_val == libRWDR_ge_ArmyType_RoachImitator) {
        return "Assets\\Textures\\btn-unit-zerg-roachupgrade-mecha.dds";
    }
    else if (autoC8019415_val == libRWDR_ge_ArmyType_HydraliskImitator) {
        return "Assets\\Textures\\btn-unit-zerg-hydralisk-mecha.dds";
    }
    else if (autoC8019415_val == libRWDR_ge_ArmyType_InfestorImitator) {
        return "Assets\\Textures\\btn-unit-zerg-infestor-mecha.dds";
    }
    else if (autoC8019415_val == libRWDR_ge_ArmyType_UltraliskImitator) {
        return "Assets\\Textures\\btn-unit-zerg-ultralisk-mecha.dds";
    }
    else if (autoC8019415_val == libRWDR_ge_ArmyType_MutaliskImitator) {
        return "Assets\\Textures\\btn-unit-zerg-mutalisk-mecha.dds";
    }
    else if (autoC8019415_val == libRWDR_ge_ArmyType_CorruptorImitator) {
        return "Assets\\Textures\\btn-unit-zerg-corruptor-mecha.dds";
    }
    else {
    }
    return "Assets\\Textures\\btn-unit-protoss-artanishero.dds";
}

string libRWDR_gf_UnitArmyButtonName (int lp_player, int lp_type) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogButton, libRWDR_gf_UnitArmyButton(lp_type), "Name", lp_player);
}

string libRWDR_gf_UnitArmyButtonTooptip (int lp_player, int lp_type) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogButton, libRWDR_gf_UnitArmyButton(lp_type), "Tooltip", lp_player);
}

void libRWDR_gf_SetCampaignUnitForPlayer (int lp_player, int lp_unitOrigin, int lp_campaignUnit) {
    // Automatic Variable Declarations
    // Implementation
    CatalogLinkReplace(lp_player, c_gameCatalogUnit, (libRWDR_gf_UnitTypeOrigin(lp_unitOrigin)), (libRWDR_gf_UnitTypeFromArmyCatagory(lp_campaignUnit)));
    CatalogFieldValueSet(c_gameCatalogButton, libRWDR_gf_UnitOriginButton(lp_unitOrigin), "Icon", lp_player, (libRWDR_gf_UnitArmyButtonTexture(lp_campaignUnit)));
    CatalogFieldValueSet(c_gameCatalogButton, libRWDR_gf_UnitOriginButton(lp_unitOrigin), "Name", lp_player, libRWDR_gf_UnitArmyButtonName(lp_player, lp_campaignUnit));
    CatalogFieldValueSet(c_gameCatalogButton, libRWDR_gf_UnitOriginButton(lp_unitOrigin), "Tooltip", lp_player, libRWDR_gf_UnitArmyButtonTooptip(lp_player, lp_campaignUnit));
}

trigger auto_libRWDR_gf_AwardAchi_Trigger = null;
string auto_libRWDR_gf_AwardAchi_lp_achievement;

void libRWDR_gf_AwardAchi (string lp_achievement) {
    auto_libRWDR_gf_AwardAchi_lp_achievement = lp_achievement;

    if (auto_libRWDR_gf_AwardAchi_Trigger == null) {
        auto_libRWDR_gf_AwardAchi_Trigger = TriggerCreate("auto_libRWDR_gf_AwardAchi_TriggerFunc");
    }

    TriggerExecute(auto_libRWDR_gf_AwardAchi_Trigger, false, false);
}

bool auto_libRWDR_gf_AwardAchi_TriggerFunc (bool testConds, bool runActions) {
    string lp_achievement = auto_libRWDR_gf_AwardAchi_lp_achievement;

    // Automatic Variable Declarations
    // Implementation
    DialogControlSendAnimationEvent(libRWDR_gv_achievementFanfarePanel.lv_container, PlayerGroupAll(), "Show");
    SoundPlayForPlayer(SoundLink("UI_Achievement", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    libRWDR_gf_DisplayAchievement(lp_achievement);
    Wait(1.5, c_timeReal);
    while (!((libRWDR_gv_achievementUsing[0] == false) && (libRWDR_gv_achievementUsing[1] == false) && (libRWDR_gv_achievementUsing[2] == false) && (libRWDR_gv_achievementUsing[3] == false) && (libRWDR_gv_achievementUsing[4] == false))) {
        Wait(0.5, c_timeGame);
    }
    DialogControlSendAnimationEvent(libRWDR_gv_achievementFanfarePanel.lv_container, PlayerGroupAll(), "Hide");
    return true;
}

trigger auto_libRWDR_gf_DisplayAchievement_Trigger = null;
string auto_libRWDR_gf_DisplayAchievement_lp_achievement;

void libRWDR_gf_DisplayAchievement (string lp_achievement) {
    auto_libRWDR_gf_DisplayAchievement_lp_achievement = lp_achievement;

    if (auto_libRWDR_gf_DisplayAchievement_Trigger == null) {
        auto_libRWDR_gf_DisplayAchievement_Trigger = TriggerCreate("auto_libRWDR_gf_DisplayAchievement_TriggerFunc");
    }

    TriggerExecute(auto_libRWDR_gf_DisplayAchievement_Trigger, false, false);
}

bool auto_libRWDR_gf_DisplayAchievement_TriggerFunc (bool testConds, bool runActions) {
    string lp_achievement = auto_libRWDR_gf_DisplayAchievement_lp_achievement;

    // Variable Declarations
    int lv_index;
    int lv_maxAchievements;
    int lv_minAchievements;
    const fixed lv_animationTotal = 7.0;
    const fixed lv_animationDelay = 2.0;
    int lv_inactiveIndex;

    // Automatic Variable Declarations
    bool auto2750C612_val;
    int autoF70C15C3_ae;
    const int autoF70C15C3_ai = 1;
    string auto5D5A7D8D_val;

    // Variable Initialization
    lv_maxAchievements = 4;

    // Implementation
    auto2750C612_val = UIFrameVisible(1, c_syncFrameTypeConsolePanel);
    if (auto2750C612_val == true) {
        DialogControlSetAnimationState(libRWDR_gv_achievementFanfarePanel.lv_container, PlayerGroupAll(), "MenuPresence", "InGame");
        lv_maxAchievements = 3;
    }
    else if (auto2750C612_val == false) {
        DialogControlSetAnimationState(libRWDR_gv_achievementFanfarePanel.lv_container, PlayerGroupAll(), "MenuPresence", "InMenu");
        lv_maxAchievements = 3;
    }
    else {
    }
    while (true) {
        autoF70C15C3_ae = lv_maxAchievements;
        lv_index = 0;
        for ( ; ( (autoF70C15C3_ai >= 0 && lv_index <= autoF70C15C3_ae) || (autoF70C15C3_ai < 0 && lv_index >= autoF70C15C3_ae) ) ; lv_index += autoF70C15C3_ai ) {
            if ((libRWDR_gv_achievementUsing[lv_index] == false)) {
                lv_inactiveIndex = lv_index;
                break;
            }

        }
        if ((libRWDR_gv_achievementUsing[lv_inactiveIndex] == false)) {
            break;
        }

        Wait(lv_animationDelay, c_timeReal);
    }
    libRWDR_gv_achievementUsing[lv_inactiveIndex] = true;
    libNtve_gf_SetDialogItemImage(libRWDR_gv_achievementFanfarePanel.lv_icon[lv_inactiveIndex], UserDataGetImagePath("TDS_Achievement", lp_achievement, "Icon", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libRWDR_gv_achievementFanfarePanel.lv_title[lv_inactiveIndex], UserDataGetText("TDS_Achievement", lp_achievement, "Name", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libRWDR_gv_achievementFanfarePanel.lv_description[lv_inactiveIndex], UserDataGetText("TDS_Achievement", lp_achievement, "Description", 1), PlayerGroupAll());
    DialogControlSetAnimationState(libRWDR_gv_achievementFanfarePanel.lv_points[lv_inactiveIndex], PlayerGroupAll(), "PointsGroup", "HasPoints");
    libNtve_gf_SetDialogItemText(libRWDR_gv_achievementFanfarePanel.lv_points[lv_inactiveIndex], IntToText(UserDataGetInt("TDS_Achievement", lp_achievement, "Points", 1)), PlayerGroupAll());
    auto5D5A7D8D_val = UserDataGetGameLink("TDS_Achievement", lp_achievement, "Race", 1);
    if (auto5D5A7D8D_val == "Terr") {
        DialogControlSetAnimationState(libRWDR_gv_achievementFanfarePanel.lv_achievementFrames[lv_inactiveIndex], PlayerGroupAll(), "StyleStateGroup", "TerranState");
    }
    else if (auto5D5A7D8D_val == "Zerg") {
        DialogControlSetAnimationState(libRWDR_gv_achievementFanfarePanel.lv_achievementFrames[lv_inactiveIndex], PlayerGroupAll(), "StyleStateGroup", "ZergState");
    }
    else if (auto5D5A7D8D_val == "Prot") {
        DialogControlSetAnimationState(libRWDR_gv_achievementFanfarePanel.lv_achievementFrames[lv_inactiveIndex], PlayerGroupAll(), "StyleStateGroup", "ProtossState");
    }
    else {
    }
    DialogControlSetVisible(libRWDR_gv_achievementFanfarePanel.lv_achievementFrames[lv_inactiveIndex], PlayerGroupAll(), true);
    Wait((lv_animationTotal + (lv_animationDelay * lv_inactiveIndex)), c_timeReal);
    DialogControlSetVisible(libRWDR_gv_achievementFanfarePanel.lv_achievementFrames[lv_inactiveIndex], PlayerGroupAll(), false);
    libRWDR_gv_achievementUsing[lv_inactiveIndex] = false;
    return true;
}

int libRWDR_gf_PU_BB_HPBarCurrentWidth () {
    // Variable Declarations
    fixed lv_current;
    fixed lv_max;
    int lv_width;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libRWDR_gv_pU_BB_Boss == null)) {
        lv_current = libRWDR_gv_pU_BB_CurrentValue;
        lv_max = libRWDR_gv_pU_BB_MaxValue;
    }
    else {
        lv_current = (UnitGetPropertyFixed(libRWDR_gv_pU_BB_Boss, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(libRWDR_gv_pU_BB_Boss, c_unitPropShields, c_unitPropCurrent));
        lv_max = (UnitGetPropertyFixed(libRWDR_gv_pU_BB_Boss, c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(libRWDR_gv_pU_BB_Boss, c_unitPropShieldsMax, c_unitPropCurrent));
    }
    if ((lv_max <= 0.0)) {
        lv_max = 1.0;
    }

    if ((lv_current > lv_max)) {
        lv_current = lv_max;
    }

    lv_width = FixedToInt((libRWDR_gv_pUC_BB_HPBarWidth * (lv_current / lv_max)));
    return lv_width;
}

text libRWDR_gf_PU_BB_HPBarFormatLabel () {
    // Variable Declarations
    fixed lv_current;
    fixed lv_max;
    text lv_label;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libRWDR_gv_pU_BB_Boss == null)) {
        lv_current = libRWDR_gv_pU_BB_CurrentValue;
        lv_max = libRWDR_gv_pU_BB_MaxValue;
    }
    else {
        lv_current = (UnitGetPropertyFixed(libRWDR_gv_pU_BB_Boss, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(libRWDR_gv_pU_BB_Boss, c_unitPropShields, c_unitPropCurrent));
        lv_max = (UnitGetPropertyFixed(libRWDR_gv_pU_BB_Boss, c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(libRWDR_gv_pU_BB_Boss, c_unitPropShieldsMax, c_unitPropCurrent));
    }
    lv_label = (IntToText(FixedToInt(lv_current)) + StringExternal("Param/Value/lib_RWDR_EFAB255B") + IntToText(FixedToInt(lv_max)));
    return lv_label;
}

trigger auto_libRWDR_gf_PU_BB_HPBarChange_Trigger = null;

void libRWDR_gf_PU_BB_HPBarChange () {
    if (auto_libRWDR_gf_PU_BB_HPBarChange_Trigger == null) {
        auto_libRWDR_gf_PU_BB_HPBarChange_Trigger = TriggerCreate("auto_libRWDR_gf_PU_BB_HPBarChange_TriggerFunc");
    }

    TriggerExecute(auto_libRWDR_gf_PU_BB_HPBarChange_Trigger, false, false);
}

bool auto_libRWDR_gf_PU_BB_HPBarChange_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_newWidth;
    int lv_width;
    int lv_damageBar;
    fixed lv_oldPct;
    fixed lv_newPct;
    string lv_iMAGE;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_damageBar = c_invalidDialogControlId;

    // Implementation
    lv_newWidth = libRWDR_gf_PU_BB_HPBarCurrentWidth();
    lv_width = (libRWDR_gv_pU_BB_HPOldWidth - lv_newWidth);
    lv_oldPct = (libRWDR_gv_pU_BB_HPOldWidth / libRWDR_gv_pUC_BB_HPBarWidth);
    lv_newPct = (lv_newWidth / libRWDR_gv_pUC_BB_HPBarWidth);
    libRWDR_gv_pU_BB_HPOldWidth = lv_newWidth;
    if ((((lv_newPct <= 0.75) && (lv_oldPct > 0.75)) || ((lv_newPct <= 0.5) && (lv_oldPct > 0.5)) || ((lv_newPct <= 0.25) && (lv_oldPct > 0.25)))) {
        DialogControlSendAnimationEvent(libRWDR_gv_pU_BB_Panel, PlayerGroupAll(), "Highlight");
    }
    else if ((lv_newPct < 0.25)) {
        DialogControlSendAnimationEvent(libRWDR_gv_pU_BB_Panel, PlayerGroupAll(), "Danger");
    }
    else if (true) {
        DialogControlSendAnimationEvent(libRWDR_gv_pU_BB_Panel, PlayerGroupAll(), "DangerStop");
    }
    if ((lv_width > 0)) {
        DialogControlCreateInPanelFromTemplate(libRWDR_gv_pU_BB_Panel, c_triggerControlTypeImage, "LotV_GameUnitFrame/BossHealthBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, libRWDR_gv_pU_BB_HpCurrentImage, c_anchorLeft, 0, 0);
        lv_damageBar = DialogControlLastCreated();
        DialogControlSetSize(lv_damageBar, PlayerGroupAll(), (libRWDR_gv_pU_BB_HPOldWidth + lv_width), libRWDR_gv_pUC_BB_HPBarHeight);
        libNtve_gf_SetDialogItemRenderPriority(lv_damageBar, 507, PlayerGroupAll());
        DialogControlSetVisible(lv_damageBar, PlayerGroupAll(), true);
        Wait(1.0, c_timeReal);
        DialogControlFadeTransparency(lv_damageBar, PlayerGroupAll(), 1.0, 100.0);
        Wait(1.1, c_timeReal);
        DialogControlDestroy(lv_damageBar);
    }

    return true;
}

void libRWDR_gf_DisplaySingularBossBarVoidCampaign (string lp_portrait, text lp_title, int lp_max) {
    // Automatic Variable Declarations
    // Implementation
    libRWDR_gv_pU_BB_Portraits = lp_portrait;
    libRWDR_gv_pU_BB_Title = lp_title;
    libRWDR_gv_pU_BB_Boss = null;
    libRWDR_gf_SetSingularBossBarMaximumValueVoidCampaign(lp_max, true);
    libRWDR_gf_SetSingularBossBarCurrentValueVoidCampaign(lp_max, true);
    libRWDR_gv_pU_BB_HPOldWidth = -1;
    if ((libRWDR_gv_pU_BB_Panel == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/VoidBossUnitFrame");
        libRWDR_gv_pU_BB_Panel = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_pU_BB_Panel, c_triggerControlTypeButton, "ClickableAreaHealthBar");
        libRWDR_gv_pU_BB_ClickableAreaHealthBar = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_pU_BB_Panel, c_triggerControlTypeButton, "ClickableAreaNameLabel");
        libRWDR_gv_pU_BB_ClickableAreaNameLabel = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_pU_BB_Panel, c_triggerControlTypeLabel, "NameLabel");
        libRWDR_gv_pU_BB_TitleLabel = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_pU_BB_Panel, c_triggerControlTypeImage, "HealthBarImage");
        libRWDR_gv_pU_BB_HpCurrentImage = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_pU_BB_Panel, c_triggerControlTypeLabel, "HealthLabel");
        libRWDR_gv_pU_BB_HpLabel = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_pU_BB_Panel, c_triggerControlTypeImage, "ObjectiveBarBorder");
        libRWDR_gv_pU_BB_ObjectiveBG = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_pU_BB_Panel, c_triggerControlTypeImage, "BossBarBorder");
        libRWDR_gv_pU_BB_BossBG = DialogControlLastCreated();
    }

    DialogControlSetVisible(libRWDR_gv_pU_BB_Panel, PlayerGroupAll(), true);
    libRWDR_gf_RefreshSingularBossBarVoidCampaign();
}

void libRWDR_gf_SetSingularBossBarMaximumValueVoidCampaign (int lp_max, bool lp_refresh) {
    // Automatic Variable Declarations
    // Implementation
    libRWDR_gv_pU_BB_MaxValue = IntToFixed(lp_max);
    if ((libRWDR_gv_pU_BB_MaxValue <= 0.0)) {
        libRWDR_gv_pU_BB_MaxValue = 1.0;
    }

    libRWDR_gv_pU_BB_Boss = null;
    if ((lp_refresh == true)) {
        libRWDR_gf_RefreshSingularBossBarVoidCampaign();
    }

}

void libRWDR_gf_SetSingularBossBarCurrentValueVoidCampaign (int lp_current, bool lp_refresh) {
    // Automatic Variable Declarations
    // Implementation
    libRWDR_gv_pU_BB_CurrentValue = IntToFixed(lp_current);
    if ((libRWDR_gv_pU_BB_CurrentValue < 0.0)) {
        libRWDR_gv_pU_BB_CurrentValue = 0.0;
    }

    libRWDR_gv_pU_BB_Boss = null;
    if ((lp_refresh == true)) {
        libRWDR_gf_RefreshSingularBossBarVoidCampaign();
    }

}

void libRWDR_gf_SetSingularBossBarBossVoidCampaign (unit lp_boss, bool lp_refresh) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_boss != null)) {
        TriggerEnable(libRWDR_gt_PU_BB_BossHPChanged, true);
        TriggerEnable(libRWDR_gt_PU_BossBarFocusOnTarget, true);
        TriggerEnable(libRWDR_gt_PU_BB_LoadUpdate, true);
    }

    libRWDR_gv_pU_BB_Boss = lp_boss;
    libRWDR_gv_pU_BB_MaxValue = 0.0;
    libRWDR_gv_pU_BB_CurrentValue = 0.0;
    if ((lp_refresh == true)) {
        libRWDR_gf_RefreshSingularBossBarVoidCampaign();
    }

}

void libRWDR_gf_ShowHideSingularBossBarVoidCampaign (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((libRWDR_gv_pU_BB_Panel == c_invalidDialogControlId)) {
        return ;
    }

    DialogControlSetVisible(libRWDR_gv_pU_BB_Panel, PlayerGroupAll(), lp_showHide);
}

void libRWDR_gf_RefreshSingularBossBarVoidCampaign () {
    // Automatic Variable Declarations
    // Implementation
    if ((libRWDR_gv_pU_BB_Panel == c_invalidDialogControlId)) {
        return ;
    }

    libNtve_gf_SetDialogItemText(libRWDR_gv_pU_BB_TitleLabel, libRWDR_gv_pU_BB_Title, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libRWDR_gv_pU_BB_HpLabel, libRWDR_gf_PU_BB_HPBarFormatLabel(), PlayerGroupAll());
    DialogControlSetSize(libRWDR_gv_pU_BB_HpCurrentImage, PlayerGroupSingle(1), libRWDR_gf_PU_BB_HPBarCurrentWidth(), libRWDR_gv_pUC_BB_HPBarHeight);
    libRWDR_gf_PU_BB_HPBarChange();
    if ((libRWDR_gv_pU_BB_Style == libRWDR_ge_SingularBossBarStyle_Objective)) {
        DialogControlSetVisible(libRWDR_gv_pU_BB_BossBG, PlayerGroupAll(), false);
        DialogControlSetVisible(libRWDR_gv_pU_BB_ObjectiveBG, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libRWDR_gv_pU_BB_BossBG, PlayerGroupAll(), true);
        DialogControlSetVisible(libRWDR_gv_pU_BB_ObjectiveBG, PlayerGroupAll(), false);
    }
}

void libRWDR_gf_SetSingularBossBarColor (color lp_color) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemColor(libRWDR_gv_pU_BB_HpCurrentImage, lp_color, PlayerGroupAll());
}

void libRWDR_gf_SetSingularBossBarTitleColor (color lp_color) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemColor(libRWDR_gv_pU_BB_TitleLabel, lp_color, PlayerGroupAll());
}

void libRWDR_gf_SetSingularBossBarStyle (int lp_style) {
    // Automatic Variable Declarations
}

trigger auto_libRWDR_gf_TextCrawl_Trigger = null;
text auto_libRWDR_gf_TextCrawl_lp_line1;
text auto_libRWDR_gf_TextCrawl_lp_line2;
fixed auto_libRWDR_gf_TextCrawl_lp_line1writeout;
fixed auto_libRWDR_gf_TextCrawl_lp_line2writeout;

void libRWDR_gf_TextCrawl (text lp_line1, text lp_line2, fixed lp_line1writeout, fixed lp_line2writeout) {
    auto_libRWDR_gf_TextCrawl_lp_line1 = lp_line1;
    auto_libRWDR_gf_TextCrawl_lp_line2 = lp_line2;
    auto_libRWDR_gf_TextCrawl_lp_line1writeout = lp_line1writeout;
    auto_libRWDR_gf_TextCrawl_lp_line2writeout = lp_line2writeout;

    if (auto_libRWDR_gf_TextCrawl_Trigger == null) {
        auto_libRWDR_gf_TextCrawl_Trigger = TriggerCreate("auto_libRWDR_gf_TextCrawl_TriggerFunc");
    }

    TriggerExecute(auto_libRWDR_gf_TextCrawl_Trigger, false, false);
}

bool auto_libRWDR_gf_TextCrawl_TriggerFunc (bool testConds, bool runActions) {
    text lp_line1 = auto_libRWDR_gf_TextCrawl_lp_line1;
    text lp_line2 = auto_libRWDR_gf_TextCrawl_lp_line2;
    fixed lp_line1writeout = auto_libRWDR_gf_TextCrawl_lp_line1writeout;
    fixed lp_line2writeout = auto_libRWDR_gf_TextCrawl_lp_line2writeout;

    // Variable Declarations
    int lv_line1;
    int lv_line2;
    fixed lv_line1writeout;
    fixed lv_line2writeout;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_line1 = c_invalidDialogControlId;
    lv_line2 = c_invalidDialogControlId;

    // Implementation
    lv_line1writeout = (0.06 * lp_line1writeout);
    lv_line2writeout = (0.06 * lp_line2writeout);
    DialogCreate(1280, 700, c_anchorLeft, 300, 0, false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    Wait(0.5, c_timeReal);
    TriggerExecute(libRWDR_gt_TextCrawlSound, false, false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1100, 75, c_anchorLeft, 100, 225, (StringExternal("Param/Value/lib_RWDR_E52EEB3E") + lp_line1 + StringExternal("Param/Value/lib_RWDR_E18D57B3")), ColorWithAlpha(0,0,0,0), true, lv_line1writeout);
    lv_line1 = DialogControlLastCreated();
    Wait(lv_line1writeout, c_timeReal);
    TriggerStop(libRWDR_gt_TextCrawlSound);
    Wait(0.5, c_timeReal);
    TriggerExecute(libRWDR_gt_TextCrawlSound, false, false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1100, 75, c_anchorLeft, 100, 285, (StringExternal("Param/Value/lib_RWDR_50308213") + lp_line2 + StringExternal("Param/Value/lib_RWDR_1C08C311")), ColorWithAlpha(0,0,0,0), true, lv_line2writeout);
    lv_line2 = DialogControlLastCreated();
    Wait(lv_line2writeout, c_timeReal);
    TriggerEnable(libRWDR_gt_TextCrawlSound, false);
    TriggerStop(libRWDR_gt_TextCrawlSound);
    Wait(((lv_line1writeout + lv_line2writeout) * 2.0), c_timeReal);
    DialogControlFadeTransparency(lv_line1, PlayerGroupAll(), 1.0, 100.0);
    DialogControlFadeTransparency(lv_line2, PlayerGroupAll(), 1.0, 100.0);
    Wait(1.0, c_timeReal);
    DialogDestroy(DialogLastCreated());
    return true;
}

trigger auto_libRWDR_gf_DisplayProgressBar_Trigger = null;
text auto_libRWDR_gf_DisplayProgressBar_lp_title;
int auto_libRWDR_gf_DisplayProgressBar_lp_min;
int auto_libRWDR_gf_DisplayProgressBar_lp_max;

void libRWDR_gf_DisplayProgressBar (text lp_title, int lp_min, int lp_max) {
    auto_libRWDR_gf_DisplayProgressBar_lp_title = lp_title;
    auto_libRWDR_gf_DisplayProgressBar_lp_min = lp_min;
    auto_libRWDR_gf_DisplayProgressBar_lp_max = lp_max;

    if (auto_libRWDR_gf_DisplayProgressBar_Trigger == null) {
        auto_libRWDR_gf_DisplayProgressBar_Trigger = TriggerCreate("auto_libRWDR_gf_DisplayProgressBar_TriggerFunc");
    }

    TriggerExecute(auto_libRWDR_gf_DisplayProgressBar_Trigger, false, false);
}

bool auto_libRWDR_gf_DisplayProgressBar_TriggerFunc (bool testConds, bool runActions) {
    text lp_title = auto_libRWDR_gf_DisplayProgressBar_lp_title;
    int lp_min = auto_libRWDR_gf_DisplayProgressBar_lp_min;
    int lp_max = auto_libRWDR_gf_DisplayProgressBar_lp_max;

    // Variable Declarations
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_image = "Assets\\Textures\\ui_loadingbar_metalframe_protoss.dds";

    // Implementation
    if ((libRWDR_gv_RWDR_ProgressBarPanel == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/ProgressFrameTemplate");
        libRWDR_gv_RWDR_ProgressBarPanel = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_RWDR_ProgressBarPanel, c_triggerControlTypeLabel, "NameLabel");
        libRWDR_gv_RWDR_ProgressBarLabelTitle = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_RWDR_ProgressBarPanel, c_triggerControlTypeImage, "BarImage");
        libRWDR_gv_RWDR_ProgressBarImageBar = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_RWDR_ProgressBarPanel, c_triggerControlTypeLabel, "BarLabel");
        libRWDR_gv_RWDR_ProgressBarLabelBarLeft = DialogControlLastCreated();
    }

    libRWDR_gf_SetProgressBarTitle(lp_title);
    libRWDR_gf_SetProgressBarValueRange(lp_min, lp_max);
    DialogControlSetVisible(libRWDR_gv_RWDR_ProgressBarPanel, PlayerGroupAll(), true);
    libRWDR_gv_RWDR_ProgressBarShowing = true;
    while (true) {
        if ((libRWDR_gv_RWDR_ProgressBarPanel == c_invalidDialogControlId)) {
            return true;
        }

        if ((DialogControlIsVisible(libRWDR_gv_RWDR_ProgressBarPanel, 1) == true)) {
            libRWDR_gf_RWDR_UpdateProgressBar();
        }

        Wait(0.25, c_timeGame);
    }
    return true;
}

void libRWDR_gf_SetProgressBarTitle (text lp_title) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libRWDR_gv_RWDR_ProgressBarLabelTitle, lp_title, PlayerGroupAll());
}

void libRWDR_gf_SetProgressBarValueRange (int lp_min, int lp_max) {
    // Automatic Variable Declarations
    // Implementation
    libRWDR_gv_RWDR_ProgressBarMin = lp_min;
    libRWDR_gv_RWDR_ProgressBarMax = lp_max;
}

void libRWDR_gf_SetProgressBarLabel (text lp_label) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libRWDR_gv_RWDR_ProgressBarLabelBarLeft, lp_label, PlayerGroupAll());
}

void libRWDR_gf_SetProgressBarProgress (int lp_progress) {
    // Automatic Variable Declarations
    // Implementation
    libRWDR_gv_RWDRProgressBarProgress = lp_progress;
}

void libRWDR_gf_SetProgressBarColor (color lp_color) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemColor(libRWDR_gv_RWDR_ProgressBarImageBar, lp_color, PlayerGroupAll());
}

void libRWDR_gf_ShowHideProgressBar (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((libRWDR_gv_RWDR_ProgressBarPanel == c_invalidDialogControlId)) {
        return ;
    }

    if ((lp_showHide == true)) {
        libRWDR_gf_RWDR_UpdateProgressBar();
    }
    else {
        libRWDR_gv_RWDR_ProgressBarShowing = false;
    }
    DialogControlSetVisible(libRWDR_gv_RWDR_ProgressBarPanel, PlayerGroupAll(), lp_showHide);
}

void libRWDR_gf_RWDR_UpdateProgressBar () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogControlSetSize(libRWDR_gv_RWDR_ProgressBarImageBar, PlayerGroupAll(), MaxI(FixedToInt((IntToFixed(libRWDR_gv_RWDR_ProgressBarWidth) * (IntToFixed(libRWDR_gv_RWDRProgressBarProgress) / IntToFixed(libRWDR_gv_RWDR_ProgressBarMax)))), 1), libRWDR_gv_RWDR_ProgressBarHeight);
    DialogControlSetVisible(libRWDR_gv_RWDR_ProgressBarImageBar, PlayerGroupAll(), true);
}

color libRWDR_gf_GetProgressBarColorCampaign () {
    // Automatic Variable Declarations
    // Implementation
    return Color(23.53, 86.67, 100.00);
}

trigger auto_libRWDR_gf_DisplayProgressBarUnitOld_Trigger = null;
unit auto_libRWDR_gf_DisplayProgressBarUnitOld_lp_unit;
int auto_libRWDR_gf_DisplayProgressBarUnitOld_lp_minValue;
int auto_libRWDR_gf_DisplayProgressBarUnitOld_lp_maxValue;
text auto_libRWDR_gf_DisplayProgressBarUnitOld_lp_labelText;
int auto_libRWDR_gf_DisplayProgressBarUnitOld_lp_offsetX;
int auto_libRWDR_gf_DisplayProgressBarUnitOld_lp_offsetY;
string auto_libRWDR_gf_DisplayProgressBarUnitOld_lp_attachment;

void libRWDR_gf_DisplayProgressBarUnitOld (unit lp_unit, int lp_minValue, int lp_maxValue, text lp_labelText, int lp_offsetX, int lp_offsetY, string lp_attachment) {
    auto_libRWDR_gf_DisplayProgressBarUnitOld_lp_unit = lp_unit;
    auto_libRWDR_gf_DisplayProgressBarUnitOld_lp_minValue = lp_minValue;
    auto_libRWDR_gf_DisplayProgressBarUnitOld_lp_maxValue = lp_maxValue;
    auto_libRWDR_gf_DisplayProgressBarUnitOld_lp_labelText = lp_labelText;
    auto_libRWDR_gf_DisplayProgressBarUnitOld_lp_offsetX = lp_offsetX;
    auto_libRWDR_gf_DisplayProgressBarUnitOld_lp_offsetY = lp_offsetY;
    auto_libRWDR_gf_DisplayProgressBarUnitOld_lp_attachment = lp_attachment;

    if (auto_libRWDR_gf_DisplayProgressBarUnitOld_Trigger == null) {
        auto_libRWDR_gf_DisplayProgressBarUnitOld_Trigger = TriggerCreate("auto_libRWDR_gf_DisplayProgressBarUnitOld_TriggerFunc");
    }

    TriggerExecute(auto_libRWDR_gf_DisplayProgressBarUnitOld_Trigger, false, false);
}

bool auto_libRWDR_gf_DisplayProgressBarUnitOld_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libRWDR_gf_DisplayProgressBarUnitOld_lp_unit;
    int lp_minValue = auto_libRWDR_gf_DisplayProgressBarUnitOld_lp_minValue;
    int lp_maxValue = auto_libRWDR_gf_DisplayProgressBarUnitOld_lp_maxValue;
    text lp_labelText = auto_libRWDR_gf_DisplayProgressBarUnitOld_lp_labelText;
    int lp_offsetX = auto_libRWDR_gf_DisplayProgressBarUnitOld_lp_offsetX;
    int lp_offsetY = auto_libRWDR_gf_DisplayProgressBarUnitOld_lp_offsetY;
    string lp_attachment = auto_libRWDR_gf_DisplayProgressBarUnitOld_lp_attachment;

    // Variable Declarations
    int lv_progressBarDialog;
    int lv_progressBarPanel;
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarProgressBar;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarDialog = c_invalidDialogId;
    lv_progressBarPanel = c_invalidDialogControlId;
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarProgressBar = c_invalidDialogControlId;

    // Implementation
    if ((DataTableGetDialog(true, ("ProgressBar_" + IntToString((libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog)) + "_" + IntToString(UnitGetTag(lp_unit)))) != c_invalidDialogId)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_RWDR_CC9B089E"), true);
        libRWDR_gf_DestroyProgressBarUnitOld(lp_unit);
    }

    DialogCreate(210, 75, c_anchorCenter, 0, 0, true);
    lv_progressBarDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetPositionRelativeToUnit(DialogLastCreated(), lp_unit, lp_attachment, lp_offsetX, lp_offsetY);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HotS_GameUnitFrame/SmallProgressUnitFrameTemplate");
    lv_progressBarPanel = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(lv_progressBarPanel, c_triggerControlTypeLabel, "NameLabel");
    lv_progressBarLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_progressBarLabel, lp_labelText, PlayerGroupAll());
    DialogControlHookup(lv_progressBarPanel, c_triggerControlTypeLabel, "ValueLabel");
    lv_progressBarValue = DialogControlLastCreated();
    DialogControlHookup(lv_progressBarPanel, c_triggerControlTypeImage, "BarImage");
    lv_progressBarProgressBar = DialogControlLastCreated();
    DialogSetVisible(lv_progressBarDialog, PlayerGroupAll(), true);
    DataTableSetDialog(true, libRWDR_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog), lv_progressBarDialog);
    libNtve_gf_SaveDataTableValueDialogItem(true, libRWDR_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Panel), lv_progressBarPanel);
    libNtve_gf_SaveDataTableValueDialogItem(true, libRWDR_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar), lv_progressBarProgressBar);
    libNtve_gf_SaveDataTableValueDialogItem(true, libRWDR_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Label), lv_progressBarLabel);
    libNtve_gf_SaveDataTableValueDialogItem(true, libRWDR_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value), lv_progressBarValue);
    DataTableSetInt(true, libRWDR_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_MinValue), lp_minValue);
    DataTableSetInt(true, libRWDR_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_MaxValue), lp_maxValue);
    DataTableSetInt(true, libRWDR_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_OffsetX), lp_offsetX);
    DataTableSetInt(true, libRWDR_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_OffsetY), lp_offsetY);
    DataTableSetString(true, libRWDR_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_Attachment), (lp_attachment));
    while ((lp_unit != null) && (lv_progressBarDialog != c_invalidDialogId)) {
        libRWDR_gf_PU_UpdateProgressBarUnitOld(lp_unit);
        lv_progressBarDialog = DataTableGetDialog(true, libRWDR_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog));
        Wait(0.25, c_timeReal);
    }
    return true;
}

void libRWDR_gf_DestroyProgressBarUnitOld (unit lp_unit) {
    // Variable Declarations
    int lv_progressBarDialog;
    int lv_progressBarPanel;
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarProgressBar;
    int lv_noDialog;
    int lv_noDialogItem;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarDialog = c_invalidDialogId;
    lv_progressBarPanel = c_invalidDialogControlId;
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarProgressBar = c_invalidDialogControlId;
    lv_noDialog = c_invalidDialogId;
    lv_noDialogItem = c_invalidDialogControlId;

    // Implementation
    lv_progressBarDialog = DataTableGetDialog(true, libRWDR_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog));
    lv_progressBarProgressBar = libNtve_gf_ValueFromDataTableDialogItem(true, libRWDR_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar));
    lv_progressBarValue = libNtve_gf_ValueFromDataTableDialogItem(true, libRWDR_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value));
    lv_progressBarLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libRWDR_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value));
    lv_progressBarPanel = libNtve_gf_ValueFromDataTableDialogItem(true, libRWDR_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Panel));
    DialogControlDestroy(lv_progressBarPanel);
    DialogControlDestroy(lv_progressBarProgressBar);
    DialogControlDestroy(lv_progressBarValue);
    DialogControlDestroy(lv_progressBarLabel);
    DialogDestroy(lv_progressBarDialog);
    DataTableSetDialog(true, libRWDR_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog), lv_noDialog);
    libNtve_gf_SaveDataTableValueDialogItem(true, libRWDR_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Panel), lv_noDialogItem);
    libNtve_gf_SaveDataTableValueDialogItem(true, libRWDR_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar), lv_noDialogItem);
    libNtve_gf_SaveDataTableValueDialogItem(true, libRWDR_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value), lv_noDialogItem);
    libNtve_gf_SaveDataTableValueDialogItem(true, libRWDR_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Label), lv_noDialogItem);
}

void libRWDR_gf_SetProgressBarProgressUnitOld (unit lp_unit, int lp_value) {
    // Variable Declarations
    int lv_minValue;
    int lv_maxValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minValue = DataTableGetInt(true, libRWDR_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_MinValue));
    lv_maxValue = DataTableGetInt(true, libRWDR_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_MaxValue));

    // Implementation
    if (((lp_value >= lv_minValue) && (lp_value <= lv_maxValue))) {
        DataTableSetInt(true, libRWDR_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_CurValue), lp_value);
    }
    else {
        TriggerDebugOutput(1, StringToText(("Progress Bar (Unit) Value (" + IntToString(lp_value) + ") outside of set Min (" + IntToString(lv_minValue) + ") and Max (" + IntToString(lv_maxValue) + ").")), true);
    }
    libRWDR_gf_PU_UpdateProgressBarUnitOld(lp_unit);
}

void libRWDR_gf_MoveProgressBarUnitOld (unit lp_unit, int lp_offsetX, int lp_offsetY) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libRWDR_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_OffsetX), lp_offsetX);
    DataTableSetInt(true, libRWDR_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_OffsetY), lp_offsetY);
    libRWDR_gf_PU_UpdateProgressBarUnitOld(lp_unit);
}

void libRWDR_gf_SetProgresBarTitleUnitOld (unit lp_unit, text lp_titleText) {
    // Variable Declarations
    int lv_progressBarLabel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarLabel = c_invalidDialogControlId;

    // Implementation
    lv_progressBarLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libRWDR_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Label));
    libNtve_gf_SetDialogItemText(lv_progressBarLabel, lp_titleText, PlayerGroupAll());
}

void libRWDR_gf_SetProgressBarValueRangeUnitOld (unit lp_unit, int lp_minValue, int lp_maxValue) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libRWDR_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_MinValue), lp_minValue);
    DataTableSetInt(true, libRWDR_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_MaxValue), lp_maxValue);
    libRWDR_gf_PU_UpdateProgressBarUnitOld(lp_unit);
}

void libRWDR_gf_ShowHideProgressBarUnitOld (unit lp_unit, bool lp_showHide) {
    // Variable Declarations
    int lv_progressBarDialog;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarDialog = c_invalidDialogId;

    // Implementation
    lv_progressBarDialog = DataTableGetDialog(true, libRWDR_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog));
    DialogSetVisible(lv_progressBarDialog, PlayerGroupAll(), lp_showHide);
    libRWDR_gf_PU_UpdateProgressBarUnitOld(lp_unit);
}

void libRWDR_gf_PU_UpdateProgressBarUnitOld (unit lp_unit) {
    // Variable Declarations
    int lv_progressBarDialog;
    int lv_progressBarPanel;
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarProgressBar;
    const int lv_c_Width = 180;
    const int lv_c_Height = 12;
    string lv_dataTableString;
    string lv_attachmentPreset;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarDialog = c_invalidDialogId;
    lv_progressBarPanel = c_invalidDialogControlId;
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarProgressBar = c_invalidDialogControlId;
    lv_dataTableString = DataTableGetString(true, libRWDR_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_Attachment));
    lv_attachmentPreset = lv_dataTableString;

    // Implementation
    if (((lp_unit == null) || (UnitIsAlive(lp_unit) == false))) {
        libRWDR_gf_DestroyProgressBarUnitOld(lp_unit);
        return ;
    }

    lv_progressBarDialog = DataTableGetDialog(true, libRWDR_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog));
    if ((lv_progressBarDialog == c_invalidDialogId)) {
        return ;
    }

    lv_progressBarDialog = DataTableGetDialog(true, libRWDR_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog));
    lv_progressBarProgressBar = libNtve_gf_ValueFromDataTableDialogItem(true, libRWDR_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar));
    lv_progressBarValue = libNtve_gf_ValueFromDataTableDialogItem(true, libRWDR_gf_PU_ProgressBarUnit_DialogNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value));
    DialogSetPositionRelativeToUnit(lv_progressBarDialog, lp_unit, lv_attachmentPreset, DataTableGetInt(true, libRWDR_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_OffsetX)), DataTableGetInt(true, libRWDR_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_OffsetY)));
    libNtve_gf_SetDialogItemText(lv_progressBarValue, TextTimeFormat(StringToText("<sectotal/>"), DataTableGetInt(true, libRWDR_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_CurValue))), PlayerGroupAll());
    DialogControlSetSize(lv_progressBarProgressBar, PlayerGroupAll(), FixedToInt((lv_c_Width * ( (IntToFixed(DataTableGetInt(true, libRWDR_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_CurValue))) - IntToFixed(DataTableGetInt(true, libRWDR_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_MinValue)))) / (IntToFixed(DataTableGetInt(true, libRWDR_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_MaxValue))) - IntToFixed(DataTableGetInt(true, libRWDR_gf_PU_ProgressBarUnit_DataNameOld(lp_unit, libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_MinValue)))) ))), lv_c_Height);
    libNtve_gf_SetDialogItemColor(lv_progressBarProgressBar, libRWDR_gf_GetProgressBarColorCampaign(), PlayerGroupAll());
}

string libRWDR_gf_PU_ProgressBarUnit_DataNameOld (unit lp_unit, int lp_type) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int autoFEB5E49B_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = "ProgressBar_DataName_";
    autoFEB5E49B_val = lp_type;
    if (autoFEB5E49B_val == libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_Attachment) {
        lv_name = (lv_name + "_" + "Attachment");
    }
    else if (autoFEB5E49B_val == libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_CurValue) {
        lv_name = (lv_name + "_" + "CurValue");
    }
    else if (autoFEB5E49B_val == libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_MaxValue) {
        lv_name = (lv_name + "_" + "MaxValue");
    }
    else if (autoFEB5E49B_val == libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_MinValue) {
        lv_name = (lv_name + "_" + "MinValue");
    }
    else if (autoFEB5E49B_val == libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_OffsetX) {
        lv_name = (lv_name + "_" + "OffsetX");
    }
    else if (autoFEB5E49B_val == libRWDR_ge_PU_ProgressBarUnitStoredValuesOld_OffsetY) {
        lv_name = (lv_name + "_" + "OffsetY");
    }
    else {
    }
    lv_name = (lv_name + "_" + IntToString(UnitGetTag(lp_unit)));
    return lv_name;
}

string libRWDR_gf_PU_ProgressBarUnit_DialogNameOld (unit lp_unit, int lp_type) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int autoEB88499C_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = "ProgressBar_DialogType_";
    autoEB88499C_val = lp_type;
    if (autoEB88499C_val == libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog) {
        lv_name = (lv_name + "_" + "Dialog");
    }
    else if (autoEB88499C_val == libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Label) {
        lv_name = (lv_name + "_" + "Label");
    }
    else if (autoEB88499C_val == libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Panel) {
        lv_name = (lv_name + "_" + "Panel");
    }
    else if (autoEB88499C_val == libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar) {
        lv_name = (lv_name + "_" + "ProgressBar");
    }
    else if (autoEB88499C_val == libRWDR_ge_PU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value) {
        lv_name = (lv_name + "_" + "Value");
    }
    else {
    }
    lv_name = (lv_name + "_" + IntToString(UnitGetTag(lp_unit)));
    return lv_name;
}

trigger auto_libRWDR_gf_DisplayUnitProgressBar_Trigger = null;
unit auto_libRWDR_gf_DisplayUnitProgressBar_lp_unit;
text auto_libRWDR_gf_DisplayUnitProgressBar_lp_title;
int auto_libRWDR_gf_DisplayUnitProgressBar_lp_minValue;
int auto_libRWDR_gf_DisplayUnitProgressBar_lp_maxValue;
int auto_libRWDR_gf_DisplayUnitProgressBar_lp_style;

void libRWDR_gf_DisplayUnitProgressBar (unit lp_unit, text lp_title, int lp_minValue, int lp_maxValue, int lp_style) {
    auto_libRWDR_gf_DisplayUnitProgressBar_lp_unit = lp_unit;
    auto_libRWDR_gf_DisplayUnitProgressBar_lp_title = lp_title;
    auto_libRWDR_gf_DisplayUnitProgressBar_lp_minValue = lp_minValue;
    auto_libRWDR_gf_DisplayUnitProgressBar_lp_maxValue = lp_maxValue;
    auto_libRWDR_gf_DisplayUnitProgressBar_lp_style = lp_style;

    if (auto_libRWDR_gf_DisplayUnitProgressBar_Trigger == null) {
        auto_libRWDR_gf_DisplayUnitProgressBar_Trigger = TriggerCreate("auto_libRWDR_gf_DisplayUnitProgressBar_TriggerFunc");
    }

    TriggerExecute(auto_libRWDR_gf_DisplayUnitProgressBar_Trigger, false, false);
}

bool auto_libRWDR_gf_DisplayUnitProgressBar_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libRWDR_gf_DisplayUnitProgressBar_lp_unit;
    text lp_title = auto_libRWDR_gf_DisplayUnitProgressBar_lp_title;
    int lp_minValue = auto_libRWDR_gf_DisplayUnitProgressBar_lp_minValue;
    int lp_maxValue = auto_libRWDR_gf_DisplayUnitProgressBar_lp_maxValue;
    int lp_style = auto_libRWDR_gf_DisplayUnitProgressBar_lp_style;

    // Variable Declarations
    int lv_progressBar;
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarBorder;

    // Automatic Variable Declarations
    int autoC92DE368_val;
    int auto4097C5C7_val;

    // Variable Initialization
    lv_progressBar = c_invalidDialogControlId;
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarBorder = c_invalidDialogControlId;

    // Implementation
    if (((libNtve_gf_ValueFromDataTableDialogItem(true, libRWDR_gf_PU_UnitProgressBar_Dialog(lp_unit, libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Bar)) != c_invalidDialogControlId) || (libNtve_gf_ValueFromDataTableDialogItem(true, libRWDR_gf_PU_UnitProgressBar_Dialog(lp_unit, libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Broder)) != c_invalidDialogControlId) || (libNtve_gf_ValueFromDataTableDialogItem(true, libRWDR_gf_PU_UnitProgressBar_Dialog(lp_unit, libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Label)) != c_invalidDialogControlId) || (libNtve_gf_ValueFromDataTableDialogItem(true, libRWDR_gf_PU_UnitProgressBar_Dialog(lp_unit, libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Value)) != c_invalidDialogControlId))) {
        DialogControlDestroy(libNtve_gf_ValueFromDataTableDialogItem(true, libRWDR_gf_PU_UnitProgressBar_Dialog(lp_unit, libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Bar)));
        DialogControlDestroy(libNtve_gf_ValueFromDataTableDialogItem(true, libRWDR_gf_PU_UnitProgressBar_Dialog(lp_unit, libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Broder)));
        DialogControlDestroy(libNtve_gf_ValueFromDataTableDialogItem(true, libRWDR_gf_PU_UnitProgressBar_Dialog(lp_unit, libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Label)));
        DialogControlDestroy(libNtve_gf_ValueFromDataTableDialogItem(true, libRWDR_gf_PU_UnitProgressBar_Dialog(lp_unit, libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Value)));
    }

    UnitStatusBarOverride(lp_unit, c_unitStatusGroupAll);
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "NameLabel", lp_unit);
    lv_progressBarLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_progressBarLabel, lp_title, PlayerGroupAll());
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "ValueLabel", lp_unit);
    lv_progressBarValue = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "BarImage", lp_unit);
    lv_progressBar = DialogControlLastCreated();
    autoC92DE368_val = lp_style;
    if (autoC92DE368_val == libRWDR_ge_PU_UnitProgressBar_Style_Protoss) {
        libNtve_gf_SetDialogItemImage(lv_progressBar, "Assets\\Textures\\ui_void_shared_progressbarfill.dds", PlayerGroupAll());
    }
    else if (autoC92DE368_val == libRWDR_ge_PU_UnitProgressBar_Style_Terran) {
        libNtve_gf_SetDialogItemImage(lv_progressBar, "Assets\\Textures\\ui_void_shared_progressbarfill_terr.dds", PlayerGroupAll());
    }
    else if (autoC92DE368_val == libRWDR_ge_PU_UnitProgressBar_Style_Zerg) {
        libNtve_gf_SetDialogItemImage(lv_progressBar, "Assets\\Textures\\ui_void_shared_progressbarfill_zerg.dds", PlayerGroupAll());
    }
    else {
    }
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "BorderImage", lp_unit);
    lv_progressBarBorder = DialogControlLastCreated();
    auto4097C5C7_val = lp_style;
    if (auto4097C5C7_val == libRWDR_ge_PU_UnitProgressBar_Style_Protoss) {
        libNtve_gf_SetDialogItemImage(lv_progressBarBorder, "Assets\\Textures\\ui_void_shared_progressbarframe.dds", PlayerGroupAll());
    }
    else if (auto4097C5C7_val == libRWDR_ge_PU_UnitProgressBar_Style_Terran) {
        libNtve_gf_SetDialogItemImage(lv_progressBarBorder, "Assets\\Textures\\ui_void_shared_progressbarframe_terr.dds", PlayerGroupAll());
    }
    else if (auto4097C5C7_val == libRWDR_ge_PU_UnitProgressBar_Style_Zerg) {
        libNtve_gf_SetDialogItemImage(lv_progressBarBorder, "Assets\\Textures\\ui_void_shared_progressbarframe_zerg.dds", PlayerGroupAll());
    }
    else {
    }
    libNtve_gf_SaveDataTableValueDialogItem(true, libRWDR_gf_PU_UnitProgressBar_Dialog(lp_unit, libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Label), lv_progressBarLabel);
    libNtve_gf_SaveDataTableValueDialogItem(true, libRWDR_gf_PU_UnitProgressBar_Dialog(lp_unit, libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Value), lv_progressBarValue);
    libNtve_gf_SaveDataTableValueDialogItem(true, libRWDR_gf_PU_UnitProgressBar_Dialog(lp_unit, libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Bar), lv_progressBar);
    libNtve_gf_SaveDataTableValueDialogItem(true, libRWDR_gf_PU_UnitProgressBar_Dialog(lp_unit, libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Broder), lv_progressBarBorder);
    DataTableSetInt(true, libRWDR_gf_PU_UnitProgressBar_Data(lp_unit, libRWDR_ge_PU_UnitProgressBarDataName_MinValue), lp_minValue);
    DataTableSetInt(true, libRWDR_gf_PU_UnitProgressBar_Data(lp_unit, libRWDR_ge_PU_UnitProgressBarDataName_MaxValue), lp_maxValue);
    DataTableSetInt(true, libRWDR_gf_PU_UnitProgressBar_Data(lp_unit, libRWDR_ge_PU_UnitProgressBarDataName_CurValue), lp_minValue);
    libRWDR_gf_ShowHideUnitProgressBar(lp_unit, true);
    libRWDR_gf_PU_UpdateUnitProgressBar(lp_unit);
    return true;
}

void libRWDR_gf_SetUnitProgressBarProgress (unit lp_unit, int lp_value) {
    // Variable Declarations
    int lv_realValue;
    int lv_realValue2;
    int lv_minValue;
    int lv_maxValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minValue = DataTableGetInt(true, libRWDR_gf_PU_UnitProgressBar_Data(lp_unit, libRWDR_ge_PU_UnitProgressBarDataName_MinValue));
    lv_maxValue = DataTableGetInt(true, libRWDR_gf_PU_UnitProgressBar_Data(lp_unit, libRWDR_ge_PU_UnitProgressBarDataName_MaxValue));

    // Implementation
    lv_realValue = lp_value;
    if ((lv_minValue > lv_maxValue)) {
        lv_realValue2 = lv_minValue;
        lv_minValue = lv_maxValue;
        lv_maxValue = lv_realValue2;
    }

    if ((lp_value < lv_minValue)) {
        lv_realValue = lv_minValue;
    }
    else {
        if ((lp_value > lv_maxValue)) {
            lv_realValue = lv_maxValue;
        }

    }
    DataTableSetInt(true, libRWDR_gf_PU_UnitProgressBar_Data(lp_unit, libRWDR_ge_PU_UnitProgressBarDataName_CurValue), lv_realValue);
    libRWDR_gf_PU_UpdateUnitProgressBar(lp_unit);
}

void libRWDR_gf_SetUnitProgresBarTitle (unit lp_unit, text lp_titleText) {
    // Variable Declarations
    int lv_progressBarLabel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarLabel = c_invalidDialogControlId;

    // Implementation
    lv_progressBarLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libRWDR_gf_PU_UnitProgressBar_Dialog(lp_unit, libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Label));
    libNtve_gf_SetDialogItemText(lv_progressBarLabel, lp_titleText, PlayerGroupAll());
}

void libRWDR_gf_SetUnitProgressBarValueRange (unit lp_unit, int lp_minValue, int lp_maxValue) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libRWDR_gf_PU_UnitProgressBar_Data(lp_unit, libRWDR_ge_PU_UnitProgressBarDataName_MinValue), lp_minValue);
    DataTableSetInt(true, libRWDR_gf_PU_UnitProgressBar_Data(lp_unit, libRWDR_ge_PU_UnitProgressBarDataName_MaxValue), lp_maxValue);
    libRWDR_gf_SetUnitProgressBarProgress(lp_unit, DataTableGetInt(true, libRWDR_gf_PU_UnitProgressBar_Dialog(lp_unit, libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Value)));
}

void libRWDR_gf_ShowHideUnitProgressBar (unit lp_unit, bool lp_showHide) {
    // Variable Declarations
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarBar;
    int lv_progressBarBorder;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarBar = c_invalidDialogControlId;
    lv_progressBarBorder = c_invalidDialogControlId;

    // Implementation
    UnitStatusBarOverride(lp_unit, c_unitStatusGroupAll);
    lv_progressBarLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libRWDR_gf_PU_UnitProgressBar_Dialog(lp_unit, libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Label));
    DialogControlSetVisible(lv_progressBarLabel, PlayerGroupAll(), lp_showHide);
    lv_progressBarValue = libNtve_gf_ValueFromDataTableDialogItem(true, libRWDR_gf_PU_UnitProgressBar_Dialog(lp_unit, libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Value));
    DialogControlSetVisible(lv_progressBarValue, PlayerGroupAll(), lp_showHide);
    lv_progressBarBar = libNtve_gf_ValueFromDataTableDialogItem(true, libRWDR_gf_PU_UnitProgressBar_Dialog(lp_unit, libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Bar));
    DialogControlSetVisible(lv_progressBarBar, PlayerGroupAll(), lp_showHide);
    lv_progressBarBorder = libNtve_gf_ValueFromDataTableDialogItem(true, libRWDR_gf_PU_UnitProgressBar_Dialog(lp_unit, libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Broder));
    DialogControlSetVisible(lv_progressBarBorder, PlayerGroupAll(), lp_showHide);
    libRWDR_gf_PU_UpdateUnitProgressBar(lp_unit);
}

void libRWDR_gf_PU_UpdateUnitProgressBar (unit lp_unit) {
    // Variable Declarations
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarProgressBar;
    const int lv_c_Width = 252;
    const int lv_c_Height = 12;
    string lv_dataTableString;
    string lv_attachmentPreset;
    fixed lv_progressBarWidth;
    int lv_minValue;
    int lv_curValue;
    int lv_maxValue;
    int lv_swapValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarProgressBar = c_invalidDialogControlId;
    lv_attachmentPreset = lv_dataTableString;

    // Implementation
    lv_minValue = DataTableGetInt(true, libRWDR_gf_PU_UnitProgressBar_Data(lp_unit, libRWDR_ge_PU_UnitProgressBarDataName_MinValue));
    lv_maxValue = DataTableGetInt(true, libRWDR_gf_PU_UnitProgressBar_Data(lp_unit, libRWDR_ge_PU_UnitProgressBarDataName_MaxValue));
    lv_curValue = DataTableGetInt(true, libRWDR_gf_PU_UnitProgressBar_Data(lp_unit, libRWDR_ge_PU_UnitProgressBarDataName_CurValue));
    lv_progressBarProgressBar = libNtve_gf_ValueFromDataTableDialogItem(true, libRWDR_gf_PU_UnitProgressBar_Dialog(lp_unit, libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Bar));
    lv_progressBarValue = libNtve_gf_ValueFromDataTableDialogItem(true, libRWDR_gf_PU_UnitProgressBar_Dialog(lp_unit, libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Value));
    if (((lv_progressBarProgressBar == c_invalidDialogControlId) || (lv_progressBarValue == c_invalidDialogControlId))) {
        return ;
    }

    libNtve_gf_SetDialogItemText(lv_progressBarValue, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lv_curValue), PlayerGroupAll());
    if ((lv_minValue > lv_maxValue)) {
        lv_swapValue = lv_minValue;
        lv_minValue = lv_maxValue;
        lv_maxValue = lv_swapValue;
        lv_curValue = (lv_maxValue-lv_curValue);
    }

    lv_progressBarWidth = (lv_c_Width * ( (IntToFixed(lv_curValue) - IntToFixed(lv_minValue)) / (IntToFixed(lv_maxValue) - IntToFixed(lv_minValue)) ));
    DialogControlSetSize(lv_progressBarProgressBar, PlayerGroupAll(), MaxI(FixedToInt(lv_progressBarWidth), 1), lv_c_Height);
}

string libRWDR_gf_PU_UnitProgressBar_Data (unit lp_unit, int lp_type) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int auto025E9386_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = "ProgressBar_DataName_";
    auto025E9386_val = lp_type;
    if (auto025E9386_val == libRWDR_ge_PU_UnitProgressBarDataName_CurValue) {
        lv_name = (lv_name + "_" + "CurValue");
    }
    else if (auto025E9386_val == libRWDR_ge_PU_UnitProgressBarDataName_MaxValue) {
        lv_name = (lv_name + "_" + "MaxValue");
    }
    else if (auto025E9386_val == libRWDR_ge_PU_UnitProgressBarDataName_MinValue) {
        lv_name = (lv_name + "_" + "MinValue");
    }
    else {
    }
    lv_name = (lv_name + "_" + IntToString(UnitGetTag(lp_unit)));
    return lv_name;
}

string libRWDR_gf_PU_UnitProgressBar_Dialog (unit lp_unit, int lp_type) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int autoBF5AC4E1_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = "ProgressBar_DialogType_";
    autoBF5AC4E1_val = lp_type;
    if (autoBF5AC4E1_val == libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Label) {
        lv_name = (lv_name + "_" + "Label");
    }
    else if (autoBF5AC4E1_val == libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Value) {
        lv_name = (lv_name + "_" + "Value");
    }
    else if (autoBF5AC4E1_val == libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Bar) {
        lv_name = (lv_name + "_" + "ProgressBar");
    }
    else if (autoBF5AC4E1_val == libRWDR_ge_PU_UnitProgressBar_DialogTypes_ProgressBar_Broder) {
        lv_name = (lv_name + "_" + "ProgressBarBorder");
    }
    else {
    }
    lv_name = (lv_name + "_" + IntToString(UnitGetTag(lp_unit)));
    return lv_name;
}

void libRWDR_gf_rwdrSetUnitInfoTextCampaign (unit lp_unit, text lp_info, text lp_tip, text lp_subTip) {
    // Variable Declarations
    text lv_tipStyled;
    text lv_subTipStyled;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_tip != null)) {
        TextExpressionSetToken("Param/Expression/lib_RWDR_C3DCF0B8", "A", lp_tip);
        lv_tipStyled = TextExpressionAssemble("Param/Expression/lib_RWDR_C3DCF0B8");
    }
    else {
        lv_tipStyled = lp_tip;
    }
    if ((lp_subTip != null)) {
        TextExpressionSetToken("Param/Expression/lib_RWDR_7D818979", "A", lp_subTip);
        lv_subTipStyled = TextExpressionAssemble("Param/Expression/lib_RWDR_7D818979");
    }
    else {
        lv_subTipStyled = lp_subTip;
    }
    UnitSetInfoText(lp_unit, lp_info, lv_tipStyled, lv_subTipStyled);
    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void libRWDR_gf_rwdrSetUnitInfoTextCampaignDetailed (unit lp_unit, text lp_info, text lp_tip, text lp_subTip) {
    // Variable Declarations
    text lv_tipStyled;
    text lv_subTipStyled;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_tip != null)) {
        TextExpressionSetToken("Param/Expression/lib_RWDR_A6AAF84C", "A", lp_tip);
        lv_tipStyled = TextExpressionAssemble("Param/Expression/lib_RWDR_A6AAF84C");
    }
    else {
        lv_tipStyled = lp_tip;
    }
    if ((lp_subTip != null)) {
        TextExpressionSetToken("Param/Expression/lib_RWDR_5EACB904", "A", lp_subTip);
        lv_subTipStyled = TextExpressionAssemble("Param/Expression/lib_RWDR_5EACB904");
    }
    else {
        lv_subTipStyled = lp_subTip;
    }
    UnitSetInfoText(lp_unit, lp_info, lv_tipStyled, lv_subTipStyled);
    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void libRWDR_gf_RescueUnitSCMR (unit lp_unit, int lp_player, bool lp_changeColor, int lp_protosseffect) {
    // Variable Declarations
    fixed lv_lifePercent;
    fixed lv_shieldsPercent;
    fixed lv_energyPercent;

    // Automatic Variable Declarations
    int autoB68F3500_val;

    // Variable Initialization

    // Implementation
    SoundPlay(SoundLink("UI_TerranRescueUnit", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
    UnitFlashSelection(lp_unit, 3.0);
    autoB68F3500_val = lp_protosseffect;
    if (autoB68F3500_val == libRWDR_ge_ZergOrProtossRescueEffect_Protoss) {
        UnitBehaviorAdd(lp_unit, "Rescued", lp_unit, 1);
    }
    else if (autoB68F3500_val == libRWDR_ge_ZergOrProtossRescueEffect_Zerg) {
        UnitBehaviorAdd(lp_unit, "RescuedZerg", lp_unit, 1);
    }
    else {
    }
    lv_lifePercent = UnitGetPropertyFixed(lp_unit, c_unitPropLifePercent, c_unitPropCurrent);
    lv_shieldsPercent = UnitGetPropertyFixed(lp_unit, c_unitPropShieldsPercent, c_unitPropCurrent);
    lv_energyPercent = UnitGetPropertyFixed(lp_unit, c_unitPropEnergyPercent, c_unitPropCurrent);
    UnitSetOwner(lp_unit, lp_player, lp_changeColor);
    UnitSetPropertyFixed(lp_unit, c_unitPropLifePercent, lv_lifePercent);
    UnitSetPropertyFixed(lp_unit, c_unitPropShieldsPercent, lv_shieldsPercent);
    UnitSetPropertyFixed(lp_unit, c_unitPropEnergyPercent, lv_energyPercent);
}

void libRWDR_gf_RescueUnitGroupSCMR (unitgroup lp_unit, int lp_player, bool lp_changeColor, int lp_protosseffect) {
    // Variable Declarations
    unit lv_e794A8E4BA8EE58D95E4BD8D;

    // Automatic Variable Declarations
    unitgroup autoB52B30EA_g;
    int autoB52B30EA_u;

    // Variable Initialization

    // Implementation
    autoB52B30EA_g = lp_unit;
    autoB52B30EA_u = UnitGroupCount(autoB52B30EA_g, c_unitCountAll);
    for (;; autoB52B30EA_u -= 1) {
        lv_e794A8E4BA8EE58D95E4BD8D = UnitGroupUnitFromEnd(autoB52B30EA_g, autoB52B30EA_u);
        if (lv_e794A8E4BA8EE58D95E4BD8D == null) { break; }
        libRWDR_gf_RescueUnitSCMR(lv_e794A8E4BA8EE58D95E4BD8D, lp_player, lp_changeColor, lp_protosseffect);
    }
}

void libRWDR_gf_CreateObjectivePing (bool lp_objectiveType, point lp_position, text lp_tooltip) {
    // Variable Declarations
    color lv_color;
    fixed lv_scale;
    string lv_model;

    // Automatic Variable Declarations
    bool auto5CF4D683_val;

    // Variable Initialization
    lv_color = Color(0,0,0);

    // Implementation
    auto5CF4D683_val = lp_objectiveType;
    if (auto5CF4D683_val == true) {
        lv_color = Color(0.00, 100.00, 0.00);
        lv_scale = 1.0;
        lv_model = "PingObjective";
    }
    else if (auto5CF4D683_val == false) {
        lv_color = Color(100.00, 100.00, 0.00);
        lv_scale = 0.8;
        lv_model = "PingBonus";
    }
    else {
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), lv_model, lp_position, lv_color, 0.0, 270.0);
    PingSetScale(PingLastCreated(), lv_scale);
    PingSetTooltip(PingLastCreated(), lp_tooltip);
    TriggerExecute(libRWDR_gt_SwarmPingSound, true, false);
}

trigger auto_libRWDR_gf_PingMinimapCampaign_Trigger = null;
playergroup auto_libRWDR_gf_PingMinimapCampaign_lp_players;
point auto_libRWDR_gf_PingMinimapCampaign_lp_pos;
fixed auto_libRWDR_gf_PingMinimapCampaign_lp_dur;
color auto_libRWDR_gf_PingMinimapCampaign_lp_color;

void libRWDR_gf_PingMinimapCampaign (playergroup lp_players, point lp_pos, fixed lp_dur, color lp_color) {
    auto_libRWDR_gf_PingMinimapCampaign_lp_players = lp_players;
    auto_libRWDR_gf_PingMinimapCampaign_lp_pos = lp_pos;
    auto_libRWDR_gf_PingMinimapCampaign_lp_dur = lp_dur;
    auto_libRWDR_gf_PingMinimapCampaign_lp_color = lp_color;

    if (auto_libRWDR_gf_PingMinimapCampaign_Trigger == null) {
        auto_libRWDR_gf_PingMinimapCampaign_Trigger = TriggerCreate("auto_libRWDR_gf_PingMinimapCampaign_TriggerFunc");
    }

    TriggerExecute(auto_libRWDR_gf_PingMinimapCampaign_Trigger, false, false);
}

bool auto_libRWDR_gf_PingMinimapCampaign_TriggerFunc (bool testConds, bool runActions) {
    playergroup lp_players = auto_libRWDR_gf_PingMinimapCampaign_lp_players;
    point lp_pos = auto_libRWDR_gf_PingMinimapCampaign_lp_pos;
    fixed lp_dur = auto_libRWDR_gf_PingMinimapCampaign_lp_dur;
    color lp_color = auto_libRWDR_gf_PingMinimapCampaign_lp_color;

    // Automatic Variable Declarations
    playergroup auto3C1BA725_g;
    int auto3C1BA725_var;
    string autoB73034A9_val;

    // Implementation
    auto3C1BA725_g = lp_players;
    auto3C1BA725_var = -1;
    while (true) {
        auto3C1BA725_var = PlayerGroupNextPlayer(auto3C1BA725_g, auto3C1BA725_var);
        if (auto3C1BA725_var < 0) { break; }
        autoB73034A9_val = PlayerRace(auto3C1BA725_var);
        if (autoB73034A9_val == "Prot") {
            SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupSingle(auto3C1BA725_var), 100.0, 0.0);
        }
        else if (autoB73034A9_val == "Terr") {
            SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupSingle(auto3C1BA725_var), 100.0, 0.0);
        }
        else if (autoB73034A9_val == "Zerg") {
            SoundPlay(SoundLink("UI_ZergWarningPing", -1), PlayerGroupSingle(auto3C1BA725_var), 100.0, 0.0);
        }
        else {
        }
    }
    libNtve_gf_CreatePingFacingAngle(lp_players, "PingAlert", lp_pos, lp_color, lp_dur, 270.0);
    Wait(lp_dur, c_timeGame);
    PingDestroy(PingLastCreated());
    return true;
}

void libRWDR_gf_CreateHeroPing (unit lp_unit, int lp_heroPingType) {
    // Variable Declarations
    int lv_ping;

    // Automatic Variable Declarations
    string auto5E647EF7_val;

    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Implementation
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingCircle", UnitGetPosition(lp_unit), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    lv_ping = PingLastCreated();
    PingSetScale(lv_ping, 0.4);
    PingSetUnit(lv_ping, lp_unit);
    auto5E647EF7_val = UnitGetType(lp_unit);
    if (auto5E647EF7_val == "Tolaris") {
        PingSetColor(lv_ping, Color(0.00, 65.49, 38.43));
    }
    else if (auto5E647EF7_val == "Delanar") {
        PingSetColor(lv_ping, Color(92.16, 88.24, 16.08));
    }
    else if (auto5E647EF7_val == "Avalax") {
        PingSetColor(lv_ping, Color(10.98, 65.49, 91.76));
    }
    else if (auto5E647EF7_val == "ByronHuman") {
        PingSetColor(lv_ping, Color(10.98, 65.49, 91.76));
    }
    else if (auto5E647EF7_val == "BarryClark") {
        PingSetColor(lv_ping, Color(100.00, 0.00, 0.00));
    }
    else if (auto5E647EF7_val == "Eledis") {
        PingSetColor(lv_ping, Color(0.00, 0.00, 100.00));
    }
    else if (auto5E647EF7_val == "FenixBoss") {
        PingSetColor(lv_ping, Color(100.00, 100.00, 0.00));
    }
    else if (auto5E647EF7_val == "HeroVorazun") {
        PingSetColor(lv_ping, Color(41.18, 13.33, 87.45));
    }
    else if (auto5E647EF7_val == "TolarisArchon") {
        PingSetColor(lv_ping, Color(0.00, 65.49, 38.43));
    }
    else {
        PingSetUseUnitTeamColor(lv_ping, true);
    }
    PingSetUseUnitVisibility(lv_ping, true);
}

string libRWDR_gf_PM_ReticleModelOfStyle (int lp_type, int lp_size) {
    // Variable Declarations
    string lv_model;

    // Automatic Variable Declarations
    int auto37C9521F_val;
    int autoD8C6D054_val;
    int auto28203088_val;
    int auto223DA5C2_val;

    // Variable Initialization

    // Implementation
    auto37C9521F_val = lp_size;
    if (auto37C9521F_val == libRWDR_ge_SCMRReticleSize_Large) {
        autoD8C6D054_val = lp_type;
        if (autoD8C6D054_val == libRWDR_ge_SCMRReticleType_ProtossBonusObjective) {
            lv_model = "BriefingUnitSelectProtossLarge";
        }
        else if (autoD8C6D054_val == libRWDR_ge_SCMRReticleType_ProtossEnemy) {
            lv_model = "BriefingUnitSelectProtossLarge";
        }
        else if (autoD8C6D054_val == libRWDR_ge_SCMRReticleType_ProtossMainObjective) {
            lv_model = "BriefingUnitSelectProtossLarge";
        }
        else if (autoD8C6D054_val == libRWDR_ge_SCMRReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelectLarge";
        }
        else if (autoD8C6D054_val == libRWDR_ge_SCMRReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectLargeRed";
        }
        else if (autoD8C6D054_val == libRWDR_ge_SCMRReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelectLarge";
        }
        else if (autoD8C6D054_val == libRWDR_ge_SCMRReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectLargeZergGreen";
        }
        else if (autoD8C6D054_val == libRWDR_ge_SCMRReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectLargeZergRed";
        }
        else if (autoD8C6D054_val == libRWDR_ge_SCMRReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectLargeZergGreen";
        }
        else {
        }
    }
    else if (auto37C9521F_val == libRWDR_ge_SCMRReticleSize_Medium) {
        auto28203088_val = lp_type;
        if (auto28203088_val == libRWDR_ge_SCMRReticleType_ProtossBonusObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (auto28203088_val == libRWDR_ge_SCMRReticleType_ProtossEnemy) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (auto28203088_val == libRWDR_ge_SCMRReticleType_ProtossMainObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (auto28203088_val == libRWDR_ge_SCMRReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelect";
        }
        else if (auto28203088_val == libRWDR_ge_SCMRReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectRed";
        }
        else if (auto28203088_val == libRWDR_ge_SCMRReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelect";
        }
        else if (auto28203088_val == libRWDR_ge_SCMRReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectZergGreen";
        }
        else if (auto28203088_val == libRWDR_ge_SCMRReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectZergRed";
        }
        else if (auto28203088_val == libRWDR_ge_SCMRReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectZergGreen";
        }
        else {
        }
    }
    else if (auto37C9521F_val == libRWDR_ge_SCMRReticleSize_Small) {
        auto223DA5C2_val = lp_type;
        if (auto223DA5C2_val == libRWDR_ge_SCMRReticleType_ProtossBonusObjective) {
            lv_model = "BriefingUnitSelectProtossSmall";
        }
        else if (auto223DA5C2_val == libRWDR_ge_SCMRReticleType_ProtossEnemy) {
            lv_model = "BriefingUnitSelectProtossSmall";
        }
        else if (auto223DA5C2_val == libRWDR_ge_SCMRReticleType_ProtossMainObjective) {
            lv_model = "BriefingUnitSelectProtossSmall";
        }
        else if (auto223DA5C2_val == libRWDR_ge_SCMRReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelectSmall";
        }
        else if (auto223DA5C2_val == libRWDR_ge_SCMRReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectRedSmall";
        }
        else if (auto223DA5C2_val == libRWDR_ge_SCMRReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelectSmall";
        }
        else if (auto223DA5C2_val == libRWDR_ge_SCMRReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectZergSmallGreen";
        }
        else if (auto223DA5C2_val == libRWDR_ge_SCMRReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectZergSmallRed";
        }
        else if (auto223DA5C2_val == libRWDR_ge_SCMRReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectZergSmallGreen";
        }
        else {
        }
    }
    else {
    }
    return lv_model;
}

string libRWDR_gf_PM_ReticleTextFontOfStyle (int lp_type) {
    // Variable Declarations
    string lv_fontStyle;

    // Automatic Variable Declarations
    int auto384514A0_val;

    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    auto384514A0_val = lp_type;
    if (auto384514A0_val == libRWDR_ge_SCMRReticleType_ProtossBonusObjective) {
        lv_fontStyle = "VoidReticleProtossBonusObjective";
    }
    else if (auto384514A0_val == libRWDR_ge_SCMRReticleType_ProtossEnemy) {
        lv_fontStyle = "VoidReticleProtossEnemy";
    }
    else if (auto384514A0_val == libRWDR_ge_SCMRReticleType_ProtossMainObjective) {
        lv_fontStyle = "VoidReticleProtossMainObjective";
    }
    else if (auto384514A0_val == libRWDR_ge_SCMRReticleType_TerranBonusObjective) {
        lv_fontStyle = "VoidReticleTerranBonusObjective";
    }
    else if (auto384514A0_val == libRWDR_ge_SCMRReticleType_TerranEnemy) {
        lv_fontStyle = "VoidReticleTerranEnemy";
    }
    else if (auto384514A0_val == libRWDR_ge_SCMRReticleType_TerranMainObjective) {
        lv_fontStyle = "VoidReticleTerranMainObjective";
    }
    else if (auto384514A0_val == libRWDR_ge_SCMRReticleType_ZergBonusObjective) {
        lv_fontStyle = "VoidReticleZergBonusObjective";
    }
    else if (auto384514A0_val == libRWDR_ge_SCMRReticleType_ZergEnemy) {
        lv_fontStyle = "VoidReticleZergEnemy";
    }
    else if (auto384514A0_val == libRWDR_ge_SCMRReticleType_ZergMainObjective) {
        lv_fontStyle = "VoidReticleZergMainObjective";
    }
    else {
    }
    return lv_fontStyle;
}

void libRWDR_gf_SCMR_ReticleApplyTint (actor lp_reticle, int lp_type) {
    // Automatic Variable Declarations
    int auto227172AD_val;

    // Implementation
    auto227172AD_val = lp_type;
    if (auto227172AD_val == libRWDR_ge_SCMRReticleType_ProtossMainObjective) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTeamColor NULL 0,255,0");
    }
    else if (auto227172AD_val == libRWDR_ge_SCMRReticleType_ProtossEnemy) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTeamColor NULL 255,0,0");
    }
    else if (auto227172AD_val == libRWDR_ge_SCMRReticleType_ProtossBonusObjective) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTeamColor NULL 0,255,0");
    }
    else {
    }
}

void libRWDR_gf_CreateSCMRReticleEffectAndTextTagAtPoint (int lp_type, int lp_size, text lp_text, point lp_location) {
    // Variable Declarations
    string lv_model;
    string lv_fontStyle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    lv_model = libRWDR_gf_PM_ReticleModelOfStyle(lp_type, lp_size);
    if ((lv_model == null)) {
        return ;
    }

    libNtve_gf_CreateModelAtPoint(lv_model, lp_location);
    libRWDR_gf_SCMR_ReticleApplyTint(libNtve_gf_ActorLastCreated(), lp_type);
    if (((lp_text != null) == false)) {
        return ;
    }

    lv_fontStyle = libRWDR_gf_PM_ReticleTextFontOfStyle(lp_type);
    TextExpressionSetToken("Param/Expression/lib_RWDR_A90980C4", "Style", StringToText((lv_fontStyle)));
    TextExpressionSetToken("Param/Expression/lib_RWDR_A90980C4", "A", lp_text);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_RWDR_A90980C4"), 24, lp_location, 1.0, true, true, PlayerGroupSingle(1));
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
}

void libRWDR_gf_AttachReticleEffectAndTextTagOnUnit (int lp_type, int lp_size, text lp_text, unit lp_target, string lp_attachPoint) {
    // Variable Declarations
    string lv_model;
    string lv_fontStyle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    lv_model = libRWDR_gf_PM_ReticleModelOfStyle(lp_type, lp_size);
    if ((lv_model == null)) {
        return ;
    }

    libNtve_gf_AttachModelToUnitInheritVisibility(lp_target, lv_model, lp_attachPoint);
    libRWDR_gf_SCMR_ReticleApplyTint(libNtve_gf_ActorLastCreated(), lp_type);
    if (((lp_text != null) == false)) {
        return ;
    }

    lv_fontStyle = libRWDR_gf_PM_ReticleTextFontOfStyle(lp_type);
    TextExpressionSetToken("Param/Expression/lib_RWDR_54B3301C", "Style", StringToText((lv_fontStyle)));
    TextExpressionSetToken("Param/Expression/lib_RWDR_54B3301C", "A", lp_text);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_RWDR_54B3301C"), 24, UnitGetPosition(lp_target), 0.0, true, true, PlayerGroupSingle(1));
    TextTagAttachToUnit(TextTagLastCreated(), lp_target, 1.0);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
}

void libRWDR_gf_SCMR_PannelInit () {
    // Automatic Variable Declarations
    string autoD6E16206_val;

    // Implementation
    if ((libRWDR_gv_scmr_PanelInitialized == true)) {
        return ;
    }

    libRWDR_gv_scmr_PanelInitialized = true;
    if ((libRWDR_gv_scmr_PanelHolder == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/GlobalCastingPanel");
        libRWDR_gv_scmr_PanelHolder = DialogControlLastCreated();
        DialogControlSetVisible(libRWDR_gv_scmr_PanelHolder, PlayerGroupAll(), false);
    }

    autoD6E16206_val = PlayerRace(1);
    if (autoD6E16206_val == "Zerg") {
        libRWDR_gf_SCMR_PanelInitDehaka();
    }
    else if (autoD6E16206_val == "Terr") {
        libRWDR_gf_SCMR_PanelInitNova();
    }
    else if (autoD6E16206_val == "Prot") {
        libRWDR_gf_SCMR_PanelInitProtoss();
    }
    else {
    }
}

void libRWDR_gf_SCMR_PanelInitNova () {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int auto7F990A3F_ae = 4;
    const int auto7F990A3F_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlCreateInPanelFromTemplate(libRWDR_gv_scmr_PanelHolder, c_triggerControlTypePanel, "Coop_GlobalCastingTemplates/TerranCasterPanelTemplate");
    libRWDR_gv_scmr_Panel = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scmr_Panel, c_triggerControlTypeCutscene, "TerranCommandCutscene");
    libRWDR_gv_scmr_Cutscene = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scmr_Panel, c_triggerControlTypePanel, "ButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "Coop_GlobalCastingTemplates/TerranGlobalCommandPanelTemplate");
    libRWDR_gv_scmr_CommandPanel = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (auto7F990A3F_ai >= 0 && lv_buttonIndex <= auto7F990A3F_ae) || (auto7F990A3F_ai < 0 && lv_buttonIndex >= auto7F990A3F_ae) ) ; lv_buttonIndex += auto7F990A3F_ai ) {
        DialogControlHookup(libRWDR_gv_scmr_CommandPanel, c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libRWDR_gv_scmr_CommandButtons[lv_buttonIndex] = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_scmr_Panel, c_triggerControlTypePanel, "AbilityArrow0" + IntToString(lv_buttonIndex));
        libRWDR_gv_scmr_CommandButtonArrows[lv_buttonIndex] = DialogControlLastCreated();
        DialogControlSetPositionRelative(libRWDR_gv_scmr_CommandButtonArrows[lv_buttonIndex], PlayerGroupAll(), c_anchorTop, libRWDR_gv_scmr_CommandButtons[lv_buttonIndex], c_anchorBottom, 0, 15);
    }
    DialogControlSetVisible(libRWDR_gv_scmr_Panel, PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemCutscene(libRWDR_gv_scmr_Cutscene, "Cutscenes\\UI_TerranCastingPanel.SC2Cutscene", PlayerGroupAll());
    CutscenePlay(CutsceneGetTriggerControl(libRWDR_gv_scmr_Cutscene));
    libRWDR_gv_scmr_CutsceneFilter = "Nova";
}

void libRWDR_gf_SCMR_PanelInitProtoss () {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int auto06024749_ae = 4;
    const int auto06024749_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    TriggerEnable(libRWDR_gt_SCMR_SoaVitalCharges, true);
    DialogControlCreateInPanelFromTemplate(libRWDR_gv_scmr_PanelHolder, c_triggerControlTypePanel, "Coop_GlobalCastingTemplates/ProtossCasterPanelTemplate");
    libRWDR_gv_scmr_Panel = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scmr_Panel, c_triggerControlTypePanel, "SoAButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "LotV_SoAMissionUIPanel/SoACommandPanelTemplate");
    libRWDR_gv_scmr_CommandPanel = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (auto06024749_ai >= 0 && lv_buttonIndex <= auto06024749_ae) || (auto06024749_ai < 0 && lv_buttonIndex >= auto06024749_ae) ) ; lv_buttonIndex += auto06024749_ai ) {
        DialogControlHookup(libRWDR_gv_scmr_CommandPanel, c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libRWDR_gv_scmr_CommandButtons[lv_buttonIndex] = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_scmr_Panel, c_triggerControlTypePanel, "AbilityArrow0" + IntToString(lv_buttonIndex));
        libRWDR_gv_scmr_CommandButtonArrows[lv_buttonIndex] = DialogControlLastCreated();
        DialogControlSetPositionRelative(libRWDR_gv_scmr_CommandButtonArrows[lv_buttonIndex], PlayerGroupAll(), c_anchorTop, libRWDR_gv_scmr_CommandButtons[lv_buttonIndex], c_anchorBottom, 0, 15);
    }
    DialogControlHookup(libRWDR_gv_scmr_Panel, c_triggerControlTypePanel, "SoAEnergyTooltipHitFrame");
    libRWDR_gv_scmr_EnergyTooltip = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scmr_Panel, c_triggerControlTypePanel, "SoAEnergyBarFill");
    libRWDR_gv_scmr_EnergyBar = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scmr_Panel, c_triggerControlTypeLabel, "SoAEnergyLabel");
    libRWDR_gv_scmr_EnergyLabel = DialogControlLastCreated();
    DialogControlSetVisible(libRWDR_gv_scmr_Panel, PlayerGroupAll(), false);
    DialogControlHookup(libRWDR_gv_scmr_Panel, c_triggerControlTypeCutscene, "SoACommandCutscene");
    libRWDR_gv_scmr_Cutscene = DialogControlLastCreated();
    libNtve_gf_SetDialogItemCutscene(libRWDR_gv_scmr_Cutscene, "Cutscenes\\UI_SoAMission.SC2Cutscene", PlayerGroupAll());
    CutscenePlay(CutsceneGetTriggerControl(libRWDR_gv_scmr_Cutscene));
    DialogControlHookup(libRWDR_gv_scmr_EnergyBar, c_triggerControlTypeCutscene, "SoAFillScene");
    libRWDR_gv_scmr_EnergyBarScene = DialogControlLastCreated();
    CutscenePlay(CutsceneGetTriggerControl(libRWDR_gv_scmr_EnergyBarScene));
    DialogControlHookup(libRWDR_gv_scmr_Panel, c_triggerControlTypeCutscene, "SoAOverlayCutscene");
    libRWDR_gv_scmr_EnergyGlassScene = DialogControlLastCreated();
    CutscenePlay(CutsceneGetTriggerControl(libRWDR_gv_scmr_EnergyGlassScene));
    libNtve_gf_SetDialogItemTooltip(libRWDR_gv_scmr_EnergyTooltip, StringExternal("Param/Value/lib_RWDR_AE3487F9"), PlayerGroupAll());
}

void libRWDR_gf_SCMR_PanelInitDehaka () {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int autoF8A0C7A8_ae = 4;
    const int autoF8A0C7A8_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlCreateInPanelFromTemplate(libRWDR_gv_scmr_PanelHolder, c_triggerControlTypePanel, "Coop_GlobalCastingTemplates/ZergCasterPanelTemplate");
    libRWDR_gv_scmr_Panel = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scmr_Panel, c_triggerControlTypeCutscene, "ZergCommandCutscene");
    libRWDR_gv_scmr_Cutscene = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scmr_Panel, c_triggerControlTypePanel, "ButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "Coop_GlobalCastingTemplates/DehakaGlobalCommandPanelTemplate");
    libRWDR_gv_scmr_CommandPanel = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (autoF8A0C7A8_ai >= 0 && lv_buttonIndex <= autoF8A0C7A8_ae) || (autoF8A0C7A8_ai < 0 && lv_buttonIndex >= autoF8A0C7A8_ae) ) ; lv_buttonIndex += autoF8A0C7A8_ai ) {
        DialogControlHookup(libRWDR_gv_scmr_CommandPanel, c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libRWDR_gv_scmr_CommandButtons[lv_buttonIndex] = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_scmr_Panel, c_triggerControlTypePanel, "AbilityArrow0" + IntToString(lv_buttonIndex));
        libRWDR_gv_scmr_CommandButtonArrows[lv_buttonIndex] = DialogControlLastCreated();
        DialogControlSetPositionRelative(libRWDR_gv_scmr_CommandButtonArrows[lv_buttonIndex], PlayerGroupAll(), c_anchorTop, libRWDR_gv_scmr_CommandButtons[lv_buttonIndex], c_anchorBottom, 0, 15);
    }
    DialogControlSetVisible(libRWDR_gv_scmr_Panel, PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemCutscene(libRWDR_gv_scmr_Cutscene, "Cutscenes\\UI_DehakaCastingPanel.SC2Cutscene", PlayerGroupAll());
    CutscenePlay(CutsceneGetTriggerControl(libRWDR_gv_scmr_Cutscene));
}

void libRWDR_gf_SCMR_PanelSetUnit (unit lp_casterUnit) {
    // Automatic Variable Declarations
    unitgroup autoA0BDA2C4_g;
    int autoA0BDA2C4_u;
    unit autoA0BDA2C4_var;

    // Implementation
    libRWDR_gf_SCMR_PannelInit();
    libRWDR_gv_scmr_PanelUnit = lp_casterUnit;
    autoA0BDA2C4_g = libRWDR_gv_scmr_PanelCasterGroup;
    autoA0BDA2C4_u = UnitGroupCount(autoA0BDA2C4_g, c_unitCountAll);
    for (;; autoA0BDA2C4_u -= 1) {
        autoA0BDA2C4_var = UnitGroupUnitFromEnd(autoA0BDA2C4_g, autoA0BDA2C4_u);
        if (autoA0BDA2C4_var == null) { break; }
        UnitGroupRemove(libRWDR_gv_scmr_PanelCasterGroup, autoA0BDA2C4_var);
    }
    UnitGroupAdd(libRWDR_gv_scmr_PanelCasterGroup, lp_casterUnit);
    libNtve_gf_SetDialogItemUnitGroup(libRWDR_gv_scmr_CommandPanel, libRWDR_gv_scmr_PanelCasterGroup, PlayerGroupSingle(1));
}

void libRWDR_gf_SCMR_PanelShowHide (bool lp_showHide, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    libRWDR_gv_scmr_visible = (lp_showHide == true);
    libRWDR_gf_SCMR_PanelVisibilitySet(lp_showHide, lp_duration);
}

void libRWDR_gf_SCMR_PanelVisibilitySet (bool lp_showHide, fixed lp_duration) {
    // Variable Declarations
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int autoD78AF5FF_ae = 4;
    const int autoD78AF5FF_ai = 1;
    const int auto6480C9FE_ae = 4;
    const int auto6480C9FE_ai = 1;

    // Variable Initialization

    // Implementation
    libRWDR_gf_SCMR_PannelInit();
    if ((libRWDR_gv_scmr_Panel == c_invalidDialogControlId)) {
        return ;
    }

    if ((libRWDR_gv_scmr_CutsceneFilter != "")) {
        CutsceneAddFilter(CutsceneGetTriggerControl(libRWDR_gv_scmr_Cutscene), libRWDR_gv_scmr_CutsceneFilter);
    }

    if ((lp_showHide == true)) {
        DialogControlSetVisible(libRWDR_gv_scmr_PanelHolder, PlayerGroupAll(), lp_showHide);
        DialogControlSetVisible(libRWDR_gv_scmr_Panel, PlayerGroupAll(), lp_showHide);
        if ((libRWDR_gv_scmr_Cutscene == c_invalidDialogControlId)) {
            return ;
        }

        CutsceneSetTime(CutsceneGetTriggerControl(libRWDR_gv_scmr_Cutscene), 0);
        CutscenePlay(CutsceneGetTriggerControl(libRWDR_gv_scmr_Cutscene));
        if ((libRWDR_gv_scmr_EnergyBarScene != c_invalidDialogControlId)) {
            CutsceneSetTime(CutsceneGetTriggerControl(libRWDR_gv_scmr_EnergyBarScene), 0);
        }

        if ((libRWDR_gv_scmr_EnergyGlassScene != c_invalidDialogControlId)) {
            CutsceneSetTime(CutsceneGetTriggerControl(libRWDR_gv_scmr_EnergyGlassScene), 0);
        }

        if ((lp_duration == c_transitionDurationImmediate)) {
            lv_buttonIndex = 1;
            for ( ; ( (auto6480C9FE_ai >= 0 && lv_buttonIndex <= auto6480C9FE_ae) || (auto6480C9FE_ai < 0 && lv_buttonIndex >= auto6480C9FE_ae) ) ; lv_buttonIndex += auto6480C9FE_ai ) {
                if ((libRWDR_gv_scmr_ButtonHighlighted[lv_buttonIndex] == true) && (libRWDR_gv_scmr_CommandButtonArrows[lv_buttonIndex] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(libRWDR_gv_scmr_CommandButtonArrows[lv_buttonIndex], PlayerGroupAll(), true);
                }

            }
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libRWDR_gv_scmr_Cutscene), "LoopStart");
            if ((libRWDR_gv_scmr_EnergyBarScene != c_invalidDialogControlId)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(libRWDR_gv_scmr_EnergyBarScene), "LoopStart");
            }

            if ((libRWDR_gv_scmr_EnergyGlassScene != c_invalidDialogControlId)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(libRWDR_gv_scmr_EnergyGlassScene), "LoopStart");
            }

            DialogControlSetVisible(libRWDR_gv_scmr_CommandPanel, PlayerGroupAll(), lp_showHide);
            if ((libRWDR_gv_scmr_EnergyLabel != c_invalidDialogControlId)) {
                DialogControlSetVisible(libRWDR_gv_scmr_EnergyLabel, PlayerGroupAll(), lp_showHide);
            }

        }
        else {
            DialogControlSetVisible(libRWDR_gv_scmr_CommandPanel, PlayerGroupAll(), false);
        }
    }
    else {
        if ((lp_duration == c_transitionDurationImmediate)) {
            lv_buttonIndex = 1;
            for ( ; ( (autoD78AF5FF_ai >= 0 && lv_buttonIndex <= autoD78AF5FF_ae) || (autoD78AF5FF_ai < 0 && lv_buttonIndex >= autoD78AF5FF_ae) ) ; lv_buttonIndex += autoD78AF5FF_ai ) {
                if ((libRWDR_gv_scmr_CommandButtonArrows[lv_buttonIndex] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(libRWDR_gv_scmr_CommandButtonArrows[lv_buttonIndex], PlayerGroupAll(), false);
                }

            }
            DialogControlSetVisible(libRWDR_gv_scmr_PanelHolder, PlayerGroupAll(), lp_showHide);
            DialogControlSetVisible(libRWDR_gv_scmr_Panel, PlayerGroupAll(), lp_showHide);
            DialogControlSetVisible(libRWDR_gv_scmr_CommandPanel, PlayerGroupAll(), lp_showHide);
        }
        else {
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libRWDR_gv_scmr_Cutscene), "Death");
            if ((libRWDR_gv_scmr_EnergyBarScene != c_invalidDialogControlId)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(libRWDR_gv_scmr_EnergyBarScene), "Death");
            }

            if ((libRWDR_gv_scmr_EnergyGlassScene != c_invalidDialogControlId)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(libRWDR_gv_scmr_EnergyGlassScene), "Death");
            }

        }
    }
}

void libRWDR_gf_SCMR_PanelVisibilityAutoUpdate (bool lp_showHide, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    if ((libRWDR_gv_scmr_visible == false)) {
        return ;
    }

    libRWDR_gf_SCMR_PanelVisibilitySet(lp_showHide, lp_duration);
}

void libRWDR_gf_SCMR_SoAUpdateVitals () {
    // Variable Declarations
    int lv_orbHeight;
    fixed lv_energyFloored;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_energyFloored = Floor(UnitGetPropertyFixed(libRWDR_gv_scmr_PanelUnit, c_unitPropEnergy, c_unitPropCurrent));
    if ((lv_energyFloored == libRWDR_gv_scmr_LastEnergyUpdate)) {
        return ;
    }

    libRWDR_gv_scmr_LastEnergyUpdate = lv_energyFloored;
    libNtve_gf_SetDialogItemText(libRWDR_gv_scmr_EnergyLabel, IntToText(FixedToInt(lv_energyFloored)), PlayerGroupAll());
    DialogControlSendAnimationEvent(libRWDR_gv_scmr_EnergyBarScene, PlayerGroupAll(), "SetEnergyPlay");
    DialogControlSetAnimationTime(libRWDR_gv_scmr_EnergyBarScene, PlayerGroupAll(), "EnergyLevel", UnitGetPropertyFixed(libRWDR_gv_scmr_PanelUnit, c_unitPropEnergyPercent, c_unitPropCurrent));
    DialogControlSendAnimationEvent(libRWDR_gv_scmr_EnergyBarScene, PlayerGroupAll(), "SetEnergyPause");
    libRWDR_gf_SCMR_CheckForEnergyHighlight();
}

void libRWDR_gf_SCMR_CheckForEnergyHighlight () {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerRace(1) != "Prot") || (DialogControlIsVisible(libRWDR_gv_scmr_CommandPanel, 1) == false))) {
        return ;
    }

    if ((UnitGetPropertyFixed(libRWDR_gv_scmr_PanelUnit, c_unitPropEnergyPercent, c_unitPropCurrent) == 100.0)) {
        libRWDR_gf_SCMR_EnergyHighlight(true);
    }
    else {
        libRWDR_gf_SCMR_EnergyHighlight(false);
    }
}

void libRWDR_gf_SCMR_EnergyHighlight (bool lp_enable) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_enable == true)) {
        libRWDR_gv_scmr_EnergyHighlighting = true;
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libRWDR_gv_scmr_EnergyGlassScene), "PowerUp");
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libRWDR_gv_scmr_EnergyBarScene), "PowerUp");
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libRWDR_gv_scmr_Cutscene), "PowerUp");
    }
    else {
        if ((libRWDR_gv_scmr_EnergyHighlighting == true)) {
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libRWDR_gv_scmr_EnergyGlassScene), "PowerDown");
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libRWDR_gv_scmr_EnergyBarScene), "PowerDown");
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libRWDR_gv_scmr_Cutscene), "PowerDown");
            libRWDR_gv_scmr_EnergyHighlighting = false;
        }

    }
}

void libRWDR_gf_SCMRTimerWindowCreate (timer lp_timer, text lp_title, bool lp_visible, bool lp_elapsed) {
    // Variable Declarations
    string lv_image;

    // Automatic Variable Declarations
    string auto7BDE3C70_val;

    // Variable Initialization

    // Implementation
    TimerWindowCreate(lp_timer, lp_title, lp_visible, lp_elapsed);
    TimerWindowShowBorder(TimerWindowLastCreated(), true);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageBackground, c_triggerImageTypeNineSlice);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageProgressFill, c_triggerImageTypeNineSlice);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageBorder, c_triggerImageTypeNineSlice);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageProgressFrame, c_triggerImageTypeNineSlice);
    TimerWindowSetStyle(TimerWindowLastCreated(), c_timerWindowStyleVerticalTitleTime, false);
    TimerWindowSetFixedHeight(TimerWindowLastCreated(), 80);
    libRWDR_gf_scmr_RepositionTimerWindow(TimerWindowLastCreated());
    if ((libRWDR_gv_scmr_TimerWindowHighlightFrame != c_invalidDialogControlId)) {
        DialogControlDestroy(libRWDR_gv_scmr_TimerWindowHighlightFrame);
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer\\ConsoleUIContainer\\TriggerWindowPanel\\TimerWindowTemplate");
    libRWDR_gv_scmr_TimerWindowHighlightFrame = DialogControlLastCreated();
    libRWDR_gv_sCMR_TimerWindowTimer = lp_timer;
    libRWDR_gv_sCMR_TimerWindowInDanger = false;
    TriggerEnable(libRWDR_gt_PU_TimerWindowThresholdCrossed, true);
    TriggerEnable(libRWDR_gt_PU_TimerWindowLoadUpdate, true);
    libRWDR_gf_SCMR_FlashTimerWindow(3.0, false);
    auto7BDE3C70_val = PlayerRace(1);
    if (auto7BDE3C70_val == "Prot") {
        TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(100.00, 100.00, 0.00), 1);
    }
    else if (auto7BDE3C70_val == "Terr") {
        TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(42.75, 68.24, 16.86), 1);
    }
    else if (auto7BDE3C70_val == "Zerg") {
        TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(100.00, 50.20, 0.00), 1);
    }
    else {
    }
}

void libRWDR_gf_scmr_RepositionTimerWindow (int lp_timerWindow) {
    // Automatic Variable Declarations
    // Implementation
    TimerWindowSetAnchor(lp_timerWindow, c_anchorTopRight, 0, 50);
}

void libRWDR_gf_SCMR_FlashTimerWindow (fixed lp_duration, bool lp_waitOption) {
    // Automatic Variable Declarations
    // Implementation
    libRWDR_gv_sCMR_TimerWindowHighlightDuration = lp_duration;
    TriggerExecute(libRWDR_gt_PU_TimerWindowFlash, true, lp_waitOption);
}

void libRWDR_gf_SCMR_SetTimerWindowDangerThreshold (fixed lp_thresholdTime) {
    // Automatic Variable Declarations
    // Implementation
    libRWDR_gv_sCMR_TimerWindowDangerThreshold = lp_thresholdTime;
}

void libRWDR_gf_SCMR_SetHeroPanelUnit (int lp_index, unit lp_heroUnit) {
    // Variable Declarations
    bool lv_noValidHeroes;
    int lv_heroHotkey;

    // Automatic Variable Declarations
    int auto799C8B22_val;
    const int auto91B24DDC_ae = libRWDR_gv_SCMR_HerioUIMaxHeroCount;
    int auto91B24DDC_var;

    // Variable Initialization

    // Implementation
    libRWDR_gv_scmr_HeroUIUnit[lp_index] = lp_heroUnit;
    libRWDR_gv_SCMR_HeroUIType[lp_index] = libRWDR_gf_scmr_HeroTypeFromUnitType(UnitGetType(lp_heroUnit));
    libRWDR_gv_SCMR_HeroUIShowLevel[lp_index] = true;
    libRWDR_gf_SCMR_UpdateHeroPanel(lp_index);
    TriggerEnable(libRWDR_gt_SCMR_HeroPanelUpdate2, true);
    if (((libRWDR_gv_SCMR_HeroUIType[lp_index] == libRWDR_ge_SCMRCampaignHeroes_ByronKane))) {
        DialogControlSendAnimationEvent(libRWDR_gv_scmr_HeroUIPanel[lp_index], PlayerGroupAll(), "SwitchZerg");
        libNtve_gf_SetDialogItemImage(libRWDR_gv_scmr_HeroUIDialogLevelBox[lp_index], "Assets\\Textures\\ui_ingame_lotv_herolevelbox_zerg.dds", PlayerGroupAll());
    }

    if (((libRWDR_gv_SCMR_HeroUIType[lp_index] == libRWDR_ge_SCMRCampaignHeroes_Eledis) || (libRWDR_gv_SCMR_HeroUIType[lp_index] == libRWDR_ge_SCMRCampaignHeroes_BarryClark) || (libRWDR_gv_SCMR_HeroUIType[lp_index] == libRWDR_ge_SCMRCampaignHeroes_Leslie))) {
        DialogControlSendAnimationEvent(libRWDR_gv_scmr_HeroUIPanel[lp_index], PlayerGroupAll(), "SwitchTerran");
        libNtve_gf_SetDialogItemImage(libRWDR_gv_scmr_HeroUIDialogLevelBox[lp_index], "Assets\\Textures\\ui_ingame_lotv_herolevelbox_terr.dds", PlayerGroupAll());
    }

    if (((libRWDR_gv_SCMR_HeroUIType[lp_index] == libRWDR_ge_SCMRCampaignHeroes_Avalax))) {
        DialogControlSendAnimationEvent(libRWDR_gv_scmr_HeroUIPanel[lp_index], PlayerGroupAll(), "EnergyBarOffset");
    }

    if ((libRWDR_gv_scmr_HeroUIUnit[lp_index] == null)) {
        lv_noValidHeroes = true;
        auto91B24DDC_var = 1;
        for ( ; auto91B24DDC_var <= auto91B24DDC_ae; auto91B24DDC_var += 1 ) {
            if ((libRWDR_gv_scmr_HeroUIUnit[auto91B24DDC_var] == null)) {
            }
            else {
                lv_noValidHeroes = false;
                break;
            }
        }
        if ((lv_noValidHeroes == true)) {
            TriggerEnable(libRWDR_gt_SCMR_HeroPanelUpdate, false);
            TriggerEnable(libRWDR_gt_SCMR_VoidHeroUIUnitDamaged, false);
        }

    }
    else {
        TriggerEnable(libRWDR_gt_SCMR_HeroPanelUpdate, true);
        TriggerEnable(libRWDR_gt_SCMR_VoidHeroUIUnitDamaged, true);
        TriggerEnable(libRWDR_gt_SCMR_HeroUIMouseHoverText, true);
        TriggerEnable(libRWDR_gt_SCMR_HeroUIUnitVitalChange, true);
        libNtve_gf_SetDialogItemAnimationDuration(libRWDR_gv_scmr_HeroUIDialogCooldownImage[lp_index], 60.0, PlayerGroupAll());
        auto799C8B22_val = lp_index;
        if (auto799C8B22_val == 1) {
            lv_heroHotkey = c_hotkeyHeroSelect0;
        }
        else if (auto799C8B22_val == 2) {
            lv_heroHotkey = c_hotkeyHeroSelect1;
        }
        else if (auto799C8B22_val == 3) {
            lv_heroHotkey = c_hotkeyHeroSelect2;
        }
        else {
        }
        if ((lp_index <= libRWDR_gv_SCMR_HerioUIMaxHeroCount)) {
            libNtve_gf_SetDialogItemHotkey(libRWDR_gv_scmr_HeroUIDialogButton[lp_index], lv_heroHotkey, PlayerGroupSingle(UnitGetOwner(lp_heroUnit)));
        }
        else {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_RWDR_A7EE5A55"), false);
        }
    }
}

void libRWDR_gf_PU_ShowHideHeroPanel (bool lp_showHide) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto8549B71A_ae = libRWDR_gv_SCMR_HerioUIMaxHeroCount;
    const int auto8549B71A_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto8549B71A_ai >= 0 && lv_index <= auto8549B71A_ae) || (auto8549B71A_ai < 0 && lv_index >= auto8549B71A_ae) ) ; lv_index += auto8549B71A_ai ) {
        if ((libRWDR_gv_scmr_HeroUIPanel[lv_index] != c_invalidDialogControlId)) {
            DialogControlSetVisible(libRWDR_gv_scmr_HeroUIPanel[lv_index], PlayerGroupAll(), lp_showHide);
        }

    }
}

void libRWDR_gf_SCMR_CreateHeroPanel (int lp_index) {
    // Automatic Variable Declarations
    int autoBEE08D74_val;
    int auto1519C61D_val;
    int auto81C6590F_val;

    // Implementation
    autoBEE08D74_val = lp_index;
    if (autoBEE08D74_val == 1) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/RwdrHeroUnitFrame");
    }
    else if (autoBEE08D74_val == 2) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/SecondaryRwdrHeroUnitFrame");
    }
    else if (autoBEE08D74_val == 3) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/ThirdRwdrHeroUnitFrame");
    }
    else {
    }
    libRWDR_gv_scmr_HeroUIPanel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scmr_HeroUIPanel[lp_index], c_triggerControlTypeImage, "BorderImage");
    libRWDR_gv_scmr_HeroUIDialogBorderImage[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(libRWDR_gv_scmr_HeroUIPanel[lp_index], c_triggerControlTypeImage, "BorderNoEnergyImage");
    libRWDR_gv_SCMR_HeroUIDialogBorderImageNoEnergy[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(libRWDR_gv_scmr_HeroUIPanel[lp_index], c_triggerControlTypeImage, "BorderImageAll");
    libRWDR_gv_scmr_HeroUIDialogBorderImageAll[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(libRWDR_gv_scmr_HeroUIPanel[lp_index], c_triggerControlTypeImage, "LevelBox");
    libRWDR_gv_scmr_HeroUIDialogLevelBox[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(libRWDR_gv_scmr_HeroUIDialogLevelBox[lp_index], "Assets\\Textures\\ui_ingame_lotv_herolevelbox.dds", PlayerGroupAll());
    DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogLevelBox[lp_index], PlayerGroupAll(), true);
    DialogControlHookup(libRWDR_gv_scmr_HeroUIPanel[lp_index], c_triggerControlTypeImage, "CooldownImage");
    libRWDR_gv_scmr_HeroUIDialogCooldownImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scmr_HeroUIPanel[lp_index], c_triggerControlTypeImage, "DamageTakenImage");
    libRWDR_gv_scmr_HeroUIDialogDamageTakenImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scmr_HeroUIPanel[lp_index], c_triggerControlTypeImage, "EnergyBarImage");
    libRWDR_gv_scmr_HeroUIDialogEnergyBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scmr_HeroUIPanel[lp_index], c_triggerControlTypeImage, "EnergyBarBackground");
    libRWDR_gv_scmr_HeroUIDialogEnergyBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scmr_HeroUIPanel[lp_index], c_triggerControlTypeImage, "HealthBarImage");
    libRWDR_gv_scmr_HeroUIDialogHealthBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scmr_HeroUIPanel[lp_index], c_triggerControlTypeImage, "BarBackground");
    libRWDR_gv_scmr_HeroUIDialogHealthBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scmr_HeroUIPanel[lp_index], c_triggerControlTypeImage, "IconImage");
    libRWDR_gv_scmr_HeroUIDialogIconImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scmr_HeroUIPanel[lp_index], c_triggerControlTypeLabel, "DamageTakenLabel");
    libRWDR_gv_scmr_HeroUIDialogDamageTakenLabel[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(libRWDR_gv_scmr_HeroUIDialogDamageTakenLabel[lp_index], StringToText(""), PlayerGroupAll());
    DialogControlHookup(libRWDR_gv_scmr_HeroUIPanel[lp_index], c_triggerControlTypeLabel, "EnergyLabel");
    libRWDR_gv_scmr_HeroUIDialogEnergyLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scmr_HeroUIPanel[lp_index], c_triggerControlTypeLabel, "HealthLabel");
    libRWDR_gv_scmr_HeroUIDialogHealthLabel[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(libRWDR_gv_scmr_HeroUIDialogHealthLabel[lp_index], "HeroUnitFrameBarValue", PlayerGroupAll());
    DialogControlHookup(libRWDR_gv_scmr_HeroUIPanel[lp_index], c_triggerControlTypeLabel, "LevelLabel");
    libRWDR_gv_scmr_HeroUIDialogLevelLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scmr_HeroUIPanel[lp_index], c_triggerControlTypeLabel, "NameLabel");
    libRWDR_gv_scmr_HeroUIDialogNameLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scmr_HeroUIPanel[lp_index], c_triggerControlTypeImage, "ShieldBarImage");
    libRWDR_gv_scmr_HeroUIDialogShieldBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scmr_HeroUIPanel[lp_index], c_triggerControlTypeImage, "ShieldBarBackground");
    libRWDR_gv_scmr_HeroUIDialogShieldBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scmr_HeroUIPanel[lp_index], c_triggerControlTypeLabel, "ShieldLabel");
    libRWDR_gv_scmr_HeroUIDialogShieldLabel[lp_index] = DialogControlLastCreated();
    auto1519C61D_val = lp_index;
    if (auto1519C61D_val == 1) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/RwdrHeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect0, PlayerGroupAll());
    }
    else if (auto1519C61D_val == 2) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/SecondaryRwdrHeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect1, PlayerGroupAll());
    }
    else if (auto1519C61D_val == 3) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/ThirdRwdrHeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect2, PlayerGroupAll());
    }
    else {
    }
    libRWDR_gv_scmr_HeroUIDialogButton[lp_index] = DialogControlLastCreated();
    auto81C6590F_val = lp_index;
    if (auto81C6590F_val == 1) {
        DialogControlHookupStandard(c_triggerControlTypePortrait, "UIContainer/ConsoleUIContainer/RwdrHeroUnitFrameLevelUpPortrait");
    }
    else if (auto81C6590F_val == 2) {
        DialogControlHookupStandard(c_triggerControlTypePortrait, "UIContainer/ConsoleUIContainer/SecondaryRwdrHeroUnitFrameLevelUpPortrait");
    }
    else if (auto81C6590F_val == 3) {
        DialogControlHookupStandard(c_triggerControlTypePortrait, "UIContainer/ConsoleUIContainer/ThirdRwdrHeroUnitFrameLevelUpPortrait");
    }
    else {
    }
    libRWDR_gv_scmr_HeroUIDialogLevelupPortrait[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemModel(libRWDR_gv_scmr_HeroUIDialogLevelupPortrait[lp_index], "KerriganLevelUpPortrait", PlayerGroupAll());
    DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogLevelupPortrait[lp_index], PlayerGroupAll(), false);
    DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogDamageTakenImage[lp_index], PlayerGroupAll(), false);
    DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogCooldownImage[lp_index], PlayerGroupAll(), false);
    DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogLevelLabel[lp_index], PlayerGroupAll(), true);
    DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogLevelBox[lp_index], PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemRenderPriority(libRWDR_gv_scmr_HeroUIDialogEnergyBarBackground[lp_index], 505, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(libRWDR_gv_scmr_HeroUIDialogHealthBarBackground[lp_index], 505, PlayerGroupAll());
    if ((PlayerRace(1) == "Prot")) {
        libNtve_gf_SetDialogItemRenderPriority(libRWDR_gv_scmr_HeroUIDialogShieldBarBackground[lp_index], 505, PlayerGroupAll());
        libNtve_gf_SetDialogItemRenderPriority(libRWDR_gv_scmr_HeroUIDialogShieldBarImage[lp_index], 507, PlayerGroupAll());
    }

}

int libRWDR_gf_scmr_HeroTypeFromUnitType (string lp_unitType) {
    // Automatic Variable Declarations
    string auto6BFD1E79_val;

    // Implementation
    auto6BFD1E79_val = lp_unitType;
    if (auto6BFD1E79_val == "Tolaris") {
        return libRWDR_ge_SCMRCampaignHeroes_Tolaris;
    }
    else if (auto6BFD1E79_val == "Delanar") {
        return libRWDR_ge_SCMRCampaignHeroes_Delanar;
    }
    else if (auto6BFD1E79_val == "Avalax") {
        return libRWDR_ge_SCMRCampaignHeroes_Avalax;
    }
    else if (auto6BFD1E79_val == "ByronKane") {
        return libRWDR_ge_SCMRCampaignHeroes_ByronKane;
    }
    else if (auto6BFD1E79_val == "Eledis") {
        return libRWDR_ge_SCMRCampaignHeroes_Eledis;
    }
    else if (auto6BFD1E79_val == "BarryClark") {
        return libRWDR_ge_SCMRCampaignHeroes_BarryClark;
    }
    else if (auto6BFD1E79_val == "Leslie") {
        return libRWDR_ge_SCMRCampaignHeroes_Leslie;
    }
    else {
    }
    return libRWDR_ge_SCMRCampaignHeroes_None;
}

string libRWDR_gf_scmr_VoidHeroIcon (int lp_heroType) {
    // Automatic Variable Declarations
    int autoF8FC6463_val;

    // Implementation
    autoF8FC6463_val = lp_heroType;
    if (autoF8FC6463_val == libRWDR_ge_SCMRCampaignHeroes_Tolaris) {
        return "Assets\\Textures\\ui_tolaris_icon.dds";
    }
    else if (autoF8FC6463_val == libRWDR_ge_SCMRCampaignHeroes_Delanar) {
        return "Assets\\Textures\\ui_delanar_icon.dds";
    }
    else if (autoF8FC6463_val == libRWDR_ge_SCMRCampaignHeroes_Avalax) {
        return "Assets\\Textures\\ui_avalax_icon.dds";
    }
    else if (autoF8FC6463_val == libRWDR_ge_SCMRCampaignHeroes_ByronKane) {
        return "Assets\\Textures\\ui_byron_icon.dds";
    }
    else if (autoF8FC6463_val == libRWDR_ge_SCMRCampaignHeroes_Eledis) {
        return "Assets\\Textures\\ui_eledis_icon.dds";
    }
    else if (autoF8FC6463_val == libRWDR_ge_SCMRCampaignHeroes_BarryClark) {
        return "Assets\\Textures\\ui_barryclark_icon.dds";
    }
    else if (autoF8FC6463_val == libRWDR_ge_SCMRCampaignHeroes_Leslie) {
        return "Assets\\Textures\\ui_leslie_icon.dds";
    }
    else {
        return null;
    }
    return "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds";
}

void libRWDR_gf_SCMR_UpdateHeroPanel (int lp_index) {
    // Variable Declarations
    text lv_hotkey;
    int lv_life;
    int lv_shields;
    int lv_energy;

    // Automatic Variable Declarations
    int autoA75E630A_val;

    // Variable Initialization

    // Implementation
    if ((libRWDR_gv_scmr_HeroUIUnit[lp_index] == null)) {
        if ((libRWDR_gv_scmr_HeroUIPanel[lp_index] != c_invalidDialogControlId)) {
            DialogControlSetVisible(libRWDR_gv_scmr_HeroUIPanel[lp_index], PlayerGroupAll(), false);
        }

        return ;
    }

    if ((libRWDR_gv_scmr_HeroUIPanel[lp_index] == c_invalidDialogControlId)) {
        libRWDR_gf_SCMR_CreateHeroPanel(lp_index);
    }

    DialogControlSetVisible(libRWDR_gv_scmr_HeroUIPanel[lp_index], PlayerGroupAll(), true);
    autoA75E630A_val = lp_index;
    if (autoA75E630A_val == 1) {
        lv_hotkey = StringExternal("Param/Value/lib_RWDR_C68F582F");
    }
    else if (autoA75E630A_val == 2) {
        lv_hotkey = StringExternal("Param/Value/lib_RWDR_6536F776");
    }
    else if (autoA75E630A_val == 3) {
        lv_hotkey = StringExternal("Param/Value/lib_RWDR_9141B931");
    }
    else {
    }
    if ((UnitIsAlive(libRWDR_gv_scmr_HeroUIUnit[lp_index]) == false)) {
        libNtve_gf_SetDialogItemText(libRWDR_gv_scmr_HeroUIDialogNameLabel[lp_index], UnitTypeGetName(UnitGetType(libRWDR_gv_scmr_HeroUIUnit[lp_index])), PlayerGroupAll());
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_RWDR_727A7FED", "A", UnitTypeGetName(UnitGetType(libRWDR_gv_scmr_HeroUIUnit[lp_index])));
        TextExpressionSetToken("Param/Expression/lib_RWDR_727A7FED", "B", lv_hotkey);
        libNtve_gf_SetDialogItemText(libRWDR_gv_scmr_HeroUIDialogNameLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_RWDR_727A7FED"), PlayerGroupAll());
    }
    libNtve_gf_SetDialogItemImage(libRWDR_gv_scmr_HeroUIDialogIconImage[lp_index], libRWDR_gf_scmr_VoidHeroIcon(libRWDR_gv_SCMR_HeroUIType[lp_index]), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_RWDR_C504018C", "CurrentLife", FixedToText(UnitGetPropertyFixed(libRWDR_gv_scmr_HeroUIUnit[lp_index], c_unitPropLife, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_RWDR_C504018C", "MaxLife", FixedToText(UnitGetPropertyFixed(libRWDR_gv_scmr_HeroUIUnit[lp_index], c_unitPropLifeMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(libRWDR_gv_scmr_HeroUIDialogHealthLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_RWDR_C504018C"), PlayerGroupAll());
    lv_life = FixedToInt((UnitGetPropertyFixed(libRWDR_gv_scmr_HeroUIUnit[lp_index], c_unitPropLifePercent, c_unitPropCurrent) * (IntToFixed(libRWDR_gv_SCMR_HEROUIBARWIDTH) / 100.0)));
    if ((lv_life > 0)) {
        DialogControlSetSize(libRWDR_gv_scmr_HeroUIDialogHealthBarImage[lp_index], PlayerGroupAll(), lv_life, libRWDR_gv_SCMR_HEROUILIFEBARHEIGHT);
        DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogHealthBarImage[lp_index], PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogHealthBarImage[lp_index], PlayerGroupAll(), false);
    }
    if ((UnitGetPropertyFixed(libRWDR_gv_scmr_HeroUIUnit[lp_index], c_unitPropShieldsMax, c_unitPropCurrent) > 0)) {
        DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogShieldBarBackground[lp_index], PlayerGroupAll(), true);
        TextExpressionSetToken("Param/Expression/lib_RWDR_3F05D837", "CurrentLife", FixedToText(UnitGetPropertyFixed(libRWDR_gv_scmr_HeroUIUnit[lp_index], c_unitPropShields, c_unitPropCurrent), 0));
        TextExpressionSetToken("Param/Expression/lib_RWDR_3F05D837", "MaxLife", FixedToText(UnitGetPropertyFixed(libRWDR_gv_scmr_HeroUIUnit[lp_index], c_unitPropShieldsMax, c_unitPropCurrent), 0));
        libNtve_gf_SetDialogItemText(libRWDR_gv_scmr_HeroUIDialogShieldLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_RWDR_3F05D837"), PlayerGroupAll());
        lv_shields = FixedToInt((UnitGetPropertyFixed(libRWDR_gv_scmr_HeroUIUnit[lp_index], c_unitPropShieldsPercent, c_unitPropCurrent) * (IntToFixed(libRWDR_gv_SCMR_HEROUIBARWIDTH) / 100.0)));
        if ((lv_shields > 0)) {
            DialogControlSetSize(libRWDR_gv_scmr_HeroUIDialogShieldBarImage[lp_index], PlayerGroupAll(), lv_shields, libRWDR_gv_SCMR_HEROUISHIELDBARHEIGHT);
            DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogShieldBarImage[lp_index], PlayerGroupAll(), true);
        }
        else {
            DialogControlSetSize(libRWDR_gv_scmr_HeroUIDialogShieldBarImage[lp_index], PlayerGroupAll(), 1, libRWDR_gv_SCMR_HEROUISHIELDBARHEIGHT);
            DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogShieldBarImage[lp_index], PlayerGroupAll(), false);
        }
    }
    else {
        DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogShieldBarImage[lp_index], PlayerGroupAll(), false);
        DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogShieldBarBackground[lp_index], PlayerGroupAll(), false);
    }
    TextExpressionSetToken("Param/Expression/lib_RWDR_E5875821", "CurrentEnergy", FixedToText(UnitGetPropertyFixed(libRWDR_gv_scmr_HeroUIUnit[lp_index], c_unitPropEnergy, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_RWDR_E5875821", "MaxEnergy", FixedToText(UnitGetPropertyFixed(libRWDR_gv_scmr_HeroUIUnit[lp_index], c_unitPropEnergyMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(libRWDR_gv_scmr_HeroUIDialogEnergyLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_RWDR_E5875821"), PlayerGroupAll());
    if ((UnitGetPropertyFixed(libRWDR_gv_scmr_HeroUIUnit[lp_index], c_unitPropEnergyMax, c_unitPropCurrent) == 0)) {
        lv_energy = 0;
        if ((libRWDR_gf_scmr_HeroHasShields(libRWDR_gv_SCMR_HeroUIType[lp_index]) == true)) {
            DialogControlSetVisible(libRWDR_gv_SCMR_HeroUIDialogBorderImageNoEnergy[lp_index], PlayerGroupAll(), false);
            DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogBorderImage[lp_index], PlayerGroupAll(), true);
            DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogBorderImageAll[lp_index], PlayerGroupAll(), false);
            DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogEnergyBarBackground[lp_index], PlayerGroupAll(), false);
        }
        else {
            DialogControlSetVisible(libRWDR_gv_SCMR_HeroUIDialogBorderImageNoEnergy[lp_index], PlayerGroupAll(), true);
            DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogBorderImage[lp_index], PlayerGroupAll(), false);
            DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogBorderImageAll[lp_index], PlayerGroupAll(), false);
            DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogEnergyBarBackground[lp_index], PlayerGroupAll(), false);
        }
    }
    else {
        lv_energy = FixedToInt((UnitGetPropertyFixed(libRWDR_gv_scmr_HeroUIUnit[lp_index], c_unitPropEnergyPercent, c_unitPropCurrent) * (IntToFixed(libRWDR_gv_SCMR_HEROUIBARWIDTH) / 100.0)));
        if ((libRWDR_gf_scmr_HeroHasShields(libRWDR_gv_SCMR_HeroUIType[lp_index]) == true)) {
            DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogBorderImageAll[lp_index], PlayerGroupAll(), true);
            DialogControlSetVisible(libRWDR_gv_SCMR_HeroUIDialogBorderImageNoEnergy[lp_index], PlayerGroupAll(), false);
            DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogBorderImage[lp_index], PlayerGroupAll(), false);
        }
        else {
            DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogBorderImageAll[lp_index], PlayerGroupAll(), false);
            DialogControlSetVisible(libRWDR_gv_SCMR_HeroUIDialogBorderImageNoEnergy[lp_index], PlayerGroupAll(), false);
            DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogBorderImage[lp_index], PlayerGroupAll(), true);
        }
        DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogEnergyBarBackground[lp_index], PlayerGroupAll(), true);
    }
    if ((lv_energy > 0)) {
        DialogControlSetSize(libRWDR_gv_scmr_HeroUIDialogEnergyBarImage[lp_index], PlayerGroupAll(), lv_energy, libRWDR_gv_SCMR_HEROUIENERGYBARHEIGHT);
        DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogEnergyBarImage[lp_index], PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogEnergyBarImage[lp_index], PlayerGroupAll(), false);
    }
    libNtve_gf_SetDialogItemText(libRWDR_gv_scmr_HeroUIDialogLevelLabel[lp_index], IntToText(UnitXPGetCurrentLevel(libRWDR_gv_scmr_HeroUIUnit[lp_index], null)), PlayerGroupAll());
    if ((libRWDR_gv_scmr_HeroUIDamageTimer[lp_index] > 0.0)) {
        libRWDR_gv_scmr_HeroUIDamageTimer[lp_index] -= libRWDR_gv_SCMR_HeroUIUpdateFrequency;
        if ((libRWDR_gv_scmr_HeroUIDamageTimer[lp_index] <= 0.0)) {
            DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogDamageTakenLabel[lp_index], PlayerGroupAll(), false);
            DialogControlFadeTransparency(libRWDR_gv_scmr_HeroUIDialogDamageTakenImage[lp_index], PlayerGroupAll(), 1.0, 100.0);
        }

    }

    libNtve_gf_SetDialogItemUnit(libRWDR_gv_scmr_HeroUIDialogButton[lp_index], libRWDR_gv_scmr_HeroUIUnit[lp_index], PlayerGroupAll());
}

string libRWDR_gf_SCMR_PresetToHeroUnit (int lp_championPreset) {
    // Automatic Variable Declarations
    int autoCA253DF0_val;

    // Implementation
    autoCA253DF0_val = lp_championPreset;
    if (autoCA253DF0_val == libRWDR_ge_SCMRCampaignHeroes_Tolaris) {
        return "Tolaris";
    }
    else if (autoCA253DF0_val == libRWDR_ge_SCMRCampaignHeroes_Delanar) {
        return "Delanar";
    }
    else if (autoCA253DF0_val == libRWDR_ge_SCMRCampaignHeroes_Avalax) {
        return "Avalax";
    }
    else if (autoCA253DF0_val == libRWDR_ge_SCMRCampaignHeroes_ByronKane) {
        return "ByronKane";
    }
    else if (autoCA253DF0_val == libRWDR_ge_SCMRCampaignHeroes_Eledis) {
        return "Eledis";
    }
    else if (autoCA253DF0_val == libRWDR_ge_SCMRCampaignHeroes_BarryClark) {
        return "BarryClark";
    }
    else if (autoCA253DF0_val == libRWDR_ge_SCMRCampaignHeroes_Leslie) {
        return "Leslie";
    }
    else {
        return null;
    }
}

bool libRWDR_gf_scmr_HeroHasShields (int lp_champion) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_champion == libRWDR_ge_SCMRCampaignHeroes_Tolaris) || (lp_champion == libRWDR_ge_SCMRCampaignHeroes_Delanar) || (lp_champion == libRWDR_ge_SCMRCampaignHeroes_Avalax))) {
        return true;
    }
    else {
        return false;
    }
}

trigger auto_libRWDR_gf_SCMR_PlayHeroPanelLevelUpEffect_Trigger = null;
int auto_libRWDR_gf_SCMR_PlayHeroPanelLevelUpEffect_lp_index;
int auto_libRWDR_gf_SCMR_PlayHeroPanelLevelUpEffect_lp_protosseffect;

void libRWDR_gf_SCMR_PlayHeroPanelLevelUpEffect (int lp_index, int lp_protosseffect) {
    auto_libRWDR_gf_SCMR_PlayHeroPanelLevelUpEffect_lp_index = lp_index;
    auto_libRWDR_gf_SCMR_PlayHeroPanelLevelUpEffect_lp_protosseffect = lp_protosseffect;

    if (auto_libRWDR_gf_SCMR_PlayHeroPanelLevelUpEffect_Trigger == null) {
        auto_libRWDR_gf_SCMR_PlayHeroPanelLevelUpEffect_Trigger = TriggerCreate("auto_libRWDR_gf_SCMR_PlayHeroPanelLevelUpEffect_TriggerFunc");
    }

    TriggerExecute(auto_libRWDR_gf_SCMR_PlayHeroPanelLevelUpEffect_Trigger, false, false);
}

bool auto_libRWDR_gf_SCMR_PlayHeroPanelLevelUpEffect_TriggerFunc (bool testConds, bool runActions) {
    int lp_index = auto_libRWDR_gf_SCMR_PlayHeroPanelLevelUpEffect_lp_index;
    int lp_protosseffect = auto_libRWDR_gf_SCMR_PlayHeroPanelLevelUpEffect_lp_protosseffect;

    // Variable Declarations
    text lv_hotkey;
    int lv_life;
    int lv_energy;

    // Automatic Variable Declarations
    int autoAE4C935C_val;

    // Variable Initialization

    // Implementation
    if (((libRWDR_gv_scmr_HeroUIUnit[lp_index] == null) || (libRWDR_gv_scmr_HeroUIDialogLevelupPortrait[lp_index] == c_invalidDialogControlId))) {
        return true;
    }

    if ((libRWDR_gv_sCMR_HeroUILevelUpEffectPlaying[lp_index] == true)) {
        return true;
    }

    libRWDR_gv_sCMR_HeroUILevelUpEffectPlaying[lp_index] = true;
    autoAE4C935C_val = lp_protosseffect;
    if (autoAE4C935C_val == libRWDR_ge_ZergOrProtossRescueEffect_Protoss) {
        libNtve_gf_SetDialogItemModel(libRWDR_gv_scmr_HeroUIDialogLevelupPortrait[lp_index], "ProtossLevelUpPortrait", PlayerGroupAll());
    }
    else if (autoAE4C935C_val == libRWDR_ge_ZergOrProtossRescueEffect_Zerg) {
        libNtve_gf_SetDialogItemModel(libRWDR_gv_scmr_HeroUIDialogLevelupPortrait[lp_index], "KerriganLevelUpPortrait", PlayerGroupAll());
    }
    else if (autoAE4C935C_val == libRWDR_ge_ZergOrProtossRescueEffect_Terran) {
        libNtve_gf_SetDialogItemModel(libRWDR_gv_scmr_HeroUIDialogLevelupPortrait[lp_index], "TerranLevelUpPortrait", PlayerGroupAll());
    }
    else {
    }
    libNtve_gf_ClearPortraitAnimation(PortraitGetTriggerControl(libRWDR_gv_scmr_HeroUIDialogLevelupPortrait[lp_index]), "TriggerPortraitAnim");
    DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogLevelupPortrait[lp_index], PlayerGroupAll(), true);
    ActorSend(ActorFromPortrait(PortraitGetTriggerControl(libRWDR_gv_scmr_HeroUIDialogLevelupPortrait[lp_index])), "AnimBlendTimeApply 0.000000");
    libNtve_gf_PortraitSetAnim(PortraitGetTriggerControl(libRWDR_gv_scmr_HeroUIDialogLevelupPortrait[lp_index]), "Birth", "TriggerPortraitAnim", 0, 0.0);
    Wait(2.0, c_timeGame);
    DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogLevelupPortrait[lp_index], PlayerGroupAll(), false);
    libRWDR_gv_sCMR_HeroUILevelUpEffectPlaying[lp_index] = false;
    return true;
}

void libRWDR_gf_SOTP_MutatorListCreate () {
    // Variable Declarations
    int lv_mutatorIndex;

    // Automatic Variable Declarations
    const int auto03583AE3_ae = libRWDR_gv_sOTP_MUTATOR_MAX_DISPLAY_SMALL;
    const int auto03583AE3_ai = 1;
    const int auto34E36358_ae = libRWDR_gv_sOTP_MUTATOR_MAX_DISPLAY_LARGE;
    const int auto34E36358_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libRWDR_gv_sOTP_MutatorListSmallPanel != c_invalidDialogControlId)) {
        return ;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MutatorSmallList");
    libRWDR_gv_sOTP_MutatorListSmallPanel = DialogControlLastCreated();
    lv_mutatorIndex = 1;
    for ( ; ( (auto03583AE3_ai >= 0 && lv_mutatorIndex <= auto03583AE3_ae) || (auto03583AE3_ai < 0 && lv_mutatorIndex >= auto03583AE3_ae) ) ; lv_mutatorIndex += auto03583AE3_ai ) {
        DialogControlHookup(libRWDR_gv_sOTP_MutatorListSmallPanel, c_triggerControlTypePanel, "MutatorItem" + IntToString(lv_mutatorIndex));
        libRWDR_gv_sOTP_MutatorListSmallItems[lv_mutatorIndex] = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_sOTP_MutatorListSmallItems[lv_mutatorIndex], c_triggerControlTypeImage, "MutatorIcon");
        libRWDR_gv_sOTP_MutatorListSmallIcon[lv_mutatorIndex] = DialogControlLastCreated();
    }
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MutatorLargeList");
    libRWDR_gv_sOTP_MutatorListLargePanel = DialogControlLastCreated();
    lv_mutatorIndex = 1;
    for ( ; ( (auto34E36358_ai >= 0 && lv_mutatorIndex <= auto34E36358_ae) || (auto34E36358_ai < 0 && lv_mutatorIndex >= auto34E36358_ae) ) ; lv_mutatorIndex += auto34E36358_ai ) {
        DialogControlHookup(libRWDR_gv_sOTP_MutatorListLargePanel, c_triggerControlTypePanel, "MutatorItem" + IntToString(lv_mutatorIndex));
        libRWDR_gv_sOTP_MutatorListLargeItems[lv_mutatorIndex] = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_sOTP_MutatorListLargeItems[lv_mutatorIndex], c_triggerControlTypeImage, "MutatorIcon");
        libRWDR_gv_sOTP_MutatorListLargeIcon[lv_mutatorIndex] = DialogControlLastCreated();
    }
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ConsoleUIContainer/MutatorNotification");
    libRWDR_gv_sOTP_MutatorListNotificationLabel = DialogControlLastCreated();
}

void libRWDR_gf_SOTP_MutatorListInit () {
    // Automatic Variable Declarations
    // Implementation
    libRWDR_gf_SOTP_MutatorListCreate();
    libRWDR_gf_SOTP_MutatorListInitSmall();
}

void libRWDR_gf_SOTP_MutatorListInitSmall () {
    // Variable Declarations
    int lv_mutatorIndex;

    // Automatic Variable Declarations
    const int auto1CFF109E_ae = libRWDR_gv_sOTP_MUTATOR_MAX_DISPLAY_SMALL;
    const int auto1CFF109E_ai = 1;

    // Variable Initialization

    // Implementation
    DialogControlSetVisible(libRWDR_gv_sOTP_MutatorListSmallPanel, PlayerGroupAll(), true);
    DialogControlSetVisible(libRWDR_gv_sOTP_MutatorListLargePanel, PlayerGroupAll(), false);
    lv_mutatorIndex = (lv_mutatorIndex+1);
    for ( ; ( (auto1CFF109E_ai >= 0 && lv_mutatorIndex <= auto1CFF109E_ae) || (auto1CFF109E_ai < 0 && lv_mutatorIndex >= auto1CFF109E_ae) ) ; lv_mutatorIndex += auto1CFF109E_ai ) {
        DialogControlSetVisible(libRWDR_gv_sOTP_MutatorListSmallItems[lv_mutatorIndex], PlayerGroupAll(), false);
    }
}

void libRWDR_gf_SOTP_MutatorListInitLarge () {
    // Variable Declarations
    int lv_mutatorIndex;

    // Automatic Variable Declarations
    const int auto57063C6B_ae = libRWDR_gv_sOTP_MUTATOR_MAX_DISPLAY_LARGE;
    const int auto57063C6B_ai = 1;

    // Variable Initialization

    // Implementation
    DialogControlSetVisible(libRWDR_gv_sOTP_MutatorListSmallPanel, PlayerGroupAll(), false);
    DialogControlSetVisible(libRWDR_gv_sOTP_MutatorListLargePanel, PlayerGroupAll(), true);
    lv_mutatorIndex = (lv_mutatorIndex+1);
    for ( ; ( (auto57063C6B_ai >= 0 && lv_mutatorIndex <= auto57063C6B_ae) || (auto57063C6B_ai < 0 && lv_mutatorIndex >= auto57063C6B_ae) ) ; lv_mutatorIndex += auto57063C6B_ai ) {
        DialogControlSetVisible(libRWDR_gv_sOTP_MutatorListLargeItems[lv_mutatorIndex], PlayerGroupAll(), false);
    }
}

void libRWDR_gf_SOTP_MutatorListSetItem (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemImage(libRWDR_gv_sOTP_MutatorListSmallIcon[lp_index], UserDataGetImagePath("SOTP_Basic_Settings", "Mission09_Mutator_List", "Icon", lp_index), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_RWDR_F2C914BE", "NAME", UserDataGetText("SOTP_Basic_Settings", "Mission09_Mutator_List", "Name", lp_index));
    TextExpressionSetToken("Param/Expression/lib_RWDR_F2C914BE", "DESCRIPTION", UserDataGetText("SOTP_Basic_Settings", "Mission09_Mutator_List", "Description", lp_index));
    libNtve_gf_SetDialogItemTooltip(libRWDR_gv_sOTP_MutatorListSmallIcon[lp_index], TextExpressionAssemble("Param/Expression/lib_RWDR_F2C914BE"), PlayerGroupAll());
    DialogControlSetVisible(libRWDR_gv_sOTP_MutatorListSmallItems[lp_index], PlayerGroupAll(), true);
}

void libRWDR_gf_SOTP_MutatorListHideItem (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libRWDR_gv_sOTP_MutatorListSmallItems[lp_index], PlayerGroupAll(), false);
}

void libRWDR_gf_SOTP_MutatorListShowNotification (text lp_message) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libRWDR_gv_sOTP_MutatorListNotificationLabel, lp_message, PlayerGroupAll());
    DialogControlSendAnimationEvent(libRWDR_gv_sOTP_MutatorListNotificationLabel, PlayerGroupAll(), "Show");
    TimerStart(libRWDR_gv_sOTP_MutatorListNotificationTimer, 5.0, false, c_timeReal);
    TriggerEnable(libRWDR_gt_SOTP_MutatorListNotificationExpired, true);
}

void libRWDR_gf_SOTP_MutatorListShowNotificationToPlayer (text lp_message, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libRWDR_gv_sOTP_MutatorListNotificationLabel, lp_message, PlayerGroupSingle(lp_player));
    DialogControlSendAnimationEvent(libRWDR_gv_sOTP_MutatorListNotificationLabel, PlayerGroupSingle(lp_player), "Show");
    TimerStart(libRWDR_gv_sOTP_MutatorListNotificationTimer, 5.0, false, c_timeReal);
    TriggerEnable(libRWDR_gt_SOTP_MutatorListNotificationExpired, true);
}

void libRWDR_gf_TalentPanelCreate () {
    // Variable Declarations
    int lv_index1;
    int lv_index2;

    // Automatic Variable Declarations
    const int autoBE268093_ae = 15;
    const int autoBE268093_ai = 1;
    const int auto1C2282CA_ae = 5;
    const int auto1C2282CA_ai = 1;

    // Variable Initialization

    // Implementation
    DialogCreate(1200, 800, c_anchorCenter, 0, 0, false);
    libRWDR_gv_talentPanel.lv_dialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1200, 800, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_scr_glues_pageassets_dialogbg.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1000, 300, c_anchorTop, 0, 10, StringToText(""), "Assets\\Textures\\ui_scr_glues_pageassets_dialog_hexpattern.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1000, 300, c_anchorBottom, 0, 10, StringToText(""), "Assets\\Textures\\ui_scr_glues_pageassets_dialog_hexpattern.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 100, c_anchorTop, 150, 50, StringExternal("Param/Value/lib_RWDR_46825514"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1064, 480, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_scr_glues_pageassets_maincontainer.dds", c_triggerImageTypeNineSlice, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "TGH_TalentTemplates/ItemsContainer");
    libRWDR_gv_talentPanel.lv_container = DialogControlLastCreated();
    DialogControlSetPosition(libRWDR_gv_talentPanel.lv_container, PlayerGroupAll(), c_anchorCenter, 0, 0);
    lv_index1 = 1;
    for ( ; ( (autoBE268093_ai >= 0 && lv_index1 <= autoBE268093_ae) || (autoBE268093_ai < 0 && lv_index1 >= autoBE268093_ae) ) ; lv_index1 += autoBE268093_ai ) {
        DialogControlHookup(libRWDR_gv_talentPanel.lv_container, c_triggerControlTypeButton, "Item" + IntToString(lv_index1));
        libRWDR_gv_talentPanel.lv_button[lv_index1] = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_talentPanel.lv_button[lv_index1], c_triggerControlTypeImage, "Icon");
        libRWDR_gv_talentPanel.lv_icon[lv_index1] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImage(libRWDR_gv_talentPanel.lv_icon[lv_index1], UserDataGetImagePath("TGHR_Basic_Settings", "TGHTalent", "Icon", lv_index1), PlayerGroupAll());
        DialogControlHookup(libRWDR_gv_talentPanel.lv_button[lv_index1], c_triggerControlTypeLabel, "Label");
        libRWDR_gv_talentPanel.lv_name[lv_index1] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(libRWDR_gv_talentPanel.lv_name[lv_index1], UserDataGetText("TGHR_Basic_Settings", "TGHTalent", "Name", lv_index1), PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(libRWDR_gv_talentPanel.lv_button[lv_index1], (StringExternal("Param/Value/lib_RWDR_1BA7C876") + UserDataGetText("TGHR_Basic_Settings", "TGHTalent", "Name", lv_index1) + StringExternal("Param/Value/lib_RWDR_398B3143") + StringExternal("Param/Value/lib_RWDR_F907C430") + StringExternal("Param/Value/lib_RWDR_A3670F70") + UserDataGetText("TGHR_Basic_Settings", "TGHTalent", "Description", lv_index1) + StringExternal("Param/Value/lib_RWDR_F994483A")), PlayerGroupAll());
        DialogControlSetAnimationState(libRWDR_gv_talentPanel.lv_button[lv_index1], PlayerGroupAll(), "SelectionState", "Normal");
    }
    lv_index2 = 1;
    for ( ; ( (auto1C2282CA_ai >= 0 && lv_index2 <= auto1C2282CA_ae) || (auto1C2282CA_ai < 0 && lv_index2 >= auto1C2282CA_ae) ) ; lv_index2 += auto1C2282CA_ai ) {
        DialogControlHookup(libRWDR_gv_talentPanel.lv_container, c_triggerControlTypePanel, "LevelBox" + IntToString(lv_index2));
        libRWDR_gv_talentPanel.lv_levelBox[lv_index2] = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_talentPanel.lv_levelBox[lv_index2], c_triggerControlTypeLabel, "LevelLabel");
        libRWDR_gv_talentPanel.lv_levelLabel[lv_index2] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(libRWDR_gv_talentPanel.lv_levelLabel[lv_index2], IntToText((lv_index2 * 5)), PlayerGroupAll());
    }
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "TGH_TalentTemplates/TalentHeaderTemplate");
    libRWDR_gv_talentPanel.lv_headerPanel = DialogControlLastCreated();
    DialogControlSetPositionRelative(libRWDR_gv_talentPanel.lv_headerPanel, PlayerGroupAll(), c_anchorBottom, libRWDR_gv_talentPanel.lv_container, c_anchorTop, 2, 0);
    DialogControlHookup(libRWDR_gv_talentPanel.lv_headerPanel, c_triggerControlTypeLabel, "TalentHeaderLabel");
    libRWDR_gv_talentPanel.lv_headerLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(libRWDR_gv_talentPanel.lv_headerLabel, (StringExternal("Param/Value/lib_RWDR_3077C57E") + StringExternal("Param/Value/lib_RWDR_9A0D0D5F") + IntToText(libRWDR_gv_talentPanel.lv_points)), PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(libRWDR_gv_talentPanel.lv_dialog, 310, 70, c_anchorBottom, -200, 60, StringToText(""), StringExternal("Param/Value/lib_RWDR_6F1C897D"), "Assets\\Textures\\ui_battlenet_glue_navbuttons_green_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_green_normalpressed.dds", PlayerGroupAll());
    libRWDR_gv_talentPanel.lv_reset = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(libRWDR_gv_talentPanel.lv_dialog, 310, 70, c_anchorBottom, 200, 60, StringToText(""), StringExternal("Param/Value/lib_RWDR_E4224368"), "Assets\\Textures\\ui_battlenet_glue_navbuttons_green_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_green_normalpressed.dds", PlayerGroupAll());
    libRWDR_gv_talentPanel.lv_close = DialogControlLastCreated();
}

void libRWDR_gf_TalentPanelUpdate () {
    // Automatic Variable Declarations
    const int auto67415C34_ae = 15;
    int auto67415C34_var;
    const int auto6FE3402A_ae = 12;
    int auto6FE3402A_var;
    const int autoF342A93E_ae = 9;
    int autoF342A93E_var;
    const int autoB74A7DBF_ae = 6;
    int autoB74A7DBF_var;
    const int auto6E110FC1_ae = 5;
    int auto6E110FC1_var;
    int auto85E469AD_val;

    // Implementation
    if ((libRWDR_gv_talentPanel.lv_points < 25)) {
        auto67415C34_var = 13;
        for ( ; auto67415C34_var <= auto67415C34_ae; auto67415C34_var += 1 ) {
            DialogControlSetEnabled(libRWDR_gv_talentPanel.lv_button[auto67415C34_var], PlayerGroupAll(), false);
            libRWDR_gv_talentPanel.lv_buttonEnabled[auto67415C34_var] = false;
        }
        if ((libRWDR_gv_talentPanel.lv_points < 20)) {
            auto6FE3402A_var = 10;
            for ( ; auto6FE3402A_var <= auto6FE3402A_ae; auto6FE3402A_var += 1 ) {
                DialogControlSetEnabled(libRWDR_gv_talentPanel.lv_button[auto6FE3402A_var], PlayerGroupAll(), false);
                libRWDR_gv_talentPanel.lv_buttonEnabled[auto6FE3402A_var] = false;
            }
            if ((libRWDR_gv_talentPanel.lv_points < 15)) {
                autoF342A93E_var = 7;
                for ( ; autoF342A93E_var <= autoF342A93E_ae; autoF342A93E_var += 1 ) {
                    DialogControlSetEnabled(libRWDR_gv_talentPanel.lv_button[autoF342A93E_var], PlayerGroupAll(), false);
                    libRWDR_gv_talentPanel.lv_buttonEnabled[autoF342A93E_var] = false;
                }
                if ((libRWDR_gv_talentPanel.lv_points < 10)) {
                    autoB74A7DBF_var = 4;
                    for ( ; autoB74A7DBF_var <= autoB74A7DBF_ae; autoB74A7DBF_var += 1 ) {
                        DialogControlSetEnabled(libRWDR_gv_talentPanel.lv_button[autoB74A7DBF_var], PlayerGroupAll(), false);
                        libRWDR_gv_talentPanel.lv_buttonEnabled[autoB74A7DBF_var] = false;
                    }
                }

            }

        }

    }

    auto6E110FC1_var = 1;
    for ( ; auto6E110FC1_var <= auto6E110FC1_ae; auto6E110FC1_var += 1 ) {
        if ((libRWDR_gv_talentPanel.lv_buttonEnabled[(auto6E110FC1_var * 3)] == true)) {
            auto85E469AD_val = libRWDR_gv_talentPanel.lv_selectedItem[auto6E110FC1_var];
            if (auto85E469AD_val == 1) {
                libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[((auto6E110FC1_var * 3) - 2)], true, PlayerGroupAll());
                libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[((auto6E110FC1_var * 3) - 1)], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[(auto6E110FC1_var * 3)], false, PlayerGroupAll());
            }
            else if (auto85E469AD_val == 2) {
                libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[((auto6E110FC1_var * 3) - 1)], true, PlayerGroupAll());
                libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[((auto6E110FC1_var * 3) - 2)], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[(auto6E110FC1_var * 3)], false, PlayerGroupAll());
            }
            else if (auto85E469AD_val == 3) {
                libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[(auto6E110FC1_var * 3)], true, PlayerGroupAll());
                libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[((auto6E110FC1_var * 3) - 2)], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[((auto6E110FC1_var * 3) - 1)], false, PlayerGroupAll());
            }
            else {
            }
        }

    }
}

void libRWDR_gf_ShowHideTGHTalentPanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((libRWDR_gv_talentPanel.lv_dialog == c_invalidDialogId)) {
        libRWDR_gf_TalentPanelCreate();
        libRWDR_gf_TalentPanelUpdate();
    }

    if ((lp_showHide == true)) {
        DialogSetVisible(libRWDR_gv_talentPanel.lv_dialog, PlayerGroupAll(), true);
        TriggerEnable(libRWDR_gt_TalentPanelController, true);
    }
    else {
        if ((libRWDR_gv_talentPanel.lv_dialog != c_invalidDialogId)) {
            DialogSetVisible(libRWDR_gv_talentPanel.lv_dialog, PlayerGroupAll(), false);
            TriggerEnable(libRWDR_gt_TalentPanelController, false);
            Wait(0.25, c_timeGame);
            DialogDestroy(libRWDR_gv_talentPanel.lv_dialog);
        }

    }
}

void libRWDR_gf_VictoryPanelCreate_RWD () {
    // Variable Declarations
    int lv_indexAchievement;
    int lv_indexStats;

    // Automatic Variable Declarations
    const int autoCC095410_ae = 6;
    const int autoCC095410_ai = 1;
    const int auto0881F3E8_ae = 3;
    const int auto0881F3E8_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libRWDR_gv_scoreScreenPanel.lv_dialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(1920, 1200, c_anchorCenter, 0, 0, true);
    libRWDR_gv_scoreScreenPanel.lv_dialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "RWD_ScoreScreen/ScoreScreenTemplate");
    libRWDR_gv_scoreScreenPanel.lv_container = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_container, c_triggerControlTypePanel, "MainPanel");
    libRWDR_gv_scoreScreenPanel.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypeLabel, "VictoryTextLabel");
    libRWDR_gv_scoreScreenPanel.lv_victoryTitle = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_victoryTitle, StringExternal("Param/Value/lib_RWDR_5EE57701"), PlayerGroupAll());
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypePanel, "ScreenTitleFrame");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "ScreenTitleLabel");
    libRWDR_gv_scoreScreenPanel.lv_missionTitle = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypeLabel, "TimeTextLabel");
    libRWDR_gv_scoreScreenPanel.lv_timeLabel = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypeImage, "BackgroundPortrait");
    libRWDR_gv_scoreScreenPanel.lv_backgroundImage = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypeImage, "BackgroundCover");
    libRWDR_gv_scoreScreenPanel.lv_backgroundCover = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypePanel, "PrimaryMissionReward");
    libRWDR_gv_scoreScreenPanel.lv_rewardPanel[1] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_rewardPanel[1], c_triggerControlTypeLabel, "RewardTitleLabel");
    libRWDR_gv_scoreScreenPanel.lv_rewardTitle[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardTitle[1], libRWDR_gv_briefDefault.lv_reward_Mastery, PlayerGroupAll());
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_rewardPanel[1], c_triggerControlTypeLabel, "RewardTextLabel");
    libRWDR_gv_scoreScreenPanel.lv_rewardText[1] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypePanel, "BonusMissionReward");
    libRWDR_gv_scoreScreenPanel.lv_rewardPanel[2] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_rewardPanel[2], c_triggerControlTypeLabel, "RewardTitleLabel");
    libRWDR_gv_scoreScreenPanel.lv_rewardTitle[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardTitle[2], libRWDR_gv_briefDefault.lv_reward_Tech, PlayerGroupAll());
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_rewardPanel[2], c_triggerControlTypeLabel, "RewardTextLabel");
    libRWDR_gv_scoreScreenPanel.lv_rewardText[2] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypePanel, "NewUnitFrame");
    libRWDR_gv_scoreScreenPanel.lv_rewardPanel[3] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_rewardPanel[3], c_triggerControlTypeLabel, "RewardTitleLabel");
    libRWDR_gv_scoreScreenPanel.lv_rewardTitle[3] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardTitle[3], libRWDR_gv_briefDefault.lv_reward_Faction, PlayerGroupAll());
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_rewardPanel[3], c_triggerControlTypeLabel, "RewardTextLabel");
    libRWDR_gv_scoreScreenPanel.lv_rewardText[3] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypePanel, "MissionFactionSpecializationUnlocks");
    libRWDR_gv_scoreScreenPanel.lv_rewardPanel[4] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_rewardPanel[4], c_triggerControlTypeLabel, "RewardTitleLabel");
    libRWDR_gv_scoreScreenPanel.lv_rewardTitle[4] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_rewardPanel[4], c_triggerControlTypeLabel, "RewardTextLabel");
    libRWDR_gv_scoreScreenPanel.lv_rewardText[4] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypeLabel, "SummaryHeadingLabel");
    libRWDR_gv_scoreScreenPanel.lv_rewardHeadingLabel = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypeImage, "SummaryTitleLabelUnderline");
    libRWDR_gv_scoreScreenPanel.lv_rewardHeadingUnderLine = DialogControlLastCreated();
    lv_indexStats = 1;
    for ( ; ( (autoCC095410_ai >= 0 && lv_indexStats <= autoCC095410_ae) || (autoCC095410_ai < 0 && lv_indexStats >= autoCC095410_ae) ) ; lv_indexStats += autoCC095410_ai ) {
        DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypePanel, "StatsCount" + IntToString(lv_indexStats));
        libRWDR_gv_scoreScreenPanel.lv_statsPanel[lv_indexStats] = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_statsPanel[lv_indexStats], c_triggerControlTypeLabel, "RewardTitleLabel");
        libRWDR_gv_scoreScreenPanel.lv_statsTitle[lv_indexStats] = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_statsPanel[lv_indexStats], c_triggerControlTypeLabel, "RewardTextLabel");
        libRWDR_gv_scoreScreenPanel.lv_statsText[lv_indexStats] = DialogControlLastCreated();
    }
    lv_indexAchievement = 1;
    for ( ; ( (auto0881F3E8_ai >= 0 && lv_indexAchievement <= auto0881F3E8_ae) || (auto0881F3E8_ai < 0 && lv_indexAchievement >= auto0881F3E8_ae) ) ; lv_indexAchievement += auto0881F3E8_ai ) {
        DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypePanel, "AchievementFrame" + IntToString(lv_indexAchievement-1));
        libRWDR_gv_scoreScreenPanel.lv_achievementPanel[lv_indexAchievement] = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_achievementPanel[lv_indexAchievement], c_triggerControlTypeImage, "IconImage");
        libRWDR_gv_scoreScreenPanel.lv_achievementIcon[lv_indexAchievement] = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypePanel, "AchievementTooltip" + IntToString(lv_indexAchievement-1));
        libRWDR_gv_scoreScreenPanel.lv_achievementTooltip[lv_indexAchievement] = DialogControlLastCreated();
        DialogControlSetVisible(libRWDR_gv_scoreScreenPanel.lv_achievementTooltip[lv_indexAchievement], PlayerGroupAll(), false);
        DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_achievementTooltip[lv_indexAchievement], c_triggerControlTypeImage, "IconImage");
        libRWDR_gv_scoreScreenPanel.lv_achievementTooltipIcon[lv_indexAchievement] = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_achievementTooltip[lv_indexAchievement], c_triggerControlTypeLabel, "NameLabel");
        libRWDR_gv_scoreScreenPanel.lv_achievementTooltipName[lv_indexAchievement] = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_achievementTooltip[lv_indexAchievement], c_triggerControlTypeLabel, "DescriptionLabel");
        libRWDR_gv_scoreScreenPanel.lv_achievementTooltipDescription[lv_indexAchievement] = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_achievementTooltip[lv_indexAchievement], c_triggerControlTypeLabel, "PointsLabel");
        libRWDR_gv_scoreScreenPanel.lv_achievementTooltipPoints[lv_indexAchievement] = DialogControlLastCreated();
    }
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypeButton, "PlayAgainButton");
    libRWDR_gv_scoreScreenPanel.lv_btn_Launcher = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypeButton, "CloseButton");
    libRWDR_gv_scoreScreenPanel.lv_btn_Continue = DialogControlLastCreated();
}

void libRWDR_gf_VictoryPanelUpdate_RWD (int lp_mission) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoCFD46427_val;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_missionTitle, (libRWDR_gf_MissionName(lp_mission) + StringExternal("Param/Value/lib_RWDR_455834BD") + libRWDR_gf_DifficultyDisplay()), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_timeLabel, TextTimeFormat(StringToText("<hour2/>:<min2/>:<sec2/>"), FixedToInt(libRWDR_gv_stats_MissionTime)), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(libRWDR_gv_scoreScreenPanel.lv_backgroundImage, "Assets\\Textures\\ui_temp_victorybackground.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_btn_Launcher, libRWDR_gv_briefDefault.lv_exit, PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(libRWDR_gv_scoreScreenPanel.lv_btn_Launcher, libRWDR_gv_briefDefault.lv_launcher, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_btn_Continue, libRWDR_gv_briefDefault.lv_continue, PlayerGroupAll());
    if ((lp_mission == 9)) {
        libNtve_gf_SetDialogItemTooltip(libRWDR_gv_scoreScreenPanel.lv_btn_Continue, StringExternal("Param/Value/lib_RWDR_9D17E431"), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemTooltip(libRWDR_gv_scoreScreenPanel.lv_btn_Continue, StringExternal("Param/Value/lib_RWDR_4059A099"), PlayerGroupAll());
    }
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[1], IntToText(libRWDR_gv_stats_MasteryAwarded), PlayerGroupAll());
    autoCFD46427_val = lp_mission;
    if (autoCFD46427_val == 2) {
        if ((libRWDR_gv_rewards_SuperWarpgate == true)) {
            libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[2], StringExternal("Param/Value/lib_RWDR_83DDE2CF"), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[2], StringExternal("Param/Value/lib_RWDR_82C2CB6B"), PlayerGroupAll());
        }
    }
    else if (autoCFD46427_val == 3) {
        if ((libRWDR_gv_rewards_AutoAssimilator == true)) {
            libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[2], StringExternal("Param/Value/lib_RWDR_86879AE7"), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[2], StringExternal("Param/Value/lib_RWDR_C1D250A9"), PlayerGroupAll());
        }
    }
    else if (autoCFD46427_val == 4) {
        if ((libRWDR_gv_rewards_FastBuild == true)) {
            libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[2], StringExternal("Param/Value/lib_RWDR_C50DFE8D"), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[2], StringExternal("Param/Value/lib_RWDR_5BF0E676"), PlayerGroupAll());
        }
    }
    else if (autoCFD46427_val == 6) {
        if ((libRWDR_gv_rewards_FastUpgrade == true)) {
            libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[2], StringExternal("Param/Value/lib_RWDR_A6FB87C1"), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[2], StringExternal("Param/Value/lib_RWDR_8CF41BAE"), PlayerGroupAll());
        }
    }
    else {
        DialogControlSetVisible(libRWDR_gv_scoreScreenPanel.lv_rewardPanel[2], PlayerGroupAll(), false);
    }
    if (((lp_mission == 1) || (lp_mission == 2))) {
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[3], StringExternal("Param/Value/lib_RWDR_767EBECB"), PlayerGroupAll());
    }
    else if (((lp_mission == 3) || (lp_mission == 4) || (lp_mission == 6) || (lp_mission == 8))) {
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[3], StringExternal("Param/Value/lib_RWDR_7B5B6F18"), PlayerGroupAll());
    }
    else if ((lp_mission == 5)) {
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[3], StringExternal("Param/Value/lib_RWDR_2F06090A"), PlayerGroupAll());
    }
    else if (((lp_mission == 7) || (lp_mission == 9))) {
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[3], libRWDR_gf_FactionSelect79(), PlayerGroupAll());
    }
    if ((lp_mission == 6)) {
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardTitle[4], StringExternal("Param/Value/lib_RWDR_942FBDE4"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[4], IntToText(libRWDR_gv_stats_ExraCount), PlayerGroupAll());
    }
    else {
        if ((lp_mission == 8)) {
            libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardTitle[4], StringExternal("Param/Value/lib_RWDR_8AD7BC84"), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[4], IntToText(libRWDR_gv_stats_ExraCount), PlayerGroupAll());
        }
        else {
            DialogControlSetVisible(libRWDR_gv_scoreScreenPanel.lv_rewardPanel[4], PlayerGroupAll(), false);
        }
    }
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsTitle[1], libRWDR_gv_briefDefault.lv_stats_TotalKill, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsText[1], IntToText(libRWDR_gv_stats_TotalKill), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsTitle[2], libRWDR_gv_briefDefault.lv_stats_HeroKill, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsText[2], IntToText(libRWDR_gv_stats_HeroKill), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsTitle[3], libRWDR_gv_briefDefault.lv_stats_UnitLost, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsText[3], IntToText(libRWDR_gv_stats_UnitLost), PlayerGroupAll());
    if (((lp_mission == 1) || (lp_mission == 2) || (lp_mission == 5) || (lp_mission == 9))) {
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsTitle[4], StringExternal("Param/Value/lib_RWDR_B1D408E4"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsText[4], IntToText(libRWDR_gv_tolarisLevel), PlayerGroupAll());
    }
    else if ((lp_mission == 3)) {
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsTitle[4], StringExternal("Param/Value/lib_RWDR_50B93368"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsText[4], IntToText(libRWDR_gv_delanarLevel), PlayerGroupAll());
    }
    else if ((lp_mission == 7)) {
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsTitle[4], libRWDR_gf_HeroSelect7(), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsText[4], IntToText(libRWDR_gf_HeroSelect7Level()), PlayerGroupAll());
    }
    else if (((lp_mission == 4) || (lp_mission == 6) || (lp_mission == 8))) {
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsTitle[4], StringExternal("Param/Value/lib_RWDR_398F7E7A"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsText[4], IntToText(libRWDR_gv_avalaxLevel), PlayerGroupAll());
    }
    if (((lp_mission == 6) || (lp_mission == 9))) {
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsTitle[5], StringExternal("Param/Value/lib_RWDR_968D8621"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsText[5], IntToText(libRWDR_gv_delanarLevel), PlayerGroupAll());
    }
    else {
        DialogControlSetVisible(libRWDR_gv_scoreScreenPanel.lv_statsPanel[5], PlayerGroupAll(), false);
    }
    DialogControlSetVisible(libRWDR_gv_scoreScreenPanel.lv_statsPanel[6], PlayerGroupAll(), false);
    libRWDR_gf_DisplayRWDScorescreenAchi(lp_mission);
}

void libRWDR_gf_VictoryPanelCreate_SOTP () {
    // Variable Declarations
    int lv_indexAchievement;
    int lv_indexStats;

    // Automatic Variable Declarations
    const int autoB5C7074B_ae = 6;
    const int autoB5C7074B_ai = 1;
    const int auto9613E29B_ae = 3;
    const int auto9613E29B_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libRWDR_gv_scoreScreenPanel.lv_dialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(1920, 1200, c_anchorCenter, 0, 0, true);
    libRWDR_gv_scoreScreenPanel.lv_dialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "SOTP_ScoreScreen/ScoreScreenTemplate");
    libRWDR_gv_scoreScreenPanel.lv_container = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_container, c_triggerControlTypePanel, "MainPanel");
    libRWDR_gv_scoreScreenPanel.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypeLabel, "VictoryTextLabel");
    libRWDR_gv_scoreScreenPanel.lv_victoryTitle = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_victoryTitle, StringExternal("Param/Value/lib_RWDR_7EEF2269"), PlayerGroupAll());
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypePanel, "ScreenTitleFrame");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "ScreenTitleLabel");
    libRWDR_gv_scoreScreenPanel.lv_missionTitle = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypeLabel, "TimeTextLabel");
    libRWDR_gv_scoreScreenPanel.lv_timeLabel = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypeImage, "BackgroundPortrait");
    libRWDR_gv_scoreScreenPanel.lv_backgroundImage = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypeImage, "BackgroundCover");
    libRWDR_gv_scoreScreenPanel.lv_backgroundCover = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypePanel, "MissionRewardKerriganLevel");
    libRWDR_gv_scoreScreenPanel.lv_rewardPanel[1] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_rewardPanel[1], c_triggerControlTypeLabel, "RewardTitleLabel");
    libRWDR_gv_scoreScreenPanel.lv_rewardTitle[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardTitle[1], libRWDR_gv_briefDefault.lv_reward_Mastery, PlayerGroupAll());
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_rewardPanel[1], c_triggerControlTypeLabel, "RewardTextLabel");
    libRWDR_gv_scoreScreenPanel.lv_rewardText[1] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypePanel, "BonusMissionReward");
    libRWDR_gv_scoreScreenPanel.lv_rewardPanel[2] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_rewardPanel[2], c_triggerControlTypeLabel, "RewardTitleLabel");
    libRWDR_gv_scoreScreenPanel.lv_rewardTitle[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardTitle[2], libRWDR_gv_briefDefault.lv_reward_Tech, PlayerGroupAll());
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_rewardPanel[2], c_triggerControlTypeLabel, "RewardTextLabel");
    libRWDR_gv_scoreScreenPanel.lv_rewardText[2] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypePanel, "NewUnitFrame");
    libRWDR_gv_scoreScreenPanel.lv_rewardPanel[3] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_rewardPanel[3], c_triggerControlTypeLabel, "RewardTitleLabel");
    libRWDR_gv_scoreScreenPanel.lv_rewardTitle[3] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_rewardPanel[3], c_triggerControlTypeLabel, "RewardTextLabel");
    libRWDR_gv_scoreScreenPanel.lv_rewardText[3] = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypePanel, "MissionRewardEvolutionUnlocks");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypeLabel, "SummaryHeadingLabel");
    libRWDR_gv_scoreScreenPanel.lv_rewardHeadingLabel = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypeImage, "SummaryTitleLabelUnderline");
    libRWDR_gv_scoreScreenPanel.lv_rewardHeadingUnderLine = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypeLabel, "SummaryEmptyLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_indexStats = 1;
    for ( ; ( (autoB5C7074B_ai >= 0 && lv_indexStats <= autoB5C7074B_ae) || (autoB5C7074B_ai < 0 && lv_indexStats >= autoB5C7074B_ae) ) ; lv_indexStats += autoB5C7074B_ai ) {
        DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypePanel, "StatsCount" + IntToString(lv_indexStats));
        libRWDR_gv_scoreScreenPanel.lv_statsPanel[lv_indexStats] = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_statsPanel[lv_indexStats], c_triggerControlTypeLabel, "RewardTitleLabel");
        libRWDR_gv_scoreScreenPanel.lv_statsTitle[lv_indexStats] = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_statsPanel[lv_indexStats], c_triggerControlTypeLabel, "RewardTextLabel");
        libRWDR_gv_scoreScreenPanel.lv_statsText[lv_indexStats] = DialogControlLastCreated();
    }
    lv_indexAchievement = 1;
    for ( ; ( (auto9613E29B_ai >= 0 && lv_indexAchievement <= auto9613E29B_ae) || (auto9613E29B_ai < 0 && lv_indexAchievement >= auto9613E29B_ae) ) ; lv_indexAchievement += auto9613E29B_ai ) {
        DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypePanel, "AchievementFrame" + IntToString(lv_indexAchievement-1));
        libRWDR_gv_scoreScreenPanel.lv_achievementPanel[lv_indexAchievement] = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_achievementPanel[lv_indexAchievement], c_triggerControlTypeImage, "IconImage");
        libRWDR_gv_scoreScreenPanel.lv_achievementIcon[lv_indexAchievement] = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypePanel, "AchievementTooltip" + IntToString(lv_indexAchievement-1));
        libRWDR_gv_scoreScreenPanel.lv_achievementTooltip[lv_indexAchievement] = DialogControlLastCreated();
        DialogControlSetVisible(libRWDR_gv_scoreScreenPanel.lv_achievementTooltip[lv_indexAchievement], PlayerGroupAll(), false);
        DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_achievementTooltip[lv_indexAchievement], c_triggerControlTypeImage, "IconImage");
        libRWDR_gv_scoreScreenPanel.lv_achievementTooltipIcon[lv_indexAchievement] = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_achievementTooltip[lv_indexAchievement], c_triggerControlTypeLabel, "NameLabel");
        libRWDR_gv_scoreScreenPanel.lv_achievementTooltipName[lv_indexAchievement] = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_achievementTooltip[lv_indexAchievement], c_triggerControlTypeLabel, "DescriptionLabel");
        libRWDR_gv_scoreScreenPanel.lv_achievementTooltipDescription[lv_indexAchievement] = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_achievementTooltip[lv_indexAchievement], c_triggerControlTypeLabel, "PointsLabel");
        libRWDR_gv_scoreScreenPanel.lv_achievementTooltipPoints[lv_indexAchievement] = DialogControlLastCreated();
    }
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypeButton, "PlayAgainButton");
    libRWDR_gv_scoreScreenPanel.lv_btn_Launcher = DialogControlLastCreated();
    DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_mainPanel, c_triggerControlTypeButton, "CloseButton");
    libRWDR_gv_scoreScreenPanel.lv_btn_Continue = DialogControlLastCreated();
}

void libRWDR_gf_VictoryPanelUpdate_SOTP (int lp_mission) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoF66A11C8_val;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_missionTitle, (libRWDR_gf_ZMissionName(lp_mission) + StringExternal("Param/Value/lib_RWDR_0649BF8E") + libRWDR_gf_DifficultyDisplay()), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_timeLabel, TextTimeFormat(StringToText("<hour2/>:<min2/>:<sec2/>"), FixedToInt(libRWDR_gv_stats_MissionTime)), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(libRWDR_gv_scoreScreenPanel.lv_backgroundImage, libRWDR_gf_SOTPLoadingScreen(lp_mission), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_btn_Launcher, libRWDR_gv_briefDefault.lv_exit, PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(libRWDR_gv_scoreScreenPanel.lv_btn_Launcher, libRWDR_gv_briefDefault.lv_launcher, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_btn_Continue, libRWDR_gv_briefDefault.lv_continue, PlayerGroupAll());
    if ((lp_mission == 10)) {
        libNtve_gf_SetDialogItemTooltip(libRWDR_gv_scoreScreenPanel.lv_btn_Continue, StringExternal("Param/Value/lib_RWDR_EC1BE2CC"), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemTooltip(libRWDR_gv_scoreScreenPanel.lv_btn_Continue, StringExternal("Param/Value/lib_RWDR_EBCE411C"), PlayerGroupAll());
    }
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[1], IntToText(libRWDR_gv_stats_MasteryAwarded), PlayerGroupAll());
    autoF66A11C8_val = lp_mission;
    if (autoF66A11C8_val == 2) {
        if ((libRWDR_gv_rewards_ImprovedOverlords == true)) {
            libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[2], StringExternal("Param/Value/lib_RWDR_3B7E733A"), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[2], StringExternal("Param/Value/lib_RWDR_DBFD66F4"), PlayerGroupAll());
        }
    }
    else if (autoF66A11C8_val == 4) {
        if ((libRWDR_gv_rewards_DoubleResearch == true)) {
            libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[2], StringExternal("Param/Value/lib_RWDR_A70FF5CD"), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[2], StringExternal("Param/Value/lib_RWDR_7C559EC3"), PlayerGroupAll());
        }
    }
    else if (autoF66A11C8_val == 6) {
        if ((libRWDR_gv_rewards_PowerfulHatchery == true)) {
            libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[2], StringExternal("Param/Value/lib_RWDR_C980C67C"), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[2], StringExternal("Param/Value/lib_RWDR_B9305676"), PlayerGroupAll());
        }
    }
    else if (autoF66A11C8_val == 8) {
        if ((libRWDR_gv_rewards_AutoExtractor == true)) {
            libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[2], StringExternal("Param/Value/lib_RWDR_077BDA4E"), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[2], StringExternal("Param/Value/lib_RWDR_6C54E0E9"), PlayerGroupAll());
        }
    }
    else {
        DialogControlSetVisible(libRWDR_gv_scoreScreenPanel.lv_rewardPanel[2], PlayerGroupAll(), false);
    }
    libRWDR_gf_SOTPExtraPanel(lp_mission);
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsTitle[1], libRWDR_gv_briefDefault.lv_stats_TotalKill, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsText[1], IntToText(libRWDR_gv_stats_TotalKill), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsTitle[2], libRWDR_gv_briefDefault.lv_stats_HeroKill, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsText[2], IntToText(libRWDR_gv_stats_HeroKill), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsTitle[3], libRWDR_gv_briefDefault.lv_stats_UnitLost, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsText[3], IntToText(libRWDR_gv_stats_UnitLost), PlayerGroupAll());
    if ((lp_mission == 8)) {
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsTitle[4], StringExternal("Param/Value/lib_RWDR_A276F59A"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsText[4], IntToText(libRWDR_gv_tolarisLevel), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsTitle[4], StringExternal("Param/Value/lib_RWDR_3AF1F34E"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsText[4], IntToText(libRWDR_gv_byronLevel), PlayerGroupAll());
    }
    if (((lp_mission == 3) || (lp_mission == 4))) {
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsTitle[5], StringExternal("Param/Value/lib_RWDR_ED4A6808"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsText[5], IntToText(libRWDR_gv_eledisLevel), PlayerGroupAll());
    }
    else {
        if ((lp_mission == 7)) {
            libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsTitle[5], StringExternal("Param/Value/lib_RWDR_DA0D6E07"), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_statsText[5], IntToText(libRWDR_gv_tolarisLevel), PlayerGroupAll());
        }
        else {
            DialogControlSetVisible(libRWDR_gv_scoreScreenPanel.lv_statsPanel[5], PlayerGroupAll(), false);
        }
    }
    DialogControlSetVisible(libRWDR_gv_scoreScreenPanel.lv_statsPanel[6], PlayerGroupAll(), false);
    libRWDR_gf_DisplaySOTPScorescreenAchi(lp_mission);
}

void libRWDR_gf_VictoryScreenDisplay (string lp_race, int lp_mission) {
    // Automatic Variable Declarations
    string auto12699468_val;

    // Implementation
    if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationImmediate);
    }

    CinematicFade(true, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UISetWorldVisible(PlayerGroupAll(), false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    UISetCursorVisible(PlayerGroupAll(), true);
    TransmissionClearAll();
    libRWDR_gf_SetAllSoundChannelVolumesCampaign(libRWDR_ge_VolumeChannelModeCampaign_Victory);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Silence", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    auto12699468_val = lp_race;
    if (auto12699468_val == "Prot") {
        libRWDR_gf_VictoryPanelCreate_RWD();
        libRWDR_gf_VictoryPanelUpdate_RWD(lp_mission);
        DialogSetVisible(libRWDR_gv_scoreScreenPanel.lv_dialog, PlayerGroupAll(), true);
        DialogControlSendAnimationEvent(libRWDR_gv_scoreScreenPanel.lv_mainPanel, PlayerGroupAll(), "Birth");
    }
    else if (auto12699468_val == "Zerg") {
        libRWDR_gf_VictoryPanelCreate_SOTP();
        libRWDR_gf_VictoryPanelUpdate_SOTP(lp_mission);
        DialogSetVisible(libRWDR_gv_scoreScreenPanel.lv_dialog, PlayerGroupAll(), true);
    }
    else {
    }
    TriggerEnable(libRWDR_gv_victoryContinueButtonTrig, true);
    TriggerEnable(libRWDR_gv_victoryExitButtonTrig, true);
}

void libRWDR_gf_AIDarkArchon (int lp_owner, unit lp_darkArchon, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_enemyGroup7;
    unit lv_currentUnit;
    unit lv_target;

    // Automatic Variable Declarations
    unitgroup auto66686C1F_g;
    int auto66686C1F_u;
    unitgroup autoDD3E625A_g;
    int autoDD3E625A_u;
    unitgroup auto7AEE7A9F_g;
    int auto7AEE7A9F_u;

    // Variable Initialization
    lv_enemyGroup7 = UnitGroupEmpty();

    // Implementation
    lv_enemyGroup7 = libRWDR_gf_AITacticalEnemiesWithinRange(lp_darkArchon, 7.0, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32))));
    if ((UnitGroupCount(lv_enemyGroup7, c_unitCountAlive) > 0) && (UnitGetPropertyFixed(lp_darkArchon, c_unitPropEnergy, c_unitPropCurrent) >= libNtve_gf_CostOfAbility("DarkArchonMindControl", "Energy")) && (UnitAbilityCheck(lp_darkArchon, "DarkArchonMindControl", true) == true) && (UnitCheckAbilCmdState(lp_darkArchon, AbilityCommand("DarkArchonMindControl", 0), c_cmdStateCooldown) == false)) {
        auto66686C1F_g = lv_enemyGroup7;
        auto66686C1F_u = UnitGroupCount(auto66686C1F_g, c_unitCountAll);
        for (;; auto66686C1F_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(auto66686C1F_g, auto66686C1F_u);
            if (lv_currentUnit == null) { break; }
            if (((UnitHasBehavior2(lv_currentUnit, "Frenzy") == true) || (UnitGetPropertyFixed(lv_currentUnit, c_unitPropLifeMax, c_unitPropCurrent) < 120.0))) {
                UnitGroupRemove(lv_enemyGroup7, lv_currentUnit);
            }

        }
        if ((UnitGroupCount(lv_enemyGroup7, c_unitCountAlive) > 0)) {
            lv_target = UnitGroupRandomUnit(lv_enemyGroup7, c_unitCountAlive);
            autoDD3E625A_g = lv_enemyGroup7;
            autoDD3E625A_u = UnitGroupCount(autoDD3E625A_g, c_unitCountAll);
            for (;; autoDD3E625A_u -= 1) {
                lv_currentUnit = UnitGroupUnitFromEnd(autoDD3E625A_g, autoDD3E625A_u);
                if (lv_currentUnit == null) { break; }
                if ((UnitGetPropertyFixed(lv_currentUnit, c_unitPropLifeMax, c_unitPropCurrent) > UnitGetPropertyFixed(lv_target, c_unitPropLifeMax, c_unitPropCurrent))) {
                    lv_target = lv_currentUnit;
                }

            }
            libNtve_gf_AICast(lp_darkArchon, OrderTargetingUnit(AbilityCommand("DarkArchonMindControl", 0), lv_target));
            return ;
        }

    }

    lv_enemyGroup7 = libRWDR_gf_AITacticalEnemiesWithinRange(lp_darkArchon, 7.0, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
    UnitGroupRemoveUnitGroup(lv_enemyGroup7, libRWDR_gf_AITacticalEnemiesWithinRange(lp_darkArchon, 1.5, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32)))));
    if ((UnitGroupCount(lv_enemyGroup7, c_unitCountAlive) > 0) && (UnitGetPropertyFixed(lp_darkArchon, c_unitPropEnergy, c_unitPropCurrent) >= libNtve_gf_CostOfAbility("DarkArchonConfusion", "Energy")) && (UnitAbilityCheck(lp_darkArchon, "DarkArchonConfusion", true) == true) && (UnitCheckAbilCmdState(lp_darkArchon, AbilityCommand("DarkArchonConfusion", 0), c_cmdStateCooldown) == false)) {
        auto7AEE7A9F_g = lv_enemyGroup7;
        auto7AEE7A9F_u = UnitGroupCount(auto7AEE7A9F_g, c_unitCountAll);
        for (;; auto7AEE7A9F_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(auto7AEE7A9F_g, auto7AEE7A9F_u);
            if (lv_currentUnit == null) { break; }
            if (((UnitHasBehavior2(lv_currentUnit, "Frenzy") == true) || (UnitGetType(lv_currentUnit) == "Medivac") || (UnitGetType(lv_currentUnit) == "Overlord") || (UnitGetType(lv_currentUnit) == "WarpPrism") || (UnitGetType(lv_currentUnit) == "WarpPrismPhasing") || (UnitGetType(lv_currentUnit) == "Zergling") || (UnitGetType(lv_currentUnit) == "Carrier"))) {
                UnitGroupRemove(lv_enemyGroup7, lv_currentUnit);
            }

        }
        if ((UnitGroupCount(lv_enemyGroup7, c_unitCountAlive) > 0)) {
            lv_target = UnitGroupRandomUnit(lv_enemyGroup7, c_unitCountAlive);
            libNtve_gf_AICast(lp_darkArchon, OrderTargetingPoint(AbilityCommand("DarkArchonConfusion", 0), UnitGetPosition(lv_target)));
        }

    }

}

void libRWDR_gf_AIHighTemplarTaldarim (int lp_owner, unit lp_highTemplarTaldarim, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_enemyGroup10;
    unit lv_currentUnit;
    unit lv_target;
    int lv_clusterCount;

    // Automatic Variable Declarations
    unitgroup auto350ABDD4_g;
    int auto350ABDD4_u;
    unitgroup auto0DD1F1A1_g;
    int auto0DD1F1A1_u;

    // Variable Initialization
    lv_enemyGroup10 = UnitGroupEmpty();

    // Implementation
    lv_enemyGroup10 = libRWDR_gf_AITacticalEnemiesWithinRange(lp_highTemplarTaldarim, 10.0, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32))));
    if ((UnitGroupCount(lv_enemyGroup10, c_unitCountAlive) > 0) && (UnitGetPropertyFixed(lp_highTemplarTaldarim, c_unitPropEnergy, c_unitPropCurrent) >= libNtve_gf_CostOfAbility("VoidHighTemplarMindBlast", "Energy")) && (UnitAbilityCheck(lp_highTemplarTaldarim, "VoidHighTemplarMindBlast", true) == true) && (UnitCheckAbilCmdState(lp_highTemplarTaldarim, AbilityCommand("VoidHighTemplarMindBlast", 0), c_cmdStateCooldown) == false)) {
        if ((UnitGetPropertyFixed(lp_highTemplarTaldarim, c_unitPropShields, c_unitPropCurrent) == 0.0)) {
            lv_target = UnitGroupClosestToPoint(lv_enemyGroup10, UnitGetPosition(lp_highTemplarTaldarim));
            libNtve_gf_AICast(lp_highTemplarTaldarim, OrderTargetingUnit(AbilityCommand("VoidHighTemplarMindBlast", 0), lv_target));
            return ;
        }
        else {
            auto350ABDD4_g = lv_enemyGroup10;
            auto350ABDD4_u = UnitGroupCount(auto350ABDD4_g, c_unitCountAll);
            for (;; auto350ABDD4_u -= 1) {
                lv_currentUnit = UnitGroupUnitFromEnd(auto350ABDD4_g, auto350ABDD4_u);
                if (lv_currentUnit == null) { break; }
                if (((UnitGetPropertyFixed(lv_currentUnit, c_unitPropLife, c_unitPropCurrent) < 120.0) || (UnitGetPropertyFixed(lv_currentUnit, c_unitPropLifeMax, c_unitPropCurrent) < 200.0))) {
                    UnitGroupRemove(lv_enemyGroup10, lv_currentUnit);
                }

            }
            if ((UnitGroupCount(lv_enemyGroup10, c_unitCountAlive) > 0)) {
                lv_target = UnitGroupRandomUnit(lv_enemyGroup10, c_unitCountAlive);
                libNtve_gf_AICast(lp_highTemplarTaldarim, OrderTargetingUnit(AbilityCommand("VoidHighTemplarMindBlast", 0), lv_target));
                return ;
            }

        }
    }

    lv_enemyGroup10 = libRWDR_gf_AITacticalEnemiesWithinRange(lp_highTemplarTaldarim, 10.0, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32))));
    if ((UnitGroupCount(lv_enemyGroup10, c_unitCountAlive) > 0) && (UnitGetPropertyFixed(lp_highTemplarTaldarim, c_unitPropEnergy, c_unitPropCurrent) >= libNtve_gf_CostOfAbility("VoidHighTemplarPsiOrb", "Energy")) && (UnitAbilityCheck(lp_highTemplarTaldarim, "VoidHighTemplarPsiOrb", true) == true) && (UnitCheckAbilCmdState(lp_highTemplarTaldarim, AbilityCommand("VoidHighTemplarPsiOrb", 0), c_cmdStateCooldown) == false)) {
        if ((UnitGetPropertyFixed(lp_highTemplarTaldarim, c_unitPropShields, c_unitPropCurrent) == 0.0)) {
            lv_target = UnitGroupClosestToPoint(lv_enemyGroup10, UnitGetPosition(lp_highTemplarTaldarim));
            libNtve_gf_AICast(lp_highTemplarTaldarim, OrderTargetingPoint(AbilityCommand("VoidHighTemplarPsiOrb", 0), UnitGetPosition(lv_target)));
            return ;
        }
        else {
            lv_target = null;
            lv_clusterCount = 2;
            auto0DD1F1A1_g = lv_enemyGroup10;
            auto0DD1F1A1_u = UnitGroupCount(auto0DD1F1A1_g, c_unitCountAll);
            for (;; auto0DD1F1A1_u -= 1) {
                lv_currentUnit = UnitGroupUnitFromEnd(auto0DD1F1A1_g, auto0DD1F1A1_u);
                if (lv_currentUnit == null) { break; }
                if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(lp_highTemplarTaldarim), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_currentUnit), 2.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > lv_clusterCount)) {
                    lv_target = lv_currentUnit;
                    lv_clusterCount = UnitGroupCount(UnitGroupAlliance(UnitGetOwner(lp_highTemplarTaldarim), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_currentUnit), 2.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                }

            }
            if ((lv_target != null)) {
                libNtve_gf_AICast(lp_highTemplarTaldarim, OrderTargetingPoint(AbilityCommand("VoidHighTemplarPsiOrb", 0), UnitGetPosition(lv_target)));
                return ;
            }

        }
    }

}

void libRWDR_gf_AIGhostSpecial (int lp_owner, unit lp_aIUnit, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_enemyUnitsNearby;
    unitgroup lv_canidates;
    unit lv_currnetUnit;
    point lv_target;
    fixed lv_abilityRange;
    fixed lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;

    // Automatic Variable Declarations
    unitgroup auto71C17584_g;
    int auto71C17584_u;

    // Variable Initialization
    lv_enemyUnitsNearby = UnitGroupEmpty();
    lv_canidates = UnitGroupEmpty();

    // Implementation
    lv_enemyUnitsNearby = libRWDR_gf_AITacticalEnemiesWithinRange(lp_aIUnit, 10.0, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32))));
    auto71C17584_g = lv_enemyUnitsNearby;
    auto71C17584_u = UnitGroupCount(auto71C17584_g, c_unitCountAll);
    for (;; auto71C17584_u -= 1) {
        lv_currnetUnit = UnitGroupUnitFromEnd(auto71C17584_g, auto71C17584_u);
        if (lv_currnetUnit == null) { break; }
        if (((UnitTypeTestAttribute(UnitGetType(lv_currnetUnit), c_unitAttributeSummoned) == true) || (UnitGetPropertyFixed(lv_currnetUnit, c_unitPropEnergy, c_unitPropCurrent) >= 20.0))) {
            UnitGroupAdd(lv_canidates, lv_currnetUnit);
        }

    }
    if ((UnitGroupCount(lv_canidates, c_unitCountAlive) > 0) && (UnitGetPropertyFixed(lp_aIUnit, c_unitPropEnergy, c_unitPropCurrent) >= libNtve_gf_CostOfAbility("EMPSpecial", "Energy")) && (UnitAbilityCheck(lp_aIUnit, "EMPSpecial", true) == true) && (UnitCheckAbilCmdState(lp_aIUnit, AbilityCommand("EMPSpecial", 0), c_cmdStateCooldown) == false)) {
        lv_abilityRange = 10.0;
        lv_abilityDamage = 20.0;
        lv_abilityAoE = 1.75;
        lv_score = 1;
        lv_target = AIBestTargetPoint(lv_canidates, 3, FixedToInt(lv_abilityDamage), lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
        if ((lv_target != null)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("EMPSpecial", 0), lv_target));
            return ;
        }

    }

}

void libRWDR_gf_AIDukesRevenge (int lp_owner, unit lp_aIUnit, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_enemyYamatoGroup10;
    unitgroup lv_enemyMissilePodGroup7;
    unitgroup lv_canidates;
    aifilter lv_canidatesFilter;
    point lv_target;
    fixed lv_abilityRange;
    fixed lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyYamatoGroup10 = UnitGroupEmpty();
    lv_enemyMissilePodGroup7 = UnitGroupEmpty();
    lv_canidates = UnitGroupEmpty();
    lv_canidatesFilter = AIFilter(lp_owner);

    // Implementation
    lv_enemyYamatoGroup10 = libRWDR_gf_AITacticalEnemiesWithinRange(lp_aIUnit, 10.0, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32))));
    lv_enemyMissilePodGroup7 = libRWDR_gf_AITacticalEnemiesWithinRange(lp_aIUnit, 7.0, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32))));
    if ((UnitGroupCount(lv_enemyYamatoGroup10, c_unitCountAlive) > 0) && (UnitCheckAbilCmdState(lp_aIUnit, AbilityCommand("DukesRevengeDefensiveMatrix", 0), c_cmdStateCooldown) == false) && (UnitAbilityCheck(lp_aIUnit, "DukesRevengeDefensiveMatrix", true) == true) && (UnitGetPropertyFixed(lp_aIUnit, c_unitPropLife, c_unitPropCurrent) <= 300.0) && (UnitGetPropertyFixed(lp_aIUnit, c_unitPropEnergy, c_unitPropCurrent) >= 100.0)) {
        libNtve_gf_AICast(lp_aIUnit, Order(AbilityCommand("DukesRevengeDefensiveMatrix", 0)));
        return ;
    }

    if ((UnitGroupCount(lv_enemyYamatoGroup10, c_unitCountAlive) > 0) && (UnitCheckAbilCmdState(lp_aIUnit, AbilityCommand("DukesRevengeYamato", 0), c_cmdStateCooldown) == false) && (UnitAbilityCheck(lp_aIUnit, "DukesRevengeYamato", true) == true) && (UnitGetPropertyFixed(lp_aIUnit, c_unitPropEnergy, c_unitPropCurrent) >= 125.0)) {
        lv_abilityDamage = 300.0;
        AISetFilterLife(lv_canidatesFilter, 100.0, 524287.0);
        AISetFilterLifeSortReference(lv_canidatesFilter, lv_abilityDamage, (0.5 * lv_abilityDamage));
        lv_canidates = AIGetFilterGroup(lv_canidatesFilter, lv_enemyYamatoGroup10);
        if ((UnitGroupCount(lv_canidates, c_unitCountAlive) > 0)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingUnit(AbilityCommand("DukesRevengeYamato", 0), UnitGroupRandomUnit(lv_canidates, c_unitCountAlive)));
            return ;
        }

    }

    if ((UnitGroupCount(lv_enemyMissilePodGroup7, c_unitCountAlive) > 0) && (UnitCheckAbilCmdState(lp_aIUnit, AbilityCommand("DukesRevengeMissilePods", 0), c_cmdStateCooldown) == false) && (UnitAbilityCheck(lp_aIUnit, "DukesRevengeMissilePods", true) == true) && (UnitGetPropertyFixed(lp_aIUnit, c_unitPropEnergy, c_unitPropCurrent) >= 125.0)) {
        lv_abilityRange = 7.0;
        lv_abilityDamage = 40.0;
        lv_abilityAoE = 1.6;
        lv_score = 1;
        lv_target = AIBestTargetPoint(lv_canidates, 3, FixedToInt(lv_abilityDamage), lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
        if ((lv_target != null)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("DukesRevengeMissilePods", 0), lv_target));
            return ;
        }

    }

}

void libRWDR_gf_AIHybridDominatorVoid (int lp_owner, unit lp_aIUnit, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_enemyUnitsNearby;
    unitgroup lv_canidates;
    aifilter lv_canidatesFilter;
    point lv_target;
    fixed lv_abilityRange;
    fixed lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;

    // Automatic Variable Declarations
    unitgroup auto13CC8763_g;
    int auto13CC8763_u;
    unit auto13CC8763_var;

    // Variable Initialization
    lv_enemyUnitsNearby = UnitGroupEmpty();
    lv_canidates = UnitGroupEmpty();
    lv_canidatesFilter = AIFilter(lp_owner);

    // Implementation
    lv_enemyUnitsNearby = libRWDR_gf_AITacticalEnemiesWithinRange(lp_aIUnit, 9.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32))));
    auto13CC8763_g = lv_enemyUnitsNearby;
    auto13CC8763_u = UnitGroupCount(auto13CC8763_g, c_unitCountAll);
    for (;; auto13CC8763_u -= 1) {
        auto13CC8763_var = UnitGroupUnitFromEnd(auto13CC8763_g, auto13CC8763_u);
        if (auto13CC8763_var == null) { break; }
        if ((UnitHasBehavior2(auto13CC8763_var, "EledisUnitReduceHybridDamage") == true)) {
            UnitGroupRemove(lv_enemyUnitsNearby, auto13CC8763_var);
        }

    }
    if ((UnitGroupCount(lv_enemyUnitsNearby, c_unitCountAlive) > 0) && (UnitGetPropertyFixed(lp_aIUnit, c_unitPropEnergy, c_unitPropCurrent) >= 25.0) && (UnitAbilityCheck(lp_aIUnit, "HybridDominatorVoidPsiStorm", true) == true) && (UnitCheckAbilCmdState(lp_aIUnit, AbilityCommand("HybridDominatorVoidPsiStorm", 0), c_cmdStateCooldown) == false)) {
        lv_abilityRange = 9.0;
        lv_abilityDamage = 20.0;
        lv_abilityAoE = 1.5;
        lv_score = 1;
        lv_target = AIBestTargetPoint(lv_enemyUnitsNearby, 2, FixedToInt(lv_abilityDamage), lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
        if ((lv_target != null)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("HybridDominatorVoidPsiStorm", 0), lv_target));
            return ;
        }

    }

    if ((UnitGroupCount(lv_enemyUnitsNearby, c_unitCountAlive) > 0) && (UnitGetPropertyFixed(lp_aIUnit, c_unitPropEnergy, c_unitPropCurrent) >= 25.0) && (UnitAbilityCheck(lp_aIUnit, "HybridDominatorVoidPlasmaBlast", true) == true) && (UnitCheckAbilCmdState(lp_aIUnit, AbilityCommand("HybridDominatorVoidPlasmaBlast", 0), c_cmdStateCooldown) == false)) {
        lv_abilityDamage = 260.0;
        AISetFilterLife(lv_canidatesFilter, 50.0, 524287.0);
        AISetFilterLifeSortReference(lv_canidatesFilter, lv_abilityDamage, (0.2 * lv_abilityDamage));
        lv_canidates = AIGetFilterGroup(lv_canidatesFilter, lv_enemyUnitsNearby);
        if ((UnitGroupCount(lv_canidates, c_unitCountAlive) > 0)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingUnit(AbilityCommand("HybridDominatorVoidPlasmaBlast", 0), UnitGroupRandomUnit(lv_canidates, c_unitCountAlive)));
            return ;
        }

    }

}

void libRWDR_gf_AIHybridBehemoth (int lp_owner, unit lp_aIUnit, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_enemyUnitsNearby;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyUnitsNearby = UnitGroupEmpty();

    // Implementation
    lv_enemyUnitsNearby = libRWDR_gf_AITacticalEnemiesWithinRange(lp_aIUnit, 6.0, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32))));
    if ((UnitGroupCount(lv_enemyUnitsNearby, c_unitCountAlive) >= 5) && (UnitAbilityCheck(lp_aIUnit, "HybridFAoEStun", true) == true) && (UnitCheckAbilCmdState(lp_aIUnit, AbilityCommand("HybridFAoEStun", 0), c_cmdStateCooldown) == false)) {
        libNtve_gf_AICast(lp_aIUnit, Order(AbilityCommand("HybridFAoEStun", 0)));
        return ;
    }

}

void libRWDR_gf_AIShadowCannon (int lp_owner, unit lp_aIUnit, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_enemyUnitsNearby;
    unitgroup lv_canidates;
    aifilter lv_canidatesFilter;
    fixed lv_abilityDamage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyUnitsNearby = UnitGroupEmpty();
    lv_canidates = UnitGroupEmpty();
    lv_canidatesFilter = AIFilter(lp_owner);

    // Implementation
    lv_enemyUnitsNearby = libRWDR_gf_AITacticalEnemiesWithinRange(lp_aIUnit, 9.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32))));
    if ((UnitGroupCount(lv_enemyUnitsNearby, c_unitCountAlive) > 0) && (UnitAbilityCheck(lp_aIUnit, "ImmortalShakurasShadowCannon", true) == true) && (UnitCheckAbilCmdState(lp_aIUnit, AbilityCommand("ImmortalShakurasShadowCannon", 0), c_cmdStateCooldown) == false)) {
        lv_abilityDamage = 200.0;
        AISetFilterLife(lv_canidatesFilter, 50.0, 524287.0);
        AISetFilterLifeSortReference(lv_canidatesFilter, lv_abilityDamage, (0.2 * lv_abilityDamage));
        lv_canidates = AIGetFilterGroup(lv_canidatesFilter, lv_enemyUnitsNearby);
        if ((UnitGroupCount(lv_canidates, c_unitCountAlive) > 0)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingUnit(AbilityCommand("HybridDominatorVoidPlasmaBlast", 0), UnitGroupRandomUnit(lv_canidates, c_unitCountAlive)));
            return ;
        }

    }

}

void libRWDR_gf_AIProtector (int lp_owner, unit lp_aIUnit, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_enemyUnitsNearby;
    unitgroup lv_friendlyUnitsNearby;
    unitgroup lv_canidates;
    unit lv_currnetUnit;
    point lv_target;

    // Automatic Variable Declarations
    unitgroup autoC602FC6A_g;
    int autoC602FC6A_u;

    // Variable Initialization
    lv_enemyUnitsNearby = UnitGroupEmpty();
    lv_friendlyUnitsNearby = UnitGroupEmpty();
    lv_canidates = UnitGroupEmpty();

    // Implementation
    lv_enemyUnitsNearby = libRWDR_gf_AITacticalEnemiesWithinRange(lp_aIUnit, 7.0, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))));
    lv_friendlyUnitsNearby = libRWDR_gf_AITacticalEnemiesWithinRange3(lp_aIUnit, 7.0, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))));
    if ((UnitGroupCount(lv_enemyUnitsNearby, c_unitCountAlive) > 0) && (UnitGroupCount(lv_friendlyUnitsNearby, c_unitCountAlive) >= 3) && (UnitAbilityCheck(lp_aIUnit, "FenixSentryGuardianZone", true) == true) && (UnitCheckAbilCmdState(lp_aIUnit, AbilityCommand("FenixSentryGuardianZone", 0), c_cmdStateCooldown) == false) && (UnitGetPropertyFixed(lp_aIUnit, c_unitPropEnergy, c_unitPropCurrent) >= 70.0)) {
        autoC602FC6A_g = lv_friendlyUnitsNearby;
        autoC602FC6A_u = UnitGroupCount(autoC602FC6A_g, c_unitCountAll);
        for (;; autoC602FC6A_u -= 1) {
            lv_currnetUnit = UnitGroupUnitFromEnd(autoC602FC6A_g, autoC602FC6A_u);
            if (lv_currnetUnit == null) { break; }
            if ((UnitGetDamageTakenTime(lv_currnetUnit) <= 2) && (UnitHasBehavior2(lv_currnetUnit, "FenixSentryGuardianZone") == false)) {
                UnitGroupAdd(lv_canidates, lv_currnetUnit);
            }

        }
        if ((UnitGroupCount(lv_canidates, c_unitCountAlive) >= 2)) {
            lv_target = UnitGroupCenterOfGroup(lv_canidates);
            if ((lv_target != null)) {
                libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("FenixSentryGuardianZone", 0), lv_target));
                return ;
            }

        }

    }

}

void libRWDR_gf_AIBroodQueen (int lp_owner, unit lp_aIUnit, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_enemyUnitsNearby;
    point lv_target;
    fixed lv_abilityRange;
    fixed lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyUnitsNearby = UnitGroupEmpty();

    // Implementation
    lv_enemyUnitsNearby = libRWDR_gf_AITacticalEnemiesWithinRange(lp_aIUnit, 9.0, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32))));
    if ((UnitGroupCount(lv_enemyUnitsNearby, c_unitCountAlive) > 0) && (UnitAbilityCheck(lp_aIUnit, "QueenClassicFrostEnsnare", true) == true) && (UnitCheckAbilCmdState(lp_aIUnit, AbilityCommand("QueenClassicFrostEnsnare", 0), c_cmdStateCooldown) == false)) {
        lv_abilityRange = 9.0;
        lv_abilityDamage = 20.0;
        lv_abilityAoE = 2.0;
        lv_score = 1;
        lv_target = AIBestTargetPoint(lv_enemyUnitsNearby, 3, FixedToInt(lv_abilityDamage), lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
        if ((lv_target != null)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("QueenClassicFrostEnsnare", 0), lv_target));
            return ;
        }

    }

}

unitgroup libRWDR_gf_AITacticalEnemiesWithinRange (unit lp_unit, fixed lp_range, unitfilter lp_filter) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupAlliance(UnitGetOwner(lp_unit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_unit), lp_range), lp_filter, 0);
}

unitgroup libRWDR_gf_AITacticalEnemiesWithinRange2 (unit lp_unit, fixed lp_range, unitfilter lp_filter) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupAlliance(UnitGetOwner(lp_unit), c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_unit), lp_range), lp_filter, 0);
}

unitgroup libRWDR_gf_AITacticalEnemiesWithinRange3 (unit lp_unit, fixed lp_range, unitfilter lp_filter) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroup(null, UnitGetOwner(lp_unit), RegionCircle(UnitGetPosition(lp_unit), lp_range), lp_filter, 0);
}

void libRWDR_gf_AIDelanar (int lp_owner, unit lp_delanar, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_enemyGroup5;
    unitgroup lv_enemyGroup7;
    point lv_target;
    fixed lv_abilityRange;
    fixed lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;
    unit lv_currentUnit;
    unitgroup lv_candidates;

    // Automatic Variable Declarations
    unitgroup autoFB7745BE_g;
    int autoFB7745BE_u;

    // Variable Initialization
    lv_enemyGroup5 = UnitGroupEmpty();
    lv_enemyGroup7 = UnitGroupEmpty();
    lv_candidates = UnitGroupEmpty();

    // Implementation
    lv_enemyGroup5 = libRWDR_gf_AITacticalEnemiesWithinRange(lp_delanar, 5.0, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32))));
    lv_enemyGroup7 = libRWDR_gf_AITacticalEnemiesWithinRange(lp_delanar, 7.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32))));
    if ((UnitGroupCount(lv_enemyGroup5, c_unitCountAlive) > 0) && (UnitCheckAbilCmdState(lp_delanar, AbilityCommand("DelanarR", 0), c_cmdStateCooldown) == false) && (UnitAbilityCheck(lp_delanar, "DelanarR", true) == true) && (UnitGetPropertyFixed(lp_delanar, c_unitPropShields, c_unitPropCurrent) <= 50.0)) {
        libNtve_gf_AICast(lp_delanar, OrderTargetingPoint(AbilityCommand("DelanarR", 0), UnitGetPosition(lp_delanar)));
        return ;
    }

    if ((UnitGroupCount(lv_enemyGroup5, c_unitCountAlive) > 0) && (UnitHasBehavior2(lp_delanar, "EnemyHero3CD") == false) && (UnitCheckAbilCmdState(lp_delanar, AbilityCommand("DelanarQ", 0), c_cmdStateCooldown) == false) && (UnitAbilityCheck(lp_delanar, "DelanarQ", true) == true)) {
        libNtve_gf_AICast(lp_delanar, OrderTargetingUnit(AbilityCommand("DelanarQ", 0), UnitGroupRandomUnit(lv_enemyGroup5, c_unitCountAlive)));
        return ;
    }

    if ((UnitGroupCount(lv_enemyGroup5, c_unitCountAlive) > 0) && (UnitHasBehavior2(lp_delanar, "EnemyHero3CD") == false) && (UnitCheckAbilCmdState(lp_delanar, AbilityCommand("DelanarE", 0), c_cmdStateCooldown) == false) && (UnitAbilityCheck(lp_delanar, "DelanarE", true) == true)) {
        lv_abilityRange = 5.0;
        lv_abilityDamage = 50.0;
        lv_abilityAoE = 2.0;
        lv_score = 1;
        lv_target = AIBestTargetPoint(lv_enemyGroup5, 2, FixedToInt(lv_abilityDamage), lv_score, lv_abilityAoE, UnitGetPosition(lp_delanar), lv_abilityRange, c_unitAttributeNone);
        if ((lv_target != null)) {
            libNtve_gf_AICast(lp_delanar, OrderTargetingPoint(AbilityCommand("DelanarE", 0), lv_target));
            return ;
        }

    }

    if ((UnitGroupCount(lv_enemyGroup7, c_unitCountAlive) > 0) && (UnitCheckAbilCmdState(lp_delanar, AbilityCommand("DelanarW", 0), c_cmdStateCooldown) == false) && (UnitHasBehavior2(lp_delanar, "EnemyHero3CD") == false)) {
        autoFB7745BE_g = lv_enemyGroup7;
        autoFB7745BE_u = UnitGroupCount(autoFB7745BE_g, c_unitCountAll);
        for (;; autoFB7745BE_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(autoFB7745BE_g, autoFB7745BE_u);
            if (lv_currentUnit == null) { break; }
            if (((UnitTypeTestAttribute(UnitGetType(lv_currentUnit), c_unitAttributeHeroic) == true) || (UnitGetType(lv_currentUnit) == "SiegeTankSieged") || (UnitGetType(lv_currentUnit) == "Bunker") || (UnitGetType(lv_currentUnit) == "QueenImitator"))) {
                UnitGroupAdd(lv_candidates, lv_currentUnit);
            }

        }
        if ((UnitGroupCount(lv_candidates, c_unitCountAlive) > 0)) {
            libNtve_gf_AICast(lp_delanar, OrderTargetingUnit(AbilityCommand("DelanarW", 0), UnitGroupRandomUnit(lv_candidates, c_unitCountAlive)));
            return ;
        }

    }

}

void libRWDR_gf_AILightningDash (int lp_owner, unit lp_aIUnit, unitgroup lp_nearbyUnits, string lp_abil, unit lp_item) {
    // Variable Declarations
    unitgroup lv_enemiesNearby;
    point lv_target;
    fixed lv_abilityRange;
    fixed lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemiesNearby = UnitGroupEmpty();

    // Implementation
    if ((UnitGroupCount(UnitGroup(null, lp_owner, RegionCircle(UnitGetPosition(lp_aIUnit), 3.0), UnitFilter(0, 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 2)) {
        lv_enemiesNearby = libRWDR_gf_AITacticalEnemiesWithinRange(lp_aIUnit, 7.0, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32))));
    }
    else {
        lv_enemiesNearby = libRWDR_gf_AITacticalEnemiesWithinRange(lp_aIUnit, 2.0, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32))));
    }
    if ((UnitGroupCount(lv_enemiesNearby, c_unitCountAlive) <= 0)) {
        return ;
    }
    else {
        lv_abilityRange = 7.0;
        lv_abilityDamage = 50.0;
        lv_abilityAoE = 1.8;
        lv_score = 1;
        lv_target = AIBestTargetPoint(lv_enemiesNearby, 2, FixedToInt(lv_abilityDamage), lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
        if ((lv_target != null) && (UnitAbilityGetCooldown(lp_aIUnit, "TolarisQ", "Abil/TolarisQ") <= 0.0) && (UnitHasBehavior2(lp_aIUnit, "EnemyHero3CD") == false)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand(lp_abil, 0), lv_target));
            return ;
        }

    }
}

void libRWDR_gf_AIVoidField (int lp_owner, unit lp_aIUnit, unitgroup lp_nearbyUnits, string lp_abil, unit lp_item) {
    // Variable Declarations
    unitgroup lv_enemiesNearby;
    point lv_target;
    fixed lv_abilityRange;
    fixed lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemiesNearby = UnitGroupEmpty();

    // Implementation
    lv_enemiesNearby = libRWDR_gf_AITacticalEnemiesWithinRange(lp_aIUnit, 10.0, UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32))));
    if ((UnitGroupCount(lv_enemiesNearby, c_unitCountAlive) <= 0)) {
        return ;
    }
    else {
        lv_abilityRange = 10.0;
        lv_abilityDamage = 50.0;
        lv_abilityAoE = 6.0;
        lv_score = 1;
        lv_target = AIBestTargetPoint(lv_enemiesNearby, 5, FixedToInt(lv_abilityDamage), lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
        if ((lv_target != null) && (UnitAbilityGetCooldown(lp_aIUnit, "TolarisR", "Abil/TolarisR") <= 0.0) && (UnitHasBehavior2(lp_aIUnit, "EnemyHero3CD") == false)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand(lp_abil, 0), lv_target));
            return ;
        }

    }
}

void libRWDR_gf_AIBarryClark (int lp_owner, unit lp_aIUnit, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_enemyUnitsNearby;
    unitgroup lv_canidates;
    unit lv_currnetUnit;

    // Automatic Variable Declarations
    unitgroup auto1560331C_g;
    int auto1560331C_u;

    // Variable Initialization
    lv_enemyUnitsNearby = UnitGroupEmpty();
    lv_canidates = UnitGroupEmpty();

    // Implementation
    lv_enemyUnitsNearby = libRWDR_gf_AITacticalEnemiesWithinRange(lp_aIUnit, 6.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32))));
    if ((UnitGroupCount(lv_enemyUnitsNearby, c_unitCountAlive) >= 3) && (UnitAbilityGetCooldown(lp_aIUnit, "BarryW", "Abil/BarryW") <= 0.0) && (UnitHasBehavior2(lp_aIUnit, "EnemyHero3CD") == false)) {
        libNtve_gf_AICast(lp_aIUnit, Order(AbilityCommand("BarryW", 0)));
        return ;
    }

    if ((UnitGroupCount(lv_enemyUnitsNearby, c_unitCountAlive) > 0) && (UnitAbilityGetCooldown(lp_aIUnit, "BarryQ", "Abil/BarryQ") <= 0.0) && (UnitHasBehavior2(lp_aIUnit, "EnemyHero3CD") == false)) {
        auto1560331C_g = lv_enemyUnitsNearby;
        auto1560331C_u = UnitGroupCount(auto1560331C_g, c_unitCountAll);
        for (;; auto1560331C_u -= 1) {
            lv_currnetUnit = UnitGroupUnitFromEnd(auto1560331C_g, auto1560331C_u);
            if (lv_currnetUnit == null) { break; }
            if ((UnitGetType(lv_currnetUnit) != "ZealotLaziot") && (UnitGetType(lv_currnetUnit) != "Probe")) {
                UnitGroupAdd(lv_canidates, lv_currnetUnit);
            }

        }
        if ((UnitGroupCount(lv_canidates, c_unitCountAlive) > 0)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingUnit(AbilityCommand("BarryQ", 0), UnitGroupRandomUnit(lv_canidates, c_unitCountAlive)));
            return ;
        }

    }

    if ((UnitGroupCount(lv_enemyUnitsNearby, c_unitCountAlive) > 0) && (UnitAbilityGetCooldown(lp_aIUnit, "BarryQ", "Abil/BarryR") <= 0.0) && (UnitAbilityCheck(lp_aIUnit, "BarryR", true) == true) && (UnitGetPropertyFixed(lp_aIUnit, c_unitPropLife, c_unitPropCurrent) <= 400.0)) {
        libNtve_gf_AICast(lp_aIUnit, Order(AbilityCommand("BarryR", 0)));
        return ;
    }

}

void libRWDR_gf_AINemezith (int lp_owner, unit lp_nemezith, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_enemyGroup7;
    fixed lv_abilityRange;
    fixed lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;
    point lv_targetPoint;
    unit lv_currentUnit;
    unit lv_targetUnit;
    unitgroup lv_candidates;

    // Automatic Variable Declarations
    unitgroup auto777ED704_g;
    int auto777ED704_u;
    unitgroup autoAF0EBAE3_g;
    int autoAF0EBAE3_u;

    // Variable Initialization
    lv_enemyGroup7 = UnitGroupEmpty();
    lv_candidates = UnitGroupEmpty();

    // Implementation
    lv_enemyGroup7 = libRWDR_gf_AITacticalEnemiesWithinRange(lp_nemezith, 7.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32))));
    auto777ED704_g = lv_enemyGroup7;
    auto777ED704_u = UnitGroupCount(auto777ED704_g, c_unitCountAll);
    for (;; auto777ED704_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto777ED704_g, auto777ED704_u);
        if (lv_currentUnit == null) { break; }
        if ((UnitGetType(lv_currentUnit) == "VoidMPImmortalReviveCorpse")) {
            UnitGroupRemove(lv_enemyGroup7, lv_currentUnit);
        }

    }
    if ((UnitGroupCount(lv_enemyGroup7, c_unitCountAlive) > 0) && (UnitHasBehavior2(lp_nemezith, "EnemyHero3CD") == false)) {
        if ((UnitCheckAbilCmdState(lp_nemezith, AbilityCommand("NemezithQ", 0), c_cmdStateCooldown) == false) && (UnitAbilityCheck(lp_nemezith, "NemezithQ", true) == true)) {
            lv_abilityRange = 7.0;
            lv_abilityDamage = 70.0;
            lv_abilityAoE = 1.6;
            lv_score = 1;
            lv_targetPoint = AIBestTargetPoint(lv_enemyGroup7, 2, FixedToInt(lv_abilityDamage), lv_score, lv_abilityAoE, UnitGetPosition(lp_nemezith), lv_abilityRange, c_unitAttributeNone);
            if ((lv_targetPoint != null)) {
                libNtve_gf_AICast(lp_nemezith, OrderTargetingPoint(AbilityCommand("NemezithQ", 0), lv_targetPoint));
                return ;
            }

        }

    }

    if ((UnitGroupCount(lv_enemyGroup7, c_unitCountAlive) > 0) && (UnitAbilityCheck(lp_nemezith, "NemezithR", true) == true) && (UnitCheckAbilCmdState(lp_nemezith, AbilityCommand("NemezithR", 0), c_cmdStateCooldown) == false) && (UnitHasBehavior2(lp_nemezith, "EnemyHero3CD") == false)) {
        libNtve_gf_AICast(lp_nemezith, OrderTargetingUnit(AbilityCommand("NemezithR", 0), UnitGroupRandomUnit(lv_enemyGroup7, c_unitCountAlive)));
        return ;
    }

    if ((UnitGroupCount(lv_enemyGroup7, c_unitCountAlive) > 0) && (UnitAbilityGetCooldown(lp_nemezith, "NemezithW", "Abil/NemezithW") <= 0.0) && (UnitHasBehavior2(lp_nemezith, "EnemyHero3CD") == false)) {
        autoAF0EBAE3_g = lv_enemyGroup7;
        autoAF0EBAE3_u = UnitGroupCount(autoAF0EBAE3_g, c_unitCountAll);
        for (;; autoAF0EBAE3_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(autoAF0EBAE3_g, autoAF0EBAE3_u);
            if (lv_currentUnit == null) { break; }
            if (((UnitTypeTestAttribute(UnitGetType(lv_currentUnit), c_unitAttributeHeroic) == true) || (UnitGetType(lv_currentUnit) == "ColossusPurifier") || (UnitGetType(lv_currentUnit) == "ImmortalShakuras") || (UnitGetType(lv_currentUnit) == "VoidRayShakuras") || (UnitGetType(lv_currentUnit) == "Tempest") || (UnitGetType(lv_currentUnit) == "Replicant"))) {
                UnitGroupAdd(lv_candidates, lv_currentUnit);
            }

        }
        if ((UnitGroupCount(lv_candidates, c_unitCountAlive) > 0)) {
            libNtve_gf_AICast(lp_nemezith, OrderTargetingUnit(AbilityCommand("NemezithW", 0), UnitGroupRandomUnit(lv_candidates, c_unitCountAlive)));
            return ;
        }

    }

}

void libRWDR_gf_AIXarmat (int lp_owner, unit lp_xarmat, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_enemyGroupGround;
    unitgroup lv_enemyGroupAll;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroupGround = UnitGroupEmpty();
    lv_enemyGroupAll = UnitGroupEmpty();

    // Implementation
    lv_enemyGroupGround = libRWDR_gf_AITacticalEnemiesWithinRange(lp_xarmat, 7.0, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32))));
    lv_enemyGroupAll = libRWDR_gf_AITacticalEnemiesWithinRange(lp_xarmat, 6.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
    if ((UnitGroupCount(lv_enemyGroupAll, c_unitCountAlive) > 0) && (UnitCheckAbilCmdState(lp_xarmat, AbilityCommand("XarmatR", 0), c_cmdStateCooldown) == false) && (UnitAbilityCheck(lp_xarmat, "XarmatR", true) == true) && (UnitGetPropertyFixed(lp_xarmat, c_unitPropEnergy, c_unitPropCurrent) >= libNtve_gf_CostOfAbility("XarmatR", "Energy")) && (UnitGetPropertyFixed(lp_xarmat, c_unitPropLife, c_unitPropCurrent) <= 300.0)) {
        libNtve_gf_AICast(lp_xarmat, Order(AbilityCommand("XarmatR", 0)));
        return ;
    }

    if ((UnitGroupCount(lv_enemyGroupGround, c_unitCountAlive) > 2) && (UnitCheckAbilCmdState(lp_xarmat, AbilityCommand("ZagaraVoidCoopBanelingBarrage", 0), c_cmdStateCooldown) == false) && (UnitAbilityCheck(lp_xarmat, "ZagaraVoidCoopBanelingBarrage", true) == true) && (UnitGetPropertyFixed(lp_xarmat, c_unitPropEnergy, c_unitPropCurrent) >= libNtve_gf_CostOfAbility("ZagaraVoidCoopBanelingBarrage", "Energy"))) {
        libNtve_gf_AICast(lp_xarmat, OrderTargetingPoint(AbilityCommand("ZagaraVoidCoopBanelingBarrage", 0), UnitGroupCenterOfGroup(lv_enemyGroupGround)));
        return ;
    }

    if ((UnitGroupCount(lv_enemyGroupAll, c_unitCountAlive) >= 2) && (UnitCheckAbilCmdState(lp_xarmat, AbilityCommand("ZagaraVoidCoopSpawnHunterKillers", 0), c_cmdStateCooldown) == false) && (UnitAbilityCheck(lp_xarmat, "ZagaraVoidCoopSpawnHunterKillers", true) == true)) {
        libNtve_gf_AICast(lp_xarmat, OrderTargetingPoint(AbilityCommand("ZagaraVoidCoopSpawnHunterKillers", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_xarmat), 1.5, UnitGroupCenterOfGroup(lv_enemyGroupAll))));
        return ;
    }

}

void libRWDR_gf_AIProtossPaladin (int lp_owner, unit lp_protossPaladin, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_enemyGroup7;
    unitgroup lv_allyGroup5;
    fixed lv_abilityRange;
    fixed lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;
    point lv_targetPoint;
    unit lv_currentUnit;
    unitgroup lv_candidates;

    // Automatic Variable Declarations
    unitgroup auto35CE368E_g;
    int auto35CE368E_u;
    unit auto35CE368E_var;
    unitgroup auto5E2C5929_g;
    int auto5E2C5929_u;

    // Variable Initialization
    lv_enemyGroup7 = UnitGroupEmpty();
    lv_allyGroup5 = UnitGroupEmpty();
    lv_candidates = UnitGroupEmpty();

    // Implementation
    lv_enemyGroup7 = libRWDR_gf_AITacticalEnemiesWithinRange(lp_protossPaladin, 7.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32))));
    lv_allyGroup5 = libRWDR_gf_AITacticalEnemiesWithinRange3(lp_protossPaladin, 6.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))));
    auto35CE368E_g = lv_allyGroup5;
    auto35CE368E_u = UnitGroupCount(auto35CE368E_g, c_unitCountAll);
    for (;; auto35CE368E_u -= 1) {
        auto35CE368E_var = UnitGroupUnitFromEnd(auto35CE368E_g, auto35CE368E_u);
        if (auto35CE368E_var == null) { break; }
        if ((UnitGetType(auto35CE368E_var) == "ProtossPaladin")) {
            UnitGroupRemove(lv_allyGroup5, auto35CE368E_var);
        }

    }
    if ((UnitGroupCount(lv_enemyGroup7, c_unitCountAlive) > 0) && (UnitCheckAbilCmdState(lp_protossPaladin, AbilityCommand("PaladinR", 0), c_cmdStateCooldown) == false) && (UnitAbilityCheck(lp_protossPaladin, "PaladinR", true) == true) && (UnitGetPropertyFixed(lp_protossPaladin, c_unitPropLife, c_unitPropCurrent) <= 500.0)) {
        libNtve_gf_AICast(lp_protossPaladin, Order(AbilityCommand("PaladinR", 0)));
        return ;
    }

    if ((UnitGroupCount(lv_enemyGroup7, c_unitCountAlive) > 0) && (UnitCheckAbilCmdState(lp_protossPaladin, AbilityCommand("PaladinQNew", 0), c_cmdStateCooldown) == false) && (UnitAbilityCheck(lp_protossPaladin, "PaladinQNew", true) == true)) {
        if ((UnitGetPropertyFixed(lp_protossPaladin, c_unitPropShields, c_unitPropCurrent) <= 300.0)) {
            libNtve_gf_AICast(lp_protossPaladin, OrderTargetingUnit(AbilityCommand("PaladinQNew", 0), lp_protossPaladin));
            return ;
        }
        else {
            auto5E2C5929_g = lv_allyGroup5;
            auto5E2C5929_u = UnitGroupCount(auto5E2C5929_g, c_unitCountAll);
            for (;; auto5E2C5929_u -= 1) {
                lv_currentUnit = UnitGroupUnitFromEnd(auto5E2C5929_g, auto5E2C5929_u);
                if (lv_currentUnit == null) { break; }
                if ((UnitGetPropertyFixed(lv_currentUnit, c_unitPropShields, c_unitPropCurrent) <= 10.0)) {
                    UnitGroupAdd(lv_candidates, lv_currentUnit);
                }

            }
            if ((UnitGroupCount(lv_candidates, c_unitCountAlive) > 0)) {
                libNtve_gf_AICast(lp_protossPaladin, OrderTargetingUnit(AbilityCommand("PaladinQNew", 0), UnitGroupRandomUnit(lv_candidates, c_unitCountAlive)));
                return ;
            }

        }
    }

    if ((UnitGroupCount(lv_enemyGroup7, c_unitCountAlive) > 0) && (UnitCheckAbilCmdState(lp_protossPaladin, AbilityCommand("PaladinW", 0), c_cmdStateCooldown) == false) && (UnitAbilityCheck(lp_protossPaladin, "PaladinW", true) == true)) {
        lv_abilityRange = 7.0;
        lv_abilityDamage = 70.0;
        lv_abilityAoE = 1.4;
        lv_score = 1;
        lv_targetPoint = AIBestTargetPoint(lv_enemyGroup7, 2, FixedToInt(lv_abilityDamage), lv_score, lv_abilityAoE, UnitGetPosition(lp_protossPaladin), lv_abilityRange, c_unitAttributeNone);
        if ((lv_targetPoint != null)) {
            libNtve_gf_AICast(lp_protossPaladin, OrderTargetingPoint(AbilityCommand("PaladinW", 0), lv_targetPoint));
            return ;
        }

    }

}

void libRWDR_gf_AIEledis (int lp_owner, unit lp_eledis, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_enemyGroup7;
    unitgroup lv_allyGroup4;
    fixed lv_abilityRange;
    fixed lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;
    point lv_targetPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup7 = UnitGroupEmpty();
    lv_allyGroup4 = UnitGroupEmpty();

    // Implementation
    lv_enemyGroup7 = libRWDR_gf_AITacticalEnemiesWithinRange(lp_eledis, 7.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32))));
    lv_allyGroup4 = libRWDR_gf_AITacticalEnemiesWithinRange3(lp_eledis, 4.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))));
    if ((UnitGroupCount(lv_enemyGroup7, c_unitCountAlive) > 0) && (UnitCheckAbilCmdState(lp_eledis, AbilityCommand("EledisR", 0), c_cmdStateCooldown) == false) && (UnitAbilityCheck(lp_eledis, "EledisR", true) == true) && (UnitGetPropertyFixed(lp_eledis, c_unitPropLifePercent, c_unitPropCurrent) <= 60.0)) {
        libNtve_gf_AICast(lp_eledis, OrderTargetingPoint(AbilityCommand("EledisR", 0), UnitGetPosition(lp_eledis)));
        return ;
    }

    if ((UnitGroupCount(lv_enemyGroup7, c_unitCountAlive) > 0) && (UnitCheckAbilCmdState(lp_eledis, AbilityCommand("EledisQ", 0), c_cmdStateCooldown) == false) && (UnitAbilityCheck(lp_eledis, "EledisQ", true) == true)) {
        lv_abilityRange = 7.0;
        lv_abilityDamage = 80.0;
        lv_abilityAoE = 2.0;
        lv_score = 1;
        lv_targetPoint = AIBestTargetPoint(lv_enemyGroup7, 2, FixedToInt(lv_abilityDamage), lv_score, lv_abilityAoE, UnitGetPosition(lp_eledis), lv_abilityRange, c_unitAttributeNone);
        if ((lv_targetPoint != null)) {
            libNtve_gf_AICast(lp_eledis, OrderTargetingPoint(AbilityCommand("EledisQ", 0), lv_targetPoint));
            return ;
        }

    }

    if ((UnitGroupCount(lv_enemyGroup7, c_unitCountAlive) > 0) && (UnitCheckAbilCmdState(lp_eledis, AbilityCommand("EledisW", 0), c_cmdStateCooldown) == false) && (UnitAbilityCheck(lp_eledis, "EledisW", true) == true)) {
        libNtve_gf_AICast(lp_eledis, OrderTargetingPoint(AbilityCommand("EledisW", 0), PointInterpolate(UnitGetPosition(lp_eledis), UnitGetPosition(UnitGroupRandomUnit(lv_enemyGroup7, c_unitCountAlive)), 0.5)));
        return ;
    }

    if ((UnitGroupCount(lv_enemyGroup7, c_unitCountAlive) >= 2) && (UnitGroupCount(lv_allyGroup4, c_unitCountAlive) >= 2) && (UnitCheckAbilCmdState(lp_eledis, AbilityCommand("EledisE", 0), c_cmdStateCooldown) == false) && (UnitAbilityCheck(lp_eledis, "EledisE", true) == true)) {
        libNtve_gf_AICast(lp_eledis, Order(AbilityCommand("EledisE", 0)));
        return ;
    }

}

void libRWDR_gf_AILathrezit (int lp_owner, unit lp_lathrezit, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    unitgroup lv_enemyGroup8;
    unitgroup lv_enemyGroup2;
    fixed lv_abilityRange;
    fixed lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;
    point lv_targetPoint;
    unit lv_currentUnit;
    unit lv_targetUnit;
    unitgroup lv_candidates;

    // Automatic Variable Declarations
    unitgroup autoF88D9BC3_g;
    int autoF88D9BC3_u;

    // Variable Initialization
    lv_enemyGroup8 = UnitGroupEmpty();
    lv_enemyGroup2 = UnitGroupEmpty();
    lv_candidates = UnitGroupEmpty();

    // Implementation
    lv_enemyGroup8 = libRWDR_gf_AITacticalEnemiesWithinRange(lp_lathrezit, 8.0, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32))));
    lv_enemyGroup2 = libRWDR_gf_AITacticalEnemiesWithinRange(lp_lathrezit, 3.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32))));
    if ((UnitGroupCount(lv_enemyGroup2, c_unitCountAlive) > 0) && (UnitCheckAbilCmdState(lp_lathrezit, AbilityCommand("LathrezitE", 0), c_cmdStateCooldown) == false) && (UnitAbilityCheck(lp_lathrezit, "LathrezitE", true) == true) && (UnitHasBehavior2(lp_lathrezit, "LathrezitChannelBehavior") == false)) {
        libNtve_gf_AICast(lp_lathrezit, Order(AbilityCommand("LathrezitE", 0)));
        return ;
    }

    if ((UnitGroupCount(lv_enemyGroup8, c_unitCountAlive) > 0) && (UnitCheckAbilCmdState(lp_lathrezit, AbilityCommand("LathrezitQ", 0), c_cmdStateCooldown) == false) && (UnitAbilityCheck(lp_lathrezit, "LathrezitQ", true) == true) && (UnitHasBehavior2(lp_lathrezit, "EnemyHero3CD") == false) && (UnitHasBehavior2(lp_lathrezit, "LathrezitChannelBehavior") == false)) {
        lv_abilityRange = 7.0;
        lv_abilityDamage = 75.0;
        lv_abilityAoE = 1.5;
        lv_score = 1;
        lv_targetPoint = AIBestTargetPoint(lv_enemyGroup8, 2, FixedToInt(lv_abilityDamage), lv_score, lv_abilityAoE, UnitGetPosition(lp_lathrezit), lv_abilityRange, c_unitAttributeNone);
        if ((lv_targetPoint != null)) {
            libNtve_gf_AICast(lp_lathrezit, OrderTargetingPoint(AbilityCommand("LathrezitQ", 0), lv_targetPoint));
            return ;
        }

    }

    if ((UnitGroupCount(lv_enemyGroup8, c_unitCountAlive) > 0) && (UnitCheckAbilCmdState(lp_lathrezit, AbilityCommand("LathrezitW", 0), c_cmdStateCooldown) == false) && (UnitAbilityCheck(lp_lathrezit, "LathrezitW", true) == true) && (UnitHasBehavior2(lp_lathrezit, "EnemyHero3CD") == false) && (UnitHasBehavior2(lp_lathrezit, "LathrezitChannelBehavior") == false)) {
        autoF88D9BC3_g = lv_enemyGroup8;
        autoF88D9BC3_u = UnitGroupCount(autoF88D9BC3_g, c_unitCountAll);
        for (;; autoF88D9BC3_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(autoF88D9BC3_g, autoF88D9BC3_u);
            if (lv_currentUnit == null) { break; }
            if ((DistanceBetweenPoints(UnitGetPosition(lv_currentUnit), UnitGetPosition(lp_lathrezit)) >= 2.0)) {
                UnitGroupAdd(lv_candidates, lv_currentUnit);
            }

        }
        if ((UnitGroupCount(lv_candidates, c_unitCountAlive) > 0)) {
            lv_abilityRange = 8.0;
            lv_abilityDamage = 75.0;
            lv_abilityAoE = 2.0;
            lv_score = 1;
            lv_targetPoint = AIBestTargetPoint(lv_candidates, 2, FixedToInt(lv_abilityDamage), lv_score, lv_abilityAoE, UnitGetPosition(lp_lathrezit), lv_abilityRange, c_unitAttributeNone);
            if ((lv_targetPoint != null)) {
                libNtve_gf_AICast(lp_lathrezit, OrderTargetingPoint(AbilityCommand("LathrezitW", 0), lv_targetPoint));
                return ;
            }

        }

    }

}

void libRWDR_gf_SendActorMessageToDoodadsInRegion (string lp_message, string lp_doodadType, region lp_target) {
    // Variable Declarations
    actor lv_actorRegion;
    string lv_terms;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_terms = "";

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", lp_target);
    lv_actorRegion = libNtve_gf_ActorLastCreated();
    if ((lp_doodadType != null)) {
        lv_terms = ("ScopeContains " + lp_doodadType);
    }

    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, lp_message, "Doodad", lv_terms);
    ActorScopeKill(ActorScopeFromActor(lv_actorRegion));
}

trigger auto_libRWDR_gf_WarpInPurifier_Trigger = null;
unit auto_libRWDR_gf_WarpInPurifier_lp_unit;
fixed auto_libRWDR_gf_WarpInPurifier_lp_time;

void libRWDR_gf_WarpInPurifier (unit lp_unit, fixed lp_time) {
    auto_libRWDR_gf_WarpInPurifier_lp_unit = lp_unit;
    auto_libRWDR_gf_WarpInPurifier_lp_time = lp_time;

    if (auto_libRWDR_gf_WarpInPurifier_Trigger == null) {
        auto_libRWDR_gf_WarpInPurifier_Trigger = TriggerCreate("auto_libRWDR_gf_WarpInPurifier_TriggerFunc");
    }

    TriggerExecute(auto_libRWDR_gf_WarpInPurifier_Trigger, false, false);
}

bool auto_libRWDR_gf_WarpInPurifier_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libRWDR_gf_WarpInPurifier_lp_unit;
    fixed lp_time = auto_libRWDR_gf_WarpInPurifier_lp_time;

    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorAdd(lp_unit, "PurifierWarpIn", lp_unit, 1);
    Wait(lp_time, c_timeGame);
    UnitBehaviorRemove(lp_unit, "PurifierWarpIn", 1);
    return true;
}

trigger auto_libRWDR_gf_WarpInOutProtossUnit_Trigger = null;
int auto_libRWDR_gf_WarpInOutProtossUnit_lp_inOut;
unit auto_libRWDR_gf_WarpInOutProtossUnit_lp_unit;

void libRWDR_gf_WarpInOutProtossUnit (int lp_inOut, unit lp_unit) {
    auto_libRWDR_gf_WarpInOutProtossUnit_lp_inOut = lp_inOut;
    auto_libRWDR_gf_WarpInOutProtossUnit_lp_unit = lp_unit;

    if (auto_libRWDR_gf_WarpInOutProtossUnit_Trigger == null) {
        auto_libRWDR_gf_WarpInOutProtossUnit_Trigger = TriggerCreate("auto_libRWDR_gf_WarpInOutProtossUnit_TriggerFunc");
    }

    TriggerExecute(auto_libRWDR_gf_WarpInOutProtossUnit_Trigger, false, false);
}

bool auto_libRWDR_gf_WarpInOutProtossUnit_TriggerFunc (bool testConds, bool runActions) {
    int lp_inOut = auto_libRWDR_gf_WarpInOutProtossUnit_lp_inOut;
    unit lp_unit = auto_libRWDR_gf_WarpInOutProtossUnit_lp_unit;

    // Automatic Variable Declarations
    int auto3EA20E75_val;

    // Implementation
    auto3EA20E75_val = lp_inOut;
    if (auto3EA20E75_val == libRWDR_ge_InOut_In) {
        libNtve_gf_ShowHideUnit(lp_unit, false);
        libNtve_gf_PauseUnit(lp_unit, true);
        UnitBehaviorAdd(lp_unit, "SuppressMoving", lp_unit, 1);
        SoundPlayAtPointForPlayer(SoundLink("Mothership_RecallStart", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_unit), 0.0, 100.0, 0.0);
        libNtve_gf_AttachActorToUnit(lp_unit, "ProtossGenericWarpInOut", "Ref_Origin");
        Wait(1.7, c_timeGame);
        libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
        if ((UnitIsAlive(lp_unit) == false)) {
            return true;
        }

        SoundPlayAtPointForPlayer(SoundLink("WarpGate_TrainFinish", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_unit), 0.0, 100.0, 0.0);
        libNtve_gf_ShowHideUnit(lp_unit, true);
        libNtve_gf_PauseUnit(lp_unit, false);
        UnitBehaviorRemove(lp_unit, "SuppressMoving", 1);
    }
    else if (auto3EA20E75_val == libRWDR_ge_InOut_Out) {
        UnitBehaviorAdd(lp_unit, "SuppressMoving", lp_unit, 1);
        SoundPlayAtPointForPlayer(SoundLink("WarpGate_TrainStart", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_unit), 0.0, 100.0, 0.0);
        libNtve_gf_AttachActorToUnit(lp_unit, "ProtossGenericWarpInOut", "Ref_Origin");
        Wait(1.7, c_timeGame);
        libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
        if ((UnitIsAlive(lp_unit) == false)) {
            return true;
        }

        SoundPlayAtPointForPlayer(SoundLink("WarpGate_TrainFinish", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_unit), 0.0, 100.0, 0.0);
        libNtve_gf_ShowHideUnit(lp_unit, false);
        libNtve_gf_PauseUnit(lp_unit, true);
        UnitBehaviorRemove(lp_unit, "SuppressMoving", 1);
    }
    else {
    }
    return true;
}

trigger auto_libRWDR_gf_WarpInOutMoriy_Trigger = null;
unit auto_libRWDR_gf_WarpInOutMoriy_lp_unit;
int auto_libRWDR_gf_WarpInOutMoriy_lp_inOut;

void libRWDR_gf_WarpInOutMoriy (unit lp_unit, int lp_inOut) {
    auto_libRWDR_gf_WarpInOutMoriy_lp_unit = lp_unit;
    auto_libRWDR_gf_WarpInOutMoriy_lp_inOut = lp_inOut;

    if (auto_libRWDR_gf_WarpInOutMoriy_Trigger == null) {
        auto_libRWDR_gf_WarpInOutMoriy_Trigger = TriggerCreate("auto_libRWDR_gf_WarpInOutMoriy_TriggerFunc");
    }

    TriggerExecute(auto_libRWDR_gf_WarpInOutMoriy_Trigger, false, false);
}

bool auto_libRWDR_gf_WarpInOutMoriy_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libRWDR_gf_WarpInOutMoriy_lp_unit;
    int lp_inOut = auto_libRWDR_gf_WarpInOutMoriy_lp_inOut;

    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    int auto9871FD69_val;

    // Variable Initialization

    // Implementation
    lv_point = UnitGetPosition(lp_unit);
    libNtve_gf_CreateActorAtPoint("MoriyWarpInOutModel", lv_point);
    libRWDR_gv_darkWarpActor = libNtve_gf_ActorLastCreated();
    auto9871FD69_val = lp_inOut;
    if (auto9871FD69_val == libRWDR_ge_InOut_In) {
        ActorSend(libRWDR_gv_darkWarpActor, "Signal warpin");
        SoundPlayAtPointForPlayer(SoundLink("Hybrid_WarpIn", -1), c_maxPlayers, PlayerGroupAll(), lv_point, 0.0, 100.0, 0.0);
        Wait(2.0, c_timeGame);
        ActorSend(libRWDR_gv_darkWarpActor, "Destroy");
        libNtve_gf_ShowHideUnit(lp_unit, true);
        libNtve_gf_PauseUnit(lp_unit, false);
    }
    else if (auto9871FD69_val == libRWDR_ge_InOut_Out) {
        ActorSend(libRWDR_gv_darkWarpActor, "Signal warpout");
        SoundPlayAtPointForPlayer(SoundLink("WarpGate_TrainFinish", -1), c_maxPlayers, PlayerGroupAll(), lv_point, 0.0, 100.0, 0.0);
        libNtve_gf_SendActorMessageToUnit(lp_unit, "SetOpacity 0.000000 1.000000");
        Wait(2.0, c_timeGame);
        libNtve_gf_ShowHideUnit(lp_unit, false);
        libNtve_gf_PauseUnit(lp_unit, true);
    }
    else {
    }
    return true;
}

void libRWDR_gf_SetAllSoundChannelVolumesCampaign (int lp_mode) {
    // Automatic Variable Declarations
    int auto10CF7CCC_val;

    // Implementation
    auto10CF7CCC_val = lp_mode;
    if (auto10CF7CCC_val == libRWDR_ge_VolumeChannelModeCampaign_Cinematic) {
        libLbty_gf_SetAllSoundChannelVolumesStandardTiming(libNtve_ge_VolumeChannelMode_Cinematic, PlayerGroupAll());
    }
    else if (auto10CF7CCC_val == libRWDR_ge_VolumeChannelModeCampaign_Game) {
        libRWDR_gv_pC_VolumeChannelModeInSpeech = false;
        if ((libRWDR_gv_pC_VolumeChannelModeInLowHP == true)) {
            libRWDR_gf_SetAllSoundChannelVolumesCampaign(libRWDR_ge_VolumeChannelModeCampaign_LowHealthBegin);
            return ;
        }

        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.5);
    }
    else if (auto10CF7CCC_val == libRWDR_ge_VolumeChannelModeCampaign_Game2) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.25);
    }
    else if (auto10CF7CCC_val == libRWDR_ge_VolumeChannelModeCampaign_Game3) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.25);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.1);
    }
    else if (auto10CF7CCC_val == libRWDR_ge_VolumeChannelModeCampaign_LowHealthBegin) {
        libRWDR_gv_pC_VolumeChannelModeInLowHP = true;
        if ((libRWDR_gv_pC_VolumeChannelModeInSpeech == true)) {
            libRWDR_gf_SetAllSoundChannelVolumesCampaign(libRWDR_ge_VolumeChannelModeCampaign_Speech);
            return ;
        }

        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 80.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 25.0, 2.0);
    }
    else if (auto10CF7CCC_val == libRWDR_ge_VolumeChannelModeCampaign_LowHealthEnd) {
        libRWDR_gv_pC_VolumeChannelModeInLowHP = false;
        if ((libRWDR_gv_pC_VolumeChannelModeInSpeech == true)) {
            libRWDR_gf_SetAllSoundChannelVolumesCampaign(libRWDR_ge_VolumeChannelModeCampaign_Speech);
            return ;
        }

        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 1.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 1.0);
    }
    else if (auto10CF7CCC_val == libRWDR_ge_VolumeChannelModeCampaign_Speech) {
        libRWDR_gv_pC_VolumeChannelModeInSpeech = true;
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 2.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 0.5);
    }
    else if (auto10CF7CCC_val == libRWDR_ge_VolumeChannelModeCampaign_Speech2) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 60.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 50.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto10CF7CCC_val == libRWDR_ge_VolumeChannelModeCampaign_Speech3) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 60.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 50.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto10CF7CCC_val == libRWDR_ge_VolumeChannelModeCampaign_SpeechAndMusicNoEffects) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 12.5, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 50.0, 0.05);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 3.125, 0.05);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 12.5, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 3.125, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto10CF7CCC_val == libRWDR_ge_VolumeChannelModeCampaign_MissionLaunchUI) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Victory, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.5);
    }
    else if (auto10CF7CCC_val == libRWDR_ge_VolumeChannelModeCampaign_Victory) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMessage, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpellOneshotImpact, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpellOneshotLaunch, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTest, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 100.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 1.0);
    }
    else if (auto10CF7CCC_val == libRWDR_ge_VolumeChannelModeCampaign_VictoryInstant) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMessage, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpellOneshotImpact, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpellOneshotLaunch, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTest, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 100.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 0.0);
    }
    else {
    }
}

void libRWDR_gf_MuteUnmuteAllSoundChannelsExcept (bool lp_muteUnmute, int lp_ignoredChannel, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    libRWDR_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryAlert, lp_ignoredChannel, lp_players);
    libRWDR_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryAmbient, lp_ignoredChannel, lp_players);
    libRWDR_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryBuild, lp_ignoredChannel, lp_players);
    libRWDR_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryCombat, lp_ignoredChannel, lp_players);
    libRWDR_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryDeath, lp_ignoredChannel, lp_players);
    libRWDR_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryDialogue, lp_ignoredChannel, lp_players);
    libRWDR_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryDoodad, lp_ignoredChannel, lp_players);
    libRWDR_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryFlames, lp_ignoredChannel, lp_players);
    libRWDR_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryFoley, lp_ignoredChannel, lp_players);
    libRWDR_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryGather, lp_ignoredChannel, lp_players);
    libRWDR_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryME, lp_ignoredChannel, lp_players);
    libRWDR_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMission, lp_ignoredChannel, lp_players);
    libRWDR_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMovement, lp_ignoredChannel, lp_players);
    libRWDR_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMovie, lp_ignoredChannel, lp_players);
    libRWDR_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMusic, lp_ignoredChannel, lp_players);
    libRWDR_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryOther, lp_ignoredChannel, lp_players);
    libRWDR_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryReady, lp_ignoredChannel, lp_players);
    libRWDR_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySAmbient, lp_ignoredChannel, lp_players);
    libRWDR_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySEmitters, lp_ignoredChannel, lp_players);
    libRWDR_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySPieces, lp_ignoredChannel, lp_players);
    libRWDR_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySpell, lp_ignoredChannel, lp_players);
    libRWDR_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryTV, lp_ignoredChannel, lp_players);
    libRWDR_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryUI, lp_ignoredChannel, lp_players);
    libRWDR_gf_PC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryVoice, lp_ignoredChannel, lp_players);
}

void libRWDR_gf_PC_MuteUnmuteExclusive (bool lp_muteUnmute, int lp_muteChannel, int lp_ignoredChannel, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_muteChannel != lp_ignoredChannel)) {
        SoundChannelMute(lp_players, lp_muteChannel, lp_muteUnmute);
    }

}

void libRWDR_gf_RWDR_TimeFreezeVisual (fixed lp_cameraPOSX, fixed lp_cameraPOSY) {
    // Automatic Variable Declarations
    // Implementation
    PlayerCreateEffectPoint(1, "SOATimeFreezeVisual", Point(lp_cameraPOSX, lp_cameraPOSY));
}

void libRWDR_gf__ZergDropPod (point lp_location, unitgroup lp_units, int lp_player) {
    // Variable Declarations
    unit lv_chosenUnit;
    unit lv_dropPod;
    point lv_dropPodLocation;
    fixed lv_angle;
    point lv_dropLocation;
    unit lv_creep;

    // Automatic Variable Declarations
    unitgroup auto5D2A1227_g;
    int auto5D2A1227_u;
    unitgroup autoEE93B17D_g;
    int autoEE93B17D_u;

    // Variable Initialization

    // Implementation
    auto5D2A1227_g = lp_units;
    auto5D2A1227_u = UnitGroupCount(auto5D2A1227_g, c_unitCountAll);
    for (;; auto5D2A1227_u -= 1) {
        lv_chosenUnit = UnitGroupUnitFromEnd(auto5D2A1227_g, auto5D2A1227_u);
        if (lv_chosenUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_chosenUnit, false);
        libNtve_gf_PauseUnit(lv_chosenUnit, true);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "ZergDropPod", c_unitCreateIgnorePlacement, lp_player, lp_location);
    lv_dropPod = UnitLastCreated();
    Wait(2.5, c_timeGame);
    lv_dropPodLocation = UnitGetPosition(lv_dropPod);
    libNtve_gf_CreateUnitsAtPoint2(1, "ZergDropPodCreep", c_unitCreateIgnorePlacement, lp_player, lv_dropPodLocation);
    lv_creep = UnitLastCreated();
    Wait(1.0, c_timeGame);
    lv_angle = 0.0;
    autoEE93B17D_g = lp_units;
    autoEE93B17D_u = UnitGroupCount(autoEE93B17D_g, c_unitCountAll);
    for (;; autoEE93B17D_u -= 1) {
        lv_chosenUnit = UnitGroupUnitFromEnd(autoEE93B17D_g, autoEE93B17D_u);
        if (lv_chosenUnit == null) { break; }
        lv_dropLocation = PointWithOffsetPolar(lv_dropPodLocation, RandomFixed(0.5, 2.0), lv_angle);
        UnitSetPosition(lv_chosenUnit, lv_dropLocation, false);
        libNtve_gf_ShowHideUnit(lv_chosenUnit, true);
        libNtve_gf_PauseUnit(lv_chosenUnit, false);
        Wait(0.125, c_timeGame);
        lv_angle = (lv_angle + 77.0);
    }
    libNtve_gf_PauseUnit(lv_creep, true);
    Wait(3.0, c_timeGame);
    UnitRemove(lv_creep);
    Wait(4.0, c_timeGame);
    UnitKill(lv_dropPod);
}

void libRWDR_gf__TerranDropPod (point lp_location, unitgroup lp_units, int lp_player) {
    // Variable Declarations
    unit lv_indexUnit;
    unit lv_dropPod;
    point lv_dropPodLocation;
    fixed lv_angle;
    fixed lv_angleStart;
    point lv_dropLocation;
    fixed lv_distance;
    int lv_subIndex;
    point lv_moveLocation;
    int lv_countPerLine;

    // Automatic Variable Declarations
    unitgroup auto29238B9E_g;
    int auto29238B9E_u;
    unitgroup auto163E24E6_g;
    int auto163E24E6_u;

    // Variable Initialization

    // Implementation
    auto29238B9E_g = lp_units;
    auto29238B9E_u = UnitGroupCount(auto29238B9E_g, c_unitCountAll);
    for (;; auto29238B9E_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto29238B9E_g, auto29238B9E_u);
        if (lv_indexUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_indexUnit, false);
        libNtve_gf_PauseUnit(lv_indexUnit, true);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "TerranDropPod", c_unitCreateIgnorePlacement, lp_player, lp_location);
    lv_dropPod = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_dropPod), c_animNameDefault, "Birth", c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.5, c_timeGame);
    lv_countPerLine = 4;
    if ((UnitGroupCount(lp_units, c_unitCountAlive) > 16)) {
        lv_countPerLine = ((UnitGroupCount(lp_units, c_unitCountAlive) + 3) / 4);
    }

    lv_dropPodLocation = UnitGetPosition(lv_dropPod);
    lv_distance = (0.8 + ((IntToFixed((UnitGroupCount(lp_units, c_unitCountAlive) + 3)) / IntToFixed(lv_countPerLine)) * 0.8));
    lv_subIndex = 1;
    lv_angleStart = 225.0;
    lv_angle = lv_angleStart;
    auto163E24E6_g = lp_units;
    auto163E24E6_u = UnitGroupCount(auto163E24E6_g, c_unitCountAll);
    for (;; auto163E24E6_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto163E24E6_g, auto163E24E6_u);
        if (lv_indexUnit == null) { break; }
        lv_dropLocation = PointWithOffsetPolar(lv_dropPodLocation, 1.0, lv_angle);
        SoundPlayAtPoint(SoundLink("Medivac_Unload", 0), PlayerGroupAll(), lv_dropLocation, 0.0, 100.0, 0.0);
        Wait(0.125, c_timeGame);
        UnitSetPosition(lv_indexUnit, lv_dropLocation, false);
        libNtve_gf_ShowHideUnit(lv_indexUnit, true);
        libNtve_gf_PauseUnit(lv_indexUnit, false);
        lv_moveLocation = PointWithOffsetPolar(lv_dropPodLocation, lv_distance, lv_angle);
        UnitIssueOrder(lv_indexUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_moveLocation), c_orderQueueReplace);
        if ((lv_subIndex == lv_countPerLine)) {
            lv_subIndex = 1;
            lv_angle = lv_angleStart;
            lv_distance -= 0.8;
        }
        else {
            lv_subIndex += 1;
            lv_angle += 10.0;
        }
    }
    UnitKill(lv_dropPod);
}

void libRWDR_gf_SCMR_CreateDropPod (int lp_race, point lp_location, unitgroup lp_units, bool lp_waitDontWait, int lp_player) {
    // Variable Declarations
    point lv_dropLocation;
    unitgroup lv_dropUnits;

    // Automatic Variable Declarations
    int auto2CE59E44_val;

    // Variable Initialization
    lv_dropUnits = UnitGroupEmpty();

    // Implementation
    lv_dropLocation = Point(PointGetX(lp_location), PointGetY(lp_location));
    PointSetFacing(lv_dropLocation, PointGetFacing(lp_location));
    lv_dropUnits = UnitGroupCopy(lp_units);
    DataTableSetUnitGroup(false, libRWDR_gf__LastDroppedUnitsDataTableName(), lv_dropUnits);
    auto2CE59E44_val = lp_race;
    if (auto2CE59E44_val == libRWDR_ge_DropPodRace_Terran) {
        if ((lp_waitDontWait == true)) {
            libRWDR_gf__TerranDropPod(lv_dropLocation, lv_dropUnits, lp_player);
        }
        else {
            libRWDR_gv_SCMR_TP_DropPod_Location = lv_dropLocation;
            libRWDR_gv_SCMR_TP_DropPod_Units = lv_dropUnits;
            libRWDR_gv_SCMR_TP_DropPod_Player = lp_player;
            TriggerExecute(libRWDR_gt_SCMR_TerranDropPod, true, false);
        }
    }
    else if (auto2CE59E44_val == libRWDR_ge_DropPodRace_Zerg) {
        if ((lp_waitDontWait == true)) {
            libRWDR_gf__ZergDropPod(lv_dropLocation, lv_dropUnits, lp_player);
        }
        else {
            libRWDR_gv_SCMR_TP_DropPod_Location = lv_dropLocation;
            libRWDR_gv_SCMR_TP_DropPod_Units = lv_dropUnits;
            libRWDR_gv_SCMR_TP_DropPod_Player = lp_player;
            TriggerExecute(libRWDR_gt_SCMR_ZergDropPod, true, false);
        }
    }
    else {
    }
}

void libRWDR_gf_CreateDropPodForZergBuilding (string lp_buildingType, point lp_landingPoint, int lp_player, bool lp_waitDontWait) {
    // Automatic Variable Declarations
    bool autoAA0CAC0B_val;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_buildingType, c_unitCreateIgnorePlacement, lp_player, lp_landingPoint);
    libRWDR_gv__TP_ZergDropPod_Building = UnitLastCreated();
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    DataTableSetUnitGroup(false, libRWDR_gf__LastDroppedUnitsDataTableName(), UnitLastCreatedGroup());
    autoAA0CAC0B_val = lp_waitDontWait;
    if (autoAA0CAC0B_val == true) {
        libRWDR_gf__CreateDropPodForBuildingWait(lp_buildingType, lp_landingPoint, lp_player);
    }
    else if (autoAA0CAC0B_val == false) {
        libRWDR_gf__CreateDropPodForBuildingDontWait(lp_buildingType, lp_landingPoint, lp_player);
    }
    else {
    }
}

trigger auto_libRWDR_gf__CreateDropPodForBuildingDontWait_Trigger = null;
string auto_libRWDR_gf__CreateDropPodForBuildingDontWait_lp_buildingType;
point auto_libRWDR_gf__CreateDropPodForBuildingDontWait_lp_landingPoint;
int auto_libRWDR_gf__CreateDropPodForBuildingDontWait_lp_player;

void libRWDR_gf__CreateDropPodForBuildingDontWait (string lp_buildingType, point lp_landingPoint, int lp_player) {
    auto_libRWDR_gf__CreateDropPodForBuildingDontWait_lp_buildingType = lp_buildingType;
    auto_libRWDR_gf__CreateDropPodForBuildingDontWait_lp_landingPoint = lp_landingPoint;
    auto_libRWDR_gf__CreateDropPodForBuildingDontWait_lp_player = lp_player;

    if (auto_libRWDR_gf__CreateDropPodForBuildingDontWait_Trigger == null) {
        auto_libRWDR_gf__CreateDropPodForBuildingDontWait_Trigger = TriggerCreate("auto_libRWDR_gf__CreateDropPodForBuildingDontWait_TriggerFunc");
    }

    TriggerExecute(auto_libRWDR_gf__CreateDropPodForBuildingDontWait_Trigger, false, false);
}

bool auto_libRWDR_gf__CreateDropPodForBuildingDontWait_TriggerFunc (bool testConds, bool runActions) {
    string lp_buildingType = auto_libRWDR_gf__CreateDropPodForBuildingDontWait_lp_buildingType;
    point lp_landingPoint = auto_libRWDR_gf__CreateDropPodForBuildingDontWait_lp_landingPoint;
    int lp_player = auto_libRWDR_gf__CreateDropPodForBuildingDontWait_lp_player;

    // Automatic Variable Declarations
    // Implementation
    libRWDR_gf__CreateDropPodForBuildingWait(lp_buildingType, lp_landingPoint, lp_player);
    return true;
}

void libRWDR_gf__CreateDropPodForBuildingWait (string lp_buildingType, point lp_landingPoint, int lp_player) {
    // Variable Declarations
    unit lv_droppod;

    // Automatic Variable Declarations
    unitgroup autoF8DCF2C9_g;
    int autoF8DCF2C9_u;
    unit autoF8DCF2C9_var;

    // Variable Initialization

    // Implementation
    UnitCreate(1, "ZergDropPod", c_unitCreateIgnorePlacement, lp_player, lp_landingPoint, 270.0);
    lv_droppod = UnitLastCreated();
    Wait(2.0, c_timeReal);
    UnitTypeMoveBlockersFromPoint(lp_buildingType, lp_player, lp_landingPoint, 0.0);
    Wait(1.25, c_timeReal);
    autoF8DCF2C9_g = UnitGroup(null, c_playerAny, RegionCircle(lp_landingPoint, 2.5), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF8DCF2C9_u = UnitGroupCount(autoF8DCF2C9_g, c_unitCountAll);
    for (;; autoF8DCF2C9_u -= 1) {
        autoF8DCF2C9_var = UnitGroupUnitFromEnd(autoF8DCF2C9_g, autoF8DCF2C9_u);
        if (autoF8DCF2C9_var == null) { break; }
        if ((UnitGetType(autoF8DCF2C9_var) != "ZergDropPodLarge") && (autoF8DCF2C9_var != UnitLastCreated())) {
            if (((UnitGetOwner(autoF8DCF2C9_var) == lp_player) || (libNtve_gf_PlayerIsEnemy(lp_player, UnitGetOwner(autoF8DCF2C9_var), libNtve_ge_PlayerRelation_Ally) == true))) {
                UnitSetPosition(autoF8DCF2C9_var, UnitTypePlacementFromPoint(lp_buildingType, UnitGetOwner(autoF8DCF2C9_var), lp_landingPoint, 4.0), true);
            }
            else {
                UnitKill(autoF8DCF2C9_var);
            }
        }

    }
    libNtve_gf_ShowHideUnit(libRWDR_gv__TP_ZergDropPod_Building, true);
    Wait(5.0, c_timeReal);
    UnitKill(lv_droppod);
}

string libRWDR_gf__LastDroppedUnitsDataTableName () {
    // Automatic Variable Declarations
    // Implementation
    return "LASTDROPPODEDUNITS";
}

unitgroup libRWDR_gf_LastDroppedUnits () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnitGroup(false, libRWDR_gf__LastDroppedUnitsDataTableName());
}

int libRWDR_gf_PC_DifficultyIndex (int lp_difficulty) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoD34ABE1B_val;

    // Variable Initialization

    // Implementation
    autoD34ABE1B_val = lp_difficulty;
    if (autoD34ABE1B_val == 1) {
        return 1;
    }
    else if (autoD34ABE1B_val == 2) {
        return 2;
    }
    else if (autoD34ABE1B_val == 3) {
        return 3;
    }
    else if (autoD34ABE1B_val == 4) {
        return 4;
    }
    else {
        return 0;
    }
}

int libRWDR_gf_PC_DifficultyFromIndex (int lp_index) {
    // Automatic Variable Declarations
    int autoC7D58B3C_val;

    // Implementation
    autoC7D58B3C_val = lp_index;
    if (autoC7D58B3C_val == libRWDR_gf_PC_DifficultyIndex(1)) {
        return 1;
    }
    else if (autoC7D58B3C_val == libRWDR_gf_PC_DifficultyIndex(2)) {
        return 2;
    }
    else if (autoC7D58B3C_val == libRWDR_gf_PC_DifficultyIndex(3)) {
        return 3;
    }
    else if (autoC7D58B3C_val == libRWDR_gf_PC_DifficultyIndex(4)) {
        return 4;
    }
    else {
        return 2;
    }
}

void libRWDR_gf_PC_SetCampaignDifficulty (int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    libRWDR_gv_pCX_CampaignDifficulty = lp_difficulty;
}

void libRWDR_gf_SetEnemyHeroGCD (fixed lp_seconds, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueSet(c_gameCatalogBehavior, "EnemyHero3CD", "Duration", lp_player, FixedToString(lp_seconds, 2));
}

void libRWDR_gf_InitializeSignifer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(libRWDR_gt_SigniferAutoCastHeal, true);
    TriggerEnable(libRWDR_gt_SigniferAutoCastMindPower, true);
}

void libRWDR_gf_InitializeZortalas (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    libRWDR_gv_Zortalas = lp_unit;
    TriggerEnable(libRWDR_gt_ZortalasFury, true);
    TriggerEnable(libRWDR_gt_ZortalasKillLaziotImmortal, true);
    TriggerEnable(libRWDR_gt_ZortalasCancelAvalaxChannel, true);
}

void libRWDR_gf_SetAutocastonoff (unit lp_unit, int lp_type, bool lp_onOff) {
    // Automatic Variable Declarations
    int auto7BA14FF5_val;

    // Implementation
    auto7BA14FF5_val = lp_type;
    if (auto7BA14FF5_val == libRWDR_ge_Type_Tolaris) {
        UnitIssueOrder(lp_unit, OrderSetAutoCast(AbilityCommand("TolarisArchonW", 0), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(lp_unit, OrderSetAutoCast(AbilityCommand("TolarisArchonQ", 0), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(lp_unit, OrderSetAutoCast(AbilityCommand("TolarisArchonE", 0), lp_onOff), c_orderQueueReplace);
    }
    else if (auto7BA14FF5_val == libRWDR_ge_Type_Moriy) {
        UnitIssueOrder(lp_unit, OrderSetAutoCast(AbilityCommand("MoriyQ", 0), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(lp_unit, OrderSetAutoCast(AbilityCommand("MoriyW", 0), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(lp_unit, OrderSetAutoCast(AbilityCommand("MoriyE", 0), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(lp_unit, OrderSetAutoCast(AbilityCommand("MoriyR", 0), lp_onOff), c_orderQueueReplace);
    }
    else {
    }
}

unit libRWDR_gf_HeroTypetoHeroUnitVariable (int lp_heroUnit) {
    // Automatic Variable Declarations
    int auto47D9B63D_val;

    // Implementation
    auto47D9B63D_val = lp_heroUnit;
    if (auto47D9B63D_val == libRWDR_ge_SCMRCampaignHeroes_Delanar) {
        return libRWDR_gv_Delanar;
    }
    else if (auto47D9B63D_val == libRWDR_ge_SCMRCampaignHeroes_Tolaris) {
        return libRWDR_gv_Tolaris;
    }
    else if (auto47D9B63D_val == libRWDR_ge_SCMRCampaignHeroes_Avalax) {
        return libRWDR_gv_Avalax;
    }
    else if (auto47D9B63D_val == libRWDR_ge_SCMRCampaignHeroes_ByronKane) {
        return libRWDR_gv_ByronKane;
    }
    else if (auto47D9B63D_val == libRWDR_ge_SCMRCampaignHeroes_BarryClark) {
        return libRWDR_gv_BarryClark;
    }
    else if (auto47D9B63D_val == libRWDR_ge_SCMRCampaignHeroes_Eledis) {
        return libRWDR_gv_Eledis;
    }
    else {
        return null;
    }
}

void libRWDR_gf_AddMasteryPointsForHero (int lp_heroUnit, int lp_player, int lp_points) {
    // Automatic Variable Declarations
    int autoB22A5D51_val;

    // Implementation
    autoB22A5D51_val = lp_heroUnit;
    if (autoB22A5D51_val == libRWDR_ge_SCMRCampaignHeroes_Delanar) {
        CatalogFieldValueModify(c_gameCatalogBehavior, "DelanarMasteryUpdater", "Modification.AttributeChangeArray[" + IntToString(0) + "].Points", lp_player, IntToString(lp_points), c_upgradeOperationAdd);
        CatalogFieldValueModify(c_gameCatalogAbil, "DelanarQ", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lp_player, FixedToString((0.12 * lp_points), 2), c_upgradeOperationSubtract);
        CatalogFieldValueModify(c_gameCatalogAbil, "DelanarW", "Cost[" + IntToString(0) + "].Charge.TimeUse", lp_player, FixedToString((0.2 * lp_points), 2), c_upgradeOperationSubtract);
        CatalogFieldValueModify(c_gameCatalogAbil, "DelanarE", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lp_player, FixedToString((0.12 * lp_points), 2), c_upgradeOperationSubtract);
    }
    else if (autoB22A5D51_val == libRWDR_ge_SCMRCampaignHeroes_Tolaris) {
        CatalogFieldValueModify(c_gameCatalogBehavior, "TolarisMasteryUpdater", "Modification.AttributeChangeArray[" + IntToString(0) + "].Points", lp_player, IntToString(lp_points), c_upgradeOperationAdd);
        CatalogFieldValueModify(c_gameCatalogBehavior, "TolarisMasteryUpdater", "DamageResponse.Chance", lp_player, FixedToString((0.01 * lp_points), 2), c_upgradeOperationAdd);
        CatalogFieldValueModify(c_gameCatalogBehavior, "TolarisMasteryUpdater", "DamageResponse.ModifyFraction", lp_player, FixedToString((0.01 * lp_points), 2), c_upgradeOperationSubtract);
    }
    else if (autoB22A5D51_val == libRWDR_ge_SCMRCampaignHeroes_Avalax) {
        CatalogFieldValueModify(c_gameCatalogBehavior, "AvalaxMasteryUpdater", "Modification.AttributeChangeArray[" + IntToString(0) + "].Points", lp_player, IntToString(lp_points), c_upgradeOperationAdd);
        CatalogFieldValueModify(c_gameCatalogEffect, "AvalaxWeaponEnergyRestore", "VitalArray[" + IntToString(c_unitVitalEnergy) + "].Change", lp_player, FixedToString((0.2 * lp_points), 2), c_upgradeOperationAdd);
    }
    else if (autoB22A5D51_val == libRWDR_ge_SCMRCampaignHeroes_BarryClark) {
        CatalogFieldValueModify(c_gameCatalogBehavior, "BarryMasteryUpdater", "Modification.AttributeChangeArray[" + IntToString(0) + "].Points", lp_player, IntToString(lp_points), c_upgradeOperationAdd);
    }
    else if (autoB22A5D51_val == libRWDR_ge_SCMRCampaignHeroes_ByronKane) {
        CatalogFieldValueModify(c_gameCatalogBehavior, "ByronMasteryUpdater", "Modification.AttributeChangeArray[" + IntToString(0) + "].Points", lp_player, IntToString(lp_points), c_upgradeOperationAdd);
        CatalogFieldValueModify(c_gameCatalogBehavior, "ByronMasteryShield", "DamageResponse.ModifyLimit", lp_player, FixedToString((1.0 * lp_points), c_fixedPrecisionAny), c_upgradeOperationAdd);
        CatalogFieldValueModify(c_gameCatalogEffect, "ByronMasteryEnergyRestore", "VitalArray[" + IntToString(c_unitVitalEnergy) + "].Change", lp_player, FixedToString((1.0 * lp_points), 2), c_upgradeOperationAdd);
    }
    else if (autoB22A5D51_val == libRWDR_ge_SCMRCampaignHeroes_Eledis) {
        CatalogFieldValueModify(c_gameCatalogBehavior, "EledisMasteryUpdater", "Modification.AttributeChangeArray[" + IntToString(0) + "].Points", lp_player, IntToString(lp_points), c_upgradeOperationAdd);
        CatalogFieldValueModify(c_gameCatalogBehavior, "EledisWeaponArmorReduce", "Modification.LifeArmorBonus", lp_player, FixedToString((lp_points * 0.15), 2), c_upgradeOperationSubtract);
        CatalogFieldValueModify(c_gameCatalogBehavior, "EledisWeaponArmorReduce", "Modification.ShieldArmorBonus", lp_player, FixedToString((lp_points * 0.15), 2), c_upgradeOperationSubtract);
    }
    else {
    }
}

void libRWDR_gf_SetCurrentLevelForHero (int lp_player, int lp_level, int lp_heroUnit) {
    // Variable Declarations
    int lv_reference;

    // Automatic Variable Declarations
    int autoBEA77766_val;
    int autoEE6F1A8C_n;
    int autoEE6F1A8C_i;
    int autoF5FFD3FC_n;
    int autoF5FFD3FC_i;
    int auto56D98E4D_n;
    int auto56D98E4D_i;
    int auto359E9C1B_n;
    int auto359E9C1B_i;
    int auto5A9716A7_n;
    int auto5A9716A7_i;
    int auto582E217F_n;
    int auto582E217F_i;
    int auto70F4AB49_val;
    int autoBF7F542E_n;
    int autoBF7F542E_i;
    int autoA1263D52_n;
    int autoA1263D52_i;
    int auto8F0683DB_n;
    int auto8F0683DB_i;
    int autoF51DD191_n;
    int autoF51DD191_i;
    int autoD8AD40DF_n;
    int autoD8AD40DF_i;
    int auto54AF7A59_n;
    int auto54AF7A59_i;

    // Variable Initialization

    // Implementation
    UnitXPSetCurrentLevel(libRWDR_gf_HeroTypetoHeroUnitVariable(lp_heroUnit), null, lp_level);
    if ((lp_level <= 2)) {
        return ;
    }
    else {
        if ((lp_level <= 6)) {
            auto70F4AB49_val = lp_heroUnit;
            if (auto70F4AB49_val == libRWDR_ge_SCMRCampaignHeroes_Delanar) {
                autoBF7F542E_n = (lp_level - 2);
                for (autoBF7F542E_i = 1; autoBF7F542E_i <= autoBF7F542E_n; autoBF7F542E_i += 1) {
                    PlayerCreateEffectUnit(lp_player, "DelanarPlayerModify_WeaponDamage", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_Delanar));
                    PlayerCreateEffectUnit(lp_player, "DelanarPlayerModify_Mastery", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_Delanar));
                }
                return ;
            }
            else if (auto70F4AB49_val == libRWDR_ge_SCMRCampaignHeroes_Tolaris) {
                autoA1263D52_n = (lp_level - 2);
                for (autoA1263D52_i = 1; autoA1263D52_i <= autoA1263D52_n; autoA1263D52_i += 1) {
                    PlayerCreateEffectUnit(lp_player, "TolarisPlayerModify_Armor", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_Tolaris));
                    PlayerCreateEffectUnit(lp_player, "TolarisPlayerModify_Mastery", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_Tolaris));
                }
                return ;
            }
            else if (auto70F4AB49_val == libRWDR_ge_SCMRCampaignHeroes_Avalax) {
                auto8F0683DB_n = (lp_level - 2);
                for (auto8F0683DB_i = 1; auto8F0683DB_i <= auto8F0683DB_n; auto8F0683DB_i += 1) {
                    PlayerCreateEffectUnit(lp_player, "AvalaxPlayerModify_WeaponDamage", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_Avalax));
                    PlayerCreateEffectUnit(lp_player, "AvalaxPlayerModify_Mastery", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_Avalax));
                }
                return ;
            }
            else if (auto70F4AB49_val == libRWDR_ge_SCMRCampaignHeroes_BarryClark) {
                autoF51DD191_n = (lp_level - 2);
                for (autoF51DD191_i = 1; autoF51DD191_i <= autoF51DD191_n; autoF51DD191_i += 1) {
                    PlayerCreateEffectUnit(lp_player, "BarryPlayerModify_Armor", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_BarryClark));
                    PlayerCreateEffectUnit(lp_player, "BarryPlayerModify_Mastery", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_BarryClark));
                }
                return ;
            }
            else if (auto70F4AB49_val == libRWDR_ge_SCMRCampaignHeroes_ByronKane) {
                autoD8AD40DF_n = (lp_level - 2);
                for (autoD8AD40DF_i = 1; autoD8AD40DF_i <= autoD8AD40DF_n; autoD8AD40DF_i += 1) {
                    PlayerCreateEffectUnit(lp_player, "ByronPlayerModify_WeaponDamage", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_ByronKane));
                    PlayerCreateEffectUnit(lp_player, "ByronPlayerModify_Mastery", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_ByronKane));
                }
                return ;
            }
            else if (auto70F4AB49_val == libRWDR_ge_SCMRCampaignHeroes_Eledis) {
                auto54AF7A59_n = (lp_level - 2);
                for (auto54AF7A59_i = 1; auto54AF7A59_i <= auto54AF7A59_n; auto54AF7A59_i += 1) {
                    PlayerCreateEffectUnit(lp_player, "EledisPlayerModify_WeaponDamage", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_Eledis));
                    PlayerCreateEffectUnit(lp_player, "EledisPlayerModify_Mastery", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_Eledis));
                }
                return ;
            }
            else {
            }
        }
        else {
            autoBEA77766_val = lp_heroUnit;
            if (autoBEA77766_val == libRWDR_ge_SCMRCampaignHeroes_Delanar) {
                PlayerCreateEffectUnit(lp_player, "DelanarLevelUpSetLv6", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_Delanar));
                autoEE6F1A8C_n = (lp_level - 3);
                for (autoEE6F1A8C_i = 1; autoEE6F1A8C_i <= autoEE6F1A8C_n; autoEE6F1A8C_i += 1) {
                    PlayerCreateEffectUnit(lp_player, "DelanarPlayerModify_WeaponDamage", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_Delanar));
                    PlayerCreateEffectUnit(lp_player, "DelanarPlayerModify_Mastery", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_Delanar));
                }
                return ;
            }
            else if (autoBEA77766_val == libRWDR_ge_SCMRCampaignHeroes_Tolaris) {
                PlayerCreateEffectUnit(lp_player, "TolarisLevelUpSetLv6", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_Tolaris));
                autoF5FFD3FC_n = (lp_level - 3);
                for (autoF5FFD3FC_i = 1; autoF5FFD3FC_i <= autoF5FFD3FC_n; autoF5FFD3FC_i += 1) {
                    PlayerCreateEffectUnit(lp_player, "TolarisPlayerModify_Armor", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_Tolaris));
                    PlayerCreateEffectUnit(lp_player, "TolarisPlayerModify_Mastery", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_Tolaris));
                }
                return ;
            }
            else if (autoBEA77766_val == libRWDR_ge_SCMRCampaignHeroes_Avalax) {
                PlayerCreateEffectUnit(lp_player, "AvalaxLevelUpSetLv6", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_Avalax));
                auto56D98E4D_n = (lp_level - 3);
                for (auto56D98E4D_i = 1; auto56D98E4D_i <= auto56D98E4D_n; auto56D98E4D_i += 1) {
                    PlayerCreateEffectUnit(lp_player, "AvalaxPlayerModify_WeaponDamage", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_Avalax));
                    PlayerCreateEffectUnit(lp_player, "AvalaxPlayerModify_Mastery", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_Avalax));
                }
                return ;
            }
            else if (autoBEA77766_val == libRWDR_ge_SCMRCampaignHeroes_BarryClark) {
                PlayerCreateEffectUnit(lp_player, "BarryLevelUpSetLv6", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_BarryClark));
                auto359E9C1B_n = (lp_level - 3);
                for (auto359E9C1B_i = 1; auto359E9C1B_i <= auto359E9C1B_n; auto359E9C1B_i += 1) {
                    PlayerCreateEffectUnit(lp_player, "BarryPlayerModify_Armor", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_BarryClark));
                    PlayerCreateEffectUnit(lp_player, "BarryPlayerModify_Mastery", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_BarryClark));
                }
                return ;
            }
            else if (autoBEA77766_val == libRWDR_ge_SCMRCampaignHeroes_ByronKane) {
                PlayerCreateEffectUnit(lp_player, "ByronLevelUpSetLv6", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_ByronKane));
                auto5A9716A7_n = (lp_level - 3);
                for (auto5A9716A7_i = 1; auto5A9716A7_i <= auto5A9716A7_n; auto5A9716A7_i += 1) {
                    PlayerCreateEffectUnit(lp_player, "ByronPlayerModify_WeaponDamage", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_ByronKane));
                    PlayerCreateEffectUnit(lp_player, "ByronPlayerModify_Mastery", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_ByronKane));
                }
                return ;
            }
            else if (autoBEA77766_val == libRWDR_ge_SCMRCampaignHeroes_Eledis) {
                PlayerCreateEffectUnit(lp_player, "EledisLevelUpSetLv6", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_Eledis));
                auto582E217F_n = (lp_level - 3);
                for (auto582E217F_i = 1; auto582E217F_i <= auto582E217F_n; auto582E217F_i += 1) {
                    PlayerCreateEffectUnit(lp_player, "EledisPlayerModify_WeaponDamage", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_Eledis));
                    PlayerCreateEffectUnit(lp_player, "EledisPlayerModify_Mastery", libRWDR_gf_HeroTypetoHeroUnitVariable(libRWDR_ge_SCMRCampaignHeroes_Eledis));
                }
                return ;
            }
            else {
            }
        }
    }
}

void libRWDR_gf_DisplayMasteryPointsGiventoPlayer (unit lp_DisplayUnit, int lp_MasteryPoint, int lp_player, int lp_protosseffect) {
    // Variable Declarations
    text lv_text;

    // Automatic Variable Declarations
    int auto04F79FB9_val;
    int autoD7931388_val;

    // Variable Initialization

    // Implementation
    auto04F79FB9_val = lp_protosseffect;
    if (auto04F79FB9_val == libRWDR_ge_ZergOrProtossRescueEffect_Protoss) {
        lv_text = (StringExternal("Param/Value/lib_RWDR_CD05882A") + IntToText(lp_MasteryPoint) + StringExternal("Param/Value/lib_RWDR_15E6D7E6"));
    }
    else if (auto04F79FB9_val == libRWDR_ge_ZergOrProtossRescueEffect_Zerg) {
        lv_text = (StringExternal("Param/Value/lib_RWDR_420CB32D") + IntToText(lp_MasteryPoint) + StringExternal("Param/Value/lib_RWDR_32F8B333"));
    }
    else {
    }
    TextTagCreate(lv_text, 24, UnitGetPosition(lp_DisplayUnit), 2.5, true, false, PlayerGroupSingle(lp_player));
    autoD7931388_val = lp_protosseffect;
    if (autoD7931388_val == libRWDR_ge_ZergOrProtossRescueEffect_Protoss) {
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 50.20, 100.00));
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.0);
        SoundPlay(SoundLink("UI_ResourcePickup", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoD7931388_val == libRWDR_ge_ZergOrProtossRescueEffect_Zerg) {
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 50.20, 0.00));
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.0);
        SoundPlay(SoundLink("UI_ResourcePickup", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else {
    }
}

void libRWDR_gf_DisplayMasteryPointsatPoint (point lp_Location, int lp_MasteryPoint, int lp_player, int lp_protosseffect) {
    // Variable Declarations
    text lv_text;

    // Automatic Variable Declarations
    int auto428DD6AF_val;
    int autoF1B11728_val;

    // Variable Initialization

    // Implementation
    auto428DD6AF_val = lp_protosseffect;
    if (auto428DD6AF_val == libRWDR_ge_ZergOrProtossRescueEffect_Protoss) {
        lv_text = (StringExternal("Param/Value/lib_RWDR_1BF3872F") + IntToText(lp_MasteryPoint) + StringExternal("Param/Value/lib_RWDR_DD2C7B0A"));
    }
    else if (auto428DD6AF_val == libRWDR_ge_ZergOrProtossRescueEffect_Zerg) {
        lv_text = (StringExternal("Param/Value/lib_RWDR_F5C0700A") + IntToText(lp_MasteryPoint) + StringExternal("Param/Value/lib_RWDR_F7E96F30"));
    }
    else {
    }
    TextTagCreate(lv_text, 24, lp_Location, 2.5, true, false, PlayerGroupSingle(lp_player));
    autoF1B11728_val = lp_protosseffect;
    if (autoF1B11728_val == libRWDR_ge_ZergOrProtossRescueEffect_Protoss) {
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 50.20, 100.00));
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.0);
        SoundPlay(SoundLink("UI_ResourcePickup", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoF1B11728_val == libRWDR_ge_ZergOrProtossRescueEffect_Zerg) {
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 50.20, 0.00));
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.0);
        SoundPlay(SoundLink("UI_ResourcePickup", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else {
    }
}

void libRWDR_gf_HandleTolarisDeath (int lp_player, point lp_point, unit lp_targetUnit) {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(libRWDR_gt_ToarisGainXP, false);
    libRWDR_gv_tolarisisDead = true;
    libRWDR_gv_tolarisRevivePlayer = lp_player;
    libRWDR_gv_tolarisUnit = lp_targetUnit;
    libNtve_gf_PlayerRemoveCooldown(lp_player, "Abil/TolarisRevive");
    Wait(2.0, c_timeGame);
    if ((UnitIsAlive(lp_targetUnit) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TolarisReviveBeacon", 0, lp_player, lp_point);
        libRWDR_gv_tolarisCocoon = UnitLastCreated();
        UnitSetState(libRWDR_gv_tolarisCocoon, c_unitStateTooltipable, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_RWDR_D68D7E41"));
        libNtve_gf_PlayerRemoveCooldown(lp_player, "Abil/TolarisRevive");
        PlayerAddCooldown(lp_player, "Abil/TolarisRevive", 60.0);
        TriggerEnable(libRWDR_gt_TolarisReviveUpdate, true);
        Wait(7.0, c_timeGame);
        if ((UnitIsAlive(lp_targetUnit) == false)) {
            UnitSetPosition(lp_targetUnit, lp_point, false);
        }

    }

}

void libRWDR_gf_HandleDelanarDeath (int lp_player, point lp_point, unit lp_targetUnit) {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(libRWDR_gt_DelanarGainXP, false);
    libRWDR_gv_delanarisDead = true;
    libRWDR_gv_delanarRevivePlayer = lp_player;
    libRWDR_gv_delanarUnit = lp_targetUnit;
    libNtve_gf_PlayerRemoveCooldown(lp_player, "Abil/DelanarRevive");
    Wait(2.0, c_timeGame);
    if ((UnitIsAlive(lp_targetUnit) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DelanarReviving", 0, lp_player, lp_point);
        libRWDR_gv_delanarCocoon = UnitLastCreated();
        UnitSetState(libRWDR_gv_delanarCocoon, c_unitStateTooltipable, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_RWDR_8303400D"));
        libNtve_gf_PlayerRemoveCooldown(lp_player, "Abil/DelanarRevive");
        PlayerAddCooldown(lp_player, "Abil/DelanarRevive", 60.0);
        TriggerEnable(libRWDR_gt_DelanarReviveUpdate, true);
        Wait(7.0, c_timeGame);
        if ((UnitIsAlive(lp_targetUnit) == false)) {
            UnitSetPosition(lp_targetUnit, lp_point, false);
        }

    }

}

void libRWDR_gf_HandleByronDeath (int lp_player, point lp_point, unit lp_targetUnit) {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(libRWDR_gt_ByronGainXP, false);
    libRWDR_gv_byronisDead = true;
    libRWDR_gv_byronRevivePlayer = lp_player;
    libRWDR_gv_byronUnit = lp_targetUnit;
    libNtve_gf_PlayerRemoveCooldown(lp_player, "Abil/StukovRevive");
    Wait(2.0, c_timeGame);
    if ((UnitIsAlive(lp_targetUnit) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "StukovReviveCocoon", 0, lp_player, lp_point);
        libRWDR_gv_byronCocoon = UnitLastCreated();
        UnitSetState(libRWDR_gv_byronCocoon, c_unitStateTooltipable, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_RWDR_25BB5A3A"));
        libNtve_gf_PlayerRemoveCooldown(lp_player, "Abil/StukovRevive");
        PlayerAddCooldown(lp_player, "Abil/StukovRevive", 30.0);
        TriggerEnable(libRWDR_gt_ByronReviveUpdate, true);
        Wait(7.0, c_timeGame);
        if ((UnitIsAlive(lp_targetUnit) == false)) {
            UnitSetPosition(lp_targetUnit, lp_point, false);
        }

    }

}

void libRWDR_gf_HandleEledisDeath (int lp_player, point lp_point, unit lp_targetUnit) {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(libRWDR_gt_EledisGainXP, false);
    libRWDR_gv_eledisisDead = true;
    libRWDR_gv_eledisRevivePlayer = lp_player;
    libRWDR_gv_eledisUnit = lp_targetUnit;
    libNtve_gf_PlayerRemoveCooldown(lp_player, "Abil/EledisRevive");
    Wait(2.0, c_timeGame);
    if ((UnitIsAlive(lp_targetUnit) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "EledisReviveBeacon", 0, lp_player, lp_point);
        libRWDR_gv_eledisCocoon = UnitLastCreated();
        UnitSetState(libRWDR_gv_eledisCocoon, c_unitStateTooltipable, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_RWDR_D03CFCB5"));
        libNtve_gf_PlayerRemoveCooldown(lp_player, "Abil/EledisRevive");
        PlayerAddCooldown(lp_player, "Abil/EledisRevive", 30.0);
        TriggerEnable(libRWDR_gt_EledisReviveUpdate, true);
        Wait(7.0, c_timeGame);
        if ((UnitIsAlive(lp_targetUnit) == false)) {
            UnitSetPosition(lp_targetUnit, lp_point, false);
        }

    }

}

text libRWDR_gf_MissionName (int lp_mission) {
    // Automatic Variable Declarations
    int autoA3D3E307_val;

    // Implementation
    autoA3D3E307_val = lp_mission;
    if (autoA3D3E307_val == 1) {
        return StringExternal("Param/Value/lib_RWDR_B8B010D5");
    }
    else if (autoA3D3E307_val == 2) {
        return StringExternal("Param/Value/lib_RWDR_12787785");
    }
    else if (autoA3D3E307_val == 3) {
        return StringExternal("Param/Value/lib_RWDR_ED95DAD8");
    }
    else if (autoA3D3E307_val == 4) {
        return StringExternal("Param/Value/lib_RWDR_B5C45008");
    }
    else if (autoA3D3E307_val == 5) {
        return StringExternal("Param/Value/lib_RWDR_F354B37D");
    }
    else if (autoA3D3E307_val == 6) {
        return StringExternal("Param/Value/lib_RWDR_DB7E646C");
    }
    else if (autoA3D3E307_val == 7) {
        return StringExternal("Param/Value/lib_RWDR_DE442F00");
    }
    else if (autoA3D3E307_val == 8) {
        return StringExternal("Param/Value/lib_RWDR_E00706D5");
    }
    else if (autoA3D3E307_val == 9) {
        return StringExternal("Param/Value/lib_RWDR_63ED52BF");
    }
    else {
        return StringExternal("Param/Value/lib_RWDR_7DEAA374");
    }
}

text libRWDR_gf_ZMissionName (int lp_mission) {
    // Automatic Variable Declarations
    int auto3716DC0A_val;

    // Implementation
    auto3716DC0A_val = lp_mission;
    if (auto3716DC0A_val == 1) {
        return StringExternal("Param/Value/lib_RWDR_A7D1935F");
    }
    else if (auto3716DC0A_val == 2) {
        return StringExternal("Param/Value/lib_RWDR_C00DD1E6");
    }
    else if (auto3716DC0A_val == 3) {
        return StringExternal("Param/Value/lib_RWDR_4B69936D");
    }
    else if (auto3716DC0A_val == 4) {
        return StringExternal("Param/Value/lib_RWDR_286272C9");
    }
    else if (auto3716DC0A_val == 5) {
        return StringExternal("Param/Value/lib_RWDR_60C564FB");
    }
    else if (auto3716DC0A_val == 6) {
        return StringExternal("Param/Value/lib_RWDR_B86705DF");
    }
    else if (auto3716DC0A_val == 7) {
        return StringExternal("Param/Value/lib_RWDR_0233254C");
    }
    else if (auto3716DC0A_val == 8) {
        return StringExternal("Param/Value/lib_RWDR_B5B105F5");
    }
    else if (auto3716DC0A_val == 9) {
        return StringExternal("Param/Value/lib_RWDR_644CAC98");
    }
    else if (auto3716DC0A_val == 10) {
        return StringExternal("Param/Value/lib_RWDR_EFC9F684");
    }
    else {
        return StringExternal("Param/Value/lib_RWDR_C0FE269F");
    }
}

string libRWDR_gf_SOTPLoadingScreen (int lp_mission) {
    // Automatic Variable Declarations
    int auto694B099F_val;

    // Implementation
    auto694B099F_val = lp_mission;
    if (auto694B099F_val == 1) {
        return "Assets\\Textures\\ui_hots_loading_missionselect_zlab02.dds";
    }
    else if (auto694B099F_val == 2) {
        return "Assets\\Textures\\ui_hots_loading_missionselect_zlab02.dds";
    }
    else if (auto694B099F_val == 3) {
        return "Assets\\Textures\\ui_hots_loading_missionselect_zlab03.dds";
    }
    else if (auto694B099F_val == 4) {
        return "Assets\\Textures\\ui_hots_loading_missionselect_zlab03.dds";
    }
    else if (auto694B099F_val == 5) {
        return "Assets\\Textures\\ui_hots_loading_missionselect_zexpedition01.dds";
    }
    else if (auto694B099F_val == 6) {
        return "Assets\\Textures\\ui_hots_loading_missionselect_zexpedition01.dds";
    }
    else if (auto694B099F_val == 7) {
        return "Assets\\Textures\\ui_void_loading_aiur06.dds";
    }
    else if (auto694B099F_val == 8) {
        return "Assets\\Textures\\ui_void_loading_taldarim01.dds";
    }
    else if (auto694B099F_val == 9) {
        return "Assets\\Textures\\ui_void_loading_taldarim01.dds";
    }
    else if (auto694B099F_val == 10) {
        return "Assets\\Textures\\ui_void_loading_taldarim01.dds";
    }
    else {
        return "Assets\\Textures\\ui_hots_loading_missionselect_zlab03.dds";
    }
}

text libRWDR_gf_DifficultyDisplay () {
    // Automatic Variable Declarations
    int auto58483574_val;

    // Implementation
    auto58483574_val = libRWDR_gv_difficultySelect;
    if (auto58483574_val == 1) {
        return libRWDR_gv_briefDefault.lv_easy_Clean;
    }
    else if (auto58483574_val == 2) {
        return libRWDR_gv_briefDefault.lv_normal_Clean;
    }
    else if (auto58483574_val == 3) {
        return libRWDR_gv_briefDefault.lv_hard_Clean;
    }
    else {
        return libRWDR_gv_briefDefault.lv_normal_Clean;
    }
}

text libRWDR_gf_FactionSelect79 () {
    // Automatic Variable Declarations
    int auto7E2AED66_val;

    // Implementation
    auto7E2AED66_val = libRWDR_gv_factionSelect;
    if (auto7E2AED66_val == 1) {
        return StringExternal("Param/Value/lib_RWDR_BD4128BC");
    }
    else if (auto7E2AED66_val == 2) {
        return StringExternal("Param/Value/lib_RWDR_EBA9D17E");
    }
    else {
        return StringExternal("Param/Value/lib_RWDR_D18F32ED");
    }
}

text libRWDR_gf_HeroSelect7 () {
    // Automatic Variable Declarations
    int autoC37A5AD3_val;

    // Implementation
    autoC37A5AD3_val = libRWDR_gv_factionSelect;
    if (autoC37A5AD3_val == 1) {
        return StringExternal("Param/Value/lib_RWDR_33D7F8DA");
    }
    else if (autoC37A5AD3_val == 2) {
        return StringExternal("Param/Value/lib_RWDR_C4673BB0");
    }
    else {
        return StringExternal("Param/Value/lib_RWDR_9B2E0211");
    }
}

int libRWDR_gf_HeroSelect7Level () {
    // Automatic Variable Declarations
    int auto07CC67DF_val;

    // Implementation
    auto07CC67DF_val = libRWDR_gv_factionSelect;
    if (auto07CC67DF_val == 1) {
        return libRWDR_gv_tolarisLevel;
    }
    else if (auto07CC67DF_val == 2) {
        return libRWDR_gv_delanarLevel;
    }
    else {
        return libRWDR_gv_tolarisLevel;
    }
}

text libRWDR_gf_TrueFalseText (bool lp_variable) {
    // Automatic Variable Declarations
    bool auto64CB4384_val;

    // Implementation
    auto64CB4384_val = lp_variable;
    if (auto64CB4384_val == true) {
        return StringExternal("Param/Value/lib_RWDR_957EAC11");
    }
    else if (auto64CB4384_val == false) {
        return StringExternal("Param/Value/lib_RWDR_3CB13AB3");
    }
    else {
        return StringExternal("Param/Value/lib_RWDR_06C1EAD9");
    }
}

void libRWDR_gf_SOTPExtraPanel (int lp_mission) {
    // Automatic Variable Declarations
    int auto9A145F15_val;

    // Implementation
    auto9A145F15_val = lp_mission;
    if (auto9A145F15_val == 1) {
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardTitle[3], StringExternal("Param/Value/lib_RWDR_D463CCE4"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[3], (IntToText(libRWDR_gv_stats_ExraCount) + StringExternal("Param/Value/lib_RWDR_4E8B88A4")), PlayerGroupAll());
    }
    else if (auto9A145F15_val == 2) {
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardTitle[3], StringExternal("Param/Value/lib_RWDR_50DF159D"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[3], (IntToText(libRWDR_gv_stats_ExraCount) + StringExternal("Param/Value/lib_RWDR_70C237B9")), PlayerGroupAll());
    }
    else if (auto9A145F15_val == 3) {
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardTitle[3], StringExternal("Param/Value/lib_RWDR_8BC301A2"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[3], libRWDR_gf_TrueFalseText(libRWDR_gv_purifierTechDisabled), PlayerGroupAll());
    }
    else if (auto9A145F15_val == 5) {
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardTitle[3], StringExternal("Param/Value/lib_RWDR_1F5095B9"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[3], (IntToText(libRWDR_gv_stats_ExraCount) + StringExternal("Param/Value/lib_RWDR_E652E38B")), PlayerGroupAll());
    }
    else if (auto9A145F15_val == 7) {
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardTitle[3], StringExternal("Param/Value/lib_RWDR_F21F6EF9"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[3], libRWDR_gf_TrueFalseText(libRWDR_gv_secretFound), PlayerGroupAll());
    }
    else if (auto9A145F15_val == 9) {
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardTitle[3], StringExternal("Param/Value/lib_RWDR_8C803DBA"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[3], (IntToText(libRWDR_gv_stats_ExraCount) + StringExternal("Param/Value/lib_RWDR_1FB0A5DA")), PlayerGroupAll());
    }
    else if (auto9A145F15_val == 10) {
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardTitle[3], StringExternal("Param/Value/lib_RWDR_49741EA0"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_rewardText[3], (IntToText(libRWDR_gv_stats_ExraCount) + StringExternal("Param/Value/lib_RWDR_883AC0B8")), PlayerGroupAll());
    }
    else {
        DialogControlSetVisible(libRWDR_gv_scoreScreenPanel.lv_rewardPanel[3], PlayerGroupAll(), false);
    }
}

void libRWDR_gf_MissionTimeCount (bool lp_startStop) {
    // Automatic Variable Declarations
    bool auto6E24BFC2_val;

    // Implementation
    auto6E24BFC2_val = lp_startStop;
    if (auto6E24BFC2_val == true) {
        TriggerExecute(libRWDR_gt_MissionTimeTrig, true, false);
    }
    else if (auto6E24BFC2_val == false) {
        TriggerStop(libRWDR_gt_MissionTimeTrig);
    }
    else {
    }
}

void libRWDR_gf_ShowRWDAchievementIcon (string lp_achievement, int lp_mission, int lp_index, int lp_beginEnd) {
    // Variable Declarations
    string lv_icon;
    text lv_text;

    // Automatic Variable Declarations
    bool auto5599F4C3_val;

    // Variable Initialization
    lv_icon = "Assets\\Textures\\btn-commander-artanis.dds";

    // Implementation
    lv_text = (StringExternal("Param/Value/lib_RWDR_3940F51B") + UserDataGetText("TDS_Achievement", lp_achievement, "Name", 1) + StringExternal("Param/Value/lib_RWDR_21D2BA5E") + StringExternal("Param/Value/lib_RWDR_3D76E32A") + UserDataGetText("TDS_Achievement", lp_achievement, "Description", 1) + StringExternal("Param/Value/lib_RWDR_03BDB7CE"));
    auto5599F4C3_val = libRWDR_gv_rWD_AchievementAwarded[lp_mission][lp_index];
    if (auto5599F4C3_val == true) {
        lv_icon = UserDataGetImagePath("TDS_Achievement", lp_achievement, "Icon", 1);
    }
    else if (auto5599F4C3_val == false) {
        lv_icon = UserDataGetImagePath("TDS_Achievement", lp_achievement, "IconBlack", 1);
    }
    else {
    }
    if ((lp_beginEnd == libRWDR_ge_BeginEnd_End)) {
        libNtve_gf_SetDialogItemImage(libRWDR_gv_scoreScreenPanel.lv_achievementIcon[lp_index], lv_icon, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libRWDR_gv_scoreScreenPanel.lv_achievementTooltipIcon[lp_index], lv_icon, PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_achievementTooltipName[lp_index], UserDataGetText("TDS_Achievement", lp_achievement, "Name", 1), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_achievementTooltipDescription[lp_index], UserDataGetText("TDS_Achievement", lp_achievement, "Description", 1), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_achievementTooltipPoints[lp_index], IntToText(UserDataGetInt("TDS_Achievement", lp_achievement, "Points", 1)), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemTooltip(libRWDR_gv_scoreScreenPanel.lv_miniAchievementPanel[lp_index], lv_text, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libRWDR_gv_scoreScreenPanel.lv_miniAchievementIcon[lp_index], lv_icon, PlayerGroupAll());
    }
}

void libRWDR_gf_ShowSOTPAchievementIcon (string lp_achievement, int lp_mission, int lp_index, int lp_beginEnd) {
    // Variable Declarations
    string lv_icon;
    text lv_text;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_icon = "Assets\\Textures\\btn-commander-artanis.dds";

    // Implementation
    lv_text = (StringExternal("Param/Value/lib_RWDR_767E2DC5") + UserDataGetText("TDS_Achievement", lp_achievement, "Name", 1) + StringExternal("Param/Value/lib_RWDR_FE19410C") + StringExternal("Param/Value/lib_RWDR_116690C7") + UserDataGetText("TDS_Achievement", lp_achievement, "Description", 1) + StringExternal("Param/Value/lib_RWDR_B252D461"));
    lv_icon = UserDataGetImagePath("TDS_Achievement", lp_achievement, "Icon", 1);
    if ((lp_beginEnd == libRWDR_ge_BeginEnd_End)) {
        libNtve_gf_SetDialogItemImage(libRWDR_gv_scoreScreenPanel.lv_achievementIcon[lp_index], lv_icon, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libRWDR_gv_scoreScreenPanel.lv_achievementTooltipIcon[lp_index], lv_icon, PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_achievementTooltipName[lp_index], UserDataGetText("TDS_Achievement", lp_achievement, "Name", 1), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_achievementTooltipDescription[lp_index], UserDataGetText("TDS_Achievement", lp_achievement, "Description", 1), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libRWDR_gv_scoreScreenPanel.lv_achievementTooltipPoints[lp_index], IntToText(UserDataGetInt("TDS_Achievement", lp_achievement, "Points", 1)), PlayerGroupAll());
        if ((libRWDR_gv_sOTP_AchievementAwarded[lp_mission][lp_index] == false)) {
            DialogControlSetEnabled(libRWDR_gv_scoreScreenPanel.lv_achievementIcon[lp_index], PlayerGroupAll(), false);
            DialogControlSetEnabled(libRWDR_gv_scoreScreenPanel.lv_achievementTooltipIcon[lp_index], PlayerGroupAll(), false);
        }

    }
    else {
        libNtve_gf_SetDialogItemTooltip(libRWDR_gv_scoreScreenPanel.lv_miniAchievementPanel[lp_index], lv_text, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libRWDR_gv_scoreScreenPanel.lv_miniAchievementIcon[lp_index], lv_icon, PlayerGroupAll());
        if ((libRWDR_gv_sOTP_AchievementAwarded[lp_mission][lp_index] == false)) {
            DialogControlSetEnabled(libRWDR_gv_scoreScreenPanel.lv_miniAchievementIcon[lp_index], PlayerGroupAll(), false);
        }

    }
}

void libRWDR_gf_DisplayRWDScorescreenAchi (int lp_mission) {
    // Automatic Variable Declarations
    int autoE8F5581D_val;

    // Implementation
    autoE8F5581D_val = lp_mission;
    if (autoE8F5581D_val == 1) {
        libRWDR_gf_ShowRWDAchievementIcon("P1-1 新人登场", lp_mission, 1, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowRWDAchievementIcon("P1-2 忠诚卫士", lp_mission, 2, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowRWDAchievementIcon("P1-3 希望之花", lp_mission, 3, libRWDR_ge_BeginEnd_End);
    }
    else if (autoE8F5581D_val == 2) {
        libRWDR_gf_ShowRWDAchievementIcon("P2-1 嘿，这里有活......", lp_mission, 1, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowRWDAchievementIcon("P2-2 精准伏击", lp_mission, 2, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowRWDAchievementIcon("P2-3 先发制人", lp_mission, 3, libRWDR_ge_BeginEnd_End);
    }
    else if (autoE8F5581D_val == 3) {
        libRWDR_gf_ShowRWDAchievementIcon("P3-1 腾讯科技", lp_mission, 1, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowRWDAchievementIcon("P3-2 暮光之刃", lp_mission, 2, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowRWDAchievementIcon("P3-3 侦察机", lp_mission, 3, libRWDR_ge_BeginEnd_End);
    }
    else if (autoE8F5581D_val == 4) {
        libRWDR_gf_ShowRWDAchievementIcon("P4-1 纵火狂", lp_mission, 1, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowRWDAchievementIcon("P4-2 冷却塔", lp_mission, 2, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowRWDAchievementIcon("P4-3 记忆圣堂", lp_mission, 3, libRWDR_ge_BeginEnd_End);
    }
    else if (autoE8F5581D_val == 5) {
        libRWDR_gf_ShowRWDAchievementIcon("P5-1 操纵者", lp_mission, 1, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowRWDAchievementIcon("P5-2 全员出动", lp_mission, 2, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowRWDAchievementIcon("P5-3 石像", lp_mission, 3, libRWDR_ge_BeginEnd_End);
    }
    else if (autoE8F5581D_val == 6) {
        libRWDR_gf_ShowRWDAchievementIcon("P6-1 操纵时间", lp_mission, 1, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowRWDAchievementIcon("P6-2 暮色百合", lp_mission, 2, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowRWDAchievementIcon("P6-3 招募", lp_mission, 3, libRWDR_ge_BeginEnd_End);
    }
    else if (autoE8F5581D_val == 7) {
        libRWDR_gf_ShowRWDAchievementIcon("P7-1 双阵营", lp_mission, 1, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowRWDAchievementIcon("P7-2 净化邪恶", lp_mission, 2, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowRWDAchievementIcon("P7-3 速战速决", lp_mission, 3, libRWDR_ge_BeginEnd_End);
    }
    else if (autoE8F5581D_val == 8) {
        libRWDR_gf_ShowRWDAchievementIcon("P8-1 圣辉碎片", lp_mission, 1, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowRWDAchievementIcon("P8-2 灵魂之力", lp_mission, 2, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowRWDAchievementIcon("P8-3 谨慎集结", lp_mission, 3, libRWDR_ge_BeginEnd_End);
    }
    else if (autoE8F5581D_val == 9) {
        libRWDR_gf_ShowRWDAchievementIcon("P9-1 星灵战略家", lp_mission, 1, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowRWDAchievementIcon("P9-2 异虫猎手", lp_mission, 2, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowRWDAchievementIcon("P9-3 完美防御", lp_mission, 3, libRWDR_ge_BeginEnd_End);
    }
    else {
    }
    TriggerEnable(libRWDR_gt_ShowScorescreenAchiTooltip, true);
    TriggerEnable(libRWDR_gt_HideScorescreenAchiTooltip, true);
}

void libRWDR_gf_DisplaySOTPScorescreenAchi (int lp_mission) {
    // Automatic Variable Declarations
    int auto0A2D58E9_val;

    // Implementation
    auto0A2D58E9_val = lp_mission;
    if (auto0A2D58E9_val == 1) {
        libRWDR_gf_ShowSOTPAchievementIcon("Z1-1 爱兵如子", lp_mission, 1, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowSOTPAchievementIcon("Z1-2 巨人杀手", lp_mission, 2, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowSOTPAchievementIcon("Z1-3 灯火通明", lp_mission, 3, libRWDR_ge_BeginEnd_End);
    }
    else if (auto0A2D58E9_val == 2) {
        libRWDR_gf_ShowSOTPAchievementIcon("Z2-1 快速扩张", lp_mission, 1, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowSOTPAchievementIcon("Z2-2 深度冻结", lp_mission, 2, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowSOTPAchievementIcon("Z2-3 心灵终结", lp_mission, 3, libRWDR_ge_BeginEnd_End);
    }
    else if (auto0A2D58E9_val == 3) {
        libRWDR_gf_ShowSOTPAchievementIcon("Z3-1 艾迪昂屠夫", lp_mission, 1, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowSOTPAchievementIcon("Z3-2 英雄不朽", lp_mission, 2, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowSOTPAchievementIcon("Z3-3 制空霸权", lp_mission, 3, libRWDR_ge_BeginEnd_End);
    }
    else if (auto0A2D58E9_val == 4) {
        libRWDR_gf_ShowSOTPAchievementIcon("Z4-1 暗影精华", lp_mission, 1, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowSOTPAchievementIcon("Z4-2 晶体矿", lp_mission, 2, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowSOTPAchievementIcon("Z4-3 建筑损失", lp_mission, 3, libRWDR_ge_BeginEnd_End);
    }
    else if (auto0A2D58E9_val == 5) {
        libRWDR_gf_ShowSOTPAchievementIcon("Z5-1 亡者大军", lp_mission, 1, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowSOTPAchievementIcon("Z5-2 凛冬已至", lp_mission, 2, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowSOTPAchievementIcon("Z5-3 终极造物", lp_mission, 3, libRWDR_ge_BeginEnd_End);
    }
    else if (auto0A2D58E9_val == 6) {
        libRWDR_gf_ShowSOTPAchievementIcon("Z6-1 红尘滚滚", lp_mission, 1, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowSOTPAchievementIcon("Z6-2 先发制人", lp_mission, 2, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowSOTPAchievementIcon("Z6-3 战争精英", lp_mission, 3, libRWDR_ge_BeginEnd_End);
    }
    else if (auto0A2D58E9_val == 7) {
        libRWDR_gf_ShowSOTPAchievementIcon("Z7-1 扶老携幼", lp_mission, 1, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowSOTPAchievementIcon("Z7-2 熄灭圣光", lp_mission, 2, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowSOTPAchievementIcon("Z7-3 真理之盾", lp_mission, 3, libRWDR_ge_BeginEnd_End);
    }
    else if (auto0A2D58E9_val == 8) {
        libRWDR_gf_ShowSOTPAchievementIcon("Z8-1 毁灭者", lp_mission, 1, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowSOTPAchievementIcon("Z8-2 大和", lp_mission, 2, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowSOTPAchievementIcon("Z8-3 巴利俄斯", lp_mission, 3, libRWDR_ge_BeginEnd_End);
    }
    else if (auto0A2D58E9_val == 9) {
        libRWDR_gf_ShowSOTPAchievementIcon("Z9-1 左膀右臂", lp_mission, 1, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowSOTPAchievementIcon("Z9-2 来去自如", lp_mission, 2, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowSOTPAchievementIcon("Z9-3 此路不通", lp_mission, 3, libRWDR_ge_BeginEnd_End);
    }
    else if (auto0A2D58E9_val == 10) {
        libRWDR_gf_ShowSOTPAchievementIcon("Z10-1 烦恼之风", lp_mission, 1, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowSOTPAchievementIcon("Z10-2 怜悯之心", lp_mission, 2, libRWDR_ge_BeginEnd_End);
        libRWDR_gf_ShowSOTPAchievementIcon("Z10-3 渎神猎手", lp_mission, 3, libRWDR_ge_BeginEnd_End);
    }
    else {
    }
    TriggerEnable(libRWDR_gt_ShowScorescreenAchiTooltip, true);
    TriggerEnable(libRWDR_gt_HideScorescreenAchiTooltip, true);
}

void libRWDR_gf_DisplayRWDBriefAchi (int lp_mission) {
    // Automatic Variable Declarations
    int autoE76903AC_val;

    // Implementation
    autoE76903AC_val = lp_mission;
    if (autoE76903AC_val == 1) {
        libRWDR_gf_ShowRWDAchievementIcon("P1-1 新人登场", lp_mission, 1, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowRWDAchievementIcon("P1-2 忠诚卫士", lp_mission, 2, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowRWDAchievementIcon("P1-3 希望之花", lp_mission, 3, libRWDR_ge_BeginEnd_Begin);
    }
    else if (autoE76903AC_val == 2) {
        libRWDR_gf_ShowRWDAchievementIcon("P2-1 嘿，这里有活......", lp_mission, 1, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowRWDAchievementIcon("P2-2 精准伏击", lp_mission, 2, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowRWDAchievementIcon("P2-3 先发制人", lp_mission, 3, libRWDR_ge_BeginEnd_Begin);
    }
    else if (autoE76903AC_val == 3) {
        libRWDR_gf_ShowRWDAchievementIcon("P3-1 腾讯科技", lp_mission, 1, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowRWDAchievementIcon("P3-2 暮光之刃", lp_mission, 2, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowRWDAchievementIcon("P3-3 侦察机", lp_mission, 3, libRWDR_ge_BeginEnd_Begin);
    }
    else if (autoE76903AC_val == 4) {
        libRWDR_gf_ShowRWDAchievementIcon("P4-1 纵火狂", lp_mission, 1, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowRWDAchievementIcon("P4-2 冷却塔", lp_mission, 2, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowRWDAchievementIcon("P4-3 记忆圣堂", lp_mission, 3, libRWDR_ge_BeginEnd_Begin);
    }
    else if (autoE76903AC_val == 5) {
        libRWDR_gf_ShowRWDAchievementIcon("P5-1 操纵者", lp_mission, 1, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowRWDAchievementIcon("P5-2 全员出动", lp_mission, 2, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowRWDAchievementIcon("P5-3 石像", lp_mission, 3, libRWDR_ge_BeginEnd_Begin);
    }
    else if (autoE76903AC_val == 6) {
        libRWDR_gf_ShowRWDAchievementIcon("P6-1 操纵时间", lp_mission, 1, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowRWDAchievementIcon("P6-2 暮色百合", lp_mission, 2, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowRWDAchievementIcon("P6-3 招募", lp_mission, 3, libRWDR_ge_BeginEnd_Begin);
    }
    else if (autoE76903AC_val == 7) {
        libRWDR_gf_ShowRWDAchievementIcon("P7-1 双阵营", lp_mission, 1, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowRWDAchievementIcon("P7-2 净化邪恶", lp_mission, 2, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowRWDAchievementIcon("P7-3 速战速决", lp_mission, 3, libRWDR_ge_BeginEnd_Begin);
    }
    else if (autoE76903AC_val == 8) {
        libRWDR_gf_ShowRWDAchievementIcon("P8-1 圣辉碎片", lp_mission, 1, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowRWDAchievementIcon("P8-2 灵魂之力", lp_mission, 2, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowRWDAchievementIcon("P8-3 谨慎集结", lp_mission, 3, libRWDR_ge_BeginEnd_Begin);
    }
    else if (autoE76903AC_val == 9) {
        libRWDR_gf_ShowRWDAchievementIcon("P9-1 星灵战略家", lp_mission, 1, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowRWDAchievementIcon("P9-2 异虫猎手", lp_mission, 2, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowRWDAchievementIcon("P9-3 完美防御", lp_mission, 3, libRWDR_ge_BeginEnd_Begin);
    }
    else {
    }
}

void libRWDR_gf_DisplaySOTPBriefAchi (int lp_mission) {
    // Automatic Variable Declarations
    int auto713E1402_val;

    // Implementation
    auto713E1402_val = lp_mission;
    if (auto713E1402_val == 1) {
        libRWDR_gf_ShowSOTPAchievementIcon("Z1-1 爱兵如子", lp_mission, 1, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowSOTPAchievementIcon("Z1-2 巨人杀手", lp_mission, 2, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowSOTPAchievementIcon("Z1-3 灯火通明", lp_mission, 3, libRWDR_ge_BeginEnd_Begin);
    }
    else if (auto713E1402_val == 2) {
        libRWDR_gf_ShowSOTPAchievementIcon("Z2-1 快速扩张", lp_mission, 1, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowSOTPAchievementIcon("Z2-2 深度冻结", lp_mission, 2, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowSOTPAchievementIcon("Z2-3 心灵终结", lp_mission, 3, libRWDR_ge_BeginEnd_Begin);
    }
    else if (auto713E1402_val == 3) {
        libRWDR_gf_ShowSOTPAchievementIcon("Z3-1 艾迪昂屠夫", lp_mission, 1, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowSOTPAchievementIcon("Z3-2 英雄不朽", lp_mission, 2, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowSOTPAchievementIcon("Z3-3 制空霸权", lp_mission, 3, libRWDR_ge_BeginEnd_Begin);
    }
    else if (auto713E1402_val == 4) {
        libRWDR_gf_ShowSOTPAchievementIcon("Z4-1 暗影精华", lp_mission, 1, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowSOTPAchievementIcon("Z4-2 晶体矿", lp_mission, 2, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowSOTPAchievementIcon("Z4-3 建筑损失", lp_mission, 3, libRWDR_ge_BeginEnd_Begin);
    }
    else if (auto713E1402_val == 5) {
        libRWDR_gf_ShowSOTPAchievementIcon("Z5-1 亡者大军", lp_mission, 1, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowSOTPAchievementIcon("Z5-2 凛冬已至", lp_mission, 2, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowSOTPAchievementIcon("Z5-3 终极造物", lp_mission, 3, libRWDR_ge_BeginEnd_Begin);
    }
    else if (auto713E1402_val == 6) {
        libRWDR_gf_ShowSOTPAchievementIcon("Z6-1 红尘滚滚", lp_mission, 1, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowSOTPAchievementIcon("Z6-2 先发制人", lp_mission, 2, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowSOTPAchievementIcon("Z6-3 战争精英", lp_mission, 3, libRWDR_ge_BeginEnd_Begin);
    }
    else if (auto713E1402_val == 7) {
        libRWDR_gf_ShowSOTPAchievementIcon("Z7-1 扶老携幼", lp_mission, 1, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowSOTPAchievementIcon("Z7-2 熄灭圣光", lp_mission, 2, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowSOTPAchievementIcon("Z7-3 真理之盾", lp_mission, 3, libRWDR_ge_BeginEnd_Begin);
    }
    else if (auto713E1402_val == 8) {
        libRWDR_gf_ShowSOTPAchievementIcon("Z8-1 毁灭者", lp_mission, 1, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowSOTPAchievementIcon("Z8-2 大和", lp_mission, 2, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowSOTPAchievementIcon("Z8-3 巴利俄斯", lp_mission, 3, libRWDR_ge_BeginEnd_Begin);
    }
    else if (auto713E1402_val == 9) {
        libRWDR_gf_ShowSOTPAchievementIcon("Z9-1 左膀右臂", lp_mission, 1, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowSOTPAchievementIcon("Z9-2 来去自如", lp_mission, 2, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowSOTPAchievementIcon("Z9-3 此路不通", lp_mission, 3, libRWDR_ge_BeginEnd_Begin);
    }
    else if (auto713E1402_val == 10) {
        libRWDR_gf_ShowSOTPAchievementIcon("Z10-1 烦恼之风", lp_mission, 1, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowSOTPAchievementIcon("Z10-2 怜悯之心", lp_mission, 2, libRWDR_ge_BeginEnd_Begin);
        libRWDR_gf_ShowSOTPAchievementIcon("Z10-3 渎神猎手", lp_mission, 3, libRWDR_ge_BeginEnd_Begin);
    }
    else {
    }
}

void libRWDR_gf_CreateAchievementforBrief (int lp_mission, int lp_dialog) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto98BE2C7C_ae = 3;
    const int auto98BE2C7C_ai = 1;

    // Variable Initialization

    // Implementation
    DialogControlCreateFromTemplate(lp_dialog, c_triggerControlTypePanel, "TDS_GenericTemplates/RWD_MiniAchievementFrame");
    libRWDR_gv_scoreScreenPanel.lv_miniAchievementHolder = DialogControlLastCreated();
    lv_index = 1;
    for ( ; ( (auto98BE2C7C_ai >= 0 && lv_index <= auto98BE2C7C_ae) || (auto98BE2C7C_ai < 0 && lv_index >= auto98BE2C7C_ae) ) ; lv_index += auto98BE2C7C_ai ) {
        DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_miniAchievementHolder, c_triggerControlTypePanel, "Achievement" + IntToString(lv_index));
        libRWDR_gv_scoreScreenPanel.lv_miniAchievementPanel[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_miniAchievementPanel[lv_index], c_triggerControlTypeImage, "IconImage");
        libRWDR_gv_scoreScreenPanel.lv_miniAchievementIcon[lv_index] = DialogControlLastCreated();
    }
    libRWDR_gf_DisplayRWDBriefAchi(lp_mission);
}

void libRWDR_gf_CreateAchievementforSOTPBrief (int lp_mission, int lp_dialog) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoC86D9FFC_ae = 3;
    const int autoC86D9FFC_ai = 1;

    // Variable Initialization

    // Implementation
    DialogControlCreateFromTemplate(lp_dialog, c_triggerControlTypePanel, "TDS_GenericTemplates/SOTP_MiniAchievementFrame");
    libRWDR_gv_scoreScreenPanel.lv_miniAchievementHolder = DialogControlLastCreated();
    lv_index = 1;
    for ( ; ( (autoC86D9FFC_ai >= 0 && lv_index <= autoC86D9FFC_ae) || (autoC86D9FFC_ai < 0 && lv_index >= autoC86D9FFC_ae) ) ; lv_index += autoC86D9FFC_ai ) {
        DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_miniAchievementHolder, c_triggerControlTypePanel, "Achievement" + IntToString(lv_index));
        libRWDR_gv_scoreScreenPanel.lv_miniAchievementPanel[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_scoreScreenPanel.lv_miniAchievementPanel[lv_index], c_triggerControlTypeImage, "IconImage");
        libRWDR_gv_scoreScreenPanel.lv_miniAchievementIcon[lv_index] = DialogControlLastCreated();
    }
    libRWDR_gf_DisplaySOTPBriefAchi(lp_mission);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Imitator Zerg Armor Switch
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_ImitatorZergArmorSwitch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoE6EDA9B1_val;

    // Conditions
    if (testConds) {
        if (!((libRWDR_gv_imitatorPlayer[UnitGetOwner(EventUnitProgressUnit())] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    autoE6EDA9B1_val = libNtve_gf_TriggeringProgressUpgrade();
    if (autoE6EDA9B1_val == "ZergFlyerArmorsLevel1") {
        CatalogFieldValueSet(c_gameCatalogActor, "Overlord", "UnitIcon", UnitGetOwner(EventUnitProgressUnit()), ("Assets\\Textures\\btn-upgrade-stetmann-mechaflyerplating-level1.dds"));
    }
    else if (autoE6EDA9B1_val == "ZergFlyerArmorsLevel2") {
        CatalogFieldValueSet(c_gameCatalogActor, "Overlord", "UnitIcon", UnitGetOwner(EventUnitProgressUnit()), ("Assets\\Textures\\btn-upgrade-stetmann-mechaflyerplating-level2.dds"));
    }
    else if (autoE6EDA9B1_val == "ZergFlyerArmorsLevel3") {
        CatalogFieldValueSet(c_gameCatalogActor, "Overlord", "UnitIcon", UnitGetOwner(EventUnitProgressUnit()), ("Assets\\Textures\\btn-upgrade-stetmann-mechaflyerplating-level2.dds"));
    }
    else if (autoE6EDA9B1_val == "ZergGroundArmorsLevel1") {
        CatalogFieldValueSet(c_gameCatalogActor, "Drone", "UnitIcon", UnitGetOwner(EventUnitProgressUnit()), ("Assets\\Textures\\btn-upgrade-stetmann-mechagroundplating-level1.dds"));
    }
    else if (autoE6EDA9B1_val == "ZergGroundArmorsLevel2") {
        CatalogFieldValueSet(c_gameCatalogActor, "Drone", "UnitIcon", UnitGetOwner(EventUnitProgressUnit()), ("Assets\\Textures\\btn-upgrade-stetmann-mechagroundplating-level2.dds"));
    }
    else if (autoE6EDA9B1_val == "ZergGroundArmorsLevel3") {
        CatalogFieldValueSet(c_gameCatalogActor, "Drone", "UnitIcon", UnitGetOwner(EventUnitProgressUnit()), ("Assets\\Textures\\btn-upgrade-stetmann-mechagroundplating-level3.dds"));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_ImitatorZergArmorSwitch_Init () {
    libRWDR_gt_ImitatorZergArmorSwitch = TriggerCreate("libRWDR_gt_ImitatorZergArmorSwitch_Func");
    TriggerAddEventUnitResearchProgress(libRWDR_gt_ImitatorZergArmorSwitch, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Back to Launcher Protoss
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_BacktoLauncherProtoss_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    GameSetNextMap("RWDR\\RwDR_Launcher");
    Wait(0.5, c_timeGame);
    GameOver(1, c_gameOverTie, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_BacktoLauncherProtoss_Init () {
    libRWDR_gt_BacktoLauncherProtoss = TriggerCreate("libRWDR_gt_BacktoLauncherProtoss_Func");
    TriggerEnable(libRWDR_gt_BacktoLauncherProtoss, false);
    TriggerAddEventAbortMission(libRWDR_gt_BacktoLauncherProtoss, 1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Back to Launcher Zerg
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_BacktoLauncherZerg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    GameSetNextMap("SOTP\\SotP_Launcher");
    Wait(0.5, c_timeGame);
    GameOver(1, c_gameOverTie, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_BacktoLauncherZerg_Init () {
    libRWDR_gt_BacktoLauncherZerg = TriggerCreate("libRWDR_gt_BacktoLauncherZerg_Func");
    TriggerEnable(libRWDR_gt_BacktoLauncherZerg, false);
    TriggerAddEventAbortMission(libRWDR_gt_BacktoLauncherZerg, 1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Menu On Esc
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_ShowMenuOnEsc_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIShowStandardMenu(PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_ShowMenuOnEsc_Init () {
    libRWDR_gt_ShowMenuOnEsc = TriggerCreate("libRWDR_gt_ShowMenuOnEsc_Func");
    TriggerEnable(libRWDR_gt_ShowMenuOnEsc, false);
    TriggerAddEventKeyPressed(libRWDR_gt_ShowMenuOnEsc, c_playerAny, c_keyEscape, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Achievement
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_InitAchievement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto009D1C2A_ae = 4;
    const int auto009D1C2A_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerOptionOverride(1, "simplecommandcard", "0");
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogAchievementsButton, false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/TDSAchievementFanfaresContainer");
    libRWDR_gv_achievementFanfarePanel.lv_container = DialogControlLastCreated();
    lv_index = 0;
    for ( ; ( (auto009D1C2A_ai >= 0 && lv_index <= auto009D1C2A_ae) || (auto009D1C2A_ai < 0 && lv_index >= auto009D1C2A_ae) ) ; lv_index += auto009D1C2A_ai ) {
        DialogControlHookup(libRWDR_gv_achievementFanfarePanel.lv_container, c_triggerControlTypePanel, "CenteredFrame/AchievementFrame" + IntToString(lv_index));
        libRWDR_gv_achievementFanfarePanel.lv_achievementFrames[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_achievementFanfarePanel.lv_achievementFrames[lv_index], c_triggerControlTypeLabel, "Title");
        libRWDR_gv_achievementFanfarePanel.lv_title[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_achievementFanfarePanel.lv_achievementFrames[lv_index], c_triggerControlTypeLabel, "Description");
        libRWDR_gv_achievementFanfarePanel.lv_description[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_achievementFanfarePanel.lv_achievementFrames[lv_index], c_triggerControlTypeLabel, "PointsLabel");
        libRWDR_gv_achievementFanfarePanel.lv_points[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libRWDR_gv_achievementFanfarePanel.lv_achievementFrames[lv_index], c_triggerControlTypeImage, "Icon");
        libRWDR_gv_achievementFanfarePanel.lv_icon[lv_index] = DialogControlLastCreated();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_InitAchievement_Init () {
    libRWDR_gt_InitAchievement = TriggerCreate("libRWDR_gt_InitAchievement_Func");
    TriggerAddEventMapInit(libRWDR_gt_InitAchievement);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_BossBarFocusOnTarget
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_PU_BossBarFocusOnTarget_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libRWDR_gv_pU_BB_ClickableAreaHealthBar) || (EventDialogControl() == libRWDR_gv_pU_BB_ClickableAreaNameLabel)))) {
            return false;
        }

        if (!((libRWDR_gv_pU_BB_Boss != null))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(libRWDR_gv_pU_BB_Boss, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraPan(1, UnitGetPosition(libRWDR_gv_pU_BB_Boss), 0.0, 0.0, 0.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_PU_BossBarFocusOnTarget_Init () {
    libRWDR_gt_PU_BossBarFocusOnTarget = TriggerCreate("libRWDR_gt_PU_BossBarFocusOnTarget_Func");
    TriggerEnable(libRWDR_gt_PU_BossBarFocusOnTarget, false);
    TriggerAddEventDialogControl(libRWDR_gt_PU_BossBarFocusOnTarget, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeDoubleClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_BB_BossHPChanged
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_PU_BB_BossHPChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    bool lv_bossSet;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitIsAlive(libRWDR_gv_pU_BB_Boss) == false) || (libRWDR_gv_pU_BB_Boss == null))) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    if ((libRWDR_gv_pU_BB_Boss != null)) {
        libRWDR_gf_RefreshSingularBossBarVoidCampaign();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_PU_BB_BossHPChanged_Init () {
    libRWDR_gt_PU_BB_BossHPChanged = TriggerCreate("libRWDR_gt_PU_BB_BossHPChanged_Func");
    TriggerEnable(libRWDR_gt_PU_BB_BossHPChanged, false);
    TriggerAddEventUnitProperty(libRWDR_gt_PU_BB_BossHPChanged, UnitRefFromVariable("libRWDR_gv_pU_BB_Boss"), c_unitPropLife);
    TriggerAddEventUnitProperty(libRWDR_gt_PU_BB_BossHPChanged, UnitRefFromVariable("libRWDR_gv_pU_BB_Boss"), c_unitPropShields);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_BB_LoadUpdate
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_PU_BB_LoadUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libRWDR_gf_RefreshSingularBossBarVoidCampaign();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_PU_BB_LoadUpdate_Init () {
    libRWDR_gt_PU_BB_LoadUpdate = TriggerCreate("libRWDR_gt_PU_BB_LoadUpdate_Func");
    TriggerEnable(libRWDR_gt_PU_BB_LoadUpdate, false);
    TriggerAddEventLoadGameDone(libRWDR_gt_PU_BB_LoadUpdate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TextCrawlSound
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_TextCrawlSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        SoundPlay(SoundLink("TextCrawlType", 0), PlayerGroupAll(), 100.0, 0.0);
        Wait(0.03, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_TextCrawlSound_Init () {
    libRWDR_gt_TextCrawlSound = TriggerCreate("libRWDR_gt_TextCrawlSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarm Ping Sound
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_SwarmPingSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((PlayerRace(1) == "Terr")) {
        SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(SoundLengthSync(SoundLink("UI_TerranPing", -1)), c_timeReal);
    }
    else {
        SoundPlay(SoundLink("UI_ZergWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(SoundLengthSync(SoundLink("UI_ZergWarningPing", -1)), c_timeReal);
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_SwarmPingSound_Init () {
    libRWDR_gt_SwarmPingSound = TriggerCreate("libRWDR_gt_SwarmPingSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCMR_PanelBirth
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_SCMR_PanelBirth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int auto8C7A3106_ae = 4;
    const int auto8C7A3106_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libRWDR_gv_scmr_Cutscene != c_invalidDialogControlId) && (EventCutsceneId() == CutsceneGetTriggerControl(libRWDR_gv_scmr_Cutscene))) {
        lv_buttonIndex = 1;
        for ( ; ( (auto8C7A3106_ai >= 0 && lv_buttonIndex <= auto8C7A3106_ae) || (auto8C7A3106_ai < 0 && lv_buttonIndex >= auto8C7A3106_ae) ) ; lv_buttonIndex += auto8C7A3106_ai ) {
            if ((libRWDR_gv_scmr_ButtonHighlighted[lv_buttonIndex] == true) && (libRWDR_gv_scmr_CommandButtonArrows[lv_buttonIndex] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libRWDR_gv_scmr_CommandButtonArrows[lv_buttonIndex], PlayerGroupAll(), true);
            }

        }
        if ((libRWDR_gv_scmr_EnergyLabel != c_invalidDialogControlId)) {
            DialogControlSetVisible(libRWDR_gv_scmr_EnergyLabel, PlayerGroupAll(), true);
        }

        if ((libRWDR_gv_scmr_EnergyTooltip != c_invalidDialogControlId)) {
            DialogControlSetVisible(libRWDR_gv_scmr_EnergyTooltip, PlayerGroupAll(), true);
        }

        DialogControlSetVisible(libRWDR_gv_scmr_CommandPanel, PlayerGroupAll(), true);
        libRWDR_gf_SCMR_CheckForEnergyHighlight();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_SCMR_PanelBirth_Init () {
    libRWDR_gt_SCMR_PanelBirth = TriggerCreate("libRWDR_gt_SCMR_PanelBirth_Func");
    TriggerAddEventCutsceneBookmarkFired(libRWDR_gt_SCMR_PanelBirth, c_cutsceneNone, "2DBirth");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCMR_PanelRemove
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_SCMR_PanelRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int auto2FA079C6_ae = 4;
    const int auto2FA079C6_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libRWDR_gv_scmr_Cutscene != c_invalidDialogControlId) && (EventCutsceneId() == CutsceneGetTriggerControl(libRWDR_gv_scmr_Cutscene))) {
        lv_buttonIndex = 1;
        for ( ; ( (auto2FA079C6_ai >= 0 && lv_buttonIndex <= auto2FA079C6_ae) || (auto2FA079C6_ai < 0 && lv_buttonIndex >= auto2FA079C6_ae) ) ; lv_buttonIndex += auto2FA079C6_ai ) {
            if ((libRWDR_gv_scmr_CommandButtonArrows[lv_buttonIndex] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libRWDR_gv_scmr_CommandButtonArrows[lv_buttonIndex], PlayerGroupAll(), false);
            }

        }
        DialogControlSetVisible(libRWDR_gv_scmr_CommandPanel, PlayerGroupAll(), false);
        if ((libRWDR_gv_scmr_EnergyLabel != c_invalidDialogControlId)) {
            DialogControlSetVisible(libRWDR_gv_scmr_EnergyLabel, PlayerGroupAll(), false);
        }

        if ((libRWDR_gv_scmr_EnergyTooltip != c_invalidDialogControlId)) {
            DialogControlSetVisible(libRWDR_gv_scmr_EnergyTooltip, PlayerGroupAll(), false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_SCMR_PanelRemove_Init () {
    libRWDR_gt_SCMR_PanelRemove = TriggerCreate("libRWDR_gt_SCMR_PanelRemove_Func");
    TriggerAddEventCutsceneBookmarkFired(libRWDR_gt_SCMR_PanelRemove, c_cutsceneNone, "2DDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCMR_SoaVitalCharges
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_SCMR_SoaVitalCharges_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libRWDR_gf_SCMR_SoAUpdateVitals();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_SCMR_SoaVitalCharges_Init () {
    libRWDR_gt_SCMR_SoaVitalCharges = TriggerCreate("libRWDR_gt_SCMR_SoaVitalCharges_Func");
    TriggerEnable(libRWDR_gt_SCMR_SoaVitalCharges, false);
    TriggerAddEventUnitProperty(libRWDR_gt_SCMR_SoaVitalCharges, UnitRefFromVariable("libRWDR_gv_scmr_PanelUnit"), c_unitPropEnergy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_TimerWindowFlash
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_PU_TimerWindowFlash_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSendAnimationEvent(libRWDR_gv_scmr_TimerWindowHighlightFrame, PlayerGroupAll(), "Highlight");
    Wait(libRWDR_gv_sCMR_TimerWindowHighlightDuration, c_timeReal);
    DialogControlSendAnimationEvent(libRWDR_gv_scmr_TimerWindowHighlightFrame, PlayerGroupAll(), "HighlightStop");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_PU_TimerWindowFlash_Init () {
    libRWDR_gt_PU_TimerWindowFlash = TriggerCreate("libRWDR_gt_PU_TimerWindowFlash_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_TimerWindowThresholdCrossed
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_PU_TimerWindowThresholdCrossed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(libRWDR_gv_sCMR_TimerWindowTimer) <= libRWDR_gv_sCMR_TimerWindowDangerThreshold) && (libRWDR_gv_sCMR_TimerWindowInDanger == false)) {
        libRWDR_gv_sCMR_TimerWindowInDanger = true;
        DialogControlSendAnimationEvent(libRWDR_gv_scmr_TimerWindowHighlightFrame, PlayerGroupAll(), "Danger");
    }
    else if ((TimerGetRemaining(libRWDR_gv_sCMR_TimerWindowTimer) > libRWDR_gv_sCMR_TimerWindowDangerThreshold) && (libRWDR_gv_sCMR_TimerWindowInDanger == true)) {
        libRWDR_gv_sCMR_TimerWindowInDanger = false;
        DialogControlSendAnimationEvent(libRWDR_gv_scmr_TimerWindowHighlightFrame, PlayerGroupAll(), "DangerStop");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_PU_TimerWindowThresholdCrossed_Init () {
    libRWDR_gt_PU_TimerWindowThresholdCrossed = TriggerCreate("libRWDR_gt_PU_TimerWindowThresholdCrossed_Func");
    TriggerEnable(libRWDR_gt_PU_TimerWindowThresholdCrossed, false);
    TriggerAddEventTimePeriodic(libRWDR_gt_PU_TimerWindowThresholdCrossed, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PU_TimerWindowLoadUpdate
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_PU_TimerWindowLoadUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libRWDR_gv_sCMR_TimerWindowInDanger = false;
    TriggerExecute(libRWDR_gt_PU_TimerWindowThresholdCrossed, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_PU_TimerWindowLoadUpdate_Init () {
    libRWDR_gt_PU_TimerWindowLoadUpdate = TriggerCreate("libRWDR_gt_PU_TimerWindowLoadUpdate_Func");
    TriggerEnable(libRWDR_gt_PU_TimerWindowLoadUpdate, false);
    TriggerAddEventLoadGameDone(libRWDR_gt_PU_TimerWindowLoadUpdate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCMR_??????????????????
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_scmr_HeroDebugSetWidth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libRWDR_gv_SCMR_HEROUIBARWIDTH = StringToInt(StringWord(EventChatMessage(false), 2));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_scmr_HeroDebugSetWidth_Init () {
    libRWDR_gt_scmr_HeroDebugSetWidth = TriggerCreate("libRWDR_gt_scmr_HeroDebugSetWidth_Func");
    TriggerAddEventChatMessage(libRWDR_gt_scmr_HeroDebugSetWidth, c_playerAny, "herowidth", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCMR_HeroDebugSetHeightL
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_SCMR_HeroDebugSetHeightL_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libRWDR_gv_SCMR_HEROUILIFEBARHEIGHT = StringToInt(StringWord(EventChatMessage(false), 2));
    libRWDR_gf_SCMR_UpdateHeroPanel(1);
    libRWDR_gf_SCMR_UpdateHeroPanel(2);
    libRWDR_gf_SCMR_UpdateHeroPanel(3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_SCMR_HeroDebugSetHeightL_Init () {
    libRWDR_gt_SCMR_HeroDebugSetHeightL = TriggerCreate("libRWDR_gt_SCMR_HeroDebugSetHeightL_Func");
    TriggerAddEventChatMessage(libRWDR_gt_SCMR_HeroDebugSetHeightL, c_playerAny, "lifeheight", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCMR_HeroDebugSetHeightS
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_SCMR_HeroDebugSetHeightS_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libRWDR_gv_SCMR_HEROUISHIELDBARHEIGHT = StringToInt(StringWord(EventChatMessage(false), 2));
    libRWDR_gf_SCMR_UpdateHeroPanel(1);
    libRWDR_gf_SCMR_UpdateHeroPanel(2);
    libRWDR_gf_SCMR_UpdateHeroPanel(3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_SCMR_HeroDebugSetHeightS_Init () {
    libRWDR_gt_SCMR_HeroDebugSetHeightS = TriggerCreate("libRWDR_gt_SCMR_HeroDebugSetHeightS_Func");
    TriggerAddEventChatMessage(libRWDR_gt_SCMR_HeroDebugSetHeightS, c_playerAny, "shieldheight", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCMR_HeroDebugSetHeightE
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_SCMR_HeroDebugSetHeightE_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libRWDR_gv_SCMR_HEROUIENERGYBARHEIGHT = StringToInt(StringWord(EventChatMessage(false), 2));
    libRWDR_gf_SCMR_UpdateHeroPanel(1);
    libRWDR_gf_SCMR_UpdateHeroPanel(2);
    libRWDR_gf_SCMR_UpdateHeroPanel(3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_SCMR_HeroDebugSetHeightE_Init () {
    libRWDR_gt_SCMR_HeroDebugSetHeightE = TriggerCreate("libRWDR_gt_SCMR_HeroDebugSetHeightE_Func");
    TriggerAddEventChatMessage(libRWDR_gt_SCMR_HeroDebugSetHeightE, c_playerAny, "energyheight", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCMR_HeroPanelUpdate
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_SCMR_HeroPanelUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoE11D4D17_ae = libRWDR_gv_SCMR_HerioUIMaxHeroCount;
    int autoE11D4D17_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoE11D4D17_var = 1;
    for ( ; autoE11D4D17_var <= autoE11D4D17_ae; autoE11D4D17_var += 1 ) {
        libRWDR_gf_SCMR_UpdateHeroPanel(autoE11D4D17_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_SCMR_HeroPanelUpdate_Init () {
    libRWDR_gt_SCMR_HeroPanelUpdate = TriggerCreate("libRWDR_gt_SCMR_HeroPanelUpdate_Func");
    TriggerEnable(libRWDR_gt_SCMR_HeroPanelUpdate, false);
    TriggerAddEventTimePeriodic(libRWDR_gt_SCMR_HeroPanelUpdate, libRWDR_gv_SCMR_HeroUIUpdateFrequency, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCMR_HeroPanelReload
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_SCMR_HeroPanelUpdate2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto271C7ED9_ae = libRWDR_gv_SCMR_HerioUIMaxHeroCount;
    int auto271C7ED9_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto271C7ED9_var = 1;
    for ( ; auto271C7ED9_var <= auto271C7ED9_ae; auto271C7ED9_var += 1 ) {
        libRWDR_gf_SCMR_UpdateHeroPanel(auto271C7ED9_var);
        if (((libRWDR_gv_SCMR_HeroUIType[auto271C7ED9_var] == libRWDR_ge_SCMRCampaignHeroes_ByronKane))) {
            DialogControlSendAnimationEvent(libRWDR_gv_scmr_HeroUIPanel[auto271C7ED9_var], PlayerGroupAll(), "SwitchZerg");
            libNtve_gf_SetDialogItemImage(libRWDR_gv_scmr_HeroUIDialogLevelBox[auto271C7ED9_var], "Assets\\Textures\\ui_ingame_lotv_herolevelbox_zerg.dds", PlayerGroupAll());
        }

        if (((libRWDR_gv_SCMR_HeroUIType[auto271C7ED9_var] == libRWDR_ge_SCMRCampaignHeroes_Eledis) || (libRWDR_gv_SCMR_HeroUIType[auto271C7ED9_var] == libRWDR_ge_SCMRCampaignHeroes_BarryClark))) {
            DialogControlSendAnimationEvent(libRWDR_gv_scmr_HeroUIPanel[auto271C7ED9_var], PlayerGroupAll(), "SwitchTerran");
            libNtve_gf_SetDialogItemImage(libRWDR_gv_scmr_HeroUIDialogLevelBox[auto271C7ED9_var], "Assets\\Textures\\ui_ingame_lotv_herolevelbox_terr.dds", PlayerGroupAll());
        }

        if (((libRWDR_gv_SCMR_HeroUIType[auto271C7ED9_var] == libRWDR_ge_SCMRCampaignHeroes_Avalax))) {
            DialogControlSendAnimationEvent(libRWDR_gv_scmr_HeroUIPanel[auto271C7ED9_var], PlayerGroupAll(), "EnergyBarOffset");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_SCMR_HeroPanelUpdate2_Init () {
    libRWDR_gt_SCMR_HeroPanelUpdate2 = TriggerCreate("libRWDR_gt_SCMR_HeroPanelUpdate2_Func");
    TriggerEnable(libRWDR_gt_SCMR_HeroPanelUpdate2, false);
    TriggerAddEventLoadGameDone(libRWDR_gt_SCMR_HeroPanelUpdate2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCMR_VoidHeroUIUnitDamaged
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_SCMR_VoidHeroUIUnitDamaged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == libRWDR_gv_scmr_HeroUIUnit[1])) {
        lv_index = 1;
    }
    else if ((EventUnit() == libRWDR_gv_scmr_HeroUIUnit[2])) {
        lv_index = 2;
    }
    else if ((EventUnit() == libRWDR_gv_scmr_HeroUIUnit[3])) {
        lv_index = 3;
    }
    else if (true) {
        return true;
    }
    DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogDamageTakenImage[lv_index], PlayerGroupAll(), true);
    if ((libRWDR_gv_scmr_HeroUIDamageTimer[lv_index] <= 0.0)) {
    }
    else {
        DialogControlFadeTransparency(libRWDR_gv_scmr_HeroUIDialogDamageTakenImage[lv_index], PlayerGroupAll(), 0.25, 0.0);
    }
    if ((EventUnitDamageAmount() < 5.0)) {
        if ((libRWDR_gv_scmr_HeroUIDamageTimer[lv_index] <= 0.25)) {
            libRWDR_gv_scmr_HeroUIDamageTimer[lv_index] = 0.26;
            DialogControlFadeTransparency(libRWDR_gv_scmr_HeroUIDialogDamageTakenImage[lv_index], PlayerGroupAll(), 0.25, 0.0);
            libNtve_gf_SetDialogItemText(libRWDR_gv_scmr_HeroUIDialogDamageTakenLabel[lv_index], FixedToText(EventUnitDamageAmount(), 0), PlayerGroupAll());
            DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogDamageTakenLabel[lv_index], PlayerGroupAll(), true);
        }

    }
    else {
        if ((EventUnitDamageAmount() >= 5.0) && (EventUnitDamageAmount() <= 15.0)) {
            if ((libRWDR_gv_scmr_HeroUIDamageTimer[lv_index] <= 0.5)) {
                libRWDR_gv_scmr_HeroUIDamageTimer[lv_index] = 0.51;
                DialogControlFadeTransparency(libRWDR_gv_scmr_HeroUIDialogDamageTakenImage[lv_index], PlayerGroupAll(), 0.5, 0.0);
                libNtve_gf_SetDialogItemText(libRWDR_gv_scmr_HeroUIDialogDamageTakenLabel[lv_index], FixedToText(EventUnitDamageAmount(), 0), PlayerGroupAll());
                DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogDamageTakenLabel[lv_index], PlayerGroupAll(), true);
            }

        }
        else {
            if ((libRWDR_gv_scmr_HeroUIDamageTimer[lv_index] <= 1.0)) {
                libRWDR_gv_scmr_HeroUIDamageTimer[lv_index] = 1.01;
                DialogControlFadeTransparency(libRWDR_gv_scmr_HeroUIDialogDamageTakenImage[lv_index], PlayerGroupAll(), 1.0, 0.0);
                libNtve_gf_SetDialogItemText(libRWDR_gv_scmr_HeroUIDialogDamageTakenLabel[lv_index], FixedToText(EventUnitDamageAmount(), 0), PlayerGroupAll());
                DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogDamageTakenLabel[lv_index], PlayerGroupAll(), true);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_SCMR_VoidHeroUIUnitDamaged_Init () {
    libRWDR_gt_SCMR_VoidHeroUIUnitDamaged = TriggerCreate("libRWDR_gt_SCMR_VoidHeroUIUnitDamaged_Func");
    TriggerEnable(libRWDR_gt_SCMR_VoidHeroUIUnitDamaged, false);
    TriggerAddEventUnitDamaged(libRWDR_gt_SCMR_VoidHeroUIUnitDamaged, UnitRefFromVariable("libRWDR_gv_scmr_HeroUIUnit[1]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libRWDR_gt_SCMR_VoidHeroUIUnitDamaged, UnitRefFromVariable("libRWDR_gv_scmr_HeroUIUnit[2]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libRWDR_gt_SCMR_VoidHeroUIUnitDamaged, UnitRefFromVariable("libRWDR_gv_scmr_HeroUIUnit[3]"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCMR_HeroUIUnitVitalChange
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_SCMR_HeroUIUnitVitalChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_damageBar;
    int lv_damageBarWidth;
    int lv_damageBarHeight;

    // Automatic Variable Declarations
    unit auto9DBB9178_val;
    int auto32B588B9_val;

    // Variable Initialization
    lv_damageBar = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((EventUnitPropertyChangeFixed() < 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9DBB9178_val = EventUnit();
    if (auto9DBB9178_val == libRWDR_gv_scmr_HeroUIUnit[1]) {
        lv_index = 1;
    }
    else if (auto9DBB9178_val == libRWDR_gv_scmr_HeroUIUnit[2]) {
        lv_index = 2;
    }
    else if (auto9DBB9178_val == libRWDR_gv_scmr_HeroUIUnit[3]) {
        lv_index = 3;
    }
    else {
        return true;
    }
    auto32B588B9_val = EventUnitProperty();
    if (auto32B588B9_val == c_unitPropEnergy) {
        DialogControlCreateInPanelFromTemplate(libRWDR_gv_scmr_HeroUIPanel[lv_index], c_triggerControlTypeImage, "RwdrShared_StatusBarTemplates/HeroUnitFrameTemplate/EnergyBarDamageImage");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, libRWDR_gv_scmr_HeroUIDialogEnergyBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(libRWDR_gv_scmr_HeroUIUnit[lv_index], c_unitPropEnergy, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(libRWDR_gv_scmr_HeroUIUnit[lv_index], c_unitPropEnergyMax, c_unitPropCurrent)) * IntToFixed(libRWDR_gv_SCMR_HEROUIBARWIDTH)));
        lv_damageBarHeight = DialogControlGetHeight(libRWDR_gv_scmr_HeroUIDialogEnergyBarImage[lv_index], 1);
    }
    else if (auto32B588B9_val == c_unitPropLife) {
        DialogControlCreateInPanelFromTemplate(libRWDR_gv_scmr_HeroUIPanel[lv_index], c_triggerControlTypeImage, "RwdrShared_StatusBarTemplates/HeroUnitFrameTemplate/HealthBarDamageImage");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, libRWDR_gv_scmr_HeroUIDialogHealthBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(libRWDR_gv_scmr_HeroUIUnit[lv_index], c_unitPropLife, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(libRWDR_gv_scmr_HeroUIUnit[lv_index], c_unitPropLifeMax, c_unitPropCurrent)) * IntToFixed(libRWDR_gv_SCMR_HEROUIBARWIDTH)));
        lv_damageBarHeight = DialogControlGetHeight(libRWDR_gv_scmr_HeroUIDialogHealthBarImage[lv_index], 1);
    }
    else if (auto32B588B9_val == c_unitPropShields) {
        DialogControlCreateInPanelFromTemplate(libRWDR_gv_scmr_HeroUIPanel[lv_index], c_triggerControlTypeImage, "RwdrShared_StatusBarTemplates/HeroUnitFrameTemplate/ShieldBarDamageImage");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, libRWDR_gv_scmr_HeroUIDialogShieldBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(libRWDR_gv_scmr_HeroUIUnit[lv_index], c_unitPropShields, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(libRWDR_gv_scmr_HeroUIUnit[lv_index], c_unitPropShieldsMax, c_unitPropCurrent)) * IntToFixed(libRWDR_gv_SCMR_HEROUIBARWIDTH)));
        lv_damageBarHeight = DialogControlGetHeight(libRWDR_gv_scmr_HeroUIDialogShieldBarImage[lv_index], 1);
    }
    else {
    }
    lv_damageBar = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(lv_damageBar, 506, PlayerGroupAll());
    DialogControlSetVisible(lv_damageBar, PlayerGroupAll(), true);
    DialogControlSetSize(lv_damageBar, PlayerGroupAll(), MaxI(lv_damageBarWidth, 1), lv_damageBarHeight);
    Wait(1.0, c_timeReal);
    DialogControlFadeTransparency(lv_damageBar, PlayerGroupAll(), 1.0, 100.0);
    Wait(1.1, c_timeReal);
    DialogControlDestroy(lv_damageBar);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_SCMR_HeroUIUnitVitalChange_Init () {
    libRWDR_gt_SCMR_HeroUIUnitVitalChange = TriggerCreate("libRWDR_gt_SCMR_HeroUIUnitVitalChange_Func");
    TriggerEnable(libRWDR_gt_SCMR_HeroUIUnitVitalChange, false);
    TriggerAddEventUnitProperty(libRWDR_gt_SCMR_HeroUIUnitVitalChange, UnitRefFromVariable("libRWDR_gv_scmr_HeroUIUnit[1]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libRWDR_gt_SCMR_HeroUIUnitVitalChange, UnitRefFromVariable("libRWDR_gv_scmr_HeroUIUnit[2]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libRWDR_gt_SCMR_HeroUIUnitVitalChange, UnitRefFromVariable("libRWDR_gv_scmr_HeroUIUnit[3]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libRWDR_gt_SCMR_HeroUIUnitVitalChange, UnitRefFromVariable("libRWDR_gv_scmr_HeroUIUnit[1]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(libRWDR_gt_SCMR_HeroUIUnitVitalChange, UnitRefFromVariable("libRWDR_gv_scmr_HeroUIUnit[2]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(libRWDR_gt_SCMR_HeroUIUnitVitalChange, UnitRefFromVariable("libRWDR_gv_scmr_HeroUIUnit[3]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(libRWDR_gt_SCMR_HeroUIUnitVitalChange, UnitRefFromVariable("libRWDR_gv_scmr_HeroUIUnit[1]"), c_unitPropShields);
    TriggerAddEventUnitProperty(libRWDR_gt_SCMR_HeroUIUnitVitalChange, UnitRefFromVariable("libRWDR_gv_scmr_HeroUIUnit[2]"), c_unitPropShields);
    TriggerAddEventUnitProperty(libRWDR_gt_SCMR_HeroUIUnitVitalChange, UnitRefFromVariable("libRWDR_gv_scmr_HeroUIUnit[3]"), c_unitPropShields);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SMCR_HeroUIMouseHoverText
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_SCMR_HeroUIMouseHoverText_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoE1C6BB24_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libRWDR_gv_scmr_HeroUIDialogBorderImage[1]) || (EventDialogControl() == libRWDR_gv_SCMR_HeroUIDialogBorderImageNoEnergy[1]) || (EventDialogControl() == libRWDR_gv_scmr_HeroUIDialogBorderImage[2]) || (EventDialogControl() == libRWDR_gv_SCMR_HeroUIDialogBorderImageNoEnergy[2]) || (EventDialogControl() == libRWDR_gv_scmr_HeroUIDialogBorderImage[3]) || (EventDialogControl() == libRWDR_gv_SCMR_HeroUIDialogBorderImageNoEnergy[3]) || (EventDialogControl() == libRWDR_gv_scmr_HeroUIDialogButton[1]) || (EventDialogControl() == libRWDR_gv_scmr_HeroUIDialogButton[2]) || (EventDialogControl() == libRWDR_gv_scmr_HeroUIDialogButton[3])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventDialogControl() == libRWDR_gv_scmr_HeroUIDialogBorderImage[1]) || (EventDialogControl() == libRWDR_gv_SCMR_HeroUIDialogBorderImageNoEnergy[1]) || (EventDialogControl() == libRWDR_gv_scmr_HeroUIDialogButton[1]))) {
        lv_index = 1;
    }
    else {
        if (((EventDialogControl() == libRWDR_gv_scmr_HeroUIDialogBorderImage[2]) || (EventDialogControl() == libRWDR_gv_SCMR_HeroUIDialogBorderImageNoEnergy[2]) || (EventDialogControl() == libRWDR_gv_scmr_HeroUIDialogButton[2]))) {
            lv_index = 2;
        }
        else {
            if (((EventDialogControl() == libRWDR_gv_scmr_HeroUIDialogBorderImage[3]) || (EventDialogControl() == libRWDR_gv_SCMR_HeroUIDialogBorderImageNoEnergy[3]) || (EventDialogControl() == libRWDR_gv_scmr_HeroUIDialogButton[3]))) {
                lv_index = 3;
            }
            else {
                return true;
            }
        }
    }
    autoE1C6BB24_val = EventDialogControlEventType();
    if (autoE1C6BB24_val == c_triggerControlEventTypeMouseEnter) {
        if ((UnitGetPropertyFixed(libRWDR_gv_scmr_HeroUIUnit[lv_index], c_unitPropLifeMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogHealthLabel[lv_index], PlayerGroupAll(), true);
        }

        if ((UnitGetPropertyFixed(libRWDR_gv_scmr_HeroUIUnit[lv_index], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogEnergyLabel[lv_index], PlayerGroupAll(), true);
        }

        if ((UnitGetPropertyFixed(libRWDR_gv_scmr_HeroUIUnit[lv_index], c_unitPropShieldsMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogShieldLabel[lv_index], PlayerGroupAll(), true);
        }

    }
    else if (autoE1C6BB24_val == c_triggerControlEventTypeMouseExit) {
        if ((UnitGetPropertyFixed(libRWDR_gv_scmr_HeroUIUnit[lv_index], c_unitPropLifeMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogHealthLabel[lv_index], PlayerGroupAll(), false);
        }

        if ((UnitGetPropertyFixed(libRWDR_gv_scmr_HeroUIUnit[lv_index], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogEnergyLabel[lv_index], PlayerGroupAll(), false);
        }

        if ((UnitGetPropertyFixed(libRWDR_gv_scmr_HeroUIUnit[lv_index], c_unitPropShieldsMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libRWDR_gv_scmr_HeroUIDialogShieldLabel[lv_index], PlayerGroupAll(), false);
        }

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_SCMR_HeroUIMouseHoverText_Init () {
    libRWDR_gt_SCMR_HeroUIMouseHoverText = TriggerCreate("libRWDR_gt_SCMR_HeroUIMouseHoverText_Func");
    TriggerEnable(libRWDR_gt_SCMR_HeroUIMouseHoverText, false);
    TriggerAddEventDialogControl(libRWDR_gt_SCMR_HeroUIMouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
    TriggerAddEventDialogControl(libRWDR_gt_SCMR_HeroUIMouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SOTP_MutatorListNotificationExpired
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_SOTP_MutatorListNotificationExpired_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlSendAnimationEvent(libRWDR_gv_sOTP_MutatorListNotificationLabel, PlayerGroupAll(), "Hide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_SOTP_MutatorListNotificationExpired_Init () {
    libRWDR_gt_SOTP_MutatorListNotificationExpired = TriggerCreate("libRWDR_gt_SOTP_MutatorListNotificationExpired_Func");
    TriggerEnable(libRWDR_gt_SOTP_MutatorListNotificationExpired, false);
    TriggerAddEventTimer(libRWDR_gt_SOTP_MutatorListNotificationExpired, libRWDR_gv_sOTP_MutatorListNotificationTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TalentPanelController
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_TalentPanelController_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto4FF78803_val;
    const int auto8BB1B93A_ae = 5;
    int auto8BB1B93A_var;
    const int autoB71ECE79_ae = 15;
    int autoB71ECE79_var;

    // Conditions
    if (testConds) {
        if (!((libRWDR_gv_talentPanel.lv_dialog != c_invalidDialogId))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4FF78803_val = EventDialogControl();
    if (auto4FF78803_val == libRWDR_gv_talentPanel.lv_button[1]) {
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[1], true, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[2], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[3], false, PlayerGroupAll());
        libRWDR_gv_talentPanel.lv_selectedItem[1] = 1;
    }
    else if (auto4FF78803_val == libRWDR_gv_talentPanel.lv_button[2]) {
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[2], true, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[1], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[3], false, PlayerGroupAll());
        libRWDR_gv_talentPanel.lv_selectedItem[1] = 2;
    }
    else if (auto4FF78803_val == libRWDR_gv_talentPanel.lv_button[3]) {
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[3], true, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[1], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[2], false, PlayerGroupAll());
        libRWDR_gv_talentPanel.lv_selectedItem[1] = 3;
    }
    else if (auto4FF78803_val == libRWDR_gv_talentPanel.lv_button[4]) {
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[4], true, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[5], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[6], false, PlayerGroupAll());
        libRWDR_gv_talentPanel.lv_selectedItem[2] = 1;
    }
    else if (auto4FF78803_val == libRWDR_gv_talentPanel.lv_button[5]) {
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[5], true, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[4], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[6], false, PlayerGroupAll());
        libRWDR_gv_talentPanel.lv_selectedItem[2] = 2;
    }
    else if (auto4FF78803_val == libRWDR_gv_talentPanel.lv_button[6]) {
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[6], true, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[4], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[5], false, PlayerGroupAll());
        libRWDR_gv_talentPanel.lv_selectedItem[2] = 3;
    }
    else if (auto4FF78803_val == libRWDR_gv_talentPanel.lv_button[7]) {
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[7], true, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[8], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[9], false, PlayerGroupAll());
        libRWDR_gv_talentPanel.lv_selectedItem[3] = 1;
    }
    else if (auto4FF78803_val == libRWDR_gv_talentPanel.lv_button[8]) {
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[8], true, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[7], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[9], false, PlayerGroupAll());
        libRWDR_gv_talentPanel.lv_selectedItem[3] = 2;
    }
    else if (auto4FF78803_val == libRWDR_gv_talentPanel.lv_button[9]) {
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[9], true, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[7], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[8], false, PlayerGroupAll());
        libRWDR_gv_talentPanel.lv_selectedItem[3] = 3;
    }
    else if (auto4FF78803_val == libRWDR_gv_talentPanel.lv_button[10]) {
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[10], true, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[11], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[12], false, PlayerGroupAll());
        libRWDR_gv_talentPanel.lv_selectedItem[4] = 1;
    }
    else if (auto4FF78803_val == libRWDR_gv_talentPanel.lv_button[11]) {
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[11], true, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[10], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[12], false, PlayerGroupAll());
        libRWDR_gv_talentPanel.lv_selectedItem[4] = 2;
    }
    else if (auto4FF78803_val == libRWDR_gv_talentPanel.lv_button[12]) {
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[12], true, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[10], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[11], false, PlayerGroupAll());
        libRWDR_gv_talentPanel.lv_selectedItem[4] = 3;
    }
    else if (auto4FF78803_val == libRWDR_gv_talentPanel.lv_button[13]) {
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[13], true, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[14], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[15], false, PlayerGroupAll());
        libRWDR_gv_talentPanel.lv_selectedItem[5] = 1;
    }
    else if (auto4FF78803_val == libRWDR_gv_talentPanel.lv_button[14]) {
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[14], true, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[13], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[15], false, PlayerGroupAll());
        libRWDR_gv_talentPanel.lv_selectedItem[5] = 2;
    }
    else if (auto4FF78803_val == libRWDR_gv_talentPanel.lv_button[15]) {
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[15], true, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[13], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[14], false, PlayerGroupAll());
        libRWDR_gv_talentPanel.lv_selectedItem[5] = 3;
    }
    else if (auto4FF78803_val == libRWDR_gv_talentPanel.lv_reset) {
        auto8BB1B93A_var = 1;
        for ( ; auto8BB1B93A_var <= auto8BB1B93A_ae; auto8BB1B93A_var += 1 ) {
            libRWDR_gv_talentPanel.lv_selectedItem[auto8BB1B93A_var] = 0;
        }
        autoB71ECE79_var = 1;
        for ( ; autoB71ECE79_var <= autoB71ECE79_ae; autoB71ECE79_var += 1 ) {
            libNtve_gf_SetDialogItemToggled(libRWDR_gv_talentPanel.lv_button[autoB71ECE79_var], false, PlayerGroupAll());
        }
    }
    else if (auto4FF78803_val == libRWDR_gv_talentPanel.lv_close) {
        TriggerEnable(TriggerGetCurrent(), false);
        DialogSetVisible(libRWDR_gv_talentPanel.lv_dialog, PlayerGroupAll(), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_TalentPanelController_Init () {
    libRWDR_gt_TalentPanelController = TriggerCreate("libRWDR_gt_TalentPanelController_Func");
    TriggerEnable(libRWDR_gt_TalentPanelController, false);
    TriggerAddEventDialogControl(libRWDR_gt_TalentPanelController, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RWDR_SoATimeFreezeCast
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_RWDR_SoATimeFreezeCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_originalPauseState;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_originalPauseState = true;

    // Actions
    if (!runActions) {
        return true;
    }

    libRWDR_gf_RWDR_TimeFreezeVisual(PointGetX(CameraGetTarget(1)), PointGetY(CameraGetTarget(1)));
    AITimePause(true);
    Wait(IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "SOATimeFreeze", "Duration", c_playerAny)), c_timeGame);
    AITimePause(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_RWDR_SoATimeFreezeCast_Init () {
    libRWDR_gt_RWDR_SoATimeFreezeCast = TriggerCreate("libRWDR_gt_RWDR_SoATimeFreezeCast_Func");
    TriggerAddEventPlayerEffectUsed(libRWDR_gt_RWDR_SoATimeFreezeCast, 1, "SOATimeFreeze");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCMR_Zerg Drop Pod
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_SCMR_ZergDropPod_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libRWDR_gf__ZergDropPod(libRWDR_gv_SCMR_TP_DropPod_Location, libRWDR_gv_SCMR_TP_DropPod_Units, libRWDR_gv_SCMR_TP_DropPod_Player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_SCMR_ZergDropPod_Init () {
    libRWDR_gt_SCMR_ZergDropPod = TriggerCreate("libRWDR_gt_SCMR_ZergDropPod_Func");
    TriggerEnable(libRWDR_gt_SCMR_ZergDropPod, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCMR_Terran Drop Pod
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_SCMR_TerranDropPod_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libRWDR_gf__TerranDropPod(libRWDR_gv_SCMR_TP_DropPod_Location, libRWDR_gv_SCMR_TP_DropPod_Units, libRWDR_gv_SCMR_TP_DropPod_Player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_SCMR_TerranDropPod_Init () {
    libRWDR_gt_SCMR_TerranDropPod = TriggerCreate("libRWDR_gt_SCMR_TerranDropPod_Func");
    TriggerEnable(libRWDR_gt_SCMR_TerranDropPod, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Hero Ability GCD
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_EnemyHeroAbilityGCD_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnit(), "EnemyHero3CD", EventPlayer(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_EnemyHeroAbilityGCD_Init () {
    libRWDR_gt_EnemyHeroAbilityGCD = TriggerCreate("libRWDR_gt_EnemyHeroAbilityGCD_Func");
    TriggerAddEventUnitAbility(libRWDR_gt_EnemyHeroAbilityGCD, null, AbilityCommand("DelanarQ", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libRWDR_gt_EnemyHeroAbilityGCD, null, AbilityCommand("DelanarW", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libRWDR_gt_EnemyHeroAbilityGCD, null, AbilityCommand("DelanarE", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libRWDR_gt_EnemyHeroAbilityGCD, null, AbilityCommand("TolarisQ", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libRWDR_gt_EnemyHeroAbilityGCD, null, AbilityCommand("TolarisE", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libRWDR_gt_EnemyHeroAbilityGCD, null, AbilityCommand("BarryQ", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libRWDR_gt_EnemyHeroAbilityGCD, null, AbilityCommand("BarryW", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libRWDR_gt_EnemyHeroAbilityGCD, null, AbilityCommand("BarryE", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libRWDR_gt_EnemyHeroAbilityGCD, null, AbilityCommand("NemezithQ", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libRWDR_gt_EnemyHeroAbilityGCD, null, AbilityCommand("NemezithW", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libRWDR_gt_EnemyHeroAbilityGCD, null, AbilityCommand("NemezithR", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libRWDR_gt_EnemyHeroAbilityGCD, null, AbilityCommand("ZortalasQ", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libRWDR_gt_EnemyHeroAbilityGCD, null, AbilityCommand("ZortalasE", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libRWDR_gt_EnemyHeroAbilityGCD, null, AbilityCommand("ZortalasR", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libRWDR_gt_EnemyHeroAbilityGCD, null, AbilityCommand("EledisQ", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libRWDR_gt_EnemyHeroAbilityGCD, null, AbilityCommand("EledisW", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libRWDR_gt_EnemyHeroAbilityGCD, null, AbilityCommand("EledisE", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libRWDR_gt_EnemyHeroAbilityGCD, null, AbilityCommand("VorazunQ", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libRWDR_gt_EnemyHeroAbilityGCD, null, AbilityCommand("VorazunW", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libRWDR_gt_EnemyHeroAbilityGCD, null, AbilityCommand("VorazunE", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libRWDR_gt_EnemyHeroAbilityGCD, null, AbilityCommand("MoriyQ", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libRWDR_gt_EnemyHeroAbilityGCD, null, AbilityCommand("MoriyW", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libRWDR_gt_EnemyHeroAbilityGCD, null, AbilityCommand("MoriyE", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitBehaviorChange(libRWDR_gt_EnemyHeroAbilityGCD, null, "LathrezitChannelBehavior", c_unitBehaviorChangeDecrease);
    TriggerAddEventUnitAbility(libRWDR_gt_EnemyHeroAbilityGCD, null, AbilityCommand("LathrezitE", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apocalisk Life and Armor
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_ApocaliskLifeandArmor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_apocalisk;
    int lv_enemiesNearby;
    fixed lv_lifeBonus;
    fixed lv_armorBonus;
    fixed lv_lifePercentage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_apocalisk = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitIsAlive(lv_apocalisk) == true)) {
        lv_lifePercentage = UnitGetPropertyFixed(lv_apocalisk, c_unitPropLifePercent, c_unitPropCurrent);
        lv_enemiesNearby = UnitGroupCount(libRWDR_gf_AITacticalEnemiesWithinRange(lv_apocalisk, 10.0, UnitFilter(0, 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))), c_unitCountAlive);
        lv_lifeBonus = (lv_enemiesNearby * 100.0);
        lv_armorBonus = MinF(10.0, lv_enemiesNearby);
        UnitSetPropertyFixed(lv_apocalisk, c_unitPropLifeMax, MinF((lv_lifeBonus + 500.0), 2000.0));
        UnitSetPropertyFixed(lv_apocalisk, c_unitPropLifePercent, lv_lifePercentage);
        CatalogFieldValueSet(c_gameCatalogUnit, "StukovApocalisk", "LifeArmor", 1, FixedToString(lv_armorBonus, 1));
        Wait(0.5, c_timeGame);
    }
    CatalogFieldValueSet(c_gameCatalogUnit, "StukovApocalisk", "LifeArmor", 1, FixedToString(0.0, c_fixedPrecisionAny));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_ApocaliskLifeandArmor_Init () {
    libRWDR_gt_ApocaliskLifeandArmor = TriggerCreate("libRWDR_gt_ApocaliskLifeandArmor_Func");
    TriggerAddEventUnitBehaviorChange(libRWDR_gt_ApocaliskLifeandArmor, null, "ByronRBirthing", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Delanar Extra
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_DelanarExtra_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogBehavior, "Delanar11DamageDebuff", "MaxStackCount", EventPlayer(), IntToString(5));
    CatalogFieldValueSet(c_gameCatalogBehavior, "Delanar11DamageDebuff", "MaxStackCountPerCaster", EventPlayer(), IntToString(5));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_DelanarExtra_Init () {
    libRWDR_gt_DelanarExtra = TriggerCreate("libRWDR_gt_DelanarExtra_Func");
    TriggerAddEventPlayerEffectUsed(libRWDR_gt_DelanarExtra, c_playerAny, "DelanarPlayerModify_WeaponDamageLV6");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BarryE
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_BarryE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_critText;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_critText = TextTagLastCreated();

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/lib_RWDR_B88EC399"), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 3.0, true, false, PlayerGroupAll());
    lv_critText = TextTagLastCreated();
    UnitCreateEffectPoint(libRWDR_gv_BarryClark, "BarryEFakePersistent", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)));
    TextTagSetColor(lv_critText, c_textTagColorText, Color(100.00, 0.00, 0.00));
    TextTagSetVelocity(lv_critText, 0.5, 90.0);
    Wait(2.0, c_timeGame);
    TextTagDestroy(lv_critText);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_BarryE_Init () {
    libRWDR_gt_BarryE = TriggerCreate("libRWDR_gt_BarryE_Func");
    TriggerAddEventPlayerEffectUsed(libRWDR_gt_BarryE, c_playerAny, "BarryERemoveLaziotZealotShield");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fenix11
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_Fenix11_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_critText;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_critText = TextTagLastCreated();

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/lib_RWDR_A9D0839A"), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 3.0, true, false, PlayerGroupAll());
    lv_critText = TextTagLastCreated();
    UnitCreateEffectPoint(libRWDR_gv_BarryClark, "BarryEFakePersistent", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)));
    TextTagSetColor(lv_critText, c_textTagColorText, Color(100.00, 0.00, 0.00));
    TextTagSetVelocity(lv_critText, 0.5, 90.0);
    Wait(2.0, c_timeGame);
    TextTagDestroy(lv_critText);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_Fenix11_Init () {
    libRWDR_gt_Fenix11 = TriggerCreate("libRWDR_gt_Fenix11_Func");
    TriggerAddEventPlayerEffectUsed(libRWDR_gt_Fenix11, c_playerAny, "FenixSOAExtraWeaponDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Avalax Charging
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_AvalaxCharging_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "Avalax11Buff") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "AvalaxECharging", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_AvalaxCharging_Init () {
    libRWDR_gt_AvalaxCharging = TriggerCreate("libRWDR_gt_AvalaxCharging_Func");
    TriggerAddEventUnitAbility(libRWDR_gt_AvalaxCharging, null, AbilityCommand("AvalaxE", 0), c_abilEffectStagePrep, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Avalax Upgrade04 Trig
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_AvalaxUpgrade04Trig_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(libRWDR_gv_Avalax, "AvalaxUpgrade04Behavior", libRWDR_gv_Avalax, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_AvalaxUpgrade04Trig_Init () {
    libRWDR_gt_AvalaxUpgrade04Trig = TriggerCreate("libRWDR_gt_AvalaxUpgrade04Trig_Func");
    TriggerEnable(libRWDR_gt_AvalaxUpgrade04Trig, false);
    TriggerAddEventUnitAbility(libRWDR_gt_AvalaxUpgrade04Trig, null, AbilityCommand("Avalax11", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libRWDR_gt_AvalaxUpgrade04Trig, null, AbilityCommand("AvalaxE", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libRWDR_gt_AvalaxUpgrade04Trig, null, AbilityCommand("AvalaxW", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libRWDR_gt_AvalaxUpgrade04Trig, null, AbilityCommand("AvalaxQ", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Signifer Auto Cast Heal
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_SigniferAutoCastHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("SigniferMindPower", 0), false), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_SigniferAutoCastHeal_Init () {
    libRWDR_gt_SigniferAutoCastHeal = TriggerCreate("libRWDR_gt_SigniferAutoCastHeal_Func");
    TriggerEnable(libRWDR_gt_SigniferAutoCastHeal, false);
    TriggerAddEventUnitAbilityAutoCastChange(libRWDR_gt_SigniferAutoCastHeal, null, AbilityCommand("SigniferHeal", 0), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Signifer Auto Cast Mind Power
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_SigniferAutoCastMindPower_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("SigniferHeal", 0), false), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_SigniferAutoCastMindPower_Init () {
    libRWDR_gt_SigniferAutoCastMindPower = TriggerCreate("libRWDR_gt_SigniferAutoCastMindPower_Func");
    TriggerEnable(libRWDR_gt_SigniferAutoCastMindPower, false);
    TriggerAddEventUnitAbilityAutoCastChange(libRWDR_gt_SigniferAutoCastMindPower, null, AbilityCommand("SigniferMindPower", 0), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry Reflection Shield
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_TeburusGuardianShield_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_missile;
    string lv_originEffect;
    unit lv_originEffectCaster;
    unit lv_targetUnit;
    unit lv_caster;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_missile = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_originEffect = UnitGetOriginalEffect(lv_missile);
    lv_originEffectCaster = UnitGetOriginalCaster(lv_missile);
    lv_targetUnit = lv_originEffectCaster;
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_caster) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(lv_missile, lv_player, true);
    if ((libNtve_gf_UnitCanCreateEffectOnUnit(lv_missile, lv_originEffect, lv_targetUnit) == true)) {
        UnitCreateEffectUnit(lv_missile, lv_originEffect, lv_targetUnit);
    }

    UnitRemove(lv_missile);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_TeburusGuardianShield_Init () {
    libRWDR_gt_TeburusGuardianShield = TriggerCreate("libRWDR_gt_TeburusGuardianShield_Func");
    TriggerAddEventPlayerEffectUsed(libRWDR_gt_TeburusGuardianShield, c_playerAny, "SentryNerazimReflectionShieldMU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unholy Blades Used
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_UnholyBladesUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libRWDR_gv_nemezithPlayer = EventPlayer();
    TriggerEnable(libRWDR_gt_PlagueUnitDeath, true);
    Wait(2.0, c_timeGame);
    TriggerEnable(libRWDR_gt_ClosePlagueTrig, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_UnholyBladesUsed_Init () {
    libRWDR_gt_UnholyBladesUsed = TriggerCreate("libRWDR_gt_UnholyBladesUsed_Func");
    TriggerAddEventUnitAbility(libRWDR_gt_UnholyBladesUsed, null, AbilityCommand("NemezithR", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Black Death Custom Value
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_BlackDeathCustomValue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 3, 1.0);
    UnitGroupAdd(libRWDR_gv_plagueGroup, EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_BlackDeathCustomValue_Init () {
    libRWDR_gt_BlackDeathCustomValue = TriggerCreate("libRWDR_gt_BlackDeathCustomValue_Func");
    TriggerAddEventPlayerEffectUsed(libRWDR_gt_BlackDeathCustomValue, c_playerAny, "NemezithRDebuff");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Plague Unit Death
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_PlagueUnitDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    unitgroup autoECD8108B_g;
    int autoECD8108B_u;
    unit autoECD8108B_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetCustomValue(EventUnit(), 3) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_point = UnitGetPosition(EventUnit());
    UnitSetCustomValue(EventUnit(), 3, 0.0);
    UnitGroupRemove(libRWDR_gv_plagueGroup, EventUnit());
    autoECD8108B_g = UnitGroup(null, 1, RegionCircle(lv_point, 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32))), libNtve_gf_DifficultyValueInt(2, 2, 3, 5));
    autoECD8108B_u = UnitGroupCount(autoECD8108B_g, c_unitCountAll);
    for (;; autoECD8108B_u -= 1) {
        autoECD8108B_var = UnitGroupUnitFromEnd(autoECD8108B_g, autoECD8108B_u);
        if (autoECD8108B_var == null) { break; }
        UnitBehaviorAddPlayer(autoECD8108B_var, "NemezithRPlague", libRWDR_gv_nemezithPlayer, 1);
        UnitSetCustomValue(autoECD8108B_var, 3, 1.0);
        UnitGroupAdd(libRWDR_gv_plagueGroup, autoECD8108B_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_PlagueUnitDeath_Init () {
    libRWDR_gt_PlagueUnitDeath = TriggerCreate("libRWDR_gt_PlagueUnitDeath_Func");
    TriggerEnable(libRWDR_gt_PlagueUnitDeath, false);
    TriggerAddEventUnitDied(libRWDR_gt_PlagueUnitDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Close Plague Trig
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_ClosePlagueTrig_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(libRWDR_gv_plagueGroup, c_unitCountAlive) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(libRWDR_gt_PlagueUnitDeath, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_ClosePlagueTrig_Init () {
    libRWDR_gt_ClosePlagueTrig = TriggerCreate("libRWDR_gt_ClosePlagueTrig_Func");
    TriggerEnable(libRWDR_gt_ClosePlagueTrig, false);
    TriggerAddEventTimePeriodic(libRWDR_gt_ClosePlagueTrig, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Plague Restore
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_RemovePlagueRestore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 3) == 1)) {
        UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 3, 0.0);
        UnitGroupRemove(libRWDR_gv_plagueGroup, EventPlayerEffectUsedUnit(c_effectUnitTarget));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_RemovePlagueRestore_Init () {
    libRWDR_gt_RemovePlagueRestore = TriggerCreate("libRWDR_gt_RemovePlagueRestore_Func");
    TriggerAddEventPlayerEffectUsed(libRWDR_gt_RemovePlagueRestore, c_playerAny, "SigniferApplyUnstoppableBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nemezith Fear Debuff
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_KerriganEFearEffect2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_point = PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.0, libNtve_gf_RandomAngle());
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnit()), -5.0, lv_point)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    while ((UnitHasBehavior2(EventUnit(), "NemezithResurgenceFearDebuff") == true) && (UnitIsAlive(EventUnit()) == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 3.0))), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
    }
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_KerriganEFearEffect2_Init () {
    libRWDR_gt_KerriganEFearEffect2 = TriggerCreate("libRWDR_gt_KerriganEFearEffect2_Func");
    TriggerAddEventUnitBehaviorChange(libRWDR_gt_KerriganEFearEffect2, null, "NemezithResurgenceFearDebuff", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libRWDR_gt_KerriganEFearEffect2, null, "NemezithResurgenceFearDebuff", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zortalas Kill Laziot Immortal
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_ZortalasKillLaziotImmortal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventUnitDamageEffect() == "ZortalasQInnerDamage") || (EventUnitDamageEffect() == "ZortalasQOuterDamage") || (EventUnitDamageEffect() == "ZortalasWDamage") || (EventUnitDamageEffect() == "ZortalasEDamage") || (EventUnitDamageEffect() == "ZortalasRDamage")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libRWDR_gv_Zortalas, "ZortalasBloodFury", libRWDR_gv_Zortalas);
    if ((EventUnitDamageEffect() == "ZortalasRDamage")) {
        UnitCreateEffectUnit(libRWDR_gv_Zortalas, "ZortalasRRefund", libRWDR_gv_Zortalas);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_ZortalasKillLaziotImmortal_Init () {
    libRWDR_gt_ZortalasKillLaziotImmortal = TriggerCreate("libRWDR_gt_ZortalasKillLaziotImmortal_Func");
    TriggerEnable(libRWDR_gt_ZortalasKillLaziotImmortal, false);
    TriggerAddEventUnitDamageAbsorbed(libRWDR_gt_ZortalasKillLaziotImmortal, null, "ImmortalLaziotRevive");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zortalas Fury
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_ZortalasFury_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libRWDR_gv_Zortalas, "ZortalasBloodFury", libRWDR_gv_Zortalas);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_ZortalasFury_Init () {
    libRWDR_gt_ZortalasFury = TriggerCreate("libRWDR_gt_ZortalasFury_Func");
    TriggerEnable(libRWDR_gt_ZortalasFury, false);
    TriggerAddEventUnitDamaged(libRWDR_gt_ZortalasFury, null, c_unitDamageTypeAny, c_unitDamageFatal, "ZortalasQInnerDamage");
    TriggerAddEventUnitDamaged(libRWDR_gt_ZortalasFury, null, c_unitDamageTypeAny, c_unitDamageFatal, "ZortalasQOuterDamage");
    TriggerAddEventUnitDamaged(libRWDR_gt_ZortalasFury, null, c_unitDamageTypeAny, c_unitDamageFatal, "ZortalasWDamage");
    TriggerAddEventUnitDamaged(libRWDR_gt_ZortalasFury, null, c_unitDamageTypeAny, c_unitDamageFatal, "ZortalasEDamage");
    TriggerAddEventUnitDamaged(libRWDR_gt_ZortalasFury, null, c_unitDamageTypeAny, c_unitDamageFatal, "ZortalasRDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zortalas Cancel Avalax Channel
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_ZortalasCancelAvalaxChannel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Avalax"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libRWDR_gv_Zortalas, "BarryQCancelOrders", EventUnit());
    UnitCreateEffectUnit(libRWDR_gv_Zortalas, "BarryQRemoveAvalaxChannel", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_ZortalasCancelAvalaxChannel_Init () {
    libRWDR_gt_ZortalasCancelAvalaxChannel = TriggerCreate("libRWDR_gt_ZortalasCancelAvalaxChannel_Func");
    TriggerEnable(libRWDR_gt_ZortalasCancelAvalaxChannel, false);
    TriggerAddEventUnitBehaviorChange(libRWDR_gt_ZortalasCancelAvalaxChannel, null, "ZortalasEKnockback", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Eledis Fear Debuff
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_KerriganEFearEffect4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_point = PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.0, libNtve_gf_RandomAngle());
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnit()), -5.0, lv_point)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    while ((UnitHasBehavior2(EventUnit(), "EledisQBurningBehavior") == true) && (UnitIsAlive(EventUnit()) == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 3.0))), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
    }
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_KerriganEFearEffect4_Init () {
    libRWDR_gt_KerriganEFearEffect4 = TriggerCreate("libRWDR_gt_KerriganEFearEffect4_Func");
    TriggerAddEventUnitBehaviorChange(libRWDR_gt_KerriganEFearEffect4, null, "EledisQBurningBehavior", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libRWDR_gt_KerriganEFearEffect4, null, "EledisQBurningBehavior", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Tumor Exhausted
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_CreepTumorExhausted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "CreepTumorExhausted", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_CreepTumorExhausted_Init () {
    libRWDR_gt_CreepTumorExhausted = TriggerCreate("libRWDR_gt_CreepTumorExhausted_Func");
    TriggerAddEventUnitAbility(libRWDR_gt_CreepTumorExhausted, null, AbilityCommand("CreepTumorBuild", 0), c_abilBuildStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Life Heal
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_LifeHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("QueenImitatorShieldRestore", 0), false), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_LifeHeal_Init () {
    libRWDR_gt_LifeHeal = TriggerCreate("libRWDR_gt_LifeHeal_Func");
    TriggerAddEventUnitAbilityAutoCastChange(libRWDR_gt_LifeHeal, null, AbilityCommand("QueenImitatorLifeHeal", 0), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Energy Restore
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_EnergyRestore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("QueenImitatorLifeHeal", 0), false), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_EnergyRestore_Init () {
    libRWDR_gt_EnergyRestore = TriggerCreate("libRWDR_gt_EnergyRestore_Func");
    TriggerAddEventUnitAbilityAutoCastChange(libRWDR_gt_EnergyRestore, null, AbilityCommand("QueenImitatorShieldRestore", 0), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infestor Fear Debuff
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_KerriganEFearEffect3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_point = PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.0, libNtve_gf_RandomAngle());
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnit()), -5.0, lv_point)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    while ((UnitHasBehavior2(EventUnit(), "NexiousNovaBehavior") == true) && (UnitIsAlive(EventUnit()) == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 3.0))), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
    }
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_KerriganEFearEffect3_Init () {
    libRWDR_gt_KerriganEFearEffect3 = TriggerCreate("libRWDR_gt_KerriganEFearEffect3_Func");
    TriggerAddEventUnitBehaviorChange(libRWDR_gt_KerriganEFearEffect3, null, "NexiousNovaBehavior", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libRWDR_gt_KerriganEFearEffect3, null, "NexiousNovaBehavior", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infested Terrans Random Spawn
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_InfestedTerransRandomSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_random;
    fixed lv_randomPercent;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_randomPercent = libNtve_gf_RandomPercent();
    if ((lv_randomPercent <= 30.0)) {
        Wait(0.1, c_timeGame);
        UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitTarget), Order(AbilityCommand("MorphToInfestedTerranBaneling", 0)), c_orderQueueReplace);
    }
    else {
        Wait(0.1, c_timeGame);
        UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitTarget), Order(AbilityCommand("MorphToInfestedTerran", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_InfestedTerransRandomSpawn_Init () {
    libRWDR_gt_InfestedTerransRandomSpawn = TriggerCreate("libRWDR_gt_InfestedTerransRandomSpawn_Func");
    TriggerAddEventPlayerEffectUsed(libRWDR_gt_InfestedTerransRandomSpawn, c_playerAny, "InfestedTerransSpawnTrig");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infested Terran Remove Invernable
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_InfestedTerranRemoveInvernable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "InfestedHerc"))) {
            return false;
        }

        if (!(((UnitHasBehavior2(EventUnit(), "InfestedHercResurgenceBuff") == true) || (UnitHasBehavior2(EventUnit(), "InfestedHercResurgencePassive") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "InfestedHercResurgencePassive", 1);
    UnitBehaviorRemove(EventUnit(), "InfestedHercResurgenceBuff", 1);
    Wait(0.25, c_timeGame);
    UnitCreateEffectUnit(EventUnit(), "TimedLifeFate", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_InfestedTerranRemoveInvernable_Init () {
    libRWDR_gt_InfestedTerranRemoveInvernable = TriggerCreate("libRWDR_gt_InfestedTerranRemoveInvernable_Func");
    TriggerAddEventUnitBehaviorChange(libRWDR_gt_InfestedTerranRemoveInvernable, null, "InfestedTerranTimedLife", c_unitBehaviorChangeDecrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infested Herc Remove Invernable Extra
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_InfestedHercRemoveInvernableExtra_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "InfestedHercResurgencePassive", 1);
    while (!((UnitHasBehavior2(EventUnit(), "InfestedHercResurgenceBuff") == false))) {
        Wait(0.5, c_timeGame);
    }
    UnitKill(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_InfestedHercRemoveInvernableExtra_Init () {
    libRWDR_gt_InfestedHercRemoveInvernableExtra = TriggerCreate("libRWDR_gt_InfestedHercRemoveInvernableExtra_Func");
    TriggerAddEventUnitBehaviorChange(libRWDR_gt_InfestedHercRemoveInvernableExtra, null, "InfestedHercResurgenceBuff", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vorazun Fake Shadow Fury
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_VorazunFakeShadowFury_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.2, c_timeGame);
    if ((UnitGroupCount(libRWDR_gf_AITacticalEnemiesWithinRange(lv_caster, 4.0, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32)))), c_unitCountAlive) > 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HeroVorazunShadow", c_unitCreateIgnorePlacement, UnitGetOwner(lv_caster), UnitGetPosition(lv_caster));
        UnitBehaviorAdd(UnitLastCreated(), "KillsToCaster", lv_caster, 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("VorazunFakeShadowFury", 0), UnitGetPosition(lv_caster)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_VorazunFakeShadowFury_Init () {
    libRWDR_gt_VorazunFakeShadowFury = TriggerCreate("libRWDR_gt_VorazunFakeShadowFury_Func");
    TriggerAddEventPlayerEffectUsed(libRWDR_gt_VorazunFakeShadowFury, c_playerAny, "VorazunWSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shadow Unit Remove Debug
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_ShadowUnitRemoveDebug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.375, c_timeGame);
    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_ShadowUnitRemoveDebug_Init () {
    libRWDR_gt_ShadowUnitRemoveDebug = TriggerCreate("libRWDR_gt_ShadowUnitRemoveDebug_Func");
    TriggerAddEventUnitBehaviorChange(libRWDR_gt_ShadowUnitRemoveDebug, null, "VorazunFakeShadowFuryController", c_unitBehaviorChangeDecrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vorazun Passive
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_VorazunPassive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "Vorazun11Passive", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_VorazunPassive_Init () {
    libRWDR_gt_VorazunPassive = TriggerCreate("libRWDR_gt_VorazunPassive_Func");
    TriggerAddEventUnitAbility(libRWDR_gt_VorazunPassive, null, AbilityCommand("VorazunQ", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(libRWDR_gt_VorazunPassive, null, AbilityCommand("VorazunW", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(libRWDR_gt_VorazunPassive, null, AbilityCommand("VorazunE", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(libRWDR_gt_VorazunPassive, null, AbilityCommand("VorazunR", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Moriy Void Servant
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_MoriyVoidServant_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    point lv_point;
    fixed lv_angel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_point = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_angel = UnitGetFacing(EventPlayerEffectUsedUnit(c_effectUnitCaster));

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "MoriyServant", c_unitCreateIgnorePlacement, UnitGetOwner(lv_caster), lv_point, lv_angel);
    UnitCreateEffectUnit(lv_caster, "MoriyWSpawnSet", UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_MoriyVoidServant_Init () {
    libRWDR_gt_MoriyVoidServant = TriggerCreate("libRWDR_gt_MoriyVoidServant_Func");
    TriggerAddEventPlayerEffectUsed(libRWDR_gt_MoriyVoidServant, c_playerAny, "MoriyWFakeSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Moriy Fear Debuff
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_KerriganEFearEffect5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_point = PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.0, libNtve_gf_RandomAngle());
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnit()), -5.0, lv_point)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    while ((UnitHasBehavior2(EventUnit(), "MoriyEFearDebuff") == true) && (UnitIsAlive(EventUnit()) == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 3.0))), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
    }
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_KerriganEFearEffect5_Init () {
    libRWDR_gt_KerriganEFearEffect5 = TriggerCreate("libRWDR_gt_KerriganEFearEffect5_Func");
    TriggerAddEventUnitBehaviorChange(libRWDR_gt_KerriganEFearEffect5, null, "MoriyEFearDebuff", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libRWDR_gt_KerriganEFearEffect5, null, "MoriyEFearDebuff", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Moriy Void Cloud
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_MoriyVoidCloud_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    point lv_point;
    int lv_chance;

    // Automatic Variable Declarations
    int autoD255BAD2_val;
    const int auto580F8205_n = 6;
    int auto580F8205_i;
    const int auto91411B3D_n = 4;
    int auto91411B3D_i;
    const int autoEE2FD6E3_n = 12;
    int autoEE2FD6E3_i;
    const int auto0763DC2F_n = 5;
    int auto0763DC2F_i;

    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_point = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_chance = RandomInt(1, 4);

    // Actions
    if (!runActions) {
        return true;
    }

    autoD255BAD2_val = lv_chance;
    if (autoD255BAD2_val == 1) {
        for (auto580F8205_i = 1; auto580F8205_i <= auto580F8205_n; auto580F8205_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", c_unitCreateIgnorePlacement, UnitGetOwner(lv_caster), RegionRandomPoint(RegionCircle(lv_point, 3.75)));
            UnitBehaviorAdd(UnitLastCreated(), "VoidShade", UnitLastCreated(), 1);
            Wait(0.2, c_timeGame);
        }
    }
    else if (autoD255BAD2_val == 2) {
        for (auto91411B3D_i = 1; auto91411B3D_i <= auto91411B3D_n; auto91411B3D_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", c_unitCreateIgnorePlacement, UnitGetOwner(lv_caster), RegionRandomPoint(RegionCircle(lv_point, 3.75)));
            UnitBehaviorAdd(UnitLastCreated(), "VoidShade", UnitLastCreated(), 1);
            Wait(0.25, c_timeGame);
        }
    }
    else if (autoD255BAD2_val == 3) {
        for (autoEE2FD6E3_i = 1; autoEE2FD6E3_i <= autoEE2FD6E3_n; autoEE2FD6E3_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", c_unitCreateIgnorePlacement, UnitGetOwner(lv_caster), RegionRandomPoint(RegionCircle(lv_point, 3.75)));
            UnitBehaviorAdd(UnitLastCreated(), "VoidShade", UnitLastCreated(), 1);
            Wait(0.1, c_timeGame);
        }
    }
    else if (autoD255BAD2_val == 4) {
        for (auto0763DC2F_i = 1; auto0763DC2F_i <= auto0763DC2F_n; auto0763DC2F_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Supplicant", c_unitCreateIgnorePlacement, UnitGetOwner(lv_caster), RegionRandomPoint(RegionCircle(lv_point, 3.75)));
            UnitBehaviorAdd(UnitLastCreated(), "VoidShade", UnitLastCreated(), 1);
            Wait(0.2, c_timeGame);
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_MoriyVoidCloud_Init () {
    libRWDR_gt_MoriyVoidCloud = TriggerCreate("libRWDR_gt_MoriyVoidCloud_Func");
    TriggerAddEventPlayerEffectUsed(libRWDR_gt_MoriyVoidCloud, c_playerAny, "MoriyRFakeSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Moriy Creatures Follow
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_MoriyCreaturesFollow_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;

    // Automatic Variable Declarations
    unitgroup auto303FD388_g;
    int auto303FD388_u;
    unit auto303FD388_var;

    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    auto303FD388_g = UnitGroup(null, UnitGetOwner(lv_caster), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto303FD388_u = UnitGroupCount(auto303FD388_g, c_unitCountAll);
    for (;; auto303FD388_u -= 1) {
        auto303FD388_var = UnitGroupUnitFromEnd(auto303FD388_g, auto303FD388_u);
        if (auto303FD388_var == null) { break; }
        if (((UnitGetType(auto303FD388_var) == "MoriyServant") || (UnitHasBehavior2(auto303FD388_var, "VoidShade") == true))) {
            UnitIssueOrder(auto303FD388_var, OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(lv_target)), c_orderQueueReplace);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_MoriyCreaturesFollow_Init () {
    libRWDR_gt_MoriyCreaturesFollow = TriggerCreate("libRWDR_gt_MoriyCreaturesFollow_Func");
    TriggerAddEventPlayerEffectUsed(libRWDR_gt_MoriyCreaturesFollow, c_playerAny, "MoriyWeapon");
    TriggerAddEventPlayerEffectUsed(libRWDR_gt_MoriyCreaturesFollow, c_playerAny, "MoriyAADamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Moriy Void Arrow
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_MoriyVoidArrow_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    fixed lv_moriyangle;
    fixed lv_currentangle;

    // Automatic Variable Declarations
    const int auto77F091E3_n = 7;
    int auto77F091E3_i;

    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_moriyangle = UnitGetFacing(EventPlayerEffectUsedUnit(c_effectUnitCaster));

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentangle = (lv_moriyangle + 60.0);
    for (auto77F091E3_i = 1; auto77F091E3_i <= auto77F091E3_n; auto77F091E3_i += 1) {
        UnitCreateEffectPoint(lv_caster, "MoriyBossELaunchPersistent", PointWithOffsetPolar(UnitGetPosition(lv_caster), 8.0, lv_currentangle));
        lv_currentangle -= 20.0;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_MoriyVoidArrow_Init () {
    libRWDR_gt_MoriyVoidArrow = TriggerCreate("libRWDR_gt_MoriyVoidArrow_Func");
    TriggerAddEventPlayerEffectUsed(libRWDR_gt_MoriyVoidArrow, c_playerAny, "MoriyBossEDamageSearch01");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Delanar Gain XP
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_DelanarGainXP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_eXP;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(libRWDR_gv_Delanar), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(libRWDR_gv_Delanar, RegionCircle(UnitGetPosition(EventUnit()), 15.0)) == true))) {
            return false;
        }

        if (!((UnitIsAlive(libRWDR_gv_Delanar) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitXPGetCurrentLevel(libRWDR_gv_Delanar, null) < libRWDR_gv_delanarMAXLevel)) {
        if (((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            lv_eXP = 5.0;
        }
        else {
            if (((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true) || (UnitGetType(EventUnit()) == "OverlordTransport") || (UnitGetType(EventUnit()) == "Overlord"))) {
                lv_eXP = 3.0;
            }
            else {
                lv_eXP = AbsF(UnitGetPropertyFixed(EventUnit(), c_unitPropSuppliesUsed, c_unitPropCurrent));
            }
        }
        UnitXPAddXP(libRWDR_gv_Delanar, null, lv_eXP);
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_DelanarGainXP_Init () {
    libRWDR_gt_DelanarGainXP = TriggerCreate("libRWDR_gt_DelanarGainXP_Func");
    TriggerEnable(libRWDR_gt_DelanarGainXP, false);
    TriggerAddEventUnitDied(libRWDR_gt_DelanarGainXP, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toaris Gain XP
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_ToarisGainXP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_eXP;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(libRWDR_gv_Tolaris), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(libRWDR_gv_Tolaris, RegionCircle(UnitGetPosition(EventUnit()), 15.0)) == true))) {
            return false;
        }

        if (!((UnitIsAlive(libRWDR_gv_Tolaris) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitXPGetCurrentLevel(libRWDR_gv_Tolaris, null) < libRWDR_gv_tolarisMAXLevel)) {
        if (((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            lv_eXP = 5.0;
        }
        else {
            if (((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true) || (UnitGetType(EventUnit()) == "OverlordTransport") || (UnitGetType(EventUnit()) == "Overlord"))) {
                lv_eXP = 3.0;
            }
            else {
                lv_eXP = AbsF(UnitGetPropertyFixed(EventUnit(), c_unitPropSuppliesUsed, c_unitPropCurrent));
            }
        }
        UnitXPAddXP(libRWDR_gv_Tolaris, null, lv_eXP);
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_ToarisGainXP_Init () {
    libRWDR_gt_ToarisGainXP = TriggerCreate("libRWDR_gt_ToarisGainXP_Func");
    TriggerEnable(libRWDR_gt_ToarisGainXP, false);
    TriggerAddEventUnitDied(libRWDR_gt_ToarisGainXP, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Avalax Gain XP
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_AvalaxGainXP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_eXP;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(libRWDR_gv_Avalax), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(libRWDR_gv_Avalax, RegionCircle(UnitGetPosition(EventUnit()), 15.0)) == true))) {
            return false;
        }

        if (!((UnitIsAlive(libRWDR_gv_Avalax) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitXPGetCurrentLevel(libRWDR_gv_Avalax, null) < libRWDR_gv_avalaxMAXLevel)) {
        if (((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            lv_eXP = 5.0;
        }
        else {
            if (((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true) || (UnitGetType(EventUnit()) == "OverlordTransport") || (UnitGetType(EventUnit()) == "Overlord"))) {
                lv_eXP = 3.0;
            }
            else {
                lv_eXP = AbsF(UnitGetPropertyFixed(EventUnit(), c_unitPropSuppliesUsed, c_unitPropCurrent));
            }
        }
        UnitXPAddXP(libRWDR_gv_Avalax, null, lv_eXP);
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_AvalaxGainXP_Init () {
    libRWDR_gt_AvalaxGainXP = TriggerCreate("libRWDR_gt_AvalaxGainXP_Func");
    TriggerEnable(libRWDR_gt_AvalaxGainXP, false);
    TriggerAddEventUnitDied(libRWDR_gt_AvalaxGainXP, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Barry Gain XP 
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_BarryGainXP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_eXP;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(libRWDR_gv_BarryClark), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(libRWDR_gv_BarryClark, RegionCircle(UnitGetPosition(EventUnit()), 15.0)) == true))) {
            return false;
        }

        if (!((UnitIsAlive(libRWDR_gv_BarryClark) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitXPGetCurrentLevel(libRWDR_gv_BarryClark, null) < libRWDR_gv_barryMAXLevel)) {
        if (((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            lv_eXP = 5.0;
        }
        else {
            if (((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true) || (UnitGetType(EventUnit()) == "OverlordTransport") || (UnitGetType(EventUnit()) == "Overlord"))) {
                lv_eXP = 3.0;
            }
            else {
                lv_eXP = AbsF(UnitGetPropertyFixed(EventUnit(), c_unitPropSuppliesUsed, c_unitPropCurrent));
            }
        }
        UnitXPAddXP(libRWDR_gv_BarryClark, null, lv_eXP);
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_BarryGainXP_Init () {
    libRWDR_gt_BarryGainXP = TriggerCreate("libRWDR_gt_BarryGainXP_Func");
    TriggerEnable(libRWDR_gt_BarryGainXP, false);
    TriggerAddEventUnitDied(libRWDR_gt_BarryGainXP, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Byron Gain XP
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_ByronGainXP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_eXP;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(libRWDR_gv_ByronKane), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(libRWDR_gv_ByronKane, RegionCircle(UnitGetPosition(EventUnit()), 15.0)) == true))) {
            return false;
        }

        if (!((UnitIsAlive(libRWDR_gv_ByronKane) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitXPGetCurrentLevel(libRWDR_gv_ByronKane, null) < libRWDR_gv_byronKaneMAXLevel)) {
        if (((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            lv_eXP = 5.0;
        }
        else {
            if (((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true) || (UnitGetType(EventUnit()) == "OverlordTransport") || (UnitGetType(EventUnit()) == "Overlord"))) {
                lv_eXP = 3.0;
            }
            else {
                lv_eXP = AbsF(UnitGetPropertyFixed(EventUnit(), c_unitPropSuppliesUsed, c_unitPropCurrent));
            }
        }
        UnitXPAddXP(libRWDR_gv_ByronKane, null, lv_eXP);
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_ByronGainXP_Init () {
    libRWDR_gt_ByronGainXP = TriggerCreate("libRWDR_gt_ByronGainXP_Func");
    TriggerEnable(libRWDR_gt_ByronGainXP, false);
    TriggerAddEventUnitDied(libRWDR_gt_ByronGainXP, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Eledis Gain XP
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_EledisGainXP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_eXP;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(libRWDR_gv_Eledis), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(libRWDR_gv_Eledis, RegionCircle(UnitGetPosition(EventUnit()), 15.0)) == true))) {
            return false;
        }

        if (!((UnitIsAlive(libRWDR_gv_Eledis) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitXPGetCurrentLevel(libRWDR_gv_Eledis, null) < libRWDR_gv_eledisMAXLevel)) {
        if (((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            lv_eXP = 5.0;
        }
        else {
            if (((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true) || (UnitGetType(EventUnit()) == "OverlordTransport") || (UnitGetType(EventUnit()) == "Overlord"))) {
                lv_eXP = 3.0;
            }
            else {
                lv_eXP = AbsF(UnitGetPropertyFixed(EventUnit(), c_unitPropSuppliesUsed, c_unitPropCurrent));
            }
        }
        UnitXPAddXP(libRWDR_gv_Eledis, null, lv_eXP);
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_EledisGainXP_Init () {
    libRWDR_gt_EledisGainXP = TriggerCreate("libRWDR_gt_EledisGainXP_Func");
    TriggerEnable(libRWDR_gt_EledisGainXP, false);
    TriggerAddEventUnitDied(libRWDR_gt_EledisGainXP, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tolaris Revive Update
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_TolarisReviveUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libRWDR_gv_tolarisisDead == true))) {
            return false;
        }

        if (!((PlayerGetCooldown(libRWDR_gv_tolarisRevivePlayer, "Abil/TolarisRevive") == 0.0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(libRWDR_gv_tolarisCocoon, libNtve_gf_ReviveOrderWithNoTarget(AbilityCommand("TolarisRevive", 0), libRWDR_gv_tolarisUnit), c_orderQueueReplace);
    Wait(0.125, c_timeGame);
    libRWDR_gv_Tolaris = libRWDR_gv_tolarisUnit;
    UnitSelect(libRWDR_gv_Tolaris, libRWDR_gv_tolarisRevivePlayer, true);
    UnitKill(libRWDR_gv_tolarisCocoon);
    libRWDR_gv_tolarisisDead = false;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_RWDR_197BF4FF"));
    UnitSetTeamColorIndex(libRWDR_gv_Tolaris, 16);
    UnitBehaviorAdd(libRWDR_gv_Tolaris, "Tolaris11Behavior", libRWDR_gv_Tolaris, 1);
    TriggerEnable(libRWDR_gt_ToarisGainXP, true);
    libNtve_gf_SendActorMessageToUnit(libRWDR_gv_Tolaris, "Signal HeroRevive");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_TolarisReviveUpdate_Init () {
    libRWDR_gt_TolarisReviveUpdate = TriggerCreate("libRWDR_gt_TolarisReviveUpdate_Func");
    TriggerEnable(libRWDR_gt_TolarisReviveUpdate, false);
    TriggerAddEventTimePeriodic(libRWDR_gt_TolarisReviveUpdate, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Delanar Revive Update
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_DelanarReviveUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libRWDR_gv_delanarisDead == true))) {
            return false;
        }

        if (!((PlayerGetCooldown(libRWDR_gv_delanarRevivePlayer, "Abil/DelanarRevive") == 0.0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(libRWDR_gv_delanarCocoon, libNtve_gf_ReviveOrderWithNoTarget(AbilityCommand("DelanarRevive", 0), libRWDR_gv_delanarUnit), c_orderQueueReplace);
    Wait(0.125, c_timeGame);
    libRWDR_gv_Delanar = libRWDR_gv_delanarUnit;
    UnitSelect(libRWDR_gv_Delanar, libRWDR_gv_delanarRevivePlayer, true);
    UnitKill(libRWDR_gv_delanarCocoon);
    libRWDR_gv_delanarisDead = false;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_RWDR_0695751E"));
    UnitSetTeamColorIndex(libRWDR_gv_Delanar, 5);
    TriggerEnable(libRWDR_gt_DelanarGainXP, true);
    libNtve_gf_SendActorMessageToUnit(libRWDR_gv_Delanar, "Signal HeroRevive");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_DelanarReviveUpdate_Init () {
    libRWDR_gt_DelanarReviveUpdate = TriggerCreate("libRWDR_gt_DelanarReviveUpdate_Func");
    TriggerEnable(libRWDR_gt_DelanarReviveUpdate, false);
    TriggerAddEventTimePeriodic(libRWDR_gt_DelanarReviveUpdate, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Byron Revive Update
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_ByronReviveUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libRWDR_gv_byronisDead == true))) {
            return false;
        }

        if (!((PlayerGetCooldown(libRWDR_gv_byronRevivePlayer, "Abil/StukovRevive") == 0.0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(libRWDR_gv_byronCocoon, libNtve_gf_ReviveOrderWithNoTarget(AbilityCommand("StukovRevive", 0), libRWDR_gv_byronUnit), c_orderQueueReplace);
    Wait(0.125, c_timeGame);
    libRWDR_gv_ByronKane = libRWDR_gv_byronUnit;
    UnitSelect(libRWDR_gv_ByronKane, libRWDR_gv_byronRevivePlayer, true);
    UnitKill(libRWDR_gv_byronCocoon);
    libRWDR_gv_byronisDead = false;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_RWDR_8D4CDAC1"));
    UnitSetTeamColorIndex(libRWDR_gv_ByronKane, 6);
    TriggerEnable(libRWDR_gt_ByronGainXP, true);
    libNtve_gf_SendActorMessageToUnit(libRWDR_gv_ByronKane, "Signal HeroRevive");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_ByronReviveUpdate_Init () {
    libRWDR_gt_ByronReviveUpdate = TriggerCreate("libRWDR_gt_ByronReviveUpdate_Func");
    TriggerEnable(libRWDR_gt_ByronReviveUpdate, false);
    TriggerAddEventTimePeriodic(libRWDR_gt_ByronReviveUpdate, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Eledis Revive Update
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_EledisReviveUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libRWDR_gv_eledisisDead == true))) {
            return false;
        }

        if (!((PlayerGetCooldown(libRWDR_gv_eledisRevivePlayer, "Abil/EledisRevive") == 0.0))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(libRWDR_gv_eledisCocoon, libNtve_gf_ReviveOrderWithNoTarget(AbilityCommand("EledisRevive", 0), libRWDR_gv_eledisUnit), c_orderQueueReplace);
    Wait(0.125, c_timeGame);
    libRWDR_gv_Eledis = libRWDR_gv_eledisUnit;
    UnitSelect(libRWDR_gv_Eledis, libRWDR_gv_eledisRevivePlayer, true);
    UnitKill(libRWDR_gv_eledisCocoon);
    libRWDR_gv_eledisisDead = false;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_RWDR_396E863B"));
    UnitSetTeamColorIndex(libRWDR_gv_Eledis, 2);
    TriggerEnable(libRWDR_gt_EledisGainXP, true);
    libNtve_gf_SendActorMessageToUnit(libRWDR_gv_Eledis, "Signal HeroRevive");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_EledisReviveUpdate_Init () {
    libRWDR_gt_EledisReviveUpdate = TriggerCreate("libRWDR_gt_EledisReviveUpdate_Func");
    TriggerEnable(libRWDR_gt_EledisReviveUpdate, false);
    TriggerAddEventTimePeriodic(libRWDR_gt_EledisReviveUpdate, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RWDR_HeroReviveUsed
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_RWDR_HeroReviveUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bar;
    abilcmd lv_abilcmd;
    int lv_index;
    int lv_p;
    string lv_unitType;
    unit lv_reviveTarget;
    order lv_orderReal;

    // Automatic Variable Declarations
    string autoFA4F7E77_val;

    // Variable Initialization
    lv_bar = EventUnit();
    lv_abilcmd = OrderGetAbilityCommand(EventUnitOrder());
    lv_index = AbilityCommandGetCommand(lv_abilcmd);
    lv_p = UnitGetOwner(lv_bar);
    lv_unitType = (CatalogFieldValueGet(c_gameCatalogAbil, "TychusFakeReviveTrain", "InfoArray[" + IntToString(lv_index) + "].Unit[" + IntToString(0) + "]", lv_p));
    lv_reviveTarget = UnitGroupUnit(UnitGroup(lv_unitType, lv_p, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterDead - 32)), 0, 0), 1), 1);
    lv_orderReal = libNtve_gf_ReviveOrderWithNoTarget(AbilityCommand("TychusReviveHeroes", 0), lv_reviveTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    while ((TechTreeUnitCount(lv_p, lv_unitType, c_techCountQueuedOrBetter) > 0)) {
        autoFA4F7E77_val = PlayerRace(lv_p);
        if (autoFA4F7E77_val == "Zerg") {
            UnitIssueOrder(lv_bar, Order(AbilityCommand("que5CancelToSelection", 0)), c_orderQueueAddToEnd);
        }
        else if (autoFA4F7E77_val == "Prot") {
            UnitIssueOrder(lv_bar, Order(AbilityCommand("que5Passive", 0)), c_orderQueueAddToEnd);
        }
        else {
        }
    }
    while ((UnitIsValid(lv_reviveTarget) == false)) {
        return true;
    }
    if ((UnitOrderIsValid(lv_bar, lv_orderReal) == true)) {
        UnitIssueOrder(lv_bar, lv_orderReal, c_orderQueueAddToEnd);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(lv_p), StringExternal("Param/Value/lib_RWDR_1880D917"), SoundLink("UI_GenericError", -1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_RWDR_HeroReviveUsed_Init () {
    libRWDR_gt_RWDR_HeroReviveUsed = TriggerCreate("libRWDR_gt_RWDR_HeroReviveUsed_Func");
    TriggerEnable(libRWDR_gt_RWDR_HeroReviveUsed, false);
    TriggerAddEventUnitOrder(libRWDR_gt_RWDR_HeroReviveUsed, null, AbilityCommand("TychusFakeReviveTrain", 255));
}

//--------------------------------------------------------------------------------------------------
// Trigger: RWDR_HeroReviveFailSafe
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_RWDR_HeroReviveFailSafe_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_fakeUnit;
    int lv_p;
    string lv_unitType;
    unitgroup lv_unitTypeGroup;
    unit lv_reviveTarget;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fakeUnit = EventUnitCreatedUnit();
    lv_p = UnitGetOwner(lv_fakeUnit);
    lv_unitType = UnitGetType(EventUnitCreatedUnit());
    lv_unitTypeGroup = UnitGroup(lv_unitType, lv_p, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_RWDR_E0672C39"), true);
    }

    UnitGroupRemove(lv_unitTypeGroup, lv_fakeUnit);
    lv_reviveTarget = UnitGroupUnit(lv_unitTypeGroup, 1);
    if ((UnitIsValid(lv_reviveTarget) == true)) {
        UnitSetPosition(lv_reviveTarget, UnitGetPosition(lv_fakeUnit), false);
        UnitRevive(lv_reviveTarget);
        UnitSetPropertyFixed(lv_reviveTarget, c_unitPropLifePercent, 100.0);
    }

    UnitRemove(lv_fakeUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_RWDR_HeroReviveFailSafe_Init () {
    libRWDR_gt_RWDR_HeroReviveFailSafe = TriggerCreate("libRWDR_gt_RWDR_HeroReviveFailSafe_Func");
    TriggerEnable(libRWDR_gt_RWDR_HeroReviveFailSafe, false);
    TriggerAddEventUnitCreated(libRWDR_gt_RWDR_HeroReviveFailSafe, null, "TychusFakeReviveTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroReviveFinished
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_HeroReviveFinished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_revivehero;

    // Automatic Variable Declarations
    string autoBECE5099_val;

    // Variable Initialization
    lv_revivehero = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    autoBECE5099_val = UnitGetType(lv_revivehero);
    if (autoBECE5099_val == "Tolaris") {
        libRWDR_gv_Tolaris = lv_revivehero;
        libRWDR_gv_tolarisisDead = false;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_RWDR_34374934"));
        UnitSetTeamColorIndex(libRWDR_gv_Tolaris, 16);
        UnitBehaviorAdd(libRWDR_gv_Tolaris, "Tolaris11Behavior", libRWDR_gv_Tolaris, 1);
        TriggerEnable(libRWDR_gt_ToarisGainXP, true);
    }
    else if (autoBECE5099_val == "Delanar") {
        libRWDR_gv_Delanar = lv_revivehero;
        libRWDR_gv_delanarisDead = false;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_RWDR_8DF56893"));
        UnitSetTeamColorIndex(libRWDR_gv_Delanar, 5);
        TriggerEnable(libRWDR_gt_DelanarGainXP, true);
    }
    else if (autoBECE5099_val == "Avalax") {
        libRWDR_gv_Avalax = lv_revivehero;
        libRWDR_gv_avalaxisDead = false;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_RWDR_274B6FED"));
        UnitSetTeamColorIndex(libRWDR_gv_Avalax, 3);
        TriggerEnable(libRWDR_gt_AvalaxGainXP, true);
    }
    else if (autoBECE5099_val == "ByronKane") {
        libRWDR_gv_ByronKane = lv_revivehero;
        libRWDR_gv_byronisDead = false;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_RWDR_0C1B956A"));
        UnitSetTeamColorIndex(libRWDR_gv_ByronKane, 6);
        TriggerEnable(libRWDR_gt_ByronGainXP, true);
    }
    else if (autoBECE5099_val == "Eledis") {
        libRWDR_gv_Eledis = lv_revivehero;
        libRWDR_gv_eledisisDead = false;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_RWDR_C63B92F6"));
        UnitSetTeamColorIndex(libRWDR_gv_Eledis, 2);
        TriggerEnable(libRWDR_gt_EledisGainXP, true);
    }
    else {
    }
    libNtve_gf_SendActorMessageToUnit(lv_revivehero, "Signal HeroRevive");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_HeroReviveFinished_Init () {
    libRWDR_gt_HeroReviveFinished = TriggerCreate("libRWDR_gt_HeroReviveFinished_Func");
    TriggerEnable(libRWDR_gt_HeroReviveFinished, false);
    TriggerAddEventPlayerEffectUsed(libRWDR_gt_HeroReviveFinished, c_playerAny, "TolarisReviveHeal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mission Time Trig
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_MissionTimeTrig_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        libRWDR_gv_stats_MissionTime += 1.0;
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_MissionTimeTrig_Init () {
    libRWDR_gt_MissionTimeTrig = TriggerCreate("libRWDR_gt_MissionTimeTrig_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill and Lost Count
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_KillandLostCount_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "ZeratulStalkerGhost"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == 1) && (UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterHidden - 32)))) == true) && (EventUnitDamageDeathCheck(c_deathTypeRemove) == false) && (UnitGetType(EventUnit()) != "Egg") && (UnitGetType(EventUnit()) != "RavagerImitatorCocoon") && (UnitGetType(EventUnit()) != "BanelingCocoonImitator") && (UnitGetType(EventUnit()) != "ImpalerEgg2")) {
        libRWDR_gv_stats_UnitLost += 1;
        return true;
    }

    if ((libNtve_gf_KillingPlayer() == 1) && (UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterHidden - 32)))) == true)) {
        libRWDR_gv_stats_TotalKill += 1;
        if (((UnitGetType(libNtve_gf_KillingUnit()) == "Tolaris") || (UnitGetType(libNtve_gf_KillingUnit()) == "Delanar") || (UnitGetType(libNtve_gf_KillingUnit()) == "Avalax") || (UnitGetType(libNtve_gf_KillingUnit()) == "MothershipAvalax") || (UnitGetType(libNtve_gf_KillingUnit()) == "VoidRayAvalax") || (UnitGetType(libNtve_gf_KillingUnit()) == "ByronKane") || (UnitGetType(libNtve_gf_KillingUnit()) == "ByronInfestedTerran") || (UnitGetType(libNtve_gf_KillingUnit()) == "ByronInfestedTerranLV2") || (UnitGetType(libNtve_gf_KillingUnit()) == "ByronInfestedTerranLV3") || (UnitGetType(libNtve_gf_KillingUnit()) == "StukovApocalisk") || (UnitGetType(libNtve_gf_KillingUnit()) == "Eledis") || (UnitGetType(libNtve_gf_KillingUnit()) == "EledisTurretLV1") || (UnitGetType(libNtve_gf_KillingUnit()) == "EledisTurretLV2") || (UnitGetType(libNtve_gf_KillingUnit()) == "EledisTurretLV3"))) {
            libRWDR_gv_stats_HeroKill += 1;
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_KillandLostCount_Init () {
    libRWDR_gt_KillandLostCount = TriggerCreate("libRWDR_gt_KillandLostCount_Func");
    TriggerEnable(libRWDR_gt_KillandLostCount, false);
    TriggerAddEventUnitDied(libRWDR_gt_KillandLostCount, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Scorescreen Achi Tooltip
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_ShowScorescreenAchiTooltip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoF9438719_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoF9438719_val = EventDialogControl();
    if (autoF9438719_val == libRWDR_gv_scoreScreenPanel.lv_achievementPanel[1]) {
        DialogControlSetVisible(libRWDR_gv_scoreScreenPanel.lv_achievementTooltip[1], PlayerGroupAll(), true);
    }
    else if (autoF9438719_val == libRWDR_gv_scoreScreenPanel.lv_achievementPanel[2]) {
        DialogControlSetVisible(libRWDR_gv_scoreScreenPanel.lv_achievementTooltip[2], PlayerGroupAll(), true);
    }
    else if (autoF9438719_val == libRWDR_gv_scoreScreenPanel.lv_achievementPanel[3]) {
        DialogControlSetVisible(libRWDR_gv_scoreScreenPanel.lv_achievementTooltip[3], PlayerGroupAll(), true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_ShowScorescreenAchiTooltip_Init () {
    libRWDR_gt_ShowScorescreenAchiTooltip = TriggerCreate("libRWDR_gt_ShowScorescreenAchiTooltip_Func");
    TriggerEnable(libRWDR_gt_ShowScorescreenAchiTooltip, false);
    TriggerAddEventDialogControl(libRWDR_gt_ShowScorescreenAchiTooltip, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hide Scorescreen Achi Tooltip
//--------------------------------------------------------------------------------------------------
bool libRWDR_gt_HideScorescreenAchiTooltip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto767CF1F6_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto767CF1F6_val = EventDialogControl();
    if (auto767CF1F6_val == libRWDR_gv_scoreScreenPanel.lv_achievementPanel[1]) {
        DialogControlSetVisible(libRWDR_gv_scoreScreenPanel.lv_achievementTooltip[1], PlayerGroupAll(), false);
    }
    else if (auto767CF1F6_val == libRWDR_gv_scoreScreenPanel.lv_achievementPanel[2]) {
        DialogControlSetVisible(libRWDR_gv_scoreScreenPanel.lv_achievementTooltip[2], PlayerGroupAll(), false);
    }
    else if (auto767CF1F6_val == libRWDR_gv_scoreScreenPanel.lv_achievementPanel[3]) {
        DialogControlSetVisible(libRWDR_gv_scoreScreenPanel.lv_achievementTooltip[3], PlayerGroupAll(), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRWDR_gt_HideScorescreenAchiTooltip_Init () {
    libRWDR_gt_HideScorescreenAchiTooltip = TriggerCreate("libRWDR_gt_HideScorescreenAchiTooltip_Func");
    TriggerEnable(libRWDR_gt_HideScorescreenAchiTooltip, false);
    TriggerAddEventDialogControl(libRWDR_gt_HideScorescreenAchiTooltip, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

void libRWDR_InitTriggers () {
    libRWDR_gt_ImitatorZergArmorSwitch_Init();
    libRWDR_gt_BacktoLauncherProtoss_Init();
    libRWDR_gt_BacktoLauncherZerg_Init();
    libRWDR_gt_ShowMenuOnEsc_Init();
    libRWDR_gt_InitAchievement_Init();
    libRWDR_gt_PU_BossBarFocusOnTarget_Init();
    libRWDR_gt_PU_BB_BossHPChanged_Init();
    libRWDR_gt_PU_BB_LoadUpdate_Init();
    libRWDR_gt_TextCrawlSound_Init();
    libRWDR_gt_SwarmPingSound_Init();
    libRWDR_gt_SCMR_PanelBirth_Init();
    libRWDR_gt_SCMR_PanelRemove_Init();
    libRWDR_gt_SCMR_SoaVitalCharges_Init();
    libRWDR_gt_PU_TimerWindowFlash_Init();
    libRWDR_gt_PU_TimerWindowThresholdCrossed_Init();
    libRWDR_gt_PU_TimerWindowLoadUpdate_Init();
    libRWDR_gt_scmr_HeroDebugSetWidth_Init();
    libRWDR_gt_SCMR_HeroDebugSetHeightL_Init();
    libRWDR_gt_SCMR_HeroDebugSetHeightS_Init();
    libRWDR_gt_SCMR_HeroDebugSetHeightE_Init();
    libRWDR_gt_SCMR_HeroPanelUpdate_Init();
    libRWDR_gt_SCMR_HeroPanelUpdate2_Init();
    libRWDR_gt_SCMR_VoidHeroUIUnitDamaged_Init();
    libRWDR_gt_SCMR_HeroUIUnitVitalChange_Init();
    libRWDR_gt_SCMR_HeroUIMouseHoverText_Init();
    libRWDR_gt_SOTP_MutatorListNotificationExpired_Init();
    libRWDR_gt_TalentPanelController_Init();
    libRWDR_gt_RWDR_SoATimeFreezeCast_Init();
    libRWDR_gt_SCMR_ZergDropPod_Init();
    libRWDR_gt_SCMR_TerranDropPod_Init();
    libRWDR_gt_EnemyHeroAbilityGCD_Init();
    libRWDR_gt_ApocaliskLifeandArmor_Init();
    libRWDR_gt_DelanarExtra_Init();
    libRWDR_gt_BarryE_Init();
    libRWDR_gt_Fenix11_Init();
    libRWDR_gt_AvalaxCharging_Init();
    libRWDR_gt_AvalaxUpgrade04Trig_Init();
    libRWDR_gt_SigniferAutoCastHeal_Init();
    libRWDR_gt_SigniferAutoCastMindPower_Init();
    libRWDR_gt_TeburusGuardianShield_Init();
    libRWDR_gt_UnholyBladesUsed_Init();
    libRWDR_gt_BlackDeathCustomValue_Init();
    libRWDR_gt_PlagueUnitDeath_Init();
    libRWDR_gt_ClosePlagueTrig_Init();
    libRWDR_gt_RemovePlagueRestore_Init();
    libRWDR_gt_KerriganEFearEffect2_Init();
    libRWDR_gt_ZortalasKillLaziotImmortal_Init();
    libRWDR_gt_ZortalasFury_Init();
    libRWDR_gt_ZortalasCancelAvalaxChannel_Init();
    libRWDR_gt_KerriganEFearEffect4_Init();
    libRWDR_gt_CreepTumorExhausted_Init();
    libRWDR_gt_LifeHeal_Init();
    libRWDR_gt_EnergyRestore_Init();
    libRWDR_gt_KerriganEFearEffect3_Init();
    libRWDR_gt_InfestedTerransRandomSpawn_Init();
    libRWDR_gt_InfestedTerranRemoveInvernable_Init();
    libRWDR_gt_InfestedHercRemoveInvernableExtra_Init();
    libRWDR_gt_VorazunFakeShadowFury_Init();
    libRWDR_gt_ShadowUnitRemoveDebug_Init();
    libRWDR_gt_VorazunPassive_Init();
    libRWDR_gt_MoriyVoidServant_Init();
    libRWDR_gt_KerriganEFearEffect5_Init();
    libRWDR_gt_MoriyVoidCloud_Init();
    libRWDR_gt_MoriyCreaturesFollow_Init();
    libRWDR_gt_MoriyVoidArrow_Init();
    libRWDR_gt_DelanarGainXP_Init();
    libRWDR_gt_ToarisGainXP_Init();
    libRWDR_gt_AvalaxGainXP_Init();
    libRWDR_gt_BarryGainXP_Init();
    libRWDR_gt_ByronGainXP_Init();
    libRWDR_gt_EledisGainXP_Init();
    libRWDR_gt_TolarisReviveUpdate_Init();
    libRWDR_gt_DelanarReviveUpdate_Init();
    libRWDR_gt_ByronReviveUpdate_Init();
    libRWDR_gt_EledisReviveUpdate_Init();
    libRWDR_gt_RWDR_HeroReviveUsed_Init();
    libRWDR_gt_RWDR_HeroReviveFailSafe_Init();
    libRWDR_gt_HeroReviveFinished_Init();
    libRWDR_gt_MissionTimeTrig_Init();
    libRWDR_gt_KillandLostCount_Init();
    libRWDR_gt_ShowScorescreenAchiTooltip_Init();
    libRWDR_gt_HideScorescreenAchiTooltip_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libRWDR_InitLib_completed = false;

void libRWDR_InitLib () {
    if (libRWDR_InitLib_completed) {
        return;
    }

    libRWDR_InitLib_completed = true;

    libRWDR_InitLibraries();
    libRWDR_InitVariables();
    libRWDR_InitTriggers();
}

