include "TriggerLibs/NativeLib"
include "LibUEDC"
include "LibDRAG"
include "LibNHBR"
include "LibUPLR"
include "LibARMB_h"
include "LibARZM_h"

include "LibARMP_h"

//--------------------------------------------------------------------------------------------------
// Library: ALL RACES
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libARMP_InitLibraries () {
    libNtve_InitVariables();
    libUEDC_InitVariables();
    libNHBR_InitVariables();
    libUPLR_InitVariables();
    libARMB_InitVariables();
    libARZM_InitVariables();
}

// Variable Initialization
bool libARMP_InitVariables_completed = false;

void libARMP_InitVariables () {
    int init_i;

    if (libARMP_InitVariables_completed) {
        return;
    }

    libARMP_InitVariables_completed = true;

    libARMP_gv_ijorltfigcxilosv = 200;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        libARMP_gv_raceChoice[init_i] = libARMP_ge_RaceChoice_Observer;
    }
}

// Presets
// Functions
void libARMP_gf_InitializeMeleeGame () {
    // Automatic Variable Declarations
    playergroup auto2E645AB3_g;
    int auto2E645AB3_var;

    // Implementation
    auto2E645AB3_g = PlayerGroupAll();
    auto2E645AB3_var = -1;
    while (true) {
        auto2E645AB3_var = PlayerGroupNextPlayer(auto2E645AB3_g, auto2E645AB3_var);
        if (auto2E645AB3_var < 0) { break; }
        if ((libARMP_gv_raceChoice[auto2E645AB3_var] != libARMP_ge_RaceChoice_Observer)) {
            if ((libARMB_gv_monobattleMode != libARMB_ge_MonobattleMode_None)) {
                PlayerSetRace(auto2E645AB3_var, libARMP_gf_GetPlayerRaceChoice(auto2E645AB3_var));
            }
            else {
                libARMP_gf_ApplyPlayerCustomRace(auto2E645AB3_var, libARMP_gf_GetPlayerRaceChoice(auto2E645AB3_var));
            }
        }

    }
    if (true) {
    }

    if (true) {
    }

    TriggerExecute(libARMP_gt_ApplyMaximumSuppliesLimit, true, false);
    if ((libARZM_gv_okunxwgidxvfvvnp > 0)) {
        TriggerExecute(libARZM_gt_RunZombiecatastrophe, true, false);
    }

    if ((libARMB_gv_monobattleMode != libARMB_ge_MonobattleMode_None)) {
        TriggerExecute(libARMB_gt_RunMonobattle, true, false);
    }
    else {
        TriggerExecute(libARMP_gt_CreateStartingUnitsForPlayers, true, false);
    }
}

void libARMP_gf_RestrictRace (int lp_race) {
    // Automatic Variable Declarations
    int autoF73332B2_val;

    // Implementation
    autoF73332B2_val = lp_race;
    if (autoF73332B2_val == libARMP_ge_RaceChoice_Dragon) {
        libARMP_gv_vRaces.lv_dragon = false;
    }
    else if (autoF73332B2_val == libARMP_ge_RaceChoice_Hybrids) {
        libARMP_gv_vRaces.lv_hybrids = false;
    }
    else if (autoF73332B2_val == libARMP_ge_RaceChoice_UED) {
        libARMP_gv_vRaces.lv_uED = false;
    }
    else if (autoF73332B2_val == libARMP_ge_RaceChoice_UPL) {
        libARMP_gv_vRaces.lv_uED = false;
    }
    else if (autoF73332B2_val == libARMP_ge_RaceChoice_Zerg) {
        libARMP_gv_vRaces.lv_zerg = false;
    }
    else if (autoF73332B2_val == libARMP_ge_RaceChoice_Terran) {
        libARMP_gv_vRaces.lv_terran = false;
    }
    else if (autoF73332B2_val == libARMP_ge_RaceChoice_Protoss) {
        libARMP_gv_vRaces.lv_protoss = false;
    }
    else if (autoF73332B2_val == libARMP_ge_RaceChoice_Xayid) {
        libARMP_gv_vRaces.lv_xayid = false;
    }
    else if (autoF73332B2_val == libARMP_ge_RaceChoice_Keiron) {
        libARMP_gv_vRaces.lv_keiron = false;
    }
    else if (autoF73332B2_val == libARMP_ge_RaceChoice_Genetron) {
        libARMP_gv_vRaces.lv_genetron = false;
    }
    else {
    }
}

void libARMP_gf_AllowAllRaces () {
    // Automatic Variable Declarations
    // Implementation
    libARMP_gv_vRaces.lv_dragon = true;
    libARMP_gv_vRaces.lv_hybrids = true;
    libARMP_gv_vRaces.lv_uED = true;
    libARMP_gv_vRaces.lv_uPL = true;
    libARMP_gv_vRaces.lv_zerg = true;
    libARMP_gv_vRaces.lv_terran = true;
    libARMP_gv_vRaces.lv_protoss = true;
    libARMP_gv_vRaces.lv_xayid = true;
    libARMP_gv_vRaces.lv_keiron = true;
    libARMP_gv_vRaces.lv_genetron = true;
}

void libARMP_gf_SetInitialResources (int lp_minerals, int lp_vespene) {
    // Automatic Variable Declarations
    // Implementation
}

void libARMP_gf_SetMonobattleMode (int lp_draftmode) {
    // Automatic Variable Declarations
    // Implementation
    libARMB_gv_monobattleMode = lp_draftmode;
}

void libARMP_gf_SetInfestedDifficulty (fixed lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    libARZM_gv_okunxwgidxvfvvnp = CeilingI(lp_difficulty);
}

void libARMP_gf_SetEnemyBounty (fixed lp_minerals, fixed lp_vespene) {
    // Automatic Variable Declarations
    // Implementation
    libARZM_gv_wxnmhitqpcidoywc = CeilingI(lp_minerals);
    libARZM_gv_oiyfrdmkcsvlnmto = CeilingI(lp_vespene);
}

void libARMP_gf_SetInfestedBounty (fixed lp_minerals, fixed lp_vespene) {
    // Automatic Variable Declarations
    // Implementation
    libARZM_gv_heqkteoxpmtafqim = CeilingI(lp_minerals);
    libARZM_gv_hvwseiqqxowffjfn = CeilingI(lp_vespene);
}

void libARMP_gf_SetHarvestableResourcesType (int lp_value) {
    // Automatic Variable Declarations
    // Implementation
}

void libARMP_gf_SetHarvestableResourcesAmount (fixed lp_value) {
    // Automatic Variable Declarations
    // Implementation
}

void libARMP_gf_SetPlayerRaceChoice (int lp_player, int lp_race) {
    // Automatic Variable Declarations
    // Implementation
    libARMP_gv_raceChoice[lp_player] = lp_race;
}

void libARMP_gf_SetPlayerRole (int lp_player, int lp_role) {
    // Automatic Variable Declarations
    // Implementation
}

void libARMP_gf_SetWorkersMode (int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARMP_gv_eagfhilhpquuxlod = lp_value;
}

void libARMP_gf_SetMaximumSupplies (int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARMP_gv_ijorltfigcxilosv = lp_value;
}

void libARMP_gf_SetPeepMode (int lp_mode, bool lp_autodetectpoint) {
    // Variable Declarations
    point lv_fysjxkbjhdpkhljt;

    // Automatic Variable Declarations
    playergroup auto59C6A8CC_g;
    int auto59C6A8CC_var;

    // Variable Initialization

    // Implementation
    if ((lp_autodetectpoint == true)) {
        auto59C6A8CC_g = PlayerGroupAll();
        auto59C6A8CC_var = -1;
        while (true) {
            auto59C6A8CC_var = PlayerGroupNextPlayer(auto59C6A8CC_g, auto59C6A8CC_var);
            if (auto59C6A8CC_var < 0) { break; }
            lv_fysjxkbjhdpkhljt = PlayerStartLocation(auto59C6A8CC_var);
            if ((lv_fysjxkbjhdpkhljt != null)) {
                libARMP_gf_SetPeepModePoint(auto59C6A8CC_var, 1, lv_fysjxkbjhdpkhljt, lv_fysjxkbjhdpkhljt, lv_fysjxkbjhdpkhljt, lv_fysjxkbjhdpkhljt);
            }
            else {
                break;
            }
        }
    }

}

void libARMP_gf_SetPeepModeSettings (text lp_name, int lp_maxXCoordinate, int lp_overlayWidth, int lp_overlayHeight, int lp_spawnStyle) {
    // Variable Declarations
    int lv_grbahjlxnunjbjlv;

    // Automatic Variable Declarations
    int autoAE6D54C4_val;

    // Variable Initialization

    // Implementation
    autoAE6D54C4_val = lp_spawnStyle;
    if (autoAE6D54C4_val == libARMP_ge_MapSpawnType_Random) {
    }
    else if (autoAE6D54C4_val == libARMP_ge_MapSpawnType_noclosebyground) {
    }
    else if (autoAE6D54C4_val == libARMP_ge_MapSpawnType_crossmap) {
    }
    else {
    }
}

void libARMP_gf_SetPeepModePoint (int lp_player, int lp_index, point lp_startingPoint, point lp_basePoint, point lp_welcomePoint, point lp_naturalPoint) {
    // Automatic Variable Declarations
    // Implementation
    if (true) {
    }

    if (true) {
    }

}

void libARMP_gf_SetPeepModeFaceOffPoint (int lp_index, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    if (true) {
    }

}

void libARMP_gf_SetPeepModeMatchModeOrder (int lp_matchMode, int lp_orderList) {
    // Automatic Variable Declarations
    // Implementation
    if (true) {
    }

}

void libARMP_gf_CreateStartingUnitsForPlayer (int lp_player, point lp_location) {
    // Variable Declarations
    point lv_sfhilkonqtaqgxea;
    string lv_xxeftcvodymuqkuj;
    unitgroup lv_rdtumpdrwxbkanud;
    unit lv_micimrorewfywjfp;
    unit lv_prxrvwyedlknoqhl;
    string lv_xhtuxevgvfbsrgyr;
    string lv_lluoltanjhylyoxs;
    string lv_eujcrudhcntmxohh;
    string[13] lv_iyrngjleghvmeyqn;
    int lv_yfhantvioudkoxwt;
    string lv_luqlaphbmhcsxsmb;
    string lv_aivejendchvfmalq;
    unitgroup lv_ppypadjhyptphdkh;
    string lv_eumpfhprcllvfbhn;
    abilcmd lv_lcnydwybmqsssrme;

    // Automatic Variable Declarations
    int autoBC9ACFFA_ae;
    int autoBC9ACFFA_var;
    string autoBEA5E642_val;
    int auto80839633_val;
    const int auto69E691D0_ae = 11;
    const int auto69E691D0_ai = 1;

    // Variable Initialization
    lv_sfhilkonqtaqgxea = lp_location;
    lv_rdtumpdrwxbkanud = UnitGroupEmpty();
    lv_luqlaphbmhcsxsmb = PlayerRace(lp_player);
    lv_ppypadjhyptphdkh = UnitGroup(null, c_playerAny, RegionCircle(lv_sfhilkonqtaqgxea, 10.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Implementation
    autoBC9ACFFA_ae = UserDataInstanceCount("Rules");
    autoBC9ACFFA_var = 1;
    for ( ; autoBC9ACFFA_var <= autoBC9ACFFA_ae; autoBC9ACFFA_var += 1 ) {
        lv_aivejendchvfmalq = UserDataInstance("Rules", autoBC9ACFFA_var);
        if ((UserDataGetGameLink("Rules", lv_aivejendchvfmalq, "Race", 1) == lv_luqlaphbmhcsxsmb)) {
            break;
        }

    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, UserDataGetUnit("Rules", lv_aivejendchvfmalq, "TownHall", 1), 0, lp_player, lv_sfhilkonqtaqgxea);
    lv_prxrvwyedlknoqhl = UnitLastCreated();
    lv_micimrorewfywjfp = UnitGroupClosestToPoint(lv_ppypadjhyptphdkh, lv_sfhilkonqtaqgxea);
    lv_lcnydwybmqsssrme = AbilityCommand(libNtve_gf_UnitAbilityGetByType(lv_prxrvwyedlknoqhl, c_classIdCAbilRally, 1), 0);
    UnitGroupIssueOrder(libNtve_gf_ConvertUnitToUnitGroup(lv_prxrvwyedlknoqhl), OrderTargetingUnit(lv_lcnydwybmqsssrme, lv_micimrorewfywjfp), c_orderQueueReplace);
    autoBEA5E642_val = PlayerRace(lp_player);
    if (autoBEA5E642_val == "Zerg") {
        CreepModify(UnitGetPosition(lv_prxrvwyedlknoqhl), 10.0, true, false);
        UnitBehaviorAdd(lv_prxrvwyedlknoqhl, "SpawnLarvaInstant", lv_prxrvwyedlknoqhl, 1);
    }
    else {
    }
    if ((UserDataGetUnit("Rules", lv_aivejendchvfmalq, "Extra", 1) != null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, UserDataGetUnit("Rules", lv_aivejendchvfmalq, "Extra", 1), c_unitCreateIgnorePlacement, lp_player, libNtve_gf_PointOffsetTowardsPoint(UnitGroupCenterOfGroup(lv_ppypadjhyptphdkh), 11.0, lv_sfhilkonqtaqgxea));
    }

    if ((libARMP_gv_eagfhilhpquuxlod == libARMP_ge_WorkersAlliance_All)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "BeaconUED", c_unitCreateIgnorePlacement, lp_player, libNtve_gf_PointOffsetTowardsPoint(UnitGroupCenterOfGroup(lv_ppypadjhyptphdkh), 10.0, lv_sfhilkonqtaqgxea));
    }

    if (((libARMP_gv_eagfhilhpquuxlod == libARMP_ge_WorkersAlliance_All) || (libARMP_gv_eagfhilhpquuxlod == libARMP_ge_WorkersAlliance_Arc))) {
        libARMP_gf_CheckRaceTriggers("UED");
        libARMP_gf_CheckRaceTriggers("NHbr");
        libARMP_gf_CheckRaceTriggers("Dragon");
    }

    lv_xhtuxevgvfbsrgyr = UserDataGetUnit("Rules", lv_aivejendchvfmalq, "Worker", 1);
    auto80839633_val = libARMP_gv_eagfhilhpquuxlod;
    if (auto80839633_val == libARMP_ge_WorkersAlliance_All) {
        lv_iyrngjleghvmeyqn[0] = "Drone";
        lv_iyrngjleghvmeyqn[1] = "SCV";
        lv_iyrngjleghvmeyqn[2] = "Probe";
        lv_iyrngjleghvmeyqn[3] = "Scavenger";
        lv_iyrngjleghvmeyqn[4] = "ACR";
        lv_iyrngjleghvmeyqn[5] = "Converter";
        lv_iyrngjleghvmeyqn[6] = "NHbrMinion";
        lv_iyrngjleghvmeyqn[7] = "Salvager";
        lv_iyrngjleghvmeyqn[8] = "Plodder";
        lv_iyrngjleghvmeyqn[9] = "MiningDrone";
        lv_iyrngjleghvmeyqn[10] = lv_xhtuxevgvfbsrgyr;
        lv_iyrngjleghvmeyqn[11] = lv_xhtuxevgvfbsrgyr;
    }
    else if (auto80839633_val == libARMP_ge_WorkersAlliance_Scion) {
        lv_iyrngjleghvmeyqn[0] = "Converter";
        lv_iyrngjleghvmeyqn[1] = "Converter";
        lv_iyrngjleghvmeyqn[2] = "Converter";
        lv_iyrngjleghvmeyqn[3] = "Converter";
        lv_iyrngjleghvmeyqn[4] = "ACR";
        lv_iyrngjleghvmeyqn[5] = "ACR";
        lv_iyrngjleghvmeyqn[6] = "ACR";
        lv_iyrngjleghvmeyqn[7] = "ACR";
        lv_iyrngjleghvmeyqn[8] = "Scavenger";
        lv_iyrngjleghvmeyqn[9] = "Scavenger";
        lv_iyrngjleghvmeyqn[10] = "Scavenger";
        lv_iyrngjleghvmeyqn[11] = "Scavenger";
    }
    else if (auto80839633_val == libARMP_ge_WorkersAlliance_Arc) {
        lv_iyrngjleghvmeyqn[0] = "Salvager";
        lv_iyrngjleghvmeyqn[1] = "Salvager";
        lv_iyrngjleghvmeyqn[2] = "Salvager";
        lv_iyrngjleghvmeyqn[3] = "Salvager";
        lv_iyrngjleghvmeyqn[4] = "NHbrMinion";
        lv_iyrngjleghvmeyqn[5] = "NHbrMinion";
        lv_iyrngjleghvmeyqn[6] = "NHbrMinion";
        lv_iyrngjleghvmeyqn[7] = "NHbrMinion";
        lv_iyrngjleghvmeyqn[8] = "Plodder";
        lv_iyrngjleghvmeyqn[9] = "Plodder";
        lv_iyrngjleghvmeyqn[10] = "Plodder";
        lv_iyrngjleghvmeyqn[11] = "Plodder";
    }
    else if (auto80839633_val == libARMP_ge_WorkersAlliance_Lotv) {
        lv_iyrngjleghvmeyqn[0] = "Probe";
        lv_iyrngjleghvmeyqn[1] = "Probe";
        lv_iyrngjleghvmeyqn[2] = "Probe";
        lv_iyrngjleghvmeyqn[3] = "Probe";
        lv_iyrngjleghvmeyqn[4] = "Drone";
        lv_iyrngjleghvmeyqn[5] = "Drone";
        lv_iyrngjleghvmeyqn[6] = "Drone";
        lv_iyrngjleghvmeyqn[7] = "Drone";
        lv_iyrngjleghvmeyqn[8] = "SCV";
        lv_iyrngjleghvmeyqn[9] = "SCV";
        lv_iyrngjleghvmeyqn[10] = "SCV";
        lv_iyrngjleghvmeyqn[11] = "SCV";
    }
    else {
        lv_iyrngjleghvmeyqn[0] = lv_xhtuxevgvfbsrgyr;
        lv_iyrngjleghvmeyqn[1] = lv_xhtuxevgvfbsrgyr;
        lv_iyrngjleghvmeyqn[2] = lv_xhtuxevgvfbsrgyr;
        lv_iyrngjleghvmeyqn[3] = lv_xhtuxevgvfbsrgyr;
        lv_iyrngjleghvmeyqn[4] = lv_xhtuxevgvfbsrgyr;
        lv_iyrngjleghvmeyqn[5] = lv_xhtuxevgvfbsrgyr;
        lv_iyrngjleghvmeyqn[6] = lv_xhtuxevgvfbsrgyr;
        lv_iyrngjleghvmeyqn[7] = lv_xhtuxevgvfbsrgyr;
        lv_iyrngjleghvmeyqn[8] = lv_xhtuxevgvfbsrgyr;
        lv_iyrngjleghvmeyqn[9] = lv_xhtuxevgvfbsrgyr;
        lv_iyrngjleghvmeyqn[10] = lv_xhtuxevgvfbsrgyr;
        lv_iyrngjleghvmeyqn[11] = lv_xhtuxevgvfbsrgyr;
    }
    lv_yfhantvioudkoxwt = 0;
    for ( ; ( (auto69E691D0_ai >= 0 && lv_yfhantvioudkoxwt <= auto69E691D0_ae) || (auto69E691D0_ai < 0 && lv_yfhantvioudkoxwt >= auto69E691D0_ae) ) ; lv_yfhantvioudkoxwt += auto69E691D0_ai ) {
        lv_eujcrudhcntmxohh = lv_iyrngjleghvmeyqn[lv_yfhantvioudkoxwt];
        lv_micimrorewfywjfp = UnitGroupRandomUnit(lv_ppypadjhyptphdkh, c_unitCountAlive);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_iyrngjleghvmeyqn[lv_yfhantvioudkoxwt], c_unitCreateIgnorePlacement, lp_player, MidPoint(UnitGetPosition(lv_micimrorewfywjfp), lv_sfhilkonqtaqgxea));
        UnitGroupRemove(lv_ppypadjhyptphdkh, lv_micimrorewfywjfp);
        if ((UnitGroupCount(lv_ppypadjhyptphdkh, c_unitCountAlive) == 0) && (UnitGroupCount(lv_ppypadjhyptphdkh, c_unitCountAlive) == 0)) {
            lv_ppypadjhyptphdkh = UnitGroup(null, c_playerAny, RegionCircle(lv_sfhilkonqtaqgxea, 10.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        }

    }
}

void libARMP_gf_ApplyWorkersAllianceReplace (int lp_player, int lp_preset) {
    // Variable Declarations
    string lv_wfcudxxpkssshsta;
    unitgroup lv_xttkgooettwnkdfn;

    // Automatic Variable Declarations
    string auto388C115D_val;
    int autoD39558E9_val;

    // Variable Initialization
    lv_xttkgooettwnkdfn = UnitGroupEmpty();

    // Deprecated
}

void libARMP_gf_ApplyWorkersAllianceRaceData (int lp_player, int lp_preset) {
    // Variable Declarations
    string lv_macquajalpsoguby;
    unitgroup lv_dotqfditdincfvme;
    string lv_xnernnwsvbokpbhp;
    string lv_fwjmnruujnnvgewc;
    string lv_ulydxfukspyagprh;
    string[13] lv_xrsfmrfotbikruxo;
    int[13] lv_sefpnrsxsbrcjqwr;
    int lv_isnwxrytpeucvnes;
    int lv_qpeaslvjdtebdyue;
    int lv_acnivxecsifrvrin;
    int lv_gmtfwswlvjbabjqu;
    int lv_ogvbqmortvxxesgs;

    // Automatic Variable Declarations
    int autoB3EEB448_val;
    int autoBA6C3CF9_ae;
    const int autoBA6C3CF9_ai = 1;
    const int auto8537221E_ae = 12;
    const int auto8537221E_ai = 1;
    int auto08B5F8EE_ae;
    const int auto08B5F8EE_ai = 1;

    // Variable Initialization
    lv_dotqfditdincfvme = UnitGroupEmpty();
    lv_ulydxfukspyagprh = PlayerRace(lp_player);
    lv_ogvbqmortvxxesgs = CatalogFieldValueCount(c_gameCatalogRace, lv_ulydxfukspyagprh, "StartingUnitArray", lp_player);

    // Deprecated
    CatalogFieldValueSet(c_gameCatalogRace, lv_ulydxfukspyagprh, "StartingUnitArray[" + IntToString(lv_qpeaslvjdtebdyue) + "].Count", lp_player, IntToString(lv_gmtfwswlvjbabjqu));
}

void libARMP_gf_CheckRaceTriggers (string lp_race) {
    // Automatic Variable Declarations
    string auto9F0DAB9D_val;

    // Implementation
    auto9F0DAB9D_val = lp_race;
    if (auto9F0DAB9D_val == "UED") {
        if ((libARMP_gv_uED == false)) {
            libARMP_gv_uED = true;
            TriggerExecute(libUEDC_gt_InitializeUEDRace, true, false);
        }

    }
    else if (auto9F0DAB9D_val == "NHbr") {
        if ((libARMP_gv_hybrids == false)) {
            libARMP_gv_hybrids = true;
            TriggerExecute(libNHBR_gt_InitializeNetworkHybridRace, true, false);
        }

    }
    else if (auto9F0DAB9D_val == "Dragon") {
        if ((libARMP_gv_dragons == false)) {
            libARMP_gv_dragons = true;
            TriggerExecute(libDRAG_gt_InitializeDragonsRace, true, false);
        }

    }
    else if (auto9F0DAB9D_val == "UPL") {
        if ((libARMP_gv_uPL == false)) {
            libARMP_gv_uPL = true;
            TriggerExecute(libUPLR_gt_InitializeUPLRace, true, false);
        }

    }
    else {
    }
}

void libARMP_gf_ApplyChosenRace (int lp_player, int lp_preset) {
    // Variable Declarations
    string lv_ddhowuskwhminvsh;
    string[20] lv_yrshoyfjtpjwafap;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libARMP_gv_raceChoice[lp_player] = lp_preset;
    if ((GameAttributeGameValue("6") == "0001")) {
        PlayerSetRace(lp_player, libARMP_gf_GetPlayerRaceChoice(lp_player));
    }
    else {
        libARMP_gf_ApplyPlayerCustomRace(lp_player, libARMP_gf_GetPlayerRaceChoice(lp_player));
    }
}

string libARMP_gf_GetPlayerRaceChoice (int lp_player) {
    // Variable Declarations
    string lv_yagrpxeiumxkhnyp;
    int lv_splhlfjdgmqtdvvd;
    string[20] lv_panqmedwaolhvamh;

    // Automatic Variable Declarations
    int auto048C1C23_val;

    // Variable Initialization

    // Implementation
    lv_panqmedwaolhvamh[1] = "Zerg";
    lv_panqmedwaolhvamh[2] = "Terr";
    lv_panqmedwaolhvamh[3] = "Prot";
    lv_panqmedwaolhvamh[4] = "Xayi";
    lv_panqmedwaolhvamh[5] = "Gen";
    lv_panqmedwaolhvamh[6] = "Keir";
    lv_panqmedwaolhvamh[7] = "NHbr";
    lv_panqmedwaolhvamh[8] = "UED";
    lv_panqmedwaolhvamh[9] = "Dragon";
    lv_panqmedwaolhvamh[10] = "UPL";
    auto048C1C23_val = libARMP_gv_raceChoice[lp_player];
    if (auto048C1C23_val == libARMP_ge_RaceChoice_Protoss) {
        lv_yagrpxeiumxkhnyp = "Prot";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_Terran) {
        lv_yagrpxeiumxkhnyp = "Terr";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_Zerg) {
        lv_yagrpxeiumxkhnyp = "Zerg";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_Keiron) {
        lv_yagrpxeiumxkhnyp = "Keir";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_Genetron) {
        lv_yagrpxeiumxkhnyp = "Gen";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_Xayid) {
        lv_yagrpxeiumxkhnyp = "Xayi";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_UED) {
        lv_yagrpxeiumxkhnyp = "UED";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_Hybrids) {
        lv_yagrpxeiumxkhnyp = "NHbr";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_Dragon) {
        lv_yagrpxeiumxkhnyp = "Dragon";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_UPL) {
        lv_yagrpxeiumxkhnyp = "UPL";
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_RandomKoprulu) {
        lv_yagrpxeiumxkhnyp = lv_panqmedwaolhvamh[RandomInt(1, 3)];
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_RandomScion) {
        lv_yagrpxeiumxkhnyp = lv_panqmedwaolhvamh[RandomInt(4, 6)];
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_RandomOther) {
        lv_yagrpxeiumxkhnyp = lv_panqmedwaolhvamh[RandomInt(7, 9)];
    }
    else if (auto048C1C23_val == libARMP_ge_RaceChoice_Random) {
        if ((libARMP_gv_acceptedSpecified == true)) {
            if ((libARMP_gv_vRaces.lv_dragon == true)) {
                lv_splhlfjdgmqtdvvd += 1;
                lv_panqmedwaolhvamh[lv_splhlfjdgmqtdvvd] = "Dragon";
            }

            if ((libARMP_gv_vRaces.lv_genetron == true)) {
                lv_splhlfjdgmqtdvvd += 1;
                lv_panqmedwaolhvamh[lv_splhlfjdgmqtdvvd] = "Gen";
            }

            if ((libARMP_gv_vRaces.lv_hybrids == true)) {
                lv_splhlfjdgmqtdvvd += 1;
                lv_panqmedwaolhvamh[lv_splhlfjdgmqtdvvd] = "NHbr";
            }

            if ((libARMP_gv_vRaces.lv_keiron == true)) {
                lv_splhlfjdgmqtdvvd += 1;
                lv_panqmedwaolhvamh[lv_splhlfjdgmqtdvvd] = "Keir";
            }

            if ((libARMP_gv_vRaces.lv_protoss == true)) {
                lv_splhlfjdgmqtdvvd += 1;
                lv_panqmedwaolhvamh[lv_splhlfjdgmqtdvvd] = "Prot";
            }

            if ((libARMP_gv_vRaces.lv_terran == true)) {
                lv_splhlfjdgmqtdvvd += 1;
                lv_panqmedwaolhvamh[lv_splhlfjdgmqtdvvd] = "Terr";
            }

            if ((libARMP_gv_vRaces.lv_zerg == true)) {
                lv_splhlfjdgmqtdvvd += 1;
                lv_panqmedwaolhvamh[lv_splhlfjdgmqtdvvd] = "Zerg";
            }

            if ((libARMP_gv_vRaces.lv_uED == true)) {
                lv_splhlfjdgmqtdvvd += 1;
                lv_panqmedwaolhvamh[lv_splhlfjdgmqtdvvd] = "UED";
            }

            if ((libARMP_gv_vRaces.lv_uPL == true)) {
                lv_splhlfjdgmqtdvvd += 1;
                lv_panqmedwaolhvamh[lv_splhlfjdgmqtdvvd] = "UPL";
            }

            if ((libARMP_gv_vRaces.lv_xayid == true)) {
                lv_splhlfjdgmqtdvvd += 1;
                lv_panqmedwaolhvamh[lv_splhlfjdgmqtdvvd] = "Xayi";
            }

            lv_yagrpxeiumxkhnyp = lv_panqmedwaolhvamh[RandomInt(1, lv_splhlfjdgmqtdvvd)];
        }
        else {
            lv_yagrpxeiumxkhnyp = lv_panqmedwaolhvamh[RandomInt(1, 10)];
        }
    }
    else {
    }
    return lv_yagrpxeiumxkhnyp;
}

bool libARMP_gf_IsRandomRaceChoice (int lp_player) {
    // Automatic Variable Declarations
    int autoD1C45702_val;

    // Implementation
    autoD1C45702_val = libARMP_gv_raceChoice[lp_player];
    if (autoD1C45702_val == libARMP_ge_RaceChoice_RandomOther) {
        return true;
    }
    else if (autoD1C45702_val == libARMP_ge_RaceChoice_RandomKoprulu) {
        return true;
    }
    else if (autoD1C45702_val == libARMP_ge_RaceChoice_RandomScion) {
        return true;
    }
    else if (autoD1C45702_val == libARMP_ge_RaceChoice_Random) {
        return true;
    }
    else {
        return false;
    }
}

int libARMP_gf_GetRacesVariationCount () {
    // Variable Declarations
    bool[9] lv_lpxtjxxtbfkbudco;
    int lv_gtxtsubfbuvnaqxm;
    string lv_jnstojweowokaipv;

    // Automatic Variable Declarations
    playergroup autoE041F39C_g;
    int autoE041F39C_var;

    // Variable Initialization

    // Implementation
    if ((libARMP_gv_acceptedSpecified == true)) {
        if ((libARMP_gv_vRaces.lv_dragon == true)) {
            lv_gtxtsubfbuvnaqxm += 1;
        }

        if ((libARMP_gv_vRaces.lv_genetron == true)) {
            lv_gtxtsubfbuvnaqxm += 1;
        }

        if ((libARMP_gv_vRaces.lv_hybrids == true)) {
            lv_gtxtsubfbuvnaqxm += 1;
        }

        if ((libARMP_gv_vRaces.lv_keiron == true)) {
            lv_gtxtsubfbuvnaqxm += 1;
        }

        if ((libARMP_gv_vRaces.lv_protoss == true)) {
            lv_gtxtsubfbuvnaqxm += 1;
        }

        if ((libARMP_gv_vRaces.lv_terran == true)) {
            lv_gtxtsubfbuvnaqxm += 1;
        }

        if ((libARMP_gv_vRaces.lv_zerg == true)) {
            lv_gtxtsubfbuvnaqxm += 1;
        }

        if ((libARMP_gv_vRaces.lv_uED == true)) {
            lv_gtxtsubfbuvnaqxm += 1;
        }

        if ((libARMP_gv_vRaces.lv_uPL == true)) {
            lv_gtxtsubfbuvnaqxm += 1;
        }

        if ((libARMP_gv_vRaces.lv_xayid == true)) {
            lv_gtxtsubfbuvnaqxm += 1;
        }

    }

    autoE041F39C_g = libARMB_gv_startactiveplayers;
    autoE041F39C_var = -1;
    while (true) {
        autoE041F39C_var = PlayerGroupNextPlayer(autoE041F39C_g, autoE041F39C_var);
        if (autoE041F39C_var < 0) { break; }
        if ((PlayerRace(autoE041F39C_var) == "Dragon") && (libARMP_gv_vRaces.lv_dragon == false)) {
            libARMP_gv_vRaces.lv_dragon = true;
            lv_gtxtsubfbuvnaqxm += 1;
        }

        if ((PlayerRace(autoE041F39C_var) == "Gen") && (libARMP_gv_vRaces.lv_genetron == false)) {
            libARMP_gv_vRaces.lv_genetron = true;
            lv_gtxtsubfbuvnaqxm += 1;
        }

        if ((PlayerRace(autoE041F39C_var) == "NHbr") && (libARMP_gv_vRaces.lv_hybrids == false)) {
            libARMP_gv_vRaces.lv_hybrids = true;
            lv_gtxtsubfbuvnaqxm += 1;
        }

        if ((PlayerRace(autoE041F39C_var) == "Keir") && (libARMP_gv_vRaces.lv_keiron == false)) {
            libARMP_gv_vRaces.lv_keiron = true;
            lv_gtxtsubfbuvnaqxm += 1;
        }

        if ((PlayerRace(autoE041F39C_var) == "Prot") && (libARMP_gv_vRaces.lv_protoss == false)) {
            libARMP_gv_vRaces.lv_protoss = true;
            lv_gtxtsubfbuvnaqxm += 1;
        }

        if ((PlayerRace(autoE041F39C_var) == "Terr") && (libARMP_gv_vRaces.lv_terran == false)) {
            libARMP_gv_vRaces.lv_terran = true;
            lv_gtxtsubfbuvnaqxm += 1;
        }

        if ((PlayerRace(autoE041F39C_var) == "Zerg") && (libARMP_gv_vRaces.lv_zerg == false)) {
            libARMP_gv_vRaces.lv_zerg = true;
            lv_gtxtsubfbuvnaqxm += 1;
        }

        if ((PlayerRace(autoE041F39C_var) == "UED") && (libARMP_gv_vRaces.lv_uED == false)) {
            libARMP_gv_vRaces.lv_uED = true;
            lv_gtxtsubfbuvnaqxm += 1;
        }

        if ((PlayerRace(autoE041F39C_var) == "UPL") && (libARMP_gv_vRaces.lv_uPL == false)) {
            libARMP_gv_vRaces.lv_uPL = true;
            lv_gtxtsubfbuvnaqxm += 1;
        }

        if ((PlayerRace(autoE041F39C_var) == "Xayi") && (libARMP_gv_vRaces.lv_xayid == false)) {
            libARMP_gv_vRaces.lv_xayid = true;
            lv_gtxtsubfbuvnaqxm += 1;
        }

    }
    return lv_gtxtsubfbuvnaqxm;
}

void libARMP_gf_ApplyPlayerCustomRace (int lp_player, string lp_race) {
    // Automatic Variable Declarations
    // Implementation
    PlayerSetRace(lp_player, lp_race);
    if ((lp_race == "UED")) {
        if ((libARMP_gv_uED == false)) {
            libARMP_gv_uED = true;
            TriggerExecute(libUEDC_gt_InitializeUEDRace, true, false);
        }

    }

    if ((lp_race == "NHbr")) {
        if ((libARMP_gv_hybrids == false)) {
            libARMP_gv_hybrids = true;
            TriggerExecute(libNHBR_gt_InitializeNetworkHybridRace, true, false);
        }

    }

    if ((lp_race == "Dragon")) {
        if ((libARMP_gv_dragons == false)) {
            libARMP_gv_dragons = true;
            TriggerExecute(libDRAG_gt_InitializeDragonsRace, true, false);
        }

    }

    if ((lp_race == "UPL")) {
        if ((libARMP_gv_uPL == false)) {
            libARMP_gv_uPL = true;
            TriggerExecute(libUPLR_gt_InitializeUPLRace, true, false);
        }

    }

}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Apply Maximum Supplies Limit
//--------------------------------------------------------------------------------------------------
bool libARMP_gt_ApplyMaximumSuppliesLimit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoE750B4CE_g;
    int autoE750B4CE_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoE750B4CE_g = PlayerGroupAll();
    autoE750B4CE_var = -1;
    while (true) {
        autoE750B4CE_var = PlayerGroupNextPlayer(autoE750B4CE_g, autoE750B4CE_var);
        if (autoE750B4CE_var < 0) { break; }
        PlayerModifyPropertyInt(autoE750B4CE_var, c_playerPropSuppliesLimit, c_playerPropOperSetTo, libARMP_gv_ijorltfigcxilosv);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARMP_gt_ApplyMaximumSuppliesLimit_Init () {
    libARMP_gt_ApplyMaximumSuppliesLimit = TriggerCreate("libARMP_gt_ApplyMaximumSuppliesLimit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Starting Units For Players
//--------------------------------------------------------------------------------------------------
bool libARMP_gt_CreateStartingUnitsForPlayers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto4401648D_g;
    int auto4401648D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto4401648D_g = PlayerGroupAll();
    auto4401648D_var = -1;
    while (true) {
        auto4401648D_var = PlayerGroupNextPlayer(auto4401648D_g, auto4401648D_var);
        if (auto4401648D_var < 0) { break; }
        if (((PlayerType(auto4401648D_var) == c_playerTypeUser) || (PlayerType(auto4401648D_var) == c_playerTypeComputer))) {
            libARMP_gf_CreateStartingUnitsForPlayer(auto4401648D_var, PlayerStartLocation(auto4401648D_var));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARMP_gt_CreateStartingUnitsForPlayers_Init () {
    libARMP_gt_CreateStartingUnitsForPlayers = TriggerCreate("libARMP_gt_CreateStartingUnitsForPlayers_Func");
}

void libARMP_InitTriggers () {
    libARMP_gt_ApplyMaximumSuppliesLimit_Init();
    libARMP_gt_CreateStartingUnitsForPlayers_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libARMP_InitLib_completed = false;

void libARMP_InitLib () {
    if (libARMP_InitLib_completed) {
        return;
    }

    libARMP_InitLib_completed = true;

    libARMP_InitLibraries();
    libARMP_InitVariables();
    libARMP_InitTriggers();
}

include "LibARMB"
include "LibARZM"

