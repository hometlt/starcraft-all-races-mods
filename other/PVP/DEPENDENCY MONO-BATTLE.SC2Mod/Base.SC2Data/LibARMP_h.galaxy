include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Library: ALL RACES
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libARMP_ge_MapSpawnType_Random = 0;
const int libARMP_ge_MapSpawnType_noclosebyground = 1;
const int libARMP_ge_MapSpawnType_crossmap = 2;
const int libARMP_ge_WorkersAlliance_None = 0;
const int libARMP_ge_WorkersAlliance_All = 1;
const int libARMP_ge_WorkersAlliance_Arc = 2;
const int libARMP_ge_WorkersAlliance_Lotv = 3;
const int libARMP_ge_WorkersAlliance_Scion = 4;
const int libARMP_ge_RaceChoice_Observer = 0;
const int libARMP_ge_RaceChoice_Random = 1;
const int libARMP_ge_RaceChoice_RandomOther = 2;
const int libARMP_ge_RaceChoice_RandomKoprulu = 3;
const int libARMP_ge_RaceChoice_RandomScion = 4;
const int libARMP_ge_RaceChoice_Protoss = 5;
const int libARMP_ge_RaceChoice_Zerg = 6;
const int libARMP_ge_RaceChoice_Terran = 7;
const int libARMP_ge_RaceChoice_Keiron = 8;
const int libARMP_ge_RaceChoice_Genetron = 9;
const int libARMP_ge_RaceChoice_Xayid = 10;
const int libARMP_ge_RaceChoice_Hybrids = 11;
const int libARMP_ge_RaceChoice_Dragon = 12;
const int libARMP_ge_RaceChoice_UED = 13;
const int libARMP_ge_RaceChoice_UPL = 14;

// Structures
struct libARMP_gs_Races {
    bool lv_protoss;
    bool lv_zerg;
    bool lv_terran;
    bool lv_xayid;
    bool lv_genetron;
    bool lv_keiron;
    bool lv_uED;
    bool lv_hybrids;
    bool lv_dragon;
    bool lv_uPL;
};

// Variable Declarations
int libARMP_gv_ijorltfigcxilosv;
point[16] libARMP_gv_yrjiueejdqpdtftt;
int libARMP_gv_eagfhilhpquuxlod;
int[16] libARMP_gv_raceChoice;
libARMP_gs_Races libARMP_gv_vRaces;
bool libARMP_gv_acceptedSpecified;
bool libARMP_gv_hybrids;
bool libARMP_gv_dragons;
bool libARMP_gv_uED;
bool libARMP_gv_uPL;

// Function Declarations
void libARMP_gf_InitializeMeleeGame ();
void libARMP_gf_RestrictRace (int lp_race);
void libARMP_gf_AllowAllRaces ();
void libARMP_gf_SetInitialResources (int lp_minerals, int lp_vespene);
void libARMP_gf_SetMonobattleMode (int lp_draftmode);
void libARMP_gf_SetInfestedDifficulty (fixed lp_difficulty);
void libARMP_gf_SetEnemyBounty (fixed lp_minerals, fixed lp_vespene);
void libARMP_gf_SetInfestedBounty (fixed lp_minerals, fixed lp_vespene);
void libARMP_gf_SetHarvestableResourcesType (int lp_value);
void libARMP_gf_SetHarvestableResourcesAmount (fixed lp_value);
void libARMP_gf_SetPlayerRaceChoice (int lp_player, int lp_race);
void libARMP_gf_SetPlayerRole (int lp_player, int lp_role);
void libARMP_gf_SetWorkersMode (int lp_value);
void libARMP_gf_SetMaximumSupplies (int lp_value);
void libARMP_gf_SetPeepMode (int lp_mode, bool lp_autodetectpoint);
void libARMP_gf_SetPeepModeSettings (text lp_name, int lp_maxXCoordinate, int lp_overlayWidth, int lp_overlayHeight, int lp_spawnStyle);
void libARMP_gf_SetPeepModePoint (int lp_player, int lp_index, point lp_startingPoint, point lp_basePoint, point lp_welcomePoint, point lp_naturalPoint);
void libARMP_gf_SetPeepModeFaceOffPoint (int lp_index, point lp_point);
void libARMP_gf_SetPeepModeMatchModeOrder (int lp_matchMode, int lp_orderList);
void libARMP_gf_CreateStartingUnitsForPlayer (int lp_player, point lp_location);
void libARMP_gf_ApplyWorkersAllianceReplace (int lp_player, int lp_preset);
void libARMP_gf_ApplyWorkersAllianceRaceData (int lp_player, int lp_preset);
void libARMP_gf_CheckRaceTriggers (string lp_race);
void libARMP_gf_ApplyChosenRace (int lp_player, int lp_preset);
string libARMP_gf_GetPlayerRaceChoice (int lp_player);
bool libARMP_gf_IsRandomRaceChoice (int lp_player);
int libARMP_gf_GetRacesVariationCount ();
void libARMP_gf_ApplyPlayerCustomRace (int lp_player, string lp_race);

// Trigger Declarations
trigger libARMP_gt_ApplyMaximumSuppliesLimit;
trigger libARMP_gt_CreateStartingUnitsForPlayers;

// Library Initialization
void libARMP_InitVariables ();

