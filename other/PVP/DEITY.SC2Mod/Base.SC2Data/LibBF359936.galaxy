include "TriggerLibs/NativeLib"
include "Lib22142002_h"

include "LibBF359936_h"

//--------------------------------------------------------------------------------------------------
// Library: Game Events
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libBF359936_InitLibraries () {
    libNtve_InitVariables();
    lib22142002_InitVariables();
}

// Variable Initialization
bool libBF359936_InitVariables_completed = false;

void libBF359936_InitVariables () {
    int init_i;

    if (libBF359936_InitVariables_completed) {
        return;
    }

    libBF359936_InitVariables_completed = true;

    libBF359936_gv_cM_Stukov_CreepTumorSourceActive = UnitGroupEmpty();
    for (init_i = 0; init_i <= 99; init_i += 1) {
        libBF359936_gv_cM_Stukov_CreepTumorSpread[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        libBF359936_gv_cM_Stukov_HordeGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        libBF359936_gv_cM_Stukov_HordeCurrentWave[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        libBF359936_gv_cM_Stukov_BunkerGroup[init_i] = UnitGroupEmpty();
    }
    libBF359936_gv_cM_Mengsk_XPHungryUnits = UnitGroupEmpty();
    libBF359936_gv_cM_Mengsk_VeteranUnits = UnitGroupEmpty();
    libBF359936_gv_cM_Mengsk_PropagandaUnits = UnitGroupEmpty();
    libBF359936_gv_cM_Mengsk_ReturningWorkers = UnitGroupEmpty();
    libBF359936_gv_cM_Mengsk_WeaponPickups = UnitGroupEmpty();
    libBF359936_gv_cM_Mengsk_WeaponPickerUppers = UnitGroupEmpty();
    libBF359936_gv_cM_Mengsk_ArtilleryExperimentalStrikeRange = 4.0;
}

// Presets
// Functions
string libBF359936_gf_TraingingUnitTypeInAbilCommand (abilcmd lp_abilityCommand, int lp_p, int lp_unitIndex) {
    // Variable Declarations
    string lv_link;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_link = AbilityCommandGetAbility(lp_abilityCommand);
    lv_index = AbilityCommandGetCommand(lp_abilityCommand);

    // Implementation
    return UnitTypeFromString(CatalogFieldValueGet(c_gameCatalogAbil, lv_link, "InfoArray[" + IntToString(lv_index) + "].Unit[" + IntToString(lp_unitIndex) + "]", lp_p));
}

bool libBF359936_gf_HeroCanSpendSkillPoint (unit lp_hero, string lp_learnAbility) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    order lv_order;

    // Automatic Variable Declarations
    int autoC6E2002A_ae;
    const int autoC6E2002A_ai = 1;

    // Variable Initialization
    lv_c = 19;

    // Implementation
    autoC6E2002A_ae = lv_c;
    lv_i = 0;
    for ( ; ( (autoC6E2002A_ai >= 0 && lv_i <= autoC6E2002A_ae) || (autoC6E2002A_ai < 0 && lv_i >= autoC6E2002A_ae) ) ; lv_i += autoC6E2002A_ai ) {
        lv_order = Order(AbilityCommand(lp_learnAbility, lv_i));
        if ((UnitOrderIsValid(lp_hero, lv_order) == true)) {
            return true;
        }

    }
    return false;
}

void libBF359936_gf_SetUnitBuffMultiplier (unit lp_unit, fixed lp_multiplierAmount, string lp_behavior, fixed lp_baseValue, int lp_method) {
    // Variable Declarations
    fixed lv_multiplierStack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitBehaviorRemove(lp_unit, lp_behavior, c_unitBehaviorCountAll);
    if ((lp_method == libBF359936_ge_UnitBuffMultiplierMethod_Exponential) && (lp_multiplierAmount != 1.0)) {
        lv_multiplierStack = libNtve_gf_Log(lp_multiplierAmount, lp_baseValue);
        CatalogFieldValueSet(c_gameCatalogBehavior, lp_behavior, "MinPoints", UnitGetOwner(lp_unit), IntToString(CeilingI(lv_multiplierStack)));
        UnitBehaviorAddPlayer(lp_unit, lp_behavior, UnitGetOwner(lp_unit), 1);
    }
    else if ((lp_method == libBF359936_ge_UnitBuffMultiplierMethod_Linear) && (lp_multiplierAmount != 0.0)) {
        lv_multiplierStack = (lp_multiplierAmount / lp_baseValue);
        CatalogFieldValueSet(c_gameCatalogBehavior, lp_behavior, "MinPoints", UnitGetOwner(lp_unit), IntToString(CeilingI(lv_multiplierStack)));
        UnitBehaviorAddPlayer(lp_unit, lp_behavior, UnitGetOwner(lp_unit), 1);
    }
}

void libBF359936_gf_SetUnitAttributePoints (string lp_attribute, unit lp_unit, int lp_points) {
    // Variable Declarations
    int lv_originalminpoints;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_originalminpoints = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lp_attribute, "MinPoints", UnitGetOwner(lp_unit));

    // Implementation
    CatalogFieldValueSet(c_gameCatalogBehavior, lp_attribute, "MinPoints", UnitGetOwner(lp_unit), IntToString(lp_points));
    UnitBehaviorRemove(lp_unit, lp_attribute, 1);
    UnitBehaviorAdd(lp_unit, lp_attribute, lp_unit, 1);
    CatalogFieldValueSet(c_gameCatalogBehavior, lp_attribute, "MinPoints", UnitGetOwner(lp_unit), IntToString(lv_originalminpoints));
}

void libBF359936_gf_PlayerApplySkinSignal (int lp_player, string lp_skin, bool lp_activateDeactivate, string lp_extraMessage) {
    // Variable Declarations
    string lv_modelOld;
    int lv_i;
    int lv_c;
    string lv_entry;
    actor lv_ar;
    string lv_fromPath;
    string lv_toPath;
    string lv_replacementType;

    // Automatic Variable Declarations
    int autoD25B6E60_ae;
    const int autoD25B6E60_ai = 1;

    // Variable Initialization
    lv_modelOld = "";
    lv_c = (CatalogFieldValueCount(c_gameCatalogSkin, lp_skin, "ReplacementArray", c_playerAny) - 1);
    lv_fromPath = "From";
    lv_toPath = "To";

    // Implementation
    PlayerApplySkin(lp_player, lp_skin, lp_activateDeactivate);
    if ((lp_activateDeactivate == false)) {
        lv_fromPath = "To";
        lv_toPath = "From";
    }

    ActorRegionCreate(null, "TriggerRegion", RegionEntireMap());
    lv_ar = libNtve_gf_ActorLastCreated();
    autoD25B6E60_ae = lv_c;
    lv_i = 0;
    for ( ; ( (autoD25B6E60_ai >= 0 && lv_i <= autoD25B6E60_ae) || (autoD25B6E60_ai < 0 && lv_i >= autoD25B6E60_ae) ) ; lv_i += autoD25B6E60_ai ) {
        lv_replacementType = CatalogFieldValueGet(c_gameCatalogSkin, lp_skin, "ReplacementArray[" + IntToString(lv_i) + "].Catalog", c_playerAny);
        if ((lv_replacementType == "Model")) {
            lv_modelOld = CatalogFieldValueGet(c_gameCatalogSkin, lp_skin, (("ReplacementArray[" + IntToString(lv_i) + "]." + lv_fromPath)), c_playerAny);
            if ((lp_extraMessage != null)) {
                ActorRegionSend(lv_ar, c_actorIntersectAgainstRadiusContact, lp_extraMessage, "Model", ("ModelName " + lv_modelOld + "; PlayerId " + IntToString(lp_player) + " " + IntToString(lp_player)));
                ActorRegionSend(lv_ar, c_actorIntersectAgainstRadiusContact, lp_extraMessage, "Unit", ("ModelName " + lv_modelOld + "; PlayerId " + IntToString(lp_player) + " " + IntToString(lp_player)));
            }

        }

    }
    ActorSend(lv_ar, "Destroy");
}

void libBF359936_gf_ButtonReplacement (int lp_player, string lp_button, string lp_buttonReplacement) {
    // Variable Declarations
    string lv_pathName;
    string lv_pathTooltip;
    string lv_pathAlertTooltip;
    string lv_pathHotkey;
    string lv_pathIcon;
    string lv_pathAlertIcon;
    string lv_itPath;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pathName = "Name";
    lv_pathTooltip = "Tooltip";
    lv_pathAlertTooltip = "AlertTooltip";
    lv_pathHotkey = "Hotkey";
    lv_pathIcon = "Icon";
    lv_pathAlertIcon = "AlertIcon";
    lv_itPath = "";

    // Implementation
    lv_itPath = lv_pathName;
    CatalogFieldValueSet(c_gameCatalogButton, lp_button, lv_itPath, lp_player, CatalogFieldValueGet(c_gameCatalogButton, lp_buttonReplacement, lv_itPath, lp_player));
    lv_itPath = lv_pathTooltip;
    CatalogFieldValueSet(c_gameCatalogButton, lp_button, lv_itPath, lp_player, CatalogFieldValueGet(c_gameCatalogButton, lp_buttonReplacement, lv_itPath, lp_player));
    lv_itPath = lv_pathAlertTooltip;
    CatalogFieldValueSet(c_gameCatalogButton, lp_button, lv_itPath, lp_player, CatalogFieldValueGet(c_gameCatalogButton, lp_buttonReplacement, lv_itPath, lp_player));
    lv_itPath = lv_pathIcon;
    CatalogFieldValueSet(c_gameCatalogButton, lp_button, lv_itPath, lp_player, CatalogFieldValueGet(c_gameCatalogButton, lp_buttonReplacement, lv_itPath, lp_player));
    lv_itPath = lv_pathAlertIcon;
    CatalogFieldValueSet(c_gameCatalogButton, lp_button, lv_itPath, lp_player, CatalogFieldValueGet(c_gameCatalogButton, lp_buttonReplacement, lv_itPath, lp_player));
}

trigger auto_libBF359936_gf_FindandAttackNearestEnemy_Trigger = null;
unit auto_libBF359936_gf_FindandAttackNearestEnemy_lp_attacker;
fixed auto_libBF359936_gf_FindandAttackNearestEnemy_lp_searchRadius;
fixed auto_libBF359936_gf_FindandAttackNearestEnemy_lp_satisfiedPathingDistance;
fixed auto_libBF359936_gf_FindandAttackNearestEnemy_lp_thinkPeriod;
unitfilter auto_libBF359936_gf_FindandAttackNearestEnemy_lp_targetFilter;
unitfilter auto_libBF359936_gf_FindandAttackNearestEnemy_lp_fallbackTargetFilter;

void libBF359936_gf_FindandAttackNearestEnemy (unit lp_attacker, fixed lp_searchRadius, fixed lp_satisfiedPathingDistance, fixed lp_thinkPeriod, unitfilter lp_targetFilter, unitfilter lp_fallbackTargetFilter) {
    auto_libBF359936_gf_FindandAttackNearestEnemy_lp_attacker = lp_attacker;
    auto_libBF359936_gf_FindandAttackNearestEnemy_lp_searchRadius = lp_searchRadius;
    auto_libBF359936_gf_FindandAttackNearestEnemy_lp_satisfiedPathingDistance = lp_satisfiedPathingDistance;
    auto_libBF359936_gf_FindandAttackNearestEnemy_lp_thinkPeriod = lp_thinkPeriod;
    auto_libBF359936_gf_FindandAttackNearestEnemy_lp_targetFilter = lp_targetFilter;
    auto_libBF359936_gf_FindandAttackNearestEnemy_lp_fallbackTargetFilter = lp_fallbackTargetFilter;

    if (auto_libBF359936_gf_FindandAttackNearestEnemy_Trigger == null) {
        auto_libBF359936_gf_FindandAttackNearestEnemy_Trigger = TriggerCreate("auto_libBF359936_gf_FindandAttackNearestEnemy_TriggerFunc");
    }

    TriggerExecute(auto_libBF359936_gf_FindandAttackNearestEnemy_Trigger, false, false);
}

bool auto_libBF359936_gf_FindandAttackNearestEnemy_TriggerFunc (bool testConds, bool runActions) {
    unit lp_attacker = auto_libBF359936_gf_FindandAttackNearestEnemy_lp_attacker;
    fixed lp_searchRadius = auto_libBF359936_gf_FindandAttackNearestEnemy_lp_searchRadius;
    fixed lp_satisfiedPathingDistance = auto_libBF359936_gf_FindandAttackNearestEnemy_lp_satisfiedPathingDistance;
    fixed lp_thinkPeriod = auto_libBF359936_gf_FindandAttackNearestEnemy_lp_thinkPeriod;
    unitfilter lp_targetFilter = auto_libBF359936_gf_FindandAttackNearestEnemy_lp_targetFilter;
    unitfilter lp_fallbackTargetFilter = auto_libBF359936_gf_FindandAttackNearestEnemy_lp_fallbackTargetFilter;

    // Variable Declarations
    fixed lv_safethinkperiod;
    point lv_attacktargetpoint;
    unit lv_bestattacktargetunit;
    fixed lv_bestpathingdistance;
    unit lv_currentattacktargetunit;
    fixed lv_currentpathingdistance;

    // Automatic Variable Declarations
    unitgroup auto252B036D_g;
    int auto252B036D_u;

    // Variable Initialization
    lv_safethinkperiod = MaxF(lp_thinkPeriod, 0.5);

    // Implementation
    while ((UnitIsAlive(lp_attacker) == true)) {
        lv_bestpathingdistance = 10000.0;
        auto252B036D_g = UnitGroupAlliance(UnitGetOwner(lp_attacker), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_attacker), lp_searchRadius), lp_targetFilter, 0);
        auto252B036D_u = UnitGroupCount(auto252B036D_g, c_unitCountAll);
        for (;; auto252B036D_u -= 1) {
            lv_currentattacktargetunit = UnitGroupUnitFromEnd(auto252B036D_g, auto252B036D_u);
            if (lv_currentattacktargetunit == null) { break; }
            if ((libNtve_gf_UnitCanCreateEffectOnUnit(lv_currentattacktargetunit, "ThreatTest", lp_attacker) == true) && ((UnitFilterMatch(lv_currentattacktargetunit, UnitGetOwner(lp_attacker), UnitFilter(0, 0, (1 << c_targetFilterCloaked), 0)) == true) || (libNtve_gf_UnitIsVisibleToPlayer(lv_currentattacktargetunit, UnitGetOwner(lp_attacker)) == true))) {
                lv_currentpathingdistance = AIPathingCostUnit(lp_attacker, UnitGetPosition(lv_currentattacktargetunit), c_ignoreEnemyBuildings);
                if ((lv_currentpathingdistance < lp_satisfiedPathingDistance)) {
                    lv_bestattacktargetunit = lv_currentattacktargetunit;
                    break;
                }
                else if ((lv_currentpathingdistance < lv_bestpathingdistance)) {
                    lv_bestpathingdistance = lv_currentpathingdistance;
                    lv_bestattacktargetunit = lv_currentattacktargetunit;
                }
            }

        }
        if ((UnitIsAlive(lv_bestattacktargetunit) == false)) {
            lv_bestattacktargetunit = UnitGroupClosestToPoint(UnitGroupAlliance(UnitGetOwner(lp_attacker), c_unitAllianceEnemy, RegionEntireMap(), lp_fallbackTargetFilter, 0), UnitGetPosition(lp_attacker));
        }

        if ((UnitIsAlive(lv_bestattacktargetunit) == true) && (libNtve_gf_UnitCanCreateEffectOnUnit(lv_bestattacktargetunit, "ThreatTest", lp_attacker) == true) && ((UnitFilterMatch(lv_bestattacktargetunit, UnitGetOwner(lp_attacker), UnitFilter(0, 0, (1 << c_targetFilterCloaked), 0)) == true) || (libNtve_gf_UnitIsVisibleToPlayer(lv_bestattacktargetunit, UnitGetOwner(lp_attacker)) == true))) {
            while ((UnitIsAlive(lp_attacker) == true) && (UnitIsAlive(lv_bestattacktargetunit) == true) && (libNtve_gf_UnitCanCreateEffectOnUnit(lv_bestattacktargetunit, "ThreatTest", lp_attacker) == true) && ((UnitFilterMatch(lv_bestattacktargetunit, UnitGetOwner(lp_attacker), UnitFilter(0, 0, (1 << c_targetFilterCloaked), 0)) == true) || (libNtve_gf_UnitIsVisibleToPlayer(lv_bestattacktargetunit, UnitGetOwner(lp_attacker)) == true))) {
                UnitIssueOrder(lp_attacker, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_bestattacktargetunit)), c_orderQueueReplace);
                Wait((lv_safethinkperiod + RandomFixed(-0.125, 0.125)), c_timeGame);
            }
        }
        else {
            Wait((lv_safethinkperiod + RandomFixed(-0.125, 0.125)), c_timeGame);
        }
    }
    return true;
}

fixed libBF359936_gf_CombinedPropertyofUnitGroup (unitgroup lp_unitGroup, int lp_unitProperty, bool lp_currentDefault) {
    // Variable Declarations
    unit lv_unititer;
    fixed lv_totalproperty;

    // Automatic Variable Declarations
    unitgroup autoF9D04B3D_g;
    int autoF9D04B3D_u;

    // Variable Initialization

    // Implementation
    autoF9D04B3D_g = lp_unitGroup;
    autoF9D04B3D_u = UnitGroupCount(autoF9D04B3D_g, c_unitCountAll);
    for (;; autoF9D04B3D_u -= 1) {
        lv_unititer = UnitGroupUnitFromEnd(autoF9D04B3D_g, autoF9D04B3D_u);
        if (lv_unititer == null) { break; }
        lv_totalproperty += UnitGetPropertyFixed(lv_unititer, lp_unitProperty, lp_currentDefault);
    }
    return lv_totalproperty;
}

unitgroup libBF359936_gf_ConjoinedTrainsofTrainCar (unit lp_trainCar) {
    // Variable Declarations
    fixed lv_trainID;
    unit lv_indexTrain;
    unitgroup lv_trainCars;

    // Automatic Variable Declarations
    unitgroup auto91B9AB05_g;
    int auto91B9AB05_u;

    // Variable Initialization
    lv_trainCars = UnitGroupEmpty();

    // Implementation
    lv_trainID = UnitGetCustomValue(lp_trainCar, 2);
    lv_trainCars = UnitGroup("Caboose", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_trainCars, UnitGroup("TarsonisEngineFast", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_trainCars, UnitGroup("TarsonisEngine", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_trainCars, UnitGroup("FreightCar", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto91B9AB05_g = lv_trainCars;
    auto91B9AB05_u = UnitGroupCount(auto91B9AB05_g, c_unitCountAll);
    for (;; auto91B9AB05_u -= 1) {
        lv_indexTrain = UnitGroupUnitFromEnd(auto91B9AB05_g, auto91B9AB05_u);
        if (lv_indexTrain == null) { break; }
        if ((UnitGetCustomValue(lv_indexTrain, 2) != lv_trainID)) {
            UnitGroupRemove(lv_trainCars, lv_indexTrain);
        }

    }
    return lv_trainCars;
}

trigger auto_libBF359936_gf_SynchronizeConjoinedTrainHealth_Trigger = null;
unitgroup auto_libBF359936_gf_SynchronizeConjoinedTrainHealth_lp_trainCars;
fixed auto_libBF359936_gf_SynchronizeConjoinedTrainHealth_lp_maxHealth;

void libBF359936_gf_SynchronizeConjoinedTrainHealth (unitgroup lp_trainCars, fixed lp_maxHealth) {
    auto_libBF359936_gf_SynchronizeConjoinedTrainHealth_lp_trainCars = lp_trainCars;
    auto_libBF359936_gf_SynchronizeConjoinedTrainHealth_lp_maxHealth = lp_maxHealth;

    if (auto_libBF359936_gf_SynchronizeConjoinedTrainHealth_Trigger == null) {
        auto_libBF359936_gf_SynchronizeConjoinedTrainHealth_Trigger = TriggerCreate("auto_libBF359936_gf_SynchronizeConjoinedTrainHealth_TriggerFunc");
    }

    TriggerExecute(auto_libBF359936_gf_SynchronizeConjoinedTrainHealth_Trigger, false, false);
}

bool auto_libBF359936_gf_SynchronizeConjoinedTrainHealth_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_trainCars = auto_libBF359936_gf_SynchronizeConjoinedTrainHealth_lp_trainCars;
    fixed lp_maxHealth = auto_libBF359936_gf_SynchronizeConjoinedTrainHealth_lp_maxHealth;

    // Variable Declarations
    fixed lv_lastseenhealth;
    int lv_lastseentrainsalive;
    fixed lv_healthdelta;
    int lv_trainsalive;
    int lv_trainsdead;
    unit lv_traincar;

    // Automatic Variable Declarations
    unitgroup autoC76E0D1B_g;
    int autoC76E0D1B_u;
    unitgroup auto5A1C0698_g;
    int auto5A1C0698_u;
    unitgroup auto6DBFE75E_g;
    int auto6DBFE75E_u;

    // Variable Initialization
    lv_lastseenhealth = lp_maxHealth;
    lv_lastseentrainsalive = UnitGroupCount(lp_trainCars, c_unitCountAlive);

    // Implementation
    while ((UnitGroupCount(lp_trainCars, c_unitCountAlive) > 0)) {
        lv_trainsalive = UnitGroupCount(lp_trainCars, c_unitCountAlive);
        lv_trainsdead = UnitGroupCount(lp_trainCars, c_unitCountDead);
        if ((lv_trainsalive == lv_lastseentrainsalive)) {
        }
        else if ((lv_trainsalive > 0) && (lv_trainsdead > 0)) {
            autoC76E0D1B_g = lp_trainCars;
            autoC76E0D1B_u = UnitGroupCount(autoC76E0D1B_g, c_unitCountAll);
            for (;; autoC76E0D1B_u -= 1) {
                lv_traincar = UnitGroupUnitFromEnd(autoC76E0D1B_g, autoC76E0D1B_u);
                if (lv_traincar == null) { break; }
                UnitKill(lv_traincar);
            }
            break;
        }
        else if ((lv_trainsalive > lv_lastseentrainsalive)) {
            lv_lastseentrainsalive = lv_trainsalive;
        }
        else if ((lv_trainsalive > 0)) {
            lv_lastseentrainsalive = lv_trainsalive;
        }
        else if (true) {
            break;
        }
        lv_healthdelta = 0.0;
        auto5A1C0698_g = UnitGroupFilter(null, c_playerAny, lp_trainCars, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto5A1C0698_u = UnitGroupCount(auto5A1C0698_g, c_unitCountAll);
        for (;; auto5A1C0698_u -= 1) {
            lv_traincar = UnitGroupUnitFromEnd(auto5A1C0698_g, auto5A1C0698_u);
            if (lv_traincar == null) { break; }
            lv_healthdelta += (lv_lastseenhealth - UnitGetPropertyFixed(lv_traincar, c_unitPropLife, c_unitPropCurrent));
        }
        lv_lastseenhealth -= lv_healthdelta;
        if ((UnitGroupCount(UnitGroupFilter(null, c_playerAny, lp_trainCars, UnitFilter(0, (1 << (c_targetFilterInvulnerable - 32)), 0, 0), 0), c_unitCountAlive) == 0)) {
            lv_lastseenhealth = MinF(lv_lastseenhealth, lp_maxHealth);
            auto6DBFE75E_g = lp_trainCars;
            auto6DBFE75E_u = UnitGroupCount(auto6DBFE75E_g, c_unitCountAll);
            for (;; auto6DBFE75E_u -= 1) {
                lv_traincar = UnitGroupUnitFromEnd(auto6DBFE75E_g, auto6DBFE75E_u);
                if (lv_traincar == null) { break; }
                UnitSetPropertyFixed(lv_traincar, c_unitPropLife, lv_lastseenhealth);
            }
        }

        Wait(0.0625, c_timeGame);
    }
    return true;
}

void libBF359936_gf_CM_Stukov_SingleUnitGoToRally (unit lp_rallyingUnit, bool lp_overrideExistingOrders) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(lp_rallyingUnit);

    // Implementation
    if (((UnitOrderCount(lp_rallyingUnit) == 0) || (lp_overrideExistingOrders == true))) {
        if ((libBF359936_gv_cM_Stukov_RallyTarget[lv_player] == null)) {
            if ((libBF359936_gv_cM_Stukov_RallyPoint[lv_player] != null)) {
                UnitIssueOrder(lp_rallyingUnit, OrderTargetingPoint(AbilityCommand("move", 3), libBF359936_gv_cM_Stukov_RallyPoint[lv_player]), c_orderQueueReplace);
            }

        }

    }

}

void libBF359936_gf_CM_Stukov_HordeGoToRally (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((libBF359936_gv_cM_Stukov_RallyTarget[lp_player] == null) || (UnitIsAlive(libBF359936_gv_cM_Stukov_RallyTarget[lp_player]) == false))) {
        if ((libBF359936_gv_cM_Stukov_RallyPoint[lp_player] != null)) {
            UnitGroupIssueOrder(libBF359936_gv_cM_Stukov_HordeGroup[lp_player], OrderTargetingPoint(AbilityCommand("move", 3), libBF359936_gv_cM_Stukov_RallyPoint[lp_player]), c_orderQueueReplace);
        }

    }

}

void libBF359936_gf_CM_Stukov_NewBunkerUnitProcess (unit lp_newUnit) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = lp_newUnit;
    lv_player = UnitGetOwner(lp_newUnit);

    // Implementation
    if ((UnitHasBehavior2(lp_newUnit, "SIBarracksTrainTimedLifeHasBeenApplied") == true)) {
        UnitSetState(lv_unit, c_unitStateUsingSupply, false);
        UnitGroupAdd(libBF359936_gv_cM_Stukov_HordeGroup[lv_player], lv_unit);
        UnitGroupAdd(libBF359936_gv_cM_Stukov_HordeCurrentWave[lv_player], lv_unit);
        libBF359936_gv_cM_Stukov_HordeCount[lv_player] = UnitGroupCount(libBF359936_gv_cM_Stukov_HordeGroup[lv_player], c_unitCountAlive);
        libBF359936_gf_CM_Stukov_SingleUnitGoToRally(lp_newUnit, true);
    }

}

trigger auto_libBF359936_gf_Stukov_InfestedBunker_Attack_Trigger = null;
unit auto_libBF359936_gf_Stukov_InfestedBunker_Attack_lp_u;
unit auto_libBF359936_gf_Stukov_InfestedBunker_Attack_lp_targ_u;
int auto_libBF359936_gf_Stukov_InfestedBunker_Attack_lp_i;
fixed auto_libBF359936_gf_Stukov_InfestedBunker_Attack_lp_wait;

void libBF359936_gf_Stukov_InfestedBunker_Attack (unit lp_u, unit lp_targ_u, int lp_i, fixed lp_wait) {
    auto_libBF359936_gf_Stukov_InfestedBunker_Attack_lp_u = lp_u;
    auto_libBF359936_gf_Stukov_InfestedBunker_Attack_lp_targ_u = lp_targ_u;
    auto_libBF359936_gf_Stukov_InfestedBunker_Attack_lp_i = lp_i;
    auto_libBF359936_gf_Stukov_InfestedBunker_Attack_lp_wait = lp_wait;

    if (auto_libBF359936_gf_Stukov_InfestedBunker_Attack_Trigger == null) {
        auto_libBF359936_gf_Stukov_InfestedBunker_Attack_Trigger = TriggerCreate("auto_libBF359936_gf_Stukov_InfestedBunker_Attack_TriggerFunc");
    }

    TriggerExecute(auto_libBF359936_gf_Stukov_InfestedBunker_Attack_Trigger, false, false);
}

bool auto_libBF359936_gf_Stukov_InfestedBunker_Attack_TriggerFunc (bool testConds, bool runActions) {
    unit lp_u = auto_libBF359936_gf_Stukov_InfestedBunker_Attack_lp_u;
    unit lp_targ_u = auto_libBF359936_gf_Stukov_InfestedBunker_Attack_lp_targ_u;
    int lp_i = auto_libBF359936_gf_Stukov_InfestedBunker_Attack_lp_i;
    fixed lp_wait = auto_libBF359936_gf_Stukov_InfestedBunker_Attack_lp_wait;

    // Automatic Variable Declarations
    // Implementation
    Wait(lp_wait, c_timeGame);
    UnitCreateEffectUnit(lp_u, (CatalogFieldValueGet(c_gameCatalogWeapon, CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lp_u), "WeaponArray[" + IntToString(lp_i) + "].Link", c_playerAny), "Effect", UnitGetOwner(lp_u))), lp_targ_u);
    return true;
}

trigger auto_libBF359936_gf_CM_Stukov_InfestStructureInitialCooldown_Trigger = null;
int auto_libBF359936_gf_CM_Stukov_InfestStructureInitialCooldown_lp_player;

void libBF359936_gf_CM_Stukov_InfestStructureInitialCooldown (int lp_player) {
    auto_libBF359936_gf_CM_Stukov_InfestStructureInitialCooldown_lp_player = lp_player;

    if (auto_libBF359936_gf_CM_Stukov_InfestStructureInitialCooldown_Trigger == null) {
        auto_libBF359936_gf_CM_Stukov_InfestStructureInitialCooldown_Trigger = TriggerCreate("auto_libBF359936_gf_CM_Stukov_InfestStructureInitialCooldown_TriggerFunc");
    }

    TriggerExecute(auto_libBF359936_gf_CM_Stukov_InfestStructureInitialCooldown_Trigger, false, false);
}

bool auto_libBF359936_gf_CM_Stukov_InfestStructureInitialCooldown_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libBF359936_gf_CM_Stukov_InfestStructureInitialCooldown_lp_player;

    // Variable Declarations
    fixed lv_cooldown;
    const fixed lv_initialCoolup = 180.0;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cooldown = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "SIStukovInfestStructureUpgraded", "Cost[" + IntToString(0) + "].Charge.TimeUse", lp_player);

    // Implementation
    PlayerAddChargeUsed(lp_player, "Abil/SIStukovInfestStructureUpgraded", 3.0);
    PlayerAddChargeRegenRemaining(lp_player, "Abil/SIStukovInfestStructureUpgraded", lv_initialCoolup);
    Wait(lv_initialCoolup, c_timeGame);
    libNtve_gf_PlayerRemoveChargeUsed(lp_player, "Abil/SIStukovInfestStructureUpgraded");
    PlayerAddChargeUsed(lp_player, "Abil/SIStukovInfestStructureUpgraded", 2.0);
    PlayerAddChargeRegenRemaining(lp_player, "Abil/SIStukovInfestStructureUpgraded", lv_cooldown);
    return true;
}

void libBF359936_gf_CM_Zeratul_PurificationNova_SpawnSmallOrb (unit lp_caster, point lp_spawnPoint, point lp_targetPoint) {
    // Variable Declarations
    point lv_point;
    unit lv_orb;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_point = lp_spawnPoint;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PurificationOrbSmall", c_unitCreateIgnorePlacement, UnitGetOwner(lp_caster), lv_point);
    lv_orb = UnitLastCreated();
    UnitIssueOrder(lv_orb, OrderTargetingPoint(AbilityCommand("move", 0), lp_targetPoint), c_orderQueueReplace);
    UnitBehaviorAdd(lv_orb, "ZeratulPurificationNovaSmallOrbSearchBuff", lp_caster, 1);
}

fixed libBF359936_gf_CM_Mengsk_SupplyLevel (unitgroup lp_unitGroup) {
    // Variable Declarations
    unit lv_unititer;
    fixed lv_totalproperty;

    // Automatic Variable Declarations
    unitgroup autoD1162D4A_g;
    int autoD1162D4A_u;

    // Variable Initialization

    // Implementation
    autoD1162D4A_g = lp_unitGroup;
    autoD1162D4A_u = UnitGroupCount(autoD1162D4A_g, c_unitCountAll);
    for (;; autoD1162D4A_u -= 1) {
        lv_unititer = UnitGroupUnitFromEnd(autoD1162D4A_g, autoD1162D4A_u);
        if (lv_unititer == null) { break; }
        if ((UnitIsAlive(lv_unititer) == true)) {
            lv_totalproperty += (UnitGetPropertyFixed(lv_unititer, c_unitPropSuppliesUsed, c_unitPropCurrent) *  (1+UnitXPGetCurrentLevel(lv_unititer, null)));
        }

    }
    return lv_totalproperty;
}

void libBF359936_gf_CM_Mengsk_EnergyChanged (int lp_mengskPlayer) {
    // Variable Declarations
    int lv_energyperzergcalldownlevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_energyperzergcalldownlevel = 25;

    // Implementation
}

trigger auto_libBF359936_gf_CM_Mengsk_GlobalCasterEnergyRegen_Trigger = null;
unit auto_libBF359936_gf_CM_Mengsk_GlobalCasterEnergyRegen_lp_mengskGlobalCaster;

void libBF359936_gf_CM_Mengsk_GlobalCasterEnergyRegen (unit lp_mengskGlobalCaster) {
    auto_libBF359936_gf_CM_Mengsk_GlobalCasterEnergyRegen_lp_mengskGlobalCaster = lp_mengskGlobalCaster;

    if (auto_libBF359936_gf_CM_Mengsk_GlobalCasterEnergyRegen_Trigger == null) {
        auto_libBF359936_gf_CM_Mengsk_GlobalCasterEnergyRegen_Trigger = TriggerCreate("auto_libBF359936_gf_CM_Mengsk_GlobalCasterEnergyRegen_TriggerFunc");
    }

    TriggerExecute(auto_libBF359936_gf_CM_Mengsk_GlobalCasterEnergyRegen_Trigger, false, false);
}

bool auto_libBF359936_gf_CM_Mengsk_GlobalCasterEnergyRegen_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mengskGlobalCaster = auto_libBF359936_gf_CM_Mengsk_GlobalCasterEnergyRegen_lp_mengskGlobalCaster;

    // Variable Declarations
    unit lv_veteran;
    fixed lv_baseenergyregen;
    fixed lv_bonusenergyregenfactor;
    fixed lv_totalenergyregen;
    fixed lv_globalcasterenergy;
    int lv_lastseenmoraleindex;
    int lv_moraleindex;
    bool lv_moralecapped;
    fixed lv_moralecappedremindercooldown;
    timer lv_moralecappedreminder;
    int lv_energyperzergcalldownlevel;
    int lv_mengskplayer;

    // Automatic Variable Declarations
    int autoBC705671_val;

    // Variable Initialization
    lv_baseenergyregen = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, "CoopCasterMengsk", "EnergyRegenRate", c_playerAny);
    lv_bonusenergyregenfactor = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "TopbarMengskBonusRegenFactorDummy", "Amount", UnitGetOwner(lp_mengskGlobalCaster));
    lv_moralecappedremindercooldown = 120.0;
    lv_moralecappedreminder = TimerCreate();
    lv_energyperzergcalldownlevel = 25;
    lv_mengskplayer = UnitGetOwner(lp_mengskGlobalCaster);

    // Implementation
    while (true) {
        lv_totalenergyregen = MaxF((lv_baseenergyregen + (libBF359936_gv_cM_Mengsk_EnergyRegenRoyalGuard + libBF359936_gv_cM_Mengsk_EnergyRegenTrooper)), 0.01);
        Wait((lv_bonusenergyregenfactor / lv_totalenergyregen), c_timeGame);
        lv_globalcasterenergy = RoundI((UnitGetPropertyFixed(lp_mengskGlobalCaster, c_unitPropEnergy, c_unitPropCurrent) + 1));
        UnitSetPropertyFixed(lp_mengskGlobalCaster, c_unitPropEnergy, lv_globalcasterenergy);
        libBF359936_gf_CM_Mengsk_EnergyChanged(lv_mengskplayer);
        lv_moraleindex = ((FixedToInt(lv_globalcasterenergy) / 34) + 1);
        if ((lv_lastseenmoraleindex != lv_moraleindex)) {
            autoBC705671_val = lv_moraleindex;
            if (autoBC705671_val == 1) {
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Attack", "TrooperMengsk_Attack_MoraleLow");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_What", "TrooperMengsk_What_MoraleLow");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Yes", "TrooperMengsk_Yes_MoraleLow");
            }
            else if (autoBC705671_val == 2) {
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Attack", "TrooperMengsk_Attack");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_What", "TrooperMengsk_What");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Yes", "TrooperMengsk_Yes");
            }
            else if (autoBC705671_val == 3) {
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Attack", "TrooperMengsk_Attack_MoraleHigh");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_What", "TrooperMengsk_What_MoraleHigh");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Yes", "TrooperMengsk_Yes_MoraleHigh");
            }
            else {
            }
        }

        lv_lastseenmoraleindex = lv_moraleindex;
        if ((lv_globalcasterenergy >= 100.0)) {
            if ((lv_moralecapped == false) && (TimerGetRemaining(lv_moralecappedreminder) <= 0.0)) {
                TimerStart(lv_moralecappedreminder, lv_moralecappedremindercooldown, false, c_timeReal);
            }

            lv_moralecapped = true;
        }
        else {
            lv_moralecapped = false;
        }
    }
    return true;
}

void libBF359936_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateRoyalGuard (int lp_mengskPlayer) {
    // Variable Declarations
    fixed lv_imperialsupportperroyalguardsupplylevel;
    fixed lv_energyregenperroyalguardsupplylevel;
    fixed lv_roundeddisplay;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_imperialsupportperroyalguardsupplylevel = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "RoyalGuardMengskTopbarRegenDummy", "Amount", lp_mengskPlayer);
    lv_energyregenperroyalguardsupplylevel = (lv_imperialsupportperroyalguardsupplylevel * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MasteryMengskRoyalGuardImperialMandateRegenerationFactorDummy", "Amount", lp_mengskPlayer));

    // Implementation
    if (true) {
        libBF359936_gv_cM_Mengsk_EnergyRegenRoyalGuard = (lv_energyregenperroyalguardsupplylevel * libBF359936_gf_CM_Mengsk_SupplyLevel(libBF359936_gv_cM_Mengsk_VeteranUnits));
        lv_roundeddisplay = Round(libBF359936_gv_cM_Mengsk_EnergyRegenRoyalGuard);
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, "MengskTopBarEnergyRegenRoyalGuardDummy", "Amount", lp_mengskPlayer, lv_roundeddisplay);
    }
    else {
        lv_roundeddisplay = 0.0;
    }
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), FixedToText(lv_roundeddisplay, 0), PlayerGroupAll());
}

void libBF359936_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateTrooper (int lp_mengskPlayer) {
    // Variable Declarations
    fixed lv_imperialsupportpertrooper;
    fixed lv_energyregenperpropagandaunit;
    fixed lv_roundeddisplay;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_imperialsupportpertrooper = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "PropagandaMengskTopbarRegenDummy", "Amount", lp_mengskPlayer);
    lv_energyregenperpropagandaunit = (lv_imperialsupportpertrooper * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MasteryMengskTrooperImperialMandateRegenerationFactorDummy", "Amount", lp_mengskPlayer));

    // Implementation
    if (true) {
        libBF359936_gv_cM_Mengsk_EnergyRegenTrooper = (lv_energyregenperpropagandaunit * UnitGroupCount(libBF359936_gv_cM_Mengsk_PropagandaUnits, c_unitCountAlive));
        lv_roundeddisplay = Round(libBF359936_gv_cM_Mengsk_EnergyRegenTrooper);
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, "MengskTopBarEnergyRegenTrooperDummy", "Amount", lp_mengskPlayer, lv_roundeddisplay);
    }
    else {
        lv_roundeddisplay = 0.0;
    }
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), FixedToText(lv_roundeddisplay, 0), PlayerGroupAll());
}

void libBF359936_gf_CM_Mengsk_ForceMorphTrooper (unit lp_trooper, unit lp_pickup, string lp_morphEffect, string lp_morphBehavior, string lp_actorSignal) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreateEffectUnit(lp_trooper, lp_morphEffect, lp_trooper);
    UnitBehaviorAdd(lp_trooper, lp_morphBehavior, lp_trooper, 1);
    UnitKill(lp_pickup);
    UnitGroupRemove(libBF359936_gv_cM_Mengsk_WeaponPickerUppers, lp_trooper);
    libNtve_gf_SendActorMessageToUnit(lp_trooper, "Signal ClearWeapon");
    libNtve_gf_SendActorMessageToUnit(lp_trooper, (("Signal " + lp_actorSignal)));
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: GE_Enabler
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_Enabler_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libBF359936_gt_GE_Enabler_Neutral, true);
    TriggerExecute(libBF359936_gt_GE_Enabler_Neutral, true, false);
    Wait(0.25, c_timeGame);
    TriggerEnable(libBF359936_gt_GE_Enabler_Zerg, true);
    TriggerExecute(libBF359936_gt_GE_Enabler_Zerg, true, false);
    Wait(0.25, c_timeGame);
    TriggerEnable(libBF359936_gt_GE_Enabler_Protoss, true);
    TriggerExecute(libBF359936_gt_GE_Enabler_Protoss, true, false);
    Wait(0.25, c_timeGame);
    TriggerEnable(libBF359936_gt_GE_Enabler_Terran, true);
    TriggerExecute(libBF359936_gt_GE_Enabler_Terran, true, false);
    Wait(0.25, c_timeGame);
    TriggerEnable(libBF359936_gt_GE_Terr_Units007, true);
    TriggerEnable(libBF359936_gt_GE_ArmyUpgradesAddon, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_Enabler_Init () {
    libBF359936_gt_GE_Enabler = TriggerCreate("libBF359936_gt_GE_Enabler_Func");
    TriggerAddEventTimeElapsed(libBF359936_gt_GE_Enabler, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TargetLockOrder
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_TargetLockOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((UnitGetCooldown(lv_caster, "Abil/ObserverTargetLock") == 0.0))) {
            return false;
        }

        if (!((libNtve_gf_UnitCanCreateEffectOnUnit(lv_caster, "ObserverTargetLockCPOrderValidate", lv_target) == true))) {
            return false;
        }

        if (!((UnitOrderIsValid(lv_caster, OrderSetAutoCast(AbilityCommand("ObserverTargetLock", 0), true)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitCanCreateEffectOnUnit(lv_caster, "ObserverTargetLockCP", lv_target) == false)) {
        UnitCreateEffectUnit(lv_caster, "ObserverTargetLockDP", lv_caster);
    }

    UnitIssueOrder(lv_caster, OrderTargetingUnit(AbilityCommand("ObserverTargetLock", 0), lv_target), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_TargetLockOrder_Init () {
    libBF359936_gt_CM_TargetLockOrder = TriggerCreate("libBF359936_gt_CM_TargetLockOrder_Func");
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_TargetLockOrder, c_playerAny, "MonitorFakeWeapon");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TargetLockOrderRaven
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_TargetLockOrderRaven_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((UnitGetCooldown(lv_caster, "Abil/ObserverTargetLock") == 0.0))) {
            return false;
        }

        if (!((libNtve_gf_UnitCanCreateEffectOnUnit(lv_caster, "RavenTargetLockCPOrderValidate", lv_target) == true))) {
            return false;
        }

        if (!((UnitOrderIsValid(lv_caster, OrderSetAutoCast(AbilityCommand("RavenTargetLock", 0), true)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitCanCreateEffectOnUnit(lv_caster, "RavenAnalyzeCP", lv_target) == false)) {
        UnitCreateEffectUnit(lv_caster, "RavenAnalyzeDP", lv_caster);
    }

    UnitIssueOrder(lv_caster, OrderTargetingUnit(AbilityCommand("RavenTargetLock", 0), lv_target), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_TargetLockOrderRaven_Init () {
    libBF359936_gt_CM_TargetLockOrderRaven = TriggerCreate("libBF359936_gt_CM_TargetLockOrderRaven_Func");
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_TargetLockOrderRaven, c_playerAny, "HHRavenFakeWeapon");
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_Enabler_Neutral
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_Enabler_Neutral_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libBF359936_gt_GE_CreateUnit_HideTerrain, true);
    TriggerEnable(libBF359936_gt_GE_DestroyUnit_ShowTerrain, true);
    TriggerEnable(libBF359936_gt_StasisChamber_LoadUnit, true);
    TriggerEnable(libBF359936_gt_General_RotationDummy, true);
    TriggerEnable(libBF359936_gt_GlazeDeathCustomize_VoidShade, true);
    TriggerEnable(libBF359936_gt_Rotate1800, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_Enabler_Neutral_Init () {
    libBF359936_gt_GE_Enabler_Neutral = TriggerCreate("libBF359936_gt_GE_Enabler_Neutral_Func");
    TriggerEnable(libBF359936_gt_GE_Enabler_Neutral, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_CreateUnit_HideTerrain
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_CreateUnit_HideTerrain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tH_Unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tH_Unit = EventUnitCreatedUnit();

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitIsUnderConstruction(EventUnitCreatedUnit()) == false))) {
            return false;
        }

        if (!(((UnitGetType(lv_tH_Unit) == "ProtossDockingBayUnit") || (UnitGetType(lv_tH_Unit) == "LaunchBayShakuras") || (UnitGetType(lv_tH_Unit) == "ExpeditionJumpGate") || (UnitGetType(lv_tH_Unit) == "AiurCityWarpGateAbandoned") || (UnitGetType(lv_tH_Unit) == "TempleShakuras02") || (UnitGetType(lv_tH_Unit) == "AdunGenerator") || (UnitGetType(lv_tH_Unit) == "CybrosLock")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_tH_Unit == null)) {
        lv_tH_Unit = EventUnit();
    }

    if (((UnitGetType(lv_tH_Unit) == "TempleShakuras02"))) {
        TerrainShowRegion(RegionRect((PointGetX(UnitGetPosition(lv_tH_Unit)) - 5.0), (PointGetY(UnitGetPosition(lv_tH_Unit)) - 4.0), (PointGetX(UnitGetPosition(lv_tH_Unit)) + 5.0), (PointGetY(UnitGetPosition(lv_tH_Unit)) + 4.0)), false);
        TerrainShowRegion(RegionRect((PointGetX(UnitGetPosition(lv_tH_Unit)) - 4.0), (PointGetY(UnitGetPosition(lv_tH_Unit)) - 5.0), (PointGetX(UnitGetPosition(lv_tH_Unit)) + 4.0), (PointGetY(UnitGetPosition(lv_tH_Unit)) + 5.0)), false);
    }
    else {
        if (((UnitGetType(lv_tH_Unit) == "ExpeditionJumpGate") || (UnitGetType(lv_tH_Unit) == "AiurCityWarpGateAbandoned") || (UnitGetType(lv_tH_Unit) == "TempleShakuras02"))) {
            TerrainShowRegion(RegionCircle(UnitGetPosition(lv_tH_Unit), 4.0), false);
        }
        else {
            if (((UnitGetType(lv_tH_Unit) == "ProtossDockingBayUnit") || (UnitGetType(lv_tH_Unit) == "LaunchBayShakuras"))) {
                TerrainShowRegion(RegionCircle(UnitGetPosition(lv_tH_Unit), 3.0), false);
            }
            else {
                if (((UnitGetType(lv_tH_Unit) == "CybrosLock"))) {
                    TerrainShowRegion(RegionCircle(UnitGetPosition(lv_tH_Unit), 3.5), false);
                }
                else {
                    if (((UnitGetType(lv_tH_Unit) == "AdunGenerator"))) {
                        TerrainShowRegion(RegionCircle(UnitGetPosition(lv_tH_Unit), 2.5), false);
                    }

                }
            }
        }
    }
    TriggerExecute(lib22142002_gt_DEITYMaintance, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_CreateUnit_HideTerrain_Init () {
    libBF359936_gt_GE_CreateUnit_HideTerrain = TriggerCreate("libBF359936_gt_GE_CreateUnit_HideTerrain_Func");
    TriggerEnable(libBF359936_gt_GE_CreateUnit_HideTerrain, false);
    TriggerAddEventUnitCreated(libBF359936_gt_GE_CreateUnit_HideTerrain, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_DestroyUnit_ShowTerrain
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_DestroyUnit_ShowTerrain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tH_Unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tH_Unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(lv_tH_Unit) == "ProtossDockingBayUnit") || (UnitGetType(lv_tH_Unit) == "LaunchBayShakuras") || (UnitGetType(lv_tH_Unit) == "ExpeditionJumpGate") || (UnitGetType(lv_tH_Unit) == "AiurCityWarpGateAbandoned") || (UnitGetType(lv_tH_Unit) == "TempleShakuras02") || (UnitGetType(lv_tH_Unit) == "AdunGenerator") || (UnitGetType(lv_tH_Unit) == "CybrosLock")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(lv_tH_Unit) == "TempleShakuras02"))) {
        TerrainShowRegion(RegionRect((PointGetX(UnitGetPosition(lv_tH_Unit)) - 5.0), (PointGetY(UnitGetPosition(lv_tH_Unit)) - 5.0), (PointGetX(UnitGetPosition(lv_tH_Unit)) + 5.0), (PointGetY(UnitGetPosition(lv_tH_Unit)) + 5.0)), true);
    }
    else {
        if (((UnitGetType(lv_tH_Unit) == "ExpeditionJumpGate") || (UnitGetType(lv_tH_Unit) == "AiurCityWarpGateAbandoned") || (UnitGetType(lv_tH_Unit) == "CybrosLock"))) {
            TerrainShowRegion(RegionCircle(UnitGetPosition(lv_tH_Unit), 4.5), true);
        }
        else {
            if (((UnitGetType(lv_tH_Unit) == "ProtossDockingBayUnit") || (UnitGetType(lv_tH_Unit) == "LaunchBayShakuras"))) {
                TerrainShowRegion(RegionCircle(UnitGetPosition(lv_tH_Unit), 3.5), true);
            }
            else {
                if (((UnitGetType(lv_tH_Unit) == "AdunGenerator"))) {
                    TerrainShowRegion(RegionCircle(UnitGetPosition(lv_tH_Unit), 2.75), true);
                }

            }
        }
    }
    TriggerExecute(lib22142002_gt_DEITYMaintance, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_DestroyUnit_ShowTerrain_Init () {
    libBF359936_gt_GE_DestroyUnit_ShowTerrain = TriggerCreate("libBF359936_gt_GE_DestroyUnit_ShowTerrain_Func");
    TriggerEnable(libBF359936_gt_GE_DestroyUnit_ShowTerrain, false);
    TriggerAddEventUnitDied(libBF359936_gt_GE_DestroyUnit_ShowTerrain, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StasisChamber_LoadUnit
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_StasisChamber_LoadUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnitTargetUnit(), UnitGetPosition(EventUnit()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_StasisChamber_LoadUnit_Init () {
    libBF359936_gt_StasisChamber_LoadUnit = TriggerCreate("libBF359936_gt_StasisChamber_LoadUnit_Func");
    TriggerEnable(libBF359936_gt_StasisChamber_LoadUnit, false);
    TriggerAddEventUnitAbility(libBF359936_gt_StasisChamber_LoadUnit, null, AbilityCommand("StasisLoadMoveUnit", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: General_RotationDummy
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_General_RotationDummy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitFacePoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 0.0);
    UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "ParticleCannonDisableWeapon", 1);
    UnitAbilityRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "RotateUnit");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_General_RotationDummy_Init () {
    libBF359936_gt_General_RotationDummy = TriggerCreate("libBF359936_gt_General_RotationDummy_Func");
    TriggerEnable(libBF359936_gt_General_RotationDummy, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_General_RotationDummy, c_playerAny, "RotationDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: GlazeDeathCustomize_VoidShade
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GlazeDeathCustomize_VoidShade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnit(), "DeathCustomize Vortex");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GlazeDeathCustomize_VoidShade_Init () {
    libBF359936_gt_GlazeDeathCustomize_VoidShade = TriggerCreate("libBF359936_gt_GlazeDeathCustomize_VoidShade_Func");
    TriggerEnable(libBF359936_gt_GlazeDeathCustomize_VoidShade, false);
    TriggerAddEventUnitBehaviorChange(libBF359936_gt_GlazeDeathCustomize_VoidShade, null, "VoidShade", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rotate 180-0
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_Rotate1800_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetFacing(EventUnit(), RandomFixed(200.0, 340.0), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_Rotate1800_Init () {
    libBF359936_gt_Rotate1800 = TriggerCreate("libBF359936_gt_Rotate1800_Func");
    TriggerEnable(libBF359936_gt_Rotate1800, false);
    TriggerAddEventUnitBehaviorChange(libBF359936_gt_Rotate1800, null, "Rotate1800", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_Enabler_Zerg
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_Enabler_Zerg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libBF359936_gt_CM_Stukov_TriggersInit, true);
    TriggerExecute(libBF359936_gt_CM_Stukov_TriggersInit, true, false);
    TriggerEnable(libBF359936_gt_GE_Z_MutaliskStrainBroodLordSpawned, true);
    TriggerEnable(libBF359936_gt_GE_Z_CreepTumorAB, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_Enabler_Zerg_Init () {
    libBF359936_gt_GE_Enabler_Zerg = TriggerCreate("libBF359936_gt_GE_Enabler_Zerg_Func");
    TriggerEnable(libBF359936_gt_GE_Enabler_Zerg, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_FullSupplyCheat
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Stukov_FullSupplyCheat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_aleksander;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_aleksander = EventUnit();
    lv_p = UnitGetOwner(lv_aleksander);

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((UnitIsAlive(lv_aleksander) == true)) {
            PlayerSetState(EventPlayer(), c_playerStateFoodIgnored, true);
            UnitIssueOrder(lv_aleksander, Order(AbilityCommand("StukovAleksanderCrashedTrain", 0)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_aleksander, Order(AbilityCommand("StukovAleksanderCrashedTrain", 1)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_aleksander, Order(AbilityCommand("StukovAleksanderCrashedTrain", 2)), c_orderQueueAddToEnd);
            PlayerSetState(EventPlayer(), c_playerStateFoodIgnored, false);
        }
        else {
            return true;
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Stukov_FullSupplyCheat_Init () {
    libBF359936_gt_CM_Stukov_FullSupplyCheat = TriggerCreate("libBF359936_gt_CM_Stukov_FullSupplyCheat_Func");
    TriggerEnable(libBF359936_gt_CM_Stukov_FullSupplyCheat, false);
    TriggerAddEventUnitBehaviorChange(libBF359936_gt_CM_Stukov_FullSupplyCheat, null, "StukovSummonAleksanderCrashedTimedLife", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_CreepSource_Create
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Stukov_CreepSource_Create_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iD;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libBF359936_gv_cM_Stukov_CreepTumorSourceActive, EventUnit()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libBF359936_gv_cM_Stukov_CreepTumorSource[lv_iD] != EventUnit())) {
        if ((libBF359936_gv_cM_Stukov_CreepTumorSource[lv_iD] == null)) {
            libBF359936_gv_cM_Stukov_CreepTumorSource[lv_iD] = EventUnit();
            UnitGroupAdd(libBF359936_gv_cM_Stukov_CreepTumorSourceActive, EventUnit());
        }
        else {
            lv_iD += 1;
            if ((lv_iD > 99)) {
                UIDisplayMessage(PlayerGroupAll(), lib22142002_gv_dEITYRespondTextLocation, (lib22142002_gv_dEITYRespondError + StringExternal("Param/Value/lib_BF359936_81425FDC")));
                return true;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Stukov_CreepSource_Create_Init () {
    libBF359936_gt_CM_Stukov_CreepSource_Create = TriggerCreate("libBF359936_gt_CM_Stukov_CreepSource_Create_Func");
    TriggerEnable(libBF359936_gt_CM_Stukov_CreepSource_Create, false);
    TriggerAddEventUnitBehaviorChange(libBF359936_gt_CM_Stukov_CreepSource_Create, null, "StukovCreepTumorOriginalCreepSource", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_CreepSource_Deactivate
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Stukov_CreepSource_Deactivate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iD;

    // Automatic Variable Declarations
    unitgroup auto4847D7C6_g;
    int auto4847D7C6_u;
    unit auto4847D7C6_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libBF359936_gv_cM_Stukov_CreepTumorSource[lv_iD] != EventUnit())) {
        lv_iD += 1;
        if ((lv_iD > 99)) {
            UIDisplayMessage(PlayerGroupAll(), lib22142002_gv_dEITYRespondTextLocation, (lib22142002_gv_dEITYRespondError + StringExternal("Param/Value/lib_BF359936_F9495B06")));
            return true;
        }

    }

    auto4847D7C6_g = libBF359936_gv_cM_Stukov_CreepTumorSpread[lv_iD];
    auto4847D7C6_u = UnitGroupCount(auto4847D7C6_g, c_unitCountAll);
    for (;; auto4847D7C6_u -= 1) {
        auto4847D7C6_var = UnitGroupUnitFromEnd(auto4847D7C6_g, auto4847D7C6_u);
        if (auto4847D7C6_var == null) { break; }
        UnitBehaviorAdd(auto4847D7C6_var, "StukovOriginalCreepSourceDisabled", auto4847D7C6_var, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Stukov_CreepSource_Deactivate_Init () {
    libBF359936_gt_CM_Stukov_CreepSource_Deactivate = TriggerCreate("libBF359936_gt_CM_Stukov_CreepSource_Deactivate_Func");
    TriggerEnable(libBF359936_gt_CM_Stukov_CreepSource_Deactivate, false);
    TriggerAddEventUnitBehaviorChange(libBF359936_gt_CM_Stukov_CreepSource_Deactivate, null, "StukovCreepTumorOriginalCreepSource", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_CreepSource_Activate
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Stukov_CreepSource_Activate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iD;

    // Automatic Variable Declarations
    unitgroup autoAE87C397_g;
    int autoAE87C397_u;
    unit autoAE87C397_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0001, c_timeGame);
    while ((libBF359936_gv_cM_Stukov_CreepTumorSource[lv_iD] != EventUnit())) {
        lv_iD += 1;
        if ((lv_iD > 99)) {
            UIDisplayMessage(PlayerGroupAll(), lib22142002_gv_dEITYRespondTextLocation, (lib22142002_gv_dEITYRespondError + StringExternal("Param/Value/lib_BF359936_94AD0289")));
            return true;
        }

    }

    autoAE87C397_g = libBF359936_gv_cM_Stukov_CreepTumorSpread[lv_iD];
    autoAE87C397_u = UnitGroupCount(autoAE87C397_g, c_unitCountAll);
    for (;; autoAE87C397_u -= 1) {
        autoAE87C397_var = UnitGroupUnitFromEnd(autoAE87C397_g, autoAE87C397_u);
        if (autoAE87C397_var == null) { break; }
        UnitBehaviorRemove(autoAE87C397_var, "StukovOriginalCreepSourceDisabled", 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Stukov_CreepSource_Activate_Init () {
    libBF359936_gt_CM_Stukov_CreepSource_Activate = TriggerCreate("libBF359936_gt_CM_Stukov_CreepSource_Activate_Func");
    TriggerEnable(libBF359936_gt_CM_Stukov_CreepSource_Activate, false);
    TriggerAddEventUnitBehaviorChange(libBF359936_gt_CM_Stukov_CreepSource_Activate, null, "StukovCreepTumorOriginalCreepSource", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_CreepSource_Death
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Stukov_CreepSource_Death_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iD;

    // Automatic Variable Declarations
    unitgroup auto493346F9_g;
    int auto493346F9_u;
    unit auto493346F9_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libBF359936_gv_cM_Stukov_CreepTumorSource[lv_iD] != EventUnit())) {
        lv_iD += 1;
        if ((lv_iD > 99)) {
            UIDisplayMessage(PlayerGroupAll(), lib22142002_gv_dEITYRespondTextLocation, (lib22142002_gv_dEITYRespondError + StringExternal("Param/Value/lib_BF359936_DE1425FD")));
            return true;
        }

        UnitGroupRemove(libBF359936_gv_cM_Stukov_CreepTumorSourceActive, EventUnit());
    }

    auto493346F9_g = libBF359936_gv_cM_Stukov_CreepTumorSpread[lv_iD];
    auto493346F9_u = UnitGroupCount(auto493346F9_g, c_unitCountAll);
    for (;; auto493346F9_u -= 1) {
        auto493346F9_var = UnitGroupUnitFromEnd(auto493346F9_g, auto493346F9_u);
        if (auto493346F9_var == null) { break; }
        UnitKill(auto493346F9_var);
        UnitGroupRemove(libBF359936_gv_cM_Stukov_CreepTumorSpread[lv_iD], auto493346F9_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Stukov_CreepSource_Death_Init () {
    libBF359936_gt_CM_Stukov_CreepSource_Death = TriggerCreate("libBF359936_gt_CM_Stukov_CreepSource_Death_Func");
    TriggerEnable(libBF359936_gt_CM_Stukov_CreepSource_Death, false);
    TriggerAddEventUnitBehaviorChange(libBF359936_gt_CM_Stukov_CreepSource_Death, null, "StukovCreepTumorCommandCenter", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_CreepSource_Spread
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Stukov_CreepSource_Spread_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_i;
    int lv_iD;
    fixed lv_angle;
    unitgroup lv_creepTumorGroup;
    fixed lv_placementX;
    fixed lv_placementY;
    region lv_mapSize;
    fixed lv_waitTime;
    fixed lv_offset;
    int lv_count;
    fixed lv_angleIncrement;
    int lv_safetyCrack;
    fixed lv_reSpreadDelay;

    // Automatic Variable Declarations
    string auto5B04430B_val;
    int auto1A78949F_ae;
    const int auto1A78949F_ai = 1;
    unitgroup autoFD47813F_g;
    int autoFD47813F_u;
    unit autoFD47813F_var;
    int auto0C5979E2_n;
    int auto0C5979E2_i;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_angle = libNtve_gf_RandomAngle();
    lv_creepTumorGroup = UnitGroupEmpty();
    lv_mapSize = RegionEntireMap();
    lv_waitTime = 1.5;
    lv_offset = 13.0;
    lv_count = 72;
    lv_angleIncrement = 10.0;
    lv_safetyCrack = 3;
    lv_reSpreadDelay = 4.0;

    // Actions
    if (!runActions) {
        return true;
    }

    auto5B04430B_val = EventPlayerEffectUsed();
    if (auto5B04430B_val == "CreepTumorStukovSpreadCC") {
        while ((libBF359936_gv_cM_Stukov_CreepTumorSource[lv_iD] != EventPlayerEffectUsedUnit(c_effectUnitSource))) {
            lv_iD += 1;
            if ((lv_iD > 99)) {
                UIDisplayMessage(PlayerGroupAll(), lib22142002_gv_dEITYRespondTextLocation, (lib22142002_gv_dEITYRespondError + StringExternal("Param/Value/lib_BF359936_F91F1975")));
                return true;
            }

        }
    }
    else if (auto5B04430B_val == "CreepTumorStukovSpread") {
        while ((UnitGroupHasUnit(libBF359936_gv_cM_Stukov_CreepTumorSpread[lv_iD], EventPlayerEffectUsedUnit(c_effectUnitSource)) != false)) {
            lv_iD += 1;
            if ((lv_iD > 99)) {
                UIDisplayMessage(PlayerGroupAll(), lib22142002_gv_dEITYRespondTextLocation, (lib22142002_gv_dEITYRespondError + StringExternal("Param/Value/lib_BF359936_EDC0CBAA")));
                return true;
            }

        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), lib22142002_gv_dEITYRespondTextLocation, (lib22142002_gv_dEITYRespondError + StringExternal("Param/Value/lib_BF359936_75F3084A")));
    }

    if (((UnitHasBehavior2(libBF359936_gv_cM_Stukov_CreepTumorSource[lv_iD], "StukovCreepTumorOriginalCreepSource") == false) || (UnitIsAlive(libBF359936_gv_cM_Stukov_CreepTumorSource[lv_iD]) == false))) {
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "CreepTumorStukovSpread", 0);
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "CreepTumorStukovSpread", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
        UnitBehaviorSetDuration(EventPlayerEffectUsedUnit(c_effectUnitCaster), "CreepTumorStukovSpread", lv_reSpreadDelay);
        return true;
    }
    else {
        auto1A78949F_ae = lv_count;
        lv_i = 1;
        for ( ; ( (auto1A78949F_ai >= 0 && lv_i <= auto1A78949F_ae) || (auto1A78949F_ai < 0 && lv_i >= auto1A78949F_ae) ) ; lv_i += auto1A78949F_ai ) {
            lv_placementX = PointGetX(PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), lv_offset, lv_angle));
            lv_placementY = PointGetY(PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), lv_offset, lv_angle));
            if (((lv_placementX > 1) && (lv_placementY > 1) && (lv_placementX < libNtve_gf_WidthOfRegion(lv_mapSize)) && (lv_placementY < libNtve_gf_HeightOfRegion(lv_mapSize)))) {
                if ((CreepIsPresent(Point(lv_placementX, lv_placementY)) == true)) {
                    lv_creepTumorGroup = UnitGroupEmpty();
                    autoFD47813F_g = UnitGroup("CreepTumorStukov", c_playerAny, RegionCircle(Point(lv_placementX, lv_placementY), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    autoFD47813F_u = UnitGroupCount(autoFD47813F_g, c_unitCountAll);
                    for (;; autoFD47813F_u -= 1) {
                        autoFD47813F_var = UnitGroupUnitFromEnd(autoFD47813F_g, autoFD47813F_u);
                        if (autoFD47813F_var == null) { break; }
                        UnitGroupAdd(lv_creepTumorGroup, autoFD47813F_var);
                        if ((UnitGroupHasUnit(libBF359936_gv_cM_Stukov_CreepTumorSpread[lv_iD], autoFD47813F_var) == false)) {
                            UnitGroupRemove(lv_creepTumorGroup, autoFD47813F_var);
                        }

                    }
                    if ((UnitGroupCount(lv_creepTumorGroup, c_unitCountAlive) == 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorStukov", c_unitCreateIgnorePlacement, 0, Point(lv_placementX, lv_placementY));
                        UnitGroupAdd(libBF359936_gv_cM_Stukov_CreepTumorSpread[lv_iD], UnitLastCreated());
                    }

                }

            }

            lv_angle += lv_angleIncrement;
            auto0C5979E2_n = lv_safetyCrack;
            for (auto0C5979E2_i = 1; auto0C5979E2_i <= auto0C5979E2_n; auto0C5979E2_i += 1) {
                Wait((lv_waitTime / lv_safetyCrack), c_timeGame);
                if (((UnitHasBehavior2(libBF359936_gv_cM_Stukov_CreepTumorSource[lv_iD], "StukovCreepTumorOriginalCreepSource") == false) || (UnitIsAlive(libBF359936_gv_cM_Stukov_CreepTumorSource[lv_iD]) == false))) {
                    UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "CreepTumorStukovSpread", 0);
                    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "CreepTumorStukovSpread", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
                    UnitBehaviorSetDurationRemaining(EventPlayerEffectUsedUnit(c_effectUnitCaster), "CreepTumorStukovSpread", lv_reSpreadDelay);
                    return true;
                }

            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Stukov_CreepSource_Spread_Init () {
    libBF359936_gt_CM_Stukov_CreepSource_Spread = TriggerCreate("libBF359936_gt_CM_Stukov_CreepSource_Spread_Func");
    TriggerEnable(libBF359936_gt_CM_Stukov_CreepSource_Spread, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Stukov_CreepSource_Spread, c_playerAny, "CreepTumorStukovSpread");
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Stukov_CreepSource_Spread, c_playerAny, "CreepTumorStukovSpreadCC");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedStructureInitialSpawn
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Stukov_InfestedStructureInitialSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    libBF359936_gv_cM_Stukov_InfestedStructure[lv_player] = EventUnit();
    UnitModifyCooldown(libBF359936_gv_cM_Stukov_InfestedStructure[lv_player], "Abil/SICivilianStructureSpawnCivilian", 180.0, c_cooldownOperationSet);
    UnitBehaviorAdd(EventUnit(), "SICivilianStructureSpawnCivilianGlobalTimerInitial", EventUnit(), 1);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Stukov_InfestedStructureInitialSpawn_Init () {
    libBF359936_gt_CM_Stukov_InfestedStructureInitialSpawn = TriggerCreate("libBF359936_gt_CM_Stukov_InfestedStructureInitialSpawn_Func");
    TriggerEnable(libBF359936_gt_CM_Stukov_InfestedStructureInitialSpawn, false);
    TriggerAddEventUnitBehaviorChange(libBF359936_gt_CM_Stukov_InfestedStructureInitialSpawn, null, "SICivilianStructureSpawnCivilian", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedStructureRebuilt
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Stukov_InfestedStructureRebuilt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitProgressUnit());

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "HellbatACGluescreenDummy") && (libNtve_gf_TriggeringProgressUnitType() == "StukovInfestedColonistCompound")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libBF359936_gv_cM_Stukov_InfestedStructure[lv_player] = EventUnitProgressUnit();
    UnitBehaviorAdd(EventUnitProgressUnit(), "SICivilianStructureSpawnCivilianGlobalTimerRebuild", EventUnitProgressUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Stukov_InfestedStructureRebuilt_Init () {
    libBF359936_gt_CM_Stukov_InfestedStructureRebuilt = TriggerCreate("libBF359936_gt_CM_Stukov_InfestedStructureRebuilt_Func");
    TriggerEnable(libBF359936_gt_CM_Stukov_InfestedStructureRebuilt, false);
    TriggerAddEventUnitConstructProgress(libBF359936_gt_CM_Stukov_InfestedStructureRebuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_HordeWaveSpawner
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Stukov_HordeWaveSpawner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SIBarracksTrainInfestedSpawnSet", EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Stukov_HordeWaveSpawner_Init () {
    libBF359936_gt_CM_Stukov_HordeWaveSpawner = TriggerCreate("libBF359936_gt_CM_Stukov_HordeWaveSpawner_Func");
    TriggerEnable(libBF359936_gt_CM_Stukov_HordeWaveSpawner, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Stukov_HordeWaveSpawner, c_playerAny, "SICivilianStructureSpawnCivilianGlobalTimerDummyCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_HordeWaveCreated
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Stukov_HordeWaveCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int autoB606B9EC_ae = 4;
    int autoB606B9EC_var;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitCreatedUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libBF359936_gv_cM_Stukov_HordeGroup[lv_player], EventUnitCreatedUnit());
    UnitGroupAdd(libBF359936_gv_cM_Stukov_HordeCurrentWave[lv_player], EventUnitCreatedUnit());
    libBF359936_gv_cM_Stukov_HordeCount[lv_player] = UnitGroupCount(libBF359936_gv_cM_Stukov_HordeGroup[lv_player], c_unitCountAlive);
    if (true) {
    }
    else {
        if (true) {
            autoB606B9EC_var = 2;
            for ( ; autoB606B9EC_var <= autoB606B9EC_ae; autoB606B9EC_var += 1 ) {
                if (true) {
                }

            }
        }

    }
    libBF359936_gf_CM_Stukov_SingleUnitGoToRally(EventUnitCreatedUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Stukov_HordeWaveCreated_Init () {
    libBF359936_gt_CM_Stukov_HordeWaveCreated = TriggerCreate("libBF359936_gt_CM_Stukov_HordeWaveCreated_Func");
    TriggerEnable(libBF359936_gt_CM_Stukov_HordeWaveCreated, false);
    TriggerAddEventUnitCreated(libBF359936_gt_CM_Stukov_HordeWaveCreated, null, "StukovInfestedCocoonTrainCivilian", null);
    TriggerAddEventUnitCreated(libBF359936_gt_CM_Stukov_HordeWaveCreated, null, "StukovInfestedCocoonTrainMarine", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_HordeWaveExploderCreated
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Stukov_HordeWaveExploderCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libBF359936_gv_cM_Stukov_HordeGroup[lv_player], lv_unit);
    UnitGroupAdd(libBF359936_gv_cM_Stukov_HordeCurrentWave[lv_player], lv_unit);
    libBF359936_gv_cM_Stukov_HordeCount[lv_player] = UnitGroupCount(libBF359936_gv_cM_Stukov_HordeGroup[lv_player], c_unitCountAlive);
    libBF359936_gf_CM_Stukov_SingleUnitGoToRally(lv_unit, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Stukov_HordeWaveExploderCreated_Init () {
    libBF359936_gt_CM_Stukov_HordeWaveExploderCreated = TriggerCreate("libBF359936_gt_CM_Stukov_HordeWaveExploderCreated_Func");
    TriggerEnable(libBF359936_gt_CM_Stukov_HordeWaveExploderCreated, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Stukov_HordeWaveExploderCreated, c_playerAny, "HotSHunterTimedLife");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_HordeWaveInteruptionReissueOrder
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Stukov_HordeWaveInteruptionReissueOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "StukovInfestedCivilianACGluescreenDummy") || (UnitGetType(EventUnit()) == "StukovInfestedMarineACGluescreenDummy") || (UnitGetType(EventUnit()) == "StukovInfestedTrooperACGluescreenDummy") || (UnitGetType(EventUnit()) == "RaptorACGluescreenDummy")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    libBF359936_gf_CM_Stukov_SingleUnitGoToRally(lv_unit, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Stukov_HordeWaveInteruptionReissueOrder_Init () {
    libBF359936_gt_CM_Stukov_HordeWaveInteruptionReissueOrder = TriggerCreate("libBF359936_gt_CM_Stukov_HordeWaveInteruptionReissueOrder_Func");
    TriggerEnable(libBF359936_gt_CM_Stukov_HordeWaveInteruptionReissueOrder, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_RallyPlaced
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Stukov_RallyPlaced_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    unitgroup autoF7B04582_g;
    int autoF7B04582_u;
    unit autoF7B04582_var;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libBF359936_gv_cM_Stukov_RallyTarget[lv_player] = null;
    libBF359936_gv_cM_Stukov_RallyPoint[lv_player] = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    autoF7B04582_g = UnitGroup(null, c_playerAny, RegionCircle(libBF359936_gv_cM_Stukov_RallyPoint[lv_player], 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF7B04582_u = UnitGroupCount(autoF7B04582_g, c_unitCountAll);
    for (;; autoF7B04582_u -= 1) {
        autoF7B04582_var = UnitGroupUnitFromEnd(autoF7B04582_g, autoF7B04582_u);
        if (autoF7B04582_var == null) { break; }
        if ((UnitHasBehavior2(autoF7B04582_var, "ExpansionRocks") == true)) {
            libBF359936_gv_cM_Stukov_RallyTarget[lv_player] = autoF7B04582_var;
        }

    }
    if ((libBF359936_gv_cM_Stukov_RallyBeaconUnit[lv_player] != null)) {
        UnitRemove(libBF359936_gv_cM_Stukov_RallyBeaconUnit[lv_player]);
    }

    if ((libBF359936_gv_cM_Stukov_RallyTarget[lv_player] != null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SIStukovRallyBeaconPsiEmitterPoint", c_unitCreateIgnorePlacement, 0, libBF359936_gv_cM_Stukov_RallyPoint[lv_player]);
        libBF359936_gv_cM_Stukov_RallyBeaconUnit[lv_player] = UnitLastCreated();
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SIStukovRallyBeaconPsiEmitterPoint", c_unitCreateIgnorePlacement, 0, libBF359936_gv_cM_Stukov_RallyPoint[lv_player]);
        libBF359936_gv_cM_Stukov_RallyBeaconUnit[lv_player] = UnitLastCreated();
    }
    UnitGroupIssueOrder(libBF359936_gv_cM_Stukov_BunkerGroup[lv_player], OrderTargetingPoint(AbilityCommand("SIInfestedBunkerRally", 0), libBF359936_gv_cM_Stukov_RallyPoint[lv_player]), c_orderQueueReplace);
    libBF359936_gf_CM_Stukov_HordeGoToRally(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Stukov_RallyPlaced_Init () {
    libBF359936_gt_CM_Stukov_RallyPlaced = TriggerCreate("libBF359936_gt_CM_Stukov_RallyPlaced_Func");
    TriggerEnable(libBF359936_gt_CM_Stukov_RallyPlaced, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Stukov_RallyPlaced, c_playerAny, "SIStukovPlaceHordeRallyCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_RallyToUnitDies
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Stukov_RallyToUnitDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libBF359936_gv_cM_Stukov_RallyTarget[lv_player] == EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libBF359936_gv_cM_Stukov_RallyTarget[lv_player] = null;
    libBF359936_gv_cM_Stukov_RallyPoint[lv_player] = UnitGetPosition(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Stukov_RallyToUnitDies_Init () {
    libBF359936_gt_CM_Stukov_RallyToUnitDies = TriggerCreate("libBF359936_gt_CM_Stukov_RallyToUnitDies_Func");
    TriggerEnable(libBF359936_gt_CM_Stukov_RallyToUnitDies, false);
    TriggerAddEventUnitDied(libBF359936_gt_CM_Stukov_RallyToUnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedBunkerInitialSpawn
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Stukov_InfestedBunkerInitialSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_bunkersize;

    // Automatic Variable Declarations
    unitgroup auto248B4698_g;
    int auto248B4698_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "HellbatACGluescreenDummy") && (libNtve_gf_TriggeringProgressUnitType() == "BunkerACGluescreenDummy")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_bunkersize = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "SIInfestedBunkerTransport", "TotalCargoSpace", UnitGetOwner(EventUnitProgressUnit()));
    if ((lv_bunkersize > 0)) {
        UnitCargoCreate(EventUnitProgressUnit(), "StukovInfestedTrooperACGluescreenDummy", lv_bunkersize);
        auto248B4698_g = UnitCargoLastCreatedGroup();
        auto248B4698_u = UnitGroupCount(auto248B4698_g, c_unitCountAll);
        for (;; auto248B4698_u -= 1) {
            lv_u = UnitGroupUnitFromEnd(auto248B4698_g, auto248B4698_u);
            if (lv_u == null) { break; }
            UnitSetState(lv_u, c_unitStateUsingSupply, false);
            UnitBehaviorAdd(lv_u, "SIInfestedBunkerTrainTimedLife", EventUnitProgressUnit(), 1);
            libBF359936_gf_CM_Stukov_NewBunkerUnitProcess(lv_u);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Stukov_InfestedBunkerInitialSpawn_Init () {
    libBF359936_gt_CM_Stukov_InfestedBunkerInitialSpawn = TriggerCreate("libBF359936_gt_CM_Stukov_InfestedBunkerInitialSpawn_Func");
    TriggerEnable(libBF359936_gt_CM_Stukov_InfestedBunkerInitialSpawn, false);
    TriggerAddEventUnitConstructProgress(libBF359936_gt_CM_Stukov_InfestedBunkerInitialSpawn, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedBunkerRegister
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Stukov_InfestedBunkerRegister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libBF359936_gv_cM_Stukov_BunkerGroup[lv_player], lv_u);
    if ((libBF359936_gv_cM_Stukov_RallyPoint[lv_player] != null)) {
        UnitGroupIssueOrder(libBF359936_gv_cM_Stukov_BunkerGroup[lv_player], OrderTargetingPoint(AbilityCommand("SIInfestedBunkerRally", 0), libBF359936_gv_cM_Stukov_RallyPoint[lv_player]), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Stukov_InfestedBunkerRegister_Init () {
    libBF359936_gt_CM_Stukov_InfestedBunkerRegister = TriggerCreate("libBF359936_gt_CM_Stukov_InfestedBunkerRegister_Func");
    TriggerEnable(libBF359936_gt_CM_Stukov_InfestedBunkerRegister, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Stukov_InfestedBunkerRegister, c_playerAny, "SIInfestedBunkerCreation");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedBunkerUnloadRally
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Stukov_InfestedBunkerUnloadRally_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_newUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_newUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    libBF359936_gf_CM_Stukov_NewBunkerUnitProcess(lv_newUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Stukov_InfestedBunkerUnloadRally_Init () {
    libBF359936_gt_CM_Stukov_InfestedBunkerUnloadRally = TriggerCreate("libBF359936_gt_CM_Stukov_InfestedBunkerUnloadRally_Func");
    TriggerEnable(libBF359936_gt_CM_Stukov_InfestedBunkerUnloadRally, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Stukov_InfestedBunkerUnloadRally, c_playerAny, "SIInfestedBunkerBunkerUnloadSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedBunkerAutoLoad
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Stukov_InfestedBunkerAutoLoad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bunker;
    int lv_p;
    unit lv_newUnit;
    point lv_point;
    int lv_bunkersize;

    // Automatic Variable Declarations
    const int auto48CDA17D_ae = 4;
    int auto48CDA17D_var;

    // Variable Initialization
    lv_bunker = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_p = EventPlayer();
    lv_point = UnitGetPosition(lv_bunker);
    lv_bunkersize = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "SIInfestedBunkerTransport", "TotalCargoSpace", UnitGetOwner(lv_bunker));

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_bunkersize > 0) && (UnitCargoValue(lv_bunker, c_unitCargoSpaceFree) > 0)) {
        UnitCargoCreate(lv_bunker, "StukovInfestedTrooperACGluescreenDummy", 1);
        lv_newUnit = UnitCargoLastCreated();
    }
    else {
        if ((libBF359936_gv_cM_Stukov_RallyPoint[lv_p] != null)) {
            lv_point = libNtve_gf_PointOffsetTowardsPoint(lv_point, 1.0, libBF359936_gv_cM_Stukov_RallyPoint[lv_p]);
        }
        else {
            if ((UnitRallyPointTargetPoint(lv_bunker, 1, 1) != null)) {
                lv_point = libNtve_gf_PointOffsetTowardsPoint(lv_point, 1.0, UnitRallyPointTargetPoint(lv_bunker, 1, 1));
            }

        }
        UnitCreate(1, "StukovInfestedTrooperACGluescreenDummy", 0, lv_p, lv_point, 270.0);
        lv_newUnit = UnitLastCreated();
        SoundPlayOnUnitForPlayer(SoundLink("InfestedBunker_Unload", -1), EventPlayer(), PlayerGroupAll(), lv_newUnit, 0.0, 100.0, 0.0);
        if ((libBF359936_gv_cM_Stukov_RallyPoint[lv_p] != null)) {
        }
        else {
            if ((UnitRallyPointTargetPoint(lv_bunker, 1, 1) != null)) {
                UnitIssueOrder(lv_newUnit, OrderTargetingPoint(AbilityCommand("move", 0), UnitRallyPointTargetPoint(lv_bunker, 1, 1)), c_orderQueueReplace);
                auto48CDA17D_var = 2;
                for ( ; auto48CDA17D_var <= auto48CDA17D_ae; auto48CDA17D_var += 1 ) {
                    if ((UnitRallyPointTargetPoint(lv_bunker, 1, auto48CDA17D_var) != null)) {
                        UnitIssueOrder(lv_newUnit, OrderTargetingPoint(AbilityCommand("move", 0), UnitRallyPointTargetPoint(lv_bunker, 1, auto48CDA17D_var)), c_orderQueueAddToEnd);
                    }

                }
            }

        }
        if ((UnitRallyPointTargetPoint(lv_bunker, 1, 1) != null)) {
            lv_point = libNtve_gf_PointOffsetTowardsPoint(lv_point, 1.0, UnitRallyPointTargetPoint(lv_bunker, 1, 1));
        }

    }
    UnitSetState(lv_newUnit, c_unitStateUsingSupply, false);
    UnitBehaviorAdd(lv_newUnit, "SIInfestedBunkerTrainTimedLife", lv_newUnit, 1);
    libBF359936_gf_CM_Stukov_NewBunkerUnitProcess(lv_newUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Stukov_InfestedBunkerAutoLoad_Init () {
    libBF359936_gt_CM_Stukov_InfestedBunkerAutoLoad = TriggerCreate("libBF359936_gt_CM_Stukov_InfestedBunkerAutoLoad_Func");
    TriggerEnable(libBF359936_gt_CM_Stukov_InfestedBunkerAutoLoad, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Stukov_InfestedBunkerAutoLoad, c_playerAny, "SIInfestedBunkerAutoSpawnerDummyMU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stukov_InfestedBunker_RedirectAttack
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_Stukov_InfestedBunker_RedirectAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libBF359936_gv_stukov_InfestedBunker_Enabled == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "StukovInfestedBunkerACGluescreenDummy"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DataTableSetUnit(true, (IntToString(UnitGetTag(EventUnit())) + "_cargotarget"), EventUnitTargetUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_Stukov_InfestedBunker_RedirectAttack_Init () {
    libBF359936_gt_Stukov_InfestedBunker_RedirectAttack = TriggerCreate("libBF359936_gt_Stukov_InfestedBunker_RedirectAttack_Func");
    TriggerEnable(libBF359936_gt_Stukov_InfestedBunker_RedirectAttack, false);
    TriggerAddEventUnitAbility(libBF359936_gt_Stukov_InfestedBunker_RedirectAttack, null, AbilityCommand("RedirectAttackInfestedBunker", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libBF359936_gt_Stukov_InfestedBunker_RedirectAttack, null, AbilityCommand("attack", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stukov_InfestedBunker_RedirectStop
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_Stukov_InfestedBunker_RedirectStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libBF359936_gv_stukov_InfestedBunker_Enabled == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "StukovInfestedBunkerACGluescreenDummy"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DataTableSetUnit(true, (IntToString(UnitGetTag(EventUnit())) + "_cargotarget"), null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_Stukov_InfestedBunker_RedirectStop_Init () {
    libBF359936_gt_Stukov_InfestedBunker_RedirectStop = TriggerCreate("libBF359936_gt_Stukov_InfestedBunker_RedirectStop_Func");
    TriggerEnable(libBF359936_gt_Stukov_InfestedBunker_RedirectStop, false);
    TriggerAddEventUnitAbility(libBF359936_gt_Stukov_InfestedBunker_RedirectStop, null, AbilityCommand("RedirectStopInfestedBunker", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stukov_InfestedBunker_WeaponsLoop/OFF
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_Stukov_InfestedBunker_WeaponsLoopOFF_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_behavior;
    unit lv_bunker;
    unit lv_unit;
    int lv_weapon;
    int lv_weap_count;
    string lv_filter;
    unit lv_u3;
    fixed lv_range;
    unit lv_targ_u;
    int lv_targ_priority;
    bool lv_on_cooldown;
    fixed lv_cooldown;
    fixed lv_cooldown_multiplier;
    unitgroup lv_searchStandard;
    unitgroup lv_searchBunker_A;
    unitgroup lv_searchBunker_B;
    unitgroup lv_searchBunker_C;
    unitgroup lv_searchBunker_D;
    unitgroup lv_searchActual;

    // Automatic Variable Declarations
    unitgroup autoDC362931_g;
    int autoDC362931_u;
    unitgroup autoCC7D30EE_g;
    int autoCC7D30EE_u;
    int auto74A48368_ae;
    const int auto74A48368_ai = 1;
    int autoC3193DDA_ae;
    const int autoC3193DDA_ai = 1;
    int auto244CBA45_ae;
    const int auto244CBA45_ai = 1;
    unitgroup autoF18EBA63_g;
    int autoF18EBA63_u;

    // Variable Initialization
    lv_filter = "";
    lv_cooldown_multiplier = 1.0;
    lv_searchStandard = UnitGroupEmpty();
    lv_searchBunker_A = UnitGroupEmpty();
    lv_searchBunker_B = UnitGroupEmpty();
    lv_searchBunker_C = UnitGroupEmpty();
    lv_searchBunker_D = UnitGroupEmpty();
    lv_searchActual = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libBF359936_gv_stukov_InfestedBunker_Enabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("StukovInfestedBunkerACGluescreenDummy", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        autoDC362931_g = UnitGroup("StukovInfestedBunkerACGluescreenDummy", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterStunned - 32))), 0);
        autoDC362931_u = UnitGroupCount(autoDC362931_g, c_unitCountAll);
        for (;; autoDC362931_u -= 1) {
            lv_bunker = UnitGroupUnitFromEnd(autoDC362931_g, autoDC362931_u);
            if (lv_bunker == null) { break; }
            autoCC7D30EE_g = UnitCargoGroup(lv_bunker);
            autoCC7D30EE_u = UnitGroupCount(autoCC7D30EE_g, c_unitCountAll);
            for (;; autoCC7D30EE_u -= 1) {
                lv_unit = UnitGroupUnitFromEnd(autoCC7D30EE_g, autoCC7D30EE_u);
                if (lv_unit == null) { break; }
                lv_on_cooldown = false;
                if ((UnitWeaponCount(lv_unit) == 0)) {
                    break;
                }

                lv_weap_count = (CatalogFieldValueCount(c_gameCatalogUnit, UnitGetType(lv_unit), "WeaponArray", UnitGetOwner(lv_unit)) - 1);
                auto74A48368_ae = lv_weap_count;
                lv_weapon = 0;
                for ( ; ( (auto74A48368_ai >= 0 && lv_weapon <= auto74A48368_ae) || (auto74A48368_ai < 0 && lv_weapon >= auto74A48368_ae) ) ; lv_weapon += auto74A48368_ai ) {
                    if ((DataTableGetFixed(true, (IntToString(UnitGetTag(lv_unit)) + ("_weapon" + IntToString(lv_weapon)))) >= GameGetMissionTime()) && (CatalogFieldValueGetAsInt(c_gameCatalogWeapon, CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_unit), "WeaponArray[" + IntToString(lv_weapon) + "].Link", UnitGetOwner(lv_unit)), "Options[LinkedCooldown]", UnitGetOwner(lv_unit)) == 1)) {
                        lv_on_cooldown = true;
                    }

                }
                autoC3193DDA_ae = UnitBehaviorCountAll(lv_unit);
                lv_behavior = 1;
                for ( ; ( (autoC3193DDA_ai >= 0 && lv_behavior <= autoC3193DDA_ae) || (autoC3193DDA_ai < 0 && lv_behavior >= autoC3193DDA_ae) ) ; lv_behavior += autoC3193DDA_ai ) {
                    if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, UnitBehaviorGet(lv_unit, lv_behavior), "Modification.AttackSpeedMultiplier", UnitGetOwner(lv_unit)) != 1.0)) {
                        lv_cooldown_multiplier = (lv_cooldown_multiplier + Pow(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, UnitBehaviorGet(lv_unit, lv_behavior), "Modification.AttackSpeedMultiplier", UnitGetOwner(lv_unit)), UnitBehaviorCount(lv_unit, UnitBehaviorGet(lv_unit, lv_behavior))));
                    }

                }
                if ((lv_cooldown_multiplier != 1)) {
                    lv_cooldown_multiplier = (lv_cooldown_multiplier - 1.0);
                }

                auto244CBA45_ae = lv_weap_count;
                lv_weapon = 0;
                for ( ; ( (auto244CBA45_ai >= 0 && lv_weapon <= auto244CBA45_ae) || (auto244CBA45_ai < 0 && lv_weapon >= auto244CBA45_ae) ) ; lv_weapon += auto244CBA45_ai ) {
                    if ((lv_on_cooldown == true)) {
                        break;
                    }

                    lv_filter = CatalogFieldValueGet(c_gameCatalogWeapon, CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_unit), "WeaponArray[" + IntToString(lv_weapon) + "].Link", UnitGetOwner(lv_unit)), "TargetFilters", UnitGetOwner(lv_unit));
                    lv_range = (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, "StukovInfestedBunkerACGluescreenDummy", "Radius", UnitGetOwner(lv_unit)) + UnitWeaponRange(lv_unit, (lv_weapon + 1)));
                    lv_range = (lv_range + libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, "StukovInfestedBunkerACGluescreenDummy", "Radius", UnitGetOwner(lv_bunker)));
                    lv_cooldown = ((UnitWeaponPeriod(lv_unit, (lv_weapon + 1)) / libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogWeapon, CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_unit), "WeaponArray[" + IntToString(lv_weapon) + "].Link", UnitGetOwner(lv_unit)), "RateMultiplier", UnitGetOwner(lv_unit))) / lv_cooldown_multiplier);
                    lv_targ_u = null;
                    lv_targ_priority = 0;
                    lv_searchStandard = UnitGroupFilterAlliance(UnitGroupSearch(null, c_playerAny, UnitGetPosition(lv_bunker), lv_range, libNtve_gf_ConvertTargetFilterStringToUnitFilter(lv_filter), 0), UnitGetOwner(lv_bunker), c_unitAllianceEnemy, 0);
                    lv_searchBunker_A = UnitGroupFilterRegion(lv_searchStandard, RegionCircle(PointWithOffsetPolar(UnitGetPosition(lv_bunker), 1.75, UnitGetFacing(lv_bunker)), 2.0), 0);
                    lv_searchBunker_B = UnitGroupFilterRegion(lv_searchStandard, RegionCircle(PointWithOffsetPolar(UnitGetPosition(lv_bunker), 4.0, UnitGetFacing(lv_bunker)), 3.0), 0);
                    lv_searchBunker_C = UnitGroupFilterRegion(lv_searchStandard, RegionCircle(PointWithOffsetPolar(UnitGetPosition(lv_bunker), 8.0, UnitGetFacing(lv_bunker)), 4.75), 0);
                    lv_searchBunker_D = UnitGroupFilterRegion(lv_searchStandard, RegionCircle(PointWithOffsetPolar(UnitGetPosition(lv_bunker), 22.0, UnitGetFacing(lv_bunker)), 14.0), 0);
                    UnitGroupClear(lv_searchActual);
                    UnitGroupAddUnitGroup(lv_searchActual, lv_searchBunker_A);
                    UnitGroupAddUnitGroup(lv_searchActual, lv_searchBunker_B);
                    UnitGroupAddUnitGroup(lv_searchActual, lv_searchBunker_C);
                    UnitGroupAddUnitGroup(lv_searchActual, lv_searchBunker_D);
                    autoF18EBA63_g = lv_searchActual;
                    autoF18EBA63_u = UnitGroupCount(autoF18EBA63_g, c_unitCountAll);
                    for (;; autoF18EBA63_u -= 1) {
                        lv_u3 = UnitGroupUnitFromEnd(autoF18EBA63_g, autoF18EBA63_u);
                        if (lv_u3 == null) { break; }
                        if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(lv_u3), "AttackTargetPriority", UnitGetOwner(lv_u3)) > lv_targ_priority) && (UnitFilterMatch(lv_u3, UnitGetOwner(lv_unit), libNtve_gf_ConvertTargetFilterStringToUnitFilter(lv_filter)) == true) && (PlayerGetAlliance(UnitGetOwner(lv_unit), c_allianceIdPassive, UnitGetOwner(lv_u3)) == false) && (((OrderGetTargetUnit(UnitOrder(lv_bunker, 0)) != lv_u3) && (OrderGetAbilityCommand(UnitOrder(lv_bunker, 0)) == AbilityCommand("attack", 0))) || ((OrderGetTargetUnit(UnitOrder(lv_bunker, 0)) == lv_u3) && (UnitGroupCount(lv_searchActual, c_unitCountAlive) == 1) && (OrderGetAbilityCommand(UnitOrder(lv_bunker, 0)) == AbilityCommand("attack", 0))) || (OrderGetAbilityCommand(UnitOrder(lv_bunker, 0)) != AbilityCommand("attack", 0)))) {
                            lv_targ_u = lv_u3;
                            lv_targ_priority = CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(lv_u3), "AttackTargetPriority", UnitGetOwner(lv_u3));
                        }

                    }
                    if ((DataTableGetUnit(true, (IntToString(UnitGetTag(lv_bunker)) + "_cargotarget")) != null)) {
                        if ((UnitIsValid(DataTableGetUnit(true, (IntToString(UnitGetTag(lv_bunker)) + "_cargotarget"))) == true)) {
                            if ((UnitFilterMatch(DataTableGetUnit(true, (IntToString(UnitGetTag(lv_bunker)) + "_cargotarget")), UnitGetOwner(lv_unit), libNtve_gf_ConvertTargetFilterStringToUnitFilter(lv_filter)) == true) && (DistanceBetweenPoints(UnitGetPosition(DataTableGetUnit(true, (IntToString(UnitGetTag(lv_bunker)) + "_cargotarget"))), UnitGetPosition(lv_bunker)) <= lv_range)) {
                                lv_targ_u = DataTableGetUnit(true, (IntToString(UnitGetTag(lv_bunker)) + "_cargotarget"));
                            }

                        }

                    }

                    if ((lv_targ_u == null)) {
                        continue;
                    }

                    UnitBehaviorAdd(lv_bunker, "InfestedBunkerUprootedChasing", lv_bunker, 1);
                    if ((CatalogFieldValueGetAsInt(c_gameCatalogWeapon, CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_unit), "WeaponArray[" + IntToString(lv_weapon) + "].Link", UnitGetOwner(lv_unit)), "Options[LinkedCooldown]", UnitGetOwner(lv_unit)) == 1)) {
                        UnitWeaponSetPeriodRemaining(lv_unit, (lv_weapon + 1), lv_cooldown);
                        DataTableSetFixed(true, (IntToString(UnitGetTag(lv_unit)) + ("_weapon" + IntToString(lv_weapon))), (GameGetMissionTime() + (lv_cooldown / 16.0)));
                        libBF359936_gf_Stukov_InfestedBunker_Attack(lv_unit, lv_targ_u, lv_weapon, RandomFixed(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogWeapon, CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_unit), "WeaponArray[" + IntToString(lv_weapon) + "].Link", UnitGetOwner(lv_unit)), "RandomDelayMin", UnitGetOwner(lv_unit)), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogWeapon, CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_unit), "WeaponArray[" + IntToString(lv_weapon) + "].Link", UnitGetOwner(lv_unit)), "RandomDelayMax", UnitGetOwner(lv_unit))));
                        break;
                    }
                    else {
                        UnitWeaponSetPeriodRemaining(lv_unit, (lv_weapon + 1), lv_cooldown);
                        DataTableSetFixed(true, (IntToString(UnitGetTag(lv_unit)) + ("_weapon" + IntToString(lv_weapon))), (GameGetMissionTime() + (lv_cooldown / 16.0)));
                        libBF359936_gf_Stukov_InfestedBunker_Attack(lv_unit, lv_targ_u, lv_weapon, RandomFixed(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogWeapon, CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_unit), "WeaponArray[" + IntToString(lv_weapon) + "].Link", UnitGetOwner(lv_unit)), "RandomDelayMin", UnitGetOwner(lv_unit)), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogWeapon, CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_unit), "WeaponArray[" + IntToString(lv_weapon) + "].Link", UnitGetOwner(lv_unit)), "RandomDelayMax", UnitGetOwner(lv_unit))));
                    }
                }
            }
        }
    }
    else {
        libBF359936_gv_stukov_InfestedBunker_Enabled = false;
        TriggerEnable(libBF359936_gt_Stukov_InfestedBunker_RedirectAttack, false);
        TriggerEnable(libBF359936_gt_Stukov_InfestedBunker_RedirectStop, false);
        TriggerEnable(libBF359936_gt_Stukov_InfestedBunker_WeaponsLoopOFF, false);
        TriggerEnable(libBF359936_gt_Stukov_InfestedBunker_ONCreate, true);
        TriggerEnable(libBF359936_gt_Stukov_InfestedBunker_ONMorph, true);
        TriggerStop(libBF359936_gt_Stukov_InfestedBunker_WeaponsLoopOFF);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_Stukov_InfestedBunker_WeaponsLoopOFF_Init () {
    libBF359936_gt_Stukov_InfestedBunker_WeaponsLoopOFF = TriggerCreate("libBF359936_gt_Stukov_InfestedBunker_WeaponsLoopOFF_Func");
    TriggerEnable(libBF359936_gt_Stukov_InfestedBunker_WeaponsLoopOFF, false);
    TriggerAddEventTimePeriodic(libBF359936_gt_Stukov_InfestedBunker_WeaponsLoopOFF, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stukov_InfestedBunker_ON (Create)
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_Stukov_InfestedBunker_ONCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libBF359936_gv_stukov_InfestedBunker_Enabled == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitCreatedUnit()) == "StukovInfestedBunkerACGluescreenDummy")) {
        TriggerEnable(libBF359936_gt_Stukov_InfestedBunker_RedirectAttack, true);
        TriggerEnable(libBF359936_gt_Stukov_InfestedBunker_RedirectStop, true);
        TriggerEnable(libBF359936_gt_Stukov_InfestedBunker_WeaponsLoopOFF, true);
        libBF359936_gv_stukov_InfestedBunker_Enabled = true;
        TriggerEnable(libBF359936_gt_Stukov_InfestedBunker_ONCreate, false);
        TriggerEnable(libBF359936_gt_Stukov_InfestedBunker_ONMorph, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_Stukov_InfestedBunker_ONCreate_Init () {
    libBF359936_gt_Stukov_InfestedBunker_ONCreate = TriggerCreate("libBF359936_gt_Stukov_InfestedBunker_ONCreate_Func");
    TriggerEnable(libBF359936_gt_Stukov_InfestedBunker_ONCreate, false);
    TriggerAddEventUnitCreated(libBF359936_gt_Stukov_InfestedBunker_ONCreate, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stukov_InfestedBunker_ON (Morph)
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_Stukov_InfestedBunker_ONMorph_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libBF359936_gv_stukov_InfestedBunker_Enabled == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "StukovInfestedBunkerACGluescreenDummy")) {
        TriggerEnable(libBF359936_gt_Stukov_InfestedBunker_RedirectAttack, true);
        TriggerEnable(libBF359936_gt_Stukov_InfestedBunker_RedirectStop, true);
        TriggerEnable(libBF359936_gt_Stukov_InfestedBunker_WeaponsLoopOFF, true);
        libBF359936_gv_stukov_InfestedBunker_Enabled = true;
        TriggerEnable(libBF359936_gt_Stukov_InfestedBunker_ONCreate, false);
        TriggerEnable(libBF359936_gt_Stukov_InfestedBunker_ONMorph, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_Stukov_InfestedBunker_ONMorph_Init () {
    libBF359936_gt_Stukov_InfestedBunker_ONMorph = TriggerCreate("libBF359936_gt_Stukov_InfestedBunker_ONMorph_Func");
    TriggerEnable(libBF359936_gt_Stukov_InfestedBunker_ONMorph, false);
    TriggerAddEventUnitAbility(libBF359936_gt_Stukov_InfestedBunker_ONMorph, null, AbilityCommand("SIInfestedBunkerUproot", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_TriggersInit
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Stukov_TriggersInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libBF359936_gt_CM_Stukov_InfestedBunkerAutoLoad, true);
    TriggerEnable(libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, true);
    TriggerEnable(libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain, true);
    TriggerEnable(libBF359936_gt_CM_Stukov_InfestedBunkerUnloadRally, true);
    TriggerEnable(libBF359936_gt_CM_Stukov_InfestedBunkerRegister, true);
    TriggerEnable(libBF359936_gt_CM_Stukov_InfestedBunkerInitialSpawn, true);
    TriggerEnable(libBF359936_gt_CM_Stukov_UnitCostRefund, true);
    TriggerEnable(libBF359936_gt_CM_Stukov_FullSupplyCheat, true);
    TriggerEnable(libBF359936_gt_CM_Stukov_CreepSource_Spread, true);
    TriggerEnable(libBF359936_gt_CM_Stukov_InfestedStructureInitialSpawn, true);
    TriggerEnable(libBF359936_gt_CM_Stukov_InfestedStructureRebuilt, true);
    TriggerEnable(libBF359936_gt_CM_Stukov_HordeWaveSpawner, true);
    TriggerEnable(libBF359936_gt_CM_Stukov_HordeWaveCreated, true);
    TriggerEnable(libBF359936_gt_CM_Stukov_HordeWaveExploderCreated, true);
    TriggerEnable(libBF359936_gt_CM_Stukov_HordeWaveInteruptionReissueOrder, true);
    TriggerEnable(libBF359936_gt_CM_Stukov_RallyPlaced, true);
    TriggerEnable(libBF359936_gt_CM_Stukov_RallyToUnitDies, true);
    TriggerEnable(libBF359936_gt_CM_Stukov_InfestedSiegeTankDeath, true);
    TriggerEnable(libBF359936_gt_CM_Stukov_CreepSource_Create, true);
    TriggerEnable(libBF359936_gt_CM_Stukov_CreepSource_Activate, true);
    TriggerEnable(libBF359936_gt_CM_Stukov_CreepSource_Deactivate, true);
    TriggerEnable(libBF359936_gt_CM_Stukov_CreepSource_Death, true);
    TriggerEnable(libBF359936_gt_Stukov_InfestedBunker_ONCreate, true);
    TriggerEnable(libBF359936_gt_Stukov_InfestedBunker_ONMorph, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Stukov_TriggersInit_Init () {
    libBF359936_gt_CM_Stukov_TriggersInit = TriggerCreate("libBF359936_gt_CM_Stukov_TriggersInit_Func");
    TriggerEnable(libBF359936_gt_CM_Stukov_TriggersInit, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedTimedLifeFoodHackBurrow
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(EventUnit(), c_unitStateUsingSupply, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow_Init () {
    libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow = TriggerCreate("libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow_Func");
    TriggerEnable(libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, false);
    TriggerAddEventUnitAbility(libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, null, AbilityCommand("BurrowSIInfestedCivilianUp", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, null, AbilityCommand("BurrowSIInfestedCivilianDown", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, null, AbilityCommand("BurrowSIInfestedTrooperUp", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, null, AbilityCommand("BurrowSIInfestedTrooperDown", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, null, AbilityCommand("BurrowStukovVolatileInfestedDown", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, null, AbilityCommand("BurrowStukovVolatileInfestedUp", 0), c_abilMorphStageUnitStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedTimedLifeFoodHackTrain
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(EventUnitCreatedUnit(), c_unitStateUsingSupply, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain_Init () {
    libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain = TriggerCreate("libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain_Func");
    TriggerEnable(libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain, false);
    TriggerAddEventUnitCreated(libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain, null, "StukovInfestedCocoonTrainCivilian", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedTimedLifeFoodHackBirth
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackBirth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "StukovCocoonCivilian"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitStateUsingSupply, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackBirth_Init () {
    libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackBirth = TriggerCreate("libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackBirth_Func");
    TriggerEnable(libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackBirth, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackBirth, c_playerAny, "SIBarracksTrainInfestedCivilianSpawnCU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_UnitCostRefund
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Stukov_UnitCostRefund_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageDeathCheck(c_deathTypeCancel) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "StukovCocoonBanshee") || (UnitGetType(EventUnit()) == "StukovCocoonBroodQueen") || (UnitGetType(EventUnit()) == "StukovCocoonCivilian") || (UnitGetType(EventUnit()) == "StukovCocoonDiamondback") || (UnitGetType(EventUnit()) == "StukovCocoonLiberator") || (UnitGetType(EventUnit()) == "StukovCocoonMarine") || (UnitGetType(EventUnit()) == "StukovCocoonOverlord") || (UnitGetType(EventUnit()) == "StukovCocoonSCV") || (UnitGetType(EventUnit()) == "StukovCocoonSiegeTank") || (UnitGetType(EventUnit()) == "StukovCocoonValkyrie")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "CostResource[" + IntToString(0) + "]", UnitGetOwner(EventUnit())));
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "CostResource[" + IntToString(1) + "]", UnitGetOwner(EventUnit())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Stukov_UnitCostRefund_Init () {
    libBF359936_gt_CM_Stukov_UnitCostRefund = TriggerCreate("libBF359936_gt_CM_Stukov_UnitCostRefund_Func");
    TriggerEnable(libBF359936_gt_CM_Stukov_UnitCostRefund, false);
    TriggerAddEventUnitDied(libBF359936_gt_CM_Stukov_UnitCostRefund, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedSiegeTankDeath
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Stukov_InfestedSiegeTankDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stackCount;
    int lv_player;

    // Automatic Variable Declarations
    int auto4E5D4C9B_ae;
    const int auto4E5D4C9B_ai = 1;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "StukovInfestedSiegeTankAmmo") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_stackCount = UnitBehaviorCount(EventUnit(), "StukovInfestedSiegeTankAmmo");
    auto4E5D4C9B_ae = lv_stackCount;
    lv_stackCount = 1;
    for ( ; ( (auto4E5D4C9B_ai >= 0 && lv_stackCount <= auto4E5D4C9B_ae) || (auto4E5D4C9B_ai < 0 && lv_stackCount >= auto4E5D4C9B_ae) ) ; lv_stackCount += auto4E5D4C9B_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RaptorACGluescreenDummy", 0, EventPlayer(), UnitGetPosition(EventUnit()));
        UnitSetState(UnitLastCreated(), c_unitStateUsingSupply, false);
        UnitBehaviorAddPlayer(UnitLastCreated(), "SIBarracksTrainTimedLife", EventPlayer(), 1);
        UnitGroupAdd(libBF359936_gv_cM_Stukov_HordeGroup[lv_player], UnitLastCreated());
        UnitGroupAdd(libBF359936_gv_cM_Stukov_HordeCurrentWave[lv_player], UnitLastCreated());
        libBF359936_gv_cM_Stukov_HordeCount[lv_player] = UnitGroupCount(libBF359936_gv_cM_Stukov_HordeGroup[lv_player], c_unitCountAlive);
        libBF359936_gf_CM_Stukov_SingleUnitGoToRally(UnitLastCreated(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Stukov_InfestedSiegeTankDeath_Init () {
    libBF359936_gt_CM_Stukov_InfestedSiegeTankDeath = TriggerCreate("libBF359936_gt_CM_Stukov_InfestedSiegeTankDeath_Func");
    TriggerEnable(libBF359936_gt_CM_Stukov_InfestedSiegeTankDeath, false);
    TriggerAddEventUnitDied(libBF359936_gt_CM_Stukov_InfestedSiegeTankDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stukov - Snare Behavior Off
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_StukovSnareBehaviorOn2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    fixed lv_defaultHeight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_defaultHeight = UnitTypeGetProperty(UnitGetType(lv_unit), c_unitPropHeight);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(lv_unit, lv_defaultHeight, libBF359936_gv_StukovInfestedWraithSnareBehavior3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_StukovSnareBehaviorOn2_Init () {
    libBF359936_gt_StukovSnareBehaviorOn2 = TriggerCreate("libBF359936_gt_StukovSnareBehaviorOn2_Func");
    TriggerAddEventUnitBehaviorChange(libBF359936_gt_StukovSnareBehaviorOn2, null, libBF359936_gv_StukovInfestedWraithSnareBehavior, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_Z_Mutalisk Strain (Brood Lord) Spawned
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_Z_MutaliskStrainBroodLordSpawned_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "BroodLord"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitCreatedUnit(), "KerrigansBroodSkin", EventUnitCreatedUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_Z_MutaliskStrainBroodLordSpawned_Init () {
    libBF359936_gt_GE_Z_MutaliskStrainBroodLordSpawned = TriggerCreate("libBF359936_gt_GE_Z_MutaliskStrainBroodLordSpawned_Func");
    TriggerEnable(libBF359936_gt_GE_Z_MutaliskStrainBroodLordSpawned, false);
    TriggerAddEventUnitCreated(libBF359936_gt_GE_Z_MutaliskStrainBroodLordSpawned, null, "CreateZergUnits003", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_Z_Creep Tumor AB
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_Z_CreepTumorAB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeGame);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CreepFrenzy13", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CreepFrenzy13CreepTumor", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "makeCreep4x4Enhanced", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    Wait(5.0, c_timeGame);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CreepFrenzy13", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CreepFrenzy13CreepTumor", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "makeCreep4x4Enhanced", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    Wait(2.5, c_timeGame);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CreepFrenzy13", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CreepFrenzy13CreepTumor", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "makeCreep4x4Enhanced", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    Wait(0.5, c_timeGame);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CreepFrenzy13", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CreepFrenzy13CreepTumor", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "makeCreep4x4Enhanced", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    Wait(0.5, c_timeGame);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CreepFrenzy13", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CreepFrenzy13CreepTumor", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "makeCreep4x4Enhanced", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    Wait(0.5, c_timeGame);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CreepFrenzy13", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CreepFrenzy13CreepTumor", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "makeCreep4x4Enhanced", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    Wait(0.5, c_timeGame);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CreepFrenzy13", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CreepFrenzy13CreepTumor", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "makeCreep4x4Enhanced", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    Wait(0.5, c_timeGame);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CreepFrenzy13", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CreepFrenzy13CreepTumor", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "makeCreep4x4Enhanced", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    Wait(0.5, c_timeGame);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CreepFrenzy13", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CreepFrenzy13CreepTumor", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "makeCreep4x4Enhanced", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    Wait(0.5, c_timeGame);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CreepFrenzy13", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CreepFrenzy13CreepTumor", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "makeCreep4x4Enhanced", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_Z_CreepTumorAB_Init () {
    libBF359936_gt_GE_Z_CreepTumorAB = TriggerCreate("libBF359936_gt_GE_Z_CreepTumorAB_Func");
    TriggerEnable(libBF359936_gt_GE_Z_CreepTumorAB, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_GE_Z_CreepTumorAB, c_playerAny, "CreepTumorBuildRB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_Enabler_Protoss
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_Enabler_Protoss_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libBF359936_gt_GE_P_WarpGate_SupplicantWarpIn, true);
    TriggerEnable(libBF359936_gt_GE_P_Havoc_BloodshardResonanceUpgrade, true);
    TriggerEnable(libBF359936_gt_GE_P_Havoc_BloodshardResonanceOwnerChange, true);
    TriggerEnable(libBF359936_gt_GE_P_TPadTeleport, true);
    TriggerEnable(libBF359936_gt_GE_P_TPadConnect, true);
    TriggerEnable(libBF359936_gt_GE_P_KaraxChangeOwner, true);
    TriggerEnable(libBF359936_gt_GE_P_HTSC1Hallu2, true);
    TriggerEnable(libBF359936_gt_GE_P_WarpConduitAutoMoves, true);
    TriggerEnable(libBF359936_gt_GE_P_PowerUsers, true);
    TriggerExecute(libBF359936_gt_GE_Enabler_Zeratul, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_Enabler_Protoss_Init () {
    libBF359936_gt_GE_Enabler_Protoss = TriggerCreate("libBF359936_gt_GE_Enabler_Protoss_Func");
    TriggerEnable(libBF359936_gt_GE_Enabler_Protoss, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_P_WarpGate_SupplicantWarpIn
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_P_WarpGate_SupplicantWarpIn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_abilityLocationX;
    fixed lv_abilityLocationY;
    fixed lv_warpDistance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abilityLocationX = PointGetX(UnitGetPosition(EventUnitCreatedUnit()));
    lv_abilityLocationY = PointGetY(UnitGetPosition(EventUnitCreatedUnit()));
    lv_warpDistance = 0.15;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "SupplicantWarpTrainDummy"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnitCreatedUnit());
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("WarpGateTrainSupplicant", 0), Point((lv_abilityLocationX - lv_warpDistance), lv_abilityLocationY)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("WarpGateTrainSupplicant", 0), Point((lv_abilityLocationX + lv_warpDistance), lv_abilityLocationY)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_P_WarpGate_SupplicantWarpIn_Init () {
    libBF359936_gt_GE_P_WarpGate_SupplicantWarpIn = TriggerCreate("libBF359936_gt_GE_P_WarpGate_SupplicantWarpIn_Func");
    TriggerEnable(libBF359936_gt_GE_P_WarpGate_SupplicantWarpIn, false);
    TriggerAddEventUnitCreated(libBF359936_gt_GE_P_WarpGate_SupplicantWarpIn, null, "WarpGateTrain", null);
    TriggerAddEventUnitCreated(libBF359936_gt_GE_P_WarpGate_SupplicantWarpIn, null, "ArtanisWarpGateTrain", null);
    TriggerAddEventUnitCreated(libBF359936_gt_GE_P_WarpGate_SupplicantWarpIn, null, "VorazunWarpGateTrain", null);
    TriggerAddEventUnitCreated(libBF359936_gt_GE_P_WarpGate_SupplicantWarpIn, null, "KaraxWarpGateTrain", null);
    TriggerAddEventUnitCreated(libBF359936_gt_GE_P_WarpGate_SupplicantWarpIn, null, "AlarakWarpGateTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_P_Havoc_BloodshardResonanceUpgrade
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_P_Havoc_BloodshardResonanceUpgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_localGroup_Havocs;

    // Automatic Variable Declarations
    unitgroup auto780BBE99_g;
    int auto780BBE99_u;
    unit auto780BBE99_var;
    unitgroup auto8A3D6667_g;
    int auto8A3D6667_u;
    unit auto8A3D6667_var;

    // Variable Initialization
    lv_localGroup_Havocs = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "AlarakEnergyForm"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(lv_localGroup_Havocs, UnitGroup("Monitor", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto780BBE99_g = lv_localGroup_Havocs;
    auto780BBE99_u = UnitGroupCount(auto780BBE99_g, c_unitCountAll);
    for (;; auto780BBE99_u -= 1) {
        auto780BBE99_var = UnitGroupUnitFromEnd(auto780BBE99_g, auto780BBE99_u);
        if (auto780BBE99_var == null) { break; }
        UnitBehaviorRemove(auto780BBE99_var, "SquadSightPersistentBehavior", 1);
    }
    Wait(0.5, c_timeGame);
    auto8A3D6667_g = lv_localGroup_Havocs;
    auto8A3D6667_u = UnitGroupCount(auto8A3D6667_g, c_unitCountAll);
    for (;; auto8A3D6667_u -= 1) {
        auto8A3D6667_var = UnitGroupUnitFromEnd(auto8A3D6667_g, auto8A3D6667_u);
        if (auto8A3D6667_var == null) { break; }
        UnitBehaviorAdd(auto8A3D6667_var, "SquadSightPersistentBehavior", auto8A3D6667_var, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_P_Havoc_BloodshardResonanceUpgrade_Init () {
    libBF359936_gt_GE_P_Havoc_BloodshardResonanceUpgrade = TriggerCreate("libBF359936_gt_GE_P_Havoc_BloodshardResonanceUpgrade_Func");
    TriggerEnable(libBF359936_gt_GE_P_Havoc_BloodshardResonanceUpgrade, false);
    TriggerAddEventUpgradeLevelChanged(libBF359936_gt_GE_P_Havoc_BloodshardResonanceUpgrade, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_P_Havoc_BloodshardResonanceOwnerChange
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_P_Havoc_BloodshardResonanceOwnerChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_localGroup_Havocs;

    // Automatic Variable Declarations
    unitgroup autoA5F38D0F_g;
    int autoA5F38D0F_u;
    unit autoA5F38D0F_var;
    unitgroup auto04839D8A_g;
    int auto04839D8A_u;
    unit auto04839D8A_var;

    // Variable Initialization
    lv_localGroup_Havocs = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Monitor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(lv_localGroup_Havocs, UnitGroup("Monitor", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    autoA5F38D0F_g = lv_localGroup_Havocs;
    autoA5F38D0F_u = UnitGroupCount(autoA5F38D0F_g, c_unitCountAll);
    for (;; autoA5F38D0F_u -= 1) {
        autoA5F38D0F_var = UnitGroupUnitFromEnd(autoA5F38D0F_g, autoA5F38D0F_u);
        if (autoA5F38D0F_var == null) { break; }
        UnitBehaviorRemove(autoA5F38D0F_var, "SquadSightPersistentBehavior", 1);
    }
    Wait(0.5, c_timeGame);
    auto04839D8A_g = lv_localGroup_Havocs;
    auto04839D8A_u = UnitGroupCount(auto04839D8A_g, c_unitCountAll);
    for (;; auto04839D8A_u -= 1) {
        auto04839D8A_var = UnitGroupUnitFromEnd(auto04839D8A_g, auto04839D8A_u);
        if (auto04839D8A_var == null) { break; }
        UnitBehaviorAdd(auto04839D8A_var, "SquadSightPersistentBehavior", auto04839D8A_var, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_P_Havoc_BloodshardResonanceOwnerChange_Init () {
    libBF359936_gt_GE_P_Havoc_BloodshardResonanceOwnerChange = TriggerCreate("libBF359936_gt_GE_P_Havoc_BloodshardResonanceOwnerChange_Func");
    TriggerEnable(libBF359936_gt_GE_P_Havoc_BloodshardResonanceOwnerChange, false);
    TriggerAddEventUnitChangeOwner(libBF359936_gt_GE_P_Havoc_BloodshardResonanceOwnerChange, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_P_TPad Teleport
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_P_TPadTeleport_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPInt;
    bool lv_tPDone;
    unit lv_tPTargetUnit;

    // Automatic Variable Declarations
    unitgroup auto23721D17_g;
    int auto23721D17_u;
    unit auto23721D17_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_tPInt < 49) && (lv_tPDone == false)) {
        if ((UnitGroupHasUnit(lib22142002_gv_cCS_UnitSelect_Recolor[lv_tPInt], EventPlayerEffectUsedUnit(c_effectUnitSource)) == true)) {
            lv_tPDone = true;
            if ((UnitGroupCount(lib22142002_gv_cCS_UnitSelect_Recolor[lv_tPInt], c_unitCountAlive) == 2)) {
                auto23721D17_g = lib22142002_gv_cCS_UnitSelect_Recolor[lv_tPInt];
                auto23721D17_u = UnitGroupCount(auto23721D17_g, c_unitCountAll);
                for (;; auto23721D17_u -= 1) {
                    auto23721D17_var = UnitGroupUnitFromEnd(auto23721D17_g, auto23721D17_u);
                    if (auto23721D17_var == null) { break; }
                    if ((EventPlayerEffectUsedUnit(c_effectUnitSource) != auto23721D17_var)) {
                        lv_tPTargetUnit = auto23721D17_var;
                    }

                    libNtve_gf_SendActorMessageToUnit(auto23721D17_var, "Signal Work");
                }
                UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "TeleportPadTeleported", EventPlayerEffectUsedUnit(c_effectUnitSource), 1);
                UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "TeleportPadRecentlyTeleported", EventPlayerEffectUsedUnit(c_effectUnitSource), 1);
                SoundPlayAtPointForPlayer(SoundLink("ProtossTeleportPad_Launch", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)), UnitGetHeight(EventPlayerEffectUsedUnit(c_effectUnitSource)), 100.0, 0.0);
                UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitTarget), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                Wait(0.25, c_timeGame);
                UnitSetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget), UnitGetPosition(lv_tPTargetUnit), false);
                SoundPlayAtPointForPlayer(SoundLink("ProtossTeleportPad_Impact", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lv_tPTargetUnit), UnitGetHeight(lv_tPTargetUnit), 100.0, 0.0);
                Wait(0.25, c_timeGame);
                UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "TeleportPadTeleported", 1);
            }
            else {
                UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitSource), "TeleportPadConnected", 1);
                UnitGroupClear(lib22142002_gv_cCS_UnitSelect_Recolor[lv_tPInt]);
            }
        }

        lv_tPInt += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_P_TPadTeleport_Init () {
    libBF359936_gt_GE_P_TPadTeleport = TriggerCreate("libBF359936_gt_GE_P_TPadTeleport_Func");
    TriggerEnable(libBF359936_gt_GE_P_TPadTeleport, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_GE_P_TPadTeleport, c_playerAny, "TeleportPadTeleportationDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_P_TPad Connect
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_P_TPadConnect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPInt;
    bool lv_tPDone;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_tPInt < 49) && (lv_tPDone == false)) {
        if ((UnitGroupCount(lib22142002_gv_cCS_UnitSelect_Recolor[lv_tPInt], c_unitCountAlive) < 2)) {
            lv_tPDone = true;
            UnitGroupClear(lib22142002_gv_cCS_UnitSelect_Recolor[lv_tPInt]);
            UnitGroupAdd(lib22142002_gv_cCS_UnitSelect_Recolor[lv_tPInt], EventUnit());
            UnitGroupAdd(lib22142002_gv_cCS_UnitSelect_Recolor[lv_tPInt], EventUnitTargetUnit());
        }

        lv_tPInt += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_P_TPadConnect_Init () {
    libBF359936_gt_GE_P_TPadConnect = TriggerCreate("libBF359936_gt_GE_P_TPadConnect_Func");
    TriggerEnable(libBF359936_gt_GE_P_TPadConnect, false);
    TriggerAddEventUnitAbility(libBF359936_gt_GE_P_TPadConnect, null, AbilityCommand("ConnectTeleportPad", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libBF359936_gt_GE_P_TPadConnect, null, AbilityCommand("ConnectPurifierTeleportPad", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_Enabler_Zeratul
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_Enabler_Zeratul_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libBF359936_gt_CM_Zeratul_DarkTemplarRetreat, true);
    TriggerEnable(libBF359936_gt_CM_Zeratul_Projection_Cancel, true);
    TriggerEnable(libBF359936_gt_CM_Zeratul_Projection_TimedLifeFate, true);
    TriggerEnable(libBF359936_gt_CM_Zeratul_Projection_UnitLink, true);
    TriggerEnable(libBF359936_gt_CM_Zeratul_PurificationNova_Create, true);
    TriggerEnable(libBF359936_gt_CM_Zeratul_PurificationNova_Finale, true);
    TriggerEnable(libBF359936_gt_CM_Zeratul_PurificationNova_MainImpact, true);
    TriggerEnable(libBF359936_gt_CM_Zeratul_ReflectionShield, true);
    TriggerEnable(libBF359936_gt_CM_Zeratul_WarpPrismAutoUnload, true);
    TriggerEnable(libBF359936_gt_CM_Zeratul_WarpPrismAutoUnloadOff, true);
    TriggerEnable(libBF359936_gt_CM_Zeratul_WarpPrismMorphUnloadState, true);
    TriggerEnable(libBF359936_gt_CM_Zeratul_WarpPrismSelectRift, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_Enabler_Zeratul_Init () {
    libBF359936_gt_GE_Enabler_Zeratul = TriggerCreate("libBF359936_gt_GE_Enabler_Zeratul_Func");
    TriggerEnable(libBF359936_gt_GE_Enabler_Zeratul, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_PurificationNova_Finale
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Zeratul_PurificationNova_Finale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;
    point lv_targetPoint;
    point lv_spawnPoint;
    point lv_goal;
    fixed lv_mainAngel;
    unit lv_purifier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_u) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_purifier = UnitBehaviorEffectUnit(lv_u, "ZeratulPurificationNovaCasterFinder", c_effectUnitCaster, 0);
    if ((UnitIsValid(lv_purifier) == true) && (UnitHasBehavior(lv_purifier, "HaveZeratulArtifactTier3AndRoboticsBay") == true)) {
        lv_spawnPoint = UnitGetPosition(lv_u);
        lv_goal = UnitGetGoalPosition(lv_u);
        if ((lv_spawnPoint != lv_goal)) {
            lv_mainAngel = AngleBetweenPoints(lv_spawnPoint, lv_goal);
        }
        else {
            lv_mainAngel = AngleBetweenPoints(UnitGetPosition(lv_purifier), lv_spawnPoint);
        }
        lv_targetPoint = PointWithOffsetPolar(lv_spawnPoint, 15.0, lv_mainAngel);
        libBF359936_gf_CM_Zeratul_PurificationNova_SpawnSmallOrb(lv_purifier, lv_spawnPoint, lv_targetPoint);
        lv_targetPoint = PointWithOffsetPolar(lv_spawnPoint, 15.0, (lv_mainAngel + 45.0));
        libBF359936_gf_CM_Zeratul_PurificationNova_SpawnSmallOrb(lv_purifier, lv_spawnPoint, lv_targetPoint);
        lv_targetPoint = PointWithOffsetPolar(lv_spawnPoint, 15.0, (lv_mainAngel - 45.0));
        libBF359936_gf_CM_Zeratul_PurificationNova_SpawnSmallOrb(lv_purifier, lv_spawnPoint, lv_targetPoint);
    }

    UnitKill(lv_u);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Zeratul_PurificationNova_Finale_Init () {
    libBF359936_gt_CM_Zeratul_PurificationNova_Finale = TriggerCreate("libBF359936_gt_CM_Zeratul_PurificationNova_Finale_Func");
    TriggerEnable(libBF359936_gt_CM_Zeratul_PurificationNova_Finale, false);
    TriggerAddEventUnitBehaviorChange(libBF359936_gt_CM_Zeratul_PurificationNova_Finale, null, "ZeratulPurificationNovaTargettedTarget", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_PurificationNova_Create
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Zeratul_PurificationNova_Create_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;
    unit lv_purifier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_u) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_purifier = UnitBehaviorEffectUnit(lv_u, "ZeratulPurificationNovaTargettedTarget", c_effectUnitCaster, 0);
    UnitBehaviorAdd(lv_u, "ZeratulPurificationNovaCasterFinder", lv_purifier, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Zeratul_PurificationNova_Create_Init () {
    libBF359936_gt_CM_Zeratul_PurificationNova_Create = TriggerCreate("libBF359936_gt_CM_Zeratul_PurificationNova_Create_Func");
    TriggerEnable(libBF359936_gt_CM_Zeratul_PurificationNova_Create, false);
    TriggerAddEventUnitBehaviorChange(libBF359936_gt_CM_Zeratul_PurificationNova_Create, null, "ZeratulPurificationNovaTargettedTarget", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_PurificationNova_MainImpact
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Zeratul_PurificationNova_MainImpact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_target;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((lv_u != lv_target))) {
            return false;
        }

        if (!((UnitIsValid(lv_u) == true))) {
            return false;
        }

        if (!((UnitIsValid(lv_target) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_target, "ZeratulPurificationNovaTargetedMainTargetImmunity", lv_u, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Zeratul_PurificationNova_MainImpact_Init () {
    libBF359936_gt_CM_Zeratul_PurificationNova_MainImpact = TriggerCreate("libBF359936_gt_CM_Zeratul_PurificationNova_MainImpact_Func");
    TriggerEnable(libBF359936_gt_CM_Zeratul_PurificationNova_MainImpact, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Zeratul_PurificationNova_MainImpact, c_playerAny, "ZeratulPurificationNovaTargettedSearchSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_AutomatedAssimilatorAutoBuild
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Zeratul_AutomatedAssimilatorAutoBuild_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_nexus;
    unit lv_itGeyser;

    // Automatic Variable Declarations
    unitgroup auto9D23177B_g;
    int auto9D23177B_u;

    // Variable Initialization
    lv_p = EventPlayer();
    lv_nexus = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ZeratulNexus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9D23177B_g = UnitGroupSearch(null, 0, UnitGetPosition(lv_nexus), 10.0, UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9D23177B_u = UnitGroupCount(auto9D23177B_g, c_unitCountAll);
    for (;; auto9D23177B_u -= 1) {
        lv_itGeyser = UnitGroupUnitFromEnd(auto9D23177B_g, auto9D23177B_u);
        if (lv_itGeyser == null) { break; }
        if ((UnitHasBehavior2(lv_itGeyser, "GeyserBlockedByRocks") == false)) {
            UnitIssueOrder(lv_nexus, OrderTargetingUnit(AbilityCommand("NexusBuild", 0), lv_itGeyser), c_orderQueueAddToEnd);
            Wait(0.125, c_timeGame);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Zeratul_AutomatedAssimilatorAutoBuild_Init () {
    libBF359936_gt_CM_Zeratul_AutomatedAssimilatorAutoBuild = TriggerCreate("libBF359936_gt_CM_Zeratul_AutomatedAssimilatorAutoBuild_Func");
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Zeratul_AutomatedAssimilatorAutoBuild, c_playerAny, "NexusCreateSet");
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Zeratul_AutomatedAssimilatorAutoBuild, c_playerAny, "NexusBirthSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_ReflectionShield
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Zeratul_ReflectionShield_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_missile;
    string lv_effect;
    unit lv_missileCaster;
    unit lv_reflectTarget;
    unit lv_sentry;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();
    lv_missile = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_effect = UnitGetOriginalEffect(lv_missile);
    lv_missileCaster = UnitGetOriginalCaster(lv_missile);
    lv_reflectTarget = lv_missileCaster;
    lv_sentry = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_sentry) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(lv_missile, lv_p, true);
    if ((libNtve_gf_UnitCanCreateEffectOnUnit(lv_missile, lv_effect, lv_reflectTarget) == true)) {
        UnitCreateEffectUnit(lv_missile, lv_effect, lv_reflectTarget);
    }

    UnitRemove(lv_missile);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Zeratul_ReflectionShield_Init () {
    libBF359936_gt_CM_Zeratul_ReflectionShield = TriggerCreate("libBF359936_gt_CM_Zeratul_ReflectionShield_Func");
    TriggerEnable(libBF359936_gt_CM_Zeratul_ReflectionShield, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Zeratul_ReflectionShield, c_playerAny, "ZeratulReflectionShieldMU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_DarkTemplarRetreat
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Zeratul_DarkTemplarRetreat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_darkTemplar;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();
    lv_darkTemplar = EventPlayerEffectUsedUnit(c_effectUnitSource);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(lv_darkTemplar, "ZeratulDarkTemplarRetreatBlinkTrigger", libNtve_gf_PointOffsetTowardsPoint(EventPlayerEffectUsedPoint(c_effectLocationSourcePoint), -8.0, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)));
    UnitBehaviorAdd(lv_darkTemplar, "ZeratulDarkTemplarRetreatCooldown", lv_darkTemplar, 1);
    UnitBehaviorAdd(lv_darkTemplar, "ZeratulDarkTemplarRetreatRegen", lv_darkTemplar, 1);
    UnitBehaviorAddCooldown(lv_darkTemplar, "ZeratulDarkTemplarRetreatCooldownDisplay", "Behavior/ZeratulDarkTemplarRetreatCooldownDisplay", UnitBehaviorDurationTotal(lv_darkTemplar, "ZeratulDarkTemplarRetreatCooldown"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Zeratul_DarkTemplarRetreat_Init () {
    libBF359936_gt_CM_Zeratul_DarkTemplarRetreat = TriggerCreate("libBF359936_gt_CM_Zeratul_DarkTemplarRetreat_Func");
    TriggerEnable(libBF359936_gt_CM_Zeratul_DarkTemplarRetreat, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Zeratul_DarkTemplarRetreat, c_playerAny, "ZeratulDarkTemplarRetreatSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_WarpPrismAutoUnload
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Zeratul_WarpPrismAutoUnload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unitgroup lv_offGroup;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_offGroup = UnitGroupEmpty();
    lv_p = UnitGetOwner(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_offGroup = UnitGroup(null, lv_p, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    libBF359936_gv_cM_Zeratul_VoidRift[lv_p] = lv_unit;
    UnitGroupRemove(lv_offGroup, lv_unit);
    UnitGroupIssueOrder(lv_offGroup, Order(AbilityCommand("ZeratulWarpPrismAutoUnload", 1)), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Zeratul_WarpPrismAutoUnload_Init () {
    libBF359936_gt_CM_Zeratul_WarpPrismAutoUnload = TriggerCreate("libBF359936_gt_CM_Zeratul_WarpPrismAutoUnload_Func");
    TriggerEnable(libBF359936_gt_CM_Zeratul_WarpPrismAutoUnload, false);
    TriggerAddEventUnitBehaviorChange(libBF359936_gt_CM_Zeratul_WarpPrismAutoUnload, null, "ZeratulWarpPrismAutoUnload", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_WarpPrismAutoUnloadOff
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Zeratul_WarpPrismAutoUnloadOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    order lv_order;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_order = EventUnitOrder();
    lv_p = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((OrderGetFlag(lv_order, c_cmdUser) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libBF359936_gv_cM_Zeratul_VoidRift[lv_p] = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Zeratul_WarpPrismAutoUnloadOff_Init () {
    libBF359936_gt_CM_Zeratul_WarpPrismAutoUnloadOff = TriggerCreate("libBF359936_gt_CM_Zeratul_WarpPrismAutoUnloadOff_Func");
    TriggerEnable(libBF359936_gt_CM_Zeratul_WarpPrismAutoUnloadOff, false);
    TriggerAddEventUnitOrder(libBF359936_gt_CM_Zeratul_WarpPrismAutoUnloadOff, null, AbilityCommand("ZeratulWarpPrismAutoUnload", 1));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_WarpPrismSelectRift
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Zeratul_WarpPrismSelectRift_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_p = UnitGetOwner(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitClearSelection(lv_p);
    UnitSelect(libBF359936_gv_cM_Zeratul_VoidRift[lv_p], lv_p, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Zeratul_WarpPrismSelectRift_Init () {
    libBF359936_gt_CM_Zeratul_WarpPrismSelectRift = TriggerCreate("libBF359936_gt_CM_Zeratul_WarpPrismSelectRift_Func");
    TriggerEnable(libBF359936_gt_CM_Zeratul_WarpPrismSelectRift, false);
    TriggerAddEventUnitAbility(libBF359936_gt_CM_Zeratul_WarpPrismSelectRift, null, AbilityCommand("ZeratulWarpPrismSelectVoidRift", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_WarpPrismMorphUnloadState
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Zeratul_WarpPrismMorphUnloadState_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Conditions
    if (testConds) {
        if (!((lv_u == libBF359936_gv_cM_Zeratul_VoidRift[EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_u, Order(AbilityCommand("ZeratulWarpPrismAutoUnload", 0)), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Zeratul_WarpPrismMorphUnloadState_Init () {
    libBF359936_gt_CM_Zeratul_WarpPrismMorphUnloadState = TriggerCreate("libBF359936_gt_CM_Zeratul_WarpPrismMorphUnloadState_Func");
    TriggerEnable(libBF359936_gt_CM_Zeratul_WarpPrismMorphUnloadState, false);
    TriggerAddEventUnitAbility(libBF359936_gt_CM_Zeratul_WarpPrismMorphUnloadState, null, AbilityCommand("ZeratulPhasingMode", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_Projection_UnitLink
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Zeratul_Projection_UnitLink_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_projection;
    unit lv_source;
    fixed lv_shields;
    fixed lv_cooldown;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_projection = EventUnitCreatedUnit();
    lv_source = EventUnit();
    lv_shields = UnitGetPropertyFixed(lv_source, c_unitPropShields, c_unitPropCurrent);
    lv_cooldown = UnitAbilityGetCooldown(lv_source, "ZeratulStructureBarrier", "Abil/ZeratulStructureBarrier");

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_projection, "ZeratulPhaseProjectionChanneling", lv_source, 1);
    UnitBehaviorAdd(lv_projection, "ZeratulPhotonCannonProjection", lv_source, 1);
    UnitBehaviorAdd(lv_source, "ZeratulPhotonCannonProjectionCaster", lv_projection, 1);
    UnitSetPropertyFixed(lv_projection, c_unitPropShields, lv_shields);
    UnitSetPropertyFixed(lv_source, c_unitPropShields, 0.0);
    libNtve_gf_UnitAbilityRemoveCooldown(lv_source, "ZeratulStructureBarrier", "Abil/ZeratulStructureBarrier");
    UnitAbilityAddCooldown(lv_projection, "ZeratulStructureBarrier", "Abil/ZeratulStructureBarrier", lv_cooldown);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Zeratul_Projection_UnitLink_Init () {
    libBF359936_gt_CM_Zeratul_Projection_UnitLink = TriggerCreate("libBF359936_gt_CM_Zeratul_Projection_UnitLink_Func");
    TriggerEnable(libBF359936_gt_CM_Zeratul_Projection_UnitLink, false);
    TriggerAddEventUnitCreated(libBF359936_gt_CM_Zeratul_Projection_UnitLink, null, "PhaseCannonProjection", null);
    TriggerAddEventUnitCreated(libBF359936_gt_CM_Zeratul_Projection_UnitLink, null, "ZeratulKhaydarinMonolithProjection", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_Projection_TimedLifeFate
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Zeratul_Projection_TimedLifeFate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_projection;
    unit lv_source;
    fixed lv_shields;
    fixed lv_cooldown;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_projection = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_source = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_shields = UnitGetPropertyFixed(lv_projection, c_unitPropShields, c_unitPropCurrent);
    lv_cooldown = UnitAbilityGetCooldown(lv_projection, "ZeratulStructureBarrier", "Abil/ZeratulStructureBarrier");

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_source, "ZeratulPhotonCannonProjectionCaster", 1);
    UnitSetPropertyFixed(lv_source, c_unitPropShields, lv_shields);
    UnitCreateEffectUnit(lv_projection, "TimedLifeFate", lv_projection);
    libNtve_gf_UnitAbilityRemoveCooldown(lv_source, "ZeratulStructureBarrier", "Abil/ZeratulStructureBarrier");
    UnitAbilityAddCooldown(lv_source, "ZeratulStructureBarrier", "Abil/ZeratulStructureBarrier", lv_cooldown);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Zeratul_Projection_TimedLifeFate_Init () {
    libBF359936_gt_CM_Zeratul_Projection_TimedLifeFate = TriggerCreate("libBF359936_gt_CM_Zeratul_Projection_TimedLifeFate_Func");
    TriggerEnable(libBF359936_gt_CM_Zeratul_Projection_TimedLifeFate, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Zeratul_Projection_TimedLifeFate, c_playerAny, "ZeratulPhotonCannonProjectionTimedLifeFateDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_Projection_Cancel
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Zeratul_Projection_Cancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_projection;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "ZeratulPhotonCannonProjectionCaster") == true)) {
        lv_projection = UnitBehaviorEffectUnit(EventUnit(), "ZeratulPhotonCannonProjectionCaster", c_effectUnitCaster, 0);
    }
    else {
        lv_projection = EventUnit();
    }
    UnitBehaviorRemove(lv_projection, "ZeratulPhotonCannonProjection", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Zeratul_Projection_Cancel_Init () {
    libBF359936_gt_CM_Zeratul_Projection_Cancel = TriggerCreate("libBF359936_gt_CM_Zeratul_Projection_Cancel_Func");
    TriggerEnable(libBF359936_gt_CM_Zeratul_Projection_Cancel, false);
    TriggerAddEventUnitAbility(libBF359936_gt_CM_Zeratul_Projection_Cancel, null, AbilityCommand("ZeratulPhaseCannonProjectionCancel", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_P_KaraxChangeOwner
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_P_KaraxChangeOwner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "KaraxChampion"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(UnitGroupUnit(UnitGroup("KaraxInvisiblePylon", EventUnitOwnerOld(), RegionCircle(UnitGetPosition(EventUnit()), 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), 1), EventUnitOwnerNew(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_P_KaraxChangeOwner_Init () {
    libBF359936_gt_GE_P_KaraxChangeOwner = TriggerCreate("libBF359936_gt_GE_P_KaraxChangeOwner_Func");
    TriggerEnable(libBF359936_gt_GE_P_KaraxChangeOwner, false);
    TriggerAddEventUnitChangeOwner(libBF359936_gt_GE_P_KaraxChangeOwner, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_P_HTSC1-Hallu(2)
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_P_HTSC1Hallu2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup auto31F004BE_g;
    int auto31F004BE_u;
    unit auto31F004BE_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(2, UnitGetType(EventUnitTargetUnit()), 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnitTargetUnit()), 270.0);
    auto31F004BE_g = UnitLastCreatedGroup();
    auto31F004BE_u = UnitGroupCount(auto31F004BE_g, c_unitCountAll);
    for (;; auto31F004BE_u -= 1) {
        auto31F004BE_var = UnitGroupUnitFromEnd(auto31F004BE_g, auto31F004BE_u);
        if (auto31F004BE_var == null) { break; }
        UnitBehaviorAdd(auto31F004BE_var, "Hallucination", lv_u, 1);
        UnitBehaviorAdd(auto31F004BE_var, "HallucinationTimedLife", lv_u, 1);
    }
    if ((UnitFilterMatch(EventUnitTargetUnit(), EventPlayer(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
        SoundPlayAtPointForPlayer(SoundLink("Sentry_HallucinationLaunchLarge", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 0.0, 100.0, 0.0);
    }
    else {
        if ((UnitFilterMatch(EventUnitTargetUnit(), EventPlayer(), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
            SoundPlayAtPointForPlayer(SoundLink("Sentry_HallucinationLaunchSmall", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 0.0, 100.0, 0.0);
        }
        else {
            SoundPlayAtPointForPlayer(SoundLink("Sentry_HallucinationLaunchMedium", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 0.0, 100.0, 0.0);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_P_HTSC1Hallu2_Init () {
    libBF359936_gt_GE_P_HTSC1Hallu2 = TriggerCreate("libBF359936_gt_GE_P_HTSC1Hallu2_Func");
    TriggerEnable(libBF359936_gt_GE_P_HTSC1Hallu2, false);
    TriggerAddEventUnitAbility(libBF359936_gt_GE_P_HTSC1Hallu2, null, AbilityCommand("ArtanisHallucinationArmy", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_P_WarpConduit AutoMoves
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_P_WarpConduitAutoMoves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnitTargetUnit(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_P_WarpConduitAutoMoves_Init () {
    libBF359936_gt_GE_P_WarpConduitAutoMoves = TriggerCreate("libBF359936_gt_GE_P_WarpConduitAutoMoves_Func");
    TriggerEnable(libBF359936_gt_GE_P_WarpConduitAutoMoves, false);
    TriggerAddEventUnitAbility(libBF359936_gt_GE_P_WarpConduitAutoMoves, null, AbilityCommand("WarpConduitWarpAway", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libBF359936_gt_GE_P_WarpConduitAutoMoves, null, AbilityCommand("WarpConduitWarpAwayImminent", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libBF359936_gt_GE_P_WarpConduitAutoMoves, null, AbilityCommand("WarpConduitWarpAwayImminent2", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libBF359936_gt_GE_P_WarpConduitAutoMoves, null, AbilityCommand("ProtossWarpAwayImminent", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libBF359936_gt_GE_P_WarpConduitAutoMoves, null, AbilityCommand("ProtossWarpAway", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libBF359936_gt_GE_P_WarpConduitAutoMoves, null, AbilityCommand("ProtossWarpAwayImminent2", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_P_PowerUsers
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_P_PowerUsers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_gE_Position;
    int lv_gE_Owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_gE_Position = UnitGetPosition(EventUnitCreatedUnit());
    lv_gE_Owner = UnitGetOwner(EventUnitCreatedUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.2, c_timeGame);
    UnitSetOwner(EventUnitCreatedUnit(), 0, false);
    Wait(0.2, c_timeGame);
    UnitSetOwner(EventUnitCreatedUnit(), lv_gE_Owner, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_P_PowerUsers_Init () {
    libBF359936_gt_GE_P_PowerUsers = TriggerCreate("libBF359936_gt_GE_P_PowerUsers_Func");
    TriggerEnable(libBF359936_gt_GE_P_PowerUsers, false);
    TriggerAddEventUnitCreated(libBF359936_gt_GE_P_PowerUsers, null, "CreateProtossStructures001", null);
    TriggerAddEventUnitCreated(libBF359936_gt_GE_P_PowerUsers, null, "CreateProtossStructures002", null);
    TriggerAddEventUnitCreated(libBF359936_gt_GE_P_PowerUsers, null, "CreateProtossStructures003", null);
    TriggerAddEventUnitCreated(libBF359936_gt_GE_P_PowerUsers, null, "CreateProtossStructures004", null);
    TriggerAddEventUnitCreated(libBF359936_gt_GE_P_PowerUsers, null, "CreateProtossStructures005", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_Enabler_Terran
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_Enabler_Terran_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libBF359936_gt_GE_Terr_Excavator50, true);
    TriggerEnable(libBF359936_gt_GE_Terr_NeoluxEnergyTowerStopSendingEnergy, true);
    TriggerEnable(libBF359936_gt_GE_Terr_NeoluxEnergyTowerStopReceivingEnergy, true);
    TriggerEnable(libBF359936_gt_GE_Terr_MengskBunkerDropLoad, true);
    TriggerEnable(libBF359936_gt_GE_Terr_Raynor_TrainBuff, true);
    TriggerEnable(libBF359936_gt_GE_Terr_DominionAPC, true);
    TriggerEnable(libBF359936_gt_GE_Terr_NovaEradicator_FlamethrowerResetTurret, true);
    TriggerEnable(libBF359936_gt_GE_Terr_NovaEradicator_RailgunCast, true);
    TriggerExecute(libBF359936_gt_CM_Mengsk_TriggersInit, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_Enabler_Terran_Init () {
    libBF359936_gt_GE_Enabler_Terran = TriggerCreate("libBF359936_gt_GE_Enabler_Terran_Func");
    TriggerEnable(libBF359936_gt_GE_Enabler_Terran, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_Terr_Excavator 50%
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_Terr_Excavator50_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "Excavator"))) {
            return false;
        }

        if (!((RandomInt(0, 1) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(EventUnitCreatedUnit(), "JarbanMinor_Excavator", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_Terr_Excavator50_Init () {
    libBF359936_gt_GE_Terr_Excavator50 = TriggerCreate("libBF359936_gt_GE_Terr_Excavator50_Func");
    TriggerEnable(libBF359936_gt_GE_Terr_Excavator50, false);
    TriggerAddEventUnitCreated(libBF359936_gt_GE_Terr_Excavator50, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_Terr_Neolux - Energy Tower - Stop Sending Energy
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_Terr_NeoluxEnergyTowerStopSendingEnergy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameDestroyEffects(UnitGetPosition(EventUnit()), 0.25, 1, "NeoluxEnergyTowerChargeChannel");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_Terr_NeoluxEnergyTowerStopSendingEnergy_Init () {
    libBF359936_gt_GE_Terr_NeoluxEnergyTowerStopSendingEnergy = TriggerCreate("libBF359936_gt_GE_Terr_NeoluxEnergyTowerStopSendingEnergy_Func");
    TriggerEnable(libBF359936_gt_GE_Terr_NeoluxEnergyTowerStopSendingEnergy, false);
    TriggerAddEventUnitAbility(libBF359936_gt_GE_Terr_NeoluxEnergyTowerStopSendingEnergy, null, AbilityCommand("NeoluxEnergyTowerStopSending", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_Terr_Neolux - Energy Tower - Stop Receiving Energy
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_Terr_NeoluxEnergyTowerStopReceivingEnergy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameDestroyEffects(UnitGetPosition(EventUnit()), 0.25, 1, "NeoluxEnergyTowerSourceChannel");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_Terr_NeoluxEnergyTowerStopReceivingEnergy_Init () {
    libBF359936_gt_GE_Terr_NeoluxEnergyTowerStopReceivingEnergy = TriggerCreate("libBF359936_gt_GE_Terr_NeoluxEnergyTowerStopReceivingEnergy_Func");
    TriggerEnable(libBF359936_gt_GE_Terr_NeoluxEnergyTowerStopReceivingEnergy, false);
    TriggerAddEventUnitAbility(libBF359936_gt_GE_Terr_NeoluxEnergyTowerStopReceivingEnergy, null, AbilityCommand("NeoluxEnergyTowerStopReceiving", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_Terr_MengskBunkerDropLoad
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_Terr_MengskBunkerDropLoad_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.15, c_timeGame);
    UnitCargoCreate(EventPlayerEffectUsedUnit(c_effectUnitTarget), "TrooperMengsk", 6);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_Terr_MengskBunkerDropLoad_Init () {
    libBF359936_gt_GE_Terr_MengskBunkerDropLoad = TriggerCreate("libBF359936_gt_GE_Terr_MengskBunkerDropLoad_Func");
    TriggerEnable(libBF359936_gt_GE_Terr_MengskBunkerDropLoad, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_GE_Terr_MengskBunkerDropLoad, c_playerAny, "BunkerDepotMengskDropMorph");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_TriggersInit
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Mengsk_TriggersInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libBF359936_gt_CM_Mengsk_GlobalAbilityCast, true);
    TriggerEnable(libBF359936_gt_CM_Mengsk_DirtyBombSweetener, true);
    TriggerEnable(libBF359936_gt_CM_Mengsk_ArtilleryBombardmentTarget, true);
    TriggerEnable(libBF359936_gt_CM_Mengsk_ArtilleryBombardmentCargoChange, true);
    TriggerEnable(libBF359936_gt_CM_Mengsk_ArtilleryExperimentalStrikeTarget, true);
    TriggerEnable(libBF359936_gt_CM_Mengsk_ArtilleryExperimentalStrikeFearApply, true);
    TriggerEnable(libBF359936_gt_CM_Mengsk_ArtilleryGlobalExperimentalStrikeTarget, true);
    TriggerEnable(libBF359936_gt_CM_Mengsk_NuclearAnnihilationSmallNukes, true);
    TriggerEnable(libBF359936_gt_CM_Mengsk_VeteranDies, true);
    TriggerEnable(libBF359936_gt_CM_Mengsk_VeteranDing, true);
    TriggerEnable(libBF359936_gt_CM_Mengsk_RegisterPropagandaUnit, true);
    TriggerEnable(libBF359936_gt_CM_Mengsk_RemovePropagandaUnit, true);
    TriggerEnable(libBF359936_gt_CM_Mengsk_PropagandaUpgraded, true);
    TriggerEnable(libBF359936_gt_CM_Mengsk_MedivacAirlift, true);
    TriggerEnable(libBF359936_gt_CM_Mengsk_MedivacAirliftDing, true);
    TriggerEnable(libBF359936_gt_CM_Mengsk_EnlistStart, true);
    TriggerEnable(libBF359936_gt_CM_Mengsk_EnlistStop, true);
    TriggerEnable(libBF359936_gt_CM_Mengsk_ZerglingMengskSpawn, true);
    TriggerEnable(libBF359936_gt_CM_Mengsk_HydraliskMengskSpawn, true);
    TriggerEnable(libBF359936_gt_CM_Mengsk_MutaliskMengskSpawn, true);
    TriggerEnable(libBF359936_gt_CM_Mengsk_UltraliskMengskSpawn, true);
    TriggerEnable(libBF359936_gt_CM_Mengsk_BunkerDepotDropFillCargo, true);
    TriggerEnable(libBF359936_gt_CM_Mengsk_ZergSeekDestroy, true);
    TriggerEnable(libBF359936_gt_CM_Mengsk_WeaponPickerUpperRegister, true);
    TriggerEnable(libBF359936_gt_CM_Mengsk_WeaponPickupRegister, true);
    TriggerExecute(libBF359936_gt_CM_Mengsk_WeaponPickup, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Mengsk_TriggersInit_Init () {
    libBF359936_gt_CM_Mengsk_TriggersInit = TriggerCreate("libBF359936_gt_CM_Mengsk_TriggersInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_ArtilleryBombardmentTarget
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Mengsk_ArtilleryBombardmentTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;
    fixed lv_radiusMaximumSlop;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_radiusMaximumSlop = 7.5;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "ArtilleryMengskBombardmentDropDelayCP", RegionRandomPoint(RegionCircle(lv_targetPoint, lv_radiusMaximumSlop)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Mengsk_ArtilleryBombardmentTarget_Init () {
    libBF359936_gt_CM_Mengsk_ArtilleryBombardmentTarget = TriggerCreate("libBF359936_gt_CM_Mengsk_ArtilleryBombardmentTarget_Func");
    TriggerEnable(libBF359936_gt_CM_Mengsk_ArtilleryBombardmentTarget, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Mengsk_ArtilleryBombardmentTarget, c_playerAny, "ArtilleryMengskBombardmentDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_ArtilleryExperimentalStrikeTarget
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Mengsk_ArtilleryExperimentalStrikeTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "ArtilleryMengskExperimentalStrikeDropDeplayCP", RegionRandomPoint(RegionCircle(lv_targetPoint, libBF359936_gv_cM_Mengsk_ArtilleryExperimentalStrikeRange)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Mengsk_ArtilleryExperimentalStrikeTarget_Init () {
    libBF359936_gt_CM_Mengsk_ArtilleryExperimentalStrikeTarget = TriggerCreate("libBF359936_gt_CM_Mengsk_ArtilleryExperimentalStrikeTarget_Func");
    TriggerEnable(libBF359936_gt_CM_Mengsk_ArtilleryExperimentalStrikeTarget, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Mengsk_ArtilleryExperimentalStrikeTarget, c_playerAny, "ArtilleryMengskExperimentalStrikeDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_ArtilleryGlobalExperimentalStrikeTarget
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Mengsk_ArtilleryGlobalExperimentalStrikeTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_artillery;
    abilcmd lv_abilityCommand;
    point lv_targetPoint;

    // Automatic Variable Declarations
    unitgroup auto5772E3FD_g;
    int auto5772E3FD_u;

    // Variable Initialization
    lv_abilityCommand = AbilityCommand("ArtilleryMengskExperimentalStrike",0);
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);

    // Actions
    if (!runActions) {
        return true;
    }

    libBF359936_gv_cM_Mengsk_ArtilleryExperimentalStrikeRange = 4.0;
    auto5772E3FD_g = UnitGroup("ArtilleryMengsk", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterStunned - 32))), 0);
    auto5772E3FD_u = UnitGroupCount(auto5772E3FD_g, c_unitCountAll);
    for (;; auto5772E3FD_u -= 1) {
        lv_artillery = UnitGroupUnitFromEnd(auto5772E3FD_g, auto5772E3FD_u);
        if (lv_artillery == null) { break; }
        UnitIssueOrder(lv_artillery, OrderTargetingPoint(lv_abilityCommand, lv_targetPoint), c_orderQueueAddToFront);
        if ((libBF359936_gv_cM_Mengsk_ArtilleryExperimentalStrikeRange <= 7.0)) {
            libBF359936_gv_cM_Mengsk_ArtilleryExperimentalStrikeRange += 0.5;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Mengsk_ArtilleryGlobalExperimentalStrikeTarget_Init () {
    libBF359936_gt_CM_Mengsk_ArtilleryGlobalExperimentalStrikeTarget = TriggerCreate("libBF359936_gt_CM_Mengsk_ArtilleryGlobalExperimentalStrikeTarget_Func");
    TriggerEnable(libBF359936_gt_CM_Mengsk_ArtilleryGlobalExperimentalStrikeTarget, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Mengsk_ArtilleryGlobalExperimentalStrikeTarget, c_playerAny, "ArtilleryMengskGlobalExperimentalStrikeDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_GlobalAbilityCast
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Mengsk_GlobalAbilityCast_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CoopCasterMengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libBF359936_gf_CM_Mengsk_EnergyChanged(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Mengsk_GlobalAbilityCast_Init () {
    libBF359936_gt_CM_Mengsk_GlobalAbilityCast = TriggerCreate("libBF359936_gt_CM_Mengsk_GlobalAbilityCast_Func");
    TriggerEnable(libBF359936_gt_CM_Mengsk_GlobalAbilityCast, false);
    TriggerAddEventUnitAbility(libBF359936_gt_CM_Mengsk_GlobalAbilityCast, null, null, c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_ArtilleryExperimentalStrikeFearApply
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Mengsk_ArtilleryExperimentalStrikeFearApply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_scaredUnit;
    point lv_attackLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scaredUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackLocation = PointWithOffsetPolar(UnitGetPosition(lv_scaredUnit), 1.0, libNtve_gf_RandomAngle());
    UnitIssueOrder(lv_scaredUnit, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_scaredUnit), -5.0, lv_attackLocation)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    while ((UnitHasBehavior2(lv_scaredUnit, "ArtilleryMengskFear") == true) && (UnitIsAlive(lv_scaredUnit) == true)) {
        UnitIssueOrder(lv_scaredUnit, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_scaredUnit), 3.0))), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    UnitIssueOrder(lv_scaredUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Mengsk_ArtilleryExperimentalStrikeFearApply_Init () {
    libBF359936_gt_CM_Mengsk_ArtilleryExperimentalStrikeFearApply = TriggerCreate("libBF359936_gt_CM_Mengsk_ArtilleryExperimentalStrikeFearApply_Func");
    TriggerEnable(libBF359936_gt_CM_Mengsk_ArtilleryExperimentalStrikeFearApply, false);
    TriggerAddEventUnitBehaviorChange(libBF359936_gt_CM_Mengsk_ArtilleryExperimentalStrikeFearApply, null, "ArtilleryMengskFear", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_NuclearAnnihilationSmallNukes
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Mengsk_NuclearAnnihilationSmallNukes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;
    fixed lv_smallNukeMaxPlacementRadius;
    int lv_numSmallNukes;
    int lv_nukeCounter;
    fixed lv_nukeDelay;

    // Automatic Variable Declarations
    int autoD8D600E2_ae;
    const int autoD8D600E2_ai = 1;

    // Variable Initialization
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_smallNukeMaxPlacementRadius = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "NuclearAnnihilationMengskSmallNukeDummyCP", "RevealRadius", EventPlayer());
    lv_numSmallNukes = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "NuclearAnnihilationMengskSmallNukeDummyCP", "PeriodCount", EventPlayer());
    lv_nukeCounter = 1;
    lv_nukeDelay = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "NuclearAnnihilationMengskSmallNukeDummyCP", "PeriodicPeriodArray[" + IntToString(0) + "]", EventPlayer());

    // Actions
    if (!runActions) {
        return true;
    }

    autoD8D600E2_ae = lv_numSmallNukes;
    lv_nukeCounter = 1;
    for ( ; ( (autoD8D600E2_ai >= 0 && lv_nukeCounter <= autoD8D600E2_ae) || (autoD8D600E2_ai < 0 && lv_nukeCounter >= autoD8D600E2_ae) ) ; lv_nukeCounter += autoD8D600E2_ai ) {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "NuclearAnnihilationMengskSmallNukeDropDelayCP", RegionRandomPoint(RegionCircle(lv_targetPoint, lv_smallNukeMaxPlacementRadius)));
        Wait(lv_nukeDelay, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Mengsk_NuclearAnnihilationSmallNukes_Init () {
    libBF359936_gt_CM_Mengsk_NuclearAnnihilationSmallNukes = TriggerCreate("libBF359936_gt_CM_Mengsk_NuclearAnnihilationSmallNukes_Func");
    TriggerEnable(libBF359936_gt_CM_Mengsk_NuclearAnnihilationSmallNukes, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Mengsk_NuclearAnnihilationSmallNukes, c_playerAny, "NuclearAnnihilationMengskBigNukeDropDelayCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_ArtilleryBombardmentCargoChange
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Mengsk_ArtilleryBombardmentCargoChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_artillery;
    int lv_cargoCount;
    string lv_cargoCountBehavior;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_artillery = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_cargoCount = UnitGroupCount(UnitCargoGroup(lv_artillery), c_unitCountAlive);
    lv_cargoCountBehavior = "ArtilleryMengskCargo";

    // Actions
    if (!runActions) {
        return true;
    }

    libBF359936_gf_SetUnitAttributePoints(lv_cargoCountBehavior, lv_artillery, lv_cargoCount);
    if ((lv_cargoCount == 0)) {
        UnitBehaviorRemove(lv_artillery, "ArtilleryMengskCargoGlobal", 1);
    }
    else {
        UnitBehaviorAdd(lv_artillery, "ArtilleryMengskCargoGlobal", lv_artillery, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Mengsk_ArtilleryBombardmentCargoChange_Init () {
    libBF359936_gt_CM_Mengsk_ArtilleryBombardmentCargoChange = TriggerCreate("libBF359936_gt_CM_Mengsk_ArtilleryBombardmentCargoChange_Func");
    TriggerEnable(libBF359936_gt_CM_Mengsk_ArtilleryBombardmentCargoChange, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Mengsk_ArtilleryBombardmentCargoChange, c_playerAny, "ArtilleryMengskCargoTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_VeteranDies
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Mengsk_VeteranDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerCommander(UnitGetOwner(EventUnit())) == "Mengsk"))) {
            return false;
        }

        if (!((UnitGroupHasUnit(libBF359936_gv_cM_Mengsk_VeteranUnits, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libBF359936_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateRoyalGuard(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Mengsk_VeteranDies_Init () {
    libBF359936_gt_CM_Mengsk_VeteranDies = TriggerCreate("libBF359936_gt_CM_Mengsk_VeteranDies_Func");
    TriggerEnable(libBF359936_gt_CM_Mengsk_VeteranDies, false);
    TriggerAddEventUnitDied(libBF359936_gt_CM_Mengsk_VeteranDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_VeteranDing
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Mengsk_VeteranDing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_levellingunit;
    int lv_statusframe;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_levellingunit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_statusframe = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "HealthBar", lv_levellingunit);
    lv_statusframe = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_statusframe, PlayerGroupAll(), "Rank", IntToString(UnitXPGetCurrentLevel(lv_levellingunit, null)));
    libBF359936_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateRoyalGuard(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Mengsk_VeteranDing_Init () {
    libBF359936_gt_CM_Mengsk_VeteranDing = TriggerCreate("libBF359936_gt_CM_Mengsk_VeteranDing_Func");
    TriggerEnable(libBF359936_gt_CM_Mengsk_VeteranDing, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Mengsk_VeteranDing, c_playerAny, "MengskVeteranLevelUpDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_RegisterPropagandaUnit
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Mengsk_RegisterPropagandaUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "SCVMengsk") || (UnitGetType(EventUnit()) == "TrooperMengsk") || (UnitGetType(EventUnit()) == "TrooperMengskAA") || (UnitGetType(EventUnit()) == "TrooperMengskFlamethrower") || (UnitGetType(EventUnit()) == "TrooperMengskImproved")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libBF359936_gv_cM_Mengsk_PropagandaUnits, EventUnit());
    libBF359936_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateTrooper(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Mengsk_RegisterPropagandaUnit_Init () {
    libBF359936_gt_CM_Mengsk_RegisterPropagandaUnit = TriggerCreate("libBF359936_gt_CM_Mengsk_RegisterPropagandaUnit_Func");
    TriggerEnable(libBF359936_gt_CM_Mengsk_RegisterPropagandaUnit, false);
    TriggerAddEventUnitBehaviorChange(libBF359936_gt_CM_Mengsk_RegisterPropagandaUnit, null, "PropagandaBlastMengsk", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(libBF359936_gt_CM_Mengsk_RegisterPropagandaUnit, null, "PropagandaBlastMengskPermanent", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_RemovePropagandaUnit
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Mengsk_RemovePropagandaUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(EventUnit(), "PropagandaBlastMengsk") < 1))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "PropagandaBlastMengskPermanent") < 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(libBF359936_gv_cM_Mengsk_PropagandaUnits, EventUnit());
    libBF359936_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateTrooper(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Mengsk_RemovePropagandaUnit_Init () {
    libBF359936_gt_CM_Mengsk_RemovePropagandaUnit = TriggerCreate("libBF359936_gt_CM_Mengsk_RemovePropagandaUnit_Func");
    TriggerEnable(libBF359936_gt_CM_Mengsk_RemovePropagandaUnit, false);
    TriggerAddEventUnitBehaviorChange(libBF359936_gt_CM_Mengsk_RemovePropagandaUnit, null, "PropagandaBlastMengsk", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(libBF359936_gt_CM_Mengsk_RemovePropagandaUnit, null, "PropagandaBlastMengskPermanent", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_PropagandaUpgraded
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Mengsk_PropagandaUpgraded_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "BlimpMengskTopbarRegen"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libBF359936_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateTrooper(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Mengsk_PropagandaUpgraded_Init () {
    libBF359936_gt_CM_Mengsk_PropagandaUpgraded = TriggerCreate("libBF359936_gt_CM_Mengsk_PropagandaUpgraded_Func");
    TriggerEnable(libBF359936_gt_CM_Mengsk_PropagandaUpgraded, false);
    TriggerAddEventUpgradeLevelChanged(libBF359936_gt_CM_Mengsk_PropagandaUpgraded, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_MedivacAirlift
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Mengsk_MedivacAirlift_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medivac;
    unit lv_siegetank;
    int lv_statusframe;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_medivac = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_siegetank = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_statusframe = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "MedivacMengskSiegeTankAirliftLoadTrigger")) {
        UnitBehaviorAdd(lv_medivac, "MedivacMengskSiegeTankAirlift", lv_medivac, 1);
        libBF359936_gf_SetUnitAttributePoints("MedivacMengskSiegeTankAirliftLevel", lv_medivac, (UnitXPGetCurrentLevel(lv_siegetank, null) - 1));
        DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "HealthBar", lv_medivac);
        lv_statusframe = DialogControlLastCreated();
        DialogControlSetAnimationState(lv_statusframe, PlayerGroupAll(), "Rank", IntToString(UnitXPGetCurrentLevel(lv_siegetank, null)));
    }
    else {
        UnitBehaviorRemove(lv_medivac, "MedivacMengskSiegeTankAirlift", 1);
        UnitBehaviorRemove(lv_medivac, "MedivacMengskSiegeTankAirliftLevel", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Mengsk_MedivacAirlift_Init () {
    libBF359936_gt_CM_Mengsk_MedivacAirlift = TriggerCreate("libBF359936_gt_CM_Mengsk_MedivacAirlift_Func");
    TriggerEnable(libBF359936_gt_CM_Mengsk_MedivacAirlift, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Mengsk_MedivacAirlift, c_playerAny, "MedivacMengskSiegeTankAirliftLoadTrigger");
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Mengsk_MedivacAirlift, c_playerAny, "MedivacMengskSiegeTankAirliftUnloadTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_MedivacAirliftDing
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Mengsk_MedivacAirliftDing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_siegetank;
    unit lv_medivac;
    int lv_statusframe;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_siegetank = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_medivac = UnitTransport(lv_siegetank);
    lv_statusframe = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_siegetank) == "MengskSiegeTankSieged"))) {
            return false;
        }

        if (!((lv_medivac != null))) {
            return false;
        }

        if (!((UnitGetType(lv_medivac) == "MedivacMengskACGluescreenDummy"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libBF359936_gf_SetUnitAttributePoints("MedivacMengskSiegeTankAirliftLevel", lv_medivac, (UnitXPGetCurrentLevel(lv_siegetank, null) - 1));
    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "HealthBar", lv_medivac);
    lv_statusframe = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_statusframe, PlayerGroupAll(), "Rank", IntToString(UnitXPGetCurrentLevel(lv_siegetank, null)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Mengsk_MedivacAirliftDing_Init () {
    libBF359936_gt_CM_Mengsk_MedivacAirliftDing = TriggerCreate("libBF359936_gt_CM_Mengsk_MedivacAirliftDing_Func");
    TriggerEnable(libBF359936_gt_CM_Mengsk_MedivacAirliftDing, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Mengsk_MedivacAirliftDing, c_playerAny, "MengskVeteranLevelUpDummy");
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Mengsk_MedivacAirliftDing, c_playerAny, "MengskVeteranMaxedTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_EnlistStart
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Mengsk_EnlistStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "TrooperMengskEnlistingAB", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Mengsk_EnlistStart_Init () {
    libBF359936_gt_CM_Mengsk_EnlistStart = TriggerCreate("libBF359936_gt_CM_Mengsk_EnlistStart_Func");
    TriggerEnable(libBF359936_gt_CM_Mengsk_EnlistStart, false);
    TriggerAddEventUnitAbility(libBF359936_gt_CM_Mengsk_EnlistStart, null, AbilityCommand("TrooperMengskEnlist",0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(libBF359936_gt_CM_Mengsk_EnlistStart, null, AbilityCommand("SCVMengskEnlist",0), c_abilEffectStageApproach, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_EnlistStop
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Mengsk_EnlistStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "TrooperMengskEnlistingRB", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Mengsk_EnlistStop_Init () {
    libBF359936_gt_CM_Mengsk_EnlistStop = TriggerCreate("libBF359936_gt_CM_Mengsk_EnlistStop_Func");
    TriggerEnable(libBF359936_gt_CM_Mengsk_EnlistStop, false);
    TriggerAddEventUnitAbility(libBF359936_gt_CM_Mengsk_EnlistStop, null, AbilityCommand("TrooperMengskEnlist",0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libBF359936_gt_CM_Mengsk_EnlistStop, null, AbilityCommand("SCVMengskEnlist",0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libBF359936_gt_CM_Mengsk_EnlistStop, null, AbilityCommand("TrooperMengskEnlist",0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(libBF359936_gt_CM_Mengsk_EnlistStop, null, AbilityCommand("SCVMengskEnlist",0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(libBF359936_gt_CM_Mengsk_EnlistStop, null, AbilityCommand("TrooperMengskEnlist",0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libBF359936_gt_CM_Mengsk_EnlistStop, null, AbilityCommand("SCVMengskEnlist",0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_WeaponPickupRegister
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Mengsk_WeaponPickupRegister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_registrant;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_registrant = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((PlayerCommander(UnitGetOwner(lv_registrant)) == "Mengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libBF359936_gv_cM_Mengsk_WeaponPickups, lv_registrant);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Mengsk_WeaponPickupRegister_Init () {
    libBF359936_gt_CM_Mengsk_WeaponPickupRegister = TriggerCreate("libBF359936_gt_CM_Mengsk_WeaponPickupRegister_Func");
    TriggerEnable(libBF359936_gt_CM_Mengsk_WeaponPickupRegister, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Mengsk_WeaponPickupRegister, c_playerAny, "TrooperMengskWeaponPickupRegister");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_WeaponPickerUpperRegister
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Mengsk_WeaponPickerUpperRegister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_registrant;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_registrant = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((PlayerCommander(UnitGetOwner(lv_registrant)) == "Mengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libBF359936_gv_cM_Mengsk_WeaponPickerUppers, lv_registrant);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Mengsk_WeaponPickerUpperRegister_Init () {
    libBF359936_gt_CM_Mengsk_WeaponPickerUpperRegister = TriggerCreate("libBF359936_gt_CM_Mengsk_WeaponPickerUpperRegister_Func");
    TriggerEnable(libBF359936_gt_CM_Mengsk_WeaponPickerUpperRegister, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Mengsk_WeaponPickerUpperRegister, c_playerAny, "TrooperMengskWeaponPickerUpperRegister");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_WeaponPickup
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Mengsk_WeaponPickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pickup;
    unit lv_pickerupper;

    // Automatic Variable Declarations
    unitgroup autoE9FA4202_g;
    int autoE9FA4202_u;
    string auto3AB6BC8A_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerActiveCount(TriggerGetCurrent()) > 1)) {
        return true;
    }

    while (true) {
        Wait(0.5, c_timeGame);
        if ((UnitGroupCount(libBF359936_gv_cM_Mengsk_WeaponPickups, c_unitCountAlive) > 0) && (UnitGroupCount(libBF359936_gv_cM_Mengsk_WeaponPickerUppers, c_unitCountAlive) > 0)) {
            autoE9FA4202_g = libBF359936_gv_cM_Mengsk_WeaponPickups;
            autoE9FA4202_u = UnitGroupCount(autoE9FA4202_g, c_unitCountAll);
            for (;; autoE9FA4202_u -= 1) {
                lv_pickup = UnitGroupUnitFromEnd(autoE9FA4202_g, autoE9FA4202_u);
                if (lv_pickup == null) { break; }
                lv_pickerupper = UnitGroupClosestToPoint(libBF359936_gv_cM_Mengsk_WeaponPickerUppers, UnitGetPosition(lv_pickup));
                if ((UnitIsAlive(lv_pickerupper) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_pickup), UnitGetPosition(lv_pickerupper)) <= 2.0)) {
                    auto3AB6BC8A_val = UnitGetType(lv_pickup);
                    if (auto3AB6BC8A_val == "TrooperMengskWeaponAAPickup") {
                        libBF359936_gf_CM_Mengsk_ForceMorphTrooper(lv_pickerupper, lv_pickup, "TrooperMengskMorphAA", "TrooperMengskWeaponAA", "SetWeaponAA");
                    }
                    else if (auto3AB6BC8A_val == "TrooperMengskWeaponFlamethrowerPickup") {
                        libBF359936_gf_CM_Mengsk_ForceMorphTrooper(lv_pickerupper, lv_pickup, "TrooperMengskMorphFlamethrower", "TrooperMengskWeaponFlamethrower", "SetWeaponFlamethrower");
                    }
                    else if (auto3AB6BC8A_val == "TrooperMengskWeaponImprovedPickup") {
                        libBF359936_gf_CM_Mengsk_ForceMorphTrooper(lv_pickerupper, lv_pickup, "TrooperMengskMorphImproved", "TrooperMengskWeaponImproved", "SetWeaponImproved");
                    }
                    else {
                        UnitGroupRemove(libBF359936_gv_cM_Mengsk_WeaponPickups, lv_pickup);
                    }
                }

                lv_pickerupper = null;
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Mengsk_WeaponPickup_Init () {
    libBF359936_gt_CM_Mengsk_WeaponPickup = TriggerCreate("libBF359936_gt_CM_Mengsk_WeaponPickup_Func");
    TriggerEnable(libBF359936_gt_CM_Mengsk_WeaponPickup, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_ZergSeekDestroy
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Mengsk_ZergSeekDestroy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerCommander(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == "Mengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libBF359936_gf_FindandAttackNearestEnemy(EventPlayerEffectUsedUnit(c_effectUnitCaster), 30.0, 6.0, 2.0, UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32))), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Mengsk_ZergSeekDestroy_Init () {
    libBF359936_gt_CM_Mengsk_ZergSeekDestroy = TriggerCreate("libBF359936_gt_CM_Mengsk_ZergSeekDestroy_Func");
    TriggerEnable(libBF359936_gt_CM_Mengsk_ZergSeekDestroy, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Mengsk_ZergSeekDestroy, c_playerAny, "MengskSeekDestroyTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_ZerglingMengskSpawn
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Mengsk_ZerglingMengskSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerCommander(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == "Mengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "ZerglingMengsk", 0, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), (SquareRoot(RandomFixed(0.0, 1.0)) * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MengskZergCalldownAreaDummy", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny)), RandomFixed(0.0, 360.0)), RandomFixed(0.0, 360.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Mengsk_ZerglingMengskSpawn_Init () {
    libBF359936_gt_CM_Mengsk_ZerglingMengskSpawn = TriggerCreate("libBF359936_gt_CM_Mengsk_ZerglingMengskSpawn_Func");
    TriggerEnable(libBF359936_gt_CM_Mengsk_ZerglingMengskSpawn, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Mengsk_ZerglingMengskSpawn, c_playerAny, "ZerglingMengskSpawnTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_HydraliskMengskSpawn
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Mengsk_HydraliskMengskSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerCommander(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == "Mengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "HydraliskMengsk", 0, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), (SquareRoot(RandomFixed(0.0, 1.0)) * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MengskZergCalldownAreaDummy", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny)), RandomFixed(0.0, 360.0)), RandomFixed(0.0, 360.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Mengsk_HydraliskMengskSpawn_Init () {
    libBF359936_gt_CM_Mengsk_HydraliskMengskSpawn = TriggerCreate("libBF359936_gt_CM_Mengsk_HydraliskMengskSpawn_Func");
    TriggerEnable(libBF359936_gt_CM_Mengsk_HydraliskMengskSpawn, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Mengsk_HydraliskMengskSpawn, c_playerAny, "HydraliskMengskSpawnTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_MutaliskMengskSpawn
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Mengsk_MutaliskMengskSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerCommander(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == "Mengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "MutaliskMengsk", 0, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), (SquareRoot(RandomFixed(0.0, 1.0)) * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MengskZergCalldownAreaDummy", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny)), RandomFixed(0.0, 360.0)), RandomFixed(0.0, 360.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Mengsk_MutaliskMengskSpawn_Init () {
    libBF359936_gt_CM_Mengsk_MutaliskMengskSpawn = TriggerCreate("libBF359936_gt_CM_Mengsk_MutaliskMengskSpawn_Func");
    TriggerEnable(libBF359936_gt_CM_Mengsk_MutaliskMengskSpawn, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Mengsk_MutaliskMengskSpawn, c_playerAny, "MutaliskMengskSpawnTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_UltraliskMengskSpawn
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Mengsk_UltraliskMengskSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerCommander(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == "Mengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "UltraliskMengsk", 0, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), (SquareRoot(RandomFixed(0.0, 1.0)) * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MengskZergCalldownAreaDummy", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny)), RandomFixed(0.0, 360.0)), RandomFixed(0.0, 360.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Mengsk_UltraliskMengskSpawn_Init () {
    libBF359936_gt_CM_Mengsk_UltraliskMengskSpawn = TriggerCreate("libBF359936_gt_CM_Mengsk_UltraliskMengskSpawn_Func");
    TriggerEnable(libBF359936_gt_CM_Mengsk_UltraliskMengskSpawn, false);
    TriggerAddEventPlayerEffectUsed(libBF359936_gt_CM_Mengsk_UltraliskMengskSpawn, c_playerAny, "UltraliskMengskSpawnTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_BunkerDepotDropFillCargo
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Mengsk_BunkerDepotDropFillCargo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bunkerdepot;
    int lv_troopercargosize;
    int lv_bunkerdepotcargocapacity;
    int lv_bunkerdepotcargomaxcount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bunkerdepot = EventUnit();
    lv_troopercargosize = CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TrooperMengsk", "CargoSize", EventPlayer());
    lv_bunkerdepotcargocapacity = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "BunkerMengskTransport", "TotalCargoSpace", EventPlayer());
    lv_bunkerdepotcargomaxcount = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "BunkerMengskTransport", "MaxCargoCount", EventPlayer());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_troopercargosize != 0) && (lv_bunkerdepotcargocapacity != 0) && (lv_bunkerdepotcargomaxcount != 0)) {
        UnitCargoCreate(lv_bunkerdepot, "TrooperMengsk", MinI((lv_bunkerdepotcargocapacity / lv_troopercargosize), lv_bunkerdepotcargomaxcount));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Mengsk_BunkerDepotDropFillCargo_Init () {
    libBF359936_gt_CM_Mengsk_BunkerDepotDropFillCargo = TriggerCreate("libBF359936_gt_CM_Mengsk_BunkerDepotDropFillCargo_Func");
    TriggerEnable(libBF359936_gt_CM_Mengsk_BunkerDepotDropFillCargo, false);
    TriggerAddEventUnitAbility(libBF359936_gt_CM_Mengsk_BunkerDepotDropFillCargo, null, AbilityCommand("BunkerDepotMengskDropMorph",0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_DirtyBombSweetener
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_CM_Mengsk_DirtyBombSweetener_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup("ArtilleryMengskACGluescreenDummy", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterStunned - 32))), 0), c_unitCountAlive) > 4))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.5, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("UI_Mengsk_TopBar_Stinger_Up", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
    Wait(3.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("UI_Mengsk_TopBar_Stinger_Down", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
    Wait(16.5, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_CM_Mengsk_DirtyBombSweetener_Init () {
    libBF359936_gt_CM_Mengsk_DirtyBombSweetener = TriggerCreate("libBF359936_gt_CM_Mengsk_DirtyBombSweetener_Func");
    TriggerEnable(libBF359936_gt_CM_Mengsk_DirtyBombSweetener, false);
    TriggerAddEventUnitAbility(libBF359936_gt_CM_Mengsk_DirtyBombSweetener, null, AbilityCommand("ArtilleryMengskGlobalExperimentalStrike",0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_Terr_Raynor_TrainBuff
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_Terr_Raynor_TrainBuff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "RaynorBarracks") || (UnitGetType(EventUnit()) == "RaynorFactory") || (UnitGetType(EventUnit()) == "RaynorStarport")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitCreatedUnit(), "MercenaryMunitions", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_Terr_Raynor_TrainBuff_Init () {
    libBF359936_gt_GE_Terr_Raynor_TrainBuff = TriggerCreate("libBF359936_gt_GE_Terr_Raynor_TrainBuff_Func");
    TriggerEnable(libBF359936_gt_GE_Terr_Raynor_TrainBuff, false);
    TriggerAddEventUnitCreated(libBF359936_gt_GE_Terr_Raynor_TrainBuff, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_Terr_MoebiusTrain
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_Terr_MoebiusTrain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitCreatedUnit(), "MoebiusCorpsSkin", EventUnitCreatedUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_Terr_MoebiusTrain_Init () {
    libBF359936_gt_GE_Terr_MoebiusTrain = TriggerCreate("libBF359936_gt_GE_Terr_MoebiusTrain_Func");
    TriggerAddEventUnitCreated(libBF359936_gt_GE_Terr_MoebiusTrain, null, "MoebiusBarracksTrain", null);
    TriggerAddEventUnitCreated(libBF359936_gt_GE_Terr_MoebiusTrain, null, "MoebiusFactoryTrain", null);
    TriggerAddEventUnitCreated(libBF359936_gt_GE_Terr_MoebiusTrain, null, "MoebiusStarportTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_Terr_Dominion APC
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_Terr_DominionAPC_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "ColonistTransport"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitCreatedUnit(), "KillSquad", EventUnitCreatedUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_Terr_DominionAPC_Init () {
    libBF359936_gt_GE_Terr_DominionAPC = TriggerCreate("libBF359936_gt_GE_Terr_DominionAPC_Func");
    TriggerEnable(libBF359936_gt_GE_Terr_DominionAPC, false);
    TriggerAddEventUnitCreated(libBF359936_gt_GE_Terr_DominionAPC, null, "CreateTerranUnits006", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_Terr_NovaEradicator_FlamethrowerResetTurret
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_Terr_NovaEradicator_FlamethrowerResetTurret_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("NovaEradicatorResetTurret", 0)), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_Terr_NovaEradicator_FlamethrowerResetTurret_Init () {
    libBF359936_gt_GE_Terr_NovaEradicator_FlamethrowerResetTurret = TriggerCreate("libBF359936_gt_GE_Terr_NovaEradicator_FlamethrowerResetTurret_Func");
    TriggerEnable(libBF359936_gt_GE_Terr_NovaEradicator_FlamethrowerResetTurret, false);
    TriggerAddEventUnitAbility(libBF359936_gt_GE_Terr_NovaEradicator_FlamethrowerResetTurret, null, AbilityCommand("NovaEradicatorFlamethrower", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_Terr_NovaEradicator_RailgunCast
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_Terr_NovaEradicator_RailgunCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_abilityTarget;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abilityTarget = EventUnitTargetPoint();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "KillSquad", EventUnit(), 1);
    Wait(3.0, c_timeGame);
    UnitBehaviorRemove(EventUnit(), "KillSquad", 1);
    if ((UnitHasBehavior2(EventUnit(), "KillSquad") == false)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("NovaEradicatorRailgunFire", 0), lv_abilityTarget), c_orderQueueAddToFront);
    }
    else {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("NovaEradicatorRailgunFire", 0), lv_abilityTarget), c_orderQueueAddToEnd);
    }
    if ((UnitHasBehavior2(EventUnit(), "KillSquad") == false)) {
        Wait(9.0, c_timeGame);
        if ((UnitOrderCount(EventUnit()) == 0)) {
            UnitIssueOrder(EventUnit(), Order(AbilityCommand("NovaEradicatorResetTurret", 0)), c_orderQueueAddToFront);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_Terr_NovaEradicator_RailgunCast_Init () {
    libBF359936_gt_GE_Terr_NovaEradicator_RailgunCast = TriggerCreate("libBF359936_gt_GE_Terr_NovaEradicator_RailgunCast_Func");
    TriggerEnable(libBF359936_gt_GE_Terr_NovaEradicator_RailgunCast, false);
    TriggerAddEventUnitAbility(libBF359936_gt_GE_Terr_NovaEradicator_RailgunCast, null, AbilityCommand("NovaEradicatorRailgun", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_Terr_Units007
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_Terr_Units007_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitCreatedUnit()) == "Battlecruiser")) {
        UnitBehaviorAdd(EventUnitCreatedUnit(), "DOMSkin", EventUnitCreatedUnit(), 1);
    }

    if (((UnitGetType(EventUnitCreatedUnit()) == "Marine") || (UnitGetType(EventUnitCreatedUnit()) == "Marauder") || (UnitGetType(EventUnitCreatedUnit()) == "Hellion") || (UnitGetType(EventUnitCreatedUnit()) == "HellionTank") || (UnitGetType(EventUnitCreatedUnit()) == "VikingFighter") || (UnitGetType(EventUnitCreatedUnit()) == "Wraith"))) {
        UnitBehaviorAdd(EventUnitCreatedUnit(), "MoebiusCorpsSkin", EventUnitCreatedUnit(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_Terr_Units007_Init () {
    libBF359936_gt_GE_Terr_Units007 = TriggerCreate("libBF359936_gt_GE_Terr_Units007_Func");
    TriggerEnable(libBF359936_gt_GE_Terr_Units007, false);
    TriggerAddEventUnitCreated(libBF359936_gt_GE_Terr_Units007, null, "CreateTerranUnits007", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GE_ArmyUpgradesAddon
//--------------------------------------------------------------------------------------------------
bool libBF359936_gt_GE_ArmyUpgradesAddon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventUpgradeName() == "OrbitalStrike") || (EventUpgradeName() == "TerranBuildingArmor") || (EventUpgradeName() == "TerranInfantryWeaponsLevel1") || (EventUpgradeName() == "TerranInfantryWeaponsLevel2") || (EventUpgradeName() == "TerranInfantryWeaponsLevel3") || (EventUpgradeName() == "TerranInfantryArmorsLevel1") || (EventUpgradeName() == "TerranInfantryArmorsLevel2") || (EventUpgradeName() == "TerranInfantryArmorsLevel3") || (EventUpgradeName() == "TerranVehicleWeaponsLevel1") || (EventUpgradeName() == "TerranVehicleWeaponsLevel2") || (EventUpgradeName() == "TerranVehicleWeaponsLevel3") || (EventUpgradeName() == "TerranShipWeaponsLevel1") || (EventUpgradeName() == "TerranShipWeaponsLevel2") || (EventUpgradeName() == "TerranShipWeaponsLevel3") || (EventUpgradeName() == "TerranVehicleAndShipWeaponsLevel1") || (EventUpgradeName() == "TerranVehicleAndShipWeaponsLevel2") || (EventUpgradeName() == "TerranVehicleAndShipWeaponsLevel3") || (EventUpgradeName() == "TerranShipArmorsLevel1") || (EventUpgradeName() == "TerranShipArmorsLevel2") || (EventUpgradeName() == "TerranShipArmorsLevel3") || (EventUpgradeName() == "TerranVehicleArmorsLevel1") || (EventUpgradeName() == "TerranVehicleArmorsLevel2") || (EventUpgradeName() == "TerranVehicleArmorsLevel3") || (EventUpgradeName() == "TerranVehicleAndShipArmorsLevel1") || (EventUpgradeName() == "TerranVehicleAndShipArmorsLevel2") || (EventUpgradeName() == "TerranVehicleAndShipArmorsLevel3") || (EventUpgradeName() == "ProtossGroundWeaponsLevel1") || (EventUpgradeName() == "ProtossGroundWeaponsLevel2") || (EventUpgradeName() == "ProtossGroundWeaponsLevel3") || (EventUpgradeName() == "ProtossGroundArmorsLevel1") || (EventUpgradeName() == "ProtossGroundArmorsLevel2") || (EventUpgradeName() == "ProtossGroundArmorsLevel3") || (EventUpgradeName() == "ProtossShieldsLevel1") || (EventUpgradeName() == "ProtossShieldsLevel2") || (EventUpgradeName() == "ProtossShieldsLevel3") || (EventUpgradeName() == "ProtossAirWeaponsLevel1") || (EventUpgradeName() == "ProtossAirWeaponsLevel2") || (EventUpgradeName() == "ProtossAirWeaponsLevel3") || (EventUpgradeName() == "ProtossAirArmorsLevel1") || (EventUpgradeName() == "ProtossAirArmorsLevel2") || (EventUpgradeName() == "ProtossAirArmorsLevel3") || (EventUpgradeName() == "SuperiorWarpGates") || (EventUpgradeName() == "Charge") || (EventUpgradeName() == "VoidZealotShadowCharge") || (EventUpgradeName() == "ZergMeleeWeaponsLevel1") || (EventUpgradeName() == "ZergMeleeWeaponsLevel2") || (EventUpgradeName() == "ZergMeleeWeaponsLevel3") || (EventUpgradeName() == "ZergMissileWeaponsLevel1") || (EventUpgradeName() == "ZergMissileWeaponsLevel2") || (EventUpgradeName() == "ZergMissileWeaponsLevel3") || (EventUpgradeName() == "ZergGroundArmorsLevel1") || (EventUpgradeName() == "ZergGroundArmorsLevel2") || (EventUpgradeName() == "ZergGroundArmorsLevel3") || (EventUpgradeName() == "ZergFlyerWeaponsLevel1") || (EventUpgradeName() == "ZergFlyerWeaponsLevel2") || (EventUpgradeName() == "ZergFlyerWeaponsLevel3") || (EventUpgradeName() == "ZergFlyerArmorsLevel1") || (EventUpgradeName() == "ZergFlyerArmorsLevel2") || (EventUpgradeName() == "ZergFlyerArmorsLevel3")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventUpgradeName() == "OrbitalStrike") || (EventUpgradeName() == "SuperiorWarpGates") || (EventUpgradeName() == "Charge") || (EventUpgradeName() == "VoidZealotShadowCharge"))) {
        if ((EventUpgradeName() == "OrbitalStrike")) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HotSHaveInfestor", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
        }
        else {
            if ((EventUpgradeName() == "SuperiorWarpGates")) {
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SuperiorWarpGatesA", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SuperiorWarpGatesB", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SuperiorWarpGatesC", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
            }
            else {
                if ((EventUpgradeName() == "Charge")) {
                    if ((TechTreeUpgradeCount(EventPlayer(), "VoidZealotShadowCharge", c_techCountQueuedOrBetter) != 1)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HaveReaver", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    }

                }
                else {
                    if ((EventUpgradeName() == "VoidZealotShadowCharge")) {
                        if ((TechTreeUpgradeCount(EventPlayer(), "Charge", c_techCountQueuedOrBetter) != 1)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HaveReaver", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        }

                    }

                }
            }
        }
    }
    else {
        if (((EventUpgradeName() == "TerranBuildingArmor") || (EventUpgradeName() == "TerranInfantryWeaponsLevel1") || (EventUpgradeName() == "TerranInfantryWeaponsLevel2") || (EventUpgradeName() == "TerranInfantryWeaponsLevel3") || (EventUpgradeName() == "TerranInfantryArmorsLevel1") || (EventUpgradeName() == "TerranInfantryArmorsLevel2") || (EventUpgradeName() == "TerranInfantryArmorsLevel3") || (EventUpgradeName() == "TerranVehicleWeaponsLevel1") || (EventUpgradeName() == "TerranVehicleWeaponsLevel2") || (EventUpgradeName() == "TerranVehicleWeaponsLevel3") || (EventUpgradeName() == "TerranShipWeaponsLevel1") || (EventUpgradeName() == "TerranShipWeaponsLevel2") || (EventUpgradeName() == "TerranShipWeaponsLevel3") || (EventUpgradeName() == "TerranVehicleAndShipWeaponsLevel1") || (EventUpgradeName() == "TerranVehicleAndShipWeaponsLevel2") || (EventUpgradeName() == "TerranVehicleAndShipWeaponsLevel3") || (EventUpgradeName() == "TerranShipArmorsLevel1") || (EventUpgradeName() == "TerranShipArmorsLevel2") || (EventUpgradeName() == "TerranShipArmorsLevel3") || (EventUpgradeName() == "TerranVehicleArmorsLevel1") || (EventUpgradeName() == "TerranVehicleArmorsLevel2") || (EventUpgradeName() == "TerranVehicleArmorsLevel3") || (EventUpgradeName() == "TerranVehicleAndShipArmorsLevel1") || (EventUpgradeName() == "TerranVehicleAndShipArmorsLevel2") || (EventUpgradeName() == "TerranVehicleAndShipArmorsLevel3"))) {
            if ((EventUpgradeName() == "TerranInfantryWeaponsLevel1")) {
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidPhoenixStandard", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidVoidRayTaldarim", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryWeaponsLevel1Infested", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
            }
            else {
                if ((EventUpgradeName() == "TerranInfantryWeaponsLevel2")) {
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "RoachVile", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SOAMothership", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryWeaponsLevel2Infested", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                }
                else {
                    if ((EventUpgradeName() == "TerranInfantryWeaponsLevel3")) {
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ChampionUpgradeAlarakLifeMax", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HotSHaveUltralisk", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryWeaponsLevel3Infested", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    }

                }
            }
            if ((EventUpgradeName() == "TerranInfantryArmorsLevel1")) {
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidVoidRayAiur", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HireDukesRevenge", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryArmorLevel1Infested", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
            }
            else {
                if ((EventUpgradeName() == "TerranInfantryArmorsLevel2")) {
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidStalkerDragoon", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ChampionUpgradeFenixLifeMax", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryArmorLevel2Infested", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                }
                else {
                    if ((EventUpgradeName() == "TerranInfantryArmorsLevel3")) {
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidStalkerStandard", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "JuggernautPlating", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryArmorLevel3Infested", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    }

                }
            }

            if ((EventUpgradeName() == "TerranVehicleAndShipArmorsLevel1")) {
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranVehicleArmorsLevel1", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranShipArmorsLevel1", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
            }
            else {
                if ((EventUpgradeName() == "TerranVehicleAndShipArmorsLevel2")) {
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranVehicleArmorsLevel2", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranShipArmorsLevel2", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                }
                else {
                    if ((EventUpgradeName() == "TerranVehicleAndShipArmorsLevel3")) {
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranVehicleArmorsLevel3", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranShipArmorsLevel3", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    }

                }
            }
            if ((EventUpgradeName() == "TerranVehicleAndShipWeaponsLevel1")) {
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranVehicleWeaponsLevel1", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                Wait(0.05, c_timeGame);
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranShipWeaponsLevel1", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
            }
            else {
                if ((EventUpgradeName() == "TerranVehicleAndShipWeaponsLevel2")) {
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranVehicleWeaponsLevel2", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    Wait(0.05, c_timeGame);
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranShipWeaponsLevel2", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                }
                else {
                    if ((EventUpgradeName() == "TerranVehicleAndShipWeaponsLevel3")) {
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranVehicleWeaponsLevel3", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        Wait(0.05, c_timeGame);
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranShipWeaponsLevel3", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    }

                }
            }
            if ((EventUpgradeName() == "TerranVehicleWeaponsLevel1")) {
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HaveScout", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HotSHaveAAEgg", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranVehicleWeaponsLevel1Infested", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
            }
            else {
                if ((EventUpgradeName() == "TerranVehicleWeaponsLevel2")) {
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "AlarakPsiOrb", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ArtanisStasisField", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranVehicleWeaponsLevel2Infested", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                }
                else {
                    if ((EventUpgradeName() == "TerranVehicleWeaponsLevel3")) {
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HaveMonitor", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HotSHaveBaneling", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranVehicleWeaponsLevel3Infested", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    }

                }
            }
            if ((EventUpgradeName() == "TerranVehicleArmorsLevel1")) {
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "JackhammerConcussionGrenades", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ChampionUpgradeVulcanLifeMax", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranVehiclePlatingLevel1Infested", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
            }
            else {
                if ((EventUpgradeName() == "TerranVehicleArmorsLevel2")) {
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ReaperStimpack", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "FullBoreCanisterAmmo", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranVehiclePlatingLevel2Infested", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                }
                else {
                    if ((EventUpgradeName() == "TerranVehicleArmorsLevel3")) {
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ArtanisPsiStormHeal", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HireHelsAngelsPH", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranVehiclePlatingLevel3Infested", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    }

                }
            }

            if ((EventUpgradeName() == "TerranShipWeaponsLevel1")) {
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HavePhoenix", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HotSHaveMutalisk", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranShipWeaponsLevel1Infested", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
            }
            else {
                if ((EventUpgradeName() == "TerranShipWeaponsLevel2")) {
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HireDuskWingPH", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SOAAlarak", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranShipWeaponsLevel2Infested", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                }
                else {
                    if ((EventUpgradeName() == "TerranShipWeaponsLevel3")) {
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "AlarakAvatar", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HotSHaveAberration", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranShipWeaponsLevel3Infested", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    }

                }
            }
            if ((EventUpgradeName() == "TerranShipArmorsLevel1")) {
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HaveImmortalBase", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HotSHaveQueen", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranShipPlatingLevel1Infested", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
            }
            else {
                if ((EventUpgradeName() == "TerranShipArmorsLevel2")) {
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HaveVoidReplicant", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "AlarakForkedLightning", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranShipPlatingLevel2Infested", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                }
                else {
                    if ((EventUpgradeName() == "TerranShipArmorsLevel3")) {
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidCarrierAiur", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MULE", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranShipPlatingLevel3Infested", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    }

                }
            }

            if ((EventUpgradeName() == "TerranBuildingArmor")) {
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranShipWeaponsUltraCapacitorsLevel3", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HotSChitinousPlating", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranVehicleWeaponsUltraCapacitorsLevel3", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranShipWeaponsUltraCapacitorsLevel1", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "NeosteelArmorExtra02", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
            }

        }
        else {
            if (((EventUpgradeName() == "ProtossGroundWeaponsLevel1") || (EventUpgradeName() == "ProtossGroundWeaponsLevel2") || (EventUpgradeName() == "ProtossGroundWeaponsLevel3") || (EventUpgradeName() == "ProtossGroundArmorsLevel1") || (EventUpgradeName() == "ProtossGroundArmorsLevel2") || (EventUpgradeName() == "ProtossGroundArmorsLevel3") || (EventUpgradeName() == "ProtossShieldsLevel1") || (EventUpgradeName() == "ProtossShieldsLevel2") || (EventUpgradeName() == "ProtossShieldsLevel3") || (EventUpgradeName() == "ProtossAirWeaponsLevel1") || (EventUpgradeName() == "ProtossAirWeaponsLevel2") || (EventUpgradeName() == "ProtossAirWeaponsLevel3") || (EventUpgradeName() == "ProtossAirArmorsLevel1") || (EventUpgradeName() == "ProtossAirArmorsLevel2") || (EventUpgradeName() == "ProtossAirArmorsLevel3"))) {
                if ((EventUpgradeName() == "ProtossGroundWeaponsLevel1")) {
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranVehicleWeaponsUltraCapacitorsLevel1", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "NeoSteelFrame", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                }
                else {
                    if ((EventUpgradeName() == "ProtossGroundWeaponsLevel2")) {
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryWeaponsUltraCapacitorsLevel2", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HireKelmorianMinersPH", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    }
                    else {
                        if ((EventUpgradeName() == "ProtossGroundWeaponsLevel3")) {
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryWeaponsUltraCapacitorsLevel3", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HireHammerSecuritiesPH", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        }

                    }
                }
                if ((EventUpgradeName() == "ProtossGroundArmorsLevel1")) {
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranVehicleArmorsVanadiumPlatingLevel1", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryArmorsVanadiumPlatingLevel2", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ProtossGroundArmorLevel1C", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidCarrierTaldarim", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                }
                else {
                    if ((EventUpgradeName() == "ProtossGroundArmorsLevel2")) {
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranVehicleArmorsVanadiumPlatingLevel2", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryArmorsVanadiumPlatingLevel3", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ProtossGroundArmorLevel2C", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MarineSkin", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    }
                    else {
                        if ((EventUpgradeName() == "ProtossGroundArmorsLevel3")) {
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranVehicleArmorsVanadiumPlatingLevel3", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryWeaponsUltraCapacitorsLevel1", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ProtossGroundArmorLevel3C", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidZealotStandard", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        }

                    }
                }

                if ((EventUpgradeName() == "ProtossAirWeaponsLevel1")) {
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HotSHaveCasterEgg", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                }
                else {
                    if ((EventUpgradeName() == "ProtossAirWeaponsLevel2")) {
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "AlarakSoulStealPassive", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    }
                    else {
                        if ((EventUpgradeName() == "ProtossAirWeaponsLevel3")) {
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HireSiegeBreakersPH", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        }

                    }
                }
                if ((EventUpgradeName() == "ProtossAirArmorsLevel1")) {
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranShipArmorsVanadiumPlatingLevel1", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HaveSentry", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                }
                else {
                    if ((EventUpgradeName() == "ProtossAirArmorsLevel2")) {
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranShipArmorsVanadiumPlatingLevel2", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidColossusTaldarim", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    }
                    else {
                        if ((EventUpgradeName() == "ProtossAirArmorsLevel3")) {
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranShipArmorsVanadiumPlatingLevel3", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidImmortalTaldarim", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        }

                    }
                }

                if ((EventUpgradeName() == "ProtossShieldsLevel1")) {
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ProtossShieldsLevel1Extras", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ProtossShieldsLevel1TaldarimNerazim", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ProtossShieldsLevel1Aiur", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HotSHaveBroodLord", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HotSHaveCorruptor", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "InfernalPreIgniters", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ProtossShieldsLevel1G", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ChampionUpgradeAlarakShieldArmorLevel", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HotSHaveVile", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                }
                else {
                    if ((EventUpgradeName() == "ProtossShieldsLevel2")) {
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ProtossShieldsLevel2Extras", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ProtossShieldsLevel2TaldarimNerazim", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ProtossShieldsLevel2Aiur", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HiveMindEmulator", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidSentryPurifier", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "NeoSteelAndShrikeTurretIconUpgrade", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ProtossShieldsLevel2G", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ChampionUpgradeFenixDamage", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HotSImpaler", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    }
                    else {
                        if ((EventUpgradeName() == "ProtossShieldsLevel3")) {
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ProtossShieldsLevel3Extras", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ProtossShieldsLevel3TaldarimNerazim", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ProtossShieldsLevel3Aiur", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ParticleCannonAir", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "PsiDisruptor", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ArtanisHeroicShieldHeal", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ProtossShieldsLevel3G", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ChampionUpgradeAlarakShieldMax", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HotSMutaliskViper", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        }

                    }
                }

            }
            else {
                if ((EventUpgradeName() == "ZergMeleeWeaponsLevel1")) {
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HaveDragoon", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                }
                else {
                    if ((EventUpgradeName() == "ZergMeleeWeaponsLevel2")) {
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidDarkTemplarStandard", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    }
                    else {
                        if ((EventUpgradeName() == "ZergMeleeWeaponsLevel3")) {
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HaveAdept", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        }

                    }
                }
                if ((EventUpgradeName() == "ZergMissileWeaponsLevel1")) {
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HaveDarkTemplar", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                }
                else {
                    if ((EventUpgradeName() == "ZergMissileWeaponsLevel2")) {
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidHighTemplarStandard", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    }
                    else {
                        if ((EventUpgradeName() == "ZergMissileWeaponsLevel3")) {
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidImmortalStandard", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        }

                    }
                }
                if ((EventUpgradeName() == "ZergGroundArmorsLevel1")) {
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergGroundArmorsLevel1Strains", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergGroundArmorsLevel1StrainsMore", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "DestroyerInfestedMedics", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TemplarArchonDisabledTooltipUpgrade", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                }
                else {
                    if ((EventUpgradeName() == "ZergGroundArmorsLevel2")) {
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergGroundArmorsLevel2Strains", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergGroundArmorsLevel2StrainsMore", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ArtanisHeroicShieldBuff", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidDarkTemplarAvenger", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    }
                    else {
                        if ((EventUpgradeName() == "ZergGroundArmorsLevel3")) {
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergGroundArmorsLevel3Strains", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergGroundArmorsLevel3StrainsMore", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HotSHaveSplitterling", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidColossusStandard", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        }

                    }
                }

                if ((EventUpgradeName() == "ZergFlyerWeaponsLevel1")) {
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidImmortalDisruptorOrb", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                }
                else {
                    if ((EventUpgradeName() == "ZergFlyerWeaponsLevel2")) {
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HaveHighTemplar", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    }
                    else {
                        if ((EventUpgradeName() == "ZergFlyerWeaponsLevel3")) {
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidStalkerBlinkCharges", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        }

                    }
                }
                if ((EventUpgradeName() == "ZergFlyerArmorsLevel1")) {
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HireSpartanCompanyPH", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergFlyerArmorsLevel1B", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                }
                else {
                    if ((EventUpgradeName() == "ZergFlyerArmorsLevel2")) {
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VoidCarrierStandard", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergFlyerArmorsLevel2B", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                    }
                    else {
                        if ((EventUpgradeName() == "ZergFlyerArmorsLevel3")) {
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TemplarArchonEnabledTooltipUpgrade", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergFlyerArmorsLevel3B", TechTreeUpgradeCount(EventPlayer(), EventUpgradeName(), c_techCountQueuedOrBetter));
                        }

                    }
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libBF359936_gt_GE_ArmyUpgradesAddon_Init () {
    libBF359936_gt_GE_ArmyUpgradesAddon = TriggerCreate("libBF359936_gt_GE_ArmyUpgradesAddon_Func");
    TriggerEnable(libBF359936_gt_GE_ArmyUpgradesAddon, false);
    TriggerAddEventUpgradeLevelChanged(libBF359936_gt_GE_ArmyUpgradesAddon, c_playerAny);
}

void libBF359936_InitTriggers () {
    libBF359936_gt_GE_Enabler_Init();
    libBF359936_gt_CM_TargetLockOrder_Init();
    libBF359936_gt_CM_TargetLockOrderRaven_Init();
    libBF359936_gt_GE_Enabler_Neutral_Init();
    libBF359936_gt_GE_CreateUnit_HideTerrain_Init();
    libBF359936_gt_GE_DestroyUnit_ShowTerrain_Init();
    libBF359936_gt_StasisChamber_LoadUnit_Init();
    libBF359936_gt_General_RotationDummy_Init();
    libBF359936_gt_GlazeDeathCustomize_VoidShade_Init();
    libBF359936_gt_Rotate1800_Init();
    libBF359936_gt_GE_Enabler_Zerg_Init();
    libBF359936_gt_CM_Stukov_FullSupplyCheat_Init();
    libBF359936_gt_CM_Stukov_CreepSource_Create_Init();
    libBF359936_gt_CM_Stukov_CreepSource_Deactivate_Init();
    libBF359936_gt_CM_Stukov_CreepSource_Activate_Init();
    libBF359936_gt_CM_Stukov_CreepSource_Death_Init();
    libBF359936_gt_CM_Stukov_CreepSource_Spread_Init();
    libBF359936_gt_CM_Stukov_InfestedStructureInitialSpawn_Init();
    libBF359936_gt_CM_Stukov_InfestedStructureRebuilt_Init();
    libBF359936_gt_CM_Stukov_HordeWaveSpawner_Init();
    libBF359936_gt_CM_Stukov_HordeWaveCreated_Init();
    libBF359936_gt_CM_Stukov_HordeWaveExploderCreated_Init();
    libBF359936_gt_CM_Stukov_HordeWaveInteruptionReissueOrder_Init();
    libBF359936_gt_CM_Stukov_RallyPlaced_Init();
    libBF359936_gt_CM_Stukov_RallyToUnitDies_Init();
    libBF359936_gt_CM_Stukov_InfestedBunkerInitialSpawn_Init();
    libBF359936_gt_CM_Stukov_InfestedBunkerRegister_Init();
    libBF359936_gt_CM_Stukov_InfestedBunkerUnloadRally_Init();
    libBF359936_gt_CM_Stukov_InfestedBunkerAutoLoad_Init();
    libBF359936_gt_Stukov_InfestedBunker_RedirectAttack_Init();
    libBF359936_gt_Stukov_InfestedBunker_RedirectStop_Init();
    libBF359936_gt_Stukov_InfestedBunker_WeaponsLoopOFF_Init();
    libBF359936_gt_Stukov_InfestedBunker_ONCreate_Init();
    libBF359936_gt_Stukov_InfestedBunker_ONMorph_Init();
    libBF359936_gt_CM_Stukov_TriggersInit_Init();
    libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow_Init();
    libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain_Init();
    libBF359936_gt_CM_Stukov_InfestedTimedLifeFoodHackBirth_Init();
    libBF359936_gt_CM_Stukov_UnitCostRefund_Init();
    libBF359936_gt_CM_Stukov_InfestedSiegeTankDeath_Init();
    libBF359936_gt_StukovSnareBehaviorOn2_Init();
    libBF359936_gt_GE_Z_MutaliskStrainBroodLordSpawned_Init();
    libBF359936_gt_GE_Z_CreepTumorAB_Init();
    libBF359936_gt_GE_Enabler_Protoss_Init();
    libBF359936_gt_GE_P_WarpGate_SupplicantWarpIn_Init();
    libBF359936_gt_GE_P_Havoc_BloodshardResonanceUpgrade_Init();
    libBF359936_gt_GE_P_Havoc_BloodshardResonanceOwnerChange_Init();
    libBF359936_gt_GE_P_TPadTeleport_Init();
    libBF359936_gt_GE_P_TPadConnect_Init();
    libBF359936_gt_GE_Enabler_Zeratul_Init();
    libBF359936_gt_CM_Zeratul_PurificationNova_Finale_Init();
    libBF359936_gt_CM_Zeratul_PurificationNova_Create_Init();
    libBF359936_gt_CM_Zeratul_PurificationNova_MainImpact_Init();
    libBF359936_gt_CM_Zeratul_AutomatedAssimilatorAutoBuild_Init();
    libBF359936_gt_CM_Zeratul_ReflectionShield_Init();
    libBF359936_gt_CM_Zeratul_DarkTemplarRetreat_Init();
    libBF359936_gt_CM_Zeratul_WarpPrismAutoUnload_Init();
    libBF359936_gt_CM_Zeratul_WarpPrismAutoUnloadOff_Init();
    libBF359936_gt_CM_Zeratul_WarpPrismSelectRift_Init();
    libBF359936_gt_CM_Zeratul_WarpPrismMorphUnloadState_Init();
    libBF359936_gt_CM_Zeratul_Projection_UnitLink_Init();
    libBF359936_gt_CM_Zeratul_Projection_TimedLifeFate_Init();
    libBF359936_gt_CM_Zeratul_Projection_Cancel_Init();
    libBF359936_gt_GE_P_KaraxChangeOwner_Init();
    libBF359936_gt_GE_P_HTSC1Hallu2_Init();
    libBF359936_gt_GE_P_WarpConduitAutoMoves_Init();
    libBF359936_gt_GE_P_PowerUsers_Init();
    libBF359936_gt_GE_Enabler_Terran_Init();
    libBF359936_gt_GE_Terr_Excavator50_Init();
    libBF359936_gt_GE_Terr_NeoluxEnergyTowerStopSendingEnergy_Init();
    libBF359936_gt_GE_Terr_NeoluxEnergyTowerStopReceivingEnergy_Init();
    libBF359936_gt_GE_Terr_MengskBunkerDropLoad_Init();
    libBF359936_gt_CM_Mengsk_TriggersInit_Init();
    libBF359936_gt_CM_Mengsk_ArtilleryBombardmentTarget_Init();
    libBF359936_gt_CM_Mengsk_ArtilleryExperimentalStrikeTarget_Init();
    libBF359936_gt_CM_Mengsk_ArtilleryGlobalExperimentalStrikeTarget_Init();
    libBF359936_gt_CM_Mengsk_GlobalAbilityCast_Init();
    libBF359936_gt_CM_Mengsk_ArtilleryExperimentalStrikeFearApply_Init();
    libBF359936_gt_CM_Mengsk_NuclearAnnihilationSmallNukes_Init();
    libBF359936_gt_CM_Mengsk_ArtilleryBombardmentCargoChange_Init();
    libBF359936_gt_CM_Mengsk_VeteranDies_Init();
    libBF359936_gt_CM_Mengsk_VeteranDing_Init();
    libBF359936_gt_CM_Mengsk_RegisterPropagandaUnit_Init();
    libBF359936_gt_CM_Mengsk_RemovePropagandaUnit_Init();
    libBF359936_gt_CM_Mengsk_PropagandaUpgraded_Init();
    libBF359936_gt_CM_Mengsk_MedivacAirlift_Init();
    libBF359936_gt_CM_Mengsk_MedivacAirliftDing_Init();
    libBF359936_gt_CM_Mengsk_EnlistStart_Init();
    libBF359936_gt_CM_Mengsk_EnlistStop_Init();
    libBF359936_gt_CM_Mengsk_WeaponPickupRegister_Init();
    libBF359936_gt_CM_Mengsk_WeaponPickerUpperRegister_Init();
    libBF359936_gt_CM_Mengsk_WeaponPickup_Init();
    libBF359936_gt_CM_Mengsk_ZergSeekDestroy_Init();
    libBF359936_gt_CM_Mengsk_ZerglingMengskSpawn_Init();
    libBF359936_gt_CM_Mengsk_HydraliskMengskSpawn_Init();
    libBF359936_gt_CM_Mengsk_MutaliskMengskSpawn_Init();
    libBF359936_gt_CM_Mengsk_UltraliskMengskSpawn_Init();
    libBF359936_gt_CM_Mengsk_BunkerDepotDropFillCargo_Init();
    libBF359936_gt_CM_Mengsk_DirtyBombSweetener_Init();
    libBF359936_gt_GE_Terr_Raynor_TrainBuff_Init();
    libBF359936_gt_GE_Terr_MoebiusTrain_Init();
    libBF359936_gt_GE_Terr_DominionAPC_Init();
    libBF359936_gt_GE_Terr_NovaEradicator_FlamethrowerResetTurret_Init();
    libBF359936_gt_GE_Terr_NovaEradicator_RailgunCast_Init();
    libBF359936_gt_GE_Terr_Units007_Init();
    libBF359936_gt_GE_ArmyUpgradesAddon_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libBF359936_InitLib_completed = false;

void libBF359936_InitLib () {
    if (libBF359936_InitLib_completed) {
        return;
    }

    libBF359936_InitLib_completed = true;

    libBF359936_InitLibraries();
    libBF359936_InitVariables();
    libBF359936_InitTriggers();
}

include "Lib22142002"

