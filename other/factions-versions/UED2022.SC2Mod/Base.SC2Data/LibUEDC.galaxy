include "TriggerLibs/NativeLib"

include "LibUEDC_h"

//--------------------------------------------------------------------------------------------------
// Library: UED Data Triggers
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libUEDC_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool libUEDC_InitVariables_completed = false;

void libUEDC_InitVariables () {
    int init_i;

    if (libUEDC_InitVariables_completed) {
        return;
    }

    libUEDC_InitVariables_completed = true;

    libUEDC_gv_teleportationNodeD09AD0BED182D0BED180D18BD0B5D181D182D180D0BED18FD182 = UnitGroupEmpty();
    libUEDC_gv_beaconConstructionunitgroup = UnitGroupEmpty();
    libUEDC_gv_uEDPlayers = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 15; init_i += 1) {
        libUEDC_gv_beacons[init_i] = UnitGroupEmpty();
    }
    libUEDC_gv_beaconsButtonCountLabel = c_invalidDialogControlId;
    libUEDC_gv_beaconsButton = c_invalidDialogControlId;
    libUEDC_gv_loadedArsenals = UnitGroupEmpty();
    libUEDC_gv_loadedHeavyTowers = UnitGroupEmpty();
    libUEDC_gv_loadedInfusionTowers = UnitGroupEmpty();
    libUEDC_gv_loadedMissileTowers = UnitGroupEmpty();
    libUEDC_gv_loadedSuppressionTowers = UnitGroupEmpty();
    libUEDC_gv_fallenTroopers = UnitGroupEmpty();
}

// Presets
// Functions
void libUEDC_gf_Randomsoundonpoint (string lp_sound1, string lp_sound2, string lp_sound3, string lp_sound4, string lp_sound5, string lp_sound6, string lp_sound7, string lp_sound8, string lp_sound9, string lp_sound10, int lp_d09AD0BED0BBD0B8D187D0B5D181D182D0B2D0BED0B7D0B2D183D0BAD0BED0B2, fixed lp_volume, int lp_d0B2D18BD181D0BED182D0B0, playergroup lp_playsoundfor, point lp_point) {
    // Variable Declarations
    int lv_d0B2D18BD0B1D180D0B0D0BDD0BDD18BD0B9D0B7D0B2D183D0BA;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_d0B2D18BD0B1D180D0B0D0BDD0BDD18BD0B9D0B7D0B2D183D0BA = 1;

    // Implementation
    lv_d0B2D18BD0B1D180D0B0D0BDD0BDD18BD0B9D0B7D0B2D183D0BA = RandomInt(1, lp_d09AD0BED0BBD0B8D187D0B5D181D182D0B2D0BED0B7D0B2D183D0BAD0BED0B2);
    if ((lv_d0B2D18BD0B1D180D0B0D0BDD0BDD18BD0B9D0B7D0B2D183D0BA == 1)) {
        SoundPlayAtPointForPlayer(SoundLink(lp_sound1, c_soundIndexAny), c_maxPlayers, lp_playsoundfor, lp_point, lp_d0B2D18BD181D0BED182D0B0, lp_volume, 0.0);
    }
    else {
        if ((lv_d0B2D18BD0B1D180D0B0D0BDD0BDD18BD0B9D0B7D0B2D183D0BA == 2)) {
            SoundPlayAtPointForPlayer(SoundLink(lp_sound2, c_soundIndexAny), c_maxPlayers, lp_playsoundfor, lp_point, lp_d0B2D18BD181D0BED182D0B0, lp_volume, 0.0);
        }
        else {
            if ((lv_d0B2D18BD0B1D180D0B0D0BDD0BDD18BD0B9D0B7D0B2D183D0BA == 3)) {
                SoundPlayAtPointForPlayer(SoundLink(lp_sound3, c_soundIndexAny), c_maxPlayers, lp_playsoundfor, lp_point, lp_d0B2D18BD181D0BED182D0B0, lp_volume, 0.0);
            }
            else {
                if ((lv_d0B2D18BD0B1D180D0B0D0BDD0BDD18BD0B9D0B7D0B2D183D0BA == 4)) {
                    SoundPlayAtPointForPlayer(SoundLink(lp_sound4, c_soundIndexAny), c_maxPlayers, lp_playsoundfor, lp_point, lp_d0B2D18BD181D0BED182D0B0, lp_volume, 0.0);
                }
                else {
                    if ((lv_d0B2D18BD0B1D180D0B0D0BDD0BDD18BD0B9D0B7D0B2D183D0BA == 5)) {
                        SoundPlayAtPointForPlayer(SoundLink(lp_sound5, c_soundIndexAny), c_maxPlayers, lp_playsoundfor, lp_point, lp_d0B2D18BD181D0BED182D0B0, lp_volume, 0.0);
                    }
                    else {
                        if ((lv_d0B2D18BD0B1D180D0B0D0BDD0BDD18BD0B9D0B7D0B2D183D0BA == 6)) {
                            SoundPlayAtPointForPlayer(SoundLink(lp_sound6, c_soundIndexAny), c_maxPlayers, lp_playsoundfor, lp_point, lp_d0B2D18BD181D0BED182D0B0, lp_volume, 0.0);
                        }
                        else {
                            if ((lv_d0B2D18BD0B1D180D0B0D0BDD0BDD18BD0B9D0B7D0B2D183D0BA == 7)) {
                                SoundPlayAtPointForPlayer(SoundLink(lp_sound7, c_soundIndexAny), c_maxPlayers, lp_playsoundfor, lp_point, lp_d0B2D18BD181D0BED182D0B0, lp_volume, 0.0);
                            }
                            else {
                                if ((lv_d0B2D18BD0B1D180D0B0D0BDD0BDD18BD0B9D0B7D0B2D183D0BA == 8)) {
                                    SoundPlayAtPointForPlayer(SoundLink(lp_sound8, c_soundIndexAny), c_maxPlayers, lp_playsoundfor, lp_point, lp_d0B2D18BD181D0BED182D0B0, lp_volume, 0.0);
                                }
                                else {
                                    if ((lv_d0B2D18BD0B1D180D0B0D0BDD0BDD18BD0B9D0B7D0B2D183D0BA == 9)) {
                                        SoundPlayAtPointForPlayer(SoundLink(lp_sound9, c_soundIndexAny), c_maxPlayers, lp_playsoundfor, lp_point, lp_d0B2D18BD181D0BED182D0B0, lp_volume, 0.0);
                                    }
                                    else {
                                        if ((lv_d0B2D18BD0B1D180D0B0D0BDD0BDD18BD0B9D0B7D0B2D183D0BA == 10)) {
                                            SoundPlayAtPointForPlayer(SoundLink(lp_sound10, c_soundIndexAny), c_maxPlayers, lp_playsoundfor, lp_point, lp_d0B2D18BD181D0BED182D0B0, lp_volume, 0.0);
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

void libUEDC_gf_UEDDebugMessageForPlayer (playergroup lp_forplayer, text lp_message) {
    // Automatic Variable Declarations
    // Implementation
    if ((libUEDC_gv_debugmodeonoroff == true)) {
        UIDisplayMessage(lp_forplayer, c_messageAreaSubtitle, lp_message);
    }

}

bool libUEDC_gf_UnitisStructure (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((ValidatorExecute("IsStructure", lp_unit, lp_unit) == 0)) {
        return true;
    }
    else {
        return false;
    }
}

bool libUEDC_gf_UnitisMainStructure (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "Nexus") || (UnitGetType(lp_unit) == "Hatchery") || (UnitGetType(lp_unit) == "Lair") || (UnitGetType(lp_unit) == "Hive") || (UnitGetType(lp_unit) == "CommandCenter") || (UnitGetType(lp_unit) == "CommandCenterFlying") || (UnitGetType(lp_unit) == "OrbitalCommand") || (UnitGetType(lp_unit) == "OrbitalCommandFlying") || (UnitGetType(lp_unit) == "PlanetaryFortress") || (UnitGetType(lp_unit) == "OperationHeadquarters"))) {
        return true;
    }
    else {
        return false;
    }
}

bool libUEDC_gf_UnitisSmall (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "StrikeTrooper") || (UnitGetType(lp_unit) == "Salvager") || (UnitGetType(lp_unit) == "BeaconUED") || (UnitGetType(lp_unit) == "CrimsonEye") || (UnitGetType(lp_unit) == "Garmr") || (UnitGetType(lp_unit) == "Lazarus") || (UnitGetType(lp_unit) == "PoliticalAdvisor") || (UnitGetType(lp_unit) == "Taranis") || (UnitGetType(lp_unit) == "Adept") || (UnitGetType(lp_unit) == "DarkTemplar") || (UnitGetType(lp_unit) == "HighTemplar") || (UnitGetType(lp_unit) == "Observer") || (UnitGetType(lp_unit) == "ObserverSiegeMode") || (UnitGetType(lp_unit) == "Probe") || (UnitGetType(lp_unit) == "Sentry") || (UnitGetType(lp_unit) == "Zealot") || (UnitGetType(lp_unit) == "SCV") || (UnitGetType(lp_unit) == "Reaper") || (UnitGetType(lp_unit) == "Marine") || (UnitGetType(lp_unit) == "Marauder") || (UnitGetType(lp_unit) == "Hellion") || (UnitGetType(lp_unit) == "Zergling") || (UnitGetType(lp_unit) == "Roach") || (UnitGetType(lp_unit) == "Mutalisk") || (UnitGetType(lp_unit) == "Hydralisk") || (UnitGetType(lp_unit) == "Drone") || (UnitGetType(lp_unit) == "Baneling"))) {
        return true;
    }
    else {
        return false;
    }
}

bool libUEDC_gf_Structureismedium (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "MilitaryResearchStation") || (UnitGetType(lp_unit) == "MunitionsFactory") || (UnitGetType(lp_unit) == "StarshipMaintenancePlant") || (UnitGetType(lp_unit) == "TachyonRelay") || (UnitGetType(lp_unit) == "TacticsAcademy") || (UnitGetType(lp_unit) == "VespenePurificationPlant"))) {
        return true;
    }
    else {
        return false;
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Initialize UED Race
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_InitializeUEDRace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto4E1CD846_g;
    int auto4E1CD846_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto4E1CD846_g = PlayerGroupAll();
    auto4E1CD846_var = -1;
    while (true) {
        auto4E1CD846_var = PlayerGroupNextPlayer(auto4E1CD846_g, auto4E1CD846_var);
        if (auto4E1CD846_var < 0) { break; }
        if ((PlayerRace(auto4E1CD846_var) == "UED")) {
            PlayerSetCommander(auto4E1CD846_var, "UED");
            PlayerSetSpray(auto4E1CD846_var, 1, "Decal_Spray_0059_01");
            SoundChannelDSPInsert(PlayerGroupSingle(auto4E1CD846_var), c_soundCategoryVoice, "ReverbForest");
            SoundChannelDSPInsert(PlayerGroupSingle(auto4E1CD846_var), c_soundCategoryReady, "ReverbForest");
            SoundChannelDSPInsert(PlayerGroupSingle(auto4E1CD846_var), c_soundCategoryAlert, "ReverbForest");
            libNtve_gf_SetUpgradeLevelForPlayer(auto4E1CD846_var, "UEDAdvisorUpgradeBecauseEditorIsFunctionalHelp", 1);
            PlayerGroupAdd(libUEDC_gv_uEDPlayers, auto4E1CD846_var);
        }

    }
    TriggerExecute(libUEDC_gt_InitBeaconsButton, true, false);
    TriggerEnable(libUEDC_gt_EffectSpawnunit, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_InitializeUEDRace_Init () {
    libUEDC_gt_InitializeUEDRace = TriggerCreate("libUEDC_gt_InitializeUEDRace_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect -  Infusion Tower
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_EffectInfusionTower_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetunit;
    actor lv_healModel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetunit = EventUnit();
    if ((libUEDC_gf_UnitisStructure(lv_targetunit) == false)) {
        if (libUEDC_gf_UnitisSmall(lv_targetunit)) {
            libNtve_gf_AttachModelToUnit(lv_targetunit, "InfusionTowerHealModelSmallUnits", "Ref_Center");
            lv_healModel = libNtve_gf_ActorLastCreated();
        }
        else {
            libNtve_gf_AttachModelToUnit(lv_targetunit, "InfusionTowerHealModel", "Ref_Center");
            lv_healModel = libNtve_gf_ActorLastCreated();
        }
    }
    else {
        if ((libUEDC_gf_UnitisStructure(lv_targetunit) == true)) {
            if (libUEDC_gf_Structureismedium(lv_targetunit)) {
                libNtve_gf_AttachModelToUnit(lv_targetunit, "InfusionTowerHealModelMediumStructure", "Ref_StatusBar");
                lv_healModel = libNtve_gf_ActorLastCreated();
            }
            else {
                if (libUEDC_gf_UnitisMainStructure(lv_targetunit)) {
                    libNtve_gf_AttachModelToUnit(lv_targetunit, "InfusionTowerHealModelMainStructure", "Ref_StatusBar");
                    lv_healModel = libNtve_gf_ActorLastCreated();
                }
                else {
                    libNtve_gf_AttachModelToUnit(lv_targetunit, "InfusionTowerHealModelStructure", "Ref_Center");
                    lv_healModel = libNtve_gf_ActorLastCreated();
                }
            }
        }

    }
    while (!(((UnitIsAlive(lv_targetunit) == false) || (UnitHasBehavior2(EventUnit(), "BeathaniumInfusionField") == false)))) {
        Wait(0.065, c_timeGame);
    }
    libNtve_gf_KillModel(lv_healModel);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_EffectInfusionTower_Init () {
    libUEDC_gt_EffectInfusionTower = TriggerCreate("libUEDC_gt_EffectInfusionTower_Func");
    TriggerAddEventUnitBehaviorChange(libUEDC_gt_EffectInfusionTower, null, "BeathaniumInfusionField", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sound Effect - for heal every 1 sec
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_SoundEffectforhealevery1sec_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto09081E4C_g;
    int auto09081E4C_u;
    unit auto09081E4C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto09081E4C_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto09081E4C_u = UnitGroupCount(auto09081E4C_g, c_unitCountAll);
    for (;; auto09081E4C_u -= 1) {
        auto09081E4C_var = UnitGroupUnitFromEnd(auto09081E4C_g, auto09081E4C_u);
        if (auto09081E4C_var == null) { break; }
        if ((UnitHasBehavior2(auto09081E4C_var, "BeathaniumInfusionField") == true) && (UnitIsAlive(auto09081E4C_var) == true) && (UnitGetType(auto09081E4C_var) != "Arsenal") && (UnitGetType(auto09081E4C_var) != "EnrichmentTower") && (UnitGetType(auto09081E4C_var) != "FieldBureau") && (UnitGetType(auto09081E4C_var) != "HeavyTower") && (UnitGetType(auto09081E4C_var) != "InfusionTower") && (UnitGetType(auto09081E4C_var) != "MilitaryResearchStation") && (UnitGetType(auto09081E4C_var) != "MissileTower") && (UnitGetType(auto09081E4C_var) != "MunitionsFactory") && (UnitGetType(auto09081E4C_var) != "OperationHeadquarters") && (UnitGetType(auto09081E4C_var) != "StarshipMaintenancePlant") && (UnitGetType(auto09081E4C_var) != "SuppressionTower") && (UnitGetType(auto09081E4C_var) != "TachyonRelay") && (UnitGetType(auto09081E4C_var) != "TacticsAcademy") && (UnitGetType(auto09081E4C_var) != "TeleportationNode") && (UnitGetType(auto09081E4C_var) != "VespenePurificationPlant")) {
            SoundPlayAtPointForPlayer(SoundLink("UED_Heal", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(auto09081E4C_var), 12.0, 17.5, 0.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_SoundEffectforhealevery1sec_Init () {
    libUEDC_gt_SoundEffectforhealevery1sec = TriggerCreate("libUEDC_gt_SoundEffectforhealevery1sec_Func");
    TriggerAddEventTimePeriodic(libUEDC_gt_SoundEffectforhealevery1sec, 0.91, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sound Effect - for heal on for any
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_SoundEffectforhealonforany_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayAtPointForPlayer(SoundLink("UnitentertohealzoneUED", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnit()), 12.0, 24.0, 0.0);
    Wait(0.25, c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_SoundEffectforhealonforany_Init () {
    libUEDC_gt_SoundEffectforhealonforany = TriggerCreate("libUEDC_gt_SoundEffectforhealonforany_Func");
    TriggerAddEventUnitBehaviorChange(libUEDC_gt_SoundEffectforhealonforany, null, "BeathaniumInfusionField", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sound Effect - for heal off for any
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_SoundEffectforhealoffforany_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayAtPointForPlayer(SoundLink("UnitescapefromhealzoneUED", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnit()), 12.0, 25.0, 0.0);
    Wait(0.25, c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_SoundEffectforhealoffforany_Init () {
    libUEDC_gt_SoundEffectforhealoffforany = TriggerCreate("libUEDC_gt_SoundEffectforhealoffforany_Func");
    TriggerAddEventUnitBehaviorChange(libUEDC_gt_SoundEffectforhealoffforany, null, "BeathaniumInfusionField", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect -  Salvager Mine
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_EffectSalvagerMine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_salvager;
    actor lv_beamModel1;
    actor lv_beamModel2;
    actor lv_launchModel;
    actor lv_pickupMineralCrystalGlowModel;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Salvager"))) {
            return false;
        }

        if (!(((UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "BattleStationMineralField") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "BattleStationMineralField750") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "LabMineralField750") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "LabMineralField") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "MineralField") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "MineralField450") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "MineralField750") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "MineralFieldOpaque900") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "MineralFieldOpaque") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "PurifierMineralField") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "PurifierMineralField750") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "PurifierRichMineralField") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "PurifierRichMineralField750") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "RichMineralField") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "RichMineralField750")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_salvager = EventUnit();
    TimerStart(lv_timer, 3.0, false, c_timeGame);
    lv_timer = TimerLastStarted();
    libNtve_gf_AttachModelToUnit(lv_salvager, "SalvagerMineBeam", "Ref_Weapon");
    lv_beamModel1 = libNtve_gf_ActorLastCreated();
    libNtve_gf_AttachModelToUnit(OrderGetTargetUnit(UnitOrder(lv_salvager, 0)), "PickupMineralCrystalGlow", "Ref_Weapon");
    lv_pickupMineralCrystalGlowModel = libNtve_gf_ActorLastCreated();
    Wait(0.35, c_timeGame);
    libNtve_gf_AttachModelToUnit(lv_salvager, "SalvagerMineBeam", "Ref_Weapon");
    lv_beamModel2 = libNtve_gf_ActorLastCreated();
    libNtve_gf_AttachModelToUnit(lv_salvager, "SalvagerMineLaunch", "Ref_Weapon");
    lv_launchModel = libNtve_gf_ActorLastCreated();
    while (!(((TimerGetRemaining(lv_timer) == 0.0) || (UnitIsAlive(lv_salvager) == false) || (UnitOrderHasAbil(lv_salvager, "SalvagerHarvest") == false)))) {
        Wait(0.065, c_timeGame);
    }
    Wait(0.065, c_timeGame);
    libNtve_gf_KillModel(lv_pickupMineralCrystalGlowModel);
    libNtve_gf_KillModel(lv_launchModel);
    libNtve_gf_KillModel(lv_beamModel1);
    libNtve_gf_KillModel(lv_beamModel2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_EffectSalvagerMine_Init () {
    libUEDC_gt_EffectSalvagerMine = TriggerCreate("libUEDC_gt_EffectSalvagerMine_Func");
    TriggerAddEventUnitAbility(libUEDC_gt_EffectSalvagerMine, null, AbilityCommand("SalvagerHarvest", 0), c_abilHarvestStageHarvest, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Teleportation node
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_EffectTeleportationnode_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_model;
    unit lv_teleportationNode;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(libUEDC_gv_teleportationNodeD09AD0BED182D0BED180D18BD0B5D181D182D180D0BED18FD182, EventUnit()) == false)) {
        libUEDC_gf_Randomsoundonpoint("TeleportationNodeTrainLoopA", "TeleportationNodeTrainLoopB", null, null, null, null, null, null, null, null, 2, 40.0, 12, PlayerGroupAll(), UnitGetPosition(EventUnit()));
        UnitGroupAdd(libUEDC_gv_teleportationNodeD09AD0BED182D0BED180D18BD0B5D181D182D180D0BED18FD182, EventUnit());
        lv_teleportationNode = EventUnit();
        libNtve_gf_AttachModelToUnit(lv_teleportationNode, "UEDTeleportationNodeBuildEffect", "Ref_Target");
        lv_model = libNtve_gf_ActorLastCreated();
        while (!((libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(EventUnit(), 1, 1) == ""))) {
            Wait(0.065, c_timeGame);
        }
        UnitGroupRemove(libUEDC_gv_teleportationNodeD09AD0BED182D0BED180D18BD0B5D181D182D180D0BED18FD182, lv_teleportationNode);
        SoundStop(SoundLastPlayed(), true);
        libNtve_gf_KillModel(lv_model);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_EffectTeleportationnode_Init () {
    libUEDC_gt_EffectTeleportationnode = TriggerCreate("libUEDC_gt_EffectTeleportationnode_Func");
    TriggerAddEventUnitAbility(libUEDC_gt_EffectTeleportationnode, null, AbilityCommand("TeleportationNodeTrain", 6), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libUEDC_gt_EffectTeleportationnode, null, AbilityCommand("TeleportationNodeTrain", 1), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libUEDC_gt_EffectTeleportationnode, null, AbilityCommand("TeleportationNodeTrain", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libUEDC_gt_EffectTeleportationnode, null, AbilityCommand("TeleportationNodeTrain", 15), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libUEDC_gt_EffectTeleportationnode, null, AbilityCommand("TeleportationNodeTrain", 2), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libUEDC_gt_EffectTeleportationnode, null, AbilityCommand("TeleportationNodeTrain", 5), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libUEDC_gt_EffectTeleportationnode, null, AbilityCommand("TeleportationNodeTrain", 7), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libUEDC_gt_EffectTeleportationnode, null, AbilityCommand("TeleportationNodeTrain", 9), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libUEDC_gt_EffectTeleportationnode, null, AbilityCommand("TeleportationNodeTrain", 3), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libUEDC_gt_EffectTeleportationnode, null, AbilityCommand("TeleportationNodeTrain", 11), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libUEDC_gt_EffectTeleportationnode, null, AbilityCommand("TeleportationNodeTrain", 4), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libUEDC_gt_EffectTeleportationnode, null, AbilityCommand("TeleportationNodeTrain", 10), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libUEDC_gt_EffectTeleportationnode, null, AbilityCommand("TeleportationNodeTrain", 13), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libUEDC_gt_EffectTeleportationnode, null, AbilityCommand("TeleportationNodeTrain", 14), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libUEDC_gt_EffectTeleportationnode, null, AbilityCommand("TeleportationNodeTrain", 12), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libUEDC_gt_EffectTeleportationnode, null, AbilityCommand("TeleportationNodeTrain", 8), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libUEDC_gt_EffectTeleportationnode, null, AbilityCommand("TeleportationNodeTrain", 16), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libUEDC_gt_EffectTeleportationnode, null, AbilityCommand("TeleportationNodeTrain", 17), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect -  Spawn unit
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_EffectSpawnunit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerRace(EventPlayer()) == "UED"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnit()) == "Garmr") || (UnitGetType(EventUnit()) == "StrikeTrooper") || (UnitGetType(EventUnit()) == "Taranis") || (UnitGetType(EventUnit()) == "Lazarus") || (UnitGetType(EventUnit()) == "PoliticalAdvisor") || (UnitGetType(EventUnit()) == "CrimsonEye") || (UnitGetType(EventUnit()) == "Huracan") || (UnitGetType(EventUnit()) == "BeaconUED"))) {
        libNtve_gf_AttachModelToUnit(EventUnit(), "UEDUnitCreatedEffectSmall", "Ref_Center");
        libUEDC_gf_Randomsoundonpoint("unitcompleteUED", "TeleportationNodeUnitSpawnSound", "unitcompleteUED", null, null, null, null, null, null, null, 3, 80.0, 12, PlayerGroupAll(), UnitGetPosition(EventUnit()));
        UnitBehaviorAdd(EventUnit(), "GlazeTeleportationEffect", EventUnit(), 1);
        UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsMax, 25.0);
        UnitSetPropertyFixed(EventUnit(), c_unitPropShields, 25.0);
        Wait(1.5, c_timeGame);
        UnitBehaviorRemove(EventUnit(), "GlazeTeleportationEffect", 1);
        libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
        UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsMax, 0.0);
        UnitSetPropertyFixed(EventUnit(), c_unitPropShields, 0.0);
        return true;
    }
    else {
        if (((UnitGetType(EventUnit()) == "Strikefighter") || (UnitGetType(EventUnit()) == "Napoleon") || (UnitGetType(EventUnit()) == "Typhoon") || (UnitGetType(EventUnit()) == "CitadelAAT") || (UnitGetType(EventUnit()) == "PeenemundeMRLS") || (UnitGetType(EventUnit()) == "Valkyrie") || (UnitGetType(EventUnit()) == "TransportShuttle") || (UnitGetType(EventUnit()) == "DrakkarAPC"))) {
            libNtve_gf_AttachModelToUnit(EventUnit(), "UEDUnitCreatedEffectMedium", "Ref_Center");
            libUEDC_gf_Randomsoundonpoint("unitcompleteUED", "TeleportationNodeUnitSpawnSound", "unitcompleteUED", null, null, null, null, null, null, null, 3, 80.0, 12, PlayerGroupAll(), UnitGetPosition(EventUnit()));
            UnitBehaviorAdd(EventUnit(), "GlazeTeleportationEffect", EventUnit(), 1);
            UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsMax, 25.0);
            UnitSetPropertyFixed(EventUnit(), c_unitPropShields, 25.0);
            Wait(1.5, c_timeGame);
            UnitBehaviorRemove(EventUnit(), "GlazeTeleportationEffect", 1);
            libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
            UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsMax, 0.0);
            UnitSetPropertyFixed(EventUnit(), c_unitPropShields, 0.0);
            return true;
        }
        else {
            if (((UnitGetType(EventUnit()) == "HonorguardCruiser"))) {
                libNtve_gf_AttachModelToUnit(EventUnit(), "UEDUnitCreatedEffectLarge", "Ref_Center");
                libUEDC_gf_Randomsoundonpoint("unitcompleteUED", "TeleportationNodeUnitSpawnSound", "unitcompleteUED", null, null, null, null, null, null, null, 3, 80.0, 12, PlayerGroupAll(), UnitGetPosition(EventUnit()));
                UnitBehaviorAdd(EventUnit(), "GlazeTeleportationEffect", EventUnit(), 1);
                UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsMax, 25.0);
                UnitSetPropertyFixed(EventUnit(), c_unitPropShields, 25.0);
                Wait(1.5, c_timeGame);
                UnitBehaviorRemove(EventUnit(), "GlazeTeleportationEffect", 1);
                libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
                UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsMax, 0.0);
                UnitSetPropertyFixed(EventUnit(), c_unitPropShields, 0.0);
                return true;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_EffectSpawnunit_Init () {
    libUEDC_gt_EffectSpawnunit = TriggerCreate("libUEDC_gt_EffectSpawnunit_Func");
    TriggerEnable(libUEDC_gt_EffectSpawnunit, false);
    TriggerAddEventUnitRegion(libUEDC_gt_EffectSpawnunit, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon anim create
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_Beaconanimcreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_beaconConstAnim;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "BeaconUED"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libUEDC_gv_beaconConstructionunitgroup, EventUnitProgressUnit());
    libNtve_gf_AttachModelToUnit(EventUnitProgressUnit(), "UEDCalldownWithBeacon", "Ref_Center");
    lv_beaconConstAnim = libNtve_gf_ActorLastCreated();
    libNtve_gf_PlayAnimation(lv_beaconConstAnim, c_animNameDefault, "Stand Work Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(4.995, c_timeGame);
    libNtve_gf_PlayAnimation(lv_beaconConstAnim, c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    while (!((libNtve_gf_UnitIsUnderConstruction(EventUnitProgressUnit()) == false))) {
        Wait(0.065, c_timeGame);
    }
    libNtve_gf_KillModel(lv_beaconConstAnim);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_Beaconanimcreate_Init () {
    libUEDC_gt_Beaconanimcreate = TriggerCreate("libUEDC_gt_Beaconanimcreate_Func");
    TriggerAddEventUnitConstructProgress(libUEDC_gt_Beaconanimcreate, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Owards - effect for targetting units
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_Owardseffectfortargettingunits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayAtPointForPlayer(SoundLink("Aiur_PowerPoint_Loop", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnit()), 12.0, 120.0, 0.0);
    do {
        UnitBehaviorAdd(EventUnit(), "GlazeLazarusDeviceEffect", EventUnit(), 1);
        Wait(2.0, c_timeGame);
        UnitBehaviorRemove(EventUnit(), "GlazeLazarusDeviceEffect", 1);
    }while ((UnitHasBehavior2(EventUnit(), "OnwardComrades") == true));
    SoundStop(SoundLastPlayed(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_Owardseffectfortargettingunits_Init () {
    libUEDC_gt_Owardseffectfortargettingunits = TriggerCreate("libUEDC_gt_Owardseffectfortargettingunits_Func");
    TriggerAddEventUnitBehaviorChange(libUEDC_gt_Owardseffectfortargettingunits, null, "OnwardComrades", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Owards - effect for Political Advisor
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_OwardseffectforPoliticalAdvisor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayAtPointForPlayer(SoundLink("Protoss_PowerUpLarge", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnit()), 12.0, 120.0, 0.0);
    libNtve_gf_AttachModelToUnit(EventUnit(), "PoliticalAdvisorOweransWave", "Ref_Center");
    Wait(2.0, c_timeGame);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_OwardseffectforPoliticalAdvisor_Init () {
    libUEDC_gt_OwardseffectforPoliticalAdvisor = TriggerCreate("libUEDC_gt_OwardseffectforPoliticalAdvisor_Func");
    TriggerAddEventUnitAbility(libUEDC_gt_OwardseffectforPoliticalAdvisor, null, AbilityCommand("OnwardComrades", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Calculate Beacons
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_CalculateBeacons_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto254691C0_g;
    int auto254691C0_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto254691C0_g = libUEDC_gv_uEDPlayers;
    auto254691C0_var = -1;
    while (true) {
        auto254691C0_var = PlayerGroupNextPlayer(auto254691C0_g, auto254691C0_var);
        if (auto254691C0_var < 0) { break; }
        libUEDC_gv_beacons[auto254691C0_var] = UnitGroup("BeaconUED", auto254691C0_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        libNtve_gf_SetDialogItemText(libUEDC_gv_beaconsButtonCountLabel, IntToText(UnitGroupCount(libUEDC_gv_beacons[auto254691C0_var], c_unitCountAlive)), PlayerGroupSingle(auto254691C0_var));
        if ((UnitGroupCount(libUEDC_gv_beacons[auto254691C0_var], c_unitCountAlive) == 0)) {
            DialogControlSetEnabled(libUEDC_gv_beaconsButton, PlayerGroupSingle(auto254691C0_var), false);
        }
        else {
            DialogControlSetEnabled(libUEDC_gv_beaconsButton, PlayerGroupSingle(auto254691C0_var), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_CalculateBeacons_Init () {
    libUEDC_gt_CalculateBeacons = TriggerCreate("libUEDC_gt_CalculateBeacons_Func");
    TriggerEnable(libUEDC_gt_CalculateBeacons, false);
    TriggerAddEventTimePeriodic(libUEDC_gt_CalculateBeacons, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Beacons Button
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_InitBeaconsButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_icon;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_icon = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/ArmyButton2");
    libUEDC_gv_beaconsButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ConsoleUIContainer/ArmyButton2/Icon");
    lv_icon = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(libUEDC_gv_beaconsButton, StringExternal("Param/Value/lib_UEDC_71F49E44"), PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ConsoleUIContainer/ArmyButton2/CountLabel");
    libNtve_gf_SetDialogItemImage(lv_icon, "Assets/Textures/ui_idlewarpgate_normalpressed_UED.dds", PlayerGroupAll());
    libUEDC_gv_beaconsButtonCountLabel = DialogControlLastCreated();
    DialogControlSetVisible(libUEDC_gv_beaconsButton, libUEDC_gv_uEDPlayers, true);
    TriggerEnable(libUEDC_gt_CalculateBeacons, true);
    TriggerEnable(libUEDC_gt_BeaconsButtonUsed, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_InitBeaconsButton_Init () {
    libUEDC_gt_InitBeaconsButton = TriggerCreate("libUEDC_gt_InitBeaconsButton_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacons Button Used
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_BeaconsButtonUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libUEDC_gv_beaconsButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupSelect(UnitGroupSelected(EventPlayer()), EventPlayer(), false);
    UnitGroupSelect(libUEDC_gv_beacons[EventPlayer()], EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_BeaconsButtonUsed_Init () {
    libUEDC_gt_BeaconsButtonUsed = TriggerCreate("libUEDC_gt_BeaconsButtonUsed_Func");
    TriggerEnable(libUEDC_gt_BeaconsButtonUsed, false);
    TriggerAddEventDialogControl(libUEDC_gt_BeaconsButtonUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeHotkeyPressed);
    TriggerAddEventDialogControl(libUEDC_gt_BeaconsButtonUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hide button default Drop TS
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_HidebuttondefaultDropTS_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_attachModelArsenal;
    unit lv_transportShuttle;
    bool lv_d092D18BD0BFD0BED0BBD0BDD0B8D0BBD0BED181D18C;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TransportShuttle"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitCargo()) == "Arsenal")) {
        lv_transportShuttle = EventUnit();
        lv_d092D18BD0BFD0BED0BBD0BDD0B8D0BBD0BED181D18C = true;
        UnitAbilityShow(lv_transportShuttle, "DropArsenal", true);
        UnitAbilityShow(lv_transportShuttle, "MedivacTransport2", false);
        UnitGroupAdd(libUEDC_gv_loadedArsenals, EventUnitCargo());
        SoundPlayAtPoint(SoundLink("Medivac_Load", 0), PlayerGroupAll(), UnitGetPosition(lv_transportShuttle), 12.0, 100.0, 0.0);
    }
    else {
        if ((UnitGetType(EventUnitCargo()) == "HeavyTower")) {
            lv_transportShuttle = EventUnit();
            lv_d092D18BD0BFD0BED0BBD0BDD0B8D0BBD0BED181D18C = true;
            UnitAbilityShow(lv_transportShuttle, "DropHeavyTower", true);
            UnitAbilityShow(lv_transportShuttle, "MedivacTransport2", false);
            UnitGroupAdd(libUEDC_gv_loadedHeavyTowers, EventUnitCargo());
            SoundPlayAtPoint(SoundLink("Medivac_Load", 0), PlayerGroupAll(), UnitGetPosition(lv_transportShuttle), 12.0, 100.0, 0.0);
        }
        else {
            if ((UnitGetType(EventUnitCargo()) == "InfusionTower")) {
                lv_transportShuttle = EventUnit();
                lv_d092D18BD0BFD0BED0BBD0BDD0B8D0BBD0BED181D18C = true;
                UnitAbilityShow(lv_transportShuttle, "DropInfusionTower", true);
                UnitAbilityShow(lv_transportShuttle, "MedivacTransport2", false);
                UnitGroupAdd(libUEDC_gv_loadedInfusionTowers, EventUnitCargo());
                SoundPlayAtPoint(SoundLink("Medivac_Load", 0), PlayerGroupAll(), UnitGetPosition(lv_transportShuttle), 12.0, 100.0, 0.0);
            }
            else {
                if ((UnitGetType(EventUnitCargo()) == "MissileTower")) {
                    lv_transportShuttle = EventUnit();
                    lv_d092D18BD0BFD0BED0BBD0BDD0B8D0BBD0BED181D18C = true;
                    UnitAbilityShow(lv_transportShuttle, "DropMissleTower", true);
                    UnitAbilityShow(lv_transportShuttle, "MedivacTransport2", false);
                    UnitGroupAdd(libUEDC_gv_loadedMissileTowers, EventUnitCargo());
                    SoundPlayAtPoint(SoundLink("Medivac_Load", 0), PlayerGroupAll(), UnitGetPosition(lv_transportShuttle), 12.0, 100.0, 0.0);
                }
                else {
                    if ((UnitGetType(EventUnitCargo()) == "SuppressionTower")) {
                        lv_transportShuttle = EventUnit();
                        lv_d092D18BD0BFD0BED0BBD0BDD0B8D0BBD0BED181D18C = true;
                        UnitAbilityShow(lv_transportShuttle, "DropSuppressionTower", true);
                        UnitAbilityShow(lv_transportShuttle, "MedivacTransport2", false);
                        UnitGroupAdd(libUEDC_gv_loadedSuppressionTowers, EventUnitCargo());
                        SoundPlayAtPoint(SoundLink("Medivac_Load", 0), PlayerGroupAll(), UnitGetPosition(lv_transportShuttle), 12.0, 100.0, 0.0);
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_HidebuttondefaultDropTS_Init () {
    libUEDC_gt_HidebuttondefaultDropTS = TriggerCreate("libUEDC_gt_HidebuttondefaultDropTS_Func");
    TriggerAddEventUnitCargo(libUEDC_gt_HidebuttondefaultDropTS, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hide button arsenal Drop TS
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_HidebuttonarsenalDropTS_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_transportShuttle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitCargo()) == "Arsenal")) {
        UnitAbilityShow(EventUnit(), "MedivacTransport2", true);
        UnitAbilityShow(EventUnit(), "DropArsenal", false);
        UnitGroupRemove(libUEDC_gv_loadedArsenals, EventUnitCargo());
        SoundPlayAtPoint(SoundLink("Medivac_Unload", 0), PlayerGroupAll(), UnitGetPosition(EventUnitCargo()), 12.0, 300.0, 0.0);
        return true;
    }
    else {
        if ((UnitGetType(EventUnitCargo()) == "HeavyTower")) {
            UnitAbilityShow(EventUnit(), "MedivacTransport2", true);
            UnitAbilityShow(EventUnit(), "DropHeavyTower", false);
            UnitGroupRemove(libUEDC_gv_loadedHeavyTowers, EventUnitCargo());
            SoundPlayAtPoint(SoundLink("Medivac_Unload", 0), PlayerGroupAll(), UnitGetPosition(EventUnitCargo()), 12.0, 300.0, 0.0);
            return true;
        }
        else {
            if ((UnitGetType(EventUnitCargo()) == "InfusionTower")) {
                UnitAbilityShow(EventUnit(), "MedivacTransport2", true);
                UnitAbilityShow(EventUnit(), "DropInfusionTower", false);
                UnitGroupRemove(libUEDC_gv_loadedInfusionTowers, EventUnitCargo());
                SoundPlayAtPoint(SoundLink("Medivac_Unload", 0), PlayerGroupAll(), UnitGetPosition(EventUnitCargo()), 12.0, 300.0, 0.0);
                return true;
            }
            else {
                if ((UnitGetType(EventUnitCargo()) == "MissileTower")) {
                    UnitAbilityShow(EventUnit(), "MedivacTransport2", true);
                    UnitAbilityShow(EventUnit(), "DropMissleTower", false);
                    UnitGroupRemove(libUEDC_gv_loadedMissileTowers, EventUnitCargo());
                    SoundPlayAtPoint(SoundLink("Medivac_Unload", 0), PlayerGroupAll(), UnitGetPosition(EventUnitCargo()), 12.0, 300.0, 0.0);
                    return true;
                }
                else {
                    if ((UnitGetType(EventUnitCargo()) == "SuppressionTower")) {
                        UnitAbilityShow(EventUnit(), "MedivacTransport2", true);
                        UnitAbilityShow(EventUnit(), "DropSuppressionTower", false);
                        UnitGroupRemove(libUEDC_gv_loadedSuppressionTowers, EventUnitCargo());
                        SoundPlayAtPoint(SoundLink("Medivac_Unload", 0), PlayerGroupAll(), UnitGetPosition(EventUnitCargo()), 12.0, 300.0, 0.0);
                        return true;
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_HidebuttonarsenalDropTS_Init () {
    libUEDC_gt_HidebuttonarsenalDropTS = TriggerCreate("libUEDC_gt_HidebuttonarsenalDropTS_Func");
    TriggerAddEventUnitCargo(libUEDC_gt_HidebuttonarsenalDropTS, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Order Arsenal Unload
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_OrderArsenalUnload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_placementmodel;
    unit lv_transportShuttle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_transportShuttle = EventUnit();
    UnitAbilityShow(lv_transportShuttle, "MedivacTransport2", true);
    UnitIssueOrder(lv_transportShuttle, OrderTargetingPoint(AbilityCommand("MedivacTransport2", 2), EventUnitTargetPoint()), c_orderQueueReplace);
    UnitAbilityShow(lv_transportShuttle, "MedivacTransport2", false);
    libNtve_gf_CreateModelAtPoint("ArsenalPlacement", EventUnitTargetPoint());
    lv_placementmodel = libNtve_gf_ActorLastCreated();
    while (!(((UnitIsAlive(EventUnit()) == false) || (UnitOrderHasAbil(lv_transportShuttle, "MedivacTransport2") == false)))) {
        Wait(0.065, c_timeGame);
    }
    libNtve_gf_KillModel(lv_placementmodel);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_OrderArsenalUnload_Init () {
    libUEDC_gt_OrderArsenalUnload = TriggerCreate("libUEDC_gt_OrderArsenalUnload_Func");
    TriggerAddEventUnitAbility(libUEDC_gt_OrderArsenalUnload, null, AbilityCommand("DropArsenal", 1), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libUEDC_gt_OrderArsenalUnload, null, AbilityCommand("DropHeavyTower", 1), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libUEDC_gt_OrderArsenalUnload, null, AbilityCommand("DropInfusionTower", 1), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libUEDC_gt_OrderArsenalUnload, null, AbilityCommand("DropMissleTower", 1), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libUEDC_gt_OrderArsenalUnload, null, AbilityCommand("DropSuppressionTower", 1), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Drop Arsenal Help Unit
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_RemoveDropArsenalHelpUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ArsenalHelpDrop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_RemoveDropArsenalHelpUnit_Init () {
    libUEDC_gt_RemoveDropArsenalHelpUnit = TriggerCreate("libUEDC_gt_RemoveDropArsenalHelpUnit_Func");
    TriggerAddEventUnitRegion(libUEDC_gt_RemoveDropArsenalHelpUnit, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prerape Transport shuttle
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_PrerapeTransportshuttle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TransportShuttle"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityShow(EventUnit(), "DropArsenal", false);
    UnitAbilityShow(EventUnit(), "DropHeavyTower", false);
    UnitAbilityShow(EventUnit(), "DropInfusionTower", false);
    UnitAbilityShow(EventUnit(), "DropMissleTower", false);
    UnitAbilityShow(EventUnit(), "DropSuppressionTower", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_PrerapeTransportshuttle_Init () {
    libUEDC_gt_PrerapeTransportshuttle = TriggerCreate("libUEDC_gt_PrerapeTransportshuttle_Func");
    TriggerAddEventUnitRegion(libUEDC_gt_PrerapeTransportshuttle, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: FallenTrooper - Effect
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_FallenTrooperEffect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    if ((UnitHasBehavior2(EventUnit(), "Incapacitated") == true) && (UnitIsAlive(EventUnit()) == true)) {
        UnitGroupAdd(libUEDC_gv_fallenTroopers, EventUnit());
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault, "Death", 0, c_animTimeDefault);
        UnitBehaviorAdd(EventUnit(), "GlazeTrooperDown", EventUnit(), 1);
        UnitBehaviorAdd(EventUnit(), "VisionBuffTrooperDown", EventUnit(), 1);
        SoundPlayAtPointForPlayer(SoundLink("Extractor_Mecha_Birth", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnit()), 12.0, 100.0, 0.0);
        UnitSetPropertyFixed(EventUnit(), c_unitPropLife, 1.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_FallenTrooperEffect_Init () {
    libUEDC_gt_FallenTrooperEffect = TriggerCreate("libUEDC_gt_FallenTrooperEffect_Func");
    TriggerAddEventUnitDamaged(libUEDC_gt_FallenTrooperEffect, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: FallenTrooper - Healing
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_FallenTrooperHealing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_shieldtimer;
    int lv_energyunit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_shieldtimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "Incapacitated") == true))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(libUEDC_gv_fallenTroopers, EventUnit());
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(EventUnit()), c_animNameDefault);
    UnitBehaviorRemove(EventUnit(), "GlazeTrooperDown", 1);
    UnitBehaviorRemove(EventUnit(), "Incapacitated", 1);
    UnitBehaviorRemove(EventUnit(), "IncapDie", 1);
    UnitBehaviorRemove(EventUnit(), "VisionBuffTrooperDown", 1);
    UnitBehaviorRemove(EventUnit(), "LazarusDeviceTarget", 1);
    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropNormal) != 0.0)) {
        lv_energyunit = UnitGetPropertyInt(EventUnit(), c_unitPropEnergyPercent, c_unitPropCurrent);
        lv_energyunit /= 2;
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, lv_energyunit);
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, 50.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 0.0);
    TimerStart(lv_shieldtimer, 7.0, false, c_timeGame);
    UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsMax, 25.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropShields, 25.0);
    UnitBehaviorAdd(EventUnit(), "GlazeTeleportationEffect", EventUnit(), 1);
    while (!(((TimerGetRemaining(lv_shieldtimer) == 0.0) || (UnitGetPropertyInt(EventUnit(), c_unitPropShields, c_unitPropCurrent) == 0) || (UnitIsAlive(EventUnit()) == false)))) {
        Wait(1.0, c_timeGame);
    }
    SoundPlayAtPointForPlayer(SoundLink("Protoss_ShieldDeath", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnit()), 12.0, 100.0, 0.0);
    UnitBehaviorRemove(EventUnit(), "GlazeTeleportationEffect", 1);
    UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsMax, 0.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropShields, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_FallenTrooperHealing_Init () {
    libUEDC_gt_FallenTrooperHealing = TriggerCreate("libUEDC_gt_FallenTrooperHealing_Func");
    TriggerAddEventUnitBehaviorChange(libUEDC_gt_FallenTrooperHealing, null, "LazarusDeviceTarget", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon Build
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_BeaconBuild_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_beacon;
    unit lv_oH;
    unit lv_dropPod;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_oH = EventUnit();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "BeaconUED", c_unitCreateIgnoreBirth, EventPlayer(), UnitGetPosition(lv_oH));
    lv_beacon = UnitLastCreated();
    libNtve_gf_ShowHideUnit(lv_beacon, false);
    libNtve_gf_PauseUnit(lv_beacon, true);
    Wait(0.5, c_timeGame);
    SoundPlayAtPoint(SoundLink("Ghost_DropPodImpact", 1), PlayerGroupAll(), UnitGetPosition(lv_beacon), 12.0, 100.0, 0.0);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "UEDDropPod", c_unitCreateIgnorePlacement, EventPlayer(), UnitGetPosition(lv_beacon));
    lv_dropPod = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_dropPod), c_animNameDefault, "Birth", c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.5, c_timeGame);
    SoundPlayAtPoint(SoundLink("Medivac_Unload", 0), PlayerGroupAll(), UnitGetPosition(lv_beacon), 12.0, 200.0, 0.0);
    UnitIssueOrder(lv_beacon, OrderTargetingPoint(AbilityCommand("moveUED", 0), UnitRallyPointTargetPoint(lv_oH, 1, 1)), c_orderQueueReplace);
    libNtve_gf_ShowHideUnit(lv_beacon, true);
    libNtve_gf_PauseUnit(lv_beacon, false);
    Wait(0.3, c_timeGame);
    UnitKill(lv_dropPod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_BeaconBuild_Init () {
    libUEDC_gt_BeaconBuild = TriggerCreate("libUEDC_gt_BeaconBuild_Func");
    TriggerAddEventUnitAbility(libUEDC_gt_BeaconBuild, null, AbilityCommand("CalldownBeacon", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Strengthening Shield
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_StrengtheningShield_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;
    unit lv_shuttle;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_shuttle = EventUnit();
    lv_targetUnit = OrderGetTargetUnit(UnitOrder(lv_shuttle, 0));
    while (!(((UnitIsAlive(lv_shuttle) == false) || (UnitIsAlive(lv_targetUnit) == false) || (UnitHasBehavior2(lv_targetUnit, "ProjectedGravityShield") == true)))) {
        Wait(1.0, c_timeGame);
    }
    if (((UnitIsAlive(lv_shuttle) == true) && (UnitIsAlive(lv_targetUnit) == true))) {
        TimerStart(lv_timer, 20.0, false, c_timeGame);
        UnitSetPropertyFixed(lv_targetUnit, c_unitPropShields, 250.0);
        UnitBehaviorAdd(lv_targetUnit, "GlazeTeleportationEffect", lv_shuttle, 1);
        while (!(((TimerGetRemaining(lv_timer) == 0.0) || (UnitGetPropertyInt(lv_targetUnit, c_unitPropShields, c_unitPropCurrent) == 0) || (UnitIsAlive(lv_targetUnit) == false)))) {
            Wait(1.0, c_timeGame);
        }
        SoundPlayAtPointForPlayer(SoundLink("Protoss_ShieldDeath", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnit()), 12.0, 100.0, 0.0);
        UnitBehaviorRemove(lv_targetUnit, "GlazeTeleportationEffect", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_StrengtheningShield_Init () {
    libUEDC_gt_StrengtheningShield = TriggerCreate("libUEDC_gt_StrengtheningShield_Func");
    TriggerAddEventUnitAbility(libUEDC_gt_StrengtheningShield, null, AbilityCommand("ProjectedGravityShield", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resourses Infusion Tower
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_ResoursesInfusionTower_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnitTargetUnit(), "EnrichmentField") == true))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "ResourceDoublingField", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_ResoursesInfusionTower_Init () {
    libUEDC_gt_ResoursesInfusionTower = TriggerCreate("libUEDC_gt_ResoursesInfusionTower_Func");
    TriggerAddEventUnitAbility(libUEDC_gt_ResoursesInfusionTower, null, AbilityCommand("SalvagerHarvest", 0), c_abilHarvestStageHarvest, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Salvager Harvest
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_SalvagerHarvest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "ResourceDoublingField") == true))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "ResourceDoublingField", 1);
    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperAdd, 0);
    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMineralsCollected, c_playerPropOperAdd, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_SalvagerHarvest_Init () {
    libUEDC_gt_SalvagerHarvest = TriggerCreate("libUEDC_gt_SalvagerHarvest_Func");
    TriggerAddEventUnitAbility(libUEDC_gt_SalvagerHarvest, null, AbilityCommand("SalvagerHarvest", 1), c_abilHarvestStageDropOff, false);
}

void libUEDC_InitTriggers () {
    libUEDC_gt_InitializeUEDRace_Init();
    libUEDC_gt_EffectInfusionTower_Init();
    libUEDC_gt_SoundEffectforhealevery1sec_Init();
    libUEDC_gt_SoundEffectforhealonforany_Init();
    libUEDC_gt_SoundEffectforhealoffforany_Init();
    libUEDC_gt_EffectSalvagerMine_Init();
    libUEDC_gt_EffectTeleportationnode_Init();
    libUEDC_gt_EffectSpawnunit_Init();
    libUEDC_gt_Beaconanimcreate_Init();
    libUEDC_gt_Owardseffectfortargettingunits_Init();
    libUEDC_gt_OwardseffectforPoliticalAdvisor_Init();
    libUEDC_gt_CalculateBeacons_Init();
    libUEDC_gt_InitBeaconsButton_Init();
    libUEDC_gt_BeaconsButtonUsed_Init();
    libUEDC_gt_HidebuttondefaultDropTS_Init();
    libUEDC_gt_HidebuttonarsenalDropTS_Init();
    libUEDC_gt_OrderArsenalUnload_Init();
    libUEDC_gt_RemoveDropArsenalHelpUnit_Init();
    libUEDC_gt_PrerapeTransportshuttle_Init();
    libUEDC_gt_FallenTrooperEffect_Init();
    libUEDC_gt_FallenTrooperHealing_Init();
    libUEDC_gt_BeaconBuild_Init();
    libUEDC_gt_StrengtheningShield_Init();
    libUEDC_gt_ResoursesInfusionTower_Init();
    libUEDC_gt_SalvagerHarvest_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libUEDC_InitLib_completed = false;

void libUEDC_InitLib () {
    if (libUEDC_InitLib_completed) {
        return;
    }

    libUEDC_InitLib_completed = true;

    libUEDC_InitLibraries();
    libUEDC_InitVariables();
    libUEDC_InitTriggers();
}

