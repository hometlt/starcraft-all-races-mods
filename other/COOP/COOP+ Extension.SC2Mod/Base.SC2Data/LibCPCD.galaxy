include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "LibCOOC"
include "LibCOUI"
include "LibCOMU"
include "LibCOMI"
include "LibCOOC"
include "LibCOUI"
include "LibCOMU"
include "LibCOMI"
include "LibCPGL_h"
include "LibCPCC_h"
include "LibCPCM_h"

include "LibCPCD_h"

//--------------------------------------------------------------------------------------------------
// Library: Coop+Data
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libCPCD_InitLibraries () {
    libNtve_InitVariables();
    libLbty_InitVariables();
    libCOOC_InitVariables();
    libCOUI_InitVariables();
    libCOMU_InitVariables();
    libCOMI_InitVariables();
    libCOOC_InitVariables();
    libCOUI_InitVariables();
    libCOMU_InitVariables();
    libCOMI_InitVariables();
    libCPGL_InitVariables();
    libCPCC_InitVariables();
    libCPCM_InitVariables();
}

// Variable Initialization
bool libCPCD_InitVariables_completed = false;

void libCPCD_InitVariables () {
    int init_i;
    int init_j;

    if (libCPCD_InitVariables_completed) {
        return;
    }

    libCPCD_InitVariables_completed = true;

    for (init_i = 0; init_i <= libCPCD_gv_panelHeroMaxSlotCount; init_i += 1) {
        for (init_j = 0; init_j <= libCPGL_gv_humanPlayerCount; init_j += 1) {
            libCPCD_gv_panelHeroReviveTime[init_i][init_j] = 60.0;
        }
    }
    libCPCD_gv_panelHeroReviveCooldown = 60.0;
    for (init_i = 0; init_i <= libCPCD_gv_panelHeroMaxSlotCount; init_i += 1) {
        for (init_j = 0; init_j <= libCPGL_gv_humanPlayerCount; init_j += 1) {
            libCPCD_gv_heroPanelPositionX[init_i][init_j] = 20;
        }
    }
    for (init_i = 0; init_i <= libCPCD_gv_panelHeroMaxSlotCount; init_i += 1) {
        for (init_j = 0; init_j <= libCPGL_gv_humanPlayerCount; init_j += 1) {
            libCPCD_gv_heroPanelPositionY[init_i][init_j] = 30;
        }
    }
    for (init_i = 0; init_i <= libCPCD_gv_panelHeroMaxSlotCount; init_i += 1) {
        for (init_j = 0; init_j <= libCPGL_gv_humanPlayerCount; init_j += 1) {
            libCPCD_gv_heroPanelShowLevel[init_i][init_j] = true;
        }
    }
    for (init_i = 0; init_i <= libCPCD_gv_panelHeroMaxSlotCount; init_i += 1) {
        libCPCD_gv_heroPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPCD_gv_panelHeroMaxSlotCount; init_i += 1) {
        libCPCD_gv_heroPanelDialogBorderImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPCD_gv_panelHeroMaxSlotCount; init_i += 1) {
        libCPCD_gv_heroPanelDialogBorderImageNoDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPCD_gv_panelHeroMaxSlotCount; init_i += 1) {
        libCPCD_gv_heroPanelDialogBorderImageAll[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPCD_gv_panelHeroMaxSlotCount; init_i += 1) {
        libCPCD_gv_heroPanelDialogIcon[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPCD_gv_panelHeroMaxSlotCount; init_i += 1) {
        libCPCD_gv_heroPanelDialogCooldownImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPCD_gv_panelHeroMaxSlotCount; init_i += 1) {
        libCPCD_gv_heroPanelDialogDamageTakenImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPCD_gv_panelHeroMaxSlotCount; init_i += 1) {
        libCPCD_gv_heroPanelDialogDamageTakenLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPCD_gv_panelHeroMaxSlotCount; init_i += 1) {
        libCPCD_gv_heroPanelDialogNameLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPCD_gv_panelHeroMaxSlotCount; init_i += 1) {
        libCPCD_gv_heroPanelDialogLevelLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPCD_gv_panelHeroMaxSlotCount; init_i += 1) {
        libCPCD_gv_heroPanelDialogHealthBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPCD_gv_panelHeroMaxSlotCount; init_i += 1) {
        libCPCD_gv_heroPanelDialogHealthBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPCD_gv_panelHeroMaxSlotCount; init_i += 1) {
        libCPCD_gv_heroPanelDialogShieldBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPCD_gv_panelHeroMaxSlotCount; init_i += 1) {
        libCPCD_gv_heroPanelDialogShieldBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPCD_gv_panelHeroMaxSlotCount; init_i += 1) {
        libCPCD_gv_heroPanelDialogEnergyBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPCD_gv_panelHeroMaxSlotCount; init_i += 1) {
        libCPCD_gv_heroPanelDialogEnergyBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPCD_gv_panelHeroMaxSlotCount; init_i += 1) {
        libCPCD_gv_heroPanelDialogHealthLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPCD_gv_panelHeroMaxSlotCount; init_i += 1) {
        libCPCD_gv_heroPanelDialogEnergyLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPCD_gv_panelHeroMaxSlotCount; init_i += 1) {
        libCPCD_gv_heroPanelDialogShieldLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPCD_gv_panelHeroMaxSlotCount; init_i += 1) {
        libCPCD_gv_heroPanelDialogButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPCD_gv_panelHeroMaxSlotCount; init_i += 1) {
        libCPCD_gv_heroPanelDialogBox[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPCD_gv_panelHeroMaxSlotCount; init_i += 1) {
        for (init_j = 0; init_j <= libCPGL_gv_humanPlayerCount; init_j += 1) {
            libCPCD_gv_heroPanelUnitRevivable[init_i][init_j] = true;
        }
    }
    libCPCD_gv_cU_ProgressBarPanel = c_invalidDialogControlId;
    libCPCD_gv_cU_ProgressBarLabelTitle = c_invalidDialogControlId;
    libCPCD_gv_cU_ProgressBarLabelBarLeft = c_invalidDialogControlId;
    libCPCD_gv_cU_ProgressBarImageBar = c_invalidDialogControlId;
    libCPCD_gv_cU_ProgressBarMax = 100;
    libCPCD_gv_pUC_ProgressBarWidth = 399;
    libCPCD_gv_pUC_ProgressBarHeight = 27;
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_globalPowerCutsceneFilter[init_i] = "";
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_globalPowerPanel[init_i] = c_invalidDialogControlId;
    }
    libCPCD_gv_globalPowerPanelHolder = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_globalPowerAlarakButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cU_GPMengskEnergyContainer[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cU_GPMengskEnergyRegenRoyalGuardContainer[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cU_GPMengskEnergyRegenTrooperContainer[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_globalPowerEnergyBar[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_globalPowerEnergyTooltip[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_globalPowerEnergyBarScene[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_globalPowerEnergyGlassScene[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_globalPowerEnergyLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_globalPowerCmdPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_globalPowerCmdPanelUnitStatus[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_globalPowerCutscene[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= libCPGL_gv_humanPlayerCount; init_j += 1) {
            libCPCD_gv_globalPowerCmdButtons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= libCPGL_gv_humanPlayerCount; init_j += 1) {
            libCPCD_gv_globalPowerCmdButtonArrows[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= libCPGL_gv_humanPlayerCount; init_j += 1) {
            libCPCD_gv_globalPowerUnitEnergyLinks[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= libCPGL_gv_humanPlayerCount; init_j += 1) {
            libCPCD_gv_globalPowerCmdButtonActiveImage[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= libCPGL_gv_humanPlayerCount; init_j += 1) {
            libCPCD_gv_globalPowerCmdButtonBackgroundImage[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_gPTMCasterGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_gPTMTargetingAlreadyCanceled[init_i] = true;
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_gPTMTargetingDirectionGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_gPTMTimeStopTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDSwannLaserDrillGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDRaynorPrestigeAir[init_i] = UnitGroupEmpty();
    }
    libCPCD_gv_cM_MaxSpawn = 9;
    libCPCD_gv_cM_CreepGroup = UnitGroupEmpty();
    libCPCD_gv_cM_CreepTimer = TimerCreate();
    libCPCD_gv_cM_SpawnTime = 180;
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDAlarakEmpowerSlaves[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDAlarakEmpowerWorshipers[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDNovaGriffinTransportUnitGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDNovaGriffinTransportCargoAir[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDNovaGriffinTransportCargoGround[init_i] = UnitGroupEmpty();
    }
    libCPCD_gv_cDNovaNamesCountTurretn = RandomInt(1, 143);
    libCPCD_gv_cDNovaNamesStep = RandomInt(1, 7);
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDStukovHorde[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDStukovHordeWave[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDStukovBunkerGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDFenixAutocastWhirlwind[init_i] = true;
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDFenixAutocastShieldCapacitor[init_i] = true;
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDFenixAutocastCharge[init_i] = true;
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDFenixHeroGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDFenixHeroDummyGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDFenixOfflineHealthRegen[init_i] = 2.0;
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDFenixOfflineShieldRegen[init_i] = 2.0;
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDFenixOfflineEnergyRegen[init_i] = 2.0833;
    }
    libCPCD_gv_cDFenixRalliedGroup = UnitGroupEmpty();
    for (init_i = 0; init_i <= libCPCD_gv_cDFenixChampionCount; init_i += 1) {
        for (init_j = 0; init_j <= libCPGL_gv_humanPlayerCount; init_j += 1) {
            libCPCD_gv_cDFenixChampionShells[init_i][init_j] = UnitGroupEmpty();
        }
    }
    for (init_i = 0; init_i <= libCPCD_gv_cDFenixChampionCount; init_i += 1) {
        for (init_j = 0; init_j <= libCPGL_gv_humanPlayerCount; init_j += 1) {
            libCPCD_gv_cDFenixChampionDeathPoint[init_i][init_j] = RegionGetCenter(RegionEntireMap());
        }
    }
    for (init_i = 0; init_i <= libCPCD_gv_cDFenixChampionCount; init_i += 1) {
        libCPCD_gv_cM_Fenix_ChampionNetworkMaxCountDummy[init_i] = "FenixNetworkedSuperiorityMaxCountDummy";
    }
    for (init_i = 0; init_i <= libCPCD_gv_cDFenixChampionCount; init_i += 1) {
        libCPCD_gv_cM_Fenix_ChampionNetworkStacksPerSupplyDummy[init_i] = "FenixNetworkedSuperiorityStacksPerSupplyDummy";
    }
    for (init_i = 0; init_i <= libCPCD_gv_cDFenixChampionCount; init_i += 1) {
        libCPCD_gv_cDFenixChampionDeathBuffStackCount[init_i] = 20;
    }
    libCPCD_gv_cDDehakaEssenceAttribute = "DehakaAttEssence";
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDDehakaCurrentLevel[init_i] = 1;
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDDehakaVeterencyBehavior[init_i] = "DehakaVeterancyCoopLow";
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDDehakaLevelsMax[init_i] = 10;
    }
    libCPCD_gv_cDDehakaEatReviveTimerAdjustment = -24.0;
    libCPCD_gv_cDDehakaConsumeCooldownMultiplier = 0.1;
    libCPCD_gv_cDDehakaConsumeCooldownFilter = UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral), 0);
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDDehakaAutocastMurvarPuke[init_i] = true;
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDDehakaAutocastMurvarMurvarSpawnCreepers[init_i] = true;
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDDehakaReviveEatTextTag[init_i] = c_textTagNone;
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDHHBomberPlatforms[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDHHBomberPlatforms_Ready[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDTychusMedicTransportUnitGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDTychusMedicGroundUnitsTransportGroupAir[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDTychusMedicGroundUnitsTransportGroupGround[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDTychusTrainMaxCharges[init_i] = 4;
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDTychusMaxHeroCount[init_i] = 5;
    }
    libCPCD_gv_cDTychusUIAbilityButtonBase = "TychusHeroCommonAbil";
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDTychusUISquadContainer[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDTychusUISquadTrainingProgressBar[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPCD_gv_cDTychusUISquadMaxSize; init_i += 1) {
        for (init_j = 0; init_j <= libCPGL_gv_humanPlayerCount; init_j += 1) {
            libCPCD_gv_cDTychusUISquadAvailabilityProgressBars[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libCPCD_gv_cDTychusUISquadMaxSize; init_i += 1) {
        for (init_j = 0; init_j <= libCPGL_gv_humanPlayerCount; init_j += 1) {
            libCPCD_gv_cDTychusUISquadUnitFrames[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libCPCD_gv_cDTychusUISquadMaxSize; init_i += 1) {
        for (init_j = 0; init_j <= libCPGL_gv_humanPlayerCount; init_j += 1) {
            libCPCD_gv_cDTychusUISquadUnitTarget[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libCPCD_gv_cDTychusUISquadMaxSize; init_i += 1) {
        for (init_j = 0; init_j <= libCPGL_gv_humanPlayerCount; init_j += 1) {
            libCPCD_gv_cDTychusUIEquipmentStructureTargets[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libCPCD_gv_cDTychusUISquadMaxSize; init_i += 1) {
        for (init_j = 0; init_j <= libCPGL_gv_humanPlayerCount; init_j += 1) {
            libCPCD_gv_cDTychusUISquadBarTargets[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libCPCD_gv_cDTychusUISquadMaxSize; init_i += 1) {
        for (init_j = 0; init_j <= libCPGL_gv_humanPlayerCount; init_j += 1) {
            libCPCD_gv_cDTychusUISquadPortraits[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libCPCD_gv_cDTychusUISquadMaxSize; init_i += 1) {
        for (init_j = 0; init_j <= libCPGL_gv_humanPlayerCount; init_j += 1) {
            libCPCD_gv_cDTychusUISquadPortraitsStatic[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            libCPCD_gv_cDTychusUISwapTopBarIcons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    libCPCD_gv_cDTychusUISwapTopBarIconsDialog = c_invalidDialogId;
    libCPCD_gv_cM_Zeratul_RalliedGroup = UnitGroupEmpty();
    libCPCD_gv_cDZeratulDevolvedUnits = UnitGroupEmpty();
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDZeratulHeroStructureGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDZeratulTopBarRallyUnits[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDZeratulTopBarRallyRedirectUnits[init_i] = UnitGroupEmpty();
    }
    libCPCD_gv_cDZeratulArtifactHint11 = (60.0 * 5.0);
    libCPCD_gv_cDZeratulArtifactHint12 = (60.0 * 6.0);
    libCPCD_gv_cDZeratulArtifactHint13 = (60.0 * 7.0);
    libCPCD_gv_cDZeratulArtifactHint21 = (60.0 * 10.0);
    libCPCD_gv_cDZeratulArtifactHint22 = (60.0 * 11.0);
    libCPCD_gv_cDZeratulArtifactHint23 = (60.0 * 12.0);
    libCPCD_gv_cDZeratulArtifactHint31 = (60.0 * 15.0);
    libCPCD_gv_cDZeratulArtifactHint32 = (60.0 * 16.0);
    libCPCD_gv_cDZeratulArtifactHint33 = (60.0 * 17.0);
    libCPCD_gv_cDZeratulProphecyArtifactNumber = 1;
    libCPCD_gv_cDZeratulSelectionCommandPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCPCD_gv_cDZeratulSelectionMax; init_i += 1) {
        libCPCD_gv_cDZeratulSelectionButtonContainers[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDMengskReturningWorkers[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDMengskWeaponPickups[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDMengskWeaponPickerUppers[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDMengskVeterans[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDMengskXPHungryUnits[init_i] = UnitGroupEmpty();
    }
    libCPCD_gv_cDMengskArtilleryExperimentalStrikeMinRange = 4.0;
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cDMengskPropagandaUnits[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cM_Mengsk_CheckRoyalGuardSupply[init_i] = true;
    }
    libCPCD_gv_supplicantWarpTrainActualUnitCost = UnitTypeGetCost("Supplicant", c_unitCostMinerals);
    libCPCD_gv_supplicantWarpTrainActualCommand = AbilityCommand("WarpGateTrainSupplicantTrue", 11);
    libCPCD_gv_onDeathUnitMultiplier = 1;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= libCOOC_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCPCD_gv_cM_FenixVOTransmissionFirstPlay[init_i][init_j] = true;
        }
    }
    libCPCD_gv_cM_FenixVOTransmissionTimer = TimerCreate();
    libCPCD_gv_cM_DehakaVOLearnReminderTimer = TimerCreate();
    libCPCD_gv_cM_HornerVOBomberReminderTimer = TimerCreate();
    libCPCD_gv_cM_HornerVOBomberUseTimer = TimerCreate();
    libCPCD_gv_cM_TychusVOTransportReminderTimer = TimerCreate();
    libCPCD_gv_cM_TychusVOTransportFlairCooldownTimer = TimerCreate();
    libCPCD_gv_cM_TychusVOOutlawReviveReminderTimer = TimerCreate();
    libCPCD_gv_cM_TychusVOOutlawRecruitReminderTimer = TimerCreate();
    libCPCD_gv_cM_ArtifactTransmission_SelectAbilityReminder = TimerCreate();
    libCPCD_gv_cMC_ZeratulVOTransmissionProphacyCastDelay = 60.0;
    libCPCD_gv_cM_AbilityTransmission_StetelliteReminder_First = true;
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cM_MengskTransmissionTimerDirtyBomb[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_cM_MengskTransmissionTimerForcedConscription[init_i] = TimerCreate();
    }
    libCPCD_gv_cM_VOResourceReqSendButton = c_invalidDialogControlId;
    libCPCD_gv_cM_TransmissionPrimaryPlayers = PlayerGroupEmpty();
    libCPCD_gv_cM_TransmissionSecondaryPlayers = PlayerGroupEmpty();
    libCPCD_gv_cM_SendTransmissionCampaignPortrait = c_invalidPortraitId;
    libCPCD_gv_cM_SendTransmissionCampaignPlayingTick = 3;
    libCPCD_gv_cM_SendTransmissionCampaignChatBubbleOn = true;
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_playerInfoScreenButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_playerInfoScreenButtonFrame[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCD_gv_playerInfoFrame[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        for (init_j = 0; init_j <= libCPGL_gv_humanPlayerCount; init_j += 1) {
            libCPCD_gv_playerInfoButton[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    libCPCD_gv_cC_HumanPlayerGroup = PlayerGroupEmpty();
}

// Presets
// Functions
void libCPCD_gf_SetHeroPanelUnit (int lp_index, unit lp_heroUnit, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_index != 2)) {
        libCPCD_gf_SetHeroPanelUnitOverride(lp_index, lp_heroUnit, lp_player);
    }
    else if ((UserDataGetInt("PlayerPrestige", libCPGL_gf_CC_PlayerActivePrestigeInstance(lp_player), "ReserveSecondaryHeroPanel", 1) != 1)) {
        libCPCD_gf_SetHeroPanelUnitOverride(lp_index, lp_heroUnit, lp_player);
    }
    else if (true) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_CPCD_953999F7"), false);
    }
}

void libCPCD_gf_SetHeroPanelUnitOverride (int lp_index, unit lp_heroUnit, int lp_player) {
    // Variable Declarations
    bool lv_noValidHeroes;
    int lv_heroHotkey;
    playergroup lv_heroGroup;

    // Automatic Variable Declarations
    int auto813C0655_val;
    unit auto235D380F_val;
    int autoEA2B1853_val;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();

    // Implementation
    lv_heroGroup = PlayerGroupSingle(lp_player);
    libCPCD_gv_heroPanelUnit[lp_index][lp_player] = lp_heroUnit;
    libCPCD_gv_heroPanelUnitPresetType[lp_index][lp_player] = libCPCD_gf_HeroPanelUnitTypePresetfromUnitType(UnitGetType(lp_heroUnit));
    auto813C0655_val = libCPCD_gv_heroPanelUnitPresetType[lp_index][lp_player];
    if (auto813C0655_val == libCPCD_ge_HeroPanelUnitPresetType_Hyperion) {
        libCPCD_gv_heroPanelShowLevel[lp_index][lp_player] = false;
    }
    else if (auto813C0655_val == libCPCD_ge_HeroPanelUnitPresetType_LaserDrill) {
        libCPCD_gv_heroPanelShowLevel[lp_index][lp_player] = false;
    }
    else {
        libCPCD_gv_heroPanelShowLevel[lp_index][lp_player] = true;
    }
    libCPCD_gf_CU_UpdateHeroPanel(lp_index, lp_player);
    if ((libCPGL_gv_commander[lp_player].lv_race == "Zerg")) {
        DialogControlSendAnimationEvent(libCPCD_gv_heroPanel[lp_index], PlayerGroupSingle(lp_player), "SwitchZerg");
    }
    else if ((libCPGL_gv_commander[lp_player].lv_race == "Terr")) {
        DialogControlSendAnimationEvent(libCPCD_gv_heroPanel[lp_index], PlayerGroupSingle(lp_player), "SwitchTerran");
    }
    else if ((libCPCD_gf_CU_ChampionHasShields2(libCPCD_gf_HeroPanelUnitTypePresetfromUnitType(UnitGetType(lp_heroUnit))) == true)) {
        DialogControlSendAnimationEvent(libCPCD_gv_heroPanel[lp_index], PlayerGroupSingle(lp_player), "DefaultBarOffset");
    }
    else if (true) {
        DialogControlSendAnimationEvent(libCPCD_gv_heroPanel[lp_index], PlayerGroupSingle(lp_player), "EnergyBarOffset");
    }
    libCPCD_gv_heroPanelUnitExists[lp_player][lp_index] = true;
    if ((libCPCD_gv_heroPanelUnit[lp_index][lp_player] == null)) {
        libCPCD_gv_heroPanelUnitExists[lp_player][lp_index] = false;
    }
    else {
        TriggerEnable(libCPCD_gt_HeroPanelUpdate, true);
        TriggerEnable(libCPCD_gt_HeroPanelDamaged, true);
        TriggerEnable(libCPCD_gt_HeroPanelHoverTooltip, true);
        TriggerEnable(libCPCD_gt_HeroPanelVitalChanged, true);
        auto235D380F_val = lp_heroUnit;
        {
            libNtve_gf_SetDialogItemAnimationDuration(libCPCD_gv_heroPanelDialogCooldownImage[lp_index], 60.0, lv_heroGroup);
        }
        autoEA2B1853_val = lp_index;
        if (autoEA2B1853_val == 1) {
            lv_heroHotkey = c_hotkeyHeroSelect0;
        }
        else if (autoEA2B1853_val == 2) {
            lv_heroHotkey = c_hotkeyHeroSelect1;
        }
        else {
        }
        if ((lp_index <= libCPCD_gv_panelHeroMaxSlotCount)) {
            libNtve_gf_SetDialogItemHotkey(libCPCD_gv_heroPanelDialogButton[lp_index], lv_heroHotkey, lv_heroGroup);
        }
        else {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_CPCD_5D490734"), false);
        }
    }
}

void libCPCD_gf_CU_ShowHideHeroPanel (bool lp_showHide, int lp_index) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCPCD_gv_heroPanel[lp_index] != c_invalidDialogControlId)) {
        DialogControlSetVisible(libCPCD_gv_heroPanel[lp_index], PlayerGroupAll(), lp_showHide);
    }

}

void libCPCD_gf_CU_CreateHeroPanel (int lp_index) {
    // Automatic Variable Declarations
    int auto6B7E0EB1_val;

    // Implementation
    if ((lp_index == 1)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/VoidHeroUnitFrame");
    }
    else {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/SecondaryVoidHeroUnitFrame");
    }
    libCPCD_gv_heroPanel[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libCPCD_gv_heroPanel[lp_index], c_triggerControlTypeImage, "BorderImage");
    libCPCD_gv_heroPanelDialogBorderImage[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(libCPCD_gv_heroPanel[lp_index], c_triggerControlTypeImage, "BorderNoEnergyImage");
    libCPCD_gv_heroPanelDialogBorderImageNoDialog[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(libCPCD_gv_heroPanel[lp_index], c_triggerControlTypeImage, "BorderImageAll");
    libCPCD_gv_heroPanelDialogBorderImageAll[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(libCPCD_gv_heroPanel[lp_index], c_triggerControlTypeImage, "LevelBox");
    libCPCD_gv_heroPanelDialogBox[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(libCPCD_gv_heroPanelDialogBox[lp_index], PlayerGroupAll(), false);
    DialogControlHookup(libCPCD_gv_heroPanel[lp_index], c_triggerControlTypeLabel, "LevelLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libCPCD_gv_heroPanel[lp_index], c_triggerControlTypeImage, "CooldownImage");
    libCPCD_gv_heroPanelDialogCooldownImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_heroPanel[lp_index], c_triggerControlTypeImage, "DamageTakenImage");
    libCPCD_gv_heroPanelDialogDamageTakenImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_heroPanel[lp_index], c_triggerControlTypeImage, "EnergyBarImage");
    libCPCD_gv_heroPanelDialogEnergyBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_heroPanel[lp_index], c_triggerControlTypeImage, "EnergyBarBackground");
    libCPCD_gv_heroPanelDialogEnergyBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_heroPanel[lp_index], c_triggerControlTypeImage, "HealthBarImage");
    libCPCD_gv_heroPanelDialogHealthBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_heroPanel[lp_index], c_triggerControlTypeImage, "BarBackground");
    libCPCD_gv_heroPanelDialogHealthBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_heroPanel[lp_index], c_triggerControlTypeImage, "ShieldBarImage");
    libCPCD_gv_heroPanelDialogShieldBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_heroPanel[lp_index], c_triggerControlTypeImage, "ShieldBarBackground");
    libCPCD_gv_heroPanelDialogShieldBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_heroPanel[lp_index], c_triggerControlTypeImage, "IconImage");
    libCPCD_gv_heroPanelDialogIcon[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_heroPanel[lp_index], c_triggerControlTypeLabel, "DamageTakenLabel");
    libCPCD_gv_heroPanelDialogDamageTakenLabel[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(libCPCD_gv_heroPanelDialogDamageTakenLabel[lp_index], StringToText(""), PlayerGroupAll());
    DialogControlHookup(libCPCD_gv_heroPanel[lp_index], c_triggerControlTypeLabel, "EnergyLabel");
    libCPCD_gv_heroPanelDialogEnergyLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_heroPanel[lp_index], c_triggerControlTypeLabel, "HealthLabel");
    libCPCD_gv_heroPanelDialogHealthLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_heroPanel[lp_index], c_triggerControlTypeLabel, "ShieldLabel");
    libCPCD_gv_heroPanelDialogShieldLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_heroPanel[lp_index], c_triggerControlTypeLabel, "LevelLabel");
    libCPCD_gv_heroPanelDialogLevelLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_heroPanel[lp_index], c_triggerControlTypeLabel, "NameLabel");
    libCPCD_gv_heroPanelDialogNameLabel[lp_index] = DialogControlLastCreated();
    auto6B7E0EB1_val = lp_index;
    if (auto6B7E0EB1_val == 1) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/VoidHeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect0, PlayerGroupAll());
    }
    else if (auto6B7E0EB1_val == 2) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/SecondaryVoidHeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect1, PlayerGroupAll());
    }
    else {
    }
    libCPCD_gv_heroPanelDialogButton[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(libCPCD_gv_heroPanelDialogDamageTakenImage[lp_index], PlayerGroupAll(), false);
    DialogControlSetVisible(libCPCD_gv_heroPanelDialogCooldownImage[lp_index], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemRenderPriority(libCPCD_gv_heroPanelDialogEnergyBarBackground[lp_index], 505, PlayerGroupAll());
    libNtve_gf_SetDialogItemTintColor(DialogControlLastCreated(), libCPCD_gf_GetCommanderDataConsoleColor(lp_index), PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(libCPCD_gv_heroPanelDialogHealthBarBackground[lp_index], 505, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(libCPCD_gv_heroPanelDialogShieldBarImage[lp_index], 511, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(libCPCD_gv_heroPanelDialogShieldBarBackground[lp_index], 510, PlayerGroupAll());
}

int libCPCD_gf_HeroPanelUnitTypePresetfromUnitType (string lp_unitType) {
    // Automatic Variable Declarations
    string auto703301F4_val;

    // Implementation
    auto703301F4_val = lp_unitType;
    if (auto703301F4_val == "K5Kerrigan") {
        return libCPCD_ge_HeroPanelUnitPresetType_Kerrigan;
    }
    else if (auto703301F4_val == "K5KerriganBurrowed") {
        return libCPCD_ge_HeroPanelUnitPresetType_Kerrigan;
    }
    else if (auto703301F4_val == "ZagaraVoidCoop") {
        return libCPCD_ge_HeroPanelUnitPresetType_Zagara;
    }
    else if (auto703301F4_val == "ZagaraVoidCoopBurrowed") {
        return libCPCD_ge_HeroPanelUnitPresetType_Zagara;
    }
    else if (auto703301F4_val == "HyperionVoidCoop") {
        return libCPCD_ge_HeroPanelUnitPresetType_Hyperion;
    }
    else if (auto703301F4_val == "DrakkenLaserDrillCoop") {
        return libCPCD_ge_HeroPanelUnitPresetType_LaserDrill;
    }
    else if (auto703301F4_val == "ZagaraReviveCocoon") {
        return libCPCD_ge_HeroPanelUnitPresetType_ZagaraReviveCocoon;
    }
    else if (auto703301F4_val == "KerriganReviveCocoon") {
        return libCPCD_ge_HeroPanelUnitPresetType_KerriganReviveCocoon;
    }
    else if (auto703301F4_val == "AlarakReviveBeacon") {
        return libCPCD_ge_HeroPanelUnitPresetType_AlarakReviveBeacon;
    }
    else if (auto703301F4_val == "AlarakCoop") {
        return libCPCD_ge_HeroPanelUnitPresetType_Alarak;
    }
    else if (auto703301F4_val == "NovaCoop") {
        return libCPCD_ge_HeroPanelUnitPresetType_Nova;
    }
    else if (auto703301F4_val == "NovaReviveBeacon") {
        return libCPCD_ge_HeroPanelUnitPresetType_NovaReviveBeacon;
    }
    else if (auto703301F4_val == "SelendisCoop") {
        return libCPCD_ge_HeroPanelUnitPresetType_Selendis;
    }
    else if (auto703301F4_val == "FenixCoop") {
        return libCPCD_ge_HeroPanelUnitPresetType_Fenix;
    }
    else if (auto703301F4_val == "FenixDragoon") {
        return libCPCD_ge_HeroPanelUnitPresetType_FenixDragoon;
    }
    else if (auto703301F4_val == "FenixArbiter") {
        return libCPCD_ge_HeroPanelUnitPresetType_FenixArbiter;
    }
    else if (auto703301F4_val == "DehakaCoop") {
        return libCPCD_ge_HeroPanelUnitPresetType_Dehaka;
    }
    else if (auto703301F4_val == "DehakaCoopClone") {
        return libCPCD_ge_HeroPanelUnitPresetType_Dehaka;
    }
    else if (auto703301F4_val == "DehakaCoopReviveCocoon") {
        return libCPCD_ge_HeroPanelUnitPresetType_DehakasDen;
    }
    else if (auto703301F4_val == "CODFlatbedTruck") {
        return libCPCD_ge_HeroPanelUnitPresetType_ArtifactTruck;
    }
    else if (auto703301F4_val == "TychusCoop") {
        return libCPCD_ge_HeroPanelUnitPresetType_Tychus;
    }
    else if (auto703301F4_val == "TychusReviveBeacon") {
        return libCPCD_ge_HeroPanelUnitPresetType_TychusReviveBeacon;
    }
    else if (auto703301F4_val == "ZeratulCoop") {
        return libCPCD_ge_HeroPanelUnitPresetType_Zeratul;
    }
    else if (auto703301F4_val == "ZeratulCoopReviveBeacon") {
        return libCPCD_ge_HeroPanelUnitPresetType_ZeratulReviveBeacon;
    }
    else if (auto703301F4_val == "GaryStetmann") {
        return libCPCD_ge_HeroPanelUnitPresetType_Gary;
    }
    else if (auto703301F4_val == "SuperGaryStetmann") {
        return libCPCD_ge_HeroPanelUnitPresetType_SuperGary;
    }
    else if (auto703301F4_val == "GarysDen") {
        return libCPCD_ge_HeroPanelUnitPresetType_GaryReviveBeacon;
    }
    else {
    }
    return libCPCD_ge_HeroPanelUnitPresetType_None;
}

string libCPCD_gf_HeroPanelHeroIcon (int lp_heroType, unit lp_heroUnit) {
    // Automatic Variable Declarations
    int autoB94B766A_val;
    string auto5B1E0E71_val;

    // Implementation
    autoB94B766A_val = lp_heroType;
    if (autoB94B766A_val == libCPCD_ge_HeroPanelUnitPresetType_Kerrigan) {
        if ((UnitIsAlive(lp_heroUnit) == true)) {
            return "Assets\\Textures\\btn-hero-kerriganqueenofblades.dds";
        }
        else {
            return "Assets\\Textures\\chrysalisportrait_static.dds";
        }
    }
    else if (autoB94B766A_val == libCPCD_ge_HeroPanelUnitPresetType_KerriganReviveCocoon) {
        return "Assets\\Textures\\chrysalisportrait_static.dds";
    }
    else if (autoB94B766A_val == libCPCD_ge_HeroPanelUnitPresetType_Artanis) {
        return "Assets\\Textures\\ui-heroicon-artanis.dds";
    }
    else if (autoB94B766A_val == libCPCD_ge_HeroPanelUnitPresetType_Alarak) {
        return "Assets\\Textures\\alarakex3_ingame_heroportrait.dds";
    }
    else if (autoB94B766A_val == libCPCD_ge_HeroPanelUnitPresetType_AlarakReviveBeacon) {
        return "Assets\\Textures\\alarakdeath_ingame_heroportrait.dds";
    }
    else if (autoB94B766A_val == libCPCD_ge_HeroPanelUnitPresetType_Hyperion) {
        return "Assets\\Textures\\btn-unit-terran-hyperion.dds";
    }
    else if (autoB94B766A_val == libCPCD_ge_HeroPanelUnitPresetType_LaserDrill) {
        return "Assets\\Textures\\btn-tips-laserdrillcontrol.dds";
    }
    else if (autoB94B766A_val == libCPCD_ge_HeroPanelUnitPresetType_Zagara) {
        if ((UnitIsAlive(lp_heroUnit) == true)) {
            return "Assets\\Textures\\ui_commanderportrait_zagara.dds";
        }
        else {
            return "Assets\\Textures\\cocoonportrait_static.dds";
        }
    }
    else if (autoB94B766A_val == libCPCD_ge_HeroPanelUnitPresetType_ZagaraReviveCocoon) {
        return "Assets\\Textures\\cocoonportrait_static.dds";
    }
    else if (autoB94B766A_val == libCPCD_ge_HeroPanelUnitPresetType_NovaReviveBeacon) {
        return "Assets\\Textures\\btn-upgrade-nova-novarespawn.dds";
    }
    else if (autoB94B766A_val == libCPCD_ge_HeroPanelUnitPresetType_Nova) {
        return "Assets\\Textures\\novaex3_ingame_heroportrait.dds";
    }
    else if (autoB94B766A_val == libCPCD_ge_HeroPanelUnitPresetType_Selendis) {
        return "Assets\\Textures\\ui-heroicon-selendis.dds";
    }
    else if (autoB94B766A_val == libCPCD_ge_HeroPanelUnitPresetType_Fenix) {
        return "Assets\\Textures\\btn-hero-fenix.dds";
    }
    else if (autoB94B766A_val == libCPCD_ge_HeroPanelUnitPresetType_FenixDragoon) {
        return "Assets\\Textures\\btn-hero-fenix-dragoon.dds";
    }
    else if (autoB94B766A_val == libCPCD_ge_HeroPanelUnitPresetType_FenixArbiter) {
        return "Assets\\Textures\\btn-hero-fenix-arbiter.dds";
    }
    else if (autoB94B766A_val == libCPCD_ge_HeroPanelUnitPresetType_Dehaka) {
        return "Assets\\Textures\\btn-hero-dehaka.dds";
    }
    else if (autoB94B766A_val == libCPCD_ge_HeroPanelUnitPresetType_DehakasDen) {
        return "Assets\\Textures\\btn-hero-dehaka-death.dds";
    }
    else if (autoB94B766A_val == libCPCD_ge_HeroPanelUnitPresetType_ArtifactTruck) {
        return "Assets\\Textures\\btn-cradleofdeath-truck.dds";
    }
    else if (autoB94B766A_val == libCPCD_ge_HeroPanelUnitPresetType_Zeratul) {
        return "Assets\\Textures\\zeratul_ingame_heroportrait.dds";
    }
    else if (autoB94B766A_val == libCPCD_ge_HeroPanelUnitPresetType_ZeratulReviveBeacon) {
        return "Assets\\Textures\\btn-building-protoss-zeratulbeacon.dds";
    }
    else if (autoB94B766A_val == libCPCD_ge_HeroPanelUnitPresetType_Gary) {
        return "Assets\\Textures\\gary_ingame_heroportrait.dds";
    }
    else if (autoB94B766A_val == libCPCD_ge_HeroPanelUnitPresetType_SuperGary) {
        return "Assets\\Textures\\supergary_ingame_heroportrait.dds";
    }
    else if (autoB94B766A_val == libCPCD_ge_HeroPanelUnitPresetType_GaryReviveBeacon) {
        return "Assets\\Textures\\btn-building-stetmann-garysroom.dds";
    }
    else {
        auto5B1E0E71_val = UnitGetType(lp_heroUnit);
        if (auto5B1E0E71_val == "StukovApocalisk") {
            return "Assets\\Textures\\btn-upgrade-zerg-stukov-apocolisk_04.dds";
        }
        else if (auto5B1E0E71_val == "StukovApocalisk") {
            return "Assets\\Textures\\btn-upgrade-zerg-stukov- buffed version aleksander_15.dds";
        }
        else if (auto5B1E0E71_val == "SOAMothershipv4") {
            return "Assets\\Textures\\btn-upgrade-protoss-alarak-deathfleet.dds";
        }
        else if (auto5B1E0E71_val == "MothershipCoreNerazim") {
            return "Assets\\Textures\\Mothership_Nerazim_Portrait_Static.dds";
        }
        else if (auto5B1E0E71_val == "MothershipNerazim") {
            return "Assets\\Textures\\Mothership_Nerazim_Portrait_Static.dds";
        }
        else if (auto5B1E0E71_val == "TychusOdin") {
            return "Assets\\Textures\\btn-ability-tychus-odin.dds";
        }
        else {
            return (CatalogFieldValueGet(c_gameCatalogActor, (UnitGetType(lp_heroUnit)), "HeroIcon", UnitGetOwner(lp_heroUnit)));
        }
    }
}

void libCPCD_gf_CU_UpdateHeroPanel (int lp_index, int lp_player) {
    // Variable Declarations
    text lv_hotkey;
    int lv_life;
    int lv_shields;
    int lv_energy;
    playergroup lv_updateGroup;

    // Automatic Variable Declarations
    int auto42896C13_val;

    // Variable Initialization
    lv_updateGroup = PlayerGroupEmpty();

    // Implementation
    lv_updateGroup = PlayerGroupSingle(lp_player);
    if ((libCPCD_gv_heroPanelUnit[lp_index][lp_player] == null)) {
        if ((libCPCD_gv_heroPanel[lp_index] != c_invalidDialogControlId)) {
            DialogControlSetVisible(libCPCD_gv_heroPanel[lp_index], lv_updateGroup, false);
        }

        return ;
    }

    if ((libCPCD_gv_heroPanel[lp_index] == c_invalidDialogControlId)) {
        libCPCD_gf_CU_CreateHeroPanel(lp_index);
    }

    DialogControlSetVisible(libCPCD_gv_heroPanel[lp_index], lv_updateGroup, true);
    auto42896C13_val = lp_index;
    if (auto42896C13_val == 1) {
        lv_hotkey = StringExternal("Param/Value/lib_CPCD_2964F7DC");
    }
    else if (auto42896C13_val == 2) {
        lv_hotkey = StringExternal("Param/Value/lib_CPCD_8574E867");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_CPCD_3421673B", "A", UnitGetName(libCPCD_gv_heroPanelUnit[lp_index][lp_player]));
    TextExpressionSetToken("Param/Expression/lib_CPCD_3421673B", "B", lv_hotkey);
    libNtve_gf_SetDialogItemText(libCPCD_gv_heroPanelDialogNameLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_CPCD_3421673B"), lv_updateGroup);
    libNtve_gf_SetDialogItemImage(libCPCD_gv_heroPanelDialogIcon[lp_index], libCPCD_gf_HeroPanelHeroIcon(libCPCD_gv_heroPanelUnitPresetType[lp_index][lp_player], libCPCD_gv_heroPanelUnit[lp_index][lp_player]), lv_updateGroup);
    TextExpressionSetToken("Param/Expression/lib_CPCD_146B4C2C", "CurrentLife", FixedToText(UnitGetPropertyFixed(libCPCD_gv_heroPanelUnit[lp_index][lp_player], c_unitPropLife, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_CPCD_146B4C2C", "MaxLife", FixedToText(UnitGetPropertyFixed(libCPCD_gv_heroPanelUnit[lp_index][lp_player], c_unitPropLifeMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(libCPCD_gv_heroPanelDialogHealthLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_CPCD_146B4C2C"), lv_updateGroup);
    lv_life = FixedToInt((UnitGetPropertyFixed(libCPCD_gv_heroPanelUnit[lp_index][lp_player], c_unitPropLifePercent, c_unitPropCurrent) * (IntToFixed(libCPCD_gv_panelHeroWidth) / 100.0)));
    if ((lv_life > 0)) {
        DialogControlSetSize(libCPCD_gv_heroPanelDialogHealthBarImage[lp_index], lv_updateGroup, lv_life, libCPCD_gv_panelHeroLifeHeight);
        DialogControlSetVisible(libCPCD_gv_heroPanelDialogHealthBarImage[lp_index], lv_updateGroup, true);
    }
    else {
        DialogControlSetVisible(libCPCD_gv_heroPanelDialogHealthBarImage[lp_index], lv_updateGroup, false);
    }
    if ((UnitGetPropertyFixed(libCPCD_gv_heroPanelUnit[lp_index][lp_player], c_unitPropShieldsMax, c_unitPropCurrent) > 0)) {
        DialogControlSetVisible(libCPCD_gv_heroPanelDialogShieldBarBackground[lp_index], lv_updateGroup, true);
        TextExpressionSetToken("Param/Expression/lib_CPCD_7313EEB4", "CurrentLife", FixedToText(UnitGetPropertyFixed(libCPCD_gv_heroPanelUnit[lp_index][lp_player], c_unitPropShields, c_unitPropCurrent), 0));
        TextExpressionSetToken("Param/Expression/lib_CPCD_7313EEB4", "MaxLife", FixedToText(UnitGetPropertyFixed(libCPCD_gv_heroPanelUnit[lp_index][lp_player], c_unitPropShieldsMax, c_unitPropCurrent), 0));
        libNtve_gf_SetDialogItemText(libCPCD_gv_heroPanelDialogShieldLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_CPCD_7313EEB4"), lv_updateGroup);
        lv_shields = FixedToInt((UnitGetPropertyFixed(libCPCD_gv_heroPanelUnit[lp_index][lp_player], c_unitPropShieldsPercent, c_unitPropCurrent) * (IntToFixed(libCPCD_gv_panelHeroWidth) / 100.0)));
        if ((lv_shields > 0)) {
            DialogControlSetSize(libCPCD_gv_heroPanelDialogShieldBarImage[lp_index], lv_updateGroup, lv_shields, libCPCD_gv_panelHeroShieldHeight);
            DialogControlSetVisible(libCPCD_gv_heroPanelDialogShieldBarImage[lp_index], lv_updateGroup, true);
        }
        else {
            DialogControlSetSize(libCPCD_gv_heroPanelDialogShieldBarImage[lp_index], lv_updateGroup, 1, libCPCD_gv_panelHeroShieldHeight);
            DialogControlSetVisible(libCPCD_gv_heroPanelDialogShieldBarImage[lp_index], lv_updateGroup, false);
        }
    }
    else {
        DialogControlSetVisible(libCPCD_gv_heroPanelDialogShieldBarImage[lp_index], lv_updateGroup, false);
        DialogControlSetVisible(libCPCD_gv_heroPanelDialogShieldBarBackground[lp_index], lv_updateGroup, false);
    }
    TextExpressionSetToken("Param/Expression/lib_CPCD_B3143C28", "CurrentEnergy", FixedToText(UnitGetPropertyFixed(libCPCD_gv_heroPanelUnit[lp_index][lp_player], c_unitPropEnergy, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_CPCD_B3143C28", "MaxEnergy", FixedToText(UnitGetPropertyFixed(libCPCD_gv_heroPanelUnit[lp_index][lp_player], c_unitPropEnergyMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(libCPCD_gv_heroPanelDialogEnergyLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_CPCD_B3143C28"), lv_updateGroup);
    if ((UnitGetPropertyFixed(libCPCD_gv_heroPanelUnit[lp_index][lp_player], c_unitPropEnergyMax, c_unitPropCurrent) == 0)) {
        lv_energy = 0;
        if ((libCPCD_gf_CU_ChampionHasShields2(libCPCD_gv_heroPanelUnitPresetType[lp_index][lp_player]) == true)) {
            DialogControlSetVisible(libCPCD_gv_heroPanelDialogBorderImageNoDialog[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCPCD_gv_heroPanelDialogBorderImage[lp_index], lv_updateGroup, true);
            DialogControlSetVisible(libCPCD_gv_heroPanelDialogBorderImageAll[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCPCD_gv_heroPanelDialogEnergyBarBackground[lp_index], lv_updateGroup, false);
        }
        else {
            DialogControlSetVisible(libCPCD_gv_heroPanelDialogBorderImageNoDialog[lp_index], lv_updateGroup, true);
            DialogControlSetVisible(libCPCD_gv_heroPanelDialogBorderImage[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCPCD_gv_heroPanelDialogBorderImageAll[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCPCD_gv_heroPanelDialogEnergyBarBackground[lp_index], lv_updateGroup, false);
        }
    }
    else {
        lv_energy = FixedToInt((UnitGetPropertyFixed(libCPCD_gv_heroPanelUnit[lp_index][lp_player], c_unitPropEnergyPercent, c_unitPropCurrent) * (IntToFixed(libCPCD_gv_panelHeroWidth) / 100.0)));
        if ((libCPCD_gf_CU_ChampionHasShields(libCPCD_gv_heroPanelUnitPresetType[lp_index][lp_player]) == true)) {
            DialogControlSetVisible(libCPCD_gv_heroPanelDialogBorderImageAll[lp_index], lv_updateGroup, true);
            DialogControlSetVisible(libCPCD_gv_heroPanelDialogBorderImageNoDialog[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCPCD_gv_heroPanelDialogBorderImage[lp_index], lv_updateGroup, false);
        }
        else {
            DialogControlSetVisible(libCPCD_gv_heroPanelDialogBorderImageAll[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCPCD_gv_heroPanelDialogBorderImageNoDialog[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCPCD_gv_heroPanelDialogBorderImage[lp_index], lv_updateGroup, true);
        }
        DialogControlSetVisible(libCPCD_gv_heroPanelDialogEnergyBarBackground[lp_index], lv_updateGroup, true);
    }
    if ((lv_energy > 0)) {
        DialogControlSetSize(libCPCD_gv_heroPanelDialogEnergyBarImage[lp_index], lv_updateGroup, lv_energy, libCPCD_gv_panelHeroEnergyHeight);
        DialogControlSetVisible(libCPCD_gv_heroPanelDialogEnergyBarImage[lp_index], lv_updateGroup, true);
    }
    else {
        DialogControlSetVisible(libCPCD_gv_heroPanelDialogEnergyBarImage[lp_index], lv_updateGroup, false);
    }
    libNtve_gf_SetDialogItemText(libCPCD_gv_heroPanelDialogLevelLabel[lp_index], IntToText(libCOOC_gf_CC_CommanderLevel(lp_player, libCOOC_gf_ActiveCommanderForPlayer(lp_player))), lv_updateGroup);
    if ((libCPCD_gv_heroPanelDamageTimer[lp_index][lp_player] > 0.0)) {
        libCPCD_gv_heroPanelDamageTimer[lp_index][lp_player] -= libCPCD_gv_panelHeroPeriodicUpdate;
        if ((libCPCD_gv_heroPanelDamageTimer[lp_index][lp_player] <= 0.0)) {
            DialogControlSetVisible(libCPCD_gv_heroPanelDialogDamageTakenLabel[lp_index], lv_updateGroup, false);
            DialogControlFadeTransparency(libCPCD_gv_heroPanelDialogDamageTakenImage[lp_index], lv_updateGroup, 1.0, 100.0);
        }

    }

    if ((UnitIsAlive(libCPCD_gv_heroPanelUnit[lp_index][lp_player]) == false) && (libCOMI_gf_GameIsOver() == false)) {
        if ((libCPCD_gv_heroPanelUnitRevivable[lp_index][lp_player] == true) && (PlayerGetCooldown(lp_player, libCPGL_gv_commander[lp_player].lv_heroReviveLink) > 0.0)) {
            libNtve_gf_SetDialogItemAnimationTime(libCPCD_gv_heroPanelDialogCooldownImage[lp_index], (60.0 * (1 - PlayerGetCooldown(lp_player, libCPGL_gv_commander[lp_player].lv_heroReviveLink)/libCPCD_gv_panelHeroReviveTime[lp_index][lp_player]) ), lv_updateGroup);
            DialogControlSetVisible(libCPCD_gv_heroPanelDialogCooldownImage[lp_index], lv_updateGroup, true);
        }
        else if (true) {
            DialogControlSetVisible(libCPCD_gv_heroPanelDialogCooldownImage[lp_index], lv_updateGroup, false);
        }
        if ((UnitGetPropertyFixed(libCPCD_gv_heroPanelUnit[lp_index][lp_player], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libCPCD_gv_heroPanelDialogEnergyBarImage[lp_index], lv_updateGroup, false);
        }

    }
    else {
        DialogControlSetVisible(libCPCD_gv_heroPanelDialogCooldownImage[lp_index], lv_updateGroup, false);
    }
    libNtve_gf_SetDialogItemUnit(libCPCD_gv_heroPanelDialogButton[lp_index], libCPCD_gv_heroPanelUnit[lp_index][lp_player], lv_updateGroup);
}

bool libCPCD_gf_CU_ChampionHasShields (int lp_heroType) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_heroType == libCPCD_ge_HeroPanelUnitPresetType_Kerrigan) || (lp_heroType == libCPCD_ge_HeroPanelUnitPresetType_Fenix) || (lp_heroType == libCPCD_ge_HeroPanelUnitPresetType_FenixArbiter) || (lp_heroType == libCPCD_ge_HeroPanelUnitPresetType_FenixDragoon))) {
        return true;
    }
    else {
        return false;
    }
}

bool libCPCD_gf_CU_ChampionHasShields2 (int lp_heroType) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_heroType == libCPCD_ge_HeroPanelUnitPresetType_Alarak))) {
        return true;
    }
    else {
        return false;
    }
}

trigger auto_libCPCD_gf_DisplayProgressBar_Trigger = null;
text auto_libCPCD_gf_DisplayProgressBar_lp_title;
int auto_libCPCD_gf_DisplayProgressBar_lp_min;
int auto_libCPCD_gf_DisplayProgressBar_lp_max;

void libCPCD_gf_DisplayProgressBar (text lp_title, int lp_min, int lp_max) {
    auto_libCPCD_gf_DisplayProgressBar_lp_title = lp_title;
    auto_libCPCD_gf_DisplayProgressBar_lp_min = lp_min;
    auto_libCPCD_gf_DisplayProgressBar_lp_max = lp_max;

    if (auto_libCPCD_gf_DisplayProgressBar_Trigger == null) {
        auto_libCPCD_gf_DisplayProgressBar_Trigger = TriggerCreate("auto_libCPCD_gf_DisplayProgressBar_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_DisplayProgressBar_Trigger, false, false);
}

bool auto_libCPCD_gf_DisplayProgressBar_TriggerFunc (bool testConds, bool runActions) {
    text lp_title = auto_libCPCD_gf_DisplayProgressBar_lp_title;
    int lp_min = auto_libCPCD_gf_DisplayProgressBar_lp_min;
    int lp_max = auto_libCPCD_gf_DisplayProgressBar_lp_max;

    // Variable Declarations
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_image = "Assets\\Textures\\ui_loadingbar_metalframe_protoss.dds";

    // Implementation
    if ((libCPCD_gv_cU_ProgressBarPanel == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/ProgressFrame");
        libCPCD_gv_cU_ProgressBarPanel = DialogControlLastCreated();
        DialogControlHookup(libCPCD_gv_cU_ProgressBarPanel, c_triggerControlTypeLabel, "NameLabel");
        libCPCD_gv_cU_ProgressBarLabelTitle = DialogControlLastCreated();
        DialogControlHookup(libCPCD_gv_cU_ProgressBarPanel, c_triggerControlTypeImage, "BarImage");
        libCPCD_gv_cU_ProgressBarImageBar = DialogControlLastCreated();
        DialogControlHookup(libCPCD_gv_cU_ProgressBarPanel, c_triggerControlTypeLabel, "LeftBarLabel");
        libCPCD_gv_cU_ProgressBarLabelBarLeft = DialogControlLastCreated();
    }

    libCPCD_gf_SetProgressBarTitle(lp_title);
    libCPCD_gf_SetProgressBarColor(Color(9.41, 31.76, 72.94));
    libCPCD_gf_SetProgressBarValueRange(lp_min, lp_max);
    libCPCD_gf_SetProgressBarLabel(null);
    DialogControlSetVisible(libCPCD_gv_cU_ProgressBarPanel, PlayerGroupAll(), true);
    libCPCD_gv_cU_ProgressBarShowing = true;
    while (true) {
        if ((libCPCD_gv_cU_ProgressBarPanel == c_invalidDialogControlId)) {
            return true;
        }

        if ((DialogControlIsVisible(libCPCD_gv_cU_ProgressBarPanel, 1) == true)) {
            libCPCD_gf_CU_UpdateProgressBar();
        }

        Wait(0.25, c_timeGame);
    }
    return true;
}

void libCPCD_gf_SetProgressBarTitle (text lp_title) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libCPCD_gv_cU_ProgressBarLabelTitle, lp_title, PlayerGroupAll());
}

void libCPCD_gf_SetProgressBarValueRange (int lp_min, int lp_max) {
    // Automatic Variable Declarations
    // Implementation
    libCPCD_gv_cU_ProgressBarMin = lp_min;
    libCPCD_gv_cU_ProgressBarMax = lp_max;
}

void libCPCD_gf_SetProgressBarLabel (text lp_label) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libCPCD_gv_cU_ProgressBarLabelBarLeft, lp_label, PlayerGroupAll());
}

void libCPCD_gf_SetProgressBarProgress (int lp_progress) {
    // Automatic Variable Declarations
    // Implementation
    libCPCD_gv_cU_ProgressBarProgress = lp_progress;
}

void libCPCD_gf_SetProgressBarColor (color lp_color) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemColor(libCPCD_gv_cU_ProgressBarImageBar, lp_color, PlayerGroupAll());
}

void libCPCD_gf_ShowHideProgressBar (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPCD_gv_cU_ProgressBarPanel == c_invalidDialogControlId)) {
        return ;
    }

    if ((lp_showHide == true)) {
        libCPCD_gf_CU_UpdateProgressBar();
    }

    DialogControlSetVisible(libCPCD_gv_cU_ProgressBarPanel, PlayerGroupAll(), lp_showHide);
}

void libCPCD_gf_CU_UpdateProgressBar () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCPCD_gv_cU_ProgressBarProgress > 0)) {
        DialogControlSetSize(libCPCD_gv_cU_ProgressBarImageBar, PlayerGroupAll(), MaxI(1, FixedToInt((IntToFixed(libCPCD_gv_pUC_ProgressBarWidth) * (IntToFixed(libCPCD_gv_cU_ProgressBarProgress) / IntToFixed(libCPCD_gv_cU_ProgressBarMax))))), libCPCD_gv_pUC_ProgressBarHeight);
        DialogControlSetVisible(libCPCD_gv_cU_ProgressBarImageBar, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libCPCD_gv_cU_ProgressBarImageBar, PlayerGroupAll(), false);
    }
}

color libCPCD_gf_GetProgressBarColorCampaign () {
    // Automatic Variable Declarations
    // Implementation
    return Color(100.00, 61.57, 23.53);
}

trigger auto_libCPCD_gf_DisplayProgressBarUnitOld_Trigger = null;
unit auto_libCPCD_gf_DisplayProgressBarUnitOld_lp_unit;
int auto_libCPCD_gf_DisplayProgressBarUnitOld_lp_minValue;
int auto_libCPCD_gf_DisplayProgressBarUnitOld_lp_maxValue;
text auto_libCPCD_gf_DisplayProgressBarUnitOld_lp_labelText;
int auto_libCPCD_gf_DisplayProgressBarUnitOld_lp_offsetX;
int auto_libCPCD_gf_DisplayProgressBarUnitOld_lp_offsetY;
string auto_libCPCD_gf_DisplayProgressBarUnitOld_lp_attachment;

void libCPCD_gf_DisplayProgressBarUnitOld (unit lp_unit, int lp_minValue, int lp_maxValue, text lp_labelText, int lp_offsetX, int lp_offsetY, string lp_attachment) {
    auto_libCPCD_gf_DisplayProgressBarUnitOld_lp_unit = lp_unit;
    auto_libCPCD_gf_DisplayProgressBarUnitOld_lp_minValue = lp_minValue;
    auto_libCPCD_gf_DisplayProgressBarUnitOld_lp_maxValue = lp_maxValue;
    auto_libCPCD_gf_DisplayProgressBarUnitOld_lp_labelText = lp_labelText;
    auto_libCPCD_gf_DisplayProgressBarUnitOld_lp_offsetX = lp_offsetX;
    auto_libCPCD_gf_DisplayProgressBarUnitOld_lp_offsetY = lp_offsetY;
    auto_libCPCD_gf_DisplayProgressBarUnitOld_lp_attachment = lp_attachment;

    if (auto_libCPCD_gf_DisplayProgressBarUnitOld_Trigger == null) {
        auto_libCPCD_gf_DisplayProgressBarUnitOld_Trigger = TriggerCreate("auto_libCPCD_gf_DisplayProgressBarUnitOld_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_DisplayProgressBarUnitOld_Trigger, false, false);
}

bool auto_libCPCD_gf_DisplayProgressBarUnitOld_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libCPCD_gf_DisplayProgressBarUnitOld_lp_unit;
    int lp_minValue = auto_libCPCD_gf_DisplayProgressBarUnitOld_lp_minValue;
    int lp_maxValue = auto_libCPCD_gf_DisplayProgressBarUnitOld_lp_maxValue;
    text lp_labelText = auto_libCPCD_gf_DisplayProgressBarUnitOld_lp_labelText;
    int lp_offsetX = auto_libCPCD_gf_DisplayProgressBarUnitOld_lp_offsetX;
    int lp_offsetY = auto_libCPCD_gf_DisplayProgressBarUnitOld_lp_offsetY;
    string lp_attachment = auto_libCPCD_gf_DisplayProgressBarUnitOld_lp_attachment;

    // Variable Declarations
    int lv_progressBarDialog;
    int lv_progressBarPanel;
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarProgressBar;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarDialog = c_invalidDialogId;
    lv_progressBarPanel = c_invalidDialogControlId;
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarProgressBar = c_invalidDialogControlId;

    // Implementation
    if ((DataTableGetDialog(true, ("ProgressBar_" + IntToString((libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog)) + "_" + IntToString(UnitGetTag(lp_unit)))) != c_invalidDialogId)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_CPCD_507FE099"), true);
        libCPCD_gf_DestroyProgressBarUnitOld(lp_unit);
    }

    DialogCreate(210, 75, c_anchorCenter, 0, 0, true);
    lv_progressBarDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetPositionRelativeToUnit(DialogLastCreated(), lp_unit, lp_attachment, lp_offsetX, lp_offsetY);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HotS_GameUnitFrame/SmallProgressUnitFrameTemplate");
    lv_progressBarPanel = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(lv_progressBarPanel, c_triggerControlTypeLabel, "NameLabel");
    lv_progressBarLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_progressBarLabel, lp_labelText, PlayerGroupAll());
    DialogControlHookup(lv_progressBarPanel, c_triggerControlTypeLabel, "ValueLabel");
    lv_progressBarValue = DialogControlLastCreated();
    DialogControlHookup(lv_progressBarPanel, c_triggerControlTypeImage, "BarImage");
    lv_progressBarProgressBar = DialogControlLastCreated();
    DialogSetVisible(lv_progressBarDialog, PlayerGroupAll(), true);
    DataTableSetDialog(true, libCPCD_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog), lv_progressBarDialog);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCPCD_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Panel), lv_progressBarPanel);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCPCD_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar), lv_progressBarProgressBar);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCPCD_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Label), lv_progressBarLabel);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCPCD_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value), lv_progressBarValue);
    DataTableSetInt(true, libCPCD_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_MinValue), lp_minValue);
    DataTableSetInt(true, libCPCD_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_MaxValue), lp_maxValue);
    DataTableSetInt(true, libCPCD_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_OffsetX), lp_offsetX);
    DataTableSetInt(true, libCPCD_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_OffsetY), lp_offsetY);
    DataTableSetString(true, libCPCD_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_Attachment), (lp_attachment));
    while ((lp_unit != null) && (lv_progressBarDialog != c_invalidDialogId)) {
        libCPCD_gf_CU_UpdateProgressBarUnitOld(lp_unit);
        lv_progressBarDialog = DataTableGetDialog(true, libCPCD_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog));
        Wait(0.25, c_timeReal);
    }
    return true;
}

void libCPCD_gf_DestroyProgressBarUnitOld (unit lp_unit) {
    // Variable Declarations
    int lv_progressBarDialog;
    int lv_progressBarPanel;
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarProgressBar;
    int lv_noDialog;
    int lv_noDialogItem;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarDialog = c_invalidDialogId;
    lv_progressBarPanel = c_invalidDialogControlId;
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarProgressBar = c_invalidDialogControlId;
    lv_noDialog = c_invalidDialogId;
    lv_noDialogItem = c_invalidDialogControlId;

    // Implementation
    lv_progressBarDialog = DataTableGetDialog(true, libCPCD_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog));
    lv_progressBarProgressBar = libNtve_gf_ValueFromDataTableDialogItem(true, libCPCD_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar));
    lv_progressBarValue = libNtve_gf_ValueFromDataTableDialogItem(true, libCPCD_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value));
    lv_progressBarLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libCPCD_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value));
    lv_progressBarPanel = libNtve_gf_ValueFromDataTableDialogItem(true, libCPCD_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Panel));
    DialogControlDestroy(lv_progressBarPanel);
    DialogControlDestroy(lv_progressBarProgressBar);
    DialogControlDestroy(lv_progressBarValue);
    DialogControlDestroy(lv_progressBarLabel);
    DialogDestroy(lv_progressBarDialog);
    DataTableSetDialog(true, libCPCD_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog), lv_noDialog);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCPCD_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Panel), lv_noDialogItem);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCPCD_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar), lv_noDialogItem);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCPCD_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value), lv_noDialogItem);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCPCD_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Label), lv_noDialogItem);
}

void libCPCD_gf_SetProgressBarProgressUnitOld (unit lp_unit, int lp_value) {
    // Variable Declarations
    int lv_minValue;
    int lv_maxValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minValue = DataTableGetInt(true, libCPCD_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_MinValue));
    lv_maxValue = DataTableGetInt(true, libCPCD_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_MaxValue));

    // Implementation
    if (((lp_value >= lv_minValue) && (lp_value <= lv_maxValue))) {
        DataTableSetInt(true, libCPCD_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_CurValue), lp_value);
    }
    else {
        TriggerDebugOutput(1, StringToText(("Progress Bar (Unit) Value (" + IntToString(lp_value) + ") outside of set Min (" + IntToString(lv_minValue) + ") and Max (" + IntToString(lv_maxValue) + ").")), true);
    }
    libCPCD_gf_CU_UpdateProgressBarUnitOld(lp_unit);
}

void libCPCD_gf_MoveProgressBarUnitOld (unit lp_unit, int lp_offsetX, int lp_offsetY) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libCPCD_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_OffsetX), lp_offsetX);
    DataTableSetInt(true, libCPCD_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_OffsetY), lp_offsetY);
    libCPCD_gf_CU_UpdateProgressBarUnitOld(lp_unit);
}

void libCPCD_gf_SetProgresBarTitleUnitOld (unit lp_unit, text lp_titleText) {
    // Variable Declarations
    int lv_progressBarLabel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarLabel = c_invalidDialogControlId;

    // Implementation
    lv_progressBarLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libCPCD_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Label));
    libNtve_gf_SetDialogItemText(lv_progressBarLabel, lp_titleText, PlayerGroupAll());
}

void libCPCD_gf_SetProgressBarValueRangeUnitOld (unit lp_unit, int lp_minValue, int lp_maxValue) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libCPCD_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_MinValue), lp_minValue);
    DataTableSetInt(true, libCPCD_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_MaxValue), lp_maxValue);
    libCPCD_gf_CU_UpdateProgressBarUnitOld(lp_unit);
}

void libCPCD_gf_ShowHideProgressBarUnitOld (unit lp_unit, bool lp_showHide) {
    // Variable Declarations
    int lv_progressBarDialog;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarDialog = c_invalidDialogId;

    // Implementation
    lv_progressBarDialog = DataTableGetDialog(true, libCPCD_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog));
    DialogSetVisible(lv_progressBarDialog, PlayerGroupAll(), lp_showHide);
    libCPCD_gf_CU_UpdateProgressBarUnitOld(lp_unit);
}

void libCPCD_gf_CU_UpdateProgressBarUnitOld (unit lp_unit) {
    // Variable Declarations
    int lv_progressBarDialog;
    int lv_progressBarPanel;
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarProgressBar;
    const int lv_c_Width = 180;
    const int lv_c_Height = 12;
    string lv_dataTableString;
    string lv_attachmentPreset;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarDialog = c_invalidDialogId;
    lv_progressBarPanel = c_invalidDialogControlId;
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarProgressBar = c_invalidDialogControlId;
    lv_dataTableString = DataTableGetString(true, libCPCD_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_Attachment));
    lv_attachmentPreset = lv_dataTableString;

    // Implementation
    if (((lp_unit == null) || (UnitIsAlive(lp_unit) == false))) {
        libCPCD_gf_DestroyProgressBarUnitOld(lp_unit);
        return ;
    }

    lv_progressBarDialog = DataTableGetDialog(true, libCPCD_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog));
    if ((lv_progressBarDialog == c_invalidDialogId)) {
        return ;
    }

    lv_progressBarDialog = DataTableGetDialog(true, libCPCD_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog));
    lv_progressBarProgressBar = libNtve_gf_ValueFromDataTableDialogItem(true, libCPCD_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar));
    lv_progressBarValue = libNtve_gf_ValueFromDataTableDialogItem(true, libCPCD_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value));
    DialogSetPositionRelativeToUnit(lv_progressBarDialog, lp_unit, lv_attachmentPreset, DataTableGetInt(true, libCPCD_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_OffsetX)), DataTableGetInt(true, libCPCD_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_OffsetY)));
    libNtve_gf_SetDialogItemText(lv_progressBarValue, TextTimeFormat(StringToText("<sectotal/>"), DataTableGetInt(true, libCPCD_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_CurValue))), PlayerGroupAll());
    DialogControlSetSize(lv_progressBarProgressBar, PlayerGroupAll(), FixedToInt((lv_c_Width * ( (IntToFixed(DataTableGetInt(true, libCPCD_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_CurValue))) - IntToFixed(DataTableGetInt(true, libCPCD_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_MinValue)))) / (IntToFixed(DataTableGetInt(true, libCPCD_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_MaxValue))) - IntToFixed(DataTableGetInt(true, libCPCD_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_MinValue)))) ))), lv_c_Height);
    libNtve_gf_SetDialogItemColor(lv_progressBarProgressBar, libCPCD_gf_GetProgressBarColorCampaign(), PlayerGroupAll());
}

string libCPCD_gf_CU_ProgressBarUnit_DataNameOld (unit lp_unit, int lp_type) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int autoDC5BFB25_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = "ProgressBar_DataName_";
    autoDC5BFB25_val = lp_type;
    if (autoDC5BFB25_val == libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_Attachment) {
        lv_name = (lv_name + "_" + "Attachment");
    }
    else if (autoDC5BFB25_val == libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_CurValue) {
        lv_name = (lv_name + "_" + "CurValue");
    }
    else if (autoDC5BFB25_val == libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_MaxValue) {
        lv_name = (lv_name + "_" + "MaxValue");
    }
    else if (autoDC5BFB25_val == libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_MinValue) {
        lv_name = (lv_name + "_" + "MinValue");
    }
    else if (autoDC5BFB25_val == libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_OffsetX) {
        lv_name = (lv_name + "_" + "OffsetX");
    }
    else if (autoDC5BFB25_val == libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_OffsetY) {
        lv_name = (lv_name + "_" + "OffsetY");
    }
    else {
    }
    lv_name = (lv_name + "_" + IntToString(UnitGetTag(lp_unit)));
    return lv_name;
}

string libCPCD_gf_CU_ProgressBarUnit_DialogNameOld (unit lp_unit, int lp_type) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int auto27A0140E_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = "ProgressBar_DialogType_";
    auto27A0140E_val = lp_type;
    if (auto27A0140E_val == libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog) {
        lv_name = (lv_name + "_" + "Dialog");
    }
    else if (auto27A0140E_val == libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Label) {
        lv_name = (lv_name + "_" + "Label");
    }
    else if (auto27A0140E_val == libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Panel) {
        lv_name = (lv_name + "_" + "Panel");
    }
    else if (auto27A0140E_val == libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar) {
        lv_name = (lv_name + "_" + "ProgressBar");
    }
    else if (auto27A0140E_val == libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value) {
        lv_name = (lv_name + "_" + "Value");
    }
    else {
    }
    lv_name = (lv_name + "_" + IntToString(UnitGetTag(lp_unit)));
    return lv_name;
}

trigger auto_libCPCD_gf_DisplayUnitProgressBar_Trigger = null;
unit auto_libCPCD_gf_DisplayUnitProgressBar_lp_unit;
text auto_libCPCD_gf_DisplayUnitProgressBar_lp_title;
int auto_libCPCD_gf_DisplayUnitProgressBar_lp_minValue;
int auto_libCPCD_gf_DisplayUnitProgressBar_lp_maxValue;

void libCPCD_gf_DisplayUnitProgressBar (unit lp_unit, text lp_title, int lp_minValue, int lp_maxValue) {
    auto_libCPCD_gf_DisplayUnitProgressBar_lp_unit = lp_unit;
    auto_libCPCD_gf_DisplayUnitProgressBar_lp_title = lp_title;
    auto_libCPCD_gf_DisplayUnitProgressBar_lp_minValue = lp_minValue;
    auto_libCPCD_gf_DisplayUnitProgressBar_lp_maxValue = lp_maxValue;

    if (auto_libCPCD_gf_DisplayUnitProgressBar_Trigger == null) {
        auto_libCPCD_gf_DisplayUnitProgressBar_Trigger = TriggerCreate("auto_libCPCD_gf_DisplayUnitProgressBar_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_DisplayUnitProgressBar_Trigger, false, false);
}

bool auto_libCPCD_gf_DisplayUnitProgressBar_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libCPCD_gf_DisplayUnitProgressBar_lp_unit;
    text lp_title = auto_libCPCD_gf_DisplayUnitProgressBar_lp_title;
    int lp_minValue = auto_libCPCD_gf_DisplayUnitProgressBar_lp_minValue;
    int lp_maxValue = auto_libCPCD_gf_DisplayUnitProgressBar_lp_maxValue;

    // Variable Declarations
    int lv_progressBar;
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarBorder;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBar = c_invalidDialogControlId;
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarBorder = c_invalidDialogControlId;

    // Implementation
    if (((libNtve_gf_ValueFromDataTableDialogItem(true, libCPCD_gf_CU_UnitProgressBar_Dialog(lp_unit, libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Bar)) != c_invalidDialogControlId) || (libNtve_gf_ValueFromDataTableDialogItem(true, libCPCD_gf_CU_UnitProgressBar_Dialog(lp_unit, libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Broder)) != c_invalidDialogControlId) || (libNtve_gf_ValueFromDataTableDialogItem(true, libCPCD_gf_CU_UnitProgressBar_Dialog(lp_unit, libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Label)) != c_invalidDialogControlId) || (libNtve_gf_ValueFromDataTableDialogItem(true, libCPCD_gf_CU_UnitProgressBar_Dialog(lp_unit, libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Value)) != c_invalidDialogControlId))) {
        DialogControlDestroy(libNtve_gf_ValueFromDataTableDialogItem(true, libCPCD_gf_CU_UnitProgressBar_Dialog(lp_unit, libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Bar)));
        DialogControlDestroy(libNtve_gf_ValueFromDataTableDialogItem(true, libCPCD_gf_CU_UnitProgressBar_Dialog(lp_unit, libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Broder)));
        DialogControlDestroy(libNtve_gf_ValueFromDataTableDialogItem(true, libCPCD_gf_CU_UnitProgressBar_Dialog(lp_unit, libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Label)));
        DialogControlDestroy(libNtve_gf_ValueFromDataTableDialogItem(true, libCPCD_gf_CU_UnitProgressBar_Dialog(lp_unit, libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Value)));
    }

    UnitStatusBarOverride(lp_unit, c_unitStatusGroupAll);
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "NameLabel", lp_unit);
    lv_progressBarLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_progressBarLabel, lp_title, PlayerGroupAll());
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "ValueLabel", lp_unit);
    lv_progressBarValue = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "BarImage", lp_unit);
    lv_progressBar = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "BorderImage", lp_unit);
    lv_progressBarBorder = DialogControlLastCreated();
    libNtve_gf_SaveDataTableValueDialogItem(true, libCPCD_gf_CU_UnitProgressBar_Dialog(lp_unit, libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Label), lv_progressBarLabel);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCPCD_gf_CU_UnitProgressBar_Dialog(lp_unit, libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Value), lv_progressBarValue);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCPCD_gf_CU_UnitProgressBar_Dialog(lp_unit, libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Bar), lv_progressBar);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCPCD_gf_CU_UnitProgressBar_Dialog(lp_unit, libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Broder), lv_progressBarBorder);
    DataTableSetInt(true, libCPCD_gf_CU_UnitProgressBar_Data(lp_unit, libCPCD_ge_CU_UnitProgressBarDataName_MinValue), lp_minValue);
    DataTableSetInt(true, libCPCD_gf_CU_UnitProgressBar_Data(lp_unit, libCPCD_ge_CU_UnitProgressBarDataName_MaxValue), lp_maxValue);
    DataTableSetInt(true, libCPCD_gf_CU_UnitProgressBar_Data(lp_unit, libCPCD_ge_CU_UnitProgressBarDataName_CurValue), lp_minValue);
    DataTableSetBool(true, libCPCD_gf_CU_UnitProgressBar_Data2(lp_unit), true);
    DataTableSetBool(true, libCPCD_gf_CU_UnitProgressBar_IsWideBarString(lp_unit), false);
    libCPCD_gf_ShowHideUnitProgressBar(lp_unit, true);
    libCPCD_gf_CU_UpdateUnitProgressBar(lp_unit);
    return true;
}

void libCPCD_gf_SetUnitProgressBarIsWideBar (unit lp_unit, bool lp_isWideBar) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetBool(true, libCPCD_gf_CU_UnitProgressBar_IsWideBarString(lp_unit), lp_isWideBar);
}

void libCPCD_gf_SetUnitProgressBarProgress (unit lp_unit, int lp_value) {
    // Variable Declarations
    int lv_realValue;
    int lv_realValue2;
    int lv_minValue;
    int lv_maxValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minValue = DataTableGetInt(true, libCPCD_gf_CU_UnitProgressBar_Data(lp_unit, libCPCD_ge_CU_UnitProgressBarDataName_MinValue));
    lv_maxValue = DataTableGetInt(true, libCPCD_gf_CU_UnitProgressBar_Data(lp_unit, libCPCD_ge_CU_UnitProgressBarDataName_MaxValue));

    // Implementation
    lv_realValue = lp_value;
    if ((lv_minValue > lv_maxValue)) {
        lv_realValue2 = lv_minValue;
        lv_minValue = lv_maxValue;
        lv_maxValue = lv_realValue2;
    }

    if ((lp_value < lv_minValue)) {
        lv_realValue = lv_minValue;
    }
    else {
        if ((lp_value > lv_maxValue)) {
            lv_realValue = lv_maxValue;
        }

    }
    DataTableSetInt(true, libCPCD_gf_CU_UnitProgressBar_Data(lp_unit, libCPCD_ge_CU_UnitProgressBarDataName_CurValue), lv_realValue);
    libCPCD_gf_CU_UpdateUnitProgressBar(lp_unit);
}

void libCPCD_gf_SetUnitProgresBarTitle (unit lp_unit, text lp_titleText) {
    // Variable Declarations
    int lv_progressBarLabel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarLabel = c_invalidDialogControlId;

    // Implementation
    lv_progressBarLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libCPCD_gf_CU_UnitProgressBar_Dialog(lp_unit, libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Label));
    libNtve_gf_SetDialogItemText(lv_progressBarLabel, lp_titleText, PlayerGroupAll());
}

void libCPCD_gf_SetUnitProgressBarProgress2 (unit lp_unit, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libCPCD_gf_CU_UnitProgressBar_Data(lp_unit, libCPCD_ge_CU_UnitProgressBarDataName_DisplayValue), lp_value);
    libCPCD_gf_CU_UpdateUnitProgressBar(lp_unit);
}

void libCPCD_gf_SetUnitProgressBarValueRange (unit lp_unit, int lp_minValue, int lp_maxValue) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libCPCD_gf_CU_UnitProgressBar_Data(lp_unit, libCPCD_ge_CU_UnitProgressBarDataName_MinValue), lp_minValue);
    DataTableSetInt(true, libCPCD_gf_CU_UnitProgressBar_Data(lp_unit, libCPCD_ge_CU_UnitProgressBarDataName_MaxValue), lp_maxValue);
    libCPCD_gf_SetUnitProgressBarProgress(lp_unit, DataTableGetInt(true, libCPCD_gf_CU_UnitProgressBar_Dialog(lp_unit, libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Value)));
}

void libCPCD_gf_ShowHideUnitProgressBar (unit lp_unit, bool lp_showHide) {
    // Variable Declarations
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarBar;
    int lv_progressBarBorder;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarBar = c_invalidDialogControlId;
    lv_progressBarBorder = c_invalidDialogControlId;

    // Implementation
    UnitStatusBarOverride(lp_unit, c_unitStatusGroupAll);
    lv_progressBarLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libCPCD_gf_CU_UnitProgressBar_Dialog(lp_unit, libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Label));
    DialogControlSetVisible(lv_progressBarLabel, PlayerGroupAll(), lp_showHide);
    lv_progressBarValue = libNtve_gf_ValueFromDataTableDialogItem(true, libCPCD_gf_CU_UnitProgressBar_Dialog(lp_unit, libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Value));
    DialogControlSetVisible(lv_progressBarValue, PlayerGroupAll(), lp_showHide);
    lv_progressBarBar = libNtve_gf_ValueFromDataTableDialogItem(true, libCPCD_gf_CU_UnitProgressBar_Dialog(lp_unit, libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Bar));
    DialogControlSetVisible(lv_progressBarBar, PlayerGroupAll(), lp_showHide);
    lv_progressBarBorder = libNtve_gf_ValueFromDataTableDialogItem(true, libCPCD_gf_CU_UnitProgressBar_Dialog(lp_unit, libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Broder));
    DialogControlSetVisible(lv_progressBarBorder, PlayerGroupAll(), lp_showHide);
    if ((lp_showHide == true)) {
        libCPCD_gf_CU_UpdateUnitProgressBar(lp_unit);
    }

}

void libCPCD_gf_ShowHideUnitProgressBar2 (unit lp_unit, bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetBool(true, libCPCD_gf_CU_UnitProgressBar_Data2(lp_unit), (lp_showHide == true));
    libCPCD_gf_CU_UpdateUnitProgressBar(lp_unit);
}

void libCPCD_gf_CU_UpdateUnitProgressBar (unit lp_unit) {
    // Variable Declarations
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarProgressBar;
    const int lv_c_Width = 252;
    const int lv_c_WidthWide = 372;
    const int lv_c_Height = 12;
    fixed lv_progressBarWidth;
    int lv_minValue;
    int lv_curValue;
    int lv_maxValue;
    int lv_displayValue;
    int lv_swapValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarProgressBar = c_invalidDialogControlId;

    // Implementation
    lv_minValue = DataTableGetInt(true, libCPCD_gf_CU_UnitProgressBar_Data(lp_unit, libCPCD_ge_CU_UnitProgressBarDataName_MinValue));
    lv_maxValue = DataTableGetInt(true, libCPCD_gf_CU_UnitProgressBar_Data(lp_unit, libCPCD_ge_CU_UnitProgressBarDataName_MaxValue));
    lv_curValue = DataTableGetInt(true, libCPCD_gf_CU_UnitProgressBar_Data(lp_unit, libCPCD_ge_CU_UnitProgressBarDataName_CurValue));
    lv_displayValue = DataTableGetInt(true, libCPCD_gf_CU_UnitProgressBar_Data(lp_unit, libCPCD_ge_CU_UnitProgressBarDataName_DisplayValue));
    lv_progressBarProgressBar = libNtve_gf_ValueFromDataTableDialogItem(true, libCPCD_gf_CU_UnitProgressBar_Dialog(lp_unit, libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Bar));
    lv_progressBarValue = libNtve_gf_ValueFromDataTableDialogItem(true, libCPCD_gf_CU_UnitProgressBar_Dialog(lp_unit, libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Value));
    if (((lv_progressBarProgressBar == c_invalidDialogControlId) || (lv_progressBarValue == c_invalidDialogControlId))) {
        return ;
    }

    if ((lv_displayValue == -99999)) {
        libNtve_gf_SetDialogItemText(lv_progressBarValue, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lv_curValue), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemText(lv_progressBarValue, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lv_displayValue), PlayerGroupAll());
    }
    if ((DataTableGetBool(true, libCPCD_gf_CU_UnitProgressBar_Data2(lp_unit)) == true)) {
        DialogControlSetVisible(lv_progressBarValue, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(lv_progressBarValue, PlayerGroupAll(), false);
    }
    if ((lv_minValue > lv_maxValue)) {
        lv_swapValue = lv_minValue;
        lv_minValue = lv_maxValue;
        lv_maxValue = lv_swapValue;
        lv_curValue = (lv_maxValue-lv_curValue);
    }

    if ((DataTableGetBool(true, libCPCD_gf_CU_UnitProgressBar_IsWideBarString(lp_unit)) == true)) {
        lv_progressBarWidth = (lv_c_WidthWide * ( (IntToFixed(lv_curValue) - IntToFixed(lv_minValue)) / (IntToFixed(lv_maxValue) - IntToFixed(lv_minValue)) ));
    }
    else {
        lv_progressBarWidth = (lv_c_Width * ( (IntToFixed(lv_curValue) - IntToFixed(lv_minValue)) / (IntToFixed(lv_maxValue) - IntToFixed(lv_minValue)) ));
    }
    DialogControlSetSize(lv_progressBarProgressBar, PlayerGroupAll(), MaxI(FixedToInt(lv_progressBarWidth), 1), lv_c_Height);
}

string libCPCD_gf_CU_UnitProgressBar_Data (unit lp_unit, int lp_type) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int auto23E3858F_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = "ProgressBar_DataName_";
    auto23E3858F_val = lp_type;
    if (auto23E3858F_val == libCPCD_ge_CU_UnitProgressBarDataName_CurValue) {
        lv_name = (lv_name + "_" + "CurValue");
    }
    else if (auto23E3858F_val == libCPCD_ge_CU_UnitProgressBarDataName_MaxValue) {
        lv_name = (lv_name + "_" + "MaxValue");
    }
    else if (auto23E3858F_val == libCPCD_ge_CU_UnitProgressBarDataName_MinValue) {
        lv_name = (lv_name + "_" + "MinValue");
    }
    else if (auto23E3858F_val == libCPCD_ge_CU_UnitProgressBarDataName_DisplayValue) {
        lv_name = (lv_name + "_" + "DisValue");
    }
    else {
    }
    lv_name = (lv_name + "_" + IntToString(UnitGetTag(lp_unit)));
    return lv_name;
}

string libCPCD_gf_CU_UnitProgressBar_Data2 (unit lp_unit) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = "ProgressBar_ValueShow_";
    lv_name = (lv_name + "_" + IntToString(UnitGetTag(lp_unit)));
    return lv_name;
}

string libCPCD_gf_CU_UnitProgressBar_IsWideBarString (unit lp_unit) {
    // Variable Declarations
    string lv_isWideBar;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_isWideBar = "";

    // Implementation
    lv_isWideBar = "ProgressBar_IsWideBar_";
    lv_isWideBar = (lv_isWideBar + "_" + IntToString(UnitGetTag(lp_unit)));
    return lv_isWideBar;
}

string libCPCD_gf_CU_UnitProgressBar_Dialog (unit lp_unit, int lp_type) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int auto692C6C4A_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = "ProgressBar_DialogType_";
    auto692C6C4A_val = lp_type;
    if (auto692C6C4A_val == libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Label) {
        lv_name = (lv_name + "_" + "Label");
    }
    else if (auto692C6C4A_val == libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Value) {
        lv_name = (lv_name + "_" + "Value");
    }
    else if (auto692C6C4A_val == libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Bar) {
        lv_name = (lv_name + "_" + "ProgressBar");
    }
    else if (auto692C6C4A_val == libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Broder) {
        lv_name = (lv_name + "_" + "ProgressBarBorder");
    }
    else {
    }
    lv_name = (lv_name + "_" + IntToString(UnitGetTag(lp_unit)));
    return lv_name;
}

trigger auto_libCPCD_gf_HeroReviveHandleDeath_Trigger = null;
int auto_libCPCD_gf_HeroReviveHandleDeath_lp_player;

void libCPCD_gf_HeroReviveHandleDeath (int lp_player) {
    auto_libCPCD_gf_HeroReviveHandleDeath_lp_player = lp_player;

    if (auto_libCPCD_gf_HeroReviveHandleDeath_Trigger == null) {
        auto_libCPCD_gf_HeroReviveHandleDeath_Trigger = TriggerCreate("auto_libCPCD_gf_HeroReviveHandleDeath_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_HeroReviveHandleDeath_Trigger, false, false);
}

bool auto_libCPCD_gf_HeroReviveHandleDeath_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCPCD_gf_HeroReviveHandleDeath_lp_player;

    // Variable Declarations
    fixed lv_reviveDuration;
    text lv_tip;
    text lv_subtip;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reviveDuration = 60.0;

    // Implementation
    libCPGL_gv_commander[lp_player].lv_heroDeathCount += 1;
    lv_reviveDuration = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, libCOOC_gf_CC_CommanderHeroNormalReviveBehavior(libCPGL_gf_ActiveCommanderForPlayer2(lp_player)), "Duration", lp_player));
    libCOUI_gv_cU_HeroReviveTimer[1][lp_player] = lv_reviveDuration;
    if ((libCPGL_gv_commander[lp_player].lv_heroDeathCount > 0)) {
        if ((libCPCD_gf_CDTownHall(lp_player) == null) && (libCPGL_gv_commander[lp_player].lv_commander != "Dehaka") && (libCPGL_gv_commander[lp_player].lv_commander != "Stetmann")) {
            libCPCD_gf_DisplayCampaignMessage(PlayerGroupSingle(lp_player), libCPCD_ge_CampaignMessageType_Warning, libCPCD_gf_HeroReviveMessageNoTownHall(lp_player), libCPCD_ge_CampaignMessageFormatNotFormat_FormatMessage);
        }
        else {
            libCPCD_gf_DisplayCampaignMessage(PlayerGroupSingle(lp_player), libCPCD_ge_CampaignMessageType_Warning, libCPCD_gf_HeroReviveMessageNormal(lp_player, lv_reviveDuration), libCPCD_ge_CampaignMessageFormatNotFormat_FormatMessage);
        }
        libNtve_gf_PlayerRemoveCooldown(lp_player, libCPGL_gv_commander[lp_player].lv_heroReviveLink);
        if ((libCPGL_gv_commander[lp_player].lv_commander == "Nova")) {
            TechTreeUpgradeAddLevel(lp_player, "NovaBuybackUnlock", 1);
        }

        Wait(2.0, c_timeGame);
    }
    else {
        libNtve_gf_PlayerRemoveCooldown(lp_player, libCPGL_gv_commander[lp_player].lv_heroReviveLink);
        Wait(0.0625, c_timeGame);
    }
    while (((UnitGroupCount(UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventReveal), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (libCPGL_gv_commander[lp_player].lv_heroBeaconIsHeroStructure == false))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(libCPGL_gv_commander[lp_player].lv_heroUnit) == false)) {
        if ((libCPGL_gv_commander[lp_player].lv_heroBeaconIsHeroStructure == true)) {
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, libCPGL_gv_commander[lp_player].lv_heroBeaconType, 0, lp_player, UnitGetPosition(libCPCD_gf_CDTownHall(lp_player)));
            libCPGL_gv_commander[lp_player].lv_heroBeacon = UnitLastCreated();
            UnitCreateEffectUnit(libCPGL_gv_commander[lp_player].lv_heroBeacon, "CopyTargetSelectionAndControlGroups", libCPGL_gv_commander[lp_player].lv_heroUnit);
        }
        if ((PlayerRace(lp_player) == "Zerg") && (libCPGL_gv_commander[lp_player].lv_heroBeaconIsHeroStructure == true)) {
            UnitCreateEffectUnit(libCPCD_gf_CDTownHall(lp_player), "CopyHatcheryRally", libCPGL_gv_commander[lp_player].lv_heroBeacon);
        }

        libCPCD_gf_SetHeroPanelUnit(1, libCPGL_gv_commander[lp_player].lv_heroBeacon, lp_player);
        if ((libCPGL_gv_commander[lp_player].lv_heroDeathCount > 0)) {
            UnitBehaviorAdd(libCPGL_gv_commander[lp_player].lv_heroBeacon, libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[2], libCPGL_gv_commander[lp_player].lv_heroBeacon, 1);
            UnitBehaviorAdd(libCPGL_gv_commander[lp_player].lv_heroBeacon, libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[3], libCPGL_gv_commander[lp_player].lv_heroBeacon, 1);
            libNtve_gf_PlayerRemoveCooldown(lp_player, libCPGL_gv_commander[lp_player].lv_heroReviveLink);
            PlayerAddCooldown(lp_player, libCPGL_gv_commander[lp_player].lv_heroReviveLink, lv_reviveDuration);
        }
        else {
            UnitBehaviorAdd(libCPGL_gv_commander[lp_player].lv_heroBeacon, libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[1], libCPGL_gv_commander[lp_player].lv_heroBeacon, 1);
            lv_reviveDuration = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[1], "Duration", lp_player));
            libCPGL_gv_commander[lp_player].lv_heroTimer = lv_reviveDuration;
            libNtve_gf_PlayerRemoveCooldown(lp_player, libCPGL_gv_commander[lp_player].lv_heroReviveLink);
            PlayerAddCooldown(lp_player, libCPGL_gv_commander[lp_player].lv_heroReviveLink, lv_reviveDuration);
        }
        UnitIssueOrder(libCPGL_gv_commander[lp_player].lv_heroBeacon, OrderTargetingUnit(AbilityCommand("RallyHatchery", 1), libCPGL_gv_commander[lp_player].lv_heroBeacon), c_orderQueueReplace);
        UnitIssueOrder(libCPGL_gv_commander[lp_player].lv_heroBeacon, OrderTargetingUnit(AbilityCommand("RallyHatchery", 2), libCPGL_gv_commander[lp_player].lv_heroBeacon), c_orderQueueReplace);
        UnitSetFacing(libCPGL_gv_commander[lp_player].lv_heroUnit, UnitGetFacing(libCPGL_gv_commander[lp_player].lv_heroBeacon), 0.0);
        if ((libCPGL_gv_commander[lp_player].lv_heroDeathCount > 0)) {
            UnitSetState(libCPGL_gv_commander[lp_player].lv_heroBeacon, c_unitStateTooltipable, true);
            lv_tip = UnitTypeGetName(UnitGetType(libCPGL_gv_commander[lp_player].lv_heroBeacon));
            libCPGL_gf_SetUnitInfoTextCampaign(libCPGL_gv_commander[lp_player].lv_heroBeacon, null, lv_tip, lv_subtip);
        }

        UnitSetPropertyFixed(libCPGL_gv_commander[lp_player].lv_heroBeacon, c_unitPropLife, 0.1);
        UnitSetPropertyFixed(libCPGL_gv_commander[lp_player].lv_heroBeacon, c_unitPropLifeRegen, (UnitGetPropertyFixed(libCPGL_gv_commander[lp_player].lv_heroBeacon, c_unitPropLifeMax, c_unitPropCurrent)/lv_reviveDuration));
        UnitSetPropertyFixed(libCPGL_gv_commander[lp_player].lv_heroBeacon, c_unitPropShieldsRegen, (UnitGetPropertyFixed(libCPGL_gv_commander[lp_player].lv_heroBeacon, c_unitPropShieldsMax, c_unitPropCurrent)/lv_reviveDuration));
        UnitSetPropertyFixed(libCPGL_gv_commander[lp_player].lv_heroBeacon, c_unitPropEnergyRegen, (UnitGetPropertyFixed(libCPGL_gv_commander[lp_player].lv_heroBeacon, c_unitPropEnergyMax, c_unitPropCurrent)/lv_reviveDuration));
        if ((libCPGL_gv_commander[lp_player].lv_commander == "Nova")) {
            if ((libCPGL_gv_commander[lp_player].lv_heroDeathCount > 0)) {
                TriggerEnable(libCPCD_gt_HeroReviveNovaBuyBackAdjustment, true);
            }

        }

        libCPCD_gf_HeroReviveWait(lp_player);
        Wait(10.0, c_timeGame);
        if ((UnitIsAlive(libCPGL_gv_commander[lp_player].lv_heroUnit) == false) && (UnitIsValid(libCPGL_gv_commander[lp_player].lv_heroBeacon) == true)) {
            UnitSetPosition(libCPGL_gv_commander[lp_player].lv_heroUnit, UnitGetPosition(libCPGL_gv_commander[lp_player].lv_heroBeacon), false);
        }

    }

    return true;
}

text libCPCD_gf_HeroReviveMessageNormal (int lp_player, fixed lp_duration) {
    // Automatic Variable Declarations
    string auto0BB6663D_val;

    // Implementation
    auto0BB6663D_val = libCPGL_gf_ActiveCommanderForPlayer2(lp_player);
    if (auto0BB6663D_val == "ZergKerrigan") {
        TextExpressionSetToken("Param/Expression/lib_CPCD_EC6E53A6", "Duration", FixedToText(lp_duration, 0));
        return TextExpressionAssemble("Param/Expression/lib_CPCD_EC6E53A6");
    }
    else if (auto0BB6663D_val == "ZergZagara") {
        TextExpressionSetToken("Param/Expression/lib_CPCD_46BC2108", "Duration", FixedToText(lp_duration, 0));
        return TextExpressionAssemble("Param/Expression/lib_CPCD_46BC2108");
    }
    else if (auto0BB6663D_val == "TerranNova") {
        TextExpressionSetToken("Param/Expression/lib_CPCD_C6F5F527", "Duration", FixedToText(lp_duration, 0));
        return TextExpressionAssemble("Param/Expression/lib_CPCD_C6F5F527");
    }
    else if (auto0BB6663D_val == "ProtossAlarak") {
        TextExpressionSetToken("Param/Expression/lib_CPCD_84E4B190", "Duration", FixedToText(lp_duration, 0));
        return TextExpressionAssemble("Param/Expression/lib_CPCD_84E4B190");
    }
    else if (auto0BB6663D_val == "ZergDehaka") {
        TextExpressionSetToken("Param/Expression/lib_CPCD_191D09D7", "Duration", FixedToText(lp_duration, 0));
        return TextExpressionAssemble("Param/Expression/lib_CPCD_191D09D7");
    }
    else if (auto0BB6663D_val == "ProtossZeratul") {
        TextExpressionSetToken("Param/Expression/lib_CPCD_0C64C748", "Duration", FixedToText(lp_duration, 0));
        return TextExpressionAssemble("Param/Expression/lib_CPCD_0C64C748");
    }
    else if (auto0BB6663D_val == "ZergStetmann") {
        TextExpressionSetToken("Param/Expression/lib_CPCD_D25F6CA2", "Duration", FixedToText(lp_duration, 0));
        return TextExpressionAssemble("Param/Expression/lib_CPCD_D25F6CA2");
    }
    else {
        return TextExpressionAssemble("Param/Expression/lib_CPCD_6A08FB25");
    }
}

text libCPCD_gf_HeroReviveMessageNoTownHall (int lp_player) {
    // Automatic Variable Declarations
    string auto544552D2_val;

    // Implementation
    auto544552D2_val = libCPGL_gf_ActiveCommanderForPlayer2(lp_player);
    if (auto544552D2_val == "ZergKerrigan") {
        return StringExternal("Param/Value/lib_CPCD_85529931");
    }
    else if (auto544552D2_val == "ZergZagara") {
        return StringExternal("Param/Value/lib_CPCD_CDA2AA67");
    }
    else if (auto544552D2_val == "ProtossAlarak") {
        return StringExternal("Param/Value/lib_CPCD_E9282740");
    }
    else if (auto544552D2_val == "TerranNova") {
        return StringExternal("Param/Value/lib_CPCD_2CD65050");
    }
    else if (auto544552D2_val == "ZergDehaka") {
        return StringExternal("Param/Value/lib_CPCD_EC6B3D1E");
    }
    else if (auto544552D2_val == "ProtossZeratul") {
        return StringExternal("Param/Value/lib_CPCD_B0E2A38E");
    }
    else if (auto544552D2_val == "ZergStetmann") {
        return StringExternal("Param/Value/lib_CPCD_6C3BBAFA");
    }
    else {
    }
    return TextExpressionAssemble("Param/Expression/lib_CPCD_8D536BCA");
}

text libCPCD_gf_HeroReviveMessageComplete (int lp_player) {
    // Automatic Variable Declarations
    string autoC6666E10_val;

    // Implementation
    autoC6666E10_val = libCPGL_gf_ActiveCommanderForPlayer2(lp_player);
    if (autoC6666E10_val == "ZergKerrigan") {
        if ((libCPGL_gv_commander[lp_player].lv_heroDeathCount > 0)) {
            return StringExternal("Param/Value/lib_CPCD_EEF864B5");
        }
        else {
            return StringExternal("Param/Value/lib_CPCD_A7D84567");
        }
    }
    else if (autoC6666E10_val == "ZergZagara") {
        if ((libCPGL_gv_commander[lp_player].lv_heroDeathCount > 0)) {
            return StringExternal("Param/Value/lib_CPCD_298E0ADD");
        }
        else {
            return StringExternal("Param/Value/lib_CPCD_1F6663A9");
        }
    }
    else if (autoC6666E10_val == "TerranNova") {
        if ((libCPGL_gv_commander[lp_player].lv_heroDeathCount > 0)) {
            return StringExternal("Param/Value/lib_CPCD_AB70B272");
        }
        else {
            return StringExternal("Param/Value/lib_CPCD_E11F9E00");
        }
    }
    else if (autoC6666E10_val == "ProtossAlarak") {
        if ((libCPGL_gv_commander[lp_player].lv_heroDeathCount > 0)) {
            return StringExternal("Param/Value/lib_CPCD_AC3DCD0E");
        }
        else {
            return StringExternal("Param/Value/lib_CPCD_DD4EB632");
        }
    }
    else if (autoC6666E10_val == "ZergDehaka") {
        if ((libCPGL_gv_commander[lp_player].lv_heroDeathCount > 0)) {
            return StringExternal("Param/Value/lib_CPCD_B854B044");
        }
        else {
            return StringExternal("Param/Value/lib_CPCD_AB8EE354");
        }
    }
    else if (autoC6666E10_val == "ProtossZeratul") {
        if ((libCPGL_gv_commander[lp_player].lv_heroDeathCount > 0)) {
            return StringExternal("Param/Value/lib_CPCD_25C7064C");
        }
        else {
            return StringExternal("Param/Value/lib_CPCD_19266CE1");
        }
    }
    else if (autoC6666E10_val == "ZergStetmann") {
        if ((libCPGL_gv_commander[lp_player].lv_heroDeathCount > 0)) {
            return StringExternal("Param/Value/lib_CPCD_87C86A4F");
        }
        else {
            return StringExternal("Param/Value/lib_CPCD_1E989BF9");
        }
    }
    else {
    }
    return TextExpressionAssemble("Param/Expression/lib_CPCD_1F41B1E6");
}

trigger auto_libCPCD_gf_HeroReviveWait_Trigger = null;
int auto_libCPCD_gf_HeroReviveWait_lp_player;

void libCPCD_gf_HeroReviveWait (int lp_player) {
    auto_libCPCD_gf_HeroReviveWait_lp_player = lp_player;

    if (auto_libCPCD_gf_HeroReviveWait_Trigger == null) {
        auto_libCPCD_gf_HeroReviveWait_Trigger = TriggerCreate("auto_libCPCD_gf_HeroReviveWait_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_HeroReviveWait_Trigger, false, false);
}

bool auto_libCPCD_gf_HeroReviveWait_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCPCD_gf_HeroReviveWait_lp_player;

    // Variable Declarations
    point lv_reviveFallbackPoint;
    string lv_commander;
    fixed lv_initialWarpIn;

    // Automatic Variable Declarations
    unitgroup auto7A805B96_g;
    int auto7A805B96_u;
    unit auto7A805B96_var;

    // Variable Initialization
    lv_commander = libCPGL_gf_ActiveCommanderForPlayer2(lp_player);

    // Implementation
    if ((libCPGL_gv_commander[lp_player].lv_commander == "Alarak")) {
        lv_initialWarpIn = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "AlarakReviveWarpInIntro", "Duration", lp_player);
    }
    else if ((libCPGL_gv_commander[lp_player].lv_commander == "Stetmann")) {
        lv_initialWarpIn = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "GaryReviveIntro", "Duration", lp_player);
    }
    else if ((libCPGL_gv_commander[lp_player].lv_commander == "Zeratul")) {
        lv_initialWarpIn = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "ZeratulReviveWarpIn", "Duration", lp_player);
    }
    while (!((PlayerGetCooldown(lp_player, libCPGL_gv_commander[lp_player].lv_heroReviveLink) <= (0.0 + lv_initialWarpIn)))) {
        Wait(1.0, c_timeGame);
    }
    if ((libCPGL_gv_cM_GameOverResult != libCPGL_ge_CampaignMissionGameResultType_None)) {
        return true;
    }

    UnitBehaviorAdd(libCPGL_gv_commander[lp_player].lv_heroUnit, "SuppressCollisionRevive", libCPGL_gv_commander[lp_player].lv_heroUnit, 1);
    if ((libCPCD_gv_cM_HeroReviveTargetLocation[lp_player] != null)) {
        UnitIssueOrder(libCPGL_gv_commander[lp_player].lv_heroUnit, libNtve_gf_ReviveOrderTargetingPoint(AbilityCommand("NovaRevive", 20), libCPCD_gv_cM_HeroReviveTargetLocation[lp_player], libCPGL_gv_commander[lp_player].lv_heroUnit), c_orderQueueReplace);
        lv_reviveFallbackPoint = libCPCD_gv_cM_HeroReviveTargetLocation[lp_player];
        libCPCD_gv_cM_HeroReviveTargetLocation[lp_player] = null;
    }
    else {
        UnitIssueOrder(libCPGL_gv_commander[lp_player].lv_heroBeacon, libNtve_gf_ReviveOrderWithNoTarget(libCPGL_gv_commander[lp_player].lv_heroReviveCommand, libCPGL_gv_commander[lp_player].lv_heroUnit), c_orderQueueReplace);
        lv_reviveFallbackPoint = UnitGetPosition(libCPGL_gv_commander[lp_player].lv_heroBeacon);
    }
    libCPCD_gf_SetHeroPanelUnit(1, libCPGL_gv_commander[lp_player].lv_heroUnit, lp_player);
    Wait(0.125, c_timeGame);
    if ((UnitIsAlive(libCPGL_gv_commander[lp_player].lv_heroUnit) == false)) {
        UnitRevive(libCPGL_gv_commander[lp_player].lv_heroUnit);
        UnitCreateEffectUnit(libCPGL_gv_commander[lp_player].lv_heroUnit, "KerriganReviveHeal", libCPGL_gv_commander[lp_player].lv_heroUnit);
        if ((RegionContainsPoint(RegionPlayableMap(), lv_reviveFallbackPoint) == true)) {
            UnitSetPosition(libCPGL_gv_commander[lp_player].lv_heroUnit, lv_reviveFallbackPoint, false);
        }
        else {
            UnitSetPosition(libCPGL_gv_commander[lp_player].lv_heroUnit, PlayerStartLocation(lp_player), false);
        }
    }

    auto7A805B96_g = UnitGroupSelected(lp_player);
    auto7A805B96_u = UnitGroupCount(auto7A805B96_g, c_unitCountAll);
    for (;; auto7A805B96_u -= 1) {
        auto7A805B96_var = UnitGroupUnitFromEnd(auto7A805B96_g, auto7A805B96_u);
        if (auto7A805B96_var == null) { break; }
        if ((auto7A805B96_var == libCPGL_gv_commander[lp_player].lv_heroBeacon)) {
            UnitSelect(libCPGL_gv_commander[lp_player].lv_heroUnit, lp_player, true);
        }

    }
    UnitSelect(libCPGL_gv_commander[lp_player].lv_heroBeacon, lp_player, false);
    if ((libCPGL_gv_commander[lp_player].lv_heroBeaconIsHeroStructure == false)) {
        UnitCreateEffectUnit(libCPGL_gv_commander[lp_player].lv_heroUnit, "CopyTargetSelectionAndControlGroups", libCPGL_gv_commander[lp_player].lv_heroBeacon);
        UnitKill(libCPGL_gv_commander[lp_player].lv_heroBeacon);
    }
    else {
        libNtve_gf_SendActorMessageToUnit(libCPGL_gv_commander[lp_player].lv_heroBeacon, "Signal HeroRevive");
        UnitBehaviorRemove(libCPGL_gv_commander[lp_player].lv_heroBeacon, libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[1], c_unitBehaviorCountAll);
        UnitBehaviorRemove(libCPGL_gv_commander[lp_player].lv_heroBeacon, libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[2], c_unitBehaviorCountAll);
        UnitBehaviorRemove(libCPGL_gv_commander[lp_player].lv_heroBeacon, libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[3], c_unitBehaviorCountAll);
    }
    if ((libCPGL_gv_commander[lp_player].lv_commander != "Dehaka")) {
        UnitIssueOrder(libCPGL_gv_commander[lp_player].lv_heroUnit, Order(AbilityCommand("K5KerriganUnburrow", 0)), c_orderQueueReplace);
    }

    libCPCD_gf_DisplayCampaignMessage(PlayerGroupSingle(lp_player), libCPCD_ge_CampaignMessageType_SimpleHint, libCPCD_gf_HeroReviveMessageComplete(lp_player), libCPCD_ge_CampaignMessageFormatNotFormat_FormatMessage);
    if ((libCPGL_gv_commander[lp_player].lv_commander == "Nova")) {
        TriggerEnable(libCPCD_gt_HeroReviveNovaBuyBackAdjustment, false);
        CatalogFieldValueSet(c_gameCatalogAbil, "NovaReviveInstantBuyback", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeMinerals) + "]", lp_player, "450");
    }

    if ((libCPGL_gv_commander[lp_player].lv_commander == "Dehaka")) {
        libCPCD_gf_CDDehakaLevelUp(lp_player, libCPGL_gv_commander[lp_player].lv_heroUnit);
    }

    if ((libCPGL_gv_commander[lp_player].lv_commander == "Zeratul")) {
        UnitBehaviorAdd(libCPGL_gv_commander[lp_player].lv_heroUnit, "ZeratulProphecyCooldownTracker", libCPGL_gv_commander[lp_player].lv_heroUnit, 1);
    }

    return true;
}

void libCPCD_gf_HeroCreate (point lp_spawnPoint, int lp_player, fixed lp_facing, int lp_flags) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreate(1, libCPGL_gv_commander[lp_player].lv_heroUnitType, lp_flags, lp_player, lp_spawnPoint, lp_facing);
    libCPGL_gv_commander[lp_player].lv_heroUnit = UnitLastCreated();
}

void libCPCD_gf_HeroStructureCreate (point lp_spawnPoint, int lp_player, fixed lp_facing, int lp_flags) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPGL_gv_commander[lp_player].lv_commander != "Fenix")) {
        UnitCreate(1, libCPGL_gv_commander[lp_player].lv_heroStructureType, lp_flags, lp_player, lp_spawnPoint, lp_facing);
    }
    else {
        if ((libCPGL_gv_commander[lp_player].lv_commanderLevel > 1)) {
            UnitCreate(1, libCPGL_gv_commander[lp_player].lv_heroStructureType, lp_flags, lp_player, lp_spawnPoint, lp_facing);
        }

    }
    if ((libCPGL_gv_commander[lp_player].lv_commander == "Swann")) {
        libCPCD_gv_cDSwannLaserDrill[lp_player] = UnitLastCreated();
        libCPCD_gv_cDSwannLaserDrillGroup[lp_player] = libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated());
    }

    if ((libCPGL_gv_commander[lp_player].lv_heroBeaconIsHeroStructure == true)) {
        libCPGL_gv_commander[lp_player].lv_heroBeacon = UnitLastCreated();
    }

    if ((libCPGL_gv_commander[lp_player].lv_commander == "Fenix")) {
        libCPCD_gv_cDFenixChampionStructure[lp_player] = UnitLastCreated();
    }

    if ((libCPGL_gv_commander[lp_player].lv_commander == "Tychus")) {
        libCPCD_gf_CDTychusUISetBarUnit(UnitLastCreated());
    }

    if ((libCPGL_gv_commander[lp_player].lv_commander == "Zeratul")) {
        libCPCD_gv_cDZeratulHeroStructure[lp_player] = UnitLastCreated();
        libCPCD_gv_cDZeratulHeroStructureGroup[lp_player] = libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated());
    }

    libCPGL_gv_commander[lp_player].lv_heroStructure = UnitLastCreated();
}

void libCPCD_gf_HeroSpawn (int lp_player) {
    // Variable Declarations
    point lv_spawnPoint;
    point lv_mineralPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCPGL_gv_commander[lp_player].lv_commander != null) && (libCPGL_gv_commander[lp_player].lv_heroAllowed == true)) {
        lv_spawnPoint = PlayerStartLocation(lp_player);
        libCPCD_gf_HeroCreate(lv_spawnPoint, lp_player, 270.0, c_unitCreateIgnoreBirth);
        libCPCD_gf_SetHeroPanelUnit(1, UnitLastCreated(), lp_player);
        if ((libCPGL_gv_commander[lp_player].lv_commander == "Dehaka")) {
            UnitBehaviorAdd(libCPGL_gv_commander[lp_player].lv_heroUnit, libCPCD_gv_cDDehakaVeterencyBehavior[lp_player], libCPGL_gv_commander[lp_player].lv_heroUnit, 1);
        }

        if ((TechTreeUpgradeCount(lp_player, "MasteryDehakaAttackSpeed", c_techCountCompleteOnly) >= 1)) {
            libCPCD_gv_cDDehakaEssenceAttribute = "DehakaAttEssenceMastery";
            UnitBehaviorAdd(libCPGL_gv_commander[lp_player].lv_heroUnit, "DehakaAttEssenceMastery", libCPGL_gv_commander[lp_player].lv_heroUnit, 1);
            UnitBehaviorRemove(libCPGL_gv_commander[lp_player].lv_heroUnit, "DehakaAttEssence", 1);
        }

        UnitBehaviorAdd(libCPGL_gv_commander[lp_player].lv_heroUnit, "ZergGenericDeath", libCPGL_gv_commander[lp_player].lv_heroUnit, 1);
        UnitSetPosition(libCPGL_gv_commander[lp_player].lv_heroUnit, Point(0.0, 0.0), false);
        UnitKill(libCPGL_gv_commander[lp_player].lv_heroUnit);
    }

    if ((libCPGL_gv_commander[lp_player].lv_heroStructureAllowed == true) && (libCPGL_gv_commander[lp_player].lv_heroStructureType != null)) {
        lv_mineralPoint = UnitGroupCenterOfGroup(UnitGroup(null, c_playerAny, RegionCircle(PlayerStartLocation(lp_player), 10.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        lv_spawnPoint = libNtve_gf_PointOffsetTowardsPoint(lv_mineralPoint, 13.0, PlayerStartLocation(lp_player));
        libCPCD_gf_HeroStructureCreate(lv_spawnPoint, lp_player, 225.0, 0);
        if ((libCPGL_gv_commander[lp_player].lv_commander == "Nova")) {
            UnitBehaviorAdd(UnitLastCreated(), "NovaCoopGhostAcademyLandingIntro", UnitLastCreated(), 1);
        }

    }

}

void libCPCD_gf_GlobalCasterCreateUnit (int lp_player) {
    // Automatic Variable Declarations
    string autoEA6D992D_val;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, libCPGL_gv_commander[lp_player].lv_globalCasterUnitType, c_unitCreateIgnorePlacement, lp_player, Point(0.0, 0.0));
    libCPGL_gv_commander[lp_player].lv_globalCasterUnit = UnitLastCreated();
    libCPGL_gv_commander[lp_player].lv_globalCasterGroup = libNtve_gf_ConvertUnitToUnitGroup(libCPGL_gv_commander[lp_player].lv_globalCasterUnit);
    autoEA6D992D_val = libCOOC_gf_ActiveCommanderForPlayer(lp_player);
    if (autoEA6D992D_val == "ProtossZeratul") {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CoopCasterZeratulSpecialization", c_unitCreateIgnorePlacement, lp_player, Point(0.0, 0.0));
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitSecondary = UnitLastCreated();
        libCPGL_gv_commander[lp_player].lv_globalCasterGroupSecondary = libNtve_gf_ConvertUnitToUnitGroup(libCPGL_gv_commander[lp_player].lv_globalCasterUnitSecondary);
    }
    else if (autoEA6D992D_val == "ZergStukov") {
        libCPCD_gf_CM_Stukov_InfestStructureInitialCooldown(lp_player);
    }
    else if (autoEA6D992D_val == "TerranTychus") {
        libCPCD_gv_cDTychusUIBar[0] = UnitLastCreated();
    }
    else if (autoEA6D992D_val == "TerranMengsk") {
        libCPCD_gf_CM_Mengsk_GlobalCasterEnergyRegen(libCPGL_gv_commander[lp_player].lv_globalCasterUnit);
    }
    else {
    }
    UnitSetState(libCPGL_gv_commander[lp_player].lv_globalCasterUnit, c_unitStateInvulnerable, true);
    UnitSetState(libCPGL_gv_commander[lp_player].lv_globalCasterUnitSecondary, c_unitStateInvulnerable, true);
    libCPCD_gf_GPSetUnit(libCPGL_gv_commander[lp_player].lv_globalCasterUnit, lp_player);
    libCPCD_gf_GPTMCasterUnitSet(libCPGL_gv_commander[lp_player].lv_globalCasterUnit, lp_player);
}

void libCPCD_gf_CM_PlayerSetGlobalCaster2 (int lp_player) {
    // Variable Declarations
    point lv_spawnPoint;
    point lv_spawnPoint2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCPGL_gv_commander[lp_player].lv_globalCasterUnitAllowed == true)) {
        libCPCD_gf_GlobalCasterCreateUnit(lp_player);
    }

    if ((libCPGL_gv_commander[lp_player].lv_commander == "Artanis")) {
        lv_spawnPoint2 = UnitGroupCenterOfGroup(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(libCPCD_gf_CDTownHall(lp_player)), 10.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        lv_spawnPoint = libNtve_gf_PointOffsetTowardsPoint(lv_spawnPoint2, 13.0, UnitGetPosition(libCPCD_gf_CDTownHall(lp_player)));
        UnitCreateEffectPoint(libCPGL_gv_commander[lp_player].lv_globalCasterUnit, "SOAPylonPowerCoop", lv_spawnPoint);
    }

}

void libCPCD_gf_GPInit (int lp_player) {
    // Automatic Variable Declarations
    string auto96859156_val;

    // Implementation
    if ((libCPCD_gv_globalPowerInitialized[lp_player] == true)) {
        return ;
    }

    libCPCD_gv_globalPowerInitialized[lp_player] = true;
    if ((libCPCD_gv_globalPowerPanelHolder == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/GlobalCastingPanel");
        libCPCD_gv_globalPowerPanelHolder = DialogControlLastCreated();
        DialogControlSetVisible(libCPCD_gv_globalPowerPanelHolder, PlayerGroupAll(), false);
    }

    auto96859156_val = libCPGL_gv_commander[lp_player].lv_commander;
    if (auto96859156_val == "Artanis") {
        libCPCD_gf_GPInitProtoss(lp_player);
    }
    else if (auto96859156_val == "Vorazun") {
        libCPCD_gf_GPInitProtoss(lp_player);
    }
    else if (auto96859156_val == "Karax") {
        libCPCD_gf_GPInitProtoss(lp_player);
    }
    else if (auto96859156_val == "Alarak") {
        libCPCD_gf_GPInitAlarak(lp_player);
    }
    else if (auto96859156_val == "Fenix") {
        libCPCD_gf_GPInitFenix(lp_player);
    }
    else if (auto96859156_val == "Zeratul") {
        libCPCD_gf_GPInitZeratul(lp_player);
    }
    else if (auto96859156_val == "Raynor") {
        libCPCD_gf_GPInitRaynor(lp_player);
    }
    else if (auto96859156_val == "Swann") {
        libCPCD_gf_GPInitSwann(lp_player);
    }
    else if (auto96859156_val == "Nova") {
        libCPCD_gf_GPInitNova(lp_player);
    }
    else if (auto96859156_val == "Horner") {
        libCPCD_gf_GPInitHorner(lp_player);
    }
    else if (auto96859156_val == "Tychus") {
        libCPCD_gf_GPInitTychus(lp_player);
    }
    else if (auto96859156_val == "Stetmann") {
        libCPCD_gf_CU_GPInitStetmann(lp_player);
    }
    else if (auto96859156_val == "Abathur") {
        libCPCD_gf_GPInitAbathur(lp_player);
    }
    else if (auto96859156_val == "Stukov") {
        libCPCD_gf_GPInitStukov(lp_player);
    }
    else if (auto96859156_val == "Dehaka") {
        libCPCD_gf_GPInitDehaka(lp_player);
    }
    else if (auto96859156_val == "Mengsk") {
        libCPCD_gf_CU_GPInitMengsk(lp_player);
    }
    else {
    }
}

void libCPCD_gf_GPInitProtoss (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int auto59A650AA_ae = 4;
    const int auto59A650AA_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    TriggerEnable(libCPCD_gt_GlobalCasterVitalChange, true);
    DialogControlCreateInPanelFromTemplate(libCPCD_gv_globalPowerPanelHolder, c_triggerControlTypePanel, "Coop_GlobalCastingTemplates/ProtossCasterPanelTemplate");
    libCPCD_gv_globalPowerPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypePanel, "SoAButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "LotV_SoAMissionUIPanel/SoACommandPanelTemplate");
    libCPCD_gv_globalPowerCmdPanel[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (auto59A650AA_ai >= 0 && lv_buttonIndex <= auto59A650AA_ae) || (auto59A650AA_ai < 0 && lv_buttonIndex >= auto59A650AA_ae) ) ; lv_buttonIndex += auto59A650AA_ai ) {
        DialogControlHookup(libCPCD_gv_globalPowerCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libCPCD_gv_globalPowerCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypePanel, "SoAAbilityArrow0" + IntToString(lv_buttonIndex));
        libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlSetPositionRelative(libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lp_player], PlayerGroupSingle(lp_player), c_anchorTop, libCPCD_gv_globalPowerCmdButtons[lv_buttonIndex][lp_player], c_anchorBottom, 0, 15);
    }
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypePanel, "SoAEnergyTooltipHitFrame");
    libCPCD_gv_globalPowerEnergyTooltip[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypePanel, "SoAEnergyBarFill");
    libCPCD_gv_globalPowerEnergyBar[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypeLabel, "SoAEnergyLabel");
    libCPCD_gv_globalPowerEnergyLabel[lp_player] = DialogControlLastCreated();
    DialogControlSetVisible(libCPCD_gv_globalPowerPanel[lp_player], PlayerGroupAll(), false);
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypeCutscene, "SoACommandCutscene");
    libCPCD_gv_globalPowerCutscene[lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemCutscene(libCPCD_gv_globalPowerCutscene[lp_player], "Cutscenes\\UI_SoAMission.SC2Cutscene", PlayerGroupAll());
    CutscenePlay(CutsceneGetTriggerControl(libCPCD_gv_globalPowerCutscene[lp_player]));
    DialogControlHookup(libCPCD_gv_globalPowerEnergyBar[lp_player], c_triggerControlTypeCutscene, "SoAFillScene");
    libCPCD_gv_globalPowerEnergyBarScene[lp_player] = DialogControlLastCreated();
    CutscenePlay(CutsceneGetTriggerControl(libCPCD_gv_globalPowerEnergyBarScene[lp_player]));
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypeCutscene, "SoAOverlayCutscene");
    libCPCD_gv_globalPowerEnergyGlassScene[lp_player] = DialogControlLastCreated();
    CutscenePlay(CutsceneGetTriggerControl(libCPCD_gv_globalPowerEnergyGlassScene[lp_player]));
    if ((libCOOC_gf_ActiveCommanderForPlayer(lp_player) == "ProtossArtanis") && (libCOOC_gf_CC_PlayerMasteryUpgradeLevel(lp_player, "ArtanisMastery6") > 0)) {
        TextExpressionSetToken("Param/Expression/lib_CPCD_727F9686", "STDTOOLTIP", StringExternal("UI/SoAMissionEnergyTooltip"));
        TextExpressionSetToken("Param/Expression/lib_CPCD_727F9686", "ENERGY", IntToText(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryArtanisStartingAndMaxSoAEnergyDisplayDummy", "Amount", lp_player)));
        libNtve_gf_SetDialogItemTooltip(libCPCD_gv_globalPowerEnergyTooltip[lp_player], TextExpressionAssemble("Param/Expression/lib_CPCD_727F9686"), PlayerGroupSingle(lp_player));
    }
    else if ((libCOOC_gf_ActiveCommanderForPlayer(lp_player) == "ProtossVorazun") && (libCOOC_gf_CC_PlayerMasteryUpgradeLevel(lp_player, "VorazunMastery6") > 0)) {
        TextExpressionSetToken("Param/Expression/lib_CPCD_D18389FB", "STDTOOLTIP", StringExternal("UI/SoAMissionEnergyTooltip"));
        TextExpressionSetToken("Param/Expression/lib_CPCD_D18389FB", "ENERGY", IntToText(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryVorazunStartingAndMaxSoAEnergyDisplayDummy", "Amount", lp_player)));
        libNtve_gf_SetDialogItemTooltip(libCPCD_gv_globalPowerEnergyTooltip[lp_player], TextExpressionAssemble("Param/Expression/lib_CPCD_D18389FB"), PlayerGroupSingle(lp_player));
    }
    else if ((libCOOC_gf_ActiveCommanderForPlayer(lp_player) == "ProtossKarax") && (libCOOC_gf_CC_PlayerMasteryUpgradeLevel(lp_player, "KaraxMastery6") > 0)) {
        TextExpressionSetToken("Param/Expression/lib_CPCD_43ED288E", "STDTOOLTIP", StringExternal("UI/SoAMissionEnergyTooltip"));
        TextExpressionSetToken("Param/Expression/lib_CPCD_43ED288E", "ENERGY", IntToText(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryKaraxStartingAndMaxSoAEnergyDisplayDummy", "Amount", lp_player)));
        libNtve_gf_SetDialogItemTooltip(libCPCD_gv_globalPowerEnergyTooltip[lp_player], TextExpressionAssemble("Param/Expression/lib_CPCD_43ED288E"), PlayerGroupSingle(lp_player));
    }
}

void libCPCD_gf_GPInitAlarak (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int auto9537D642_ae = 2;
    const int auto9537D642_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlCreateInPanelFromTemplate(libCPCD_gv_globalPowerPanelHolder, c_triggerControlTypePanel, "Coop_GlobalCastingTemplates/AlarakCasterPanelTemplate");
    libCPCD_gv_globalPowerPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypeCutscene, "AlarakCommandCutscene");
    libCPCD_gv_globalPowerCutscene[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypePanel, "ButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "Coop_GlobalCastingTemplates/AlarakGlobalCommandPanelTemplate");
    libCPCD_gv_globalPowerCmdPanel[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (auto9537D642_ai >= 0 && lv_buttonIndex <= auto9537D642_ae) || (auto9537D642_ai < 0 && lv_buttonIndex >= auto9537D642_ae) ) ; lv_buttonIndex += auto9537D642_ai ) {
        DialogControlHookup(libCPCD_gv_globalPowerCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libCPCD_gv_globalPowerCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypePanel, "AbilityArrow0" + IntToString(lv_buttonIndex));
        libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlSetPositionRelative(libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lp_player], PlayerGroupSingle(lp_player), c_anchorTop, libCPCD_gv_globalPowerCmdButtons[lv_buttonIndex][lp_player], c_anchorBottom, 0, 15);
    }
    DialogControlSetVisible(libCPCD_gv_globalPowerPanel[lp_player], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemCutscene(libCPCD_gv_globalPowerCutscene[lp_player], "Cutscenes\\UI_AlarakCastingPanel.SC2Cutscene", PlayerGroupAll());
    CutscenePlay(CutsceneGetTriggerControl(libCPCD_gv_globalPowerCutscene[lp_player]));
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypeButton, "GemButton");
    libCPCD_gv_globalPowerAlarakButton[lp_player] = DialogControlLastCreated();
    TriggerEnable(libCPCD_gt_GPAlarakGemPress, true);
}

void libCPCD_gf_GPInitFenix (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int auto85FBE042_ae = 3;
    const int auto85FBE042_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlCreateInPanelFromTemplate(libCPCD_gv_globalPowerPanelHolder, c_triggerControlTypePanel, "Coop_TopBar_Fenix/FenixCasterPanelTemplate");
    libCPCD_gv_globalPowerPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypePanel, "SoAButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "Coop_TopBar_Fenix/FenixGlobalCasterCommandPanelTemplate");
    libCPCD_gv_globalPowerCmdPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerCmdPanel[lp_player], c_triggerControlTypeUnitStatus, "CommandPanelUnitStatus");
    libCPCD_gv_globalPowerCmdPanelUnitStatus[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (auto85FBE042_ai >= 0 && lv_buttonIndex <= auto85FBE042_ae) || (auto85FBE042_ai < 0 && lv_buttonIndex >= auto85FBE042_ae) ) ; lv_buttonIndex += auto85FBE042_ai ) {
        DialogControlHookup(libCPCD_gv_globalPowerCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libCPCD_gv_globalPowerCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCPCD_gv_globalPowerCmdButtons[lv_buttonIndex][lp_player], c_triggerControlTypeImage, "FenixButtonActiveImage");
        libCPCD_gv_globalPowerCmdButtonActiveImage[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCPCD_gv_globalPowerCmdButtons[lv_buttonIndex][lp_player], c_triggerControlTypeImage, "FenixButtonInactiveImage");
        libCPCD_gv_globalPowerCmdButtonBackgroundImage[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypePanel, "SoAAbilityArrow0" + IntToString(lv_buttonIndex));
        libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlSetPositionRelative(libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lp_player], PlayerGroupSingle(lp_player), c_anchorTop, libCPCD_gv_globalPowerCmdButtons[lv_buttonIndex][lp_player], c_anchorBottom, 0, 15);
        DialogControlHookup(libCPCD_gv_globalPowerCmdPanel[lp_player], c_triggerControlTypeUnitStatus, "HeroMonitorStatusFrame0" + IntToString(lv_buttonIndex-1));
        libCPCD_gv_globalPowerUnitEnergyLinks[lv_buttonIndex][lp_player] = DialogControlLastCreated();
    }
    DialogControlSetVisible(libCPCD_gv_globalPowerPanel[lp_player], PlayerGroupAll(), false);
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypeCutscene, "FenixCommandCutscene");
    libCPCD_gv_globalPowerCutscene[lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemCutscene(libCPCD_gv_globalPowerCutscene[lp_player], "Cutscenes\\UI_FenixCastingPanel.SC2Cutscene", PlayerGroupAll());
    CutscenePlay(CutsceneGetTriggerControl(libCPCD_gv_globalPowerCutscene[lp_player]));
    if ((libCPGL_gf_CC_PerkStateCheck("FenixUnlockArbiterSuit", libCPGL_ge_CC_PerkState_Active, "ProtossFenix", lp_player) == true)) {
        DialogControlSetAnimationState(libCPCD_gv_globalPowerCmdButtons[3][lp_player], PlayerGroupAll(), "UnlockState", "Unlocked");
    }
    else {
        DialogControlSetAnimationState(libCPCD_gv_globalPowerCmdButtons[3][lp_player], PlayerGroupAll(), "UnlockState", "Locked");
    }
}

void libCPCD_gf_GPInitRaynor (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int auto9F9D85EA_ae = 2;
    const int auto9F9D85EA_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlCreateInPanelFromTemplate(libCPCD_gv_globalPowerPanelHolder, c_triggerControlTypePanel, "Coop_GlobalCastingTemplates/TerranCasterPanelTemplate");
    libCPCD_gv_globalPowerPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypeCutscene, "TerranCommandCutscene");
    libCPCD_gv_globalPowerCutscene[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypePanel, "ButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "Coop_GlobalCastingTemplates/RaynorGlobalCommandPanelTemplate");
    libCPCD_gv_globalPowerCmdPanel[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (auto9F9D85EA_ai >= 0 && lv_buttonIndex <= auto9F9D85EA_ae) || (auto9F9D85EA_ai < 0 && lv_buttonIndex >= auto9F9D85EA_ae) ) ; lv_buttonIndex += auto9F9D85EA_ai ) {
        DialogControlHookup(libCPCD_gv_globalPowerCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libCPCD_gv_globalPowerCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypePanel, "AbilityArrow0" + IntToString(lv_buttonIndex));
        libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlSetPositionRelative(libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lp_player], PlayerGroupSingle(lp_player), c_anchorTop, libCPCD_gv_globalPowerCmdButtons[lv_buttonIndex][lp_player], c_anchorBottom, 0, 15);
    }
    DialogControlSetVisible(libCPCD_gv_globalPowerPanel[lp_player], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemCutscene(libCPCD_gv_globalPowerCutscene[lp_player], "Cutscenes\\UI_TerranCastingPanel.SC2Cutscene", PlayerGroupAll());
    CutscenePlay(CutsceneGetTriggerControl(libCPCD_gv_globalPowerCutscene[lp_player]));
    libCPCD_gv_globalPowerCutsceneFilter[lp_player] = "TwoButtons";
}

void libCPCD_gf_GPInitHorner (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int autoA4ABF269_ae = 4;
    const int autoA4ABF269_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlCreateInPanelFromTemplate(libCPCD_gv_globalPowerPanelHolder, c_triggerControlTypePanel, "Coop_GlobalCastingTemplates/TerranCasterPanelTemplate");
    libCPCD_gv_globalPowerPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypeCutscene, "TerranCommandCutscene");
    libCPCD_gv_globalPowerCutscene[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypePanel, "ButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "Coop_GlobalCastingTemplates/TerranGlobalCommandPanelTemplate");
    libCPCD_gv_globalPowerCmdPanel[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (autoA4ABF269_ai >= 0 && lv_buttonIndex <= autoA4ABF269_ae) || (autoA4ABF269_ai < 0 && lv_buttonIndex >= autoA4ABF269_ae) ) ; lv_buttonIndex += autoA4ABF269_ai ) {
        DialogControlHookup(libCPCD_gv_globalPowerCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libCPCD_gv_globalPowerCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypePanel, "AbilityArrow0" + IntToString(lv_buttonIndex));
        libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlSetPositionRelative(libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lp_player], PlayerGroupSingle(lp_player), c_anchorTop, libCPCD_gv_globalPowerCmdButtons[lv_buttonIndex][lp_player], c_anchorBottom, 0, 15);
    }
    DialogControlSetVisible(libCPCD_gv_globalPowerPanel[lp_player], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemCutscene(libCPCD_gv_globalPowerCutscene[lp_player], "Cutscenes\\UI_TerranCastingPanel.SC2Cutscene", PlayerGroupAll());
    libCPCD_gv_globalPowerCutsceneFilter[lp_player] = "FourButtons";
    CutscenePlay(CutsceneGetTriggerControl(libCPCD_gv_globalPowerCutscene[lp_player]));
}

void libCPCD_gf_GPInitSwann (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int auto184A6026_ae = 4;
    const int auto184A6026_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlCreateInPanelFromTemplate(libCPCD_gv_globalPowerPanelHolder, c_triggerControlTypePanel, "Coop_GlobalCastingTemplates/TerranCasterPanelTemplate");
    libCPCD_gv_globalPowerPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypeCutscene, "TerranCommandCutscene");
    libCPCD_gv_globalPowerCutscene[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypePanel, "ButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "Coop_GlobalCastingTemplates/TerranGlobalCommandPanelTemplate");
    libCPCD_gv_globalPowerCmdPanel[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (auto184A6026_ai >= 0 && lv_buttonIndex <= auto184A6026_ae) || (auto184A6026_ai < 0 && lv_buttonIndex >= auto184A6026_ae) ) ; lv_buttonIndex += auto184A6026_ai ) {
        DialogControlHookup(libCPCD_gv_globalPowerCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libCPCD_gv_globalPowerCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypePanel, "AbilityArrow0" + IntToString(lv_buttonIndex));
        libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlSetPositionRelative(libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lp_player], PlayerGroupSingle(lp_player), c_anchorTop, libCPCD_gv_globalPowerCmdButtons[lv_buttonIndex][lp_player], c_anchorBottom, 0, 15);
    }
    DialogControlSetVisible(libCPCD_gv_globalPowerPanel[lp_player], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemCutscene(libCPCD_gv_globalPowerCutscene[lp_player], "Cutscenes\\UI_TerranCastingPanel.SC2Cutscene", PlayerGroupAll());
    libCPCD_gv_globalPowerCutsceneFilter[lp_player] = "FourButtons";
    CutscenePlay(CutsceneGetTriggerControl(libCPCD_gv_globalPowerCutscene[lp_player]));
}

void libCPCD_gf_GPInitAbathur (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int autoF252F23F_ae = 2;
    const int autoF252F23F_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlCreateInPanelFromTemplate(libCPCD_gv_globalPowerPanelHolder, c_triggerControlTypePanel, "Coop_GlobalCastingTemplates/ZergCasterPanelTemplate");
    libCPCD_gv_globalPowerPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypeCutscene, "ZergCommandCutscene");
    libCPCD_gv_globalPowerCutscene[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypePanel, "ButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "Coop_GlobalCastingTemplates/ZergGlobalCommandPanelTemplate");
    libCPCD_gv_globalPowerCmdPanel[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (autoF252F23F_ai >= 0 && lv_buttonIndex <= autoF252F23F_ae) || (autoF252F23F_ai < 0 && lv_buttonIndex >= autoF252F23F_ae) ) ; lv_buttonIndex += autoF252F23F_ai ) {
        DialogControlHookup(libCPCD_gv_globalPowerCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libCPCD_gv_globalPowerCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypePanel, "AbilityArrow0" + IntToString(lv_buttonIndex));
        libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlSetPositionRelative(libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lp_player], PlayerGroupSingle(lp_player), c_anchorTop, libCPCD_gv_globalPowerCmdButtons[lv_buttonIndex][lp_player], c_anchorBottom, 0, 15);
    }
    DialogControlSetVisible(libCPCD_gv_globalPowerPanel[lp_player], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemCutscene(libCPCD_gv_globalPowerCutscene[lp_player], "Cutscenes\\UI_ZergCastingPanel.SC2Cutscene", PlayerGroupAll());
    CutscenePlay(CutsceneGetTriggerControl(libCPCD_gv_globalPowerCutscene[lp_player]));
}

void libCPCD_gf_GPInitStukov (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int autoC5C1A433_ae = 4;
    const int autoC5C1A433_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlCreateInPanelFromTemplate(libCPCD_gv_globalPowerPanelHolder, c_triggerControlTypePanel, "Coop_GlobalCastingTemplates/ZergCasterPanelTemplate");
    libCPCD_gv_globalPowerPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypeCutscene, "ZergCommandCutscene");
    libCPCD_gv_globalPowerCutscene[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypePanel, "ButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "Coop_GlobalCastingTemplates/StukovGlobalCommandPanelTemplate");
    libCPCD_gv_globalPowerCmdPanel[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (autoC5C1A433_ai >= 0 && lv_buttonIndex <= autoC5C1A433_ae) || (autoC5C1A433_ai < 0 && lv_buttonIndex >= autoC5C1A433_ae) ) ; lv_buttonIndex += autoC5C1A433_ai ) {
        DialogControlHookup(libCPCD_gv_globalPowerCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libCPCD_gv_globalPowerCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypePanel, "AbilityArrow0" + IntToString(lv_buttonIndex));
        libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlSetPositionRelative(libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lp_player], PlayerGroupSingle(lp_player), c_anchorTop, libCPCD_gv_globalPowerCmdButtons[lv_buttonIndex][lp_player], c_anchorBottom, 0, 15);
    }
    DialogControlSetVisible(libCPCD_gv_globalPowerPanel[lp_player], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemCutscene(libCPCD_gv_globalPowerCutscene[lp_player], "Cutscenes\\UI_StukovCastingPanel.SC2Cutscene", PlayerGroupSingle(lp_player));
    CutscenePlay(CutsceneGetTriggerControl(libCPCD_gv_globalPowerCutscene[lp_player]));
}

void libCPCD_gf_GPInitDehaka (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int autoC4278BCA_ae = 4;
    const int autoC4278BCA_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlCreateInPanelFromTemplate(libCPCD_gv_globalPowerPanelHolder, c_triggerControlTypePanel, "Coop_GlobalCastingTemplates/ZergCasterPanelTemplate");
    libCPCD_gv_globalPowerPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypeCutscene, "ZergCommandCutscene");
    libCPCD_gv_globalPowerCutscene[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypePanel, "ButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "Coop_GlobalCastingTemplates/DehakaGlobalCommandPanelTemplate");
    libCPCD_gv_globalPowerCmdPanel[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (autoC4278BCA_ai >= 0 && lv_buttonIndex <= autoC4278BCA_ae) || (autoC4278BCA_ai < 0 && lv_buttonIndex >= autoC4278BCA_ae) ) ; lv_buttonIndex += autoC4278BCA_ai ) {
        DialogControlHookup(libCPCD_gv_globalPowerCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libCPCD_gv_globalPowerCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypePanel, "AbilityArrow0" + IntToString(lv_buttonIndex));
        libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlSetPositionRelative(libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lp_player], PlayerGroupSingle(lp_player), c_anchorTop, libCPCD_gv_globalPowerCmdButtons[lv_buttonIndex][lp_player], c_anchorBottom, 0, 15);
    }
    DialogControlSetVisible(libCPCD_gv_globalPowerPanel[lp_player], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemCutscene(libCPCD_gv_globalPowerCutscene[lp_player], "Cutscenes\\UI_DehakaCastingPanel.SC2Cutscene", PlayerGroupSingle(lp_player));
    CutscenePlay(CutsceneGetTriggerControl(libCPCD_gv_globalPowerCutscene[lp_player]));
}

void libCPCD_gf_GPInitNova (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int auto1D35E419_ae = 4;
    const int auto1D35E419_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlCreateInPanelFromTemplate(libCPCD_gv_globalPowerPanelHolder, c_triggerControlTypePanel, "Coop_GlobalCastingTemplates/TerranCasterPanelTemplate");
    libCPCD_gv_globalPowerPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypeCutscene, "TerranCommandCutscene");
    libCPCD_gv_globalPowerCutscene[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypePanel, "ButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "Coop_GlobalCastingTemplates/TerranGlobalCommandPanelTemplate");
    libCPCD_gv_globalPowerCmdPanel[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (auto1D35E419_ai >= 0 && lv_buttonIndex <= auto1D35E419_ae) || (auto1D35E419_ai < 0 && lv_buttonIndex >= auto1D35E419_ae) ) ; lv_buttonIndex += auto1D35E419_ai ) {
        DialogControlHookup(libCPCD_gv_globalPowerCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libCPCD_gv_globalPowerCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypePanel, "AbilityArrow0" + IntToString(lv_buttonIndex));
        libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlSetPositionRelative(libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lp_player], PlayerGroupSingle(lp_player), c_anchorTop, libCPCD_gv_globalPowerCmdButtons[lv_buttonIndex][lp_player], c_anchorBottom, 0, 15);
    }
    DialogControlSetVisible(libCPCD_gv_globalPowerPanel[lp_player], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemCutscene(libCPCD_gv_globalPowerCutscene[lp_player], "Cutscenes\\UI_TerranCastingPanel.SC2Cutscene", PlayerGroupAll());
    CutscenePlay(CutsceneGetTriggerControl(libCPCD_gv_globalPowerCutscene[lp_player]));
    libCPCD_gv_globalPowerCutsceneFilter[lp_player] = "Nova";
}

void libCPCD_gf_GPInitTychus (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int autoDFA65A78_ae = 2;
    const int autoDFA65A78_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
    DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "Coop_TopBar_Tychus/TychusTopBarTemplate");
    libCPCD_gv_globalPowerPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypeCommandPanel, "TychusGlobalCommandPanel");
    libCPCD_gv_globalPowerCmdPanel[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (autoDFA65A78_ai >= 0 && lv_buttonIndex <= autoDFA65A78_ae) || (autoDFA65A78_ai < 0 && lv_buttonIndex >= autoDFA65A78_ae) ) ; lv_buttonIndex += autoDFA65A78_ai ) {
        DialogControlHookup(libCPCD_gv_globalPowerCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libCPCD_gv_globalPowerCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
    }
    libCPCD_gf_CDTychusUIInit(lp_player);
    DialogControlSetVisible(libCPCD_gv_globalPowerPanel[lp_player], PlayerGroupAll(), false);
}

void libCPCD_gf_GPInitZeratul (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int auto779C4B9A_ae = 4;
    const int auto779C4B9A_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
    DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "Coop_TopBar_Zeratul/ZeratulTopBar");
    libCPCD_gv_globalPowerPanel[lp_player] = DialogControlLastCreated();
    DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "ProphecyState", "NotReady");
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypeCommandPanel, "ZeratulGlobalCommandPanel");
    libCPCD_gv_globalPowerCmdPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypeCommandPanel, "ZeratulSelectionCommandPanel");
    libCPCD_gv_cDZeratulSelectionCommandPanel = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (auto779C4B9A_ai >= 0 && lv_buttonIndex <= auto779C4B9A_ae) || (auto779C4B9A_ai < 0 && lv_buttonIndex >= auto779C4B9A_ae) ) ; lv_buttonIndex += auto779C4B9A_ai ) {
        DialogControlHookup(libCPCD_gv_globalPowerCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libCPCD_gv_globalPowerCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypePanel, "ProphecyButtonContainer" + IntToString(lv_buttonIndex-1));
        libCPCD_gv_cDZeratulSelectionButtonContainers[(lv_buttonIndex - 1)] = DialogControlLastCreated();
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "ArtifactState", "NotCollected");
    }
    DialogControlSetAnimationState(libCPCD_gv_cDZeratulSelectionButtonContainers[0], PlayerGroupAll(), "ArtifactState", "Collected");
    DialogControlSetAnimationState(libCPCD_gv_globalPowerPanel[lp_player], PlayerGroupAll(), "CurrentArtifact", "1");
    DialogControlSetAnimationState(libCPCD_gv_globalPowerPanel[lp_player], PlayerGroupAll(), "AvatarState", "None");
    DialogControlSetVisible(libCPCD_gv_globalPowerPanel[lp_player], PlayerGroupAll(), false);
    DialogControlSetVisible(libCPCD_gv_globalPowerPanel[lp_player], PlayerGroupSingle(lp_player), true);
    TriggerEnable(libCPCD_gt_CDZeratulProphecyNotReady, true);
    TriggerEnable(libCPCD_gt_CDZeratulProphecyReady, true);
    TriggerEnable(libCPCD_gt_CDZeratulArtifactCollected, true);
    TriggerEnable(libCPCD_gt_CDZeratulArtifactUpgraded, true);
    TriggerEnable(libCPCD_gt_CDZeratulArtifactUsed, true);
    libCPCD_gf_CDZeratulArtifactHintTract(lp_player);
}

void libCPCD_gf_CU_GPInitStetmann (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int autoB7662E25_ae = 4;
    const int autoB7662E25_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
    DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "Coop_TopBar_Stetmann/StetmannTopBar");
    libCPCD_gv_globalPowerPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypeCommandPanel, "StetmannGlobalCommandPanel");
    libCPCD_gv_globalPowerCmdPanel[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (autoB7662E25_ai >= 0 && lv_buttonIndex <= autoB7662E25_ae) || (autoB7662E25_ai < 0 && lv_buttonIndex >= autoB7662E25_ae) ) ; lv_buttonIndex += autoB7662E25_ai ) {
        DialogControlHookup(libCPCD_gv_globalPowerCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libCPCD_gv_globalPowerCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
    }
    DialogControlSetAnimationState(libCPCD_gv_globalPowerPanel[lp_player], PlayerGroupSingle(lp_player), "ActiveZone", "Speed");
    libCPCD_gf_CU_SetStetelliteChargeMax(lp_player);
    libCPCD_gf_CU_DrawStetelliteChargePips(lp_player, (libCPCD_gv_cDStetmannStetelliteMaxCharges[lp_player] - RoundI(PlayerGetChargeUsed(lp_player, "Abil/DeployPowerTowerStetmann"))), libCPCD_gv_cDStetmannStetelliteMaxCharges[lp_player]);
    TriggerEnable(libCPCD_gt_CDStetmannStetelliteChargesChanged, true);
    TriggerEnable(libCPCD_gt_CDStetmannStetelliteMaxChargesChanged, true);
    DialogControlSetVisible(libCPCD_gv_globalPowerPanel[lp_player], PlayerGroupAll(), false);
    DialogControlSetVisible(libCPCD_gv_globalPowerPanel[lp_player], PlayerGroupSingle(lp_player), true);
}

void libCPCD_gf_CU_GPInitMengsk (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;
    text lv_styleClose;
    text lv_tooltipHeaderOpen;
    text lv_tooltipOpen;

    // Automatic Variable Declarations
    const int auto2E755F0E_ae = 4;
    const int auto2E755F0E_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;
    lv_styleClose = StringToText("</s>");
    lv_tooltipHeaderOpen = StringToText("<s val=\"@@@StandardTooltipHeader\">");
    lv_tooltipOpen = StringToText("<s val=\"StandardTooltipHalfSize\"><n/><n/></s><s val=\"@@@StandardTooltip\">");

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
    DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "Coop_TopBar_Mengsk/MengskTopBar");
    libCPCD_gv_globalPowerPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypeCommandPanel, "MengskGlobalCommandPanel");
    libCPCD_gv_globalPowerCmdPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypeProgressBar, "EnergyProgressBar");
    libCPCD_gv_globalPowerEnergyBar[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypePanel, "ImperialMandateContainer");
    libCPCD_gv_cU_GPMengskEnergyContainer[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypePanel, "MightoftheEmpireContainer");
    libCPCD_gv_cU_GPMengskEnergyRegenRoyalGuardContainer[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypePanel, "WillofthePeopleContainer");
    libCPCD_gv_cU_GPMengskEnergyRegenTrooperContainer[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (auto2E755F0E_ai >= 0 && lv_buttonIndex <= auto2E755F0E_ae) || (auto2E755F0E_ai < 0 && lv_buttonIndex >= auto2E755F0E_ae) ) ; lv_buttonIndex += auto2E755F0E_ai ) {
        DialogControlHookup(libCPCD_gv_globalPowerCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libCPCD_gv_globalPowerCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
    }
    DialogControlSetVisible(libCPCD_gv_globalPowerPanel[lp_player], PlayerGroupAll(), false);
    DialogControlSetVisible(libCPCD_gv_globalPowerPanel[lp_player], PlayerGroupSingle(lp_player), true);
    if ((TechTreeUpgradeCount(lp_player, "MasteryMengskStartingImperialMandate", c_techCountCompleteOnly) > 0)) {
        libNtve_gf_SetDialogItemTooltip(libCPCD_gv_cU_GPMengskEnergyContainer[lp_player], (lv_tooltipHeaderOpen + StringExternal("UI/MengskTopBarEnergyName") + lv_styleClose + lv_tooltipOpen + StringExternal("UI/MengskTopBarEnergyDesc") + StringExternal("UI/MengskTopBarEnergyAddendum") + lv_styleClose), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemTooltip(libCPCD_gv_cU_GPMengskEnergyContainer[lp_player], (lv_tooltipHeaderOpen + StringExternal("UI/MengskTopBarEnergyName") + lv_styleClose + lv_tooltipOpen + StringExternal("UI/MengskTopBarEnergyDesc") + lv_styleClose), PlayerGroupAll());
    }
    if ((TechTreeUpgradeCount(lp_player, "MasteryMengskRoyalGuardImperialMandateRegeneration", c_techCountCompleteOnly) > 0)) {
        libNtve_gf_SetDialogItemTooltip(libCPCD_gv_cU_GPMengskEnergyRegenRoyalGuardContainer[lp_player], (lv_tooltipHeaderOpen + StringExternal("UI/MengskTopBarEnergyRegenRoyalGuardName") + lv_styleClose + lv_tooltipOpen + StringExternal("UI/MengskTopBarEnergyRegenRoyalGuardDesc") + StringExternal("UI/MengskTopBarEnergyRegenRoyalGuardAddendum") + lv_styleClose), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemTooltip(libCPCD_gv_cU_GPMengskEnergyRegenRoyalGuardContainer[lp_player], (lv_tooltipHeaderOpen + StringExternal("UI/MengskTopBarEnergyRegenRoyalGuardName") + lv_styleClose + lv_tooltipOpen + StringExternal("UI/MengskTopBarEnergyRegenRoyalGuardDesc") + lv_styleClose), PlayerGroupAll());
    }
    if ((TechTreeUpgradeCount(lp_player, "MasteryMengskTrooperImperialMandateRegeneration", c_techCountCompleteOnly) > 0)) {
        libNtve_gf_SetDialogItemTooltip(libCPCD_gv_cU_GPMengskEnergyRegenTrooperContainer[lp_player], (lv_tooltipHeaderOpen + StringExternal("UI/MengskTopBarEnergyRegenTrooperName") + lv_styleClose + lv_tooltipOpen + StringExternal("UI/MengskTopBarEnergyRegenTrooperDesc") + StringExternal("UI/MengskTopBarEnergyRegenTrooperAddendum") + lv_styleClose), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemTooltip(libCPCD_gv_cU_GPMengskEnergyRegenTrooperContainer[lp_player], (lv_tooltipHeaderOpen + StringExternal("UI/MengskTopBarEnergyRegenTrooperName") + lv_styleClose + lv_tooltipOpen + StringExternal("UI/MengskTopBarEnergyRegenTrooperDesc") + lv_styleClose), PlayerGroupAll());
    }
    libCPCD_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateRoyalGuard(lp_player);
    libCPCD_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateTrooper(lp_player);
}

void libCPCD_gf_LinkUnitEnergyToGPCmdButton (unit lp_unit, int lp_player, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemUnit(libCPCD_gv_globalPowerUnitEnergyLinks[lp_index][lp_player], lp_unit, PlayerGroupSingle(lp_player));
    DialogControlSetVisible(libCPCD_gv_globalPowerUnitEnergyLinks[lp_index][lp_player], PlayerGroupSingle(lp_player), true);
}

abilcmd libCPCD_gf_GetGPAbility (int lp_slot, int lp_player) {
    // Variable Declarations
    int lv_cardIndex;
    int lv_buttonIndex;
    string lv_path;
    abilcmd lv_command;

    // Automatic Variable Declarations
    int autoB1DED80C_ae;
    const int autoB1DED80C_ai = 1;
    int auto72B3D537_ae;
    const int auto72B3D537_ai = 1;

    // Variable Initialization
    lv_path = "";

    // Implementation
    autoB1DED80C_ae = (CatalogFieldValueCount(c_gameCatalogUnit, "SoACaster", "CardLayouts", lp_player)-1);
    lv_cardIndex = 0;
    for ( ; ( (autoB1DED80C_ai >= 0 && lv_cardIndex <= autoB1DED80C_ae) || (autoB1DED80C_ai < 0 && lv_cardIndex >= autoB1DED80C_ae) ) ; lv_cardIndex += autoB1DED80C_ai ) {
        auto72B3D537_ae = (CatalogFieldValueCount(c_gameCatalogUnit, "SoACaster", (("CardLayouts[" + IntToString(lv_cardIndex) + "].LayoutButtons")), lp_player)-1);
        lv_buttonIndex = 0;
        for ( ; ( (auto72B3D537_ai >= 0 && lv_buttonIndex <= auto72B3D537_ae) || (auto72B3D537_ai < 0 && lv_buttonIndex >= auto72B3D537_ae) ) ; lv_buttonIndex += auto72B3D537_ai ) {
            lv_path = ("CardLayouts[" + IntToString(lv_cardIndex) + "].LayoutButtons[" + IntToString(lv_buttonIndex) + "]");
            if ((CatalogFieldValueGet(c_gameCatalogUnit, "SoACaster", ((lv_path + ".Type")), lp_player) == "AbilCmd") && (CatalogFieldValueGetAsInt(c_gameCatalogUnit, "SoACaster", ((lv_path + ".Row")), lp_player) == 0) && (CatalogFieldValueGetAsInt(c_gameCatalogUnit, "SoACaster", ((lv_path + ".Column")), lp_player) == (lp_slot-1))) {
                lv_command = StringToAbilCmd(CatalogFieldValueGet(c_gameCatalogUnit, "SoACaster", ((lv_path + ".AbilCmd")), lp_player));
                if ((TechTreeAbilityIsAllowed(lp_player, lv_command) == true)) {
                    return lv_command;
                }

            }

        }
    }
    return null;
}

void libCPCD_gf_GPUpdateVitals (int lp_player) {
    // Variable Declarations
    playergroup lv_soAPlayers;
    int lv_orbHeight;
    fixed lv_energyFloored;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_soAPlayers = PlayerGroupEmpty();

    // Implementation
    lv_energyFloored = Floor(UnitGetPropertyFixed(libCPGL_gv_commander[lp_player].lv_globalCasterUnit, c_unitPropEnergy, c_unitPropCurrent));
    if ((lv_energyFloored == libCPCD_gv_globalPowerLastEnergyUpdate[lp_player])) {
        return ;
    }

    libCPCD_gv_globalPowerLastEnergyUpdate[lp_player] = lv_energyFloored;
    lv_soAPlayers = PlayerGroupSingle(lp_player);
    TextExpressionSetToken("Param/Expression/lib_CPCD_EF570693", "A", IntToText(FixedToInt(lv_energyFloored)));
    libNtve_gf_SetDialogItemText(libCPCD_gv_globalPowerEnergyLabel[lp_player], TextExpressionAssemble("Param/Expression/lib_CPCD_EF570693"), lv_soAPlayers);
    DialogControlSendAnimationEvent(libCPCD_gv_globalPowerEnergyBarScene[lp_player], PlayerGroupAll(), "SetEnergyPlay");
    DialogControlSetAnimationTime(libCPCD_gv_globalPowerEnergyBarScene[lp_player], PlayerGroupAll(), "EnergyLevel", UnitGetPropertyFixed(libCPGL_gv_commander[lp_player].lv_globalCasterUnit, c_unitPropEnergyPercent, c_unitPropCurrent));
    DialogControlSendAnimationEvent(libCPCD_gv_globalPowerEnergyBarScene[lp_player], PlayerGroupAll(), "SetEnergyPause");
    libCPCD_gf_GPCheckforEnergyHighlight(lp_player);
}

void libCPCD_gf_GPButtonHighlight (int lp_slot, bool lp_on, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPCD_gv_globalPowerCmdButtonArrows[lp_slot][lp_player] == c_invalidDialogControlId)) {
        return ;
    }

    libCPCD_gv_globalPowerButtonHighlighted[lp_slot][lp_player] = lp_on;
    if ((lp_on == true) && (DialogControlIsVisible(libCPCD_gv_globalPowerPanel[lp_player], lp_player) == true)) {
        DialogControlSetVisible(libCPCD_gv_globalPowerCmdButtonArrows[lp_slot][lp_player], PlayerGroupSingle(lp_player), true);
    }
    else {
        DialogControlSetVisible(libCPCD_gv_globalPowerCmdButtonArrows[lp_slot][lp_player], PlayerGroupSingle(lp_player), false);
    }
}

void libCPCD_gf_GPCheckforEnergyHighlight (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerRace(lp_player) != "Prot") || (libCOOC_gf_ActiveCommanderForPlayer(lp_player) == "ProtossAlarak") || (libCOOC_gf_ActiveCommanderForPlayer(lp_player) == "ProtossFenix") || (DialogControlIsVisible(libCPCD_gv_globalPowerCmdPanel[lp_player], lp_player) == false))) {
        return ;
    }

    if ((UnitGetPropertyFixed(libCPGL_gv_commander[lp_player].lv_globalCasterUnit, c_unitPropEnergyPercent, c_unitPropCurrent) == 100.0)) {
        libCPCD_gf_GPEnergyHighlight(true, lp_player);
    }
    else {
        libCPCD_gf_GPEnergyHighlight(false, lp_player);
    }
}

void libCPCD_gf_GPEnergyHighlight (bool lp_enable, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_enable == true)) {
        libCPCD_gv_globalPowerEnergyhighlighting[lp_player] = true;
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libCPCD_gv_globalPowerEnergyGlassScene[lp_player]), "PowerUp");
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libCPCD_gv_globalPowerEnergyBarScene[lp_player]), "PowerUp");
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libCPCD_gv_globalPowerCutscene[lp_player]), "PowerUp");
    }
    else {
        if ((libCPCD_gv_globalPowerEnergyhighlighting[lp_player] == true)) {
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libCPCD_gv_globalPowerEnergyGlassScene[lp_player]), "PowerDown");
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libCPCD_gv_globalPowerEnergyBarScene[lp_player]), "PowerDown");
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libCPCD_gv_globalPowerCutscene[lp_player]), "PowerDown");
            libCPCD_gv_globalPowerEnergyhighlighting[lp_player] = false;
        }

    }
}

void libCPCD_gf_GPSetUnit (unit lp_casterUnit, int lp_player) {
    // Automatic Variable Declarations
    unitgroup autoD4831FE2_g;
    int autoD4831FE2_u;
    unit autoD4831FE2_var;
    unitgroup autoBF267F7E_g;
    int autoBF267F7E_u;
    unit autoBF267F7E_var;

    // Implementation
    libCPCD_gf_GPInit(lp_player);
    libCPGL_gv_commander[lp_player].lv_globalCasterUnit = lp_casterUnit;
    autoD4831FE2_g = libCPGL_gv_commander[lp_player].lv_globalCasterGroup;
    autoD4831FE2_u = UnitGroupCount(autoD4831FE2_g, c_unitCountAll);
    for (;; autoD4831FE2_u -= 1) {
        autoD4831FE2_var = UnitGroupUnitFromEnd(autoD4831FE2_g, autoD4831FE2_u);
        if (autoD4831FE2_var == null) { break; }
        UnitGroupRemove(libCPGL_gv_commander[lp_player].lv_globalCasterGroup, autoD4831FE2_var);
    }
    UnitGroupAdd(libCPGL_gv_commander[lp_player].lv_globalCasterGroup, lp_casterUnit);
    libNtve_gf_SetDialogItemUnitGroup(libCPCD_gv_globalPowerCmdPanel[lp_player], libCPGL_gv_commander[lp_player].lv_globalCasterGroup, PlayerGroupSingle(lp_player));
    if ((libCPGL_gv_commander[lp_player].lv_commander == "Fenix")) {
        libNtve_gf_SetDialogItemUnit(libCPCD_gv_globalPowerCmdPanelUnitStatus[lp_player], libCPGL_gv_commander[lp_player].lv_globalCasterUnit, PlayerGroupSingle(lp_player));
    }

    if ((libCPGL_gv_commander[lp_player].lv_race == "Prot")) {
        libCPCD_gf_GPUpdateVitals(lp_player);
    }

    if ((libCPGL_gv_commander[lp_player].lv_commander == "Tychus")) {
        autoBF267F7E_g = UnitGroup("TychusMedivacPlatform", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoBF267F7E_u = UnitGroupCount(autoBF267F7E_g, c_unitCountAll);
        for (;; autoBF267F7E_u -= 1) {
            autoBF267F7E_var = UnitGroupUnitFromEnd(autoBF267F7E_g, autoBF267F7E_u);
            if (autoBF267F7E_var == null) { break; }
            UnitGroupAdd(libCPGL_gv_commander[lp_player].lv_globalCasterGroup, autoBF267F7E_var);
            libCPCD_gf_CDTychusUIMedivacModifyCharges(1, lp_player);
        }
        libNtve_gf_SetDialogItemUnitGroup(libCPCD_gv_globalPowerCmdPanel[lp_player], libCPGL_gv_commander[lp_player].lv_globalCasterGroup, PlayerGroupSingle(lp_player));
    }

    if ((libCPGL_gv_commander[lp_player].lv_commander == "Zeratul")) {
        UnitGroupAdd(libCPGL_gv_commander[lp_player].lv_globalCasterGroupSecondary, libCPGL_gv_commander[lp_player].lv_globalCasterUnitSecondary);
        libNtve_gf_SetDialogItemUnitGroup(libCPCD_gv_cDZeratulSelectionCommandPanel, libCPGL_gv_commander[lp_player].lv_globalCasterGroupSecondary, PlayerGroupSingle(lp_player));
    }

    if ((libCPGL_gv_commander[lp_player].lv_commander == "Mengsk")) {
        UnitSetPropertyFixed(lp_casterUnit, c_unitPropEnergy, RoundI(UnitGetPropertyFixed(lp_casterUnit, c_unitPropEnergy, c_unitPropCurrent)));
        libCPCD_gf_CM_Mengsk_EnergyChanged(lp_player);
    }

}

trigger auto_libCPCD_gf_GPShowHide_Trigger = null;
bool auto_libCPCD_gf_GPShowHide_lp_showHide;
int auto_libCPCD_gf_GPShowHide_lp_player;
fixed auto_libCPCD_gf_GPShowHide_lp_duration;

void libCPCD_gf_GPShowHide (bool lp_showHide, int lp_player, fixed lp_duration) {
    auto_libCPCD_gf_GPShowHide_lp_showHide = lp_showHide;
    auto_libCPCD_gf_GPShowHide_lp_player = lp_player;
    auto_libCPCD_gf_GPShowHide_lp_duration = lp_duration;

    if (auto_libCPCD_gf_GPShowHide_Trigger == null) {
        auto_libCPCD_gf_GPShowHide_Trigger = TriggerCreate("auto_libCPCD_gf_GPShowHide_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_GPShowHide_Trigger, false, false);
}

bool auto_libCPCD_gf_GPShowHide_TriggerFunc (bool testConds, bool runActions) {
    bool lp_showHide = auto_libCPCD_gf_GPShowHide_lp_showHide;
    int lp_player = auto_libCPCD_gf_GPShowHide_lp_player;
    fixed lp_duration = auto_libCPCD_gf_GPShowHide_lp_duration;

    // Automatic Variable Declarations
    // Implementation
    DialogControlSetPosition(libCPCD_gv_globalPowerPanelHolder, PlayerGroupAll(), c_anchorTop, 0, -50);
    DialogControlSetPosition(libCPCD_gv_globalPowerPanel[lp_player], PlayerGroupAll(), c_anchorTop, 0, -50);
    libCPCD_gv_globalPowerVisible[lp_player] = (lp_showHide == true);
    libCPCD_gf_GPVisibilitySet(lp_showHide, lp_player, lp_duration);
    return true;
}

void libCPCD_gf_GPVisibilitySet (bool lp_showHide, int lp_player, fixed lp_duration) {
    // Variable Declarations
    playergroup lv_updatePlayers;
    int lv_buttonIndex;
    int lv__2DGlobalPanel;

    // Automatic Variable Declarations
    const int auto5B9D6BC3_ae = 4;
    const int auto5B9D6BC3_ai = 1;
    const int autoB0955FA7_ae = 4;
    const int autoB0955FA7_ai = 1;

    // Variable Initialization
    lv_updatePlayers = PlayerGroupEmpty();
    lv__2DGlobalPanel = UserDataGetInt("PlayerCommanders", libCPGL_gv_commander[lp_player].lv_commanderInstance, "GlobalCast2D", 1);

    // Implementation
    lv_updatePlayers = PlayerGroupSingle(lp_player);
    libCPCD_gf_GPInit(lp_player);
    if ((libCPCD_gv_globalPowerPanel[lp_player] == c_invalidDialogControlId)) {
        return ;
    }

    if ((lv__2DGlobalPanel == 1)) {
        DialogControlSetVisible(libCPCD_gv_globalPowerPanel[lp_player], lv_updatePlayers, lp_showHide);
        return ;
    }

    if ((libCPCD_gv_globalPowerCutsceneFilter[lp_player] != "")) {
        CutsceneAddFilter(CutsceneGetTriggerControl(libCPCD_gv_globalPowerCutscene[lp_player]), libCPCD_gv_globalPowerCutsceneFilter[lp_player]);
    }

    if ((lp_showHide == true)) {
        DialogControlSetVisible(libCPCD_gv_globalPowerPanelHolder, lv_updatePlayers, lp_showHide);
        DialogControlSetVisible(libCPCD_gv_globalPowerPanel[lp_player], lv_updatePlayers, lp_showHide);
        if ((libCPCD_gv_globalPowerCutscene[lp_player] == c_invalidDialogControlId)) {
            return ;
        }

        CutsceneSetTime(CutsceneGetTriggerControl(libCPCD_gv_globalPowerCutscene[lp_player]), 0);
        CutscenePlay(CutsceneGetTriggerControl(libCPCD_gv_globalPowerCutscene[lp_player]));
        if ((libCPCD_gv_globalPowerEnergyBarScene[lp_player] != c_invalidDialogControlId)) {
            CutsceneSetTime(CutsceneGetTriggerControl(libCPCD_gv_globalPowerEnergyBarScene[lp_player]), 0);
        }

        if ((libCPCD_gv_globalPowerEnergyGlassScene[lp_player] != c_invalidDialogControlId)) {
            CutsceneSetTime(CutsceneGetTriggerControl(libCPCD_gv_globalPowerEnergyGlassScene[lp_player]), 0);
        }

        if ((lp_duration == c_transitionDurationImmediate)) {
            lv_buttonIndex = 1;
            for ( ; ( (autoB0955FA7_ai >= 0 && lv_buttonIndex <= autoB0955FA7_ae) || (autoB0955FA7_ai < 0 && lv_buttonIndex >= autoB0955FA7_ae) ) ; lv_buttonIndex += autoB0955FA7_ai ) {
                if ((libCPCD_gv_globalPowerButtonHighlighted[lv_buttonIndex][lp_player] == true) && (libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lp_player] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lp_player], lv_updatePlayers, true);
                }

            }
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libCPCD_gv_globalPowerCutscene[lp_player]), "LoopStart");
            if ((libCPCD_gv_globalPowerEnergyBarScene[lp_player] != c_invalidDialogControlId)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(libCPCD_gv_globalPowerEnergyBarScene[lp_player]), "LoopStart");
            }

            if ((libCPCD_gv_globalPowerEnergyGlassScene[lp_player] != c_invalidDialogControlId)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(libCPCD_gv_globalPowerEnergyGlassScene[lp_player]), "LoopStart");
            }

            DialogControlSetVisible(libCPCD_gv_globalPowerCmdPanel[lp_player], lv_updatePlayers, lp_showHide);
            if ((libCPCD_gv_globalPowerEnergyLabel[lp_player] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libCPCD_gv_globalPowerEnergyLabel[lp_player], lv_updatePlayers, lp_showHide);
            }

        }
        else {
            DialogControlSetVisible(libCPCD_gv_globalPowerCmdPanel[lp_player], lv_updatePlayers, false);
            if ((libCPCD_gv_globalPowerEnergyLabel[lp_player] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libCPCD_gv_globalPowerEnergyLabel[lp_player], lv_updatePlayers, false);
            }

        }
    }
    else {
        if ((lp_duration == c_transitionDurationImmediate)) {
            lv_buttonIndex = 1;
            for ( ; ( (auto5B9D6BC3_ai >= 0 && lv_buttonIndex <= auto5B9D6BC3_ae) || (auto5B9D6BC3_ai < 0 && lv_buttonIndex >= auto5B9D6BC3_ae) ) ; lv_buttonIndex += auto5B9D6BC3_ai ) {
                if ((libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lp_player] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lp_player], lv_updatePlayers, false);
                }

            }
            DialogControlSetVisible(libCPCD_gv_globalPowerPanelHolder, lv_updatePlayers, lp_showHide);
            DialogControlSetVisible(libCPCD_gv_globalPowerPanel[lp_player], lv_updatePlayers, lp_showHide);
            DialogControlSetVisible(libCPCD_gv_globalPowerCmdPanel[lp_player], lv_updatePlayers, lp_showHide);
            if ((libCPCD_gv_globalPowerEnergyLabel[lp_player] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libCPCD_gv_globalPowerEnergyLabel[lp_player], lv_updatePlayers, lp_showHide);
            }

            if ((libCPCD_gv_globalPowerEnergyTooltip[lp_player] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libCPCD_gv_globalPowerEnergyTooltip[lp_player], lv_updatePlayers, lp_showHide);
            }

        }
        else {
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libCPCD_gv_globalPowerCutscene[lp_player]), "Death");
            if ((libCPCD_gv_globalPowerEnergyBarScene[lp_player] != c_invalidDialogControlId)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(libCPCD_gv_globalPowerEnergyBarScene[lp_player]), "Death");
            }

            if ((libCPCD_gv_globalPowerEnergyGlassScene[lp_player] != c_invalidDialogControlId)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(libCPCD_gv_globalPowerEnergyGlassScene[lp_player]), "Death");
            }

        }
    }
}

void libCPCD_gf_GPVisibilityAuto (bool lp_showHide, int lp_player, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPCD_gv_globalPowerVisible[lp_player] == false)) {
        return ;
    }

    libCPCD_gf_GPVisibilitySet(lp_showHide, lp_player, lp_duration);
}

void libCPCD_gf_GPTMCasterUnitSet (unit lp_unit, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libCPCD_gv_gPTMCasterUnit[lp_player] = lp_unit;
    libCPCD_gv_gPTMCasterGroup[lp_player] = libNtve_gf_ConvertUnitToUnitGroup(lp_unit);
}

void libCPCD_gf_GPTMTargetingModeEnter (int lp_player) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCPCD_gf_GPShowHide(false, lp_player, c_transitionDurationDefault);
    libCPGL_gf_SetScreenModeCoop(c_uiModeFullscreen, c_transitionDurationDefault, lp_player);
    libCPCD_gv_gPTMTargetingUnrefundableStageEntered[lp_player] = false;
    libCPCD_gv_gPTMTargetingAlreadyCanceled[lp_player] = false;
    while (!((libCPCD_gv_gPTMTargetingTransitioning[lp_player] == false))) {
        Wait(0.0625, c_timeGame);
    }
    if ((libCPGL_gf_PlayerInCinematicModeCampaign2() == true)) {
        return ;
    }

    TriggerEnable(libCPCD_gt_GPTMTargetingCancel, true);
    libCPCD_gv_gPTMExitInstantly = false;
    libCPCD_gv_gPTMTargetingUsageCount += 1;
    libCPCD_gv_gPTMTargetingChargesSpent[lp_player] = 0;
    libCOUI_gf_CU_TargetingSetCharges(libCPCD_gv_gPTMTargetingChargesTotal[lp_player], libCPCD_gv_gPTMTargetingChargesTotal[lp_player], lp_player);
    if ((libCPCD_gv_gPTMTargetingOrder[lp_player] != null)) {
        TriggerEnable(libCPCD_gt_GPTMTargetingPointChosen, true);
        TriggerEnable(libCPCD_gt_GPTMTargetingDirectionChosen, true);
        UISetTargetingOrder(PlayerGroupSingle(lp_player), libCPCD_gv_gPTMCasterGroup[lp_player], libCPCD_gv_gPTMTargetingOrder[lp_player], false);
        libCPCD_gv_gPTMTargetingPhase[lp_player] = libCPCD_ge_GPTMTargetingPhaseType_Location;
    }
    else {
        libCPCD_gv_gPTMTargetingPhase[lp_player] = libCPCD_ge_GPTMTargetingPhaseType_None;
    }
    libCPCD_gv_gPTMTargetingTransitioning[lp_player] = true;
    libCOUI_gf_PU_TargetingUI_EnterTargetingMode(true, false, lp_player);
    libCOUI_gf_CU_TargetingSetInstructionText(libCPCD_gv_gPTMTargetingInstructionsPrimary[lp_player], lp_player);
    libCPCD_gf_GPTMSetFogAlphaOverTime(100.0, 0.5, lp_player);
    CameraSetValue(lp_player, c_cameraValueDistance, 50.0, 1.0, -1, 10.0);
    CameraSetValue(lp_player, c_cameraValuePitch, 70.0, 1.0, -1, 10.0);
    CameraSetData(PlayerGroupSingle(lp_player), "SOATargetingModeCamera");
    libCPCD_gv_gPTMTargetingTransitioning[lp_player] = false;
    libCPCD_gv_gPTMTargetingCycling[lp_player] = false;
}

void libCPCD_gf_GPTMTargetingModeExit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libCPCD_gf_GPShowHide(true, lp_player, c_transitionDurationDefault);
    libCPGL_gf_SetScreenModeCoop(c_uiModeConsole, c_transitionDurationDefault, lp_player);
    libCPCD_gv_gPTMTargetingPhase[lp_player] = libCPCD_ge_GPTMTargetingPhaseType_None;
    while (!((libCPCD_gv_gPTMTargetingTransitioning[lp_player] == false))) {
        Wait(0.0625, c_timeGame);
    }
    libCPCD_gv_gPTMTargetingTransitioning[lp_player] = true;
    if ((libCPCD_gv_gPTMExitInstantly == true)) {
        CameraSetValue(lp_player, c_cameraValueDistance, 34.0, 0.0, -1, 10.0);
        CameraSetValue(lp_player, c_cameraValuePitch, 56.0, 0.0, -1, 10.0);
    }
    else {
        CameraSetValue(lp_player, c_cameraValueDistance, 34.0, 0.5, -1, 10.0);
        CameraSetValue(lp_player, c_cameraValuePitch, 56.0, 0.5, -1, 10.0);
    }
    CameraSetData(PlayerGroupSingle(lp_player), "Dflt");
    if ((libCPCD_gv_gPTMExitInstantly == true)) {
        VisResetFoWAlpha(lp_player);
        libCOUI_gf_PU_TargetingUI_EnterTargetingMode(false, true, lp_player);
    }
    else {
        libCPCD_gf_GPTMResetFogAlphaOverTime(0.5, lp_player);
        libCOUI_gf_PU_TargetingUI_EnterTargetingMode(false, false, lp_player);
    }
    libNtve_gf_RestoreUnitSelection(lp_player);
    libCPCD_gv_gPTMTargetingActivateAbility[lp_player] = null;
    libCPCD_gv_gPTMTargetingTransitioning[lp_player] = false;
    libCPCD_gv_gPTMTargetingUsageCount -= 1;
    if ((libCPCD_gv_gPTMTargetingUsageCount == 0)) {
        TriggerEnable(libCPCD_gt_GPTMTargetingCancel, false);
        TriggerEnable(libCPCD_gt_GPTMTargetingPointChosen, false);
        TriggerEnable(libCPCD_gt_GPTMTargetingDirectionChosen, false);
    }

}

void libCPCD_gf_GPTMTargetingCleanupActorsAndUnits (int lp_player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto74C8731A_ae = libCPCD_gv_gPTMTARGETCOUNTMAX;
    const int auto74C8731A_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto74C8731A_ai >= 0 && lv_index <= auto74C8731A_ae) || (auto74C8731A_ai < 0 && lv_index >= auto74C8731A_ae) ) ; lv_index += auto74C8731A_ai ) {
        if ((libCPCD_gv_gPTMTargetingActors[lv_index][lp_player] != null)) {
            ActorSend(libCPCD_gv_gPTMTargetingActors[lv_index][lp_player], "Signal Destroy");
            libCPCD_gv_gPTMTargetingActors[lv_index][lp_player] = null;
        }

        if ((libCPCD_gv_gPTMTargetingUnit[lv_index][lp_player] != null)) {
            UnitRemove(libCPCD_gv_gPTMTargetingUnit[lv_index][lp_player]);
            libCPCD_gv_gPTMTargetingUnit[lv_index][lp_player] = null;
        }

    }
}

trigger auto_libCPCD_gf_GPTMSetFogAlphaOverTime_Trigger = null;
fixed auto_libCPCD_gf_GPTMSetFogAlphaOverTime_lp_targetAlpha;
fixed auto_libCPCD_gf_GPTMSetFogAlphaOverTime_lp_duration;
int auto_libCPCD_gf_GPTMSetFogAlphaOverTime_lp_player;

void libCPCD_gf_GPTMSetFogAlphaOverTime (fixed lp_targetAlpha, fixed lp_duration, int lp_player) {
    auto_libCPCD_gf_GPTMSetFogAlphaOverTime_lp_targetAlpha = lp_targetAlpha;
    auto_libCPCD_gf_GPTMSetFogAlphaOverTime_lp_duration = lp_duration;
    auto_libCPCD_gf_GPTMSetFogAlphaOverTime_lp_player = lp_player;

    if (auto_libCPCD_gf_GPTMSetFogAlphaOverTime_Trigger == null) {
        auto_libCPCD_gf_GPTMSetFogAlphaOverTime_Trigger = TriggerCreate("auto_libCPCD_gf_GPTMSetFogAlphaOverTime_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_GPTMSetFogAlphaOverTime_Trigger, false, false);
}

bool auto_libCPCD_gf_GPTMSetFogAlphaOverTime_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_targetAlpha = auto_libCPCD_gf_GPTMSetFogAlphaOverTime_lp_targetAlpha;
    fixed lp_duration = auto_libCPCD_gf_GPTMSetFogAlphaOverTime_lp_duration;
    int lp_player = auto_libCPCD_gf_GPTMSetFogAlphaOverTime_lp_player;

    // Variable Declarations
    fixed lv_currentAlpha;
    fixed lv_alphaIncrement;
    fixed lv_incrementFrequency;
    int lv_increments;

    // Automatic Variable Declarations
    int auto69260C73_n;
    int auto69260C73_i;

    // Variable Initialization

    // Implementation
    if (((libCPCM_gf_MutatorIsEnabled("BlackFog") == true) || (libCPCM_gf_MutatorIsEnabled("UberDarkness") == true))) {
        return true;
    }

    lv_incrementFrequency = 0.05;
    lv_currentAlpha = VisGetFoWAlpha(lp_player);
    lv_increments = AbsI(FixedToInt((lp_duration / lv_incrementFrequency)));
    lv_alphaIncrement = ((lp_targetAlpha-lv_currentAlpha)/IntToFixed(lv_increments));
    auto69260C73_n = lv_increments;
    for (auto69260C73_i = 1; auto69260C73_i <= auto69260C73_n; auto69260C73_i += 1) {
        Wait(lv_incrementFrequency, c_timeGame);
        lv_currentAlpha += lv_alphaIncrement;
        VisSetFoWAlpha(lp_player, lv_currentAlpha);
    }
    VisSetFoWAlpha(lp_player, lp_targetAlpha);
    return true;
}

trigger auto_libCPCD_gf_GPTMResetFogAlphaOverTime_Trigger = null;
fixed auto_libCPCD_gf_GPTMResetFogAlphaOverTime_lp_duration;
int auto_libCPCD_gf_GPTMResetFogAlphaOverTime_lp_player;

void libCPCD_gf_GPTMResetFogAlphaOverTime (fixed lp_duration, int lp_player) {
    auto_libCPCD_gf_GPTMResetFogAlphaOverTime_lp_duration = lp_duration;
    auto_libCPCD_gf_GPTMResetFogAlphaOverTime_lp_player = lp_player;

    if (auto_libCPCD_gf_GPTMResetFogAlphaOverTime_Trigger == null) {
        auto_libCPCD_gf_GPTMResetFogAlphaOverTime_Trigger = TriggerCreate("auto_libCPCD_gf_GPTMResetFogAlphaOverTime_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_GPTMResetFogAlphaOverTime_Trigger, false, false);
}

bool auto_libCPCD_gf_GPTMResetFogAlphaOverTime_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_duration = auto_libCPCD_gf_GPTMResetFogAlphaOverTime_lp_duration;
    int lp_player = auto_libCPCD_gf_GPTMResetFogAlphaOverTime_lp_player;

    // Variable Declarations
    fixed lv_currentAlpha;
    fixed lv_alphaIncrement;
    fixed lv_incrementFrequency;
    int lv_increments;
    fixed lv_targetAlpha;

    // Automatic Variable Declarations
    int auto653E008A_n;
    int auto653E008A_i;

    // Variable Initialization

    // Implementation
    if (((libCPCM_gf_MutatorIsEnabled("BlackFog") == true) || (libCPCM_gf_MutatorIsEnabled("UberDarkness") == true))) {
        return true;
    }

    lv_incrementFrequency = 0.05;
    lv_currentAlpha = VisGetFoWAlpha(lp_player);
    VisResetFoWAlpha(lp_player);
    lv_targetAlpha = VisGetFoWAlpha(lp_player);
    lv_increments = AbsI(FixedToInt((lp_duration / lv_incrementFrequency)));
    lv_alphaIncrement = ((lv_targetAlpha-lv_currentAlpha)/IntToFixed(lv_increments));
    VisSetFoWAlpha(lp_player, lv_currentAlpha);
    auto653E008A_n = lv_increments;
    for (auto653E008A_i = 1; auto653E008A_i <= auto653E008A_n; auto653E008A_i += 1) {
        Wait(lv_incrementFrequency, c_timeGame);
        lv_currentAlpha += lv_alphaIncrement;
        VisSetFoWAlpha(lp_player, lv_currentAlpha);
    }
    VisResetFoWAlpha(lp_player);
    return true;
}

void libCPCD_gf_GPTMTargetingCancel (int lp_player) {
    // Variable Declarations
    string lv_cost;
    string lv_costField;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cost = "";
    lv_costField = "";

    // Implementation
    libCPCD_gf_GPShowHide(true, lp_player, c_transitionDurationDefault);
    libCPGL_gf_SetScreenModeCoop(c_uiModeConsole, c_transitionDurationDefault, lp_player);
    UnitIssueOrder(libCPCD_gv_gPTMCasterUnit[lp_player], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libCPCD_gv_gPTMTargetingAlreadyCanceled[lp_player] = true;
    libCPCD_gf_GPTMTargetingCleanupActorsAndUnits(lp_player);
    if ((libCPCD_gv_gPTMTargetingUnitType[lp_player] != null) && (libCPCD_gv_gPTMTargetingPhase[lp_player] == libCPCD_ge_GPTMTargetingPhaseType_Direction)) {
        libCPCD_gv_gPTMTargetingChargesSpent[lp_player] -= 1;
    }

    if ((libCPCD_gv_gPTMTargetingChargesSpent[lp_player] == 0) && (libCPCD_gv_gPTMTargetingUnrefundableStageEntered[lp_player] == false)) {
        libNtve_gf_UnitAbilityRemoveCooldown(libCPCD_gv_gPTMCasterUnit[lp_player], libCPCD_gv_gPTMTargetingActivateAbility[lp_player], libCPCD_gv_gPTMTargetingCooldown[lp_player]);
        lv_costField = ("Cost[0].Vital[" + "Energy" + "]");
        lv_cost = CatalogFieldValueGet(c_gameCatalogAbil, libCPCD_gv_gPTMTargetingActivateAbility[lp_player], (lv_costField), lp_player);
        UnitSetPropertyFixed(libCPCD_gv_gPTMCasterUnit[lp_player], c_unitPropEnergy, (UnitGetPropertyFixed(libCPCD_gv_gPTMCasterUnit[lp_player], c_unitPropEnergy, c_unitPropCurrent) + StringToFixed(lv_cost)));
        if ((TechTreeUpgradeCount(lp_player, "NovaCommander", c_techCountCompleteOnly) == 1)) {
            PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperAdd, CatalogFieldValueGetAsInt(c_gameCatalogAbil, "NovaGriffinBombingRunActivate", "Cost[" + IntToString(0) + "].Resource[" + IntToString(2) + "]", lp_player));
        }

    }

    UnitBehaviorRemove(libCPCD_gv_gPTMCasterUnit[lp_player], libCPCD_gv_gPTMTargetingBehavior[lp_player], 1);
    libCPCD_gv_gPTMTargetingUnrefundableStageEntered[lp_player] = true;
}

void libCPCD_gf_GPTMTimeStopApply (int lp_castingPlayer) {
    // Automatic Variable Declarations
    // Implementation
    libCOOC_gf_CC_AchievementToggleTimeStop(true);
    PlayerCreateEffectPoint(lp_castingPlayer, "SOATimeFreezeVisual", Point(PointGetX(CameraGetTarget(lp_castingPlayer)), PointGetY(CameraGetTarget(lp_castingPlayer))));
    AITimePause(true);
    TimerStart(libCPCD_gv_gPTMTimeStopTimer[lp_castingPlayer], CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "SOATimeFreeze", "Duration", lp_castingPlayer), false, c_timeGame);
}

void libCPCD_gf_CM_MasteryKerriganArmyVespeneCostList (int lp_player) {
    // Variable Declarations
    int lv_upgradeCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasteryKerriganArmyGasCost", c_techCountCompleteOnly);
    libCPCD_gf_CM_MasteryKerriganArmyVespeneCostReduction("Overseer", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryKerriganArmyVespeneCostReduction("OverseerSiegeMode", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryKerriganArmyVespeneCostReduction("Hydralisk", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryKerriganArmyVespeneCostReduction("HydraliskBurrowed", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryKerriganArmyVespeneCostReduction("HydraliskLurker", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryKerriganArmyVespeneCostReduction("HydraliskLurkerBurrowed", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryKerriganArmyVespeneCostReduction("MutaliskBroodlord", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryKerriganArmyVespeneCostReduction("BroodLord", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryKerriganArmyVespeneCostReduction("Ultralisk", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryKerriganArmyVespeneCostReduction("UltraliskBurrowed", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryKerriganArmyVespeneCostReduction("HotSTorrasque", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryKerriganArmyVespeneCostReduction("HotSTorrasqueBurrowed", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryKerriganArmyVespeneCostReduction("TorrasqueCorpse", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryKerriganArmyVespeneCostReduction("Lurker", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryKerriganArmyVespeneCostReduction("LurkerBurrowed", lp_player, lv_upgradeCount);
}

void libCPCD_gf_CM_MasteryKerriganArmyVespeneCostReduction (string lp_unitType, int lp_player, int lp_upgradeCount) {
    // Variable Declarations
    fixed lv_unitVespeneCostOriginal;
    fixed lv_UnitVespeneCostReductionPerPoint;
    fixed lv_unitVespeneCostReduction;
    int lv_UnitVespeneCostNew;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_UnitVespeneCostReductionPerPoint = 100.0;

    // Implementation
    lv_unitVespeneCostOriginal = IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "CostResource[" + IntToString(1) + "]", lp_player));
    lv_unitVespeneCostReduction = (IntToFixed(lp_upgradeCount) * lv_unitVespeneCostOriginal);
    lv_unitVespeneCostReduction = (lv_unitVespeneCostReduction / lv_UnitVespeneCostReductionPerPoint);
    lv_UnitVespeneCostNew = FixedToInt((lv_unitVespeneCostOriginal - lv_unitVespeneCostReduction));
    CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "CostResource[" + IntToString(1) + "]", lp_player, IntToString(lv_UnitVespeneCostNew));
}

void libCPCD_gf_CM_MasteryMengskRoyalGuardCostList (int lp_player) {
    // Variable Declarations
    int lv_upgradeCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasteryMengskRoyalGuardCost", c_techCountCompleteOnly);
    libCPCD_gf_CM_MasteryMengskRoyalGuardCostReduction("MarauderMengsk", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryMengskRoyalGuardCostReduction("GhostMengsk", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryMengskRoyalGuardCostReduction("SiegeTankMengsk", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryMengskRoyalGuardCostReduction("SiegeTankMengskSieged", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryMengskRoyalGuardCostReduction("ThorMengsk", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryMengskRoyalGuardCostReduction("ThorMengskSieged", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryMengskRoyalGuardCostReduction("VikingMengskAssault", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryMengskRoyalGuardCostReduction("VikingMengskFighter", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryMengskRoyalGuardCostReduction("BattlecruiserMengsk", lp_player, lv_upgradeCount);
}

void libCPCD_gf_CM_MasteryMengskRoyalGuardCostReduction (string lp_unitType, int lp_player, int lp_upgradeCount) {
    // Variable Declarations
    fixed lv_unitMineralCostOriginal;
    fixed lv_unitVespeneCostOriginal;
    fixed lv_UnitVespeneCostReductionPerPoint2;
    fixed lv_UnitVespeneCostReductionPerPoint;
    fixed lv_unitMineralCostReduction;
    fixed lv_unitVespeneCostReduction;
    int lv_UnitVespeneCostNew2;
    int lv_UnitVespeneCostNew;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_UnitVespeneCostReductionPerPoint2 = 150.0;
    lv_UnitVespeneCostReductionPerPoint = 150.0;

    // Implementation
    lv_unitMineralCostOriginal = IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "CostResource[" + IntToString(0) + "]", lp_player));
    lv_unitMineralCostReduction = (IntToFixed(lp_upgradeCount) * lv_unitMineralCostOriginal);
    lv_unitMineralCostReduction = (lv_unitMineralCostReduction / lv_UnitVespeneCostReductionPerPoint2);
    lv_UnitVespeneCostNew2 = FixedToInt((lv_unitMineralCostOriginal - lv_unitMineralCostReduction));
    CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "CostResource[" + IntToString(0) + "]", lp_player, IntToString(lv_UnitVespeneCostNew2));
    lv_unitVespeneCostOriginal = IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "CostResource[" + IntToString(1) + "]", lp_player));
    lv_unitVespeneCostReduction = (IntToFixed(lp_upgradeCount) * lv_unitVespeneCostOriginal);
    lv_unitVespeneCostReduction = (lv_unitVespeneCostReduction / lv_UnitVespeneCostReductionPerPoint);
    lv_UnitVespeneCostNew = FixedToInt((lv_unitVespeneCostOriginal - lv_unitVespeneCostReduction));
    CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "CostResource[" + IntToString(1) + "]", lp_player, IntToString(lv_UnitVespeneCostNew));
}

void libCPCD_gf_CM_MasteryZagraRoachLifeIncrease (int lp_player) {
    // Variable Declarations
    fixed lv_upgradeCount;
    fixed lv_healthStarting;
    fixed lv_healthPerPoint;
    fixed lv_healthNew;
    fixed lv_damageStarting;
    fixed lv_damagePerPoint;
    fixed lv_damageNew;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_healthStarting = 145.0;
    lv_healthPerPoint = 29.0;
    lv_healthNew = 145.0;
    lv_damageStarting = 16.0;
    lv_damagePerPoint = 0.32;

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasteryZagaraRoachDropDamageAndHealth", c_techCountCompleteOnly);
    lv_healthNew = (lv_healthStarting+(lv_upgradeCount*lv_healthPerPoint/10));
    CatalogFieldValueSet(c_gameCatalogUnit, "Roach", "LifeMax", lp_player, IntToString(FixedToInt(lv_healthNew)));
    CatalogFieldValueSet(c_gameCatalogUnit, "Roach", "LifeStart", lp_player, IntToString(FixedToInt(lv_healthNew)));
    CatalogFieldValueSet(c_gameCatalogUnit, "RoachBurrowed", "LifeMax", lp_player, IntToString(FixedToInt(lv_healthNew)));
    CatalogFieldValueSet(c_gameCatalogUnit, "RoachBurrowed", "LifeStart", lp_player, IntToString(FixedToInt(lv_healthNew)));
    lv_damageNew = Ceiling((lv_damageStarting+(lv_upgradeCount*lv_damagePerPoint)));
    CatalogFieldValueSet(c_gameCatalogEffect, "AcidSalivaU", "Amount", lp_player, IntToString(FixedToInt(lv_damageNew)));
    CatalogFieldValueSet(c_gameCatalogEffect, "RoachUMelee", "Amount", lp_player, IntToString(FixedToInt(lv_damageNew)));
    CatalogFieldValueSet(c_gameCatalogEffect, "ZagaraAcidSalivaU", "Amount", lp_player, IntToString(FixedToInt(lv_damageNew)));
    CatalogFieldValueSet(c_gameCatalogEffect, "ZagaraRoachUMelee", "Amount", lp_player, IntToString(FixedToInt(lv_damageNew)));
    CatalogFieldValueSet(c_gameCatalogEffect, "MasteryZagaraRoachDropDamageAndHealthAttackDamageDisplayDummy", "Amount", lp_player, IntToString(FixedToInt((lv_damageNew-lv_damageStarting))));
}

void libCPCD_gf_CM_MasteryKerriganArmyVespeneCostList3 (int lp_player) {
    // Variable Declarations
    int lv_upgradeCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasteryKaraxUnitVital", c_techCountCompleteOnly);
    libCPCD_gf_CM_MasteryKaraxUnitVitalIncrease("ZealotPurifier", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryKaraxUnitVitalIncrease("SentryPurifier", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryKaraxUnitVitalIncrease("SentryPhasing", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryKaraxUnitVitalIncrease("ImmortalAiur", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryKaraxUnitVitalIncrease("Colossus", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryKaraxUnitVitalIncrease("ColossusPurifier", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryKaraxUnitVitalIncrease("PhoenixPurifier", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryKaraxUnitVitalIncrease("Carrier", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryKaraxUnitVitalIncrease("CarrierAiur", lp_player, lv_upgradeCount);
    libCPCD_gf_CM_MasteryKaraxUnitVitalIncrease("Interceptor", lp_player, lv_upgradeCount);
}

void libCPCD_gf_CM_MasteryKaraxUnitVitalIncrease (string lp_unitType, int lp_player, int lp_upgradeCount) {
    // Variable Declarations
    fixed lv_unitHealthOriginal;
    fixed lv_unitShieldsOriginal;
    fixed lv_UnitHealthAndShieldsIncreasePerPoint;
    int lv_unitHealthNew;
    int lv_UnitShieldsNew;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_UnitHealthAndShieldsIncreasePerPoint = 0.01;

    // Implementation
    lv_unitHealthOriginal = IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "LifeMax", lp_player));
    lv_unitHealthNew = FixedToInt(((1+IntToFixed(lp_upgradeCount) * lv_UnitHealthAndShieldsIncreasePerPoint) * lv_unitHealthOriginal));
    CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "LifeMax", lp_player, IntToString(lv_unitHealthNew));
    CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "LifeStart", lp_player, IntToString(lv_unitHealthNew));
    lv_unitShieldsOriginal = IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "ShieldsMax", lp_player));
    lv_UnitShieldsNew = FixedToInt(((1+IntToFixed(lp_upgradeCount) * lv_UnitHealthAndShieldsIncreasePerPoint) * lv_unitShieldsOriginal));
    CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "ShieldsMax", lp_player, IntToString(lv_UnitShieldsNew));
    CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "ShieldsStart", lp_player, IntToString(lv_UnitShieldsNew));
}

void libCPCD_gf_CM_MasterySwannSiegeTankImmortalityProtocolCostReduction (int lp_player) {
    // Variable Declarations
    fixed lv_unitVespeneCostOriginal;
    fixed lv_UnitVespeneCostReductionPerPoint;
    fixed lv_unitVespeneCostReduction;
    int lv_UnitVespeneCostNew;
    int lv_upgradeCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_UnitVespeneCostReductionPerPoint = 50.0;

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasterySwannImmortalityProtocol", c_techCountCompleteOnly);
    lv_unitVespeneCostOriginal = IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, "SiegeTank", "CostResource[" + IntToString(1) + "]", lp_player));
    lv_unitVespeneCostReduction = (IntToFixed(lv_upgradeCount) * lv_unitVespeneCostOriginal);
    lv_unitVespeneCostReduction = (lv_unitVespeneCostReduction / lv_UnitVespeneCostReductionPerPoint);
    lv_UnitVespeneCostNew = FixedToInt(lv_unitVespeneCostReduction);
    CatalogFieldValueSet(c_gameCatalogUnit, "SiegeTankWreckage", "CostResource[" + IntToString(1) + "]", lp_player, IntToString(lv_UnitVespeneCostNew));
}

void libCPCD_gf_CM_MasteryKerriganMutatingCarapaceDegradation (int lp_player) {
    // Variable Declarations
    int lv_upgradeCount;
    fixed lv_degradation;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasteryKerriganMutatingCarapaceLifeDegradation", c_techCountCompleteOnly);
    lv_degradation = (((lv_upgradeCount / 30.0) * 5.0) - 5.0);
    CatalogFieldValueSet(c_gameCatalogUnit, "K5Kerrigan", "ShieldRegenRate", lp_player, FixedToString(lv_degradation, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "K5KerriganBurrowed", "ShieldRegenRate", lp_player, FixedToString(lv_degradation, c_fixedPrecisionAny));
}

void libCPCD_gf_CM_MasteryKerriganResearchSpeedCost (int lp_player) {
    // Variable Declarations
    int lv_upgradeCount;
    fixed lv_costReduction;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasteryKerriganResearchSpeedandCost", c_techCountCompleteOnly);
    lv_costReduction = ((175.0 * ((30.0 - lv_upgradeCount) + 20.0)) / 50.0);
    CatalogFieldValueSet(c_gameCatalogAbil, "evolutionchamberresearch", "InfoArray[" + IntToString(4) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    CatalogFieldValueSet(c_gameCatalogAbil, "evolutionchamberresearch", "InfoArray[" + IntToString(4) + "].Resource[" + IntToString(1) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    lv_costReduction = ((175.0 * ((30.0 - lv_upgradeCount) + 20.0)) / 50.0);
    CatalogFieldValueSet(c_gameCatalogAbil, "SpireResearch", "InfoArray[" + IntToString(1) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    CatalogFieldValueSet(c_gameCatalogAbil, "SpireResearch", "InfoArray[" + IntToString(1) + "].Resource[" + IntToString(1) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    lv_costReduction = ((175.0 * ((30.0 - lv_upgradeCount) + 20.0)) / 50.0);
    CatalogFieldValueSet(c_gameCatalogAbil, "SpireResearch", "InfoArray[" + IntToString(4) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    CatalogFieldValueSet(c_gameCatalogAbil, "SpireResearch", "InfoArray[" + IntToString(4) + "].Resource[" + IntToString(1) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
}

void libCPCD_gf_CM_MasteryStetmannUpgradeCost (int lp_player) {
    // Variable Declarations
    int lv_upgradeCount;
    fixed lv_costReduction;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasteryStetmannUpgradeResearchCost", c_techCountCompleteOnly);
    lv_costReduction = ((175 * (50 - lv_upgradeCount)) / 50);
    CatalogFieldValueSet(c_gameCatalogAbil, "EvolutionChamberStetmannResearch", "InfoArray[" + IntToString(7) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    CatalogFieldValueSet(c_gameCatalogAbil, "EvolutionChamberStetmannResearch", "InfoArray[" + IntToString(7) + "].Resource[" + IntToString(1) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    lv_costReduction = ((175 * (50 - lv_upgradeCount)) / 50);
    CatalogFieldValueSet(c_gameCatalogAbil, "SpireStetmannResearch", "InfoArray[" + IntToString(1) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    CatalogFieldValueSet(c_gameCatalogAbil, "SpireStetmannResearch", "InfoArray[" + IntToString(1) + "].Resource[" + IntToString(1) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    lv_costReduction = ((175 * (50 - lv_upgradeCount)) / 50);
    CatalogFieldValueSet(c_gameCatalogAbil, "SpireStetmannResearch", "InfoArray[" + IntToString(4) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    CatalogFieldValueSet(c_gameCatalogAbil, "SpireStetmannResearch", "InfoArray[" + IntToString(4) + "].Resource[" + IntToString(1) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
}

void libCPCD_gf_CM_MasteryResearchCostReduction (int lp_player, string lp_masteryUpgrade, fixed lp_percentReductionPerPoint) {
    // Variable Declarations
    string lv_ability;
    int lv_i;
    int lv_costMinerals;
    int lv_costVespene;
    int lv_upgradeCount;
    fixed lv_r;

    // Automatic Variable Declarations
    int autoD52886DE_ae;
    int autoD52886DE_ai;
    const int auto70BBEB06_ae = 29;
    const int auto70BBEB06_ai = 1;

    // Variable Initialization
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, lp_masteryUpgrade, c_techCountCompleteOnly);

    // Implementation
    autoD52886DE_ae = CatalogEntryCount(c_gameCatalogAbil);
    autoD52886DE_ai = 1;
    while (autoD52886DE_ai <= autoD52886DE_ae) {
        lv_ability = CatalogEntryGet(c_gameCatalogAbil, autoD52886DE_ai);
        autoD52886DE_ai = autoD52886DE_ai + 1;
        if ((AbilityClass(lv_ability) == c_classIdCAbilResearch)) {
            lv_i = 0;
            for ( ; ( (auto70BBEB06_ai >= 0 && lv_i <= auto70BBEB06_ae) || (auto70BBEB06_ai < 0 && lv_i >= auto70BBEB06_ae) ) ; lv_i += auto70BBEB06_ai ) {
                lv_costMinerals = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Resource[" + IntToString(0) + "]", lp_player);
                lv_costVespene = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Resource[" + IntToString(1) + "]", lp_player);
                if (((lv_costMinerals > 0) || (lv_costVespene > 0))) {
                    lv_r = (100.0 - (lv_upgradeCount * lp_percentReductionPerPoint));
                    lv_costMinerals = FixedToInt(RoundI(((lv_costMinerals * lv_r) / 100.0)));
                    lv_costVespene = FixedToInt(RoundI(((lv_costVespene * lv_r) / 100.0)));
                    CatalogFieldValueSet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(lv_costMinerals));
                    CatalogFieldValueSet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Resource[" + IntToString(1) + "]", lp_player, IntToString(lv_costVespene));
                }

            }
        }

    }
}

point libCPCD_gf_CDSwannDrillTarget (point lp_casterPoint, point lp_targetPoint, region lp_region, int lp_player) {
    // Variable Declarations
    point lv_casterPoint;
    fixed lv_casterXToEdgeOfMap;
    fixed lv_casterYToEdgeOfMap;
    point lv_targetPoint;
    fixed lv_targetXToEdgeOfMap;
    fixed lv_targetYToEdgeOfMap;
    fixed lv_targetAngle;
    fixed lv_cosineofTargetAngle;
    fixed lv_triangle1C;
    fixed lv_triangle2C;
    fixed lv_casterTriangle1C;
    fixed lv_casterTriangle2C;
    point lv_abilityTargetPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_casterPoint = UnitGetPosition(EventUnit());
    lv_targetPoint = EventUnitTargetPoint();

    // Implementation
    if ((PointGetX(lv_casterPoint) <= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) <= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = (PointGetX(RegionGetBoundsMax(RegionPlayableMap())) - PointGetX(lv_targetPoint));
        lv_targetYToEdgeOfMap = (PointGetY(RegionGetBoundsMax(RegionPlayableMap())) - PointGetY(lv_targetPoint));
        lv_casterXToEdgeOfMap = (PointGetX(RegionGetBoundsMax(RegionPlayableMap())) - PointGetX(lv_casterPoint));
        lv_casterYToEdgeOfMap = (PointGetY(RegionGetBoundsMax(RegionPlayableMap())) - PointGetY(lv_casterPoint));
        lv_targetAngle = AngleBetweenPoints(lv_casterPoint, lv_targetPoint);
        lv_cosineofTargetAngle = Cos(lv_targetAngle);
        if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
            lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMax(RegionPlayableMap())));
        }
        else {
            lv_triangle1C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
            lv_casterTriangle1C = (lv_casterXToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            lv_cosineofTargetAngle = Cos(lv_targetAngle);
            if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
                lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMax(RegionPlayableMap())), PointGetY(lv_targetPoint));
            }
            else {
                lv_triangle2C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
                lv_casterTriangle2C = (lv_casterYToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                    libCPCD_gv_cDSwannDrillBeamDistance[lp_player] = FixedToInt(lv_casterTriangle1C);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                    libCPCD_gv_cDSwannDrillBeamDistance[lp_player] = FixedToInt(lv_casterTriangle2C);
                }
            }
        }
    }
    else if ((PointGetX(lv_casterPoint) >= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) <= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = PointGetX(lv_targetPoint);
        lv_targetYToEdgeOfMap = (PointGetY(RegionGetBoundsMax(RegionPlayableMap())) - PointGetY(lv_targetPoint));
        lv_casterXToEdgeOfMap = PointGetX(lv_casterPoint);
        lv_casterYToEdgeOfMap = (PointGetY(RegionGetBoundsMax(RegionPlayableMap())) - PointGetY(lv_casterPoint));
        lv_targetAngle = (AngleBetweenPoints(lv_casterPoint, lv_targetPoint) - 90.0);
        lv_cosineofTargetAngle = Cos(lv_targetAngle);
        if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
            lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(lv_targetPoint));
        }
        else {
            lv_triangle1C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
            lv_casterTriangle1C = (lv_casterYToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            lv_cosineofTargetAngle = Cos(lv_targetAngle);
            if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
                lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMax(RegionPlayableMap())));
            }
            else {
                lv_triangle2C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
                lv_casterTriangle2C = (lv_casterXToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                    libCPCD_gv_cDSwannDrillBeamDistance[lp_player] = FixedToInt(lv_casterTriangle1C);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                    libCPCD_gv_cDSwannDrillBeamDistance[lp_player] = FixedToInt(lv_casterTriangle2C);
                }
            }
        }
    }
    else if ((PointGetX(lv_casterPoint) >= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) >= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = PointGetX(lv_targetPoint);
        lv_targetYToEdgeOfMap = PointGetY(lv_targetPoint);
        lv_casterXToEdgeOfMap = PointGetX(lv_casterPoint);
        lv_casterYToEdgeOfMap = PointGetY(lv_casterPoint);
        lv_targetAngle = (AngleBetweenPoints(lv_casterPoint, lv_targetPoint) - 180.0);
        lv_cosineofTargetAngle = Cos(lv_targetAngle);
        if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
            lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())));
        }
        else {
            lv_triangle1C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
            lv_casterTriangle1C = (lv_casterXToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            lv_cosineofTargetAngle = Cos(lv_targetAngle);
            if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
                lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(lv_targetPoint));
            }
            else {
                lv_triangle2C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
                lv_casterTriangle2C = (lv_casterYToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                    libCPCD_gv_cDSwannDrillBeamDistance[lp_player] = FixedToInt(lv_casterTriangle1C);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                    libCPCD_gv_cDSwannDrillBeamDistance[lp_player] = FixedToInt(lv_casterTriangle2C);
                }
            }
        }
    }
    else if ((PointGetX(lv_casterPoint) <= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) >= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = (PointGetX(RegionGetBoundsMax(RegionPlayableMap())) - PointGetX(lv_targetPoint));
        lv_targetYToEdgeOfMap = PointGetY(lv_targetPoint);
        lv_casterXToEdgeOfMap = (PointGetX(RegionGetBoundsMax(RegionPlayableMap())) - PointGetX(lv_casterPoint));
        lv_casterYToEdgeOfMap = PointGetY(lv_casterPoint);
        lv_targetAngle = (AngleBetweenPoints(lv_casterPoint, lv_targetPoint) - 270.0);
        lv_cosineofTargetAngle = Cos(lv_targetAngle);
        if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
            lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMax(RegionPlayableMap())), PointGetY(lv_targetPoint));
        }
        else {
            lv_triangle1C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
            lv_casterTriangle1C = (lv_casterYToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            lv_cosineofTargetAngle = Cos(lv_targetAngle);
            if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
                lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())));
            }
            else {
                lv_triangle2C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
                lv_casterTriangle2C = (lv_casterXToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                    libCPCD_gv_cDSwannDrillBeamDistance[lp_player] = FixedToInt(lv_casterTriangle1C);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                    libCPCD_gv_cDSwannDrillBeamDistance[lp_player] = FixedToInt(lv_casterTriangle2C);
                }
            }
        }
    }
    if ((lv_abilityTargetPoint != null)) {
        return lv_abilityTargetPoint;
    }
    else {
        return null;
    }
}

void libCPCD_gf_CDKerriganMalignantCreep (int lp_player) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_totalPlayersLevel;
    int[libCPGL_gv_humanPlayerCount + 1] lv_playerLevel;
    string lv_entry;
    int lv_catalog;
    int lv_index;
    int lv_count;
    fixed lv_add;
    int lv_kerriganplayer;
    fixed lv_attackspeedmultiplier;
    fixed lv_liferegenrate;

    // Automatic Variable Declarations
    playergroup auto73A2A807_g;
    int auto7589FE89_ae;
    const int auto7589FE89_ai = 1;
    playergroup auto0F5AE455_g;

    // Variable Initialization
    lv_itPlayer = PlayerGroupCount(libCPGL_gf_HumanPlayers());
    lv_catalog = c_gameCatalogUnit;
    lv_kerriganplayer = lp_player;
    lv_attackspeedmultiplier = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "KerriganMalignantCreepAttackSpeedDummy", "Amount", lv_kerriganplayer);
    lv_liferegenrate = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "KerriganMalignantCreepLifeRegenDummy", "Amount", lv_kerriganplayer);

    // Implementation
    auto73A2A807_g = libCPGL_gf_AllCommandersinPlayerGroup("Kerrigan", libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_AllyMutual, lp_player));
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto73A2A807_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((libCPGL_gv_commander[lv_itPlayer].lv_commanderLevel >= 7)) {
            lv_totalPlayersLevel += 1;
        }

    }
    if ((lv_totalPlayersLevel <= 0)) {
        return ;
    }

    lv_count = CatalogEntryCount(lv_catalog);
    auto7589FE89_ae = lv_count;
    lv_index = 1;
    for ( ; ( (auto7589FE89_ai >= 0 && lv_index <= auto7589FE89_ae) || (auto7589FE89_ai < 0 && lv_index >= auto7589FE89_ae) ) ; lv_index += auto7589FE89_ai ) {
        lv_entry = CatalogEntryGet(lv_catalog, lv_index);
        if ((CatalogEntryIsDefault(lv_catalog, lv_entry) == false) && (UnitTypeTestFlag(lv_entry, c_unitFlagInvulnerable) == false) && (UnitTypeTestFlag(lv_entry, c_unitFlagNoDraw) == false) && (UnitTypeTestFlag(lv_entry, c_unitFlagDestructible) == false) && (UnitTypeTestFlag(lv_entry, c_unitFlagMissile) == false) && (UnitTypeTestAttribute(lv_entry, c_unitAttributeStructure) == false) && ((UnitTypeTestAttribute(lv_entry, c_unitAttributeBiological) == true) || (UnitTypeTestAttribute(lv_entry, c_unitAttributeMechanical) == true) || (UnitTypeTestAttribute(lv_entry, c_unitAttributePsionic) == true)) && (CatalogFieldValueGet(c_gameCatalogUnit, lv_entry, "PlaneArray[Ground]", c_playerAny) == "1")) {
            auto0F5AE455_g = libCPGL_gf_HumanPlayers();
            lv_itPlayer = -1;
            while (true) {
                lv_itPlayer = PlayerGroupNextPlayer(auto0F5AE455_g, lv_itPlayer);
                if (lv_itPlayer < 0) { break; }
                if ((lv_playerLevel[lv_itPlayer] > 0)) {
                    CatalogFieldValueModify(c_gameCatalogUnit, lv_entry, "LifeRegenRateCreep", lv_itPlayer, FixedToString(lv_liferegenrate, c_fixedPrecisionAny), c_upgradeOperationAdd);
                    CatalogFieldValueModify(c_gameCatalogUnit, lv_entry, "AttackSpeedMultiplierCreep", lv_itPlayer, FixedToString(lv_attackspeedmultiplier, c_fixedPrecisionAny), c_upgradeOperationAdd);
                }

            }
        }

    }
}

void libCPCD_gf_EnableDisableZerglingRespawn (bool lp_enableDisable, int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_indexPlayer = lp_player;

    // Implementation
    if ((lp_enableDisable == true)) {
        TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("ZerglingRespawn", 0), true);
        TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("ZerglingRespawnPrimary", 0), true);
        TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("ZerglingRespawnDeath", 0), true);
    }
    else {
        TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("ZerglingRespawn", 0), false);
        TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("ZerglingRespawnPrimary", 0), false);
        TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("ZerglingRespawnDeath", 0), false);
    }
}

void libCPCD_gf_CM_PrestigeRaynor_AirSupplySetBonus (int lp_raynorPlayer) {
    // Variable Declarations
    unit lv_supplyunit;
    fixed lv_supply;

    // Automatic Variable Declarations
    unitgroup autoF9526B20_g;
    int autoF9526B20_u;

    // Variable Initialization

    // Implementation
    autoF9526B20_g = libCPCD_gv_cDRaynorPrestigeAir[lp_raynorPlayer];
    autoF9526B20_u = UnitGroupCount(autoF9526B20_g, c_unitCountAll);
    for (;; autoF9526B20_u -= 1) {
        lv_supplyunit = UnitGroupUnitFromEnd(autoF9526B20_g, autoF9526B20_u);
        if (lv_supplyunit == null) { break; }
        lv_supply += UnitGetPropertyFixed(lv_supplyunit, c_unitPropSuppliesUsed, c_unitPropCurrent);
    }
    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, "CommanderPrestigeRaynorAir", "Modification.RateMultiplierArray[" + IntToString(1) + "]", lp_raynorPlayer, (1 + (lv_supply / 100)));
}

void libCPCD_gf_CDRaynorUpgradeResearchCost (int lp_player, int lp_level) {
    // Variable Declarations
    fixed lv_changedFactor;
    const string lv_upgrade = "MasteryRaynorResearchCost";
    int lv_researchCount;
    int lv_itResearchIndex;
    string lv_itResearch;
    int lv_abilCmdCount;
    const int lv_resourceTypeCount = 4;
    int lv_itResearchCmd;
    int lv_itResourceType;
    fixed lv_default;

    // Automatic Variable Declarations
    int auto843A5F27_ae;
    const int auto843A5F27_ai = 1;
    int auto2F089B35_ae;
    const int auto2F089B35_ai = 1;
    int auto66EC98F1_ae;
    const int auto66EC98F1_ai = 1;

    // Variable Initialization
    lv_changedFactor = (1-(IntToFixed(lp_level)*0.02));
    lv_researchCount = CatalogFieldValueCount(c_gameCatalogUpgrade, lv_upgrade, "AffectedUnitArray", lp_player);
    lv_itResearch = "";
    lv_abilCmdCount = CatalogFieldValueCount(c_gameCatalogAbil, "ArmoryResearch", "InfoArray", c_playerAny);

    // Implementation
    auto843A5F27_ae = (lv_researchCount-1);
    lv_itResearchIndex = 0;
    for ( ; ( (auto843A5F27_ai >= 0 && lv_itResearchIndex <= auto843A5F27_ae) || (auto843A5F27_ai < 0 && lv_itResearchIndex >= auto843A5F27_ae) ) ; lv_itResearchIndex += auto843A5F27_ai ) {
        lv_itResearch = CatalogFieldValueGet(c_gameCatalogUpgrade, lv_upgrade, "AffectedUnitArray[" + IntToString(lv_itResearchIndex) + "]", lp_player);
        auto2F089B35_ae = (lv_abilCmdCount-1);
        lv_itResearchCmd = 0;
        for ( ; ( (auto2F089B35_ai >= 0 && lv_itResearchCmd <= auto2F089B35_ae) || (auto2F089B35_ai < 0 && lv_itResearchCmd >= auto2F089B35_ae) ) ; lv_itResearchCmd += auto2F089B35_ai ) {
            auto66EC98F1_ae = (lv_resourceTypeCount-1);
            lv_itResourceType = 0;
            for ( ; ( (auto66EC98F1_ai >= 0 && lv_itResourceType <= auto66EC98F1_ae) || (auto66EC98F1_ai < 0 && lv_itResourceType >= auto66EC98F1_ae) ) ; lv_itResourceType += auto66EC98F1_ai ) {
                lv_default = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, lv_itResearch, "InfoArray[" + IntToString(lv_itResearchCmd) + "].Resource[" + IntToString(lv_itResourceType) + "]", c_playerAny);
                libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, lv_itResearch, "InfoArray[" + IntToString(lv_itResearchCmd) + "].Resource[" + IntToString(lv_itResourceType) + "]", lp_player, CeilingI((lv_default*lv_changedFactor)));
            }
        }
    }
}

void libCPCD_gf_CDAbathurBiomassMerge (unit lp_biomassUnit, int lp_biomassUnitCount) {
    // Variable Declarations
    fixed lv_biomassCongealRadius;
    int lv_nearbyBiomassMaxCount;
    unit lv_nearbyBiomassMaxCountUnit;

    // Automatic Variable Declarations
    unitgroup auto1D8CAEC8_g;
    int auto1D8CAEC8_u;
    unit auto1D8CAEC8_var;

    // Variable Initialization
    lv_biomassCongealRadius = 4.0;

    // Implementation
    auto1D8CAEC8_g = UnitGroup("BiomassPickup", UnitGetOwner(lp_biomassUnit), RegionCircle(UnitGetPosition(lp_biomassUnit), lv_biomassCongealRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1D8CAEC8_u = UnitGroupCount(auto1D8CAEC8_g, c_unitCountAll);
    for (;; auto1D8CAEC8_u -= 1) {
        auto1D8CAEC8_var = UnitGroupUnitFromEnd(auto1D8CAEC8_g, auto1D8CAEC8_u);
        if (auto1D8CAEC8_var == null) { break; }
        if (((UnitGetCustomValue(auto1D8CAEC8_var, 63) > lv_nearbyBiomassMaxCount) && (auto1D8CAEC8_var != lp_biomassUnit) && (UnitHasBehavior2(auto1D8CAEC8_var, "BiomassTravelling") == false))) {
            lv_nearbyBiomassMaxCount = FixedToInt(UnitGetCustomValue(auto1D8CAEC8_var, 63));
            lv_nearbyBiomassMaxCountUnit = auto1D8CAEC8_var;
        }

    }
    if ((lv_nearbyBiomassMaxCountUnit != null)) {
        libCPCD_gf_CDAbathurBiomassSetStack(lv_nearbyBiomassMaxCountUnit, FixedToInt((UnitGetCustomValue(lv_nearbyBiomassMaxCountUnit, 63) + lp_biomassUnitCount)));
        UnitBehaviorAdd(lp_biomassUnit, "BiomassTravelling", lp_biomassUnit, 1);
        UnitCreateEffectUnit(lp_biomassUnit, "BiomassPickupFullLM", lv_nearbyBiomassMaxCountUnit);
        libCPCD_gf_CDAbathurBiomassScale(lv_nearbyBiomassMaxCountUnit, false);
    }

}

void libCPCD_gf_CDAbathurBiomassScale (unit lp_biomassUnit, bool lp_instantScale) {
    // Variable Declarations
    fixed lv_customScale;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_customScale = (UnitGetCustomValue(lp_biomassUnit, 63) / 100.0);
    lv_customScale += 0.8;
    if ((lv_customScale > 1.8)) {
        lv_customScale = 1.8;
    }

    if ((lp_instantScale == true)) {
        TextExpressionSetToken("Param/Expression/lib_CPCD_EC24BF3B", "A", FixedToText(lv_customScale, c_fixedPrecisionAny));
        ActorSendAsText(libNtve_gf_MainActorofUnit(lp_biomassUnit), TextExpressionAssemble("Param/Expression/lib_CPCD_EC24BF3B"));
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_CPCD_F46CE3B8", "A", FixedToText(lv_customScale, c_fixedPrecisionAny));
        ActorSendAsText(libNtve_gf_MainActorofUnit(lp_biomassUnit), TextExpressionAssemble("Param/Expression/lib_CPCD_F46CE3B8"));
    }
}

void libCPCD_gf_CDAbathurBiomassTransfer (int lp_indexPlayer, unit lp_trainUnit, int lp_biomassBuff100Count, int lp_biomassBuff10Count, int lp_biomassBuff1Count) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorAddPlayer(lp_trainUnit, "BiomassBuff100", lp_indexPlayer, lp_biomassBuff100Count);
    UnitBehaviorAddPlayer(lp_trainUnit, "BiomassBuff10", lp_indexPlayer, lp_biomassBuff10Count);
    UnitBehaviorAddPlayer(lp_trainUnit, "BiomassBuff1", lp_indexPlayer, lp_biomassBuff1Count);
    UnitCreateEffectUnit(lp_trainUnit, "PostMorphHeal", lp_trainUnit);
}

int libCPCD_gf_CDAbathurBiomassGetStack (unit lp_biomass) {
    // Variable Declarations
    int lv_stack;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_stack = FixedToInt(UnitGetCustomValue(lp_biomass, 63));

    // Implementation
    return lv_stack;
}

void libCPCD_gf_CDAbathurBiomassSetStack (unit lp_biomass, int lp_stack) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetCustomValue(lp_biomass, 63, IntToFixed(lp_stack));
    TextExpressionSetToken("Param/Expression/lib_CPCD_E639B354", "Stack", IntToText(lp_stack));
    UnitSetInfoTip(lp_biomass, TextExpressionAssemble("Param/Expression/lib_CPCD_E639B354"));
}

void libCPCD_gf_CM_Nova_IterateExistingBuildings (int lp_novaPlayer) {
    // Variable Declarations
    unit lv_building;

    // Automatic Variable Declarations
    unitgroup auto88913DB8_g;
    int auto88913DB8_u;
    unitgroup autoAFCC37B0_g;
    int autoAFCC37B0_u;
    unitgroup auto951AC724_g;
    int auto951AC724_u;

    // Variable Initialization

    // Implementation
    auto88913DB8_g = UnitGroup("Barracks", lp_novaPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto88913DB8_u = UnitGroupCount(auto88913DB8_g, c_unitCountAll);
    for (;; auto88913DB8_u -= 1) {
        lv_building = UnitGroupUnitFromEnd(auto88913DB8_g, auto88913DB8_u);
        if (lv_building == null) { break; }
        libCPCD_gf_CM_PrestigeNova_SpecializeUnitCharges(UnitGetType(lv_building), lp_novaPlayer);
        libCPCD_gf_CDNovaModifyBuildingCooldowns(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "BarracksTrainNova", "InfoArray[" + IntToString(0) + "].Charge.TimeUse", lp_novaPlayer), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "BarracksTrainNova", "InfoArray[" + IntToString(0) + "].Charge.CountMax", lp_novaPlayer), "BarracksTrainNovaMarine", lp_novaPlayer);
        libCPCD_gf_CDNovaModifyBuildingCooldowns(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "BarracksTrainNova", "InfoArray[" + IntToString(1) + "].Charge.TimeUse", lp_novaPlayer), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "BarracksTrainNova", "InfoArray[" + IntToString(1) + "].Charge.CountMax", lp_novaPlayer), "BarracksTrainMarauderNova", lp_novaPlayer);
        libCPCD_gf_CDNovaModifyBuildingCooldowns(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "BarracksTrainNova", "InfoArray[" + IntToString(2) + "].Charge.TimeUse", lp_novaPlayer), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "BarracksTrainNova", "InfoArray[" + IntToString(2) + "].Charge.CountMax", lp_novaPlayer), "BarracksTrainGhostNova", lp_novaPlayer);
        libCPCD_gv_cDNovaBarracksBuilt[lp_novaPlayer] = 1;
    }
    autoAFCC37B0_g = UnitGroup("Factory", lp_novaPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    autoAFCC37B0_u = UnitGroupCount(autoAFCC37B0_g, c_unitCountAll);
    for (;; autoAFCC37B0_u -= 1) {
        lv_building = UnitGroupUnitFromEnd(autoAFCC37B0_g, autoAFCC37B0_u);
        if (lv_building == null) { break; }
        libCPCD_gf_CM_PrestigeNova_SpecializeUnitCharges(UnitGetType(lv_building), lp_novaPlayer);
        libCPCD_gf_CDNovaModifyBuildingCooldowns(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "FactoryTrainNova", "InfoArray[" + IntToString(0) + "].Charge.TimeUse", lp_novaPlayer), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "FactoryTrainNova", "InfoArray[" + IntToString(0) + "].Charge.CountMax", lp_novaPlayer), "FactoryTrainGoliathNova", lp_novaPlayer);
        libCPCD_gf_CDNovaModifyBuildingCooldowns(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "FactoryTrainNova", "InfoArray[" + IntToString(1) + "].Charge.TimeUse", lp_novaPlayer), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "FactoryTrainNova", "InfoArray[" + IntToString(1) + "].Charge.CountMax", lp_novaPlayer), "FactoryTrainSiegeTankNova", lp_novaPlayer);
        libCPCD_gf_CDNovaModifyBuildingCooldowns(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "FactoryTrainNova", "InfoArray[" + IntToString(2) + "].Charge.TimeUse", lp_novaPlayer), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "FactoryTrainNova", "InfoArray[" + IntToString(2) + "].Charge.CountMax", lp_novaPlayer), "FactoryTrainHellbatNova", lp_novaPlayer);
        libCPCD_gv_cDNovaBarracksBuilt[lp_novaPlayer] = 1;
    }
    auto951AC724_g = UnitGroup("Starport", lp_novaPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto951AC724_u = UnitGroupCount(auto951AC724_g, c_unitCountAll);
    for (;; auto951AC724_u -= 1) {
        lv_building = UnitGroupUnitFromEnd(auto951AC724_g, auto951AC724_u);
        if (lv_building == null) { break; }
        libCPCD_gf_CM_PrestigeNova_SpecializeUnitCharges(UnitGetType(lv_building), lp_novaPlayer);
        libCPCD_gf_CDNovaModifyBuildingCooldowns(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "StarportTrainNova", "InfoArray[" + IntToString(0) + "].Charge.TimeUse", lp_novaPlayer), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "StarportTrainNova", "InfoArray[" + IntToString(0) + "].Charge.CountMax", lp_novaPlayer), "StarportTrainBansheeNova", lp_novaPlayer);
        libCPCD_gf_CDNovaModifyBuildingCooldowns(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "StarportTrainNova", "InfoArray[" + IntToString(1) + "].Charge.TimeUse", lp_novaPlayer), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "StarportTrainNova", "InfoArray[" + IntToString(1) + "].Charge.CountMax", lp_novaPlayer), "StarportTrainRavenNova", lp_novaPlayer);
        libCPCD_gf_CDNovaModifyBuildingCooldowns(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "StarportTrainNova", "InfoArray[" + IntToString(2) + "].Charge.TimeUse", lp_novaPlayer), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "StarportTrainNova", "InfoArray[" + IntToString(2) + "].Charge.CountMax", lp_novaPlayer), "StarportTrainLiberatorNova", lp_novaPlayer);
        libCPCD_gv_cDNovaBarracksBuilt[lp_novaPlayer] = 1;
    }
}

void libCPCD_gf_CDNovaModifyBuildingCooldowns (fixed lp_maxRegenTime, fixed lp_maxChargeCount, string lp_cooldownName, int lp_player) {
    // Variable Declarations
    fixed lv_currentRegenTime;
    fixed lv_currentChargesUsed;
    fixed lv_intendedChargesUsed;
    fixed lv_intendedRegenTime;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentRegenTime = PlayerGetChargeRegen(lp_player, lp_cooldownName);
    lv_currentChargesUsed = PlayerGetChargeUsed(lp_player, lp_cooldownName);
    lv_intendedChargesUsed = (lp_maxChargeCount - lv_currentChargesUsed - 1.0);
    lv_intendedRegenTime = (lp_maxRegenTime - lv_currentRegenTime);

    // Implementation
    PlayerAddChargeRegenRemaining(lp_player, lp_cooldownName, lv_intendedRegenTime);
    PlayerAddChargeUsed(lp_player, lp_cooldownName, lv_intendedChargesUsed);
}

void libCPCD_gf_CM_PrestigeNova_SpecializeUnitCharges (string lp_unitType, int lp_novaPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCPGL_gv_commander[lp_novaPlayer].lv_commander == "Nova") || (TechTreeUpgradeCount(lp_novaPlayer, "CommanderPrestigeNovaBioBarracksFirst", c_techCountCompleteOnly) > 0) || (TechTreeUpgradeCount(lp_novaPlayer, "CommanderPrestigeNovaBioFactoryFirst", c_techCountCompleteOnly) > 0) || (TechTreeUpgradeCount(lp_novaPlayer, "CommanderPrestigeNovaBioStarportFirst", c_techCountCompleteOnly) > 0))) {
        return ;
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_novaPlayer, "CommanderPrestigeNovaBioBarracksFirst", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_novaPlayer, "CommanderPrestigeNovaBioFactoryFirst", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_novaPlayer, "CommanderPrestigeNovaBioStarportFirst", 1);
    }
}

text libCPCD_gf_CC_StoryArmyUnitUnitType2 (string lp_unitType) {
    // Variable Declarations
    int lv_i;
    bool lv_matchFound;
    text lv_returnText;

    // Automatic Variable Declarations
    int auto3F33AA9B_ae;
    const int auto3F33AA9B_ai = 1;

    // Variable Initialization

    // Implementation
    auto3F33AA9B_ae = UserDataInstanceCount("NovaUnitRanks");
    lv_i = 1;
    for ( ; ( (auto3F33AA9B_ai >= 0 && lv_i <= auto3F33AA9B_ae) || (auto3F33AA9B_ai < 0 && lv_i >= auto3F33AA9B_ae) ) ; lv_i += auto3F33AA9B_ai ) {
        if ((lp_unitType == UserDataGetGameLink("NovaUnitRanks", UserDataInstance("NovaUnitRanks", lv_i), "RankUnitType", 1))) {
            return UserDataGetText("NovaUnitRanks", UserDataInstance("NovaUnitRanks", lv_i), "Rank", 1);
            return null;
        }

    }
    return lv_returnText;
}

text libCPCD_gf_CC_StoryArmyUnitUnitType (int lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("NovaUnitNames", UserDataInstance("NovaUnitNames", lp_armyUnit), "Name", 1);
}

void libCPCD_gf_CDNovaNamesKillUpdate (unit lp_updatingUnit, int lp_iD) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_CPCD_38A02300", "Rank", libCPCD_gf_CC_StoryArmyUnitUnitType2(UnitGetType(lp_updatingUnit)));
    TextExpressionSetToken("Param/Expression/lib_CPCD_38A02300", "NameVar", libCPCD_gv_cDNovaNames[lp_iD]);
    TextExpressionSetToken("Param/Expression/lib_CPCD_38A02300", "Kills", IntToText(libNtve_gf_UnitGetPropertyKills(lp_updatingUnit, c_unitPropCurrent)));
    UnitSetInfoText2(lp_updatingUnit, TextExpressionAssemble("Param/Expression/lib_CPCD_38A02300"));
}

trigger auto_libCPCD_gf_CM_Stukov_InfestStructureInitialCooldown_Trigger = null;
int auto_libCPCD_gf_CM_Stukov_InfestStructureInitialCooldown_lp_player;

void libCPCD_gf_CM_Stukov_InfestStructureInitialCooldown (int lp_player) {
    auto_libCPCD_gf_CM_Stukov_InfestStructureInitialCooldown_lp_player = lp_player;

    if (auto_libCPCD_gf_CM_Stukov_InfestStructureInitialCooldown_Trigger == null) {
        auto_libCPCD_gf_CM_Stukov_InfestStructureInitialCooldown_Trigger = TriggerCreate("auto_libCPCD_gf_CM_Stukov_InfestStructureInitialCooldown_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CM_Stukov_InfestStructureInitialCooldown_Trigger, false, false);
}

bool auto_libCPCD_gf_CM_Stukov_InfestStructureInitialCooldown_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCPCD_gf_CM_Stukov_InfestStructureInitialCooldown_lp_player;

    // Variable Declarations
    fixed lv_cooldown;
    fixed lv_initialCoolup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cooldown = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "SIStukovInfestStructureUpgraded", "Cost[" + IntToString(0) + "].Charge.TimeUse", lp_player);
    lv_initialCoolup = libCPGL_gf_BTBuildTime();

    // Implementation
    PlayerAddChargeUsed(lp_player, "Abil/SIStukovInfestStructureUpgraded", 3.0);
    PlayerAddChargeRegenRemaining(lp_player, "Abil/SIStukovInfestStructureUpgraded", lv_initialCoolup);
    Wait(lv_initialCoolup, c_timeGame);
    libNtve_gf_PlayerRemoveChargeUsed(lp_player, "Abil/SIStukovInfestStructureUpgraded");
    PlayerAddChargeUsed(lp_player, "Abil/SIStukovInfestStructureUpgraded", 2.0);
    PlayerAddChargeRegenRemaining(lp_player, "Abil/SIStukovInfestStructureUpgraded", lv_cooldown);
    return true;
}

void libCPCD_gf_CDStukovRallyIssueOrdertoUnit (unit lp_rallyingUnit, bool lp_overrideExistingOrders) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(lp_rallyingUnit);

    // Implementation
    if (((UnitOrderCount(lp_rallyingUnit) == 0) || (lp_overrideExistingOrders == true))) {
        if ((libCPCD_gv_cDStukovRallyUnit[lv_player] == null)) {
            if ((libCPCD_gv_cDStukovRallyPoint[lv_player] != null)) {
                UnitIssueOrder(lp_rallyingUnit, OrderTargetingPoint(AbilityCommand("move", 3), libCPCD_gv_cDStukovRallyPoint[lv_player]), c_orderQueueReplace);
            }

        }
        else {
            if ((UnitHasBehavior2(libCPCD_gv_cDStukovRallyUnit[lv_player], "ExpansionRocks") == true)) {
                UnitIssueOrder(lp_rallyingUnit, OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(libCPCD_gv_cDStukovRallyUnit[lv_player])), c_orderQueueReplace);
                UnitIssueOrder(lp_rallyingUnit, OrderTargetingUnit(AbilityCommand("attack", 0), libCPCD_gv_cDStukovRallyUnit[lv_player]), c_orderQueueAddToEnd);
            }
            else {
                if (((UnitHasBehavior2(libCPCD_gv_cDStukovRallyUnit[lv_player], "NydusNetworkConjoined") == true) || (UnitHasBehavior2(libCPCD_gv_cDStukovRallyUnit[lv_player], "NydusWormConjoined") == true) || (UnitHasBehavior2(libCPCD_gv_cDStukovRallyUnit[lv_player], "GreaterNydusWormConjoined") == true))) {
                    UnitIssueOrder(lp_rallyingUnit, OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(libCPCD_gv_cDStukovRallyUnit[lv_player])), c_orderQueueReplace);
                    UnitIssueOrder(lp_rallyingUnit, OrderTargetingUnit(null, libCPCD_gv_cDStukovRallyUnit[lv_player]), c_orderQueueAddToEnd);
                }
                else {
                    UnitIssueOrder(lp_rallyingUnit, OrderTargetingUnit(AbilityCommand("move", 3), libCPCD_gv_cDStukovRallyUnit[lv_player]), c_orderQueueReplace);
                }
            }
        }
    }

}

void libCPCD_gf_CDStukovRallyIssueOrdertoHorde (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCPCD_gv_cDStukovRallyUnit[lp_player] == null) || (UnitIsAlive(libCPCD_gv_cDStukovRallyUnit[lp_player]) == false))) {
        if ((libCPCD_gv_cDStukovRallyPoint[lp_player] != null)) {
            UnitGroupIssueOrder(libCPCD_gv_cDStukovHorde[lp_player], OrderTargetingPoint(AbilityCommand("move", 3), libCPCD_gv_cDStukovRallyPoint[lp_player]), c_orderQueueReplace);
        }

    }
    else {
        if ((UnitHasBehavior2(libCPCD_gv_cDStukovRallyUnit[lp_player], "ExpansionRocks") == true)) {
            UnitGroupIssueOrder(libCPCD_gv_cDStukovHorde[lp_player], OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(libCPCD_gv_cDStukovRallyUnit[lp_player])), c_orderQueueReplace);
            UnitGroupIssueOrder(libCPCD_gv_cDStukovHorde[lp_player], OrderTargetingUnit(AbilityCommand("attack", 0), libCPCD_gv_cDStukovRallyUnit[lp_player]), c_orderQueueAddToEnd);
        }
        else {
            if (((UnitHasBehavior2(libCPCD_gv_cDStukovRallyUnit[lp_player], "NydusNetworkConjoined") == true) || (UnitHasBehavior2(libCPCD_gv_cDStukovRallyUnit[lp_player], "NydusWormConjoined") == true) || (UnitHasBehavior2(libCPCD_gv_cDStukovRallyUnit[lp_player], "GreaterNydusWormConjoined") == true))) {
                UnitGroupIssueOrder(libCPCD_gv_cDStukovHorde[lp_player], OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(libCPCD_gv_cDStukovRallyUnit[lp_player])), c_orderQueueReplace);
                UnitGroupIssueOrder(libCPCD_gv_cDStukovHorde[lp_player], OrderTargetingUnit(null, libCPCD_gv_cDStukovRallyUnit[lp_player]), c_orderQueueAddToEnd);
            }
            else {
                UnitGroupIssueOrder(libCPCD_gv_cDStukovHorde[lp_player], OrderTargetingUnit(AbilityCommand("move", 3), libCPCD_gv_cDStukovRallyUnit[lp_player]), c_orderQueueReplace);
            }
        }
    }
}

void libCPCD_gf_CDStukovBunkerTrainIssueOrder (unit lp_newUnit) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = lp_newUnit;
    lv_player = UnitGetOwner(lp_newUnit);

    // Implementation
    if ((UnitHasBehavior2(lp_newUnit, "SIBarracksTrainTimedLifeHasBeenApplied") == false)) {
        UnitBehaviorAdd(lv_unit, "SIBarracksTrainTimedLifeHasBeenApplied", lv_unit, 1);
        UnitBehaviorAdd(lv_unit, "SIInfestedBunkerTrainTimedLife", lv_unit, 1);
        UnitSetState(lv_unit, c_unitStateUsingSupply, false);
    }

    UnitGroupAdd(libCPCD_gv_cDStukovHorde[lv_player], lv_unit);
    UnitGroupAdd(libCPCD_gv_cDStukovHordeWave[lv_player], lv_unit);
    libCPCD_gv_cDStukovHordeCount[lv_player] = UnitGroupCount(libCPCD_gv_cDStukovHorde[lv_player], c_unitCountAlive);
    libCPCD_gf_CDStukovRallyIssueOrdertoUnit(lp_newUnit, true);
}

void libCPCD_gf_TransferGuardianShell (unit lp_source, unit lp_target) {
    // Variable Declarations
    string lv_itbehavior;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitBehaviorTransfer(lp_source, lp_target, "DarkTemplarRecentlyRecalled", c_unitBehaviorCountAll);
    UnitBehaviorTransfer(lp_source, lp_target, "SOARecallOnDeathRecentlyRecalled", c_unitBehaviorCountAll);
    UnitBehaviorTransfer(lp_source, lp_target, "SOAHeroicShieldWeakness", c_unitBehaviorCountAll);
    UnitBehaviorTransfer(lp_source, lp_target, "SOAHeroicShieldImmunity", c_unitBehaviorCountAll);
}

trigger auto_libCPCD_gf_FenixInitialDummySpawn_Trigger = null;
int auto_libCPCD_gf_FenixInitialDummySpawn_lp_player;

void libCPCD_gf_FenixInitialDummySpawn (int lp_player) {
    auto_libCPCD_gf_FenixInitialDummySpawn_lp_player = lp_player;

    if (auto_libCPCD_gf_FenixInitialDummySpawn_Trigger == null) {
        auto_libCPCD_gf_FenixInitialDummySpawn_Trigger = TriggerCreate("auto_libCPCD_gf_FenixInitialDummySpawn_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_FenixInitialDummySpawn_Trigger, false, false);
}

bool auto_libCPCD_gf_FenixInitialDummySpawn_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCPCD_gf_FenixInitialDummySpawn_lp_player;

    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itPlayer = lp_player;

    // Implementation
    Wait(0.0625, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FenixManaDummy1", c_unitCreateIgnorePlacement, lv_itPlayer, Point(0.0, 0.0));
    UnitGroupAdd(libCPCD_gv_cDFenixHeroDummyGroup[lv_itPlayer], UnitLastCreated());
    libCPCD_gv_cDFenixSuits[1][lv_itPlayer] = UnitLastCreated();
    libCPCD_gf_LinkUnitEnergyToGPCmdButton(libCPCD_gv_cDFenixSuits[1][lv_itPlayer], lv_itPlayer, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FenixManaDummy2", c_unitCreateIgnorePlacement, lv_itPlayer, Point(0.0, 0.0));
    UnitGroupAdd(libCPCD_gv_cDFenixHeroDummyGroup[lv_itPlayer], UnitLastCreated());
    libCPCD_gv_cDFenixSuits[2][lv_itPlayer] = UnitLastCreated();
    libCPCD_gf_LinkUnitEnergyToGPCmdButton(libCPCD_gv_cDFenixSuits[2][lv_itPlayer], lv_itPlayer, 2);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FenixManaDummy3", c_unitCreateIgnorePlacement, lv_itPlayer, Point(0.0, 0.0));
    UnitGroupAdd(libCPCD_gv_cDFenixHeroDummyGroup[lv_itPlayer], UnitLastCreated());
    libCPCD_gv_cDFenixSuits[3][lv_itPlayer] = UnitLastCreated();
    libCPCD_gf_LinkUnitEnergyToGPCmdButton(libCPCD_gv_cDFenixSuits[3][lv_itPlayer], lv_itPlayer, 3);
    libCPCD_gv_cDFenixAbilityCommands[1] = "SOASummonFenix";
    libCPCD_gv_cDFenixAbilityCommands[2] = "SOASummonFenixDragoon";
    libCPCD_gv_cDFenixAbilityCommands[3] = "SOASummonFenixArbiter";
    if ((TechTreeUpgradeCount(lv_itPlayer, "FenixOfflineSuitRegen", c_techCountCompleteOnly) == 1)) {
        libCPCD_gv_cDFenixOfflineHealthRegen[lv_itPlayer] *= libCPCD_gv_cDFenixOfflineVitalRegenMultiplier;
        libCPCD_gv_cDFenixOfflineShieldRegen[lv_itPlayer] *= libCPCD_gv_cDFenixOfflineVitalRegenMultiplier;
    }

    libCPCD_gv_cDFenixOfflineEnergyRegen[lv_itPlayer] *= ((TechTreeUpgradeCount(lv_itPlayer, "MasteryFenixSuitEnergyRegen", c_techCountCompleteOnly) / 100.0) + 1.0);
    return true;
}

trigger auto_libCPCD_gf_CDFenixRecallReveal_Trigger = null;
int auto_libCPCD_gf_CDFenixRecallReveal_lp_player;
abilcmd auto_libCPCD_gf_CDFenixRecallReveal_lp_cmd;
point auto_libCPCD_gf_CDFenixRecallReveal_lp_targetPoint;
string auto_libCPCD_gf_CDFenixRecallReveal_lp_unitType;

void libCPCD_gf_CDFenixRecallReveal (int lp_player, abilcmd lp_cmd, point lp_targetPoint, string lp_unitType) {
    auto_libCPCD_gf_CDFenixRecallReveal_lp_player = lp_player;
    auto_libCPCD_gf_CDFenixRecallReveal_lp_cmd = lp_cmd;
    auto_libCPCD_gf_CDFenixRecallReveal_lp_targetPoint = lp_targetPoint;
    auto_libCPCD_gf_CDFenixRecallReveal_lp_unitType = lp_unitType;

    if (auto_libCPCD_gf_CDFenixRecallReveal_Trigger == null) {
        auto_libCPCD_gf_CDFenixRecallReveal_Trigger = TriggerCreate("auto_libCPCD_gf_CDFenixRecallReveal_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CDFenixRecallReveal_Trigger, false, false);
}

bool auto_libCPCD_gf_CDFenixRecallReveal_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCPCD_gf_CDFenixRecallReveal_lp_player;
    abilcmd lp_cmd = auto_libCPCD_gf_CDFenixRecallReveal_lp_cmd;
    point lp_targetPoint = auto_libCPCD_gf_CDFenixRecallReveal_lp_targetPoint;
    string lp_unitType = auto_libCPCD_gf_CDFenixRecallReveal_lp_unitType;

    // Variable Declarations
    fixed lv_cooldown;
    string lv_cooldownLink;
    point lv_placementTarget;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(lp_cmd), "Cost[" + IntToString(0) + "].Cooldown.Link", lp_player);

    // Implementation
    lv_placementTarget = UnitTypePlacementFromPoint(lp_unitType, lp_player, lp_targetPoint, 500.0);
    VisRevealArea(lp_player, RegionCircle(lv_placementTarget, 10.0), 5.0, false);
    Wait(4.0, c_timeGame);
    lv_placementTarget = UnitTypePlacementFromPoint(lp_unitType, lp_player, lp_targetPoint, 500.0);
    lv_cooldown = PlayerGetCooldown(lp_player, lv_cooldownLink);
    libNtve_gf_PlayerRemoveCooldown(lp_player, lv_cooldownLink);
    UnitIssueOrder(libCPGL_gv_commander[lp_player].lv_globalCasterUnit, OrderTargetingPoint(lp_cmd, lv_placementTarget), c_orderQueueReplace);
    PlayerAddCooldown(lp_player, lv_cooldownLink, lv_cooldown);
    return true;
}

void libCPCD_gf_CDFenixVitalMatch (unit lp_hero) {
    // Variable Declarations
    int lv_i;
    int lv_player;
    int lv_suitIndex;

    // Automatic Variable Declarations
    string autoCC479431_val;

    // Variable Initialization
    lv_player = UnitGetOwner(lp_hero);

    // Implementation
    autoCC479431_val = UnitGetType(lp_hero);
    if (autoCC479431_val == "FenixCoop") {
        UnitSetPropertyFixed(libCPCD_gv_cDFenixSuits[1][lv_player], c_unitPropEnergy, UnitGetPropertyFixed(lp_hero, c_unitPropEnergy, c_unitPropCurrent));
        if ((UnitIsAlive(lp_hero) == false)) {
            lv_suitIndex = 1;
            UnitSetPropertyFixed(libCPCD_gv_cDFenixSuits[1][lv_player], c_unitPropLife, (UnitGetPropertyFixed(lp_hero, c_unitPropLife, c_unitPropCurrent) + 1.0));
            UnitSetPropertyFixed(libCPCD_gv_cDFenixSuits[1][lv_player], c_unitPropShields, UnitGetPropertyFixed(lp_hero, c_unitPropShields, c_unitPropCurrent));
        }

        libCPCD_gf_LinkUnitEnergyToGPCmdButton(libCPCD_gv_cDFenixSuits[1][lv_player], UnitGetOwner(lp_hero), 1);
    }
    else if (autoCC479431_val == "FenixDragoon") {
        UnitSetPropertyFixed(libCPCD_gv_cDFenixSuits[2][lv_player], c_unitPropEnergy, UnitGetPropertyFixed(lp_hero, c_unitPropEnergy, c_unitPropCurrent));
        if ((UnitIsAlive(lp_hero) == false)) {
            lv_suitIndex = 2;
            UnitSetPropertyFixed(libCPCD_gv_cDFenixSuits[2][lv_player], c_unitPropLife, (UnitGetPropertyFixed(lp_hero, c_unitPropLife, c_unitPropCurrent) + 1.0));
            UnitSetPropertyFixed(libCPCD_gv_cDFenixSuits[2][lv_player], c_unitPropShields, UnitGetPropertyFixed(lp_hero, c_unitPropShields, c_unitPropCurrent));
        }

        libCPCD_gf_LinkUnitEnergyToGPCmdButton(libCPCD_gv_cDFenixSuits[2][lv_player], UnitGetOwner(lp_hero), 2);
    }
    else if (autoCC479431_val == "FenixArbiter") {
        UnitSetPropertyFixed(libCPCD_gv_cDFenixSuits[3][lv_player], c_unitPropEnergy, UnitGetPropertyFixed(lp_hero, c_unitPropEnergy, c_unitPropCurrent));
        if ((UnitIsAlive(lp_hero) == false)) {
            lv_suitIndex = 3;
            UnitSetPropertyFixed(libCPCD_gv_cDFenixSuits[3][lv_player], c_unitPropLife, (UnitGetPropertyFixed(lp_hero, c_unitPropLife, c_unitPropCurrent) + 1.0));
            UnitSetPropertyFixed(libCPCD_gv_cDFenixSuits[3][lv_player], c_unitPropShields, UnitGetPropertyFixed(lp_hero, c_unitPropShields, c_unitPropCurrent));
        }

        libCPCD_gf_LinkUnitEnergyToGPCmdButton(libCPCD_gv_cDFenixSuits[3][lv_player], UnitGetOwner(lp_hero), 3);
    }
    else {
    }
    if ((libCPCD_gv_cDFenixSuicideLife[lv_player] > 0.0)) {
        UnitSetPropertyFixed(libCPCD_gv_cDFenixSuits[lv_suitIndex][lv_player], c_unitPropLife, libCPCD_gv_cDFenixSuicideLife[lv_player]);
        UnitSetPropertyFixed(libCPCD_gv_cDFenixSuits[lv_suitIndex][lv_player], c_unitPropShields, libCPCD_gv_cDFenixSuicideShield[lv_player]);
        libCPCD_gv_cDFenixSuicideLife[lv_player] = 0.0;
        libCPCD_gv_cDFenixSuicideLife[lv_player] = 0.0;
    }

}

void libCPCD_gf_CDFenixSetActiveHeroUIState (unit lp_unit, bool lp_active) {
    // Variable Declarations
    int lv_heroUnitID;

    // Automatic Variable Declarations
    string autoC76CA0B0_val;
    string auto7BAE10F3_val;

    // Variable Initialization

    // Implementation
    if ((lp_active == true)) {
        auto7BAE10F3_val = UnitGetType(lp_unit);
        if (auto7BAE10F3_val == "FenixCoop") {
            DialogControlSetAnimationState(libCPCD_gv_globalPowerCmdButtons[1][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "True");
            DialogControlSetAnimationState(libCPCD_gv_globalPowerCmdButtons[2][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "False");
            DialogControlSetAnimationState(libCPCD_gv_globalPowerCmdButtons[3][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "False");
        }
        else if (auto7BAE10F3_val == "FenixDragoon") {
            DialogControlSetAnimationState(libCPCD_gv_globalPowerCmdButtons[1][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "False");
            DialogControlSetAnimationState(libCPCD_gv_globalPowerCmdButtons[2][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "True");
            DialogControlSetAnimationState(libCPCD_gv_globalPowerCmdButtons[3][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "False");
        }
        else if (auto7BAE10F3_val == "FenixArbiter") {
            DialogControlSetAnimationState(libCPCD_gv_globalPowerCmdButtons[1][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "False");
            DialogControlSetAnimationState(libCPCD_gv_globalPowerCmdButtons[2][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "False");
            DialogControlSetAnimationState(libCPCD_gv_globalPowerCmdButtons[3][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "True");
        }
        else {
        }
    }
    else {
        autoC76CA0B0_val = UnitGetType(lp_unit);
        if (autoC76CA0B0_val == "FenixCoop") {
            DialogControlSetAnimationState(libCPCD_gv_globalPowerCmdButtons[1][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "False");
        }
        else if (autoC76CA0B0_val == "FenixDragoon") {
            DialogControlSetAnimationState(libCPCD_gv_globalPowerCmdButtons[2][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "False");
        }
        else if (autoC76CA0B0_val == "FenixArbiter") {
            DialogControlSetAnimationState(libCPCD_gv_globalPowerCmdButtons[3][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "False");
        }
        else {
        }
    }
}

void libCPCD_gf_CDFenixSetActiveHeroRally (unit lp_unit) {
    // Variable Declarations
    unit lv_ralliedUnit;

    // Automatic Variable Declarations
    unitgroup auto58CE3141_g;
    int auto58CE3141_u;

    // Variable Initialization

    // Implementation
    auto58CE3141_g = libCPCD_gv_cDFenixRalliedGroup;
    auto58CE3141_u = UnitGroupCount(auto58CE3141_g, c_unitCountAll);
    for (;; auto58CE3141_u -= 1) {
        lv_ralliedUnit = UnitGroupUnitFromEnd(auto58CE3141_g, auto58CE3141_u);
        if (lv_ralliedUnit == null) { break; }
        UnitIssueOrder(lv_ralliedUnit, OrderTargetingUnit(AbilityCommand("Rally", 0), lp_unit), c_orderQueueAddToFront);
    }
}

void libCPCD_gf_CDFenixChampionDeathBuffUpdate (int lp_group, int lp_player, int lp_stacksToApply) {
    // Variable Declarations
    fixed lv_moveSpeedHastePerStack;
    fixed lv_attackSpeedHastePerStack;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_moveSpeedHastePerStack = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "AvengingProtocolMoveSpeedDummy", "Amount", lp_player);
    lv_attackSpeedHastePerStack = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "AvengingProtocolAttackSpeedDummy", "Amount", lp_player);

    // Implementation
    if ((TechTreeUpgradeCount(lp_player, "FenixChampionSwapBoost", c_techCountCompleteOnly) >= 1)) {
        libCPCD_gv_cDFenixChampionDeathBuffStacks[lp_group] += lp_stacksToApply;
        if ((libCPCD_gv_cDFenixChampionDeathBuffStacks[lp_group] > libCPCD_gv_cDFenixChampionDeathBuffStackCount[lp_group])) {
            libCPCD_gv_cDFenixChampionDeathBuffStacks[lp_group] = libCPCD_gv_cDFenixChampionDeathBuffStackCount[lp_group];
        }

        CatalogFieldValueModify(c_gameCatalogBehavior, libCPCD_gv_cDFenixChampionDeathBuffBehavior[lp_group], "Modification.MoveSpeedMultiplier", lp_player, FixedToString((1.0 + (libCPCD_gv_cDFenixChampionDeathBuffStacks[lp_group] * lv_moveSpeedHastePerStack)), c_fixedPrecisionAny), c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogBehavior, libCPCD_gv_cDFenixChampionDeathBuffBehavior[lp_group], "Modification.AttackSpeedMultiplier", lp_player, FixedToString((1.0 + (libCPCD_gv_cDFenixChampionDeathBuffStacks[lp_group] * lv_attackSpeedHastePerStack)), c_fixedPrecisionAny), c_upgradeOperationSet);
        UnitBehaviorAdd(libCPCD_gv_cDFenixChampionUnit[lp_group][lp_player], libCPCD_gv_cDFenixChampionDeathBuffBehavior[lp_group], libCPCD_gv_cDFenixChampionUnit[lp_group][lp_player], 1);
    }

}

void libCPCD_gf_CDFenixChampionUpdateNetwork (int lp_group, int lp_player) {
    // Variable Declarations
    int lv_supply;
    int lv_maxCount;
    int lv_stacksPerSupply;

    // Automatic Variable Declarations
    unitgroup autoB118BE31_g;
    int autoB118BE31_u;
    unit autoB118BE31_var;

    // Variable Initialization
    lv_maxCount = CatalogFieldValueGetAsInt(c_gameCatalogEffect, libCPCD_gv_cM_Fenix_ChampionNetworkMaxCountDummy[lp_group], "Amount", lp_player);
    lv_stacksPerSupply = CatalogFieldValueGetAsInt(c_gameCatalogEffect, libCPCD_gv_cM_Fenix_ChampionNetworkStacksPerSupplyDummy[lp_group], "Amount", lp_player);

    // Implementation
    if ((TechTreeUpgradeCount(lp_player, "FenixNetworkedSuperiority", c_techCountCompleteOnly) >= 1)) {
        autoB118BE31_g = libCPCD_gv_cDFenixChampionShells[lp_group][lp_player];
        autoB118BE31_u = UnitGroupCount(autoB118BE31_g, c_unitCountAll);
        for (;; autoB118BE31_u -= 1) {
            autoB118BE31_var = UnitGroupUnitFromEnd(autoB118BE31_g, autoB118BE31_u);
            if (autoB118BE31_var == null) { break; }
            lv_supply -= CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(autoB118BE31_var), "Food", lp_player);
        }
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libCPCD_gv_cDFenixChampionNetworkUpgrades[lp_group], MinI((lv_supply * lv_stacksPerSupply), lv_maxCount));
    }

}

void libCPCD_gf_CDFenixChampionUpdateShellCount (int lp_group, int lp_player) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_count = UnitGroupCount(libCPCD_gv_cDFenixChampionShells[lp_group][lp_player], c_unitCountAlive);
    CatalogFieldValueSet(c_gameCatalogEffect, libCPCD_gv_cDFenixChampionShellEffect[lp_group], "Amount", lp_player, IntToString(lv_count));
}

void libCPCD_gf_CDDehakaEssenceMerge (unit lp_essenceUnit, int lp_essenceUnitCount) {
    // Variable Declarations
    fixed lv_essenceCongealRadius;
    int lv_nearbyEssenceMaxCount;
    unit lv_nearbyEssenceMaxCountUnit;

    // Automatic Variable Declarations
    unitgroup auto53789915_g;
    int auto53789915_u;
    unit auto53789915_var;

    // Variable Initialization
    lv_essenceCongealRadius = 1.9;

    // Implementation
    auto53789915_g = UnitGroup("EssencePickup", UnitGetOwner(lp_essenceUnit), RegionCircle(UnitGetPosition(lp_essenceUnit), lv_essenceCongealRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto53789915_u = UnitGroupCount(auto53789915_g, c_unitCountAll);
    for (;; auto53789915_u -= 1) {
        auto53789915_var = UnitGroupUnitFromEnd(auto53789915_g, auto53789915_u);
        if (auto53789915_var == null) { break; }
        if (((UnitGetCustomValue(auto53789915_var, 63) > lv_nearbyEssenceMaxCount) && (auto53789915_var != lp_essenceUnit) && (UnitHasBehavior2(auto53789915_var, "EssenceTravelling") == false))) {
            lv_nearbyEssenceMaxCount = FixedToInt(UnitGetCustomValue(auto53789915_var, 63));
            lv_nearbyEssenceMaxCountUnit = auto53789915_var;
        }

    }
    if ((lv_nearbyEssenceMaxCountUnit != null)) {
        libCPCD_gf_CDDehakaEssenceSetStack(lv_nearbyEssenceMaxCountUnit, FixedToInt((UnitGetCustomValue(lv_nearbyEssenceMaxCountUnit, 63) + lp_essenceUnitCount)));
        UnitBehaviorAdd(lp_essenceUnit, "EssenceTravelling", lp_essenceUnit, 1);
        UnitCreateEffectUnit(lp_essenceUnit, "EssencePickupFullLM", lv_nearbyEssenceMaxCountUnit);
        libCPCD_gf_CDDehakaEssenceScale(lv_nearbyEssenceMaxCountUnit, false);
    }

}

void libCPCD_gf_CDDehakaEssenceScale (unit lp_essenceUnit, bool lp_instantScale) {
    // Variable Declarations
    fixed lv_customScale;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_customScale = (UnitGetCustomValue(lp_essenceUnit, 63) / 100.0);
    lv_customScale += 0.8;
    if ((lv_customScale > 1.8)) {
        lv_customScale = 1.8;
    }

    if ((lp_instantScale == true)) {
        TextExpressionSetToken("Param/Expression/lib_CPCD_6C65494F", "A", FixedToText(lv_customScale, c_fixedPrecisionAny));
        ActorSendAsText(libNtve_gf_MainActorofUnit(lp_essenceUnit), TextExpressionAssemble("Param/Expression/lib_CPCD_6C65494F"));
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_CPCD_D8880FA7", "A", FixedToText(lv_customScale, c_fixedPrecisionAny));
        ActorSendAsText(libNtve_gf_MainActorofUnit(lp_essenceUnit), TextExpressionAssemble("Param/Expression/lib_CPCD_D8880FA7"));
    }
}

void libCPCD_gf_CDDehakaEssenceTransfer (int lp_indexPlayer, unit lp_trainUnit, int lp_essenceBuff100Count, int lp_essenceBuff10Count, int lp_essenceBuff1Count) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorAddPlayer(lp_trainUnit, "EssenceBuff100", lp_indexPlayer, lp_essenceBuff100Count);
    UnitBehaviorAddPlayer(lp_trainUnit, "EssenceBuff10", lp_indexPlayer, lp_essenceBuff10Count);
    UnitBehaviorAddPlayer(lp_trainUnit, "EssenceBuff1", lp_indexPlayer, lp_essenceBuff1Count);
    UnitCreateEffectUnit(lp_trainUnit, "PostMorphHeal", lp_trainUnit);
}

int libCPCD_gf_CDDehakaEssenceGetStack (unit lp_essence) {
    // Variable Declarations
    int lv_stack;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_stack = FixedToInt(UnitGetCustomValue(lp_essence, 63));

    // Implementation
    return lv_stack;
}

void libCPCD_gf_CDDehakaEssenceSetStack (unit lp_essence, int lp_stack) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetCustomValue(lp_essence, 63, IntToFixed(lp_stack));
    TextExpressionSetToken("Param/Expression/lib_CPCD_30ABD142", "Stack", IntToText(lp_stack));
    UnitSetInfoTip(lp_essence, TextExpressionAssemble("Param/Expression/lib_CPCD_30ABD142"));
}

void libCPCD_gf_CDDehakaLevelUp (int lp_dehakaPlayer, unit lp_dehakaUnit) {
    // Variable Declarations
    fixed lv_dehakaScalePerLevel;
    fixed lv_dehakaBaseScale;
    fixed lv_dehakaScaleResult;
    int lv_dehakaAttackDamagePerLevel;
    int lv_dehakaAttackDamageBase;
    int lv_dehakaAttackDamageResult;
    unit lv_dehakaUnit;
    fixed lv_dehakaTurnSpeed;
    fixed lv_dehakaAbilityArcs;
    int lv_dehakaNextLevelCheck;
    int lv_dehakaCurrentLevel;
    string lv_dehakaUnitType;
    actor lv_dehakaUnitActor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dehakaScalePerLevel = 0.1;
    lv_dehakaBaseScale = 0.5;
    lv_dehakaAttackDamagePerLevel = 10;
    lv_dehakaAttackDamageBase = 20;
    lv_dehakaUnit = libCPGL_gv_commander[lp_dehakaPlayer].lv_heroUnit;
    lv_dehakaCurrentLevel = UnitXPGetCurrentLevel(lp_dehakaUnit, null);
    lv_dehakaUnitType = UnitGetType(lp_dehakaUnit);
    lv_dehakaUnitActor = libNtve_gf_MainActorofUnit(lp_dehakaUnit);

    // Implementation
    if ((libCOMI_gf_HeroCanSpendSkillPoint(lp_dehakaUnit, "DehakaLearn") == true)) {
        ActorSend(lv_dehakaUnitActor, "HaloStart");
        UISetButtonFaceHighlighted(PlayerGroupSingle(lp_dehakaPlayer), "DehakaLearnAbilities", true);
    }
    else {
        ActorSend(lv_dehakaUnitActor, "HaloStop");
        UISetButtonFaceHighlighted(PlayerGroupSingle(lp_dehakaPlayer), "DehakaLearnAbilities", false);
    }
    if ((lv_dehakaCurrentLevel >= libCPCD_gv_cDDehakaLevelsMax[lp_dehakaPlayer]) && (libCPCD_gv_cDDehakaLevelMaxMusicPlayed == false)) {
        libCPCD_gv_cDDehakaLevelMaxMusicPlayed = true;
        SoundPlayOnUnitForPlayer(SoundLink("MusicDehakaMaxLevel", -1), lp_dehakaPlayer, PlayerGroupSingle(lp_dehakaPlayer), lp_dehakaUnit, 1.0, 100.0, 0.0);
    }

    lv_dehakaScaleResult = ((lv_dehakaCurrentLevel * lv_dehakaScalePerLevel) + lv_dehakaBaseScale);
    libNtve_gf_SendActorMessageToUnit(lp_dehakaUnit, libNtve_gf_SetScale(lv_dehakaScaleResult, lv_dehakaScaleResult, lv_dehakaScaleResult, 0.0));
    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, lv_dehakaUnitType, "Radius", lp_dehakaPlayer, ((lv_dehakaCurrentLevel * 0.0625) + 0.5));
    lv_dehakaAttackDamageResult = (lv_dehakaAttackDamageBase + ((lv_dehakaCurrentLevel - 1) * lv_dehakaAttackDamagePerLevel));
    lv_dehakaTurnSpeed = (800.0 - (lv_dehakaCurrentLevel * 40.0));
    if ((lv_dehakaTurnSpeed < 300.0)) {
        lv_dehakaTurnSpeed = 300.0;
    }

    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, lv_dehakaUnitType, "TurningRate", lp_dehakaPlayer, lv_dehakaTurnSpeed);
    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, lv_dehakaUnitType, "StationaryTurningRate", lp_dehakaPlayer, lv_dehakaTurnSpeed);
    if ((lp_dehakaUnit == libCPGL_gv_commander[lp_dehakaPlayer].lv_heroUnit)) {
        libCPCD_gv_cDDehakaEatReviveTimerAdjustment = ((lv_dehakaCurrentLevel * 1) - 24);
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, "DehakaDroneReviveTimerRefLink", "Amount", lp_dehakaPlayer, libCPCD_gv_cDDehakaEatReviveTimerAdjustment);
        if (((libCPCD_gf_DifficultyLevelForPlayerCoop(lp_dehakaPlayer) == 3) || (libCPCD_gf_DifficultyLevelForPlayerCoop(lp_dehakaPlayer) == 4)) && (lv_dehakaCurrentLevel >= 6) && (GameGetMissionTime() < 360.0)) {
            AchievementAward(lp_dehakaPlayer, "CommanderDehakaLevelUp");
        }

    }

}

void libCPCD_gf_CDDehakaSetLevelValues (int lp_player) {
    // Variable Declarations
    int lv_i;
    fixed lv_r;
    int lv_xPTotal;

    // Automatic Variable Declarations
    int auto4CBF7F45_ae;
    const int auto4CBF7F45_ai = 1;

    // Variable Initialization

    // Implementation
    auto4CBF7F45_ae = (libCPCD_gv_cDDehakaLevelsMax[lp_player] - 1);
    lv_i = 0;
    for ( ; ( (auto4CBF7F45_ai >= 0 && lv_i <= auto4CBF7F45_ae) || (auto4CBF7F45_ai < 0 && lv_i >= auto4CBF7F45_ae) ) ; lv_i += auto4CBF7F45_ai ) {
        lv_xPTotal += CatalogFieldValueGetAsInt(c_gameCatalogBehavior, libCPCD_gv_cDDehakaVeterencyBehavior[lp_player], "VeterancyLevelArray[" + IntToString(lv_i) + "].MinVeterancyXP", lp_player);
        libCPCD_gv_cDDehakaNextLevelValueArray[lv_i] = lv_xPTotal;
    }
}

void libCPCD_gf_CDDehakaConsumeFloatText (text lp_text, int lp_p, point lp_loc) {
    // Automatic Variable Declarations
    // Implementation
    if (libCPGL_gf_DebugModeEnabled()) {
        TextTagCreate(lp_text, 24, lp_loc, 4.0, true, false, PlayerGroupSingle(lp_p));
        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 2.0);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 100.00));
    }

}

void libCPCD_gf_CDDehakaConsumeUpdatePsiExplodeDamage (int lp_dehakaPlayer, unit lp_dehakaUnit, fixed lp_maguroMemorialWeaponDamage) {
    // Variable Declarations
    fixed lv_weaponDmgScalar;
    fixed lv_totalDmg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_weaponDmgScalar = 2.0;
    lv_totalDmg = (lp_maguroMemorialWeaponDamage * lv_weaponDmgScalar);

    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, libCPCD_gv_cDDehakaConsumeEffectPsiExplodeWeaponDmgLink, "Amount", lp_dehakaPlayer, (FixedToString(lv_totalDmg, c_fixedPrecisionAny)));
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogEffect, "DehakaConsumeEffectPsionicSearch", "AreaArray[" + IntToString(0) + "].Radius", lp_dehakaPlayer, UnitGetPropertyFixed(lp_dehakaUnit, c_unitPropRadius, c_unitPropCurrent), c_upgradeOperationAdd);
}

void libCPCD_gf_CDDehakaConsumeEvolved (int lp_dehakaPlayer, unit lp_unit, fixed lp_multiplier) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "EssencePickup", c_unitCreateIgnorePlacement, lp_dehakaPlayer, UnitGetPosition(lp_unit));
    libCPCD_gf_CDDehakaEssenceSetStack(UnitLastCreated(), RoundI(lp_multiplier));
}

fixed libCPCD_gf_CDDehakaIsEvolvedUnit (unit lp_unit) {
    // Variable Declarations
    string lv_unitType;
    bool lv_isHumanPlayer;
    fixed lv_multiplier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitType = UnitGetType(lp_unit);
    lv_isHumanPlayer = (PlayerGroupHasPlayer(libCPGL_gf_HumanPlayers(), UnitGetOwner(lp_unit)) == true);

    // Implementation
    if ((PlayerGroupHasPlayer(libCPGL_gf_HumanPlayers(), UnitGetOwner(lp_unit)) == false)) {
        lv_multiplier *= 0.9;
    }

    if ((UnitBehaviorCount(lp_unit, "ImpalerDehakaTenderize") >= 1)) {
        lv_multiplier += 1.0;
    }

    if ((UnitFilterMatch(lp_unit, UnitGetOwner(lp_unit), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterRevivable - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
        lv_multiplier += 1.0;
    }

    if ((UnitFilterMatch(lp_unit, UnitGetOwner(lp_unit), UnitFilter(0, 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterRevivable - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true) && ((UnitBehaviorCount(lp_unit, "Stimpack") >= 1) || (UnitBehaviorCount(lp_unit, "StimpackMarauder") >= 1) || (UnitBehaviorCount(lp_unit, "MedivacSpeedBoost") >= 1) || (UnitBehaviorCount(lp_unit, "VehicleAfterburners") >= 1) || (UnitBehaviorCount(lp_unit, "DropPodHaste") >= 1) || (UnitBehaviorCount(lp_unit, "RaynorMedicSafeguard") >= 1) || (UnitBehaviorCount(lp_unit, "RaynorMedicSafeguardMastery") >= 1) || (UnitBehaviorCount(lp_unit, "BansheeCloak_Raynor") >= 1) || (UnitBehaviorCount(lp_unit, "DuskWingBansheeCloak") >= 1) || (UnitBehaviorCount(lp_unit, "BansheeCloak") >= 1) || (UnitBehaviorCount(lp_unit, "BansheeCloakCrossSpectrumDampeners") >= 1) || (UnitBehaviorCount(lp_unit, "BansheePermanentCloak") >= 1) || (UnitBehaviorCount(lp_unit, "QueenBurstHeal") >= 1) || (UnitBehaviorCount(lp_unit, "Transfusion") >= 1) || (UnitBehaviorCount(lp_unit, "MutatingCarapace") >= 1) || (UnitBehaviorCount(lp_unit, "MalignantCreep") >= 1) || (UnitBehaviorCount(lp_unit, "MutaliskRapidRegen") >= 1) || (UnitBehaviorCount(lp_unit, "HydraliskFrenzy") >= 1) || (UnitBehaviorCount(lp_unit, "MasteryArtanisSoAPowerFieldHaste_Target") >= 1) || (UnitBehaviorCount(lp_unit, "ImmortalOverload") >= 1) || (UnitBehaviorCount(lp_unit, "ImmortalBarrierBase") >= 1) || (UnitBehaviorCount(lp_unit, "VoidZealotWhirlwind") >= 1) || (UnitBehaviorCount(lp_unit, "SOAHeroicShieldImmunity") >= 1) || (UnitBehaviorCount(lp_unit, "SOASuperShield") >= 1) || (UnitBehaviorCount(lp_unit, "ArtanisAstralWindOther") >= 1) || (UnitBehaviorCount(lp_unit, "ArtanisAstralWindSelf") >= 1) || (UnitBehaviorCount(lp_unit, "WraithCloak") >= 1) || (UnitBehaviorCount(lp_unit, "DefensiveMatrixNew") >= 1) || (UnitBehaviorCount(lp_unit, "SwannGeminiMissileMovementBuff") >= 1) || (UnitBehaviorCount(lp_unit, "ZagaraVoidCoopMassFrenzyTarget") >= 1) || (UnitBehaviorCount(lp_unit, "ZagaraOwned") >= 1) || (UnitBehaviorCount(lp_unit, "VorazunCloakDamageBoostPermanent") >= 1) || (UnitBehaviorCount(lp_unit, "VorazunCloakDamageBoostPermanentUltraliskBurrowCharge") >= 1) || (UnitBehaviorCount(lp_unit, "VorazunCloakedShieldRegen") >= 1) || (UnitBehaviorCount(lp_unit, "VorazunRegenShield") >= 1) || (UnitBehaviorCount(lp_unit, "VorazunCloakedShieldRegenPermanent") >= 1) || (UnitBehaviorCount(lp_unit, "DarkArchonMindControl") >= 1) || (UnitBehaviorCount(lp_unit, "VoidZealotShadowChargeSelfBuff") >= 1) || (UnitBehaviorCount(lp_unit, "VoidStalkerBlinkShieldRestore") >= 1) || (UnitBehaviorCount(lp_unit, "VoidStalkerBlinkCloak") >= 1) || (UnitBehaviorCount(lp_unit, "OracleWeapon") >= 1) || (UnitBehaviorCount(lp_unit, "MothershipNerazimCloakField") >= 1) || (UnitBehaviorCount(lp_unit, "VoidRayChargeBeamRangeCounter") >= 1) || (UnitBehaviorCount(lp_unit, "VoidRayChargeBeamRangePhase2") >= 1) || (UnitBehaviorCount(lp_unit, "VoidRayChargeBeamRangePhase3") >= 1) || (UnitBehaviorCount(lp_unit, "SOARepairBeam") >= 1) || (UnitBehaviorCount(lp_unit, "KaraxUnitSpawnBarrier") >= 1) || (UnitBehaviorCount(lp_unit, "SOAMapWideChrono") >= 1) || (UnitBehaviorCount(lp_unit, "TimeWarpProduction") >= 1) || (UnitBehaviorCount(lp_unit, "ZealotPurifierRevive") >= 1) || (UnitBehaviorCount(lp_unit, "VoidSentryChronoBeam") >= 1) || (UnitBehaviorCount(lp_unit, "VoidPhoenixPhasingArmorBuff") >= 1) || (UnitBehaviorCount(lp_unit, "CarrierRepairDroneHealTarget") >= 1) || (UnitBehaviorCount(lp_unit, "AbathurMendPeriodicHeal") >= 1) || (UnitBehaviorCount(lp_unit, "SymbioteCarapace") >= 1) || (UnitBehaviorCount(lp_unit, "AlarakEmpowerTarget") >= 1) || (UnitBehaviorCount(lp_unit, "HavocPermanentCloak") >= 1) || (UnitBehaviorCount(lp_unit, "PhaseBlinkDamage") >= 1) || (UnitBehaviorCount(lp_unit, "SuperStim") >= 1) || (UnitBehaviorCount(lp_unit, "PermanentlyCloaked") >= 1) || (UnitBehaviorCount(lp_unit, "HellbatLeapArmor") >= 1) || (UnitBehaviorCount(lp_unit, "SiegeTankSiegeModeProgressiveRangeIncease") >= 1) || (UnitBehaviorCount(lp_unit, "BansheeBlackOpsPermanentCloak") >= 1) || (UnitBehaviorCount(lp_unit, "Medivac_BlackOpsHealCloak") >= 1) || (UnitBehaviorCount(lp_unit, "NovaCoopCasterDefensiveMatrix") >= 1) || (UnitBehaviorCount(lp_unit, "QueenClassicParasite") >= 1) || (UnitBehaviorCount(lp_unit, "StukovAleksanderInfestedSwarmTarget") >= 1) || (UnitBehaviorCount(lp_unit, "StukovAleksanderAirMindControl") >= 1) || (UnitBehaviorCount(lp_unit, "SILiberatorSwarmFormPermanentDamageResistant") >= 1) || (UnitBehaviorCount(lp_unit, "Charging") >= 1) || (UnitBehaviorCount(lp_unit, "FenixSentryGuardianZone") >= 1) || (UnitBehaviorCount(lp_unit, "FenixArbiterCloakingFieldTarget") >= 1) || (UnitBehaviorCount(lp_unit, "DehakaMendingAuraTarget") >= 1) || (UnitBehaviorCount(lp_unit, "DehakaTyrannozorArmorAuraTarget") >= 1) || (UnitBehaviorCount(lp_unit, "DehakaMutaliskDamageReduction") >= 1) || (UnitBehaviorCount(lp_unit, "DehakaGuardianRage1") >= 1) || (UnitBehaviorCount(lp_unit, "DehakaGuardianRage2") >= 1) || (UnitBehaviorCount(lp_unit, "DehakaGuardianRage3") >= 1) || (UnitBehaviorCount(lp_unit, "DehakaGuardianRage4") >= 1) || (UnitBehaviorCount(lp_unit, "DehakaGuardianRage5") >= 1) || (UnitBehaviorCount(lp_unit, "HHArmyOOCRegenSpeed") >= 1) || (UnitBehaviorCount(lp_unit, "HHHellionStimDeathUpgrade") >= 1) || (UnitBehaviorCount(lp_unit, "HHHellionStimDeath") >= 1) || (UnitBehaviorCount(lp_unit, "TychusMedicDefensiveMatrix") >= 1) || (UnitBehaviorCount(lp_unit, "TychusMedicAoEHoT") >= 1) || (UnitBehaviorCount(lp_unit, "ZeratulReflectionShield") >= 1) || (UnitBehaviorCount(lp_unit, "ZeratulXelNagaConstructEvolveCaster") >= 1) || (UnitBehaviorCount(lp_unit, "ZeratulXelNagaConstructEvolveBehavior2") >= 1) || (UnitBehaviorCount(lp_unit, "ZeratulXelNagaConstructEvolveBehavior3") >= 1) || (UnitBehaviorCount(lp_unit, "ZeratulXelNagaConstructEvolveBehavior4") >= 1) || (UnitBehaviorCount(lp_unit, "FASTOverloadStetmann") >= 1) || (UnitBehaviorCount(lp_unit, "HUGSOverloadStetmann") >= 1) || (UnitBehaviorCount(lp_unit, "JUICEOverloadStetmann") >= 1) || (UnitBehaviorCount(lp_unit, "ZerglingHardenedShieldStetmann") >= 1) || (UnitBehaviorCount(lp_unit, "HydraliskStetmannMissilePowerOn") >= 1) || (UnitBehaviorCount(lp_unit, "ChitinousPlatingStetmann") >= 1) || (UnitBehaviorCount(lp_unit, "BanelingStetmannManaShield") >= 1) || (UnitBehaviorCount(lp_unit, "PowerFieldBuffAllyStetmann") >= 1) || (UnitBehaviorCount(lp_unit, "PowerFieldBuffSelfStetmann") >= 1) || (UnitBehaviorCount(lp_unit, "MarauderMengskAbsorb") >= 1) || (UnitBehaviorCount(lp_unit, "GhostMengskSuperCloakController") >= 1) || (UnitBehaviorCount(lp_unit, "ThorMengskArmorAuraTarget") >= 1) || (UnitBehaviorCount(lp_unit, "MedivacMengskPermanentCloak") >= 1) || (UnitBehaviorCount(lp_unit, "PropagandaBlastMengsk") >= 1) || (UnitBehaviorCount(lp_unit, "BattlecruiserMengskBonusRange") >= 1) || (UnitBehaviorCount(lp_unit, "VikingMengskCheatDeath") >= 1))) {
        lv_multiplier += 1.0;
    }

    lv_multiplier += (UnitBehaviorCount(lp_unit, "BiomassBuff100") * 0.1);
    lv_multiplier += (UnitBehaviorCount(lp_unit, "AscendantSacrificeSelfBuff") * 0.1);
    lv_multiplier += (UnitBehaviorCount(lp_unit, "CommanderPrestigeAlarakMechDisplay") * 0.1);
    lv_multiplier += (UnitBehaviorCount(lp_unit, "CommanderPrestigeStetmannCombatBuff") * 0.1);
    lv_multiplier += (UnitBehaviorCount(lp_unit, "MutatingCarapace") * 0.1);
    lv_multiplier += (UnitXPGetCurrentLevel(lp_unit, null) * 1.0);
    lv_multiplier += (UnitCargoValue(lp_unit, c_unitCargoUnitCount) * 1.0);
    if (((lv_unitType == "HotSLeviathan") || (lv_unitType == "Brutalisk") || (lv_unitType == "DehakaPrimalSwarmHost") || (lv_unitType == "DehakaPrimalSwarmHostBurrowed") || (lv_unitType == "ImpalerDehaka") || (lv_unitType == "ImpalerDehakaBurrowed") || (lv_unitType == "DehakaGuardian") || (lv_unitType == "DehakaRoachLevel3") || (lv_unitType == "DehakaRoachLevel3Burrowed") || (lv_unitType == "DehakaMutaliskLevel3") || (lv_unitType == "DehakaRavasaur") || (lv_unitType == "DehakaRavasaurBurrowed") || (lv_unitType == "DehakaUltraliskLevel3") || (lv_unitType == "DehakaUltraliskLevel3Burrowed") || (lv_unitType == "BroodLord") || (lv_unitType == "Viper") || (lv_unitType == "Devourer") || (lv_unitType == "GuardianMP") || (lv_unitType == "LurkerBurrowed") || (lv_unitType == "Lurker") || (lv_unitType == "LurkerMPBurrowed") || (lv_unitType == "LurkerMP") || (lv_unitType == "Ravager") || (lv_unitType == "RavagerAbathur") || (lv_unitType == "RavagerBurrowed") || (lv_unitType == "RavagerAbathurBurrowed") || (lv_unitType == "Brutalisk") || (lv_unitType == "HotSLeviathan") || (lv_unitType == "Baneling") || (lv_unitType == "BanelingBurrowed") || (lv_unitType == "HotSHunterBurrowed") || (lv_unitType == "HotSHunterMissile") || (lv_unitType == "HotSHunter") || (lv_unitType == "HotSSplitterlingBigBurrowed") || (lv_unitType == "HotSSplitterlingBig") || (lv_unitType == "HotSSplitterlingMedium") || (lv_unitType == "HotSSplitterlingMediumBurrowed") || (lv_unitType == "LiberatorAG_BlackOps") || (lv_unitType == "LiberatorAG") || (lv_unitType == "SiegeTankSieged_BlackOps") || (lv_unitType == "HoverSiegeTankSieged") || (lv_unitType == "StukovInfestedSiegeTank") || (lv_unitType == "LurkerStetmann") || (lv_unitType == "LurkerStetmannBurrowed") || (lv_unitType == "BanelingStetmann") || (lv_unitType == "BanelingStetmannBurrowed") || (lv_unitType == "BroodLordStetmann") || (lv_unitType == "ThorMengskSieged") || (lv_unitType == "MengskSiegeTankSieged") || (lv_unitType == "SiegeTankMengskSieged") || (lv_unitType == "HHRavenSiegeMode") || (lv_unitType == "RavenMengskSieged") || (lv_unitType == "Archon") || (lv_unitType == "DarkArchon") || (lv_unitType == "CommanderPrestigeArtanisOrbitalStrikesArchon") || (lv_unitType == "ZeratulDarkArchon"))) {
        lv_multiplier += 1.0;
    }

    if ((UnitAbilityExists(lp_unit, "WarpableNova") == true)) {
        lv_multiplier += 1.0;
    }

    return lv_multiplier;
}

void libCPCD_gf_CDHHBomberStatusCheck (int lp_player) {
    // Variable Declarations
    fixed lv_smallestCooldown;
    int lv_behaviorCount;

    // Automatic Variable Declarations
    unitgroup autoE526513A_g;
    int autoE526513A_u;
    unit autoE526513A_var;

    // Variable Initialization
    lv_smallestCooldown = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "HHBomberPlatformAreaBombTopBarDummyTimer", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lp_player);

    // Implementation
    autoE526513A_g = libCPCD_gv_cDHHBomberPlatforms[lp_player];
    autoE526513A_u = UnitGroupCount(autoE526513A_g, c_unitCountAll);
    for (;; autoE526513A_u -= 1) {
        autoE526513A_var = UnitGroupUnitFromEnd(autoE526513A_g, autoE526513A_u);
        if (autoE526513A_var == null) { break; }
        if ((UnitIsAlive(autoE526513A_var) == true)) {
            if ((UnitHasBehavior2(autoE526513A_var, "HHBomberDockCooldown") == true)) {
                lv_behaviorCount += 1;
                if ((UnitBehaviorDuration(autoE526513A_var, "HHBomberDockCooldown") < lv_smallestCooldown)) {
                    lv_smallestCooldown = UnitBehaviorDuration(autoE526513A_var, "HHBomberDockCooldown");
                }

            }

            if (((UnitMagazineCount(autoE526513A_var, "HHBomberPlatformHangar") == 1) && (UnitHasBehavior2(autoE526513A_var, "HHBomberPlatformAreaBombDisabler") == false) && (UnitHasBehavior2(autoE526513A_var, "HHBomberDockCooldown") == false))) {
                UnitGroupAdd(libCPCD_gv_cDHHBomberPlatforms_Ready[lp_player], autoE526513A_var);
            }
            else {
                UnitGroupRemove(libCPCD_gv_cDHHBomberPlatforms_Ready[lp_player], autoE526513A_var);
            }
        }
        else {
            UnitGroupRemove(libCPCD_gv_cDHHBomberPlatforms[lp_player], autoE526513A_var);
            UnitGroupRemove(libCPCD_gv_cDHHBomberPlatforms_Ready[lp_player], autoE526513A_var);
        }
    }
    libCPCD_gv_cDHHBomberPlatforms_ReadyCount[lp_player] = UnitGroupCount(libCPCD_gv_cDHHBomberPlatforms_Ready[lp_player], c_unitCountAlive);
    if (((libCPCD_gv_cDHHBomberPlatforms_ReadyCount[lp_player] == 0) && (lv_smallestCooldown > 0.0) && (lv_behaviorCount > 0))) {
        UnitAbilityReset(libCPGL_gv_commander[lp_player].lv_globalCasterUnit, AbilityCommand("HHBomberPlatformAreaBombTopBarDummyTimer", 0), c_spendLocationAbility);
        UnitAbilityAddCooldown(libCPGL_gv_commander[lp_player].lv_globalCasterUnit, "HHBomberPlatformAreaBombTopBarDummyTimer", "Abil/HHBomberPlatformAreaBombTopBarDummyTimer", 60.0);
        UnitAbilityAddCooldown(libCPGL_gv_commander[0].lv_globalCasterUnit, "HHBomberPlatformAreaBombTopBarDummyTimer", "Abil/HHBomberPlatformAreaBombTopBarDummyTimer", (-1.0 * (60.0 - lv_smallestCooldown)));
        UnitBehaviorAdd(libCPGL_gv_commander[lp_player].lv_globalCasterUnit, "HHBomberPlatformAreaBombTopBarDummyTimer", libCPGL_gv_commander[lp_player].lv_globalCasterUnit, 1);
        UnitBehaviorSetDurationRemaining(libCPGL_gv_commander[lp_player].lv_globalCasterUnit, "HHBomberPlatformAreaBombTopBarDummyTimer", lv_smallestCooldown);
    }
    else {
        UnitBehaviorRemove(libCPGL_gv_commander[lp_player].lv_globalCasterUnit, "HHBomberPlatformAreaBombTopBarDummyTimer", 1);
    }
}

void libCPCD_gf_CDHHStatUpdate (int lp_player) {
    // Variable Declarations
    fixed lv_factionBonusLifeMulti;
    fixed lv_itBonusLifeMulti;
    fixed lv_factionBonusAtkSpeedMulti;
    fixed lv_itBonusAtkSpeedMulti;
    string lv_itInstanceFaction;
    string lv_itInstanceStat;
    string lv_itStatFaction;
    int lv_itStatUnitCount;
    string lv_itStatUnitType;
    fixed lv_itStatUnitTypeSupply;
    fixed lv_itStatUnitTypeScore;
    fixed lv_factionScore;
    string lv_itWeapons;
    int lv_factionMaxStacks;
    fixed lv_bonusMulti;
    unit lv_itUnit;
    fixed lv_itScore;

    // Automatic Variable Declarations
    string auto6B7A7A4E_userType;
    int auto6B7A7A4E_i;
    string auto47726667_userType;
    int auto47726667_i;
    unitgroup auto0ABE28C6_g;
    int auto0ABE28C6_u;
    string autoCF040D3E_userType;
    int autoCF040D3E_i;
    int autoFE66D4C9_catalog;
    string autoFE66D4C9_entry;
    string autoFE66D4C9_field;
    string autoFE66D4C9_scopeField;
    int autoFE66D4C9_player;
    int autoFE66D4C9_i;

    // Variable Initialization
    lv_itWeapons = "";
    lv_bonusMulti = ((100+libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, libCPCD_gv_cDHHStatBonus, "Amount", lp_player))/100);

    // Implementation
    auto6B7A7A4E_userType = libCPCD_gv_cDHHFactionUserType;
    auto6B7A7A4E_i = 1;
    for ( ; auto6B7A7A4E_i <= UserDataInstanceCount(auto6B7A7A4E_userType) ; auto6B7A7A4E_i += 1 ) {
        lv_itInstanceFaction = UserDataInstance(auto6B7A7A4E_userType, auto6B7A7A4E_i);
        lv_factionBonusLifeMulti = 0.0;
        lv_factionBonusAtkSpeedMulti = 0.0;
        lv_factionScore = 0.0;
        lv_factionMaxStacks = UserDataGetInt(libCPCD_gv_cDHHFactionUserType, lv_itInstanceFaction, "Max Stack", 1);
        lv_itBonusLifeMulti = UserDataGetFixed(libCPCD_gv_cDHHFactionUserType, lv_itInstanceFaction, "Bonus Life (%)", 1);
        lv_itBonusAtkSpeedMulti = UserDataGetFixed(libCPCD_gv_cDHHFactionUserType, lv_itInstanceFaction, "Bonus Attack Speed (%)", 1);
        auto47726667_userType = libCPCD_gv_cDHHStatUserType;
        auto47726667_i = 1;
        for ( ; auto47726667_i <= UserDataInstanceCount(auto47726667_userType) ; auto47726667_i += 1 ) {
            lv_itInstanceStat = UserDataInstance(auto47726667_userType, auto47726667_i);
            lv_itStatFaction = UserDataGetUserInstance(libCPCD_gv_cDHHStatUserType, lv_itInstanceStat, "Faction", 1);
            if ((lv_itStatFaction == lv_itInstanceFaction)) {
                lv_itStatUnitType = UserDataGetUnit(libCPCD_gv_cDHHStatUserType, lv_itInstanceStat, "Unit", 1);
                lv_itStatUnitTypeScore = 0.0;
                auto0ABE28C6_g = UnitGroup(lv_itStatUnitType, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto0ABE28C6_u = UnitGroupCount(auto0ABE28C6_g, c_unitCountAll);
                for (;; auto0ABE28C6_u -= 1) {
                    lv_itUnit = UnitGroupUnitFromEnd(auto0ABE28C6_g, auto0ABE28C6_u);
                    if (lv_itUnit == null) { break; }
                    lv_itScore = UnitGetPropertyFixed(lv_itUnit, c_unitPropSuppliesUsed, c_unitPropCurrent);
                    if ((lv_itScore == 0.0) && (UnitHasBehavior2(lv_itUnit, "HHMercStarportCargoInstalled") == true)) {
                        lv_itScore = 6.0;
                    }

                    lv_itStatUnitTypeScore += lv_itScore;
                }
                lv_factionScore += lv_itStatUnitTypeScore;
            }

        }
        if ((lv_itInstanceFaction == "Matt")) {
            libCPCD_gv_cDHHMattFactionSupply[lp_player] = lv_factionScore;
        }

        if ((lv_itInstanceFaction == "Mira")) {
            libCPCD_gv_cDHHMiraFactionSupply[lp_player] = lv_factionScore;
        }

        lv_factionScore = MinF(lv_factionMaxStacks, lv_factionScore);
        lv_factionBonusLifeMulti = (lv_itBonusLifeMulti*lv_factionScore*lv_bonusMulti);
        lv_factionBonusAtkSpeedMulti = (lv_itBonusAtkSpeedMulti*lv_factionScore*lv_bonusMulti);
        if ((TechTreeUpgradeCount(lp_player, "HHSOBuff", c_techCountCompleteOnly) >= 1)) {
            autoCF040D3E_userType = libCPCD_gv_cDHHStatUserType;
            autoCF040D3E_i = 1;
            for ( ; autoCF040D3E_i <= UserDataInstanceCount(autoCF040D3E_userType) ; autoCF040D3E_i += 1 ) {
                lv_itInstanceStat = UserDataInstance(autoCF040D3E_userType, autoCF040D3E_i);
                lv_itStatFaction = UserDataGetUserInstance(libCPCD_gv_cDHHStatUserType, lv_itInstanceStat, "Faction", 1);
                if ((lv_itStatFaction != lv_itInstanceFaction)) {
                    lv_itStatUnitType = UserDataGetUnit(libCPCD_gv_cDHHStatUserType, lv_itInstanceStat, "Unit", 1);
                    if ((lv_itBonusLifeMulti != 0.0)) {
                        libCOMI_gf_CatalogFieldValueAdditiveBonus(c_gameCatalogUnit, lv_itStatUnitType, "LifeMax", lp_player, "MSO", lv_factionBonusLifeMulti, false);
                        libCOMI_gf_CatalogFieldValueAdditiveBonus(c_gameCatalogUnit, lv_itStatUnitType, "LifeStart", lp_player, "MSO", lv_factionBonusLifeMulti, false);
                    }

                    CatalogFieldValueModify(c_gameCatalogEffect, "HornerMSOHealthDisplayDummy", "Amount", lp_player, FixedToString(lv_factionBonusLifeMulti, 2), c_upgradeOperationSet);
                    if ((lv_itBonusAtkSpeedMulti != 0.0)) {
                        autoFE66D4C9_catalog = c_gameCatalogUnit;
                        autoFE66D4C9_entry = lv_itStatUnitType;
                        autoFE66D4C9_field = "WeaponArray";
                        autoFE66D4C9_scopeField = "Link";
                        autoFE66D4C9_player = lp_player;
                        autoFE66D4C9_i = 0;
                        for ( ; autoFE66D4C9_i <= CatalogFieldValueCount(c_gameCatalogUnit,autoFE66D4C9_entry,autoFE66D4C9_field,autoFE66D4C9_player)-1 ; autoFE66D4C9_i += 1 ) {
                            lv_itWeapons = CatalogFieldValueGet(c_gameCatalogUnit,autoFE66D4C9_entry,autoFE66D4C9_field+"["+IntToString(autoFE66D4C9_i)+"]."+autoFE66D4C9_scopeField,autoFE66D4C9_player);
                            libCOMI_gf_CatalogFieldValueAdditiveBonus(c_gameCatalogWeapon, lv_itWeapons, "Period", lp_player, "MSO", lv_factionBonusAtkSpeedMulti, true);
                        }
                        CatalogFieldValueModify(c_gameCatalogEffect, "HornerMSOAttackSpeedDisplayDummy", "Amount", lp_player, FixedToString(lv_factionBonusAtkSpeedMulti, c_fixedPrecisionAny), c_upgradeOperationSet);
                        if ((TechTreeUpgradeCount(lp_player, "HHWidowMineDeathBlossom", c_techCountCompleteOnly) == 1)) {
                            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "HHWidowMineBurrowedAttack", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lp_player, (20.0 * (1.0 - (0.01 * lv_factionBonusAtkSpeedMulti))));
                            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, "HHWidowMineAnimationController", "Duration", lp_player, (20.0 * (1.0 - (0.01 * lv_factionBonusAtkSpeedMulti))));
                        }
                        else {
                            libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogAbil, "HHWidowMineBurrowedAttack", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lp_player, (1.0 - (0.01 * lv_factionBonusAtkSpeedMulti)), c_upgradeOperationMultiply);
                            libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogBehavior, "HHWidowMineAnimationController", "Duration", lp_player, (1.0 - (0.01 * lv_factionBonusAtkSpeedMulti)), c_upgradeOperationMultiply);
                        }
                    }

                }

            }
        }

    }
}

void libCPCD_gf_CDHHScrapResourceSetStack (unit lp_scrap, int lp_minerals, int lp_vespene) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetCustomValue(lp_scrap, 62, IntToFixed(lp_minerals));
    UnitSetCustomValue(lp_scrap, 63, IntToFixed(lp_vespene));
    UnitSetInfoTip(lp_scrap, StringExternal("Param/Value/lib_CPCD_1E2AACAE"));
    UnitSetInfoSubTip(lp_scrap, StringExternal("Param/Value/lib_CPCD_88ECD014"));
}

void libCPCD_gf_CDTychusTriggersInit (int lp_player) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCPCD_gf_CDTychusInitHeroTechLimit(lp_player);
    libCPCD_gf_CDTychusUpdateHeroTechTree(lp_player);
    if ((libCPGL_gv_commander[lp_player].lv_prestigeLevel == 2)) {
        libCPCD_gf_CDTychusSetHeroCostMultiply(lp_player, 1.5, 1.5);
    }
    else {
        libCPCD_gf_CDTychusSetHeroCostMultiply(lp_player, 1.0, 1.0);
    }
}

string libCPCD_gf_CDTychusEventHero () {
    // Automatic Variable Declarations
    // Implementation
    return (DataTableGetString(false, TriggerEventParamName(EventGenericName(), "EventHeroInstance")));
}

unit libCPCD_gf_CDTychusEventHeroUnit () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(EventGenericName(), "EventHero"));
}

void libCPCD_gf_CDTychusEvent (trigger t, string lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, (lp_event));
}

void libCPCD_gf_CDTychusUpdateHeroTechTree (int lp_p) {
    // Variable Declarations
    int lv_techLevel;
    int lv_heroCount;
    int lv_requiredTechLevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_techLevel = libCPCD_gf_CM_Tychus_TechLevel(lp_p);
    lv_heroCount = libCPCD_gf_CM_Tychus_TechLevel2(lp_p);

    // Implementation
    if (((TechTreeUpgradeCount(lp_p, "TychusCoopHeroHalfCostUpgrade", c_techCountCompleteOnly) == 0) || (lv_heroCount > 1))) {
        libCPCD_gf_CDTychusSetHeroCostMultiply(lp_p, 2.0, 2.0);
    }

}

void libCPCD_gf_CDTychusSetHeroRequiredTechLevel (int lp_p, int lp_level) {
    // Variable Declarations
    string lv_instance;
    string lv_uT;
    abilcmd lv_cmd;
    string lv_abil;
    int lv_abilIndex;
    int lv_i;
    string lv_requirement;

    // Automatic Variable Declarations
    string auto6D49692C_userType;
    int auto6D49692C_i;
    int autoEAF46313_ae;
    const int autoEAF46313_ai = 1;

    // Variable Initialization

    // Implementation
    lv_requirement = libCPCD_gv_cDTychusUserTypeHeroRequirementArray[lp_level];
    auto6D49692C_userType = libCPCD_gv_cDTychusUserType;
    auto6D49692C_i = 1;
    for ( ; auto6D49692C_i <= UserDataInstanceCount(auto6D49692C_userType) ; auto6D49692C_i += 1 ) {
        lv_instance = UserDataInstance(auto6D49692C_userType, auto6D49692C_i);
        lv_uT = UserDataGetUnit(libCPCD_gv_cDTychusUserType, lv_instance, "Unit Type", 1);
        if ((TechTreeUnitIsAllowed(lp_p, lv_uT) == true)) {
            autoEAF46313_ae = (TechTreeUnitProducedAbilCmdCount(lv_uT) - 1);
            lv_i = 0;
            for ( ; ( (autoEAF46313_ai >= 0 && lv_i <= autoEAF46313_ae) || (autoEAF46313_ai < 0 && lv_i >= autoEAF46313_ae) ) ; lv_i += autoEAF46313_ai ) {
                lv_cmd = TechTreeUnitProducedAbilCmd(lv_uT, lv_i);
                lv_abil = AbilityCommandGetAbility(lv_cmd);
                lv_abilIndex = AbilityCommandGetCommand(lv_cmd);
                CatalogFieldValueSet(c_gameCatalogAbil, lv_abil, "InfoArray[" + IntToString(lv_abilIndex) + "].Button.Requirements", lp_p, (lv_requirement));
            }
        }

    }
}

void libCPCD_gf_CDTychusSetHeroCostMultiply (int lp_p, fixed lp_multiplyMinerals, fixed lp_multiplyVespene) {
    // Variable Declarations
    string lv_instance;
    string lv_uT;
    int lv_indexResource;
    fixed lv_costfactor;

    // Automatic Variable Declarations
    string auto2EBA5328_userType;
    int auto2EBA5328_i;

    // Variable Initialization
    lv_costfactor = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "TychusOutlawCostFactor", "Amount", lp_p);

    // Implementation
    auto2EBA5328_userType = libCPCD_gv_cDTychusUserType;
    auto2EBA5328_i = 1;
    for ( ; auto2EBA5328_i <= UserDataInstanceCount(auto2EBA5328_userType) ; auto2EBA5328_i += 1 ) {
        lv_instance = UserDataInstance(auto2EBA5328_userType, auto2EBA5328_i);
        lv_uT = UserDataGetUnit(libCPCD_gv_cDTychusUserType, lv_instance, "Unit Type", 1);
        libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogUnit, lv_uT, "CostResource[" + IntToString(0) + "]", lp_p, RoundI((lp_multiplyMinerals * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, lv_uT, "CostResource[" + IntToString(0) + "]", c_playerAny) * lv_costfactor)), c_upgradeOperationSet);
        libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogUnit, lv_uT, "CostResource[" + IntToString(1) + "]", lp_p, RoundI((lp_multiplyMinerals * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, lv_uT, "CostResource[" + IntToString(1) + "]", c_playerAny) * lv_costfactor)), c_upgradeOperationSet);
    }
}

int libCPCD_gf_CM_Tychus_TechLevel (int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    if ((TechTreeBehaviorCount(lp_p, "TychusTier3Behavior", c_techCountCompleteOnly) > 0)) {
        return 3;
    }

    if ((TechTreeBehaviorCount(lp_p, "TychusTier2Behavior", c_techCountCompleteOnly) > 0)) {
        return 2;
    }

    if ((TechTreeBehaviorCount(lp_p, "TychusTier1Behavior", c_techCountCompleteOnly) > 0)) {
        return 1;
    }

    return 0;
}

int libCPCD_gf_CM_Tychus_TechLevel2 (int lp_p) {
    // Variable Declarations
    int lv_incomplete;
    int lv_completed;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_incomplete = TechTreeUnitAliasCount(lp_p, "Alias_TychusUniqueUnit", c_techCountIncompleteOnly);
    lv_completed = TechTreeBehaviorCount(lp_p, "TychusHeroCount", c_techCountCompleteOnly);

    // Implementation
    return (lv_incomplete + lv_completed);
}

void libCPCD_gf_CDTychusFifthHeroUpgrade (int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = lp_player;

    // Implementation
    if ((TechTreeUpgradeCount(lv_player, "TychusCoopFifthHeroUpgrade", c_techCountCompleteOnly) == 0)) {
        libCPCD_gv_cDTychusMaxHeroCount[lp_player] = (libCPCD_gv_cDTychusMaxHeroCount[lp_player] - 1);
        libCPCD_gv_cDTychusTrainMaxCharges[lp_player] = (libCPCD_gv_cDTychusTrainMaxCharges[lp_player] - 1);
    }

}

fixed libCPCD_gf_CDTychusGetRecruitmentChargeCooldown (int lp_tychusPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "TychusOutlawUnlockDurationDummy", "Amount", lp_tychusPlayer);
}

void libCPCD_gf_CDTychusInitHeroTechLimit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeSetProduceCap(lp_player, "Alias_TychusUniqueUnit", c_techCatUnit, libCPCD_gv_cDTychusMaxHeroCount[lp_player]);
    TechTreeSetProduceCap(lp_player, "TychusCoop", c_techCatUnit, 1);
    TechTreeSetProduceCap(lp_player, "TychusReaper", c_techCatUnit, 1);
    TechTreeSetProduceCap(lp_player, "TychusWarhound", c_techCatUnit, 1);
    TechTreeSetProduceCap(lp_player, "TychusFirebat", c_techCatUnit, 1);
    TechTreeSetProduceCap(lp_player, "TychusHERC", c_techCatUnit, 1);
    TechTreeSetProduceCap(lp_player, "TychusMarauder", c_techCatUnit, 1);
    TechTreeSetProduceCap(lp_player, "TychusGhost", c_techCatUnit, 1);
    TechTreeSetProduceCap(lp_player, "TychusSpectre", c_techCatUnit, 1);
    TechTreeSetProduceCap(lp_player, "TychusMedic", c_techCatUnit, 1);
}

void libCPCD_gf_CDTychusUIInit (int lp_tychusPlayer) {
    // Variable Declarations
    int lv_squadindex;

    // Automatic Variable Declarations
    int autoC3AEEE88_ae;
    const int autoC3AEEE88_ai = 1;

    // Variable Initialization

    // Implementation
    libCPCD_gv_cDTychusUISquadContainer[lp_tychusPlayer] = libCPCD_gv_globalPowerPanel[lp_tychusPlayer];
    DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadContainer[lp_tychusPlayer], PlayerGroupAll(), "AbilityMaxChargesState", IntToString(libCPCD_gv_cDTychusUIMedivacMaxCharges));
    DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadContainer[lp_tychusPlayer], PlayerGroupAll(), "AbilityCurrentChargesState", IntToString(libCPCD_gv_cDTychusUIMedivacCurrentCharges[lp_tychusPlayer]));
    DialogControlHookup(libCPCD_gv_cDTychusUISquadContainer[lp_tychusPlayer], c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName("BarTrainingProgress"));
    libCPCD_gv_cDTychusUISquadTrainingProgressBar[lp_tychusPlayer] = DialogControlLastCreated();
    autoC3AEEE88_ae = (libCPCD_gv_cDTychusUISquadMaxSize - 1);
    lv_squadindex = 0;
    for ( ; ( (autoC3AEEE88_ai >= 0 && lv_squadindex <= autoC3AEEE88_ae) || (autoC3AEEE88_ai < 0 && lv_squadindex >= autoC3AEEE88_ae) ) ; lv_squadindex += autoC3AEEE88_ai ) {
        DialogControlHookup(libCPCD_gv_cDTychusUISquadContainer[lp_tychusPlayer], c_triggerControlTypeUnitStatus, libNtve_gf_ConvertStringToUILayoutFrameName(("TychusHero" + IntToString(lv_squadindex))));
        libCPCD_gv_cDTychusUISquadUnitFrames[lv_squadindex][lp_tychusPlayer] = DialogControlLastCreated();
        DialogControlHookup(libCPCD_gv_cDTychusUISquadContainer[lp_tychusPlayer], c_triggerControlTypeUnitTarget, libNtve_gf_ConvertStringToUILayoutFrameName(("TychusHero" + IntToString(lv_squadindex) + "/UnitTargetFrame")));
        libCPCD_gv_cDTychusUISquadUnitTarget[lv_squadindex][lp_tychusPlayer] = DialogControlLastCreated();
        DialogControlHookup(libCPCD_gv_cDTychusUISquadContainer[lp_tychusPlayer], c_triggerControlTypeUnitTarget, libNtve_gf_ConvertStringToUILayoutFrameName(("TychusHero" + IntToString(lv_squadindex) + "/BarTargetFrame")));
        libCPCD_gv_cDTychusUISquadBarTargets[lv_squadindex][lp_tychusPlayer] = DialogControlLastCreated();
        DialogControlHookup(libCPCD_gv_cDTychusUISquadContainer[lp_tychusPlayer], c_triggerControlTypeUnitTarget, libNtve_gf_ConvertStringToUILayoutFrameName(("TychusHero" + IntToString(lv_squadindex) + "/EquipmentStructureTargetFrame")));
        libCPCD_gv_cDTychusUIEquipmentStructureTargets[lv_squadindex][lp_tychusPlayer] = DialogControlLastCreated();
        DialogControlHookup(libCPCD_gv_cDTychusUISquadContainer[lp_tychusPlayer], c_triggerControlTypePortrait, libNtve_gf_ConvertStringToUILayoutFrameName(("TychusHero" + IntToString(lv_squadindex) + "/PortraitContainer/Portrait")));
        libCPCD_gv_cDTychusUISquadPortraits[lv_squadindex][lp_tychusPlayer] = DialogControlLastCreated();
        DialogControlHookup(libCPCD_gv_cDTychusUISquadContainer[lp_tychusPlayer], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("TychusHero" + IntToString(lv_squadindex) + "/2DPortraitContainer/2DPortrait")));
        libCPCD_gv_cDTychusUISquadPortraitsStatic[lv_squadindex][lp_tychusPlayer] = DialogControlLastCreated();
        DialogControlHookup(libCPCD_gv_cDTychusUISquadContainer[lp_tychusPlayer], c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName(("TychusHero" + IntToString(lv_squadindex) + "/AvailabilityProgress")));
        libCPCD_gv_cDTychusUISquadAvailabilityProgressBars[lv_squadindex][lp_tychusPlayer] = DialogControlLastCreated();
        DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadUnitFrames[lv_squadindex][lp_tychusPlayer], PlayerGroupAll(), "EmptyState", "Empty");
        DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadUnitFrames[lv_squadindex][lp_tychusPlayer], PlayerGroupAll(), "DeathState", "NotDead");
        DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadUnitFrames[lv_squadindex][lp_tychusPlayer], PlayerGroupAll(), "TrainingState", "NotTraining");
        DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadUnitFrames[lv_squadindex][lp_tychusPlayer], PlayerGroupAll(), "AvailabilityState", "NotAvailable");
    }
    PortraitSetModel(PortraitGetTriggerControl(libCPCD_gv_cDTychusUISquadPortraits[0][lp_tychusPlayer]), UserDataGetModel("CoopTechTychusSquad", "Tychus", "Portrait Model", 1), false);
    PortraitSetActor(PortraitGetTriggerControl(libCPCD_gv_cDTychusUISquadPortraits[0][lp_tychusPlayer]), "PortraitActor");
    libNtve_gf_SetDialogItemImage(libCPCD_gv_cDTychusUISquadPortraitsStatic[0][lp_tychusPlayer], UserDataGetImagePath("CoopTechTychusSquad", "Tychus", "2D Portrait", 1), PlayerGroupAll());
    DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadUnitFrames[0][lp_tychusPlayer], PlayerGroupAll(), "UnitState", ("Tychus"));
    DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadUnitFrames[0][lp_tychusPlayer], PlayerGroupAll(), "EmptyState", "NotEmpty");
    DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadUnitFrames[0][lp_tychusPlayer], PlayerGroupAll(), "TrainingState", "Training");
    TriggerEnable(libCPCD_gt_CDTychusUISquadMemberTrained, true);
    TriggerEnable(libCPCD_gt_CDTychusUISquadMemberReviveQueued, true);
    TriggerEnable(libCPCD_gt_CDTychusUISquadMemberReviveCancelled, true);
    TriggerEnable(libCPCD_gt_CDTychusUISquadMemberRevived, true);
    TriggerEnable(libCPCD_gt_CDTychusUISquadMemberDeath, true);
    TriggerEnable(libCPCD_gt_CDTychusUISquadStructureBuilt, true);
    TriggerEnable(libCPCD_gt_CDTychusUIMedivacAbilityReady, true);
    TriggerEnable(libCPCD_gt_CDTychusUIMedivacAbilityUnready, true);
    TriggerEnable(libCPCD_gt_CDTychusUIMedivacPlatformBuilt, true);
    TriggerEnable(libCPCD_gt_CDTychusUIEquipmentUpgraded, true);
    TriggerEnable(libCPCD_gt_CDTychusUISpawnCheat, true);
    libCPCD_gf_CDTychusUISquadAvailability();
}

trigger auto_libCPCD_gf_CDTychusUIPlayPurchaseSound_Trigger = null;
int auto_libCPCD_gf_CDTychusUIPlayPurchaseSound_lp_tychusPlayer;

void libCPCD_gf_CDTychusUIPlayPurchaseSound (int lp_tychusPlayer) {
    auto_libCPCD_gf_CDTychusUIPlayPurchaseSound_lp_tychusPlayer = lp_tychusPlayer;

    if (auto_libCPCD_gf_CDTychusUIPlayPurchaseSound_Trigger == null) {
        auto_libCPCD_gf_CDTychusUIPlayPurchaseSound_Trigger = TriggerCreate("auto_libCPCD_gf_CDTychusUIPlayPurchaseSound_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CDTychusUIPlayPurchaseSound_Trigger, false, false);
}

bool auto_libCPCD_gf_CDTychusUIPlayPurchaseSound_TriggerFunc (bool testConds, bool runActions) {
    int lp_tychusPlayer = auto_libCPCD_gf_CDTychusUIPlayPurchaseSound_lp_tychusPlayer;

    // Variable Declarations
    soundlink lv_coinsound;
    soundlink lv_guitarriffsound;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_coinsound = SoundLink("Tychus_AC_UpgradePurchase", -1);
    lv_guitarriffsound = SoundLink("Tychus_AC_UpgradePurchase_MxFx", -1);

    // Implementation
    if ((libCPCD_gv_cDTychusUIUpgradePurchasePlaying[lp_tychusPlayer] == true)) {
        return true;
    }

    libCPCD_gv_cDTychusUIUpgradePurchasePlaying[lp_tychusPlayer] = true;
    SoundPlayForPlayer(lv_coinsound, c_maxPlayers, PlayerGroupSingle(lp_tychusPlayer), 100.0, 0.0);
    Wait(0.125, c_timeReal);
    SoundPlayForPlayer(lv_guitarriffsound, c_maxPlayers, PlayerGroupSingle(lp_tychusPlayer), 100.0, 0.0);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    libCPCD_gv_cDTychusUIUpgradePurchasePlaying[lp_tychusPlayer] = false;
    return true;
}

void libCPCD_gf_CDTychusUISetBarUnit (unit lp_tychusBarUnit) {
    // Variable Declarations
    int lv_squadindex;
    int lv_player;

    // Automatic Variable Declarations
    int autoA10ABEED_ae;
    const int autoA10ABEED_ai = 1;

    // Variable Initialization
    lv_player = UnitGetOwner(lp_tychusBarUnit);

    // Implementation
    libCPCD_gv_cDTychusUIBar[UnitGetOwner(lp_tychusBarUnit)] = lp_tychusBarUnit;
    TriggerEnable(libCPCD_gt_CDTychusUISquadBarUpdateProgress, true);
    TriggerEnable(libCPCD_gt_CDTychusUISquadBarBuilt, false);
    autoA10ABEED_ae = (libCPCD_gv_cDTychusUISquadMaxSize - 1);
    lv_squadindex = 0;
    for ( ; ( (autoA10ABEED_ai >= 0 && lv_squadindex <= autoA10ABEED_ae) || (autoA10ABEED_ai < 0 && lv_squadindex >= autoA10ABEED_ae) ) ; lv_squadindex += autoA10ABEED_ai ) {
        libNtve_gf_SetDialogItemUnit(libCPCD_gv_cDTychusUISquadBarTargets[lv_squadindex][UnitGetOwner(lp_tychusBarUnit)], libCPCD_gv_cDTychusUIBar[UnitGetOwner(lp_tychusBarUnit)], PlayerGroupAll());
    }
}

void libCPCD_gf_CDTychusUIMedivacModifyCharges (int lp_chargesDelta, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libCPCD_gv_cDTychusUIMedivacCurrentCharges[lp_player] += lp_chargesDelta;
    DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadContainer[lp_player], PlayerGroupAll(), "AbilityCurrentChargesState", IntToString(libCPCD_gv_cDTychusUIMedivacCurrentCharges[lp_player]));
}

trigger auto_libCPCD_gf_CDTychusUISquadAvailability_Trigger = null;

void libCPCD_gf_CDTychusUISquadAvailability () {
    if (auto_libCPCD_gf_CDTychusUISquadAvailability_Trigger == null) {
        auto_libCPCD_gf_CDTychusUISquadAvailability_Trigger = TriggerCreate("auto_libCPCD_gf_CDTychusUISquadAvailability_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CDTychusUISquadAvailability_Trigger, false, false);
}

bool auto_libCPCD_gf_CDTychusUISquadAvailability_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    fixed lv_initialchargetime;
    fixed lv_rechargetime;
    int lv_numberofinitialheroesavailable;
    int lv_numberofheroeswithheld;
    int lv_squadindex;

    // Automatic Variable Declarations
    playergroup auto025E1876_g;
    int auto3421FC6B_ae;
    const int auto3421FC6B_ai = 1;
    int autoBA13F9DF_ae;
    const int autoBA13F9DF_ai = 1;

    // Variable Initialization
    lv_initialchargetime = (libCPGL_gf_HTHeroTime() + 1.0);
    lv_rechargetime = libCOMI_gf_CalculateTychusRecruitmentChargeCooldown(lv_indexPlayer);
    lv_numberofinitialheroesavailable = 1;

    // Implementation
    auto025E1876_g = libCPGL_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto025E1876_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCPGL_gv_commander[lv_indexPlayer].lv_commander == "Tychus")) {
            if ((TechTreeUpgradeCount(lv_indexPlayer, "TychusCoopFifthHeroUpgrade", c_techCountCompleteOnly) == 0)) {
                lv_numberofheroeswithheld = 1;
            }
            else {
                lv_numberofheroeswithheld = 0;
            }
            auto3421FC6B_ae = (lv_numberofinitialheroesavailable - 1);
            lv_squadindex = 0;
            for ( ; ( (auto3421FC6B_ai >= 0 && lv_squadindex <= auto3421FC6B_ae) || (auto3421FC6B_ai < 0 && lv_squadindex >= auto3421FC6B_ae) ) ; lv_squadindex += auto3421FC6B_ai ) {
                DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadUnitFrames[lv_squadindex][lv_indexPlayer], PlayerGroupAll(), "AvailabilityState", "Unlocking");
            }
            libCPCD_gf_CDTychusUISquadAvailabilityProgressBar(lv_squadindex, lv_initialchargetime, lv_indexPlayer);
            lv_rechargetime = (libCPGL_gf_HTHeroTime() / 2.0);
            autoBA13F9DF_ae = (libCPCD_gv_cDTychusUISquadMaxSize - lv_numberofheroeswithheld - 1);
            lv_squadindex = (lv_numberofinitialheroesavailable + 1);
            for ( ; ( (autoBA13F9DF_ai >= 0 && lv_squadindex <= autoBA13F9DF_ae) || (autoBA13F9DF_ai < 0 && lv_squadindex >= autoBA13F9DF_ae) ) ; lv_squadindex += autoBA13F9DF_ai ) {
                libCPCD_gf_CDTychusUISquadAvailabilityProgressBar(lv_squadindex, lv_rechargetime, lv_indexPlayer);
            }
        }

    }
    return true;
}

void libCPCD_gf_CDTychusUISquadAvailabilityProgressBar (int lp_squadIndex, fixed lp_duration, int lp_tychusPlayer) {
    // Variable Declarations
    fixed lv_timepassed;
    fixed lv_updateperiod;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_updateperiod = 0.125;

    // Implementation
    DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadUnitFrames[lp_squadIndex][lp_tychusPlayer], PlayerGroupSingle(lp_tychusPlayer), "AvailabilityState", "Unlocking");
    libNtve_gf_SetDialogItemMaximumValue(libCPCD_gv_cDTychusUISquadAvailabilityProgressBars[lp_squadIndex][lp_tychusPlayer], lp_duration, PlayerGroupSingle(lp_tychusPlayer));
    while ((lv_timepassed < lp_duration) && (libCPCD_gv_cDTychusUISquadSpawnSkip == false)) {
        libNtve_gf_SetDialogItemCurrentValue(libCPCD_gv_cDTychusUISquadAvailabilityProgressBars[lp_squadIndex][lp_tychusPlayer], lv_timepassed, PlayerGroupSingle(lp_tychusPlayer));
        Wait(lv_updateperiod, c_timeGame);
        lv_timepassed += lv_updateperiod;
    }
    libNtve_gf_SetDialogItemCurrentValue(libCPCD_gv_cDTychusUISquadAvailabilityProgressBars[lp_squadIndex][lp_tychusPlayer], lp_duration, PlayerGroupSingle(lp_tychusPlayer));
    DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadUnitFrames[lp_squadIndex][0], PlayerGroupSingle(lp_tychusPlayer), "AvailabilityState", "Available");
    PlayerAddChargeUsed(lp_tychusPlayer, "Abil/TychusTrain", -1.0);
    TriggerSendEvent("TychusHeroAvailable");
}

void libCPCD_gf_CDTychusUISquadTargetFrame (string lp_squadInstance, unit lp_targetUnit) {
    // Variable Declarations
    int lv_squadindex;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_squadindex = UserDataGetInt("CoopTechTychusSquad", lp_squadInstance, "Squad Slot", 1);
    lv_player = UnitGetOwner(lp_targetUnit);

    // Implementation
    if ((lv_squadindex == -1)) {
        return ;
    }

    libNtve_gf_SetDialogItemUnit(libCPCD_gv_cDTychusUISquadUnitFrames[lv_squadindex][lv_player], lp_targetUnit, PlayerGroupSingle(UnitGetOwner(lp_targetUnit)));
    libNtve_gf_SetDialogItemUnit(libCPCD_gv_cDTychusUISquadUnitTarget[lv_squadindex][lv_player], lp_targetUnit, PlayerGroupSingle(UnitGetOwner(lp_targetUnit)));
}

void libCPCD_gf_CDTychusUISetTychusSquadMember (unit lp_unit, int lp_squadIndex, string lp_squadInstance) {
    // Variable Declarations
    string lv_abilIndex;
    string lv_abil;
    string lv_button;
    string lv_replaceTarget;
    string lv_replaceTargetTop;
    int lv_replacePlayer;
    unitgroup lv_structureGroup;
    playergroup lv_replacePlayerGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abilIndex = IntToString((lp_squadIndex + 1));
    lv_abil = UserDataGetGameLink("CoopTechTychusSquad", libCOMI_gf_EventTychusHeroInstance(), "Active Abil", 1);
    lv_button = UserDataGetGameLink("CoopTechTychusSquad", libCOMI_gf_EventTychusHeroInstance(), "Active Button", 1);
    lv_replaceTarget = (libCPCD_gv_cDTychusUIAbilityButtonBase + lv_abilIndex);
    lv_replaceTargetTop = (libCPCD_gv_cDTychusUIAbilityButtonBase + lv_abilIndex + "Top");
    lv_replacePlayer = UnitGetOwner(libCOMI_gf_EventTychusHero());
    lv_structureGroup = UnitGroup(UserDataGetUnit("CoopTechTychusSquad", lp_squadInstance, "EquipmentStructure", 1), UnitGetOwner(lp_unit), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_replacePlayerGroup = PlayerGroupSingle(lv_replacePlayer);

    // Implementation
    if (((lp_squadIndex < 0) || (lp_squadIndex >= libCPCD_gv_cDTychusUISquadMaxSize))) {
        return ;
    }
    else if ((lp_squadIndex == 1)) {
        libCOOC_gf_CC_SetTychusScoreUnit(lv_replacePlayer, UnitGetType(lp_unit), true);
    }
    else if ((lp_squadIndex == 2)) {
        libCOOC_gf_CC_SetTychusScoreUnit(lv_replacePlayer, UnitGetType(lp_unit), false);
    }
    libCOMI_gf_ButtonReplacement(lv_replacePlayer, (lv_replaceTarget), lv_button);
    CatalogLinkReplace(lv_replacePlayer, c_gameCatalogAbil, lv_replaceTarget, (lv_abil));
    UserDataSetInt("CoopTechTychusSquad", lp_squadInstance, "Squad Slot", 1, lp_squadIndex);
    libNtve_gf_SetDialogItemUnit(libCPCD_gv_cDTychusUISquadUnitFrames[lp_squadIndex][lv_replacePlayer], lp_unit, lv_replacePlayerGroup);
    libNtve_gf_SetDialogItemUnit(libCPCD_gv_cDTychusUISquadUnitTarget[lp_squadIndex][lv_replacePlayer], lp_unit, lv_replacePlayerGroup);
    if ((UnitGroupCount(lv_structureGroup, c_unitCountAlive) > 0)) {
        libNtve_gf_SetDialogItemUnit(libCPCD_gv_cDTychusUIEquipmentStructureTargets[lp_squadIndex][lv_replacePlayer], UnitGroupUnit(lv_structureGroup, 1), lv_replacePlayerGroup);
    }

    PortraitSetModel(PortraitGetTriggerControl(libCPCD_gv_cDTychusUISquadPortraits[lp_squadIndex][lv_replacePlayer]), UserDataGetModel("CoopTechTychusSquad", lp_squadInstance, "Portrait Model", 1), false);
    PortraitSetActor(PortraitGetTriggerControl(libCPCD_gv_cDTychusUISquadPortraits[lp_squadIndex][lv_replacePlayer]), "PortraitActor");
    libNtve_gf_SetDialogItemImage(libCPCD_gv_cDTychusUISquadPortraitsStatic[lp_squadIndex][lv_replacePlayer], UserDataGetImagePath("CoopTechTychusSquad", lp_squadInstance, "2D Portrait", 1), lv_replacePlayerGroup);
    DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadUnitFrames[lp_squadIndex][lv_replacePlayer], lv_replacePlayerGroup, "UnitState", (lp_squadInstance));
    DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadUnitFrames[lp_squadIndex][lv_replacePlayer], lv_replacePlayerGroup, "AvailabilityState", "Available");
    DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadUnitFrames[lp_squadIndex][lv_replacePlayer], lv_replacePlayerGroup, "EmptyState", "NotEmpty");
    DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadUnitFrames[lp_squadIndex][lv_replacePlayer], lv_replacePlayerGroup, "DeathState", "NotDead");
}

int libCPCD_gf_CDTychusUIGetNextSquadIndex (int lp_player) {
    // Variable Declarations
    int lv_currentindex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentindex = libCPCD_gv_cDTychusUISquadNextIndex[lp_player];

    // Implementation
    libCPCD_gv_cDTychusUISquadNextIndex[lp_player] += 1;
    return lv_currentindex;
}

string libCPCD_gf_CDTychusUISquadInstance (unit lp_unit) {
    // Variable Declarations
    string lv_instance;

    // Automatic Variable Declarations
    string autoED54F004_userType;
    int autoED54F004_i;

    // Variable Initialization

    // Implementation
    autoED54F004_userType = "CoopTechTychusSquad";
    autoED54F004_i = 1;
    for ( ; autoED54F004_i <= UserDataInstanceCount(autoED54F004_userType) ; autoED54F004_i += 1 ) {
        lv_instance = UserDataInstance(autoED54F004_userType, autoED54F004_i);
        if ((UnitGetType(lp_unit) == UserDataGetUnit("CoopTechTychusSquad", lv_instance, "Unit Type", 1))) {
            return lv_instance;
        }

    }
    return null;
}

void libCPCD_gf_CDTychusUISwapSetSquadMember (unit lp_unit, int lp_squadIndex, string lp_squadInstance) {
    // Variable Declarations
    string lv_abilIndex;
    string lv_abil;
    string lv_button;
    string lv_replaceTarget;
    string lv_replaceTargetTop;
    int lv_replacePlayer;
    unitgroup lv_structureGroup;
    playergroup lv_replacePlayerGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abilIndex = IntToString((lp_squadIndex + 1));
    lv_abil = UserDataGetGameLink("CoopTechTychusSquad", lp_squadInstance, "Active Abil", 1);
    lv_button = UserDataGetGameLink("CoopTechTychusSquad", lp_squadInstance, "Active Button", 1);
    lv_replaceTarget = (libCPCD_gv_cDTychusUIAbilityButtonBase + lv_abilIndex);
    lv_replaceTargetTop = (libCPCD_gv_cDTychusUIAbilityButtonBase + lv_abilIndex + "Top");
    lv_replacePlayer = UnitGetOwner(lp_unit);
    lv_structureGroup = UnitGroup(UserDataGetUnit("CoopTechTychusSquad", lp_squadInstance, "EquipmentStructure", 1), UnitGetOwner(lp_unit), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_replacePlayerGroup = PlayerGroupSingle(lv_replacePlayer);

    // Implementation
    if (((lp_squadIndex < 0) || (lp_squadIndex >= libCPCD_gv_cDTychusMaxHeroCount[lv_replacePlayer]))) {
        return ;
    }
    libCOMI_gf_ButtonReplacement(lv_replacePlayer, (lv_replaceTarget), lv_button);
    CatalogLinkReplace(lv_replacePlayer, c_gameCatalogAbil, lv_replaceTarget, (lv_abil));
    UserDataSetInt("CoopTechTychusSquad", lp_squadInstance, "Squad Slot", 1, lp_squadIndex);
    libNtve_gf_SetDialogItemUnit(libCPCD_gv_cDTychusUISquadUnitFrames[lp_squadIndex][lv_replacePlayer], lp_unit, lv_replacePlayerGroup);
    libNtve_gf_SetDialogItemUnit(libCPCD_gv_cDTychusUISquadUnitFrames[lp_squadIndex][lv_replacePlayer], lp_unit, lv_replacePlayerGroup);
    if ((UnitGroupCount(lv_structureGroup, c_unitCountAlive) > 0)) {
        libNtve_gf_SetDialogItemUnit(libCPCD_gv_cDTychusUIEquipmentStructureTargets[lp_squadIndex][lv_replacePlayer], UnitGroupUnit(lv_structureGroup, 1), lv_replacePlayerGroup);
    }

    PortraitSetModel(PortraitGetTriggerControl(libCPCD_gv_cDTychusUISquadPortraits[lp_squadIndex][lv_replacePlayer]), UserDataGetModel("CoopTechTychusSquad", lp_squadInstance, "Portrait Model", 1), false);
    PortraitSetActor(PortraitGetTriggerControl(libCPCD_gv_cDTychusUISquadPortraits[lp_squadIndex][lv_replacePlayer]), "PortraitActor");
    libNtve_gf_SetDialogItemImage(libCPCD_gv_cDTychusUISquadPortraitsStatic[lp_squadIndex][lv_replacePlayer], UserDataGetImagePath("CoopTechTychusSquad", lp_squadInstance, "2D Portrait", 1), lv_replacePlayerGroup);
    DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadUnitFrames[lp_squadIndex][lv_replacePlayer], lv_replacePlayerGroup, "UnitState", (lp_squadInstance));
    DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadUnitFrames[lp_squadIndex][lv_replacePlayer], lv_replacePlayerGroup, "AvailabilityState", "Available");
    DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadUnitFrames[lp_squadIndex][lv_replacePlayer], lv_replacePlayerGroup, "EmptyState", "NotEmpty");
    DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadUnitFrames[lp_squadIndex][lv_replacePlayer], lv_replacePlayerGroup, "DeathState", "NotDead");
}

string libCPCD_gf_CDTychusUISwapGetSquadInstance (unit lp_unit) {
    // Variable Declarations
    string lv_instance;

    // Automatic Variable Declarations
    string auto0C2258C8_userType;
    int auto0C2258C8_i;

    // Variable Initialization

    // Implementation
    auto0C2258C8_userType = "CoopTechTychusSquad";
    auto0C2258C8_i = 1;
    for ( ; auto0C2258C8_i <= UserDataInstanceCount(auto0C2258C8_userType) ; auto0C2258C8_i += 1 ) {
        lv_instance = UserDataInstance(auto0C2258C8_userType, auto0C2258C8_i);
        if ((UnitGetType(lp_unit) == UserDataGetUnit("CoopTechTychusSquad", lv_instance, "Unit Type", 1))) {
            return lv_instance;
        }

    }
    return null;
}

void libCPCD_gf_AchievementTychusGear (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCPCD_gf_DifficultyLevelForPlayerCoop(lp_player) == 3) || (libCPCD_gf_DifficultyLevelForPlayerCoop(lp_player) == 4)) && (libCPCD_gv_achievementTychusGear == 5) && (GameGetMissionTime() < 1200.0)) {
        AchievementAward(lp_player, "CommanderTychusUltimateTime");
    }

}

void libCPCD_gf_CDZeratulDisruptorShotSpawn (unit lp_caster, point lp_spawnPoint, point lp_targetPoint) {
    // Variable Declarations
    point lv_point;
    unit lv_orb;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_point = lp_spawnPoint;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PurificationOrbSmall", c_unitCreateIgnorePlacement, UnitGetOwner(lp_caster), lv_point);
    lv_orb = UnitLastCreated();
    UnitIssueOrder(lv_orb, OrderTargetingPoint(AbilityCommand("move", 0), lp_targetPoint), c_orderQueueReplace);
    UnitBehaviorAdd(lv_orb, "ZeratulPurificationNovaSmallOrbSearchBuff", lp_caster, 1);
}

void libCPCD_gf_CDZeratulApplyDevolve (unit lp_targetUnit) {
    // Variable Declarations
    fixed lv_lifePercentage;
    fixed lv_shieldPercentage;
    fixed lv_energyPercentage;
    string lv_oldUnitType;
    string lv_newUnitType;
    int lv_owner;
    point lv_spawnPosition;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lifePercentage = UnitGetPropertyFixed(lp_targetUnit, c_unitPropLifePercent, c_unitPropCurrent);
    lv_shieldPercentage = UnitGetPropertyFixed(lp_targetUnit, c_unitPropShieldsPercent, c_unitPropCurrent);
    lv_oldUnitType = UnitGetType(lp_targetUnit);
    lv_newUnitType = libCPCD_gf_CDZeratulDevoolveGetNewUnitType(lv_oldUnitType, (libCPCD_gf_CDZeratulDevolveGetUnitTier(UnitGetType(lp_targetUnit)) - 1));
    lv_owner = UnitGetOwner(lp_targetUnit);

    // Implementation
    if (((lv_newUnitType == null) || (TechTreeUnitIsAllowed(UnitGetOwner(lp_targetUnit), lv_newUnitType) == true))) {
        return ;
    }

    lv_spawnPosition = UnitGetPosition(lp_targetUnit);
    PointSetFacing(lv_spawnPosition, UnitGetFacing(lp_targetUnit));
    UnitRemove(lp_targetUnit);
    libNtve_gf_CreateUnitsAtPoint2(1, lv_newUnitType, c_unitCreateIgnorePlacement, lv_owner, lv_spawnPosition);
    UnitGroupAdd(libCPCD_gv_cDZeratulDevolvedUnits, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, lv_lifePercentage);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsPercent, lv_shieldPercentage);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 0.0);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create ZeratulDevolve");
    AISetUnitSuicide(UnitLastCreated(), true);
}

int libCPCD_gf_CDZeratulDevolveGetUnitTier (string lp_unitType) {
    // Variable Declarations
    string lv_devolutioninstance;
    int lv_targettierindex;
    int lv_targettiersupplyfallbackindex;
    int lv_targetunittypeindex;
    string lv_targetunittype;
    fixed lv_targetunitsupply;
    int lv_numberofdevolutiontiers;
    int lv_numberofunittypespertier;

    // Automatic Variable Declarations
    int autoBE0179DA_ae;
    const int autoBE0179DA_ai = 1;
    int auto1193C23B_ae;
    const int auto1193C23B_ai = 1;

    // Variable Initialization
    lv_targettiersupplyfallbackindex = 1;
    lv_targetunitsupply = UnitTypeGetProperty(lp_unitType, c_unitPropSuppliesUsed);
    lv_numberofdevolutiontiers = UserDataInstanceCount("DevolutionTiers");
    lv_numberofunittypespertier = UserDataFieldValueCount("DevolutionTiers", "UnitsToDevolveInto");

    // Implementation
    autoBE0179DA_ae = lv_numberofdevolutiontiers;
    lv_targettierindex = 1;
    for ( ; ( (autoBE0179DA_ai >= 0 && lv_targettierindex <= autoBE0179DA_ae) || (autoBE0179DA_ai < 0 && lv_targettierindex >= autoBE0179DA_ae) ) ; lv_targettierindex += autoBE0179DA_ai ) {
        lv_devolutioninstance = UserDataInstance("DevolutionTiers", lv_targettierindex);
        if ((lv_targetunitsupply >= UserDataGetFixed("DevolutionTiers", lv_devolutioninstance, "RoughSupply", 1))) {
            lv_targettiersupplyfallbackindex = lv_targettierindex;
        }

        auto1193C23B_ae = lv_numberofunittypespertier;
        lv_targetunittypeindex = 1;
        for ( ; ( (auto1193C23B_ai >= 0 && lv_targetunittypeindex <= auto1193C23B_ae) || (auto1193C23B_ai < 0 && lv_targetunittypeindex >= auto1193C23B_ae) ) ; lv_targetunittypeindex += auto1193C23B_ai ) {
            lv_targetunittype = UserDataGetUnit("DevolutionTiers", lv_devolutioninstance, "UnitsToDevolveInto", lv_targetunittypeindex);
            if ((lv_targetunittype == lp_unitType)) {
                return lv_targettierindex;
            }

        }
    }
    return lv_targettiersupplyfallbackindex;
}

string libCPCD_gf_CDZeratulDevoolveGetNewUnitType (string lp_oldUnitType, int lp_newTier) {
    // Variable Declarations
    string lv_devolutioninstance;
    int lv_newtierindex;
    int lv_newunittypeindex;
    string lv_newunittype;
    int lv_numberofdevolutiontiers;
    int lv_numberofunittypespertier;
    string[101] lv_validunittypes;
    int lv_numberofvalidunittypes;
    string lv_oldunitrace;

    // Automatic Variable Declarations
    const int auto3545A804_ae = 1;
    const int auto3545A804_ai = -1;
    int auto92E6CE01_ae;
    const int auto92E6CE01_ai = 1;

    // Variable Initialization
    lv_numberofdevolutiontiers = UserDataInstanceCount("DevolutionTiers");
    lv_numberofunittypespertier = UserDataFieldValueCount("DevolutionTiers", "UnitsToDevolveInto");
    lv_oldunitrace = (CatalogFieldValueGet(c_gameCatalogUnit, lp_oldUnitType, "Race", c_playerAny));

    // Implementation
    if ((((lp_newTier >= 1) && (lp_newTier <= lv_numberofdevolutiontiers)) == false)) {
        return null;
    }

    lv_newtierindex = lp_newTier;
    for ( ; ( (auto3545A804_ai >= 0 && lv_newtierindex <= auto3545A804_ae) || (auto3545A804_ai < 0 && lv_newtierindex >= auto3545A804_ae) ) ; lv_newtierindex += auto3545A804_ai ) {
        lv_devolutioninstance = UserDataInstance("DevolutionTiers", lv_newtierindex);
        lv_numberofvalidunittypes = 0;
        auto92E6CE01_ae = lv_numberofunittypespertier;
        lv_newunittypeindex = 1;
        for ( ; ( (auto92E6CE01_ai >= 0 && lv_newunittypeindex <= auto92E6CE01_ae) || (auto92E6CE01_ai < 0 && lv_newunittypeindex >= auto92E6CE01_ae) ) ; lv_newunittypeindex += auto92E6CE01_ai ) {
            lv_newunittype = UserDataGetUnit("DevolutionTiers", lv_devolutioninstance, "UnitsToDevolveInto", lv_newunittypeindex);
            if ((lv_newunittype != "") && (lv_newunittype != lp_oldUnitType) && ((CatalogFieldValueGet(c_gameCatalogUnit, lv_newunittype, "Race", c_playerAny)) == lv_oldunitrace)) {
                lv_validunittypes[lv_numberofvalidunittypes] = lv_newunittype;
                lv_numberofvalidunittypes += 1;
            }

        }
        if ((lv_numberofvalidunittypes > 0)) {
            return lv_validunittypes[RandomInt(0, (lv_numberofvalidunittypes - 1))];
        }

    }
    return null;
}

void libCPCD_gf_CDZeratulProphecyEvent (trigger t, string lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, (lp_event));
}

void libCPCD_gf_CDZeratulProphecyEventSend (string lp_event, int lp_zeratulPlayer, unit lp_artifactUnit, int lp_artifactNumber) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName((lp_event), "ZeratulEventUnit"), libCPGL_gv_commander[lp_zeratulPlayer].lv_heroUnit);
    DataTableSetUnit(false, TriggerEventParamName((lp_event), "ZeratulEventArtifactUnit"), lp_artifactUnit);
    DataTableSetInt(false, TriggerEventParamName((lp_event), "ZeratulEventPlayer"), lp_zeratulPlayer);
    DataTableSetInt(false, TriggerEventParamName((lp_event), "ZeratulEventArtifactNumber"), lp_artifactNumber);
    TriggerSendEvent((lp_event));
}

unit libCPCD_gf_CDZeratulProphecyEventGetUnit (int lp_unit) {
    // Automatic Variable Declarations
    int auto4A931BED_val;

    // Implementation
    auto4A931BED_val = lp_unit;
    if (auto4A931BED_val == libCPCD_ge_CDZeratulProphecyEventUnits_ZeratulUnit) {
        return DataTableGetUnit(false, TriggerEventParamName(EventGenericName(), "ZeratulEventUnit"));
    }
    else if (auto4A931BED_val == libCPCD_ge_CDZeratulProphecyEventUnits_ArtifactUnit) {
        return DataTableGetUnit(false, TriggerEventParamName(EventGenericName(), "ZeratulEventArtifactUnit"));
    }
    else {
    }
    return DataTableGetUnit(false, TriggerEventParamName(EventGenericName(), "ZeratulEventUnit"));
}

int libCPCD_gf_CDZeratulProphecyEventGetArtifactNumber () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(EventGenericName(), "ZeratulEventArtifactNumber"));
}

int libCPCD_gf_CDZeratulProphecyEventGetPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(EventGenericName(), "ZeratulEventPlayer"));
}

int libCPCD_gf_CDZeratulProphecyHintLevel (int lp_artifactNumber) {
    // Variable Declarations
    fixed lv_hint_1_timing;
    fixed lv_hint_2_timing;
    fixed lv_hint_3_timing;
    fixed lv_masteryTimeReduction;

    // Automatic Variable Declarations
    int auto02B6F08C_val;

    // Variable Initialization
    lv_masteryTimeReduction = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MasteryZeratulArtifactSpawnRateDisplayDummy", "Amount", libCPCD_gv_cDZeratulPlayer);

    // Implementation
    auto02B6F08C_val = lp_artifactNumber;
    if (auto02B6F08C_val == 3) {
        lv_hint_1_timing = libCPCD_gv_cDZeratulArtifactHint31;
        lv_hint_2_timing = libCPCD_gv_cDZeratulArtifactHint32;
        lv_hint_3_timing = libCPCD_gv_cDZeratulArtifactHint33;
    }
    else if (auto02B6F08C_val == 2) {
        lv_hint_1_timing = libCPCD_gv_cDZeratulArtifactHint21;
        lv_hint_2_timing = libCPCD_gv_cDZeratulArtifactHint22;
        lv_hint_3_timing = libCPCD_gv_cDZeratulArtifactHint23;
    }
    else if (auto02B6F08C_val == 1) {
        lv_hint_1_timing = libCPCD_gv_cDZeratulArtifactHint11;
        lv_hint_2_timing = libCPCD_gv_cDZeratulArtifactHint12;
        lv_hint_3_timing = libCPCD_gv_cDZeratulArtifactHint13;
    }
    else {
        lv_hint_1_timing = (libCPCD_gv_cDZeratulProphecyArtifactNumber * 300.0);
        lv_hint_2_timing = (lv_hint_1_timing + 60.0);
        lv_hint_3_timing = (lv_hint_2_timing + 60.0);
    }
    if ((GameGetMissionTime() >= (lv_hint_3_timing - lv_masteryTimeReduction))) {
        return 3;
    }
    else if ((GameGetMissionTime() >= (lv_hint_2_timing - lv_masteryTimeReduction))) {
        return 2;
    }
    else if ((GameGetMissionTime() >= (lv_hint_1_timing - lv_masteryTimeReduction))) {
        return 1;
    }
    return 0;
}

void libCPCD_gf_CDZeratulProphecyHintStart (int lp_hintLevel) {
    // Variable Declarations
    point lv_randomPoint;
    const fixed lv_hintRadius1 = 35.0;
    const fixed lv_hintRadius2 = 25.0;
    const fixed lv_hintRadius3 = 15.0;
    point lv_p1;
    point lv_p2;
    fixed lv_r1;
    fixed lv_r2;

    // Automatic Variable Declarations
    int auto83CF4DDF_val;
    int autoAB2FCBAC_val;

    // Variable Initialization

    // Implementation
    if ((lp_hintLevel == 0)) {
        return ;
    }
    else if ((libCPCD_gv_cDZeratulProphecyHintUnit != null)) {
        lv_p1 = UnitGetPosition(libCPCD_gv_cDZeratulProphecyHintUnit);
        lv_r1 = UnitGetCustomValue(libCPCD_gv_cDZeratulProphecyHintUnit, 0);
    }
    else if (true) {
        lv_p1 = PlayerStartLocation(libCPCD_gv_cDZeratulPlayer);
        lv_r1 = 150.0;
    }
    lv_p2 = UnitGetPosition(libCPCD_gv_cDZeratulProphecyArtifactUnit);
    auto83CF4DDF_val = lp_hintLevel;
    if (auto83CF4DDF_val == 1) {
        lv_r2 = lv_hintRadius1;
    }
    else if (auto83CF4DDF_val == 2) {
        lv_r2 = lv_hintRadius2;
    }
    else if (auto83CF4DDF_val == 3) {
        lv_r2 = lv_hintRadius3;
    }
    else {
    }
    while (((lv_randomPoint == null) || (DistanceBetweenPoints(lv_randomPoint, lv_p2) > lv_r2) || (RegionContainsPoint(RegionPlayableMap(), lv_randomPoint) == false))) {
        lv_randomPoint = RegionRandomPoint(RegionCircle(lv_p1, (lv_r1 - lv_r2)));
    }
    if ((libCPCD_gv_cDZeratulProphecyHintUnit != null)) {
        UnitSetPosition(libCPCD_gv_cDZeratulProphecyHintUnit, lv_randomPoint, false);
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ProphecyArtifactHintUnit", c_unitCreateIgnorePlacement, libCPCD_gv_cDZeratulPlayer, lv_randomPoint);
        libCPCD_gv_cDZeratulProphecyHintUnit = UnitLastCreated();
    }
    UnitSetCustomValue(libCPCD_gv_cDZeratulProphecyHintUnit, 0, lv_r2);
    libCOMI_gf_PingMinimapCampaign(PlayerGroupSingle(libCPCD_gv_cDZeratulPlayer), lv_randomPoint, 2.0, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(libCPCD_gv_cDZeratulPlayer, false)));
    autoAB2FCBAC_val = lp_hintLevel;
    if (autoAB2FCBAC_val == 1) {
        libNtve_gf_SendActorMessageToUnit(libCPCD_gv_cDZeratulProphecyHintUnit, "Signal Hint1");
    }
    else if (autoAB2FCBAC_val == 2) {
        libNtve_gf_SendActorMessageToUnit(libCPCD_gv_cDZeratulProphecyHintUnit, "Signal Hint2");
    }
    else if (autoAB2FCBAC_val == 3) {
        libNtve_gf_SendActorMessageToUnit(libCPCD_gv_cDZeratulProphecyHintUnit, "Signal Hint3");
    }
    else {
    }
}

void libCPCD_gf_CDZeratulProphecySetCooldown () {
    // Variable Declarations
    fixed lv_targetMissionTime;
    fixed lv_cooldownTime;
    fixed lv_masteryTimeReduction;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_masteryTimeReduction = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MasteryZeratulArtifactSpawnRateDisplayDummy", "Amount", libCPCD_gv_cDZeratulPlayer);

    // Implementation
    if ((libCPCD_gv_cDZeratulProphecyArtifactNumber > libCPCD_gf_CM_Zeratul_GetArtifactLimit(libCPCD_gv_cDZeratulPlayer))) {
        libNtve_gf_PlayerRemoveCooldown(libCPCD_gv_cDZeratulPlayer, "Abil/ProphecyVision");
        return ;
    }
    else if ((libCPCD_gv_cDZeratulProphecyArtifactNumber > 3)) {
        lv_targetMissionTime = (-60.0 + libCPCD_gv_cDZeratulProphecyArtifactNumber * 300.0 - lv_masteryTimeReduction);
    }
    else if ((libCPCD_gv_cDZeratulProphecyArtifactNumber == 3)) {
        lv_targetMissionTime = (840.0 - lv_masteryTimeReduction);
    }
    else if ((libCPCD_gv_cDZeratulProphecyArtifactNumber == 2)) {
        lv_targetMissionTime = (540.0 - lv_masteryTimeReduction);
    }
    lv_cooldownTime = MinF((180.0 - lv_masteryTimeReduction), (lv_targetMissionTime - GameGetMissionTime()));
    lv_cooldownTime = MaxF(lv_cooldownTime, 10.0);
    if ((PlayerGetCooldown(libCPCD_gv_cDZeratulPlayer, "Abil/ProphecyVision") < lv_cooldownTime)) {
        libNtve_gf_PlayerRemoveCooldown(libCPCD_gv_cDZeratulPlayer, "Abil/ProphecyVision");
        PlayerAddCooldown(libCPCD_gv_cDZeratulPlayer, "Abil/ProphecyVision", lv_cooldownTime);
    }

}

void libCPCD_gf_CDZeratulProphecySpawnResourcePickups (int lp_count, point lp_location) {
    // Variable Declarations
    fixed lv_randomValue;

    // Automatic Variable Declarations
    playergroup auto2BED6702_g;
    int auto2BED6702_var;
    int autoED07D68D_n;
    int autoED07D68D_i;

    // Variable Initialization

    // Implementation
    auto2BED6702_g = libCOOC_gf_CommanderPlayers();
    auto2BED6702_var = -1;
    while (true) {
        auto2BED6702_var = PlayerGroupNextPlayer(auto2BED6702_g, auto2BED6702_var);
        if (auto2BED6702_var < 0) { break; }
        autoED07D68D_n = lp_count;
        for (autoED07D68D_i = 1; autoED07D68D_i <= autoED07D68D_n; autoED07D68D_i += 1) {
            UnitCreate(1, "ProphecyArtifactMineralPickup", 0, auto2BED6702_var, lp_location, libNtve_gf_RandomAngle());
            lv_randomValue = RandomFixed(0.0, 100.0);
            if ((lv_randomValue < 50.0)) {
                UnitCreateEffectUnit(UnitLastCreated(), "ItemKnockbackBy2", UnitLastCreated());
            }
            else {
                UnitCreateEffectUnit(UnitLastCreated(), "ItemKnockbackBy3", UnitLastCreated());
            }
            UnitCreate(1, "ProphecyArtifactVespenePickup", 0, auto2BED6702_var, lp_location, libNtve_gf_RandomAngle());
            lv_randomValue = RandomFixed(0.0, 100.0);
            if ((lv_randomValue < 50.0)) {
                UnitCreateEffectUnit(UnitLastCreated(), "ItemKnockbackBy2", UnitLastCreated());
            }
            else {
                UnitCreateEffectUnit(UnitLastCreated(), "ItemKnockbackBy3", UnitLastCreated());
            }
        }
    }
}

void libCPCD_gf_CDZeratulProphecyPlaceArtifact (int lp_p) {
    // Variable Declarations
    point lv_artifactPoint;
    int lv_i;
    int lv_randomIndex;
    int lv_poolIndex;
    int lv_minDistance;
    int lv_maxDistance;

    // Automatic Variable Declarations
    int autoD969028B_val;

    // Variable Initialization

    // Implementation
    lv_artifactPoint = libCPCD_gf_CDZeratulProphecyArtifactGetPoint();
    autoD969028B_val = libCPCD_gv_cDZeratulProphecyArtifactNumber;
    if (autoD969028B_val == 1) {
        UnitCreate(1, "ZeratulArtifactPickup1", 0, lp_p, lv_artifactPoint, libNtve_gf_RandomAngle());
    }
    else if (autoD969028B_val == 2) {
        UnitCreate(1, "ZeratulArtifactPickup2", 0, lp_p, lv_artifactPoint, libNtve_gf_RandomAngle());
    }
    else if (autoD969028B_val == 3) {
        UnitCreate(1, "ZeratulArtifactPickup3", 0, lp_p, lv_artifactPoint, libNtve_gf_RandomAngle());
    }
    else {
        UnitCreate(1, "ZeratulArtifactPickupUnlimited", 0, lp_p, lv_artifactPoint, libNtve_gf_RandomAngle());
    }
    libCPCD_gv_cDZeratulProphecyArtifactUnit = UnitLastCreated();
    if ((UnitIsValid(libCPCD_gv_cDZeratulProphecyCamera) == true)) {
        UnitSetPosition(libCPCD_gv_cDZeratulProphecyCamera, UnitGetPosition(libCPCD_gv_cDZeratulProphecyArtifactUnit), false);
    }
    else {
        UnitCreate(1, "ProphecyCamera", 0, lp_p, UnitGetPosition(libCPCD_gv_cDZeratulProphecyArtifactUnit), 270.0);
        libCPCD_gv_cDZeratulProphecyCamera = UnitLastCreated();
        libNtve_gf_ShowHideUnit(libCPCD_gv_cDZeratulProphecyCamera, false);
        CameraSetChannel(libCPCD_gv_cDZeratulPlayer, libCPCD_gv_cDZeratulProphecyCamera, "Camera_Basic", 1, 1.0);
    }
}

void libCPCD_gf_CM_ZeratulProphecyArtifactBadRegion_Set () {
    // Automatic Variable Declarations
    playergroup autoFFA8AD34_g;
    int autoFFA8AD34_var;

    // Implementation
    libCPCD_gv_cDZeratulProphecyArtifactBadRegion = null;
    autoFFA8AD34_g = libCPGL_gf_HumanPlayers();
    autoFFA8AD34_var = -1;
    while (true) {
        autoFFA8AD34_var = PlayerGroupNextPlayer(autoFFA8AD34_g, autoFFA8AD34_var);
        if (autoFFA8AD34_var < 0) { break; }
        RegionAddRegion(libCPCD_gv_cDZeratulProphecyArtifactBadRegion, RegionCircle(PlayerStartLocation(autoFFA8AD34_var), 20.0));
    }
}

int libCPCD_gf_CDZeratulProphecyGetArtifactDifficultyIndex (int lp_artifactNumber, string lp_artifactData) {
    // Variable Declarations
    int lv_artifactdifficultyindex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return 1;
}

point libCPCD_gf_CDZeratulProphecyArtifactPlacementPointOld (fixed lp_maxDistance) {
    // Variable Declarations
    fixed lv_startLocationBuffer;
    fixed lv_nearbyUnitHealth;
    fixed lv_nearbyUnitHealthLimit;
    fixed lv_distanceBetweenPoints;
    fixed lv_angleDelta;
    fixed lv_angleIter;
    point lv_pointIter;
    fixed lv_radiusIter;
    int lv_validPointsCount;
    point lv_pickedPoint;
    unit lv_dEBUG_lastPicked;

    // Automatic Variable Declarations
    fixed auto79088D2C_ae;
    fixed auto79088D2C_ai;
    const fixed auto076EAB91_ae = 360.0;
    fixed auto076EAB91_ai;
    unitgroup auto0393AF81_g;
    int auto0393AF81_u;
    unit auto0393AF81_var;

    // Variable Initialization
    lv_startLocationBuffer = 15.0;
    lv_nearbyUnitHealthLimit = 1000.0;
    lv_distanceBetweenPoints = 8.0;

    // Implementation
    auto79088D2C_ae = lv_startLocationBuffer;
    auto79088D2C_ai = (0.0 - lv_distanceBetweenPoints);
    lv_radiusIter = lp_maxDistance;
    for ( ; ( (auto79088D2C_ai >= 0 && lv_radiusIter <= auto79088D2C_ae) || (auto79088D2C_ai < 0 && lv_radiusIter >= auto79088D2C_ae) ) ; lv_radiusIter += auto79088D2C_ai ) {
        lv_angleDelta = (ASin(((lv_distanceBetweenPoints / 2.0) / lv_radiusIter)) * 2.0);
        auto076EAB91_ai = lv_angleDelta;
        lv_angleIter = RandomFixed(0.0, lv_angleDelta);
        for ( ; ( (auto076EAB91_ai >= 0 && lv_angleIter <= auto076EAB91_ae) || (auto076EAB91_ai < 0 && lv_angleIter >= auto076EAB91_ae) ) ; lv_angleIter += auto076EAB91_ai ) {
            lv_pointIter = PointWithOffsetPolar(PlayerStartLocation(libCPCD_gv_cDZeratulPlayer), lv_radiusIter, lv_angleIter);
            if ((IntToFixed(lv_validPointsCount) < (lp_maxDistance * 0.33)) && (PointPathingPassable(lv_pointIter) == true) && (PointPathingCost(PlayerStartLocation(libCPCD_gv_cDZeratulPlayer), lv_pointIter) <= FixedToInt(lp_maxDistance)) && (DistanceBetweenPoints(PlayerStartLocation(PlayerGroupPlayer(libCOOC_gf_CommanderPlayers(), 1)), lv_pointIter) >= lv_startLocationBuffer) && (DistanceBetweenPoints(PlayerStartLocation(PlayerGroupPlayer(libCOOC_gf_CommanderPlayers(), 2)), lv_pointIter) >= lv_startLocationBuffer) && ((UnitIsAlive(libCPGL_gv_commander[libCPCD_gv_cDZeratulPlayer].lv_heroUnit) == false) || (DistanceBetweenPoints(UnitGetPosition(libCPGL_gv_commander[libCPCD_gv_cDZeratulPlayer].lv_heroUnit), lv_pointIter) > libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "ProphecyArtifactRevealSearch", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny)))) {
                lv_nearbyUnitHealth = 0;
                auto0393AF81_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCPCD_gv_cDZeratulPlayer, c_unitAllianceEnemy, RegionCircle(lv_pointIter, 10.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto0393AF81_u = UnitGroupCount(auto0393AF81_g, c_unitCountAll);
                for (;; auto0393AF81_u -= 1) {
                    auto0393AF81_var = UnitGroupUnitFromEnd(auto0393AF81_g, auto0393AF81_u);
                    if (auto0393AF81_var == null) { break; }
                    lv_nearbyUnitHealth += UnitGetPropertyFixed(auto0393AF81_var, c_unitPropLife, c_unitPropCurrent);
                    lv_nearbyUnitHealth += UnitGetPropertyFixed(auto0393AF81_var, c_unitPropShields, c_unitPropCurrent);
                }
                if ((lv_nearbyUnitHealth <= lv_nearbyUnitHealthLimit)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShapeCube", 0, 0, lv_pointIter);
                    lv_validPointsCount += 1;
                    if ((RandomFixed(0.0, 1.0) <= (1.0 / lv_validPointsCount))) {
                        lv_pickedPoint = lv_pointIter;
                        if ((UnitIsValid(lv_dEBUG_lastPicked) == true)) {
                            ActorSend(libNtve_gf_MainActorofUnit(lv_dEBUG_lastPicked), "SetTintColor 255,255,255");
                        }

                        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetTintColor 255,0,0");
                        lv_dEBUG_lastPicked = UnitLastCreated();
                    }

                }

            }

        }
    }
    return lv_pickedPoint;
}

point libCPCD_gf_CDZeratulProphecyArtifactPlacementPointNew (int lp_artifactNumber) {
    // Variable Declarations
    string lv_artifactPlacementData;
    int lv_artifactIndex;
    point lv_artifactOrigin;
    fixed lv_minSearchRadius;
    fixed lv_maxSearchRadius;
    fixed lv_maxWalkingDistance;
    bool lv_checkPathing;
    point lv_pathingCheckPoint;
    fixed lv_nearbyUnitHealth;
    fixed lv_nearbyUnitHealthLimit;
    fixed lv_zeratulSearchRadius;
    bool lv_pointIsPassableAndNotNearZeratul;
    fixed lv_distanceBetweenPoints;
    fixed lv_angleDelta;
    fixed lv_angleIter;
    point lv_pointIter;
    fixed lv_radiusIter;
    int lv_validPointsCount;
    point lv_pickedPoint;
    unit lv_dEBUG_lastPicked;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_artifactPlacementData = libCPCD_gf_CDZeratulProphecyArtifactPlacementDataInstance();
    lv_artifactIndex = libCPCD_gf_CDZeratulProphecyGetArtifactDifficultyIndex(lp_artifactNumber, lv_artifactPlacementData);
    lv_artifactOrigin = libCPCD_gf_CDZeratulProphecyArtifactPlacementOrigin(lv_artifactPlacementData);
    lv_minSearchRadius = UserDataGetFixed("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "minSearchRadius", lv_artifactIndex);
    lv_maxSearchRadius = UserDataGetFixed("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "maxSearchRadius", lv_artifactIndex);
    lv_maxWalkingDistance = UserDataGetFixed("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "maxWalkingDistance", lv_artifactIndex);
    lv_checkPathing = (UserDataGetInt("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "checkPathing", lv_artifactIndex) != 0);
    lv_pathingCheckPoint = UnitTypePlacementFromPoint("ZeratulCoop", libCPCD_gv_cDZeratulPlayer, lv_artifactOrigin, 500.0);
    lv_nearbyUnitHealthLimit = UserDataGetFixed("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "maxNearbyHealth", lv_artifactIndex);
    lv_zeratulSearchRadius = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "ProphecyArtifactRevealSearch", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny);
    lv_distanceBetweenPoints = UserDataGetFixed("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "distanceBetweenPoints", 1);

    // Implementation
    libCPCD_gf_CM_ZeratulProphecyArtifactBadRegion_Set();
    if ((lv_validPointsCount == 0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_CPCD_91402C8D"), true);
        return UnitTypePlacementFromPoint("ZeratulArtifactPickup1", libCPCD_gv_cDZeratulPlayer, lv_artifactOrigin, 500.0);
    }

    return lv_pickedPoint;
}

point libCPCD_gf_CDZeratulProphecyArtifactGetPoint () {
    // Variable Declarations
    point lv_point;
    region lv_validMap;
    int lv_indexPlayer;
    unit lv_indexUnit;
    int lv_indexInteger;

    // Automatic Variable Declarations
    playergroup autoA6B813CF_g;
    unitgroup autoD98CD09B_g;
    int autoD98CD09B_u;
    const int auto7A6EE419_ae = 600000;
    const int auto7A6EE419_ai = 1;

    // Variable Initialization
    lv_validMap = RegionEntireMap();

    // Implementation
    autoA6B813CF_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoA6B813CF_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        RegionAddCircle(lv_validMap, false, PlayerStartLocation(lv_indexPlayer), 30.0);
    }
    RegionAddCircle(lv_validMap, false, UnitGetPosition(libCPGL_gv_commander[libCPCD_gv_cDZeratulPlayer].lv_heroUnit), 30.0);
    autoD98CD09B_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD98CD09B_u = UnitGroupCount(autoD98CD09B_g, c_unitCountAll);
    for (;; autoD98CD09B_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoD98CD09B_g, autoD98CD09B_u);
        if (lv_indexUnit == null) { break; }
        RegionAddCircle(lv_validMap, false, UnitGetPosition(lv_indexUnit), 30.0);
    }
    lv_point = RegionRandomPoint(lv_validMap);
    lv_indexInteger = 0;
    for ( ; ( (auto7A6EE419_ai >= 0 && lv_indexInteger <= auto7A6EE419_ae) || (auto7A6EE419_ai < 0 && lv_indexInteger >= auto7A6EE419_ae) ) ; lv_indexInteger += auto7A6EE419_ai ) {
        PointSet(lv_point, RegionRandomPoint(lv_validMap));
        if ((PointPathingPassable(lv_point) == true)) {
            break;
        }

    }
    return lv_point;
}

point libCPCD_gf_CDZeratulProphecyArtifactPlacementDebug (int lp_artifactNumber, color lp_color, color lp_pickedColor) {
    // Variable Declarations
    string lv_artifactPlacementData;
    int lv_artifactIndex;
    point lv_artifactOrigin;
    fixed lv_minSearchRadius;
    fixed lv_maxSearchRadius;
    fixed lv_maxWalkingDistance;
    bool lv_checkPathing;
    point lv_pathingCheckPoint;
    fixed lv_nearbyUnitHealth;
    fixed lv_nearbyUnitHealthLimit;
    fixed lv_zeratulSearchRadius;
    bool lv_pointIsPassableAndNotNearZeratul;
    fixed lv_distanceBetweenPoints;
    fixed lv_angleDelta;
    fixed lv_angleIter;
    point lv_pointIter;
    fixed lv_radiusIter;
    int lv_validPointsCount;
    point lv_pickedPoint;
    unit lv_dEBUG_lastPicked;
    string lv_tintactormessage;
    string lv_pickedtintactormessage;

    // Automatic Variable Declarations
    fixed auto18E59005_ae;
    fixed auto18E59005_ai;
    const fixed auto19B36602_ae = 360.0;
    fixed auto19B36602_ai;
    unitgroup autoC43AE984_g;
    int autoC43AE984_u;
    unit autoC43AE984_var;

    // Variable Initialization
    lv_artifactPlacementData = libCPCD_gf_CDZeratulProphecyArtifactPlacementDataInstance();
    lv_artifactIndex = libCPCD_gf_CDZeratulProphecyGetArtifactDifficultyIndex(lp_artifactNumber, lv_artifactPlacementData);
    lv_artifactOrigin = libCPCD_gf_CDZeratulProphecyArtifactPlacementOrigin(lv_artifactPlacementData);
    lv_minSearchRadius = UserDataGetFixed("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "minSearchRadius", lv_artifactIndex);
    lv_maxSearchRadius = UserDataGetFixed("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "maxSearchRadius", lv_artifactIndex);
    lv_maxWalkingDistance = UserDataGetFixed("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "maxWalkingDistance", lv_artifactIndex);
    lv_checkPathing = (UserDataGetInt("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "checkPathing", lv_artifactIndex) != 0);
    lv_pathingCheckPoint = UnitTypePlacementFromPoint("ZeratulCoop", libCPCD_gv_cDZeratulPlayer, lv_artifactOrigin, 500.0);
    lv_nearbyUnitHealthLimit = UserDataGetFixed("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "maxNearbyHealth", lv_artifactIndex);
    lv_zeratulSearchRadius = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "ProphecyArtifactRevealSearch", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny);
    lv_distanceBetweenPoints = UserDataGetFixed("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "distanceBetweenPoints", 1);
    lv_tintactormessage = (("SetTintColor " + libNtve_gf_ConvertColorToString(lp_color)));
    lv_pickedtintactormessage = (("SetTintColor " + libNtve_gf_ConvertColorToString(lp_pickedColor)));

    // Implementation
    libCPCD_gf_CM_ZeratulProphecyArtifactBadRegion_Set();
    auto18E59005_ae = lv_minSearchRadius;
    auto18E59005_ai = (0.0 - lv_distanceBetweenPoints);
    lv_radiusIter = lv_maxSearchRadius;
    for ( ; ( (auto18E59005_ai >= 0 && lv_radiusIter <= auto18E59005_ae) || (auto18E59005_ai < 0 && lv_radiusIter >= auto18E59005_ae) ) ; lv_radiusIter += auto18E59005_ai ) {
        lv_angleDelta = (ASin(((lv_distanceBetweenPoints / 2.0) / lv_radiusIter)) * 2.0);
        auto19B36602_ai = lv_angleDelta;
        lv_angleIter = RandomFixed(0.0, lv_angleDelta);
        for ( ; ( (auto19B36602_ai >= 0 && lv_angleIter <= auto19B36602_ae) || (auto19B36602_ai < 0 && lv_angleIter >= auto19B36602_ae) ) ; lv_angleIter += auto19B36602_ai ) {
            lv_pointIter = PointWithOffsetPolar(lv_artifactOrigin, lv_radiusIter, lv_angleIter);
            lv_pointIsPassableAndNotNearZeratul = ((PointPathingPassable(lv_pointIter) == true) && (!(UnitIsAlive(libCPGL_gv_commander[libCPCD_gv_cDZeratulPlayer].lv_heroUnit)) || (DistanceBetweenPoints(UnitGetPosition(libCPGL_gv_commander[libCPCD_gv_cDZeratulPlayer].lv_heroUnit), lv_pointIter) > lv_zeratulSearchRadius)) && (RegionContainsPoint(libCPCD_gv_cDZeratulProphecyArtifactBadRegion, lv_pointIter) == false));
            if ((lv_pointIsPassableAndNotNearZeratul == true) && ((lv_checkPathing == false) || (PointPathingIsConnected(lv_pathingCheckPoint, lv_pointIter) == true)) && ((lv_maxWalkingDistance == 0.0) || (PointPathingCost(lv_pathingCheckPoint, lv_pointIter) <= FixedToInt(lv_maxWalkingDistance)))) {
                if ((lv_nearbyUnitHealthLimit > 0.0)) {
                    lv_nearbyUnitHealth = 0;
                    autoC43AE984_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCPCD_gv_cDZeratulPlayer, c_unitAllianceEnemy, RegionCircle(lv_pointIter, 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    autoC43AE984_u = UnitGroupCount(autoC43AE984_g, c_unitCountAll);
                    for (;; autoC43AE984_u -= 1) {
                        autoC43AE984_var = UnitGroupUnitFromEnd(autoC43AE984_g, autoC43AE984_u);
                        if (autoC43AE984_var == null) { break; }
                        if (((UnitFilterMatch(autoC43AE984_var, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure), 0)) == true) || (UnitGetType(autoC43AE984_var) == "PhotonCannon") || (UnitGetType(autoC43AE984_var) == "SpineCrawler") || (UnitGetType(autoC43AE984_var) == "Bunker"))) {
                            lv_nearbyUnitHealth += UnitGetPropertyFixed(autoC43AE984_var, c_unitPropLife, c_unitPropCurrent);
                            lv_nearbyUnitHealth += UnitGetPropertyFixed(autoC43AE984_var, c_unitPropShields, c_unitPropCurrent);
                        }

                    }
                }

                if (((lv_nearbyUnitHealthLimit <= 0.0) || (lv_nearbyUnitHealth <= lv_nearbyUnitHealthLimit))) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShapeCube", 0, 0, lv_pointIter);
                    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), lv_tintactormessage);
                    lv_validPointsCount += 1;
                    if ((RandomFixed(0.0, 1.0) <= (1.0 / lv_validPointsCount))) {
                        lv_pickedPoint = lv_pointIter;
                        if ((UnitIsValid(lv_dEBUG_lastPicked) == true)) {
                            ActorSend(libNtve_gf_MainActorofUnit(lv_dEBUG_lastPicked), lv_tintactormessage);
                        }

                        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), lv_pickedtintactormessage);
                        lv_dEBUG_lastPicked = UnitLastCreated();
                    }

                }

            }
        }
    }
    TextExpressionSetToken("Param/Expression/lib_CPCD_5FBDD960", "A", IntToText(lv_validPointsCount));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPCD_5FBDD960"), true);
    if ((lv_validPointsCount == 0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_CPCD_B8B2FB4D"), true);
        return UnitTypePlacementFromPoint("ZeratulArtifactPickup1", libCPCD_gv_cDZeratulPlayer, lv_artifactOrigin, 0.0);
    }

    return lv_pickedPoint;
}

string libCPCD_gf_CDZeratulProphecyArtifactPlacementDataInstance () {
    // Variable Declarations
    string lv_instance;

    // Automatic Variable Declarations
    string autoFA345E43_userType;
    int autoFA345E43_i;

    // Variable Initialization

    // Implementation
    autoFA345E43_userType = "CoopTechZeratulArtifactPlacement";
    autoFA345E43_i = 1;
    for ( ; autoFA345E43_i <= UserDataInstanceCount(autoFA345E43_userType) ; autoFA345E43_i += 1 ) {
        lv_instance = UserDataInstance(autoFA345E43_userType, autoFA345E43_i);
        if ((UserDataGetGameLink("CoopTechZeratulArtifactPlacement", lv_instance, "MapLink", 1) == libCOOC_gf_CC_CurrentMap())) {
            return lv_instance;
        }

    }
    return "GlobalDefault";
}

point libCPCD_gf_CDZeratulProphecyArtifactPlacementOrigin (string lp_artifactPlacementData) {
    // Automatic Variable Declarations
    // Implementation
    if ((UserDataGetInt("CoopTechZeratulArtifactPlacement", lp_artifactPlacementData, "useZeratulArtifactOrigin", 1) != 0)) {
        return PointFromName("ZeratulArtifactOrigin");
    }

    return MidPoint(PlayerStartLocation(PlayerGroupPlayer(libCOOC_gf_CommanderPlayers(), 1)), PlayerStartLocation(PlayerGroupPlayer(libCOOC_gf_CommanderPlayers(), 2)));
}

int libCPCD_gf_CM_Zeratul_GetArtifactLimit (int lp_zeratulPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return RoundI(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "ZeratulArtifactLimitDummy", "Amount", lp_zeratulPlayer));
}

trigger auto_libCPCD_gf_CDZeratulArtifactHintTract_Trigger = null;
int auto_libCPCD_gf_CDZeratulArtifactHintTract_lp_player;

void libCPCD_gf_CDZeratulArtifactHintTract (int lp_player) {
    auto_libCPCD_gf_CDZeratulArtifactHintTract_lp_player = lp_player;

    if (auto_libCPCD_gf_CDZeratulArtifactHintTract_Trigger == null) {
        auto_libCPCD_gf_CDZeratulArtifactHintTract_Trigger = TriggerCreate("auto_libCPCD_gf_CDZeratulArtifactHintTract_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CDZeratulArtifactHintTract_Trigger, false, false);
}

bool auto_libCPCD_gf_CDZeratulArtifactHintTract_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCPCD_gf_CDZeratulArtifactHintTract_lp_player;

    // Automatic Variable Declarations
    // Implementation
    while (true) {
        DialogControlSetAnimationState(libCPCD_gv_globalPowerPanel[lp_player], PlayerGroupAll(), "HintLevel", IntToString(libCOMI_gf_CM_Zeratul_ProphecyHintLevel(libCPCD_gv_cDZeratulProphecyArtifactNumber)));
        Wait(1.0, c_timeGame);
    }
    return true;
}

void libCPCD_gf_StetmannPowerTowerEvent (trigger t, string lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, (lp_event));
}

int libCPCD_gf_EventStetmannPowerTowerTechLevel (string lp_techLevelParameter) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(EventGenericName(), (lp_techLevelParameter)));
}

int libCPCD_gf_EventStetmannPowerTowerPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(EventGenericName(), ("StetmannPowerTowerPlayer")));
}

void libCPCD_gf_CM_Stetmann_ThrowPowerTowerEvent (int lp_player) {
    // Variable Declarations
    int lv_laircount;
    int lv_hivecount;
    int lv_oldchargelevel;
    string lv_eventname;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_laircount = UnitGroupCount(UnitGroup("LairStetmann", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_hivecount = UnitGroupCount(UnitGroup("HiveStetmann", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_oldchargelevel = libCPCD_gv_cDStetmannStetelliteChargeLevel[0];
    lv_eventname = "";

    // Implementation
    if ((lv_hivecount > 0)) {
        libCPCD_gv_cDStetmannStetelliteChargeLevel[lp_player] = 2;
    }
    else if ((lv_laircount > 0)) {
        libCPCD_gv_cDStetmannStetelliteChargeLevel[lp_player] = 1;
    }
    else if (true) {
        libCPCD_gv_cDStetmannStetelliteChargeLevel[lp_player] = 0;
    }
    if ((libCPCD_gv_cDStetmannStetelliteChargeLevel[lp_player] != lv_oldchargelevel)) {
        lv_eventname = ("Event_PowerTowerLevelChanged");
        DataTableSetInt(false, TriggerEventParamName(lv_eventname, ("StetmannPowerTowerTechLevelOld")), lv_oldchargelevel);
        DataTableSetInt(false, TriggerEventParamName(lv_eventname, ("StetmannPowerTowerTechLevelNew")), libCPCD_gv_cDStetmannStetelliteChargeLevel[lp_player]);
        DataTableSetInt(false, TriggerEventParamName(lv_eventname, ("StetmannPowerTowerPlayer")), lp_player);
        TriggerSendEvent(lv_eventname);
        if ((libCPCD_gv_cDStetmannStetelliteChargeLevel[lp_player] > lv_oldchargelevel)) {
            lv_eventname = ("Event_PowerTowerLevelUp");
        }
        else {
            lv_eventname = ("Event_PowerTowerLevelDown");
        }
        DataTableSetInt(false, TriggerEventParamName(lv_eventname, ("StetmannPowerTowerTechLevelOld")), lv_oldchargelevel);
        DataTableSetInt(false, TriggerEventParamName(lv_eventname, ("StetmannPowerTowerTechLevelNew")), libCPCD_gv_cDStetmannStetelliteChargeLevel[lp_player]);
        DataTableSetInt(false, TriggerEventParamName(lv_eventname, ("StetmannPowerTowerPlayer")), lp_player);
        TriggerSendEvent(lv_eventname);
    }

}

void libCPCD_gf_CM_Stetmann_AdjustStetelliteChargesUsed (int lp_player) {
    // Variable Declarations
    int lv_laircount;
    int lv_hivecount;
    int lv_oldchargelevel;
    int lv_oldmaxcharges;
    int lv_newmaxcharges;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_laircount = UnitGroupCount(UnitGroup("LairStetmann", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_hivecount = UnitGroupCount(UnitGroup("HiveStetmann", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_oldchargelevel = libCPCD_gv_cDStetmannStetelliteChargeLevel[lp_player];

    // Implementation
    if ((lv_hivecount > 0)) {
        libCPCD_gv_cDStetmannStetelliteChargeLevel[lp_player] = 2;
    }
    else if ((lv_laircount > 0)) {
        libCPCD_gv_cDStetmannStetelliteChargeLevel[lp_player] = 1;
    }
    else if (true) {
        libCPCD_gv_cDStetmannStetelliteChargeLevel[lp_player] = 0;
    }
    if ((libCPCD_gv_cDStetmannStetelliteChargeLevel[lp_player] != lv_oldchargelevel)) {
        lv_oldmaxcharges = RoundI(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "DeployPowerTowerStetmann", "InfoArray[" + IntToString(lv_oldchargelevel) + "].Charge.CountMax", lp_player));
        lv_newmaxcharges = RoundI(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "DeployPowerTowerStetmann", "InfoArray[" + IntToString(lv_oldchargelevel) + "].Charge.CountMax", lp_player));
        PlayerAddChargeUsed(lp_player, "Abil/DeployPowerTowerStetmann", (lv_newmaxcharges - lv_oldmaxcharges));
        PlayerAddChargeRegenRemaining(lp_player, "Abil/DeployPowerTowerStetmann", 0.0);
    }

}

void libCPCD_gf_CU_SetStetelliteChargeMax (int lp_player) {
    // Variable Declarations
    int lv_abilindex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCPCD_gv_cDStetmannStetelliteMaxCharges[lp_player] = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "DeployPowerTowerStetmann", "InfoArray[" + IntToString(0) + "].Charge.CountMax", lp_player);
}

void libCPCD_gf_CU_DrawStetelliteChargePips (int lp_player, int lp_currentCharges, int lp_maxCharges) {
    // Variable Declarations
    int lv_nodeindex;
    const int lv_mAX_NODES = 7;
    int lv_nodedialogitem;
    int lv_containerdialogitem;
    string lv_state_ChargeState;
    string lv_state_ChargeState_Inactive;
    string lv_state_ChargeState_Used;
    string lv_state_ChargeState_Available;

    // Automatic Variable Declarations
    const int auto4F969D2D_ae = lv_mAX_NODES;
    const int auto4F969D2D_ai = 1;

    // Variable Initialization
    lv_nodedialogitem = c_invalidDialogControlId;
    lv_containerdialogitem = c_invalidDialogControlId;
    lv_state_ChargeState = "ChargeState";
    lv_state_ChargeState_Inactive = "Inactive";
    lv_state_ChargeState_Used = "Used";
    lv_state_ChargeState_Available = "Available";

    // Implementation
    DialogControlHookup(libCPCD_gv_globalPowerPanel[lp_player], c_triggerControlTypePanel, "StetelliteChargeContainer");
    lv_containerdialogitem = DialogControlLastCreated();
    lv_nodeindex = 1;
    for ( ; ( (auto4F969D2D_ai >= 0 && lv_nodeindex <= auto4F969D2D_ae) || (auto4F969D2D_ai < 0 && lv_nodeindex >= auto4F969D2D_ae) ) ; lv_nodeindex += auto4F969D2D_ai ) {
        DialogControlHookup(lv_containerdialogitem, c_triggerControlTypePanel, "StetelliteChargePip" + IntToString(lv_nodeindex));
        lv_nodedialogitem = DialogControlLastCreated();
        if ((lv_nodeindex > lp_maxCharges)) {
            DialogControlSetAnimationState(lv_nodedialogitem, PlayerGroupSingle(lp_player), lv_state_ChargeState, lv_state_ChargeState_Inactive);
        }
        else if ((lv_nodeindex > lp_currentCharges)) {
            DialogControlSetAnimationState(lv_nodedialogitem, PlayerGroupSingle(lp_player), lv_state_ChargeState, lv_state_ChargeState_Used);
        }
        else if (true) {
            DialogControlSetAnimationState(lv_nodedialogitem, PlayerGroupSingle(lp_player), lv_state_ChargeState, lv_state_ChargeState_Available);
        }
    }
    DialogControlSetAnimationState(libCPCD_gv_globalPowerPanel[lp_player], PlayerGroupSingle(lp_player), "ChargesPossible", IntToString(lp_maxCharges));
    DialogControlSetAnimationState(libCPCD_gv_globalPowerPanel[lp_player], PlayerGroupSingle(lp_player), "ChargesAvailable", IntToString(lp_currentCharges));
    if ((lp_currentCharges < lp_maxCharges)) {
        DialogControlSetAnimationState(libCPCD_gv_globalPowerPanel[lp_player], PlayerGroupSingle(lp_player), "ReminderStetellites", "NoReminder");
    }

}

void libCPCD_gf_CM_Mengsk_ForceMorphTrooper (unit lp_trooper, unit lp_pickup, string lp_morphEffect, string lp_morphBehavior, string lp_actorSignal) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreateEffectUnit(lp_trooper, lp_morphEffect, lp_trooper);
    UnitBehaviorAdd(lp_trooper, lp_morphBehavior, lp_trooper, 1);
    UnitKill(lp_pickup);
    UnitGroupRemove(libCPCD_gv_cDMengskWeaponPickerUppers[UnitGetOwner(lp_trooper)], lp_trooper);
    libNtve_gf_SendActorMessageToUnit(lp_trooper, "Signal ClearWeapon");
    libNtve_gf_SendActorMessageToUnit(lp_trooper, (("Signal " + lp_actorSignal)));
    AchievementTermQuantityAdd(UnitGetOwner(lp_trooper), "CommanderMengskWeaponPickup", 1);
}

void libCPCD_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateTrooper (int lp_mengskPlayer) {
    // Variable Declarations
    fixed lv_imperialsupportpertrooper;
    fixed lv_energyregenperpropagandaunit;
    fixed lv_roundeddisplay;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_imperialsupportpertrooper = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "PropagandaMengskTopbarRegenDummy", "Amount", lp_mengskPlayer);
    lv_energyregenperpropagandaunit = (lv_imperialsupportpertrooper * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MasteryMengskTrooperImperialMandateRegenerationFactorDummy", "Amount", lp_mengskPlayer));

    // Implementation
    if ((libCPGL_gv_commander[lp_mengskPlayer].lv_commanderLevel >= 5)) {
        libCPCD_gv_cDMengskEnergyRegenTrooper[lp_mengskPlayer] = (lv_energyregenperpropagandaunit * UnitGroupCount(libCPCD_gv_cDMengskPropagandaUnits[lp_mengskPlayer], c_unitCountAlive));
        lv_roundeddisplay = Round(libCPCD_gv_cDMengskEnergyRegenTrooper[lp_mengskPlayer]);
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, "MengskTopBarEnergyRegenTrooperDummy", "Amount", lp_mengskPlayer, lv_roundeddisplay);
    }
    else {
        lv_roundeddisplay = 0.0;
    }
    DialogControlHookup(libCPCD_gv_cU_GPMengskEnergyRegenTrooperContainer[lp_mengskPlayer], c_triggerControlTypeLabel, "Value");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), FixedToText(lv_roundeddisplay, 0), PlayerGroupAll());
}

void libCPCD_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateRoyalGuard (int lp_mengskPlayer) {
    // Variable Declarations
    fixed lv_imperialsupportperroyalguardsupplylevel;
    fixed lv_energyregenperroyalguardsupplylevel;
    fixed lv_roundeddisplay;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_imperialsupportperroyalguardsupplylevel = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "RoyalGuardMengskTopbarRegenDummy", "Amount", lp_mengskPlayer);
    lv_energyregenperroyalguardsupplylevel = (lv_imperialsupportperroyalguardsupplylevel * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MasteryMengskRoyalGuardImperialMandateRegenerationFactorDummy", "Amount", lp_mengskPlayer));

    // Implementation
    if ((libCPGL_gv_commander[lp_mengskPlayer].lv_commanderLevel >= 5)) {
        libCPCD_gv_cDMengskEnergyRegenRoyalGuard[0] = (lv_energyregenperroyalguardsupplylevel * libCPCD_gf_CM_Mengsk_SupplyLevel(libCPCD_gv_cDMengskVeterans[0]));
        lv_roundeddisplay = Round(libCPCD_gv_cDMengskEnergyRegenRoyalGuard[0]);
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, "MengskTopBarEnergyRegenRoyalGuardDummy", "Amount", lp_mengskPlayer, lv_roundeddisplay);
    }
    else {
        lv_roundeddisplay = 0.0;
    }
    DialogControlHookup(libCPCD_gv_cU_GPMengskEnergyRegenRoyalGuardContainer[lp_mengskPlayer], c_triggerControlTypeLabel, "Value");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), FixedToText(lv_roundeddisplay, 0), PlayerGroupAll());
}

trigger auto_libCPCD_gf_CM_Mengsk_GlobalCasterEnergyRegen_Trigger = null;
unit auto_libCPCD_gf_CM_Mengsk_GlobalCasterEnergyRegen_lp_mengskGlobalCaster;

void libCPCD_gf_CM_Mengsk_GlobalCasterEnergyRegen (unit lp_mengskGlobalCaster) {
    auto_libCPCD_gf_CM_Mengsk_GlobalCasterEnergyRegen_lp_mengskGlobalCaster = lp_mengskGlobalCaster;

    if (auto_libCPCD_gf_CM_Mengsk_GlobalCasterEnergyRegen_Trigger == null) {
        auto_libCPCD_gf_CM_Mengsk_GlobalCasterEnergyRegen_Trigger = TriggerCreate("auto_libCPCD_gf_CM_Mengsk_GlobalCasterEnergyRegen_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CM_Mengsk_GlobalCasterEnergyRegen_Trigger, false, false);
}

bool auto_libCPCD_gf_CM_Mengsk_GlobalCasterEnergyRegen_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mengskGlobalCaster = auto_libCPCD_gf_CM_Mengsk_GlobalCasterEnergyRegen_lp_mengskGlobalCaster;

    // Variable Declarations
    unit lv_veteran;
    fixed lv_baseenergyregen;
    fixed lv_bonusenergyregenfactor;
    fixed lv_totalenergyregen;
    fixed lv_globalcasterenergy;
    int lv_lastseenmoraleindex;
    int lv_moraleindex;
    bool lv_moralecapped;
    fixed lv_moralecappedremindercooldown;
    timer lv_moralecappedreminder;
    int lv_energyperzergcalldownlevel;
    int lv_mengskplayer;

    // Automatic Variable Declarations
    int autoEAC3ADFA_val;

    // Variable Initialization
    lv_baseenergyregen = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, "CoopCasterMengsk", "EnergyRegenRate", c_playerAny);
    lv_bonusenergyregenfactor = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "TopbarMengskBonusRegenFactorDummy", "Amount", UnitGetOwner(lp_mengskGlobalCaster));
    lv_moralecappedremindercooldown = 120.0;
    lv_moralecappedreminder = TimerCreate();
    lv_energyperzergcalldownlevel = 25;
    lv_mengskplayer = UnitGetOwner(lp_mengskGlobalCaster);

    // Implementation
    while (true) {
        lv_totalenergyregen = MaxF((lv_baseenergyregen + (libCPCD_gv_cDMengskEnergyRegenRoyalGuard[lv_mengskplayer] + libCPCD_gv_cDMengskEnergyRegenTrooper[lv_mengskplayer])), 0.01);
        Wait((lv_bonusenergyregenfactor / lv_totalenergyregen), c_timeGame);
        lv_globalcasterenergy = RoundI((UnitGetPropertyFixed(lp_mengskGlobalCaster, c_unitPropEnergy, c_unitPropCurrent) + 1));
        UnitSetPropertyFixed(lp_mengskGlobalCaster, c_unitPropEnergy, lv_globalcasterenergy);
        libCPCD_gf_CM_Mengsk_EnergyChanged(lv_mengskplayer);
        lv_moraleindex = ((FixedToInt(lv_globalcasterenergy) / 34) + 1);
        if ((lv_lastseenmoraleindex != lv_moraleindex)) {
            autoEAC3ADFA_val = lv_moraleindex;
            if (autoEAC3ADFA_val == 1) {
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Attack", "TrooperMengsk_Attack_MoraleLow");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_What", "TrooperMengsk_What_MoraleLow");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Yes", "TrooperMengsk_Yes_MoraleLow");
            }
            else if (autoEAC3ADFA_val == 2) {
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Attack", "TrooperMengsk_Attack");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_What", "TrooperMengsk_What");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Yes", "TrooperMengsk_Yes");
            }
            else if (autoEAC3ADFA_val == 3) {
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Attack", "TrooperMengsk_Attack_MoraleHigh");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_What", "TrooperMengsk_What_MoraleHigh");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Yes", "TrooperMengsk_Yes_MoraleHigh");
            }
            else {
            }
        }

        lv_lastseenmoraleindex = lv_moraleindex;
        if ((lv_globalcasterenergy >= 100.0)) {
            if ((lv_moralecapped == false) && (TimerGetRemaining(lv_moralecappedreminder) <= 0.0)) {
                libCPCD_gf_CTCommanderVOSend(lv_mengskplayer, SoundLink("MengskCommander_PublicPerceptionCapped", -1), PlayerGroupSingle(lv_mengskplayer));
                TimerStart(lv_moralecappedreminder, lv_moralecappedremindercooldown, false, c_timeReal);
            }

            lv_moralecapped = true;
        }
        else {
            lv_moralecapped = false;
        }
    }
    return true;
}

void libCPCD_gf_CM_Mengsk_EnergyChanged (int lp_mengskPlayer) {
    // Variable Declarations
    int lv_energyperzergcalldownlevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_energyperzergcalldownlevel = 25;

    // Implementation
    libNtve_gf_SetDialogItemMaximumValue(libCPCD_gv_globalPowerEnergyBar[lp_mengskPlayer], UnitGetPropertyFixed(libCPGL_gv_commander[lp_mengskPlayer].lv_globalCasterUnit, c_unitPropEnergyMax, c_unitPropCurrent), PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(libCPCD_gv_globalPowerEnergyBar[lp_mengskPlayer], UnitGetPropertyFixed(libCPGL_gv_commander[lp_mengskPlayer].lv_globalCasterUnit, c_unitPropEnergy, c_unitPropCurrent), PlayerGroupAll());
    libNtve_gf_SetUpgradeLevelForPlayer(lp_mengskPlayer, "ZergMengskCalldownLevel", (FixedToInt(UnitGetPropertyFixed(libCPGL_gv_commander[lp_mengskPlayer].lv_globalCasterUnit, c_unitPropEnergy, c_unitPropCurrent)) / lv_energyperzergcalldownlevel));
}

fixed libCPCD_gf_CM_Mengsk_SupplyLevel (unitgroup lp_unitGroup) {
    // Variable Declarations
    unit lv_unititer;
    fixed lv_totalproperty;

    // Automatic Variable Declarations
    unitgroup autoA82FAEBE_g;
    int autoA82FAEBE_u;

    // Variable Initialization

    // Implementation
    autoA82FAEBE_g = lp_unitGroup;
    autoA82FAEBE_u = UnitGroupCount(autoA82FAEBE_g, c_unitCountAll);
    for (;; autoA82FAEBE_u -= 1) {
        lv_unititer = UnitGroupUnitFromEnd(autoA82FAEBE_g, autoA82FAEBE_u);
        if (lv_unititer == null) { break; }
        if ((UnitIsAlive(lv_unititer) == true)) {
            lv_totalproperty += (UnitGetPropertyFixed(lv_unititer, c_unitPropSuppliesUsed, c_unitPropCurrent) *  (1+UnitXPGetCurrentLevel(lv_unititer, null)));
        }

    }
    return lv_totalproperty;
}

void libCPCD_gf_CM_Mengsk_CheckRoyalGuardSupply () {
    // Variable Declarations
    unit lv_veteran;
    fixed lv_maxedsupply;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto1992ED00_g;
    unitgroup auto880B5B6B_g;
    int auto880B5B6B_u;

    // Variable Initialization

    // Implementation
    auto1992ED00_g = libCPGL_gf_AllCommandersinPlayerGroup("Mengsk", libCPGL_gf_HumanPlayers());
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto1992ED00_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if (((libCPCD_gv_cM_Mengsk_CheckRoyalGuardSupply[lv_indexPlayer] == false) || ((PlayerDifficulty(lv_indexPlayer) >= 3) == false) || (libCPGL_gv_commander[lv_indexPlayer].lv_commanderLevel < 15))) {
            return ;
        }

        auto880B5B6B_g = libCPCD_gv_cDMengskVeterans[lv_indexPlayer];
        auto880B5B6B_u = UnitGroupCount(auto880B5B6B_g, c_unitCountAll);
        for (;; auto880B5B6B_u -= 1) {
            lv_veteran = UnitGroupUnitFromEnd(auto880B5B6B_g, auto880B5B6B_u);
            if (lv_veteran == null) { break; }
            if ((UnitXPGetCurrentLevel(lv_veteran, null) >= UnitXPGetNumLevels(lv_veteran, null))) {
                lv_maxedsupply += UnitGetPropertyFixed(lv_veteran, c_unitPropSuppliesUsed, c_unitPropNormal);
            }

        }
        if ((lv_maxedsupply >= 50.0)) {
            AchievementAward(lv_indexPlayer, "CommanderMengskRoyalGuardSupply");
            libCPCD_gv_cM_Mengsk_CheckRoyalGuardSupply[lv_indexPlayer] = false;
        }

    }
}

void libCPCD_gf_ResourcePickupAlly (int lp_player, int lp_minerals, int lp_vespene) {
    // Automatic Variable Declarations
    // Implementation
    PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperAdd, lp_minerals);
    PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperAdd, lp_vespene);
    SoundPlayForPlayer(SoundLink("UI_ResourcePickup", -1), lp_player, PlayerGroupSingle(lp_player), 100.0, 0.0);
}

void libCPCD_gf_ApplyGoldenSkin (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ZealotGolden", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "WarpPrismGolden", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "VoidRayGolden", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "TempestGolden", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "StalkerGolden", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SentryGolden", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ProbeGolden", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "PhoenixGolden", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "OracleGolden", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ObserverGolden", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "MothershipGolden", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ImmortalGolden", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "HighTemplarGolden", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "DisruptorGolden", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "DarkTemplarGolden", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ColossusGolden", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "CarrierGolden", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "AdeptGolden", true);
}

void libCPCD_gf_ApplyWebbySkin (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ZerglingWebby", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ViperWebby", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "UltraliskWebby", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SwarmHostWebby", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "RoachWebby", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "RavagerWebby", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "QueenWebby", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "OverSeerWebby", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "OverlordWebby", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "MutaliskWebby", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "LurkerWebby", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "InfestorWebby", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "HydraliskWebby", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "DroneWebby", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "CorruptorWebby", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "BroodLordWebby", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "BanelingWebby", true);
}

void libCPCD_gf_ApplyTaldarimSkin (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ZealotTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "WarpPrismTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "VoidRayTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "TempestTaldarim", true);
    if ((libCPGL_gv_commander[lp_player].lv_commander != "Alarak")) {
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "StalkerTaldarim", true);
    }

    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SentryTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ProbeTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "PhoenixTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "OracleTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ObserverTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "MothershipTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ImmortalTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "HighTemplarTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "DisruptorTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "DarkTemplarTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ColossusTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "CarrierTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "AdeptTaldarim", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "AssimilatorForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "NexusForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "FleetBeaconForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "TemplarArchiveForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "DarkShrineForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "GatewayForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "PhotonCannonForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "StargateForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "TwilightCouncilForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "RoboticsBayForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "RoboticsFacilityForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "CyberneticsCoreForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ShieldBatteryForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ForgeForged", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "PylonForged", true);
}

unit libCPCD_gf_CM_NexusBestWorkerRallyMineral (unit lp_nexus) {
    // Variable Declarations
    unit lv_indexUnitOuter;
    unit lv_indexUnitInner;
    fixed lv_bestDistance;
    fixed lv_curDistance;
    region lv_searchArea;
    unitgroup lv_mineralGroup;
    unit lv_bestMineral;

    // Automatic Variable Declarations
    unitgroup auto7D2878BC_g;
    int auto7D2878BC_u;
    unitgroup auto19123EA1_g;
    int auto19123EA1_u;

    // Variable Initialization
    lv_mineralGroup = UnitGroupEmpty();

    // Implementation
    lv_searchArea = RegionCircle(UnitGetPosition(lp_nexus), 10.0);
    lv_mineralGroup = UnitGroup(null, c_playerAny, lv_searchArea, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto7D2878BC_g = lv_mineralGroup;
    auto7D2878BC_u = UnitGroupCount(auto7D2878BC_g, c_unitCountAll);
    for (;; auto7D2878BC_u -= 1) {
        lv_indexUnitOuter = UnitGroupUnitFromEnd(auto7D2878BC_g, auto7D2878BC_u);
        if (lv_indexUnitOuter == null) { break; }
        lv_curDistance = 0.0;
        auto19123EA1_g = lv_mineralGroup;
        auto19123EA1_u = UnitGroupCount(auto19123EA1_g, c_unitCountAll);
        for (;; auto19123EA1_u -= 1) {
            lv_indexUnitInner = UnitGroupUnitFromEnd(auto19123EA1_g, auto19123EA1_u);
            if (lv_indexUnitInner == null) { break; }
            if ((lv_indexUnitOuter != lv_indexUnitInner)) {
                lv_curDistance += DistanceBetweenPoints(UnitGetPosition(lv_indexUnitOuter), UnitGetPosition(lv_indexUnitInner));
            }

        }
        if (((lv_bestDistance == 0.0) || (lv_curDistance < lv_bestDistance))) {
            lv_bestDistance = lv_curDistance;
            lv_bestMineral = lv_indexUnitOuter;
        }

    }
    return lv_bestMineral;
}

void libCPCD_gf_SetWorkerRallyPointforNexus (unit lp_nexus) {
    // Variable Declarations
    unit lv_bestMineral;
    point lv_rallyPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_bestMineral = libCPCD_gf_CM_NexusBestWorkerRallyMineral(lp_nexus);
    if ((lv_bestMineral != null)) {
        UnitIssueOrder(lp_nexus, OrderTargetingUnit(null, lv_bestMineral), c_orderQueueReplace);
    }

}

void libCPCD_gf_ZerglingRespawnSetPrimaryHatchery (unit lp_hatchery, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreateEffectUnit(lp_hatchery, "ZerglingRespawnPrimaryRemoveOthers", lp_hatchery);
    UnitBehaviorAdd(lp_hatchery, "ZerglingRespawnPrimary", lp_hatchery, 1);
    libCPCD_gv_cDTownHall[lp_player] = lp_hatchery;
}

unit libCPCD_gf_CDTownHall (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libCPCD_gf_TownHallSeach(lp_player);
    if (((UnitIsAlive(libCPCD_gv_cDTownHall[lp_player]) == false) || (UnitFilterMatch(libCPCD_gv_cDTownHall[lp_player], lp_player, UnitFilter((1 << c_targetFilterGround), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false))) {
        return null;
    }

    return libCPCD_gv_cDTownHall[lp_player];
}

void libCPCD_gf_TownHallSeach (int lp_player) {
    // Variable Declarations
    unitgroup lv_townHalls;
    unit lv_closestHall;
    unit lv_indexHall;

    // Automatic Variable Declarations
    unitgroup auto7D25A971_g;
    int auto7D25A971_u;

    // Variable Initialization
    lv_townHalls = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventReveal), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_closestHall = UnitGroupClosestToPoint(lv_townHalls, PlayerStartLocation(lp_player));

    // Implementation
    UnitGroupRemove(lv_townHalls, lv_closestHall);
    auto7D25A971_g = lv_townHalls;
    auto7D25A971_u = UnitGroupCount(auto7D25A971_g, c_unitCountAll);
    for (;; auto7D25A971_u -= 1) {
        lv_indexHall = UnitGroupUnitFromEnd(auto7D25A971_g, auto7D25A971_u);
        if (lv_indexHall == null) { break; }
        UnitBehaviorRemove(lv_indexHall, "ZerglingRespawnPrimary", 1);
    }
    libCPCD_gf_ZerglingRespawnSetPrimaryHatchery(lv_closestHall, lp_player);
    TriggerEnable(libCPCD_gt_CDTownHallRallyConstruction, true);
    TriggerEnable(libCPCD_gt_CDTownHallRallyLand, true);
}

void libCPCD_gf_TransmissionVoiceoverInit () {
    // Variable Declarations
    int lv_indexPlayer;
    string lv_indexCommander;

    // Automatic Variable Declarations
    playergroup auto2FF1E4C3_g;
    int auto355D0DE1_ai;
    int auto355D0DE1_ae;
    playergroup auto07390C0B_g;
    string auto9A2989B5_val;

    // Variable Initialization

    // Implementation
    libCPCD_gv_transmissionMissionAnnouncerGender = c_genderFemale;
    auto2FF1E4C3_g = libCPGL_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto2FF1E4C3_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCPGL_gf_CC_CommanderGender(libCPGL_gv_commander[lv_indexPlayer].lv_commanderInstance) == c_genderMale)) {
            libCPCD_gv_transmissionMissionAnnouncerGender = c_genderMale;
            break;
        }

    }
    ConversationDataSetListenerGender("acObj", libCPCD_gv_transmissionMissionAnnouncerGender);
    ConversationDataSetListenerGender("acResponses", libCPCD_gv_transmissionMissionAnnouncerGender);
    ConversationDataRegisterPortrait("char_TerranAdjutant", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ProtossExecutor", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_Izsha", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_SgtHammer", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACScientist", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_DominionOfficer", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ShakurasAlly", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_Hill", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_TDChampion", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_Vermillion", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_BelshirScientist", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_StetmannCommander", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_MengskCommander", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACJarbanMiner", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACMeinhoffMedic", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACAiurSiege", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACCybrosEscort", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACPartAndParcel", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_Stone", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    auto355D0DE1_ai = 1;
    auto355D0DE1_ae = UserDataInstanceCount("PlayerCommander")+1;
    while (auto355D0DE1_ai < auto355D0DE1_ae) {
        lv_indexCommander = UserDataInstance("PlayerCommander", auto355D0DE1_ai);
        auto355D0DE1_ai = auto355D0DE1_ai+1;
        ConversationDataRegisterPortrait(libCOOC_gf_CC_CommanderConversationLink(lv_indexCommander), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    }
    ConversationDataRegisterPortrait("char_Han", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    libCPCD_gf_CM_VOResourceInit();
    TriggerEnable(libCPCD_gt_CM_VOEnemySpotted, true);
    TriggerExecute(libCPCD_gt_CM_VOUnitsLostCheck, true, false);
    auto07390C0B_g = libCPGL_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto07390C0B_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        TriggerEnable(libCPCD_gt_CM_VOEnemyCloakedSpotted, true);
        auto9A2989B5_val = libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer);
        if (auto9A2989B5_val == "TerranRaynor") {
            TriggerEnable(libCPCD_gt_CTAbilityRaynorHyperion, true);
            TriggerEnable(libCPCD_gt_CTAbilityRaynorBansheesUsed, true);
            if ((libCOOC_gf_CC_PerkStateCheck("RaynorBansheeAirstrike", libCOOC_ge_CC_PerkState_Locked, "TerranRaynor", lv_indexPlayer) == false)) {
                libCPCD_gf_CTCommanderVOAbilityWatch(lv_indexPlayer, SoundLink("AdjutantAlert_RaynorAirStrikeReady", -1), "Abil/BansheeAirstrike", null, null);
            }

            libCPCD_gf_CTCommanderVOAbilityWatch(lv_indexPlayer, SoundLink("AdjutantAlert_RaynorHyperionReady", -1), "Abil/VoidCoopSummonHyperion", null, null);
        }
        else if (auto9A2989B5_val == "TerranSwann") {
            TriggerEnable(libCPCD_gt_CTAbilitySwannDrone, true);
            TriggerEnable(libCPCD_gt_CTAbilitySwannCombatDropUsed, true);
            TriggerEnable(libCPCD_gt_CTAbilitySwannLaserDrill, true);
            if ((libCOOC_gf_CC_PerkStateCheck("SwannSpecialDelivery", libCOOC_ge_CC_PerkState_Locked, "TerranSwann", lv_indexPlayer) == false)) {
                libCPCD_gf_CTCommanderVOAbilityWatch(lv_indexPlayer, SoundLink("AdjutantAlert_SwannCombatDropReady", -1), "Abil/SpecialDelivery", null, null);
            }

            if ((libCOOC_gf_CC_PerkStateCheck("SwannLaserDrillUpgrades", libCOOC_ge_CC_PerkState_Locked, "TerranSwann", lv_indexPlayer) == false)) {
                libCPCD_gf_CTCommanderVOAbilityWatch(lv_indexPlayer, SoundLink("AdjutantAlert_SwannPulseCannonReady", -1), "Abil/DrakkenLaserDrillNuke", null, null);
            }

            libCPCD_gf_CTCommanderVOAbilityWatch(lv_indexPlayer, SoundLink("AdjutantAlert_SwannConcentratedBeamReady", -1), "Abil/DrakkenLaserDrillBFG", null, null);
        }
        else if (auto9A2989B5_val == "ZergKerrigan") {
            TriggerEnable(libCPCD_gt_CTAbilityKerriganCrushingGrip, true);
            TriggerEnable(libCPCD_gt_CTAbilityKerriganAssimilation, true);
            if ((libCOOC_gf_CC_PerkStateCheck("KerriganUnlockCrushingGripWave", libCOOC_ge_CC_PerkState_Locked, "ZergKerrigan", lv_indexPlayer) == false)) {
                libCPCD_gf_CTCommanderVOAbilityWatch(lv_indexPlayer, SoundLink("IzshaAlert_KerriganImmobilWave", -1), "Abil/KerriganVoidCoopCrushingGripWave", libCPGL_gv_commander[lv_indexPlayer].lv_heroUnit, null);
            }

            libCPCD_gf_CTCommanderVOAbilityWatch(lv_indexPlayer, SoundLink("IzshaAlert_KerriganAssmilAura", -1), "Abil/KerriganVoidCoopEconDrop", libCPGL_gv_commander[lv_indexPlayer].lv_heroUnit, null);
        }
        else if (auto9A2989B5_val == "ZergZagara") {
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionZagaraRoachDrop, true);
            if ((libCOOC_gf_CC_PerkStateCheck("ZagaraUnlockMassRoachDrop", libCOOC_ge_CC_PerkState_Locked, "ZergZagara", lv_indexPlayer) == false)) {
                libCPCD_gf_CTCommanderVOAbilityWatch(lv_indexPlayer, SoundLink("IzshaAlert_ZagaraInfestedDrop", -1), "ZagaraVoidCoopInfestedPods", libCPGL_gv_commander[lv_indexPlayer].lv_heroUnit, null);
            }

            libCPCD_gf_CTCommanderVOAbilityWatch(lv_indexPlayer, SoundLink("IzshaAlert_ZagaraMassFrenzy", -1), "ZagaraVoidCoopMassFrenzy", libCPGL_gv_commander[lv_indexPlayer].lv_heroUnit, null);
        }
        else if (auto9A2989B5_val == "ProtossArtanis") {
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionArtanisSuperShields, true);
            libCPCD_gf_CTCommanderVOAbilityWatchUnit(lv_indexPlayer, SoundLink("ExecutorAlert_ArtanisOverchargeReady", -1), "Abil/SoASuperShield", libCPGL_gv_commander[lv_indexPlayer].lv_globalCasterUnit, "SoASuperShield");
            if ((libCOOC_gf_CC_PerkStateCheck("ArtanisUnlockStrafeAttack", libCOOC_ge_CC_PerkState_Locked, "ProtossArtanis", lv_indexPlayer) == false)) {
                libCPCD_gf_CTCommanderVOAbilityWatchUnit(lv_indexPlayer, SoundLink("ExecutorAlert_ArtanisSolarBombardReady", -1), "Abil/SOAStrafeAttack", libCPGL_gv_commander[lv_indexPlayer].lv_globalCasterUnit, "SOAStrafeAttack");
            }

        }
        else if (auto9A2989B5_val == "ProtossVorazun") {
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionVorazunTimeStop, true);
            libCPCD_gf_CTCommanderVOAbilityWatchUnit(lv_indexPlayer, SoundLink("ExecutorAlert_VorazunShadowGuardReady", -1), "Abil/SOAShadowGuardCalldown", libCPGL_gv_commander[lv_indexPlayer].lv_globalCasterUnit, "SOAShadowGuardCalldown");
            if ((libCOOC_gf_CC_PerkStateCheck("VorazunUnlockTimeStop", libCOOC_ge_CC_PerkState_Locked, "ProtossVorazun", lv_indexPlayer) == false)) {
                libCPCD_gf_CTCommanderVOAbilityWatchUnit(lv_indexPlayer, SoundLink("ExecutorAlert_VorazunTimeStopReady", -1), "Abil/SOATimeFreeze", libCPGL_gv_commander[lv_indexPlayer].lv_globalCasterUnit, "SOATimeFreeze");
            }

        }
        else if (auto9A2989B5_val == "ProtossKarax") {
            TriggerExecute(libCPCD_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost, true, false);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionKaraxChronoMap, true);
            libCPCD_gf_CTCommanderVOAbilityWatch(lv_indexPlayer, SoundLink("ExecutorAlert_KaraxPurifierBeamReady", -1), "Abil/SOAPurifierBeam", null, null);
        }
        else if (auto9A2989B5_val == "ZergAbathur") {
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionAbathurMend, true);
            libCPCD_gf_CTCommanderVOAbilityWatchUnit(lv_indexPlayer, SoundLink("IzshaAlert_AbathurMend", -1), "Abil/AbathurMend", libCPGL_gv_commander[lv_indexPlayer].lv_globalCasterUnit, "AbathurMend");
            libCPCD_gf_CM_AbilityTransmissionAbathurNestReminderActionVer(lv_indexPlayer);
        }
        else if (auto9A2989B5_val == "ProtossAlarak") {
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionAlarakOvercharge, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionAlarakEmpower, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionAlarakDeathFleet, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionAlarakSacrifice, true);
            if ((libCOOC_gf_CC_PerkStateCheck("AlarakDeathFleet", libCOOC_ge_CC_PerkState_Locked, "ProtossAlarak", lv_indexPlayer) == false)) {
                libCPCD_gf_CTCommanderVOAbilityWatch(lv_indexPlayer, SoundLink("AlarakCommander_DFReady", -1), "Abil/AlarakACSummonDeathfleetTarget", null, AbilityCommand("AlarakACSummonDeathfleetTarget", 0));
            }

            libCPCD_gf_CTCommanderVOAbilityWatch(lv_indexPlayer, SoundLink("AlarakCommander_EMReady", -1), "Abil/AlarakEmpower", libCPGL_gv_commander[lv_indexPlayer].lv_heroUnit, null);
        }
        else if (auto9A2989B5_val == "TerranNova") {
            if ((libCOOC_gf_CC_PerkStateCheck("NovaUnlockGriffinBombingRun", libCOOC_ge_CC_PerkState_Locked, "TerranNova", lv_indexPlayer) == false)) {
                libCPCD_gf_CTCommanderVOAbilityWatchUnit(lv_indexPlayer, SoundLink("NovaCommander_GriffinAirstrikeReady", -1), "Abil/NovaGriffinBombingRunActivate", libCPGL_gv_commander[lv_indexPlayer].lv_globalCasterUnit, "NovaGriffinBombingRunActivate");
            }

            if ((libCOOC_gf_CC_PerkStateCheck("NovaUnlockGriffinTransport", libCOOC_ge_CC_PerkState_Locked, "TerranNova", lv_indexPlayer) == false)) {
                libCPCD_gf_CTCommanderVOAbilityWatchUnit(lv_indexPlayer, SoundLink("NovaCommander_GriffinAirliftReady", -1), "Abil/NovaGriffinTransportLoadUnits", libCPGL_gv_commander[lv_indexPlayer].lv_globalCasterUnit, "NovaGriffinTransportLoadUnits");
            }

            libCPCD_gf_CM_AbilityTransmissionNovaNukeReadyActionVer(lv_indexPlayer);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionNovaTransport, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionNovaBombingRun, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionNovaDMatrix, true);
        }
        else if (auto9A2989B5_val == "ZergStukov") {
            if ((libCOOC_gf_CC_PerkStateCheck("CommanderStukovAleksander", libCOOC_ge_CC_PerkState_Locked, "ZergStukov", lv_indexPlayer) == false)) {
                libCPCD_gf_CTCommanderVOAbilityWatch(lv_indexPlayer, SoundLink("StukovCommander_AleksanderReady", -1), "Abil/StukovSummonAleksander", null, null);
            }

            if ((libCOOC_gf_CC_PerkStateCheck("CommanderStukovApocalisk", libCOOC_ge_CC_PerkState_Locked, "ZergStukov", lv_indexPlayer) == false)) {
                libCPCD_gf_CTCommanderVOAbilityWatch(lv_indexPlayer, SoundLink("StukovCommander_ApocaliskReady", -1), "Abil/StukovSummonApocalisk", null, null);
            }

            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionStukovInfestStructure, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionStukovApocalisk, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionStukovAleksander, true);
        }
        else if (auto9A2989B5_val == "ProtossFenix") {
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionFenixCreateKaldalis, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionFenixCreateTalis, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionFenixCreateTaldarin, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionFenixCreateWarbringer, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionFenixCreateMojo, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionFenixCreateClolarion, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionFenixZealotSuit, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionFenixDragoonSuit, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionFenixArbiterSuit, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionFenixMassRecall, true);
            TriggerEnable(libCPCD_gt_CM_HeroTransmissionFenixHeroDies, true);
            TriggerEnable(libCPCD_gt_CM_HeroTransmissionFenixHeroRepaired, true);
            TriggerEnable(libCPCD_gt_CM_HeroTransmissionFenixNameChange, true);
            libCPCD_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime(lv_indexPlayer, "SOASummonFenix", libCPGL_gv_commander[lv_indexPlayer].lv_globalCasterUnit);
        }
        else if (auto9A2989B5_val == "ZergDehaka") {
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionDehakaGlevig, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionDehakaMurvar, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionDehakaDakrun, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionDehakaPrimalWurm, true);
            TriggerEnable(libCPCD_gt_CM_UnitTransmissionDehakaGlevigConstruct, true);
            TriggerEnable(libCPCD_gt_CM_UnitTransmissionDehakaMurvarConstruct, true);
            TriggerEnable(libCPCD_gt_CM_UnitTransmissionDehakaDakrunConstruct, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionDehakaChangeReminderLearn, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionDehakaChangeReminderLevel, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionDehakaChangeReminderTimerExpire, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt, true);
            libCPCD_gf_CTCommanderVOAbilityWatch(lv_indexPlayer, SoundLink("DehakaCommander_GlevigReady", -1), "Abil/DehakaGlevigTopBar", null, null);
            libCPCD_gf_CTCommanderVOAbilityWatch(lv_indexPlayer, SoundLink("DehakaCommander_MurvarReady", -1), "Abil/DehakaMurvarTopBar", null, null);
            libCPCD_gf_CTCommanderVOAbilityWatch(lv_indexPlayer, SoundLink("DehakaCommander_DakrunReady", -1), "Abil/DehakaDakrunTopBar", null, null);
            libCPCD_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer(lv_indexPlayer);
            libCPCD_gv_cM_DehakaVODehakaPlayer = lv_indexPlayer;
        }
        else if (auto9A2989B5_val == "TerranHorner") {
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionHornerFleet, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionHornerStation, true);
            TriggerEnable(libCPCD_gt_CM_UnitTransmissionHornerBomberBuild, true);
            if ((libCOOC_gf_CC_PerkStateCheck("HornerPHLevel5", libCOOC_ge_CC_PerkState_Locked, "TerranHorner", lv_indexPlayer) == false)) {
                libCPCD_gf_CM_AbilityTransmissionHornerFleetReminderActionVer(lv_indexPlayer, SoundLink("HornerHan_CallFleet", -1), "Abil/HornerAirFleetActivate", libCPGL_gv_commander[lv_indexPlayer].lv_globalCasterUnit, "HornerAirFleetActivate");
            }

            if ((libCOOC_gf_CC_PerkStateCheck("HornerPHLevel10", libCOOC_ge_CC_PerkState_Locked, "TerranHorner", lv_indexPlayer) == false)) {
                libCPCD_gf_CTCommanderVOAbilityWatch(lv_indexPlayer, SoundLink("HornerHan_Spacestation", -1), "Abil/HHSummonMercenarySpaceStation", null, null);
            }

            libCPCD_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer(lv_indexPlayer);
            libCPCD_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer(lv_indexPlayer);
            libCPCD_gv_cM_HornerVOHornerPlayer = lv_indexPlayer;
        }
        else if (auto9A2989B5_val == "TerranTychus") {
            TimerStart(libCPCD_gv_cM_TychusVOTransportReminderTimer, libCPCD_gv_cMC_TychusVOTransportReminderDelay, false, c_timeGame);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionTychusCreateReaper, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionTychusCreateFirebat, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionTychusCreatePhantom, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionTychusCreateMedic, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionTychusTransportReminder, true);
            TriggerEnable(libCPCD_gt_CM_UnitTransmissionTychusTransportBuild, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionTychusTransportUse, true);
            TriggerEnable(libCPCD_gt_CM_UnitTransmissionTychusOutlawFirstDeath, true);
            TriggerEnable(libCPCD_gt_CM_UnitTransmissionTychusOutlawDeath, true);
            TriggerEnable(libCPCD_gt_CM_UnitTransmissionTychusOutlawRevived, true);
            TriggerEnable(libCPCD_gt_CM_UnitTransmissionTychusOutlawReviveReminder, true);
            TriggerEnable(libCPCD_gt_CM_UnitTransmissionTychusOutlawRecruitAvailable, true);
            TriggerEnable(libCPCD_gt_CM_UnitTransmissionTychusOutlawRecruited, true);
            TriggerEnable(libCPCD_gt_CM_UnitTransmissionTychusOutlawRecruitReminder, true);
            if ((libCOOC_gf_CC_PerkStateCheck("TychusPHLevel3", libCOOC_ge_CC_PerkState_Locked, "TerranTychus", lv_indexPlayer) == false)) {
                TriggerEnable(libCPCD_gt_CM_AbilityTransmissionTychusOdinUse, true);
                libCPCD_gf_CTCommanderVOAbilityWatch(lv_indexPlayer, SoundLink("TychusCommander_OdinReady", -1), "Abil/TychusCalldownOdinTargeted", null, null);
            }

            if ((libCOOC_gf_CC_PerkStateCheck("TychusPHLevel4", libCOOC_ge_CC_PerkState_Locked, "TerranTychus", lv_indexPlayer) == false)) {
                TriggerEnable(libCPCD_gt_CM_AbilityTransmissionTychusCreateMarauder, true);
            }

            if ((libCOOC_gf_CC_PerkStateCheck("TychusPHLevel6", libCOOC_ge_CC_PerkState_Locked, "TerranTychus", lv_indexPlayer) == false)) {
                TriggerEnable(libCPCD_gt_CM_AbilityTransmissionTychusCreateWarhound, true);
            }

            if ((libCOOC_gf_CC_PerkStateCheck("TychusPHLevel8", libCOOC_ge_CC_PerkState_Locked, "TerranTychus", lv_indexPlayer) == false)) {
                TriggerEnable(libCPCD_gt_CM_AbilityTransmissionTychusCreateHERC, true);
            }

            if ((libCOOC_gf_CC_PerkStateCheck("TychusPHLevel10", libCOOC_ge_CC_PerkState_Locked, "TerranTychus", lv_indexPlayer) == false)) {
                TriggerEnable(libCPCD_gt_CM_AbilityTransmissionTychusCreateGhost, true);
            }

            libCPCD_gv_cM_TychusVOTychusPlayer = lv_indexPlayer;
        }
        else if (auto9A2989B5_val == "ProtossZeratul") {
            TriggerEnable(libCPCD_gt_CM_ArtifactTransmission_Hint, true);
            TriggerEnable(libCPCD_gt_CM_ArtifactTransmission_PickedUp, true);
            TriggerEnable(libCPCD_gt_CM_ArtifactTransmission_Upgraded, true);
            TriggerEnable(libCPCD_gt_CM_ArtifactTransmission_ProphecyCast, true);
            TriggerEnable(libCPCD_gt_CM_ArtifactTransmission_SelectAbilityReminder, true);
        }
        else if (auto9A2989B5_val == "ZergStetmann") {
            TriggerEnable(libCPCD_gt_CM_GaryDeath, true);
            TriggerEnable(libCPCD_gt_CM_GaryUpgradeReminder, true);
            libCPCD_gf_CM_AbilityTransmission_StetelliteReminder(lv_indexPlayer);
            libCPCD_gf_CM_AbilityTransmission_StetzoneReminder(lv_indexPlayer);
        }
        else if (auto9A2989B5_val == "TerranMengsk") {
            TriggerEnable(libCPCD_gt_CM_Mengsk_ArtilleryBuilt, true);
            TriggerEnable(libCPCD_gt_CM_Mengsk_ArtilleryStarted, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionMengskDirtyBomb, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionMengskForcedConscription, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionMengskNuclearAnnihilation, true);
            TriggerEnable(libCPCD_gt_CM_AbilityTransmissionMengskZergCalldown, true);
            libCPCD_gf_CM_AbilityTransmission_MengskReminders(lv_indexPlayer);
        }
        else {
        }
    }
}

trigger auto_libCPCD_gf_CTCommanderVOAbilityWatchUnit_Trigger = null;
int auto_libCPCD_gf_CTCommanderVOAbilityWatchUnit_lp_player;
soundlink auto_libCPCD_gf_CTCommanderVOAbilityWatchUnit_lp_vOSound;
string auto_libCPCD_gf_CTCommanderVOAbilityWatchUnit_lp_cooldownLink;
unit auto_libCPCD_gf_CTCommanderVOAbilityWatchUnit_lp_unit;
string auto_libCPCD_gf_CTCommanderVOAbilityWatchUnit_lp_ability;

void libCPCD_gf_CTCommanderVOAbilityWatchUnit (int lp_player, soundlink lp_vOSound, string lp_cooldownLink, unit lp_unit, string lp_ability) {
    auto_libCPCD_gf_CTCommanderVOAbilityWatchUnit_lp_player = lp_player;
    auto_libCPCD_gf_CTCommanderVOAbilityWatchUnit_lp_vOSound = lp_vOSound;
    auto_libCPCD_gf_CTCommanderVOAbilityWatchUnit_lp_cooldownLink = lp_cooldownLink;
    auto_libCPCD_gf_CTCommanderVOAbilityWatchUnit_lp_unit = lp_unit;
    auto_libCPCD_gf_CTCommanderVOAbilityWatchUnit_lp_ability = lp_ability;

    if (auto_libCPCD_gf_CTCommanderVOAbilityWatchUnit_Trigger == null) {
        auto_libCPCD_gf_CTCommanderVOAbilityWatchUnit_Trigger = TriggerCreate("auto_libCPCD_gf_CTCommanderVOAbilityWatchUnit_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CTCommanderVOAbilityWatchUnit_Trigger, false, false);
}

bool auto_libCPCD_gf_CTCommanderVOAbilityWatchUnit_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCPCD_gf_CTCommanderVOAbilityWatchUnit_lp_player;
    soundlink lp_vOSound = auto_libCPCD_gf_CTCommanderVOAbilityWatchUnit_lp_vOSound;
    string lp_cooldownLink = auto_libCPCD_gf_CTCommanderVOAbilityWatchUnit_lp_cooldownLink;
    unit lp_unit = auto_libCPCD_gf_CTCommanderVOAbilityWatchUnit_lp_unit;
    string lp_ability = auto_libCPCD_gf_CTCommanderVOAbilityWatchUnit_lp_ability;

    // Automatic Variable Declarations
    // Implementation
    while (true) {
        while (!(((UnitAbilityGetCooldown(lp_unit, lp_ability, lp_cooldownLink) > 20.0) || ((UnitAbilityChargeInfo(lp_unit, AbilityCommand(lp_ability, 0), c_unitAbilChargeCountLeft) == 0.0) && (UnitAbilityGetChargeRegen(lp_unit, lp_ability, lp_cooldownLink) > 20.0))))) {
            Wait(1.0, c_timeGame);
        }
        while (!((UnitAbilityGetCooldown(lp_unit, lp_ability, lp_cooldownLink) <= 0.0) && ((UnitAbilityGetChargeRegen(lp_unit, lp_ability, lp_cooldownLink) <= 0.0) || (UnitAbilityChargeInfo(lp_unit, AbilityCommand(lp_ability, 0), c_unitAbilChargeCountLeft) > 0.0)))) {
            Wait(1.0, c_timeGame);
        }
        if ((UnitIsAlive(lp_unit) == true)) {
            libCPCD_gf_CTCommanderVOSend(lp_player, lp_vOSound, PlayerGroupSingle(lp_player));
        }

    }
    return true;
}

trigger auto_libCPCD_gf_CM_HeroReviveQueue_PlaySound_Trigger = null;
soundlink auto_libCPCD_gf_CM_HeroReviveQueue_PlaySound_lp_soundLink;
fixed auto_libCPCD_gf_CM_HeroReviveQueue_PlaySound_lp_soundDelay;
playergroup auto_libCPCD_gf_CM_HeroReviveQueue_PlaySound_lp_listeningPlayers;

void libCPCD_gf_CM_HeroReviveQueue_PlaySound (soundlink lp_soundLink, fixed lp_soundDelay, playergroup lp_listeningPlayers) {
    auto_libCPCD_gf_CM_HeroReviveQueue_PlaySound_lp_soundLink = lp_soundLink;
    auto_libCPCD_gf_CM_HeroReviveQueue_PlaySound_lp_soundDelay = lp_soundDelay;
    auto_libCPCD_gf_CM_HeroReviveQueue_PlaySound_lp_listeningPlayers = lp_listeningPlayers;

    if (auto_libCPCD_gf_CM_HeroReviveQueue_PlaySound_Trigger == null) {
        auto_libCPCD_gf_CM_HeroReviveQueue_PlaySound_Trigger = TriggerCreate("auto_libCPCD_gf_CM_HeroReviveQueue_PlaySound_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CM_HeroReviveQueue_PlaySound_Trigger, false, false);
}

bool auto_libCPCD_gf_CM_HeroReviveQueue_PlaySound_TriggerFunc (bool testConds, bool runActions) {
    soundlink lp_soundLink = auto_libCPCD_gf_CM_HeroReviveQueue_PlaySound_lp_soundLink;
    fixed lp_soundDelay = auto_libCPCD_gf_CM_HeroReviveQueue_PlaySound_lp_soundDelay;
    playergroup lp_listeningPlayers = auto_libCPCD_gf_CM_HeroReviveQueue_PlaySound_lp_listeningPlayers;

    // Variable Declarations
    fixed lv_maxsounddelay;
    timer lv_sounddelaytimer;
    timer lv_maxsounddelaytimer;
    fixed lv_soundtaildelay;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_maxsounddelay = 15.0;
    lv_sounddelaytimer = TimerCreate();
    lv_maxsounddelaytimer = TimerCreate();

    // Implementation
    TimerStart(lv_sounddelaytimer, lp_soundDelay, false, c_timeReal);
    TimerStart(lv_maxsounddelaytimer, lv_maxsounddelay, false, c_timeReal);
    while (!((((libCPCD_gv_cTHeroReviveQueue_ActiveListeners == false) && (TimerGetRemaining(lv_sounddelaytimer) <= 0.0)) || (TimerGetRemaining(lv_maxsounddelaytimer) <= 0.0)))) {
        Wait(0.25, c_timeReal);
    }
    if ((TimerGetRemaining(lv_maxsounddelaytimer) <= 0.0)) {
        return true;
    }

    libCPCD_gv_cTHeroReviveQueue_ActiveListeners = true;
    SoundPlayForPlayer(lp_soundLink, 1, lp_listeningPlayers, 100.0, 0.0);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    Wait(lv_soundtaildelay, c_timeReal);
    libCPCD_gv_cTHeroReviveQueue_ActiveListeners = false;
    return true;
}

trigger auto_libCPCD_gf_CTCommanderVOAbilityWatch_Trigger = null;
int auto_libCPCD_gf_CTCommanderVOAbilityWatch_lp_player;
soundlink auto_libCPCD_gf_CTCommanderVOAbilityWatch_lp_vOSound;
string auto_libCPCD_gf_CTCommanderVOAbilityWatch_lp_cooldownLink;
unit auto_libCPCD_gf_CTCommanderVOAbilityWatch_lp_unit;
abilcmd auto_libCPCD_gf_CTCommanderVOAbilityWatch_lp_abilityCommand;

void libCPCD_gf_CTCommanderVOAbilityWatch (int lp_player, soundlink lp_vOSound, string lp_cooldownLink, unit lp_unit, abilcmd lp_abilityCommand) {
    auto_libCPCD_gf_CTCommanderVOAbilityWatch_lp_player = lp_player;
    auto_libCPCD_gf_CTCommanderVOAbilityWatch_lp_vOSound = lp_vOSound;
    auto_libCPCD_gf_CTCommanderVOAbilityWatch_lp_cooldownLink = lp_cooldownLink;
    auto_libCPCD_gf_CTCommanderVOAbilityWatch_lp_unit = lp_unit;
    auto_libCPCD_gf_CTCommanderVOAbilityWatch_lp_abilityCommand = lp_abilityCommand;

    if (auto_libCPCD_gf_CTCommanderVOAbilityWatch_Trigger == null) {
        auto_libCPCD_gf_CTCommanderVOAbilityWatch_Trigger = TriggerCreate("auto_libCPCD_gf_CTCommanderVOAbilityWatch_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CTCommanderVOAbilityWatch_Trigger, false, false);
}

bool auto_libCPCD_gf_CTCommanderVOAbilityWatch_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCPCD_gf_CTCommanderVOAbilityWatch_lp_player;
    soundlink lp_vOSound = auto_libCPCD_gf_CTCommanderVOAbilityWatch_lp_vOSound;
    string lp_cooldownLink = auto_libCPCD_gf_CTCommanderVOAbilityWatch_lp_cooldownLink;
    unit lp_unit = auto_libCPCD_gf_CTCommanderVOAbilityWatch_lp_unit;
    abilcmd lp_abilityCommand = auto_libCPCD_gf_CTCommanderVOAbilityWatch_lp_abilityCommand;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_abilityCommand != null) && (TechTreeAbilityIsAllowed(lp_player, lp_abilityCommand) == false)) {
        return true;
    }

    while (true) {
        while (!((PlayerGetCooldown(lp_player, lp_cooldownLink) > 0.0))) {
            Wait(1.0, c_timeGame);
        }
        while (!((PlayerGetCooldown(lp_player, lp_cooldownLink) <= 0.0))) {
            Wait(1.0, c_timeGame);
        }
        if (((lp_unit == null) || (UnitIsAlive(lp_unit) == true))) {
            libCPCD_gf_CTCommanderVOSend(lp_player, lp_vOSound, PlayerGroupSingle(lp_player));
        }

    }
    return true;
}

void libCPCD_gf_CTCommanderVOSend (int lp_ally, soundlink lp_vOSound, playergroup lp_playersWhoWillHear) {
    // Automatic Variable Declarations
    // Implementation
    SoundSetListenerGender(lp_vOSound, libCOOC_gf_CC_CommanderGender(libCPGL_gv_commander[lp_ally].lv_commanderInstance));
    SoundPlayForPlayer(lp_vOSound, lp_ally, lp_playersWhoWillHear, 100.0, 0.0);
}

void libCPCD_gf_CTCommanderVOSendGroup (playergroup lp_allies, soundlink lp_vOSound, playergroup lp_playersWhoWillHear) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoF7618869_g;

    // Variable Initialization

    // Implementation
    autoF7618869_g = lp_allies;
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoF7618869_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        SoundSetListenerGender(lp_vOSound, libCOOC_gf_CC_CommanderGender(libCPGL_gv_commander[lv_indexPlayer].lv_commanderInstance));
        SoundPlayForPlayer(lp_vOSound, lv_indexPlayer, lp_playersWhoWillHear, 100.0, 0.0);
    }
}

trigger auto_libCPCD_gf_CM_AbilityTransmissionAbathurNestReminderActionVer_Trigger = null;
int auto_libCPCD_gf_CM_AbilityTransmissionAbathurNestReminderActionVer_lp_abathurPlayer;

void libCPCD_gf_CM_AbilityTransmissionAbathurNestReminderActionVer (int lp_abathurPlayer) {
    auto_libCPCD_gf_CM_AbilityTransmissionAbathurNestReminderActionVer_lp_abathurPlayer = lp_abathurPlayer;

    if (auto_libCPCD_gf_CM_AbilityTransmissionAbathurNestReminderActionVer_Trigger == null) {
        auto_libCPCD_gf_CM_AbilityTransmissionAbathurNestReminderActionVer_Trigger = TriggerCreate("auto_libCPCD_gf_CM_AbilityTransmissionAbathurNestReminderActionVer_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CM_AbilityTransmissionAbathurNestReminderActionVer_Trigger, false, false);
}

bool auto_libCPCD_gf_CM_AbilityTransmissionAbathurNestReminderActionVer_TriggerFunc (bool testConds, bool runActions) {
    int lp_abathurPlayer = auto_libCPCD_gf_CM_AbilityTransmissionAbathurNestReminderActionVer_lp_abathurPlayer;

    // Variable Declarations
    int lv_locAbathurPlayer;
    bool lv_belowStandardCap;
    bool lv_belowFinalCap;
    const fixed lv_c_StandardCapAmount = 5.0;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_belowStandardCap = true;
    lv_belowFinalCap = true;

    // Implementation
    lv_locAbathurPlayer = lp_abathurPlayer;
    while (true) {
        Wait(5.0, c_timeGame);
        if ((UnitAbilityChargeInfo(libCPGL_gv_commander[lv_locAbathurPlayer].lv_globalCasterUnit, AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) < lv_c_StandardCapAmount)) {
            lv_belowStandardCap = true;
            continue;
        }
        else if ((lv_belowStandardCap == true) && (UnitAbilityChargeInfo(libCPGL_gv_commander[lv_locAbathurPlayer].lv_globalCasterUnit, AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) >= lv_c_StandardCapAmount)) {
            Wait(10.0, c_timeGame);
            if ((UnitAbilityChargeInfo(libCPGL_gv_commander[lv_locAbathurPlayer].lv_globalCasterUnit, AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) >= lv_c_StandardCapAmount)) {
                lv_belowStandardCap = false;
                libCPCD_gf_CTCommanderVOSend(lv_locAbathurPlayer, SoundLink("AbathurCommander_ToxicNest", -1), PlayerGroupSingle(lv_locAbathurPlayer));
                continue;
            }

        }
        else if ((UnitAbilityChargeInfo(libCPGL_gv_commander[lv_locAbathurPlayer].lv_globalCasterUnit, AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountMax) <= (lv_c_StandardCapAmount+2.0))) {
            continue;
        }
        else if ((UnitAbilityChargeInfo(libCPGL_gv_commander[lv_locAbathurPlayer].lv_globalCasterUnit, AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) < UnitAbilityChargeInfo(libCPGL_gv_commander[lv_locAbathurPlayer].lv_globalCasterUnit, AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountMax))) {
            lv_belowFinalCap = true;
            continue;
        }
        else if ((lv_belowFinalCap == true) && (UnitAbilityChargeInfo(libCPGL_gv_commander[lv_locAbathurPlayer].lv_globalCasterUnit, AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) >= UnitAbilityChargeInfo(libCPGL_gv_commander[lv_locAbathurPlayer].lv_globalCasterUnit, AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountMax))) {
            Wait(10.0, c_timeGame);
            if ((UnitAbilityChargeInfo(libCPGL_gv_commander[lv_locAbathurPlayer].lv_globalCasterUnit, AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) >= UnitAbilityChargeInfo(libCPGL_gv_commander[lv_locAbathurPlayer].lv_globalCasterUnit, AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountMax))) {
                lv_belowFinalCap = false;
                libCPCD_gf_CTCommanderVOSend(lv_locAbathurPlayer, SoundLink("AbathurCommander_ToxicNest", -1), PlayerGroupSingle(lv_locAbathurPlayer));
            }

        }
    }
    return true;
}

trigger auto_libCPCD_gf_CM_AbilityTransmissionNovaNukeReadyActionVer_Trigger = null;
int auto_libCPCD_gf_CM_AbilityTransmissionNovaNukeReadyActionVer_lp_novaPlayer;

void libCPCD_gf_CM_AbilityTransmissionNovaNukeReadyActionVer (int lp_novaPlayer) {
    auto_libCPCD_gf_CM_AbilityTransmissionNovaNukeReadyActionVer_lp_novaPlayer = lp_novaPlayer;

    if (auto_libCPCD_gf_CM_AbilityTransmissionNovaNukeReadyActionVer_Trigger == null) {
        auto_libCPCD_gf_CM_AbilityTransmissionNovaNukeReadyActionVer_Trigger = TriggerCreate("auto_libCPCD_gf_CM_AbilityTransmissionNovaNukeReadyActionVer_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CM_AbilityTransmissionNovaNukeReadyActionVer_Trigger, false, false);
}

bool auto_libCPCD_gf_CM_AbilityTransmissionNovaNukeReadyActionVer_TriggerFunc (bool testConds, bool runActions) {
    int lp_novaPlayer = auto_libCPCD_gf_CM_AbilityTransmissionNovaNukeReadyActionVer_lp_novaPlayer;

    // Variable Declarations
    int lv_locNovaPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_locNovaPlayer = lp_novaPlayer;

    // Implementation
    if ((libCOOC_gf_CC_PerkStateCheck("NovaUnlockUltimates", libCOOC_ge_CC_PerkState_Active, "TerranNova", lv_locNovaPlayer) == false)) {
        return true;
    }

    while (true) {
        while (!((UnitAbilityChargeInfo(libCPGL_gv_commander[lv_locNovaPlayer].lv_heroUnit, AbilityCommand("NovaCoopCasterNuke", 0), c_unitAbilChargeCountLeft) <= 0.0))) {
            Wait(1.0, c_timeGame);
        }
        while (!((UnitAbilityChargeInfo(libCPGL_gv_commander[lv_locNovaPlayer].lv_heroUnit, AbilityCommand("NovaCoopCasterNuke", 0), c_unitAbilChargeCountLeft) >= 1.0))) {
            Wait(1.0, c_timeGame);
        }
        if (((libCPGL_gv_commander[lv_locNovaPlayer].lv_heroUnit == null) || (UnitIsAlive(libCPGL_gv_commander[lv_locNovaPlayer].lv_heroUnit) == true))) {
            libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(lv_locNovaPlayer), SoundLink("NovaCommander_NukeReady", -1), PlayerGroupSingle(lv_locNovaPlayer));
        }

    }
    return true;
}

trigger auto_libCPCD_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_Trigger = null;
int auto_libCPCD_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_player;
string auto_libCPCD_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_cooldownLink;
unit auto_libCPCD_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_unit;

void libCPCD_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime (int lp_player, string lp_cooldownLink, unit lp_unit) {
    auto_libCPCD_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_player = lp_player;
    auto_libCPCD_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_cooldownLink = lp_cooldownLink;
    auto_libCPCD_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_unit = lp_unit;

    if (auto_libCPCD_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_Trigger == null) {
        auto_libCPCD_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_Trigger = TriggerCreate("auto_libCPCD_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_Trigger, false, false);
}

bool auto_libCPCD_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCPCD_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_player;
    string lp_cooldownLink = auto_libCPCD_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_cooldownLink;
    unit lp_unit = auto_libCPCD_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_unit;

    // Variable Declarations
    int lv_vOChoice;
    int lv_vOOptions;

    // Automatic Variable Declarations
    int autoCABEA138_val;

    // Variable Initialization
    lv_vOOptions = 2;

    // Implementation
    while (!((PlayerGetCooldown(lp_player, lp_cooldownLink) > 0.0))) {
        Wait(1.0, c_timeGame);
    }
    while (!((PlayerGetCooldown(lp_player, lp_cooldownLink) <= 0.0))) {
        Wait(1.0, c_timeGame);
    }
    if (((lp_unit == null) || (UnitIsAlive(lp_unit) == true))) {
        if ((libCOOC_gf_CC_PerkStateCheck("FenixUnlockArbiterSuit", libCOOC_ge_CC_PerkState_Locked, "ProtossFenix", lp_player) == false)) {
            lv_vOOptions = 3;
        }

        lv_vOChoice = RandomInt(1, lv_vOOptions);
        autoCABEA138_val = lv_vOChoice;
        if (autoCABEA138_val == 2) {
            libCPCD_gf_CTCommanderVOSend(lp_player, SoundLink("FenixCommander_DragoonSuitReady", -1), PlayerGroupSingle(lp_player));
        }
        else if (autoCABEA138_val == 3) {
            libCPCD_gf_CTCommanderVOSend(lp_player, SoundLink("FenixCommander_ArbiterSuitReady", -1), PlayerGroupSingle(lp_player));
        }
        else {
            libCPCD_gf_CTCommanderVOSend(lp_player, SoundLink("FenixCommander_ZealotSuitReady", -1), PlayerGroupSingle(lp_player));
        }
    }

    return true;
}

trigger auto_libCPCD_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer_Trigger = null;
int auto_libCPCD_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer_lp_dehakaPlayer;

void libCPCD_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer (int lp_dehakaPlayer) {
    auto_libCPCD_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer_lp_dehakaPlayer = lp_dehakaPlayer;

    if (auto_libCPCD_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer_Trigger == null) {
        auto_libCPCD_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer_Trigger = TriggerCreate("auto_libCPCD_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer_Trigger, false, false);
}

bool auto_libCPCD_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer_TriggerFunc (bool testConds, bool runActions) {
    int lp_dehakaPlayer = auto_libCPCD_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer_lp_dehakaPlayer;

    // Variable Declarations
    int lv_locDehakaPlayer;
    bool lv_belowStandardCap;
    const fixed lv_c_StandardCapAmount = 3.0;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_belowStandardCap = true;

    // Implementation
    lv_locDehakaPlayer = lp_dehakaPlayer;
    while (true) {
        Wait(5.0, c_timeGame);
        if ((libCPCD_gv_cM_DehakaVOWurmStructureAlive == false)) {
            continue;
        }
        else if ((UnitAbilityChargeInfo(libCPGL_gv_commander[lv_locDehakaPlayer].lv_globalCasterUnit, AbilityCommand("DehakaNydusDestroyerTopBar", 0), c_unitAbilChargeCountLeft) < lv_c_StandardCapAmount)) {
            lv_belowStandardCap = true;
            continue;
        }
        else if ((lv_belowStandardCap == true) && (UnitAbilityChargeInfo(libCPGL_gv_commander[lv_locDehakaPlayer].lv_globalCasterUnit, AbilityCommand("DehakaNydusDestroyerTopBar", 0), c_unitAbilChargeCountLeft) >= lv_c_StandardCapAmount) && (PlayerGetPropertyInt(lv_locDehakaPlayer, c_playerPropSuppliesUsed) < FixedToInt((PlayerGetPropertyInt(lv_locDehakaPlayer, c_playerPropSuppliesLimit) - UnitTypeGetProperty("DehakaNydusDestroyer", c_unitPropSuppliesUsed))))) {
            Wait(10.0, c_timeGame);
            if ((UnitAbilityChargeInfo(libCPGL_gv_commander[lv_locDehakaPlayer].lv_globalCasterUnit, AbilityCommand("DehakaNydusDestroyerTopBar", 0), c_unitAbilChargeCountLeft) >= lv_c_StandardCapAmount) && (PlayerGetPropertyInt(lv_locDehakaPlayer, c_playerPropSuppliesUsed) < FixedToInt((PlayerGetPropertyInt(lv_locDehakaPlayer, c_playerPropSuppliesLimit) - UnitTypeGetProperty("DehakaNydusDestroyer", c_unitPropSuppliesUsed)))) && (libCPCD_gv_cM_DehakaVOWurmStructureAlive == true)) {
                lv_belowStandardCap = false;
                libCPCD_gf_CTCommanderVOSend(lv_locDehakaPlayer, SoundLink("DehakaCommander_PrimalWurmReminder", -1), PlayerGroupSingle(lv_locDehakaPlayer));
                continue;
            }

        }
    }
    return true;
}

trigger auto_libCPCD_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer_Trigger = null;
int auto_libCPCD_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer_lp_hornerPlayer;

void libCPCD_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer (int lp_hornerPlayer) {
    auto_libCPCD_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer_lp_hornerPlayer = lp_hornerPlayer;

    if (auto_libCPCD_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer_Trigger == null) {
        auto_libCPCD_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer_Trigger = TriggerCreate("auto_libCPCD_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer_Trigger, false, false);
}

bool auto_libCPCD_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer_TriggerFunc (bool testConds, bool runActions) {
    int lp_hornerPlayer = auto_libCPCD_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer_lp_hornerPlayer;

    // Variable Declarations
    int lv_locHornerPlayer;
    const int lv_reminderDelay = 720;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_locHornerPlayer = lp_hornerPlayer;
    Wait(lv_reminderDelay, c_timeGame);
    if ((libCPCD_gv_cM_HornerVOBomberBuilt == false)) {
        libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(lv_locHornerPlayer), SoundLink("HornerHan_BomberPlatformBuild", -1), PlayerGroupSingle(lv_locHornerPlayer));
    }

    return true;
}

trigger auto_libCPCD_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer_Trigger = null;
int auto_libCPCD_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer_lp_hornerPlayer;

void libCPCD_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer (int lp_hornerPlayer) {
    auto_libCPCD_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer_lp_hornerPlayer = lp_hornerPlayer;

    if (auto_libCPCD_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer_Trigger == null) {
        auto_libCPCD_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer_Trigger = TriggerCreate("auto_libCPCD_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer_Trigger, false, false);
}

bool auto_libCPCD_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer_TriggerFunc (bool testConds, bool runActions) {
    int lp_hornerPlayer = auto_libCPCD_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer_lp_hornerPlayer;

    // Variable Declarations
    int lv_locHornerPlayer;
    bool lv_belowStandardCap;
    bool lv_belowFinalCap;
    const fixed lv_c_StandardCapAmount = 5.0;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_belowStandardCap = true;
    lv_belowFinalCap = true;

    // Implementation
    lv_locHornerPlayer = lp_hornerPlayer;
    while (true) {
        Wait(5.0, c_timeGame);
        if ((UnitAbilityChargeInfo(libCPGL_gv_commander[lv_locHornerPlayer].lv_globalCasterUnit, AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountLeft) < lv_c_StandardCapAmount)) {
            lv_belowStandardCap = true;
            continue;
        }
        else if ((lv_belowStandardCap == true) && (UnitAbilityChargeInfo(libCPGL_gv_commander[lv_locHornerPlayer].lv_globalCasterUnit, AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountLeft) >= lv_c_StandardCapAmount)) {
            Wait(10.0, c_timeGame);
            if ((UnitAbilityChargeInfo(libCPGL_gv_commander[lv_locHornerPlayer].lv_globalCasterUnit, AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountLeft) >= lv_c_StandardCapAmount)) {
                lv_belowStandardCap = false;
                libCPCD_gf_CTCommanderVOSend(lv_locHornerPlayer, SoundLink("HornerHan_MagMine", -1), PlayerGroupSingle(lv_locHornerPlayer));
                continue;
            }

        }
        else if ((UnitAbilityChargeInfo(libCPGL_gv_commander[lv_locHornerPlayer].lv_globalCasterUnit, AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountMax) <= (lv_c_StandardCapAmount+2.0))) {
            continue;
        }
        else if ((UnitAbilityChargeInfo(libCPGL_gv_commander[lv_locHornerPlayer].lv_globalCasterUnit, AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountLeft) < UnitAbilityChargeInfo(libCPGL_gv_commander[lv_locHornerPlayer].lv_globalCasterUnit, AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountMax))) {
            lv_belowFinalCap = true;
            continue;
        }
        else if ((lv_belowFinalCap == true) && (UnitAbilityChargeInfo(libCPGL_gv_commander[lv_locHornerPlayer].lv_globalCasterUnit, AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountLeft) >= UnitAbilityChargeInfo(libCPGL_gv_commander[lv_locHornerPlayer].lv_globalCasterUnit, AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountMax))) {
            Wait(10.0, c_timeGame);
            if ((UnitAbilityChargeInfo(libCPGL_gv_commander[lv_locHornerPlayer].lv_globalCasterUnit, AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountLeft) >= UnitAbilityChargeInfo(libCPGL_gv_commander[lv_locHornerPlayer].lv_globalCasterUnit, AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountMax))) {
                lv_belowFinalCap = false;
                libCPCD_gf_CTCommanderVOSend(lv_locHornerPlayer, SoundLink("HornerHan_MagMine", -1), PlayerGroupSingle(lv_locHornerPlayer));
            }

        }
    }
    return true;
}

trigger auto_libCPCD_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_Trigger = null;
int auto_libCPCD_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_player;
soundlink auto_libCPCD_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_vOSound;
string auto_libCPCD_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_cooldownLink;
unit auto_libCPCD_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_unit;
string auto_libCPCD_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_ability;

void libCPCD_gf_CM_AbilityTransmissionHornerFleetReminderActionVer (int lp_player, soundlink lp_vOSound, string lp_cooldownLink, unit lp_unit, string lp_ability) {
    auto_libCPCD_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_player = lp_player;
    auto_libCPCD_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_vOSound = lp_vOSound;
    auto_libCPCD_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_cooldownLink = lp_cooldownLink;
    auto_libCPCD_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_unit = lp_unit;
    auto_libCPCD_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_ability = lp_ability;

    if (auto_libCPCD_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_Trigger == null) {
        auto_libCPCD_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_Trigger = TriggerCreate("auto_libCPCD_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_Trigger, false, false);
}

bool auto_libCPCD_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCPCD_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_player;
    soundlink lp_vOSound = auto_libCPCD_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_vOSound;
    string lp_cooldownLink = auto_libCPCD_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_cooldownLink;
    unit lp_unit = auto_libCPCD_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_unit;
    string lp_ability = auto_libCPCD_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_ability;

    // Automatic Variable Declarations
    // Implementation
    while (true) {
        while (!((libCPCD_gv_cM_HornerVOFleetOffCooldown == false) && ((UnitAbilityGetCooldown(lp_unit, lp_ability, lp_cooldownLink) > 20.0) || ((UnitAbilityChargeInfo(lp_unit, AbilityCommand(lp_ability, 0), c_unitAbilChargeCountLeft) == 0.0) && (UnitAbilityGetChargeRegen(lp_unit, lp_ability, lp_cooldownLink) > 20.0))))) {
            Wait(1.0, c_timeGame);
        }
        while (!((UnitAbilityGetCooldown(lp_unit, lp_ability, lp_cooldownLink) <= 0.0) && ((UnitAbilityGetChargeRegen(lp_unit, lp_ability, lp_cooldownLink) <= 0.0) || (UnitAbilityChargeInfo(lp_unit, AbilityCommand(lp_ability, 0), c_unitAbilChargeCountLeft) > 0.0)))) {
            Wait(1.0, c_timeGame);
        }
        if ((UnitIsAlive(lp_unit) == true)) {
            libCPCD_gf_CTCommanderVOSend(lp_player, lp_vOSound, PlayerGroupSingle(lp_player));
            libCPCD_gv_cM_HornerVOFleetOffCooldown = true;
        }

    }
    return true;
}

trigger auto_libCPCD_gf_CM_AbilityTransmission_StetelliteReminder_Trigger = null;
int auto_libCPCD_gf_CM_AbilityTransmission_StetelliteReminder_lp_stetmannPlayer;

void libCPCD_gf_CM_AbilityTransmission_StetelliteReminder (int lp_stetmannPlayer) {
    auto_libCPCD_gf_CM_AbilityTransmission_StetelliteReminder_lp_stetmannPlayer = lp_stetmannPlayer;

    if (auto_libCPCD_gf_CM_AbilityTransmission_StetelliteReminder_Trigger == null) {
        auto_libCPCD_gf_CM_AbilityTransmission_StetelliteReminder_Trigger = TriggerCreate("auto_libCPCD_gf_CM_AbilityTransmission_StetelliteReminder_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CM_AbilityTransmission_StetelliteReminder_Trigger, false, false);
}

bool auto_libCPCD_gf_CM_AbilityTransmission_StetelliteReminder_TriggerFunc (bool testConds, bool runActions) {
    int lp_stetmannPlayer = auto_libCPCD_gf_CM_AbilityTransmission_StetelliteReminder_lp_stetmannPlayer;

    // Variable Declarations
    string lv_abilchargename;
    fixed lv_pollinginterval;
    fixed lv_reminderdelay;
    fixed lv_remindercooldown;
    timer lv_remindercooldowntimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abilchargename = "Abil/DeployPowerTowerStetmann";
    lv_pollinginterval = 1.0;
    lv_reminderdelay = 10.0;
    lv_remindercooldown = 180.0;
    lv_remindercooldowntimer = TimerCreate();

    // Implementation
    while (true) {
        while (!((PlayerGetChargeUsed(lp_stetmannPlayer, lv_abilchargename) == 0.0) && (TimerGetRemaining(lv_remindercooldowntimer) <= 0.0))) {
            Wait(lv_pollinginterval, c_timeGame);
        }
        Wait(lv_reminderdelay, c_timeReal);
        if ((PlayerGetChargeUsed(lp_stetmannPlayer, lv_abilchargename) == 0.0)) {
            if ((libCPCD_gv_cM_AbilityTransmission_StetelliteReminder_First == true)) {
                DialogControlSetAnimationState(libCOUI_gv_cU_GPPanel[lp_stetmannPlayer], PlayerGroupSingle(lp_stetmannPlayer), "ReminderStetellites", "FirstReminder");
                libCPCD_gv_cM_AbilityTransmission_StetelliteReminder_First = false;
            }
            else {
                DialogControlSetAnimationState(libCOUI_gv_cU_GPPanel[lp_stetmannPlayer], PlayerGroupSingle(lp_stetmannPlayer), "ReminderStetellites", "RepeatReminder");
            }
            libCPCD_gf_CTCommanderVOSend(lp_stetmannPlayer, SoundLink("StetmannCommander_PowerTowerReminder", -1), PlayerGroupSingle(lp_stetmannPlayer));
            TimerStart(lv_remindercooldowntimer, lv_remindercooldown, false, c_timeReal);
            while (!((PlayerGetChargeUsed(lp_stetmannPlayer, lv_abilchargename) > 0.0))) {
                Wait(lv_pollinginterval, c_timeGame);
            }
        }

    }
    return true;
}

trigger auto_libCPCD_gf_CM_AbilityTransmission_StetzoneReminder_Trigger = null;
int auto_libCPCD_gf_CM_AbilityTransmission_StetzoneReminder_lp_stetmannPlayer;

void libCPCD_gf_CM_AbilityTransmission_StetzoneReminder (int lp_stetmannPlayer) {
    auto_libCPCD_gf_CM_AbilityTransmission_StetzoneReminder_lp_stetmannPlayer = lp_stetmannPlayer;

    if (auto_libCPCD_gf_CM_AbilityTransmission_StetzoneReminder_Trigger == null) {
        auto_libCPCD_gf_CM_AbilityTransmission_StetzoneReminder_Trigger = TriggerCreate("auto_libCPCD_gf_CM_AbilityTransmission_StetzoneReminder_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CM_AbilityTransmission_StetzoneReminder_Trigger, false, false);
}

bool auto_libCPCD_gf_CM_AbilityTransmission_StetzoneReminder_TriggerFunc (bool testConds, bool runActions) {
    int lp_stetmannPlayer = auto_libCPCD_gf_CM_AbilityTransmission_StetzoneReminder_lp_stetmannPlayer;

    // Variable Declarations
    fixed lv_reminderdelay;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reminderdelay = (60 * 8);

    // Implementation
    Wait(lv_reminderdelay, c_timeGame);
    if ((libCPCD_gv_cDStetmannStetelliteChanged[lp_stetmannPlayer] == false)) {
        DialogControlSetAnimationState(libCOUI_gv_cU_GPPanel[lp_stetmannPlayer], PlayerGroupSingle(lp_stetmannPlayer), "ReminderStetzones", "Reminder");
        libCPCD_gf_CTCommanderVOSend(lp_stetmannPlayer, SoundLink("StetmannCommander_PowerFieldReminder", -1), PlayerGroupSingle(lp_stetmannPlayer));
    }

    return true;
}

trigger auto_libCPCD_gf_CM_AbilityTransmission_GaryUpgradeReminder_Trigger = null;
int auto_libCPCD_gf_CM_AbilityTransmission_GaryUpgradeReminder_lp_stetmannPlayer;

void libCPCD_gf_CM_AbilityTransmission_GaryUpgradeReminder (int lp_stetmannPlayer) {
    auto_libCPCD_gf_CM_AbilityTransmission_GaryUpgradeReminder_lp_stetmannPlayer = lp_stetmannPlayer;

    if (auto_libCPCD_gf_CM_AbilityTransmission_GaryUpgradeReminder_Trigger == null) {
        auto_libCPCD_gf_CM_AbilityTransmission_GaryUpgradeReminder_Trigger = TriggerCreate("auto_libCPCD_gf_CM_AbilityTransmission_GaryUpgradeReminder_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CM_AbilityTransmission_GaryUpgradeReminder_Trigger, false, false);
}

bool auto_libCPCD_gf_CM_AbilityTransmission_GaryUpgradeReminder_TriggerFunc (bool testConds, bool runActions) {
    int lp_stetmannPlayer = auto_libCPCD_gf_CM_AbilityTransmission_GaryUpgradeReminder_lp_stetmannPlayer;

    // Variable Declarations
    fixed lv_pollinginterval;
    fixed lv_reminderdelay;
    fixed lv_minimumrevivedelay;
    timer lv_remindertimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pollinginterval = 1.0;
    lv_reminderdelay = 60.0;
    lv_minimumrevivedelay = 15.0;
    lv_remindertimer = TimerCreate();

    // Implementation
    TimerStart(lv_remindertimer, lv_reminderdelay, false, c_timeReal);
    while (true) {
        Wait(lv_pollinginterval, c_timeReal);
        if ((TechTreeUnitCount(lp_stetmannPlayer, "SuperGaryStetmann", c_techCountCompleteOnly) > 0)) {
            break;
        }
        else if (((TechTreeUnitCount(lp_stetmannPlayer, "SuperGaryStetmann", c_techCountQueuedOrBetter) > 0) || (TechTreeUnitCount(lp_stetmannPlayer, "HiveStetmann", c_techCountCompleteOnly) == 0))) {
            TimerStart(lv_remindertimer, lv_reminderdelay, false, c_timeReal);
        }
        else if ((UnitIsAlive(libCPGL_gv_commander[lp_stetmannPlayer].lv_heroUnit) == false)) {
            TimerStart(lv_remindertimer, MaxF(lv_minimumrevivedelay, TimerGetRemaining(lv_remindertimer)), false, c_timeReal);
        }
        else if ((TimerGetRemaining(lv_remindertimer) <= 0.0)) {
            libCPCD_gf_CTCommanderVOSend(lp_stetmannPlayer, SoundLink("StetmannCommander_GaryUpgradeReminder", -1), PlayerGroupSingle(lp_stetmannPlayer));
            break;
        }
    }
    return true;
}

trigger auto_libCPCD_gf_CM_AbilityTransmission_MengskReminders_Trigger = null;
int auto_libCPCD_gf_CM_AbilityTransmission_MengskReminders_lp_mengskPlayer;

void libCPCD_gf_CM_AbilityTransmission_MengskReminders (int lp_mengskPlayer) {
    auto_libCPCD_gf_CM_AbilityTransmission_MengskReminders_lp_mengskPlayer = lp_mengskPlayer;

    if (auto_libCPCD_gf_CM_AbilityTransmission_MengskReminders_Trigger == null) {
        auto_libCPCD_gf_CM_AbilityTransmission_MengskReminders_Trigger = TriggerCreate("auto_libCPCD_gf_CM_AbilityTransmission_MengskReminders_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CM_AbilityTransmission_MengskReminders_Trigger, false, false);
}

bool auto_libCPCD_gf_CM_AbilityTransmission_MengskReminders_TriggerFunc (bool testConds, bool runActions) {
    int lp_mengskPlayer = auto_libCPCD_gf_CM_AbilityTransmission_MengskReminders_lp_mengskPlayer;

    // Variable Declarations
    fixed lv_trooperremindertime;
    fixed lv_eliteremindertime;
    fixed lv_artilleryreminder;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_trooperremindertime = (60 * 5);
    lv_eliteremindertime = (60 * 7);
    lv_artilleryreminder = (60 * 10);

    // Implementation
    while (!((GameGetMissionTime() >= lv_trooperremindertime))) {
        Wait(1.0, c_timeGame);
    }
    if ((libCPCD_gv_cM_MengskTrooperEquipped[0] == false)) {
        libCPCD_gf_CTCommanderVOSend(lp_mengskPlayer, SoundLink("MengskCommander_EquipTroopsReminder", -1), PlayerGroupSingle(lp_mengskPlayer));
    }

    while (!((GameGetMissionTime() >= lv_eliteremindertime))) {
        Wait(1.0, c_timeGame);
    }
    if ((libCPCD_gv_cM_MengskEliteBuilt[0] == false)) {
        libCPCD_gf_CTCommanderVOSend(lp_mengskPlayer, SoundLink("MengskCommander_TrainVeteranReminder", -1), PlayerGroupSingle(lp_mengskPlayer));
    }

    while (!((GameGetMissionTime() >= lv_artilleryreminder))) {
        Wait(1.0, c_timeGame);
    }
    if ((libCPCD_gv_cM_MengskArtilleryBuilt[0] == false) && (libCOOC_gf_CC_CommanderLevel(lp_mengskPlayer, "TerranMengsk") >= 3)) {
        libCPCD_gf_CTCommanderVOSend(lp_mengskPlayer, SoundLink("MengskCommander_BuildArtilleryReminder", -1), PlayerGroupSingle(lp_mengskPlayer));
    }

    return true;
}

trigger auto_libCPCD_gf_CM_VOResourceInit_Trigger = null;

void libCPCD_gf_CM_VOResourceInit () {
    if (auto_libCPCD_gf_CM_VOResourceInit_Trigger == null) {
        auto_libCPCD_gf_CM_VOResourceInit_Trigger = TriggerCreate("auto_libCPCD_gf_CM_VOResourceInit_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CM_VOResourceInit_Trigger, false, false);
}

bool auto_libCPCD_gf_CM_VOResourceInit_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    libCPCD_gv_cM_VOResourceReqSendButton = DialogControlLastCreated();
    TriggerEnable(libCPCD_gt_CM_VOResourceSent, true);
    TriggerEnable(libCPCD_gt_CM_VOResourceRequest, true);
    return true;
}

void libCPCD_gf_SendMissionTransmission (string lp_transmissionType, bool lp_waitUntilDone, int lp_sourcePlayer) {
    // Automatic Variable Declarations
    // Implementation
    libCPCD_gv_cM_TransmissionCurrentType = lp_transmissionType;
    libCPCD_gv_cM_TransmissionSource = lp_sourcePlayer;
    TriggerExecute(libCPCD_gt_CM_TransmissionSend, true, lp_waitUntilDone);
}

void libCPCD_gf_SendVictoryTransmission (string lp_mapVictoryTransmission) {
    // Automatic Variable Declarations
    int auto6762D8C0_val;

    // Implementation
    auto6762D8C0_val = RandomInt(1, 3);
    if (auto6762D8C0_val == 1) {
        libCPCD_gf_SendMissionTransmission("Victory", false, 1);
    }
    else if (auto6762D8C0_val == 2) {
        libCPCD_gf_SendMissionTransmission("Victory", false, 2);
    }
    else if (auto6762D8C0_val == 3) {
        libCPCD_gf_SendMissionTransmission(lp_mapVictoryTransmission, false, -1);
    }
    else {
    }
}

void libCPCD_gf_SendSplitMissionTransmission (string lp_transmissionType, bool lp_waitUntilDone, int lp_primaryPlayer, int lp_sourcePlayer) {
    // Variable Declarations
    int lv_indexPlayer;
    playergroup lv_primaryPlayers;
    playergroup lv_secondaryPlayers;

    // Automatic Variable Declarations
    playergroup autoD27D4070_g;

    // Variable Initialization
    lv_primaryPlayers = PlayerGroupEmpty();
    lv_secondaryPlayers = PlayerGroupEmpty();

    // Implementation
    libCPCD_gv_cM_TransmissionPrimaryPlayers = PlayerGroupEmpty();
    libCPCD_gv_cM_TransmissionSecondaryPlayers = PlayerGroupEmpty();
    autoD27D4070_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoD27D4070_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerStatus(lv_indexPlayer) == c_playerStatusLeft)) {
            continue;
        }

        if ((lv_indexPlayer == lp_primaryPlayer)) {
            PlayerGroupAdd(libCPCD_gv_cM_TransmissionPrimaryPlayers, lv_indexPlayer);
        }
        else {
            PlayerGroupAdd(libCPCD_gv_cM_TransmissionSecondaryPlayers, lv_indexPlayer);
        }
    }
    libCPCD_gf_SendMissionTransmission(lp_transmissionType, lp_waitUntilDone, lp_sourcePlayer);
}

void libCPCD_gf_WaitForMissionTransmission () {
    // Variable Declarations
    int lv_originalCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((TriggerActiveCount(libCPCD_gt_CM_TransmissionSend) == 0)) {
        return ;
    }

    lv_originalCount = libCPCD_gv_cM_TransmissionCount;
    while (!(((lv_originalCount != libCPCD_gv_cM_TransmissionCount) || (libCPCD_gv_cM_TransmissionCurrentType == null)))) {
        Wait(0.0625, c_timeGame);
    }
}

void libCPCD_gf_CM_TransmissionUpdateConvoPlayers (string lp_conversation) {
    // Variable Declarations
    playergroup lv_terranPlayers;
    playergroup lv_zergPlayers;
    playergroup lv_protossPlayers;
    playergroup lv_primaryTerranPlayers;
    playergroup lv_primaryZergPlayers;
    playergroup lv_primaryProtossPlayers;
    playergroup lv_secondaryTerranPlayers;
    playergroup lv_secondaryZergPlayers;
    playergroup lv_secondaryProtossPlayers;
    playergroup lv_alarakPlayers;
    playergroup lv_notAlarakPlayers;
    int lv_indexPlayer;
    string lv_adjutantRace;

    // Automatic Variable Declarations
    playergroup autoD209E165_g;
    string auto13D9398E_val;
    string auto922B5786_val;

    // Variable Initialization
    lv_terranPlayers = PlayerGroupEmpty();
    lv_zergPlayers = PlayerGroupEmpty();
    lv_protossPlayers = PlayerGroupEmpty();
    lv_primaryTerranPlayers = PlayerGroupEmpty();
    lv_primaryZergPlayers = PlayerGroupEmpty();
    lv_primaryProtossPlayers = PlayerGroupEmpty();
    lv_secondaryTerranPlayers = PlayerGroupEmpty();
    lv_secondaryZergPlayers = PlayerGroupEmpty();
    lv_secondaryProtossPlayers = PlayerGroupEmpty();
    lv_alarakPlayers = PlayerGroupEmpty();
    lv_notAlarakPlayers = PlayerGroupEmpty();

    // Implementation
    autoD209E165_g = libCPGL_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoD209E165_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerStatus(lv_indexPlayer) == c_playerStatusLeft)) {
            continue;
        }

        if ((lp_conversation == "acVictory")) {
            ConversationDataLineSetPlayers("acVictory", (libCOOC_gf_CC_CommanderConvoTag(libCPGL_gf_ActiveCommanderForPlayer2(lv_indexPlayer))), PlayerGroupSingle(lv_indexPlayer));
        }

        lv_adjutantRace = libCPGL_gv_commander[lv_indexPlayer].lv_race;
        auto13D9398E_val = lv_adjutantRace;
        if (auto13D9398E_val == "Terr") {
            lv_adjutantRace = "Terr";
        }
        else if (auto13D9398E_val == "Prot") {
            lv_adjutantRace = "Prot";
        }
        else if (auto13D9398E_val == "Zerg") {
            lv_adjutantRace = "Zerg";
        }
        else {
            lv_adjutantRace = PlayerRace(lv_indexPlayer);
        }
        auto922B5786_val = lv_adjutantRace;
        if (auto922B5786_val == "Terr") {
            PlayerGroupAdd(lv_terranPlayers, lv_indexPlayer);
            if ((PlayerGroupHasPlayer(libCPCD_gv_cM_TransmissionPrimaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_primaryTerranPlayers, lv_indexPlayer);
            }

            if ((PlayerGroupHasPlayer(libCPCD_gv_cM_TransmissionSecondaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_secondaryTerranPlayers, lv_indexPlayer);
            }

        }
        else if (auto922B5786_val == "Prot") {
            PlayerGroupAdd(lv_protossPlayers, lv_indexPlayer);
            if ((PlayerGroupHasPlayer(libCPCD_gv_cM_TransmissionPrimaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_primaryProtossPlayers, lv_indexPlayer);
            }

            if ((PlayerGroupHasPlayer(libCPCD_gv_cM_TransmissionSecondaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_secondaryProtossPlayers, lv_indexPlayer);
            }

        }
        else if (auto922B5786_val == "Zerg") {
            PlayerGroupAdd(lv_zergPlayers, lv_indexPlayer);
            if ((PlayerGroupHasPlayer(libCPCD_gv_cM_TransmissionPrimaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_primaryZergPlayers, lv_indexPlayer);
            }

            if ((PlayerGroupHasPlayer(libCPCD_gv_cM_TransmissionSecondaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_secondaryZergPlayers, lv_indexPlayer);
            }

        }
        else {
            PlayerGroupAdd(lv_terranPlayers, lv_indexPlayer);
        }
    }
    ConversationDataLineSetPlayers(lp_conversation, ("Protoss"), lv_protossPlayers);
    ConversationDataLineSetPlayers(lp_conversation, ("Terran"), lv_terranPlayers);
    ConversationDataLineSetPlayers(lp_conversation, ("Zerg"), lv_zergPlayers);
    if ((PlayerGroupCount(libCPCD_gv_cM_TransmissionPrimaryPlayers) > 0)) {
        ConversationDataLineSetPlayers(lp_conversation, ("PrimaryProtoss"), lv_primaryProtossPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("PrimaryZerg"), lv_primaryZergPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("PrimaryTerran"), lv_primaryTerranPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("SecondaryProtoss"), lv_secondaryProtossPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("SecondaryZerg"), lv_secondaryZergPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("SecondaryTerran"), lv_secondaryTerranPlayers);
    }

    if ((libCOOC_gf_CC_CurrentMap() == "AC_SlaynPayload")) {
        lv_notAlarakPlayers = libCOOC_gf_CommanderPlayers();
        lv_alarakPlayers = libCOOC_gf_CC_PlayersOfCommander("ProtossAlarak");
        libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_alarakPlayers, lv_notAlarakPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("Alarak"), lv_alarakPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("NotAlarak"), lv_notAlarakPlayers);
    }

    if ((libCOOC_gf_CC_CurrentMap() == "AC_BelshirEscort") && (PlayerGroupCount(libCOOC_gf_CC_PlayersOfCommander("ZergStetmann")) > 0)) {
        ConversationDataLineSetPlayers(lp_conversation, ("Stetmann"), libCOOC_gf_CommanderPlayers());
        ConversationDataLineSetPlayers(lp_conversation, ("NotStetmann"), PlayerGroupSingle(0));
    }

}

bool libCPCD_gf_CM_PlayerHasTransmission (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerStatus(lp_player) != c_playerStatusActive)) {
        return false;
    }

    if ((TransmissionPlayerHasActiveTransmission(lp_player) == false)) {
        return false;
    }

    return true;
}

void libCPCD_gf_CM_SendTransmissionCampaignInternal (bool lp_isPlaceHolder, unit lp_unit, string lp_model, soundlink lp_sound, text lp_speaker, text lp_message, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption, string lp_portraitActor) {
    // Variable Declarations
    int lv_portrait;
    transmissionsource lv_source;
    int lv_localIndex;
    unit lv_oldSpeaker;
    trigger lv_oldTrigger;
    actor lv_talkBubble;
    actor lv_talkRing;
    int lv_ping;
    bool lv_flashOption;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_portrait = c_invalidPortraitId;
    lv_source = TransmissionSource();
    lv_ping = c_invalidPingId;
    lv_flashOption = true;

    // Implementation
    if ((lp_sound == null)) {
        return ;
    }

    libCPCD_gv_cM_SendTransmissionCampaignIndex += 1;
    lv_localIndex = libCPCD_gv_cM_SendTransmissionCampaignIndex;
    lv_oldSpeaker = libCPCD_gv_cM_SendTransmissionCampaignSpeaker;
    libCPCD_gv_cM_SendTransmissionCampaignSpeaker = lp_unit;
    lv_oldTrigger = libCPCD_gv_cM_SendTransmissionCampaignTrigger;
    libCPCD_gv_cM_SendTransmissionCampaignTrigger = TriggerGetCurrent();
    if ((lp_keepPortraitVisible != libCPCD_ge_MissionTransmissionPortraitOptioins_DontShowPortrait) && ((lp_model != null) || ((lp_model == null) && (SoundPortraitModel(lp_sound) != null)) || ((lp_isPlaceHolder == true) && (lp_unit != null)))) {
        if ((libNtve_gf_PlayerInCinematicMode(1) == false) && (libNtve_gf_PlayerInStoryMode(1) == false)) {
            lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft);
        }
        else {
            lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft);
        }
    }
    else {
        lv_portrait = c_invalidPortraitId;
    }
    if (((lp_cueSoundOption == libCPCD_ge_MissionTransmissionCueSoundOptions_PlayCueSound) || ((lp_cueSoundOption == libCPCD_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior) && (libNtve_gf_PlayerInCinematicMode(1) == false) && (lv_portrait != c_invalidPortraitId) && (PortraitVisible(libCPCD_gv_cM_SendTransmissionCampaignPortrait, 1) == false)))) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    libCPCD_gv_cM_SendTransmissionCampaignPortrait = lv_portrait;
    if ((libCPCD_gv_cM_SendTransmissionCampaignPortrait != c_invalidPortraitId)) {
        PortraitSetVisible(libCPCD_gv_cM_SendTransmissionCampaignPortrait, PlayerGroupAll(), true, false);
    }

    libCPCD_gv_cM_SendTransmissionCampaignPlayingTick = 3;
    if ((lp_unit == null)) {
        if ((lv_portrait == c_invalidPortraitId)) {
            lv_source = TransmissionSource();
        }
        else {
            if ((lp_model == null)) {
                lv_source = TransmissionSourceFromModel(null);
            }
            else {
                lv_source = TransmissionSourceFromModel(lp_model);
            }
        }
    }
    else {
        if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
            lv_flashOption = false;
        }
        else {
            lv_flashOption = true;
        }
        if ((lp_isPlaceHolder == false)) {
            lv_source = TransmissionSourceFromUnit(lp_unit, lv_flashOption, false, "Talk");
        }
        else {
            if ((lp_model == null)) {
                if ((PlayerType(UnitGetOwner(lp_unit)) == c_playerTypeUser)) {
                    lv_source = TransmissionSourceFromUnit(lp_unit, lv_flashOption, true, "Talk");
                }

            }
            else {
                lv_source = TransmissionSourceFromModel(lp_model);
            }
        }
    }
    if ((lp_unit != null) && (lp_unit != lv_oldSpeaker) && (UnitIsAlive(lp_unit) == true)) {
        if ((libCPCD_gv_cM_SendTransmissionCampaignChatBubbleOn == true)) {
            if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
                if (((UnitGetType(lp_unit) == "Marine") || (UnitGetType(lp_unit) == "WarPig") || (UnitGetType(lp_unit) == "MengskMarine") || (UnitGetType(lp_unit) == "Medic") || (UnitGetType(lp_unit) == "Firebat") || (UnitGetType(lp_unit) == "Marauder"))) {
                    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelAdditionHarness TalkIconBubble {Overhead 0} 0.000000,0.000000,0.500000");
                }
                else {
                    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelAdditionHarness TalkIconBubble {Overhead 0} 0.000000,0.000000,0.600000");
                }
            }
            else {
                ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelAdditionHarness TalkIconBubble {Overhead 0} 0.000000,0.000000,0.600000");
            }
            lv_talkBubble = ActorFrom("::LastCreatedActual");
            libNtve_gf_AttachModelToUnit(lp_unit, "TalkIconRing", "Ref_Origin");
            lv_talkRing = libNtve_gf_ActorLastCreated();
        }

        if ((libNtve_gf_UnitIsVisibleToPlayer(lp_unit, 1) == true)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "TalkIcon", PointWithOffset(UnitGetPosition(lp_unit), 0.5, 3.5), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 2.0, 270.0);
            lv_ping = PingLastCreated();
            PingSetScale(PingLastCreated(), 0.3);
        }

    }

    TransmissionSendAdvanced(PlayerGroupAll(), lv_source, lv_portrait, lp_portraitActor, "Talk", lp_sound, lp_speaker, lp_message, lp_duration, lp_durationType, lp_waitUntilDone);
    if ((lp_waitUntilDone == false)) {
        libCPCD_gf_CM_SendTransmissionCampaignCleanUp(TransmissionLastSent(), lp_keepPortraitVisible, lv_portrait, lv_talkBubble, lv_ping, lv_localIndex);
    }
    else {
        libCPCD_gf_CM_SendTransmissionCampaignCleanUp(c_invalidTransmissionId, lp_keepPortraitVisible, lv_portrait, lv_talkBubble, lv_ping, lv_localIndex);
    }
}

trigger auto_libCPCD_gf_CM_SendTransmissionCampaignCleanUp_Trigger = null;
int auto_libCPCD_gf_CM_SendTransmissionCampaignCleanUp_lp_transmission;
int auto_libCPCD_gf_CM_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible;
int auto_libCPCD_gf_CM_SendTransmissionCampaignCleanUp_lp_portrait;
actor auto_libCPCD_gf_CM_SendTransmissionCampaignCleanUp_lp_talkIcon;
int auto_libCPCD_gf_CM_SendTransmissionCampaignCleanUp_lp_ping;
int auto_libCPCD_gf_CM_SendTransmissionCampaignCleanUp_lp_localIndex;

void libCPCD_gf_CM_SendTransmissionCampaignCleanUp (int lp_transmission, int lp_keepPortraitVisible, int lp_portrait, actor lp_talkIcon, int lp_ping, int lp_localIndex) {
    auto_libCPCD_gf_CM_SendTransmissionCampaignCleanUp_lp_transmission = lp_transmission;
    auto_libCPCD_gf_CM_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible = lp_keepPortraitVisible;
    auto_libCPCD_gf_CM_SendTransmissionCampaignCleanUp_lp_portrait = lp_portrait;
    auto_libCPCD_gf_CM_SendTransmissionCampaignCleanUp_lp_talkIcon = lp_talkIcon;
    auto_libCPCD_gf_CM_SendTransmissionCampaignCleanUp_lp_ping = lp_ping;
    auto_libCPCD_gf_CM_SendTransmissionCampaignCleanUp_lp_localIndex = lp_localIndex;

    if (auto_libCPCD_gf_CM_SendTransmissionCampaignCleanUp_Trigger == null) {
        auto_libCPCD_gf_CM_SendTransmissionCampaignCleanUp_Trigger = TriggerCreate("auto_libCPCD_gf_CM_SendTransmissionCampaignCleanUp_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CM_SendTransmissionCampaignCleanUp_Trigger, false, false);
}

bool auto_libCPCD_gf_CM_SendTransmissionCampaignCleanUp_TriggerFunc (bool testConds, bool runActions) {
    int lp_transmission = auto_libCPCD_gf_CM_SendTransmissionCampaignCleanUp_lp_transmission;
    int lp_keepPortraitVisible = auto_libCPCD_gf_CM_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible;
    int lp_portrait = auto_libCPCD_gf_CM_SendTransmissionCampaignCleanUp_lp_portrait;
    actor lp_talkIcon = auto_libCPCD_gf_CM_SendTransmissionCampaignCleanUp_lp_talkIcon;
    int lp_ping = auto_libCPCD_gf_CM_SendTransmissionCampaignCleanUp_lp_ping;
    int lp_localIndex = auto_libCPCD_gf_CM_SendTransmissionCampaignCleanUp_lp_localIndex;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_transmission != c_invalidTransmissionId)) {
        TransmissionWait(lp_transmission, 0.0);
    }

    Wait(0.75, c_timeReal);
    if ((lp_localIndex != libCPCD_gv_cM_SendTransmissionCampaignIndex)) {
        if ((libCPCD_gv_cM_SendTransmissionCampaignPortrait != lp_portrait) && (lp_portrait != c_invalidPortraitId) && (lp_keepPortraitVisible == libCPCD_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter)) {
            PortraitSetModel(lp_portrait, "StaticPortrait", false);
            PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
        }

        return true;
    }

    libCPCD_gv_cM_SendTransmissionCampaignIndex = 0;
    libCPCD_gv_cM_SendTransmissionCampaignSpeaker = null;
    TriggerExecute(libCPCD_gt_CM_SendTransmissionCampaignTick, true, false);
    if ((lp_keepPortraitVisible == libCPCD_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter) && (lp_portrait != c_invalidPortraitId)) {
        PortraitSetModel(lp_portrait, "StaticPortrait", false);
        PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    }

    if ((lp_talkIcon != null)) {
        libNtve_gf_KillModel(lp_talkIcon);
    }

    if ((lp_ping != c_invalidPingId)) {
        PingDestroy(lp_ping);
    }

    return true;
}

void libCPCD_gf_HideCampaignTransmissionPortrait () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_HideAllCinematicPortraits(PlayerGroupAll());
}

void libCPCD_gf_TurnTransmissionOptionsOnOffCampaign (int lp_option, bool lp_onOff) {
    // Automatic Variable Declarations
    int auto0C42E917_val;

    // Implementation
    auto0C42E917_val = lp_option;
    if (auto0C42E917_val == libCPCD_ge_MissionTransmissionOptions_ChatBubble) {
        libCPCD_gv_cM_SendTransmissionCampaignChatBubbleOn = lp_onOff;
    }
    else {
    }
}

fixed libCPCD_gf_ConvesationLineDuration (string lp_conversationLine) {
    // Variable Declarations
    soundlink lv_sound;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);

    // Implementation
    lv_sound = SoundLink(ConversationDataGetSound(lp_conversationLine, true), c_soundIndexAny);
    return SoundLengthSync(lv_sound);
}

void libCPCD_gf_SendTransmissionCampaign (unit lp_unit, string lp_conversationLine, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption) {
    // Variable Declarations
    soundlink lv_sound;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);

    // Implementation
    lv_sound = SoundLink(ConversationDataGetSound(lp_conversationLine, true), c_soundIndexAny);
    if ((lv_sound == null)) {
        return ;
    }

    libCPCD_gf_CM_SendTransmissionCampaignInternal(false, lp_unit, null, lv_sound, null, null, lp_durationType, lp_duration, lp_waitUntilDone, lp_keepPortraitVisible, lp_cueSoundOption, CatalogFieldValueGet(c_gameCatalogSound, ConversationDataGetSound(lp_conversationLine, true), "AssetArray[" + IntToString(0) + "].PortraitActor", c_playerAny));
}

void libCPCD_gf_SendTransmissionCampaignPlaceHolder (unit lp_unit, string lp_model, text lp_speaker, text lp_message, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption) {
    // Variable Declarations
    soundlink lv_sound;
    string lv_portraitActor;

    // Automatic Variable Declarations
    string autoC57E8E4A_val;

    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_portraitActor = "";

    // Implementation
    autoC57E8E4A_val = UnitGetType(lp_unit);
    if (autoC57E8E4A_val == "KerriganVoidUlnar02") {
        lv_portraitActor = "KerriganPrimalPortrait";
    }
    else if (autoC57E8E4A_val == "KerriganVoidBurrowed") {
        lv_portraitActor = "KerriganPrimalPortrait";
    }
    else if (autoC57E8E4A_val == "KerriganEpilogue02") {
        lv_portraitActor = "KerriganPrimalPortrait";
    }
    else {
    }
    lv_sound = SoundLink("PlaceholderSoundFile", c_soundIndexAny);
    libCPCD_gf_CM_SendTransmissionCampaignInternal(true, lp_unit, lp_model, lv_sound, lp_speaker, (StringExternal("Param/Value/lib_CPCD_405F6DD4") + lp_message), c_transmissionDurationSet, lp_duration, lp_waitUntilDone, lp_keepPortraitVisible, lp_cueSoundOption, lv_portraitActor);
}

void libCPCD_gf_CM_GPRemindersInit () {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto76DEA9E8_g;
    string autoAE294DDD_val;

    // Variable Initialization

    // Implementation
    auto76DEA9E8_g = libCPGL_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto76DEA9E8_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if (((libCPCD_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer) == 3) || (libCPCD_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer) == 4) || (libCPGL_gv_commander[lv_indexPlayer].lv_commanderLevel <= 2))) {
            libCPCD_gv_cM_GPRemindersOn[lv_indexPlayer] = false;
            return ;
        }

        autoAE294DDD_val = libCPGL_gv_commander[lv_indexPlayer].lv_commander;
        if (autoAE294DDD_val == "Raynor") {
            libCPCD_gv_cM_GPRemindersOn[lv_indexPlayer] = true;
            libCPCD_gf_CM_GPReminderRaynor(lv_indexPlayer);
        }
        else if (autoAE294DDD_val == "Artanis") {
            libCPCD_gv_cM_GPRemindersOn[lv_indexPlayer] = true;
            TriggerEnable(libCPCD_gt_CM_GPReminderAbilityUsed, true);
            libCPCD_gf_CM_GPReminderArtanis(lv_indexPlayer);
        }
        else if (autoAE294DDD_val == "Vorazun") {
            libCPCD_gv_cM_GPRemindersOn[lv_indexPlayer] = true;
            TriggerEnable(libCPCD_gt_CM_GPReminderAbilityUsed, true);
            libCPCD_gf_CM_GPReminderVorazun(lv_indexPlayer);
        }
        else if (autoAE294DDD_val == "Abathur") {
            libCPCD_gv_cM_GPRemindersOn[lv_indexPlayer] = true;
            TriggerEnable(libCPCD_gt_CM_GPReminderAbilityUsed, true);
            libCPCD_gf_CM_GPReminderAbathur(lv_indexPlayer);
        }
        else if (autoAE294DDD_val == "Horner") {
            libCPCD_gv_cM_GPRemindersOn[lv_indexPlayer] = true;
            TriggerEnable(libCPCD_gt_CM_GPReminderAbilityUsed, true);
            libCPCD_gf_CM_GPReminderHorner(lv_indexPlayer);
        }
        else if (autoAE294DDD_val == "Tychus") {
            libCPCD_gv_cM_GPRemindersOn[lv_indexPlayer] = true;
            TriggerEnable(libCPCD_gt_CM_GPReminderAbilityUsed, true);
            libCPCD_gf_CM_GPReminderTychus(lv_indexPlayer);
        }
        else {
            libCPCD_gv_cM_GPRemindersOn[lv_indexPlayer] = false;
        }
    }
}

trigger auto_libCPCD_gf_CM_GPReminderRaynor_Trigger = null;
int auto_libCPCD_gf_CM_GPReminderRaynor_lp_player;

void libCPCD_gf_CM_GPReminderRaynor (int lp_player) {
    auto_libCPCD_gf_CM_GPReminderRaynor_lp_player = lp_player;

    if (auto_libCPCD_gf_CM_GPReminderRaynor_Trigger == null) {
        auto_libCPCD_gf_CM_GPReminderRaynor_Trigger = TriggerCreate("auto_libCPCD_gf_CM_GPReminderRaynor_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CM_GPReminderRaynor_Trigger, false, false);
}

bool auto_libCPCD_gf_CM_GPReminderRaynor_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCPCD_gf_CM_GPReminderRaynor_lp_player;

    // Variable Declarations
    timer lv_reminderTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reminderTimer = TimerCreate();

    // Implementation
    TimerStart(lv_reminderTimer, 600.0, false, c_timeGame);
    libNtve_gf_WaitForTimer(lv_reminderTimer, 0.0, false);
    if ((libCPCD_gv_cM_GPRemindersOn[lp_player] == false)) {
        return true;
    }

    libCOUI_gf_CU_GPHighlightButton(1, true, lp_player);
    libCOUI_gf_CU_GPHighlightButton(2, true, lp_player);
    return true;
}

trigger auto_libCPCD_gf_CM_GPReminderArtanis_Trigger = null;
int auto_libCPCD_gf_CM_GPReminderArtanis_lp_player;

void libCPCD_gf_CM_GPReminderArtanis (int lp_player) {
    auto_libCPCD_gf_CM_GPReminderArtanis_lp_player = lp_player;

    if (auto_libCPCD_gf_CM_GPReminderArtanis_Trigger == null) {
        auto_libCPCD_gf_CM_GPReminderArtanis_Trigger = TriggerCreate("auto_libCPCD_gf_CM_GPReminderArtanis_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CM_GPReminderArtanis_Trigger, false, false);
}

bool auto_libCPCD_gf_CM_GPReminderArtanis_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCPCD_gf_CM_GPReminderArtanis_lp_player;

    // Automatic Variable Declarations
    // Implementation
    while ((libCPCD_gv_cM_GPRemindersOn[lp_player] == true)) {
        if ((UnitGetPropertyFixed(libCPGL_gv_commander[lp_player].lv_globalCasterUnit, c_unitPropEnergyPercent, c_unitPropCurrent) == 100.0)) {
            break;
        }

        Wait(2.0, c_timeGame);
    }
    Wait(10.0, c_timeGame);
    if ((libCPCD_gv_cM_GPRemindersOn[lp_player] == false)) {
        return true;
    }

    libCOUI_gf_CU_GPHighlightButton(2, true, lp_player);
    libCOUI_gf_CU_GPHighlightButton(3, true, lp_player);
    while (!((UnitGetPropertyFixed(libCPGL_gv_commander[lp_player].lv_globalCasterUnit, c_unitPropEnergyPercent, c_unitPropCurrent) < 100.0))) {
        Wait(1.0, c_timeGame);
    }
    libCPCD_gf_CM_GPReminderDisable(lp_player);
    return true;
}

trigger auto_libCPCD_gf_CM_GPReminderVorazun_Trigger = null;
int auto_libCPCD_gf_CM_GPReminderVorazun_lp_player;

void libCPCD_gf_CM_GPReminderVorazun (int lp_player) {
    auto_libCPCD_gf_CM_GPReminderVorazun_lp_player = lp_player;

    if (auto_libCPCD_gf_CM_GPReminderVorazun_Trigger == null) {
        auto_libCPCD_gf_CM_GPReminderVorazun_Trigger = TriggerCreate("auto_libCPCD_gf_CM_GPReminderVorazun_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CM_GPReminderVorazun_Trigger, false, false);
}

bool auto_libCPCD_gf_CM_GPReminderVorazun_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCPCD_gf_CM_GPReminderVorazun_lp_player;

    // Automatic Variable Declarations
    // Implementation
    while ((libCPCD_gv_cM_GPRemindersOn[lp_player] == true)) {
        if ((UnitGetPropertyFixed(libCPGL_gv_commander[lp_player].lv_globalCasterUnit, c_unitPropEnergyPercent, c_unitPropCurrent) == 100.0)) {
            break;
        }

        Wait(2.0, c_timeGame);
    }
    Wait(10.0, c_timeGame);
    if ((libCPCD_gv_cM_GPRemindersOn[lp_player] == false)) {
        return true;
    }

    libCOUI_gf_CU_GPHighlightButton(1, true, lp_player);
    libCOUI_gf_CU_GPHighlightButton(2, true, lp_player);
    libCOUI_gf_CU_GPHighlightButton(3, true, lp_player);
    while (!((UnitGetPropertyFixed(libCPGL_gv_commander[lp_player].lv_globalCasterUnit, c_unitPropEnergyPercent, c_unitPropCurrent) < 100.0))) {
        Wait(1.0, c_timeGame);
    }
    libCPCD_gf_CM_GPReminderDisable(lp_player);
    return true;
}

trigger auto_libCPCD_gf_CM_GPReminderAbathur_Trigger = null;
int auto_libCPCD_gf_CM_GPReminderAbathur_lp_player;

void libCPCD_gf_CM_GPReminderAbathur (int lp_player) {
    auto_libCPCD_gf_CM_GPReminderAbathur_lp_player = lp_player;

    if (auto_libCPCD_gf_CM_GPReminderAbathur_Trigger == null) {
        auto_libCPCD_gf_CM_GPReminderAbathur_Trigger = TriggerCreate("auto_libCPCD_gf_CM_GPReminderAbathur_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CM_GPReminderAbathur_Trigger, false, false);
}

bool auto_libCPCD_gf_CM_GPReminderAbathur_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCPCD_gf_CM_GPReminderAbathur_lp_player;

    // Variable Declarations
    timer lv_reminderTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reminderTimer = TimerCreate();

    // Implementation
    TimerStart(lv_reminderTimer, 600.0, false, c_timeGame);
    libNtve_gf_WaitForTimer(lv_reminderTimer, 0.0, false);
    if ((libCPCD_gv_cM_GPRemindersOn[lp_player] == false)) {
        return true;
    }

    libCOUI_gf_CU_GPHighlightButton(1, true, lp_player);
    libCOUI_gf_CU_GPHighlightButton(2, true, lp_player);
    return true;
}

trigger auto_libCPCD_gf_CM_GPReminderHorner_Trigger = null;
int auto_libCPCD_gf_CM_GPReminderHorner_lp_player;

void libCPCD_gf_CM_GPReminderHorner (int lp_player) {
    auto_libCPCD_gf_CM_GPReminderHorner_lp_player = lp_player;

    if (auto_libCPCD_gf_CM_GPReminderHorner_Trigger == null) {
        auto_libCPCD_gf_CM_GPReminderHorner_Trigger = TriggerCreate("auto_libCPCD_gf_CM_GPReminderHorner_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CM_GPReminderHorner_Trigger, false, false);
}

bool auto_libCPCD_gf_CM_GPReminderHorner_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCPCD_gf_CM_GPReminderHorner_lp_player;

    // Variable Declarations
    timer lv_reminderTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reminderTimer = TimerCreate();

    // Implementation
    TimerStart(lv_reminderTimer, 600.0, false, c_timeGame);
    libNtve_gf_WaitForTimer(lv_reminderTimer, 0.0, false);
    if ((libCPCD_gv_cM_GPRemindersOn[lp_player] == false)) {
        return true;
    }

    libCOUI_gf_CU_GPHighlightButton(1, true, lp_player);
    if ((libCOOC_gf_CC_PerkStateCheck("HornerPHLevel5", libCOOC_ge_CC_PerkState_Locked, "TerranHorner", lp_player) == false)) {
        libCOUI_gf_CU_GPHighlightButton(3, true, lp_player);
    }

    if ((libCOOC_gf_CC_PerkStateCheck("HornerPHLevel10", libCOOC_ge_CC_PerkState_Locked, "TerranHorner", lp_player) == false)) {
        libCOUI_gf_CU_GPHighlightButton(4, true, lp_player);
    }

    return true;
}

trigger auto_libCPCD_gf_CM_GPReminderTychus_Trigger = null;
int auto_libCPCD_gf_CM_GPReminderTychus_lp_player;

void libCPCD_gf_CM_GPReminderTychus (int lp_player) {
    auto_libCPCD_gf_CM_GPReminderTychus_lp_player = lp_player;

    if (auto_libCPCD_gf_CM_GPReminderTychus_Trigger == null) {
        auto_libCPCD_gf_CM_GPReminderTychus_Trigger = TriggerCreate("auto_libCPCD_gf_CM_GPReminderTychus_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_CM_GPReminderTychus_Trigger, false, false);
}

bool auto_libCPCD_gf_CM_GPReminderTychus_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCPCD_gf_CM_GPReminderTychus_lp_player;

    // Variable Declarations
    timer lv_reminderTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reminderTimer = TimerCreate();

    // Implementation
    TimerStart(lv_reminderTimer, 600.0, false, c_timeGame);
    libNtve_gf_WaitForTimer(lv_reminderTimer, 0.0, false);
    if ((libCPCD_gv_cM_GPRemindersOn[lp_player] == false)) {
        return true;
    }

    libCOUI_gf_CU_GPHighlightButton(2, true, lp_player);
    return true;
}

void libCPCD_gf_CM_GPReminderDisable (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPCD_gv_cM_GPRemindersOn[lp_player] == false)) {
        return ;
    }

    libCPCD_gv_cM_GPRemindersOn[lp_player] = false;
    libCOUI_gf_CU_GPHighlightButton(1, false, lp_player);
    libCOUI_gf_CU_GPHighlightButton(2, false, lp_player);
    libCOUI_gf_CU_GPHighlightButton(3, false, lp_player);
    libCOUI_gf_CU_GPHighlightButton(4, false, lp_player);
}

bool libCPCD_gf_ValidAntiAirUnitIsNearUnit (int lp_player, unit lp_unit) {
    // Variable Declarations
    bool lv_validAttackerFound;
    point lv_unitPosition;

    // Automatic Variable Declarations
    unitgroup auto7B30242E_g;
    int auto7B30242E_u;
    unit auto7B30242E_var;
    unitgroup auto4C0BD608_g;
    int auto4C0BD608_u;
    unit auto4C0BD608_var;

    // Variable Initialization

    // Implementation
    lv_unitPosition = UnitGetPosition(lp_unit);
    auto7B30242E_g = UnitGroup(null, lp_player, RegionCircle(lv_unitPosition, 16.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7B30242E_u = UnitGroupCount(auto7B30242E_g, c_unitCountAll);
    for (;; auto7B30242E_u -= 1) {
        auto7B30242E_var = UnitGroupUnitFromEnd(auto7B30242E_g, auto7B30242E_u);
        if (auto7B30242E_var == null) { break; }
        if ((UnitCanAttackTarget(auto7B30242E_var, lp_unit) == true)) {
            lv_validAttackerFound = true;
            break;
        }

    }
    if ((lv_validAttackerFound == false)) {
        auto4C0BD608_g = UnitGroup(null, lp_player, RegionCircle(lv_unitPosition, 8.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto4C0BD608_u = UnitGroupCount(auto4C0BD608_g, c_unitCountAll);
        for (;; auto4C0BD608_u -= 1) {
            auto4C0BD608_var = UnitGroupUnitFromEnd(auto4C0BD608_g, auto4C0BD608_u);
            if (auto4C0BD608_var == null) { break; }
            if ((UnitCanAttackTarget(auto4C0BD608_var, lp_unit) == true)) {
                lv_validAttackerFound = true;
                break;
            }

        }
    }

    return lv_validAttackerFound;
}

trigger auto_libCPCD_gf_RemindPlayertoCreateAntiAirUnits_Trigger = null;

void libCPCD_gf_RemindPlayertoCreateAntiAirUnits () {
    if (auto_libCPCD_gf_RemindPlayertoCreateAntiAirUnits_Trigger == null) {
        auto_libCPCD_gf_RemindPlayertoCreateAntiAirUnits_Trigger = TriggerCreate("auto_libCPCD_gf_RemindPlayertoCreateAntiAirUnits_TriggerFunc");
    }

    TriggerExecute(auto_libCPCD_gf_RemindPlayertoCreateAntiAirUnits_Trigger, false, false);
}

bool auto_libCPCD_gf_RemindPlayertoCreateAntiAirUnits_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_currentUnit;
    bool lv_sendTransmission;

    // Automatic Variable Declarations
    unitgroup auto0B040C7D_g;
    int auto0B040C7D_u;

    // Variable Initialization

    // Implementation
    while (true) {
        auto0B040C7D_g = UnitGroupAlliance(1, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterPassive - 32))), 0);
        auto0B040C7D_u = UnitGroupCount(auto0B040C7D_g, c_unitCountAll);
        for (;; auto0B040C7D_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(auto0B040C7D_g, auto0B040C7D_u);
            if (lv_currentUnit == null) { break; }
            if ((UnitGroupCount(UnitGroup(null, 1, RegionCircle(UnitGetPosition(lv_currentUnit), 4.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                if ((libCPCD_gf_ValidAntiAirUnitIsNearUnit(1, lv_currentUnit) == false)) {
                    Wait(5.0, c_timeAI);
                    if ((UnitIsAlive(lv_currentUnit) == true)) {
                        if ((UnitGroupCount(UnitGroup(null, 1, RegionCircle(UnitGetPosition(lv_currentUnit), 4.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) && (libCPCD_gf_ValidAntiAirUnitIsNearUnit(1, lv_currentUnit) == false)) {
                            lv_sendTransmission = true;
                        }

                    }

                }

                break;
            }

            Wait(0.1, c_timeAI);
        }
        if ((lv_sendTransmission == true)) {
            break;
        }

        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    if ((libCPGL_gf_GameIsOver() == true)) {
        return true;
    }

    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

void libCPCD_gf_PlayerInfoShowHide (int lp_player, bool lp_showhide) {
    // Variable Declarations
    int lv_humanPlayerCount;
    int lv_indexPlayer;
    bool lv_showHide;

    // Automatic Variable Declarations
    playergroup auto7AEB979F_g;

    // Variable Initialization
    lv_humanPlayerCount = PlayerGroupCount(libCPGL_gf_HumanPlayers());

    // Implementation
    if ((lp_showhide == true)) {
        lv_showHide = true;
    }
    else {
        lv_showHide = false;
    }
    libCPCD_gv_playerInfoVisible[lp_player] = lv_showHide;
    libCPCD_gf_PlayerInfoCreate(lp_player);
    DialogSetVisible(libCPCD_gv_playerInfoFrame[lp_player], PlayerGroupSingle(lp_player), lp_showhide);
    auto7AEB979F_g = libCPGL_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto7AEB979F_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        DialogControlSetVisible(libCPCD_gv_playerInfoButton[lp_player][lv_indexPlayer], PlayerGroupSingle(lp_player), lp_showhide);
    }
}

void libCPCD_gf_PlayerInfoCreate (int lp_player) {
    // Variable Declarations
    int lv_humanPlayerCount;
    int lv_indexPlayer;
    int lv_indexColumn;
    int lv_indexRow;

    // Automatic Variable Declarations
    playergroup auto8B3267B9_g;

    // Variable Initialization
    lv_humanPlayerCount = PlayerGroupCount(libCPGL_gf_HumanPlayers());

    // Implementation
    if ((libCPCD_gv_playerInfoFrame[lp_player] == c_invalidDialogId)) {
    }
    else {
        return ;
    }
    DialogCreate(36, 36, c_anchorBottomRight, -350, -350, true);
    libCPCD_gv_playerInfoScreenButtonFrame[lp_player] = DialogLastCreated();
    DialogSetImage(libCPCD_gv_playerInfoScreenButtonFrame[lp_player], libCPCD_gf_GetCommanderDataConsoleFrame(lp_player));
    libNtve_gf_CreateDialogItemButton(libCPCD_gv_playerInfoScreenButtonFrame[lp_player], 36, 36, c_anchorBottomLeft, -350, -350, StringExternal("Param/Value/lib_CPCD_83819D0A"), StringExternal("Param/Value/lib_CPCD_EA72ECF1"), "Assets\\Textures\\ui-editoricon-dataeditor_viewastree.dds");
    libCPCD_gv_playerInfoScreenButton[lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemColor(libCPCD_gv_playerInfoScreenButton[lp_player], libCPCD_gf_GetCommanderDataConsoleColor(lp_player), PlayerGroupSingle(1));
    DialogCreate((100 * 4), (100 * 3), c_anchorCenter, 0, 0, true);
    libCPCD_gv_playerInfoFrame[lp_player] = DialogLastCreated();
    DialogSetImage(libCPCD_gv_playerInfoFrame[lp_player], libCPCD_gf_GetCommanderDataConsoleFrame(lp_player));
    auto8B3267B9_g = libCPGL_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto8B3267B9_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if (((lv_indexPlayer >= 1) && (lv_indexPlayer <= 3))) {
            lv_indexColumn = 0;
        }
        else if (((lv_indexPlayer >= 4) && (lv_indexPlayer <= 6))) {
            lv_indexColumn = 1;
        }
        else if (((lv_indexPlayer >= 7) && (lv_indexPlayer <= 9))) {
            lv_indexColumn = 2;
        }
        else if (((lv_indexPlayer >= 10) && (lv_indexPlayer <= 12))) {
            lv_indexColumn = 3;
        }
        if (((lv_indexPlayer >= 1) && (lv_indexPlayer <= 4))) {
            lv_indexRow = 0;
        }
        else if (((lv_indexPlayer >= 5) && (lv_indexPlayer <= 8))) {
            lv_indexRow = 1;
        }
        else if (((lv_indexPlayer >= 9) && (lv_indexPlayer <= 12))) {
            lv_indexRow = 2;
        }
        TextExpressionSetToken("Param/Expression/lib_CPCD_BCC4419B", "A", TextWithColor(libCPGL_gv_commander[lv_indexPlayer].lv_commanderName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
        TextExpressionSetToken("Param/Expression/lib_CPCD_BCC4419B", "P", TextWithColor(PlayerName(lv_indexPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_indexPlayer, false))));
        TextExpressionSetToken("Param/Expression/lib_CPCD_BCC4419B", "B", TextWithColor(libCPGL_gv_commander[lv_indexPlayer].lv_prestigeName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
        TextExpressionSetToken("Param/Expression/lib_CPCD_BCC4419B", "C", TextWithColor(libCPGL_gv_commander[lv_indexPlayer].lv_prestigeDescription, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
        libNtve_gf_CreateDialogItemButton(libCPCD_gv_playerInfoFrame[lp_player], 90, 90, c_anchorCenter, (200 - (lv_indexColumn * 100)), (150 - (lv_indexRow * 100)), TextExpressionAssemble("Param/Expression/lib_CPCD_BCC4419B"), StringToText(""), "");
        libCPCD_gv_playerInfoButton[lp_player][lv_indexPlayer] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImage(libCPCD_gv_playerInfoButton[lp_player][lv_indexPlayer], libCPCD_gf_GetCommanderDataCommanderImage(lv_indexPlayer), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemImage2(libCPCD_gv_playerInfoButton[lp_player][lv_indexPlayer], libCPGL_gv_commander[lv_indexPlayer].lv_prestigeIcon, PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemBorderColor(libCPCD_gv_playerInfoButton[lp_player][lv_indexPlayer], libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_indexPlayer, false)), PlayerGroupSingle(lp_player));
    }
}

string libCPCD_gf_GetCommanderDataConsoleFrame (int lp_player) {
    // Automatic Variable Declarations
    string autoF978B256_val;

    // Implementation
    autoF978B256_val = libCPGL_gv_commander[lp_player].lv_commander;
    if (autoF978B256_val == "Abathur") {
        return "Assets\\Textures\\ui_console_chatbar_background_evolved.dds";
    }
    else if (autoF978B256_val == "Alarak") {
        return "Assets\\Textures\\ui_console_chatbar_background_forged.dds";
    }
    else if (autoF978B256_val == "Artanis") {
        return "Assets\\Textures\\ui_console_chatbar_background_defaultprotoss.dds";
    }
    else if (autoF978B256_val == "Dehaka") {
        return "Assets\\Textures\\ui_console_chatbar_background_primal.dds";
    }
    else if (autoF978B256_val == "Fenix") {
        return "Assets\\Textures\\ui_console_chatbar_background_purifier.dds";
    }
    else if (autoF978B256_val == "Horner") {
        return "Assets\\Textures\\ui_console_chatbar_background_mirasmarauders.dds";
    }
    else if (autoF978B256_val == "Karax") {
        return "Assets\\Textures\\ui_console_chatbar_background_defaultprotoss.dds";
    }
    else if (autoF978B256_val == "Kerrigan") {
        return "Assets\\Textures\\ui_console_chatbar_background_defaultzerg.dds";
    }
    else if (autoF978B256_val == "Mengsk") {
        return "Assets\\Textures\\ui_console_chatbar_background_imperial.dds";
    }
    else if (autoF978B256_val == "Nova") {
        return "Assets\\Textures\\ui_console_chatbar_background_specialforces.dds";
    }
    else if (autoF978B256_val == "Raynor") {
        return "Assets\\Textures\\ui_console_chatbar_background_defaultterran.dds";
    }
    else if (autoF978B256_val == "Stetmann") {
        return "Assets\\Textures\\ui_console_chatbar_background_simulant.dds";
    }
    else if (autoF978B256_val == "Stukov") {
        return "Assets\\Textures\\ui_console_chatbar_background_cerberus.dds";
    }
    else if (autoF978B256_val == "Swann") {
        return "Assets\\Textures\\ui_console_chatbar_background_machined.dds";
    }
    else if (autoF978B256_val == "Tychus") {
        return "Assets\\Textures\\ui_console_chatbar_background_defaultterran.dds";
    }
    else if (autoF978B256_val == "Vorazun") {
        return "Assets\\Textures\\ui_console_chatbar_background_nerazim.dds";
    }
    else if (autoF978B256_val == "Zagara") {
        return "Assets\\Textures\\ui_console_chatbar_background_defaultzerg.dds";
    }
    else if (autoF978B256_val == "Zeratul") {
        return "Assets\\Textures\\ui_console_chatbar_background_ihanrii.dds";
    }
    else {
        return "Assets\\Textures\\ui_console_chatbar_background_defaultterran.dds";
    }
}

color libCPCD_gf_GetCommanderDataConsoleColor (int lp_player) {
    // Automatic Variable Declarations
    string auto20BD0C65_val;

    // Implementation
    auto20BD0C65_val = libCPGL_gv_commander[lp_player].lv_commander;
    if (auto20BD0C65_val == "Abathur") {
        return Color(92.16, 88.24, 16.08);
    }
    else if (auto20BD0C65_val == "Alarak") {
        return Color(25.10, 0.00, 0.00);
    }
    else if (auto20BD0C65_val == "Artanis") {
        return Color(10.98, 65.49, 91.76);
    }
    else if (auto20BD0C65_val == "Dehaka") {
        return Color(41.18, 78.04, 83.92);
    }
    else if (auto20BD0C65_val == "Fenix") {
        return Color(99.61, 54.12, 5.49);
    }
    else if (auto20BD0C65_val == "Horner") {
        return Color(29.02, 10.59, 27.84);
    }
    else if (auto20BD0C65_val == "Karax") {
        return Color(92.16, 88.24, 16.08);
    }
    else if (auto20BD0C65_val == "Kerrigan") {
        return Color(100.00, 0.00, 100.00);
    }
    else if (auto20BD0C65_val == "Mengsk") {
        return Color(78.43, 7.84, 15.69);
    }
    else if (auto20BD0C65_val == "Nova") {
        return Color(10.98, 65.49, 91.76);
    }
    else if (auto20BD0C65_val == "Raynor") {
        return Color(0.00, 25.88, 100.00);
    }
    else if (auto20BD0C65_val == "Stetmann") {
        return Color(99.61, 54.12, 5.49);
    }
    else if (auto20BD0C65_val == "Stukov") {
        return Color(80.00, 65.10, 98.82);
    }
    else if (auto20BD0C65_val == "Swann") {
        return Color(99.61, 54.12, 5.49);
    }
    else if (auto20BD0C65_val == "Tychus") {
        return Color(65.49, 41.18, 25.88);
    }
    else if (auto20BD0C65_val == "Vorazun") {
        return Color(32.94, 0.00, 50.59);
    }
    else if (auto20BD0C65_val == "Zagara") {
        return Color(20.00, 0.00, 74.90);
    }
    else if (auto20BD0C65_val == "Zeratul") {
        return Color(0.39, 65.49, 38.43);
    }
    else {
        return Color(0.00, 50.20, 75.29);
    }
}

string libCPCD_gf_GetCommanderDataCommanderImage (int lp_player) {
    // Automatic Variable Declarations
    string autoB560EDAC_val;

    // Implementation
    autoB560EDAC_val = libCPGL_gv_commander[lp_player].lv_commander;
    if (autoB560EDAC_val == "Abathur") {
        return "Assets\\Textures\\btn-commander-abathur.dds";
    }
    else if (autoB560EDAC_val == "Alarak") {
        return "Assets\\Textures\\btn-commander-alarak.dds";
    }
    else if (autoB560EDAC_val == "Artanis") {
        return "Assets\\Textures\\btn-commander-artanis.dds";
    }
    else if (autoB560EDAC_val == "Dehaka") {
        return "Assets\\Textures\\btn-commander-dehaka.dds";
    }
    else if (autoB560EDAC_val == "Fenix") {
        return "Assets\\Textures\\btn-commander-fenix.dds";
    }
    else if (autoB560EDAC_val == "Horner") {
        return "Assets\\Textures\\btn-commander-horner.dds";
    }
    else if (autoB560EDAC_val == "Karax") {
        return "Assets\\Textures\\btn-commander-karax.dds";
    }
    else if (autoB560EDAC_val == "Kerrigan") {
        return "Assets\\Textures\\btn-commander-kerrigan.dds";
    }
    else if (autoB560EDAC_val == "Mengsk") {
        return "Assets\\Textures\\btn-commander-mengsk.dds";
    }
    else if (autoB560EDAC_val == "Nova") {
        return "Assets\\Textures\\btn-commander-nova.dds";
    }
    else if (autoB560EDAC_val == "Raynor") {
        return "Assets\\Textures\\btn-commander-raynor.dds";
    }
    else if (autoB560EDAC_val == "Stetmann") {
        return "Assets\\Textures\\btn-commander-stetmann.dds";
    }
    else if (autoB560EDAC_val == "Stukov") {
        return "Assets\\Textures\\btn-commander-stukov.dds";
    }
    else if (autoB560EDAC_val == "Swann") {
        return "Assets\\Textures\\btn-commander-swann.dds";
    }
    else if (autoB560EDAC_val == "Tychus") {
        return "Assets\\Textures\\btn-commander-tychus.dds";
    }
    else if (autoB560EDAC_val == "Vorazun") {
        return "Assets\\Textures\\btn-commander-vorazun.dds";
    }
    else if (autoB560EDAC_val == "Zagara") {
        return "Assets\\Textures\\btn-commander-zagara.dds";
    }
    else if (autoB560EDAC_val == "Zeratul") {
        return "Assets\\Textures\\btn-commander-zeratul.dds";
    }
    else {
        return "Assets\\Textures\\btn-tips-computerterminals.dds";
    }
}

string libCPCD_gf_CC_CurrentMap () {
    // Automatic Variable Declarations
    // Implementation
    return libCPCM_gv_cC_CurrentMap;
}

bool libCPCD_gf_CC_CampaignMapTypeCheck (string lp_map, int lp_mapType) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return false;
    }

    return (CatalogFieldValueGetAsInt(c_gameCatalogMap, (lp_map), "Kind", libCPCC_gv_cCC_DISREGARDPLAYER) == (lp_mapType));
}

string libCPCD_gf_CC_MapAchievementTerm (string lp_map, int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return null;
    }

    return UserDataGetGameLink("Maps", libCPCD_gf_CC_MapUserDataInstance(lp_map), "CompletionAchievementTerms", libCPCD_gf_CC_DifficultyIndex(lp_difficulty));
}

string libCPCD_gf_CC_CampaignMapFile (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return "";
    }

    return CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "File", libCPCC_gv_cCC_DISREGARDPLAYER);
}

text libCPCD_gf_CC_CampaignMapName (string lp_map, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_CPCD_C22D73BF");
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "Name", lp_player));
}

string libCPCD_gf_CC_MapScoreStatistic (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Maps", libCPCD_gf_CC_MapUserDataInstance(lp_map), "ScoreStatistic", 1);
}

string libCPCD_gf_CC_MapUserDataInstance (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "UserReference", libCPCC_gv_cCC_DISREGARDPLAYER));
}

void libCPCD_gf_SetCurrentMap (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    libCPCM_gv_cC_CurrentMap = lp_map;
}

int libCPCD_gf_CC_DifficultyIndex (int lp_difficulty) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto28CFABFA_val;

    // Variable Initialization

    // Implementation
    auto28CFABFA_val = lp_difficulty;
    if (auto28CFABFA_val == 1) {
        return 1;
    }
    else if (auto28CFABFA_val == 2) {
        return 2;
    }
    else if (auto28CFABFA_val == 3) {
        return 3;
    }
    else if (auto28CFABFA_val == 4) {
        return 4;
    }
    else if (auto28CFABFA_val == 5) {
        return 5;
    }
    else if (auto28CFABFA_val == 6) {
        return 6;
    }
    else {
        return 0;
    }
}

int libCPCD_gf_CC_DifficultyFromIndex (int lp_index) {
    // Automatic Variable Declarations
    int auto8C604637_val;

    // Implementation
    auto8C604637_val = lp_index;
    if (auto8C604637_val == libCPCD_gf_CC_DifficultyIndex(1)) {
        return 1;
    }
    else if (auto8C604637_val == libCPCD_gf_CC_DifficultyIndex(2)) {
        return 2;
    }
    else if (auto8C604637_val == libCPCD_gf_CC_DifficultyIndex(3)) {
        return 3;
    }
    else if (auto8C604637_val == libCPCD_gf_CC_DifficultyIndex(4)) {
        return 4;
    }
    else {
        return 2;
    }
}

int libCPCD_gf_DifficultyLevelForPlayerCoop (int lp_player) {
    // Automatic Variable Declarations
    int autoD3C4499A_val;

    // Implementation
    if ((GameIsOnline() == true)) {
        autoD3C4499A_val = lp_player;
        if (autoD3C4499A_val == 1) {
            return PlayerDifficulty(3);
        }
        else if (autoD3C4499A_val == 2) {
            return PlayerDifficulty(4);
        }
        else {
            return PlayerDifficulty(lp_player);
        }
    }
    else {
        return PlayerDifficulty(lp_player);
    }
}

void libCPCD_gf_DisplayCampaignMessage (playergroup lp_toPlayerGroup, int lp_messageType, text lp_message, int lp_formatOrNot) {
    // Automatic Variable Declarations
    int auto6B914E8B_val;

    // Implementation
    if ((lp_formatOrNot == libCPCD_ge_CampaignMessageFormatNotFormat_FormatMessage)) {
        auto6B914E8B_val = lp_messageType;
        if (auto6B914E8B_val == libCPCD_ge_CampaignMessageType_Hint) {
            TextExpressionSetToken("Param/Expression/lib_CPCD_54611D3A", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_CPCD_54611D3A"));
            SoundPlayForPlayer(SoundLink("UI_TerranHint", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto6B914E8B_val == libCPCD_ge_CampaignMessageType_SimpleHint) {
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, lp_message);
            SoundPlayForPlayer(SoundLink("UI_TerranHint", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto6B914E8B_val == libCPCD_ge_CampaignMessageType_Secret) {
            TextExpressionSetToken("Param/Expression/lib_CPCD_1977C43F", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_CPCD_1977C43F"));
            SoundPlayForPlayer(SoundLink("TUISecret", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto6B914E8B_val == libCPCD_ge_CampaignMessageType_NewUnitAcquired) {
            TextExpressionSetToken("Param/Expression/lib_CPCD_BBF0B5DC", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_CPCD_BBF0B5DC"));
            SoundPlayForPlayer(SoundLink("UI_TerranNewUnitAvailable", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto6B914E8B_val == libCPCD_ge_CampaignMessageType_NewUnitAvailable) {
            TextExpressionSetToken("Param/Expression/lib_CPCD_A0346FA5", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_CPCD_A0346FA5"));
            SoundPlayForPlayer(SoundLink("UI_TerranNewUnitAvailable", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto6B914E8B_val == libCPCD_ge_CampaignMessageType_NewTechAvailable) {
            TextExpressionSetToken("Param/Expression/lib_CPCD_35CCA608", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_CPCD_35CCA608"));
            SoundPlayForPlayer(SoundLink("UI_TerranNewTechAvailable", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto6B914E8B_val == libCPCD_ge_CampaignMessageType_NewUnitAvailable2) {
            TextExpressionSetToken("Param/Expression/lib_CPCD_66DE2CF7", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_CPCD_66DE2CF7"));
            SoundPlayForPlayer(SoundLink("UI_TerranNewTechAvailable", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto6B914E8B_val == libCPCD_ge_CampaignMessageType_Warning) {
            TextExpressionSetToken("Param/Expression/lib_CPCD_08D91A87", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_CPCD_08D91A87"));
            SoundPlayForPlayer(SoundLink("UI_ZergWarning", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto6B914E8B_val == libCPCD_ge_CampaignMessageType_MissionFailed) {
            TextExpressionSetToken("Param/Expression/lib_CPCD_0185FFD9", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_CPCD_0185FFD9"));
            SoundPlayForPlayer(SoundLink("UI_TerranMissionFailed", 1), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto6B914E8B_val == libCPCD_ge_CampaignMessageType_MissionVictory) {
            TextExpressionSetToken("Param/Expression/lib_CPCD_15B80912", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_CPCD_15B80912"));
            SoundPlayForPlayer(SoundLink("UI_MissionComplete", 3), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else {
        }
    }
    else {
        UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, lp_message);
    }
}

string libCPCD_gf_CM_ReticleModelOfStyle (int lp_type, int lp_size) {
    // Variable Declarations
    string lv_model;

    // Automatic Variable Declarations
    int autoB35D8315_val;
    int auto95629569_val;
    int autoBF5A7E82_val;
    int auto1107F94B_val;

    // Variable Initialization

    // Implementation
    autoB35D8315_val = lp_size;
    if (autoB35D8315_val == libCPCD_ge_CampaginReticleSize_Large) {
        auto95629569_val = lp_type;
        if (auto95629569_val == libCPCD_ge_CampaginReticleType_ProtossBonusObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (auto95629569_val == libCPCD_ge_CampaginReticleType_ProtossEnemy) {
            lv_model = "BriefingUnitSelectLargeRed";
        }
        else if (auto95629569_val == libCPCD_ge_CampaginReticleType_ProtossMainObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (auto95629569_val == libCPCD_ge_CampaginReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelectLarge";
        }
        else if (auto95629569_val == libCPCD_ge_CampaginReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectLargeRed";
        }
        else if (auto95629569_val == libCPCD_ge_CampaginReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelectLarge";
        }
        else if (auto95629569_val == libCPCD_ge_CampaginReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectLargeZergGreen";
        }
        else if (auto95629569_val == libCPCD_ge_CampaginReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectLargeZergRed";
        }
        else if (auto95629569_val == libCPCD_ge_CampaginReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectLargeZergGreen";
        }
        else {
        }
    }
    else if (autoB35D8315_val == libCPCD_ge_CampaginReticleSize_Medium) {
        autoBF5A7E82_val = lp_type;
        if (autoBF5A7E82_val == libCPCD_ge_CampaginReticleType_ProtossBonusObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (autoBF5A7E82_val == libCPCD_ge_CampaginReticleType_ProtossEnemy) {
            lv_model = "BriefingUnitSelectRed";
        }
        else if (autoBF5A7E82_val == libCPCD_ge_CampaginReticleType_ProtossMainObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (autoBF5A7E82_val == libCPCD_ge_CampaginReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelect";
        }
        else if (autoBF5A7E82_val == libCPCD_ge_CampaginReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectRed";
        }
        else if (autoBF5A7E82_val == libCPCD_ge_CampaginReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelect";
        }
        else if (autoBF5A7E82_val == libCPCD_ge_CampaginReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectZergGreen";
        }
        else if (autoBF5A7E82_val == libCPCD_ge_CampaginReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectZergRed";
        }
        else if (autoBF5A7E82_val == libCPCD_ge_CampaginReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectZergGreen";
        }
        else {
        }
    }
    else if (autoB35D8315_val == libCPCD_ge_CampaginReticleSize_Small) {
        auto1107F94B_val = lp_type;
        if (auto1107F94B_val == libCPCD_ge_CampaginReticleType_ProtossBonusObjective) {
            lv_model = "BriefingUnitSelectProtossSmall";
        }
        else if (auto1107F94B_val == libCPCD_ge_CampaginReticleType_ProtossEnemy) {
            lv_model = "BriefingUnitSelectRedSmall";
        }
        else if (auto1107F94B_val == libCPCD_ge_CampaginReticleType_ProtossMainObjective) {
            lv_model = "BriefingUnitSelectProtossSmall";
        }
        else if (auto1107F94B_val == libCPCD_ge_CampaginReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelectSmall";
        }
        else if (auto1107F94B_val == libCPCD_ge_CampaginReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectRedSmall";
        }
        else if (auto1107F94B_val == libCPCD_ge_CampaginReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelectSmall";
        }
        else if (auto1107F94B_val == libCPCD_ge_CampaginReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectZergSmallGreen";
        }
        else if (auto1107F94B_val == libCPCD_ge_CampaginReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectZergSmallRed";
        }
        else if (auto1107F94B_val == libCPCD_ge_CampaginReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectZergSmallGreen";
        }
        else {
        }
    }
    else {
    }
    return lv_model;
}

string libCPCD_gf_CM_ReticleTextFontOfStyle (int lp_type) {
    // Variable Declarations
    string lv_fontStyle;

    // Automatic Variable Declarations
    int autoAC01D53E_val;

    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    autoAC01D53E_val = lp_type;
    if (autoAC01D53E_val == libCPCD_ge_CampaginReticleType_ProtossBonusObjective) {
        lv_fontStyle = "VoidReticleProtossBonusObjective";
    }
    else if (autoAC01D53E_val == libCPCD_ge_CampaginReticleType_ProtossEnemy) {
        lv_fontStyle = "VoidReticleProtossEnemy";
    }
    else if (autoAC01D53E_val == libCPCD_ge_CampaginReticleType_ProtossMainObjective) {
        lv_fontStyle = "VoidReticleProtossMainObjective";
    }
    else if (autoAC01D53E_val == libCPCD_ge_CampaginReticleType_TerranBonusObjective) {
        lv_fontStyle = "VoidReticleTerranBonusObjective";
    }
    else if (autoAC01D53E_val == libCPCD_ge_CampaginReticleType_TerranEnemy) {
        lv_fontStyle = "VoidReticleTerranEnemy";
    }
    else if (autoAC01D53E_val == libCPCD_ge_CampaginReticleType_TerranMainObjective) {
        lv_fontStyle = "VoidReticleTerranMainObjective";
    }
    else if (autoAC01D53E_val == libCPCD_ge_CampaginReticleType_ZergBonusObjective) {
        lv_fontStyle = "VoidReticleZergBonusObjective";
    }
    else if (autoAC01D53E_val == libCPCD_ge_CampaginReticleType_ZergEnemy) {
        lv_fontStyle = "VoidReticleZergEnemy";
    }
    else if (autoAC01D53E_val == libCPCD_ge_CampaginReticleType_ZergMainObjective) {
        lv_fontStyle = "VoidReticleZergMainObjective";
    }
    else {
    }
    return lv_fontStyle;
}

void libCPCD_gf_CreateReticleEffectAndTextTagAtPoint (int lp_type, int lp_size, text lp_text, point lp_location) {
    // Variable Declarations
    string lv_model;
    string lv_fontStyle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    lv_model = libCPCD_gf_CM_ReticleModelOfStyle(lp_type, lp_size);
    if ((lv_model == null)) {
        return ;
    }

    libNtve_gf_CreateModelAtPoint(lv_model, lp_location);
    if (((lp_text != null) == false)) {
        return ;
    }

    lv_fontStyle = libCPCD_gf_CM_ReticleTextFontOfStyle(lp_type);
    TextExpressionSetToken("Param/Expression/lib_CPCD_56524ACF", "Style", StringToText((lv_fontStyle)));
    TextExpressionSetToken("Param/Expression/lib_CPCD_56524ACF", "A", lp_text);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_CPCD_56524ACF"), 24, lp_location, 0.0, true, true, libCOOC_gf_HumanPlayers());
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
}

void libCPCD_gf_AttachReticleEffectAndTextTagOnUnit (int lp_type, int lp_size, text lp_text, unit lp_target, string lp_attachPoint) {
    // Variable Declarations
    string lv_model;
    string lv_fontStyle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    lv_model = libCPCD_gf_CM_ReticleModelOfStyle(lp_type, lp_size);
    if ((lv_model == null)) {
        return ;
    }

    libNtve_gf_AttachModelToUnitInheritVisibility(lp_target, lv_model, lp_attachPoint);
    if (((lp_text != null) == false)) {
        return ;
    }

    lv_fontStyle = libCPCD_gf_CM_ReticleTextFontOfStyle(lp_type);
    TextExpressionSetToken("Param/Expression/lib_CPCD_5FFDCEAA", "Style", StringToText((lv_fontStyle)));
    TextExpressionSetToken("Param/Expression/lib_CPCD_5FFDCEAA", "A", lp_text);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_CPCD_5FFDCEAA"), 24, UnitGetPosition(lp_target), 0.0, true, true, libCOOC_gf_HumanPlayers());
    TextTagAttachToUnit(TextTagLastCreated(), lp_target, 0.0);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
}

void libCPCD_gf_CC_SetPlayerDefeated (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    PlayerGroupRemove(libCPCD_gv_cC_NondefeatedPlayerGroup, lp_player);
}

void libCPCD_gf_CC_InitNonDefeatedPlayers () {
    // Variable Declarations
    int lv_indexPlayer;
    playergroup lv_commanderPlayers;
    int lv_commanderPlayersCount;

    // Automatic Variable Declarations
    playergroup auto891FC78E_g;

    // Variable Initialization
    lv_commanderPlayers = libCPCD_gf_CommanderPlayers();
    lv_commanderPlayersCount = PlayerGroupCount(lv_commanderPlayers);

    // Implementation
    if ((lv_commanderPlayersCount == 0)) {
        return ;
    }

    libCPCD_gv_cC_NondefeatedPlayerGroup = PlayerGroupEmpty();
    auto891FC78E_g = libCPCD_gf_CommanderPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto891FC78E_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerStatus(lv_indexPlayer) == c_playerStatusActive) && (libCPGL_gf_PlayerinHumanPlayers(lv_indexPlayer) == true)) {
            PlayerGroupAdd(libCPCD_gv_cC_NondefeatedPlayerGroup, lv_indexPlayer);
        }

    }
}

playergroup libCPCD_gf_NondefeatedPlayers () {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCPCD_gv_cC_NondefeatedPlayerGroup == null)) {
        libCPCD_gf_CC_InitNonDefeatedPlayers();
    }

    return libCPCD_gv_cC_NondefeatedPlayerGroup;
}

playergroup libCPCD_gf_HumanPlayers () {
    // Variable Declarations
    int lv_indexPlayer;
    int lv_aHumanPlayer;
    playergroup lv_humanPlayersCopy;

    // Automatic Variable Declarations
    const int auto8BFE0C00_ae = libCPGL_gv_humanPlayerCount;
    const int auto8BFE0C00_ai = 1;

    // Variable Initialization
    lv_humanPlayersCopy = PlayerGroupEmpty();

    // Implementation
    if ((PlayerGroupCount(libCPCD_gv_cC_HumanPlayerGroup) == 0)) {
        lv_indexPlayer = 1;
        for ( ; ( (auto8BFE0C00_ai >= 0 && lv_indexPlayer <= auto8BFE0C00_ae) || (auto8BFE0C00_ai < 0 && lv_indexPlayer >= auto8BFE0C00_ae) ) ; lv_indexPlayer += auto8BFE0C00_ai ) {
            if (((lv_indexPlayer == 1) || (lv_indexPlayer == 2) || (PlayerType(lv_indexPlayer) == c_playerTypeUser))) {
                PlayerGroupAdd(libCPCD_gv_cC_HumanPlayerGroup, lv_indexPlayer);
            }

        }
    }

    libNtve_gf_AddPlayerGroupToPlayerGroup(libCPCD_gv_cC_HumanPlayerGroup, lv_humanPlayersCopy);
    return lv_humanPlayersCopy;
}

playergroup libCPCD_gf_CommanderPlayers () {
    // Automatic Variable Declarations
    // Implementation
    return libCPGL_gf_HumanPlayers();
}

playergroup libCPCD_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf (int lp_player) {
    // Variable Declarations
    playergroup lv_playerGroup;
    playergroup lv_playerGroupAllies;
    playergroup lv_playerGroupCommnaders;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerGroupAllies = libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_AllyMutual, lp_player);
    lv_playerGroupCommnaders = libCPCD_gf_CommanderPlayers();

    // Implementation
    lv_playerGroup = libNtve_gf_IntersectionOfPlayerGroups(lv_playerGroupAllies, lv_playerGroupCommnaders);
    return lv_playerGroup;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: HeroPanelUpdate
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_HeroPanelUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoB763CA8E_g;
    const int autoCEE7AAAA_ae = libCPCD_gv_panelHeroMaxSlotCount;
    int autoCEE7AAAA_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB763CA8E_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoB763CA8E_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        autoCEE7AAAA_var = 1;
        for ( ; autoCEE7AAAA_var <= autoCEE7AAAA_ae; autoCEE7AAAA_var += 1 ) {
            if ((libCPCD_gv_heroPanelUnitExists[lv_indexPlayer][autoCEE7AAAA_var] == true)) {
                libCPCD_gf_CU_UpdateHeroPanel(autoCEE7AAAA_var, lv_indexPlayer);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_HeroPanelUpdate_Init () {
    libCPCD_gt_HeroPanelUpdate = TriggerCreate("libCPCD_gt_HeroPanelUpdate_Func");
    TriggerEnable(libCPCD_gt_HeroPanelUpdate, false);
    TriggerAddEventTimePeriodic(libCPCD_gt_HeroPanelUpdate, libCPCD_gv_panelHeroPeriodicUpdate, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroPanelDamaged
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_HeroPanelDamaged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_indexPlayer;
    int lv_player;
    playergroup lv_heroGroup;

    // Automatic Variable Declarations
    playergroup auto144BD93C_g;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto144BD93C_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto144BD93C_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((EventUnit() == libCPCD_gv_heroPanelUnit[1][lv_indexPlayer])) {
            lv_index = 1;
            lv_player = lv_indexPlayer;
            break;
        }
        else if ((EventUnit() == libCPCD_gv_heroPanelUnit[2][lv_indexPlayer])) {
            lv_index = 2;
            lv_player = lv_indexPlayer;
            break;
        }
    }
    if ((lv_index == 0)) {
        return true;
    }

    lv_heroGroup = PlayerGroupSingle(lv_player);
    DialogControlSetVisible(libCPCD_gv_heroPanelDialogDamageTakenImage[lv_index], lv_heroGroup, true);
    if ((libCPCD_gv_heroPanelDamageTimer[lv_index][lv_player] <= 0.0)) {
    }
    else {
        DialogControlFadeTransparency(libCPCD_gv_heroPanelDialogDamageTakenImage[lv_index], lv_heroGroup, 0.25, 0.0);
    }
    if ((EventUnitDamageAmount() < 5.0)) {
        if ((libCPCD_gv_heroPanelDamageTimer[lv_index][lv_player] <= 0.25)) {
            libCPCD_gv_heroPanelDamageTimer[lv_index][lv_player] = 0.26;
            DialogControlFadeTransparency(libCPCD_gv_heroPanelDialogDamageTakenImage[lv_index], lv_heroGroup, 0.25, 0.0);
        }

    }
    else {
        if ((EventUnitDamageAmount() >= 5.0) && (EventUnitDamageAmount() <= 15.0)) {
            if ((libCPCD_gv_heroPanelDamageTimer[lv_index][lv_player] <= 0.5)) {
                libCPCD_gv_heroPanelDamageTimer[lv_index][lv_player] = 0.51;
                DialogControlFadeTransparency(libCPCD_gv_heroPanelDialogDamageTakenImage[lv_index], lv_heroGroup, 0.5, 0.0);
            }

        }
        else {
            if ((libCPCD_gv_heroPanelDamageTimer[lv_index][lv_player] <= 1.0)) {
                libCPCD_gv_heroPanelDamageTimer[lv_index][lv_player] = 1.01;
                DialogControlFadeTransparency(libCPCD_gv_heroPanelDialogDamageTakenImage[lv_index], lv_heroGroup, 1.0, 0.0);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_HeroPanelDamaged_Init () {
    libCPCD_gt_HeroPanelDamaged = TriggerCreate("libCPCD_gt_HeroPanelDamaged_Func");
    TriggerEnable(libCPCD_gt_HeroPanelDamaged, false);
    TriggerAddEventUnitDamaged(libCPCD_gt_HeroPanelDamaged, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroPanelVitalChanged
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_HeroPanelVitalChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_indexPlayer;
    int lv_player;
    playergroup lv_heroGroup;
    int lv_damageBar;
    int lv_damageBarWidth;
    int lv_damageBarHeight;

    // Automatic Variable Declarations
    playergroup auto4EB3A183_g;
    unit auto439EBA0B_val;
    int auto93E41D2B_val;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();
    lv_damageBar = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((EventUnitPropertyChangeFixed() < 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4EB3A183_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto4EB3A183_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        auto439EBA0B_val = EventUnit();
        if (auto439EBA0B_val == libCPCD_gv_heroPanelUnit[1][lv_indexPlayer]) {
            lv_index = 1;
            lv_player = lv_indexPlayer;
            break;
        }
        else if (auto439EBA0B_val == libCPCD_gv_heroPanelUnit[2][lv_indexPlayer]) {
            lv_index = 2;
            lv_player = lv_indexPlayer;
            break;
        }
        else {
        }
    }
    if ((lv_index == 0)) {
        return true;
    }

    lv_heroGroup = PlayerGroupSingle(lv_player);
    auto93E41D2B_val = EventUnitProperty();
    if (auto93E41D2B_val == c_unitPropEnergy) {
        DialogControlCreateInPanelFromTemplate(libCPCD_gv_heroPanel[lv_index], c_triggerControlTypeImage, "HotS_GameUnitFrame/HeroEnergyBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_heroGroup, c_anchorLeft, libCPCD_gv_heroPanelDialogEnergyBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(libCPCD_gv_heroPanelUnit[lv_index][lv_player], c_unitPropEnergy, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(libCPCD_gv_heroPanelUnit[lv_index][lv_player], c_unitPropEnergyMax, c_unitPropCurrent)) * IntToFixed(libCPCD_gv_panelHeroWidth)));
        lv_damageBarHeight = DialogControlGetHeight(libCPCD_gv_heroPanelDialogEnergyBarImage[lv_index], lv_player);
    }
    else if (auto93E41D2B_val == c_unitPropLife) {
        DialogControlCreateInPanelFromTemplate(libCPCD_gv_heroPanel[lv_index], c_triggerControlTypeImage, "HotS_GameUnitFrame/HeroHealthBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_heroGroup, c_anchorLeft, libCPCD_gv_heroPanelDialogHealthBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(libCPCD_gv_heroPanelUnit[lv_index][lv_player], c_unitPropLife, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(libCPCD_gv_heroPanelUnit[lv_index][lv_player], c_unitPropLifeMax, c_unitPropCurrent)) * IntToFixed(libCPCD_gv_panelHeroWidth)));
        lv_damageBarHeight = DialogControlGetHeight(libCPCD_gv_heroPanelDialogHealthBarImage[lv_index], lv_player);
    }
    else if (auto93E41D2B_val == c_unitPropShields) {
        DialogControlCreateInPanelFromTemplate(libCPCD_gv_heroPanel[lv_index], c_triggerControlTypeImage, "HotS_GameUnitFrame/HeroHealthBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_heroGroup, c_anchorLeft, libCPCD_gv_heroPanelDialogShieldBarImage[lv_index], c_anchorLeft, 0, 0);
        if ((UnitGetPropertyFixed(libCPCD_gv_heroPanelUnit[lv_index][lv_player], c_unitPropShieldsMax, c_unitPropCurrent) != 0.0)) {
            lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(libCPCD_gv_heroPanelUnit[lv_index][lv_player], c_unitPropShields, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(libCPCD_gv_heroPanelUnit[lv_index][lv_player], c_unitPropShieldsMax, c_unitPropCurrent)) * IntToFixed(libCPCD_gv_panelHeroWidth)));
        }
        else {
            lv_damageBarWidth = 0;
        }
        lv_damageBarHeight = DialogControlGetHeight(libCPCD_gv_heroPanelDialogShieldBarImage[lv_index], lv_player);
    }
    else {
    }
    lv_damageBar = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(lv_damageBar, 506, lv_heroGroup);
    DialogControlSetVisible(lv_damageBar, PlayerGroupAll(), false);
    DialogControlSetVisible(lv_damageBar, lv_heroGroup, true);
    DialogControlSetSize(lv_damageBar, PlayerGroupAll(), MaxI(MinI(lv_damageBarWidth, 244), 1), lv_damageBarHeight);
    Wait(1.0, c_timeReal);
    DialogControlFadeTransparency(lv_damageBar, lv_heroGroup, 1.0, 100.0);
    Wait(1.1, c_timeReal);
    DialogControlDestroy(lv_damageBar);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_HeroPanelVitalChanged_Init () {
    libCPCD_gt_HeroPanelVitalChanged = TriggerCreate("libCPCD_gt_HeroPanelVitalChanged_Func");
    TriggerEnable(libCPCD_gt_HeroPanelVitalChanged, false);
    TriggerAddEventUnitProperty(libCPCD_gt_HeroPanelVitalChanged, null, c_unitPropLife);
    TriggerAddEventUnitProperty(libCPCD_gt_HeroPanelVitalChanged, null, c_unitPropEnergy);
    TriggerAddEventUnitProperty(libCPCD_gt_HeroPanelVitalChanged, null, c_unitPropShields);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroPanelHoverTooltip
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_HeroPanelHoverTooltip_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    playergroup lv_heroGroup;

    // Automatic Variable Declarations
    int autoCA0BB0E8_val;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libCPCD_gv_heroPanelDialogBorderImage[1]) || (EventDialogControl() == libCPCD_gv_heroPanelDialogBorderImageNoDialog[1]) || (EventDialogControl() == libCPCD_gv_heroPanelDialogBorderImage[2]) || (EventDialogControl() == libCPCD_gv_heroPanelDialogBorderImageNoDialog[2]) || (EventDialogControl() == libCPCD_gv_heroPanelDialogButton[1]) || (EventDialogControl() == libCPCD_gv_heroPanelDialogButton[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroGroup = PlayerGroupSingle(EventPlayer());
    if (((EventDialogControl() == libCPCD_gv_heroPanelDialogBorderImage[1]) || (EventDialogControl() == libCPCD_gv_heroPanelDialogBorderImageNoDialog[1]) || (EventDialogControl() == libCPCD_gv_heroPanelDialogButton[1]))) {
        lv_index = 1;
    }
    else {
        if (((EventDialogControl() == libCPCD_gv_heroPanelDialogBorderImage[2]) || (EventDialogControl() == libCPCD_gv_heroPanelDialogBorderImageNoDialog[2]) || (EventDialogControl() == libCPCD_gv_heroPanelDialogButton[2]))) {
            lv_index = 2;
        }
        else {
            return true;
        }
    }
    autoCA0BB0E8_val = EventDialogControlEventType();
    if (autoCA0BB0E8_val == c_triggerControlEventTypeMouseEnter) {
        if ((UnitGetPropertyFixed(libCPCD_gv_heroPanelUnit[lv_index][EventPlayer()], c_unitPropLifeMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libCPCD_gv_heroPanelDialogHealthLabel[lv_index], lv_heroGroup, true);
        }

        if ((UnitGetPropertyFixed(libCPCD_gv_heroPanelUnit[lv_index][EventPlayer()], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libCPCD_gv_heroPanelDialogEnergyLabel[lv_index], lv_heroGroup, true);
        }

        if ((UnitGetPropertyFixed(libCPCD_gv_heroPanelUnit[lv_index][EventPlayer()], c_unitPropShieldsMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libCPCD_gv_heroPanelDialogShieldLabel[lv_index], lv_heroGroup, true);
        }

    }
    else if (autoCA0BB0E8_val == c_triggerControlEventTypeMouseExit) {
        DialogControlSetVisible(libCPCD_gv_heroPanelDialogHealthLabel[lv_index], lv_heroGroup, false);
        DialogControlSetVisible(libCPCD_gv_heroPanelDialogEnergyLabel[lv_index], lv_heroGroup, false);
        DialogControlSetVisible(libCPCD_gv_heroPanelDialogShieldLabel[lv_index], lv_heroGroup, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_HeroPanelHoverTooltip_Init () {
    libCPCD_gt_HeroPanelHoverTooltip = TriggerCreate("libCPCD_gt_HeroPanelHoverTooltip_Func");
    TriggerEnable(libCPCD_gt_HeroPanelHoverTooltip, false);
    TriggerAddEventDialogControl(libCPCD_gt_HeroPanelHoverTooltip, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
    TriggerAddEventDialogControl(libCPCD_gt_HeroPanelHoverTooltip, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroDied
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_HeroDied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoA897EB9C_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoA897EB9C_g = libCPGL_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoA897EB9C_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((EventUnit() == libCPGL_gv_commander[lv_indexPlayer].lv_heroUnit) && (libCPGL_gv_commander[lv_indexPlayer].lv_commander != "Tychus")) {
            libCPCD_gf_HeroReviveHandleDeath(lv_indexPlayer);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_HeroDied_Init () {
    libCPCD_gt_HeroDied = TriggerCreate("libCPCD_gt_HeroDied_Func");
    TriggerAddEventUnitDied(libCPCD_gt_HeroDied, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroReviveNovaBuyBackUsed
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_HeroReviveNovaBuyBackUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gv_cM_HeroReviveTargetLocation[EventPlayer()] = EventUnitTargetPoint();
    libNtve_gf_PlayerRemoveCooldown(EventPlayer(), libCPGL_gv_commander[EventPlayer()].lv_heroReviveLink);
    TriggerEnable(libCPCD_gt_HeroReviveNovaBuyBackAdjustment, false);
    CatalogFieldValueSet(c_gameCatalogAbil, "NovaReviveInstantBuyback", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeMinerals) + "]", EventPlayer(), "450");
    UnitBehaviorAdd(libCPGL_gv_commander[EventPlayer()].lv_heroUnit, "TargetedRevive", libCPGL_gv_commander[EventPlayer()].lv_heroUnit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_HeroReviveNovaBuyBackUsed_Init () {
    libCPCD_gt_HeroReviveNovaBuyBackUsed = TriggerCreate("libCPCD_gt_HeroReviveNovaBuyBackUsed_Func");
    TriggerAddEventUnitAbility(libCPCD_gt_HeroReviveNovaBuyBackUsed, null, AbilityCommand("NovaReviveInstantBuyback", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroReviveNovaBuyBackAdjustment
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_HeroReviveNovaBuyBackAdjustment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed[libCPGL_gv_humanPlayerCount + 1] lv_reviveTimer;
    int lv_reviveCostPerSecond;
    fixed lv_totalBuybackCost;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto4C443947_g;

    // Variable Initialization
    lv_reviveCostPerSecond = 5;

    // Actions
    if (!runActions) {
        return true;
    }

    auto4C443947_g = libCPGL_gf_HumanPlayers();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto4C443947_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_reviveTimer[lv_itPlayer] = UnitBehaviorDuration(libCPGL_gv_commander[lv_itPlayer].lv_heroBeacon, "NovaReviveTimer");
        lv_totalBuybackCost = (Round(lv_reviveTimer[lv_itPlayer]) * lv_reviveCostPerSecond);
        CatalogFieldValueSet(c_gameCatalogAbil, "NovaReviveInstantBuyback", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeMinerals) + "]", lv_itPlayer, FixedToString(lv_totalBuybackCost, 0));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_HeroReviveNovaBuyBackAdjustment_Init () {
    libCPCD_gt_HeroReviveNovaBuyBackAdjustment = TriggerCreate("libCPCD_gt_HeroReviveNovaBuyBackAdjustment_Func");
    TriggerEnable(libCPCD_gt_HeroReviveNovaBuyBackAdjustment, false);
    TriggerAddEventTimePeriodic(libCPCD_gt_HeroReviveNovaBuyBackAdjustment, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GlobalCasterVitalChange
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_GlobalCasterVitalChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto38B0D454_g;
    int auto38B0D454_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto38B0D454_g = libCPGL_gf_HumanPlayers();
    auto38B0D454_var = -1;
    while (true) {
        auto38B0D454_var = PlayerGroupNextPlayer(auto38B0D454_g, auto38B0D454_var);
        if (auto38B0D454_var < 0) { break; }
        if ((libCPGL_gv_commander[auto38B0D454_var].lv_globalCasterUnit == EventUnit())) {
            libCPCD_gf_GPUpdateVitals(UnitGetOwner(EventUnit()));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_GlobalCasterVitalChange_Init () {
    libCPCD_gt_GlobalCasterVitalChange = TriggerCreate("libCPCD_gt_GlobalCasterVitalChange_Func");
    TriggerEnable(libCPCD_gt_GlobalCasterVitalChange, false);
    TriggerAddEventUnitProperty(libCPCD_gt_GlobalCasterVitalChange, null, c_unitPropEnergy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GPCutsceneBirthFinished
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_GPCutsceneBirthFinished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_updatePlayers;
    int lv_indexPlayer;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    playergroup auto09C07F87_g;
    const int auto5DD5FB12_ae = 4;
    const int auto5DD5FB12_ai = 1;

    // Variable Initialization
    lv_updatePlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto09C07F87_g = libCPGL_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto09C07F87_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCPCD_gv_globalPowerCutscene[lv_indexPlayer] != c_invalidDialogControlId) && (EventCutsceneId() == CutsceneGetTriggerControl(libCPCD_gv_globalPowerCutscene[lv_indexPlayer]))) {
            lv_updatePlayers = PlayerGroupSingle(lv_indexPlayer);
            lv_buttonIndex = 1;
            for ( ; ( (auto5DD5FB12_ai >= 0 && lv_buttonIndex <= auto5DD5FB12_ae) || (auto5DD5FB12_ai < 0 && lv_buttonIndex >= auto5DD5FB12_ae) ) ; lv_buttonIndex += auto5DD5FB12_ai ) {
                if ((libCPCD_gv_globalPowerButtonHighlighted[lv_buttonIndex][lv_indexPlayer] == true) && (libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lv_indexPlayer] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lv_indexPlayer], lv_updatePlayers, true);
                }

            }
            if ((libCPCD_gv_globalPowerEnergyLabel[lv_indexPlayer] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libCPCD_gv_globalPowerEnergyLabel[lv_indexPlayer], lv_updatePlayers, true);
            }

            if ((libCPCD_gv_globalPowerEnergyTooltip[lv_indexPlayer] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libCPCD_gv_globalPowerEnergyTooltip[lv_indexPlayer], lv_updatePlayers, true);
            }

            if ((libCPCD_gv_globalPowerAlarakButton[lv_indexPlayer] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libCPCD_gv_globalPowerAlarakButton[lv_indexPlayer], lv_updatePlayers, true);
            }

            DialogControlSetVisible(libCPCD_gv_globalPowerCmdPanel[lv_indexPlayer], lv_updatePlayers, true);
            libCPCD_gf_GPCheckforEnergyHighlight(lv_indexPlayer);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_GPCutsceneBirthFinished_Init () {
    libCPCD_gt_GPCutsceneBirthFinished = TriggerCreate("libCPCD_gt_GPCutsceneBirthFinished_Func");
    TriggerAddEventCutsceneBookmarkFired(libCPCD_gt_GPCutsceneBirthFinished, c_cutsceneNone, "2DBirth");
}

//--------------------------------------------------------------------------------------------------
// Trigger: GPCutsceneDeathRemove
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_GPCutsceneDeathRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    playergroup lv_updatePlayers;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    playergroup auto3028BCEF_g;
    const int auto5437A1D6_ae = 4;
    const int auto5437A1D6_ai = 1;

    // Variable Initialization
    lv_updatePlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto3028BCEF_g = libCPGL_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto3028BCEF_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCPCD_gv_globalPowerCutscene[lv_indexPlayer] != c_invalidDialogControlId) && (EventCutsceneId() == CutsceneGetTriggerControl(libCPCD_gv_globalPowerCutscene[lv_indexPlayer]))) {
            lv_updatePlayers = PlayerGroupSingle(lv_indexPlayer);
            lv_buttonIndex = 1;
            for ( ; ( (auto5437A1D6_ai >= 0 && lv_buttonIndex <= auto5437A1D6_ae) || (auto5437A1D6_ai < 0 && lv_buttonIndex >= auto5437A1D6_ae) ) ; lv_buttonIndex += auto5437A1D6_ai ) {
                if ((libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lv_indexPlayer] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(libCPCD_gv_globalPowerCmdButtonArrows[lv_buttonIndex][lv_indexPlayer], lv_updatePlayers, false);
                }

            }
            DialogControlSetVisible(libCPCD_gv_globalPowerCmdPanel[lv_indexPlayer], lv_updatePlayers, false);
            if ((libCPCD_gv_globalPowerEnergyLabel[lv_indexPlayer] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libCPCD_gv_globalPowerEnergyLabel[lv_indexPlayer], lv_updatePlayers, false);
            }

            if ((libCPCD_gv_globalPowerEnergyTooltip[lv_indexPlayer] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libCPCD_gv_globalPowerEnergyTooltip[lv_indexPlayer], lv_updatePlayers, false);
            }

            if ((libCPCD_gv_globalPowerAlarakButton[lv_indexPlayer] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libCPCD_gv_globalPowerAlarakButton[lv_indexPlayer], lv_updatePlayers, false);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_GPCutsceneDeathRemove_Init () {
    libCPCD_gt_GPCutsceneDeathRemove = TriggerCreate("libCPCD_gt_GPCutsceneDeathRemove_Func");
    TriggerAddEventCutsceneBookmarkFired(libCPCD_gt_GPCutsceneDeathRemove, c_cutsceneNone, "2DDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: GPAlarakGemPress
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_GPAlarakGemPress_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto0BB2650C_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto0BB2650C_g = libCPGL_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto0BB2650C_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((EventDialogControl() == libCPCD_gv_globalPowerAlarakButton[lv_indexPlayer])) {
            libCPCD_gv_globalPowerAlarakGemClickCount[lv_indexPlayer] += 1;
            if ((ModI(libCPCD_gv_globalPowerAlarakGemClickCount[lv_indexPlayer], 2) == 1)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(libCPCD_gv_globalPowerCutscene[lv_indexPlayer]), "WorkStart");
                SoundPlayForPlayer(SoundLink("AlarakGemActivate", 0), c_maxPlayers, PlayerGroupSingle(lv_indexPlayer), 100.0, 0.0);
            }
            else {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(libCPCD_gv_globalPowerCutscene[lv_indexPlayer]), "WorkEnd");
                SoundPlayForPlayer(SoundLink("AlarakGemDeactivate", 0), c_maxPlayers, PlayerGroupSingle(lv_indexPlayer), 100.0, 0.0);
            }
            if ((libCPCD_gv_globalPowerAlarakGemClickCount[lv_indexPlayer] == 7)) {
                libCPCD_gf_CTCommanderVOSend(lv_indexPlayer, SoundLink("AlarakCommander_TopBarLines", 0), PlayerGroupSingle(lv_indexPlayer));
            }
            else if ((libCPCD_gv_globalPowerAlarakGemClickCount[lv_indexPlayer] == 9)) {
                libCPCD_gf_CTCommanderVOSend(lv_indexPlayer, SoundLink("AlarakCommander_TopBarLines", 1), PlayerGroupSingle(lv_indexPlayer));
            }
            else if ((libCPCD_gv_globalPowerAlarakGemClickCount[lv_indexPlayer] == 11)) {
                libCPCD_gf_CTCommanderVOSend(lv_indexPlayer, SoundLink("AlarakCommander_TopBarLines", 2), PlayerGroupSingle(lv_indexPlayer));
            }
            else if ((libCPCD_gv_globalPowerAlarakGemClickCount[lv_indexPlayer] == 13)) {
                libCPCD_gf_CTCommanderVOSend(lv_indexPlayer, SoundLink("AlarakCommander_TopBarLines", 3), PlayerGroupSingle(lv_indexPlayer));
            }
            else if ((libCPCD_gv_globalPowerAlarakGemClickCount[lv_indexPlayer] == 15)) {
                libCPCD_gf_CTCommanderVOSend(lv_indexPlayer, SoundLink("AlarakCommander_TopBarLines", 4), PlayerGroupSingle(lv_indexPlayer));
            }
            else if ((libCPCD_gv_globalPowerAlarakGemClickCount[lv_indexPlayer] == 17)) {
                libCPCD_gf_CTCommanderVOSend(lv_indexPlayer, SoundLink("AlarakCommander_TopBarLines", 5), PlayerGroupSingle(lv_indexPlayer));
                libCPCD_gv_globalPowerAlarakGemClickCount[0] = -1;
            }
            TriggerEnable(TriggerGetCurrent(), false);
            Wait(2.5, c_timeReal);
            TriggerEnable(TriggerGetCurrent(), true);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_GPAlarakGemPress_Init () {
    libCPCD_gt_GPAlarakGemPress = TriggerCreate("libCPCD_gt_GPAlarakGemPress_Func");
    TriggerEnable(libCPCD_gt_GPAlarakGemPress, false);
    TriggerAddEventDialogControl(libCPCD_gt_GPAlarakGemPress, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GPTMTargetingForceOff
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_GPTMTargetingForceOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto8B047159_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCPCD_gt_GPTMTargetingCancel, false);
    TriggerEnable(libCPCD_gt_GPTMTargetingPointChosen, false);
    TriggerEnable(libCPCD_gt_GPTMTargetingDirectionChosen, false);
    libCPCD_gv_gPTMExitInstantly = true;
    auto8B047159_g = libCPGL_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto8B047159_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCPCD_gv_gPTMTargetingPhase[lv_indexPlayer] != libCPCD_ge_GPTMTargetingPhaseType_None)) {
            libCPCD_gv_gPTMTargetingTransitioning[lv_indexPlayer] = false;
            UISetTargetingOrder(PlayerGroupSingle(lv_indexPlayer), libCPCD_gv_gPTMCasterGroup[lv_indexPlayer], null, false);
            libCPCD_gf_GPTMTargetingCancel(lv_indexPlayer);
        }

    }
    libCPCD_gv_gPTMTargetingUsageCount = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_GPTMTargetingForceOff_Init () {
    libCPCD_gt_GPTMTargetingForceOff = TriggerCreate("libCPCD_gt_GPTMTargetingForceOff_Func");
    TriggerAddEventGeneric(libCPCD_gt_GPTMTargetingForceOff, "CinematicModeOn");
}

//--------------------------------------------------------------------------------------------------
// Trigger: GPTMTargetingDeactivated
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_GPTMTargetingDeactivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libCPCD_gv_gPTMCasterGroup[lv_casterPlayer], null, false);
    libCPCD_gv_gPTMTargetingChargesSpent[lv_casterPlayer] = 0;
    libCPCD_gf_GPTMTargetingModeExit(lv_casterPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_GPTMTargetingDeactivated_Init () {
    libCPCD_gt_GPTMTargetingDeactivated = TriggerCreate("libCPCD_gt_GPTMTargetingDeactivated_Func");
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_GPTMTargetingDeactivated, null, "SOAOrbitalStrikeActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_GPTMTargetingDeactivated, null, "SOAGravitonBombActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_GPTMTargetingDeactivated, null, "SOAThermalLanceActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_GPTMTargetingDeactivated, null, "SOAStrafeAttackActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_GPTMTargetingDeactivated, null, "NovaGriffinBombingRunActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_GPTMTargetingDeactivated, null, "HornerAirFleetActivate", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GPTMTargetingPointChosen
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_GPTMTargetingPointChosen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCPGL_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCPCD_gv_gPTMTargetingPhase[EventPlayer()] == libCPCD_ge_GPTMTargetingPhaseType_Location))) {
            return false;
        }

        if (!((libCPCD_gv_gPTMTargetingChargesSpent[EventPlayer()] < libCPCD_gv_gPTMTargetingChargesTotal[EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetPoint = OrderGetTargetPoint(EventUnitOrder());
    lv_casterPlayer = EventPlayer();
    if ((VisIsVisibleForPlayer(lv_casterPlayer, lv_targetPoint) == false)) {
        return true;
    }

    libCPCD_gv_gPTMTargetingCycling[lv_casterPlayer] = true;
    libCPCD_gv_gPTMTargetingChargesSpent[lv_casterPlayer] += 1;
    libNtve_gf_CreateActorAtPoint(libCPCD_gv_gPTMTargetingModel[lv_casterPlayer], lv_targetPoint);
    libCPCD_gv_gPTMTargetingActors[libCPCD_gv_gPTMTargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer] = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateActorAtPoint("SOATargetingModeConfirmationSound", lv_targetPoint);
    if ((libCPCD_gv_gPTMTargetingUnitType[lv_casterPlayer] == null)) {
        UnitIssueOrder(libCPCD_gv_gPTMCasterUnit[lv_casterPlayer], OrderTargetingPoint(libCPCD_gv_gPTMTargetingExecuteCommand[lv_casterPlayer], lv_targetPoint), c_orderQueueAddToEnd);
        libCOUI_gf_CU_TargetingSetCharges((libCPCD_gv_gPTMTargetingChargesTotal[lv_casterPlayer]-libCPCD_gv_gPTMTargetingChargesSpent[lv_casterPlayer]), libCPCD_gv_gPTMTargetingChargesTotal[lv_casterPlayer], lv_casterPlayer);
        if ((libCPCD_gv_gPTMTargetingChargesSpent[lv_casterPlayer] == libCPCD_gv_gPTMTargetingChargesTotal[lv_casterPlayer])) {
            Wait(0.125, c_timeGame);
            UnitBehaviorRemove(libCPCD_gv_gPTMCasterUnit[lv_casterPlayer], libCPCD_gv_gPTMTargetingBehavior[lv_casterPlayer], 1);
        }
        else {
            Wait(0.1, c_timeGame);
            UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libCPCD_gv_gPTMCasterGroup[lv_casterPlayer], libCPCD_gv_gPTMTargetingOrder[lv_casterPlayer], false);
        }
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, libCPCD_gv_gPTMTargetingUnitType[lv_casterPlayer], 0, lv_casterPlayer, lv_targetPoint);
        UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
        libCPCD_gv_gPTMTargetingUnit[libCPCD_gv_gPTMTargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer] = UnitLastCreated();
        libCPCD_gv_gPTMTargetingDirectionGroup[lv_casterPlayer] = libNtve_gf_ConvertUnitToUnitGroup(libCPCD_gv_gPTMTargetingUnit[libCPCD_gv_gPTMTargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer]);
        Wait(0.1, c_timeGame);
        if ((UnitIsValid(libCPCD_gv_gPTMTargetingUnit[libCPCD_gv_gPTMTargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer]) == true)) {
            UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libCPCD_gv_gPTMTargetingDirectionGroup[lv_casterPlayer], OrderTargetingPoint(libCPCD_gv_gPTMTargetingExecuteCommand[lv_casterPlayer], UnitGetPosition(libCPCD_gv_gPTMTargetingUnit[libCPCD_gv_gPTMTargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer])), false);
            libCOUI_gf_CU_TargetingSetInstructionText(libCPCD_gv_gPTMTargetingInstructionsSecondary[lv_casterPlayer], lv_casterPlayer);
            libCPCD_gv_gPTMTargetingPhase[lv_casterPlayer] = libCPCD_ge_GPTMTargetingPhaseType_Direction;
        }

    }
    libCPCD_gv_gPTMTargetingCycling[lv_casterPlayer] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_GPTMTargetingPointChosen_Init () {
    libCPCD_gt_GPTMTargetingPointChosen = TriggerCreate("libCPCD_gt_GPTMTargetingPointChosen_Func");
    TriggerEnable(libCPCD_gt_GPTMTargetingPointChosen, false);
    TriggerAddEventUnitOrder(libCPCD_gt_GPTMTargetingPointChosen, null, AbilityCommand("SOAOrbitalStrikeTargetingDummy", 0));
    TriggerAddEventUnitOrder(libCPCD_gt_GPTMTargetingPointChosen, null, AbilityCommand("SOAThermalLanceTargetingDummy", 0));
    TriggerAddEventUnitOrder(libCPCD_gt_GPTMTargetingPointChosen, null, AbilityCommand("SOAGravitonBomb", 0));
    TriggerAddEventUnitOrder(libCPCD_gt_GPTMTargetingPointChosen, null, AbilityCommand("NovaGriffinBombingRunTargetingDummy", 0));
    TriggerAddEventUnitOrder(libCPCD_gt_GPTMTargetingPointChosen, null, AbilityCommand("HornerAirFleetTargetingDummy", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: GPTMTargetingDirectionChosen
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_GPTMTargetingDirectionChosen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCPGL_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCPCD_gv_gPTMTargetingPhase[EventPlayer()] == libCPCD_ge_GPTMTargetingPhaseType_Direction))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = EventPlayer();
    libCPCD_gv_gPTMTargetingCycling[lv_casterPlayer] = true;
    lv_targetPoint = OrderGetTargetPoint(EventUnitOrder());
    libCPCD_gv_gPTMTargetingUnrefundableStageEntered[lv_casterPlayer] = true;
    libNtve_gf_CreateActorAtPoint("SOATargetingModeConfirmationSound", lv_targetPoint);
    ActorSend(libCPCD_gv_gPTMTargetingActors[libCPCD_gv_gPTMTargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer], "Signal Destroy");
    if ((UnitIsValid(libCPCD_gv_gPTMTargetingUnit[libCPCD_gv_gPTMTargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer]) == false)) {
        return true;
    }

    libNtve_gf_MakeUnitFacePoint(libCPCD_gv_gPTMTargetingUnit[libCPCD_gv_gPTMTargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer], lv_targetPoint, 0.0);
    libCOUI_gf_CU_TargetingSetCharges((libCPCD_gv_gPTMTargetingChargesTotal[lv_casterPlayer]-libCPCD_gv_gPTMTargetingChargesSpent[lv_casterPlayer]), libCPCD_gv_gPTMTargetingChargesTotal[lv_casterPlayer], lv_casterPlayer);
    if ((libCPCD_gv_gPTMTargetingChargesSpent[lv_casterPlayer] == libCPCD_gv_gPTMTargetingChargesTotal[lv_casterPlayer])) {
        UnitBehaviorRemove(libCPCD_gv_gPTMCasterUnit[lv_casterPlayer], libCPCD_gv_gPTMTargetingBehavior[lv_casterPlayer], 1);
        Wait(0.1, c_timeGame);
    }
    else {
        libCOUI_gf_CU_TargetingSetInstructionText(libCPCD_gv_gPTMTargetingInstructionsPrimary[lv_casterPlayer], lv_casterPlayer);
        Wait(0.1, c_timeGame);
        if ((libCPCD_gv_gPTMTargetingAlreadyCanceled[lv_casterPlayer] == false)) {
            UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libCPCD_gv_gPTMCasterGroup[lv_casterPlayer], libCPCD_gv_gPTMTargetingOrder[lv_casterPlayer], false);
        }

        libCPCD_gv_gPTMTargetingPhase[lv_casterPlayer] = libCPCD_ge_GPTMTargetingPhaseType_Location;
    }
    libCPCD_gv_gPTMTargetingCycling[lv_casterPlayer] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_GPTMTargetingDirectionChosen_Init () {
    libCPCD_gt_GPTMTargetingDirectionChosen = TriggerCreate("libCPCD_gt_GPTMTargetingDirectionChosen_Func");
    TriggerEnable(libCPCD_gt_GPTMTargetingDirectionChosen, false);
    TriggerAddEventUnitOrder(libCPCD_gt_GPTMTargetingDirectionChosen, null, AbilityCommand("SOAThermalLanceExecute", 0));
    TriggerAddEventUnitOrder(libCPCD_gt_GPTMTargetingDirectionChosen, null, AbilityCommand("NovaGriffinBombingRunExecute", 0));
    TriggerAddEventUnitOrder(libCPCD_gt_GPTMTargetingDirectionChosen, null, AbilityCommand("HornerAirFleetExecute", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: GPTMTargetingEffectFired
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_GPTMTargetingEffectFired_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_GPTMTargetingCleanupActorsAndUnits(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_GPTMTargetingEffectFired_Init () {
    libCPCD_gt_GPTMTargetingEffectFired = TriggerCreate("libCPCD_gt_GPTMTargetingEffectFired_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_GPTMTargetingEffectFired, c_playerAny, "SOAOrbitalStrikeCP");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_GPTMTargetingEffectFired, c_playerAny, "SOAGravitonBombLM");
}

//--------------------------------------------------------------------------------------------------
// Trigger: GPTMTargetingCancel
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_GPTMTargetingCancel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCPCD_gv_gPTMTargetingCycling[EventPlayer()] == false))) {
            return false;
        }

        if (!(((EventTargetModeAbilCmd() == AbilityCommand("SOAOrbitalStrikeTargetingDummy", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("SOAThermalLanceTargetingDummy", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("SOAGravitonBomb", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("SOAThermalLanceExecute", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("NovaGriffinBombingRunExecute", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("NovaGriffinBombingRunTargetingDummy", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("HornerAirFleetExecute", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("HornerAirFleetTargetingDummy", 0))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_GPTMTargetingCancel(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_GPTMTargetingCancel_Init () {
    libCPCD_gt_GPTMTargetingCancel = TriggerCreate("libCPCD_gt_GPTMTargetingCancel_Func");
    TriggerEnable(libCPCD_gt_GPTMTargetingCancel, false);
    TriggerAddEventTargetModeUpdate(libCPCD_gt_GPTMTargetingCancel, c_playerAny, null, c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GPTMTargetingCancelFromUI
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_GPTMTargetingCancelFromUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_GPTMTargetingCancel(libCOUI_gf_CU_TargetingTriggeringPlayer());
    UISetTargetingOrder(PlayerGroupSingle(libCOUI_gf_CU_TargetingTriggeringPlayer()), libCPGL_gv_commander[libCOUI_gf_CU_TargetingTriggeringPlayer()].lv_globalCasterGroup, null, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_GPTMTargetingCancelFromUI_Init () {
    libCPCD_gt_GPTMTargetingCancelFromUI = TriggerCreate("libCPCD_gt_GPTMTargetingCancelFromUI_Func");
    libCOUI_gf_CU_TargetingCancel(libCPCD_gt_GPTMTargetingCancelFromUI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GPTMTargetingCameraShake
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_GPTMTargetingCameraShake_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distance;
    fixed[4] lv_cameraPosition;
    fixed[4] lv_effectPosition;
    int lv_player;
    point lv_effectTargetPoint;
    point lv_cameraTargetPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_effectTargetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cameraTargetPoint = CameraGetTarget(lv_player);
    lv_cameraPosition[0] = PointGetX(lv_cameraTargetPoint);
    lv_cameraPosition[1] = (PointGetY(lv_cameraTargetPoint)-(Cos(CameraGetPitch(lv_player))*CameraGetDistance(lv_player)));
    lv_cameraPosition[2] = (WorldHeight(c_heightMapGround, lv_cameraTargetPoint)+(Sin(CameraGetPitch(lv_player))*CameraGetDistance(lv_player)));
    lv_effectPosition[0] = PointGetX(lv_effectTargetPoint);
    lv_effectPosition[1] = PointGetY(lv_effectTargetPoint);
    lv_effectPosition[2] = WorldHeight(c_heightMapGround, lv_effectTargetPoint);
    lv_distance = SquareRoot((Pow((lv_cameraPosition[0]-lv_effectPosition[0]), 2.0) + Pow((lv_cameraPosition[1]-lv_effectPosition[1]), 2.0) + Pow((lv_cameraPosition[2]-lv_effectPosition[2]), 2.0)));
    CameraShakeStart(lv_player, c_cameraPositionTarget, c_cameraDirectionZ, MaxF((1-(lv_distance/50)), 0.0), 2.5, 100.0, 0.1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_GPTMTargetingCameraShake_Init () {
    libCPCD_gt_GPTMTargetingCameraShake = TriggerCreate("libCPCD_gt_GPTMTargetingCameraShake_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_GPTMTargetingCameraShake, c_playerAny, "SOAOrbitalStrikeImpactSearch");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_GPTMTargetingCameraShake, c_playerAny, "SOAGravitonBombCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: GPTMOrbitalStrikeActivated
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_GPTMOrbitalStrikeActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    libNtve_gf_StoreUnitSelection(lv_casterPlayer, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libCPCD_gv_gPTMTargetingActivateAbility[lv_casterPlayer] = "SOAOrbitalStrikeActivate";
    libCPCD_gv_gPTMTargetingExecuteCommand[lv_casterPlayer] = AbilityCommand("SOAOrbitalStrikeExecute", 0);
    libCPCD_gv_gPTMTargetingCooldown[lv_casterPlayer] = "Abil/SOAOrbitalStrikeActivate";
    libCPCD_gv_gPTMTargetingBehavior[lv_casterPlayer] = "SOAOrbitalStrikeActivate";
    libCPCD_gv_gPTMTargetingModel[lv_casterPlayer] = "SOAOrbitalStrikeTargetModel";
    libCPCD_gv_gPTMTargetingOrder[lv_casterPlayer] = OrderTargetingPoint(AbilityCommand("SOAOrbitalStrikeTargetingDummy", 0), UnitGetPosition(libCPCD_gv_gPTMCasterUnit[lv_casterPlayer]));
    libCPCD_gv_gPTMTargetingUnitType[lv_casterPlayer] = null;
    libCPCD_gv_gPTMTargetingChargesTotal[lv_casterPlayer] = 5;
    libCPCD_gv_gPTMTargetingInstructionsPrimary[lv_casterPlayer] = StringExternal("Param/Value/lib_CPCD_9CE031EF");
    libCPCD_gv_gPTMTargetingInstructionsSecondary[lv_casterPlayer] = null;
    libCPCD_gf_GPTMTargetingModeEnter(lv_casterPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_GPTMOrbitalStrikeActivated_Init () {
    libCPCD_gt_GPTMOrbitalStrikeActivated = TriggerCreate("libCPCD_gt_GPTMOrbitalStrikeActivated_Func");
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_GPTMOrbitalStrikeActivated, null, "SOAOrbitalStrikeActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GPTMOrbitalStrikeActivatedKarax
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_GPTMOrbitalStrikeActivatedKarax_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "KaraxCommander", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    libCPCD_gv_gPTMTargetingOrder[lv_casterPlayer] = OrderTargetingPoint(AbilityCommand("SOAOrbitalStrikeKarax", 0), UnitGetPosition(libCPCD_gv_gPTMCasterUnit[lv_casterPlayer]));
    UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libCPCD_gv_gPTMCasterGroup[lv_casterPlayer], libCPCD_gv_gPTMTargetingOrder[lv_casterPlayer], false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_GPTMOrbitalStrikeActivatedKarax_Init () {
    libCPCD_gt_GPTMOrbitalStrikeActivatedKarax = TriggerCreate("libCPCD_gt_GPTMOrbitalStrikeActivatedKarax_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_GPTMOrbitalStrikeActivatedKarax, c_playerAny, "SOAOrbitalStrikeCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: GPTMTemporalFieldActivated
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_GPTMTemporalFieldActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    libNtve_gf_StoreUnitSelection(lv_casterPlayer, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libCPCD_gv_gPTMTargetingActivateAbility[lv_casterPlayer] = "SOAGravitonBombActivate";
    libCPCD_gv_gPTMTargetingExecuteCommand[lv_casterPlayer] = AbilityCommand("SOAGravitonBombExecute", 0);
    libCPCD_gv_gPTMTargetingCooldown[lv_casterPlayer] = "Abil/SOAGravitonBombActivate";
    libCPCD_gv_gPTMTargetingBehavior[lv_casterPlayer] = "SOAGravitonBombActivate";
    libCPCD_gv_gPTMTargetingModel[lv_casterPlayer] = "SOAGravitonBombTargetModel";
    libCPCD_gv_gPTMTargetingOrder[lv_casterPlayer] = OrderTargetingPoint(AbilityCommand("SOAGravitonBomb", 0), UnitGetPosition(libCPCD_gv_gPTMCasterUnit[lv_casterPlayer]));
    libCPCD_gv_gPTMTargetingUnitType[lv_casterPlayer] = null;
    libCPCD_gv_gPTMTargetingChargesTotal[lv_casterPlayer] = 3;
    libCPCD_gv_gPTMTargetingInstructionsPrimary[lv_casterPlayer] = StringExternal("Param/Value/lib_CPCD_3393C3E7");
    libCPCD_gv_gPTMTargetingInstructionsSecondary[lv_casterPlayer] = null;
    libCPCD_gf_GPTMTargetingModeEnter(lv_casterPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_GPTMTemporalFieldActivated_Init () {
    libCPCD_gt_GPTMTemporalFieldActivated = TriggerCreate("libCPCD_gt_GPTMTemporalFieldActivated_Func");
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_GPTMTemporalFieldActivated, null, "SOAGravitonBombActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GPTMSolarLanceActivated
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_GPTMSolarLanceActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    libNtve_gf_StoreUnitSelection(lv_casterPlayer, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libCPCD_gv_gPTMTargetingActivateAbility[lv_casterPlayer] = "SOAThermalLanceActivate";
    libCPCD_gv_gPTMTargetingExecuteCommand[lv_casterPlayer] = AbilityCommand("SOAThermalLanceExecute", 0);
    libCPCD_gv_gPTMTargetingCooldown[lv_casterPlayer] = "Abil/SOAThermalLanceActivate";
    libCPCD_gv_gPTMTargetingBehavior[lv_casterPlayer] = "SOAThermalLanceActivate";
    libCPCD_gv_gPTMTargetingModel[lv_casterPlayer] = "SOAThermalLanceTargetingModel";
    libCPCD_gv_gPTMTargetingOrder[lv_casterPlayer] = OrderTargetingPoint(AbilityCommand("SOAThermalLanceTargetingDummy", 0), UnitGetPosition(libCPCD_gv_gPTMCasterUnit[lv_casterPlayer]));
    libCPCD_gv_gPTMTargetingUnitType[lv_casterPlayer] = "SOAThermalLanceTargeter";
    libCPCD_gv_gPTMTargetingChargesTotal[lv_casterPlayer] = 3;
    libCPCD_gv_gPTMTargetingInstructionsPrimary[lv_casterPlayer] = StringExternal("Param/Value/lib_CPCD_2D3ECDAE");
    libCPCD_gv_gPTMTargetingInstructionsSecondary[lv_casterPlayer] = StringExternal("Param/Value/lib_CPCD_D0D57E55");
    libCPCD_gf_GPTMTargetingModeEnter(lv_casterPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_GPTMSolarLanceActivated_Init () {
    libCPCD_gt_GPTMSolarLanceActivated = TriggerCreate("libCPCD_gt_GPTMSolarLanceActivated_Func");
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_GPTMSolarLanceActivated, null, "SOAThermalLanceActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GPTMTimeStopOn
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_GPTMTimeStopOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_GPTMTimeStopApply(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_GPTMTimeStopOn_Init () {
    libCPCD_gt_GPTMTimeStopOn = TriggerCreate("libCPCD_gt_GPTMTimeStopOn_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_GPTMTimeStopOn, c_playerAny, "SOATimeFreeze");
}

//--------------------------------------------------------------------------------------------------
// Trigger: GPTMTimeStopCleanup
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_GPTMTimeStopCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoE4285BAF_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE4285BAF_g = libCPGL_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoE4285BAF_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((EventTimer() == libCPCD_gv_gPTMTimeStopTimer[lv_indexPlayer])) {
            AITimePause(false);
            libCOOC_gf_CC_AchievementToggleTimeStop(false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_GPTMTimeStopCleanup_Init () {
    libCPCD_gt_GPTMTimeStopCleanup = TriggerCreate("libCPCD_gt_GPTMTimeStopCleanup_Func");
    TriggerEnable(libCPCD_gt_GPTMTimeStopCleanup, false);
    TriggerAddEventTimer(libCPCD_gt_GPTMTimeStopCleanup, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GPTMTargetingPurifierBeamOn
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_GPTMTargetingPurifierBeamOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StoreUnitSelection(EventPlayer(), libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libCPCD_gv_gPTMTargetingActivateAbility[EventPlayer()] = "SOAPurifierBeam";
    libCPCD_gv_gPTMTargetingOrder[EventPlayer()] = null;
    libCPCD_gv_gPTMTargetingExecuteCommand[EventPlayer()] = null;
    libCPCD_gv_gPTMTargetingCooldown[EventPlayer()] = "";
    libCPCD_gv_gPTMTargetingBehavior[EventPlayer()] = null;
    libCPCD_gv_gPTMTargetingModel[EventPlayer()] = null;
    libCPCD_gv_gPTMTargetingUnitType[EventPlayer()] = null;
    libCPCD_gv_gPTMTargetingChargesTotal[EventPlayer()] = 1;
    libCPCD_gv_gPTMTargetingInstructionsPrimary[EventPlayer()] = StringExternal("Param/Value/lib_CPCD_3E868311");
    libCPCD_gf_GPTMTargetingModeEnter(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_GPTMTargetingPurifierBeamOn_Init () {
    libCPCD_gt_GPTMTargetingPurifierBeamOn = TriggerCreate("libCPCD_gt_GPTMTargetingPurifierBeamOn_Func");
    TriggerAddEventTargetModeUpdate(libCPCD_gt_GPTMTargetingPurifierBeamOn, c_playerAny, AbilityCommand("SOAPurifierBeam", 0), c_targetModeStateOn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GPTMTargetingPurifierBeamOff
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_GPTMTargetingPurifierBeamOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_GPTMTargetingModeExit(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_GPTMTargetingPurifierBeamOff_Init () {
    libCPCD_gt_GPTMTargetingPurifierBeamOff = TriggerCreate("libCPCD_gt_GPTMTargetingPurifierBeamOff_Func");
    TriggerAddEventTargetModeUpdate(libCPCD_gt_GPTMTargetingPurifierBeamOff, c_playerAny, AbilityCommand("SOAPurifierBeam", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GPTMSuperShieldsActivated
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_GPTMSuperShieldsActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pCommander;
    int lv_itCommander;

    // Automatic Variable Declarations
    playergroup autoE29AB2E2_g;
    unitgroup autoBB837F66_g;
    int autoBB837F66_u;
    unit autoBB837F66_var;

    // Variable Initialization
    lv_pCommander = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    autoE29AB2E2_g = libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Ally, lv_pCommander);
    lv_itCommander = -1;
    while (true) {
        lv_itCommander = PlayerGroupNextPlayer(autoE29AB2E2_g, lv_itCommander);
        if (lv_itCommander < 0) { break; }
        autoBB837F66_g = UnitGroup(null, lv_itCommander, RegionEntireMap(), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoBB837F66_u = UnitGroupCount(autoBB837F66_g, c_unitCountAll);
        for (;; autoBB837F66_u -= 1) {
            autoBB837F66_var = UnitGroupUnitFromEnd(autoBB837F66_g, autoBB837F66_u);
            if (autoBB837F66_var == null) { break; }
            if ((UnitGetType(autoBB837F66_var) != "KerriganVoidCoopEconDropLT1") && (UnitGetType(autoBB837F66_var) != "KerriganVoidCoopEconDrop1") && (UnitGetType(autoBB837F66_var) != "KerriganVoidCoopEconDrop2") && (UnitGetType(autoBB837F66_var) != "KerriganVoidCoopEconDrop3") && (UnitGetType(autoBB837F66_var) != "KerriganVoidCoopEconDrop4") && (UnitGetType(autoBB837F66_var) != "KerriganVoidCoopEconDrop5")) {
                UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SOASuperShieldApply", autoBB837F66_var);
            }

        }
    }
    Wait(StringToFixed(CatalogReferenceGet("Behavior,SOASuperShield,Duration", lv_pCommander)), c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_GPTMSuperShieldsActivated_Init () {
    libCPCD_gt_GPTMSuperShieldsActivated = TriggerCreate("libCPCD_gt_GPTMSuperShieldsActivated_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_GPTMSuperShieldsActivated, c_playerAny, "SOASuperShieldDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: GPTMShiftCheatFailSafeThermal
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_GPTMShiftCheatFailSafeThermal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    abilcmd lv_cmd;
    string lv_abil;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit;
    lv_cmd = AbilityCommand("SOAThermalLanceActivate", 0);
    lv_abil = AbilityCommandGetAbility(lv_cmd);

    // Conditions
    if (testConds) {
        if (!((UnitAbilityGetCooldown(lv_caster, lv_abil, CatalogFieldValueGet(c_gameCatalogAbil, lv_abil, "Cost[" + IntToString(0) + "].Cooldown.Link", EventPlayer())) == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilitySpendExplicit(lv_caster, lv_cmd, c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_GPTMShiftCheatFailSafeThermal_Init () {
    libCPCD_gt_GPTMShiftCheatFailSafeThermal = TriggerCreate("libCPCD_gt_GPTMShiftCheatFailSafeThermal_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_GPTMShiftCheatFailSafeThermal, c_playerAny, "SOAThermalLanceSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: GPTMShiftCheatFailSafeHHCallFleet
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_GPTMShiftCheatFailSafeHHCallFleet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    abilcmd lv_cmd;
    string lv_abil;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit;
    lv_cmd = AbilityCommand("HornerAirFleetActivate", 0);
    lv_abil = AbilityCommandGetAbility(lv_cmd);

    // Conditions
    if (testConds) {
        if (!((UnitAbilityGetCooldown(lv_caster, lv_abil, CatalogFieldValueGet(c_gameCatalogAbil, lv_abil, "Cost[" + IntToString(0) + "].Cooldown.Link", EventPlayer())) == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilitySpendExplicit(lv_caster, lv_cmd, c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_GPTMShiftCheatFailSafeHHCallFleet_Init () {
    libCPCD_gt_GPTMShiftCheatFailSafeHHCallFleet = TriggerCreate("libCPCD_gt_GPTMShiftCheatFailSafeHHCallFleet_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_GPTMShiftCheatFailSafeHHCallFleet, c_playerAny, "HornerAirFleetInitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: GPTMShiftCheatFailSafeNovaBombing
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_GPTMShiftCheatFailSafeNovaBombing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    abilcmd lv_cmd;
    string lv_abil;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit;
    lv_cmd = AbilityCommand("NovaGriffinBombingRunActivate", 0);
    lv_abil = AbilityCommandGetAbility(lv_cmd);

    // Conditions
    if (testConds) {
        if (!((UnitAbilityGetCooldown(lv_caster, lv_abil, CatalogFieldValueGet(c_gameCatalogAbil, lv_abil, "Cost[" + IntToString(0) + "].Cooldown.Link", EventPlayer())) == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilitySpendExplicit(lv_caster, lv_cmd, c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_GPTMShiftCheatFailSafeNovaBombing_Init () {
    libCPCD_gt_GPTMShiftCheatFailSafeNovaBombing = TriggerCreate("libCPCD_gt_GPTMShiftCheatFailSafeNovaBombing_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_GPTMShiftCheatFailSafeNovaBombing, c_playerAny, "NovaGriffinBombingRunInitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: GPTMStrafeActivated
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_GPTMStrafeActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_radius;
    fixed lv_radiusMinimum;
    fixed lv_radiusMaximum;
    int lv_i;
    fixed lv_r;
    int lv_casterPlayer;
    point lv_targetPoint;
    int lv_masteryCount;
    fixed lv_masteryBonusPerPoint;
    fixed lv_masteryBonusTotal;
    fixed lv_shotCount;

    // Automatic Variable Declarations
    fixed auto4986B75C_ae;
    const fixed auto4986B75C_ai = 1.0;

    // Variable Initialization
    lv_radiusMinimum = 2.0;
    lv_radiusMaximum = 10.0;
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_masteryBonusPerPoint = 0.02;
    lv_masteryBonusTotal = 1.0;
    lv_shotCount = 100.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "MasteryArtanisSolarBombardment", c_techCountQueuedOrBetter) >= 1)) {
        lv_masteryCount = TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "MasteryArtanisSolarBombardment", c_techCountQueuedOrBetter);
        lv_masteryBonusTotal += (lv_masteryCount * lv_masteryBonusPerPoint);
        lv_shotCount *= lv_masteryBonusTotal;
        lv_radiusMaximum *= lv_masteryBonusTotal;
    }

    auto4986B75C_ae = lv_shotCount;
    lv_r = 1.0;
    for ( ; ( (auto4986B75C_ai >= 0 && lv_r <= auto4986B75C_ae) || (auto4986B75C_ai < 0 && lv_r >= auto4986B75C_ae) ) ; lv_r += auto4986B75C_ai ) {
        lv_radius = (((lv_r / lv_shotCount) * (lv_radiusMaximum - lv_radiusMinimum)) + lv_radiusMinimum);
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SOAStrafeAttackDamage", RegionRandomPoint(RegionCircle(lv_targetPoint, lv_radius)));
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SOAStrafeAttackDamage", RegionRandomPoint(RegionCircle(lv_targetPoint, lv_radius)));
        if ((TechTreeUpgradeCount(EventPlayer(), "SOAStrafeAttackUpgrade", c_techCountQueuedOrBetter) >= 1)) {
            UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SOAStrafeAttackDamage", RegionRandomPoint(RegionCircle(lv_targetPoint, lv_radius)));
            UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SOAStrafeAttackDamage", RegionRandomPoint(RegionCircle(lv_targetPoint, lv_radius)));
        }

        Wait(0.15, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_GPTMStrafeActivated_Init () {
    libCPCD_gt_GPTMStrafeActivated = TriggerCreate("libCPCD_gt_GPTMStrafeActivated_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_GPTMStrafeActivated, c_playerAny, "SOAStrafeAttackCreateTargeter");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHAirFleet_Activated
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHAirFleet_Activated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    libNtve_gf_StoreUnitSelection(lv_casterPlayer, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libCPCD_gv_gPTMTargetingActivateAbility[lv_casterPlayer] = "HornerAirFleetActivate";
    libCPCD_gv_gPTMTargetingExecuteCommand[lv_casterPlayer] = AbilityCommand("HornerAirFleetExecute", 0);
    libCPCD_gv_gPTMTargetingCooldown[lv_casterPlayer] = "Abil/HornerAirFleetActivate";
    libCPCD_gv_gPTMTargetingBehavior[lv_casterPlayer] = "HornerAirFleetActivate";
    libCPCD_gv_gPTMTargetingModel[lv_casterPlayer] = "HornerAirFleetTargetingModel";
    libCPCD_gv_gPTMTargetingOrder[lv_casterPlayer] = OrderTargetingPoint(AbilityCommand("HornerAirFleetTargetingDummy", 0), UnitGetPosition(libCPGL_gv_commander[lv_casterPlayer].lv_globalCasterUnit));
    libCPCD_gv_gPTMTargetingUnitType[lv_casterPlayer] = "HornerAirFleetTargeter";
    libCPCD_gv_gPTMTargetingChargesTotal[lv_casterPlayer] = 1;
    libCPCD_gv_gPTMTargetingInstructionsPrimary[lv_casterPlayer] = StringExternal("Param/Value/lib_CPCD_1F5B4432");
    libCPCD_gv_gPTMTargetingInstructionsSecondary[lv_casterPlayer] = StringExternal("Param/Value/lib_CPCD_083C018E");
    libCPCD_gf_GPTMTargetingModeEnter(lv_casterPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHAirFleet_Activated_Init () {
    libCPCD_gt_CDHHAirFleet_Activated = TriggerCreate("libCPCD_gt_CDHHAirFleet_Activated_Func");
    TriggerEnable(libCPCD_gt_CDHHAirFleet_Activated, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDHHAirFleet_Activated, null, "HornerAirFleetActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDNovaGriffinBombingRunActivate
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDNovaGriffinBombingRunActivate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    libNtve_gf_StoreUnitSelection(lv_casterPlayer, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libCPCD_gv_gPTMTargetingActivateAbility[lv_casterPlayer] = "NovaGriffinBombingRunActivate";
    libCPCD_gv_gPTMTargetingExecuteCommand[lv_casterPlayer] = AbilityCommand("NovaGriffinBombingRunExecute", 0);
    libCPCD_gv_gPTMTargetingCooldown[lv_casterPlayer] = "Abil/NovaGriffinBombingRunActivate";
    libCPCD_gv_gPTMTargetingBehavior[lv_casterPlayer] = "NovaGriffinBombingRunActivate";
    libCPCD_gv_gPTMTargetingModel[lv_casterPlayer] = "NovaGriffinBombingRunTargetingModel";
    libCPCD_gv_gPTMTargetingOrder[lv_casterPlayer] = OrderTargetingPoint(AbilityCommand("NovaGriffinBombingRunTargetingDummy", 0), UnitGetPosition(libCPGL_gv_commander[lv_casterPlayer].lv_globalCasterUnit));
    libCPCD_gv_gPTMTargetingUnitType[lv_casterPlayer] = "NovaGriffinBombingRunTargeter";
    libCPCD_gv_gPTMTargetingChargesTotal[lv_casterPlayer] = 1;
    libCPCD_gv_gPTMTargetingInstructionsPrimary[lv_casterPlayer] = StringExternal("Param/Value/lib_CPCD_F7D0C8CC");
    libCPCD_gv_gPTMTargetingInstructionsSecondary[lv_casterPlayer] = StringExternal("Param/Value/lib_CPCD_616C2E12");
    libCPCD_gf_GPTMTargetingModeEnter(lv_casterPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDNovaGriffinBombingRunActivate_Init () {
    libCPCD_gt_CDNovaGriffinBombingRunActivate = TriggerCreate("libCPCD_gt_CDNovaGriffinBombingRunActivate_Func");
    TriggerEnable(libCPCD_gt_CDNovaGriffinBombingRunActivate, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDNovaGriffinBombingRunActivate, null, "NovaGriffinBombingRunActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDNovaGriffinBombingRunFinish
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDNovaGriffinBombingRunFinish_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityGetCooldown(libCPGL_gv_commander[lv_p].lv_globalCasterUnit, "NovaGriffinBombingRunActivate", "Abil/NovaGriffinBombingRunActivate") > 1.0)) {
        UnitCreateEffectUnit(libCPGL_gv_commander[lv_p].lv_globalCasterUnit, "NovaGriffinGCD", libCPGL_gv_commander[lv_p].lv_globalCasterUnit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDNovaGriffinBombingRunFinish_Init () {
    libCPCD_gt_CDNovaGriffinBombingRunFinish = TriggerCreate("libCPCD_gt_CDNovaGriffinBombingRunFinish_Func");
    TriggerEnable(libCPCD_gt_CDNovaGriffinBombingRunFinish, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDNovaGriffinBombingRunFinish, null, "NovaGriffinBombingRunActivate", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZagaraWeaponSwap
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZagaraWeaponSwap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "HunterKiller")) {
        UnitWeaponRemove(EventUnit(), "HunterKillerMelee");
        UnitWeaponRemove(EventUnit(), "HunterKiller");
        UnitWeaponAdd(EventUnit(), "ZagaraHunterKillerMelee", null);
        UnitWeaponAdd(EventUnit(), "ZagaraHunterKiller", null);
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Roach")) {
        UnitWeaponRemove(EventUnit(), "AcidSaliva");
        UnitWeaponRemove(EventUnit(), "RoachMelee");
        UnitWeaponAdd(EventUnit(), "ZagaraAcidSaliva", null);
        UnitWeaponAdd(EventUnit(), "ZagaraRoachMelee", null);
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZagaraWeaponSwap_Init () {
    libCPCD_gt_CDZagaraWeaponSwap = TriggerCreate("libCPCD_gt_CDZagaraWeaponSwap_Func");
    TriggerEnable(libCPCD_gt_CDZagaraWeaponSwap, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDZagaraWeaponSwap, null, "ZagaraOwned", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZagaraRoachDropScale
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZagaraRoachDropScale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_scaleModifier;
    fixed lv_upgradeCount;
    fixed lv_newScale;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scaleModifier = 0.02;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_upgradeCount = TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "MasteryZagaraRoachDropDamageAndHealth", c_techCountCompleteOnly);
    lv_newScale = (1+(lv_upgradeCount*lv_scaleModifier));
    TextExpressionSetToken("Param/Expression/lib_CPCD_38F84636", "A", FixedToText(lv_newScale, c_fixedPrecisionAny));
    ActorSendAsText(libNtve_gf_MainActorofUnit(EventUnit()), TextExpressionAssemble("Param/Expression/lib_CPCD_38F84636"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZagaraRoachDropScale_Init () {
    libCPCD_gt_CDZagaraRoachDropScale = TriggerCreate("libCPCD_gt_CDZagaraRoachDropScale_Func");
    TriggerEnable(libCPCD_gt_CDZagaraRoachDropScale, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDZagaraRoachDropScale, null, "ZagaraVoidCoopInfestedPodsTimedLife", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDSwannDrillCallforHelp
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDSwannDrillCallforHelp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_laserdrillowner;
    unit lv_laserdrilltarget;
    region lv_laserdrilltargetvicinity;
    unitgroup lv_laserdrillspotters;
    unit lv_laserdrillspotter;

    // Automatic Variable Declarations
    unitgroup auto87E2261F_g;
    int auto87E2261F_u;

    // Variable Initialization
    lv_laserdrillowner = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_laserdrilltarget = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_laserdrilltargetvicinity = RegionCircle(UnitGetPosition(lv_laserdrilltarget), 12.0);
    lv_laserdrillspotters = UnitGroupAlliance(lv_laserdrillowner, c_unitAllianceAlly, lv_laserdrilltargetvicinity, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);

    // Actions
    if (!runActions) {
        return true;
    }

    auto87E2261F_g = lv_laserdrillspotters;
    auto87E2261F_u = UnitGroupCount(auto87E2261F_g, c_unitCountAll);
    for (;; auto87E2261F_u -= 1) {
        lv_laserdrillspotter = UnitGroupUnitFromEnd(auto87E2261F_g, auto87E2261F_u);
        if (lv_laserdrillspotter == null) { break; }
        UnitCreateEffectUnit(lv_laserdrillspotter, "DrakkenLaserDrillSpotterCallForHelp", lv_laserdrilltarget);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDSwannDrillCallforHelp_Init () {
    libCPCD_gt_CDSwannDrillCallforHelp = TriggerCreate("libCPCD_gt_CDSwannDrillCallforHelp_Func");
    TriggerEnable(libCPCD_gt_CDSwannDrillCallforHelp, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDSwannDrillCallforHelp, c_playerAny, "LaserDrillTripodDamageCoop");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDSwannThorRebuildController
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDSwannThorRebuildController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_morphTime;
    fixed lv_upgradeCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_morphTime = 12.0;

    // Actions
    if (!runActions) {
        return true;
    }

    ActorScopeSend(ActorScopeFromUnit(EventUnit()), "AnimPlay Morph Morph,Start");
    lv_upgradeCount = IntToFixed(TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "MasterySwannImmortalityProtocol", c_techCountCompleteOnly));
    lv_morphTime = ((lv_morphTime-(lv_morphTime*(lv_upgradeCount/50)))-3);
    Wait(1.0, c_timeGame);
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), (("AnimPlay Morph Morph 0 -1.000000 -1.000000 " + FixedToString(lv_morphTime, 2) + " AsDuration ")));
    Wait(lv_morphTime, c_timeGame);
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), "AnimPlay Morph Morph,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDSwannThorRebuildController_Init () {
    libCPCD_gt_CDSwannThorRebuildController = TriggerCreate("libCPCD_gt_CDSwannThorRebuildController_Func");
    TriggerEnable(libCPCD_gt_CDSwannThorRebuildController, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDSwannThorRebuildController, null, AbilityCommand("ThorRebornSwann", 0), c_abilMorphStageActorStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDSwannTankrRebuildController
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDSwannTankrRebuildController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_morphTime;
    fixed lv_upgradeCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_morphTime = 8.0;

    // Actions
    if (!runActions) {
        return true;
    }

    ActorScopeSend(ActorScopeFromUnit(EventUnit()), "AnimPlay Morph Morph,Start");
    lv_upgradeCount = IntToFixed(TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "MasterySwannImmortalityProtocol", c_techCountCompleteOnly));
    lv_morphTime = ((lv_morphTime-(lv_morphTime*(lv_upgradeCount/50)))-3);
    Wait(1.0, c_timeGame);
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), (("AnimPlay Morph Morph 0 -1.000000 -1.000000 " + FixedToString(lv_morphTime, 2) + " AsDuration ")));
    Wait(lv_morphTime, c_timeGame);
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), "AnimPlay Morph Morph,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDSwannTankrRebuildController_Init () {
    libCPCD_gt_CDSwannTankrRebuildController = TriggerCreate("libCPCD_gt_CDSwannTankrRebuildController_Func");
    TriggerEnable(libCPCD_gt_CDSwannTankrRebuildController, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDSwannTankrRebuildController, null, AbilityCommand("SiegeTankReborn", 0), c_abilMorphStageActorStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDSwannVespeneDroneTrigger
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDSwannVespeneDroneTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoEC66857C_g;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    autoEC66857C_g = libCPGL_gf_IntersectionofPlayerGroupsCoop(libCPGL_gf_HumanPlayers(), libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Ally, lv_player));
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoEC66857C_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        PlayerCreateEffectPoint(lv_itPlayer, "VespeneDroneGrantResourcesTrigger", PlayerStartLocation(lv_itPlayer));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDSwannVespeneDroneTrigger_Init () {
    libCPCD_gt_CDSwannVespeneDroneTrigger = TriggerCreate("libCPCD_gt_CDSwannVespeneDroneTrigger_Func");
    TriggerEnable(libCPCD_gt_CDSwannVespeneDroneTrigger, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDSwannVespeneDroneTrigger, c_playerAny, "VespeneDroneImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDSwannMultiBuildUser
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_AdvancedConstructionAutoUser_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_orderDummy;
    unit lv_sCV;
    unit lv_target;
    bool lv_isUserOrder;
    bool lv_isSetAutoCastStateOrder;
    bool lv_isQueuedOrder;
    string lv_ut;
    abilcmd lv_cmd;
    order lv_order;
    int lv_c;
    int lv_i;

    // Automatic Variable Declarations
    int auto06C96C1B_ae;
    const int auto06C96C1B_ai = 1;

    // Variable Initialization
    lv_orderDummy = EventUnitOrder();
    lv_sCV = EventUnit();
    lv_target = OrderGetTargetUnit(lv_orderDummy);
    lv_isUserOrder = OrderGetFlag(lv_orderDummy, c_cmdUser);
    lv_isSetAutoCastStateOrder = OrderGetFlag(lv_orderDummy, c_cmdSetAutoCast);
    lv_isQueuedOrder = OrderGetFlag(lv_orderDummy, c_cmdQueued);
    lv_ut = UnitGetType(lv_target);
    lv_c = TechTreeUnitProducedAbilCmdCount(lv_ut);

    // Conditions
    if (testConds) {
        if (!((lv_isUserOrder == true))) {
            return false;
        }

        if (!((lv_isSetAutoCastStateOrder == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_sCV, "CancelOrderAdvancedConstructionAuto", lv_sCV);
    auto06C96C1B_ae = (lv_c - 1);
    lv_i = 0;
    for ( ; ( (auto06C96C1B_ai >= 0 && lv_i <= auto06C96C1B_ae) || (auto06C96C1B_ai < 0 && lv_i >= auto06C96C1B_ae) ) ; lv_i += auto06C96C1B_ai ) {
        lv_cmd = TechTreeUnitProducedAbilCmd(lv_ut, lv_i);
        lv_order = Order(lv_cmd);
        if ((UnitOrderIsValid(lv_sCV, lv_order) == false)) {
            break;
        }

        lv_order = OrderTargetingUnit(lv_cmd, lv_target);
        OrderSetFlag(lv_order, c_cmdSmartClick, true);
        OrderSetFlag(lv_order, c_cmdQueued, lv_isQueuedOrder);
        if ((UnitOrderIsValid(lv_sCV, lv_order) == true)) {
            UnitIssueOrder(lv_sCV, lv_order, c_orderQueueReplace);
            return true;
        }

    }
    libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Error/CannotAdvancedConstruction"), SoundLink("UI_GenericError", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_AdvancedConstructionAutoUser_Init () {
    libCPCD_gt_AdvancedConstructionAutoUser = TriggerCreate("libCPCD_gt_AdvancedConstructionAutoUser_Func");
    TriggerEnable(libCPCD_gt_AdvancedConstructionAutoUser, false);
    TriggerAddEventUnitOrder(libCPCD_gt_AdvancedConstructionAutoUser, null, AbilityCommand("AdvancedConstructionAuto", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDSwannMultiBuildAuto
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_AdvancedConstructionAutoAutoCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_orderDummy;
    unit lv_sCV;
    unit lv_target;
    bool lv_isUserOrder;
    bool lv_isQueuedOrder;
    string lv_ut;
    abilcmd lv_cmd;
    order lv_order;
    int lv_c;
    int lv_i;

    // Automatic Variable Declarations
    int auto5281A3D8_ae;
    const int auto5281A3D8_ai = 1;

    // Variable Initialization
    lv_orderDummy = UnitOrder(EventUnit(), 0);
    lv_sCV = EventUnit();
    lv_target = OrderGetTargetUnit(lv_orderDummy);
    lv_isUserOrder = OrderGetFlag(lv_orderDummy, c_cmdUser);
    lv_isQueuedOrder = OrderGetFlag(lv_orderDummy, c_cmdQueued);
    lv_ut = UnitGetType(lv_target);
    lv_c = TechTreeUnitProducedAbilCmdCount(lv_ut);

    // Conditions
    if (testConds) {
        if (!((lv_isUserOrder == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_sCV, "CancelOrderAdvancedConstructionAuto", lv_sCV);
    auto5281A3D8_ae = (lv_c - 1);
    lv_i = 0;
    for ( ; ( (auto5281A3D8_ai >= 0 && lv_i <= auto5281A3D8_ae) || (auto5281A3D8_ai < 0 && lv_i >= auto5281A3D8_ae) ) ; lv_i += auto5281A3D8_ai ) {
        lv_cmd = TechTreeUnitProducedAbilCmd(lv_ut, lv_i);
        lv_order = Order(lv_cmd);
        if ((UnitOrderIsValid(lv_sCV, lv_order) == false)) {
            return true;
        }

        lv_order = OrderTargetingUnit(lv_cmd, lv_target);
        OrderSetFlag(lv_order, c_cmdSmartClick, true);
        OrderSetFlag(lv_order, c_cmdPreempt, true);
        if ((UnitOrderIsValid(lv_sCV, lv_order) == true)) {
            UnitIssueOrder(lv_sCV, lv_order, c_orderQueueReplace);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_AdvancedConstructionAutoAutoCast_Init () {
    libCPCD_gt_AdvancedConstructionAutoAutoCast = TriggerCreate("libCPCD_gt_AdvancedConstructionAutoAutoCast_Func");
    TriggerEnable(libCPCD_gt_AdvancedConstructionAutoAutoCast, false);
    TriggerAddEventUnitAbility(libCPCD_gt_AdvancedConstructionAutoAutoCast, null, AbilityCommand("AdvancedConstructionAuto", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDSwannDrillBeamActivate
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDSwannDrillBeamActivate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_laserDrillUnit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UISetTargetingOrder(PlayerGroupSingle(UnitGetOwner(libCPCD_gv_cDSwannLaserDrill[lv_player])), libCPCD_gv_cDSwannLaserDrillGroup[lv_player], OrderTargetingPoint(AbilityCommand("DrakkenLaserDrillBFG", 0), UnitGetPosition(libCPCD_gv_cDSwannLaserDrill[lv_player])), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDSwannDrillBeamActivate_Init () {
    libCPCD_gt_CDSwannDrillBeamActivate = TriggerCreate("libCPCD_gt_CDSwannDrillBeamActivate_Func");
    TriggerEnable(libCPCD_gt_CDSwannDrillBeamActivate, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDSwannDrillBeamActivate, null, AbilityCommand("DrakkenLaserDrillConcentratedBeamIssueOrder", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDSwannDrillNukeActivate
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDSwannDrillNukeActivate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UISetTargetingOrder(PlayerGroupSingle(UnitGetOwner(libCPCD_gv_cDSwannLaserDrill[lv_player])), libCPCD_gv_cDSwannLaserDrillGroup[lv_player], OrderTargetingPoint(AbilityCommand("DrakkenLaserDrillNuke", 0), UnitGetPosition(libCPCD_gv_cDSwannLaserDrill[lv_player])), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDSwannDrillNukeActivate_Init () {
    libCPCD_gt_CDSwannDrillNukeActivate = TriggerCreate("libCPCD_gt_CDSwannDrillNukeActivate_Func");
    TriggerEnable(libCPCD_gt_CDSwannDrillNukeActivate, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDSwannDrillNukeActivate, null, AbilityCommand("DrakkenLaserDrillPulseCannonIssueOrder", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDSwannDrillBeam
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDSwannDrillBeam_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_casterPoint;
    point lv_targetPoint;
    point lv_abilityTargetPoint;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_casterPoint = UnitGetPosition(EventUnit());
    lv_targetPoint = EventUnitTargetPoint();
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    lv_abilityTargetPoint = libCPCD_gf_CDSwannDrillTarget(lv_targetPoint, lv_casterPoint, RegionPlayableMap(), lv_player);
    if ((lv_abilityTargetPoint != null)) {
        CatalogFieldValueModify(c_gameCatalogEffect, "DrakkenLaserDrillBFGDummyCP", "PeriodicOffsetArray[" + IntToString(0) + "]", EventPlayer(), ("0, -" + IntToString((libCPCD_gv_cDSwannDrillBeamDistance[lv_player] / 2)) + ", 0"), c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogEffect, "DrakkenLaserDrillBFGCP", "PeriodicOffsetArray[" + IntToString(0) + "]", EventPlayer(), ("0, -" + IntToString((libCPCD_gv_cDSwannDrillBeamDistance[lv_player] / 2)) + ", 0"), c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogEffect, "DrakkenLaserDrillBFGSearch", "AreaArray[" + IntToString(0) + "].RectangleHeight", EventPlayer(), IntToString(libCPCD_gv_cDSwannDrillBeamDistance[lv_player]), c_upgradeOperationSet);
        UnitCreateEffectPoint(EventUnit(), "DrakkenLaserDrillBFGSet", lv_abilityTargetPoint);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDSwannDrillBeam_Init () {
    libCPCD_gt_CDSwannDrillBeam = TriggerCreate("libCPCD_gt_CDSwannDrillBeam_Func");
    TriggerEnable(libCPCD_gt_CDSwannDrillBeam, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDSwannDrillBeam, null, AbilityCommand("DrakkenLaserDrillBFG", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDSwannSoundRegionStart
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDSwannSoundRegionStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_a;
    point lv_b;
    fixed lv_d;
    int lv_di;
    fixed lv_facing;
    int lv_i;
    fixed lv_x;
    fixed lv_y;
    int lv_player;

    // Automatic Variable Declarations
    int autoD458560F_ae;
    const int autoD458560F_ai = 1;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCPCD_gv_cDSwannSoundRegionCreated[lv_player] == true)) {
        ActorScopeSend(ActorScopeFromActor(libCPCD_gv_cDSwannSoundRegionActor[lv_player]), "Signal StopSound");
        libCPCD_gv_cDSwannSoundRegion[lv_player] = RegionEmpty();
        libCPCD_gv_cDSwannSoundRegionCreated[lv_player] = false;
    }

    lv_a = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_b = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    lv_facing = AngleBetweenPoints(lv_a, lv_b);
    lv_d = DistanceBetweenPoints(lv_a, lv_b);
    lv_di = FixedToInt((lv_d / 5.0));
    lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * 5.0));
    lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * 5.0));
    libCPCD_gv_cDSwannSoundRegion[lv_player] = RegionCircle(Point(lv_x, lv_y), 1.0);
    autoD458560F_ae = lv_di;
    lv_i = 1;
    for ( ; ( (autoD458560F_ai >= 0 && lv_i <= autoD458560F_ae) || (autoD458560F_ai < 0 && lv_i >= autoD458560F_ae) ) ; lv_i += autoD458560F_ai ) {
        lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        RegionAddCircle(libCPCD_gv_cDSwannSoundRegion[lv_player], true, Point(lv_x, lv_y), 3.0);
    }
    ActorRegionCreate(null, "LaserDrillCoopBeamRegion", libCPCD_gv_cDSwannSoundRegion[lv_player]);
    libCPCD_gv_cDSwannSoundRegionActor[lv_player] = libNtve_gf_ActorLastCreated();
    libCPCD_gv_cDSwannSoundRegionCreated[lv_player] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDSwannSoundRegionStart_Init () {
    libCPCD_gt_CDSwannSoundRegionStart = TriggerCreate("libCPCD_gt_CDSwannSoundRegionStart_Func");
    TriggerEnable(libCPCD_gt_CDSwannSoundRegionStart, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDSwannSoundRegionStart, c_playerAny, "LaserDrillTripodCoopFinalPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDSwannSoundRegionClear
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDSwannSoundRegionClear_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCPCD_gv_cDSwannSoundRegionCreated[lv_player] == true)) {
        ActorScopeSend(ActorScopeFromActor(libCPCD_gv_cDSwannSoundRegionActor[lv_player]), "Signal StopSound");
        libCPCD_gv_cDSwannSoundRegion[lv_player] = RegionEmpty();
        libCPCD_gv_cDSwannSoundRegionCreated[lv_player] = false;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDSwannSoundRegionClear_Init () {
    libCPCD_gt_CDSwannSoundRegionClear = TriggerCreate("libCPCD_gt_CDSwannSoundRegionClear_Func");
    TriggerEnable(libCPCD_gt_CDSwannSoundRegionClear, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDSwannSoundRegionClear, c_playerAny, "LaserDrillTripodCoopFinalPersistentEnd");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDSwannSoundBeamStart
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDSwannSoundBeamStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_a;
    point lv_b;
    fixed lv_d;
    int lv_di;
    fixed lv_facing;
    int lv_i;
    fixed lv_x;
    fixed lv_y;
    int lv_player;

    // Automatic Variable Declarations
    int autoA46F364B_ae;
    const int autoA46F364B_ai = 1;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCPCD_gv_cDSwannSoundBeamRegionCreated[lv_player] == true)) {
        ActorScopeSend(ActorScopeFromActor(libCPCD_gv_cDSwannSoundBeamRegionActor[lv_player]), "Signal StopSound");
        libCPCD_gv_cDSwannSoundBeamRegion[lv_player] = RegionEmpty();
        libCPCD_gv_cDSwannSoundBeamRegionCreated[lv_player] = false;
    }

    lv_a = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_b = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_facing = AngleBetweenPoints(lv_a, lv_b);
    lv_d = DistanceBetweenPoints(lv_a, lv_b);
    lv_di = FixedToInt((lv_d / 5.0));
    lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * 5.0));
    lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * 5.0));
    libCPCD_gv_cDSwannSoundBeamRegion[lv_player] = RegionCircle(Point(lv_x, lv_y), 1.0);
    autoA46F364B_ae = lv_di;
    lv_i = 1;
    for ( ; ( (autoA46F364B_ai >= 0 && lv_i <= autoA46F364B_ae) || (autoA46F364B_ai < 0 && lv_i >= autoA46F364B_ae) ) ; lv_i += autoA46F364B_ai ) {
        lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        RegionAddCircle(libCPCD_gv_cDSwannSoundBeamRegion[lv_player], true, Point(lv_x, lv_y), 3.0);
    }
    ActorRegionCreate(null, "LaserDrillCoopConcentratedBeamRegion", libCPCD_gv_cDSwannSoundBeamRegion[lv_player]);
    libCPCD_gv_cDSwannSoundBeamRegionActor[lv_player] = libNtve_gf_ActorLastCreated();
    libCPCD_gv_cDSwannSoundBeamRegionCreated[lv_player] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDSwannSoundBeamStart_Init () {
    libCPCD_gt_CDSwannSoundBeamStart = TriggerCreate("libCPCD_gt_CDSwannSoundBeamStart_Func");
    TriggerEnable(libCPCD_gt_CDSwannSoundBeamStart, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDSwannSoundBeamStart, c_playerAny, "DrakkenLaserDrillBFGCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDSwannSoundNukeRegionStart
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDSwannSoundNukeRegionStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_a;
    point lv_b;
    fixed lv_d;
    int lv_di;
    fixed lv_facing;
    int lv_i;
    fixed lv_x;
    fixed lv_y;
    int lv_player;

    // Automatic Variable Declarations
    int autoE181EA64_ae;
    const int autoE181EA64_ai = 1;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCPCD_gv_cDSwannSoundNukeRegionCreated[lv_player] == true)) {
        ActorScopeSend(ActorScopeFromActor(libCPCD_gv_cDSwannSoundNukeRegionActor[lv_player]), "Signal StopSound");
        libCPCD_gv_cDSwannSoundNukeRegion[lv_player] = RegionEmpty();
        libCPCD_gv_cDSwannSoundNukeRegionCreated[lv_player] = false;
    }

    lv_a = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_b = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_facing = AngleBetweenPoints(lv_a, lv_b);
    lv_d = DistanceBetweenPoints(lv_a, lv_b);
    lv_di = FixedToInt((lv_d / 5.0));
    lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * 5.0));
    lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * 5.0));
    libCPCD_gv_cDSwannSoundNukeRegion[lv_player] = RegionCircle(Point(lv_x, lv_y), 1.0);
    autoE181EA64_ae = lv_di;
    lv_i = 1;
    for ( ; ( (autoE181EA64_ai >= 0 && lv_i <= autoE181EA64_ae) || (autoE181EA64_ai < 0 && lv_i >= autoE181EA64_ae) ) ; lv_i += autoE181EA64_ai ) {
        lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        RegionAddCircle(libCPCD_gv_cDSwannSoundNukeRegion[lv_player], true, Point(lv_x, lv_y), 3.0);
    }
    ActorRegionCreate(null, "PulseCannonBeamRegion", libCPCD_gv_cDSwannSoundNukeRegion[lv_player]);
    libCPCD_gv_cDSwannSoundNukeRegionActor[lv_player] = libNtve_gf_ActorLastCreated();
    libCPCD_gv_cDSwannSoundNukeRegionCreated[lv_player] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDSwannSoundNukeRegionStart_Init () {
    libCPCD_gt_CDSwannSoundNukeRegionStart = TriggerCreate("libCPCD_gt_CDSwannSoundNukeRegionStart_Func");
    TriggerEnable(libCPCD_gt_CDSwannSoundNukeRegionStart, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDSwannSoundNukeRegionStart, c_playerAny, "DrakkenLaserDrillNukeDelayCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDSwannSoundNukeRegionClear
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDSwannSoundNukeRegionClear_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCPCD_gv_cDSwannSoundNukeRegionCreated[lv_player] == true)) {
        ActorScopeSend(ActorScopeFromActor(libCPCD_gv_cDSwannSoundNukeRegionActor[lv_player]), "Signal StopSound");
        libCPCD_gv_cDSwannSoundNukeRegion[lv_player] = RegionEmpty();
        libCPCD_gv_cDSwannSoundNukeRegionCreated[lv_player] = false;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDSwannSoundNukeRegionClear_Init () {
    libCPCD_gt_CDSwannSoundNukeRegionClear = TriggerCreate("libCPCD_gt_CDSwannSoundNukeRegionClear_Func");
    TriggerEnable(libCPCD_gt_CDSwannSoundNukeRegionClear, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDSwannSoundNukeRegionClear, c_playerAny, "DrakkenLaserDrillNukeSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDSwannDrillAttackOrder
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDSwannDrillAttackOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_order;
    bool lv_queue;
    unit lv_laserDrill;
    order lv_orderAttack;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_order = EventUnitOrder();
    lv_queue = OrderGetFlag(lv_order, c_cmdQueued);
    lv_laserDrill = libCPCD_gv_cDSwannLaserDrill[OrderGetPlayer(lv_order)];
    lv_orderAttack = OrderTargetingUnit(AbilityCommand("attack", 0), OrderGetTargetUnit(lv_order));

    // Actions
    if (!runActions) {
        return true;
    }

    OrderSetFlag(lv_orderAttack, c_cmdQueued, lv_queue);
    UnitIssueOrder(lv_laserDrill, lv_orderAttack, c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDSwannDrillAttackOrder_Init () {
    libCPCD_gt_CDSwannDrillAttackOrder = TriggerCreate("libCPCD_gt_CDSwannDrillAttackOrder_Func");
    TriggerAddEventUnitOrder(libCPCD_gt_CDSwannDrillAttackOrder, null, AbilityCommand("DrakkenLaserDrillAttackIssueOrder", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDArtanisGuardianShell
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDArtanisGuardianShell_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitClearCooldowns(EventUnit(), true);
    if ((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterCanHaveEnergy), 0, 0, 0)) == true) && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(EventUnit()), "EnergyStart", UnitGetOwner(EventUnit())))) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(EventUnit()), "EnergyStart", UnitGetOwner(EventUnit())) / libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(EventUnit()), "EnergyMax", UnitGetOwner(EventUnit()))));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDArtanisGuardianShell_Init () {
    libCPCD_gt_CDArtanisGuardianShell = TriggerCreate("libCPCD_gt_CDArtanisGuardianShell_Func");
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDArtanisGuardianShell, null, "SOAHeroicShieldImmunity", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDKerriganWeaponSwap
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDKerriganWeaponSwap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "MutaliskBroodlord")) {
        UnitWeaponRemove(EventUnit(), "GlaiveWurm");
        UnitWeaponAdd(EventUnit(), "CoopGlaiveWurm", null);
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDKerriganWeaponSwap_Init () {
    libCPCD_gt_CDKerriganWeaponSwap = TriggerCreate("libCPCD_gt_CDKerriganWeaponSwap_Func");
    TriggerEnable(libCPCD_gt_CDKerriganWeaponSwap, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDKerriganWeaponSwap, null, "KerriganOwned", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDKerriganEcoDrop
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDKerriganEcoDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_position;
    string lv_resource;
    int lv_killer;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto523152E1_g;

    // Variable Initialization
    lv_killer = libNtve_gf_KillingPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "KerriganVoidCoopEconDrop") == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPGL_gf_HumanPlayers(), libNtve_gf_KillingPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_position = UnitGetPosition(EventUnit());
    if ((UnitHasBehavior2(EventUnit(), "SupplyLT1") == true)) {
        lv_resource = "KerriganVoidCoopEconDropLT1";
    }
    else if ((UnitHasBehavior2(EventUnit(), "HybridUnitDummy") == true)) {
        lv_resource = "KerriganVoidCoopEconDrop4";
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0) == -1)) {
        lv_resource = "KerriganVoidCoopEconDrop1";
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0) == -2)) {
        lv_resource = "KerriganVoidCoopEconDrop2";
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0) == -3)) {
        lv_resource = "KerriganVoidCoopEconDrop3";
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0) == -4)) {
        lv_resource = "KerriganVoidCoopEconDrop4";
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0) < -4)) {
        lv_resource = "KerriganVoidCoopEconDrop5";
    }
    if ((lv_resource == null)) {
        return true;
    }

    auto523152E1_g = PlayerGroupAlliance(c_playerGroupAlly, libNtve_gf_KillingPlayer());
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto523152E1_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_resource, 0, lv_itPlayer, lv_position);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDKerriganEcoDrop_Init () {
    libCPCD_gt_CDKerriganEcoDrop = TriggerCreate("libCPCD_gt_CDKerriganEcoDrop_Func");
    TriggerEnable(libCPCD_gt_CDKerriganEcoDrop, false);
    TriggerAddEventUnitDied(libCPCD_gt_CDKerriganEcoDrop, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDKerriganPsiStrike
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDKerriganPsiStrike_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_k;
    point lv_t;
    point lv_finalT;
    fixed lv_facing;
    fixed lv_distance;
    bool lv_goodPositionFound;
    int lv_i;
    int lv_player;

    // Automatic Variable Declarations
    const int auto88D9D14E_ae = 14;
    const int auto88D9D14E_ai = 1;

    // Variable Initialization
    lv_k = UnitGetPosition(EventUnit());
    lv_t = EventUnitTargetPoint();
    lv_facing = AngleBetweenPoints(UnitGetPosition(EventUnit()), EventUnitTargetPoint());
    lv_distance = 8.0;
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, 8.0, lv_t);
    lv_finalT = lv_t;
    while ((lv_distance >= 0.6) && (lv_goodPositionFound == false)) {
        lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, lv_distance, lv_t);
        if ((PointPathingCost(lv_k, lv_t) <= FixedToInt((lv_distance * 1.5))) && (WorldHeight(c_heightMapGround, lv_k) < (WorldHeight(c_heightMapGround, lv_t) + 1.0)) && (WorldHeight(c_heightMapGround, lv_k) > (WorldHeight(c_heightMapGround, lv_t) - 1.0))) {
            lv_goodPositionFound = true;
        }

        lv_distance -= 0.5;
    }
    Wait(0.0625, c_timeGame);
    if ((lv_goodPositionFound == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_t), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueReplace);
    }
    Wait(0.1875, c_timeGame);
    lv_i = 1;
    for ( ; ( (auto88D9D14E_ai >= 0 && lv_i <= auto88D9D14E_ae) || (auto88D9D14E_ai < 0 && lv_i >= auto88D9D14E_ae) ) ; lv_i += auto88D9D14E_ai ) {
        libCPCD_gv_cDKerriganPsiStrikeFacing[lv_player] = UnitGetFacing(EventUnit());
        if ((lv_facing > 90.0)) {
            if (((libCPCD_gv_cDKerriganPsiStrikeFacing[lv_player] < (lv_facing - 90.0)) && (libCPCD_gv_cDKerriganPsiStrikeFacing[lv_player] > (lv_facing - 270.0)))) {
                UnitBehaviorRemove(EventUnit(), "PsiStrikeWalkSpeed", 1);
                break;
            }

        }
        else {
            if ((lv_facing < -90.0)) {
                if (((libCPCD_gv_cDKerriganPsiStrikeFacing[lv_player] > (lv_facing + 90.0)) && (libCPCD_gv_cDKerriganPsiStrikeFacing[lv_player] < (lv_facing + 270.0)))) {
                    UnitBehaviorRemove(EventUnit(), "PsiStrikeWalkSpeed", 1);
                    break;
                }

            }
            else {
                if (((libCPCD_gv_cDKerriganPsiStrikeFacing[lv_player] > (lv_facing + 90.0)) || (libCPCD_gv_cDKerriganPsiStrikeFacing[lv_player] < (lv_facing - 90.0)))) {
                    UnitBehaviorRemove(EventUnit(), "PsiStrikeWalkSpeed", 1);
                    break;
                }

            }
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDKerriganPsiStrike_Init () {
    libCPCD_gt_CDKerriganPsiStrike = TriggerCreate("libCPCD_gt_CDKerriganPsiStrike_Func");
    TriggerEnable(libCPCD_gt_CDKerriganPsiStrike, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDKerriganPsiStrike, null, AbilityCommand("PsiStrikeWalk", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MasteryKerriganInstantReviveCooldown
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_MasteryKerriganInstantReviveCooldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(libCPGL_gv_commander[lv_p].lv_heroUnit, "KerriganInstantReviveCooldown", libCPGL_gv_commander[lv_p].lv_heroUnit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_MasteryKerriganInstantReviveCooldown_Init () {
    libCPCD_gt_CM_MasteryKerriganInstantReviveCooldown = TriggerCreate("libCPCD_gt_CM_MasteryKerriganInstantReviveCooldown_Func");
    TriggerEnable(libCPCD_gt_CM_MasteryKerriganInstantReviveCooldown, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CM_MasteryKerriganInstantReviveCooldown, c_playerAny, "MasteryKerriganInstantReviveChanced");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDKerriganEggModels
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDKerriganEggModels_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tplayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tplayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCPGL_gf_HumanPlayers(), lv_tplayer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCPCD_gv_cDTownHall[lv_tplayer] != null) && (TechTreeUpgradeCount(lv_tplayer, "K5ZerglingRespawn", c_techCountCompleteOnly) == 1)) {
        if ((UnitAbilityChargeInfo(libCPCD_gv_cDTownHall[lv_tplayer], AbilityCommand("ZerglingRespawnTrain", 0), c_unitAbilChargeCountLeft) > 0.0)) {
            libNtve_gf_SendActorMessageToUnit(libCPCD_gv_cDTownHall[lv_tplayer], "Signal ZerglingRespawn1On");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(libCPCD_gv_cDTownHall[lv_tplayer], "Signal ZerglingRespawn1Off");
        }
        if ((UnitAbilityChargeInfo(libCPCD_gv_cDTownHall[lv_tplayer], AbilityCommand("ZerglingRespawnTrain", 0), c_unitAbilChargeCountLeft) > 2.0)) {
            libNtve_gf_SendActorMessageToUnit(libCPCD_gv_cDTownHall[lv_tplayer], "Signal ZerglingRespawn2On");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(libCPCD_gv_cDTownHall[lv_tplayer], "Signal ZerglingRespawn2Off");
        }
        if ((UnitAbilityChargeInfo(libCPCD_gv_cDTownHall[lv_tplayer], AbilityCommand("ZerglingRespawnTrain", 0), c_unitAbilChargeCountLeft) > 4.0)) {
            libNtve_gf_SendActorMessageToUnit(libCPCD_gv_cDTownHall[lv_tplayer], "Signal ZerglingRespawn3On");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(libCPCD_gv_cDTownHall[lv_tplayer], "Signal ZerglingRespawn3Off");
        }
        if ((UnitAbilityChargeInfo(libCPCD_gv_cDTownHall[lv_tplayer], AbilityCommand("ZerglingRespawnTrain", 0), c_unitAbilChargeCountLeft) > 7.0)) {
            libNtve_gf_SendActorMessageToUnit(libCPCD_gv_cDTownHall[lv_tplayer], "Signal ZerglingRespawn4On");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(libCPCD_gv_cDTownHall[lv_tplayer], "Signal ZerglingRespawn4Off");
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDKerriganEggModels_Init () {
    libCPCD_gt_CDKerriganEggModels = TriggerCreate("libCPCD_gt_CDKerriganEggModels_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDKerriganEggModels, c_playerAny, "ZerglingRespawnEggCheck");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDKerriganEggBirth
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDKerriganEggBirth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tplayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tplayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCPGL_gf_HumanPlayers(), lv_tplayer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCPCD_gv_cDTownHall[lv_tplayer] != null) && (TechTreeUpgradeCount(lv_tplayer, "K5ZerglingRespawn", c_techCountCompleteOnly) == 1)) {
        libNtve_gf_SendActorMessageToUnit(libCPCD_gv_cDTownHall[lv_tplayer], "Signal ZerglingRespawn1Off");
        libNtve_gf_SendActorMessageToUnit(libCPCD_gv_cDTownHall[lv_tplayer], "Signal ZerglingRespawn2Off");
        libNtve_gf_SendActorMessageToUnit(libCPCD_gv_cDTownHall[lv_tplayer], "Signal ZerglingRespawn3Off");
        libNtve_gf_SendActorMessageToUnit(libCPCD_gv_cDTownHall[lv_tplayer], "Signal ZerglingRespawn4Off");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDKerriganEggBirth_Init () {
    libCPCD_gt_CDKerriganEggBirth = TriggerCreate("libCPCD_gt_CDKerriganEggBirth_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDKerriganEggBirth, c_playerAny, "ZerglingRespawnEggBirth");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDRaynorPrestigeAirSupply
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDRaynorPrestigeAirSupply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "CommanderPrestigeRaynorAirTriggerAdd")) {
        UnitGroupAdd(libCPCD_gv_cDRaynorPrestigeAir[lv_p], EventPlayerEffectUsedUnit(c_effectUnitCaster));
    }
    else {
        UnitGroupRemove(libCPCD_gv_cDRaynorPrestigeAir[lv_p], EventPlayerEffectUsedUnit(c_effectUnitCaster));
    }
    libCPCD_gf_CM_PrestigeRaynor_AirSupplySetBonus(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDRaynorPrestigeAirSupply_Init () {
    libCPCD_gt_CDRaynorPrestigeAirSupply = TriggerCreate("libCPCD_gt_CDRaynorPrestigeAirSupply_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDRaynorPrestigeAirSupply, c_playerAny, "CommanderPrestigeRaynorAirTriggerAdd");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDRaynorPrestigeAirSupply, c_playerAny, "CommanderPrestigeRaynorAirTriggerRemove");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDRaynorHyperionPing
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDRaynorHyperionPing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawnedHyperion;
    int lv_hyperionPing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hyperionPing = c_invalidPingId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawnedHyperion = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingHyperion_AC", UnitGetPosition(lv_spawnedHyperion), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_spawnedHyperion);
    PingSetScale(PingLastCreated(), 0.6);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_CPCD_70A07580"));
    lv_hyperionPing = PingLastCreated();
    while ((UnitIsAlive(lv_spawnedHyperion) == true)) {
        PingSetRotation(lv_hyperionPing, UnitGetFacing(lv_spawnedHyperion));
        Wait(0.125, c_timeGame);
    }
    PingDestroy(lv_hyperionPing);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDRaynorHyperionPing_Init () {
    libCPCD_gt_CDRaynorHyperionPing = TriggerCreate("libCPCD_gt_CDRaynorHyperionPing_Func");
    TriggerEnable(libCPCD_gt_CDRaynorHyperionPing, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDRaynorHyperionPing, c_playerAny, "HyperionVoidCoopSpawnAB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TimeStop
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_TimeStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToGameRegion(RegionPlayableMap(), "AnimSetPausedAll 0");
    libNtve_gf_SendActorMessageToGameRegion(RegionPlayableMap(), "ClearOpacity 0.000000 TimeStopOpacity");
    libNtve_gf_SendActorMessageToGameRegion(RegionPlayableMap(), "AnimSetTimeScale Death 1.000000");
    libNtve_gf_SendActorMessageToGameRegion(RegionPlayableMap(), "ClearTintColor 0.000000 TimeStopTint");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_TimeStop_Init () {
    libCPCD_gt_TimeStop = TriggerCreate("libCPCD_gt_TimeStop_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_TimeStop, c_playerAny, "SOATimeFreezeBStop");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDKaraxSolarForge
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDKaraxSolarForge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCPGL_gv_commander[EventPlayer()].lv_commander == "Karax"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "SolarEfficiencyLevel3", c_techCountCompleteOnly) == 1)) {
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SolarForgeSolarEfficiency3MU", libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit);
    }
    else if ((TechTreeUpgradeCount(EventPlayer(), "SolarEfficiencyLevel2", c_techCountCompleteOnly) == 1)) {
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SolarForgeSolarEfficiency2MU", libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit);
    }
    else if ((TechTreeUpgradeCount(EventPlayer(), "SolarEfficiencyLevel1", c_techCountCompleteOnly) == 1)) {
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SolarForgeSolarEfficiency1MU", libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit);
    }
    libCPCD_gf_GPUpdateVitals(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDKaraxSolarForge_Init () {
    libCPCD_gt_CDKaraxSolarForge = TriggerCreate("libCPCD_gt_CDKaraxSolarForge_Func");
    TriggerEnable(libCPCD_gt_CDKaraxSolarForge, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDKaraxSolarForge, c_playerAny, "SolarForgeBeamImpactDummyMU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDKaraxUnityBarrier
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDKaraxUnityBarrier_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(lv_player, "KaraxUnitSpawnBarrier", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "KaraxUnitSpawnBarrier", libCPGL_gv_commander[lv_player].lv_globalCasterUnit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDKaraxUnityBarrier_Init () {
    libCPCD_gt_CDKaraxUnityBarrier = TriggerCreate("libCPCD_gt_CDKaraxUnityBarrier_Func");
    TriggerEnable(libCPCD_gt_CDKaraxUnityBarrier, false);
    TriggerAddEventUnitRevive(libCPCD_gt_CDKaraxUnityBarrier, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDKaraxRepairBeamLimit
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDKaraxRepairBeamLimit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto6C982F90_g;
    int auto6C982F90_var;

    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "SOARepairBeamExtraTarget"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6C982F90_g = libCPGL_gf_AllCommandersinPlayerGroup("Karax", libCPGL_gf_HumanPlayers());
    auto6C982F90_var = -1;
    while (true) {
        auto6C982F90_var = PlayerGroupNextPlayer(auto6C982F90_g, auto6C982F90_var);
        if (auto6C982F90_var < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(auto6C982F90_var, "KaraxRepairBeamLimit", CatalogFieldValueGetAsInt(c_gameCatalogEffect, "KaraxRepairBeamLimit", "Amount", auto6C982F90_var));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDKaraxRepairBeamLimit_Init () {
    libCPCD_gt_CDKaraxRepairBeamLimit = TriggerCreate("libCPCD_gt_CDKaraxRepairBeamLimit_Func");
    TriggerEnable(libCPCD_gt_CDKaraxRepairBeamLimit, false);
    TriggerAddEventUpgradeLevelChanged(libCPCD_gt_CDKaraxRepairBeamLimit, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDAbathurTriggersInit
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDAbathurTriggersInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libCPCD_gt_CDAbathurBiomassDrop, true);
    TriggerEnable(libCPCD_gt_CDAbathurBiomassRefund, true);
    TriggerEnable(libCPCD_gt_CDAbathurBiomassScaler, true);
    TriggerEnable(libCPCD_gt_CDAbathurBiomassTrain, true);
    TriggerEnable(libCPCD_gt_CDAbathurBiomassPickup, true);
    TriggerEnable(libCPCD_gt_CDAbathurBiomassManualUpdate, true);
    TriggerEnable(libCPGL_gt_CM_DebugAbathurBiomassLost, true);
    TriggerEnable(libCPCD_gt_CDAbathurMeleeBonusUpgrade, true);
    TriggerEnable(libCPCD_gt_CDAbathurToxicNest, true);
    TriggerEnable(libCPCD_gt_CDAbathurSwarmHostLaunchCast, true);
    TriggerEnable(libCPCD_gt_CDAbathurRavagerSpellCooldown, true);
    TriggerEnable(libCPCD_gt_CDAbathurToxicNestDeathFailsafe, true);
    TriggerEnable(libCPCD_gt_BanelingScourgeLocusts, true);
    TriggerEnable(libCPCD_gt_BanelingScourgeBiomassDrop, true);
    TriggerEnable(libCPCD_gt_CDAbathurDeathCreateLocusts, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDAbathurTriggersInit_Init () {
    libCPCD_gt_CDAbathurTriggersInit = TriggerCreate("libCPCD_gt_CDAbathurTriggersInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDAbathurRavagerSpellCooldown
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDAbathurRavagerSpellCooldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_cooldown;
    fixed lv_multiplier;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((libCPGL_gv_commander[EventPlayer()].lv_commander == "Abathur"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cooldown = UnitAbilityGetCooldown(lv_unit, "RavagerAbathurCorrosiveBile", "Abil/RavagerAbathurCorrosiveBile");
    lv_multiplier = UnitWeaponSpeedMultiplier(lv_unit, 1);
    UnitAbilityReset(lv_unit, AbilityCommand("RavagerAbathurCorrosiveBile", 0), c_spendLocationAll);
    UnitAbilityAddCooldown(lv_unit, "RavagerAbathurCorrosiveBile", "Abil/RavagerAbathurCorrosiveBile", (lv_cooldown*lv_multiplier));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDAbathurRavagerSpellCooldown_Init () {
    libCPCD_gt_CDAbathurRavagerSpellCooldown = TriggerCreate("libCPCD_gt_CDAbathurRavagerSpellCooldown_Func");
    TriggerEnable(libCPCD_gt_CDAbathurRavagerSpellCooldown, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDAbathurRavagerSpellCooldown, c_playerAny, "RavagerCorrosiveBileAoeLaunchSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDAbathurSwarmHostLaunchCast
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDAbathurSwarmHostLaunchCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_cooldown;
    fixed lv_multiplier;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCPGL_gv_commander[EventPlayer()].lv_commander == "Abathur"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cooldown = UnitWeaponPeriod(EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    lv_multiplier = UnitWeaponSpeedMultiplier(EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    UnitAbilityReset(EventPlayerEffectUsedUnit(c_effectUnitCaster), AbilityCommand("LocustLaunch", 0), c_spendLocationUnit);
    UnitModifyCooldown(EventPlayerEffectUsedUnit(c_effectUnitCaster), "Abil/LocustLaunch", ((lv_cooldown * lv_multiplier) / 16.0), c_cooldownOperationSet);
    UnitBehaviorSetDurationRemaining(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SwarmHostEggAnimation", ((lv_cooldown * lv_multiplier) / 16.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDAbathurSwarmHostLaunchCast_Init () {
    libCPCD_gt_CDAbathurSwarmHostLaunchCast = TriggerCreate("libCPCD_gt_CDAbathurSwarmHostLaunchCast_Func");
    TriggerEnable(libCPCD_gt_CDAbathurSwarmHostLaunchCast, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDAbathurSwarmHostLaunchCast, c_playerAny, "LocustCreateSet");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDAbathurSwarmHostLaunchCast, c_playerAny, "LocustWeaponCreateSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDAbathurToxicNest
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDAbathurToxicNest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCPGL_gv_commander[UnitGetOwner(EventUnit())].lv_commander == "Abathur"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    if ((UnitAbilityChargeInfo(EventUnit(), AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) > 0.0)) {
        UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libCPGL_gv_commander[lv_casterPlayer].lv_globalCasterGroup, OrderTargetingPoint(AbilityCommand("SpawnToxicNest", 0), UnitGetPosition(libCPGL_gv_commander[lv_casterPlayer].lv_globalCasterUnit)), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDAbathurToxicNest_Init () {
    libCPCD_gt_CDAbathurToxicNest = TriggerCreate("libCPCD_gt_CDAbathurToxicNest_Func");
    TriggerEnable(libCPCD_gt_CDAbathurToxicNest, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDAbathurToxicNest, null, AbilityCommand("SpawnToxicNest", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDAbathurDeathCreateLocusts
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDAbathurDeathCreateLocusts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_locustUnitType;
    int lv_rand;
    fixed lv_foodCompare;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_locustUnitType = "Locust";
    lv_rand = RandomInt(1, 100);
    lv_foodCompare = (StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0)) * -16.0);

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0)) == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "NoBiomassDrop") == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPGL_gf_HumanPlayers(), libNtve_gf_KillingPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetHeight(EventUnit()) >= 1)) {
        lv_locustUnitType = "LocustFlying";
    }

    if ((UnitHasBehavior2(EventUnit(), "SupplyLT1") == true)) {
        lv_foodCompare = 8;
    }

    if ((UnitHasBehavior2(EventUnit(), "HybridUnitDummy") == true)) {
        lv_foodCompare = 96;
    }

    if (((FixedToInt(lv_foodCompare) + libCPCD_gv_cDAbathurDeathCreateLocustsRandomModifier) >= lv_rand) && (TechTreeUpgradeCount(libNtve_gf_KillingPlayer(), "AbathurEnemyDeathCreateLocusts", c_techCountQueuedOrBetter) > 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_locustUnitType, c_unitCreateIgnorePlacement, libNtve_gf_KillingPlayer(), UnitGetPosition(EventUnit()));
        PlayerCreateEffectUnit(libNtve_gf_KillingPlayer(), "AbathurLocustTimedLife", UnitLastCreated());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDAbathurDeathCreateLocusts_Init () {
    libCPCD_gt_CDAbathurDeathCreateLocusts = TriggerCreate("libCPCD_gt_CDAbathurDeathCreateLocusts_Func");
    TriggerEnable(libCPCD_gt_CDAbathurDeathCreateLocusts, false);
    TriggerAddEventUnitDied(libCPCD_gt_CDAbathurDeathCreateLocusts, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDAbathurBiomassScaler
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDAbathurBiomassScaler_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_biomassMaxStacks;
    int lv_biomassCountTotal;
    int lv_biomassVisualIndicatorInterval;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_biomassMaxStacks = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "AbathurBiomassMaxStacksDummy", "Amount", UnitGetOwner(EventUnit()));

    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(EventUnit()) == true) && (libCPGL_gv_commander[UnitGetOwner(EventUnit())].lv_commander == "Abathur") && ((UnitHasBehavior2(EventUnit(), "BiomassBuff1") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff10") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff100") == true))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_biomassCountTotal = (UnitBehaviorCount(EventUnit(), "BiomassBuff100") * 100);
    lv_biomassCountTotal += (UnitBehaviorCount(EventUnit(), "BiomassBuff10") * 10);
    lv_biomassCountTotal += UnitBehaviorCount(EventUnit(), "BiomassBuff1");
    if ((lv_biomassCountTotal > lv_biomassMaxStacks)) {
        lv_biomassCountTotal = lv_biomassMaxStacks;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnit(), (("SetScale " + FixedToString((0.25 / lv_biomassMaxStacks * lv_biomassCountTotal + 1.25), 3))));
    if ((lv_biomassCountTotal >= 10)) {
        ActorScopeSend(ActorScopeFromUnit(EventUnit()), "Create BiomassBuffGlaze");
    }

    lv_biomassVisualIndicatorInterval = ((lv_biomassMaxStacks - 10) / 3);
    if ((lv_biomassCountTotal > (lv_biomassVisualIndicatorInterval * 2 + 10))) {
        ActorScopeSend(ActorScopeFromUnit(EventUnit()), "Signal BiomassAnimGroupC");
    }
    else if ((lv_biomassCountTotal > (lv_biomassVisualIndicatorInterval + 10))) {
        ActorScopeSend(ActorScopeFromUnit(EventUnit()), "Signal BiomassAnimGroupB");
    }
    else if ((lv_biomassCountTotal > 10)) {
        ActorScopeSend(ActorScopeFromUnit(EventUnit()), "Signal BiomassAnimGroupA");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDAbathurBiomassScaler_Init () {
    libCPCD_gt_CDAbathurBiomassScaler = TriggerCreate("libCPCD_gt_CDAbathurBiomassScaler_Func");
    TriggerEnable(libCPCD_gt_CDAbathurBiomassScaler, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDAbathurBiomassScaler, null, "BiomassBuff1", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDAbathurBiomassScaler, null, "BiomassBuff10", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDAbathurBiomassScaler, null, "BiomassBuff100", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDAbathurBiomassManualUpdate
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDAbathurBiomassManualUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CDAbathurBiomassSetStack(EventPlayerEffectUsedUnit(c_effectUnitCaster), 25);
    libCPCD_gf_CDAbathurBiomassScale(EventPlayerEffectUsedUnit(c_effectUnitCaster), true);
    libCPCD_gf_CDAbathurBiomassMerge(EventPlayerEffectUsedUnit(c_effectUnitCaster), 25);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDAbathurBiomassManualUpdate_Init () {
    libCPCD_gt_CDAbathurBiomassManualUpdate = TriggerCreate("libCPCD_gt_CDAbathurBiomassManualUpdate_Func");
    TriggerEnable(libCPCD_gt_CDAbathurBiomassManualUpdate, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDAbathurBiomassManualUpdate, c_playerAny, "BiomassCreatedDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDAbathurBiomassTrain
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDAbathurBiomassTrain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    unit lv_trainUnit;
    int lv_biomassBuff100Count;
    int lv_biomassBuff10Count;
    int lv_biomassBuff1Count;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((libCPGL_gv_commander[UnitGetOwner(EventUnit())].lv_commander == "Abathur") && ((UnitHasBehavior2(EventUnit(), "BiomassBuff1") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff10") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff100") == true)) && ((libNtve_gf_TriggeringProgressUnitType() == "RavagerAbathur") || (libNtve_gf_TriggeringProgressUnitType() == "GuardianMP") || (libNtve_gf_TriggeringProgressUnitType() == "Devourer"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_indexPlayer = UnitGetOwner(EventUnit());
    lv_trainUnit = EventUnitProgressUnit();
    lv_biomassBuff100Count = UnitBehaviorCount(EventUnit(), "BiomassBuff100");
    lv_biomassBuff10Count = UnitBehaviorCount(EventUnit(), "BiomassBuff10");
    lv_biomassBuff1Count = UnitBehaviorCount(EventUnit(), "BiomassBuff1");
    libCPCD_gf_CDAbathurBiomassTransfer(lv_indexPlayer, lv_trainUnit, lv_biomassBuff100Count, lv_biomassBuff10Count, lv_biomassBuff1Count);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDAbathurBiomassTrain_Init () {
    libCPCD_gt_CDAbathurBiomassTrain = TriggerCreate("libCPCD_gt_CDAbathurBiomassTrain_Func");
    TriggerEnable(libCPCD_gt_CDAbathurBiomassTrain, false);
    TriggerAddEventUnitTrainProgress(libCPCD_gt_CDAbathurBiomassTrain, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDAbathurBiomassRefund
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDAbathurBiomassRefund_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_indexPlayer;
    point lv_position;
    int lv_biomassCountTotal;
    fixed lv_biomassRefundChance;
    int lv_biomassRefundScaling;
    int lv_biomassRefundAmount;
    int lv_biomassDropCountLarge;
    int lv_biomassDropCountSmall;
    int lv_killedPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_biomassRefundChance = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "AbathurBiomassRefundDummy", "Amount", UnitGetOwner(EventUnit()));
    lv_biomassRefundScaling = 1;
    lv_killedPlayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) != "Locust") && (libCPGL_gv_commander[lv_killedPlayer].lv_commander == "Abathur") && ((UnitHasBehavior2(EventUnit(), "BiomassBuff1") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff10") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff100") == true)) && (UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), 0)) == true) && ((libNtve_gf_UnitIsHidden(EventUnit()) == false) || (EventUnitDamageEffect() == "CoopCargoDeathKill")) && (lv_biomassRefundChance > 0.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_biomassRefundChance >= RandomFixed(0.0, 100.0))) {
        lv_biomassCountTotal = (UnitBehaviorCount(EventUnit(), "BiomassBuff100") * 100);
        lv_biomassCountTotal += (UnitBehaviorCount(EventUnit(), "BiomassBuff10") * 10);
        lv_biomassCountTotal += UnitBehaviorCount(EventUnit(), "BiomassBuff1");
        lv_biomassRefundAmount = FixedToInt((lv_biomassCountTotal / lv_biomassRefundScaling));
        libCPGL_gv_cM_DebugAbathurBiomassDroppedRefund += lv_biomassRefundAmount;
        libCPGL_gv_cM_DebugAbathurBiomassLost -= lv_biomassRefundAmount;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "BiomassPickup", c_unitCreateIgnorePlacement, lv_killedPlayer, UnitGetPosition(EventUnit()));
        libCPCD_gf_CDAbathurBiomassSetStack(UnitLastCreated(), lv_biomassRefundAmount);
        UnitBehaviorRemove(UnitLastCreated(), "BiomassCreated", 1);
        libCPCD_gf_CDAbathurBiomassScale(UnitLastCreated(), true);
        libCPCD_gf_CDAbathurBiomassMerge(UnitLastCreated(), lv_biomassRefundAmount);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDAbathurBiomassRefund_Init () {
    libCPCD_gt_CDAbathurBiomassRefund = TriggerCreate("libCPCD_gt_CDAbathurBiomassRefund_Func");
    TriggerEnable(libCPCD_gt_CDAbathurBiomassRefund, false);
    TriggerAddEventUnitDied(libCPCD_gt_CDAbathurBiomassRefund, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDAbathurBiomassPickup
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDAbathurBiomassPickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_biomassMaxStacks;
    int lv_biomassCountTargetTotal;
    int lv_biomassCountStored;
    int lv_biomassCountStoredTemp;
    int lv_biomass100Stacks;
    int lv_biomass10Stacks;
    int lv_biomass1Stacks;
    int lv_biomassNewStackCount;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_biomassMaxStacks = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "AbathurBiomassMaxStacksDummy", "Amount", EventPlayer());
    lv_biomassCountStored = FixedToInt(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 63));
    lv_biomassCountStoredTemp = FixedToInt(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 63));

    // Actions
    if (!runActions) {
        return true;
    }

    lv_biomassCountTargetTotal = (UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff100") * 100);
    lv_biomassCountTargetTotal += (UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff10") * 10);
    lv_biomassCountTargetTotal += UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff1");
    lv_biomass100Stacks = TruncI((lv_biomassCountStoredTemp / 100));
    lv_biomassCountStoredTemp -= (lv_biomass100Stacks * 100);
    lv_biomass10Stacks = TruncI((lv_biomassCountStoredTemp / 10));
    lv_biomassCountStoredTemp -= (lv_biomass10Stacks * 10);
    lv_biomass1Stacks = lv_biomassCountStoredTemp;
    lv_biomassNewStackCount = (lv_biomassCountStored + lv_biomassCountTargetTotal);
    if ((lv_biomassNewStackCount > lv_biomassMaxStacks)) {
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "BiomassPickupLM", EventPlayerEffectUsedUnit(c_effectUnitTarget));
        lv_biomassCountStoredTemp = (lv_biomassMaxStacks - lv_biomassCountTargetTotal);
        libCPCD_gf_CDAbathurBiomassSetStack(EventPlayerEffectUsedUnit(c_effectUnitCaster), FixedToInt((UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 63) - lv_biomassCountStoredTemp)));
        libCPCD_gf_CDAbathurBiomassScale(EventPlayerEffectUsedUnit(c_effectUnitCaster), false);
        libCPGL_gv_cM_DebugAbathurBiomassCollected += lv_biomassCountStoredTemp;
        lv_biomass100Stacks = TruncI((lv_biomassCountStoredTemp / 100));
        lv_biomassCountStoredTemp -= (lv_biomass100Stacks * 100);
        lv_biomass10Stacks = TruncI((lv_biomassCountStoredTemp / 10));
        lv_biomassCountStoredTemp -= (lv_biomass10Stacks * 10);
        lv_biomass1Stacks = lv_biomassCountStoredTemp;
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassMaxedMarker", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff100PlusLife", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_biomass100Stacks);
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff10PlusLife", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_biomass10Stacks);
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff1", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_biomass1Stacks);
        ActorScopeSend(ActorScopeFromUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "Signal BiomassAnimGroupC");
    }
    else {
        libCPGL_gv_cM_DebugAbathurBiomassCollected += lv_biomassCountStored;
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "BiomassTravelling", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "BiomassPickupFullLM", EventPlayerEffectUsedUnit(c_effectUnitTarget));
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff100PlusLife", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_biomass100Stacks);
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff10PlusLife", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_biomass10Stacks);
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff1", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_biomass1Stacks);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDAbathurBiomassPickup_Init () {
    libCPCD_gt_CDAbathurBiomassPickup = TriggerCreate("libCPCD_gt_CDAbathurBiomassPickup_Func");
    TriggerEnable(libCPCD_gt_CDAbathurBiomassPickup, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDAbathurBiomassPickup, c_playerAny, "BiomassPickupDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDAbathurBiomassDrop
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDAbathurBiomassDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_biomassUnitCount;
    int lv_indexPlayer;
    fixed lv_biomassBaseAmount;
    fixed lv_biomassCasualMultiplier;
    fixed lv_biomassNormalMultiplier;
    fixed lv_biomassHardMultiplier;
    fixed lv_biomassBrutalMultiplier;
    fixed lv_biomassToxicNestMultiplier;
    fixed lv_dyingUnitSupply;
    fixed lv_doubleBiomassChance;
    fixed lv_expectedDrop;
    fixed lv_fractionChance;

    // Automatic Variable Declarations
    playergroup auto137BBD8C_g;

    // Variable Initialization
    lv_biomassCasualMultiplier = 2.5;
    lv_biomassNormalMultiplier = 2.5;
    lv_biomassHardMultiplier = 2.0;
    lv_biomassBrutalMultiplier = 1.25;
    lv_biomassToxicNestMultiplier = 1.0;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(libNtve_gf_KillingPlayer(), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_AllyMutual) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != c_playerAny))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "NoBiomassDrop") == false))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPGL_gf_HumanPlayers(), libNtve_gf_KillingPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto137BBD8C_g = libCPGL_gf_AllCommandersinPlayerGroup("Abathur", libCPGL_gf_HumanPlayers());
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto137BBD8C_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libNtve_gf_PlayerIsEnemy(lv_indexPlayer, UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_AllyMutual) == false)) {
            lv_dyingUnitSupply = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0));
            lv_doubleBiomassChance = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MasteryAbathurDoubleBiomassDisplayDummy", "Amount", lv_indexPlayer);
            if ((UnitHasBehavior2(EventUnit(), "CritterExplode") == true)) {
                lv_biomassBaseAmount = 1;
            }
            else if ((UnitHasBehavior2(EventUnit(), "HybridUnitDummy") == true)) {
                lv_biomassBaseAmount = 12;
            }
            else if ((lv_dyingUnitSupply < -4)) {
                lv_biomassBaseAmount = 12;
            }
            else if (true) {
                lv_biomassBaseAmount = (-2*lv_dyingUnitSupply);
            }
            if ((TechTreeUpgradeCount(lv_indexPlayer, "AbathurToxicNestIcreasedBiomass", c_techCountCompleteOnly) == 1) && (UnitHasBehavior2(EventUnit(), "ToxicNestVirulentNest") == true)) {
                lv_biomassToxicNestMultiplier = 1.5;
            }

            if ((TechTreeUpgradeCount(lv_indexPlayer, "MasteryAbathurDoubleBiomass", c_techCountCompleteOnly) > 0) && (RandomFixed(0.0, 100.0) <= lv_doubleBiomassChance)) {
                lv_biomassToxicNestMultiplier = 2.0;
            }

            lv_expectedDrop = (libNtve_gf_DifficultyValueFixed(lv_biomassCasualMultiplier, lv_biomassNormalMultiplier, lv_biomassHardMultiplier, lv_biomassBrutalMultiplier) * lv_biomassBaseAmount * lv_biomassToxicNestMultiplier);
            lv_biomassUnitCount = CeilingI(lv_expectedDrop);
            lv_fractionChance = (lv_expectedDrop - lv_biomassUnitCount);
            if ((RandomFixed(0.0, 1.0) <= lv_fractionChance)) {
                lv_biomassUnitCount += 1;
            }

            if ((lv_biomassUnitCount > 0)) {
                libCPGL_gv_cM_DebugAbathurBiomassDroppedNormal += lv_biomassUnitCount;
                libCPCD_gf_CDAbathurBiomassSetStack(UnitLastCreated(), lv_biomassUnitCount);
                UnitBehaviorRemove(UnitLastCreated(), "BiomassCreated", 1);
                libCPCD_gf_CDAbathurBiomassScale(UnitLastCreated(), true);
                libCPCD_gf_CDAbathurBiomassMerge(UnitLastCreated(), lv_biomassUnitCount);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDAbathurBiomassDrop_Init () {
    libCPCD_gt_CDAbathurBiomassDrop = TriggerCreate("libCPCD_gt_CDAbathurBiomassDrop_Func");
    TriggerEnable(libCPCD_gt_CDAbathurBiomassDrop, false);
    TriggerAddEventUnitDied(libCPCD_gt_CDAbathurBiomassDrop, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDAbathurMeleeBonusUpgrade
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDAbathurMeleeBonusUpgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_abathurPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abathurPlayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libCPGL_gv_commander[UnitGetOwner(EventUnit())].lv_commander == "Abathur"))) {
            return false;
        }

        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel3")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueModify(c_gameCatalogEffect, "BrutalizeDamage", "Amount", lv_abathurPlayer, "3", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogWeapon, "Brutalize", "Level", lv_abathurPlayer, "1", c_upgradeOperationAdd);
    if ((libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel1")) {
        CatalogFieldValueSet(c_gameCatalogWeapon, "Brutalize", "Icon", lv_abathurPlayer, "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level1.dds");
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel2")) {
        CatalogFieldValueSet(c_gameCatalogWeapon, "Brutalize", "Icon", lv_abathurPlayer, "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level2.dds");
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel3")) {
        CatalogFieldValueSet(c_gameCatalogWeapon, "Brutalize", "Icon", lv_abathurPlayer, "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level3.dds");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDAbathurMeleeBonusUpgrade_Init () {
    libCPCD_gt_CDAbathurMeleeBonusUpgrade = TriggerCreate("libCPCD_gt_CDAbathurMeleeBonusUpgrade_Func");
    TriggerEnable(libCPCD_gt_CDAbathurMeleeBonusUpgrade, false);
    TriggerAddEventUnitResearchProgress(libCPCD_gt_CDAbathurMeleeBonusUpgrade, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDAbathurToxicNestDeathFailsafe
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDAbathurToxicNestDeathFailsafe_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDAbathurToxicNestDeathFailsafe_Init () {
    libCPCD_gt_CDAbathurToxicNestDeathFailsafe = TriggerCreate("libCPCD_gt_CDAbathurToxicNestDeathFailsafe_Func");
    TriggerEnable(libCPCD_gt_CDAbathurToxicNestDeathFailsafe, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDAbathurToxicNestDeathFailsafe, c_playerAny, "KillCaster");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDAlarakEmpowerAdd
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDAlarakEmpowerAdd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCPGL_gf_HumanPlayers(), lv_p) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCPCD_gv_cDAlarakEmpowerSlaves[lv_p], lv_u);
    if ((TriggerIsEnabled(libCPCD_gt_CDAlarakEmpowerUpdate) == true)) {
        TriggerExecute(libCPCD_gt_CDAlarakEmpowerUpdate, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDAlarakEmpowerAdd_Init () {
    libCPCD_gt_CDAlarakEmpowerAdd = TriggerCreate("libCPCD_gt_CDAlarakEmpowerAdd_Func");
    TriggerEnable(libCPCD_gt_CDAlarakEmpowerAdd, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDAlarakEmpowerAdd, c_playerAny, libCPCD_gv_cDAlarakEmpowerAuraTargetPlayerStartEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDAlarakEmpowerRemove
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDAlarakEmpowerRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCPGL_gf_HumanPlayers(), lv_p) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(libCPCD_gv_cDAlarakEmpowerSlaves[lv_p], lv_u);
    ActorScopeSend(ActorScopeFromUnit(lv_u), (("Signal " + "Destroy" + IntToString(lv_p))));
    if ((TriggerIsEnabled(libCPCD_gt_CDAlarakEmpowerUpdate) == true)) {
        TriggerExecute(libCPCD_gt_CDAlarakEmpowerUpdate, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDAlarakEmpowerRemove_Init () {
    libCPCD_gt_CDAlarakEmpowerRemove = TriggerCreate("libCPCD_gt_CDAlarakEmpowerRemove_Func");
    TriggerEnable(libCPCD_gt_CDAlarakEmpowerRemove, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDAlarakEmpowerRemove, c_playerAny, libCPCD_gv_cDAlarakEmpowerAuraTargetPlayerFinalEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDAlarakEmpowerWorshiperAdd
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDAlarakEmpowerWorshiperAdd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCPGL_gf_HumanPlayers(), lv_p) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCPCD_gv_cDAlarakEmpowerWorshipers[lv_p], lv_u);
    if ((TriggerIsEnabled(libCPCD_gt_CDAlarakEmpowerUpdate) == true)) {
        TriggerExecute(libCPCD_gt_CDAlarakEmpowerUpdate, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDAlarakEmpowerWorshiperAdd_Init () {
    libCPCD_gt_CDAlarakEmpowerWorshiperAdd = TriggerCreate("libCPCD_gt_CDAlarakEmpowerWorshiperAdd_Func");
    TriggerEnable(libCPCD_gt_CDAlarakEmpowerWorshiperAdd, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDAlarakEmpowerWorshiperAdd, null, "WorshipAlarak", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDAlarakEmpowerWorshiperRemove
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDAlarakEmpowerWorshiperRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoCC8E66C5_g;

    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    autoCC8E66C5_g = libCOOC_gf_CommanderPlayers();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoCC8E66C5_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        UnitGroupRemove(libCPCD_gv_cDAlarakEmpowerWorshipers[lv_itPlayer], lv_u);
    }
    if ((TriggerIsEnabled(libCPCD_gt_CDAlarakEmpowerUpdate) == true)) {
        TriggerExecute(libCPCD_gt_CDAlarakEmpowerUpdate, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDAlarakEmpowerWorshiperRemove_Init () {
    libCPCD_gt_CDAlarakEmpowerWorshiperRemove = TriggerCreate("libCPCD_gt_CDAlarakEmpowerWorshiperRemove_Func");
    TriggerEnable(libCPCD_gt_CDAlarakEmpowerWorshiperRemove, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDAlarakEmpowerWorshiperRemove, null, "WorshipAlarak", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDAlarakEmpowerUpdate
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDAlarakEmpowerUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_slave;
    fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] lv_totalSupply;
    int lv_player;
    fixed lv_abilityPower;
    fixed lv_attackDamage;

    // Automatic Variable Declarations
    const int auto9BED58F1_ae = 2;
    const int auto9BED58F1_ai = 1;
    unitgroup autoC7582E9D_g;
    int autoC7582E9D_u;
    unitgroup auto54E7E092_g;
    int auto54E7E092_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.0625, c_timeGame);
    lv_player = 1;
    for ( ; ( (auto9BED58F1_ai >= 0 && lv_player <= auto9BED58F1_ae) || (auto9BED58F1_ai < 0 && lv_player >= auto9BED58F1_ae) ) ; lv_player += auto9BED58F1_ai ) {
        autoC7582E9D_g = libCPCD_gv_cDAlarakEmpowerSlaves[lv_player];
        autoC7582E9D_u = UnitGroupCount(autoC7582E9D_g, c_unitCountAll);
        for (;; autoC7582E9D_u -= 1) {
            lv_slave = UnitGroupUnitFromEnd(autoC7582E9D_g, autoC7582E9D_u);
            if (lv_slave == null) { break; }
            if ((UnitHasBehavior2(lv_slave, libCPCD_gv_cDAlarakEmpowerAuraTarget) == true)) {
                if (true) {
                }

                if ((((UnitTypeGetProperty(UnitGetType(lv_slave), c_unitPropSuppliesUsed) == 0.0) && (UnitTypeTestAttribute(UnitGetType(lv_slave), c_unitAttributeHeroic) == true)) || (UnitHasBehavior2(lv_slave, "HHMercStarportCargoInstalled") == true))) {
                    lv_totalSupply[lv_player] += 3.0;
                }
                else if ((UnitFilterMatch(lv_slave, lv_player, UnitFilter((1 << c_targetFilterMechanical), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), 0)) == true)) {
                    lv_totalSupply[lv_player] += (UnitTypeGetProperty(UnitGetType(lv_slave), c_unitPropSuppliesUsed) * 2.0);
                }
                else if (true) {
                    lv_totalSupply[lv_player] += UnitTypeGetProperty(UnitGetType(lv_slave), c_unitPropSuppliesUsed);
                }
            }
            else {
                UnitGroupRemove(libCPCD_gv_cDAlarakEmpowerSlaves[lv_player], lv_slave);
            }
        }
        auto54E7E092_g = libCPCD_gv_cDAlarakEmpowerWorshipers[lv_player];
        auto54E7E092_u = UnitGroupCount(auto54E7E092_g, c_unitCountAll);
        for (;; auto54E7E092_u -= 1) {
            lv_slave = UnitGroupUnitFromEnd(auto54E7E092_g, auto54E7E092_u);
            if (lv_slave == null) { break; }
            if ((UnitHasBehavior2(lv_slave, libCPCD_gv_cDAlarakEmpowerWorshiperTarget) == true)) {
                lv_totalSupply[lv_player] += UnitTypeGetProperty(UnitGetType(lv_slave), c_unitPropSuppliesUsed);
            }
            else {
                UnitGroupRemove(libCPCD_gv_cDAlarakEmpowerSlaves[lv_player], lv_slave);
            }
        }
        if ((lv_totalSupply[lv_player] <= 100.0)) {
            lv_attackDamage = (libCPCD_gv_cDAlarakEmpowerBaseDmgInc * lv_totalSupply[lv_player]);
            lv_abilityPower = (libCPCD_gv_cDAlarakEmpowerBaseSpellDmgeIncPercent * lv_totalSupply[lv_player]);
        }
        else {
            lv_attackDamage = (libCPCD_gv_cDAlarakEmpowerBaseDmgInc * lv_totalSupply[lv_player]);
            lv_abilityPower = (((libCPCD_gv_cDAlarakEmpowerBaseSpellDmgeIncPercent * libCPCD_gv_cDAlarakEmpowerDiminishingReturnsMultiplier) * (lv_totalSupply[lv_player] - libCPCD_gv_cDAlarakEmpowerDiminishingReturnsSupplyThreshold)) + (libCPCD_gv_cDAlarakEmpowerBaseSpellDmgeIncPercent * libCPCD_gv_cDAlarakEmpowerDiminishingReturnsSupplyThreshold));
        }
        CatalogFieldValueSet(c_gameCatalogBehavior, libCPCD_gv_cDAlarakEmpowerBehaviorCaster, "Modification.DamageDealtFraction[Spell]", lv_player, FixedToString(lv_abilityPower, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, libCPCD_gv_cDAlarakEmpowerBehaviorCaster, "Modification.DamageDealtUnscaled[Melee]", lv_player, FixedToString(lv_attackDamage, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, libCPCD_gv_cDAlarakEmpowerBehaviorCaster, "Modification.DamageDealtUnscaled[Ranged]", lv_player, FixedToString(lv_attackDamage, c_fixedPrecisionAny));
        if ((lv_totalSupply[lv_player] > 0.0)) {
            TechTreeBehaviorAllow(lv_player, libCPCD_gv_cDAlarakEmpowerBehaviorCaster, true);
        }
        else {
            TechTreeBehaviorAllow(lv_player, libCPCD_gv_cDAlarakEmpowerBehaviorCaster, false);
        }
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDAlarakEmpowerUpdate_Init () {
    libCPCD_gt_CDAlarakEmpowerUpdate = TriggerCreate("libCPCD_gt_CDAlarakEmpowerUpdate_Func");
    TriggerEnable(libCPCD_gt_CDAlarakEmpowerUpdate, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDAlarakSoulAbsorptionImpact
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDAlarakSoulAbsorptionImpact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_missile;
    unit lv_alarak;
    fixed lv_amout;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_missile = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_alarak = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_amout = UnitGetCustomValue(lv_missile, 63);
    lv_p = UnitGetOwner(lv_alarak);

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogReferenceSet("Effect,SoulAbsorptionMU,VitalArray[Life].Change", lv_p, FixedToString(lv_amout, c_fixedPrecisionAny));
    CatalogReferenceSet("Effect,SoulAbsorptionMU,VitalArray[Shields].Change", lv_p, FixedToString(lv_amout, c_fixedPrecisionAny));
    UnitCreateEffectUnit(lv_alarak, libCPCD_gv_cDAlarakSoulAbsorptionScoreTrackerEffect, lv_alarak);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDAlarakSoulAbsorptionImpact_Init () {
    libCPCD_gt_CDAlarakSoulAbsorptionImpact = TriggerCreate("libCPCD_gt_CDAlarakSoulAbsorptionImpact_Func");
    TriggerEnable(libCPCD_gt_CDAlarakSoulAbsorptionImpact, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDAlarakSoulAbsorptionImpact, c_playerAny, libCPCD_gv_cDAlarakSoulAbsorptionImpactEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDAlarakSoulAbsorptionLaunch
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDAlarakSoulAbsorptionLaunch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_victimType;
    unit lv_missile;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_victimType = EventPlayerEffectUsedUnitType(c_effectUnitTarget);
    lv_missile = EventPlayerEffectUsedUnit(c_effectUnitSource);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(lv_missile, 63, (UnitTypeGetProperty(lv_victimType, c_unitPropSuppliesUsed) * libCPCD_gv_cDAlarakSoulAbsorptionFoodFactor));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDAlarakSoulAbsorptionLaunch_Init () {
    libCPCD_gt_CDAlarakSoulAbsorptionLaunch = TriggerCreate("libCPCD_gt_CDAlarakSoulAbsorptionLaunch_Func");
    TriggerEnable(libCPCD_gt_CDAlarakSoulAbsorptionLaunch, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDAlarakSoulAbsorptionLaunch, c_playerAny, libCPCD_gv_cDAlarakSoulAbsorptionLaunchEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDAlarakSoulAbsorptionPrestigeMechBuff
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDAlarakSoulAbsorptionPrestigeMechBuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentStack;
    unit lv_caster;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentStack = UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CommanderPrestigeAlarakMechBuff");
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_target, "AscendantSacrificeSelfBuffSet", lv_caster);
    UnitBehaviorRemove(lv_target, "AscendantSacrificeSelfBuff", c_unitBehaviorCountAll);
    if ((lv_currentStack == 0)) {
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CommanderPrestigeAlarakMechDisplay", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
        libNtve_gf_SendActorMessageToUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "Create Glaze_Alarak_COOP_PrestigeMechBuff");
    }

    lv_currentStack = (lv_currentStack + 1);
    libCOMI_gf_SetUnitAttributePoints("CommanderPrestigeAlarakMechBuff", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_currentStack);
    if ((lv_currentStack >= 8)) {
        ActorScopeSend(ActorScopeFromUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "Signal PrestigeMechAnimGroupC");
    }
    else if ((lv_currentStack >= 4)) {
        ActorScopeSend(ActorScopeFromUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "Signal PrestigeMechAnimGroupB");
    }
    else if (true) {
        ActorScopeSend(ActorScopeFromUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "Signal PrestigeMechAnimGroupA");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDAlarakSoulAbsorptionPrestigeMechBuff_Init () {
    libCPCD_gt_CDAlarakSoulAbsorptionPrestigeMechBuff = TriggerCreate("libCPCD_gt_CDAlarakSoulAbsorptionPrestigeMechBuff_Func");
    TriggerEnable(libCPCD_gt_CDAlarakSoulAbsorptionPrestigeMechBuff, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDAlarakSoulAbsorptionPrestigeMechBuff, c_playerAny, "AlarakTheStrongestSurvivePrestigeMechBuffTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDAlarakLightningStrikesHighlightOn
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDAlarakLightningStrikesHighlightOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonFaceHighlighted(PlayerGroupSingle(lv_p), "AlarakLightningStrikes", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDAlarakLightningStrikesHighlightOn_Init () {
    libCPCD_gt_CDAlarakLightningStrikesHighlightOn = TriggerCreate("libCPCD_gt_CDAlarakLightningStrikesHighlightOn_Func");
    TriggerEnable(libCPCD_gt_CDAlarakLightningStrikesHighlightOn, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDAlarakLightningStrikesHighlightOn, null, "AlarakLightningStrikes", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDAlarakLightningStrikesHighlightOff
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDAlarakLightningStrikesHighlightOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonFaceHighlighted(PlayerGroupSingle(lv_p), "AlarakLightningStrikes", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDAlarakLightningStrikesHighlightOff_Init () {
    libCPCD_gt_CDAlarakLightningStrikesHighlightOff = TriggerCreate("libCPCD_gt_CDAlarakLightningStrikesHighlightOff_Func");
    TriggerEnable(libCPCD_gt_CDAlarakLightningStrikesHighlightOff, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDAlarakLightningStrikesHighlightOff, null, "AlarakLightningStrikes", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDAlarakLightningStrikesSacrifice
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDAlarakLightningStrikesSacrifice_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_alarak;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitGetOwner(EventUnit());
    lv_alarak = libCPGL_gv_commander[lv_p].lv_heroUnit;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_alarak) == true))) {
            return false;
        }

        if (!((UnitGetType(lv_alarak) == "AlarakCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_alarak, "AlarakLightningStrikes", lv_alarak, 1);
    TriggerExecute(libCPCD_gt_CDAlarakLightningStrikesHighlightOn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDAlarakLightningStrikesSacrifice_Init () {
    libCPCD_gt_CDAlarakLightningStrikesSacrifice = TriggerCreate("libCPCD_gt_CDAlarakLightningStrikesSacrifice_Func");
    TriggerEnable(libCPCD_gt_CDAlarakLightningStrikesSacrifice, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDAlarakLightningStrikesSacrifice, null, AbilityCommand("AscendantSacrificeInstant", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDAlarakSacrificeScale
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDAlarakSacrificeScale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sacrificCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(EventUnit()) == true) && (libCPGL_gv_commander[UnitGetOwner(EventUnit())].lv_commander == "Alarak") && (UnitHasBehavior2(EventUnit(), "AscendantSacrificeSelfBuff") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_sacrificCount = UnitBehaviorCount(EventUnit(), "AscendantSacrificeSelfBuff");
    if ((lv_sacrificCount > 10)) {
        lv_sacrificCount = 10;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnit(), (("SetScale " + FixedToString(((0.05 * lv_sacrificCount) + 1.0), 3))));
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), libNtve_gf_Signal(IntToString(lv_sacrificCount)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDAlarakSacrificeScale_Init () {
    libCPCD_gt_CDAlarakSacrificeScale = TriggerCreate("libCPCD_gt_CDAlarakSacrificeScale_Func");
    TriggerEnable(libCPCD_gt_CDAlarakSacrificeScale, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDAlarakSacrificeScale, null, "AscendantSacrificeSelfBuff", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDAlarakAirUpgrade
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDAlarakAirUpgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_upgrade;
    int lv_player;
    int lv_level;

    // Automatic Variable Declarations
    string autoD9EA8CFF_val;

    // Variable Initialization
    lv_upgrade = EventUpgradeName();
    lv_player = EventPlayer();
    lv_level = TechTreeUpgradeCount(lv_player, lv_upgrade, c_techCountCompleteOnly);

    // Conditions
    if (testConds) {
        if (!((libCPGL_gv_commander[lv_player].lv_commander == "Alarak"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD9EA8CFF_val = lv_upgrade;
    if (autoD9EA8CFF_val == "ProtossGroundArmorsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossAirArmorsLevel1", lv_level);
    }
    else if (autoD9EA8CFF_val == "ProtossGroundArmorsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossAirArmorsLevel2", lv_level);
    }
    else if (autoD9EA8CFF_val == "ProtossGroundArmorsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossAirArmorsLevel3", lv_level);
    }
    else if (autoD9EA8CFF_val == "ProtossGroundWeaponsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossAirWeaponsLevel1", lv_level);
    }
    else if (autoD9EA8CFF_val == "ProtossGroundWeaponsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossAirWeaponsLevel2", lv_level);
    }
    else if (autoD9EA8CFF_val == "ProtossGroundWeaponsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossAirWeaponsLevel3", lv_level);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDAlarakAirUpgrade_Init () {
    libCPCD_gt_CDAlarakAirUpgrade = TriggerCreate("libCPCD_gt_CDAlarakAirUpgrade_Func");
    TriggerEnable(libCPCD_gt_CDAlarakAirUpgrade, false);
    TriggerAddEventUpgradeLevelChanged(libCPCD_gt_CDAlarakAirUpgrade, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDNovaTriggersInit
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDNovaTriggersInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(libCPCD_gt_CDNovaNamesGenerate, true, false);
    TriggerEnable(libCPCD_gt_CDNovaNamesAssign, true);
    TriggerEnable(libCPCD_gt_CDNovaNamesKillUpdate, true);
    TriggerEnable(libCPCD_gt_CDNovaNamesKillUpdateTurret, true);
    TriggerEnable(libCPCD_gt_CDNovaGriffinTransportActivate, true);
    TriggerEnable(libCPCD_gt_CDNovaGriffinTransportStop, true);
    TriggerEnable(libCPCD_gt_CDNovaGriffinTransportTimeOut, true);
    TriggerEnable(libCPCD_gt_CDNovaGriffinTransportAirReapply, true);
    TriggerEnable(libCPCD_gt_CDNovaGriffinTransportGroundReapply, true);
    TriggerEnable(libCPCD_gt_CDNovaGriffinTransportTeleportUnload, true);
    TriggerEnable(libCPCD_gt_CDNovaGriffinBombingRunActivate, true);
    TriggerEnable(libCPCD_gt_CDNovaGriffinBombingRunFinish, true);
    TriggerEnable(libCPCD_gt_CDNovaTankRange, true);
    TriggerEnable(libCPCD_gt_CDNovaPsiStrike, true);
    TriggerEnable(libCPCD_gt_CDNovaBuildingCompleted, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDNovaTriggersInit_Init () {
    libCPCD_gt_CDNovaTriggersInit = TriggerCreate("libCPCD_gt_CDNovaTriggersInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDNovaBuildingCompleted
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDNovaBuildingCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitProgressUnit());

    // Conditions
    if (testConds) {
        if (!((libCPGL_gv_commander[lv_player].lv_commander == "Nova"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnitProgressUnit()) == "Barracks") && (libCPCD_gv_cDNovaBarracksBuilt[lv_player] == 0))) {
        libCPCD_gf_CM_PrestigeNova_SpecializeUnitCharges(UnitGetType(EventUnitProgressUnit()), lv_player);
        libCPCD_gf_CDNovaModifyBuildingCooldowns(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "BarracksTrainNova", "InfoArray[" + IntToString(0) + "].Charge.TimeUse", UnitGetOwner(EventUnitProgressUnit())), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "BarracksTrainNova", "InfoArray[" + IntToString(0) + "].Charge.CountMax", UnitGetOwner(EventUnitProgressUnit())), "BarracksTrainNovaMarine", UnitGetOwner(EventUnitProgressUnit()));
        libCPCD_gf_CDNovaModifyBuildingCooldowns(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "BarracksTrainNova", "InfoArray[" + IntToString(1) + "].Charge.TimeUse", UnitGetOwner(EventUnitProgressUnit())), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "BarracksTrainNova", "InfoArray[" + IntToString(1) + "].Charge.CountMax", UnitGetOwner(EventUnitProgressUnit())), "BarracksTrainMarauderNova", UnitGetOwner(EventUnitProgressUnit()));
        libCPCD_gf_CDNovaModifyBuildingCooldowns(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "BarracksTrainNova", "InfoArray[" + IntToString(2) + "].Charge.TimeUse", UnitGetOwner(EventUnitProgressUnit())), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "BarracksTrainNova", "InfoArray[" + IntToString(2) + "].Charge.CountMax", UnitGetOwner(EventUnitProgressUnit())), "BarracksTrainGhostNova", UnitGetOwner(EventUnitProgressUnit()));
        libCPCD_gv_cDNovaBarracksBuilt[lv_player] = 1;
    }

    if (((UnitGetType(EventUnitProgressUnit()) == "Factory") && (libCPCD_gv_cDNovaFactoriesBuilt[lv_player] == 0))) {
        libCPCD_gf_CM_PrestigeNova_SpecializeUnitCharges(UnitGetType(EventUnitProgressUnit()), lv_player);
        libCPCD_gf_CDNovaModifyBuildingCooldowns(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "FactoryTrainNova", "InfoArray[" + IntToString(0) + "].Charge.TimeUse", UnitGetOwner(EventUnitProgressUnit())), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "FactoryTrainNova", "InfoArray[" + IntToString(0) + "].Charge.CountMax", UnitGetOwner(EventUnitProgressUnit())), "FactoryTrainGoliathNova", UnitGetOwner(EventUnitProgressUnit()));
        libCPCD_gf_CDNovaModifyBuildingCooldowns(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "FactoryTrainNova", "InfoArray[" + IntToString(1) + "].Charge.TimeUse", UnitGetOwner(EventUnitProgressUnit())), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "FactoryTrainNova", "InfoArray[" + IntToString(1) + "].Charge.CountMax", UnitGetOwner(EventUnitProgressUnit())), "FactoryTrainSiegeTankNova", UnitGetOwner(EventUnitProgressUnit()));
        libCPCD_gf_CDNovaModifyBuildingCooldowns(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "FactoryTrainNova", "InfoArray[" + IntToString(2) + "].Charge.TimeUse", UnitGetOwner(EventUnitProgressUnit())), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "FactoryTrainNova", "InfoArray[" + IntToString(2) + "].Charge.CountMax", UnitGetOwner(EventUnitProgressUnit())), "FactoryTrainHellbatNova", UnitGetOwner(EventUnitProgressUnit()));
        libCPCD_gv_cDNovaFactoriesBuilt[lv_player] = 1;
    }

    if (((UnitGetType(EventUnitProgressUnit()) == "Starport") && (libCPCD_gv_cDNovaStarportsBuilt[lv_player] == 0))) {
        libCPCD_gf_CM_PrestigeNova_SpecializeUnitCharges(UnitGetType(EventUnitProgressUnit()), lv_player);
        libCPCD_gf_CDNovaModifyBuildingCooldowns(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "StarportTrainNova", "InfoArray[" + IntToString(0) + "].Charge.TimeUse", UnitGetOwner(EventUnitProgressUnit())), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "StarportTrainNova", "InfoArray[" + IntToString(0) + "].Charge.CountMax", UnitGetOwner(EventUnitProgressUnit())), "StarportTrainBansheeNova", UnitGetOwner(EventUnitProgressUnit()));
        libCPCD_gf_CDNovaModifyBuildingCooldowns(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "StarportTrainNova", "InfoArray[" + IntToString(1) + "].Charge.TimeUse", UnitGetOwner(EventUnitProgressUnit())), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "StarportTrainNova", "InfoArray[" + IntToString(1) + "].Charge.CountMax", UnitGetOwner(EventUnitProgressUnit())), "StarportTrainRavenNova", UnitGetOwner(EventUnitProgressUnit()));
        libCPCD_gf_CDNovaModifyBuildingCooldowns(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "StarportTrainNova", "InfoArray[" + IntToString(2) + "].Charge.TimeUse", UnitGetOwner(EventUnitProgressUnit())), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "StarportTrainNova", "InfoArray[" + IntToString(2) + "].Charge.CountMax", UnitGetOwner(EventUnitProgressUnit())), "StarportTrainLiberatorNova", UnitGetOwner(EventUnitProgressUnit()));
        libCPCD_gv_cDNovaStarportsBuilt[lv_player] = 1;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDNovaBuildingCompleted_Init () {
    libCPCD_gt_CDNovaBuildingCompleted = TriggerCreate("libCPCD_gt_CDNovaBuildingCompleted_Func");
    TriggerEnable(libCPCD_gt_CDNovaBuildingCompleted, false);
    TriggerAddEventUnitConstructProgress(libCPCD_gt_CDNovaBuildingCompleted, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDNovaPsiStrike
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDNovaPsiStrike_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_k;
    point lv_t;
    point lv_finalT;
    fixed lv_facing;
    fixed lv_distance;
    bool lv_goodPositionFound;
    int lv_i;
    int lv_player;

    // Automatic Variable Declarations
    const int auto65F31DD4_ae = 14;
    const int auto65F31DD4_ai = 1;

    // Variable Initialization
    lv_k = UnitGetPosition(EventUnit());
    lv_t = EventUnitTargetPoint();
    lv_facing = AngleBetweenPoints(UnitGetPosition(EventUnit()), EventUnitTargetPoint());
    lv_distance = 8.0;
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, 8.0, lv_t);
    lv_finalT = lv_t;
    while ((lv_distance >= 0.6) && (lv_goodPositionFound == false)) {
        lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, lv_distance, lv_t);
        if ((PointPathingCost(lv_k, lv_t) <= FixedToInt((lv_distance * 1.5))) && (WorldHeight(c_heightMapGround, lv_k) < (WorldHeight(c_heightMapGround, lv_t) + 1.0)) && (WorldHeight(c_heightMapGround, lv_k) > (WorldHeight(c_heightMapGround, lv_t) - 1.0))) {
            lv_goodPositionFound = true;
        }

        lv_distance -= 0.5;
    }
    Wait(0.0625, c_timeGame);
    if ((lv_goodPositionFound == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_t), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueReplace);
    }
    Wait(0.1875, c_timeGame);
    lv_i = 1;
    for ( ; ( (auto65F31DD4_ai >= 0 && lv_i <= auto65F31DD4_ae) || (auto65F31DD4_ai < 0 && lv_i >= auto65F31DD4_ae) ) ; lv_i += auto65F31DD4_ai ) {
        libCPCD_gv_cDNovaPsiStrikeFacing[lv_player] = UnitGetFacing(EventUnit());
        if ((lv_facing > 90.0)) {
            if (((libCPCD_gv_cDNovaPsiStrikeFacing[lv_player] < (lv_facing - 90.0)) && (libCPCD_gv_cDNovaPsiStrikeFacing[lv_player] > (lv_facing - 270.0)))) {
                UnitBehaviorRemove(EventUnit(), "NovaPsiStrikeWalkSpeed", 1);
                break;
            }

        }
        else {
            if ((lv_facing < -90.0)) {
                if (((libCPCD_gv_cDNovaPsiStrikeFacing[lv_player] > (lv_facing + 90.0)) && (libCPCD_gv_cDNovaPsiStrikeFacing[lv_player] < (lv_facing + 270.0)))) {
                    UnitBehaviorRemove(EventUnit(), "NovaPsiStrikeWalkSpeed", 1);
                    break;
                }

            }
            else {
                if (((libCPCD_gv_cDNovaPsiStrikeFacing[lv_player] > (lv_facing + 90.0)) || (libCPCD_gv_cDNovaPsiStrikeFacing[lv_player] < (lv_facing - 90.0)))) {
                    UnitBehaviorRemove(EventUnit(), "NovaPsiStrikeWalkSpeed", 1);
                    break;
                }

            }
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDNovaPsiStrike_Init () {
    libCPCD_gt_CDNovaPsiStrike = TriggerCreate("libCPCD_gt_CDNovaPsiStrike_Func");
    TriggerEnable(libCPCD_gt_CDNovaPsiStrike, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDNovaPsiStrike, null, AbilityCommand("NovaPsiStrike", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDNovaTankRange
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDNovaTankRange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_siegeTankUnitGroup;

    // Automatic Variable Declarations
    unitgroup autoBA22C674_g;
    int autoBA22C674_u;
    unit autoBA22C674_var;

    // Variable Initialization
    lv_siegeTankUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_siegeTankUnitGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("SiegeTankSieged_BlackOps", "", "", UnitGetOwner(EventUnit()), -1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBA22C674_g = lv_siegeTankUnitGroup;
    autoBA22C674_u = UnitGroupCount(autoBA22C674_g, c_unitCountAll);
    for (;; autoBA22C674_u -= 1) {
        autoBA22C674_var = UnitGroupUnitFromEnd(autoBA22C674_g, autoBA22C674_u);
        if (autoBA22C674_var == null) { break; }
        UnitBehaviorAdd(autoBA22C674_var, "SiegeTankSiegeModeProgressiveRangeIncease", EventUnit(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDNovaTankRange_Init () {
    libCPCD_gt_CDNovaTankRange = TriggerCreate("libCPCD_gt_CDNovaTankRange_Func");
    TriggerEnable(libCPCD_gt_CDNovaTankRange, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDNovaTankRange, null, AbilityCommand("FactoryTechLabResearch", 18), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDNovaGriffinTransportActivate
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDNovaGriffinTransportActivate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitBehaviorEffectPlayer(EventUnit(), EventUnitBehavior(), c_effectPlayerCaster, 0);
    lv_pg = PlayerGroupSingle(lv_p);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    libCPCD_gv_cDNovaGriffinTransportUnit[lv_p] = EventUnit();
    libCPCD_gv_cDNovaGriffinTransportUnitGroup[lv_p] = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
    libCPCD_gv_cDNovaGriffinTransportLoadPoint[lv_p] = UnitGetPosition(libCPCD_gv_cDNovaGriffinTransportUnit[lv_p]);
    UnitSetState(libCPGL_gv_commander[lv_p].lv_globalCasterUnit, c_unitStateSilenced, true);
    UISetCursorVisible(lv_pg, false);
    Wait(0.5, c_timeGame);
    UISetCursorVisible(lv_pg, true);
    UISetTargetingOrder(lv_pg, libCPCD_gv_cDNovaGriffinTransportUnitGroup[lv_p], OrderTargetingPoint(AbilityCommand("NovaGriffinTransportUnloadUnits", 0), UnitGetPosition(libCPCD_gv_cDNovaGriffinTransportUnit[lv_p])), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDNovaGriffinTransportActivate_Init () {
    libCPCD_gt_CDNovaGriffinTransportActivate = TriggerCreate("libCPCD_gt_CDNovaGriffinTransportActivate_Func");
    TriggerEnable(libCPCD_gt_CDNovaGriffinTransportActivate, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDNovaGriffinTransportActivate, null, "NovaGriffinTransportActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDNovaGriffinTransportStop
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDNovaGriffinTransportStop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(libCPGL_gv_commander[lv_p].lv_globalCasterUnit, c_unitStateSilenced, false);
    Wait(0.0625, c_timeGame);
    if ((UnitHasBehavior2(libCPCD_gv_cDNovaGriffinTransportUnit[lv_p], "NovaGriffinTransportUnloadUnitsDespawnDelay") == false)) {
        UnitCreateEffectUnit(libCPCD_gv_cDNovaGriffinTransportUnit[lv_p], "NovaGriffinTransportCancelUnloadSet", libCPCD_gv_cDNovaGriffinTransportUnit[lv_p]);
    }

    UnitCreateEffectUnit(libCPGL_gv_commander[lv_p].lv_globalCasterUnit, "NovaGriffinGCD", libCPGL_gv_commander[lv_p].lv_globalCasterUnit);
    UnitGroupClear(libCPCD_gv_cDNovaGriffinTransportCargoAir[lv_p]);
    UnitGroupClear(libCPCD_gv_cDNovaGriffinTransportCargoGround[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDNovaGriffinTransportStop_Init () {
    libCPCD_gt_CDNovaGriffinTransportStop = TriggerCreate("libCPCD_gt_CDNovaGriffinTransportStop_Func");
    TriggerEnable(libCPCD_gt_CDNovaGriffinTransportStop, false);
    TriggerAddEventTargetModeUpdate(libCPCD_gt_CDNovaGriffinTransportStop, c_playerAny, AbilityCommand("NovaGriffinTransportUnloadUnits", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDNovaGriffinTransportTimeOut
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDNovaGriffinTransportTimeOut_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libCPGL_gv_commander[lv_p].lv_globalCasterUnit, "NovaGriffinGCD", libCPGL_gv_commander[lv_p].lv_globalCasterUnit);
    UnitSetState(libCPGL_gv_commander[lv_p].lv_globalCasterUnit, c_unitStateSilenced, false);
    UnitGroupClear(libCPCD_gv_cDNovaGriffinTransportCargoAir[lv_p]);
    UnitGroupClear(libCPCD_gv_cDNovaGriffinTransportCargoGround[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDNovaGriffinTransportTimeOut_Init () {
    libCPCD_gt_CDNovaGriffinTransportTimeOut = TriggerCreate("libCPCD_gt_CDNovaGriffinTransportTimeOut_Func");
    TriggerEnable(libCPCD_gt_CDNovaGriffinTransportTimeOut, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDNovaGriffinTransportTimeOut, c_playerAny, "NovaGriffinTransportUnloadUnitsDespawnDelayTimeOut");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDNovaGriffinTransportAirReapply
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDNovaGriffinTransportAirReapply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitBehaviorEffectPlayer(EventUnit(), EventUnitBehavior(), c_effectPlayerCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCPCD_gv_cDNovaGriffinTransportCargoAir[lv_p], EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDNovaGriffinTransportAirReapply_Init () {
    libCPCD_gt_CDNovaGriffinTransportAirReapply = TriggerCreate("libCPCD_gt_CDNovaGriffinTransportAirReapply_Func");
    TriggerEnable(libCPCD_gt_CDNovaGriffinTransportAirReapply, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDNovaGriffinTransportAirReapply, null, "NovaGriffinTransportAirUnits", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDNovaGriffinTransportGroundReapply
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDNovaGriffinTransportGroundReapply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitBehaviorEffectPlayer(EventUnit(), EventUnitBehavior(), c_effectPlayerCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCPCD_gv_cDNovaGriffinTransportCargoGround[lv_p], EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDNovaGriffinTransportGroundReapply_Init () {
    libCPCD_gt_CDNovaGriffinTransportGroundReapply = TriggerCreate("libCPCD_gt_CDNovaGriffinTransportGroundReapply_Func");
    TriggerEnable(libCPCD_gt_CDNovaGriffinTransportGroundReapply, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDNovaGriffinTransportGroundReapply, null, "NovaGriffinTransportGroundUnits", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDNovaGriffinTransportTeleportUnload
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDNovaGriffinTransportTeleportUnload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_unloadPoint;
    fixed lv_angle;
    fixed lv_distance;
    int lv_p;
    point lv_placementtestpoint;

    // Automatic Variable Declarations
    unitgroup auto5E370761_g;
    int auto5E370761_u;
    unit auto5E370761_var;
    unitgroup auto265FE00A_g;
    int auto265FE00A_u;
    unit auto265FE00A_var;

    // Variable Initialization
    lv_unloadPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetUnit);
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_angle = AngleBetweenPoints(libCPCD_gv_cDNovaGriffinTransportLoadPoint[lv_p], lv_unloadPoint);
    lv_distance = DistanceBetweenPoints(libCPCD_gv_cDNovaGriffinTransportLoadPoint[lv_p], lv_unloadPoint);
    auto5E370761_g = libCPCD_gv_cDNovaGriffinTransportCargoAir[lv_p];
    auto5E370761_u = UnitGroupCount(auto5E370761_g, c_unitCountAll);
    for (;; auto5E370761_u -= 1) {
        auto5E370761_var = UnitGroupUnitFromEnd(auto5E370761_g, auto5E370761_u);
        if (auto5E370761_var == null) { break; }
        UnitSetPosition(auto5E370761_var, PointWithOffsetPolar(UnitGetPosition(auto5E370761_var), lv_distance, lv_angle), false);
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "NovaGriffinTransportAirUnitsRB", auto5E370761_var);
    }
    auto265FE00A_g = libCPCD_gv_cDNovaGriffinTransportCargoGround[lv_p];
    auto265FE00A_u = UnitGroupCount(auto265FE00A_g, c_unitCountAll);
    for (;; auto265FE00A_u -= 1) {
        auto265FE00A_var = UnitGroupUnitFromEnd(auto265FE00A_g, auto265FE00A_u);
        if (auto265FE00A_var == null) { break; }
        if ((PointPathingPassable(PointWithOffsetPolar(UnitGetPosition(auto265FE00A_var), lv_distance, lv_angle)) == true)) {
            UnitSetPosition(auto265FE00A_var, PointWithOffsetPolar(UnitGetPosition(auto265FE00A_var), lv_distance, lv_angle), false);
        }
        else {
            lv_placementtestpoint = UnitTypePlacementFromPoint(UnitGetType(auto265FE00A_var), UnitGetOwner(auto265FE00A_var), lv_unloadPoint, 5.0);
            if ((lv_placementtestpoint != null)) {
                UnitSetPosition(auto265FE00A_var, lv_placementtestpoint, false);
            }

        }
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "NovaGriffinTransportUnhideUnitsSet", auto265FE00A_var);
    }
    UnitGroupClear(libCPCD_gv_cDNovaGriffinTransportCargoAir[lv_p]);
    UnitGroupClear(libCPCD_gv_cDNovaGriffinTransportCargoGround[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDNovaGriffinTransportTeleportUnload_Init () {
    libCPCD_gt_CDNovaGriffinTransportTeleportUnload = TriggerCreate("libCPCD_gt_CDNovaGriffinTransportTeleportUnload_Func");
    TriggerEnable(libCPCD_gt_CDNovaGriffinTransportTeleportUnload, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDNovaGriffinTransportTeleportUnload, c_playerAny, "NovaGriffinTransportUnloadUnitsCompletionSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDNovaNamesGenerate
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDNovaNamesGenerate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoB3110903_ae = libCPCD_gv_cDNovaNamesCount;
    const int autoB3110903_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libCPCD_gt_CDNovaNamesGenerate) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (autoB3110903_ai >= 0 && lv_i <= autoB3110903_ae) || (autoB3110903_ai < 0 && lv_i >= autoB3110903_ae) ) ; lv_i += autoB3110903_ai ) {
        TextExpressionSetToken("Param/Expression/lib_CPCD_646C88F5", "Name", libCPCD_gf_CC_StoryArmyUnitUnitType(lv_i));
        libCPCD_gv_cDNovaNames[lv_i] = TextExpressionAssemble("Param/Expression/lib_CPCD_646C88F5");
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDNovaNamesGenerate_Init () {
    libCPCD_gt_CDNovaNamesGenerate = TriggerCreate("libCPCD_gt_CDNovaNamesGenerate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDNovaNamesAssign
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDNovaNamesAssign_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_novaUnitName_Player;
    unit lv_novaUnitName_Unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_novaUnitName_Player = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    lv_novaUnitName_Unit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCPGL_gf_HumanPlayers(), lv_novaUnitName_Player) == true))) {
            return false;
        }

        if (!(((libCPGL_gv_commander[lv_novaUnitName_Player].lv_commander == "Nova") || (libCPGL_gv_commander[lv_novaUnitName_Player].lv_commander == "Horner")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 61, IntToFixed(libCPCD_gv_cDNovaNamesCountTurretn));
    libCPCD_gf_CDNovaNamesKillUpdate(lv_novaUnitName_Unit, libCPCD_gv_cDNovaNamesCountTurretn);
    libCPCD_gv_cDNovaNamesCountTurretn += libCPCD_gv_cDNovaNamesStep;
    if ((libCPCD_gv_cDNovaNamesCountTurretn > libCPCD_gv_cDNovaNamesCount)) {
        libCPCD_gv_cDNovaNamesCountTurretn -= libCPCD_gv_cDNovaNamesCount;
    }

    if ((libCPCD_gv_cDNovaNamesCountTurretn < 1)) {
        libCPCD_gv_cDNovaNamesCountTurretn += libCPCD_gv_cDNovaNamesCount;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDNovaNamesAssign_Init () {
    libCPCD_gt_CDNovaNamesAssign = TriggerCreate("libCPCD_gt_CDNovaNamesAssign_Func");
    TriggerEnable(libCPCD_gt_CDNovaNamesAssign, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDNovaNamesAssign, c_playerAny, "BarracksOrbitalStrikeAssignRally");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDNovaNamesAssign, c_playerAny, "MercAirDropApplyBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDNovaNamesKillUpdate
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDNovaNamesKillUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_customValue61;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_customValue61 = FixedToInt(UnitGetCustomValue(libNtve_gf_KillingUnit(), 61));

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!(((libCPGL_gv_commander[libNtve_gf_KillingPlayer()].lv_commander == "Nova") || (libCPGL_gv_commander[libNtve_gf_KillingPlayer()].lv_commander == "Horner")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_customValue61 != 0)) {
        libCPCD_gf_CDNovaNamesKillUpdate(libNtve_gf_KillingUnit(), lv_customValue61);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDNovaNamesKillUpdate_Init () {
    libCPCD_gt_CDNovaNamesKillUpdate = TriggerCreate("libCPCD_gt_CDNovaNamesKillUpdate_Func");
    TriggerEnable(libCPCD_gt_CDNovaNamesKillUpdate, false);
    TriggerAddEventUnitDied(libCPCD_gt_CDNovaNamesKillUpdate, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDNovaNamesKillUpdateTurret
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDNovaNamesKillUpdateTurret_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_customValue61;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!(((libCPGL_gv_commander[libNtve_gf_KillingPlayer()].lv_commander == "Nova") || (libCPGL_gv_commander[libNtve_gf_KillingPlayer()].lv_commander == "Horner")))) {
            return false;
        }

        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "NovaACLaserTurret"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_customValue61 = FixedToInt(UnitGetCustomValue(UnitBehaviorEffectUnit(libNtve_gf_KillingUnit(), "AutoTurret_BlackOpsTimedLife", c_effectUnitCaster, 0), 61));
    libCPCD_gf_CDNovaNamesKillUpdate(UnitBehaviorEffectUnit(libNtve_gf_KillingUnit(), "AutoTurret_BlackOpsTimedLife", c_effectUnitCaster, 0), lv_customValue61);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDNovaNamesKillUpdateTurret_Init () {
    libCPCD_gt_CDNovaNamesKillUpdateTurret = TriggerCreate("libCPCD_gt_CDNovaNamesKillUpdateTurret_Func");
    TriggerEnable(libCPCD_gt_CDNovaNamesKillUpdateTurret, false);
    TriggerAddEventUnitDied(libCPCD_gt_CDNovaNamesKillUpdateTurret, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStukovTriggersInit
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStukovTriggersInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libCPCD_gt_CDStukovBunkerAutoLoad, true);
    TriggerEnable(libCPCD_gt_CDStukovBurrowSupplyRemove, true);
    TriggerEnable(libCPCD_gt_CDStukovTimedLifeSupplyRemove, true);
    TriggerEnable(libCPCD_gt_CDStukovBunkerUnloadRally, true);
    TriggerEnable(libCPCD_gt_CDStukovBunkerRegister, true);
    TriggerEnable(libCPCD_gt_CDStukovBunkerBirthCargoSpawn, true);
    TriggerEnable(libCPCD_gt_CDStukovUnitCostRefund, true);
    TriggerEnable(libCPCD_gt_CDStukovAleksanderSpawnSupplyRemove, true);
    TriggerEnable(libCPCD_gt_CDStukovCreepTumorSpawn, true);
    TriggerEnable(libCPCD_gt_CDStukovCompoundRebuiltSpawn, true);
    TriggerEnable(libCPCD_gt_CDStukovCompoundRebuilt, true);
    TriggerEnable(libCPCD_gt_CDStukovHordeWaveSpawner, true);
    TriggerEnable(libCPCD_gt_CDStukovHordeWaveCreated, true);
    TriggerEnable(libCPCD_gt_CDStukovHordeWaveVolatile, true);
    TriggerEnable(libCPCD_gt_CDStukovHordeInterruptionReissueOrder, true);
    TriggerEnable(libCPCD_gt_CDStukovRallyPlaced, true);
    TriggerEnable(libCPCD_gt_CDStukovRallytoUnitDies, true);
    TriggerEnable(libCPCD_gt_CDStukovTankDeath, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStukovTriggersInit_Init () {
    libCPCD_gt_CDStukovTriggersInit = TriggerCreate("libCPCD_gt_CDStukovTriggersInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStukovCreepTumorSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStukovCreepTumorSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_i;
    fixed lv_angle;
    unitgroup lv_creepTumorGroup;
    fixed lv_placementX;
    fixed lv_placementY;
    region lv_mapSize;
    fixed lv_waitTime;
    int lv_count;
    fixed lv_angleIncrement;

    // Automatic Variable Declarations
    int autoC57BC9AD_ae;
    const int autoC57BC9AD_ai = 1;
    unitgroup auto7216071D_g;
    int auto7216071D_u;
    unit auto7216071D_var;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_angle = libNtve_gf_RandomAngle();
    lv_creepTumorGroup = UnitGroupEmpty();
    lv_mapSize = RegionEntireMap();
    lv_waitTime = 1.0;
    lv_count = 72;
    lv_angleIncrement = 10.0;

    // Actions
    if (!runActions) {
        return true;
    }

    autoC57BC9AD_ae = lv_count;
    lv_i = 1;
    for ( ; ( (autoC57BC9AD_ai >= 0 && lv_i <= autoC57BC9AD_ae) || (autoC57BC9AD_ai < 0 && lv_i >= autoC57BC9AD_ae) ) ; lv_i += autoC57BC9AD_ai ) {
        lv_placementX = PointGetX(PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), 13.0, lv_angle));
        lv_placementY = PointGetY(PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), 13.0, lv_angle));
        if (((lv_placementX > 1) && (lv_placementY > 1) && (lv_placementX < libNtve_gf_WidthOfRegion(lv_mapSize)) && (lv_placementY < libNtve_gf_HeightOfRegion(lv_mapSize)))) {
            if ((CreepIsPresent(Point(lv_placementX, lv_placementY)) == true)) {
                lv_creepTumorGroup = UnitGroupEmpty();
                auto7216071D_g = UnitGroup("CreepTumorStukov", c_playerAny, RegionCircle(Point(lv_placementX, lv_placementY), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto7216071D_u = UnitGroupCount(auto7216071D_g, c_unitCountAll);
                for (;; auto7216071D_u -= 1) {
                    auto7216071D_var = UnitGroupUnitFromEnd(auto7216071D_g, auto7216071D_u);
                    if (auto7216071D_var == null) { break; }
                    UnitGroupAdd(lv_creepTumorGroup, auto7216071D_var);
                }
                if ((UnitGroupCount(lv_creepTumorGroup, c_unitCountAlive) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorStukov", c_unitCreateIgnorePlacement, 0, Point(lv_placementX, lv_placementY));
                }

            }

        }

        lv_angle += lv_angleIncrement;
        Wait(lv_waitTime, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStukovCreepTumorSpawn_Init () {
    libCPCD_gt_CDStukovCreepTumorSpawn = TriggerCreate("libCPCD_gt_CDStukovCreepTumorSpawn_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDStukovCreepTumorSpawn, c_playerAny, "CreepTumorStukovSpread");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDStukovCreepTumorSpawn, c_playerAny, "CreepTumorStukovSpreadCC");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStukovAleksanderSpawnSupplyRemove
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStukovAleksanderSpawnSupplyRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_aleksander;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_aleksander = EventUnit();
    lv_p = UnitGetOwner(lv_aleksander);

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((UnitIsAlive(lv_aleksander) == true)) {
            PlayerSetState(EventPlayer(), c_playerStateFoodIgnored, true);
            UnitIssueOrder(lv_aleksander, Order(AbilityCommand("StukovAleksanderCrashedTrain", 0)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_aleksander, Order(AbilityCommand("StukovAleksanderCrashedTrain", 1)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_aleksander, Order(AbilityCommand("StukovAleksanderCrashedTrain", 2)), c_orderQueueAddToEnd);
            PlayerSetState(EventPlayer(), c_playerStateFoodIgnored, false);
        }
        else {
            return true;
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStukovAleksanderSpawnSupplyRemove_Init () {
    libCPCD_gt_CDStukovAleksanderSpawnSupplyRemove = TriggerCreate("libCPCD_gt_CDStukovAleksanderSpawnSupplyRemove_Func");
    TriggerEnable(libCPCD_gt_CDStukovAleksanderSpawnSupplyRemove, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDStukovAleksanderSpawnSupplyRemove, null, "StukovSummonAleksanderCrashedTimedLife", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStukovTankDeath
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStukovTankDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stackCount;
    int lv_player;

    // Automatic Variable Declarations
    int autoBEFA0322_ae;
    const int autoBEFA0322_ai = 1;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "StukovInfestedSiegeTankAmmo") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_stackCount = UnitBehaviorCount(EventUnit(), "StukovInfestedSiegeTankAmmo");
    autoBEFA0322_ae = lv_stackCount;
    lv_stackCount = 1;
    for ( ; ( (autoBEFA0322_ai >= 0 && lv_stackCount <= autoBEFA0322_ae) || (autoBEFA0322_ai < 0 && lv_stackCount >= autoBEFA0322_ae) ) ; lv_stackCount += autoBEFA0322_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SIVolatileInfested", 0, EventPlayer(), UnitGetPosition(EventUnit()));
        UnitBehaviorAddPlayer(UnitLastCreated(), "SIBarracksTrainTimedLife", EventPlayer(), 1);
        UnitGroupAdd(libCPCD_gv_cDStukovHorde[lv_player], UnitLastCreated());
        UnitGroupAdd(libCPCD_gv_cDStukovHordeWave[lv_player], UnitLastCreated());
        libCPCD_gv_cDStukovHordeCount[lv_player] = UnitGroupCount(libCPCD_gv_cDStukovHorde[lv_player], c_unitCountAlive);
        libCPCD_gf_CDStukovRallyIssueOrdertoUnit(UnitLastCreated(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStukovTankDeath_Init () {
    libCPCD_gt_CDStukovTankDeath = TriggerCreate("libCPCD_gt_CDStukovTankDeath_Func");
    TriggerEnable(libCPCD_gt_CDStukovTankDeath, false);
    TriggerAddEventUnitDied(libCPCD_gt_CDStukovTankDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStukovUnitCostRefund
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStukovUnitCostRefund_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), c_playerPropMinerals, c_playerPropOperAdd, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "CostResource[" + IntToString(0) + "]", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), c_playerPropVespene, c_playerPropOperAdd, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "CostResource[" + IntToString(1) + "]", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStukovUnitCostRefund_Init () {
    libCPCD_gt_CDStukovUnitCostRefund = TriggerCreate("libCPCD_gt_CDStukovUnitCostRefund_Func");
    TriggerEnable(libCPCD_gt_CDStukovUnitCostRefund, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDStukovUnitCostRefund, c_playerAny, "CocoonCreateLM");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStukovBunkerBirthCargoSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStukovBunkerBirthCargoSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_bunkersize;

    // Automatic Variable Declarations
    unitgroup auto67104B2E_g;
    int auto67104B2E_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "SISCV") && (libNtve_gf_TriggeringProgressUnitType() == "SIInfestedBunker")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_bunkersize = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "SIInfestedBunkerTransport", "TotalCargoSpace", UnitGetOwner(EventUnitProgressUnit()));
    if ((lv_bunkersize > 0)) {
        UnitCargoCreate(EventUnitProgressUnit(), "SIInfestedTrooper", lv_bunkersize);
        auto67104B2E_g = UnitCargoLastCreatedGroup();
        auto67104B2E_u = UnitGroupCount(auto67104B2E_g, c_unitCountAll);
        for (;; auto67104B2E_u -= 1) {
            lv_u = UnitGroupUnitFromEnd(auto67104B2E_g, auto67104B2E_u);
            if (lv_u == null) { break; }
            UnitSetState(lv_u, c_unitStateUsingSupply, false);
            libCPCD_gf_CDStukovBunkerTrainIssueOrder(lv_u);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStukovBunkerBirthCargoSpawn_Init () {
    libCPCD_gt_CDStukovBunkerBirthCargoSpawn = TriggerCreate("libCPCD_gt_CDStukovBunkerBirthCargoSpawn_Func");
    TriggerEnable(libCPCD_gt_CDStukovBunkerBirthCargoSpawn, false);
    TriggerAddEventUnitConstructProgress(libCPCD_gt_CDStukovBunkerBirthCargoSpawn, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStukovBunkerRegister
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStukovBunkerRegister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCPCD_gv_cDStukovBunkerGroup[lv_player], lv_u);
    if ((libCPCD_gv_cDStukovRallyPoint[lv_player] != null)) {
        UnitGroupIssueOrder(libCPCD_gv_cDStukovBunkerGroup[lv_player], OrderTargetingPoint(AbilityCommand("SIInfestedBunkerRally", 0), libCPCD_gv_cDStukovRallyPoint[lv_player]), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStukovBunkerRegister_Init () {
    libCPCD_gt_CDStukovBunkerRegister = TriggerCreate("libCPCD_gt_CDStukovBunkerRegister_Func");
    TriggerEnable(libCPCD_gt_CDStukovBunkerRegister, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDStukovBunkerRegister, c_playerAny, "SIInfestedBunkerCreation");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStukovBunkerUnloadRally
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStukovBunkerUnloadRally_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_newUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_newUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CDStukovBunkerTrainIssueOrder(lv_newUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStukovBunkerUnloadRally_Init () {
    libCPCD_gt_CDStukovBunkerUnloadRally = TriggerCreate("libCPCD_gt_CDStukovBunkerUnloadRally_Func");
    TriggerEnable(libCPCD_gt_CDStukovBunkerUnloadRally, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDStukovBunkerUnloadRally, c_playerAny, "SIInfestedBunkerBunkerUnloadSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStukovBunkerAutoLoad
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStukovBunkerAutoLoad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bunker;
    int lv_p;
    unit lv_newUnit;
    point lv_point;
    int lv_bunkersize;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bunker = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_p = EventPlayer();
    lv_point = UnitGetPosition(lv_bunker);
    lv_bunkersize = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "SIInfestedBunkerTransport", "TotalCargoSpace", UnitGetOwner(lv_bunker));

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_bunkersize > 0) && (UnitCargoValue(lv_bunker, c_unitCargoSpaceFree) > 0)) {
        UnitCargoCreate(lv_bunker, "SIInfestedTrooper", 1);
        lv_newUnit = UnitCargoLastCreated();
    }
    else {
        if ((libCPCD_gv_cDStukovRallyPoint[lv_p] != null)) {
            lv_point = libNtve_gf_PointOffsetTowardsPoint(lv_point, 1.0, libCPCD_gv_cDStukovRallyPoint[lv_p]);
        }

        UnitCreate(1, "SIInfestedTrooper", 0, lv_p, lv_point, 270.0);
        lv_newUnit = UnitLastCreated();
        SoundPlayOnUnitForPlayer(SoundLink("Medivac_Unload", -1), EventPlayer(), PlayerGroupAll(), lv_newUnit, 0.0, 100.0, 0.0);
    }
    UnitSetState(lv_newUnit, c_unitStateUsingSupply, false);
    libCPCD_gf_CDStukovBunkerTrainIssueOrder(lv_newUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStukovBunkerAutoLoad_Init () {
    libCPCD_gt_CDStukovBunkerAutoLoad = TriggerCreate("libCPCD_gt_CDStukovBunkerAutoLoad_Func");
    TriggerEnable(libCPCD_gt_CDStukovBunkerAutoLoad, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDStukovBunkerAutoLoad, c_playerAny, "SIInfestedBunkerAutoSpawnerDummyMU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStukovTimedLifeSupplyRemove
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStukovTimedLifeSupplyRemove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(EventUnitCreatedUnit(), c_unitStateUsingSupply, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStukovTimedLifeSupplyRemove_Init () {
    libCPCD_gt_CDStukovTimedLifeSupplyRemove = TriggerCreate("libCPCD_gt_CDStukovTimedLifeSupplyRemove_Func");
    TriggerEnable(libCPCD_gt_CDStukovTimedLifeSupplyRemove, false);
    TriggerAddEventUnitCreated(libCPCD_gt_CDStukovTimedLifeSupplyRemove, null, "SIMorphtoInfestedCivilian", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStukovBurrowSupplyRemove
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStukovBurrowSupplyRemove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(EventUnit(), c_unitStateUsingSupply, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStukovBurrowSupplyRemove_Init () {
    libCPCD_gt_CDStukovBurrowSupplyRemove = TriggerCreate("libCPCD_gt_CDStukovBurrowSupplyRemove_Func");
    TriggerEnable(libCPCD_gt_CDStukovBurrowSupplyRemove, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDStukovBurrowSupplyRemove, null, AbilityCommand("BurrowSIInfestedTrooperUp", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDStukovBurrowSupplyRemove, null, AbilityCommand("BurrowSIInfestedTrooperDown", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDStukovBurrowSupplyRemove, null, AbilityCommand("BurrowSIInfestedCivilianUp", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDStukovBurrowSupplyRemove, null, AbilityCommand("BurrowSIInfestedCivilianDown", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDStukovBurrowSupplyRemove, null, AbilityCommand("BurrowSIVolatileInfestedDown", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDStukovBurrowSupplyRemove, null, AbilityCommand("BurrowSIVolatileInfestedUp", 0), c_abilMorphStageUnitStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStukovCompoundRebuiltSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStukovCompoundRebuiltSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gv_cDStukovCompound[lv_player] = EventUnit();
    UnitModifyCooldown(libCPCD_gv_cDStukovCompound[lv_player], "Abil/SICivilianStructureSpawnCivilian", 180.0, c_cooldownOperationSet);
    UnitBehaviorAdd(EventUnit(), "SICivilianStructureSpawnCivilianGlobalTimerInitial", EventUnit(), 1);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStukovCompoundRebuiltSpawn_Init () {
    libCPCD_gt_CDStukovCompoundRebuiltSpawn = TriggerCreate("libCPCD_gt_CDStukovCompoundRebuiltSpawn_Func");
    TriggerEnable(libCPCD_gt_CDStukovCompoundRebuiltSpawn, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDStukovCompoundRebuiltSpawn, null, "SICivilianStructureSpawnCivilian", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStukovCompoundRebuilt
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStukovCompoundRebuilt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitProgressUnit());

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "SISCV") && (libNtve_gf_TriggeringProgressUnitType() == "SICivilianStructure")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gv_cDStukovCompound[lv_player] = EventUnitProgressUnit();
    UnitBehaviorAdd(EventUnitProgressUnit(), "SICivilianStructureSpawnCivilianGlobalTimerRebuild", EventUnitProgressUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStukovCompoundRebuilt_Init () {
    libCPCD_gt_CDStukovCompoundRebuilt = TriggerCreate("libCPCD_gt_CDStukovCompoundRebuilt_Func");
    TriggerEnable(libCPCD_gt_CDStukovCompoundRebuilt, false);
    TriggerAddEventUnitConstructProgress(libCPCD_gt_CDStukovCompoundRebuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStukovHordeWaveSpawner
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStukovHordeWaveSpawner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupClear(libCPCD_gv_cDStukovHordeWave[lv_player]);
    UnitCreateEffectUnit(libCPCD_gv_cDStukovCompound[lv_player], "SIBarracksTrainInfestedSpawnSet", libCPCD_gv_cDStukovCompound[lv_player]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStukovHordeWaveSpawner_Init () {
    libCPCD_gt_CDStukovHordeWaveSpawner = TriggerCreate("libCPCD_gt_CDStukovHordeWaveSpawner_Func");
    TriggerEnable(libCPCD_gt_CDStukovHordeWaveSpawner, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDStukovHordeWaveSpawner, c_playerAny, "SICivilianStructureSpawnCivilianGlobalTimerDummyCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStukovHordeWaveCreated
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStukovHordeWaveCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitCreatedUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCPCD_gv_cDStukovHorde[lv_player], EventUnitCreatedUnit());
    UnitGroupAdd(libCPCD_gv_cDStukovHordeWave[lv_player], EventUnitCreatedUnit());
    libCPCD_gv_cDStukovHordeCount[lv_player] = UnitGroupCount(libCPCD_gv_cDStukovHorde[lv_player], c_unitCountAlive);
    libCPCD_gf_CDStukovRallyIssueOrdertoUnit(EventUnitCreatedUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStukovHordeWaveCreated_Init () {
    libCPCD_gt_CDStukovHordeWaveCreated = TriggerCreate("libCPCD_gt_CDStukovHordeWaveCreated_Func");
    TriggerEnable(libCPCD_gt_CDStukovHordeWaveCreated, false);
    TriggerAddEventUnitCreated(libCPCD_gt_CDStukovHordeWaveCreated, null, "SIMorphtoInfestedCivilian", null);
    TriggerAddEventUnitCreated(libCPCD_gt_CDStukovHordeWaveCreated, null, "SIMorphtoInfestedMarine", null);
    TriggerAddEventUnitCreated(libCPCD_gt_CDStukovHordeWaveCreated, null, "SIMorphtoInfestedAberration", null);
    TriggerAddEventUnitCreated(libCPCD_gt_CDStukovHordeWaveCreated, null, "StukovAleksanderCrashedTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStukovHordeWaveVolatile
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStukovHordeWaveVolatile_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCPCD_gv_cDStukovHorde[lv_player], lv_unit);
    UnitGroupAdd(libCPCD_gv_cDStukovHordeWave[lv_player], lv_unit);
    libCPCD_gv_cDStukovHordeCount[lv_player] = UnitGroupCount(libCPCD_gv_cDStukovHorde[lv_player], c_unitCountAlive);
    libCPCD_gf_CDStukovRallyIssueOrdertoUnit(lv_unit, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStukovHordeWaveVolatile_Init () {
    libCPCD_gt_CDStukovHordeWaveVolatile = TriggerCreate("libCPCD_gt_CDStukovHordeWaveVolatile_Func");
    TriggerEnable(libCPCD_gt_CDStukovHordeWaveVolatile, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDStukovHordeWaveVolatile, c_playerAny, "SIBarracksTrainTimedLifeABInfestedExploder");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStukovHordeInterruptionReissueOrder
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStukovHordeInterruptionReissueOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "SIInfestedCivilian") || (UnitGetType(EventUnit()) == "SIInfestedMarine") || (UnitGetType(EventUnit()) == "SIInfestedTrooper") || (UnitGetType(EventUnit()) == "SIVolatileInfested")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    libCPCD_gf_CDStukovRallyIssueOrdertoUnit(lv_unit, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStukovHordeInterruptionReissueOrder_Init () {
    libCPCD_gt_CDStukovHordeInterruptionReissueOrder = TriggerCreate("libCPCD_gt_CDStukovHordeInterruptionReissueOrder_Func");
    TriggerEnable(libCPCD_gt_CDStukovHordeInterruptionReissueOrder, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDStukovHordeInterruptionReissueOrder, null, "MutatorDeathPullModifySpeed", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStukovRallyPlaced
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStukovRallyPlaced_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    unitgroup autoDD945BB0_g;
    int autoDD945BB0_u;
    unit autoDD945BB0_var;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gv_cDStukovRallyUnit[lv_player] = null;
    libCPCD_gv_cDStukovRallyPoint[lv_player] = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    autoDD945BB0_g = UnitGroup(null, c_playerAny, RegionCircle(libCPCD_gv_cDStukovRallyPoint[lv_player], 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDD945BB0_u = UnitGroupCount(autoDD945BB0_g, c_unitCountAll);
    for (;; autoDD945BB0_u -= 1) {
        autoDD945BB0_var = UnitGroupUnitFromEnd(autoDD945BB0_g, autoDD945BB0_u);
        if (autoDD945BB0_var == null) { break; }
        if ((UnitHasBehavior2(autoDD945BB0_var, "ExpansionRocks") == true)) {
            libCPCD_gv_cDStukovRallyUnit[lv_player] = autoDD945BB0_var;
        }

    }
    if ((libCPCD_gv_cDStukovRallyBeaconUnit[lv_player] != null)) {
        UnitRemove(libCPCD_gv_cDStukovRallyBeaconUnit[lv_player]);
    }

    if ((libCPCD_gv_cDStukovRallyUnit[lv_player] != null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SIStukovRallyBeaconPsiEmitterPoint", c_unitCreateIgnorePlacement, 0, libCPCD_gv_cDStukovRallyPoint[lv_player]);
        libCPCD_gv_cDStukovRallyBeaconUnit[lv_player] = UnitLastCreated();
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SIStukovRallyBeaconPsiEmitterPoint", c_unitCreateIgnorePlacement, 0, libCPCD_gv_cDStukovRallyPoint[lv_player]);
        libCPCD_gv_cDStukovRallyBeaconUnit[lv_player] = UnitLastCreated();
    }
    UnitGroupIssueOrder(libCPCD_gv_cDStukovBunkerGroup[lv_player], OrderTargetingPoint(AbilityCommand("SIInfestedBunkerRally", 0), libCPCD_gv_cDStukovRallyPoint[lv_player]), c_orderQueueReplace);
    libCPCD_gf_CDStukovRallyIssueOrdertoHorde(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStukovRallyPlaced_Init () {
    libCPCD_gt_CDStukovRallyPlaced = TriggerCreate("libCPCD_gt_CDStukovRallyPlaced_Func");
    TriggerEnable(libCPCD_gt_CDStukovRallyPlaced, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDStukovRallyPlaced, c_playerAny, "SIStukovPlaceHordeRallyCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStukovRallytoUnitDies
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStukovRallytoUnitDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libCPCD_gv_cDStukovRallyUnit[lv_player] == EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gv_cDStukovRallyUnit[lv_player] = null;
    libCPCD_gv_cDStukovRallyPoint[lv_player] = UnitGetPosition(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStukovRallytoUnitDies_Init () {
    libCPCD_gt_CDStukovRallytoUnitDies = TriggerCreate("libCPCD_gt_CDStukovRallytoUnitDies_Func");
    TriggerEnable(libCPCD_gt_CDStukovRallytoUnitDies, false);
    TriggerAddEventUnitDied(libCPCD_gt_CDStukovRallytoUnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixTriggersInit
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixTriggersInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(libCPCD_gt_CDFenixChampionSetup, true, false);
    TriggerEnable(libCPCD_gt_CDFenixSentryShield, true);
    TriggerEnable(libCPCD_gt_CDFenixTaldarinStore, true);
    TriggerEnable(libCPCD_gt_CDFenixTaldarinRelease, true);
    TriggerEnable(libCPCD_gt_AchievementFenixCarrierResearched, true);
    TriggerEnable(libCPCD_gt_AchievementFenixCarrierAmount, true);
    TriggerEnable(libCPCD_gt_CDFenixChampionConclaveTrainStart, true);
    TriggerEnable(libCPCD_gt_CDFenixChampionConclaveTrainStop, true);
    TriggerEnable(libCPCD_gt_CDFenixChampionConclaveAugmentSound, true);
    TriggerEnable(libCPCD_gt_CDFenixAutocastOn, true);
    TriggerEnable(libCPCD_gt_CDFenixAutocastOff, true);
    TriggerEnable(libCPCD_gt_CDFenixSummonAutocastAdjust, true);
    TriggerEnable(libCPCD_gt_CDFenixDragoonOverchargeOn, true);
    TriggerEnable(libCPCD_gt_CDFenixDragoonOverchargeOff, true);
    TriggerEnable(libCPCD_gt_CDFenixSpawn, true);
    TriggerEnable(libCPCD_gt_CDFenixSpawnCleanup, true);
    TriggerEnable(libCPCD_gt_CDFenisSpawnCleanupRemove, true);
    TriggerEnable(libCPCD_gt_CDFenixDeath, true);
    TriggerEnable(libCPCD_gt_CDFenixSuicideUpdateVital, true);
    TriggerEnable(libCPCD_gt_CDFenixNameRemoveSuicide, true);
    TriggerEnable(libCPCD_gt_CDFenixRallyReset, true);
    TriggerEnable(libCPCD_gt_CDFenixVitalRefresh, true);
    TriggerEnable(libCPCD_gt_CDFenisSpawnCleanupRemove, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixTriggersInit_Init () {
    libCPCD_gt_CDFenixTriggersInit = TriggerCreate("libCPCD_gt_CDFenixTriggersInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixAutocastOn
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixAutocastOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    abilcmd autoCFE42AB3_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoCFE42AB3_val = EventUnitAbility();
    if (autoCFE42AB3_val == AbilityCommand("FenixSoAWhirlwind", 0)) {
        libCPCD_gv_cDFenixAutocastWhirlwind[EventPlayer()] = true;
    }
    else if (autoCFE42AB3_val == AbilityCommand("VoidShieldCapacitor", 0)) {
        libCPCD_gv_cDFenixAutocastShieldCapacitor[EventPlayer()] = true;
    }
    else if (autoCFE42AB3_val == AbilityCommand("FenixThunderousChargeCoop", 0)) {
        libCPCD_gv_cDFenixAutocastCharge[EventPlayer()] = true;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixAutocastOn_Init () {
    libCPCD_gt_CDFenixAutocastOn = TriggerCreate("libCPCD_gt_CDFenixAutocastOn_Func");
    TriggerEnable(libCPCD_gt_CDFenixAutocastOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCPCD_gt_CDFenixAutocastOn, null, AbilityCommand("FenixSoAWhirlwind", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCPCD_gt_CDFenixAutocastOn, null, AbilityCommand("VoidShieldCapacitor", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCPCD_gt_CDFenixAutocastOn, null, AbilityCommand("FenixThunderousChargeCoop", 0), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixAutocastOff
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixAutocastOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    abilcmd auto02A9AF5C_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto02A9AF5C_val = EventUnitAbility();
    if (auto02A9AF5C_val == AbilityCommand("FenixSoAWhirlwind", 0)) {
        libCPCD_gv_cDFenixAutocastWhirlwind[EventPlayer()] = false;
    }
    else if (auto02A9AF5C_val == AbilityCommand("VoidShieldCapacitor", 0)) {
        libCPCD_gv_cDFenixAutocastShieldCapacitor[EventPlayer()] = false;
    }
    else if (auto02A9AF5C_val == AbilityCommand("FenixThunderousChargeCoop", 0)) {
        libCPCD_gv_cDFenixAutocastCharge[EventPlayer()] = false;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixAutocastOff_Init () {
    libCPCD_gt_CDFenixAutocastOff = TriggerCreate("libCPCD_gt_CDFenixAutocastOff_Func");
    TriggerEnable(libCPCD_gt_CDFenixAutocastOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCPCD_gt_CDFenixAutocastOff, null, AbilityCommand("FenixSoAWhirlwind", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCPCD_gt_CDFenixAutocastOff, null, AbilityCommand("VoidShieldCapacitor", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCPCD_gt_CDFenixAutocastOff, null, AbilityCommand("FenixThunderousChargeCoop", 0), c_unitAbilAutoCastChangeOff, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixSummonAutocastAdjust
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixSummonAutocastAdjust_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoD07DA4BC_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoD07DA4BC_val = UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    if (autoD07DA4BC_val == "FenixCoop") {
        if ((libCPCD_gv_cDFenixAutocastWhirlwind[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)] == true)) {
            Wait(0.0625, c_timeGame);
            UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "FenixSoAWhirlwindSetAutocast", EventPlayerEffectUsedUnit(c_effectUnitTarget));
        }

        if ((libCPCD_gv_cDFenixAutocastShieldCapacitor[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)] == true)) {
            Wait(0.0625, c_timeGame);
            UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "FenixVoidShieldCapacitorSetAutocast", EventPlayerEffectUsedUnit(c_effectUnitTarget));
        }

        if ((libCPCD_gv_cDFenixAutocastCharge[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)] == true)) {
            Wait(0.0625, c_timeGame);
            UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "FenixThunderousChargeCoopSetAutoCast", EventPlayerEffectUsedUnit(c_effectUnitTarget));
        }

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixSummonAutocastAdjust_Init () {
    libCPCD_gt_CDFenixSummonAutocastAdjust = TriggerCreate("libCPCD_gt_CDFenixSummonAutocastAdjust_Func");
    TriggerEnable(libCPCD_gt_CDFenixSummonAutocastAdjust, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDFenixSummonAutocastAdjust, c_playerAny, "SOASummonFenixWarpInOutAB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixDragoonOverchargeOn
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixDragoonOverchargeOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogAbil, "ChargedBuster", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", EventPlayer(), "0");
    CatalogFieldValueSet(c_gameCatalogAbil, "FenixDragoonAirBomb", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", EventPlayer(), "0");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixDragoonOverchargeOn_Init () {
    libCPCD_gt_CDFenixDragoonOverchargeOn = TriggerCreate("libCPCD_gt_CDFenixDragoonOverchargeOn_Func");
    TriggerEnable(libCPCD_gt_CDFenixDragoonOverchargeOn, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDFenixDragoonOverchargeOn, null, "ChargeBuster", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixDragoonOverchargeOff
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixDragoonOverchargeOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogAbil, "ChargedBuster", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", EventPlayer(), 1.0, c_upgradeOperationMultiply);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogAbil, "FenixDragoonAirBomb", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", EventPlayer(), 1.0, c_upgradeOperationMultiply);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixDragoonOverchargeOff_Init () {
    libCPCD_gt_CDFenixDragoonOverchargeOff = TriggerCreate("libCPCD_gt_CDFenixDragoonOverchargeOff_Func");
    TriggerEnable(libCPCD_gt_CDFenixDragoonOverchargeOff, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDFenixDragoonOverchargeOff, null, "ChargeBuster", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_kills;
    int lv_fenixPlayer;
    unit lv_fenixUnitOld;
    unit lv_fenixUnitNew;
    bool lv_selected;
    bool lv_activedSubGroupSelected;
    unitgroup lv_fenixPlayerSelectionGroup;
    unitgroup lv_fenixPlayerActivedSubGroup;

    // Automatic Variable Declarations
    unitgroup autoC3502BC0_g;
    int autoC3502BC0_u;
    unit autoC3502BC0_var;
    string auto6F79A355_val;
    const int autoF67970AB_ae = 3;
    const int autoF67970AB_ai = 1;
    const int autoE023FAA1_ae = 3;
    const int autoE023FAA1_ai = 1;
    const int auto396A840A_ae = 3;
    const int auto396A840A_ai = 1;

    // Variable Initialization
    lv_fenixPlayer = UnitGetOwner(EventUnitCreatedUnit());
    lv_fenixUnitOld = libCPCD_gv_cDFenixActiveHero[lv_fenixPlayer];
    lv_fenixUnitNew = EventUnitCreatedUnit();
    lv_fenixPlayerSelectionGroup = UnitGroupSelected(lv_fenixPlayer);
    lv_fenixPlayerActivedSubGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((EventUnitCreatedAbil() == "SOASummonFenix") || (EventUnitCreatedAbil() == "SOASummonFenixArbiter") || (EventUnitCreatedAbil() == "SOASummonFenixDragoon")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_fenixUnitOld, "CommanderPrestigeFenixSuitSwapTimedLife", 1);
    UnitGroupAdd(libCPCD_gv_cDFenixHeroGroup[lv_fenixPlayer], EventUnitCreatedUnit());
    if ((libCPCD_gv_cDFenixKilledSelf[UnitGetOwner(EventUnit())] == false)) {
        UnitBehaviorAdd(lv_fenixUnitNew, "FenixExplode", lv_fenixUnitNew, 1);
    }

    libCPCD_gv_cDFenixActiveHero[lv_fenixPlayer] = lv_fenixUnitNew;
    libCPCD_gv_cDFenixActiveHeroAbility[lv_fenixPlayer] = EventUnitCreatedAbil();
    autoC3502BC0_g = libCPCD_gv_cDFenixHeroGroup[lv_fenixPlayer];
    autoC3502BC0_u = UnitGroupCount(autoC3502BC0_g, c_unitCountAll);
    for (;; autoC3502BC0_u -= 1) {
        autoC3502BC0_var = UnitGroupUnitFromEnd(autoC3502BC0_g, autoC3502BC0_u);
        if (autoC3502BC0_var == null) { break; }
        if ((UnitIsAlive(autoC3502BC0_var) == true)) {
            lv_kills += libNtve_gf_UnitGetPropertyKills(autoC3502BC0_var, c_unitPropCurrent);
        }

    }
    if ((lv_kills > 0)) {
        UnitSetPropertyFixed(libCPCD_gv_cDFenixActiveHero[lv_fenixPlayer], c_unitPropKills, lv_kills);
        libCPCD_gv_cDFenixKillCount[UnitGetOwner(EventUnit())] = lv_kills;
    }
    else {
        UnitSetPropertyFixed(libCPCD_gv_cDFenixActiveHero[lv_fenixPlayer], c_unitPropKills, libCPCD_gv_cDFenixKillCount[UnitGetOwner(EventUnit())]);
    }
    DialogControlSetVisible(libCPCD_gv_globalPowerCmdButtonActiveImage[1][UnitGetOwner(lv_fenixUnitNew)], PlayerGroupSingle(UnitGetOwner(lv_fenixUnitNew)), false);
    DialogControlSetVisible(libCPCD_gv_globalPowerCmdButtonActiveImage[2][UnitGetOwner(lv_fenixUnitNew)], PlayerGroupSingle(UnitGetOwner(lv_fenixUnitNew)), false);
    DialogControlSetVisible(libCPCD_gv_globalPowerCmdButtonActiveImage[3][UnitGetOwner(lv_fenixUnitNew)], PlayerGroupSingle(UnitGetOwner(lv_fenixUnitNew)), false);
    auto6F79A355_val = UnitGetType(EventUnitCreatedUnit());
    if (auto6F79A355_val == "FenixCoop") {
        libCPCD_gv_cDFenixActiveHeroSlot[lv_fenixPlayer] = 1;
        UnitSetPropertyFixed(libCPCD_gv_cDFenixActiveHero[lv_fenixPlayer], c_unitPropLife, UnitGetPropertyFixed(libCPCD_gv_cDFenixSuits[1][lv_fenixPlayer], c_unitPropLife, c_unitPropCurrent));
        UnitSetPropertyFixed(libCPCD_gv_cDFenixActiveHero[lv_fenixPlayer], c_unitPropShields, UnitGetPropertyFixed(libCPCD_gv_cDFenixSuits[1][lv_fenixPlayer], c_unitPropShields, c_unitPropCurrent));
        UnitSetPropertyFixed(libCPCD_gv_cDFenixActiveHero[lv_fenixPlayer], c_unitPropEnergy, UnitGetPropertyFixed(libCPCD_gv_cDFenixSuits[1][lv_fenixPlayer], c_unitPropEnergy, c_unitPropCurrent));
        libCPCD_gf_LinkUnitEnergyToGPCmdButton(libCPCD_gv_cDFenixActiveHero[lv_fenixPlayer], UnitGetOwner(EventUnitCreatedUnit()), 1);
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libCPCD_gv_globalPowerCutscene[lv_fenixPlayer]), "WorkStart");
        lv_i = 1;
        for ( ; ( (autoF67970AB_ai >= 0 && lv_i <= autoF67970AB_ae) || (autoF67970AB_ai < 0 && lv_i >= autoF67970AB_ae) ) ; lv_i += autoF67970AB_ai ) {
            if ((PlayerGetCooldown(lv_fenixPlayer, (libCPCD_gv_cDFenixAbilityCommands[lv_i])) <= 0.0) && ((libCPCD_gv_cDFenixAbilityCommands[lv_i]) != (libCPCD_gv_cDFenixActiveHeroAbility[lv_fenixPlayer]))) {
                PlayerAddCooldown(lv_fenixPlayer, (libCPCD_gv_cDFenixAbilityCommands[lv_i]), libCPCD_gv_cDFenixSuitSwapCooldown);
            }

        }
    }
    else if (auto6F79A355_val == "FenixDragoon") {
        libCPCD_gv_cDFenixActiveHeroSlot[lv_fenixPlayer] = 2;
        UnitSetPropertyFixed(libCPCD_gv_cDFenixActiveHero[lv_fenixPlayer], c_unitPropLife, UnitGetPropertyFixed(libCPCD_gv_cDFenixSuits[2][lv_fenixPlayer], c_unitPropLife, c_unitPropCurrent));
        UnitSetPropertyFixed(libCPCD_gv_cDFenixActiveHero[lv_fenixPlayer], c_unitPropShields, UnitGetPropertyFixed(libCPCD_gv_cDFenixSuits[2][lv_fenixPlayer], c_unitPropShields, c_unitPropCurrent));
        UnitSetPropertyFixed(libCPCD_gv_cDFenixActiveHero[lv_fenixPlayer], c_unitPropEnergy, UnitGetPropertyFixed(libCPCD_gv_cDFenixSuits[2][lv_fenixPlayer], c_unitPropEnergy, c_unitPropCurrent));
        libCPCD_gf_LinkUnitEnergyToGPCmdButton(libCPCD_gv_cDFenixActiveHero[lv_fenixPlayer], UnitGetOwner(EventUnitCreatedUnit()), 2);
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libCPCD_gv_globalPowerCutscene[UnitGetOwner(lv_fenixUnitNew)]), "WorkStart");
        lv_i = 1;
        for ( ; ( (autoE023FAA1_ai >= 0 && lv_i <= autoE023FAA1_ae) || (autoE023FAA1_ai < 0 && lv_i >= autoE023FAA1_ae) ) ; lv_i += autoE023FAA1_ai ) {
            if ((PlayerGetCooldown(lv_fenixPlayer, (libCPCD_gv_cDFenixAbilityCommands[lv_i])) <= 0.0) && ((libCPCD_gv_cDFenixAbilityCommands[lv_i]) != (libCPCD_gv_cDFenixActiveHeroAbility[lv_fenixPlayer]))) {
                PlayerAddCooldown(lv_fenixPlayer, (libCPCD_gv_cDFenixAbilityCommands[lv_i]), libCPCD_gv_cDFenixSuitSwapCooldown);
            }

        }
    }
    else if (auto6F79A355_val == "FenixArbiter") {
        libCPCD_gv_cDFenixActiveHeroSlot[lv_fenixPlayer] = 3;
        UnitSetPropertyFixed(libCPCD_gv_cDFenixActiveHero[lv_fenixPlayer], c_unitPropLife, UnitGetPropertyFixed(libCPCD_gv_cDFenixSuits[3][lv_fenixPlayer], c_unitPropLife, c_unitPropCurrent));
        UnitSetPropertyFixed(libCPCD_gv_cDFenixActiveHero[lv_fenixPlayer], c_unitPropShields, UnitGetPropertyFixed(libCPCD_gv_cDFenixSuits[3][lv_fenixPlayer], c_unitPropShields, c_unitPropCurrent));
        UnitSetPropertyFixed(libCPCD_gv_cDFenixActiveHero[lv_fenixPlayer], c_unitPropEnergy, UnitGetPropertyFixed(libCPCD_gv_cDFenixSuits[3][lv_fenixPlayer], c_unitPropEnergy, c_unitPropCurrent));
        libCPCD_gf_LinkUnitEnergyToGPCmdButton(libCPCD_gv_cDFenixActiveHero[lv_fenixPlayer], UnitGetOwner(EventUnitCreatedUnit()), 3);
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libCPCD_gv_globalPowerCutscene[lv_fenixPlayer]), "WorkStart");
        lv_i = 1;
        for ( ; ( (auto396A840A_ai >= 0 && lv_i <= auto396A840A_ae) || (auto396A840A_ai < 0 && lv_i >= auto396A840A_ae) ) ; lv_i += auto396A840A_ai ) {
            if ((PlayerGetCooldown(lv_fenixPlayer, (libCPCD_gv_cDFenixAbilityCommands[lv_i])) <= 0.0) && ((libCPCD_gv_cDFenixAbilityCommands[lv_i]) != (libCPCD_gv_cDFenixActiveHeroAbility[lv_fenixPlayer]))) {
                PlayerAddCooldown(lv_fenixPlayer, (libCPCD_gv_cDFenixAbilityCommands[lv_i]), libCPCD_gv_cDFenixSuitSwapCooldown);
            }

        }
    }
    else {
    }
    libCPCD_gf_CDFenixVitalMatch(EventUnitCreatedUnit());
    libCPCD_gf_CDFenixSetActiveHeroUIState(EventUnitCreatedUnit(), true);
    libCPCD_gf_SetHeroPanelUnit(1, EventUnitCreatedUnit(), UnitGetOwner(EventUnitCreatedUnit()));
    libCPCD_gf_CU_ShowHideHeroPanel(true, 1);
    libCPCD_gf_CDFenixSetActiveHeroRally(EventUnitCreatedUnit());
    libCPCD_gf_TransferGuardianShell(lv_fenixUnitOld, lv_fenixUnitNew);
    UnitCreateEffectUnit(lv_fenixUnitNew, "CopyTargetSelectionAndControlGroups", lv_fenixUnitOld);
    if ((UnitGroupCount(lv_fenixPlayerSelectionGroup, c_unitCountAlive) > 0)) {
        lv_fenixPlayerActivedSubGroup = UnitSubgroupSelected(lv_fenixPlayer);
        lv_selected = UnitIsSelected(lv_fenixUnitOld, lv_fenixPlayer);
        lv_activedSubGroupSelected = UnitGroupHasUnit(lv_fenixPlayerActivedSubGroup, lv_fenixUnitOld);
    }

    UnitSelect(libCPCD_gv_cDFenixActiveHero[lv_fenixPlayer], lv_fenixPlayer, false);
    if ((lv_selected == true)) {
        UnitGroupRemove(lv_fenixPlayerSelectionGroup, lv_fenixUnitOld);
        UnitGroupRemove(lv_fenixPlayerActivedSubGroup, lv_fenixUnitOld);
        UnitGroupAdd(lv_fenixPlayerSelectionGroup, lv_fenixUnitNew);
        if ((lv_activedSubGroupSelected == true)) {
            UnitGroupAdd(lv_fenixPlayerActivedSubGroup, lv_fenixUnitNew);
        }

        UnitClearSelection(lv_fenixPlayer);
        Wait(0.0625, c_timeGame);
        UnitGroupSelect(lv_fenixPlayerActivedSubGroup, lv_fenixPlayer, true);
        UnitGroupSelect(lv_fenixPlayerSelectionGroup, lv_fenixPlayer, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixSpawn_Init () {
    libCPCD_gt_CDFenixSpawn = TriggerCreate("libCPCD_gt_CDFenixSpawn_Func");
    TriggerEnable(libCPCD_gt_CDFenixSpawn, false);
    TriggerAddEventUnitCreated(libCPCD_gt_CDFenixSpawn, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixSpawnCleanup
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixSpawnCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    unitgroup auto4B61681A_g;
    int auto4B61681A_u;
    unit auto4B61681A_var;

    // Variable Initialization
    lv_player = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));

    // Conditions
    if (testConds) {
        if (!((EventPlayerEffectUsed() != "SuicideRemove"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "SOASummonFenixHeroSummonSelfCleanupDummy")) {
        libCPCD_gf_CDFenixVitalMatch(EventPlayerEffectUsedUnit(c_effectUnitTarget));
        DialogControlSetVisible(libCPCD_gv_globalPowerCmdButtonActiveImage[1][lv_player], PlayerGroupSingle(lv_player), false);
        DialogControlSetVisible(libCPCD_gv_globalPowerCmdButtonActiveImage[2][lv_player], PlayerGroupSingle(lv_player), false);
        DialogControlSetVisible(libCPCD_gv_globalPowerCmdButtonActiveImage[3][lv_player], PlayerGroupSingle(lv_player), false);
        libCPCD_gv_cDFenixActiveHero[lv_player] = null;
        libCPCD_gv_cDFenixActiveHeroAbility[lv_player] = "";
        UnitCreateEffectUnit(libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit, "SOASummonFenixHeroSummonCasterBehaviorCleanup", libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit);
        libCPCD_gv_heroPanelUnitExists[lv_player][libCPCD_gv_cDFenixHeroIndex] = false;
        libCPCD_gf_CDFenixSetActiveHeroUIState(EventPlayerEffectUsedUnit(c_effectUnitTarget), false);
        libCPCD_gf_CU_ShowHideHeroPanel(false, libCPCD_gv_cDFenixHeroIndex);
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libCPCD_gv_globalPowerCutscene[lv_player]), "WorkEnd");
        UnitBehaviorAddPlayer(EventPlayerEffectUsedUnit(c_effectUnitTarget), "SOASummonFenixWarpOutAnimation", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), 1);
    }
    else {
        Wait(0.0625, c_timeGame);
        auto4B61681A_g = libCPCD_gv_cDFenixHeroGroup[lv_player];
        auto4B61681A_u = UnitGroupCount(auto4B61681A_g, c_unitCountAll);
        for (;; auto4B61681A_u -= 1) {
            auto4B61681A_var = UnitGroupUnitFromEnd(auto4B61681A_g, auto4B61681A_u);
            if (auto4B61681A_var == null) { break; }
            if ((auto4B61681A_var != libCPCD_gv_cDFenixActiveHero[lv_player])) {
                libCPCD_gf_CDFenixVitalMatch(auto4B61681A_var);
                UnitBehaviorAddPlayer(auto4B61681A_var, "SOASummonFenixWarpOutAnimation", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), 1);
                Wait(1.5, c_timeGame);
                UnitRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget));
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixSpawnCleanup_Init () {
    libCPCD_gt_CDFenixSpawnCleanup = TriggerCreate("libCPCD_gt_CDFenixSpawnCleanup_Func");
    TriggerEnable(libCPCD_gt_CDFenixSpawnCleanup, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDFenixSpawnCleanup, c_playerAny, "SOASummonFenixHeroSummonCleanupDummy");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDFenixSpawnCleanup, c_playerAny, "SOASummonFenixHeroSummonSelfCleanupDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenisSpawnCleanupRemove
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenisSpawnCleanupRemove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "SuicideRemove", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    libNtve_gf_ShowHideUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), false);
    UnitStatusBarClearOverride(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenisSpawnCleanupRemove_Init () {
    libCPCD_gt_CDFenisSpawnCleanupRemove = TriggerCreate("libCPCD_gt_CDFenisSpawnCleanupRemove_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDFenisSpawnCleanupRemove, c_playerAny, "SOASummonFenixWarpOutAnimation");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixVitalRefresh
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixVitalRefresh_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoE4645D7A_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((libCPGL_gv_commander[UnitGetOwner(EventUnit())].lv_commander == "Fenix"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE4645D7A_g = libCPGL_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoE4645D7A_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCPCD_gv_cDFenixActiveHero[lv_indexPlayer] == EventUnit()) && (UnitIsAlive(EventUnit()) == true)) {
            libCPCD_gf_CDFenixVitalMatch(EventUnit());
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixVitalRefresh_Init () {
    libCPCD_gt_CDFenixVitalRefresh = TriggerCreate("libCPCD_gt_CDFenixVitalRefresh_Func");
    TriggerAddEventUnitProperty(libCPCD_gt_CDFenixVitalRefresh, null, c_unitPropLife);
    TriggerAddEventUnitProperty(libCPCD_gt_CDFenixVitalRefresh, null, c_unitPropEnergy);
    TriggerAddEventUnitProperty(libCPCD_gt_CDFenixVitalRefresh, null, c_unitPropShields);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixDeath
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_unitType;

    // Automatic Variable Declarations
    string auto236BE493_val;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());
    lv_unitType = UnitGetType(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libCPCD_gv_cDFenixHeroGroup[lv_player], EventUnit()) == true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "FenixCoop")) {
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(lv_player), libCOMI_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_CPCD_CC857B9D"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        DialogControlSetVisible(libCPCD_gv_globalPowerCmdButtonActiveImage[1][lv_player], PlayerGroupSingle(lv_player), false);
    }

    if ((UnitGetType(EventUnit()) == "FenixDragoon")) {
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(lv_player), libCOMI_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_CPCD_46657303"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        DialogControlSetVisible(libCPCD_gv_globalPowerCmdButtonActiveImage[2][lv_player], PlayerGroupSingle(lv_player), false);
    }

    if ((UnitGetType(EventUnit()) == "FenixArbiter")) {
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(lv_player), libCOMI_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_CPCD_F58A97D7"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        DialogControlSetVisible(libCPCD_gv_globalPowerCmdButtonActiveImage[3][lv_player], PlayerGroupSingle(lv_player), false);
    }

    libCPCD_gf_CDFenixVitalMatch(EventUnit());
    libCPCD_gv_cDFenixKillCount[UnitGetOwner(EventUnit())] = libNtve_gf_UnitGetPropertyKills(EventUnit(), c_unitPropCurrent);
    UnitCreateEffectUnit(libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit, "SOASummonFenixHeroSummonCasterBehaviorCleanup", libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit);
    libCPCD_gv_heroPanelUnitExists[UnitGetOwner(EventUnit())][libCPCD_gv_cDFenixHeroIndex] = false;
    if ((libNtve_gf_KillingUnit() == EventUnit()) && (libCPCD_gv_cDFenixKilledSelf[lv_player] == false) && (EventUnitDamageEffect() == "FenixSuicide")) {
        libCPCD_gv_cDFenixKilledSelf[lv_player] = true;
        libCPCD_gv_cDFenixKillCount[lv_player] += 1;
        TechTreeBehaviorAllow(lv_player, "FenixExplode", false);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "AStrongHeart", 1);
        SoundChannelStop(PlayerGroupSingle(lv_player), c_soundCategoryVoice);
        auto236BE493_val = lv_unitType;
        if (auto236BE493_val == "FenixArbiter") {
            libCPCD_gf_CDFenixRecallReveal(lv_player, AbilityCommand("SOASummonFenixArbiter", 0), EventUnitDamageSourcePoint(), lv_unitType);
        }
        else if (auto236BE493_val == "FenixCoop") {
            libCPCD_gf_CDFenixRecallReveal(lv_player, AbilityCommand("SOASummonFenix", 0), EventUnitDamageSourcePoint(), lv_unitType);
        }
        else if (auto236BE493_val == "FenixDragoon") {
            libCPCD_gf_CDFenixRecallReveal(lv_player, AbilityCommand("SOASummonFenixDragoon", 0), EventUnitDamageSourcePoint(), lv_unitType);
        }
        else {
            libCPCD_gf_CDFenixRecallReveal(lv_player, AbilityCommand("SOASummonFenix", 0), EventUnitDamageSourcePoint(), lv_unitType);
        }
    }
    else {
        PlayerAddCooldown(lv_player, (libCPCD_gv_cDFenixActiveHeroAbility[lv_player]), 180.0);
    }
    libCPCD_gv_cDFenixActiveHeroAbility[lv_player] = "";
    libCPCD_gf_CDFenixSetActiveHeroUIState(EventUnit(), false);
    libCPCD_gf_CU_ShowHideHeroPanel(false, libCPCD_gv_cDFenixHeroIndex);
    CutsceneGoToBookmark(CutsceneGetTriggerControl(libCPCD_gv_globalPowerCutscene[lv_player]), "WorkEnd");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixDeath_Init () {
    libCPCD_gt_CDFenixDeath = TriggerCreate("libCPCD_gt_CDFenixDeath_Func");
    TriggerEnable(libCPCD_gt_CDFenixDeath, false);
    TriggerAddEventUnitDied(libCPCD_gt_CDFenixDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixSuicideUpdateVital
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixSuicideUpdateVital_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gv_cDFenixSuicideLife[EventPlayer()] = EventPlayerEffectUsedAmountFixed(c_effectAmountShieldsChanged, true);
    libCPCD_gv_cDFenixSuicideShield[EventPlayer()] = EventPlayerEffectUsedAmountFixed(c_effectAmountLifeChanged, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixSuicideUpdateVital_Init () {
    libCPCD_gt_CDFenixSuicideUpdateVital = TriggerCreate("libCPCD_gt_CDFenixSuicideUpdateVital_Func");
    TriggerEnable(libCPCD_gt_CDFenixSuicideUpdateVital, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDFenixSuicideUpdateVital, c_playerAny, "FenixSuicide");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixNameRemoveSuicide
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixNameRemoveSuicide_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gv_cDFenixKilledSelf[lv_player] = true;
    UnitBehaviorRemove(libCPCD_gv_cDFenixActiveHero[lv_player], "FenixExplode", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixNameRemoveSuicide_Init () {
    libCPCD_gt_CDFenixNameRemoveSuicide = TriggerCreate("libCPCD_gt_CDFenixNameRemoveSuicide_Func");
    TriggerEnable(libCPCD_gt_CDFenixNameRemoveSuicide, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDFenixNameRemoveSuicide, null, AbilityCommand("ForgeResearch", 16), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixRallyReset
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixRallyReset_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto82DA2FA4_g;
    int auto82DA2FA4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto82DA2FA4_g = libCPGL_gf_AllCommandersinPlayerGroup("Fenix", libCPGL_gf_HumanPlayers());
    auto82DA2FA4_var = -1;
    while (true) {
        auto82DA2FA4_var = PlayerGroupNextPlayer(auto82DA2FA4_g, auto82DA2FA4_var);
        if (auto82DA2FA4_var < 0) { break; }
        if ((UnitIsAlive(EventUnitTargetUnit()) == true) && (EventUnitTargetUnit() == libCPCD_gv_cDFenixActiveHero[auto82DA2FA4_var])) {
            UnitGroupAdd(libCPCD_gv_cDFenixRalliedGroup, EventUnit());
        }
        else {
            UnitGroupRemove(libCPCD_gv_cDFenixRalliedGroup, EventUnit());
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixRallyReset_Init () {
    libCPCD_gt_CDFenixRallyReset = TriggerCreate("libCPCD_gt_CDFenixRallyReset_Func");
    TriggerEnable(libCPCD_gt_CDFenixRallyReset, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDFenixRallyReset, null, AbilityCommand("Rally", 0), c_abilRallyStagePlace, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixChampionSetup
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixChampionSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gv_cDFenixChampionUnitType[1] = "FenixKaldalisZealot";
    libCPCD_gv_cDFenixChampionUnitType[2] = "FenixTalisAdept";
    libCPCD_gv_cDFenixChampionUnitType[3] = "FenixMojoScout";
    libCPCD_gv_cDFenixChampionUnitType[4] = "FenixTaldarinImmortal";
    libCPCD_gv_cDFenixChampionUnitType[5] = "FenixWarbringerColossus";
    libCPCD_gv_cDFenixChampionUnitType[6] = "FenixClolarionCarrier";
    libCPCD_gv_cDFenixChampionUnitReplaceType[1] = "ZealotPurifier";
    libCPCD_gv_cDFenixChampionUnitReplaceType[2] = "AdeptFenix";
    libCPCD_gv_cDFenixChampionUnitReplaceType[3] = "Scout";
    libCPCD_gv_cDFenixChampionUnitReplaceType[4] = "Immortal";
    libCPCD_gv_cDFenixChampionUnitReplaceType[5] = "ColossusPurifier";
    libCPCD_gv_cDFenixChampionUnitReplaceType[6] = "Carrier";
    libCPCD_gv_cDFenixChampionMorphAbility[1] = AbilityCommand("FenixKaldalisZealotMorph", 0);
    libCPCD_gv_cDFenixChampionMorphAbility[2] = AbilityCommand("FenixTalisAdeptMorph", 0);
    libCPCD_gv_cDFenixChampionMorphAbility[3] = AbilityCommand("FenixMojoScoutMorph", 0);
    libCPCD_gv_cDFenixChampionMorphAbility[4] = AbilityCommand("FenixTaldarinImmortalMorph", 0);
    libCPCD_gv_cDFenixChampionMorphAbility[5] = AbilityCommand("FenixWarbringerColossusMorph", 0);
    libCPCD_gv_cDFenixChampionMorphAbility[6] = AbilityCommand("FenixClolarionCarrierMorph", 0);
    libCPCD_gv_cDFenixChampionNetworkUpgrades[1] = "FenixNetworkedSuperiorityZealot";
    libCPCD_gv_cDFenixChampionNetworkUpgrades[2] = "FenixNetworkedSuperiorityAdept";
    libCPCD_gv_cDFenixChampionNetworkUpgrades[3] = "FenixNetworkedSuperiorityScout";
    libCPCD_gv_cDFenixChampionNetworkUpgrades[4] = "FenixNetworkedSuperiorityImmortal";
    libCPCD_gv_cDFenixChampionNetworkUpgrades[5] = "FenixNetworkedSuperiorityColossus";
    libCPCD_gv_cDFenixChampionNetworkUpgrades[6] = "FenixNetworkedSuperiorityCarrier";
    libCPCD_gv_cDFenixChampionShellEffect[1] = "FenixChampionShellCountZealot";
    libCPCD_gv_cDFenixChampionShellEffect[2] = "FenixChampionShellCountAdept";
    libCPCD_gv_cDFenixChampionShellEffect[3] = "FenixChampionShellCountScout";
    libCPCD_gv_cDFenixChampionShellEffect[4] = "FenixChampionShellCountImmortal";
    libCPCD_gv_cDFenixChampionShellEffect[5] = "FenixChampionShellCountColossus";
    libCPCD_gv_cDFenixChampionShellEffect[6] = "FenixChampionShellCountCarrier";
    libCPCD_gv_cDFenixChampionDeathBuffBehavior[1] = "FenixChampionSwapBoostZealot";
    libCPCD_gv_cDFenixChampionDeathBuffBehavior[2] = "FenixChampionSwapBoostAdept";
    libCPCD_gv_cDFenixChampionDeathBuffBehavior[3] = "FenixChampionSwapBoostScout";
    libCPCD_gv_cDFenixChampionDeathBuffBehavior[4] = "FenixChampionSwapBoostImmortal";
    libCPCD_gv_cDFenixChampionDeathBuffBehavior[5] = "FenixChampionSwapBoostColossus";
    libCPCD_gv_cDFenixChampionDeathBuffBehavior[6] = "FenixChampionSwapBoostCarrier";
    TriggerEnable(libCPCD_gt_CDFenixChampionShellMade, true);
    TriggerEnable(libCPCD_gt_CDFenixChampionConclaveRemade, true);
    TriggerEnable(libCPCD_gt_CDFenixChampionAIResearched, true);
    TriggerEnable(libCPCD_gt_CDFenixChampionMorphed, true);
    TriggerEnable(libCPCD_gt_CDFenixChampionDeath, true);
    TriggerEnable(libCPCD_gt_CDFenixChampionShellDies, true);
    TriggerEnable(libCPCD_gt_CDFenixChampionProbius, true);
    TriggerEnable(libCPCD_gt_CDFenixChampionDeathBuffExpire, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixChampionSetup_Init () {
    libCPCD_gt_CDFenixChampionSetup = TriggerCreate("libCPCD_gt_CDFenixChampionSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixChampionShellMade
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixChampionShellMade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_player;

    // Automatic Variable Declarations
    const int auto3E0CD21B_ae = libCPCD_gv_cDFenixChampionCount;
    const int auto3E0CD21B_ai = 1;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitCreatedUnit());

    // Conditions
    if (testConds) {
        if (!((libCPGL_gv_commander[lv_player].lv_commander == "Fenix"))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitCreatedUnit()) == libCPCD_gv_cDFenixChampionUnitReplaceType[1]) || (UnitGetType(EventUnitCreatedUnit()) == libCPCD_gv_cDFenixChampionUnitReplaceType[2]) || (UnitGetType(EventUnitCreatedUnit()) == libCPCD_gv_cDFenixChampionUnitReplaceType[3]) || (UnitGetType(EventUnitCreatedUnit()) == libCPCD_gv_cDFenixChampionUnitReplaceType[4]) || (UnitGetType(EventUnitCreatedUnit()) == libCPCD_gv_cDFenixChampionUnitReplaceType[5]) || (UnitGetType(EventUnitCreatedUnit()) == libCPCD_gv_cDFenixChampionUnitReplaceType[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventUnitCreatedAbil() == "WarpGateTrain") || (EventUnitCreatedAbil() == "StargateTrain"))) {
        Wait(5.0, c_timeGame);
    }

    if ((UnitIsAlive(EventUnitCreatedUnit()) == true)) {
        lv_i = 1;
        for ( ; ( (auto3E0CD21B_ai >= 0 && lv_i <= auto3E0CD21B_ae) || (auto3E0CD21B_ai < 0 && lv_i >= auto3E0CD21B_ae) ) ; lv_i += auto3E0CD21B_ai ) {
            if ((UnitGetType(EventUnitCreatedUnit()) == libCPCD_gv_cDFenixChampionUnitReplaceType[lv_i])) {
                UnitGroupAdd(libCPCD_gv_cDFenixChampionShells[lv_i][lv_player], EventUnitCreatedUnit());
                libCPCD_gf_CDFenixChampionUpdateNetwork(lv_i, UnitGetOwner(EventUnitCreatedUnit()));
                libCPCD_gf_CDFenixChampionUpdateShellCount(lv_i, UnitGetOwner(EventUnitCreatedUnit()));
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixChampionShellMade_Init () {
    libCPCD_gt_CDFenixChampionShellMade = TriggerCreate("libCPCD_gt_CDFenixChampionShellMade_Func");
    TriggerEnable(libCPCD_gt_CDFenixChampionShellMade, false);
    TriggerAddEventUnitCreated(libCPCD_gt_CDFenixChampionShellMade, null, "GatewayTrain", null);
    TriggerAddEventUnitCreated(libCPCD_gt_CDFenixChampionShellMade, null, "WarpGateTrain", null);
    TriggerAddEventUnitCreated(libCPCD_gt_CDFenixChampionShellMade, null, "StargateTrain", null);
    TriggerAddEventUnitCreated(libCPCD_gt_CDFenixChampionShellMade, null, "RoboticsFacilityTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixChampionConclaveRemade
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixChampionConclaveRemade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "FenixAltarOfPsiStorms"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gv_cDFenixChampionStructure[UnitGetOwner(EventUnitCreatedUnit())] = EventUnitCreatedUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixChampionConclaveRemade_Init () {
    libCPCD_gt_CDFenixChampionConclaveRemade = TriggerCreate("libCPCD_gt_CDFenixChampionConclaveRemade_Func");
    TriggerEnable(libCPCD_gt_CDFenixChampionConclaveRemade, false);
    TriggerAddEventUnitCreated(libCPCD_gt_CDFenixChampionConclaveRemade, null, "ProtossBuild", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixChampionAIResearched
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixChampionAIResearched_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    string autoA0C03B57_val;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    autoA0C03B57_val = libNtve_gf_TriggeringProgressUpgrade();
    if (autoA0C03B57_val == "FenixChampionKaldalisZealot") {
        libCPCD_gv_cDFenixChampionAvaliable[1][lv_player] = true;
        TriggerEnable(libCPCD_gt_CDFenixChampionTimers, true);
        TriggerEnable(libCPCD_gt_CDFenixChampionShellDies, true);
    }
    else if (autoA0C03B57_val == "FenixChampionTalisAdept") {
        libCPCD_gv_cDFenixChampionAvaliable[2][lv_player] = true;
        TriggerEnable(libCPCD_gt_CDFenixChampionTimers, true);
        TriggerEnable(libCPCD_gt_CDFenixChampionShellDies, true);
    }
    else if (autoA0C03B57_val == "FenixChampionMojoScout") {
        libCPCD_gv_cDFenixChampionAvaliable[3][lv_player] = true;
        TriggerEnable(libCPCD_gt_CDFenixChampionTimers, true);
        TriggerEnable(libCPCD_gt_CDFenixChampionShellDies, true);
    }
    else if (autoA0C03B57_val == "FenixChampionTaldarinImmortal") {
        libCPCD_gv_cDFenixChampionAvaliable[4][lv_player] = true;
        TriggerEnable(libCPCD_gt_CDFenixChampionTimers, true);
        TriggerEnable(libCPCD_gt_CDFenixChampionShellDies, true);
    }
    else if (autoA0C03B57_val == "FenixChampionWarbringerColossus") {
        libCPCD_gv_cDFenixChampionAvaliable[5][lv_player] = true;
        TriggerEnable(libCPCD_gt_CDFenixChampionTimers, true);
        TriggerEnable(libCPCD_gt_CDFenixChampionShellDies, true);
    }
    else if (autoA0C03B57_val == "FenixChampionClolarionCarrier") {
        libCPCD_gv_cDFenixChampionAvaliable[6][lv_player] = true;
        TriggerEnable(libCPCD_gt_CDFenixChampionTimers, true);
        TriggerEnable(libCPCD_gt_CDFenixChampionShellDies, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixChampionAIResearched_Init () {
    libCPCD_gt_CDFenixChampionAIResearched = TriggerCreate("libCPCD_gt_CDFenixChampionAIResearched_Func");
    TriggerEnable(libCPCD_gt_CDFenixChampionAIResearched, false);
    TriggerAddEventUnitResearchProgress(libCPCD_gt_CDFenixChampionAIResearched, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixChampionTimers
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixChampionTimers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_volunteer;
    int lv_i;
    fixed lv_foundUnitRange;
    unit lv_foundUnit;
    int lv_itPlayerFenix;

    // Automatic Variable Declarations
    playergroup autoA7E5D8C2_g;
    const int auto69654626_ae = libCPCD_gv_cDFenixChampionCount;
    const int auto69654626_ai = 1;
    const int auto97B616CD_ae = libCPCD_gv_cDFenixChampionCount;
    const int auto97B616CD_ai = 1;
    unitgroup autoD7AB06F0_g;
    int autoD7AB06F0_u;
    unit autoD7AB06F0_var;

    // Variable Initialization
    lv_foundUnitRange = 500.0;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA7E5D8C2_g = libCPGL_gf_AllCommandersinPlayerGroup("Fenix", libCPGL_gf_HumanPlayers());
    lv_itPlayerFenix = -1;
    while (true) {
        lv_itPlayerFenix = PlayerGroupNextPlayer(autoA7E5D8C2_g, lv_itPlayerFenix);
        if (lv_itPlayerFenix < 0) { break; }
        lv_i = 1;
        for ( ; ( (auto69654626_ai >= 0 && lv_i <= auto69654626_ae) || (auto69654626_ai < 0 && lv_i >= auto69654626_ae) ) ; lv_i += auto69654626_ai ) {
            libCPCD_gv_cDFenixChampionRespawnTimer[lv_i][lv_itPlayerFenix] -= 1.0;
        }
        if (((UnitIsAlive(libCPCD_gv_cDFenixChampionStructure[lv_itPlayerFenix]) == true) && (UnitGetType(libCPCD_gv_cDFenixChampionStructure[lv_itPlayerFenix]) == "FenixAltarOfPsiStorms"))) {
            lv_i = 1;
            for ( ; ( (auto97B616CD_ai >= 0 && lv_i <= auto97B616CD_ae) || (auto97B616CD_ai < 0 && lv_i >= auto97B616CD_ae) ) ; lv_i += auto97B616CD_ai ) {
                if (((libCPCD_gv_cDFenixChampionAvaliable[lv_i][lv_itPlayerFenix] == true) && (UnitIsAlive(libCPCD_gv_cDFenixChampionUnit[lv_i][lv_itPlayerFenix]) == false) && (libCPCD_gv_cDFenixChampionRespawnTimer[lv_i][lv_itPlayerFenix] <= 0.0))) {
                    lv_volunteer = null;
                    autoD7AB06F0_g = libCPCD_gv_cDFenixChampionShells[lv_i][lv_itPlayerFenix];
                    autoD7AB06F0_u = UnitGroupCount(autoD7AB06F0_g, c_unitCountAll);
                    for (;; autoD7AB06F0_u -= 1) {
                        autoD7AB06F0_var = UnitGroupUnitFromEnd(autoD7AB06F0_g, autoD7AB06F0_u);
                        if (autoD7AB06F0_var == null) { break; }
                        if ((UnitIsAlive(autoD7AB06F0_var) == true) && (DistanceBetweenPoints(UnitGetPosition(autoD7AB06F0_var), libCPCD_gv_cDFenixChampionDeathPoint[lv_i][lv_itPlayerFenix]) < lv_foundUnitRange)) {
                            lv_volunteer = autoD7AB06F0_var;
                            lv_foundUnitRange = DistanceBetweenPoints(UnitGetPosition(autoD7AB06F0_var), libCPCD_gv_cDFenixChampionDeathPoint[lv_i][lv_itPlayerFenix]);
                        }

                    }
                    if ((lv_volunteer != null)) {
                        UnitIssueOrder(lv_volunteer, Order(libCPCD_gv_cDFenixChampionMorphAbility[lv_i]), c_orderQueueAddToFront);
                    }

                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixChampionTimers_Init () {
    libCPCD_gt_CDFenixChampionTimers = TriggerCreate("libCPCD_gt_CDFenixChampionTimers_Func");
    TriggerEnable(libCPCD_gt_CDFenixChampionTimers, false);
    TriggerAddEventTimePeriodic(libCPCD_gt_CDFenixChampionTimers, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixChampionMorphed
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixChampionMorphed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_player;
    unit lv_newChampion;

    // Automatic Variable Declarations
    const int auto7511D82F_ae = libCPCD_gv_cDFenixChampionCount;
    const int auto7511D82F_ai = 1;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_newChampion = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (auto7511D82F_ai >= 0 && lv_i <= auto7511D82F_ae) || (auto7511D82F_ai < 0 && lv_i >= auto7511D82F_ae) ) ; lv_i += auto7511D82F_ai ) {
        if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == libCPCD_gv_cDFenixChampionUnitType[lv_i])) {
            PlayerCreateEffectPoint(UnitGetOwner(libCPCD_gv_cDFenixChampionStructure[lv_player]), "FenixChampionSwapLaunch", UnitGetPosition(libCPCD_gv_cDFenixChampionStructure[lv_player]));
            UnitCreateEffectUnit(lv_newChampion, "CopyTargetSelectionAndControlGroups", libCPCD_gv_cDFenixChampionUnit[lv_i][lv_player]);
            if ((UnitIsAlive(libCPCD_gv_cDFenixChampionUnit[lv_i][lv_player]) == false)) {
                UnitRemove(libCPCD_gv_cDFenixChampionUnit[lv_i][lv_player]);
            }

            libCPCD_gv_cDFenixChampionUnit[lv_i][lv_player] = lv_newChampion;
            UnitSetPropertyFixed(libCPCD_gv_cDFenixChampionUnit[lv_i][lv_player], c_unitPropKills, libCPCD_gv_cDFenixChampionKills[lv_i][lv_player]);
            libCPCD_gf_CDFenixChampionDeathBuffUpdate(lv_i, lv_player, 5);
            UnitGroupRemove(libCPCD_gv_cDFenixChampionShells[lv_i][lv_player], lv_newChampion);
            libCPCD_gf_CDFenixChampionUpdateNetwork(lv_i, UnitGetOwner(lv_newChampion));
            libCPCD_gf_CDFenixChampionUpdateShellCount(lv_i, UnitGetOwner(lv_newChampion));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixChampionMorphed_Init () {
    libCPCD_gt_CDFenixChampionMorphed = TriggerCreate("libCPCD_gt_CDFenixChampionMorphed_Func");
    TriggerEnable(libCPCD_gt_CDFenixChampionMorphed, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDFenixChampionMorphed, c_playerAny, "FenixChampionSwapImpactUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixChampionDeath
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixChampionDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deadChampion;
    int lv_player;

    // Automatic Variable Declarations
    string auto216D59C2_val;

    // Variable Initialization
    lv_deadChampion = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = UnitGetOwner(lv_deadChampion);

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerCreateEffectPoint(UnitGetOwner(lv_deadChampion), "FenixChampionSwapLaunch", UnitGetPosition(lv_deadChampion));
    auto216D59C2_val = UnitGetType(lv_deadChampion);
    if (auto216D59C2_val == libCPCD_gv_cDFenixChampionUnitType[1]) {
        libCPCD_gv_cDFenixChampionRespawnTimer[1][lv_player] = 1.0;
        libCPCD_gv_cDFenixChampionKills[1][lv_player] = libNtve_gf_UnitGetPropertyKills(lv_deadChampion, c_unitPropCurrent);
        libCPCD_gv_cDFenixChampionDeathPoint[1][lv_player] = UnitGetPosition(lv_deadChampion);
    }
    else if (auto216D59C2_val == libCPCD_gv_cDFenixChampionUnitType[2]) {
        libCPCD_gv_cDFenixChampionRespawnTimer[2][lv_player] = 1.0;
        libCPCD_gv_cDFenixChampionKills[2][lv_player] = libNtve_gf_UnitGetPropertyKills(lv_deadChampion, c_unitPropCurrent);
        libCPCD_gv_cDFenixChampionDeathPoint[2][lv_player] = UnitGetPosition(lv_deadChampion);
    }
    else if (auto216D59C2_val == libCPCD_gv_cDFenixChampionUnitType[3]) {
        libCPCD_gv_cDFenixChampionRespawnTimer[3][lv_player] = 1.0;
        libCPCD_gv_cDFenixChampionKills[3][lv_player] = libNtve_gf_UnitGetPropertyKills(lv_deadChampion, c_unitPropCurrent);
        libCPCD_gv_cDFenixChampionDeathPoint[3][lv_player] = UnitGetPosition(lv_deadChampion);
    }
    else if (auto216D59C2_val == libCPCD_gv_cDFenixChampionUnitType[4]) {
        libCPCD_gv_cDFenixChampionRespawnTimer[4][lv_player] = 1.0;
        libCPCD_gv_cDFenixChampionKills[4][lv_player] = libNtve_gf_UnitGetPropertyKills(lv_deadChampion, c_unitPropCurrent);
        libCPCD_gv_cDFenixChampionDeathPoint[4][lv_player] = UnitGetPosition(lv_deadChampion);
    }
    else if (auto216D59C2_val == libCPCD_gv_cDFenixChampionUnitType[5]) {
        libCPCD_gv_cDFenixChampionRespawnTimer[5][lv_player] = 1.0;
        libCPCD_gv_cDFenixChampionKills[5][lv_player] = libNtve_gf_UnitGetPropertyKills(lv_deadChampion, c_unitPropCurrent);
        libCPCD_gv_cDFenixChampionDeathPoint[5][lv_player] = UnitGetPosition(lv_deadChampion);
    }
    else if (auto216D59C2_val == libCPCD_gv_cDFenixChampionUnitType[6]) {
        libCPCD_gv_cDFenixChampionRespawnTimer[6][lv_player] = 1.0;
        libCPCD_gv_cDFenixChampionKills[6][lv_player] = libNtve_gf_UnitGetPropertyKills(lv_deadChampion, c_unitPropCurrent);
        libCPCD_gv_cDFenixChampionDeathPoint[6][lv_player] = UnitGetPosition(lv_deadChampion);
    }
    else {
    }
    if ((UnitIsAlive(libCPCD_gv_cDFenixChampionStructure[lv_player]) == true)) {
        PlayerCreateEffectPoint(UnitGetOwner(libCPCD_gv_cDFenixChampionStructure[lv_player]), "FenixChampionSwapImpact", UnitGetPosition(libCPCD_gv_cDFenixChampionStructure[lv_player]));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixChampionDeath_Init () {
    libCPCD_gt_CDFenixChampionDeath = TriggerCreate("libCPCD_gt_CDFenixChampionDeath_Func");
    TriggerEnable(libCPCD_gt_CDFenixChampionDeath, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDFenixChampionDeath, c_playerAny, "FenixAIChampionDeathEvent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixChampionShellDies
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixChampionShellDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_avengingprotocolindex;
    int lv_avengingprotocolstacks;

    // Automatic Variable Declarations
    string auto58F84651_val;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!(((libCPGL_gv_commander[lv_player].lv_commander == "Fenix") && ((UnitGetType(EventUnit()) == libCPCD_gv_cDFenixChampionUnitReplaceType[1]) || (UnitGetType(EventUnit()) == libCPCD_gv_cDFenixChampionUnitReplaceType[2]) || (UnitGetType(EventUnit()) == libCPCD_gv_cDFenixChampionUnitReplaceType[3]) || (UnitGetType(EventUnit()) == libCPCD_gv_cDFenixChampionUnitReplaceType[4]) || (UnitGetType(EventUnit()) == libCPCD_gv_cDFenixChampionUnitReplaceType[5]) || (UnitGetType(EventUnit()) == libCPCD_gv_cDFenixChampionUnitReplaceType[6]))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto58F84651_val = UnitGetType(EventUnit());
    if (auto58F84651_val == libCPCD_gv_cDFenixChampionUnitReplaceType[1]) {
        UnitGroupRemove(libCPCD_gv_cDFenixChampionShells[1][lv_player], EventUnit());
        libCPCD_gf_CDFenixChampionUpdateNetwork(1, lv_player);
        libCPCD_gf_CDFenixChampionUpdateShellCount(1, lv_player);
        lv_avengingprotocolindex = 1;
        lv_avengingprotocolstacks = 3;
    }
    else if (auto58F84651_val == libCPCD_gv_cDFenixChampionUnitReplaceType[2]) {
        UnitGroupRemove(libCPCD_gv_cDFenixChampionShells[2][lv_player], EventUnit());
        libCPCD_gf_CDFenixChampionUpdateNetwork(2, lv_player);
        libCPCD_gf_CDFenixChampionUpdateShellCount(2, lv_player);
        lv_avengingprotocolindex = 2;
        lv_avengingprotocolstacks = 2;
    }
    else if (auto58F84651_val == libCPCD_gv_cDFenixChampionUnitReplaceType[3]) {
        UnitGroupRemove(libCPCD_gv_cDFenixChampionShells[3][lv_player], EventUnit());
        libCPCD_gf_CDFenixChampionUpdateNetwork(3, lv_player);
        libCPCD_gf_CDFenixChampionUpdateShellCount(3, lv_player);
        lv_avengingprotocolindex = 3;
        lv_avengingprotocolstacks = 3;
    }
    else if (auto58F84651_val == libCPCD_gv_cDFenixChampionUnitReplaceType[4]) {
        UnitGroupRemove(libCPCD_gv_cDFenixChampionShells[4][lv_player], EventUnit());
        libCPCD_gf_CDFenixChampionUpdateNetwork(4, lv_player);
        libCPCD_gf_CDFenixChampionUpdateShellCount(4, lv_player);
        lv_avengingprotocolindex = 4;
        lv_avengingprotocolstacks = 4;
    }
    else if (auto58F84651_val == libCPCD_gv_cDFenixChampionUnitReplaceType[5]) {
        UnitGroupRemove(libCPCD_gv_cDFenixChampionShells[5][lv_player], EventUnit());
        libCPCD_gf_CDFenixChampionUpdateNetwork(5, lv_player);
        libCPCD_gf_CDFenixChampionUpdateShellCount(5, lv_player);
        lv_avengingprotocolindex = 5;
        lv_avengingprotocolstacks = 6;
    }
    else if (auto58F84651_val == libCPCD_gv_cDFenixChampionUnitReplaceType[6]) {
        UnitGroupRemove(libCPCD_gv_cDFenixChampionShells[6][lv_player], EventUnit());
        libCPCD_gf_CDFenixChampionUpdateNetwork(6, lv_player);
        libCPCD_gf_CDFenixChampionUpdateShellCount(6, lv_player);
        lv_avengingprotocolindex = 6;
        lv_avengingprotocolstacks = 6;
    }
    else {
    }
    if ((lv_avengingprotocolindex > 0) && (lv_avengingprotocolstacks > 0) && (UnitHasBehavior2(EventUnit(), "FenixSuppressAvengingProtocol") == false)) {
        libCPCD_gf_CDFenixChampionDeathBuffUpdate(lv_avengingprotocolindex, lv_player, lv_avengingprotocolstacks);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixChampionShellDies_Init () {
    libCPCD_gt_CDFenixChampionShellDies = TriggerCreate("libCPCD_gt_CDFenixChampionShellDies_Func");
    TriggerEnable(libCPCD_gt_CDFenixChampionShellDies, false);
    TriggerAddEventUnitDied(libCPCD_gt_CDFenixChampionShellDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixChampionProbius
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixChampionProbius_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitCreatedUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "Probe"))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionKaldalisZealot", c_techCountCompleteOnly) >= 1))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionClolarionCarrier", c_techCountCompleteOnly) >= 1))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionMojoScout", c_techCountCompleteOnly) >= 1))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionTalisAdept", c_techCountCompleteOnly) >= 1))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionTaldarinImmortal", c_techCountCompleteOnly) >= 1))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionWarbringerColossus", c_techCountCompleteOnly) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerCreateEffectPoint(UnitGetOwner(libCPCD_gv_cDFenixChampionStructure[lv_player]), "FenixChampionSwapLaunch", UnitGetPosition(libCPCD_gv_cDFenixChampionStructure[UnitGetOwner(EventUnitCreatedUnit())]));
    PlayerCreateEffectPoint(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionSwapImpactSet", UnitGetPosition(EventUnitCreatedUnit()));
    UnitBehaviorAdd(EventUnitCreatedUnit(), "FenixProbiusProbe", EventUnitCreatedUnit(), 1);
    UnitBehaviorAdd(EventUnitCreatedUnit(), "FenixChampionMorphStun", EventUnitCreatedUnit(), 1);
    libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), "Create FenixProbiusProbe");
    UnitWeaponAdd(EventUnitCreatedUnit(), "VoidRayPurifier", null);
    UnitWeaponRemove(EventUnitCreatedUnit(), "ParticleBeam");
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixChampionProbius_Init () {
    libCPCD_gt_CDFenixChampionProbius = TriggerCreate("libCPCD_gt_CDFenixChampionProbius_Func");
    TriggerEnable(libCPCD_gt_CDFenixChampionProbius, false);
    TriggerAddEventUnitCreated(libCPCD_gt_CDFenixChampionProbius, null, "NexusTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixChampionDeathBuffExpire
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixChampionDeathBuffExpire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    string auto0E377777_val;

    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libCPGL_gv_commander[lv_player].lv_commander == "Fenix"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0E377777_val = UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    if (auto0E377777_val == libCPCD_gv_cDFenixChampionUnitType[1]) {
        libCPCD_gv_cDFenixChampionDeathBuffStacks[1] = 0;
    }
    else if (auto0E377777_val == libCPCD_gv_cDFenixChampionUnitType[2]) {
        libCPCD_gv_cDFenixChampionDeathBuffStacks[2] = 0;
    }
    else if (auto0E377777_val == libCPCD_gv_cDFenixChampionUnitType[3]) {
        libCPCD_gv_cDFenixChampionDeathBuffStacks[3] = 0;
    }
    else if (auto0E377777_val == libCPCD_gv_cDFenixChampionUnitType[4]) {
        libCPCD_gv_cDFenixChampionDeathBuffStacks[4] = 0;
    }
    else if (auto0E377777_val == libCPCD_gv_cDFenixChampionUnitType[5]) {
        libCPCD_gv_cDFenixChampionDeathBuffStacks[5] = 0;
    }
    else if (auto0E377777_val == libCPCD_gv_cDFenixChampionUnitType[6]) {
        libCPCD_gv_cDFenixChampionDeathBuffStacks[6] = 0;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixChampionDeathBuffExpire_Init () {
    libCPCD_gt_CDFenixChampionDeathBuffExpire = TriggerCreate("libCPCD_gt_CDFenixChampionDeathBuffExpire_Func");
    TriggerEnable(libCPCD_gt_CDFenixChampionDeathBuffExpire, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDFenixChampionDeathBuffExpire, c_playerAny, "FenixChampionAvengingProtocolExpireDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixChampionConclaveTrainStart
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixChampionConclaveTrainStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "FenixAltarOfPsiStorms"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_CPCD_4F593E4E", "UpgradeName", StringExternal((libNtve_gf_TriggeringProgressUpgrade())));
    ActorSendAsText(libNtve_gf_MainActorofUnit(EventUnit()), TextExpressionAssemble("Param/Expression/lib_CPCD_4F593E4E"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixChampionConclaveTrainStart_Init () {
    libCPCD_gt_CDFenixChampionConclaveTrainStart = TriggerCreate("libCPCD_gt_CDFenixChampionConclaveTrainStart_Func");
    TriggerEnable(libCPCD_gt_CDFenixChampionConclaveTrainStart, false);
    TriggerAddEventUnitResearchProgress(libCPCD_gt_CDFenixChampionConclaveTrainStart, null, c_unitProgressStageStart);
    TriggerAddEventUnitResearchProgress(libCPCD_gt_CDFenixChampionConclaveTrainStart, null, c_unitProgressStageResume);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixChampionConclaveTrainStop
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixChampionConclaveTrainStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "FenixAltarOfPsiStorms"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_CPCD_464A7ACD", "UpgradeName", StringExternal((libNtve_gf_TriggeringProgressUpgrade())));
    ActorSendAsText(libNtve_gf_MainActorofUnit(EventUnit()), TextExpressionAssemble("Param/Expression/lib_CPCD_464A7ACD"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixChampionConclaveTrainStop_Init () {
    libCPCD_gt_CDFenixChampionConclaveTrainStop = TriggerCreate("libCPCD_gt_CDFenixChampionConclaveTrainStop_Func");
    TriggerEnable(libCPCD_gt_CDFenixChampionConclaveTrainStop, false);
    TriggerAddEventUnitResearchProgress(libCPCD_gt_CDFenixChampionConclaveTrainStop, null, c_unitProgressStagePause);
    TriggerAddEventUnitResearchProgress(libCPCD_gt_CDFenixChampionConclaveTrainStop, null, c_unitProgressStageCancel);
    TriggerAddEventUnitResearchProgress(libCPCD_gt_CDFenixChampionConclaveTrainStop, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixChampionConclaveAugmentSound
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixChampionConclaveAugmentSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(EventUnitTargetUnit())) > 8.0)) {
        libNtve_gf_SendActorMessageToUnit(libCPCD_gv_cDFenixChampionUnit[3][EventPlayer()], "Signal TargetLongRange");
    }
    else {
        libNtve_gf_SendActorMessageToUnit(libCPCD_gv_cDFenixChampionUnit[3][EventPlayer()], "Signal TargetShortRange");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixChampionConclaveAugmentSound_Init () {
    libCPCD_gt_CDFenixChampionConclaveAugmentSound = TriggerCreate("libCPCD_gt_CDFenixChampionConclaveAugmentSound_Func");
    TriggerEnable(libCPCD_gt_CDFenixChampionConclaveAugmentSound, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDFenixChampionConclaveAugmentSound, null, AbilityCommand("FenixMojoMissiles", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixTaldarinStore
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixTaldarinStore_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damageDone;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventUnitDamageSourcePlayer(), "FenixImmortalDetonationShot", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), EventUnitDamageSourcePlayer(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damageDone = EventUnitDamageAttempted();
    UnitSetCustomValue(EventUnit(), 62, (UnitGetCustomValue(EventUnit(), 62) + lv_damageDone));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixTaldarinStore_Init () {
    libCPCD_gt_CDFenixTaldarinStore = TriggerCreate("libCPCD_gt_CDFenixTaldarinStore_Func");
    TriggerEnable(libCPCD_gt_CDFenixTaldarinStore, false);
    TriggerAddEventUnitDamaged(libCPCD_gt_CDFenixTaldarinStore, null, c_unitDamageTypeAny, c_unitDamageEither, "FenixTaldarinImmortalPhaseDisruptors");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixTaldarinRelease
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixTaldarinRelease_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_amount;
    fixed lv_fraction;
    int lv_fenixPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "FenixImmortalDetonation") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_fenixPlayer = UnitBehaviorEffectPlayer(EventUnit(), "FenixImmortalDetonation", c_effectPlayerCaster, 0);
    lv_fraction = (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "FenixTaldarinImmortalDetonationDummyFraction", "Amount", lv_fenixPlayer)) / 100);
    lv_amount = (UnitGetCustomValue(EventUnit(), 62) * lv_fraction);
    CatalogFieldValueSet(c_gameCatalogEffect, "FenixImmortalDetonationDamage", "Amount", lv_fenixPlayer, FixedToString(lv_amount, c_fixedPrecisionAny));
    if ((UnitIsAlive(libCPCD_gv_cDFenixChampionUnit[4][lv_fenixPlayer]) == true)) {
        UnitCreateEffectPoint(libCPCD_gv_cDFenixChampionUnit[4][lv_fenixPlayer], "FenixImmortalDetonationSearchArea", UnitGetPosition(EventUnit()));
    }
    else {
        PlayerCreateEffectPoint(lv_fenixPlayer, "FenixImmortalDetonationSearchArea", UnitGetPosition(EventUnit()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixTaldarinRelease_Init () {
    libCPCD_gt_CDFenixTaldarinRelease = TriggerCreate("libCPCD_gt_CDFenixTaldarinRelease_Func");
    TriggerEnable(libCPCD_gt_CDFenixTaldarinRelease, false);
    TriggerAddEventUnitDied(libCPCD_gt_CDFenixTaldarinRelease, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDFenixSentryShield
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDFenixSentryShield_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitBehaviorEffectPlayer(EventUnit(), EventUnitBehavior(), c_effectPlayerCaster, 0), "FenixSentryNullShieldReflect", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) - (EventUnitDamageAbsorbed() / 2.0)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDFenixSentryShield_Init () {
    libCPCD_gt_CDFenixSentryShield = TriggerCreate("libCPCD_gt_CDFenixSentryShield_Func");
    TriggerEnable(libCPCD_gt_CDFenixSentryShield, false);
    TriggerAddEventUnitDamageAbsorbed(libCPCD_gt_CDFenixSentryShield, null, "SentryFenixNullShield");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AchievementFenixCarrierAmount
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_AchievementFenixCarrierAmount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitCreatedUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "Carrier"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gv_achievementFenixCarrierAmount[lv_player] += 1;
    if ((libCPCD_gv_achievementFenixCarrierAmount[lv_player] == 4) && (libCPCD_gv_achievementFenixCarrierResearched[lv_player] == true) && (GameGetMissionTime() <= 600.0)) {
        AchievementAward(lv_player, "CommanderFenixCarrier");
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_AchievementFenixCarrierAmount_Init () {
    libCPCD_gt_AchievementFenixCarrierAmount = TriggerCreate("libCPCD_gt_AchievementFenixCarrierAmount_Func");
    TriggerEnable(libCPCD_gt_AchievementFenixCarrierAmount, false);
    TriggerAddEventUnitCreated(libCPCD_gt_AchievementFenixCarrierAmount, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AchievementFenixCarrierResearched
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_AchievementFenixCarrierResearched_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUpgrade() == "FenixChampionClolarionCarrier"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gv_achievementFenixCarrierResearched[EventPlayer()] = true;
    if ((libCPCD_gv_achievementFenixCarrierAmount[EventPlayer()] == 4) && (libCPCD_gv_achievementFenixCarrierResearched[EventPlayer()] == true) && (GameGetMissionTime() <= 600.0)) {
        AchievementAward(EventPlayer(), "CommanderFenixCarrier");
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_AchievementFenixCarrierResearched_Init () {
    libCPCD_gt_AchievementFenixCarrierResearched = TriggerCreate("libCPCD_gt_AchievementFenixCarrierResearched_Func");
    TriggerEnable(libCPCD_gt_AchievementFenixCarrierResearched, false);
    TriggerAddEventUnitResearchProgress(libCPCD_gt_AchievementFenixCarrierResearched, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaTriggersInit
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaTriggersInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCPCD_gt_CDDehakaEssenceDrop, true);
    TriggerEnable(libCPCD_gt_CDDehakaEssencePickup, true);
    TriggerEnable(libCPCD_gt_CDDehakaEssenceManualUpdate, true);
    TriggerEnable(libCPCD_gt_CDDehakaAutocastSettingsOn, true);
    TriggerEnable(libCPCD_gt_CDDehakaAutocastSettingsOff, true);
    TriggerEnable(libCPCD_gt_CDDehakaAutocastBossSummonStateAdjust, true);
    TriggerEnable(libCPCD_gt_CDDehakaLevelUpStage2, true);
    TriggerEnable(libCPCD_gt_CDDehakaLevelUpStage3, true);
    TriggerEnable(libCPCD_gt_CDDehakaLevelUpStunOff, true);
    TriggerEnable(libCPCD_gt_CDDehakaUnitCostRefund, true);
    TriggerEnable(libCPCD_gt_CDDehakaDenReviveFootprintOn, true);
    TriggerEnable(libCPCD_gt_CDDehakaDenReviveFootprintOff, true);
    TriggerEnable(libCPCD_gt_CDDehakaDenReviveEatTextTagDead, true);
    TriggerEnable(libCPCD_gt_CDDehakaDenReviveEatTextTagRevived, true);
    TriggerEnable(libCPCD_gt_CDDehakaDenReviveEatUsed, true);
    TriggerEnable(libCPCD_gt_CDDehakaBossFacingSetting, true);
    TriggerEnable(libCPCD_gt_CDDehakaMutaliskReviveCooldownOn, true);
    TriggerEnable(libCPCD_gt_CDDehakaBeamStart, true);
    TriggerEnable(libCPCD_gt_CDDehakaBeamStop, true);
    TriggerEnable(libCPCD_gt_CDDehakaConsumeExecuted, true);
    TriggerEnable(libCPCD_gt_CDDehakaConsumeDetachFailSafe, true);
    TriggerEnable(libCPCD_gt_CDDehakaConsumeLaunchFailSafe, true);
    TriggerEnable(libCPCD_gt_CDDehakaConsumeEffectHeroic, true);
    TriggerEnable(libCPCD_gt_CDDehakaConsumeLearnLevel2, true);
    TriggerEnable(libCPCD_gt_CDDehakaConsumeLearnLevel3, true);
    TriggerEnable(libCPCD_gt_CDDehakaLearn, true);
    TriggerEnable(libCPCD_gt_CDDehakaPackLeaderGlevigBuilt, true);
    TriggerEnable(libCPCD_gt_CDDehakaPackLeaderMurvarBuilt, true);
    TriggerEnable(libCPCD_gt_CDDehakaPackLeaderDakrunBuilt, true);
    TriggerEnable(libCPCD_gt_CDDehakaReviveGasWorkerBehaviorAdd, true);
    TriggerEnable(libCPCD_gt_CDDehakaReviveGasWorkerBehaviorRemove, true);
    TriggerEnable(libCPCD_gt_CDDehakaReviveEatButtonClicked, true);
    TriggerEnable(libCPCD_gt_CDDehakaReviveTimerAdjustments, true);
    TriggerEnable(libCPCD_gt_CDDehakaGlevigTimerAdjustments, true);
    TriggerEnable(libCPCD_gt_CDDehakaConsumeTimeStopImmunity, true);
    TriggerEnable(libCPCD_gt_CDDehakaGeneThornsOn, true);
    TriggerEnable(libCPCD_gt_CDDehakaLearnOrder, true);
    TriggerEnable(libCPCD_gt_CDDehakaPrestigeClone, true);
    TriggerEnable(libCPCD_gt_CDDehakaPrestigeCloneRevive, true);
    TriggerEnable(libCPCD_gt_BanelingScourgeEssenceDrop, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaTriggersInit_Init () {
    libCPCD_gt_CDDehakaTriggersInit = TriggerCreate("libCPCD_gt_CDDehakaTriggersInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaPrestigeCloneRevive
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaPrestigeCloneRevive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dehakaclone;
    int lv_dehakaplayer;
    order lv_order;
    unit lv_reviver;
    point lv_rallyPoint;
    unit lv_rallyUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dehakaclone = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_dehakaplayer = UnitGetOwner(lv_dehakaclone);
    lv_reviver = libCPGL_gv_commander[lv_dehakaplayer].lv_heroBeacon;
    lv_rallyPoint = UnitRallyPointTargetPoint(lv_reviver, 1, 1);
    lv_rallyUnit = UnitRallyPointTargetUnit(lv_reviver, 1, 1);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(lv_rallyUnit) == true)) {
        lv_order = OrderTargetingUnit(AbilityCommand("move", 0), lv_rallyUnit);
    }
    else {
        lv_order = OrderTargetingPoint(AbilityCommand("move", 0), lv_rallyPoint);
    }
    OrderSetFlag(lv_order, c_cmdSmartRally, true);
    UnitIssueOrder(lv_dehakaclone, lv_order, c_orderQueueReplace);
    libCPCD_gf_CDDehakaLevelUp(lv_dehakaplayer, lv_dehakaclone);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaPrestigeCloneRevive_Init () {
    libCPCD_gt_CDDehakaPrestigeCloneRevive = TriggerCreate("libCPCD_gt_CDDehakaPrestigeCloneRevive_Func");
    TriggerEnable(libCPCD_gt_CDDehakaPrestigeCloneRevive, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDDehakaPrestigeCloneRevive, c_playerAny, "CommanderPrestigeDehakaCloneRevive");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaPrestigeClone
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaPrestigeClone_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dehakaclone;
    int lv_dehakaplayer;
    order lv_order;
    unit lv_reviver;
    point lv_rallyPoint;
    unit lv_rallyUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dehakaclone = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_dehakaplayer = UnitGetOwner(lv_dehakaclone);
    lv_reviver = libCPGL_gv_commander[lv_dehakaplayer].lv_heroBeacon;
    lv_rallyPoint = UnitRallyPointTargetPoint(lv_reviver, 1, 1);
    lv_rallyUnit = UnitRallyPointTargetUnit(lv_reviver, 1, 1);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(lv_rallyUnit) == true)) {
        lv_order = OrderTargetingUnit(AbilityCommand("move", 0), lv_rallyUnit);
    }
    else {
        lv_order = OrderTargetingPoint(AbilityCommand("move", 0), lv_rallyPoint);
    }
    OrderSetFlag(lv_order, c_cmdSmartRally, true);
    UnitIssueOrder(lv_dehakaclone, lv_order, c_orderQueueReplace);
    UnitBehaviorAdd(lv_dehakaclone, libCPCD_gv_cDDehakaVeterencyBehavior[lv_dehakaplayer], lv_dehakaclone, 1);
    if ((TechTreeUpgradeCount(lv_dehakaplayer, "MasteryDehakaAttackSpeed", c_techCountCompleteOnly) >= 1)) {
        UnitBehaviorAdd(lv_dehakaclone, "DehakaAttEssenceMastery", lv_dehakaclone, 1);
        UnitBehaviorRemove(lv_dehakaclone, "DehakaAttEssence", 1);
    }

    libCPCD_gf_CDDehakaLevelUp(lv_dehakaplayer, lv_dehakaclone);
    libCOUI_gf_SetHeroPanelUnitOverride(2, lv_dehakaclone, lv_dehakaplayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaPrestigeClone_Init () {
    libCPCD_gt_CDDehakaPrestigeClone = TriggerCreate("libCPCD_gt_CDDehakaPrestigeClone_Func");
    TriggerEnable(libCPCD_gt_CDDehakaPrestigeClone, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDDehakaPrestigeClone, c_playerAny, "CommanderPrestigeDehakaCloneRegisterTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaUnitCostRefund
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaUnitCostRefund_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), c_playerPropMinerals, c_playerPropOperAdd, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "CostResource[" + IntToString(0) + "]", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), c_playerPropVespene, c_playerPropOperAdd, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "CostResource[" + IntToString(1) + "]", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaUnitCostRefund_Init () {
    libCPCD_gt_CDDehakaUnitCostRefund = TriggerCreate("libCPCD_gt_CDDehakaUnitCostRefund_Func");
    TriggerEnable(libCPCD_gt_CDDehakaUnitCostRefund, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDDehakaUnitCostRefund, c_playerAny, "DehakaTrainLM");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaGeneThornsOn
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaGeneThornsOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_u, EventUnitBehavior(), lv_u, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaGeneThornsOn_Init () {
    libCPCD_gt_CDDehakaGeneThornsOn = TriggerCreate("libCPCD_gt_CDDehakaGeneThornsOn_Func");
    TriggerEnable(libCPCD_gt_CDDehakaGeneThornsOn, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDDehakaGeneThornsOn, null, "DehakaGeneThorns", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaLearnOrder
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaLearnOrder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((AbilityCommandGetAbility(OrderGetAbilityCommand(EventUnitOrder())) == "DehakaLearn"))) {
            return false;
        }

        if (!((OrderGetFlag(EventUnitOrder(), c_cmdUser) == true))) {
            return false;
        }

        if (!((OrderGetFlag(EventUnitOrder(), c_cmdQueued) == true))) {
            return false;
        }

        if (!((libCPGL_gv_commander[UnitGetOwner(EventUnit())].lv_commander == "Dehaka"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "CancelDehakaLearn", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaLearnOrder_Init () {
    libCPCD_gt_CDDehakaLearnOrder = TriggerCreate("libCPCD_gt_CDDehakaLearnOrder_Func");
    TriggerEnable(libCPCD_gt_CDDehakaLearnOrder, false);
    TriggerAddEventUnitOrder(libCPCD_gt_CDDehakaLearnOrder, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaLevelUpStunOff
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaLevelUpStunOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gf_HeroCanSpendSkillPoint(lv_u, "DehakaLearn") == true)) {
        ActorSend(libNtve_gf_MainActorofUnit(lv_u), "HaloStart");
    }
    else {
        ActorSend(libNtve_gf_MainActorofUnit(lv_u), "HaloStop");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaLevelUpStunOff_Init () {
    libCPCD_gt_CDDehakaLevelUpStunOff = TriggerCreate("libCPCD_gt_CDDehakaLevelUpStunOff_Func");
    TriggerEnable(libCPCD_gt_CDDehakaLevelUpStunOff, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDDehakaLevelUpStunOff, null, "DehakaModelSwapStun", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaLevelUpStage3
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaLevelUpStage3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto04203808_val;

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "DehakaCoop") || (UnitGetType(EventUnit()) == "DehakaCoopClone")))) {
            return false;
        }

        if (!((UnitXPGetCurrentLevel(EventUnit(), null) >= 10))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "DehakaCoopAirTargetable") == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto04203808_val = UnitGetType(EventUnit());
    if (auto04203808_val == "DehakaCoop") {
        TechTreeUpgradeAddLevel(EventPlayer(), "DehakaCoopStage3", 1);
    }
    else if (auto04203808_val == "DehakaCoopClone") {
        TechTreeUpgradeAddLevel(EventPlayer(), "DehakaCoopCloneStage3", 1);
    }
    else {
    }
    UnitBehaviorAdd(EventUnit(), "DehakaCoopAirTargetable", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaLevelUpStage3_Init () {
    libCPCD_gt_CDDehakaLevelUpStage3 = TriggerCreate("libCPCD_gt_CDDehakaLevelUpStage3_Func");
    TriggerEnable(libCPCD_gt_CDDehakaLevelUpStage3, false);
    TriggerAddEventUnitGainLevel(libCPCD_gt_CDDehakaLevelUpStage3, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaLevelUpStage2
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaLevelUpStage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto2F5F56B8_val;

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "DehakaCoop") || (UnitGetType(EventUnit()) == "DehakaCoopClone")))) {
            return false;
        }

        if (!((UnitXPGetCurrentLevel(EventUnit(), null) >= 6))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "DehakaMassive") == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2F5F56B8_val = UnitGetType(EventUnit());
    if (auto2F5F56B8_val == "DehakaCoop") {
        TechTreeUpgradeAddLevel(EventPlayer(), "DehakaCoopStage2", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "DehakaColossusLegs", 1);
    }
    else if (auto2F5F56B8_val == "DehakaCoopClone") {
        TechTreeUpgradeAddLevel(EventPlayer(), "DehakaCoopCloneStage2", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "DehakaCloneColossusLegs", 1);
    }
    else {
    }
    UnitBehaviorAdd(EventUnit(), "DehakaModelSwapStun", EventUnit(), 1);
    UnitBehaviorAdd(EventUnit(), "DehakaMassive", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaLevelUpStage2_Init () {
    libCPCD_gt_CDDehakaLevelUpStage2 = TriggerCreate("libCPCD_gt_CDDehakaLevelUpStage2_Func");
    TriggerEnable(libCPCD_gt_CDDehakaLevelUpStage2, false);
    TriggerAddEventUnitGainLevel(libCPCD_gt_CDDehakaLevelUpStage2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaEssenceManualUpdate
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaEssenceManualUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CDDehakaEssenceSetStack(EventPlayerEffectUsedUnit(c_effectUnitCaster), 25);
    libCPCD_gf_CDDehakaEssenceScale(EventPlayerEffectUsedUnit(c_effectUnitCaster), true);
    libCPCD_gf_CDDehakaEssenceMerge(EventPlayerEffectUsedUnit(c_effectUnitCaster), 25);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaEssenceManualUpdate_Init () {
    libCPCD_gt_CDDehakaEssenceManualUpdate = TriggerCreate("libCPCD_gt_CDDehakaEssenceManualUpdate_Func");
    TriggerEnable(libCPCD_gt_CDDehakaEssenceManualUpdate, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDDehakaEssenceManualUpdate, c_playerAny, "EssenceCreatedDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaEssencePickup
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaEssencePickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_val;
    fixed lv_period;
    fixed lv_addition;
    int lv_essenceCountStored;
    int lv_player;
    fixed lv_heal;
    fixed lv_extraLife;
    unit lv_collectorUnit;
    string lv_collectorUnitType;
    int lv_doublehealmastery;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_essenceCountStored = FixedToInt(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 63));
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    lv_heal = (lv_essenceCountStored*libNtve_gf_CatalogReferenceGetAsReal("Effect,DehakaHealAmountPerEssenceDummy,Amount", lv_player));
    lv_extraLife = (lv_essenceCountStored*libNtve_gf_CatalogReferenceGetAsReal("Effect,DehakaMaxLifeAmountPerEssenceDummy,Amount", lv_player));
    lv_collectorUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_collectorUnitType = UnitGetType(lv_collectorUnit);
    lv_doublehealmastery = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryDehakaDoubleHealEssenceDisplayDummy", "Amount", lv_player);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_collectorUnit, "DehakaTopBarSummonTimedLife") == true)) {
        lv_collectorUnit = libCPGL_gv_commander[lv_player].lv_heroUnit;
        lv_collectorUnitType = UnitGetType(lv_collectorUnit);
    }

    libCPCD_gv_cDDehakaTotalEssence[lv_player] += lv_essenceCountStored;
    UnitSetCustomValue(lv_collectorUnit, libCPCD_gv_cDDehakaEssenceIndex, (UnitGetCustomValue(lv_collectorUnit, libCPCD_gv_cDDehakaEssenceIndex) + lv_essenceCountStored));
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "EssenceTravelling", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "EssencePickupFullLM", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    CatalogFieldValueSet(c_gameCatalogEffect, "EssenceDehakaDummyStacks", "Amount", EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), FixedToString(libCPCD_gv_cDDehakaTotalEssence[lv_player], c_fixedPrecisionAny));
    UnitSetAttributePoint(lv_collectorUnit, libCPCD_gv_cDDehakaEssenceAttribute, true, RoundI(UnitGetCustomValue(lv_collectorUnit, libCPCD_gv_cDDehakaEssenceIndex)));
    UnitXPAddXP(lv_collectorUnit, libCPCD_gv_cDDehakaVeterencyBehavior[lv_player], lv_essenceCountStored);
    libCPCD_gf_CDDehakaLevelUp(lv_player, lv_collectorUnit);
    if ((RandomInt(1, 100) <= lv_doublehealmastery)) {
        UnitSetPropertyFixed(lv_collectorUnit, c_unitPropLife, (UnitGetPropertyFixed(lv_collectorUnit, c_unitPropLife, c_unitPropCurrent) + (lv_heal + lv_heal)));
    }
    else {
        UnitSetPropertyFixed(lv_collectorUnit, c_unitPropLife, (UnitGetPropertyFixed(lv_collectorUnit, c_unitPropLife, c_unitPropCurrent) + lv_heal));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaEssencePickup_Init () {
    libCPCD_gt_CDDehakaEssencePickup = TriggerCreate("libCPCD_gt_CDDehakaEssencePickup_Func");
    TriggerEnable(libCPCD_gt_CDDehakaEssencePickup, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDDehakaEssencePickup, c_playerAny, "EssencePickupDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaEssenceDrop
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaEssenceDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_essenceUnitCount;
    int lv_essenceBaseAmount;
    int lv_essenceCasualMultiplier;
    int lv_essenceNormalMultiplier;
    fixed lv_essenceHardMultiplier;
    int lv_essenceBrutalMultiplier;
    int lv_dyingUnitSupply;
    int lv_dehakaPlayer;

    // Automatic Variable Declarations
    playergroup auto8162C453_g;

    // Variable Initialization
    lv_essenceCasualMultiplier = 2;
    lv_essenceNormalMultiplier = 2;
    lv_essenceHardMultiplier = 1.5;
    lv_essenceBrutalMultiplier = 1;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPGL_gf_HumanPlayers(), libNtve_gf_KillingPlayer()) == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "NoBiomassDrop") == false))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8162C453_g = libCPGL_gf_AllCommandersinPlayerGroup("Dehaka", libCPGL_gf_HumanPlayers());
    lv_dehakaPlayer = -1;
    while (true) {
        lv_dehakaPlayer = PlayerGroupNextPlayer(auto8162C453_g, lv_dehakaPlayer);
        if (lv_dehakaPlayer < 0) { break; }
        if ((lv_dehakaPlayer == c_playerAny)) {
            return true;
        }

        lv_dyingUnitSupply = FixedToInt(StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0)));
        if (((UnitHasBehavior2(EventUnit(), "SupplyLT1") == true) || (UnitHasBehavior2(EventUnit(), "CritterExplode") == true))) {
            lv_essenceBaseAmount = 1;
        }
        else if ((UnitHasBehavior2(EventUnit(), "HybridUnitDummy") == true)) {
            lv_essenceBaseAmount = 12;
        }
        else if ((lv_dyingUnitSupply == -1)) {
            lv_essenceBaseAmount = 2;
        }
        else if ((lv_dyingUnitSupply == -2)) {
            lv_essenceBaseAmount = 4;
        }
        else if ((lv_dyingUnitSupply == -3)) {
            lv_essenceBaseAmount = 6;
        }
        else if ((lv_dyingUnitSupply == -4)) {
            lv_essenceBaseAmount = 8;
        }
        else if ((lv_dyingUnitSupply < -4)) {
            lv_essenceBaseAmount = 12;
        }
        lv_essenceUnitCount = libNtve_gf_DifficultyValueInt((lv_essenceBaseAmount * lv_essenceCasualMultiplier), (lv_essenceBaseAmount * lv_essenceNormalMultiplier), FixedToInt(Ceiling((lv_essenceBaseAmount * lv_essenceHardMultiplier))), (lv_essenceBaseAmount * lv_essenceBrutalMultiplier));
        if ((lv_essenceUnitCount > 0)) {
            libCPCD_gv_cDDehakaDebugEssenceDroppedNormal += lv_essenceUnitCount;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "EssencePickup", c_unitCreateIgnorePlacement, lv_dehakaPlayer, UnitGetPosition(EventUnit()));
            libCPCD_gf_CDDehakaEssenceSetStack(UnitLastCreated(), lv_essenceUnitCount);
            UnitBehaviorRemove(UnitLastCreated(), "EssenceCreated", 1);
            libCPCD_gf_CDDehakaEssenceScale(UnitLastCreated(), true);
            libCPCD_gf_CDDehakaEssenceMerge(UnitLastCreated(), lv_essenceUnitCount);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaEssenceDrop_Init () {
    libCPCD_gt_CDDehakaEssenceDrop = TriggerCreate("libCPCD_gt_CDDehakaEssenceDrop_Func");
    TriggerEnable(libCPCD_gt_CDDehakaEssenceDrop, false);
    TriggerAddEventUnitDied(libCPCD_gt_CDDehakaEssenceDrop, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaReviveGas Worker Behavior Add
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaReviveGasWorkerBehaviorAdd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_drone;
    unit lv_gasStation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_drone = EventUnit();
    lv_gasStation = OrderGetTargetUnit(EventUnitOrder());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_drone) == "DehakaDrone"))) {
            return false;
        }

        if (!((UnitGetType(lv_gasStation) == "Extractor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_drone, "GasWorker", lv_drone, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaReviveGasWorkerBehaviorAdd_Init () {
    libCPCD_gt_CDDehakaReviveGasWorkerBehaviorAdd = TriggerCreate("libCPCD_gt_CDDehakaReviveGasWorkerBehaviorAdd_Func");
    TriggerEnable(libCPCD_gt_CDDehakaReviveGasWorkerBehaviorAdd, false);
    TriggerAddEventUnitOrder(libCPCD_gt_CDDehakaReviveGasWorkerBehaviorAdd, null, AbilityCommand("DroneHarvest", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaReviveGas Worker Behavior Remove
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaReviveGasWorkerBehaviorRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_drone;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_drone = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_drone) == "DehakaDrone"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_drone, "GasWorker", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaReviveGasWorkerBehaviorRemove_Init () {
    libCPCD_gt_CDDehakaReviveGasWorkerBehaviorRemove = TriggerCreate("libCPCD_gt_CDDehakaReviveGasWorkerBehaviorRemove_Func");
    TriggerEnable(libCPCD_gt_CDDehakaReviveGasWorkerBehaviorRemove, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDDehakaReviveGasWorkerBehaviorRemove, null, AbilityCommand("DroneHarvest", 255), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDDehakaReviveGasWorkerBehaviorRemove, null, AbilityCommand("DroneHarvest", 255), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaRevive Eat Button Clicked
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaReviveEatButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_reviveTimer;
    int lv_needs;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reviveTimer = UnitBehaviorDuration(libCPGL_gv_commander[EventPlayer()].lv_heroBeacon, "DehakaNormalReviveTimer");
    lv_needs = RoundI((lv_reviveTimer/(-libCPCD_gv_cDDehakaEatReviveTimerAdjustment)));

    // Conditions
    if (testConds) {
        if (!((lv_reviveTimer > 1.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_needs > 0)) {
        CatalogReferenceModify("Abil,DehakaCoopReviveEat,MaxCargoCount", EventPlayer(), IntToString(lv_needs), c_upgradeOperationSet);
        CatalogReferenceModify("Abil,DehakaCoopReviveEat,TotalCargoSpace", EventPlayer(), IntToString(lv_needs), c_upgradeOperationSet);
        UnitAbilityEnable(libCPGL_gv_commander[EventPlayer()].lv_heroBeacon, "DehakaConcoonEatSearch", true);
    }
    else {
        UnitAbilityEnable(libCPGL_gv_commander[EventPlayer()].lv_heroBeacon, "DehakaConcoonEatSearch", false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaReviveEatButtonClicked_Init () {
    libCPCD_gt_CDDehakaReviveEatButtonClicked = TriggerCreate("libCPCD_gt_CDDehakaReviveEatButtonClicked_Func");
    TriggerEnable(libCPCD_gt_CDDehakaReviveEatButtonClicked, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDDehakaReviveEatButtonClicked, null, AbilityCommand("DehakaConcoonEatSearch", 0), c_unitAbilStageExecute, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDDehakaReviveEatButtonClicked, c_playerAny, "DehakaCoopReviveEatKillSet");
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDDehakaReviveEatButtonClicked, null, "DehakaNormalReviveTimer", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaRevive Timer Adjustments
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaReviveTimerAdjustments_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_reviveTimer;
    fixed lv_reviveTimerAdjustment;
    fixed lv_healthAdjustment;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reviveTimerAdjustment = libCPCD_gv_cDDehakaEatReviveTimerAdjustment;
    lv_healthAdjustment = ((AbsF(libCPCD_gv_cDDehakaEatReviveTimerAdjustment) / libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "DehakaNormalReviveTimer", "Duration", EventPlayer())) * UnitGetPropertyFixed(libCPGL_gv_commander[EventPlayer()].lv_heroUnit, c_unitPropLifeMax, c_unitPropCurrent));

    // Actions
    if (!runActions) {
        return true;
    }

    lv_reviveTimer = UnitBehaviorDuration(libCPGL_gv_commander[EventPlayer()].lv_heroBeacon, "DehakaNormalReviveTimer");
    lv_reviveTimer += lv_reviveTimerAdjustment;
    UnitBehaviorSetDurationRemaining(libCPGL_gv_commander[EventPlayer()].lv_heroBeacon, "DehakaNormalReviveTimer", lv_reviveTimer);
    UnitSetPropertyFixed(libCPGL_gv_commander[EventPlayer()].lv_heroBeacon, c_unitPropLife, (UnitGetPropertyFixed(libCPGL_gv_commander[EventPlayer()].lv_heroBeacon, c_unitPropLife, c_unitPropCurrent) + lv_healthAdjustment));
    PlayerAddCooldown(EventPlayer(), libCPGL_gv_commander[EventPlayer()].lv_heroReviveLink, lv_reviveTimerAdjustment);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaReviveTimerAdjustments_Init () {
    libCPCD_gt_CDDehakaReviveTimerAdjustments = TriggerCreate("libCPCD_gt_CDDehakaReviveTimerAdjustments_Func");
    TriggerEnable(libCPCD_gt_CDDehakaReviveTimerAdjustments, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDDehakaReviveTimerAdjustments, c_playerAny, "DehakaCoopReviveEatKillSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaLearn
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaLearn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_ug;
    unit lv_u;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ug = UnitGroupEmpty();
    lv_u = EventUnit();
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gf_HeroCanSpendSkillPoint(lv_u, AbilityCommandGetAbility(EventUnitAbility())) == true)) {
        ActorSend(libNtve_gf_MainActorofUnit(lv_u), "HaloStart");
        UISetButtonFaceHighlighted(PlayerGroupSingle(UnitGetOwner(lv_u)), "DehakaLearnAbilities", true);
    }
    else {
        lv_ug = UnitGroupSelected(lv_p);
        UnitClearSelection(lv_p);
        UnitSelect(lv_u, lv_p, true);
        UnitGroupSelect(lv_ug, lv_p, true);
        ActorSend(libNtve_gf_MainActorofUnit(lv_u), "HaloStop");
        UISetButtonFaceHighlighted(PlayerGroupSingle(UnitGetOwner(lv_u)), "DehakaLearnAbilities", false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaLearn_Init () {
    libCPCD_gt_CDDehakaLearn = TriggerCreate("libCPCD_gt_CDDehakaLearn_Func");
    TriggerEnable(libCPCD_gt_CDDehakaLearn, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDDehakaLearn, null, AbilityCommand("DehakaLearn", 255), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaBeamStart
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaBeamStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dehaka;
    unit lv_missile;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dehaka = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_missile = EventPlayerEffectUsedUnit(c_effectUnitSource);

    // Actions
    if (!runActions) {
        return true;
    }

    ActorLookAtTypeStart(libNtve_gf_MainActorofUnit(lv_dehaka), "InstantHeadOnly", libNtve_gf_MainActorofUnit(lv_missile));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaBeamStart_Init () {
    libCPCD_gt_CDDehakaBeamStart = TriggerCreate("libCPCD_gt_CDDehakaBeamStart_Func");
    TriggerEnable(libCPCD_gt_CDDehakaBeamStart, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDDehakaBeamStart, c_playerAny, "MammothBreathCreatePersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaBeamStop
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaBeamStop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dehaka;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dehaka = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    ActorLookAtTypeStop(libNtve_gf_MainActorofUnit(lv_dehaka), "SlowHeadOnly");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaBeamStop_Init () {
    libCPCD_gt_CDDehakaBeamStop = TriggerCreate("libCPCD_gt_CDDehakaBeamStop_Func");
    TriggerEnable(libCPCD_gt_CDDehakaBeamStop, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDDehakaBeamStop, c_playerAny, "MammothBreathSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaConsumeTimeStopImmunity
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaConsumeTimeStopImmunity_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_unit, "TimeStopImmune") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_unit, "TimeStopImmune", lv_unit, 1);
    UnitBehaviorSetDurationRemaining(lv_unit, "TimeStopImmune", 5.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaConsumeTimeStopImmunity_Init () {
    libCPCD_gt_CDDehakaConsumeTimeStopImmunity = TriggerCreate("libCPCD_gt_CDDehakaConsumeTimeStopImmunity_Func");
    TriggerEnable(libCPCD_gt_CDDehakaConsumeTimeStopImmunity, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDDehakaConsumeTimeStopImmunity, null, "DehakaConsume", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaConsumeExecuted
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaConsumeExecuted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dehakaUnit;
    unit lv_targetUnit;
    fixed lv_targetLife;
    int lv_dehakaPlayer;
    point lv_casterPoint;
    string lv_userInstance;
    int lv_i;
    int lv_c;
    string lv_effect;
    unitfilter lv_effectFilter;
    string lv_effectFilterString;
    text lv_text;
    text lv_textNew;
    fixed lv_cooldownModifier;

    // Automatic Variable Declarations
    int autoA7F83C10_ae;
    const int autoA7F83C10_ai = 1;

    // Variable Initialization
    lv_dehakaUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_targetLife = UnitGetPropertyFixed(lv_targetUnit, c_unitPropVitality, c_unitPropCurrent);
    lv_dehakaPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_casterPoint = EventPlayerEffectUsedPoint(c_effectLocationCasterPoint);
    lv_c = UserDataInstanceCount(libCPCD_gv_cDDehakaConsumeEffectUserType);
    lv_effectFilter = UnitFilter(0, 0, 0, 0);
    lv_effectFilterString = "";
    lv_cooldownModifier = 1.0;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_dehakaUnit, libCPCD_gv_cDDehakaConsumeBehaviorDisable, c_unitBehaviorCountAll);
    if ((UnitHasBehavior2(lv_targetUnit, "ImpalerDehakaTenderize") == true)) {
        lv_cooldownModifier = 0.25;
    }

    if ((((TechTreeUpgradeCount(lv_dehakaPlayer, "MutatorIsPlayer1", c_techCountCompleteOnly) >= 1) && (UnitHasBehavior2(lv_targetUnit, "MutatorImmunetoPlayer1") == true)) || ((TechTreeUpgradeCount(lv_dehakaPlayer, "MutatorIsPlayer2", c_techCountCompleteOnly) >= 1) && (UnitHasBehavior2(lv_targetUnit, "MutatorImmunetoPlayer2") == true)))) {
        UnitAbilityAddCooldown(lv_dehakaUnit, libCPCD_gv_cDDehakaConsumeAbility, libCPCD_gv_cDDehakaConsumeCooldownLink, 1.0);
    }
    else {
        if ((UnitFilterMatch(lv_targetUnit, lv_dehakaPlayer, libCPCD_gv_cDDehakaConsumeCooldownFilter) == true)) {
            if ((UnitGetPropertyFixed(lv_targetUnit, c_unitPropSuppliesUsed, c_unitPropNormal) > 1.0)) {
                if ((lv_targetLife >= 600.0)) {
                    UnitAbilityAddCooldown(lv_dehakaUnit, libCPCD_gv_cDDehakaConsumeAbility, libCPCD_gv_cDDehakaConsumeCooldownLink, ((600.0 * lv_cooldownModifier) * libCPCD_gv_cDDehakaConsumeCooldownMultiplier));
                }
                else {
                    UnitAbilityAddCooldown(lv_dehakaUnit, libCPCD_gv_cDDehakaConsumeAbility, libCPCD_gv_cDDehakaConsumeCooldownLink, ((lv_targetLife * lv_cooldownModifier) * libCPCD_gv_cDDehakaConsumeCooldownMultiplier));
                }
            }
            else {
                UnitAbilityAddCooldown(lv_dehakaUnit, libCPCD_gv_cDDehakaConsumeAbility, libCPCD_gv_cDDehakaConsumeCooldownLink, 1.0);
            }
        }

        autoA7F83C10_ae = lv_c;
        lv_i = 1;
        for ( ; ( (autoA7F83C10_ai >= 0 && lv_i <= autoA7F83C10_ae) || (autoA7F83C10_ai < 0 && lv_i >= autoA7F83C10_ae) ) ; lv_i += autoA7F83C10_ai ) {
            lv_userInstance = UserDataInstance(libCPCD_gv_cDDehakaConsumeEffectUserType, lv_i);
            lv_effectFilterString = UserDataGetString(libCPCD_gv_cDDehakaConsumeEffectUserType, lv_userInstance, "Filter", 1);
            lv_effectFilter = libNtve_gf_ConvertTargetFilterStringToUnitFilter(lv_effectFilterString);
            if ((UnitFilterMatch(lv_targetUnit, lv_dehakaPlayer, lv_effectFilter) == true)) {
                lv_effect = UserDataGetGameLink(libCPCD_gv_cDDehakaConsumeEffectUserType, lv_userInstance, "Effect", 1);
                lv_textNew = UserDataGetText(libCPCD_gv_cDDehakaConsumeEffectUserType, lv_userInstance, "Text", 1);
                UnitCreateEffectUnit(lv_dehakaUnit, lv_effect, lv_dehakaUnit);
                TextExpressionSetToken("Param/Expression/lib_CPCD_82F3E764", "A", lv_text);
                TextExpressionSetToken("Param/Expression/lib_CPCD_82F3E764", "B", lv_textNew);
                lv_text = TextExpressionAssemble("Param/Expression/lib_CPCD_82F3E764");
            }

        }
        libCPCD_gf_CDDehakaConsumeEvolved(lv_dehakaPlayer, lv_targetUnit, libCPCD_gf_CDDehakaIsEvolvedUnit(lv_targetUnit));
        UnitCreateEffectUnit(lv_dehakaUnit, libCPCD_gv_cDDehakaConsumeEffectTriggerEffect, lv_targetUnit);
        if ((UnitGetType(lv_targetUnit) == "MutatorAmonDehaka")) {
            SoundPlayOnUnitForPlayer(SoundLink("DehakaEatDehaka", -1), c_maxPlayers, PlayerGroupAll(), lv_dehakaUnit, 1.0, 100.0, 0.0);
        }

        if ((UnitFilterMatch(lv_targetUnit, lv_dehakaPlayer, UnitFilter((1 << c_targetFilterBiological), 0, 0, 0)) == true)) {
            UnitCreateEffectUnit(lv_dehakaUnit, "DehakaConsumeEffectHealBiological", lv_dehakaUnit);
        }
        else {
            UnitCreateEffectUnit(lv_dehakaUnit, "DehakaConsumeEffectHealOther", lv_dehakaUnit);
        }
        if ((UnitHasBehavior2(lv_targetUnit, "SupplyLT1") == true)) {
            AchievementTermQuantityAdd(lv_dehakaPlayer, "CommanderDehakaSupply", 1);
        }
        else {
            AchievementTermQuantityAdd(lv_dehakaPlayer, "CommanderDehakaSupply", (CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(lv_targetUnit), "Food", EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)) * -1));
        }
        AchievementTermQuantityAdd(lv_dehakaPlayer, "CommanderDehakaDamage", FixedToInt(lv_targetLife));
        if (((UnitHasBehavior2(lv_targetUnit, "MutatorMasterController") == false) && (UnitHasBehavior2(lv_targetUnit, "MutatorJustDie") == false))) {
            UnitSetPropertyFixed(lv_targetUnit, c_unitPropLife, 1.0);
        }

    }
    libCPCD_gf_CDDehakaConsumeFloatText(lv_text, lv_dehakaPlayer, lv_casterPoint);
    ActorSend(libNtve_gf_MainActorofUnit(lv_targetUnit), "HostSiteOpsSet ::Host");
    UnitSetHeight(lv_targetUnit, UnitGetPropertyFixed(lv_targetUnit, c_unitPropHeight, c_unitPropNormal), 1.0);
    UnitBehaviorRemove(lv_targetUnit, "ForceLowDeath", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaConsumeExecuted_Init () {
    libCPCD_gt_CDDehakaConsumeExecuted = TriggerCreate("libCPCD_gt_CDDehakaConsumeExecuted_Func");
    TriggerEnable(libCPCD_gt_CDDehakaConsumeExecuted, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDDehakaConsumeExecuted, c_playerAny, libCPCD_gv_cDDehakaConsumeEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaConsumeDetachFailSafe
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaConsumeDetachFailSafe_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitSource);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(lv_targetUnit), "HostSiteOpsSet ::Host");
    UnitSetHeight(lv_targetUnit, UnitGetPropertyFixed(lv_targetUnit, c_unitPropHeight, c_unitPropNormal), 1.0);
    UnitBehaviorRemove(lv_targetUnit, "ForceLowDeath", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaConsumeDetachFailSafe_Init () {
    libCPCD_gt_CDDehakaConsumeDetachFailSafe = TriggerCreate("libCPCD_gt_CDDehakaConsumeDetachFailSafe_Func");
    TriggerEnable(libCPCD_gt_CDDehakaConsumeDetachFailSafe, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDDehakaConsumeDetachFailSafe, c_playerAny, "DehakaConsumeLaunchTargetVisualImpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaConsumeLaunchFailSafe
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaConsumeLaunchFailSafe_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    if ((libNtve_gf_PlayerCanCreateEffectOnUnit(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), "TargetIsBeingDraggedByDehaka", lv_targetUnit) == false)) {
        ActorSend(libNtve_gf_MainActorofUnit(lv_targetUnit), "HostSiteOpsSet ::Host");
        ActorSend(libNtve_gf_MainActorofUnit(lv_targetUnit), "RefClear ::Host");
        UnitSetHeight(lv_targetUnit, UnitGetPropertyFixed(lv_targetUnit, c_unitPropHeight, c_unitPropNormal), 1.0);
        UnitBehaviorRemove(lv_targetUnit, "ForceLowDeath", 1);
        UnitBehaviorRemove(lv_targetUnit, "DehakaConsumeStunned", 1);
        UnitBehaviorRemove(lv_targetUnit, "DehakaConsume", 1);
        UnitBehaviorRemove(lv_targetUnit, "DehakaConsumeTentacle", 1);
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "DehakaConsumeDisableCommandCard", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaConsumeLaunchFailSafe_Init () {
    libCPCD_gt_CDDehakaConsumeLaunchFailSafe = TriggerCreate("libCPCD_gt_CDDehakaConsumeLaunchFailSafe_Func");
    TriggerEnable(libCPCD_gt_CDDehakaConsumeLaunchFailSafe, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDDehakaConsumeLaunchFailSafe, c_playerAny, "DehakaConsumeLaunchTargetVisual");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaConsumeEffectHeroic
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaConsumeEffectHeroic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;
    int lv_amount;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_point = EventPlayerEffectUsedPoint(c_effectLocationCasterUnit);
    lv_amount = libCPCD_gv_cDDehakaConsumeEffectHeroicEssenceAmount;
    lv_p = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "EssencePickup", c_unitCreateIgnorePlacement, lv_p, lv_point);
    libCPCD_gf_CDDehakaEssenceSetStack(UnitLastCreated(), lv_amount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaConsumeEffectHeroic_Init () {
    libCPCD_gt_CDDehakaConsumeEffectHeroic = TriggerCreate("libCPCD_gt_CDDehakaConsumeEffectHeroic_Func");
    TriggerEnable(libCPCD_gt_CDDehakaConsumeEffectHeroic, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDDehakaConsumeEffectHeroic, c_playerAny, libCPCD_gv_cDDehakaConsumeEffectHeroicLink);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaConsumeLearnLevel2
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaConsumeLearnLevel2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_durationModifier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_durationModifier = 1.667;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DehakaCoop"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressAbility() == "DehakaConsume"))) {
            return false;
        }

        if (!((UnitAbilityGetLevel(EventUnit(), libNtve_gf_TriggeringProgressAbility()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueModify(c_gameCatalogBehavior, "DehakaConsumeEffectAir", "Duration", EventPlayer(), FixedToString(lv_durationModifier, 2), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "DehakaConsumeEffectArmored", "Duration", EventPlayer(), FixedToString(lv_durationModifier, 2), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "DehakaConsumeEffectDetector", "Duration", EventPlayer(), FixedToString(lv_durationModifier, 2), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "DehakaConsumeEffectHeroic", "Duration", EventPlayer(), FixedToString(lv_durationModifier, 2), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "DehakaConsumeEffectLight", "Duration", EventPlayer(), FixedToString(lv_durationModifier, 2), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "DehakaConsumeEffectMassive", "Duration", EventPlayer(), FixedToString(lv_durationModifier, 2), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "DehakaConsumeEffectMechanical", "Duration", EventPlayer(), FixedToString(lv_durationModifier, 2), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "DehakaConsumeEffectPsionic", "Duration", EventPlayer(), FixedToString(lv_durationModifier, 2), c_upgradeOperationMultiply);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaConsumeLearnLevel2_Init () {
    libCPCD_gt_CDDehakaConsumeLearnLevel2 = TriggerCreate("libCPCD_gt_CDDehakaConsumeLearnLevel2_Func");
    TriggerEnable(libCPCD_gt_CDDehakaConsumeLearnLevel2, false);
    TriggerAddEventUnitLearnProgress(libCPCD_gt_CDDehakaConsumeLearnLevel2, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaConsumeLearnLevel3
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaConsumeLearnLevel3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_lifeCooldownFactorReductionPercent;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lifeCooldownFactorReductionPercent = 0.2;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DehakaCoop"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressAbility() == "DehakaConsume"))) {
            return false;
        }

        if (!((UnitAbilityGetLevel(EventUnit(), "DehakaConsume") == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gv_cDDehakaConsumeCooldownMultiplier *= (1.0 - lv_lifeCooldownFactorReductionPercent);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaConsumeLearnLevel3_Init () {
    libCPCD_gt_CDDehakaConsumeLearnLevel3 = TriggerCreate("libCPCD_gt_CDDehakaConsumeLearnLevel3_Func");
    TriggerEnable(libCPCD_gt_CDDehakaConsumeLearnLevel3, false);
    TriggerAddEventUnitLearnProgress(libCPCD_gt_CDDehakaConsumeLearnLevel3, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaBossFacingSetting
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaBossFacingSetting_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetFacing(EventUnit(), 315.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaBossFacingSetting_Init () {
    libCPCD_gt_CDDehakaBossFacingSetting = TriggerCreate("libCPCD_gt_CDDehakaBossFacingSetting_Func");
    TriggerEnable(libCPCD_gt_CDDehakaBossFacingSetting, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDDehakaBossFacingSetting, null, "DehakaBossesSummonDelay", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaAutocastSettingsOn
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaAutocastSettingsOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    abilcmd autoD39169B8_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoD39169B8_val = EventUnitAbility();
    if (autoD39169B8_val == AbilityCommand("DehakaGlevigFirebreath", 0)) {
        libCPCD_gv_cDDehakaAutocastGlevigFirebreath[EventPlayer()] = true;
    }
    else if (autoD39169B8_val == AbilityCommand("MurvarCoopPuke", 0)) {
        libCPCD_gv_cDDehakaAutocastMurvarPuke[EventPlayer()] = true;
    }
    else if (autoD39169B8_val == AbilityCommand("CoopMurvarSpawnCreepers", 0)) {
        libCPCD_gv_cDDehakaAutocastMurvarMurvarSpawnCreepers[EventPlayer()] = true;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaAutocastSettingsOn_Init () {
    libCPCD_gt_CDDehakaAutocastSettingsOn = TriggerCreate("libCPCD_gt_CDDehakaAutocastSettingsOn_Func");
    TriggerEnable(libCPCD_gt_CDDehakaAutocastSettingsOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCPCD_gt_CDDehakaAutocastSettingsOn, null, AbilityCommand("DehakaGlevigFirebreath", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCPCD_gt_CDDehakaAutocastSettingsOn, null, AbilityCommand("MurvarCoopPuke", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCPCD_gt_CDDehakaAutocastSettingsOn, null, AbilityCommand("CoopMurvarSpawnCreepers", 0), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaAutocastSettingsOff
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaAutocastSettingsOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    abilcmd autoA9B5DDA9_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA9B5DDA9_val = EventUnitAbility();
    if (autoA9B5DDA9_val == AbilityCommand("DehakaGlevigFirebreath", 0)) {
        libCPCD_gv_cDDehakaAutocastGlevigFirebreath[EventPlayer()] = false;
    }
    else if (autoA9B5DDA9_val == AbilityCommand("MurvarCoopPuke", 0)) {
        libCPCD_gv_cDDehakaAutocastMurvarPuke[EventPlayer()] = false;
    }
    else if (autoA9B5DDA9_val == AbilityCommand("CoopMurvarSpawnCreepers", 0)) {
        libCPCD_gv_cDDehakaAutocastMurvarMurvarSpawnCreepers[EventPlayer()] = false;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaAutocastSettingsOff_Init () {
    libCPCD_gt_CDDehakaAutocastSettingsOff = TriggerCreate("libCPCD_gt_CDDehakaAutocastSettingsOff_Func");
    TriggerEnable(libCPCD_gt_CDDehakaAutocastSettingsOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCPCD_gt_CDDehakaAutocastSettingsOff, null, AbilityCommand("DehakaGlevigFirebreath", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCPCD_gt_CDDehakaAutocastSettingsOff, null, AbilityCommand("MurvarCoopPuke", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCPCD_gt_CDDehakaAutocastSettingsOff, null, AbilityCommand("CoopMurvarSpawnCreepers", 0), c_unitAbilAutoCastChangeOff, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaAutocastBossSummonStateAdjust
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaAutocastBossSummonStateAdjust_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto26A41A32_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto26A41A32_val = UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    if (auto26A41A32_val == "DehakaGlevig") {
        if ((libCPCD_gv_cDDehakaAutocastGlevigFirebreath[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)] == true)) {
            Wait(0.0625, c_timeGame);
            UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "DehakaGlevigFirebreathSetAutocast", EventPlayerEffectUsedUnit(c_effectUnitTarget));
        }

    }
    else if (auto26A41A32_val == "DehakaMurvar") {
        if ((libCPCD_gv_cDDehakaAutocastMurvarPuke[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)] == true)) {
            UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "DehakaMurvarAcidPukeSetAutocast", EventPlayerEffectUsedUnit(c_effectUnitTarget));
        }

        if ((libCPCD_gv_cDDehakaAutocastMurvarMurvarSpawnCreepers[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)] == true)) {
            UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "DehakaMurvarSpawnCreepersSetAutocast", EventPlayerEffectUsedUnit(c_effectUnitTarget));
        }

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaAutocastBossSummonStateAdjust_Init () {
    libCPCD_gt_CDDehakaAutocastBossSummonStateAdjust = TriggerCreate("libCPCD_gt_CDDehakaAutocastBossSummonStateAdjust_Func");
    TriggerEnable(libCPCD_gt_CDDehakaAutocastBossSummonStateAdjust, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDDehakaAutocastBossSummonStateAdjust, c_playerAny, "DehakaTopBarSummonTimedLifeAB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaGlevigTimerAdjustments
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaGlevigTimerAdjustments_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_researchElapsed;
    fixed lv_researchTotal;
    fixed lv_researchTimerAdjustment;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_researchTimerAdjustment = 31.0;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DehakaGlevigStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_researchElapsed = UnitQueueItemTime(EventUnit(), c_unitQueueTimeElapsed, 1);
    lv_researchElapsed += lv_researchTimerAdjustment;
    lv_researchTotal = UnitQueueItemTime(EventUnit(), c_unitQueueTimeTotal, 1);
    if ((lv_researchTotal != 0.0)) {
        UnitSetProgressComplete(EventUnit(), 1, FixedToInt(((lv_researchElapsed / lv_researchTotal) * 100)));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaGlevigTimerAdjustments_Init () {
    libCPCD_gt_CDDehakaGlevigTimerAdjustments = TriggerCreate("libCPCD_gt_CDDehakaGlevigTimerAdjustments_Func");
    TriggerEnable(libCPCD_gt_CDDehakaGlevigTimerAdjustments, false);
    TriggerAddEventUnitCargo(libCPCD_gt_CDDehakaGlevigTimerAdjustments, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaPackLeaderGlevigBuilt
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaPackLeaderGlevigBuilt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_building;
    int lv_player;
    fixed lv_dehakaNydusDestroyerTopBarCooldown;
    fixed lv_dehakaNydusDestroyerTopBarCharges;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_building = EventUnitProgressUnit();
    lv_player = UnitGetOwner(lv_building);

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "DehakaGlevigStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCPCD_gv_cDDehakaBossBuildingBuilt_Glevig[lv_player] == false)) {
        libCPCD_gv_cDDehakaBossBuildingBuilt_Glevig[lv_player] = true;
        PlayerAddCooldown(lv_player, "Abil/DehakaGlevigTopBar", 120.0);
        lv_dehakaNydusDestroyerTopBarCooldown = PlayerGetChargeRegen(lv_player, "Abil/DehakaNydusDestroyerTopBar");
        lv_dehakaNydusDestroyerTopBarCharges = PlayerGetChargeUsed(lv_player, "Abil/DehakaNydusDestroyerTopBar");
        PlayerAddChargeUsed(lv_player, "Abil/DehakaNydusDestroyerTopBar", (3.0 - lv_dehakaNydusDestroyerTopBarCharges));
        PlayerAddChargeRegenRemaining(lv_player, "Abil/DehakaNydusDestroyerTopBar", (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "DehakaNydusDestroyerTopBar", "InfoArray[" + IntToString(0) + "].Charge.TimeStart", lv_player) - lv_dehakaNydusDestroyerTopBarCooldown));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaPackLeaderGlevigBuilt_Init () {
    libCPCD_gt_CDDehakaPackLeaderGlevigBuilt = TriggerCreate("libCPCD_gt_CDDehakaPackLeaderGlevigBuilt_Func");
    TriggerEnable(libCPCD_gt_CDDehakaPackLeaderGlevigBuilt, false);
    TriggerAddEventUnitConstructProgress(libCPCD_gt_CDDehakaPackLeaderGlevigBuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaPackLeaderMurvarBuilt
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaPackLeaderMurvarBuilt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_building;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_building = EventUnitProgressUnit();
    lv_player = UnitGetOwner(lv_building);

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "DehakaMurvarStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCPCD_gv_cDDehakaBossBuildingBuilt_Murvar[lv_player] == false)) {
        libCPCD_gv_cDDehakaBossBuildingBuilt_Murvar[lv_player] = true;
        PlayerAddCooldown(lv_player, "Abil/DehakaMurvarTopBar", 60.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaPackLeaderMurvarBuilt_Init () {
    libCPCD_gt_CDDehakaPackLeaderMurvarBuilt = TriggerCreate("libCPCD_gt_CDDehakaPackLeaderMurvarBuilt_Func");
    TriggerEnable(libCPCD_gt_CDDehakaPackLeaderMurvarBuilt, false);
    TriggerAddEventUnitConstructProgress(libCPCD_gt_CDDehakaPackLeaderMurvarBuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaPackLeaderDakrunBuilt
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaPackLeaderDakrunBuilt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_building;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_building = EventUnitProgressUnit();
    lv_player = UnitGetOwner(lv_building);

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "DehakaDakrunStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCPCD_gv_cDDehakaBossBuildingBuilt_Dakrun[lv_player] == false)) {
        libCPCD_gv_cDDehakaBossBuildingBuilt_Dakrun[lv_player] = true;
        PlayerAddCooldown(lv_player, "Abil/DehakaDakrunTopBar", 60.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaPackLeaderDakrunBuilt_Init () {
    libCPCD_gt_CDDehakaPackLeaderDakrunBuilt = TriggerCreate("libCPCD_gt_CDDehakaPackLeaderDakrunBuilt_Func");
    TriggerEnable(libCPCD_gt_CDDehakaPackLeaderDakrunBuilt, false);
    TriggerAddEventUnitConstructProgress(libCPCD_gt_CDDehakaPackLeaderDakrunBuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaDenReviveFootprintOn
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaDenReviveFootprintOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;
    point lv_point;
    int lv_x;
    int lv_y;
    point lv_pointInteger;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);
    lv_point = UnitGetPosition(lv_u);
    lv_x = FixedToInt(PointGetX(lv_point));
    lv_y = FixedToInt(PointGetY(lv_point));
    lv_pointInteger = Point(lv_x, lv_y);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_point != lv_pointInteger)) {
        UnitSetPosition(lv_u, lv_pointInteger, false);
    }

    UnitCreate(1, "DehakaCoopReviveCocoonFootPrint", c_unitCreateIgnorePlacement, lv_p, lv_pointInteger, 270.0);
    libCPCD_gv_cDDehakaReviveFootprint[lv_p] = UnitLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaDenReviveFootprintOn_Init () {
    libCPCD_gt_CDDehakaDenReviveFootprintOn = TriggerCreate("libCPCD_gt_CDDehakaDenReviveFootprintOn_Func");
    TriggerEnable(libCPCD_gt_CDDehakaDenReviveFootprintOn, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDDehakaDenReviveFootprintOn, null, "DehakaFirstReviveTimer", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDDehakaDenReviveFootprintOn, null, "DehakaNormalReviveTimer", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaDenReviveFootprintOff
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaDenReviveFootprintOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(libCPCD_gv_cDDehakaReviveFootprint[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaDenReviveFootprintOff_Init () {
    libCPCD_gt_CDDehakaDenReviveFootprintOff = TriggerCreate("libCPCD_gt_CDDehakaDenReviveFootprintOff_Func");
    TriggerEnable(libCPCD_gt_CDDehakaDenReviveFootprintOff, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDDehakaDenReviveFootprintOff, null, "DehakaFirstReviveTimer", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDDehakaDenReviveFootprintOff, null, "DehakaNormalReviveTimer", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaDenReviveEatTextTagDead
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaDenReviveEatTextTagDead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);
    lv_point = UnitGetPosition(lv_u);

    // Conditions
    if (testConds) {
        if (!((libCPCD_gv_cDDehakaReviveEatTextTag[lv_p] == c_textTagNone))) {
            return false;
        }

        if (!((libCPCD_gv_cDDehakaReviveEatUsed[lv_p] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/lib_CPCD_4EDF2A94"), 18, lv_point, 1.0, true, false, PlayerGroupSingle(lv_p));
    TextTagAttachToUnit(TextTagLastCreated(), lv_u, 2.5);
    libCPCD_gv_cDDehakaReviveEatTextTag[lv_p] = TextTagLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaDenReviveEatTextTagDead_Init () {
    libCPCD_gt_CDDehakaDenReviveEatTextTagDead = TriggerCreate("libCPCD_gt_CDDehakaDenReviveEatTextTagDead_Func");
    TriggerEnable(libCPCD_gt_CDDehakaDenReviveEatTextTagDead, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDDehakaDenReviveEatTextTagDead, null, "DehakaNormalReviveTimer", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaDenReviveEatTextTagRevived
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaDenReviveEatTextTagRevived_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((libCPCD_gv_cDDehakaReviveEatTextTag[lv_p] != c_textTagNone))) {
            return false;
        }

        if (!((libCPCD_gv_cDDehakaReviveEatUsed[lv_p] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(libCPCD_gv_cDDehakaReviveEatTextTag[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaDenReviveEatTextTagRevived_Init () {
    libCPCD_gt_CDDehakaDenReviveEatTextTagRevived = TriggerCreate("libCPCD_gt_CDDehakaDenReviveEatTextTagRevived_Func");
    TriggerEnable(libCPCD_gt_CDDehakaDenReviveEatTextTagRevived, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDDehakaDenReviveEatTextTagRevived, null, "DehakaNormalReviveTimer", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaDenReviveEatUsed
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaDenReviveEatUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((libCPCD_gv_cDDehakaReviveEatTextTag[lv_p] != c_textTagNone))) {
            return false;
        }

        if (!((libCPCD_gv_cDDehakaReviveEatUsed[lv_p] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(libCPCD_gv_cDDehakaReviveEatTextTag[lv_p]);
    libCPCD_gv_cDDehakaReviveEatUsed[lv_p] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaDenReviveEatUsed_Init () {
    libCPCD_gt_CDDehakaDenReviveEatUsed = TriggerCreate("libCPCD_gt_CDDehakaDenReviveEatUsed_Func");
    TriggerEnable(libCPCD_gt_CDDehakaDenReviveEatUsed, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDDehakaDenReviveEatUsed, null, AbilityCommand("DehakaConcoonEatSearch", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDDehakaMutaliskReviveCooldownOn
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDDehakaMutaliskReviveCooldownOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    string lv_behavior;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_behavior = EventUnitBehavior();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddCooldown(lv_u, libCPCD_gv_cDDehakaMutaliskReviveCooldownIndicator, "Behavior/PrimalReconstitutionCooldownIndicator", UnitBehaviorDurationTotal(lv_u, lv_behavior));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDDehakaMutaliskReviveCooldownOn_Init () {
    libCPCD_gt_CDDehakaMutaliskReviveCooldownOn = TriggerCreate("libCPCD_gt_CDDehakaMutaliskReviveCooldownOn_Func");
    TriggerEnable(libCPCD_gt_CDDehakaMutaliskReviveCooldownOn, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDDehakaMutaliskReviveCooldownOn, null, libCPCD_gv_cDDehakaMutaliskReviveCooldownBehavior, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHTriggersInit
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHTriggersInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCPCD_gt_CDHHBomberPlatform_PlatformCreated, true);
    TriggerEnable(libCPCD_gt_CDHHBomberPlatform_PlatformDies, true);
    TriggerEnable(libCPCD_gt_CDHHBomberPlatform_BomberLaunched, true);
    TriggerEnable(libCPCD_gt_CDHHBomberPlatform_BomberReturned, true);
    TriggerEnable(libCPCD_gt_CDHHBomberPlatform_BomberRebuilt, true);
    TriggerEnable(libCPCD_gt_CDHHBomberPlatform_TopBar_TargetSelected, true);
    TriggerEnable(libCPCD_gt_CDHHBomberPlatform_Individual_TargetSelected, true);
    TriggerEnable(libCPCD_gt_CDHHSupplyAchievement, true);
    TriggerEnable(libCPCD_gt_CDHHStarportCreateTechLabOrder, true);
    TriggerEnable(libCPCD_gt_CDHHStarportCreateTechLabStart, true);
    TriggerEnable(libCPCD_gt_CDHHStarportCreateTechLabFinish, true);
    TriggerEnable(libCPCD_gt_CDHHAirFleet_Activated, true);
    TriggerEnable(libCPCD_gt_CDHHDeathRattleHellionFearApply, true);
    TriggerExecute(libCPCD_gt_CDNovaNamesGenerate, true, false);
    TriggerEnable(libCPCD_gt_CDNovaNamesAssign, true);
    TriggerEnable(libCPCD_gt_CDNovaNamesKillUpdate, true);
    TriggerEnable(libCPCD_gt_CDHHDeathRattle_Reaper, true);
    TriggerEnable(libCPCD_gt_CDHHDeathRattle_WidowMine, true);
    TriggerEnable(libCPCD_gt_CDHHDeathRattle_Hellion, true);
    TriggerEnable(libCPCD_gt_CDHHDeathRattle_Hellbat, true);
    TriggerEnable(libCPCD_gt_CDHHMiraTakeover_Upgrade, true);
    TriggerEnable(libCPCD_gt_CDHHDoubleSupplyStun, true);
    TriggerEnable(libCPCD_gt_CDHHStarportRecreateTechLabOrder, true);
    TriggerEnable(libCPCD_gt_CDHHStarportRecreate, true);
    TriggerEnable(libCPCD_gt_CDHHStarportFinishCreateTechLabOrder, true);
    TriggerEnable(libCPCD_gt_CM_Horner_HangerFinish, true);
    TriggerEnable(libCPCD_gt_CDHHVikingTacticalJumpMorph, true);
    TriggerEnable(libCPCD_gt_CDHHMagMines, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHTriggersInit_Init () {
    libCPCD_gt_CDHHTriggersInit = TriggerCreate("libCPCD_gt_CDHHTriggersInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHMagMines
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHMagMines_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCPGL_gv_commander[EventPlayer()].lv_commander == "Horner"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    if ((UnitAbilityChargeInfo(EventUnit(), AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountLeft) > 0.0)) {
        UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libCPGL_gv_commander[lv_casterPlayer].lv_globalCasterGroup, OrderTargetingPoint(AbilityCommand("HHTrainTopBar", 0), UnitGetPosition(libCPGL_gv_commander[lv_casterPlayer].lv_globalCasterUnit)), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHMagMines_Init () {
    libCPCD_gt_CDHHMagMines = TriggerCreate("libCPCD_gt_CDHHMagMines_Func");
    TriggerEnable(libCPCD_gt_CDHHMagMines, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDHHMagMines, null, AbilityCommand("HHTrainTopBar", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHVikingTacticalJumpMorph
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHVikingTacticalJumpMorph_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_unit, Order(AbilityCommand("HHFighterMode", 0)), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHVikingTacticalJumpMorph_Init () {
    libCPCD_gt_CDHHVikingTacticalJumpMorph = TriggerCreate("libCPCD_gt_CDHHVikingTacticalJumpMorph_Func");
    TriggerEnable(libCPCD_gt_CDHHVikingTacticalJumpMorph, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDHHVikingTacticalJumpMorph, null, AbilityCommand("FleetwideJump", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHAssaultGalleonHangerFinish
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_Horner_HangerFinish_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unit lv_progressUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_progressUnit = EventUnitProgressUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_TriggeringProgressUnitType() == "HHMercStarportCargo")) {
        UnitMagazineArm(lv_unit, AbilityCommand("HHMercStarportHangar", 0), 6);
        UnitBehaviorAdd(lv_unit, "HHMercStarportCargoInstalled", lv_unit, 1);
        UnitBehaviorAdd(lv_unit, "HHArmyOOCRegenSpeed", lv_unit, 1);
        Wait(0.0625, c_timeGame);
        UnitKill(lv_progressUnit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_Horner_HangerFinish_Init () {
    libCPCD_gt_CM_Horner_HangerFinish = TriggerCreate("libCPCD_gt_CM_Horner_HangerFinish_Func");
    TriggerEnable(libCPCD_gt_CM_Horner_HangerFinish, false);
    TriggerAddEventUnitArmMagazineProgress(libCPCD_gt_CM_Horner_HangerFinish, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHMira Takeover_Upgrade
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHMiraTakeover_Upgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_upgrade;
    int lv_delta;
    string lv_inInstance;
    string lv_unitType;
    string lv_skin;

    // Automatic Variable Declarations
    string autoEE56323F_userType;
    int autoEE56323F_i;
    string auto49BEEEB9_userType;
    string auto49BEEEB9_instance;
    string auto49BEEEB9_field;
    int auto49BEEEB9_i;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_upgrade = EventUpgradeName();
    lv_delta = EventUpgradeLevelDelta();

    // Conditions
    if (testConds) {
        if (!((lv_delta > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoEE56323F_userType = "TheHornersMiraTakeOver";
    autoEE56323F_i = 1;
    for ( ; autoEE56323F_i <= UserDataInstanceCount(autoEE56323F_userType) ; autoEE56323F_i += 1 ) {
        lv_inInstance = UserDataInstance(autoEE56323F_userType, autoEE56323F_i);
        if ((lv_upgrade == UserDataGetGameLink("TheHornersMiraTakeOver", lv_inInstance, "Upgrade", 1))) {
            lv_skin = UserDataGetGameLink("TheHornersMiraTakeOver", lv_inInstance, "Skin", 1);
            if ((DataTableGetBool(true, ("CM_MTO_SkinApplied_" + (lv_skin) + "_" + IntToString(lv_player))) == false)) {
                libCOMI_gf_PlayerApplySkinSignal(lv_player, lv_skin, true, "Signal Mira");
                auto49BEEEB9_userType = "TheHornersMiraTakeOver";
                auto49BEEEB9_instance = lv_inInstance;
                auto49BEEEB9_field = "Affected Units";
                auto49BEEEB9_i = 1;
                for ( ; auto49BEEEB9_i <= UserDataFieldValueCount(auto49BEEEB9_userType,auto49BEEEB9_field) ; auto49BEEEB9_i += 1 ) {
                    lv_unitType = UserDataGetGameLink(auto49BEEEB9_userType,auto49BEEEB9_instance,auto49BEEEB9_field, auto49BEEEB9_i);
                    if ((CatalogEntryIsValid(c_gameCatalogUnit, lv_unitType) == true)) {
                        CatalogFieldValueSet(c_gameCatalogUnit, lv_unitType, "TacticalAIChannel", lv_player, "MiraTakeOver");
                    }

                }
                DataTableSetBool(true, ("CM_MTO_SkinApplied_" + (lv_skin) + "_" + IntToString(lv_player)), true);
            }

            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHMiraTakeover_Upgrade_Init () {
    libCPCD_gt_CDHHMiraTakeover_Upgrade = TriggerCreate("libCPCD_gt_CDHHMiraTakeover_Upgrade_Func");
    TriggerEnable(libCPCD_gt_CDHHMiraTakeover_Upgrade, false);
    TriggerAddEventUpgradeLevelChanged(libCPCD_gt_CDHHMiraTakeover_Upgrade, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHDoubleSupplyStun
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHDoubleSupplyStun_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_sCV;
    unit lv_supplyDepot;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sCV = EventUnit();
    lv_supplyDepot = EventUnitProgressUnit();
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libCPGL_gv_commander[UnitGetOwner(EventUnitProgressUnit())].lv_commander == "Horner"))) {
            return false;
        }

        if (!((UnitGetType(lv_supplyDepot) == "SupplyDepot"))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(EventPlayer(), "HHDoubleSupply", c_techCountCompleteOnly) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_supplyDepot, "HHSupplyDepotInitialStun", lv_supplyDepot, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHDoubleSupplyStun_Init () {
    libCPCD_gt_CDHHDoubleSupplyStun = TriggerCreate("libCPCD_gt_CDHHDoubleSupplyStun_Func");
    TriggerEnable(libCPCD_gt_CDHHDoubleSupplyStun, false);
    TriggerAddEventUnitConstructProgress(libCPCD_gt_CDHHDoubleSupplyStun, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHDeathRattleHellionFearApply
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHDeathRattleHellionFearApply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_scaredUnit;
    point lv_attackLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scaredUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackLocation = PointWithOffsetPolar(UnitGetPosition(lv_scaredUnit), 1.0, libNtve_gf_RandomAngle());
    UnitIssueOrder(lv_scaredUnit, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_scaredUnit), -5.0, lv_attackLocation)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    while ((UnitHasBehavior2(lv_scaredUnit, "HHHellionTankFear") == true) && (UnitIsAlive(lv_scaredUnit) == true)) {
        UnitIssueOrder(lv_scaredUnit, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_scaredUnit), 3.0))), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    UnitIssueOrder(lv_scaredUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHDeathRattleHellionFearApply_Init () {
    libCPCD_gt_CDHHDeathRattleHellionFearApply = TriggerCreate("libCPCD_gt_CDHHDeathRattleHellionFearApply_Func");
    TriggerEnable(libCPCD_gt_CDHHDeathRattleHellionFearApply, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDHHDeathRattleHellionFearApply, null, "HHHellionTankFear", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHBomberPlatform_PlatformCreated
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHBomberPlatform_PlatformCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCPCD_gv_cDHHBomberPlatforms[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))], EventPlayerEffectUsedUnit(c_effectUnitCaster));
    libCPCD_gv_cDHHBomberPlatforms_TotalCount[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))] = UnitGroupCount(libCPCD_gv_cDHHBomberPlatforms[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))], c_unitCountAlive);
    Wait(0.01, c_timeGame);
    libCPCD_gf_CDHHBomberStatusCheck(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    PlayerAddChargeUsed(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), "Abil/HHBomberPlatformAreaBombTopBarOrder", -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHBomberPlatform_PlatformCreated_Init () {
    libCPCD_gt_CDHHBomberPlatform_PlatformCreated = TriggerCreate("libCPCD_gt_CDHHBomberPlatform_PlatformCreated_Func");
    TriggerEnable(libCPCD_gt_CDHHBomberPlatform_PlatformCreated, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDHHBomberPlatform_PlatformCreated, c_playerAny, "HHBomberPlatformCreateDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHBomberPlatform_PlatformDies
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHBomberPlatform_PlatformDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HHBomberPlatform"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(libCPCD_gv_cDHHBomberPlatforms_Ready[EventPlayer()], EventUnit()) == true)) {
        PlayerAddChargeUsed(EventPlayer(), "Abil/HHBomberPlatformAreaBombTopBarOrder", 1.0);
    }

    libCPCD_gf_CDHHBomberStatusCheck(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHBomberPlatform_PlatformDies_Init () {
    libCPCD_gt_CDHHBomberPlatform_PlatformDies = TriggerCreate("libCPCD_gt_CDHHBomberPlatform_PlatformDies_Func");
    TriggerEnable(libCPCD_gt_CDHHBomberPlatform_PlatformDies, false);
    TriggerAddEventUnitDied(libCPCD_gt_CDHHBomberPlatform_PlatformDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHBomberPlatform_BomberLaunched
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHBomberPlatform_BomberLaunched_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CDHHBomberStatusCheck(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHBomberPlatform_BomberLaunched_Init () {
    libCPCD_gt_CDHHBomberPlatform_BomberLaunched = TriggerCreate("libCPCD_gt_CDHHBomberPlatform_BomberLaunched_Func");
    TriggerEnable(libCPCD_gt_CDHHBomberPlatform_BomberLaunched, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDHHBomberPlatform_BomberLaunched, c_playerAny, "HHBomberPlatformAreaBombLaunchSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHBomberPlatform_BomberReturned
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHBomberPlatform_BomberReturned_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.01, c_timeGame);
    libCPCD_gf_CDHHBomberStatusCheck(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin));
    PlayerAddChargeUsed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "Abil/HHBomberPlatformAreaBombTopBarOrder", -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHBomberPlatform_BomberReturned_Init () {
    libCPCD_gt_CDHHBomberPlatform_BomberReturned = TriggerCreate("libCPCD_gt_CDHHBomberPlatform_BomberReturned_Func");
    TriggerEnable(libCPCD_gt_CDHHBomberPlatform_BomberReturned, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDHHBomberPlatform_BomberReturned, c_playerAny, "HHBomberDockCooldownDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHBomberPlatform_BomberRebuilt
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHBomberPlatform_BomberRebuilt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CDHHBomberStatusCheck(UnitGetOwner(EventUnit()));
    PlayerAddChargeUsed(UnitGetOwner(EventUnit()), "Abil/HHBomberPlatformAreaBombTopBarOrder", -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHBomberPlatform_BomberRebuilt_Init () {
    libCPCD_gt_CDHHBomberPlatform_BomberRebuilt = TriggerCreate("libCPCD_gt_CDHHBomberPlatform_BomberRebuilt_Func");
    TriggerEnable(libCPCD_gt_CDHHBomberPlatform_BomberRebuilt, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDHHBomberPlatform_BomberRebuilt, null, AbilityCommand("HHBomberPlatformHangar", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHBomberPlatform_TopBar_TargetSelected
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHBomberPlatform_TopBar_TargetSelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pickedUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCPCD_gv_cDHHBomberPlatforms_ReadyCount[EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)] >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pickedUnit = UnitGroupRandomUnit(libCPCD_gv_cDHHBomberPlatforms_Ready[EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)], c_unitCountAlive);
    if ((EventPlayerEffectUsedUnit(c_effectUnitTarget) != null)) {
        UnitIssueOrder(lv_pickedUnit, OrderTargetingUnit(AbilityCommand("HHBomberPlatformAreaBombOrder", 0), EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(lv_pickedUnit, OrderTargetingPoint(AbilityCommand("HHBomberPlatformAreaBombOrder", 0), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)), c_orderQueueReplace);
    }
    if ((UnitAbilityChargeInfo(libCPGL_gv_commander[EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)].lv_globalCasterUnit, AbilityCommand("HHBomberPlatformAreaBombTopBarOrder", 0), c_unitAbilChargeCountLeft) > 0.0)) {
        UISetTargetingOrder(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)), libCPGL_gv_commander[EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)].lv_globalCasterGroup, OrderTargetingPoint(AbilityCommand("HHBomberPlatformAreaBombTopBarOrder", 0), UnitGetPosition(libCPGL_gv_commander[EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)].lv_globalCasterUnit)), false);
    }

    PlayerAddChargeUsed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "Abil/HHBomberPlatformAreaBombTopBarOrder", -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHBomberPlatform_TopBar_TargetSelected_Init () {
    libCPCD_gt_CDHHBomberPlatform_TopBar_TargetSelected = TriggerCreate("libCPCD_gt_CDHHBomberPlatform_TopBar_TargetSelected_Func");
    TriggerEnable(libCPCD_gt_CDHHBomberPlatform_TopBar_TargetSelected, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDHHBomberPlatform_TopBar_TargetSelected, c_playerAny, "HHBomberPlatformAreaBombTopBarOrderDummyCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHBomberPlatform_Individual_TargetSelected
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHBomberPlatform_Individual_TargetSelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bomberPlayer;
    unit lv_bomberPlatform;
    unit lv_bomber;
    unit lv_bomberTargetUnit;
    point lv_bomberTargetPoint;
    bool lv_bomberTargetIsUnit;
    int lv_bomberState;
    actor lv_bomberTargetActor;
    bool lv_bomberDiveSoundPlayed;

    // Automatic Variable Declarations
    int autoE2C365B8_val;

    // Variable Initialization
    lv_bomberPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerAddChargeUsed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "Abil/HHBomberPlatformAreaBombTopBarOrder", 1.0);
    lv_bomberPlatform = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    UnitCreate(1, "HHBomber", c_unitCreateIgnorePlacement, lv_bomberPlayer, Point((PointGetX(UnitGetPosition(lv_bomberPlatform)) + 0.26), (PointGetY(UnitGetPosition(lv_bomberPlatform)) - 0.26)), 225.0);
    lv_bomber = UnitLastCreated();
    libNtve_gf_SendActorMessageToUnit(lv_bomber, "Signal LiftOff");
    UnitSetHeight(lv_bomber, 1.7, 0.0);
    lv_bomberState = 1;
    UnitBehaviorAdd(lv_bomberPlatform, "HHBomberPlatformAreaBombDisabler", lv_bomberPlatform, 1);
    libCPCD_gf_CDHHBomberStatusCheck(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin));
    if ((EventPlayerEffectUsedUnit(c_effectUnitTarget) != null)) {
        lv_bomberTargetIsUnit = true;
        lv_bomberTargetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
        lv_bomberTargetPoint = UnitGetPosition(lv_bomberTargetUnit);
        ActorCreate(ActorScopeFromUnit(lv_bomberTargetUnit), "HHBomberAreaBombWarning", null, null, null);
        lv_bomberTargetActor = libNtve_gf_ActorLastCreated();
        if ((TechTreeUpgradeCount(lv_bomberPlayer, "HHBomberNapalm", c_techCountCompleteOnly) > 0)) {
            ActorSend(lv_bomberTargetActor, "ModelSwap MiraHorner_Bomber_Coop_Cursor_Persist 255 PredecessorDestroyImmediate,PreventAllDynamicTextureTransfers");
        }

        ActorSend(lv_bomberTargetActor, "Signal OnUnit");
    }
    else {
        lv_bomberTargetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
        libNtve_gf_CreateActorAtPoint("HHBomberAreaBombWarning", lv_bomberTargetPoint);
        lv_bomberTargetActor = libNtve_gf_ActorLastCreated();
        if ((TechTreeUpgradeCount(lv_bomberPlayer, "HHBomberNapalm", c_techCountCompleteOnly) > 0)) {
            ActorSend(lv_bomberTargetActor, "ModelSwap MiraHorner_Bomber_Coop_Cursor_Persist 255 PredecessorDestroyImmediate,PreventAllDynamicTextureTransfers");
        }

    }
    UnitSetHeight(lv_bomber, 3.75, 0.5);
    ActorSend(lv_bomberTargetActor, (("SetScale " + CatalogFieldValueGet(c_gameCatalogActor, "HHBomberAreaBombWarning", "Scale", lv_bomberPlayer))));
    libNtve_gf_MakeUnitFacePoint(lv_bomber, lv_bomberTargetPoint, 0.5);
    Wait(0.5, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(lv_bomber, "Signal FlyOut");
    UnitIssueOrder(lv_bomber, OrderTargetingPoint(AbilityCommand("move", 0), lv_bomberTargetPoint), c_orderQueueReplace);
    while ((lv_bomberState > 0)) {
        autoE2C365B8_val = lv_bomberState;
        if (autoE2C365B8_val == 1) {
            if (((lv_bomberTargetIsUnit == true) && (UnitIsAlive(lv_bomberTargetUnit) == true))) {
                lv_bomberTargetPoint = UnitGetPosition(lv_bomberTargetUnit);
                UnitIssueOrder(lv_bomber, OrderTargetingPoint(AbilityCommand("move", 0), lv_bomberTargetPoint), c_orderQueueReplace);
            }

            if (((lv_bomberTargetIsUnit == false))) {
                UnitIssueOrder(lv_bomber, OrderTargetingPoint(AbilityCommand("move", 0), lv_bomberTargetPoint), c_orderQueueReplace);
            }

            if (((DistanceBetweenPoints(UnitGetPosition(lv_bomber), lv_bomberTargetPoint) < 20.0) && (lv_bomberDiveSoundPlayed == false))) {
                libNtve_gf_SendActorMessageToUnit(lv_bomber, "Signal DiveSoundStart");
                lv_bomberDiveSoundPlayed = true;
            }

            if ((DistanceBetweenPoints(UnitGetPosition(lv_bomber), lv_bomberTargetPoint) < 6.0)) {
                UnitCreateEffectPoint(lv_bomber, "HHBomberAreaBombInitialSet", lv_bomberTargetPoint);
                Wait(0.0625, c_timeGame);
                lv_bomberState = 2;
                ActorSend(lv_bomberTargetActor, "Destroy");
            }

        }
        else if (autoE2C365B8_val == 2) {
            UnitIssueOrder(lv_bomber, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_bomberPlatform)), c_orderQueueReplace);
            if (((DistanceBetweenPoints(UnitGetPosition(lv_bomber), UnitGetPosition(lv_bomberPlatform)) < 1.0) && (UnitHasBehavior2(lv_bomber, "HHBomberFiredReturnDelay") == false))) {
                UnitCreateEffectUnit(lv_bomberPlatform, "HHBomberPlatformAreaBombReturnSet", lv_bomber);
                UnitRemove(lv_bomber);
                libCPCD_gf_CDHHBomberStatusCheck(lv_bomberPlayer);
                lv_bomberState = 0;
            }

        }
        else {
        }
        if (((UnitIsAlive(lv_bomber) == false) && (lv_bomberState > 0))) {
            lv_bomberState = 0;
            UnitCreateEffectUnit(lv_bomberPlatform, "KillMagazine", lv_bomberPlatform);
            ActorSend(lv_bomberTargetActor, "Destroy");
        }

        if ((UnitIsAlive(lv_bomberPlatform) == false)) {
            UnitKill(lv_bomber);
            libCPCD_gf_CDHHBomberStatusCheck(lv_bomberPlayer);
            lv_bomberState = 0;
            ActorSend(lv_bomberTargetActor, "Destroy");
        }

        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHBomberPlatform_Individual_TargetSelected_Init () {
    libCPCD_gt_CDHHBomberPlatform_Individual_TargetSelected = TriggerCreate("libCPCD_gt_CDHHBomberPlatform_Individual_TargetSelected_Func");
    TriggerEnable(libCPCD_gt_CDHHBomberPlatform_Individual_TargetSelected, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDHHBomberPlatform_Individual_TargetSelected, c_playerAny, "HHBomberPlatformAreaBombOrderTargetDummyCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHStarportRecreateTechLabOrder
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHStarportRecreateTechLabOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_starport;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_starport = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_starport) == "HHStarport"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_starport, OrderTargetingPoint(AbilityCommand("HHStarportAddOns", 0), UnitGetPosition(lv_starport)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHStarportRecreateTechLabOrder_Init () {
    libCPCD_gt_CDHHStarportRecreateTechLabOrder = TriggerCreate("libCPCD_gt_CDHHStarportRecreateTechLabOrder_Func");
    TriggerEnable(libCPCD_gt_CDHHStarportRecreateTechLabOrder, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDHHStarportRecreateTechLabOrder, null, "StarportTechLab", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHStarportRecreate
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHStarportRecreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_starport;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_starport = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_starport) == "HHStarport"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HHStarport", c_unitCreateConstruct | c_unitCreateIgnorePlacement, EventPlayer(), UnitGetPosition(lv_starport));
    UnitKill(libCPCD_gv_cDHHTechLab);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHStarportRecreate_Init () {
    libCPCD_gt_CDHHStarportRecreate = TriggerCreate("libCPCD_gt_CDHHStarportRecreate_Func");
    TriggerEnable(libCPCD_gt_CDHHStarportRecreate, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDHHStarportRecreate, c_playerAny, "HHStarportDeathDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHStarportFinishCreateTechLabOrder
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHStarportFinishCreateTechLabOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_starport;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_starport = EventUnitProgressUnit();
    lv_player = UnitGetOwner(lv_starport);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_starport) == "HHStarport"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_starport, OrderTargetingPoint(AbilityCommand("HHStarportAddOns", 0), UnitGetPosition(lv_starport)), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(lv_starport, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHStarportFinishCreateTechLabOrder_Init () {
    libCPCD_gt_CDHHStarportFinishCreateTechLabOrder = TriggerCreate("libCPCD_gt_CDHHStarportFinishCreateTechLabOrder_Func");
    TriggerEnable(libCPCD_gt_CDHHStarportFinishCreateTechLabOrder, false);
    TriggerAddEventUnitConstructProgress(libCPCD_gt_CDHHStarportFinishCreateTechLabOrder, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHStarportCreateTechLabOrder
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHStarportCreateTechLabOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_starport;
    int lv_player;
    point lv_point;
    int lv_x;
    int lv_y;
    point lv_pointGrid;
    fixed lv_hHStarportTrainRavenCooldown;
    fixed lv_hHStarportTrainWraithCooldown;
    fixed lv_hHStarportTrainVikingCooldown;
    fixed lv_hHStarportTrainBattlecruiserCooldown;
    fixed lv_hHStarportTrainRavenCharges;
    fixed lv_hHStarportTrainWraithCharges;
    fixed lv_hHStarportTrainVikingCharges;
    fixed lv_hHStarportTrainBattlecruiserCharges;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_starport = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = EventPlayer();
    lv_point = UnitGetPosition(lv_starport);
    lv_x = FixedToInt(PointGetX(lv_point));
    lv_y = FixedToInt(PointGetY(lv_point));
    lv_pointGrid = Point((lv_x + 0.5), (lv_y + 0.5));

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(lv_starport, "Signal Entry");
    CatalogReferenceModify("Actor,StarportTechLab,HighlightTooltip", lv_player, "Unit/Name/TechLabMira", c_upgradeOperationSet);
    UnitBehaviorAddPlayer(lv_starport, "PermanentlyUncommandable", lv_player, 1);
    UnitBehaviorAddPlayer(lv_starport, "PermanentlyInvulnerable", lv_player, 1);
    libNtve_gf_PlayerRemoveChargeUsed(lv_player, "HHStarportTrainWraith");
    lv_hHStarportTrainWraithCharges = PlayerGetChargeUsed(lv_player, "HHStarportTrainWraith");
    PlayerAddChargeUsed(lv_player, "HHStarportTrainWraith", (5.0 - lv_hHStarportTrainWraithCharges));
    lv_hHStarportTrainWraithCooldown = PlayerGetChargeRegen(lv_player, "HHStarportTrainWraith");
    PlayerAddChargeRegenRemaining(lv_player, "HHStarportTrainWraith", (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "HHStarportTrainHorner", "InfoArray[" + IntToString(0) + "].Charge.TimeStart", lv_player) - lv_hHStarportTrainWraithCooldown));
    libNtve_gf_PlayerRemoveChargeUsed(lv_player, "HHStarportTrainViking");
    lv_hHStarportTrainVikingCharges = PlayerGetChargeUsed(lv_player, "HHStarportTrainViking");
    PlayerAddChargeUsed(lv_player, "HHStarportTrainViking", (5.0 - lv_hHStarportTrainVikingCharges));
    lv_hHStarportTrainVikingCooldown = PlayerGetChargeRegen(lv_player, "HHStarportTrainViking");
    PlayerAddChargeRegenRemaining(lv_player, "HHStarportTrainViking", (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "HHStarportTrainHorner", "InfoArray[" + IntToString(1) + "].Charge.TimeStart", lv_player) - lv_hHStarportTrainVikingCooldown));
    libNtve_gf_PlayerRemoveChargeUsed(lv_player, "HHStarportTrainBattlecruiser");
    lv_hHStarportTrainBattlecruiserCharges = PlayerGetChargeUsed(lv_player, "HHStarportTrainBattlecruiser");
    PlayerAddChargeUsed(lv_player, "HHStarportTrainBattlecruiser", (5.0 - lv_hHStarportTrainBattlecruiserCharges));
    lv_hHStarportTrainBattlecruiserCooldown = PlayerGetChargeRegen(lv_player, "HHStarportTrainBattlecruiser");
    PlayerAddChargeRegenRemaining(lv_player, "HHStarportTrainBattlecruiser", (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "HHStarportTrainHorner", "InfoArray[" + IntToString(2) + "].Charge.TimeStart", lv_player) - lv_hHStarportTrainBattlecruiserCooldown));
    libNtve_gf_PlayerRemoveChargeUsed(lv_player, "HHStarportTrainRaven");
    lv_hHStarportTrainRavenCharges = PlayerGetChargeUsed(lv_player, "HHStarportTrainRaven");
    PlayerAddChargeUsed(lv_player, "HHStarportTrainRaven", (5.0 - lv_hHStarportTrainRavenCharges));
    lv_hHStarportTrainRavenCooldown = PlayerGetChargeRegen(lv_player, "HHStarportTrainRaven");
    PlayerAddChargeRegenRemaining(lv_player, "HHStarportTrainRaven", (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "HHStarportTrainHorner", "InfoArray[" + IntToString(3) + "].Charge.TimeStart", lv_player) - lv_hHStarportTrainRavenCooldown));
    Wait(5.4, c_timeGame);
    UnitBehaviorRemove(lv_starport, "PermanentlyUncommandable", 1);
    UnitIssueOrder(lv_starport, OrderTargetingPoint(AbilityCommand("HHStarportAddOns", 0), UnitGetPosition(lv_starport)), c_orderQueueReplace);
    UnitBehaviorAddPlayer(lv_starport, "PermanentlyUncommandable", lv_player, 1);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHStarportCreateTechLabOrder_Init () {
    libCPCD_gt_CDHHStarportCreateTechLabOrder = TriggerCreate("libCPCD_gt_CDHHStarportCreateTechLabOrder_Func");
    TriggerEnable(libCPCD_gt_CDHHStarportCreateTechLabOrder, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDHHStarportCreateTechLabOrder, c_playerAny, "HHStarportBirthDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHStarportCreateTechLabStart
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHStarportCreateTechLabStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_starport;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_starport = EventUnit();
    lv_player = UnitGetOwner(lv_starport);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_starport) == "HHStarport"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gv_cDHHTechLab = EventUnitCreatedUnit();
    UnitBehaviorAddPlayer(libCPCD_gv_cDHHTechLab, "PermanentlyUncommandable", lv_player, 1);
    libNtve_gf_MakeUnitInvulnerable(libCPCD_gv_cDHHTechLab, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHStarportCreateTechLabStart_Init () {
    libCPCD_gt_CDHHStarportCreateTechLabStart = TriggerCreate("libCPCD_gt_CDHHStarportCreateTechLabStart_Func");
    TriggerEnable(libCPCD_gt_CDHHStarportCreateTechLabStart, false);
    TriggerAddEventUnitCreated(libCPCD_gt_CDHHStarportCreateTechLabStart, null, "HHStarportAddOns", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHStarportCreateTechLabFinish
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHStarportCreateTechLabFinish_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_starport;
    unit lv_addon;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_starport = EventUnit();
    lv_addon = EventUnitProgressUnit();
    lv_player = UnitGetOwner(lv_starport);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_starport, "PermanentlyUncommandable", 1);
    UnitBehaviorRemove(lv_addon, "PermanentlyUncommandable", 1);
    UnitBehaviorRemove(lv_starport, "PermanentlyInvulnerable", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHStarportCreateTechLabFinish_Init () {
    libCPCD_gt_CDHHStarportCreateTechLabFinish = TriggerCreate("libCPCD_gt_CDHHStarportCreateTechLabFinish_Func");
    TriggerEnable(libCPCD_gt_CDHHStarportCreateTechLabFinish, false);
    TriggerAddEventUnitConstructProgress(libCPCD_gt_CDHHStarportCreateTechLabFinish, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHSupplyAchievement
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHSupplyAchievement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libCPGL_gv_commander[lv_player].lv_commander == "Horner"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CDHHStatUpdate(lv_player);
    if (((libCPCD_gf_DifficultyLevelForPlayerCoop(lv_player) == 3) || (libCPCD_gf_DifficultyLevelForPlayerCoop(lv_player) == 4)) && ((libCPCD_gv_cDHHMiraFactionSupply[lv_player] >= 80.0) && (libCPCD_gv_cDHHMattFactionSupply[lv_player] >= 40.0))) {
        AchievementAward(lv_player, "CommanderHornerSupply");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHSupplyAchievement_Init () {
    libCPCD_gt_CDHHSupplyAchievement = TriggerCreate("libCPCD_gt_CDHHSupplyAchievement_Func");
    TriggerEnable(libCPCD_gt_CDHHSupplyAchievement, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDHHSupplyAchievement, c_playerAny, "TheHornersStatUpdate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHScrapDrop
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHScrapDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dyingUnitMineralCost;
    int lv_dyingUnitVespeneCost;
    int lv_dyingUnitPlayer;
    int lv_scrapPlayerDivisor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scrapPlayerDivisor = 10;

    // Conditions
    if (testConds) {
        if (!((libCPGL_gf_PlayerhasaCommanderAllyinPlayerGroup(UnitGetOwner(EventUnit()), "Horner", libCPGL_gf_HumanPlayers()) == true))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeTimeout) == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "NoScrapDrop") != true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(libNtve_gf_KillingUnit()), UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0)) != true))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dyingUnitPlayer = UnitGetOwner(EventUnit());
    if ((lv_dyingUnitPlayer == c_playerAny)) {
        return true;
    }

    if ((libCPGL_gv_commander[lv_dyingUnitPlayer].lv_commander == "Horner")) {
        lv_scrapPlayerDivisor = 5;
    }

    lv_dyingUnitMineralCost = (FixedToInt(StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "CostResource[" + IntToString(0) + "]", EventPlayer()))) / lv_scrapPlayerDivisor);
    lv_dyingUnitVespeneCost = (FixedToInt(StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "CostResource[" + IntToString(1) + "]", EventPlayer()))) / lv_scrapPlayerDivisor);
    if ((UnitHasBehavior2(EventUnit(), "TychusHeroCount") == true)) {
        lv_dyingUnitMineralCost = (250 / lv_scrapPlayerDivisor);
        lv_dyingUnitVespeneCost = 0;
    }

    if ((lv_dyingUnitMineralCost > 0)) {
        if ((RandomInt(1, 100) <= FixedToInt(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryHornerDoubleSalvageChanceDisplayDummy", "Amount", libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranHorner", libCOOC_gf_CC_PlayersOfCommander("TerranHorner")))))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HHScrapPickup", 0, lv_dyingUnitPlayer, PointWithOffset(UnitGetPosition(EventUnit()), -0.25, 0.0));
            libCPCD_gf_CDHHScrapResourceSetStack(UnitLastCreated(), lv_dyingUnitMineralCost, lv_dyingUnitVespeneCost);
            if ((lv_dyingUnitVespeneCost == 0)) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap HHScrapMineral");
            }

            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HHScrapPickup", 0, lv_dyingUnitPlayer, PointWithOffset(UnitGetPosition(EventUnit()), 0.25, 0.0));
            libCPCD_gf_CDHHScrapResourceSetStack(UnitLastCreated(), lv_dyingUnitMineralCost, lv_dyingUnitVespeneCost);
            if ((lv_dyingUnitVespeneCost == 0)) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap HHScrapMineral");
            }

        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HHScrapPickup", 0, lv_dyingUnitPlayer, UnitGetPosition(EventUnit()));
            libCPCD_gf_CDHHScrapResourceSetStack(UnitLastCreated(), lv_dyingUnitMineralCost, lv_dyingUnitVespeneCost);
            if ((lv_dyingUnitVespeneCost == 0)) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap HHScrapMineral");
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHScrapDrop_Init () {
    libCPCD_gt_CDHHScrapDrop = TriggerCreate("libCPCD_gt_CDHHScrapDrop_Func");
    TriggerEnable(libCPCD_gt_CDHHScrapDrop, false);
    TriggerAddEventUnitDied(libCPCD_gt_CDHHScrapDrop, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHScrapDropForSwannWreckage
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHScrapDropForSwannWreckage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dyingUnitMineralCost;
    int lv_dyingUnitVespeneCost;
    int lv_dyingUnitPlayer;
    int lv_scrapPlayerDivisor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scrapPlayerDivisor = 10;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dyingUnitPlayer = UnitGetOwner(EventUnit());
    if ((lv_dyingUnitPlayer == c_playerAny)) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "SiegeTankWreckage")) {
        lv_dyingUnitMineralCost = (UnitTypeGetCost("SiegeTank", c_unitCostMinerals) / lv_scrapPlayerDivisor);
        lv_dyingUnitVespeneCost = (UnitTypeGetCost("SiegeTank", c_unitCostVespene) / lv_scrapPlayerDivisor);
    }

    if ((UnitGetType(EventUnit()) == "ThorWreckageSwann")) {
        lv_dyingUnitMineralCost = (UnitTypeGetCost("Thor", c_unitCostMinerals) / lv_scrapPlayerDivisor);
        lv_dyingUnitVespeneCost = (UnitTypeGetCost("Thor", c_unitCostVespene) / lv_scrapPlayerDivisor);
    }

    if ((lv_dyingUnitMineralCost > 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HHScrapPickup", 0, lv_dyingUnitPlayer, UnitGetPosition(EventUnit()));
        libCPCD_gf_CDHHScrapResourceSetStack(UnitLastCreated(), lv_dyingUnitMineralCost, lv_dyingUnitVespeneCost);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHScrapDropForSwannWreckage_Init () {
    libCPCD_gt_CDHHScrapDropForSwannWreckage = TriggerCreate("libCPCD_gt_CDHHScrapDropForSwannWreckage_Func");
    TriggerEnable(libCPCD_gt_CDHHScrapDropForSwannWreckage, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDHHScrapDropForSwannWreckage, null, AbilityCommand("SiegeTankWreckage", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDHHScrapDropForSwannWreckage, null, AbilityCommand("ThorWreckageSwann", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHScrapPickup
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHScrapPickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minerals;
    int lv_vespene;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_minerals = FixedToInt(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 62));
    lv_vespene = FixedToInt(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 63));
    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), c_playerPropMinerals, c_playerPropOperAdd, lv_minerals);
    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), c_playerPropVespene, c_playerPropOperAdd, lv_vespene);
    if ((lv_minerals > 0) && (lv_vespene > 0)) {
        TextExpressionSetToken("Param/Expression/lib_CPCD_7D5B8C6E", "Minerals", IntToText(lv_minerals));
        TextExpressionSetToken("Param/Expression/lib_CPCD_7D5B8C6E", "Vespene", IntToText(lv_vespene));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_CPCD_7D5B8C6E"), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 3.0, true, false, PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)));
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_CPCD_FD3ACE8C", "Minerals", IntToText(lv_minerals));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_CPCD_FD3ACE8C"), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 3.0, true, false, PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)));
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
    }
    Wait(1.5, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHScrapPickup_Init () {
    libCPCD_gt_CDHHScrapPickup = TriggerCreate("libCPCD_gt_CDHHScrapPickup_Func");
    TriggerEnable(libCPCD_gt_CDHHScrapPickup, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDHHScrapPickup, c_playerAny, "HHScrapPickupDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHDeathRattle_Reaper
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHDeathRattle_Reaper_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_maxRange;
    unit lv_reaper;
    unit lv_target;
    fixed lv_distance;
    fixed lv_range;
    point lv_targetpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_maxRange = 6.5;
    lv_reaper = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_distance = DistanceBetweenPoints(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    lv_range = MinF(lv_distance, lv_maxRange);
    lv_targetpoint = libNtve_gf_PointOffsetTowardsPoint(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), lv_range, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(lv_reaper) == "HHReaper") || (UnitGetType(lv_reaper) == "HHReaperFlying")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "MasteryHornerBetterDeathRattle", c_techCountQueuedOrBetter) >= 1) && (RandomInt(1, 100) <= FixedToInt(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryHornerBetterDeathRattleDisplayDummy", "Amount", EventPlayer())))) {
        UnitCreateEffectPoint(lv_reaper, "HHD8ClusterDeathSetUpgrade", lv_targetpoint);
    }
    else {
        UnitCreateEffectPoint(lv_reaper, "HHD8ClusterDeathSet", lv_targetpoint);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHDeathRattle_Reaper_Init () {
    libCPCD_gt_CDHHDeathRattle_Reaper = TriggerCreate("libCPCD_gt_CDHHDeathRattle_Reaper_Func");
    TriggerEnable(libCPCD_gt_CDHHDeathRattle_Reaper, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDHHDeathRattle_Reaper, c_playerAny, "HHD8ClusterDeathSetTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHDeathRattle_WidowMine
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHDeathRattle_WidowMine_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)) == "HHWidowMine") || (UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)) == "HHWidowMineBurrowed")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranHorner", libCOOC_gf_CC_PlayersOfCommander("TerranHorner")), "MasteryHornerBetterDeathRattle", c_techCountQueuedOrBetter) >= 1) && (RandomInt(1, 100) <= FixedToInt(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryHornerBetterDeathRattleDisplayDummy", "Amount", libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranHorner", libCOOC_gf_CC_PlayersOfCommander("TerranHorner")))))) {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitSource), "HHWidowMineBlossomIssueOrderSetUpgrade", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)));
    }
    else {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitSource), "HHWidowMineBlossomIssueOrderSet", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHDeathRattle_WidowMine_Init () {
    libCPCD_gt_CDHHDeathRattle_WidowMine = TriggerCreate("libCPCD_gt_CDHHDeathRattle_WidowMine_Func");
    TriggerEnable(libCPCD_gt_CDHHDeathRattle_WidowMine, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDHHDeathRattle_WidowMine, libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranHorner", libCOOC_gf_CC_PlayersOfCommander("TerranHorner")), "HHWidowMineBlossomIssueOrderSetTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHDeathRattle_Hellion
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHDeathRattle_Hellion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)) == "HHHellion")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranHorner", libCOOC_gf_CC_PlayersOfCommander("TerranHorner")), "MasteryHornerBetterDeathRattle", c_techCountQueuedOrBetter) >= 1) && (RandomInt(1, 100) <= FixedToInt(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryHornerBetterDeathRattleDisplayDummy", "Amount", libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranHorner", libCOOC_gf_CC_PlayersOfCommander("TerranHorner")))))) {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitSource), "HHHellionStimDeathSetUpgrade", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)));
    }
    else {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitSource), "HHHellionStimDeathSet", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHDeathRattle_Hellion_Init () {
    libCPCD_gt_CDHHDeathRattle_Hellion = TriggerCreate("libCPCD_gt_CDHHDeathRattle_Hellion_Func");
    TriggerEnable(libCPCD_gt_CDHHDeathRattle_Hellion, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDHHDeathRattle_Hellion, libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranHorner", libCOOC_gf_CC_PlayersOfCommander("TerranHorner")), "HHHellionStimDeathSetTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDHHDeathRattle_Hellbat
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDHHDeathRattle_Hellbat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)) == "HHHellionTank")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranHorner", libCOOC_gf_CC_PlayersOfCommander("TerranHorner")), "MasteryHornerBetterDeathRattle", c_techCountQueuedOrBetter) >= 1) && (RandomInt(1, 100) <= FixedToInt(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryHornerBetterDeathRattleDisplayDummy", "Amount", libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranHorner", libCOOC_gf_CC_PlayersOfCommander("TerranHorner")))))) {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitSource), "HHHellionTankDeathFearSetUpgrade", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)));
    }
    else {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitSource), "HHHellionTankDeathFearSet", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDHHDeathRattle_Hellbat_Init () {
    libCPCD_gt_CDHHDeathRattle_Hellbat = TriggerCreate("libCPCD_gt_CDHHDeathRattle_Hellbat_Func");
    TriggerEnable(libCPCD_gt_CDHHDeathRattle_Hellbat, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDHHDeathRattle_Hellbat, libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranHorner", libCOOC_gf_CC_PlayersOfCommander("TerranHorner")), "HHHellionTankDeathFearSetTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusTriggersInit
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusTriggersInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCPCD_gt_CDTychusEventHook, true);
    TriggerEnable(libCPCD_gt_CDTychusOdinBirthTychusDeselect, true);
    TriggerEnable(libCPCD_gt_CDTychusHeroQueue, true);
    TriggerEnable(libCPCD_gt_CDTychusHeroCancel, true);
    TriggerEnable(libCPCD_gt_CDTychusSpectreAuraOn, true);
    TriggerEnable(libCPCD_gt_CDTychusSpectreAuraOff, true);
    TriggerEnable(libCPCD_gt_CDTychusMedicTransportActived, true);
    TriggerEnable(libCPCD_gt_CDTychusMedicTopBarButton, true);
    TriggerEnable(libCPCD_gt_CDTychusMedicTransportTargetOn, true);
    TriggerEnable(libCPCD_gt_CDTychusMedicTransportTargetOff, true);
    TriggerEnable(libCPCD_gt_CDTychusMedicTransportStop, true);
    TriggerEnable(libCPCD_gt_CDTychusMedicTransportTimeOut, true);
    TriggerEnable(libCPCD_gt_CDTychusMedicTransportAirBehaviorApplied, true);
    TriggerEnable(libCPCD_gt_CDTychusMedicTransportGroundBehaviorApplied, true);
    TriggerEnable(libCPCD_gt_CDTychusMedicTransportTeleportUnload, true);
    TriggerEnable(libCPCD_gt_CDTychusWarhoundFearApply, true);
    TriggerEnable(libCPCD_gt_CDTychusReviveWarhoundCharges, true);
    TriggerEnable(libCPCD_gt_CDTychusReviveReaperCharges, true);
    TriggerEnable(libCPCD_gt_CDTychusTrainMaxChargesRemove, true);
    TriggerEnable(libCPCD_gt_CDTychusOdinDeathTychusSelect, true);
    TriggerEnable(libCPCD_gt_CDTychusOdinCalldownUIUpdate, true);
    TriggerEnable(libCPCD_gt_CDTychusOdinBirth, true);
    TriggerEnable(libCPCD_gt_CDTychusOdinCameraShake, true);
    TriggerEnable(libCPCD_gt_CDTychusOdinTimeout, true);
    TriggerEnable(libCPCD_gt_CDTychusEventHook, true);
    TriggerEnable(libCPCD_gt_CDTychusHERC_CriticalText, true);
    TriggerEnable(libCPCD_gt_CDTychusHERC_ShieldCooldown, true);
    TriggerEnable(libCPCD_gt_CDTychusOilBombFireDamageResponse, true);
    TriggerEnable(libCPCD_gt_CDTychusHeroPurchaseDummy, true);
    TriggerEnable(libCPCD_gt_CDTychusHeroChargeTiming, true);
    TriggerEnable(libCPCD_gt_CDTychusReviveUsed, true);
    TriggerEnable(libCPCD_gt_CDTychusReviveFailsafe, true);
    TriggerEnable(libCPCD_gt_CDTychusReplaceResearchCenter, true);
    TriggerEnable(libCPCD_gt_CDTychusTriUnitSpeedUpgrade, true);
    TriggerEnable(libCPCD_gt_CDTychusTriUnitHealthUpgrade, true);
    TriggerEnable(libCPCD_gt_AchievementTychusGear, true);
    TriggerEnable(libCPCD_gt_AchievementTychusHeal, true);
    TriggerEnable(libCPCD_gt_CDTychusSnareFailSafe, true);
    TriggerExecute(libCPCD_gt_CDTychusHeroChargeTiming, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusTriggersInit_Init () {
    libCPCD_gt_CDTychusTriggersInit = TriggerCreate("libCPCD_gt_CDTychusTriggersInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusWarhoundFearApply
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusWarhoundFearApply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_scaredUnit;
    point lv_attackLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scaredUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackLocation = PointWithOffsetPolar(UnitGetPosition(lv_scaredUnit), 1.0, libNtve_gf_RandomAngle());
    UnitIssueOrder(lv_scaredUnit, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_scaredUnit), -5.0, lv_attackLocation)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    while ((UnitHasBehavior2(lv_scaredUnit, "TychusWarhoundFear") == true) && (UnitIsAlive(lv_scaredUnit) == true)) {
        UnitIssueOrder(lv_scaredUnit, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_scaredUnit), 3.0))), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    UnitIssueOrder(lv_scaredUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusWarhoundFearApply_Init () {
    libCPCD_gt_CDTychusWarhoundFearApply = TriggerCreate("libCPCD_gt_CDTychusWarhoundFearApply_Func");
    TriggerEnable(libCPCD_gt_CDTychusWarhoundFearApply, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDTychusWarhoundFearApply, null, "TychusWarhoundFear", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDTychusWarhoundFearApply, null, "TychusWarhoundFear", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusHERC_ShieldCooldown
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusHERC_ShieldCooldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_behavior;
    fixed lv_cooldown;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_behavior = EventUnitBehavior();
    lv_cooldown = UnitBehaviorDurationTotal(lv_unit, lv_behavior);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitModifyCooldown(lv_unit, "ShieldCooldown", lv_cooldown, c_cooldownOperationSet);
    UnitModifyCooldown(lv_unit, "ShieldCooldown", lv_cooldown, c_cooldownOperationSet);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusHERC_ShieldCooldown_Init () {
    libCPCD_gt_CDTychusHERC_ShieldCooldown = TriggerCreate("libCPCD_gt_CDTychusHERC_ShieldCooldown_Func");
    TriggerEnable(libCPCD_gt_CDTychusHERC_ShieldCooldown, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDTychusHERC_ShieldCooldown, null, "TychusHERCShieldWeakness", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusHERC_CriticalText
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusHERC_CriticalText_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_crittexttag;
    int lv_critmultiplier;
    int lv_ragestacks;
    int lv_ragedamage;
    int lv_weapondamage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_crittexttag = c_textTagNone;
    lv_critmultiplier = CatalogReferenceGetAsInt("Behavior,TychusHercCritPassive,DamageResponse.ModifyFraction", libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranTychus", libCOOC_gf_CC_PlayersOfCommander("TerranTychus")));
    lv_ragestacks = UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TychusHercRageDamageBuff");
    lv_ragedamage = CatalogReferenceGetAsInt("Behavior,TychusHercRageDamageBuff,Modification.DamageDealtUnscaled[Melee]", libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranTychus", libCOOC_gf_CC_PlayersOfCommander("TerranTychus")));
    lv_weapondamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "TychusHERCWeaponDamage", "Amount", libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranTychus", libCOOC_gf_CC_PlayersOfCommander("TerranTychus")));

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TychusHercRageDamageBuff") == 0)) {
        TextExpressionSetToken("Param/Expression/lib_CPCD_7C56E3E1", "A", FixedToText(((lv_critmultiplier * (lv_weapondamage + (lv_ragestacks * lv_ragedamage))) - (UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TychusHercRageDamageBuff") * (lv_critmultiplier * lv_ragedamage))), c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/lib_CPCD_7C56E3E1", "B", StringExternal("Param/Value/lib_CPCD_03F31EC3"));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_CPCD_7C56E3E1"), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 3.0, true, false, PlayerGroupAll());
    }
    else if ((UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TychusHercRageDamageBuff") > 0) && (UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TychusHercRageDamageBuff") < CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "TychusHercRageDamageBuff", "MaxStackCount", libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranTychus", libCOOC_gf_CC_PlayersOfCommander("TerranTychus"))))) {
        TextExpressionSetToken("Param/Expression/lib_CPCD_B30A073D", "A", FixedToText(((lv_critmultiplier * (lv_weapondamage + (lv_ragestacks * lv_ragedamage))) - (lv_critmultiplier * lv_ragedamage)), c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/lib_CPCD_B30A073D", "B", StringExternal("Param/Value/lib_CPCD_40606595"));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_CPCD_B30A073D"), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 3.0, true, false, PlayerGroupAll());
    }
    else if ((UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TychusHercRageDamageBuff") == CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "TychusHercRageDamageBuff", "MaxStackCount", libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranTychus", libCOOC_gf_CC_PlayersOfCommander("TerranTychus"))))) {
        TextExpressionSetToken("Param/Expression/lib_CPCD_90C0F353", "A", FixedToText((lv_critmultiplier * (lv_weapondamage + (lv_ragestacks * lv_ragedamage))), c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/lib_CPCD_90C0F353", "B", StringExternal("Param/Value/lib_CPCD_0511F116"));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_CPCD_90C0F353"), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 3.0, true, false, PlayerGroupAll());
    }
    lv_crittexttag = TextTagLastCreated();
    TextTagSetColor(lv_crittexttag, c_textTagColorText, Color(100.00, 0.00, 0.00));
    TextTagSetVelocity(lv_crittexttag, 0.5, 90.0);
    Wait(2.0, c_timeGame);
    TextTagDestroy(lv_crittexttag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusHERC_CriticalText_Init () {
    libCPCD_gt_CDTychusHERC_CriticalText = TriggerCreate("libCPCD_gt_CDTychusHERC_CriticalText_Func");
    TriggerEnable(libCPCD_gt_CDTychusHERC_CriticalText, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDTychusHERC_CriticalText, libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranTychus", libCOOC_gf_CC_PlayersOfCommander("TerranTychus")), "TychusHERCWeaponDamageCritDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusSnareFailSafe
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusSnareFailSafe_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(3.0, c_timeGame);
    UnitSetHeight(lv_u, UnitGetPropertyFixed(lv_u, c_unitPropHeight, c_unitPropNormal), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusSnareFailSafe_Init () {
    libCPCD_gt_CDTychusSnareFailSafe = TriggerCreate("libCPCD_gt_CDTychusSnareFailSafe_Func");
    TriggerEnable(libCPCD_gt_CDTychusSnareFailSafe, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDTychusSnareFailSafe, null, "TychusGhostPsychicSnare", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusOilBombFireDamageResponse
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusOilBombFireDamageResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_oilcaster;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_oilcaster = libCPCD_gv_cDTychusFirebatOilCaster;

    // Conditions
    if (testConds) {
        if (!((CatalogFieldValueGet(c_gameCatalogEffect, EventUnitDamageEffect(), "Death", EventUnitDamageSourcePlayer()) == "Fire"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_oilcaster == null)) {
        libCPCD_gv_cDTychusFirebatOilCaster = UnitGroupUnit(UnitGroup("TychusFirebat", libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranTychus", libCOOC_gf_CommanderPlayers()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), 0), 0), 1);
        lv_oilcaster = libCPCD_gv_cDTychusFirebatOilCaster;
    }

    if ((UnitIsAlive(EventUnit()) == true)) {
        UnitBehaviorAdd(EventUnit(), "TychusFirebatOilFire", lv_oilcaster, 1);
    }
    else if ((TechTreeUpgradeCount(UnitGetOwner(lv_oilcaster), "TychusFirebatIncendiaryPetroleum", c_techCountCompleteOnly) > 0)) {
        UnitCreateEffectPoint(lv_oilcaster, "TychusFirebatOilFireSearchTrigger", UnitGetPosition(EventUnit()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusOilBombFireDamageResponse_Init () {
    libCPCD_gt_CDTychusOilBombFireDamageResponse = TriggerCreate("libCPCD_gt_CDTychusOilBombFireDamageResponse_Func");
    TriggerEnable(libCPCD_gt_CDTychusOilBombFireDamageResponse, false);
    TriggerAddEventUnitDamageAbsorbed(libCPCD_gt_CDTychusOilBombFireDamageResponse, null, "TychusFirebatOilBombed");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusSpectreAuraOn
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusSpectreAuraOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    string lv_uT;
    string lv_itInstance;
    string lv_itActive;
    string lv_itUnitType;
    fixed lv_oldValue;
    fixed lv_changedValue;
    int lv_p;
    string lv_pathCooldown;
    string lv_pathCharge;

    // Automatic Variable Declarations
    string autoFAF05098_userType;
    int autoFAF05098_i;

    // Variable Initialization
    lv_u = EventUnit();
    lv_uT = UnitGetType(lv_u);
    lv_p = UnitGetOwner(lv_u);
    lv_pathCooldown = "Cost[0].Cooldown.TimeUse";
    lv_pathCharge = "Cost[0].Charge.TimeUse";

    // Actions
    if (!runActions) {
        return true;
    }

    autoFAF05098_userType = "CoopTechTychusSquad";
    autoFAF05098_i = 1;
    for ( ; autoFAF05098_i <= UserDataInstanceCount(autoFAF05098_userType) ; autoFAF05098_i += 1 ) {
        lv_itInstance = UserDataInstance(autoFAF05098_userType, autoFAF05098_i);
        lv_itUnitType = UserDataGetUnit("CoopTechTychusSquad", lv_itInstance, "Unit Type", 1);
        if ((lv_uT == lv_itUnitType)) {
            lv_itActive = UserDataGetGameLink("CoopTechTychusSquad", lv_itInstance, "Active Abil", 1);
            if ((CatalogEntryIsValid(c_gameCatalogAbil, lv_itActive) == true)) {
                if ((CatalogEntryScope(c_gameCatalogAbil, lv_itActive) == "CAbilBuild")) {
                    lv_pathCooldown = "InfoArray[0].Cooldown.TimeUse";
                    lv_pathCharge = "InfoArray[0].Charge.TimeUse";
                }
                else {
                    lv_pathCooldown = "Cost[0].Cooldown.TimeUse";
                    lv_pathCharge = "Cost[0].Charge.TimeUse";
                }
                lv_oldValue = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, lv_itActive, lv_pathCooldown, lv_p);
                lv_changedValue = (lv_oldValue*20.0/100);
                CatalogFieldValueModify(c_gameCatalogAbil, lv_itActive, lv_pathCooldown, lv_p, FixedToString(lv_changedValue, c_fixedPrecisionAny), c_upgradeOperationSubtract);
                DataTableSetFixed(true, ("TychusSpecialistTrainingAura_" + IntToString(UnitGetTag(lv_u)) + "_CooldownTimeChange"), lv_changedValue);
                lv_oldValue = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, lv_itActive, lv_pathCharge, lv_p);
                lv_changedValue = (lv_oldValue*20.0/100);
                CatalogFieldValueModify(c_gameCatalogAbil, lv_itActive, lv_pathCharge, lv_p, FixedToString(lv_changedValue, c_fixedPrecisionAny), c_upgradeOperationSubtract);
                DataTableSetFixed(true, ("TychusSpecialistTrainingAura_" + IntToString(UnitGetTag(lv_u)) + "_ChargeTimeChange"), lv_changedValue);
            }

            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusSpectreAuraOn_Init () {
    libCPCD_gt_CDTychusSpectreAuraOn = TriggerCreate("libCPCD_gt_CDTychusSpectreAuraOn_Func");
    TriggerEnable(libCPCD_gt_CDTychusSpectreAuraOn, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDTychusSpectreAuraOn, null, "TychusSpectreBrillianceAuraBuffLv1", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusSpectreAuraOff
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusSpectreAuraOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    string lv_uT;
    string lv_itInstance;
    string lv_itActive;
    string lv_itUnitType;
    fixed lv_changedValueCooldown;
    fixed lv_changedValueCharge;
    int lv_p;
    string lv_pathCooldown;
    string lv_pathCharge;

    // Automatic Variable Declarations
    string auto4EA4818C_userType;
    int auto4EA4818C_i;

    // Variable Initialization
    lv_u = EventUnit();
    lv_uT = UnitGetType(lv_u);
    lv_changedValueCooldown = DataTableGetFixed(true, ("TychusSpecialistTrainingAura_" + IntToString(UnitGetTag(lv_u)) + "_CooldownTimeChange"));
    lv_changedValueCharge = DataTableGetFixed(true, ("TychusSpecialistTrainingAura_" + IntToString(UnitGetTag(lv_u)) + "_ChargeTimeChange"));
    lv_p = UnitGetOwner(lv_u);
    lv_pathCooldown = "Cost[0].Cooldown.TimeUse";
    lv_pathCharge = "Cost[0].Charge.TimeUse";

    // Actions
    if (!runActions) {
        return true;
    }

    auto4EA4818C_userType = "CoopTechTychusSquad";
    auto4EA4818C_i = 1;
    for ( ; auto4EA4818C_i <= UserDataInstanceCount(auto4EA4818C_userType) ; auto4EA4818C_i += 1 ) {
        lv_itInstance = UserDataInstance(auto4EA4818C_userType, auto4EA4818C_i);
        lv_itUnitType = UserDataGetUnit("CoopTechTychusSquad", lv_itInstance, "Unit Type", 1);
        if ((lv_uT == lv_itUnitType)) {
            lv_itActive = UserDataGetGameLink("CoopTechTychusSquad", lv_itInstance, "Active Abil", 1);
            if ((CatalogEntryIsValid(c_gameCatalogAbil, lv_itActive) == true)) {
                if ((CatalogEntryScope(c_gameCatalogAbil, lv_itActive) == "CAbilBuild")) {
                    lv_pathCooldown = "InfoArray[0].Cooldown.TimeUse";
                    lv_pathCharge = "InfoArray[0].Charge.TimeUse";
                }
                else {
                    lv_pathCooldown = "Cost[0].Cooldown.TimeUse";
                    lv_pathCharge = "Cost[0].Charge.TimeUse";
                }
                CatalogFieldValueModify(c_gameCatalogAbil, lv_itActive, lv_pathCooldown, lv_p, FixedToString(lv_changedValueCooldown, c_fixedPrecisionAny), c_upgradeOperationAdd);
                CatalogFieldValueModify(c_gameCatalogAbil, lv_itActive, lv_pathCharge, lv_p, FixedToString(lv_changedValueCharge, c_fixedPrecisionAny), c_upgradeOperationAdd);
            }

            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusSpectreAuraOff_Init () {
    libCPCD_gt_CDTychusSpectreAuraOff = TriggerCreate("libCPCD_gt_CDTychusSpectreAuraOff_Func");
    TriggerEnable(libCPCD_gt_CDTychusSpectreAuraOff, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDTychusSpectreAuraOff, null, "TychusSpectreBrillianceAuraBuffLv1", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusOdinCameraShake
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusOdinCameraShake_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    fixed lv_distance;
    fixed[4] lv_cameraPosition;
    fixed[4] lv_effectPosition;
    int lv_player;
    point lv_effectTargetPoint;
    point lv_cameraTargetPoint;
    unit lv_odin;

    // Automatic Variable Declarations
    playergroup autoDC083F69_g;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_effectTargetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_odin = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.8, c_timeGame);
    if ((UnitIsAlive(lv_odin) == false)) {
        return true;
    }

    lv_effectPosition[0] = PointGetX(lv_effectTargetPoint);
    lv_effectPosition[1] = PointGetY(lv_effectTargetPoint);
    lv_effectPosition[2] = WorldHeight(c_heightMapGround, lv_effectTargetPoint);
    autoDC083F69_g = PlayerGroupActive();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoDC083F69_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_cameraTargetPoint = CameraGetTarget(lv_player);
        lv_cameraPosition[0] = PointGetX(lv_cameraTargetPoint);
        lv_cameraPosition[1] = (PointGetY(lv_cameraTargetPoint)-(Cos(CameraGetPitch(lv_player))*CameraGetDistance(lv_player)));
        lv_cameraPosition[2] = (WorldHeight(c_heightMapGround, lv_cameraTargetPoint)+(Sin(CameraGetPitch(lv_player))*CameraGetDistance(lv_player)));
        lv_distance = SquareRoot((Pow((lv_cameraPosition[0]-lv_effectPosition[0]), 2.0) + Pow((lv_cameraPosition[1]-lv_effectPosition[1]), 2.0) + Pow((lv_cameraPosition[2]-lv_effectPosition[2]), 2.0)));
        CameraShakeStart(lv_player, c_cameraPositionTarget, c_cameraDirectionZ, MaxF((1-(lv_distance/50)), 0.0), 5.0, 100.0, 0.5);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusOdinCameraShake_Init () {
    libCPCD_gt_CDTychusOdinCameraShake = TriggerCreate("libCPCD_gt_CDTychusOdinCameraShake_Func");
    TriggerEnable(libCPCD_gt_CDTychusOdinCameraShake, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDTychusOdinCameraShake, c_playerAny, libCPCD_gv_cDTychusOdinEffectCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusOdinBirth
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusOdinBirth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayerRemoveCooldown(lv_p, libCPGL_gv_commander[libCPCD_gv_pUC_ProgressBarHeight].lv_heroReviveLink);
    UnitRevive(libCPGL_gv_commander[lv_p].lv_heroUnit);
    UnitSetPropertyFixed(libCPGL_gv_commander[lv_p].lv_heroUnit, c_unitPropLifePercent, 100.0);
    UnitCreateEffectPoint(libCPGL_gv_commander[lv_p].lv_heroUnit, libCPCD_gv_cDTychusOdinEffectCalled, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    Wait(1.0, c_timeGame);
    UnitSetPosition(libCPGL_gv_commander[lv_p].lv_heroUnit, RegionGetBoundsMin(RegionEntireMap()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusOdinBirth_Init () {
    libCPCD_gt_CDTychusOdinBirth = TriggerCreate("libCPCD_gt_CDTychusOdinBirth_Func");
    TriggerEnable(libCPCD_gt_CDTychusOdinBirth, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDTychusOdinBirth, c_playerAny, libCPCD_gv_cDTychusOdinEffectCaller);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusOdinTimeout
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusOdinTimeout_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_odin;
    fixed lv_facing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_odin = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_facing = (UnitGetFacing(lv_odin)-90);

    // Actions
    if (!runActions) {
        return true;
    }

    ActorCreate(ActorScopeFromUnit(lv_odin), "TychusOdinDeathTimeOut", null, null, null);
    libNtve_gf_MakeModelFaceAngle(libNtve_gf_ActorLastCreated(), lv_facing);
    UnitCreateEffectUnit(lv_odin, "TimedLifeFate", lv_odin);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusOdinTimeout_Init () {
    libCPCD_gt_CDTychusOdinTimeout = TriggerCreate("libCPCD_gt_CDTychusOdinTimeout_Func");
    TriggerEnable(libCPCD_gt_CDTychusOdinTimeout, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDTychusOdinTimeout, c_playerAny, "TychusOdinTimedLifeFateDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusOdinDeathTychusSelect
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusOdinDeathTychusSelect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tychus;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tychus = libCPGL_gv_commander[UnitGetOwner(EventUnit())].lv_heroUnit;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TychusOdin"))) {
            return false;
        }

        if (!((UnitIsAlive(lv_tychus) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsSelected(EventUnit(), UnitGetOwner(EventUnit())) == true)) {
        UnitSelect(lv_tychus, UnitGetOwner(EventUnit()), true);
    }

    libCPCD_gf_CDTychusUISquadTargetFrame("Tychus", libCPGL_gv_commander[UnitGetOwner(EventUnit())].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusOdinDeathTychusSelect_Init () {
    libCPCD_gt_CDTychusOdinDeathTychusSelect = TriggerCreate("libCPCD_gt_CDTychusOdinDeathTychusSelect_Func");
    TriggerEnable(libCPCD_gt_CDTychusOdinDeathTychusSelect, false);
    TriggerAddEventUnitDied(libCPCD_gt_CDTychusOdinDeathTychusSelect, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusOdinBirthTychusDeselect
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusOdinBirthTychusDeselect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSelect(EventUnit(), UnitGetOwner(EventUnit()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusOdinBirthTychusDeselect_Init () {
    libCPCD_gt_CDTychusOdinBirthTychusDeselect = TriggerCreate("libCPCD_gt_CDTychusOdinBirthTychusDeselect_Func");
    TriggerEnable(libCPCD_gt_CDTychusOdinBirthTychusDeselect, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDTychusOdinBirthTychusDeselect, null, "TychusCalldownOdinInsideOdinStun", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusOdinCalldownUIUpdate
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusOdinCalldownUIUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CDTychusUISquadTargetFrame("Tychus", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusOdinCalldownUIUpdate_Init () {
    libCPCD_gt_CDTychusOdinCalldownUIUpdate = TriggerCreate("libCPCD_gt_CDTychusOdinCalldownUIUpdate_Func");
    TriggerEnable(libCPCD_gt_CDTychusOdinCalldownUIUpdate, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDTychusOdinCalldownUIUpdate, c_playerAny, "TychusCalldownOdinUISwap");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusMedicTransportActived
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusMedicTransportActived_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitBehaviorEffectPlayer(EventUnit(), EventUnitBehavior(), c_effectPlayerCaster, 0);
    lv_pg = PlayerGroupSingle(lv_p);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    libCPCD_gv_cDTychusMedicTransportUnit[lv_p] = EventUnit();
    libCPCD_gv_cDTychusMedicTransportUnitGroup[lv_p] = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
    libCPCD_gv_cDTychusMedicTranportLoadPoint[lv_p] = UnitGetPosition(libCPCD_gv_cDTychusMedicTransportUnit[lv_p]);
    UISetCursorVisible(lv_pg, false);
    Wait(0.5, c_timeGame);
    UISetCursorVisible(lv_pg, true);
    UISetTargetingOrder(PlayerGroupSingle(UnitGetOwner(libCPCD_gv_cDTychusMedicTransportUnit[lv_p])), libCPCD_gv_cDTychusMedicTransportUnitGroup[lv_p], OrderTargetingPoint(AbilityCommand("TychusMedicTransportUnloadUnits", 0), UnitGetPosition(libCPCD_gv_cDTychusMedicTransportUnit[lv_p])), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusMedicTransportActived_Init () {
    libCPCD_gt_CDTychusMedicTransportActived = TriggerCreate("libCPCD_gt_CDTychusMedicTransportActived_Func");
    TriggerEnable(libCPCD_gt_CDTychusMedicTransportActived, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDTychusMedicTransportActived, null, "TychusMedicTransportActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusMedicTopBarButton
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusMedicTopBarButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gv_cDTychusMedicTranportSendViaTopBar[lv_p] = true;
    Wait(0.125, c_timeGame);
    libCPCD_gv_cDTychusMedicTranportSendViaTopBar[lv_p] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusMedicTopBarButton_Init () {
    libCPCD_gt_CDTychusMedicTopBarButton = TriggerCreate("libCPCD_gt_CDTychusMedicTopBarButton_Func");
    TriggerEnable(libCPCD_gt_CDTychusMedicTopBarButton, false);
    TriggerAddEventButtonPressed(libCPCD_gt_CDTychusMedicTopBarButton, c_playerAny, "TychusMedicTransportUnitsTopBar");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusMedicTransportTargetOn
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusMedicTransportTargetOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    actor lv_a;
    int lv_p;
    unitgroup lv_ug;

    // Automatic Variable Declarations
    unitgroup auto91242B78_g;
    int auto91242B78_u;

    // Variable Initialization
    lv_p = EventPlayer();
    lv_ug = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCPCD_gv_cDTychusMedicTranportSendViaTopBar[lv_p] == false)) {
        lv_ug = UnitSubgroupSelected(lv_p);
    }
    else {
        lv_ug = UnitGroup("TychusMedivacPlatform", lv_p, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }
    auto91242B78_g = lv_ug;
    auto91242B78_u = UnitGroupCount(auto91242B78_g, c_unitCountAll);
    for (;; auto91242B78_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto91242B78_g, auto91242B78_u);
        if (lv_u == null) { break; }
        ActorScopeSend(ActorScopeFromUnit(lv_u), "Signal PickUpTarget");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusMedicTransportTargetOn_Init () {
    libCPCD_gt_CDTychusMedicTransportTargetOn = TriggerCreate("libCPCD_gt_CDTychusMedicTransportTargetOn_Func");
    TriggerEnable(libCPCD_gt_CDTychusMedicTransportTargetOn, false);
    TriggerAddEventTargetModeUpdate(libCPCD_gt_CDTychusMedicTransportTargetOn, c_playerAny, AbilityCommand("TychusMedicTransportLoadUnits", 0), c_targetModeStateOn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusMedicTransportTargetOff
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusMedicTransportTargetOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    actor lv_a;
    int lv_p;
    unitgroup lv_ug;

    // Automatic Variable Declarations
    unitgroup auto12BF1E00_g;
    int auto12BF1E00_u;

    // Variable Initialization
    lv_p = EventPlayer();
    lv_ug = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ug = UnitGroup("TychusMedivacPlatform", lv_p, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto12BF1E00_g = lv_ug;
    auto12BF1E00_u = UnitGroupCount(auto12BF1E00_g, c_unitCountAll);
    for (;; auto12BF1E00_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto12BF1E00_g, auto12BF1E00_u);
        if (lv_u == null) { break; }
        ActorScopeSend(ActorScopeFromUnit(lv_u), "Signal PickUpCancel");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusMedicTransportTargetOff_Init () {
    libCPCD_gt_CDTychusMedicTransportTargetOff = TriggerCreate("libCPCD_gt_CDTychusMedicTransportTargetOff_Func");
    TriggerEnable(libCPCD_gt_CDTychusMedicTransportTargetOff, false);
    TriggerAddEventTargetModeUpdate(libCPCD_gt_CDTychusMedicTransportTargetOff, c_playerAny, AbilityCommand("TychusMedicTransportLoadUnits", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusMedicTransportStop
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusMedicTransportStop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    if ((UnitHasBehavior2(libCPCD_gv_cDTychusMedicTransportUnit[lv_p], "TychusMedicTransportUnloadUnitsDespawnDelay") == false)) {
        UnitCreateEffectUnit(libCPCD_gv_cDTychusMedicTransportUnit[lv_p], "TychusMedicTransportCancelUnloadSet", libCPCD_gv_cDTychusMedicTransportUnit[lv_p]);
    }

    UnitGroupClear(libCPCD_gv_cDTychusMedicGroundUnitsTransportGroupAir[lv_p]);
    UnitGroupClear(libCPCD_gv_cDTychusMedicGroundUnitsTransportGroupGround[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusMedicTransportStop_Init () {
    libCPCD_gt_CDTychusMedicTransportStop = TriggerCreate("libCPCD_gt_CDTychusMedicTransportStop_Func");
    TriggerEnable(libCPCD_gt_CDTychusMedicTransportStop, false);
    TriggerAddEventTargetModeUpdate(libCPCD_gt_CDTychusMedicTransportStop, c_playerAny, AbilityCommand("TychusMedicTransportUnloadUnits", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusMedicTransportTimeOut
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusMedicTransportTimeOut_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libCPGL_gv_commander[lv_p].lv_globalCasterUnit, "TychusMedicGCD", libCPGL_gv_commander[lv_p].lv_globalCasterUnit);
    UnitGroupClear(libCPCD_gv_cDTychusMedicGroundUnitsTransportGroupAir[lv_p]);
    UnitGroupClear(libCPCD_gv_cDTychusMedicGroundUnitsTransportGroupGround[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusMedicTransportTimeOut_Init () {
    libCPCD_gt_CDTychusMedicTransportTimeOut = TriggerCreate("libCPCD_gt_CDTychusMedicTransportTimeOut_Func");
    TriggerEnable(libCPCD_gt_CDTychusMedicTransportTimeOut, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDTychusMedicTransportTimeOut, c_playerAny, "TychusMedicTransportUnloadUnitsDespawnDelayTimeOut");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusMedicTransportAirBehaviorApplied
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusMedicTransportAirBehaviorApplied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitBehaviorEffectPlayer(EventUnit(), EventUnitBehavior(), c_effectPlayerCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCPCD_gv_cDTychusMedicGroundUnitsTransportGroupAir[lv_p], EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusMedicTransportAirBehaviorApplied_Init () {
    libCPCD_gt_CDTychusMedicTransportAirBehaviorApplied = TriggerCreate("libCPCD_gt_CDTychusMedicTransportAirBehaviorApplied_Func");
    TriggerEnable(libCPCD_gt_CDTychusMedicTransportAirBehaviorApplied, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDTychusMedicTransportAirBehaviorApplied, null, "TychusMedicTransportAirUnits", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusMedicTransportGroundBehaviorApplied
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusMedicTransportGroundBehaviorApplied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitBehaviorEffectPlayer(lv_u, EventUnitBehavior(), c_effectPlayerCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCPCD_gv_cDTychusMedicGroundUnitsTransportGroupGround[lv_p], EventUnit());
    if ((UnitGetType(lv_u) == "TychusOdin") && (TechTreeUpgradeCount(UnitGetOwner(lv_u), "CommanderPrestigeTychusOdin", c_techCountCompleteOnly) == 0)) {
        UnitSetPosition(libCPGL_gv_commander[lv_p].lv_heroUnit, UnitGetPosition(lv_u), false);
        UnitBehaviorAdd(libCPGL_gv_commander[lv_p].lv_heroUnit, "TychusMedicTransportGroundUnits", libCPGL_gv_commander[lv_p].lv_heroUnit, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusMedicTransportGroundBehaviorApplied_Init () {
    libCPCD_gt_CDTychusMedicTransportGroundBehaviorApplied = TriggerCreate("libCPCD_gt_CDTychusMedicTransportGroundBehaviorApplied_Func");
    TriggerEnable(libCPCD_gt_CDTychusMedicTransportGroundBehaviorApplied, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDTychusMedicTransportGroundBehaviorApplied, null, "TychusMedicTransportGroundUnits", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusMedicTransportTeleportUnload
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusMedicTransportTeleportUnload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_unloadPoint;
    fixed lv_angle;
    fixed lv_distance;
    int lv_p;
    point lv_placementtestpoint;

    // Automatic Variable Declarations
    unitgroup autoFE464CAB_g;
    int autoFE464CAB_u;
    unit autoFE464CAB_var;
    unitgroup auto31E72B68_g;
    int auto31E72B68_u;
    unit auto31E72B68_var;

    // Variable Initialization
    lv_unloadPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetUnit);
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_angle = AngleBetweenPoints(libCPCD_gv_cDTychusMedicTranportLoadPoint[lv_p], lv_unloadPoint);
    lv_distance = DistanceBetweenPoints(libCPCD_gv_cDTychusMedicTranportLoadPoint[lv_p], lv_unloadPoint);
    autoFE464CAB_g = libCPCD_gv_cDTychusMedicGroundUnitsTransportGroupAir[lv_p];
    autoFE464CAB_u = UnitGroupCount(autoFE464CAB_g, c_unitCountAll);
    for (;; autoFE464CAB_u -= 1) {
        autoFE464CAB_var = UnitGroupUnitFromEnd(autoFE464CAB_g, autoFE464CAB_u);
        if (autoFE464CAB_var == null) { break; }
        UnitSetPosition(autoFE464CAB_var, PointWithOffsetPolar(UnitGetPosition(autoFE464CAB_var), lv_distance, lv_angle), false);
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TychusMedicTransportAirUnitsRB", autoFE464CAB_var);
    }
    auto31E72B68_g = libCPCD_gv_cDTychusMedicGroundUnitsTransportGroupGround[lv_p];
    auto31E72B68_u = UnitGroupCount(auto31E72B68_g, c_unitCountAll);
    for (;; auto31E72B68_u -= 1) {
        auto31E72B68_var = UnitGroupUnitFromEnd(auto31E72B68_g, auto31E72B68_u);
        if (auto31E72B68_var == null) { break; }
        if ((PointPathingPassable(PointWithOffsetPolar(UnitGetPosition(auto31E72B68_var), lv_distance, lv_angle)) == true)) {
            UnitSetPosition(auto31E72B68_var, PointWithOffsetPolar(UnitGetPosition(auto31E72B68_var), lv_distance, lv_angle), false);
        }
        else {
            lv_placementtestpoint = UnitTypePlacementFromPoint(UnitGetType(auto31E72B68_var), UnitGetOwner(auto31E72B68_var), lv_unloadPoint, 5.0);
            if ((lv_placementtestpoint != null)) {
                UnitSetPosition(auto31E72B68_var, lv_placementtestpoint, false);
            }

        }
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TychusMedicTransportUnhideUnitsSet", auto31E72B68_var);
    }
    UnitGroupClear(libCPCD_gv_cDTychusMedicGroundUnitsTransportGroupAir[lv_p]);
    UnitGroupClear(libCPCD_gv_cDTychusMedicGroundUnitsTransportGroupGround[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusMedicTransportTeleportUnload_Init () {
    libCPCD_gt_CDTychusMedicTransportTeleportUnload = TriggerCreate("libCPCD_gt_CDTychusMedicTransportTeleportUnload_Func");
    TriggerEnable(libCPCD_gt_CDTychusMedicTransportTeleportUnload, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDTychusMedicTransportTeleportUnload, c_playerAny, "TychusMedicTransportUnloadUnitsCompletionSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusTriUnitHealthUpgrade
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusTriUnitHealthUpgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerCommander(UnitGetOwner(EventUnit())) == "Tychus"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() == "TychusSquadHealth"))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(EventPlayer(), "MasteryTychusUpgradesIncrease", c_techCountCompleteOnly) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(EventPlayer(), "TychusSquadHealthMastery", TechTreeUpgradeCount(EventPlayer(), "MasteryTychusUpgradesIncrease", c_techCountCompleteOnly));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusTriUnitHealthUpgrade_Init () {
    libCPCD_gt_CDTychusTriUnitHealthUpgrade = TriggerCreate("libCPCD_gt_CDTychusTriUnitHealthUpgrade_Func");
    TriggerEnable(libCPCD_gt_CDTychusTriUnitHealthUpgrade, false);
    TriggerAddEventUnitResearchProgress(libCPCD_gt_CDTychusTriUnitHealthUpgrade, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusTriUnitSpeedUpgrade
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusTriUnitSpeedUpgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_masteryCount;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((PlayerCommander(lv_player) == "Tychus"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() == "TychusSquadAttackSpeed"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_masteryCount = TechTreeUpgradeCount(EventPlayer(), "MasteryTychusUpgradesIncrease", c_techCountCompleteOnly);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "TychusSquadAttackSpeedWithMastery", lv_masteryCount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusTriUnitSpeedUpgrade_Init () {
    libCPCD_gt_CDTychusTriUnitSpeedUpgrade = TriggerCreate("libCPCD_gt_CDTychusTriUnitSpeedUpgrade_Func");
    TriggerEnable(libCPCD_gt_CDTychusTriUnitSpeedUpgrade, false);
    TriggerAddEventUnitResearchProgress(libCPCD_gt_CDTychusTriUnitSpeedUpgrade, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusPrestigeLoneWolfChanged
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusPrestigeLoneWolfChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_loneWolfUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_loneWolfUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((libCPGL_gv_commander[UnitGetOwner(EventUnit())].lv_commander == "Tychus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "HeroUnitBackgroundImage", lv_loneWolfUnit);
    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "PrestigeLoneWolf", "On");
    }
    else {
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "PrestigeLoneWolf", "Off");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusPrestigeLoneWolfChanged_Init () {
    libCPCD_gt_CDTychusPrestigeLoneWolfChanged = TriggerCreate("libCPCD_gt_CDTychusPrestigeLoneWolfChanged_Func");
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDTychusPrestigeLoneWolfChanged, null, "CommanderPrestigeTychusLoneWolf", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDTychusPrestigeLoneWolfChanged, null, "CommanderPrestigeTychusLoneWolf", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusEventHook
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusEventHook_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    string lv_heroType;
    string lv_heroReviveType;
    string lv_heroInstance;
    string lv_itUnitType;
    string lv_event;

    // Automatic Variable Declarations
    string autoB8358818_userType;
    int autoB8358818_i;

    // Variable Initialization
    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_heroType = EventPlayerEffectUsedUnitType(c_effectUnitCaster);
    lv_heroReviveType = (CatalogFieldValueGet(c_gameCatalogUnit, lv_heroType, "ReviveType", c_playerAny));
    lv_event = (EventPlayerEffectUsed());

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_hero, "TychusHeroCount") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB8358818_userType = libCPCD_gv_cDTychusUserType;
    autoB8358818_i = 1;
    for ( ; autoB8358818_i <= UserDataInstanceCount(autoB8358818_userType) ; autoB8358818_i += 1 ) {
        lv_heroInstance = UserDataInstance(autoB8358818_userType, autoB8358818_i);
        lv_itUnitType = UserDataGetUnit(libCPCD_gv_cDTychusUserType, lv_heroInstance, "Unit Type", 1);
        if ((lv_itUnitType == lv_heroType)) {
            DataTableSetUnit(false, TriggerEventParamName(lv_event, "EventHero"), lv_hero);
            DataTableSetString(false, TriggerEventParamName(lv_event, "EventHeroInstance"), (lv_heroInstance));
            TriggerSendEvent(lv_event);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusEventHook_Init () {
    libCPCD_gt_CDTychusEventHook = TriggerCreate("libCPCD_gt_CDTychusEventHook_Func");
    TriggerEnable(libCPCD_gt_CDTychusEventHook, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDTychusEventHook, c_playerAny, "Event_TychusHeroCreate");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDTychusEventHook, c_playerAny, "Event_TychusHeroDeath");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDTychusEventHook, c_playerAny, "Event_TychusHeroRevive");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusReviveReaperCharges
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusReviveReaperCharges_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = libCPCD_gf_CDTychusEventHeroUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_hero) == "TychusReaper"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_hero, "TychusReaperBombChargeAdd", lv_hero);
    UnitCreateEffectUnit(lv_hero, "TychusReaperBombChargeRemove", lv_hero);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusReviveReaperCharges_Init () {
    libCPCD_gt_CDTychusReviveReaperCharges = TriggerCreate("libCPCD_gt_CDTychusReviveReaperCharges_Func");
    TriggerEnable(libCPCD_gt_CDTychusReviveReaperCharges, false);
    libCPCD_gf_CDTychusEvent(libCPCD_gt_CDTychusReviveReaperCharges, "Event_TychusHeroRevive");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusReviveWarhoundCharges
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusReviveWarhoundCharges_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = libCPCD_gf_CDTychusEventHeroUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_hero) == "TychusWarhound"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_hero, "TychusWarhoundTurretChargeAdd", lv_hero);
    UnitCreateEffectUnit(lv_hero, "TychusWarhoundTurretChargeRemove", lv_hero);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusReviveWarhoundCharges_Init () {
    libCPCD_gt_CDTychusReviveWarhoundCharges = TriggerCreate("libCPCD_gt_CDTychusReviveWarhoundCharges_Func");
    TriggerEnable(libCPCD_gt_CDTychusReviveWarhoundCharges, false);
    libCPCD_gf_CDTychusEvent(libCPCD_gt_CDTychusReviveWarhoundCharges, "Event_TychusHeroRevive");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusReviveUsed
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusReviveUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bar;
    abilcmd lv_abilcmd;
    int lv_index;
    int lv_p;
    string lv_unitType;
    unit lv_reviveTarget;
    order lv_orderReal;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bar = EventUnit();
    lv_abilcmd = OrderGetAbilityCommand(EventUnitOrder());
    lv_index = AbilityCommandGetCommand(lv_abilcmd);
    lv_p = UnitGetOwner(lv_bar);
    lv_unitType = (CatalogFieldValueGet(c_gameCatalogAbil, "TychusFakeReviveTrain", "InfoArray[" + IntToString(lv_index) + "].Unit[" + IntToString(0) + "]", lv_p));
    lv_reviveTarget = UnitGroupUnit(UnitGroup(lv_unitType, lv_p, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterDead - 32)), 0, 0), 1), 1);
    lv_orderReal = libNtve_gf_ReviveOrderWithNoTarget(AbilityCommand("TychusReviveHeroes", 0), lv_reviveTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    while ((TechTreeUnitCount(lv_p, lv_unitType, c_techCountQueuedOrBetter) > 0)) {
        UnitIssueOrder(lv_bar, Order(AbilityCommand("que5", 0)), c_orderQueueAddToEnd);
    }
    while ((UnitIsValid(lv_reviveTarget) == false)) {
        return true;
    }
    if ((UnitOrderIsValid(lv_bar, lv_orderReal) == true)) {
        UnitIssueOrder(lv_bar, lv_orderReal, c_orderQueueAddToEnd);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(lv_p), StringExternal("Param/Value/lib_CPCD_FB82F442"), SoundLink("UI_GenericError", -1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusReviveUsed_Init () {
    libCPCD_gt_CDTychusReviveUsed = TriggerCreate("libCPCD_gt_CDTychusReviveUsed_Func");
    TriggerEnable(libCPCD_gt_CDTychusReviveUsed, false);
    TriggerAddEventUnitOrder(libCPCD_gt_CDTychusReviveUsed, null, AbilityCommand("TychusFakeReviveTrain", 255));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusReviveFailsafe
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusReviveFailsafe_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_fakeUnit;
    int lv_p;
    string lv_unitType;
    unitgroup lv_unitTypeGroup;
    unit lv_reviveTarget;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fakeUnit = EventUnitCreatedUnit();
    lv_p = UnitGetOwner(lv_fakeUnit);
    lv_unitType = UnitGetType(EventUnitCreatedUnit());
    lv_unitTypeGroup = UnitGroup(lv_unitType, lv_p, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_CPCD_C827D1FD"), true);
    }

    UnitGroupRemove(lv_unitTypeGroup, lv_fakeUnit);
    lv_reviveTarget = UnitGroupUnit(lv_unitTypeGroup, 1);
    if ((UnitIsValid(lv_reviveTarget) == true)) {
        UnitSetPosition(lv_reviveTarget, UnitGetPosition(lv_fakeUnit), false);
        UnitRevive(lv_reviveTarget);
        UnitSetPropertyFixed(lv_reviveTarget, c_unitPropLifePercent, 100.0);
    }

    UnitRemove(lv_fakeUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusReviveFailsafe_Init () {
    libCPCD_gt_CDTychusReviveFailsafe = TriggerCreate("libCPCD_gt_CDTychusReviveFailsafe_Func");
    TriggerEnable(libCPCD_gt_CDTychusReviveFailsafe, false);
    TriggerAddEventUnitCreated(libCPCD_gt_CDTychusReviveFailsafe, null, "TychusFakeReviveTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusTrainMaxChargesRemove
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusTrainMaxChargesRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(UnitGetOwner(libCPCD_gf_CDTychusEventHeroUnit()), "TychusHeroCount", 1);
    if ((libCPCD_gf_CDTychusEventHero() != "Tychus")) {
        libCPCD_gv_cDTychusTrainMaxCharges[UnitGetOwner(libCPCD_gf_CDTychusEventHeroUnit())] -= 1;
        UnitCreateEffectUnit(libCPGL_gv_commander[UnitGetOwner(libCPCD_gf_CDTychusEventHeroUnit())].lv_globalCasterUnit, "TychusHeroTrainChargeAdd", libCPGL_gv_commander[UnitGetOwner(libCPCD_gf_CDTychusEventHeroUnit())].lv_globalCasterUnit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusTrainMaxChargesRemove_Init () {
    libCPCD_gt_CDTychusTrainMaxChargesRemove = TriggerCreate("libCPCD_gt_CDTychusTrainMaxChargesRemove_Func");
    TriggerEnable(libCPCD_gt_CDTychusTrainMaxChargesRemove, false);
    libCPCD_gf_CDTychusEvent(libCPCD_gt_CDTychusTrainMaxChargesRemove, "Event_TychusHeroCreate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusHeroQueue
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusHeroQueue_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CDTychusUpdateHeroTechTree(lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusHeroQueue_Init () {
    libCPCD_gt_CDTychusHeroQueue = TriggerCreate("libCPCD_gt_CDTychusHeroQueue_Func");
    TriggerEnable(libCPCD_gt_CDTychusHeroQueue, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDTychusHeroQueue, null, AbilityCommand("TychusBarracksTrain", 255), c_unitAbilStageQueue, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDTychusHeroQueue, null, AbilityCommand("TychusBarracksTrain", 255), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDTychusHeroQueue, null, AbilityCommand("TychusFactoryTrain", 255), c_unitAbilStageQueue, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDTychusHeroQueue, null, AbilityCommand("TychusFactoryTrain", 255), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDTychusHeroQueue, null, AbilityCommand("TychusStarportTrain", 255), c_unitAbilStageQueue, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDTychusHeroQueue, null, AbilityCommand("TychusStarportTrain", 255), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusHeroCancel
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusHeroCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CDTychusUpdateHeroTechTree(lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusHeroCancel_Init () {
    libCPCD_gt_CDTychusHeroCancel = TriggerCreate("libCPCD_gt_CDTychusHeroCancel_Func");
    TriggerEnable(libCPCD_gt_CDTychusHeroCancel, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDTychusHeroCancel, null, AbilityCommand("TychusBarracksTrain", 255), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDTychusHeroCancel, null, AbilityCommand("TychusFactoryTrain", 255), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDTychusHeroCancel, null, AbilityCommand("TychusStarportTrain", 255), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusHeroPurchaseDummy
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusHeroPurchaseDummy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    int lv_tychusplayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = libCPCD_gf_CDTychusEventHeroUnit();
    lv_tychusplayer = UnitGetOwner(libCPCD_gf_CDTychusEventHeroUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(lv_hero) == "TychusFirebat")) {
        TechTreeUpgradeAddLevel(lv_tychusplayer, "TychusFirebatOwned", 1);
    }
    else if ((UnitGetType(lv_hero) == "TychusGhost")) {
        TechTreeUpgradeAddLevel(lv_tychusplayer, "TychusGhostOwned", 1);
    }
    else if ((UnitGetType(lv_hero) == "TychusMarauder")) {
        TechTreeUpgradeAddLevel(lv_tychusplayer, "TychusMarauderOwned", 1);
    }
    else if ((UnitGetType(lv_hero) == "TychusHERC")) {
        TechTreeUpgradeAddLevel(lv_tychusplayer, "TychusHERCOwned", 1);
    }
    else if ((UnitGetType(lv_hero) == "TychusWarhound")) {
        TechTreeUpgradeAddLevel(lv_tychusplayer, "TychusWarhoundOwned", 1);
    }
    else if ((UnitGetType(lv_hero) == "TychusMedic")) {
        TechTreeUpgradeAddLevel(lv_tychusplayer, "TychusMedicOwned", 1);
    }
    else if ((UnitGetType(lv_hero) == "TychusReaper")) {
        TechTreeUpgradeAddLevel(lv_tychusplayer, "TychusReaperOwned", 1);
    }
    else if ((UnitGetType(lv_hero) == "TychusSpectre")) {
        TechTreeUpgradeAddLevel(lv_tychusplayer, "TychusSpectreOwned", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusHeroPurchaseDummy_Init () {
    libCPCD_gt_CDTychusHeroPurchaseDummy = TriggerCreate("libCPCD_gt_CDTychusHeroPurchaseDummy_Func");
    TriggerEnable(libCPCD_gt_CDTychusHeroPurchaseDummy, false);
    libCPCD_gf_CDTychusEvent(libCPCD_gt_CDTychusHeroPurchaseDummy, "Event_TychusHeroCreate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusHeroChargeTiming
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusHeroChargeTiming_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_player;
    fixed lv_heroCooldown;

    // Automatic Variable Declarations
    playergroup autoE328823B_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((GameGetMissionTime() >= libCPGL_gf_HTHeroTime()))) {
        Wait(0.25, c_timeGame);
    }
    autoE328823B_g = libCPGL_gf_HumanPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoE328823B_g, lv_player);
        if (lv_player < 0) { break; }
        if ((libCPGL_gv_commander[lv_player].lv_commander == "Tychus")) {
            lv_heroCooldown = libCPCD_gf_CDTychusGetRecruitmentChargeCooldown(lv_player);
            libCPCD_gf_CDTychusFifthHeroUpgrade(lv_player);
        }

    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusHeroChargeTiming_Init () {
    libCPCD_gt_CDTychusHeroChargeTiming = TriggerCreate("libCPCD_gt_CDTychusHeroChargeTiming_Func");
    TriggerEnable(libCPCD_gt_CDTychusHeroChargeTiming, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusReplaceResearchCenter
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusReplaceResearchCenter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_p;

    // Automatic Variable Declarations
    unitgroup autoDABA7A55_g;
    int autoDABA7A55_u;
    unit autoDABA7A55_var;

    // Variable Initialization
    lv_unit = libCPCD_gf_CDTychusEventHeroUnit();
    lv_p = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libCPCD_gf_CDTychusEventHeroUnit()) == "TychusCoop"))) {
            return false;
        }

        if (!((libCPCD_gv_cDTychusBarReplaced[lv_p] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gv_cDTychusBarReplaced[lv_p] = true;
    CatalogLinkReplace(UnitGetOwner(libCPCD_gf_CDTychusEventHeroUnit()), c_gameCatalogUnit, "TychusResearchCenter", "TychusResearchCenterUnlocked");
    libCPGL_gv_commander[lv_p].lv_heroUnit = libCPCD_gf_CDTychusEventHeroUnit();
    libCPGL_gv_commander[lv_p].lv_heroUnit = lv_unit;
    autoDABA7A55_g = UnitGroup("TychusResearchCenter", UnitGetOwner(libCPCD_gf_CDTychusEventHeroUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDABA7A55_u = UnitGroupCount(autoDABA7A55_g, c_unitCountAll);
    for (;; autoDABA7A55_u -= 1) {
        autoDABA7A55_var = UnitGroupUnitFromEnd(autoDABA7A55_g, autoDABA7A55_u);
        if (autoDABA7A55_var == null) { break; }
        libNtve_gf_ReplaceUnit(autoDABA7A55_var, "TychusResearchCenterUnlocked", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_CopyUnitControlGroups(autoDABA7A55_var, libNtve_gf_LastReplacedUnit());
        UnitCreateEffectUnit(autoDABA7A55_var, "TychusResearchCenterCopyRally", libNtve_gf_LastReplacedUnit());
        libCOUI_gv_cU_TychusSquadBar = libNtve_gf_LastReplacedUnit();
        if ((UnitIsSelected(autoDABA7A55_var, UnitGetOwner(libCPCD_gf_CDTychusEventHeroUnit())) == true)) {
            UnitSelect(libNtve_gf_LastReplacedUnit(), UnitGetOwner(libCPCD_gf_CDTychusEventHeroUnit()), true);
        }

        libCOUI_gf_CU_TychusSetBarUnit(libNtve_gf_LastReplacedUnit());
    }
    DialogControlSetAnimationState(libCOUI_gv_cU_TychusSquadUnitFrames[0], PlayerGroupAll(), "TrainingState", "NotTraining");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusReplaceResearchCenter_Init () {
    libCPCD_gt_CDTychusReplaceResearchCenter = TriggerCreate("libCPCD_gt_CDTychusReplaceResearchCenter_Func");
    TriggerEnable(libCPCD_gt_CDTychusReplaceResearchCenter, false);
    libCPCD_gf_CDTychusEvent(libCPCD_gt_CDTychusReplaceResearchCenter, "Event_TychusHeroCreate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusUISpawnCheat
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusUISpawnCheat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_barposition;
    string lv_barunittype;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((PlayerCommander(EventPlayer()) == "Tychus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libCPCD_gt_CDTychusHeroChargeTiming, false);
    libCPCD_gv_cDTychusUISquadSpawnSkip = true;
    CatalogFieldValueSet(c_gameCatalogAbil, "TychusStarportTrain", "InfoArray[" + IntToString(0) + "].Time", EventPlayer(), "0");
    if ((UnitIsAlive(libCPCD_gv_cDTychusUIBar[EventPlayer()]) == true)) {
        lv_barposition = UnitGetPosition(libCPCD_gv_cDTychusUIBar[EventPlayer()]);
        lv_barunittype = UnitGetType(libCPCD_gv_cDTychusUIBar[EventPlayer()]);
        UnitRemove(libCPCD_gv_cDTychusUIBar[EventPlayer()]);
        Wait(0.0625, c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_barunittype, c_unitCreateIgnorePlacement, EventPlayer(), lv_barposition);
        libCPCD_gf_CDTychusUISetBarUnit(UnitLastCreated());
    }

    libCOMI_gf_ApplyTychusMaxChargesPerk(EventPlayer());
    libNtve_gf_PlayerRemoveChargeUsed(EventPlayer(), "Abil/TychusTrain");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusUISpawnCheat_Init () {
    libCPCD_gt_CDTychusUISpawnCheat = TriggerCreate("libCPCD_gt_CDTychusUISpawnCheat_Func");
    TriggerEnable(libCPCD_gt_CDTychusUISpawnCheat, false);
    TriggerAddEventChatMessage(libCPCD_gt_CDTychusUISpawnCheat, c_playerAny, "itsabouttime", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusUISquadMemberTrained
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusUISquadMemberTrained_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_squadinstance;
    int lv_squadindex;
    unit lv_hero;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_squadinstance = libCOMI_gf_EventTychusHeroInstance();
    lv_hero = libCOMI_gf_EventTychusHero();

    // Conditions
    if (testConds) {
        if (!((libCPCD_gv_cDTychusUISquadNextIndex[UnitGetOwner(lv_hero)] < libCPCD_gv_cDTychusUISquadMaxSize))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UserDataGetInt("CoopTechTychusSquad", lv_squadinstance, "Squad Slot", 1) == -1)) {
        lv_squadindex = libCPCD_gf_CDTychusUIGetNextSquadIndex(UnitGetOwner(lv_hero));
        libCPCD_gv_cDTychusUIHeros[lv_squadindex][UnitGetOwner(lv_hero)] = lv_hero;
        libCPCD_gf_CDTychusUISetTychusSquadMember(lv_hero, lv_squadindex, lv_squadinstance);
        UnitBehaviorAdd(lv_hero, "TychusHeroSubGroup", lv_hero, lv_squadindex);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusUISquadMemberTrained_Init () {
    libCPCD_gt_CDTychusUISquadMemberTrained = TriggerCreate("libCPCD_gt_CDTychusUISquadMemberTrained_Func");
    TriggerEnable(libCPCD_gt_CDTychusUISquadMemberTrained, false);
    libCOMI_gf_TychusHeroEvent(libCPCD_gt_CDTychusUISquadMemberTrained, "Event_TychusHeroCreate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusUISquadMemberReviveQueued
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusUISquadMemberReviveQueued_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_squadinstance;
    int lv_squadindex;

    // Automatic Variable Declarations
    string auto37D86B32_userType;
    int auto37D86B32_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCPGL_gv_commander[EventPlayer()].lv_commander == "Tychus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto37D86B32_userType = "CoopTechTychusSquad";
    auto37D86B32_i = 1;
    for ( ; auto37D86B32_i <= UserDataInstanceCount(auto37D86B32_userType) ; auto37D86B32_i += 1 ) {
        lv_squadinstance = UserDataInstance(auto37D86B32_userType, auto37D86B32_i);
        lv_squadindex = UserDataGetInt("CoopTechTychusSquad", lv_squadinstance, "Squad Slot", 1);
        if ((libNtve_gf_TriggeringProgressUnitType() == UserDataGetUnit("CoopTechTychusSquad", lv_squadinstance, "Unit Type", 1)) && (lv_squadindex >= 0)) {
            libNtve_gf_SetDialogItemCurrentValue(libCPCD_gv_cDTychusUISquadTrainingProgressBar[EventPlayer()], 100.0, PlayerGroupSingle(EventPlayer()));
            DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadUnitFrames[lv_squadindex][EventPlayer()], PlayerGroupSingle(EventPlayer()), "TrainingState", "Training");
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusUISquadMemberReviveQueued_Init () {
    libCPCD_gt_CDTychusUISquadMemberReviveQueued = TriggerCreate("libCPCD_gt_CDTychusUISquadMemberReviveQueued_Func");
    TriggerEnable(libCPCD_gt_CDTychusUISquadMemberReviveQueued, false);
    TriggerAddEventUnitReviveProgress(libCPCD_gt_CDTychusUISquadMemberReviveQueued, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusUISquadMemberReviveCancelled
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusUISquadMemberReviveCancelled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_squadinstance;
    int lv_squadindex;

    // Automatic Variable Declarations
    string auto16D1CF2B_userType;
    int auto16D1CF2B_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto16D1CF2B_userType = "CoopTechTychusSquad";
    auto16D1CF2B_i = 1;
    for ( ; auto16D1CF2B_i <= UserDataInstanceCount(auto16D1CF2B_userType) ; auto16D1CF2B_i += 1 ) {
        lv_squadinstance = UserDataInstance(auto16D1CF2B_userType, auto16D1CF2B_i);
        lv_squadindex = UserDataGetInt("CoopTechTychusSquad", lv_squadinstance, "Squad Slot", 1);
        if ((libNtve_gf_TriggeringProgressUnitType() == UserDataGetUnit("CoopTechTychusSquad", lv_squadinstance, "Unit Type", 1)) && (lv_squadindex >= 0)) {
            DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadUnitFrames[lv_squadindex][EventPlayer()], PlayerGroupSingle(EventPlayer()), "TrainingState", "NotTraining");
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusUISquadMemberReviveCancelled_Init () {
    libCPCD_gt_CDTychusUISquadMemberReviveCancelled = TriggerCreate("libCPCD_gt_CDTychusUISquadMemberReviveCancelled_Func");
    TriggerEnable(libCPCD_gt_CDTychusUISquadMemberReviveCancelled, false);
    TriggerAddEventUnitReviveProgress(libCPCD_gt_CDTychusUISquadMemberReviveCancelled, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusUISquadMemberRevived
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusUISquadMemberRevived_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_squadInstance;
    int lv_squadIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_squadInstance = libCOMI_gf_EventTychusHeroInstance();
    lv_squadIndex = UserDataGetInt("CoopTechTychusSquad", lv_squadInstance, "Squad Slot", 1);

    // Conditions
    if (testConds) {
        if (!((lv_squadIndex > -1))) {
            return false;
        }

        if (!((libCPGL_gv_commander[UnitGetOwner(libCPCD_gf_CDTychusEventHeroUnit())].lv_commander == "Tychus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadUnitFrames[lv_squadIndex][EventPlayer()], PlayerGroupSingle(UnitGetOwner(libCPCD_gf_CDTychusEventHeroUnit())), "DeathState", "NotDead");
    DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadUnitFrames[lv_squadIndex][EventPlayer()], PlayerGroupSingle(UnitGetOwner(libCPCD_gf_CDTychusEventHeroUnit())), "TrainingState", "NotTraining");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusUISquadMemberRevived_Init () {
    libCPCD_gt_CDTychusUISquadMemberRevived = TriggerCreate("libCPCD_gt_CDTychusUISquadMemberRevived_Func");
    TriggerEnable(libCPCD_gt_CDTychusUISquadMemberRevived, false);
    libCOMI_gf_TychusHeroEvent(libCPCD_gt_CDTychusUISquadMemberRevived, "Event_TychusHeroRevive");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusUISquadMemberDeath
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusUISquadMemberDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_squadInstance;
    int lv_squadIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_squadInstance = libCOMI_gf_EventTychusHeroInstance();
    lv_squadIndex = UserDataGetInt("CoopTechTychusSquad", lv_squadInstance, "Squad Slot", 1);

    // Conditions
    if (testConds) {
        if (!((lv_squadIndex > -1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadUnitFrames[lv_squadIndex][EventPlayer()], PlayerGroupSingle(UnitGetOwner(libCPCD_gf_CDTychusEventHeroUnit())), "DeathState", "Dead");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusUISquadMemberDeath_Init () {
    libCPCD_gt_CDTychusUISquadMemberDeath = TriggerCreate("libCPCD_gt_CDTychusUISquadMemberDeath_Func");
    TriggerEnable(libCPCD_gt_CDTychusUISquadMemberDeath, false);
    libCOMI_gf_TychusHeroEvent(libCPCD_gt_CDTychusUISquadMemberDeath, "Event_TychusHeroDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusUISquadStructureBuilt
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusUISquadStructureBuilt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_squadinstance;
    int lv_squadindex;

    // Automatic Variable Declarations
    string auto821A40FB_userType;
    int auto821A40FB_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto821A40FB_userType = "CoopTechTychusSquad";
    auto821A40FB_i = 1;
    for ( ; auto821A40FB_i <= UserDataInstanceCount(auto821A40FB_userType) ; auto821A40FB_i += 1 ) {
        lv_squadinstance = UserDataInstance(auto821A40FB_userType, auto821A40FB_i);
        lv_squadindex = UserDataGetInt("CoopTechTychusSquad", lv_squadinstance, "Squad Slot", 1);
        if ((lv_squadindex != -1) && (UnitGetType(libCOMI_gf_EventTychusStructure()) == UserDataGetUnit("CoopTechTychusSquad", lv_squadinstance, "EquipmentStructure", 1))) {
            libNtve_gf_SetDialogItemUnit(libCPCD_gv_cDTychusUIEquipmentStructureTargets[lv_squadindex][UnitGetOwner(libCPCD_gf_CDTychusEventHeroUnit())], libCOMI_gf_EventTychusStructure(), PlayerGroupSingle(UnitGetOwner(libCPCD_gf_CDTychusEventHeroUnit())));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusUISquadStructureBuilt_Init () {
    libCPCD_gt_CDTychusUISquadStructureBuilt = TriggerCreate("libCPCD_gt_CDTychusUISquadStructureBuilt_Func");
    TriggerEnable(libCPCD_gt_CDTychusUISquadStructureBuilt, false);
    libCOMI_gf_TychusStructureEvent(libCPCD_gt_CDTychusUISquadStructureBuilt, "Event_TychusHeroStructureCreate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusUISquadBarBuilt
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusUISquadBarBuilt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_squadindex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitProgressUnit()) == "TychusResearchCenter") || (UnitGetType(EventUnitProgressUnit()) == "TychusResearchCenterUnlocked")))) {
            return false;
        }

        if (!((libCPGL_gv_commander[UnitGetOwner(EventUnitProgressUnit())].lv_commander == "Tychus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CDTychusUISetBarUnit(EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusUISquadBarBuilt_Init () {
    libCPCD_gt_CDTychusUISquadBarBuilt = TriggerCreate("libCPCD_gt_CDTychusUISquadBarBuilt_Func");
    TriggerEnable(libCPCD_gt_CDTychusUISquadBarBuilt, false);
    TriggerAddEventUnitConstructProgress(libCPCD_gt_CDTychusUISquadBarBuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusUISquadBarUpdateProgress
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusUISquadBarUpdateProgress_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto388EAC25_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto388EAC25_g = libCPGL_gf_AllCommandersinPlayerGroup("Tychus", libCPGL_gf_HumanPlayers());
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto388EAC25_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libNtve_gf_SetDialogItemCurrentValue(libCPCD_gv_cDTychusUISquadTrainingProgressBar[lv_indexPlayer], (100.0 - UnitGetProgressComplete(libCPCD_gv_cDTychusUIBar[lv_indexPlayer], 1)), PlayerGroupAll());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusUISquadBarUpdateProgress_Init () {
    libCPCD_gt_CDTychusUISquadBarUpdateProgress = TriggerCreate("libCPCD_gt_CDTychusUISquadBarUpdateProgress_Func");
    TriggerEnable(libCPCD_gt_CDTychusUISquadBarUpdateProgress, false);
    TriggerAddEventTimePeriodic(libCPCD_gt_CDTychusUISquadBarUpdateProgress, 0.125, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusUIMedivacPlatformBuilt
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusUIMedivacPlatformBuilt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medivacplatform;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_medivacplatform = EventUnitCreatedUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_medivacplatform) == "TychusMedivacPlatform"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCPGL_gv_commander[UnitGetOwner(EventUnitCreatedUnit())].lv_globalCasterGroup, lv_medivacplatform);
    libNtve_gf_SetDialogItemUnitGroup(libCPCD_gv_globalPowerCmdPanel[UnitGetOwner(EventUnitCreatedUnit())], libCPGL_gv_commander[UnitGetOwner(EventUnitCreatedUnit())].lv_globalCasterGroup, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusUIMedivacPlatformBuilt_Init () {
    libCPCD_gt_CDTychusUIMedivacPlatformBuilt = TriggerCreate("libCPCD_gt_CDTychusUIMedivacPlatformBuilt_Func");
    TriggerEnable(libCPCD_gt_CDTychusUIMedivacPlatformBuilt, false);
    TriggerAddEventUnitCreated(libCPCD_gt_CDTychusUIMedivacPlatformBuilt, null, "TychusTerranBuild", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusUIMedivacAbilityReady
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusUIMedivacAbilityReady_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCPGL_gv_commander[UnitGetOwner(EventUnit())].lv_commander == "Tychus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CDTychusUIMedivacModifyCharges(1, UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusUIMedivacAbilityReady_Init () {
    libCPCD_gt_CDTychusUIMedivacAbilityReady = TriggerCreate("libCPCD_gt_CDTychusUIMedivacAbilityReady_Func");
    TriggerEnable(libCPCD_gt_CDTychusUIMedivacAbilityReady, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDTychusUIMedivacAbilityReady, null, "TychusMedivacCooldownTracker", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusUIMedivacAbilityUnready
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusUIMedivacAbilityUnready_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCPGL_gv_commander[UnitGetOwner(EventUnit())].lv_commander == "Tychus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CDTychusUIMedivacModifyCharges(-1, UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusUIMedivacAbilityUnready_Init () {
    libCPCD_gt_CDTychusUIMedivacAbilityUnready = TriggerCreate("libCPCD_gt_CDTychusUIMedivacAbilityUnready_Func");
    TriggerEnable(libCPCD_gt_CDTychusUIMedivacAbilityUnready, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDTychusUIMedivacAbilityUnready, null, "TychusMedivacCooldownTracker", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusUIEquipmentUpgraded
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusUIEquipmentUpgraded_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_squadinstance;
    string lv_equipment;
    int lv_counter;
    unit lv_squadhero;

    // Automatic Variable Declarations
    string autoDF96954B_userType;
    int autoDF96954B_i;
    string auto940AEC91_userType;
    string auto940AEC91_instance;
    string auto940AEC91_field;
    int auto940AEC91_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCPGL_gv_commander[EventPlayer()].lv_commander == "Tychus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDF96954B_userType = "CoopTechTychusSquad";
    autoDF96954B_i = 1;
    for ( ; autoDF96954B_i <= UserDataInstanceCount(autoDF96954B_userType) ; autoDF96954B_i += 1 ) {
        lv_squadinstance = UserDataInstance(autoDF96954B_userType, autoDF96954B_i);
        auto940AEC91_userType = "CoopTechTychusSquad";
        auto940AEC91_instance = lv_squadinstance;
        auto940AEC91_field = "Equipment";
        auto940AEC91_i = 1;
        for ( ; auto940AEC91_i <= UserDataFieldValueCount(auto940AEC91_userType,auto940AEC91_field) ; auto940AEC91_i += 1 ) {
            lv_equipment = UserDataGetUpgrade(auto940AEC91_userType,auto940AEC91_instance,auto940AEC91_field, auto940AEC91_i);
            if ((lv_equipment == libNtve_gf_TriggeringProgressUpgrade())) {
                UserDataSetInt("CoopTechTychusSquad", lv_squadinstance, "EquipCount", 1, (UserDataGetInt("CoopTechTychusSquad", lv_squadinstance, "EquipCount", 1) + 1));
                DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadUnitFrames[UserDataGetInt("CoopTechTychusSquad", lv_squadinstance, "Squad Slot", 1)][EventPlayer()], PlayerGroupAll(), "EquipmentState", IntToString(UserDataGetInt("CoopTechTychusSquad", lv_squadinstance, "EquipCount", 1)));
                libCPCD_gf_CDTychusUIPlayPurchaseSound(EventPlayer());
                lv_squadhero = libCPCD_gv_cDTychusUIHeros[UserDataGetInt("CoopTechTychusSquad", lv_squadinstance, "Squad Slot", 1)][EventPlayer()];
                ActorCreate(ActorScopeFromUnit(EventUnit()), "Heavens_COOP_GearDeliveryBeam_Source", null, null, null);
                ActorSend(libNtve_gf_ActorLastCreated(), (("Signal " + (lv_squadinstance))));
                if ((UnitIsAlive(lv_squadhero) == true)) {
                    ActorCreate(ActorScopeFromUnit(lv_squadhero), "Heavens_COOP_GearDeliveryBeam_Target", null, null, null);
                    ActorSend(libNtve_gf_ActorLastCreated(), (("Signal " + (lv_squadinstance))));
                }

                return true;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusUIEquipmentUpgraded_Init () {
    libCPCD_gt_CDTychusUIEquipmentUpgraded = TriggerCreate("libCPCD_gt_CDTychusUIEquipmentUpgraded_Func");
    TriggerEnable(libCPCD_gt_CDTychusUIEquipmentUpgraded, false);
    TriggerAddEventUnitResearchProgress(libCPCD_gt_CDTychusUIEquipmentUpgraded, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusUISwapInit
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusUISwapInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    text lv_tooltip;
    int lv_dimensionsX;
    int lv_dimensionsY;
    int lv_imageDimensionsX;
    int lv_imageDimensionsY;
    int lv_offsetY;

    // Automatic Variable Declarations
    const int autoA086783F_ae = 3;
    const int autoA086783F_ai = 1;

    // Variable Initialization
    lv_tooltip = StringExternal("Param/Value/lib_CPCD_2EE37CA8");
    lv_dimensionsX = 40;
    lv_dimensionsY = 25;
    lv_imageDimensionsX = 30;
    lv_imageDimensionsY = 13;
    lv_offsetY = 17;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCPCD_gt_CDTychusUISwapButtonClicked, true);
    TriggerEnable(libCPCD_gt_CDTychusUISwapPurchased, true);
    DialogCreate(500, 500, c_anchorTop, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libCPCD_gv_cDTychusUISwapTopBarIconsDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), libCPGL_gf_AllCommandersinPlayerGroup("Tychus", libCPGL_gf_HumanPlayers()), true);
    lv_i = 1;
    for ( ; ( (autoA086783F_ai >= 0 && lv_i <= autoA086783F_ae) || (autoA086783F_ai < 0 && lv_i >= autoA086783F_ae) ) ; lv_i += autoA086783F_ai ) {
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_dimensionsX, lv_dimensionsY, c_anchorTop, ((92 * (lv_i - 1)) + 7), lv_offsetY, lv_tooltip, StringToText(""), "");
        libCPCD_gv_cDTychusUISwapTopBarIcons[lv_i][0] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_imageDimensionsX, lv_imageDimensionsY, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\UI\\Tychus_SwitchOutlaw.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libCPCD_gv_cDTychusUISwapTopBarIcons[lv_i][1] = DialogControlLastCreated();
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, libCPCD_gv_cDTychusUISwapTopBarIcons[lv_i][0], c_anchorCenter, 0, 0);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
    TriggerExecute(libCPCD_gt_CDTychusUISwapPurchased, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusUISwapInit_Init () {
    libCPCD_gt_CDTychusUISwapInit = TriggerCreate("libCPCD_gt_CDTychusUISwapInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusUISwapButtonClicked
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusUISwapButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_firsthero;
    unit lv_hero;
    string lv_squadinstance;
    int lv_squadindex;
    int lv_a;
    int lv_player;
    playergroup lv_playerGroup;

    // Automatic Variable Declarations
    int autoC4C34AC2_val;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_playerGroup = PlayerGroupSingle(lv_player);

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libCPCD_gv_cDTychusUISwapTopBarIcons[1][0]) || (EventDialogControl() == libCPCD_gv_cDTychusUISwapTopBarIcons[2][0]) || (EventDialogControl() == libCPCD_gv_cDTychusUISwapTopBarIcons[3][0])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC4C34AC2_val = EventDialogControl();
    if (autoC4C34AC2_val == libCPCD_gv_cDTychusUISwapTopBarIcons[1][0]) {
        lv_a = 1;
    }
    else if (autoC4C34AC2_val == libCPCD_gv_cDTychusUISwapTopBarIcons[2][0]) {
        lv_a = 2;
    }
    else if (autoC4C34AC2_val == libCPCD_gv_cDTychusUISwapTopBarIcons[3][0]) {
        lv_a = 3;
    }
    else {
    }
    lv_firsthero = libCPCD_gv_cDTychusUIHeros[lv_a][lv_player];
    lv_squadinstance = libCPCD_gf_CDTychusUISwapGetSquadInstance(lv_firsthero);
    lv_squadindex = (lv_a + 1);
    libCPCD_gf_CDTychusUISwapSetSquadMember(lv_firsthero, lv_squadindex, lv_squadinstance);
    UnitBehaviorRemovePlayer(lv_firsthero, "TychusHeroSubGroup", 1, UnitBehaviorCount(lv_firsthero, "TychusHeroSubGroup"));
    UnitBehaviorAdd(lv_firsthero, "TychusHeroSubGroup", lv_firsthero, lv_squadindex);
    lv_hero = libCPCD_gv_cDTychusUIHeros[(lv_a + 1)][lv_player];
    lv_squadinstance = libCPCD_gf_CDTychusUISwapGetSquadInstance(lv_hero);
    lv_squadindex = lv_a;
    libCPCD_gf_CDTychusUISwapSetSquadMember(lv_hero, lv_squadindex, lv_squadinstance);
    UnitBehaviorRemovePlayer(lv_hero, "TychusHeroSubGroup", 1, UnitBehaviorCount(lv_hero, "TychusHeroSubGroup"));
    UnitBehaviorAdd(lv_hero, "TychusHeroSubGroup", lv_hero, lv_squadindex);
    libCPCD_gv_cDTychusUIHeros[lv_a][lv_player] = lv_hero;
    libCPCD_gv_cDTychusUIHeros[(lv_a + 1)][lv_player] = lv_firsthero;
    if ((UnitIsAlive(lv_firsthero) == false)) {
        DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadUnitFrames[(lv_a + 1)][0], lv_playerGroup, "DeathState", "Dead");
    }

    if ((UnitIsAlive(lv_hero) == false)) {
        DialogControlSetAnimationState(libCPCD_gv_cDTychusUISquadUnitFrames[lv_a][0], lv_playerGroup, "DeathState", "Dead");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusUISwapButtonClicked_Init () {
    libCPCD_gt_CDTychusUISwapButtonClicked = TriggerCreate("libCPCD_gt_CDTychusUISwapButtonClicked_Func");
    TriggerEnable(libCPCD_gt_CDTychusUISwapButtonClicked, false);
    TriggerAddEventDialogControl(libCPCD_gt_CDTychusUISwapButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTychusUISwapPurchased
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTychusUISwapPurchased_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_player;
    playergroup lv_playerGroup;

    // Automatic Variable Declarations
    int autoEDF5A597_ae;
    int autoEDF5A597_var;

    // Variable Initialization
    lv_player = UnitGetOwner(libCPCD_gf_CDTychusEventHeroUnit());
    lv_playerGroup = PlayerGroupSingle(lv_player);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeReal);
    lv_index = (libCPCD_gf_CDTychusUIGetNextSquadIndex(lv_player) - 2);
    if ((((lv_index >= 1) && (lv_index <= 3)) == true)) {
        autoEDF5A597_ae = lv_index;
        autoEDF5A597_var = 1;
        for ( ; autoEDF5A597_var <= autoEDF5A597_ae; autoEDF5A597_var += 1 ) {
            if ((DialogControlIsVisible(libCPCD_gv_cDTychusUISwapTopBarIcons[autoEDF5A597_var][lv_player], lv_player) == false)) {
                DialogControlSetVisible(libCPCD_gv_cDTychusUISwapTopBarIcons[autoEDF5A597_var][0], lv_playerGroup, true);
                DialogControlSetVisible(libCPCD_gv_cDTychusUISwapTopBarIcons[autoEDF5A597_var][1], lv_playerGroup, true);
                DialogControlFadeTransparency(libCPCD_gv_cDTychusUISwapTopBarIcons[autoEDF5A597_var][1], lv_playerGroup, 0.0, 100.0);
                Wait(0.0, c_timeReal);
                DialogControlFadeTransparency(libCPCD_gv_cDTychusUISwapTopBarIcons[autoEDF5A597_var][1], lv_playerGroup, 0.7, 40.0);
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTychusUISwapPurchased_Init () {
    libCPCD_gt_CDTychusUISwapPurchased = TriggerCreate("libCPCD_gt_CDTychusUISwapPurchased_Func");
    TriggerEnable(libCPCD_gt_CDTychusUISwapPurchased, false);
    libCPCD_gf_CDTychusEvent(libCPCD_gt_CDTychusUISwapPurchased, "Event_TychusHeroCreate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AchievementTychusGear
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_AchievementTychusGear_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranTychus", libCOOC_gf_CC_PlayersOfCommander("TerranTychus"));

    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "TychusACBandofBrothers") || (libNtve_gf_TriggeringProgressUpgrade() == "TychusReaperBombCharges") || (libNtve_gf_TriggeringProgressUpgrade() == "TychusWarhoundTurretUpgrade") || (libNtve_gf_TriggeringProgressUpgrade() == "TychusFirebatShield") || (libNtve_gf_TriggeringProgressUpgrade() == "TychusHercCrit") || (libNtve_gf_TriggeringProgressUpgrade() == "TychusMarauderAttackSplash") || (libNtve_gf_TriggeringProgressUpgrade() == "TychusGhostConcentrationHelmet") || (libNtve_gf_TriggeringProgressUpgrade() == "TychusSpectreBrillianceAura") || (libNtve_gf_TriggeringProgressUpgrade() == "TychusMedicDefensiveMatrix")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gv_achievementTychusGear += 1;
    if ((libNtve_gf_TriggeringProgressUpgrade() == "TychusACBandofBrothers")) {
        AchievementTermQuantityAdd(lv_player, "CommanderTychusUltimateTychus", 1);
        libCPCD_gf_AchievementTychusGear(lv_player);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "TychusReaperBombCharges")) {
        AchievementTermQuantityAdd(lv_player, "CommanderTychusUltimateReaper", 1);
        libCPCD_gf_AchievementTychusGear(lv_player);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "TychusWarhoundTurretUpgrade")) {
        AchievementTermQuantityAdd(lv_player, "CommanderTychusUltimateWarhound", 1);
        libCPCD_gf_AchievementTychusGear(lv_player);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "TychusFirebatShield")) {
        AchievementTermQuantityAdd(lv_player, "CommanderTychusUltimateFirebat", 1);
        libCPCD_gf_AchievementTychusGear(lv_player);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "TychusHercCrit")) {
        AchievementTermQuantityAdd(lv_player, "CommanderTychusUltimateHerc", 1);
        libCPCD_gf_AchievementTychusGear(lv_player);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "TychusMarauderAttackSplash")) {
        AchievementTermQuantityAdd(lv_player, "CommanderTychusUltimateMarauder", 1);
        libCPCD_gf_AchievementTychusGear(lv_player);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "TychusGhostConcentrationHelmet")) {
        AchievementTermQuantityAdd(lv_player, "CommanderTychusUltimateGhost", 1);
        libCPCD_gf_AchievementTychusGear(lv_player);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "TychusSpectreBrillianceAura")) {
        AchievementTermQuantityAdd(lv_player, "CommanderTychusUltimateSpectre", 1);
        libCPCD_gf_AchievementTychusGear(lv_player);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "TychusMedicDefensiveMatrix")) {
        AchievementTermQuantityAdd(lv_player, "CommanderTychusUltimateMedic", 1);
        libCPCD_gf_AchievementTychusGear(lv_player);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_AchievementTychusGear_Init () {
    libCPCD_gt_AchievementTychusGear = TriggerCreate("libCPCD_gt_AchievementTychusGear_Func");
    TriggerEnable(libCPCD_gt_AchievementTychusGear, false);
    TriggerAddEventUnitResearchProgress(libCPCD_gt_AchievementTychusGear, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AchievementTychusHeal
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_AchievementTychusHeal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_healingPlayer;
    int lv_healedPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_healingPlayer = EventUnitHealLaunchPlayer();
    lv_healedPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((PlayerCommander(lv_healingPlayer) == "Tychus"))) {
            return false;
        }

        if (!((EventUnitHealVital() == c_unitVitalLife))) {
            return false;
        }

        if (!((libCOOC_gf_CC_PlayerAllyNew(lv_healingPlayer) == lv_healedPlayer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantityAdd(lv_healingPlayer, "CommanderTychusHeal", CeilingI(EventUnitHealAmount()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_AchievementTychusHeal_Init () {
    libCPCD_gt_AchievementTychusHeal = TriggerCreate("libCPCD_gt_AchievementTychusHeal_Func");
    TriggerEnable(libCPCD_gt_AchievementTychusHeal, false);
    TriggerAddEventUnitHealed(libCPCD_gt_AchievementTychusHeal, null, c_unitVitalAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulTriggersInit
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulTriggersInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    region lv_map;

    // Automatic Variable Declarations
    playergroup autoB6A20518_g;
    int autoB6A20518_var;
    playergroup auto29940F24_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoB6A20518_g = libCPGL_gf_HumanPlayers();
    autoB6A20518_var = -1;
    while (true) {
        autoB6A20518_var = PlayerGroupNextPlayer(autoB6A20518_g, autoB6A20518_var);
        if (autoB6A20518_var < 0) { break; }
        RegionAddCircle(lv_map, true, PlayerStartLocation(autoB6A20518_var), 10.0);
    }
    auto29940F24_g = libCPGL_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto29940F24_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCPGL_gv_commander[lv_indexPlayer].lv_commander == "Zeratul")) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "ZeratulCommander", 1);
            libCPCD_gv_cDZeratulPlayer = lv_indexPlayer;
            libCPCD_gf_CDZeratulProphecyPlaceArtifact(libCPCD_gv_cDZeratulPlayer);
            TechTreeBehaviorAllow(lv_indexPlayer, "CannotTrade", false);
            TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("RoboticsBayResearch", 1), false);
            Wait(0.0625, c_timeGame);
            VisFillArea(libCPCD_gv_cDZeratulPlayer, libCPCM_gf_PlayerSafeZone(true), c_fillTypeMasked, false);
            VisFillArea(libCPCD_gv_cDZeratulPlayer, lv_map, c_fillTypeUnexplored, false);
        }

    }
    TriggerEnable(libCPCD_gt_CDZeratulProphecyEventArtifactMised, true);
    TriggerEnable(libCPCD_gt_CDZeratulProphecyEventArtifactPickedUp, true);
    TriggerEnable(libCPCD_gt_CDZeratulProphecyEventArtifactRevealed, true);
    TriggerEnable(libCPCD_gt_CDZeratulProphecyEventArtifactUsed, true);
    TriggerEnable(libCPCD_gt_CDZeratulProphecyEventProphecyCast, true);
    TriggerEnable(libCPCD_gt_CDZeratulProphecyEventVision, true);
    TriggerEnable(libCPCD_gt_CDZeratulProphecyMiss, true);
    TriggerEnable(libCPCD_gt_CDZeratulProphecyCastStop, true);
    TriggerEnable(libCPCD_gt_CDZeratulProphecyArtifactPickedUp, true);
    TriggerEnable(libCPCD_gt_CDZeratulProphecyArtifactRevealed, true);
    TriggerEnable(libCPCD_gt_CDZeratulProphecyArtifactPathingSafety, true);
    TriggerEnable(libCPCD_gt_CDZeratulArtifactTriggerUpdates, true);
    TriggerEnable(libCPCD_gt_CDZeratulTopBarWarpTrainStart, true);
    TriggerEnable(libCPCD_gt_CDZeratulTopBarWarpTrainFinish, true);
    TriggerEnable(libCPCD_gt_CDZeratullTopBarRallySet, true);
    TriggerEnable(libCPCD_gt_CDZeratulTopBarRallyRedirect, true);
    TriggerEnable(libCPCD_gt_CM_ZeratulTopBarRallyCancel, true);
    TriggerEnable(libCPCD_gt_CDZeratulTrade, true);
    TriggerEnable(libCPCD_gt_CDZeratulTradeFullEnergyOn, true);
    TriggerEnable(libCPCD_gt_CDZeratulTradeFullEnergyOff, true);
    TriggerEnable(libCPCD_gt_CDZeratulOrbitalAssimilator, true);
    TriggerEnable(libCPCD_gt_CDZeratulSentryShield, true);
    TriggerEnable(libCPCD_gt_CDZeratulDarkTemplarRevive, true);
    TriggerEnable(libCPCD_gt_CDZeratulWarpPrismAutoUnloadOn, true);
    TriggerEnable(libCPCD_gt_CDZeratulWarpPrismAutoUnloadOff, true);
    TriggerEnable(libCPCD_gt_CDZeratulWarpPrismSelectRift, true);
    TriggerEnable(libCPCD_gt_CDZeratulWarpPrismAutoUnloadMorph, true);
    TriggerEnable(libCPCD_gt_CDZeratulCannonUnitLink, true);
    TriggerEnable(libCPCD_gt_CDZeratulProjectionTimedLifeFate, true);
    TriggerEnable(libCPCD_gt_CDZeratulProjectionCancel, true);
    TriggerEnable(libCPCD_gt_CDZeratulDisruptorShotFinal, true);
    TriggerEnable(libCPCD_gt_CDZeratulDisruptorShotCreate, true);
    TriggerEnable(libCPCD_gt_CDZeratulDisruptorShotImpact, true);
    TriggerEnable(libCPCD_gt_CDZeratulEntropicBlastSpawns, true);
    TriggerEnable(libCPCD_gt_CDZeratulArtifactUpdates, true);
    TriggerEnable(libCPCD_gt_CDZeratulTransportUnload, true);
    TriggerEnable(libCPCD_gt_CDZeratulStasisDuration, true);
    TriggerEnable(libCPCD_gt_CDZeratulStasisBeamIssueOrder, true);
    TriggerEnable(libCPCD_gt_CDZeratulStasisBeam, true);
    TriggerEnable(libCPCD_gt_CDZeratulDevolve, true);
    TriggerEnable(libCPCD_gt_AchievementZeratulDevolveKills, true);
    TriggerEnable(libCPCD_gt_CDZeratulAvatarsPing, true);
    TriggerEnable(libCPCD_gt_CDZeratulRallySetZeratul, true);
    TriggerEnable(libCPCD_gt_CDZeratulTransportResetRally, true);
    TriggerEnable(libCPCD_gt_CDZeratulArtifactCollected, true);
    TriggerEnable(libCPCD_gt_CDZeratulArtifactUpgraded, true);
    TriggerEnable(libCPCD_gt_CDZeratulArtifactUsed, true);
    TriggerEnable(libCPCD_gt_CDZeratulProphecyNotReady, true);
    TriggerEnable(libCPCD_gt_CDZeratulProphecyReady, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulTriggersInit_Init () {
    libCPCD_gt_CDZeratulTriggersInit = TriggerCreate("libCPCD_gt_CDZeratulTriggersInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulRallySetZeratul
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulRallySetZeratul_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(EventUnitTargetUnit()) == true) && (EventUnitTargetUnit() == libCPGL_gv_commander[UnitGetOwner(EventUnit())].lv_heroUnit)) {
        UnitGroupAdd(libCPCD_gv_cM_Zeratul_RalliedGroup, EventUnit());
    }
    else {
        UnitGroupRemove(libCPCD_gv_cM_Zeratul_RalliedGroup, EventUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulRallySetZeratul_Init () {
    libCPCD_gt_CDZeratulRallySetZeratul = TriggerCreate("libCPCD_gt_CDZeratulRallySetZeratul_Func");
    TriggerEnable(libCPCD_gt_CDZeratulRallySetZeratul, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDZeratulRallySetZeratul, null, AbilityCommand("Rally", 0), c_abilRallyStagePlace, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulOrbitalAssimilator
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulOrbitalAssimilator_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_nexus;
    unit lv_itGeyser;

    // Automatic Variable Declarations
    unitgroup autoCF665100_g;
    int autoCF665100_u;

    // Variable Initialization
    lv_p = EventPlayer();
    lv_nexus = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((PlayerCommander(lv_p) == "Zeratul"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoCF665100_g = UnitGroupSearch(null, 0, UnitGetPosition(lv_nexus), 10.0, UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCF665100_u = UnitGroupCount(autoCF665100_g, c_unitCountAll);
    for (;; autoCF665100_u -= 1) {
        lv_itGeyser = UnitGroupUnitFromEnd(autoCF665100_g, autoCF665100_u);
        if (lv_itGeyser == null) { break; }
        if ((UnitHasBehavior2(lv_itGeyser, "GeyserBlockedByRocks") == false)) {
            UnitIssueOrder(lv_nexus, OrderTargetingUnit(AbilityCommand("NexusBuild", 0), lv_itGeyser), c_orderQueueAddToEnd);
            Wait(0.125, c_timeGame);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulOrbitalAssimilator_Init () {
    libCPCD_gt_CDZeratulOrbitalAssimilator = TriggerCreate("libCPCD_gt_CDZeratulOrbitalAssimilator_Func");
    TriggerEnable(libCPCD_gt_CDZeratulOrbitalAssimilator, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDZeratulOrbitalAssimilator, c_playerAny, "NexusCreateSet");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDZeratulOrbitalAssimilator, c_playerAny, "NexusBirthSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulArtifactTriggerUpdates
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulArtifactTriggerUpdates_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_itInstance;
    int lv_p;
    string lv_behavior;
    string lv_itBehavior;
    string lv_itUpgrade;
    int lv_stack;

    // Automatic Variable Declarations
    string autoCB722B18_userType;
    int autoCB722B18_i;

    // Variable Initialization
    lv_p = EventPlayer();
    lv_behavior = EventUnitBehavior();
    lv_stack = UnitBehaviorCount(EventUnit(), lv_behavior);

    // Conditions
    if (testConds) {
        if (!(((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate) || (EventUnitBehaviorChange() == c_unitBehaviorChangeDeactivate)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoCB722B18_userType = "CoopTechBehaviorZeratul";
    autoCB722B18_i = 1;
    for ( ; autoCB722B18_i <= UserDataInstanceCount(autoCB722B18_userType) ; autoCB722B18_i += 1 ) {
        lv_itInstance = UserDataInstance(autoCB722B18_userType, autoCB722B18_i);
        lv_itBehavior = UserDataGetGameLink("CoopTechBehaviorZeratul", lv_itInstance, "Behavior", 1);
        lv_itUpgrade = UserDataGetGameLink("CoopTechBehaviorZeratul", lv_itInstance, "Upgrade", 1);
        if ((lv_itBehavior == lv_behavior)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_p, lv_itUpgrade, lv_stack);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulArtifactTriggerUpdates_Init () {
    libCPCD_gt_CDZeratulArtifactTriggerUpdates = TriggerCreate("libCPCD_gt_CDZeratulArtifactTriggerUpdates_Func");
    TriggerEnable(libCPCD_gt_CDZeratulArtifactTriggerUpdates, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDZeratulArtifactTriggerUpdates, null, "HaveZeratulArtifactTier1AndCyberCore", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDZeratulArtifactTriggerUpdates, null, "HaveZeratulArtifactTier1AndDarkShine", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDZeratulArtifactTriggerUpdates, null, "HaveZeratulArtifactTier1AndRoboticsBay", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDZeratulArtifactTriggerUpdates, null, "HaveZeratulArtifactTier2AndCyberCore", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDZeratulArtifactTriggerUpdates, null, "HaveZeratulArtifactTier2AndDarkShine", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDZeratulArtifactTriggerUpdates, null, "HaveZeratulArtifactTier2AndRoboticsBay", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDZeratulArtifactTriggerUpdates, null, "HaveZeratulArtifactTier3AndCyberCore", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDZeratulArtifactTriggerUpdates, null, "HaveZeratulArtifactTier3AndDarkShine", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDZeratulArtifactTriggerUpdates, null, "HaveZeratulArtifactTier3AndRoboticsBay", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulArtifactUpdates
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulArtifactUpdates_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventUpgradeName() == "ZeratulArtifactTier1") || (EventUpgradeName() == "ZeratulArtifactTier2") || (EventUpgradeName() == "ZeratulArtifactTier3") || (EventUpgradeName() == "CommanderPrestigeZeratulArtifactFragmentsUnlimitedUpgrade")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCPGL_gv_commander[EventPlayer()].lv_commanderLevel >= 15)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulArtifactTier1ZeratulTalentUpgrade", 1);
    }

    if ((EventUpgradeName() == "ZeratulArtifactTier1")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulTopBarZealotSquad", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulTopBarVoidRaySquad", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulShieldsLevel1", 1);
    }
    else if ((EventUpgradeName() == "ZeratulArtifactTier2")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulTopBarZealotSquad", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulTopBarVoidRaySquad", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulShieldsLevel2", 1);
    }
    else if ((EventUpgradeName() == "ZeratulArtifactTier3")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulTopBarZealotSquad", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulTopBarVoidRaySquad", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulShieldsLevel3", 1);
        if ((libCPGL_gv_commander[EventPlayer()].lv_commanderLevel >= 8)) {
            TechTreeUpgradeAddLevel(EventPlayer(), "VoidRayPrismaticRange", 1);
        }

    }
    else if ((EventUpgradeName() == "CommanderPrestigeZeratulArtifactFragmentsUnlimitedUpgrade")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulWeaponsLevel4", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulArmorsLevel4", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulShieldsLevel4", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulArtifactUpdates_Init () {
    libCPCD_gt_CDZeratulArtifactUpdates = TriggerCreate("libCPCD_gt_CDZeratulArtifactUpdates_Func");
    TriggerEnable(libCPCD_gt_CDZeratulArtifactUpdates, false);
    TriggerAddEventUpgradeLevelChanged(libCPCD_gt_CDZeratulArtifactUpdates, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulArt2Stun
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulArt2Stun_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "ZeratulStun", EventPlayerEffectUsedUnit(c_effectUnitCaster), UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "ZeratulArt2ChargesStun"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulArt2Stun_Init () {
    libCPCD_gt_CDZeratulArt2Stun = TriggerCreate("libCPCD_gt_CDZeratulArt2Stun_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDZeratulArt2Stun, c_playerAny, "ZeratulArt2ChargesStunRB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulTrade
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulTrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libCPGL_gv_commander[lv_p].lv_globalCasterUnit, "ZeratulTradeTarget", libCPGL_gv_commander[lv_p].lv_globalCasterUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulTrade_Init () {
    libCPCD_gt_CDZeratulTrade = TriggerCreate("libCPCD_gt_CDZeratulTrade_Func");
    TriggerEnable(libCPCD_gt_CDZeratulTrade, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDZeratulTrade, c_playerAny, "ZeratulTrade");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulTradeFullEnergyOn
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulTradeFullEnergyOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeBehaviorAllow(lv_p, "CannotTrade", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulTradeFullEnergyOn_Init () {
    libCPCD_gt_CDZeratulTradeFullEnergyOn = TriggerCreate("libCPCD_gt_CDZeratulTradeFullEnergyOn_Func");
    TriggerEnable(libCPCD_gt_CDZeratulTradeFullEnergyOn, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDZeratulTradeFullEnergyOn, null, "ZeratulTopBarFullEnergy", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulTradeFullEnergyOff
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulTradeFullEnergyOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeBehaviorAllow(lv_p, "CannotTrade", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulTradeFullEnergyOff_Init () {
    libCPCD_gt_CDZeratulTradeFullEnergyOff = TriggerCreate("libCPCD_gt_CDZeratulTradeFullEnergyOff_Func");
    TriggerEnable(libCPCD_gt_CDZeratulTradeFullEnergyOff, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDZeratulTradeFullEnergyOff, null, "ZeratulTopBarFullEnergy", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulDisruptorShotFinal
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulDisruptorShotFinal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;
    point lv_targetPoint;
    point lv_spawnPoint;
    point lv_goal;
    fixed lv_mainAngel;
    unit lv_purifier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_u) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_purifier = UnitBehaviorEffectUnit(lv_u, "ZeratulPurificationNovaCasterFinder", c_effectUnitCaster, 0);
    if ((UnitIsValid(lv_purifier) == true) && (TechTreeUpgradeCount(lv_p, "ZeratulArtifactTier3_RoboticsBay", c_techCountCompleteOnly) >= 1)) {
        lv_spawnPoint = UnitGetPosition(lv_u);
        lv_goal = UnitGetGoalPosition(lv_u);
        if ((lv_spawnPoint != lv_goal)) {
            lv_mainAngel = AngleBetweenPoints(lv_spawnPoint, lv_goal);
        }
        else {
            lv_mainAngel = AngleBetweenPoints(UnitGetPosition(lv_purifier), lv_spawnPoint);
        }
        lv_targetPoint = PointWithOffsetPolar(lv_spawnPoint, 15.0, lv_mainAngel);
        libCPCD_gf_CDZeratulDisruptorShotSpawn(lv_purifier, lv_spawnPoint, lv_targetPoint);
        lv_targetPoint = PointWithOffsetPolar(lv_spawnPoint, 15.0, (lv_mainAngel + 45.0));
        libCPCD_gf_CDZeratulDisruptorShotSpawn(lv_purifier, lv_spawnPoint, lv_targetPoint);
        lv_targetPoint = PointWithOffsetPolar(lv_spawnPoint, 15.0, (lv_mainAngel - 45.0));
        libCPCD_gf_CDZeratulDisruptorShotSpawn(lv_purifier, lv_spawnPoint, lv_targetPoint);
    }

    UnitKill(lv_u);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulDisruptorShotFinal_Init () {
    libCPCD_gt_CDZeratulDisruptorShotFinal = TriggerCreate("libCPCD_gt_CDZeratulDisruptorShotFinal_Func");
    TriggerEnable(libCPCD_gt_CDZeratulDisruptorShotFinal, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDZeratulDisruptorShotFinal, null, "ZeratulPurificationNovaTargettedTarget", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulDisruptorShotCreate
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulDisruptorShotCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;
    unit lv_purifier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_u) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_purifier = UnitBehaviorEffectUnit(lv_u, "ZeratulPurificationNovaTargettedTarget", c_effectUnitCaster, 0);
    UnitBehaviorAdd(lv_u, "ZeratulPurificationNovaCasterFinder", lv_purifier, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulDisruptorShotCreate_Init () {
    libCPCD_gt_CDZeratulDisruptorShotCreate = TriggerCreate("libCPCD_gt_CDZeratulDisruptorShotCreate_Func");
    TriggerEnable(libCPCD_gt_CDZeratulDisruptorShotCreate, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDZeratulDisruptorShotCreate, null, "ZeratulPurificationNovaTargettedTarget", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulDisruptorShotImpact
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulDisruptorShotImpact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_target;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((lv_u != lv_target))) {
            return false;
        }

        if (!((UnitIsValid(lv_u) == true))) {
            return false;
        }

        if (!((UnitIsValid(lv_target) == true))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(lv_p, "ZeratulArtifactTier3_RoboticsBay", c_techCountCompleteOnly) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_target, "ZeratulPurificationNovaTargetedMainTargetImmunity", lv_u, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulDisruptorShotImpact_Init () {
    libCPCD_gt_CDZeratulDisruptorShotImpact = TriggerCreate("libCPCD_gt_CDZeratulDisruptorShotImpact_Func");
    TriggerEnable(libCPCD_gt_CDZeratulDisruptorShotImpact, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDZeratulDisruptorShotImpact, c_playerAny, "ZeratulPurificationNovaTargettedSearchSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulSentryShield
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulSentryShield_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_missile;
    string lv_effect;
    unit lv_missileCaster;
    unit lv_reflectTarget;
    unit lv_sentry;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();
    lv_missile = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_effect = UnitGetOriginalEffect(lv_missile);
    lv_missileCaster = UnitGetOriginalCaster(lv_missile);
    lv_reflectTarget = lv_missileCaster;
    lv_sentry = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_sentry) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(lv_missile, lv_p, true);
    if ((libNtve_gf_UnitCanCreateEffectOnUnit(lv_missile, lv_effect, lv_reflectTarget) == true)) {
        UnitCreateEffectUnit(lv_missile, lv_effect, lv_reflectTarget);
    }

    UnitRemove(lv_missile);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulSentryShield_Init () {
    libCPCD_gt_CDZeratulSentryShield = TriggerCreate("libCPCD_gt_CDZeratulSentryShield_Func");
    TriggerEnable(libCPCD_gt_CDZeratulSentryShield, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDZeratulSentryShield, c_playerAny, "ZeratulReflectionShieldMU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulDarkTemplarRevive
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulDarkTemplarRevive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_darkTemplar;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();
    lv_darkTemplar = EventPlayerEffectUsedUnit(c_effectUnitSource);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(lv_darkTemplar, "ZeratulDarkTemplarRetreatBlinkTrigger", libNtve_gf_PointOffsetTowardsPoint(EventPlayerEffectUsedPoint(c_effectLocationSourcePoint), -8.0, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)));
    UnitBehaviorAdd(lv_darkTemplar, "ZeratulDarkTemplarRetreatCooldown", lv_darkTemplar, 1);
    UnitBehaviorAdd(lv_darkTemplar, "ZeratulDarkTemplarRetreatRegen", lv_darkTemplar, 1);
    UnitBehaviorAddCooldown(lv_darkTemplar, "ZeratulDarkTemplarRetreatCooldownDisplay", "Behavior/ZeratulDarkTemplarRetreatCooldownDisplay", UnitBehaviorDurationTotal(lv_darkTemplar, "ZeratulDarkTemplarRetreatCooldown"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulDarkTemplarRevive_Init () {
    libCPCD_gt_CDZeratulDarkTemplarRevive = TriggerCreate("libCPCD_gt_CDZeratulDarkTemplarRevive_Func");
    TriggerEnable(libCPCD_gt_CDZeratulDarkTemplarRevive, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDZeratulDarkTemplarRevive, c_playerAny, "ZeratulDarkTemplarRetreatSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulWarpPrismAutoUnloadOn
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulWarpPrismAutoUnloadOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unitgroup lv_offGroup;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_offGroup = UnitGroupEmpty();
    lv_p = UnitGetOwner(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_offGroup = UnitGroup(null, lv_p, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    libCPCD_gv_cDZeratulWarpPrismRift[lv_p] = lv_unit;
    UnitGroupRemove(lv_offGroup, lv_unit);
    UnitGroupIssueOrder(lv_offGroup, Order(AbilityCommand("ZeratulWarpPrismAutoUnload", 1)), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulWarpPrismAutoUnloadOn_Init () {
    libCPCD_gt_CDZeratulWarpPrismAutoUnloadOn = TriggerCreate("libCPCD_gt_CDZeratulWarpPrismAutoUnloadOn_Func");
    TriggerEnable(libCPCD_gt_CDZeratulWarpPrismAutoUnloadOn, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDZeratulWarpPrismAutoUnloadOn, null, "ZeratulWarpPrismAutoUnload", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulWarpPrismAutoUnloadOff
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulWarpPrismAutoUnloadOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    order lv_order;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_order = EventUnitOrder();
    lv_p = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((OrderGetFlag(lv_order, c_cmdUser) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gv_cDZeratulWarpPrismRift[lv_p] = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulWarpPrismAutoUnloadOff_Init () {
    libCPCD_gt_CDZeratulWarpPrismAutoUnloadOff = TriggerCreate("libCPCD_gt_CDZeratulWarpPrismAutoUnloadOff_Func");
    TriggerEnable(libCPCD_gt_CDZeratulWarpPrismAutoUnloadOff, false);
    TriggerAddEventUnitOrder(libCPCD_gt_CDZeratulWarpPrismAutoUnloadOff, null, AbilityCommand("ZeratulWarpPrismAutoUnload", 1));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulWarpPrismSelectRift
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulWarpPrismSelectRift_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_p = UnitGetOwner(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitClearSelection(lv_p);
    UnitSelect(libCPCD_gv_cDZeratulWarpPrismRift[lv_p], lv_p, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulWarpPrismSelectRift_Init () {
    libCPCD_gt_CDZeratulWarpPrismSelectRift = TriggerCreate("libCPCD_gt_CDZeratulWarpPrismSelectRift_Func");
    TriggerEnable(libCPCD_gt_CDZeratulWarpPrismSelectRift, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDZeratulWarpPrismSelectRift, null, AbilityCommand("ZeratulWarpPrismSelectVoidRift", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulWarpPrismAutoUnloadMorph
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulWarpPrismAutoUnloadMorph_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Conditions
    if (testConds) {
        if (!((lv_u == libCPCD_gv_cDZeratulWarpPrismRift[UnitGetOwner(lv_u)]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_u, Order(AbilityCommand("ZeratulWarpPrismAutoUnload", 0)), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulWarpPrismAutoUnloadMorph_Init () {
    libCPCD_gt_CDZeratulWarpPrismAutoUnloadMorph = TriggerCreate("libCPCD_gt_CDZeratulWarpPrismAutoUnloadMorph_Func");
    TriggerEnable(libCPCD_gt_CDZeratulWarpPrismAutoUnloadMorph, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDZeratulWarpPrismAutoUnloadMorph, null, AbilityCommand("ZeratulPhasingMode", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulCannonUnitLink
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulCannonUnitLink_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_projection;
    unit lv_source;
    fixed lv_shields;
    fixed lv_cooldown;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_projection = EventUnitCreatedUnit();
    lv_source = EventUnit();
    lv_shields = UnitGetPropertyFixed(lv_source, c_unitPropShields, c_unitPropCurrent);
    lv_cooldown = UnitAbilityGetCooldown(lv_source, "ZeratulStructureBarrier", "Abil/ZeratulStructureBarrier");

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_projection, "ZeratulPhaseProjectionChanneling", lv_source, 1);
    UnitBehaviorAdd(lv_projection, "ZeratulPhotonCannonProjection", lv_source, 1);
    UnitBehaviorAdd(lv_source, "ZeratulPhotonCannonProjectionCaster", lv_projection, 1);
    UnitSetPropertyFixed(lv_projection, c_unitPropShields, lv_shields);
    UnitSetPropertyFixed(lv_source, c_unitPropShields, 0.0);
    libNtve_gf_UnitAbilityRemoveCooldown(lv_source, "ZeratulStructureBarrier", "Abil/ZeratulStructureBarrier");
    UnitAbilityAddCooldown(lv_projection, "ZeratulStructureBarrier", "Abil/ZeratulStructureBarrier", lv_cooldown);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulCannonUnitLink_Init () {
    libCPCD_gt_CDZeratulCannonUnitLink = TriggerCreate("libCPCD_gt_CDZeratulCannonUnitLink_Func");
    TriggerEnable(libCPCD_gt_CDZeratulCannonUnitLink, false);
    TriggerAddEventUnitCreated(libCPCD_gt_CDZeratulCannonUnitLink, null, "PhaseCannonProjection", null);
    TriggerAddEventUnitCreated(libCPCD_gt_CDZeratulCannonUnitLink, null, "ZeratulKhaydarinMonolithProjection", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulProjectionTimedLifeFate
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulProjectionTimedLifeFate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_projection;
    unit lv_source;
    fixed lv_shields;
    fixed lv_cooldown;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_projection = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_source = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_shields = UnitGetPropertyFixed(lv_projection, c_unitPropShields, c_unitPropCurrent);
    lv_cooldown = UnitAbilityGetCooldown(lv_projection, "ZeratulStructureBarrier", "Abil/ZeratulStructureBarrier");

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_source, "ZeratulPhotonCannonProjectionCaster", 1);
    UnitSetPropertyFixed(lv_source, c_unitPropShields, lv_shields);
    UnitCreateEffectUnit(lv_projection, "TimedLifeFate", lv_projection);
    libNtve_gf_UnitAbilityRemoveCooldown(lv_source, "ZeratulStructureBarrier", "Abil/ZeratulStructureBarrier");
    UnitAbilityAddCooldown(lv_source, "ZeratulStructureBarrier", "Abil/ZeratulStructureBarrier", lv_cooldown);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulProjectionTimedLifeFate_Init () {
    libCPCD_gt_CDZeratulProjectionTimedLifeFate = TriggerCreate("libCPCD_gt_CDZeratulProjectionTimedLifeFate_Func");
    TriggerEnable(libCPCD_gt_CDZeratulProjectionTimedLifeFate, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDZeratulProjectionTimedLifeFate, c_playerAny, "ZeratulPhotonCannonProjectionTimedLifeFateDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulProjectionCancel
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulProjectionCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_projection;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "ZeratulPhotonCannonProjectionCaster") == true)) {
        lv_projection = UnitBehaviorEffectUnit(EventUnit(), "ZeratulPhotonCannonProjectionCaster", c_effectUnitCaster, 0);
    }
    else {
        lv_projection = EventUnit();
    }
    UnitBehaviorRemove(lv_projection, "ZeratulPhotonCannonProjection", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulProjectionCancel_Init () {
    libCPCD_gt_CDZeratulProjectionCancel = TriggerCreate("libCPCD_gt_CDZeratulProjectionCancel_Func");
    TriggerEnable(libCPCD_gt_CDZeratulProjectionCancel, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDZeratulProjectionCancel, null, AbilityCommand("ZeratulPhaseCannonProjectionCancel", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulTransportUnload
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulTransportUnload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_voidseeker;
    point lv_unloadpoint;
    fixed lv_facingangle;
    fixed lv_interpolationperiod;
    fixed lv_interpolationdistance;
    point lv_nextinterpolatedpoint;
    unitgroup lv_cargounits;
    point lv_fallbackexitpoint;

    // Automatic Variable Declarations
    unitgroup auto30FDD131_g;
    int auto30FDD131_u;
    unit auto30FDD131_var;

    // Variable Initialization
    lv_voidseeker = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_unloadpoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_facingangle = UnitGetFacing(lv_voidseeker);
    lv_interpolationperiod = 0.125;
    lv_interpolationdistance = 1.0;
    lv_cargounits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_voidseeker) == "ZeratulTransportVoidSeeker"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_voidseeker, OrderTargetingPoint(AbilityCommand("VoidSeekerTransport", 2), lv_unloadpoint), c_orderQueueReplace);
    lv_interpolationdistance = (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, "ZeratulTransportVoidSeeker", "Speed", UnitGetOwner(lv_voidseeker)) * lv_interpolationperiod);
    lv_nextinterpolatedpoint = PointWithOffsetPolar(UnitGetPosition(lv_voidseeker), lv_interpolationdistance, lv_facingangle);
    while ((RegionContainsPoint(RegionPlayableMap(), lv_nextinterpolatedpoint) == true)) {
        lv_nextinterpolatedpoint = PointWithOffsetPolar(lv_nextinterpolatedpoint, lv_interpolationdistance, lv_facingangle);
    }
    UnitIssueOrder(lv_voidseeker, OrderTargetingPoint(AbilityCommand("move", 0), lv_nextinterpolatedpoint), c_orderQueueAddToEnd);
    Wait(0.25, c_timeGame);
    UnitWaitUntilIdle(lv_voidseeker, true);
    lv_cargounits = UnitCargoGroup(lv_voidseeker);
    auto30FDD131_g = lv_cargounits;
    auto30FDD131_u = UnitGroupCount(auto30FDD131_g, c_unitCountAll);
    for (;; auto30FDD131_u -= 1) {
        auto30FDD131_var = UnitGroupUnitFromEnd(auto30FDD131_g, auto30FDD131_u);
        if (auto30FDD131_var == null) { break; }
        lv_fallbackexitpoint = UnitTypePlacementFromUnit(UnitGetType(auto30FDD131_var), UnitGetOwner(auto30FDD131_var), lv_voidseeker, 10.0);
        if ((lv_fallbackexitpoint == null)) {
            lv_fallbackexitpoint = UnitTypePlacementFromPoint(UnitGetType(auto30FDD131_var), UnitGetOwner(auto30FDD131_var), PlayerStartLocation(UnitGetOwner(lv_voidseeker)), 10.0);
        }

        UnitSetPosition(auto30FDD131_var, lv_fallbackexitpoint, false);
    }
    UnitKill(lv_voidseeker);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulTransportUnload_Init () {
    libCPCD_gt_CDZeratulTransportUnload = TriggerCreate("libCPCD_gt_CDZeratulTransportUnload_Func");
    TriggerEnable(libCPCD_gt_CDZeratulTransportUnload, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDZeratulTransportUnload, c_playerAny, "ZeratulVoidSeekerTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulTransportResetRally
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulTransportResetRally_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupIssueOrder(libCPCD_gv_cM_Zeratul_RalliedGroup, OrderTargetingUnit(AbilityCommand("Rally", 0), libCPGL_gv_commander[EventPlayer()].lv_heroUnit), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulTransportResetRally_Init () {
    libCPCD_gt_CDZeratulTransportResetRally = TriggerCreate("libCPCD_gt_CDZeratulTransportResetRally_Func");
    TriggerEnable(libCPCD_gt_CDZeratulTransportResetRally, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDZeratulTransportResetRally, c_playerAny, "VoidSeekerTransportUnloadDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulAvatarsPing
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulAvatarsPing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawnedAvatar;
    string lv_spawnedAvatarType;
    int lv_avatarPing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawnedAvatar = EventUnitProgressUnit();
    lv_spawnedAvatarType = UnitGetType(lv_spawnedAvatar);
    lv_avatarPing = c_invalidPingId;

    // Conditions
    if (testConds) {
        if (!(((lv_spawnedAvatarType == "ZeratulXelNagaConstruct") || (lv_spawnedAvatarType == "ZeratulXelNagaConstructCyan")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_spawnedAvatarType == "ZeratulXelNagaConstruct")) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAvatarEssence", UnitGetPosition(lv_spawnedAvatar), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, 270.0);
    }
    else {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAvatarForm", UnitGetPosition(lv_spawnedAvatar), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, 270.0);
    }
    PingSetUnit(PingLastCreated(), lv_spawnedAvatar);
    PingSetScale(PingLastCreated(), 0.6);
    PingSetTooltip(PingLastCreated(), UnitTypeGetName(lv_spawnedAvatarType));
    lv_avatarPing = PingLastCreated();
    while ((UnitIsAlive(lv_spawnedAvatar) == true)) {
        PingSetRotation(lv_avatarPing, UnitGetFacing(lv_spawnedAvatar));
        Wait(0.125, c_timeGame);
    }
    PingDestroy(lv_avatarPing);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulAvatarsPing_Init () {
    libCPCD_gt_CDZeratulAvatarsPing = TriggerCreate("libCPCD_gt_CDZeratulAvatarsPing_Func");
    TriggerEnable(libCPCD_gt_CDZeratulAvatarsPing, false);
    TriggerAddEventUnitConstructProgress(libCPCD_gt_CDZeratulAvatarsPing, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulEntropicBlastSpawns
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulEntropicBlastSpawns_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawner;
    fixed lv_facing;
    fixed lv_angelA;
    fixed lv_angelA2;
    fixed lv_angelB;
    fixed lv_angelB2;
    fixed lv_range;
    int lv_p;
    point lv_center;

    // Automatic Variable Declarations
    const int auto349D9322_n = 5;
    int auto349D9322_i;

    // Variable Initialization
    lv_spawner = EventUnitCreatedUnit();
    lv_facing = UnitGetFacing(EventUnit());
    lv_range = 3.0;
    lv_p = UnitGetOwner(lv_spawner);
    lv_center = UnitGetPosition(lv_spawner);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_spawner) == "ZeratulEntropicBlastCyanWeaponSpawner"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_angelA = (lv_facing - 90.0);
    lv_angelB = (lv_facing + 90.0);
    for (auto349D9322_i = 1; auto349D9322_i <= auto349D9322_n; auto349D9322_i += 1) {
        UnitCreate(1, "ZeratulXelNagaChargedCrystalCyan", 0, lv_p, PointWithOffsetPolar(lv_center, lv_range, lv_angelA), lv_angelA);
        UnitCreateEffectUnit(lv_spawner, "ZeratulEntropicBlastCyanImpactSpawnSet", UnitLastCreated());
        UnitCreate(1, "ZeratulXelNagaChargedCrystalCyan", 0, lv_p, PointWithOffsetPolar(lv_center, lv_range, lv_angelB), lv_angelB);
        UnitCreateEffectUnit(lv_spawner, "ZeratulEntropicBlastCyanImpactSpawnSet", UnitLastCreated());
        lv_angelA += 36.0;
        lv_angelB += 36.0;
        Wait(0.1875, c_timeGame);
    }
    Wait(0.75, c_timeGame);
    UnitKill(lv_spawner);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulEntropicBlastSpawns_Init () {
    libCPCD_gt_CDZeratulEntropicBlastSpawns = TriggerCreate("libCPCD_gt_CDZeratulEntropicBlastSpawns_Func");
    TriggerEnable(libCPCD_gt_CDZeratulEntropicBlastSpawns, false);
    TriggerAddEventUnitCreated(libCPCD_gt_CDZeratulEntropicBlastSpawns, null, "ZeratulEntropicBlastCyan", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulDevolve
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulDevolve_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CDZeratulApplyDevolve(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulDevolve_Init () {
    libCPCD_gt_CDZeratulDevolve = TriggerCreate("libCPCD_gt_CDZeratulDevolve_Func");
    TriggerEnable(libCPCD_gt_CDZeratulDevolve, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDZeratulDevolve, c_playerAny, "ZeratulXelNagaConstructDevolveModifyUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulStasisBeamIssueOrder
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulStasisBeamIssueOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayerRemoveCooldown(lv_player, CatalogFieldValueGet(c_gameCatalogAbil, "ZeratulMapWideStasisIssueOrder", "Cost[" + IntToString(0) + "].Cooldown.Link", lv_player));
    UISetTargetingOrder(PlayerGroupSingle(UnitGetOwner(libCPCD_gv_cDZeratulHeroStructure[lv_player])), libCPCD_gv_cDZeratulHeroStructureGroup[lv_player], OrderTargetingPoint(AbilityCommand("ZeratulMapWideStasis", 0), UnitGetPosition(libCPCD_gv_cDZeratulHeroStructure[lv_player])), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulStasisBeamIssueOrder_Init () {
    libCPCD_gt_CDZeratulStasisBeamIssueOrder = TriggerCreate("libCPCD_gt_CDZeratulStasisBeamIssueOrder_Func");
    TriggerEnable(libCPCD_gt_CDZeratulStasisBeamIssueOrder, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDZeratulStasisBeamIssueOrder, null, AbilityCommand("ZeratulMapWideStasisIssueOrder", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulStasisBeam
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulStasisBeam_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_casterPoint;
    point lv_targetPoint;
    point lv_abilityTargetPoint;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_casterPoint = UnitGetPosition(EventUnit());
    lv_targetPoint = EventUnitTargetPoint();
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    lv_abilityTargetPoint = libCPCD_gf_CDSwannDrillTarget(lv_targetPoint, lv_casterPoint, RegionPlayableMap(), lv_player);
    if ((lv_abilityTargetPoint != null)) {
        CatalogFieldValueModify(c_gameCatalogEffect, "ZeratulMapWideStasisDummyCP", "PeriodicOffsetArray[" + IntToString(0) + "]", EventPlayer(), ("0, -" + IntToString((libCPCD_gv_cDSwannDrillBeamDistance[lv_player] / 2)) + ", 0"), c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogEffect, "ZeratulMapWideStasisCP", "PeriodicOffsetArray[" + IntToString(0) + "]", EventPlayer(), ("0, -" + IntToString((libCPCD_gv_cDSwannDrillBeamDistance[lv_player] / 2)) + ", 0"), c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogEffect, "ZeratulMapWideStasisSearch", "AreaArray[" + IntToString(0) + "].RectangleHeight", EventPlayer(), IntToString(libCPCD_gv_cDSwannDrillBeamDistance[lv_player]), c_upgradeOperationSet);
        UnitCreateEffectPoint(EventUnit(), "ZeratulMapWideStasisSet", lv_abilityTargetPoint);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulStasisBeam_Init () {
    libCPCD_gt_CDZeratulStasisBeam = TriggerCreate("libCPCD_gt_CDZeratulStasisBeam_Func");
    TriggerEnable(libCPCD_gt_CDZeratulStasisBeam, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDZeratulStasisBeam, null, AbilityCommand("ZeratulMapWideStasis", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulStasisDuration
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulStasisDuration_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorSetDuration(EventUnit(), EventUnitBehavior(), RandomInt(1, 10));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulStasisDuration_Init () {
    libCPCD_gt_CDZeratulStasisDuration = TriggerCreate("libCPCD_gt_CDZeratulStasisDuration_Func");
    TriggerEnable(libCPCD_gt_CDZeratulStasisDuration, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDZeratulStasisDuration, null, "ZeratulStasisField", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulTopBarWarpTrainStart
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulTopBarWarpTrainStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_builder;
    string lv_topbarBuilderType;
    unit lv_summoned;
    order lv_order;
    unitgroup lv_group;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_builder = EventUnit();
    lv_topbarBuilderType = "CoopCasterZeratul";
    lv_summoned = EventUnitProgressUnit();
    lv_group = libCPCD_gv_cDZeratulTopBarRallyUnits[EventPlayer()];

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_builder) == lv_topbarBuilderType))) {
            return false;
        }

        if (!(((libNtve_gf_TriggeringProgressUnitType() == "ZeratulSummonKarass") || (libNtve_gf_TriggeringProgressUnitType() == "ZeratulSummonZealot") || (libNtve_gf_TriggeringProgressUnitType() == "Mohandar") || (libNtve_gf_TriggeringProgressUnitType() == "ZeratulSummonVoidRay") || (libNtve_gf_TriggeringProgressUnitType() == "ZeratulHeroDarkArchon") || (libNtve_gf_TriggeringProgressUnitType() == "ZeratulDarkArchon")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_summoned, "ZeratulTopBarWarpingIn", lv_builder, 1);
    if ((UnitGroupCount(lv_group, c_unitCountAlive) == 0)) {
        lv_order = OrderTargetingPoint(AbilityCommand("RallyZeratulTopBar", 0), Point(0.0, 0.0));
        UnitGroupAdd(lv_group, lv_summoned);
        UISetTargetingOrder(PlayerGroupSingle(EventPlayer()), lv_group, Order(AbilityCommand("RallyZeratulTopBar", 0)), false);
    }
    else {
        UnitIssueOrder(lv_summoned, Order(AbilityCommand("WarpableZeratul", 0)), c_orderQueueAddToFront);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulTopBarWarpTrainStart_Init () {
    libCPCD_gt_CDZeratulTopBarWarpTrainStart = TriggerCreate("libCPCD_gt_CDZeratulTopBarWarpTrainStart_Func");
    TriggerEnable(libCPCD_gt_CDZeratulTopBarWarpTrainStart, false);
    TriggerAddEventUnitConstructProgress(libCPCD_gt_CDZeratulTopBarWarpTrainStart, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulTopBarWarpTrainFinish
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulTopBarWarpTrainFinish_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_builder;
    string lv_topbarBuilderType;
    unit lv_summoned;
    string lv_summonedType;
    point lv_point;
    unitgroup lv_ug;
    point lv_rally;
    unit lv_itUnit;
    string lv_instance;
    string lv_minionUnitType;
    int lv_minionUnitAmount;
    string lv_minionUnitUpgrade;
    int lv_p;

    // Automatic Variable Declarations
    string auto579E91C3_userType;
    int auto579E91C3_i;
    unitgroup auto060ED37B_g;
    int auto060ED37B_u;

    // Variable Initialization
    lv_builder = EventUnit();
    lv_topbarBuilderType = "CoopCasterZeratul";
    lv_summoned = EventUnitProgressUnit();
    lv_summonedType = libNtve_gf_TriggeringProgressUnitType();
    lv_point = UnitGetPosition(lv_summoned);
    lv_ug = UnitGroupEmpty();
    lv_rally = UnitRallyPointTargetPoint(lv_summoned, 1, 1);
    lv_p = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_builder) == lv_topbarBuilderType))) {
            return false;
        }

        if (!(((libNtve_gf_TriggeringProgressUnitType() == "ZeratulSummonKarass") || (libNtve_gf_TriggeringProgressUnitType() == "ZeratulSummonZealot") || (libNtve_gf_TriggeringProgressUnitType() == "Mohandar") || (libNtve_gf_TriggeringProgressUnitType() == "ZeratulSummonVoidRay") || (libNtve_gf_TriggeringProgressUnitType() == "ZeratulHeroDarkArchon") || (libNtve_gf_TriggeringProgressUnitType() == "ZeratulDarkArchon")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_summoned, "ZeratulTopBarWarpingIn", 1);
    lv_rally = libCPCD_gv_cDZeratulTopBarRallyPoint[lv_p];
    lv_point = libNtve_gf_PointOffsetTowardsPoint(lv_point, -2.0, lv_rally);
    auto579E91C3_userType = "CoopAbilityZeratulTopBarCallDown";
    auto579E91C3_i = 1;
    for ( ; auto579E91C3_i <= UserDataInstanceCount(auto579E91C3_userType) ; auto579E91C3_i += 1 ) {
        lv_instance = UserDataInstance(auto579E91C3_userType, auto579E91C3_i);
        if ((UserDataGetGameLink("CoopAbilityZeratulTopBarCallDown", lv_instance, "MainUnitType", 1) == lv_summonedType)) {
            lv_minionUnitType = UserDataGetGameLink("CoopAbilityZeratulTopBarCallDown", lv_instance, "UnitToCall", 1);
            lv_minionUnitUpgrade = UserDataGetGameLink("CoopAbilityZeratulTopBarCallDown", lv_instance, "Upgrade", 1);
            lv_minionUnitAmount = UserDataGetInt("CoopAbilityZeratulTopBarCallDown", lv_instance, "Amount", TechTreeUpgradeCount(lv_p, lv_minionUnitUpgrade, c_techCountCompleteOnly));
            libNtve_gf_UnitCreateFacingPoint(lv_minionUnitAmount, lv_minionUnitType, 0, lv_p, lv_point, lv_rally);
            UnitGroupAddUnitGroup(lv_ug, UnitLastCreatedGroup());
        }

    }
    UnitGroupAdd(lv_ug, lv_summoned);
    auto060ED37B_g = lv_ug;
    auto060ED37B_u = UnitGroupCount(auto060ED37B_g, c_unitCountAll);
    for (;; auto060ED37B_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto060ED37B_g, auto060ED37B_u);
        if (lv_itUnit == null) { break; }
        libNtve_gf_CreateActorAtPoint("WarpInVoid", UnitGetPosition(lv_itUnit));
        UnitAbilityEnable(lv_itUnit, "move", true);
        UnitBehaviorAdd(lv_itUnit, "ZeratulTopBarTimedLife", lv_itUnit, 1);
        UnitSetPropertyFixed(lv_itUnit, c_unitPropEnergyPercent, 100.0);
        libNtve_gf_MakeUnitFacePoint(lv_itUnit, lv_rally, 0.0);
    }
    UnitGroupIssueOrder(lv_ug, OrderTargetingPoint(AbilityCommand("attack", 0), lv_rally), c_orderQueueReplace);
    UnitGroupAddUnitGroup(libCPCD_gv_cDZeratulTopBarRallyRedirectUnits[lv_p], lv_ug);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulTopBarWarpTrainFinish_Init () {
    libCPCD_gt_CDZeratulTopBarWarpTrainFinish = TriggerCreate("libCPCD_gt_CDZeratulTopBarWarpTrainFinish_Func");
    TriggerEnable(libCPCD_gt_CDZeratulTopBarWarpTrainFinish, false);
    TriggerAddEventUnitConstructProgress(libCPCD_gt_CDZeratulTopBarWarpTrainFinish, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratullTopBarRallySet
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratullTopBarRallySet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_summoned;
    unitgroup lv_group;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_summoned = EventUnit();
    lv_group = libCPCD_gv_cDZeratulTopBarRallyUnits[EventPlayer()];

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_summoned, "ZeratulTopBarWarpingIn", 1);
    UnitGroupClear(lv_group);
    libCPCD_gv_cDZeratulTopBarRallyPoint[EventPlayer()] = OrderGetTargetPosition(EventUnitOrder());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratullTopBarRallySet_Init () {
    libCPCD_gt_CDZeratullTopBarRallySet = TriggerCreate("libCPCD_gt_CDZeratullTopBarRallySet_Func");
    TriggerEnable(libCPCD_gt_CDZeratullTopBarRallySet, false);
    TriggerAddEventUnitOrder(libCPCD_gt_CDZeratullTopBarRallySet, null, AbilityCommand("RallyZeratulTopBar", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulTopBarRallyRedirect
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulTopBarRallyRedirect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_group;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = libCPCD_gv_cDZeratulTopBarRallyRedirectUnits[EventPlayer()];
    lv_point = OrderGetTargetPosition(EventUnitOrder());

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gv_cDZeratulTopBarRallyPoint[EventPlayer()] = lv_point;
    UnitGroupIssueOrder(lv_group, OrderTargetingPoint(AbilityCommand("attack", 0), lv_point), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulTopBarRallyRedirect_Init () {
    libCPCD_gt_CDZeratulTopBarRallyRedirect = TriggerCreate("libCPCD_gt_CDZeratulTopBarRallyRedirect_Func");
    TriggerEnable(libCPCD_gt_CDZeratulTopBarRallyRedirect, false);
    TriggerAddEventUnitOrder(libCPCD_gt_CDZeratulTopBarRallyRedirect, null, AbilityCommand("RallyZeratulTopBarRedirect", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulTopBarRallyCancel
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_ZeratulTopBarRallyCancel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupIssueOrder(libCPCD_gv_cDZeratulTopBarRallyUnits[EventPlayer()], Order(AbilityCommand("WarpableZeratul", 0)), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_ZeratulTopBarRallyCancel_Init () {
    libCPCD_gt_CM_ZeratulTopBarRallyCancel = TriggerCreate("libCPCD_gt_CM_ZeratulTopBarRallyCancel_Func");
    TriggerEnable(libCPCD_gt_CM_ZeratulTopBarRallyCancel, false);
    TriggerAddEventTargetModeUpdate(libCPCD_gt_CM_ZeratulTopBarRallyCancel, c_playerAny, AbilityCommand("RallyZeratulTopBar", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulProphecyEventVision
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulProphecyEventVision_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_event = "ZeratulEvent_VisionReady";

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
        lv_event = "ZeratulEvent_VisionReady";
    }
    else {
        lv_event = "ZeratulEvent_VisionNotReady";
    }
    DataTableSetUnit(false, TriggerEventParamName((lv_event), "ZeratulEventUnit"), EventUnit());
    DataTableSetInt(false, TriggerEventParamName((lv_event), "ZeratulEventPlayer"), UnitGetOwner(EventUnit()));
    TriggerSendEvent((lv_event));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulProphecyEventVision_Init () {
    libCPCD_gt_CDZeratulProphecyEventVision = TriggerCreate("libCPCD_gt_CDZeratulProphecyEventVision_Func");
    TriggerEnable(libCPCD_gt_CDZeratulProphecyEventVision, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDZeratulProphecyEventVision, null, "ZeratulProphecyCooldownTracker", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDZeratulProphecyEventVision, null, "ZeratulProphecyCooldownTracker", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulProphecyEventArtifactMised
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulProphecyEventArtifactMised_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_event = "ZeratulEvent_ArtifactMissed";

    // Conditions
    if (testConds) {
        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) == libCPGL_gv_commander[EventPlayer()].lv_heroUnit))) {
            return false;
        }

        if (!((libCPGL_gv_commander[EventPlayer()].lv_commander == "Zeratul"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CDZeratulProphecyEventSend(lv_event, EventPlayer(), libCPCD_gv_cDZeratulProphecyArtifactUnit, libCPCD_gv_cDZeratulProphecyArtifactNumber);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulProphecyEventArtifactMised_Init () {
    libCPCD_gt_CDZeratulProphecyEventArtifactMised = TriggerCreate("libCPCD_gt_CDZeratulProphecyEventArtifactMised_Func");
    TriggerEnable(libCPCD_gt_CDZeratulProphecyEventArtifactMised, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDZeratulProphecyEventArtifactMised, c_playerAny, "Event_ZeratulProphecyPrepMiss");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulProphecyEventArtifactPickedUp
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulProphecyEventArtifactPickedUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;
    int lv_zeratulplayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_event = "ZeratulEvent_ArtifactPickedUp";
    lv_zeratulplayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((EventUnit() == libCPCD_gv_cDZeratulProphecyArtifactUnit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CDZeratulProphecyEventSend(lv_event, lv_zeratulplayer, EventUnit(), libCPCD_gv_cDZeratulProphecyArtifactNumber);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulProphecyEventArtifactPickedUp_Init () {
    libCPCD_gt_CDZeratulProphecyEventArtifactPickedUp = TriggerCreate("libCPCD_gt_CDZeratulProphecyEventArtifactPickedUp_Func");
    TriggerEnable(libCPCD_gt_CDZeratulProphecyEventArtifactPickedUp, false);
    TriggerAddEventUnitDied(libCPCD_gt_CDZeratulProphecyEventArtifactPickedUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulProphecyEventArtifactRevealed
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulProphecyEventArtifactRevealed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;
    int lv_zeratulplayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_event = "ZeratulEvent_ArtifactFound";
    lv_zeratulplayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((EventUnit() == libCPCD_gv_cDZeratulProphecyArtifactUnit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CDZeratulProphecyEventSend(lv_event, lv_zeratulplayer, EventUnit(), libCPCD_gv_cDZeratulProphecyArtifactNumber);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulProphecyEventArtifactRevealed_Init () {
    libCPCD_gt_CDZeratulProphecyEventArtifactRevealed = TriggerCreate("libCPCD_gt_CDZeratulProphecyEventArtifactRevealed_Func");
    TriggerEnable(libCPCD_gt_CDZeratulProphecyEventArtifactRevealed, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDZeratulProphecyEventArtifactRevealed, UnitRefFromVariable("libCPCD_gv_cDZeratulProphecyArtifactUnit"), "ProphecyArtifactHide", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulProphecyEventArtifactUsed
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulProphecyEventArtifactUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_event = "ZeratulEvent_ArtifactUsed";

    // Conditions
    if (testConds) {
        if (!((libCPGL_gv_commander[EventPlayer()].lv_commander == "Zeratul"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventUpgradeName() == "ZeratulArtifactUpgradeTier0A") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier0B") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier0C"))) {
        libCPCD_gf_CDZeratulProphecyEventSend(lv_event, EventPlayer(), null, 0);
    }
    else if (((EventUpgradeName() == "ZeratulArtifactUpgradeTier1A") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier1B") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier1C"))) {
        libCPCD_gf_CDZeratulProphecyEventSend(lv_event, EventPlayer(), null, 1);
    }
    else if (((EventUpgradeName() == "ZeratulArtifactUpgradeTier2A") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier2B") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier2C"))) {
        libCPCD_gf_CDZeratulProphecyEventSend(lv_event, EventPlayer(), null, 2);
    }
    else if (((EventUpgradeName() == "ZeratulArtifactUpgradeTier3A") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier3B") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier3C"))) {
        libCPCD_gf_CDZeratulProphecyEventSend(lv_event, EventPlayer(), null, 3);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulProphecyEventArtifactUsed_Init () {
    libCPCD_gt_CDZeratulProphecyEventArtifactUsed = TriggerCreate("libCPCD_gt_CDZeratulProphecyEventArtifactUsed_Func");
    TriggerEnable(libCPCD_gt_CDZeratulProphecyEventArtifactUsed, false);
    TriggerAddEventUpgradeLevelChanged(libCPCD_gt_CDZeratulProphecyEventArtifactUsed, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulProphecyEventProphecyCast
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulProphecyEventProphecyCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;

    // Automatic Variable Declarations
    int autoF79AACF7_val;

    // Variable Initialization
    lv_event = "ZeratulEvent_ArtifactMissed";

    // Conditions
    if (testConds) {
        if (!((libCPGL_gv_commander[UnitGetOwner(EventUnit())].lv_commander == "Zeratul"))) {
            return false;
        }

        if (!((EventUnit() == libCPGL_gv_commander[UnitGetOwner(EventUnit())].lv_heroUnit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF79AACF7_val = EventUnitAbilityStage();
    if (autoF79AACF7_val == c_abilEffectStageCast) {
        lv_event = "ZeratulEvent_ProphecyCastStart";
    }
    else if (autoF79AACF7_val == c_unitAbilStageCancel) {
        lv_event = "ZeratulEvent_ProphecyCastStop";
    }
    else {
    }
    DataTableSetUnit(false, TriggerEventParamName((lv_event), "ZeratulEventUnit"), EventUnit());
    DataTableSetInt(false, TriggerEventParamName((lv_event), "ZeratulEventPlayer"), UnitGetOwner(EventUnit()));
    TriggerSendEvent((lv_event));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulProphecyEventProphecyCast_Init () {
    libCPCD_gt_CDZeratulProphecyEventProphecyCast = TriggerCreate("libCPCD_gt_CDZeratulProphecyEventProphecyCast_Func");
    TriggerEnable(libCPCD_gt_CDZeratulProphecyEventProphecyCast, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDZeratulProphecyEventProphecyCast, null, AbilityCommand("ProphecyVision", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDZeratulProphecyEventProphecyCast, null, AbilityCommand("ProphecyVision", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulProphecyMiss
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulProphecyMiss_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetFacing(libCPCD_gf_CDZeratulProphecyEventGetUnit(libCPCD_ge_CDZeratulProphecyEventUnits_ZeratulUnit), 90.0, 0.0);
    if ((libCPCD_gf_CDZeratulProphecyEventGetArtifactNumber() <= libCPCD_gf_CM_Zeratul_GetArtifactLimit(libCPCD_gf_CDZeratulProphecyEventGetPlayer())) && (UnitIsValid(libCPCD_gv_cDZeratulProphecyArtifactUnit) == false)) {
        libCPCD_gf_CDZeratulProphecyPlaceArtifact(libCPCD_gf_CDZeratulProphecyEventGetPlayer());
    }

    libCPCD_gf_CDZeratulProphecyHintStart(libCPCD_gf_CDZeratulProphecyHintLevel(libCPCD_gf_CDZeratulProphecyEventGetArtifactNumber()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulProphecyMiss_Init () {
    libCPCD_gt_CDZeratulProphecyMiss = TriggerCreate("libCPCD_gt_CDZeratulProphecyMiss_Func");
    TriggerEnable(libCPCD_gt_CDZeratulProphecyMiss, false);
    libCPCD_gf_CDZeratulProphecyEvent(libCPCD_gt_CDZeratulProphecyMiss, "ZeratulEvent_ArtifactMissed");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulProphecyCastStop
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulProphecyCastStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCPCD_gv_cDZeratulProphecyHintUnit != null)) {
        libNtve_gf_SendActorMessageToUnit(libCPCD_gv_cDZeratulProphecyHintUnit, "Signal Clear");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulProphecyCastStop_Init () {
    libCPCD_gt_CDZeratulProphecyCastStop = TriggerCreate("libCPCD_gt_CDZeratulProphecyCastStop_Func");
    TriggerEnable(libCPCD_gt_CDZeratulProphecyCastStop, false);
    libCPCD_gf_CDZeratulProphecyEvent(libCPCD_gt_CDZeratulProphecyCastStop, "ZeratulEvent_ProphecyCastStop");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulProphecyIntro Q
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulProphecyIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCPCD_gf_CM_SendTransmissionCampaignInternal(true, libCPGL_gv_commander[libCPCD_gv_cDZeratulPlayer].lv_heroUnit, null, SoundLink("PlaceholderSoundFile", -1), StringExternal("Param/Value/lib_CPCD_FACA3798"), StringExternal("Param/Value/lib_CPCD_7333DD95"), c_transmissionDurationAdd, 10.0, true, libCPCD_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCPCD_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior, "");
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulProphecyIntroQ_Init () {
    libCPCD_gt_CDZeratulProphecyIntroQ = TriggerCreate("libCPCD_gt_CDZeratulProphecyIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulProphecyArtifactPickedUp
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulProphecyArtifactPickedUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_artfactNumber;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_artfactNumber = libCPCD_gf_CDZeratulProphecyEventGetArtifactNumber();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_artfactNumber >= libCPCD_gf_CM_Zeratul_GetArtifactLimit(libCPCD_gf_CDZeratulProphecyEventGetPlayer()))) {
        libNtve_gf_SetUpgradeLevelForPlayer(libCPCD_gf_CDZeratulProphecyEventGetPlayer(), "ProphecyArtifactsDiscovered", 1);
    }

    libCPCD_gv_cDZeratulProphecyArtifactNumber += 1;
    libCPCD_gf_CDZeratulProphecySetCooldown();
    if ((libCPCD_gv_cDZeratulProphecyHintUnit != null)) {
        UnitRemove(libCPCD_gv_cDZeratulProphecyHintUnit);
        libCPCD_gv_cDZeratulProphecyHintUnit = null;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulProphecyArtifactPickedUp_Init () {
    libCPCD_gt_CDZeratulProphecyArtifactPickedUp = TriggerCreate("libCPCD_gt_CDZeratulProphecyArtifactPickedUp_Func");
    TriggerEnable(libCPCD_gt_CDZeratulProphecyArtifactPickedUp, false);
    libCPCD_gf_CDZeratulProphecyEvent(libCPCD_gt_CDZeratulProphecyArtifactPickedUp, "ZeratulEvent_ArtifactPickedUp");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulProphecyArtifactRevealed
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulProphecyArtifactRevealed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceSpawnCount;
    revealer lv_artifactRevealer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CreateRevealerCoop(UnitGetOwner(libCPCD_gf_CDZeratulProphecyEventGetUnit(libCPCD_ge_CDZeratulProphecyEventUnits_ArtifactUnit)), RegionCircle(UnitGetPosition(libCPCD_gf_CDZeratulProphecyEventGetUnit(libCPCD_ge_CDZeratulProphecyEventUnits_ArtifactUnit)), 3.0));
    lv_artifactRevealer = VisRevealerLastCreated();
    Wait(5.0, c_timeGame);
    libCOMI_gf_DestroyRevealerCoop(lv_artifactRevealer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulProphecyArtifactRevealed_Init () {
    libCPCD_gt_CDZeratulProphecyArtifactRevealed = TriggerCreate("libCPCD_gt_CDZeratulProphecyArtifactRevealed_Func");
    TriggerEnable(libCPCD_gt_CDZeratulProphecyArtifactRevealed, false);
    libCPCD_gf_CDZeratulProphecyEvent(libCPCD_gt_CDZeratulProphecyArtifactRevealed, "ZeratulEvent_ArtifactFound");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulProphecyArtifactPathingSafety
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulProphecyArtifactPathingSafety_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCPCD_gv_cDZeratulProphecyArtifactNumber > 3)) {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }

    if ((UnitIsAlive(libCPCD_gv_cDZeratulProphecyArtifactUnit) == true) && (PathingType(UnitGetPosition(libCPCD_gv_cDZeratulProphecyArtifactUnit)) != c_pathingGround)) {
        UnitSetPosition(libCPCD_gv_cDZeratulProphecyArtifactUnit, UnitTypePlacementFromUnit("ZeratulCoop", UnitGetOwner(libCPCD_gv_cDZeratulProphecyArtifactUnit), libCPCD_gv_cDZeratulProphecyArtifactUnit, 10.0), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulProphecyArtifactPathingSafety_Init () {
    libCPCD_gt_CDZeratulProphecyArtifactPathingSafety = TriggerCreate("libCPCD_gt_CDZeratulProphecyArtifactPathingSafety_Func");
    TriggerEnable(libCPCD_gt_CDZeratulProphecyArtifactPathingSafety, false);
    TriggerAddEventTimePeriodic(libCPCD_gt_CDZeratulProphecyArtifactPathingSafety, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulProphecyArrtifactDebug
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulProphecyArrtifactDebug_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCPGL_gf_DebugModeEnabled() == true))) {
            return false;
        }

        if (!((EventPlayer() == libCPCD_gv_cDZeratulPlayer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_CPCD_9D2EB9F8"), true);
    lv_point = libCPCD_gf_CDZeratulProphecyArtifactPlacementDebug(1, Color(100.00, 100.00, 100.00), Color(62.35, 0.00, 95.69));
    lv_point = libCPCD_gf_CDZeratulProphecyArtifactPlacementDebug(2, Color(7.06, 75.29, 98.04), Color(0.00, 0.00, 100.00));
    lv_point = libCPCD_gf_CDZeratulProphecyArtifactPlacementDebug(3, Color(100.00, 100.00, 0.00), Color(95.69, 0.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulProphecyArrtifactDebug_Init () {
    libCPCD_gt_CDZeratulProphecyArrtifactDebug = TriggerCreate("libCPCD_gt_CDZeratulProphecyArrtifactDebug_Func");
    TriggerAddEventChatMessage(libCPCD_gt_CDZeratulProphecyArrtifactDebug, c_playerAny, "zeratuldebug", true);
    TriggerAddEventChatMessage(libCPCD_gt_CDZeratulProphecyArrtifactDebug, c_playerAny, "zbug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulProphecyReady
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulProphecyReady_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetAnimationState(libCPCD_gv_globalPowerPanel[libCPCD_gf_CDZeratulProphecyEventGetPlayer()], PlayerGroupAll(), "ProphecyState", "Ready");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulProphecyReady_Init () {
    libCPCD_gt_CDZeratulProphecyReady = TriggerCreate("libCPCD_gt_CDZeratulProphecyReady_Func");
    TriggerEnable(libCPCD_gt_CDZeratulProphecyReady, false);
    libCPCD_gf_CDZeratulProphecyEvent(libCPCD_gt_CDZeratulProphecyReady, "ZeratulEvent_VisionReady");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulProphecyNotReady
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulProphecyNotReady_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetAnimationState(libCPCD_gv_globalPowerPanel[libCPCD_gf_CDZeratulProphecyEventGetPlayer()], PlayerGroupAll(), "ProphecyState", "NotReady");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulProphecyNotReady_Init () {
    libCPCD_gt_CDZeratulProphecyNotReady = TriggerCreate("libCPCD_gt_CDZeratulProphecyNotReady_Func");
    TriggerEnable(libCPCD_gt_CDZeratulProphecyNotReady, false);
    libCPCD_gf_CDZeratulProphecyEvent(libCPCD_gt_CDZeratulProphecyNotReady, "ZeratulEvent_VisionNotReady");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulArtifactCollected
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulArtifactCollected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetAnimationState(libCPCD_gv_globalPowerPanel[libCPCD_gf_CDZeratulProphecyEventGetPlayer()], PlayerGroupAll(), "ProphecyState", "NotReady");
    DialogControlSetAnimationState(libCPCD_gv_globalPowerPanel[libCPCD_gf_CDZeratulProphecyEventGetPlayer()], PlayerGroupAll(), "CurrentArtifact", IntToString((libCPCD_gv_cDZeratulProphecyArtifactNumber + 1)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulArtifactCollected_Init () {
    libCPCD_gt_CDZeratulArtifactCollected = TriggerCreate("libCPCD_gt_CDZeratulArtifactCollected_Func");
    TriggerEnable(libCPCD_gt_CDZeratulArtifactCollected, false);
    libCPCD_gf_CDZeratulProphecyEvent(libCPCD_gt_CDZeratulArtifactCollected, "ZeratulEvent_ArtifactPickedUp");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulArtifactUpgraded
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulArtifactUpgraded_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoCF77B7DE_val;

    // Conditions
    if (testConds) {
        if (!((libCPCD_gv_cDZeratulPlayer == EventPlayer()))) {
            return false;
        }

        if (!(((EventUpgradeName() == "ZeratulArtifactTier1") || (EventUpgradeName() == "ZeratulArtifactTier2") || (EventUpgradeName() == "ZeratulArtifactTier3")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoCF77B7DE_val = EventUpgradeName();
    if (autoCF77B7DE_val == "ZeratulArtifactTier1") {
        DialogControlSetAnimationState(libCPCD_gv_cDZeratulSelectionButtonContainers[1], PlayerGroupAll(), "ArtifactState", "Collected");
    }
    else if (autoCF77B7DE_val == "ZeratulArtifactTier2") {
        DialogControlSetAnimationState(libCPCD_gv_cDZeratulSelectionButtonContainers[2], PlayerGroupAll(), "ArtifactState", "Collected");
    }
    else if (autoCF77B7DE_val == "ZeratulArtifactTier3") {
        if ((libCPGL_gv_commander[EventPlayer()].lv_commanderLevel >= 2)) {
            DialogControlSetAnimationState(libCPCD_gv_cDZeratulSelectionButtonContainers[3], PlayerGroupAll(), "ArtifactState", "Collected");
        }

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulArtifactUpgraded_Init () {
    libCPCD_gt_CDZeratulArtifactUpgraded = TriggerCreate("libCPCD_gt_CDZeratulArtifactUpgraded_Func");
    TriggerEnable(libCPCD_gt_CDZeratulArtifactUpgraded, false);
    TriggerAddEventUpgradeLevelChanged(libCPCD_gt_CDZeratulArtifactUpgraded, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDZeratulArtifactUsed
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDZeratulArtifactUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetAnimationState(libCPCD_gv_cDZeratulSelectionButtonContainers[libCPCD_gf_CDZeratulProphecyEventGetArtifactNumber()], PlayerGroupAll(), "ArtifactState", "Used");
    if ((libCPCD_gf_CDZeratulProphecyEventGetArtifactNumber() == 3) && (TechTreeUpgradeCount(libCPCD_gf_CDZeratulProphecyEventGetPlayer(), "ZeratulArtifactUpgradeTier3A", c_techCountCompleteOnly) > 0)) {
        DialogControlSetAnimationState(libCPCD_gv_globalPowerPanel[libCPCD_gf_CDZeratulProphecyEventGetPlayer()], PlayerGroupAll(), "AvatarState", "Form");
    }
    else if ((libCPCD_gf_CDZeratulProphecyEventGetArtifactNumber() == 3) && (TechTreeUpgradeCount(libCPCD_gf_CDZeratulProphecyEventGetPlayer(), "ZeratulArtifactUpgradeTier3B", c_techCountCompleteOnly) > 0)) {
        DialogControlSetAnimationState(libCPCD_gv_globalPowerPanel[libCPCD_gf_CDZeratulProphecyEventGetPlayer()], PlayerGroupAll(), "AvatarState", "Essence");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDZeratulArtifactUsed_Init () {
    libCPCD_gt_CDZeratulArtifactUsed = TriggerCreate("libCPCD_gt_CDZeratulArtifactUsed_Func");
    TriggerEnable(libCPCD_gt_CDZeratulArtifactUsed, false);
    libCPCD_gf_CDZeratulProphecyEvent(libCPCD_gt_CDZeratulArtifactUsed, "ZeratulEvent_ArtifactUsed");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AchievementZeratulDevolveKills
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_AchievementZeratulDevolveKills_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killingplayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_killingplayer = UnitGetOwner(libNtve_gf_KillingUnit());

    // Conditions
    if (testConds) {
        if (!((libCOOC_gv_cC_InContestMap == false))) {
            return false;
        }

        if (!((UnitIsAlive(libNtve_gf_KillingUnit()) == true))) {
            return false;
        }

        if (!((PlayerCommander(lv_killingplayer) == "Zeratul"))) {
            return false;
        }

        if (!((UnitGroupHasUnit(libCPCD_gv_cDZeratulDevolvedUnits, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantityAdd(lv_killingplayer, "CommanderZeratulDevolveKills", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_AchievementZeratulDevolveKills_Init () {
    libCPCD_gt_AchievementZeratulDevolveKills = TriggerCreate("libCPCD_gt_AchievementZeratulDevolveKills_Func");
    TriggerEnable(libCPCD_gt_AchievementZeratulDevolveKills, false);
    TriggerAddEventUnitDied(libCPCD_gt_AchievementZeratulDevolveKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStetmannTriggersInit
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStetmannTriggersInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    int lv_upgradeCount;
    int lv_stetmannplayer;

    // Automatic Variable Declarations
    playergroup auto550F12AC_g;
    playergroup autoC9FE87AC_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto550F12AC_g = libCPGL_gf_AllCommandersinPlayerGroup("Stetmann", libCPGL_gf_HumanPlayers());
    lv_stetmannplayer = -1;
    while (true) {
        lv_stetmannplayer = PlayerGroupNextPlayer(auto550F12AC_g, lv_stetmannplayer);
        if (lv_stetmannplayer < 0) { break; }
        lv_upgradeCount = TechTreeUpgradeCount(lv_stetmannplayer, "MasteryStetmannStetzoneBonuses", c_techCountCompleteOnly);
        libCPCD_gf_CM_MasteryStetmannUpgradeCost(lv_stetmannplayer);
        DialogControlSetAnimationState(libCPCD_gv_globalPowerPanel[lv_stetmannplayer], PlayerGroupSingle(lv_stetmannplayer), "ReminderStetzones", "NoReminder");
        DialogControlSetAnimationState(libCPCD_gv_globalPowerPanel[lv_stetmannplayer], PlayerGroupSingle(lv_stetmannplayer), "ReminderStetellites", "NoReminder");
        if ((libCPGL_gv_commander[lv_stetmannplayer].lv_commanderLevel >= 2)) {
            DialogControlSetAnimationState(libCPCD_gv_globalPowerPanel[lv_stetmannplayer], PlayerGroupSingle(lv_stetmannplayer), "EgonergyLockedState", "Unlocked");
        }
        else {
            DialogControlSetAnimationState(libCPCD_gv_globalPowerPanel[lv_stetmannplayer], PlayerGroupSingle(lv_stetmannplayer), "EgonergyLockedState", "Locked");
        }
        autoC9FE87AC_g = PlayerGroupAlliance(c_playerGroupAlly, lv_stetmannplayer);
        lv_p = -1;
        while (true) {
            lv_p = PlayerGroupNextPlayer(autoC9FE87AC_g, lv_p);
            if (lv_p < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(lv_p, "MasteryStetmannStetzoneBonusesMovementSpeed", lv_upgradeCount);
        }
    }
    TriggerEnable(libCPCD_gt_CDStetmannEventLairHiveCreated, true);
    TriggerEnable(libCPCD_gt_CDStetmannEventLairHiveMorph, true);
    TriggerEnable(libCPCD_gt_CDStetmannStetelliteToggle, true);
    TriggerEnable(libCPCD_gt_CDStetmannBanelingEnergyDamageBoost, true);
    TriggerEnable(libCPCD_gt_CDStetmannBroodLordArmBroodling, true);
    TriggerEnable(libCPCD_gt_CDStetmannStetelliteTechLevel, true);
    TriggerEnable(libCPCD_gt_AchievementStetmannGaryTransform, true);
    TriggerEnable(libCPCD_gt_AchievementStetmannSteteliteOverchargeAlly, true);
    TriggerEnable(libCPCD_gt_CDStetmannGaryUpgrade, true);
    TriggerEnable(libCPCD_gt_CM_Stetmann_Set, true);
    TriggerEnable(libCPCD_gt_CDStetmannStetelliteChainCast, true);
    TriggerEnable(libCPCD_gt_CDStetmannStetelliteChargesChanged, true);
    TriggerEnable(libCPCD_gt_CDStetmannStetelliteMaxChargesChanged, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStetmannTriggersInit_Init () {
    libCPCD_gt_CDStetmannTriggersInit = TriggerCreate("libCPCD_gt_CDStetmannTriggersInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStetmannEventLairHiveCreated
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStetmannEventLairHiveCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stetmann;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_stetmann = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));

    // Conditions
    if (testConds) {
        if (!((libCPGL_gv_commander[lv_stetmann].lv_commanderLevel >= 7))) {
            return false;
        }

        if (!(((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == "HiveStetmann") || (UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == "LairStetmann")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CM_Stetmann_ThrowPowerTowerEvent(lv_stetmann);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStetmannEventLairHiveCreated_Init () {
    libCPCD_gt_CDStetmannEventLairHiveCreated = TriggerCreate("libCPCD_gt_CDStetmannEventLairHiveCreated_Func");
    TriggerEnable(libCPCD_gt_CDStetmannEventLairHiveCreated, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDStetmannEventLairHiveCreated, c_playerAny, "LairHiveStetmannTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStetmannEventLairHiveMorph
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStetmannEventLairHiveMorph_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stetmann;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_stetmann = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libCPGL_gv_commander[lv_stetmann].lv_commanderLevel >= 7))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "HiveStetmann") || (UnitGetType(EventUnit()) == "LairStetmann")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CM_Stetmann_ThrowPowerTowerEvent(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStetmannEventLairHiveMorph_Init () {
    libCPCD_gt_CDStetmannEventLairHiveMorph = TriggerCreate("libCPCD_gt_CDStetmannEventLairHiveMorph_Func");
    TriggerEnable(libCPCD_gt_CDStetmannEventLairHiveMorph, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDStetmannEventLairHiveMorph, null, AbilityCommand("UpgradeToLairStetmann",0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDStetmannEventLairHiveMorph, null, AbilityCommand("UpgradeToHiveStetmann",0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStetmannStetelliteToggle
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStetmannStetelliteToggle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_upgradeCount;

    // Automatic Variable Declarations
    string autoFCE38134_val;
    playergroup autoE03A15BF_g;
    playergroup auto977E9B68_g;
    playergroup auto8684F91C_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCPGL_gv_commander[EventPlayer()].lv_commander == "Stetmann"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gv_cDStetmannStetelliteChanged[lv_player] = true;
    DialogControlSetAnimationState(libCPCD_gv_globalPowerPanel[EventPlayer()], PlayerGroupSingle(EventPlayer()), "ReminderStetzones", "NoReminder");
    lv_upgradeCount = TechTreeUpgradeCount(EventPlayer(), "MasteryStetmannStetzoneBonuses", c_techCountCompleteOnly);
    autoFCE38134_val = EventPlayerEffectUsed();
    if (autoFCE38134_val == "PowerFieldEnergyRegenerationOn") {
        autoE03A15BF_g = libCPGL_gf_HumanPlayers();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoE03A15BF_g, lv_player);
            if (lv_player < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "PowerFieldEnergyRegeneration", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "PowerFieldHPRegeneration", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "PowerFieldMovementSpeed", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "MasteryStetmannStetzoneBonusesMovementSpeed", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "MasteryStetmannStetzoneBonusesHPRegeneration", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "MasteryStetmannStetzoneBonusesEnergyRegeneration", lv_upgradeCount);
            DialogControlSetAnimationState(libCPCD_gv_globalPowerPanel[EventPlayer()], PlayerGroupSingle(EventPlayer()), "ActiveZone", "Energy");
        }
    }
    else if (autoFCE38134_val == "PowerFieldHPRegenerationOn") {
        auto977E9B68_g = libCPGL_gf_HumanPlayers();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto977E9B68_g, lv_player);
            if (lv_player < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "PowerFieldEnergyRegeneration", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "PowerFieldHPRegeneration", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "PowerFieldMovementSpeed", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "MasteryStetmannStetzoneBonusesMovementSpeed", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "MasteryStetmannStetzoneBonusesHPRegeneration", lv_upgradeCount);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "MasteryStetmannStetzoneBonusesEnergyRegeneration", 0);
            DialogControlSetAnimationState(libCPCD_gv_globalPowerPanel[EventPlayer()], PlayerGroupSingle(EventPlayer()), "ActiveZone", "Health");
        }
    }
    else if (autoFCE38134_val == "PowerFieldMovementSpeedOn") {
        auto8684F91C_g = libCPGL_gf_HumanPlayers();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto8684F91C_g, lv_player);
            if (lv_player < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "PowerFieldEnergyRegeneration", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "PowerFieldHPRegeneration", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "PowerFieldMovementSpeed", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "MasteryStetmannStetzoneBonusesMovementSpeed", lv_upgradeCount);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "MasteryStetmannStetzoneBonusesHPRegeneration", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "MasteryStetmannStetzoneBonusesEnergyRegeneration", 0);
            DialogControlSetAnimationState(libCPCD_gv_globalPowerPanel[EventPlayer()], PlayerGroupSingle(EventPlayer()), "ActiveZone", "Speed");
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStetmannStetelliteToggle_Init () {
    libCPCD_gt_CDStetmannStetelliteToggle = TriggerCreate("libCPCD_gt_CDStetmannStetelliteToggle_Func");
    TriggerEnable(libCPCD_gt_CDStetmannStetelliteToggle, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDStetmannStetelliteToggle, c_playerAny, "PowerFieldEnergyRegenerationOn");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDStetmannStetelliteToggle, c_playerAny, "PowerFieldHPRegenerationOn");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDStetmannStetelliteToggle, c_playerAny, "PowerFieldMovementSpeedOn");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStetmannStetelliteTechLevel
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStetmannStetelliteTechLevel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_powertowerabilstring;
    string lv_abillink;
    int lv_oldmaxcharges;
    int lv_newmaxcharges;
    int lv_deltamaxcharges;
    int lv_oldchargesused;
    int lv_newchargesused;
    fixed lv_oldrechargetime;
    fixed lv_newrechargetime;
    fixed lv_deltarechargetime;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_powertowerabilstring = "Abil/DeployPowerTowerStetmann";
    lv_abillink = "DeployPowerTowerStetmann";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_oldmaxcharges = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_abillink, "InfoArray[" + IntToString(0) + "].Charge.CountMax", libCPCD_gf_EventStetmannPowerTowerPlayer());
    lv_oldrechargetime = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, lv_abillink, "InfoArray[" + IntToString(0) + "].Charge.TimeUse", libCPCD_gf_EventStetmannPowerTowerPlayer());
    lv_oldchargesused = RoundI(PlayerGetChargeUsed(libCPCD_gf_EventStetmannPowerTowerPlayer(), lv_powertowerabilstring));
    libNtve_gf_SetUpgradeLevelForPlayer(libCPCD_gf_EventStetmannPowerTowerPlayer(), "DeployPowerTowerTechLevel", libCPCD_gf_EventStetmannPowerTowerTechLevel("StetmannPowerTowerTechLevelNew"));
    lv_newmaxcharges = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_abillink, "InfoArray[" + IntToString(0) + "].Charge.CountMax", libCPCD_gf_EventStetmannPowerTowerPlayer());
    lv_deltamaxcharges = (lv_newmaxcharges - lv_oldmaxcharges);
    lv_newchargesused = (lv_oldchargesused + lv_deltamaxcharges);
    lv_newrechargetime = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, lv_abillink, "InfoArray[" + IntToString(0) + "].Charge.TimeUse", libCPCD_gf_EventStetmannPowerTowerPlayer());
    lv_deltarechargetime = (lv_newrechargetime - lv_oldrechargetime);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStetmannStetelliteTechLevel_Init () {
    libCPCD_gt_CDStetmannStetelliteTechLevel = TriggerCreate("libCPCD_gt_CDStetmannStetelliteTechLevel_Func");
    TriggerEnable(libCPCD_gt_CDStetmannStetelliteTechLevel, false);
    libCPCD_gf_StetmannPowerTowerEvent(libCPCD_gt_CDStetmannStetelliteTechLevel, "Event_PowerTowerLevelChanged");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStetmannStetelliteChainCast
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStetmannStetelliteChainCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCPGL_gv_commander[UnitGetOwner(EventUnit())].lv_commander == "Stetmann"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    if ((UnitAbilityChargeInfo(EventUnit(), AbilityCommand("DeployPowerTowerStetmann", 0), c_unitAbilChargeCountLeft) > 0.0)) {
        UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libCPGL_gv_commander[lv_casterPlayer].lv_globalCasterGroup, OrderTargetingPoint(AbilityCommand("DeployPowerTowerStetmann", 0), UnitGetPosition(libCPGL_gv_commander[lv_casterPlayer].lv_globalCasterUnit)), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStetmannStetelliteChainCast_Init () {
    libCPCD_gt_CDStetmannStetelliteChainCast = TriggerCreate("libCPCD_gt_CDStetmannStetelliteChainCast_Func");
    TriggerEnable(libCPCD_gt_CDStetmannStetelliteChainCast, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDStetmannStetelliteChainCast, null, AbilityCommand("DeployPowerTowerStetmann", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStetmannStetelliteMaxChargesChanged
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStetmannStetelliteMaxChargesChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stetmann;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_stetmann = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "DeployPowerTowerTechLevel"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CU_SetStetelliteChargeMax(lv_stetmann);
    libCPCD_gf_CU_DrawStetelliteChargePips(lv_stetmann, (libCPCD_gv_cDStetmannStetelliteMaxCharges[lv_stetmann] - RoundI(PlayerGetChargeUsed(lv_stetmann, "Abil/DeployPowerTowerStetmann"))), libCPCD_gv_cDStetmannStetelliteMaxCharges[lv_stetmann]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStetmannStetelliteMaxChargesChanged_Init () {
    libCPCD_gt_CDStetmannStetelliteMaxChargesChanged = TriggerCreate("libCPCD_gt_CDStetmannStetelliteMaxChargesChanged_Func");
    TriggerEnable(libCPCD_gt_CDStetmannStetelliteMaxChargesChanged, false);
    TriggerAddEventUpgradeLevelChanged(libCPCD_gt_CDStetmannStetelliteMaxChargesChanged, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStetmannStetelliteChargesChanged
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStetmannStetelliteChargesChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stetmann;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_stetmann = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((EventUnitBehavior() == "StetmannStetelliteChargesUsed"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CU_DrawStetelliteChargePips(lv_stetmann, (libCPCD_gv_cDStetmannStetelliteMaxCharges[lv_stetmann] - RoundI(PlayerGetChargeUsed(lv_stetmann, "Abil/DeployPowerTowerStetmann"))), libCPCD_gv_cDStetmannStetelliteMaxCharges[lv_stetmann]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStetmannStetelliteChargesChanged_Init () {
    libCPCD_gt_CDStetmannStetelliteChargesChanged = TriggerCreate("libCPCD_gt_CDStetmannStetelliteChargesChanged_Func");
    TriggerEnable(libCPCD_gt_CDStetmannStetelliteChargesChanged, false);
    TriggerAddEventUnitAttributeChange(libCPCD_gt_CDStetmannStetelliteChargesChanged, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStetmannBanelingEnergyDamageBoost
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStetmannBanelingEnergyDamageBoost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_baneling;
    fixed lv_energy;
    unit lv_target;

    // Automatic Variable Declarations
    string auto487E8683_val;

    // Variable Initialization
    lv_baneling = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_energy = UnitGetPropertyFixed(lv_baneling, c_unitPropEnergy, c_unitPropCurrent);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_target) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SetUnitAttributePoints("BanelingStetmannBonusDamage", lv_baneling, RoundI(lv_energy));
    auto487E8683_val = EventPlayerEffectUsed();
    if (auto487E8683_val == "BanelingStetmannExplodeAbilityBonusDamageTrigger") {
        UnitCreateEffectUnit(lv_baneling, "BanelingDeathExplodeLargeSetStetmann", lv_target);
    }
    else if (auto487E8683_val == "BanelingStetmannExplodeDelayBonusDamageTrigger") {
        UnitCreateEffectUnit(lv_baneling, "BanelingStetmannExplodeDelaySet", lv_target);
    }
    else if (auto487E8683_val == "BanelingStetmannExplodeWeaponBonusDamageTrigger") {
        UnitCreateEffectUnit(lv_baneling, "BanelingExplodeLargeSetStetmann", lv_target);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStetmannBanelingEnergyDamageBoost_Init () {
    libCPCD_gt_CDStetmannBanelingEnergyDamageBoost = TriggerCreate("libCPCD_gt_CDStetmannBanelingEnergyDamageBoost_Func");
    TriggerEnable(libCPCD_gt_CDStetmannBanelingEnergyDamageBoost, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDStetmannBanelingEnergyDamageBoost, c_playerAny, "BanelingStetmannExplodeAbilityBonusDamageTrigger");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDStetmannBanelingEnergyDamageBoost, c_playerAny, "BanelingStetmannExplodeDelayBonusDamageTrigger");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDStetmannBanelingEnergyDamageBoost, c_playerAny, "BanelingStetmannExplodeWeaponBonusDamageTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStetmannBroodLordArmBroodling
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStetmannBroodLordArmBroodling_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_broodlord;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_broodlord = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitMagazineArm(lv_broodlord, AbilityCommand("BroodLordHangarStetmann", 0), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStetmannBroodLordArmBroodling_Init () {
    libCPCD_gt_CDStetmannBroodLordArmBroodling = TriggerCreate("libCPCD_gt_CDStetmannBroodLordArmBroodling_Func");
    TriggerEnable(libCPCD_gt_CDStetmannBroodLordArmBroodling, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDStetmannBroodLordArmBroodling, c_playerAny, "BroodLordStetmannBroodlingEscortArm");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStetmannGaryUpgrade
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDStetmannGaryUpgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_gary;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_gary = EventUnit();
    lv_owner = UnitGetOwner(lv_gary);

    // Conditions
    if (testConds) {
        if (!((PlayerCommander(lv_owner) == "Stetmann"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCPCD_gf_SetHeroPanelUnit(1, lv_gary, lv_owner);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDStetmannGaryUpgrade_Init () {
    libCPCD_gt_CDStetmannGaryUpgrade = TriggerCreate("libCPCD_gt_CDStetmannGaryUpgrade_Func");
    TriggerEnable(libCPCD_gt_CDStetmannGaryUpgrade, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDStetmannGaryUpgrade, null, AbilityCommand("MorphToSuperGaryStetmann",0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDStetmannPrestigeOilCost
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_Stetmann_Set_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_upgrade;
    fixed lv_costMutiplayer;
    string lv_itUnit;
    int lv_player;

    // Automatic Variable Declarations
    int auto98E220E5_catalog;
    string auto98E220E5_entry;
    string auto98E220E5_fieldPath;
    int auto98E220E5_player;
    int auto98E220E5_i;

    // Variable Initialization
    lv_upgrade = EventUpgradeName();
    lv_costMutiplayer = 1.4;
    lv_itUnit = "";
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((lv_upgrade == "CommanderPrestigeStetmannCombatBuff"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto98E220E5_catalog = c_gameCatalogUpgrade;
    auto98E220E5_entry = lv_upgrade;
    auto98E220E5_fieldPath = "AffectedUnitArray";
    auto98E220E5_player = lv_player;
    auto98E220E5_i = 0;
    for ( ; auto98E220E5_i <= CatalogFieldValueCount(c_gameCatalogUpgrade,auto98E220E5_entry,auto98E220E5_fieldPath,auto98E220E5_player)-1 ; auto98E220E5_i += 1 ) {
        lv_itUnit = CatalogFieldValueGet(c_gameCatalogUpgrade,auto98E220E5_entry,auto98E220E5_fieldPath+"["+IntToString(auto98E220E5_i)+"]",auto98E220E5_player);
        CatalogFieldValueSet(c_gameCatalogUnit, lv_itUnit, "CostResource[" + IntToString(0) + "]", lv_player, IntToString(CeilingI((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_itUnit, "CostResource[" + IntToString(0) + "]", c_playerAny)*lv_costMutiplayer))));
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_Stetmann_Set_Init () {
    libCPCD_gt_CM_Stetmann_Set = TriggerCreate("libCPCD_gt_CM_Stetmann_Set_Func");
    TriggerEnable(libCPCD_gt_CM_Stetmann_Set, false);
    TriggerAddEventUpgradeLevelChanged(libCPCD_gt_CM_Stetmann_Set, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AchievementStetmannGaryTransform
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_AchievementStetmannGaryTransform_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_gary;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_gary = EventUnit();
    lv_owner = UnitGetOwner(lv_gary);

    // Conditions
    if (testConds) {
        if (!((PlayerCommander(lv_owner) == "Stetmann"))) {
            return false;
        }

        if (!((GameGetMissionTime() < 300.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementAward(lv_owner, "CommanderStetmannTransformation");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_AchievementStetmannGaryTransform_Init () {
    libCPCD_gt_AchievementStetmannGaryTransform = TriggerCreate("libCPCD_gt_AchievementStetmannGaryTransform_Func");
    TriggerEnable(libCPCD_gt_AchievementStetmannGaryTransform, false);
    TriggerAddEventUnitAbility(libCPCD_gt_AchievementStetmannGaryTransform, null, AbilityCommand("MorphToSuperGaryStetmann",0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AchievementStetmannSteteliteOverchargeAlly
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_AchievementStetmannSteteliteOverchargeAlly_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    int lv_ownercaster;
    int lv_ownertarget;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_ownercaster = UnitGetOwner(lv_caster);
    lv_ownertarget = UnitGetOwner(lv_target);

    // Conditions
    if (testConds) {
        if (!((PlayerCommander(lv_ownercaster) == "Stetmann"))) {
            return false;
        }

        if (!((lv_ownercaster != lv_ownertarget))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantityAdd(lv_ownercaster, "CommanderStetmannStetzone", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_AchievementStetmannSteteliteOverchargeAlly_Init () {
    libCPCD_gt_AchievementStetmannSteteliteOverchargeAlly = TriggerCreate("libCPCD_gt_AchievementStetmannSteteliteOverchargeAlly_Func");
    TriggerEnable(libCPCD_gt_AchievementStetmannSteteliteOverchargeAlly, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_AchievementStetmannSteteliteOverchargeAlly, c_playerAny, "FASTOverloadStetmannAB");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_AchievementStetmannSteteliteOverchargeAlly, c_playerAny, "HUGSOverloadStetmannAB");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_AchievementStetmannSteteliteOverchargeAlly, c_playerAny, "JUICEOverloadStetmannAB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskTriggersInit
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskTriggersInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libCPCD_gt_CDMengskGlobalAbilityCast, true);
    TriggerEnable(libCPCD_gt_AchievementMengskTopBarKills, true);
    TriggerEnable(libCPCD_gt_CDMengskDirtyBombSweetener, true);
    TriggerEnable(libCPCD_gt_CDMengskArtilleryBombardmentTarget, true);
    TriggerEnable(libCPCD_gt_CDMengskArtilleryBombardmentCargoChange, true);
    TriggerEnable(libCPCD_gt_CDMengskArtilleryExperimentalStrikeTarget, true);
    TriggerEnable(libCPCD_gt_CDMengskArtilleryExperimentalStrikeFearApply, true);
    TriggerEnable(libCPCD_gt_CDMengskArtilleryGlobalExperimentalStrikeTarget, true);
    TriggerEnable(libCPCD_gt_CDMengskNuclearAnnihilationSmallNukes, true);
    TriggerEnable(libCPCD_gt_CDMengskRegisterVeteranUnit, true);
    TriggerEnable(libCPCD_gt_CDMengskRemoveVeteranUnit, true);
    TriggerEnable(libCPCD_gt_CDMengskVeteranDies, true);
    TriggerEnable(libCPCD_gt_CDMengskVeteranDing, true);
    TriggerEnable(libCPCD_gt_CDMengskRegisterPropagandaUnit, true);
    TriggerEnable(libCPCD_gt_CDMengskRemovePropagandaUnit, true);
    TriggerEnable(libCPCD_gt_CDMengskPropagandaUpgraded, true);
    TriggerEnable(libCPCD_gt_CDMengskVeterancyEarned, true);
    TriggerEnable(libCPCD_gt_CDMengskMedivacAirlift, true);
    TriggerEnable(libCPCD_gt_CDMengskMedivacAirliftDing, true);
    TriggerEnable(libCPCD_gt_CDMengskEnlistStart, true);
    TriggerEnable(libCPCD_gt_CDMengskEnlistStop, true);
    TriggerEnable(libCPCD_gt_CDMengskReturnToWork, true);
    TriggerEnable(libCPCD_gt_CDMengskZerglingMengskSpawn, true);
    TriggerEnable(libCPCD_gt_CDMengskHydraliskMengskSpawn, true);
    TriggerEnable(libCPCD_gt_CDMengskMutaliskMengskSpawn, true);
    TriggerEnable(libCPCD_gt_CDMengskUltraliskMengskSpawn, true);
    TriggerEnable(libCPCD_gt_CDMengskBunkerDepotDropFillCargo, true);
    TriggerEnable(libCPCD_gt_CDMengskZergSeekDestroy, true);
    TriggerEnable(libCPCD_gt_CDMengskWeaponPickerUpperRegister, true);
    TriggerEnable(libCPCD_gt_CDMengskWeaponPickerUpperUnregister, true);
    TriggerEnable(libCPCD_gt_CDMengskWeaponPickupRegister, true);
    TriggerExecute(libCPCD_gt_CDMengskWeaponPickup, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskTriggersInit_Init () {
    libCPCD_gt_CDMengskTriggersInit = TriggerCreate("libCPCD_gt_CDMengskTriggersInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskWeaponPickup
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskWeaponPickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pickup;
    unit lv_pickerupper;
    int lv_player;

    // Automatic Variable Declarations
    unitgroup autoBA2038B1_g;
    int autoBA2038B1_u;
    string autoA855EC4C_val;

    // Variable Initialization
    lv_player = UnitGetOwner(lv_pickerupper);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerActiveCount(TriggerGetCurrent()) > 1)) {
        return true;
    }

    while (true) {
        Wait(0.5, c_timeGame);
        if ((UnitGroupCount(libCPCD_gv_cDMengskWeaponPickups[lv_player], c_unitCountAlive) > 0) && (UnitGroupCount(libCPCD_gv_cDMengskWeaponPickerUppers[lv_player], c_unitCountAlive) > 0)) {
            autoBA2038B1_g = libCPCD_gv_cDMengskWeaponPickups[lv_player];
            autoBA2038B1_u = UnitGroupCount(autoBA2038B1_g, c_unitCountAll);
            for (;; autoBA2038B1_u -= 1) {
                lv_pickup = UnitGroupUnitFromEnd(autoBA2038B1_g, autoBA2038B1_u);
                if (lv_pickup == null) { break; }
                lv_pickerupper = UnitGroupClosestToPoint(libCPCD_gv_cDMengskWeaponPickerUppers[lv_player], UnitGetPosition(lv_pickup));
                if ((UnitIsAlive(lv_pickerupper) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_pickup), UnitGetPosition(lv_pickerupper)) <= 2.0)) {
                    autoA855EC4C_val = UnitGetType(lv_pickup);
                    if (autoA855EC4C_val == "TrooperMengskWeaponAAPickup") {
                        libCPCD_gf_CM_Mengsk_ForceMorphTrooper(lv_pickerupper, lv_pickup, "TrooperMengskMorphAA", "TrooperMengskWeaponAA", "SetWeaponAA");
                    }
                    else if (autoA855EC4C_val == "TrooperMengskWeaponFlamethrowerPickup") {
                        libCPCD_gf_CM_Mengsk_ForceMorphTrooper(lv_pickerupper, lv_pickup, "TrooperMengskMorphFlamethrower", "TrooperMengskWeaponFlamethrower", "SetWeaponFlamethrower");
                    }
                    else if (autoA855EC4C_val == "TrooperMengskWeaponImprovedPickup") {
                        libCPCD_gf_CM_Mengsk_ForceMorphTrooper(lv_pickerupper, lv_pickup, "TrooperMengskMorphImproved", "TrooperMengskWeaponImproved", "SetWeaponImproved");
                    }
                    else {
                        UnitGroupRemove(libCPCD_gv_cDMengskWeaponPickups[lv_player], lv_pickup);
                    }
                }

                lv_pickerupper = null;
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskWeaponPickup_Init () {
    libCPCD_gt_CDMengskWeaponPickup = TriggerCreate("libCPCD_gt_CDMengskWeaponPickup_Func");
    TriggerEnable(libCPCD_gt_CDMengskWeaponPickup, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskWeaponPickerUpperUnregister
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskWeaponPickerUpperUnregister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_registrant;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_registrant = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = UnitGetOwner(lv_registrant);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(libCPCD_gv_cDMengskWeaponPickerUppers[lv_player], lv_registrant);
    libCPCD_gv_cM_MengskTrooperEquipped[lv_player] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskWeaponPickerUpperUnregister_Init () {
    libCPCD_gt_CDMengskWeaponPickerUpperUnregister = TriggerCreate("libCPCD_gt_CDMengskWeaponPickerUpperUnregister_Func");
    TriggerEnable(libCPCD_gt_CDMengskWeaponPickerUpperUnregister, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDMengskWeaponPickerUpperUnregister, c_playerAny, "TrooperMengskWeaponPickerupperUnregister");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskWeaponPickerUpperRegister
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskWeaponPickerUpperRegister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_registrant;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_registrant = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = UnitGetOwner(lv_registrant);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCPCD_gv_cDMengskWeaponPickerUppers[lv_player], lv_registrant);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskWeaponPickerUpperRegister_Init () {
    libCPCD_gt_CDMengskWeaponPickerUpperRegister = TriggerCreate("libCPCD_gt_CDMengskWeaponPickerUpperRegister_Func");
    TriggerEnable(libCPCD_gt_CDMengskWeaponPickerUpperRegister, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDMengskWeaponPickerUpperRegister, c_playerAny, "TrooperMengskWeaponPickerUpperRegister");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskWeaponPickupRegister
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskWeaponPickupRegister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_registrant;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_registrant = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = UnitGetOwner(lv_registrant);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCPCD_gv_cDMengskWeaponPickups[lv_player], lv_registrant);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskWeaponPickupRegister_Init () {
    libCPCD_gt_CDMengskWeaponPickupRegister = TriggerCreate("libCPCD_gt_CDMengskWeaponPickupRegister_Func");
    TriggerEnable(libCPCD_gt_CDMengskWeaponPickupRegister, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDMengskWeaponPickupRegister, c_playerAny, "TrooperMengskWeaponPickupRegister");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskReturnToWork
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskReturnToWork_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_worker;
    unit lv_nearbytownhall;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitOrderCount(EventUnit()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCPCD_gv_cDMengskReturningWorkers[lv_player], EventUnit());
    if ((TriggerActiveCount(TriggerGetCurrent()) > 1)) {
        return true;
    }

    while ((UnitGroupCount(libCPCD_gv_cDMengskReturningWorkers[lv_player], c_unitCountAlive) > 0)) {
        lv_worker = UnitGroupUnit(libCPCD_gv_cDMengskReturningWorkers[lv_player], 1);
        Wait(0.0625, c_timeGame);
        if ((UnitIsAlive(lv_worker) == true)) {
            UnitGroupRemove(libCPCD_gv_cDMengskReturningWorkers[lv_player], lv_worker);
            lv_nearbytownhall = UnitGroupClosestToPoint(UnitGroup("CommandCenterMengsk", UnitGetOwner(lv_worker), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_worker));
            if ((UnitIsAlive(lv_nearbytownhall) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_worker), UnitGetPosition(lv_nearbytownhall)) < 8.0)) {
                libCOMI_gf_CM_Resources_FindWork(lv_worker, lv_nearbytownhall, 12.0);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskReturnToWork_Init () {
    libCPCD_gt_CDMengskReturnToWork = TriggerCreate("libCPCD_gt_CDMengskReturnToWork_Func");
    TriggerEnable(libCPCD_gt_CDMengskReturnToWork, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDMengskReturnToWork, null, AbilityCommand("TrooperMengskEnlist",0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskEnlistStop
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskEnlistStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "TrooperMengskEnlistingRB", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskEnlistStop_Init () {
    libCPCD_gt_CDMengskEnlistStop = TriggerCreate("libCPCD_gt_CDMengskEnlistStop_Func");
    TriggerEnable(libCPCD_gt_CDMengskEnlistStop, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDMengskEnlistStop, null, AbilityCommand("TrooperMengskEnlist",0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDMengskEnlistStop, null, AbilityCommand("SCVMengskEnlist",0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDMengskEnlistStop, null, AbilityCommand("TrooperMengskEnlist",0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDMengskEnlistStop, null, AbilityCommand("SCVMengskEnlist",0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDMengskEnlistStop, null, AbilityCommand("TrooperMengskEnlist",0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDMengskEnlistStop, null, AbilityCommand("SCVMengskEnlist",0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskEnlistStart
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskEnlistStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "TrooperMengskEnlistingAB", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskEnlistStart_Init () {
    libCPCD_gt_CDMengskEnlistStart = TriggerCreate("libCPCD_gt_CDMengskEnlistStart_Func");
    TriggerEnable(libCPCD_gt_CDMengskEnlistStart, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDMengskEnlistStart, null, AbilityCommand("TrooperMengskEnlist",0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDMengskEnlistStart, null, AbilityCommand("SCVMengskEnlist",0), c_abilEffectStageApproach, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskVeterancyEarned
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskVeterancyEarned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dyingunit;
    fixed lv_xp;
    unitgroup lv_veteranunits;
    int lv_veterancount;
    fixed lv_xppersupplyratio;
    fixed lv_heroicxpoverride;
    fixed lv_minimumearnedxp;
    fixed lv_xpradius;
    playergroup lv_mengskPlayers;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto0B8B1CC0_g;
    unitgroup auto8A6644C2_g;
    int auto8A6644C2_u;
    unit auto8A6644C2_var;

    // Variable Initialization
    lv_dyingunit = EventUnit();
    lv_veteranunits = UnitGroupEmpty();
    lv_xppersupplyratio = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MengskRoyalGuardExperienceGainDummy", "Amount", lv_indexPlayer);
    lv_heroicxpoverride = 800.0;
    lv_minimumearnedxp = 1.0;
    lv_xpradius = 15.0;
    lv_mengskPlayers = libCPGL_gf_AllCommandersinPlayerGroup("Mengsk", libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Ally, libNtve_gf_KillingPlayer()));

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(lv_dyingunit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterHallucination - 32)))) == true))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!((UnitHasBehavior2(lv_dyingunit, "NoBiomassDrop") == false))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCPCM_gf_CT_UnitSpawnedByMutator(lv_dyingunit) == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPGL_gf_HumanPlayers(), libNtve_gf_KillingPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0B8B1CC0_g = lv_mengskPlayers;
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto0B8B1CC0_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        lv_veteranunits = UnitGroupFilterRegion(libCPCD_gv_cDMengskXPHungryUnits[lv_indexPlayer], RegionCircle(UnitGetPosition(lv_dyingunit), lv_xpradius), 0);
        lv_veterancount = UnitGroupCount(lv_veteranunits, c_unitCountAlive);
        lv_xp = (UnitTypeGetProperty(UnitGetType(lv_dyingunit), c_unitPropSuppliesUsed) * lv_xppersupplyratio);
        if ((lv_xp <= 0.0) && (UnitFilterMatch(lv_dyingunit, 1, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0)) == true)) {
            lv_xp = lv_heroicxpoverride;
        }
        else if ((lv_xp <= 0.0)) {
            return true;
        }
        if ((lv_veterancount == 0)) {
            lv_veteranunits = UnitGroupCopy(libCPCD_gv_cDMengskXPHungryUnits[lv_indexPlayer]);
            lv_veterancount = UnitGroupCount(lv_veteranunits, c_unitCountAlive);
            if ((lv_veterancount == 0)) {
                return true;
            }

        }

        lv_xp = MaxF(Round((lv_xp / lv_veterancount)), lv_minimumearnedxp);
        auto8A6644C2_g = lv_veteranunits;
        auto8A6644C2_u = UnitGroupCount(auto8A6644C2_g, c_unitCountAll);
        for (;; auto8A6644C2_u -= 1) {
            auto8A6644C2_var = UnitGroupUnitFromEnd(auto8A6644C2_g, auto8A6644C2_u);
            if (auto8A6644C2_var == null) { break; }
            UnitXPAddXP(auto8A6644C2_var, null, lv_xp);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskVeterancyEarned_Init () {
    libCPCD_gt_CDMengskVeterancyEarned = TriggerCreate("libCPCD_gt_CDMengskVeterancyEarned_Func");
    TriggerEnable(libCPCD_gt_CDMengskVeterancyEarned, false);
    TriggerAddEventUnitDied(libCPCD_gt_CDMengskVeterancyEarned, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskVeteranDing
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskVeteranDing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_levellingunit;
    int lv_statusframe;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_levellingunit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_statusframe = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "HealthBar", lv_levellingunit);
    lv_statusframe = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_statusframe, PlayerGroupAll(), "Rank", IntToString(UnitXPGetCurrentLevel(lv_levellingunit, null)));
    libCPCD_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateRoyalGuard(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskVeteranDing_Init () {
    libCPCD_gt_CDMengskVeteranDing = TriggerCreate("libCPCD_gt_CDMengskVeteranDing_Func");
    TriggerEnable(libCPCD_gt_CDMengskVeteranDing, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDMengskVeteranDing, c_playerAny, "MengskVeteranLevelUpDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskVeteranDies
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskVeteranDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libCPCD_gv_cDMengskVeterans[UnitGetOwner(EventUnit())], EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateRoyalGuard(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskVeteranDies_Init () {
    libCPCD_gt_CDMengskVeteranDies = TriggerCreate("libCPCD_gt_CDMengskVeteranDies_Func");
    TriggerEnable(libCPCD_gt_CDMengskVeteranDies, false);
    TriggerAddEventUnitDied(libCPCD_gt_CDMengskVeteranDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskRegisterVeteranUnit
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskRegisterVeteranUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCPCD_gv_cDMengskXPHungryUnits[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))], EventPlayerEffectUsedUnit(c_effectUnitCaster));
    UnitGroupAdd(libCPCD_gv_cDMengskVeterans[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))], EventPlayerEffectUsedUnit(c_effectUnitCaster));
    libCPCD_gv_cM_MengskEliteBuilt[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))] = true;
    libCPCD_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateRoyalGuard(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskRegisterVeteranUnit_Init () {
    libCPCD_gt_CDMengskRegisterVeteranUnit = TriggerCreate("libCPCD_gt_CDMengskRegisterVeteranUnit_Func");
    TriggerEnable(libCPCD_gt_CDMengskRegisterVeteranUnit, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDMengskRegisterVeteranUnit, c_playerAny, "MengskVeteranTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskRemoveVeteranUnit
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskRemoveVeteranUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_levellingunit;
    int lv_statusframe;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_levellingunit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_statusframe = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "HealthBar", lv_levellingunit);
    lv_statusframe = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_statusframe, PlayerGroupAll(), "Rank", IntToString(UnitXPGetCurrentLevel(lv_levellingunit, null)));
    UnitGroupRemove(libCPCD_gv_cDMengskXPHungryUnits[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))], lv_levellingunit);
    libCPCD_gf_CM_Mengsk_CheckRoyalGuardSupply();
    libCPCD_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateRoyalGuard(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskRemoveVeteranUnit_Init () {
    libCPCD_gt_CDMengskRemoveVeteranUnit = TriggerCreate("libCPCD_gt_CDMengskRemoveVeteranUnit_Func");
    TriggerEnable(libCPCD_gt_CDMengskRemoveVeteranUnit, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDMengskRemoveVeteranUnit, c_playerAny, "MengskVeteranMaxedTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskDirtyBombSweetener
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskDirtyBombSweetener_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup("ArtilleryMengsk", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterStunned - 32))), 0), c_unitCountAlive) > 4))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.5, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("UI_Mengsk_TopBar_Stinger_Up", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
    Wait(3.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("UI_Mengsk_TopBar_Stinger_Down", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
    Wait(16.5, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskDirtyBombSweetener_Init () {
    libCPCD_gt_CDMengskDirtyBombSweetener = TriggerCreate("libCPCD_gt_CDMengskDirtyBombSweetener_Func");
    TriggerEnable(libCPCD_gt_CDMengskDirtyBombSweetener, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDMengskDirtyBombSweetener, null, AbilityCommand("ArtilleryMengskGlobalExperimentalStrike",0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskGlobalAbilityCast
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskGlobalAbilityCast_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CoopCasterMengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CM_Mengsk_EnergyChanged(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskGlobalAbilityCast_Init () {
    libCPCD_gt_CDMengskGlobalAbilityCast = TriggerCreate("libCPCD_gt_CDMengskGlobalAbilityCast_Func");
    TriggerEnable(libCPCD_gt_CDMengskGlobalAbilityCast, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDMengskGlobalAbilityCast, null, null, c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskNuclearAnnihilationSmallNukes
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskNuclearAnnihilationSmallNukes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;
    fixed lv_smallNukeMaxPlacementRadius;
    int lv_numSmallNukes;
    int lv_nukeCounter;
    fixed lv_nukeDelay;

    // Automatic Variable Declarations
    int auto83239CBB_ae;
    const int auto83239CBB_ai = 1;

    // Variable Initialization
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_smallNukeMaxPlacementRadius = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "NuclearAnnihilationMengskSmallNukeDummyCP", "RevealRadius", EventPlayer());
    lv_numSmallNukes = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "NuclearAnnihilationMengskSmallNukeDummyCP", "PeriodCount", EventPlayer());
    lv_nukeCounter = 1;
    lv_nukeDelay = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "NuclearAnnihilationMengskSmallNukeDummyCP", "PeriodicPeriodArray[" + IntToString(0) + "]", EventPlayer());

    // Actions
    if (!runActions) {
        return true;
    }

    auto83239CBB_ae = lv_numSmallNukes;
    lv_nukeCounter = 1;
    for ( ; ( (auto83239CBB_ai >= 0 && lv_nukeCounter <= auto83239CBB_ae) || (auto83239CBB_ai < 0 && lv_nukeCounter >= auto83239CBB_ae) ) ; lv_nukeCounter += auto83239CBB_ai ) {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "NuclearAnnihilationMengskSmallNukeDropDelayCP", RegionRandomPoint(RegionCircle(lv_targetPoint, lv_smallNukeMaxPlacementRadius)));
        Wait(lv_nukeDelay, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskNuclearAnnihilationSmallNukes_Init () {
    libCPCD_gt_CDMengskNuclearAnnihilationSmallNukes = TriggerCreate("libCPCD_gt_CDMengskNuclearAnnihilationSmallNukes_Func");
    TriggerEnable(libCPCD_gt_CDMengskNuclearAnnihilationSmallNukes, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDMengskNuclearAnnihilationSmallNukes, c_playerAny, "NuclearAnnihilationMengskBigNukeDropDelayCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskArtilleryBombardmentCargoChange
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskArtilleryBombardmentCargoChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_artillery;
    int lv_cargoCount;
    string lv_cargoCountBehavior;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_artillery = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_cargoCount = UnitGroupCount(UnitCargoGroup(lv_artillery), c_unitCountAlive);
    lv_cargoCountBehavior = "ArtilleryMengskCargo";

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SetUnitAttributePoints(lv_cargoCountBehavior, lv_artillery, lv_cargoCount);
    if ((lv_cargoCount == 0)) {
        UnitBehaviorRemove(lv_artillery, "ArtilleryMengskCargoGlobal", 1);
    }
    else {
        UnitBehaviorAdd(lv_artillery, "ArtilleryMengskCargoGlobal", lv_artillery, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskArtilleryBombardmentCargoChange_Init () {
    libCPCD_gt_CDMengskArtilleryBombardmentCargoChange = TriggerCreate("libCPCD_gt_CDMengskArtilleryBombardmentCargoChange_Func");
    TriggerEnable(libCPCD_gt_CDMengskArtilleryBombardmentCargoChange, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDMengskArtilleryBombardmentCargoChange, c_playerAny, "ArtilleryMengskCargoTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskArtilleryExperimentalStrikeFearApply
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskArtilleryExperimentalStrikeFearApply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_scaredUnit;
    point lv_attackLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scaredUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackLocation = PointWithOffsetPolar(UnitGetPosition(lv_scaredUnit), 1.0, libNtve_gf_RandomAngle());
    UnitIssueOrder(lv_scaredUnit, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_scaredUnit), -5.0, lv_attackLocation)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    while ((UnitHasBehavior2(lv_scaredUnit, "ArtilleryMengskFear") == true) && (UnitIsAlive(lv_scaredUnit) == true)) {
        UnitIssueOrder(lv_scaredUnit, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_scaredUnit), 3.0))), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    UnitIssueOrder(lv_scaredUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskArtilleryExperimentalStrikeFearApply_Init () {
    libCPCD_gt_CDMengskArtilleryExperimentalStrikeFearApply = TriggerCreate("libCPCD_gt_CDMengskArtilleryExperimentalStrikeFearApply_Func");
    TriggerEnable(libCPCD_gt_CDMengskArtilleryExperimentalStrikeFearApply, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDMengskArtilleryExperimentalStrikeFearApply, null, "ArtilleryMengskFear", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskArtilleryGlobalExperimentalStrikeTarget
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskArtilleryGlobalExperimentalStrikeTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_artillery;
    abilcmd lv_abilityCommand;
    point lv_targetPoint;

    // Automatic Variable Declarations
    unitgroup autoDBA171C4_g;
    int autoDBA171C4_u;

    // Variable Initialization
    lv_abilityCommand = AbilityCommand("ArtilleryMengskExperimentalStrike",0);
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gv_cDMengskArtilleryExperimentalStrikeMinRange = 4.0;
    autoDBA171C4_g = UnitGroup("ArtilleryMengsk", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterStunned - 32))), 0);
    autoDBA171C4_u = UnitGroupCount(autoDBA171C4_g, c_unitCountAll);
    for (;; autoDBA171C4_u -= 1) {
        lv_artillery = UnitGroupUnitFromEnd(autoDBA171C4_g, autoDBA171C4_u);
        if (lv_artillery == null) { break; }
        UnitIssueOrder(lv_artillery, OrderTargetingPoint(lv_abilityCommand, lv_targetPoint), c_orderQueueAddToFront);
        if ((libCPCD_gv_cDMengskArtilleryExperimentalStrikeMinRange <= 7.0)) {
            libCPCD_gv_cDMengskArtilleryExperimentalStrikeMinRange += 0.5;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskArtilleryGlobalExperimentalStrikeTarget_Init () {
    libCPCD_gt_CDMengskArtilleryGlobalExperimentalStrikeTarget = TriggerCreate("libCPCD_gt_CDMengskArtilleryGlobalExperimentalStrikeTarget_Func");
    TriggerEnable(libCPCD_gt_CDMengskArtilleryGlobalExperimentalStrikeTarget, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDMengskArtilleryGlobalExperimentalStrikeTarget, c_playerAny, "ArtilleryMengskGlobalExperimentalStrikeDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskArtilleryExperimentalStrikeTarget
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskArtilleryExperimentalStrikeTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "ArtilleryMengskExperimentalStrikeDropDeplayCP", RegionRandomPoint(RegionCircle(lv_targetPoint, libCPCD_gv_cDMengskArtilleryExperimentalStrikeMinRange)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskArtilleryExperimentalStrikeTarget_Init () {
    libCPCD_gt_CDMengskArtilleryExperimentalStrikeTarget = TriggerCreate("libCPCD_gt_CDMengskArtilleryExperimentalStrikeTarget_Func");
    TriggerEnable(libCPCD_gt_CDMengskArtilleryExperimentalStrikeTarget, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDMengskArtilleryExperimentalStrikeTarget, c_playerAny, "ArtilleryMengskExperimentalStrikeDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskArtilleryBombardmentTarget
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskArtilleryBombardmentTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;
    fixed lv_radiusMaximumSlop;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_radiusMaximumSlop = 7.5;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "ArtilleryMengskBombardmentDropDelayCP", RegionRandomPoint(RegionCircle(lv_targetPoint, lv_radiusMaximumSlop)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskArtilleryBombardmentTarget_Init () {
    libCPCD_gt_CDMengskArtilleryBombardmentTarget = TriggerCreate("libCPCD_gt_CDMengskArtilleryBombardmentTarget_Func");
    TriggerEnable(libCPCD_gt_CDMengskArtilleryBombardmentTarget, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDMengskArtilleryBombardmentTarget, c_playerAny, "ArtilleryMengskBombardmentDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskPropagandaUpgraded
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskPropagandaUpgraded_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "BlimpMengskTopbarRegen"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateTrooper(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskPropagandaUpgraded_Init () {
    libCPCD_gt_CDMengskPropagandaUpgraded = TriggerCreate("libCPCD_gt_CDMengskPropagandaUpgraded_Func");
    TriggerEnable(libCPCD_gt_CDMengskPropagandaUpgraded, false);
    TriggerAddEventUpgradeLevelChanged(libCPCD_gt_CDMengskPropagandaUpgraded, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskRemovePropagandaUnit
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskRemovePropagandaUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(EventUnit(), "PropagandaBlastMengsk") < 1))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "PropagandaBlastMengskPermanent") < 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(libCPCD_gv_cDMengskPropagandaUnits[UnitGetOwner(EventUnit())], EventUnit());
    libCPCD_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateTrooper(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskRemovePropagandaUnit_Init () {
    libCPCD_gt_CDMengskRemovePropagandaUnit = TriggerCreate("libCPCD_gt_CDMengskRemovePropagandaUnit_Func");
    TriggerEnable(libCPCD_gt_CDMengskRemovePropagandaUnit, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDMengskRemovePropagandaUnit, null, "PropagandaBlastMengsk", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDMengskRemovePropagandaUnit, null, "PropagandaBlastMengskPermanent", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskRegisterPropagandaUnit
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskRegisterPropagandaUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "SCVMengsk") || (UnitGetType(EventUnit()) == "TrooperMengsk") || (UnitGetType(EventUnit()) == "TrooperMengskAA") || (UnitGetType(EventUnit()) == "TrooperMengskFlamethrower") || (UnitGetType(EventUnit()) == "TrooperMengskImproved")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCPCD_gv_cDMengskPropagandaUnits[UnitGetOwner(EventUnit())], EventUnit());
    libCPCD_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateTrooper(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskRegisterPropagandaUnit_Init () {
    libCPCD_gt_CDMengskRegisterPropagandaUnit = TriggerCreate("libCPCD_gt_CDMengskRegisterPropagandaUnit_Func");
    TriggerEnable(libCPCD_gt_CDMengskRegisterPropagandaUnit, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDMengskRegisterPropagandaUnit, null, "PropagandaBlastMengsk", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CDMengskRegisterPropagandaUnit, null, "PropagandaBlastMengskPermanent", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskBunkerDepotDropFillCargo
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskBunkerDepotDropFillCargo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bunkerdepot;
    int lv_troopercargosize;
    int lv_bunkerdepotcargocapacity;
    int lv_bunkerdepotcargomaxcount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bunkerdepot = EventUnit();
    lv_troopercargosize = CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TrooperMengsk", "CargoSize", EventPlayer());
    lv_bunkerdepotcargocapacity = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "BunkerMengskTransport", "TotalCargoSpace", EventPlayer());
    lv_bunkerdepotcargomaxcount = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "BunkerMengskTransport", "MaxCargoCount", EventPlayer());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_troopercargosize != 0) && (lv_bunkerdepotcargocapacity != 0) && (lv_bunkerdepotcargomaxcount != 0)) {
        UnitCargoCreate(lv_bunkerdepot, "TrooperMengsk", MinI((lv_bunkerdepotcargocapacity / lv_troopercargosize), lv_bunkerdepotcargomaxcount));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskBunkerDepotDropFillCargo_Init () {
    libCPCD_gt_CDMengskBunkerDepotDropFillCargo = TriggerCreate("libCPCD_gt_CDMengskBunkerDepotDropFillCargo_Func");
    TriggerEnable(libCPCD_gt_CDMengskBunkerDepotDropFillCargo, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CDMengskBunkerDepotDropFillCargo, null, AbilityCommand("BunkerDepotMengskDropMorph",0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskMedivacAirliftDing
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskMedivacAirliftDing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_siegetank;
    unit lv_medivac;
    int lv_statusframe;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_siegetank = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_medivac = UnitTransport(lv_siegetank);
    lv_statusframe = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_siegetank) == "SiegeTankMengskSieged"))) {
            return false;
        }

        if (!((lv_medivac != null))) {
            return false;
        }

        if (!((UnitGetType(lv_medivac) == "MedivacMengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SetUnitAttributePoints("MedivacMengskSiegeTankAirliftLevel", lv_medivac, (UnitXPGetCurrentLevel(lv_siegetank, null) - 1));
    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "HealthBar", lv_medivac);
    lv_statusframe = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_statusframe, PlayerGroupAll(), "Rank", IntToString(UnitXPGetCurrentLevel(lv_siegetank, null)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskMedivacAirliftDing_Init () {
    libCPCD_gt_CDMengskMedivacAirliftDing = TriggerCreate("libCPCD_gt_CDMengskMedivacAirliftDing_Func");
    TriggerEnable(libCPCD_gt_CDMengskMedivacAirliftDing, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDMengskMedivacAirliftDing, c_playerAny, "MengskVeteranLevelUpDummy");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDMengskMedivacAirliftDing, c_playerAny, "MengskVeteranMaxedTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskMedivacAirlift
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskMedivacAirlift_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medivac;
    unit lv_siegetank;
    int lv_statusframe;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_medivac = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_siegetank = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_statusframe = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "MedivacMengskSiegeTankAirliftLoadTrigger")) {
        UnitBehaviorAdd(lv_medivac, "MedivacMengskSiegeTankAirlift", lv_medivac, 1);
        libCOMI_gf_SetUnitAttributePoints("MedivacMengskSiegeTankAirliftLevel", lv_medivac, (UnitXPGetCurrentLevel(lv_siegetank, null) - 1));
        DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "HealthBar", lv_medivac);
        lv_statusframe = DialogControlLastCreated();
        DialogControlSetAnimationState(lv_statusframe, PlayerGroupAll(), "Rank", IntToString(UnitXPGetCurrentLevel(lv_siegetank, null)));
    }
    else {
        UnitBehaviorRemove(lv_medivac, "MedivacMengskSiegeTankAirlift", 1);
        UnitBehaviorRemove(lv_medivac, "MedivacMengskSiegeTankAirliftLevel", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskMedivacAirlift_Init () {
    libCPCD_gt_CDMengskMedivacAirlift = TriggerCreate("libCPCD_gt_CDMengskMedivacAirlift_Func");
    TriggerEnable(libCPCD_gt_CDMengskMedivacAirlift, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDMengskMedivacAirlift, c_playerAny, "MedivacMengskSiegeTankAirliftLoadTrigger");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDMengskMedivacAirlift, c_playerAny, "MedivacMengskSiegeTankAirliftUnloadTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskUltraliskMengskSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskUltraliskMengskSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "UltraliskMengsk", 0, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), (SquareRoot(RandomFixed(0.0, 1.0)) * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MengskZergCalldownAreaDummy", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny)), RandomFixed(0.0, 360.0)), RandomFixed(0.0, 360.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskUltraliskMengskSpawn_Init () {
    libCPCD_gt_CDMengskUltraliskMengskSpawn = TriggerCreate("libCPCD_gt_CDMengskUltraliskMengskSpawn_Func");
    TriggerEnable(libCPCD_gt_CDMengskUltraliskMengskSpawn, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDMengskUltraliskMengskSpawn, c_playerAny, "UltraliskMengskSpawnTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskMutaliskMengskSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskMutaliskMengskSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "MutaliskMengsk", 0, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), (SquareRoot(RandomFixed(0.0, 1.0)) * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MengskZergCalldownAreaDummy", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny)), RandomFixed(0.0, 360.0)), RandomFixed(0.0, 360.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskMutaliskMengskSpawn_Init () {
    libCPCD_gt_CDMengskMutaliskMengskSpawn = TriggerCreate("libCPCD_gt_CDMengskMutaliskMengskSpawn_Func");
    TriggerEnable(libCPCD_gt_CDMengskMutaliskMengskSpawn, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDMengskMutaliskMengskSpawn, c_playerAny, "MutaliskMengskSpawnTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskHydraliskMengskSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskHydraliskMengskSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "HydraliskMengsk", 0, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), (SquareRoot(RandomFixed(0.0, 1.0)) * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MengskZergCalldownAreaDummy", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny)), RandomFixed(0.0, 360.0)), RandomFixed(0.0, 360.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskHydraliskMengskSpawn_Init () {
    libCPCD_gt_CDMengskHydraliskMengskSpawn = TriggerCreate("libCPCD_gt_CDMengskHydraliskMengskSpawn_Func");
    TriggerEnable(libCPCD_gt_CDMengskHydraliskMengskSpawn, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDMengskHydraliskMengskSpawn, c_playerAny, "HydraliskMengskSpawnTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskZerglingMengskSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskZerglingMengskSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "ZerglingMengsk", 0, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), (SquareRoot(RandomFixed(0.0, 1.0)) * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MengskZergCalldownAreaDummy", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny)), RandomFixed(0.0, 360.0)), RandomFixed(0.0, 360.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskZerglingMengskSpawn_Init () {
    libCPCD_gt_CDMengskZerglingMengskSpawn = TriggerCreate("libCPCD_gt_CDMengskZerglingMengskSpawn_Func");
    TriggerEnable(libCPCD_gt_CDMengskZerglingMengskSpawn, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDMengskZerglingMengskSpawn, c_playerAny, "ZerglingMengskSpawnTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDMengskZergSeekDestroy
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDMengskZergSeekDestroy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_FindandAttackNearestEnemy(EventPlayerEffectUsedUnit(c_effectUnitCaster), 30.0, 6.0, 2.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32))), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDMengskZergSeekDestroy_Init () {
    libCPCD_gt_CDMengskZergSeekDestroy = TriggerCreate("libCPCD_gt_CDMengskZergSeekDestroy_Func");
    TriggerEnable(libCPCD_gt_CDMengskZergSeekDestroy, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CDMengskZergSeekDestroy, c_playerAny, "MengskSeekDestroyTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AchievementMengskTopBarKills
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_AchievementMengskTopBarKills_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killingplayer;
    string lv_killingeffect;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_killingplayer = UnitGetOwner(EventUnitDamageSourceUnit());
    lv_killingeffect = EventUnitDamageEffect();

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnitDamageSourceUnit()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPGL_gf_HumanPlayers(), lv_killingplayer) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "CoopCasterMengsk") || (UnitGetType(EventUnitDamageSourceUnit()) == "ZerglingMengsk") || (UnitGetType(EventUnitDamageSourceUnit()) == "HydraliskMengsk") || (UnitGetType(EventUnitDamageSourceUnit()) == "MutaliskMengsk") || (UnitGetType(EventUnitDamageSourceUnit()) == "UltraliskMengsk") || (lv_killingeffect == "ArtilleryMengskExperimentalStrikePeriodicDamage")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantityAdd(lv_killingplayer, "CommanderMengskTopBarKills", RoundI(EventUnitDamageAmount()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_AchievementMengskTopBarKills_Init () {
    libCPCD_gt_AchievementMengskTopBarKills = TriggerCreate("libCPCD_gt_AchievementMengskTopBarKills_Func");
    TriggerEnable(libCPCD_gt_AchievementMengskTopBarKills, false);
    TriggerAddEventUnitDamaged(libCPCD_gt_AchievementMengskTopBarKills, null, c_unitDamageTypeAny, c_unitDamageFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death Prevent Grant Kill Credit
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_DeathPreventGrantKillCredit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_creditedunit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_creditedunit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_creditedunit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(lv_creditedunit, c_unitPropKills, (UnitGetPropertyFixed(lv_creditedunit, c_unitPropKills, c_unitPropCurrent) + 1.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_DeathPreventGrantKillCredit_Init () {
    libCPCD_gt_DeathPreventGrantKillCredit = TriggerCreate("libCPCD_gt_DeathPreventGrantKillCredit_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_DeathPreventGrantKillCredit, c_playerAny, "GrantKillCreditDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Fast Buff Hack
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_AttackFastBuffHack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_unit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityExists(lv_unit, "BroodLordHangar") == true)) {
        libCOMI_gf_SetUnitBuffMultiplier(lv_unit, (1.0 / UnitWeaponSpeedMultiplier(lv_unit, 1)), "TriggerQueueableRate", 1.01, libCOMI_ge_UnitBuffMultiplierMethod_Exponential);
    }

    UnitCreateEffectUnit(lv_unit, "TriggerInheritRateIterateMagazine", lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_AttackFastBuffHack_Init () {
    libCPCD_gt_AttackFastBuffHack = TriggerCreate("libCPCD_gt_AttackFastBuffHack_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libCPCD_gt_AttackFastBuffHack, null, c_unitBehaviorFlagFast, c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChangeFromCategory(libCPCD_gt_AttackFastBuffHack, null, c_unitBehaviorFlagFast, c_unitBehaviorChangeDecrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dmg and Attack Speed Inherit New
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_DmgandAttackSpeedInheritNew_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_child;
    unit lv_parent;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_child = EventUnitCreatedUnit();
    lv_parent = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_child, "TriggerInheritsParentBuffs") == true))) {
            return false;
        }

        if (!((UnitIsValid(lv_parent) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_InheritDmgandAttackSpeedFromParenttoChild(lv_parent, lv_child);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_DmgandAttackSpeedInheritNew_Init () {
    libCPCD_gt_DmgandAttackSpeedInheritNew = TriggerCreate("libCPCD_gt_DmgandAttackSpeedInheritNew_Func");
    TriggerAddEventUnitCreated(libCPCD_gt_DmgandAttackSpeedInheritNew, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dmg and Attack Speed Inherit Existing
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_DmgandAttackSpeedInheritExisting_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_child;
    unit lv_parent;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_child = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_parent = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_child, "TriggerInheritsParentBuffs") == true))) {
            return false;
        }

        if (!((UnitIsValid(lv_parent) == true))) {
            return false;
        }

        if (!((lv_child != lv_parent))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_InheritDmgandAttackSpeedFromParenttoChild(lv_parent, lv_child);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_DmgandAttackSpeedInheritExisting_Init () {
    libCPCD_gt_DmgandAttackSpeedInheritExisting = TriggerCreate("libCPCD_gt_DmgandAttackSpeedInheritExisting_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_DmgandAttackSpeedInheritExisting, c_playerAny, "TriggerInheritRateDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Conjoined Vital Regen On/Off
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_ConjoinedVitalRegenOnOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_behavior;
    unit lv_itUnit;
    unitgroup lv_group;
    unitgroup lv_groupA;
    unitgroup lv_groupB;
    unitgroup lv_groupC;
    int lv_stack;
    unit lv_caster;

    // Automatic Variable Declarations
    unitgroup autoE41E7558_g;
    int autoE41E7558_u;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_behavior = EventUnitBehavior();
    lv_group = UnitGroupEmpty();
    lv_groupA = UnitConjoinedGroup(lv_unit, "GreaterNydusWormConjoined");
    lv_groupB = UnitConjoinedGroup(lv_unit, "NydusNetworkConjoined");
    lv_groupC = UnitConjoinedGroup(lv_unit, "NydusWormConjoined");
    lv_stack = UnitBehaviorCount(lv_unit, lv_behavior);
    lv_caster = UnitBehaviorEffectUnit(lv_unit, lv_behavior, c_effectUnitCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(lv_group, lv_groupA);
    UnitGroupAddUnitGroup(lv_group, lv_groupB);
    UnitGroupAddUnitGroup(lv_group, lv_groupC);
    UnitGroupRemove(lv_group, lv_unit);
    autoE41E7558_g = lv_group;
    autoE41E7558_u = UnitGroupCount(autoE41E7558_g, c_unitCountAll);
    for (;; autoE41E7558_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(autoE41E7558_g, autoE41E7558_u);
        if (lv_itUnit == null) { break; }
        libNtve_gf_SetBehaviorCount(lv_itUnit, lv_behavior, lv_caster, lv_stack);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_ConjoinedVitalRegenOnOff_Init () {
    libCPCD_gt_ConjoinedVitalRegenOnOff = TriggerCreate("libCPCD_gt_ConjoinedVitalRegenOnOff_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libCPCD_gt_ConjoinedVitalRegenOnOff, null, c_unitBehaviorFlagUser13, c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChangeFromCategory(libCPCD_gt_ConjoinedVitalRegenOnOff, null, c_unitBehaviorFlagUser13, c_unitBehaviorChangeDecrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TargetLockOrder
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_TargetLockOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((UnitGetCooldown(lv_caster, "Abil/ObserverTargetLock") == 0.0))) {
            return false;
        }

        if (!((libNtve_gf_UnitCanCreateEffectOnUnit(lv_caster, "ObserverTargetLockCPOrderValidate", lv_target) == true))) {
            return false;
        }

        if (!((UnitOrderIsValid(lv_caster, OrderSetAutoCast(AbilityCommand("ObserverTargetLock", 0), true)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitCanCreateEffectOnUnit(lv_caster, "ObserverTargetLockCP", lv_target) == false)) {
        UnitCreateEffectUnit(lv_caster, "ObserverTargetLockDP", lv_caster);
    }

    UnitIssueOrder(lv_caster, OrderTargetingUnit(AbilityCommand("ObserverTargetLock", 0), lv_target), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_TargetLockOrder_Init () {
    libCPCD_gt_CM_TargetLockOrder = TriggerCreate("libCPCD_gt_CM_TargetLockOrder_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CM_TargetLockOrder, c_playerAny, "MonitorFakeWeapon");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TargetLockOrderRaven
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_TargetLockOrderRaven_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((UnitGetCooldown(lv_caster, "Abil/ObserverTargetLock") == 0.0))) {
            return false;
        }

        if (!((libNtve_gf_UnitCanCreateEffectOnUnit(lv_caster, "RavenTargetLockCPOrderValidate", lv_target) == true))) {
            return false;
        }

        if (!((UnitOrderIsValid(lv_caster, OrderSetAutoCast(AbilityCommand("RavenTargetLock", 0), true)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitCanCreateEffectOnUnit(lv_caster, "RavenAnalyzeCP", lv_target) == false)) {
        UnitCreateEffectUnit(lv_caster, "RavenAnalyzeDP", lv_caster);
    }

    UnitIssueOrder(lv_caster, OrderTargetingUnit(AbilityCommand("RavenTargetLock", 0), lv_target), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_TargetLockOrderRaven_Init () {
    libCPCD_gt_CM_TargetLockOrderRaven = TriggerCreate("libCPCD_gt_CM_TargetLockOrderRaven_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CM_TargetLockOrderRaven, c_playerAny, "HHRavenFakeWeapon");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chrono Anim Speed On
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_ChronoAnimSpeedOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_buff;
    unit lv_unit;
    fixed lv_scale;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_buff = EventUnitBehavior();
    lv_unit = EventUnit();
    lv_scale = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, lv_buff, "Modification.RateMultiplierArray[" + IntToString(0) + "]", UnitBehaviorEffectPlayer(lv_unit, lv_buff, c_effectPlayerCaster, 0)));

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_unit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(lv_unit, (("AnimSetTimeScaleGlobal " + FixedToString(lv_scale, c_fixedPrecisionAny) + " " + (lv_buff))));
    libNtve_gf_SendActorMessageToUnit(lv_unit, (("AnimSetTimeScaleGlobal " + FixedToString(lv_scale, c_fixedPrecisionAny) + " " + (lv_buff))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_ChronoAnimSpeedOn_Init () {
    libCPCD_gt_ChronoAnimSpeedOn = TriggerCreate("libCPCD_gt_ChronoAnimSpeedOn_Func");
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_ChronoAnimSpeedOn, null, "SOAMapWideChronoPassiveTarget", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_ChronoAnimSpeedOn, null, "SOAMapWideChrono", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_ChronoAnimSpeedOn, null, "TimeWarpProduction", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chrono Anim Speed Off
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_ChronoAnimSpeedOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_buff;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_buff = EventUnitBehavior();
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_unit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(lv_unit, (("AnimClearTimeScaleGlobal " + (lv_buff))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_ChronoAnimSpeedOff_Init () {
    libCPCD_gt_ChronoAnimSpeedOff = TriggerCreate("libCPCD_gt_ChronoAnimSpeedOff_Func");
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_ChronoAnimSpeedOff, null, "SOAMapWideChronoPassiveTarget", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_ChronoAnimSpeedOff, null, "SOAMapWideChrono", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_ChronoAnimSpeedOff, null, "TimeWarpProduction", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Same Place Revive
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_SamePlaceRevive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_beacon;
    point lv_beaconPoint;
    unit lv_hero;
    fixed lv_facing;
    point lv_rally;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_beacon = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_beaconPoint = EventPlayerEffectUsedPoint(c_effectLocationCasterUnit);
    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_facing = UnitGetFacing(lv_beacon);
    lv_rally = UnitRallyPointTargetPoint(lv_beacon, 1, 1);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(lv_hero, lv_beaconPoint, false);
    UnitSetFacing(lv_hero, lv_facing, 0.0);
    Wait(0.125, c_timeGame);
    UnitSetPosition(lv_hero, lv_beaconPoint, false);
    UnitSetFacing(lv_hero, lv_facing, 0.0);
    if ((lv_rally != null)) {
        UnitIssueOrder(lv_hero, OrderTargetingPoint(AbilityCommand("attack", 0), lv_rally), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_SamePlaceRevive_Init () {
    libCPCD_gt_SamePlaceRevive = TriggerCreate("libCPCD_gt_SamePlaceRevive_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_SamePlaceRevive, c_playerAny, "PortToMyCenter");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_InstantRevive
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_InstantRevive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayerRemoveCooldown(lv_p, libCOOC_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(lv_p)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_InstantRevive_Init () {
    libCPCD_gt_CM_InstantRevive = TriggerCreate("libCPCD_gt_CM_InstantRevive_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CM_InstantRevive, c_playerAny, "HeroInstantRevive");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supplicant Warp Train
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_SupplicantWarpTrain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_actualCreator;
    unit lv_warpGate;
    point lv_p;
    order lv_order1;
    order lv_order2;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnitCreatedUnit();
    lv_warpGate = EventUnit();
    lv_p = UnitGetPosition(lv_u);
    lv_order1 = OrderTargetingPoint(libCPCD_gv_supplicantWarpTrainActualCommand, PointWithOffset(lv_p, -0.5, 0.0));
    lv_order2 = OrderTargetingPoint(libCPCD_gv_supplicantWarpTrainActualCommand, PointWithOffset(lv_p, 0.5, 0.0));
    lv_player = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_u) == libCPCD_gv_supplicantWarpTrainDummyUnitLink))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, libCPCD_gv_supplicantWarpTrainCreatorUnitLink, c_unitCreateIgnorePlacement, lv_player, lv_p, 270.0);
    lv_actualCreator = UnitLastCreated();
    if ((UnitOrderIsValid(lv_actualCreator, lv_order1) == false) && (UnitOrderIsValid(lv_actualCreator, lv_order2) == false)) {
        UnitAbilityAddChargeUsed(lv_warpGate, libCPCD_gv_warpGateTrainAbility, "WarpGateTrain", -1.0);
        UnitRemove(lv_actualCreator);
        return true;
    }

    UnitIssueOrder(lv_actualCreator, lv_order1, c_orderQueueAddToFront);
    UnitIssueOrder(lv_actualCreator, lv_order2, c_orderQueueAddToFront);
    UnitBehaviorAdd(lv_actualCreator, libCPCD_gv_supplicantWarpTrainCreatorWarpGateFinderBehaviorLink, lv_warpGate, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_SupplicantWarpTrain_Init () {
    libCPCD_gt_SupplicantWarpTrain = TriggerCreate("libCPCD_gt_SupplicantWarpTrain_Func");
    TriggerAddEventUnitCreated(libCPCD_gt_SupplicantWarpTrain, null, libCPCD_gv_warpGateTrainAbility, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supplicant Actual Train
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_SupplicantActualTrain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_warpSource;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnitCreatedUnit();
    lv_warpSource = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_u, libCPCD_gv_supplicantWarpTrainWarpPowerCheckBehaviorLink, lv_warpSource, 1);
    UnitBehaviorAdd(lv_u, libCPCD_gv_supplicantWarpTrainCreatorFinderBehaviorLink, lv_warpSource, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_SupplicantActualTrain_Init () {
    libCPCD_gt_SupplicantActualTrain = TriggerCreate("libCPCD_gt_SupplicantActualTrain_Func");
    TriggerAddEventUnitCreated(libCPCD_gt_SupplicantActualTrain, null, libCPCD_gv_supplicantWarpTrainActualAbility, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supplicant Warp Finish
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_SupplicantWarpFinish_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_supplicant;
    unit lv_creator;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_supplicant = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_supplicant, libCPCD_gv_supplicantWarpTrainCreatorFinderBehaviorLink) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_creator = UnitBehaviorEffectUnit(lv_supplicant, libCPCD_gv_supplicantWarpTrainCreatorFinderBehaviorLink, c_effectUnitCaster, 0);
    UnitBehaviorRemove(lv_supplicant, libCPCD_gv_supplicantWarpTrainCreatorFinderBehaviorLink, 1);
    UnitRemove(lv_creator);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_SupplicantWarpFinish_Init () {
    libCPCD_gt_SupplicantWarpFinish = TriggerCreate("libCPCD_gt_SupplicantWarpFinish_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_SupplicantWarpFinish, c_playerAny, libCPCD_gv_supplicantWarpTrainActualUnitBirthEventLink);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supplicant Warp Cancel
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_SupplicantWarpCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_supplicant;
    unit lv_creator;
    unit lv_warpGate;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_supplicant = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_creator = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(lv_creator, libCPCD_gv_supplicantWarpTrainWarpRefundBehaviorLink) > 0)) {
        lv_warpGate = UnitBehaviorEffectUnit(lv_creator, libCPCD_gv_supplicantWarpTrainCreatorWarpGateFinderBehaviorLink, c_effectUnitCaster, 0);
        UnitAbilityAddChargeUsed(lv_warpGate, libCPCD_gv_warpGateTrainAbility, "WarpGateTrain", -1.0);
        UnitRemove(lv_creator);
    }
    else {
        UnitBehaviorAdd(lv_creator, libCPCD_gv_supplicantWarpTrainWarpRefundBehaviorLink, lv_supplicant, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_SupplicantWarpCancel_Init () {
    libCPCD_gt_SupplicantWarpCancel = TriggerCreate("libCPCD_gt_SupplicantWarpCancel_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_SupplicantWarpCancel, c_playerAny, libCPCD_gv_supplicantWarpTrainActualUnitCancelEventLink);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stukov - Snare Behavior Off
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_StukovSnareBehaviorOn2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    fixed lv_defaultHeight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_defaultHeight = UnitTypeGetProperty(UnitGetType(lv_unit), c_unitPropHeight);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(lv_unit, lv_defaultHeight, libCPCD_gv_StukovInfestedWraithSnareBehavior3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_StukovSnareBehaviorOn2_Init () {
    libCPCD_gt_StukovSnareBehaviorOn2 = TriggerCreate("libCPCD_gt_StukovSnareBehaviorOn2_Func");
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_StukovSnareBehaviorOn2, null, libCPCD_gv_StukovInfestedWraithSnareBehavior, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CargoDeath
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_CargoDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_cargoUnit;
    unit lv_transportUnit;
    point lv_landingPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cargoUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_transportUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_cargoUnit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideUnit(lv_cargoUnit, false);
    lv_landingPoint = UnitTypePlacementTestsFromPoint(UnitGetType(lv_cargoUnit), EventPlayer(), UnitGetPosition(lv_transportUnit), 3.0, c_placementTestCliffMask);
    if (((lv_landingPoint == null) || (PlayerGroupHasPlayer(libCOOC_gf_CommanderPlayers(), EventPlayer()) != true))) {
        UnitSetPropertyFixed(lv_cargoUnit, c_unitPropShields, 0.0);
        UnitCreateEffectUnit(lv_cargoUnit, libCPCD_gv_cM_CargoDeathKillEffect, lv_cargoUnit);
    }
    else {
        libNtve_gf_ShowHideUnit(lv_cargoUnit, true);
        UnitSetPosition(lv_transportUnit, lv_landingPoint, false);
    }
    if ((UnitIsValid(lv_cargoUnit) == true)) {
        libNtve_gf_ShowHideUnit(lv_cargoUnit, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_CargoDeath_Init () {
    libCPCD_gt_CM_CargoDeath = TriggerCreate("libCPCD_gt_CM_CargoDeath_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CM_CargoDeath, c_playerAny, libCPCD_gv_cM_CargoDeathNotifyEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Tumor Build
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CreepTumorBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "CreepTumorExhausted", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CreepTumorBuild_Init () {
    libCPCD_gt_CreepTumorBuild = TriggerCreate("libCPCD_gt_CreepTumorBuild_Func");
    TriggerAddEventUnitAbility(libCPCD_gt_CreepTumorBuild, null, AbilityCommand("CreepTumorBuild", 0), c_abilBuildStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MindControlSupplyOn
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_MindControlSupplyOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_supply;
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_supply = 6.0;
    lv_u = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_u) == true))) {
            return false;
        }

        if (!((UnitIsAlive(lv_u) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_u, "HybridUnitDummy") == true)) {
        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropSuppliesUsed, c_playerPropOperAdd, lv_supply);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_MindControlSupplyOn_Init () {
    libCPCD_gt_MindControlSupplyOn = TriggerCreate("libCPCD_gt_MindControlSupplyOn_Func");
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_MindControlSupplyOn, null, "DarkArchonMindControl", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MindControlSupplyOff
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_MindControlSupplyOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_supply;
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_supply = 6.0;
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_u, "HybridUnitDummy") == true)) {
        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropSuppliesUsed, c_playerPropOperSubtract, lv_supply);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_MindControlSupplyOff_Init () {
    libCPCD_gt_MindControlSupplyOff = TriggerCreate("libCPCD_gt_MindControlSupplyOff_Func");
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_MindControlSupplyOff, null, "DarkArchonMindControl", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Behavior Permanently Changes Owner
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_BehaviorPermanentlyChangesOwner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mindcontrolunit;
    string lv_mindcontrolbehavior;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mindcontrolunit = EventUnit();
    lv_mindcontrolbehavior = EventUnitBehavior();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(lv_mindcontrolunit, UnitBehaviorEffectPlayer(lv_mindcontrolunit, lv_mindcontrolbehavior, c_effectPlayerCaster, 0), true);
    if ((UnitHasBehavior2(lv_mindcontrolunit, "OnDeathControllerDeathPrevent") == false)) {
        UnitBehaviorAdd(lv_mindcontrolunit, "AllUnitBehaviorController", lv_mindcontrolunit, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_BehaviorPermanentlyChangesOwner_Init () {
    libCPCD_gt_BehaviorPermanentlyChangesOwner = TriggerCreate("libCPCD_gt_BehaviorPermanentlyChangesOwner_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libCPCD_gt_BehaviorPermanentlyChangesOwner, null, c_unitBehaviorFlagUser8, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libCPCD_gt_BehaviorPermanentlyChangesOwner, null, c_unitBehaviorFlagUser8, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: COD Construc Invulnerable On
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CODConstrucInvulnerableOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(EventUnit(), c_unitStateInvulnerable, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CODConstrucInvulnerableOn_Init () {
    libCPCD_gt_CODConstrucInvulnerableOn = TriggerCreate("libCPCD_gt_CODConstrucInvulnerableOn_Func");
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CODConstrucInvulnerableOn, null, "ConstructInvulnerability", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: COD Construc Invulnerable  Off
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CODConstrucInvulnerableOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(EventUnit(), c_unitStateInvulnerable, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CODConstrucInvulnerableOff_Init () {
    libCPCD_gt_CODConstrucInvulnerableOff = TriggerCreate("libCPCD_gt_CODConstrucInvulnerableOff_Func");
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CODConstrucInvulnerableOff, null, "ConstructInvulnerability", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VoidACShard Modify Health
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_VoidACShardModifyHealth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_unitLife;
    fixed lv_unitShields;
    fixed lv_totalDamage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true)) {
        lv_unitLife = UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLife, c_unitPropCurrent);
        lv_unitShields = UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropShields, c_unitPropCurrent);
        lv_totalDamage = (lv_unitLife + lv_unitShields);
        lv_totalDamage *= 0.75;
        CatalogFieldValueSet(c_gameCatalogEffect, "VoidShardACDeathGripDamageDummy", "Amount", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), FixedToString(lv_totalDamage, 3));
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "VoidShardACDeathGripDamageDummy", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_VoidACShardModifyHealth_Init () {
    libCPCD_gt_VoidACShardModifyHealth = TriggerCreate("libCPCD_gt_VoidACShardModifyHealth_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_VoidACShardModifyHealth, c_playerAny, "VoidShardACModifyHealthDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ResourcePickupAllyNew
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_ResourcePickupAllyNew_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minerals;
    int lv_gas;
    int lv_itAllyPlayer;
    int lv_itPickupPlayer;

    // Automatic Variable Declarations
    playergroup auto4AF87639_g;

    // Variable Initialization
    lv_minerals = CatalogFieldValueGetAsInt(c_gameCatalogEffect, EventPlayerEffectUsed(), "Resources[Minerals]", c_playerAny);
    lv_gas = CatalogFieldValueGetAsInt(c_gameCatalogEffect, EventPlayerEffectUsed(), "Resources[Vespene]", c_playerAny);
    lv_itPickupPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    auto4AF87639_g = libCOOC_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(lv_itPickupPlayer);
    lv_itAllyPlayer = -1;
    while (true) {
        lv_itAllyPlayer = PlayerGroupNextPlayer(auto4AF87639_g, lv_itAllyPlayer);
        if (lv_itAllyPlayer < 0) { break; }
        if ((lv_itPickupPlayer != lv_itAllyPlayer)) {
            libCPCD_gf_ResourcePickupAlly(lv_itAllyPlayer, lv_minerals, lv_gas);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_ResourcePickupAllyNew_Init () {
    libCPCD_gt_ResourcePickupAllyNew = TriggerCreate("libCPCD_gt_ResourcePickupAllyNew_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_ResourcePickupAllyNew, c_playerAny, "PickupMinerals50");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_ResourcePickupAllyNew, c_playerAny, "PickupEnvelopeMinerals50");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_ResourcePickupAllyNew, c_playerAny, "PickupMinerals100");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_ResourcePickupAllyNew, c_playerAny, "PickupMinerals250");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_ResourcePickupAllyNew, c_playerAny, "PickupPalletMinerals");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_ResourcePickupAllyNew, c_playerAny, "PickupGas50");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_ResourcePickupAllyNew, c_playerAny, "PickupEnvelopeGas50");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_ResourcePickupAllyNew, c_playerAny, "PickupGas100");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_ResourcePickupAllyNew, c_playerAny, "PickupGas200");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_ResourcePickupAllyNew, c_playerAny, "PickupPalletGas");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_ResourcePickupAllyNew, c_playerAny, "MutatorPickupGas50");
}

//--------------------------------------------------------------------------------------------------
// Trigger: StunAnimOn
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_StunAnimOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitBehaviorHasFlag(EventUnitBehavior(), c_unitBehaviorFlagStun) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "StunnedAnim", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_StunAnimOn_Init () {
    libCPCD_gt_StunAnimOn = TriggerCreate("libCPCD_gt_StunAnimOn_Func");
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_StunAnimOn, null, null, c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StunAnimOff
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_StunAnimOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitBehaviorHasFlag(EventUnitBehavior(), c_unitBehaviorFlagStun) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "StunnedAnim", c_unitBehaviorCountAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_StunAnimOff_Init () {
    libCPCD_gt_StunAnimOff = TriggerCreate("libCPCD_gt_StunAnimOff_Func");
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_StunAnimOff, null, null, c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HighlightTooltip
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_HighlightTooltip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogActor, (UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster))), "HighlightSubTooltip", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), UserDataGetString("PlayerCommanders", libCPGL_gv_commander[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_commanderInstance, "Name", 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_HighlightTooltip_Init () {
    libCPCD_gt_HighlightTooltip = TriggerCreate("libCPCD_gt_HighlightTooltip_Func");
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_HighlightTooltip, c_playerAny, "AllUnitBehaviorControllerSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: OverlordUpgrade
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_OverlordUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventUpgradeName() == "overlordtransport") || (EventUpgradeName() == "OverlordStetmannTransport")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayerApplySkinReplacingExistingUnit(EventPlayer(), "OverlordTransport", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_OverlordUpgrade_Init () {
    libCPCD_gt_OverlordUpgrade = TriggerCreate("libCPCD_gt_OverlordUpgrade_Func");
    TriggerAddEventUpgradeLevelChanged(libCPCD_gt_OverlordUpgrade, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZerglingUpgrade
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_ZerglingUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventUpgradeName() == "zerglingmovementspeed") || (EventUpgradeName() == "ZerglingStetmannMovementSpeed")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayerApplySkinReplacingExistingUnit(EventPlayer(), "ZerglingUpgrade", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_ZerglingUpgrade_Init () {
    libCPCD_gt_ZerglingUpgrade = TriggerCreate("libCPCD_gt_ZerglingUpgrade_Func");
    TriggerAddEventUpgradeLevelChanged(libCPCD_gt_ZerglingUpgrade, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreepEngulfCreate
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CreepEngulfCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetUnitRace(EventUnitCreatedUnit()) == "Prot"))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitCreatedUnit(), UnitGetOwner(EventUnitCreatedUnit()), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitCreatedUnit(), "CreepEngulf", EventUnitCreatedUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CreepEngulfCreate_Init () {
    libCPCD_gt_CreepEngulfCreate = TriggerCreate("libCPCD_gt_CreepEngulfCreate_Func");
    TriggerAddEventUnitCreated(libCPCD_gt_CreepEngulfCreate, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CreepEngulfMorph
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CreepEngulfMorph_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GetUnitRace(EventUnit()) == "Prot"))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "CreepEngulf", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CreepEngulfMorph_Init () {
    libCPCD_gt_CreepEngulfMorph = TriggerCreate("libCPCD_gt_CreepEngulfMorph_Func");
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CreepEngulfMorph, null, "PowerUserWarpable", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CreepEngulfMorph, null, "PowerUserWarpableAnywhere", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShieldColorUnitCreate
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_ShieldColorUnitCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto0F235503_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto0F235503_val = libCPGL_gv_commander[UnitGetOwner(EventUnitCreatedUnit())].lv_commander;
    if (auto0F235503_val == "Zeratul") {
        libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), "AliasAdd _ShieldGreen");
    }
    else if (auto0F235503_val == "Vorazun") {
        libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), "AliasAdd _ShieldPurple");
    }
    else if (auto0F235503_val == "Alarak") {
        libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), "AliasAdd _ShieldRed");
    }
    else if (auto0F235503_val == "Karax") {
        libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), "AliasAdd _ShieldYellow");
    }
    else if (auto0F235503_val == "Fenix") {
        libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), "AliasAdd _ShieldOrange");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_ShieldColorUnitCreate_Init () {
    libCPCD_gt_ShieldColorUnitCreate = TriggerCreate("libCPCD_gt_ShieldColorUnitCreate_Func");
    TriggerAddEventUnitCreated(libCPCD_gt_ShieldColorUnitCreate, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShieldColorUnitMorph
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_ShieldColorUnitMorph_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto655724A7_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto655724A7_val = libCPGL_gv_commander[EventPlayer()].lv_commander;
    if (auto655724A7_val == "Zeratul") {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "AliasAdd _ShieldGreen");
    }
    else if (auto655724A7_val == "Vorazun") {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "AliasAdd _ShieldPurple");
    }
    else if (auto655724A7_val == "Alarak") {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "AliasAdd _ShieldRed");
    }
    else if (auto655724A7_val == "Karax") {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "AliasAdd _ShieldYellow");
    }
    else if (auto655724A7_val == "Fenix") {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "AliasAdd _ShieldOrange");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_ShieldColorUnitMorph_Init () {
    libCPCD_gt_ShieldColorUnitMorph = TriggerCreate("libCPCD_gt_ShieldColorUnitMorph_Func");
    TriggerAddEventUnitAbility(libCPCD_gt_ShieldColorUnitMorph, null, null, c_abilMorphStageActorEnd, false);
    TriggerAddEventUnitAbility(libCPCD_gt_ShieldColorUnitMorph, null, null, c_abilBuildStageFinish, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_ShieldColorUnitMorph, null, "PowerUserWarpable", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitConstructProgress(libCPCD_gt_ShieldColorUnitMorph, null, c_unitProgressStageStart);
    TriggerAddEventUnitConstructProgress(libCPCD_gt_ShieldColorUnitMorph, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTownHallRallyConstruction
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTownHallRallyConstruction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnitProgressUnit(), UnitGetOwner(EventUnitProgressUnit()), UnitFilter((1 << c_targetFilterPreventReveal), 0, 0, 0)) == true))) {
            return false;
        }

        if (!((UnitRallyPointCount(EventUnitProgressUnit()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    libCPCD_gf_SetWorkerRallyPointforNexus(EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTownHallRallyConstruction_Init () {
    libCPCD_gt_CDTownHallRallyConstruction = TriggerCreate("libCPCD_gt_CDTownHallRallyConstruction_Func");
    TriggerAddEventUnitConstructProgress(libCPCD_gt_CDTownHallRallyConstruction, null, c_unitProgressStageStart);
    TriggerAddEventUnitConstructProgress(libCPCD_gt_CDTownHallRallyConstruction, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CDTownHallRallyLand
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CDTownHallRallyLand_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterPreventReveal), 0, 0, 0)) == true))) {
            return false;
        }

        if (!((UnitRallyPointCount(EventUnit()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    libCPCD_gf_SetWorkerRallyPointforNexus(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CDTownHallRallyLand_Init () {
    libCPCD_gt_CDTownHallRallyLand = TriggerCreate("libCPCD_gt_CDTownHallRallyLand_Func");
    TriggerAddEventUnitAbility(libCPCD_gt_CDTownHallRallyLand, null, AbilityCommand("CommandCenterLand", 0), c_abilMorphStageAbilsEnd, true);
    TriggerAddEventUnitAbility(libCPCD_gt_CDTownHallRallyLand, null, AbilityCommand("CommandCenterMengskLand", 0), c_abilMorphStageAbilsEnd, true);
    TriggerAddEventUnitAbility(libCPCD_gt_CDTownHallRallyLand, null, AbilityCommand("TychusCommandCenterLand", 0), c_abilMorphStageAbilsEnd, true);
    TriggerAddEventUnitAbility(libCPCD_gt_CDTownHallRallyLand, null, AbilityCommand("HHCommandCenterLand", 0), c_abilMorphStageAbilsEnd, true);
    TriggerAddEventUnitAbility(libCPCD_gt_CDTownHallRallyLand, null, AbilityCommand("OrbitalCommandLand", 0), c_abilMorphStageAbilsEnd, true);
    TriggerAddEventUnitAbility(libCPCD_gt_CDTownHallRallyLand, null, AbilityCommand("DehakaHatcheryRoot", 0), c_abilMorphStageAbilsEnd, true);
    TriggerAddEventUnitAbility(libCPCD_gt_CDTownHallRallyLand, null, AbilityCommand("SICommandCenterLand", 0), c_abilMorphStageAbilsEnd, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Baneling Scourge Deathrattle Scrap Deaths
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_BanelingScourgeDeathrattleScrapDeaths_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dyingUnitMineralCost;
    int lv_dyingUnitVespeneCost;
    int lv_dyingUnitPlayer;
    int lv_scrapPlayerDivisor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scrapPlayerDivisor = 10;

    // Conditions
    if (testConds) {
        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "HHScrapPickup", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Baneling") || (UnitGetType(EventUnit()) == "BanelingBurrowed") || (UnitGetType(EventUnit()) == "HotSSplitterlingBig") || (UnitGetType(EventUnit()) == "HotSSplitterlingBigBurrowed") || (UnitGetType(EventUnit()) == "Scourge") || (UnitGetType(EventUnit()) == "HHReaper") || (UnitGetType(EventUnit()) == "HHReaperFlying") || (UnitGetType(EventUnit()) == "HHHellion") || (UnitGetType(EventUnit()) == "HHHellionTank") || (UnitGetType(EventUnit()) == "HHWidowMine") || (UnitGetType(EventUnit()) == "HHWidowMineBurrowed") || (UnitGetType(EventUnit()) == "Supplicant")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dyingUnitPlayer = UnitGetOwner(EventUnit());
    if ((lv_dyingUnitPlayer == c_playerAny)) {
        return true;
    }

    if ((PlayerCommander(lv_dyingUnitPlayer) == "Horner")) {
        lv_scrapPlayerDivisor = 5;
    }

    lv_dyingUnitMineralCost = (FixedToInt(StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "CostResource[" + IntToString(0) + "]", EventPlayer()))) / lv_scrapPlayerDivisor);
    lv_dyingUnitVespeneCost = (FixedToInt(StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "CostResource[" + IntToString(1) + "]", EventPlayer()))) / lv_scrapPlayerDivisor);
    if ((lv_dyingUnitMineralCost > 0)) {
        if ((RandomInt(1, 100) <= FixedToInt(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryHornerDoubleSalvageChanceDisplayDummy", "Amount", PlayerGroupPlayer(libCPGL_gf_AllCommandersinPlayerGroup("Horner", PlayerGroupAlliance(c_playerGroupAlly, lv_dyingUnitPlayer)), 1))))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HHScrapPickup", 0, lv_dyingUnitPlayer, PointWithOffset(UnitGetPosition(EventUnit()), -0.25, 0.0));
            libCPCD_gf_CDHHScrapResourceSetStack(UnitLastCreated(), lv_dyingUnitMineralCost, lv_dyingUnitVespeneCost);
            if ((lv_dyingUnitVespeneCost == 0)) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap HHScrapMineral");
            }

            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HHScrapPickup", 0, lv_dyingUnitPlayer, PointWithOffset(UnitGetPosition(EventUnit()), 0.25, 0.0));
            libCPCD_gf_CDHHScrapResourceSetStack(UnitLastCreated(), lv_dyingUnitMineralCost, lv_dyingUnitVespeneCost);
            if ((lv_dyingUnitVespeneCost == 0)) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap HHScrapMineral");
            }

        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HHScrapPickup", 0, lv_dyingUnitPlayer, UnitGetPosition(EventUnit()));
            libCPCD_gf_CDHHScrapResourceSetStack(UnitLastCreated(), lv_dyingUnitMineralCost, lv_dyingUnitVespeneCost);
            if ((lv_dyingUnitVespeneCost == 0)) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap HHScrapMineral");
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_BanelingScourgeDeathrattleScrapDeaths_Init () {
    libCPCD_gt_BanelingScourgeDeathrattleScrapDeaths = TriggerCreate("libCPCD_gt_BanelingScourgeDeathrattleScrapDeaths_Func");
    TriggerEnable(libCPCD_gt_BanelingScourgeDeathrattleScrapDeaths, false);
    TriggerAddEventUnitDied(libCPCD_gt_BanelingScourgeDeathrattleScrapDeaths, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Baneling Scourge Econ Drop
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_BanelingScourgeEconDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_position;
    string lv_resource;
    int lv_itPlayer;
    int lv_kerriganCommander;

    // Automatic Variable Declarations
    playergroup autoB3EC1D15_g;

    // Variable Initialization
    lv_kerriganCommander = PlayerGroupPlayer(libCPGL_gf_AllCommandersinPlayerGroup("Kerrigan", libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Ally, UnitGetOwner(libNtve_gf_KillingUnit()))), 1);

    // Conditions
    if (testConds) {
        if (!((lv_kerriganCommander != c_playerAny))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "KerriganVoidCoopEconDrop") == true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Baneling") || (UnitGetType(EventUnit()) == "BanelingBurrowed") || (UnitGetType(EventUnit()) == "Scourge")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_position = UnitGetPosition(EventUnit());
    lv_resource = "KerriganVoidCoopEconDropLT1";
    autoB3EC1D15_g = libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Ally, lv_kerriganCommander);
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoB3EC1D15_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_resource, 0, lv_itPlayer, lv_position);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_BanelingScourgeEconDrop_Init () {
    libCPCD_gt_BanelingScourgeEconDrop = TriggerCreate("libCPCD_gt_BanelingScourgeEconDrop_Func");
    TriggerEnable(libCPCD_gt_BanelingScourgeEconDrop, false);
    TriggerAddEventUnitDied(libCPCD_gt_BanelingScourgeEconDrop, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Baneling Scourge Locusts
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_BanelingScourgeLocusts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_locustUnitType;
    int lv_rand;
    fixed lv_foodCompare;
    int lv_abathurCommander;

    // Automatic Variable Declarations
    playergroup auto5904D722_g;
    int auto5904D722_var;

    // Variable Initialization
    lv_locustUnitType = "Locust";
    lv_rand = RandomInt(1, 100);
    lv_foodCompare = (StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0)) * -16.0);
    lv_abathurCommander = PlayerGroupPlayer(libCPGL_gf_AllCommandersinPlayerGroup("Abathur", libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Ally, UnitGetOwner(libNtve_gf_KillingUnit()))), 1);

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0)) == false))) {
            return false;
        }

        if (!((lv_abathurCommander != c_playerAny))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(lv_abathurCommander, UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(lv_abathurCommander, "AbathurEnemyDeathCreateLocusts", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Baneling") || (UnitGetType(EventUnit()) == "BanelingBurrowed") || (UnitGetType(EventUnit()) == "Scourge")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetHeight(EventUnit()) >= 1)) {
        lv_locustUnitType = "LocustFlying";
    }

    if ((UnitHasBehavior2(EventUnit(), "SupplyLT1") == true)) {
        lv_foodCompare = 8;
    }

    auto5904D722_g = libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Ally, lv_abathurCommander);
    auto5904D722_var = -1;
    while (true) {
        auto5904D722_var = PlayerGroupNextPlayer(auto5904D722_g, auto5904D722_var);
        if (auto5904D722_var < 0) { break; }
        if (((FixedToInt(lv_foodCompare) + libCPCD_gv_cDAbathurDeathCreateLocustsRandomModifier) >= lv_rand)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(libCPCD_gv_onDeathUnitMultiplier, lv_locustUnitType, c_unitCreateIgnorePlacement, auto5904D722_var, UnitGetPosition(EventUnit()));
            PlayerCreateEffectUnit(auto5904D722_var, "AbathurLocustTimedLife", UnitLastCreated());
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_BanelingScourgeLocusts_Init () {
    libCPCD_gt_BanelingScourgeLocusts = TriggerCreate("libCPCD_gt_BanelingScourgeLocusts_Func");
    TriggerEnable(libCPCD_gt_BanelingScourgeLocusts, false);
    TriggerAddEventUnitDied(libCPCD_gt_BanelingScourgeLocusts, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Baneling Scourge Essence Drop
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_BanelingScourgeEssenceDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_essenceUnitCount;
    int lv_essenceBaseAmount;
    int lv_essenceCasualMultiplier;
    int lv_essenceNormalMultiplier;
    fixed lv_essenceHardMultiplier;
    int lv_essenceBrutalMultiplier;
    int lv_dehakaPlayer;

    // Automatic Variable Declarations
    playergroup auto9553701A_g;
    int auto9553701A_var;

    // Variable Initialization
    lv_essenceCasualMultiplier = 2;
    lv_essenceNormalMultiplier = 2;
    lv_essenceHardMultiplier = 1.5;
    lv_essenceBrutalMultiplier = 1;
    lv_dehakaPlayer = PlayerGroupPlayer(libCPGL_gf_AllCommandersinPlayerGroup("Dehaka", libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Ally, UnitGetOwner(libNtve_gf_KillingUnit()))), 1);

    // Conditions
    if (testConds) {
        if (!((lv_dehakaPlayer != c_playerAny))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(lv_dehakaPlayer, UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMU_gf_CT_UnitSpawnedByMutator(EventUnit()) == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Baneling") || (UnitGetType(EventUnit()) == "BanelingBurrowed") || (UnitGetType(EventUnit()) == "Scourge")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_dehakaPlayer == c_playerAny)) {
        return true;
    }

    lv_essenceBaseAmount = 1;
    lv_essenceUnitCount = libNtve_gf_DifficultyValueInt((lv_essenceBaseAmount * lv_essenceCasualMultiplier), (lv_essenceBaseAmount * lv_essenceNormalMultiplier), FixedToInt(Ceiling((lv_essenceBaseAmount * lv_essenceHardMultiplier))), (lv_essenceBaseAmount * lv_essenceBrutalMultiplier));
    auto9553701A_g = libCPGL_gf_AllCommandersinPlayerGroup("Dehaka", libCPGL_gf_AllCommandersinPlayerGroup("Dehaka", libCPGL_gf_HumanPlayers()));
    auto9553701A_var = -1;
    while (true) {
        auto9553701A_var = PlayerGroupNextPlayer(auto9553701A_g, auto9553701A_var);
        if (auto9553701A_var < 0) { break; }
        if ((lv_essenceUnitCount > 0)) {
            libCPCD_gv_cDDehakaDebugEssenceDroppedNormal += lv_essenceUnitCount;
            libNtve_gf_CreateUnitsWithDefaultFacing(libCPCD_gv_onDeathUnitMultiplier, "EssencePickup", c_unitCreateIgnorePlacement, auto9553701A_var, UnitGetPosition(EventUnit()));
            libCPCD_gf_CDDehakaEssenceSetStack(UnitLastCreated(), lv_essenceUnitCount);
            UnitBehaviorRemove(UnitLastCreated(), "EssenceCreated", 1);
            libCPCD_gf_CDDehakaEssenceScale(UnitLastCreated(), true);
            libCPCD_gf_CDDehakaEssenceMerge(UnitLastCreated(), lv_essenceUnitCount);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_BanelingScourgeEssenceDrop_Init () {
    libCPCD_gt_BanelingScourgeEssenceDrop = TriggerCreate("libCPCD_gt_BanelingScourgeEssenceDrop_Func");
    TriggerEnable(libCPCD_gt_BanelingScourgeEssenceDrop, false);
    TriggerAddEventUnitDied(libCPCD_gt_BanelingScourgeEssenceDrop, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Baneling Scourge Biomass Drop
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_BanelingScourgeBiomassDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_biomassUnitCount;
    int lv_indexPlayer;
    int lv_biomassBaseAmount;
    int lv_biomassCasualMultiplier;
    int lv_biomassNormalMultiplier;
    fixed lv_biomassHardMultiplier;
    int lv_biomassBrutalMultiplier;
    int lv_biomassToxicNestMultiplier;
    int lv_dyingUnitSupply;
    int lv_abathurPlayer;
    fixed lv_doubleBiomassChance;

    // Automatic Variable Declarations
    playergroup autoB8C39052_g;

    // Variable Initialization
    lv_biomassCasualMultiplier = 2;
    lv_biomassNormalMultiplier = 2;
    lv_biomassHardMultiplier = 1.5;
    lv_biomassBrutalMultiplier = 1;
    lv_biomassToxicNestMultiplier = 2;
    lv_abathurPlayer = PlayerGroupPlayer(libCPGL_gf_AllCommandersinPlayerGroup("Abathur", libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Ally, UnitGetOwner(libNtve_gf_KillingUnit()))), 1);

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != c_playerAny))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(lv_abathurPlayer, UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((lv_abathurPlayer != c_playerAny))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMU_gf_CT_UnitSpawnedByMutator(EventUnit()) == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Baneling") || (UnitGetType(EventUnit()) == "BanelingBurrowed") || (UnitGetType(EventUnit()) == "Scourge")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB8C39052_g = libCPGL_gf_AllCommandersinPlayerGroup("Abathur", libCPGL_gf_HumanPlayers());
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoB8C39052_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        lv_dyingUnitSupply = FixedToInt(StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0)));
        lv_doubleBiomassChance = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MasteryAbathurDoubleBiomassDisplayDummy", "Amount", lv_indexPlayer);
        if (((UnitHasBehavior2(EventUnit(), "SupplyLT1") == true) || (UnitHasBehavior2(EventUnit(), "CritterExplode") == true))) {
            lv_biomassBaseAmount = 1;
        }
        if ((((TechTreeUpgradeCount(lv_indexPlayer, "AbathurToxicNestIcreasedBiomass", c_techCountCompleteOnly) == 1) && (UnitHasBehavior2(EventUnit(), "ToxicNestVirulentNest") == true)) || ((TechTreeUpgradeCount(lv_indexPlayer, "MasteryAbathurDoubleBiomass", c_techCountCompleteOnly) > 0) && (RandomFixed(0.0, 100.0) <= lv_doubleBiomassChance)))) {
            lv_biomassUnitCount = (libNtve_gf_DifficultyValueInt((lv_biomassBaseAmount * lv_biomassCasualMultiplier), (lv_biomassBaseAmount * lv_biomassNormalMultiplier), FixedToInt(Ceiling((lv_biomassBaseAmount * lv_biomassHardMultiplier))), (lv_biomassBaseAmount * lv_biomassBrutalMultiplier)) * lv_biomassToxicNestMultiplier);
        }
        else {
            lv_biomassUnitCount = libNtve_gf_DifficultyValueInt((lv_biomassBaseAmount * lv_biomassCasualMultiplier), (lv_biomassBaseAmount * lv_biomassNormalMultiplier), FixedToInt(Ceiling((lv_biomassBaseAmount * lv_biomassHardMultiplier))), (lv_biomassBaseAmount * lv_biomassBrutalMultiplier));
        }
        if ((lv_biomassUnitCount > 0)) {
            libCPGL_gv_cM_DebugAbathurBiomassDroppedNormal += lv_biomassUnitCount;
            libNtve_gf_CreateUnitsWithDefaultFacing(libCPCD_gv_onDeathUnitMultiplier, "BiomassPickup", c_unitCreateIgnorePlacement, lv_abathurPlayer, UnitGetPosition(EventUnit()));
            libCPCD_gf_CDAbathurBiomassSetStack(UnitLastCreated(), lv_biomassUnitCount);
            UnitBehaviorRemove(UnitLastCreated(), "BiomassCreated", 1);
            libCPCD_gf_CDAbathurBiomassScale(UnitLastCreated(), true);
            libCPCD_gf_CDAbathurBiomassMerge(UnitLastCreated(), lv_biomassUnitCount);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_BanelingScourgeBiomassDrop_Init () {
    libCPCD_gt_BanelingScourgeBiomassDrop = TriggerCreate("libCPCD_gt_BanelingScourgeBiomassDrop_Func");
    TriggerEnable(libCPCD_gt_BanelingScourgeBiomassDrop, false);
    TriggerAddEventUnitDied(libCPCD_gt_BanelingScourgeBiomassDrop, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTHeroReviveQueue_HeroRevived
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CTHeroReviveQueue_HeroRevived_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_herounit;
    int lv_owner;
    string lv_herorevivesoundinstance;

    // Automatic Variable Declarations
    string autoE0191D3D_userType;
    int autoE0191D3D_i;

    // Variable Initialization
    lv_herounit = EventUnit();
    lv_owner = UnitGetOwner(lv_herounit);

    // Actions
    if (!runActions) {
        return true;
    }

    autoE0191D3D_userType = "HeroReviveSounds";
    autoE0191D3D_i = 1;
    for ( ; autoE0191D3D_i <= UserDataInstanceCount(autoE0191D3D_userType) ; autoE0191D3D_i += 1 ) {
        lv_herorevivesoundinstance = UserDataInstance(autoE0191D3D_userType, autoE0191D3D_i);
        if ((UserDataGetUnit("HeroReviveSounds", lv_herorevivesoundinstance, "HeroUnit", 1) == UnitGetType(lv_herounit)) && ((UserDataGetUpgrade("HeroReviveSounds", lv_herorevivesoundinstance, "RequiredUpgrade", 1) == null) || (TechTreeUpgradeCount(lv_owner, UserDataGetUpgrade("HeroReviveSounds", lv_herorevivesoundinstance, "RequiredUpgrade", 1), c_techCountCompleteOnly) > 0))) {
            libCPCD_gf_CM_HeroReviveQueue_PlaySound(SoundLink(UserDataGetSound("HeroReviveSounds", lv_herorevivesoundinstance, "HeroSound", 1), c_soundIndexAny), UserDataGetFixed("HeroReviveSounds", lv_herorevivesoundinstance, "HeroSoundDelay", 1), libCPGL_gf_HumanPlayers());
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CTHeroReviveQueue_HeroRevived_Init () {
    libCPCD_gt_CTHeroReviveQueue_HeroRevived = TriggerCreate("libCPCD_gt_CTHeroReviveQueue_HeroRevived_Func");
    TriggerAddEventUnitRevive(libCPCD_gt_CTHeroReviveQueue_HeroRevived, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTAbilityRaynorHyperion
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CTAbilityRaynorHyperion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    libCPCD_gf_CTCommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("RaynorCommander_Hyperion", -1), libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Ally, UnitGetOwner(EventUnit())));
    if ((libCPCD_gv_cM_MengskSnarkExecuted[UnitGetOwner(EventUnit())] == false) && (libCPGL_gf_CommanderisinPlayerGroup("Mengsk", libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_AllyMutual, UnitGetOwner(EventUnit()))) == true)) {
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        libCPCD_gv_cM_MengskSnarkExecuted[UnitGetOwner(EventUnit())] = true;
        Wait(0.5, c_timeReal);
        libCPCD_gf_CTCommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("MengskCommander_RaynorHyperion", -1), libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_AllyMutual, UnitGetOwner(EventUnit())));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CTAbilityRaynorHyperion_Init () {
    libCPCD_gt_CTAbilityRaynorHyperion = TriggerCreate("libCPCD_gt_CTAbilityRaynorHyperion_Func");
    TriggerEnable(libCPCD_gt_CTAbilityRaynorHyperion, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CTAbilityRaynorHyperion, null, AbilityCommand("VoidCoopSummonHyperion", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTAbilityRaynorBansheesUsed
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CTAbilityRaynorBansheesUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    libCPCD_gf_CTCommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("RaynorCommander_Banshee", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CTAbilityRaynorBansheesUsed_Init () {
    libCPCD_gt_CTAbilityRaynorBansheesUsed = TriggerCreate("libCPCD_gt_CTAbilityRaynorBansheesUsed_Func");
    TriggerEnable(libCPCD_gt_CTAbilityRaynorBansheesUsed, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CTAbilityRaynorBansheesUsed, null, AbilityCommand("BansheeAirstrike", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTAbilitySwannDrone
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CTAbilitySwannDrone_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    playergroup lv_targetandCaster;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetandCaster = libNtve_gf_UnionOfPlayerGroups(PlayerGroupSingle(UnitGetOwner(EventUnitTargetUnit())), PlayerGroupSingle(UnitGetOwner(EventUnit())));

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCPCD_gf_CTCommanderVOSendGroup(lv_targetandCaster, SoundLink("SwannCommander_Drone", -1), lv_targetandCaster);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    libCPCD_gf_CTCommanderVOSendGroup(PlayerGroupSingle(UnitGetOwner(EventUnit())), libCPGL_gf_CC_CommanderVOLine(libCPGL_gv_commander[UnitGetOwner(EventUnitTargetUnit())].lv_commanderInstance, libCPGL_ge_CC_CommanderVOLines_CC_CommanderVOThankyou), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CTAbilitySwannDrone_Init () {
    libCPCD_gt_CTAbilitySwannDrone = TriggerCreate("libCPCD_gt_CTAbilitySwannDrone_Func");
    TriggerEnable(libCPCD_gt_CTAbilitySwannDrone, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CTAbilitySwannDrone, null, AbilityCommand("VespeneDroneCast", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTAbilitySwannLaserDrill
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CTAbilitySwannLaserDrill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSendGroup(PlayerGroupAlliance(c_playerGroupAlly, UnitGetOwner(EventUnit())), SoundLink("SwannCommander_LaserDrill", -1), libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_AllyMutual, UnitGetOwner(EventUnit())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CTAbilitySwannLaserDrill_Init () {
    libCPCD_gt_CTAbilitySwannLaserDrill = TriggerCreate("libCPCD_gt_CTAbilitySwannLaserDrill_Func");
    TriggerEnable(libCPCD_gt_CTAbilitySwannLaserDrill, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CTAbilitySwannLaserDrill, null, AbilityCommand("ConstructDrakkenLaserDrillCoop", 0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTAbilitySwannCombatDropUsed
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CTAbilitySwannCombatDropUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSendGroup(PlayerGroupAlliance(c_playerGroupAlly, UnitGetOwner(EventUnit())), SoundLink("SwannCommander_Delivery", -1), libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_AllyMutual, UnitGetOwner(EventUnit())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CTAbilitySwannCombatDropUsed_Init () {
    libCPCD_gt_CTAbilitySwannCombatDropUsed = TriggerCreate("libCPCD_gt_CTAbilitySwannCombatDropUsed_Func");
    TriggerEnable(libCPCD_gt_CTAbilitySwannCombatDropUsed, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CTAbilitySwannCombatDropUsed, null, AbilityCommand("SpecialDelivery", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTAbilityKerriganCrushingGrip
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CTAbilityKerriganCrushingGrip_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_mengsk;

    // Automatic Variable Declarations
    playergroup autoA0090977_g;
    int autoA0090977_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSendGroup(PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()), SoundLink("KerriganCommander_CrushingGrip", -1), libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_AllyMutual, EventPlayer()));
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    autoA0090977_g = PlayerGroupAlliance(c_playerGroupAlly, EventPlayer());
    autoA0090977_var = -1;
    while (true) {
        autoA0090977_var = PlayerGroupNextPlayer(autoA0090977_g, autoA0090977_var);
        if (autoA0090977_var < 0) { break; }
        if ((libCPCD_gv_cM_MengskSnarkExecuted[autoA0090977_var] == false) && (libCPGL_gf_CommanderisinPlayerGroup("Mengsk", PlayerGroupAlliance(c_playerGroupAlly, EventPlayer())) == true)) {
            libCPCD_gv_cM_MengskSnarkExecuted[autoA0090977_var] = true;
            lv_mengsk = true;
        }

    }
    Wait(0.5, c_timeReal);
    if ((lv_mengsk == true)) {
        libCPCD_gf_CTCommanderVOSend(EventPlayer(), SoundLink("MengskCommander_KerriganImmobilizationWave", -1), libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Ally, EventPlayer()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CTAbilityKerriganCrushingGrip_Init () {
    libCPCD_gt_CTAbilityKerriganCrushingGrip = TriggerCreate("libCPCD_gt_CTAbilityKerriganCrushingGrip_Func");
    TriggerEnable(libCPCD_gt_CTAbilityKerriganCrushingGrip, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CTAbilityKerriganCrushingGrip, null, AbilityCommand("KerriganVoidCoopCrushingGripWave", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTAbilityKerriganAssimilation
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CTAbilityKerriganAssimilation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSendGroup(PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()), SoundLink("KerriganCommander_Assimilation", -1), libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Ally, EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CTAbilityKerriganAssimilation_Init () {
    libCPCD_gt_CTAbilityKerriganAssimilation = TriggerCreate("libCPCD_gt_CTAbilityKerriganAssimilation_Func");
    TriggerEnable(libCPCD_gt_CTAbilityKerriganAssimilation, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CTAbilityKerriganAssimilation, null, AbilityCommand("KerriganVoidCoopEconDrop", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionZagaraRoachDrop
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionZagaraRoachDrop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("ZagaraCommander_Roach", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionZagaraRoachDrop_Init () {
    libCPCD_gt_CM_AbilityTransmissionZagaraRoachDrop = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionZagaraRoachDrop_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionZagaraRoachDrop, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionZagaraRoachDrop, null, AbilityCommand("ZagaraVoidCoopMassRoachDrop", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionArtanisSuperShields
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionArtanisSuperShields_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CM_GPReminderDisable(EventPlayer());
    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("ArtanisCommander_Shield", -1), PlayerGroupAll());
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    libCPCD_gf_CTCommanderVOSend(EventPlayer(), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(libCOOC_gf_CC_PlayerAlly(EventPlayer())), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOThankyou), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionArtanisSuperShields_Init () {
    libCPCD_gt_CM_AbilityTransmissionArtanisSuperShields = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionArtanisSuperShields_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionArtanisSuperShields, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionArtanisSuperShields, null, AbilityCommand("SoASuperShield", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionVorazunTimeStop
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionVorazunTimeStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CM_GPReminderDisable(EventPlayer());
    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("VorazunCommander_TimeStop", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionVorazunTimeStop_Init () {
    libCPCD_gt_CM_AbilityTransmissionVorazunTimeStop = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionVorazunTimeStop_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionVorazunTimeStop, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionVorazunTimeStop, null, AbilityCommand("SOATimeFreeze", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionKaraxPassiveChronoBoost
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_karaxPlayers;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoEA7D6AC1_g;

    // Variable Initialization
    lv_karaxPlayers = libCOOC_gf_CC_PlayersOfCommander("ProtossKarax");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_karaxPlayers) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((GameGetMissionTime() >= 35.0))) {
        Wait(1.0, c_timeGame);
    }
    autoEA7D6AC1_g = lv_karaxPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoEA7D6AC1_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((TechTreeUpgradeCount(lv_itPlayer, "KaraxSOAChronoPassive", c_techCountCompleteOnly) > 1)) {
            TriggerQueueEnter();
            libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(lv_itPlayer), SoundLink("KaraxCommander_ChronoPassive", -1), PlayerGroupAll());
            TriggerQueueExit();
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost_Init () {
    libCPCD_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionKaraxChronoMap
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionKaraxChronoMap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("KaraxCommander_Chrono", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionKaraxChronoMap_Init () {
    libCPCD_gt_CM_AbilityTransmissionKaraxChronoMap = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionKaraxChronoMap_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionKaraxChronoMap, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionKaraxChronoMap, null, AbilityCommand("SOAMapWideChrono", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionAbathurMend
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionAbathurMend_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("AbathurCommander_Mend", -1), PlayerGroupAll());
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionAbathurMend_Init () {
    libCPCD_gt_CM_AbilityTransmissionAbathurMend = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionAbathurMend_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionAbathurMend, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionAbathurMend, null, AbilityCommand("AbathurMend", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionAlarakEmpower
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionAlarakEmpower_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("AlarakCommander_EmpowerMe", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionAlarakEmpower_Init () {
    libCPCD_gt_CM_AbilityTransmissionAlarakEmpower = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionAlarakEmpower_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionAlarakEmpower, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionAlarakEmpower, null, AbilityCommand("AlarakEmpower", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionAlarakDeathFleet
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionAlarakDeathFleet_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("AlarakCommander_DeathFleet", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionAlarakDeathFleet_Init () {
    libCPCD_gt_CM_AbilityTransmissionAlarakDeathFleet = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionAlarakDeathFleet_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionAlarakDeathFleet, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionAlarakDeathFleet, null, AbilityCommand("AlarakACSummonDeathfleetTarget", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionAlarakOvercharge
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionAlarakOvercharge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitTargetUnit() != null) && (UnitGetOwner(EventUnit()) != UnitGetOwner(EventUnitTargetUnit()))) {
        libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("AlarakCommander_StructureOverchargeAlly", -1), PlayerGroupAll());
    }
    else {
        libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("AlarakCommander_StructureOvercharge", -1), PlayerGroupAll());
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionAlarakOvercharge_Init () {
    libCPCD_gt_CM_AbilityTransmissionAlarakOvercharge = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionAlarakOvercharge_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionAlarakOvercharge, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionAlarakOvercharge, null, AbilityCommand("AlarakStructureOvercharge", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionAlarakSacrifice
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionAlarakSacrifice_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(EventPlayer(), SoundLink("AlarakCommander_Sacrifice", -1), PlayerGroupSingle(EventPlayer()));
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionAlarakSacrifice_Init () {
    libCPCD_gt_CM_AbilityTransmissionAlarakSacrifice = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionAlarakSacrifice_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionAlarakSacrifice, false);
    TriggerAddEventPlayerEffectUsed(libCPCD_gt_CM_AbilityTransmissionAlarakSacrifice, c_playerAny, "AlarakTheStrongestSurviveSearchImpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionNovaBombingRun
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionNovaBombingRun_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("NovaCommander_GriffinAirstrike", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionNovaBombingRun_Init () {
    libCPCD_gt_CM_AbilityTransmissionNovaBombingRun = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionNovaBombingRun_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionNovaBombingRun, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionNovaBombingRun, null, AbilityCommand("NovaGriffinBombingRunExecute", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionNovaTransport
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionNovaTransport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("NovaCommander_GriffinAirlift", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionNovaTransport_Init () {
    libCPCD_gt_CM_AbilityTransmissionNovaTransport = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionNovaTransport_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionNovaTransport, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionNovaTransport, null, AbilityCommand("NovaGriffinTransportLoadUnits", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionNovaDMatrix
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionNovaDMatrix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("NovaCommander_DefensiveMatrix", -1), PlayerGroupAll());
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(15.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionNovaDMatrix_Init () {
    libCPCD_gt_CM_AbilityTransmissionNovaDMatrix = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionNovaDMatrix_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionNovaDMatrix, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionNovaDMatrix, null, AbilityCommand("NovaDefensiveMatrixDrone", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionStukovAleksander
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionStukovAleksander_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("StukovCommander_Aleksander", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionStukovAleksander_Init () {
    libCPCD_gt_CM_AbilityTransmissionStukovAleksander = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionStukovAleksander_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionStukovAleksander, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionStukovAleksander, null, AbilityCommand("StukovSummonAleksander", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionStukovApocalisk
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionStukovApocalisk_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("StukovCommander_Apocalisk", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionStukovApocalisk_Init () {
    libCPCD_gt_CM_AbilityTransmissionStukovApocalisk = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionStukovApocalisk_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionStukovApocalisk, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionStukovApocalisk, null, AbilityCommand("StukovSummonApocalisk", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionStukovInfestStructure
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionStukovInfestStructure_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitTargetUnit() != null) && (UnitGetOwner(EventUnit()) != UnitGetOwner(EventUnitTargetUnit()))) {
        libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("StukovCommander_InfestStructure", -1), PlayerGroupAll());
    }
    else {
        libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("StukovCommander_InfestStructureSelf", -1), PlayerGroupAll());
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionStukovInfestStructure_Init () {
    libCPCD_gt_CM_AbilityTransmissionStukovInfestStructure = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionStukovInfestStructure_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionStukovInfestStructure, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionStukovInfestStructure, null, AbilityCommand("SIStukovInfestStructure", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionStukovInfestStructure, null, AbilityCommand("SIStukovInfestStructureUpgraded", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixCreateTalis
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionFenixCreateTalis_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_AdeptChampion", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionFenixCreateTalis_Init () {
    libCPCD_gt_CM_AbilityTransmissionFenixCreateTalis = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionFenixCreateTalis_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionFenixCreateTalis, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionFenixCreateTalis, null, AbilityCommand("FenixTalisAdeptMorph", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixCreateKaldalis
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionFenixCreateKaldalis_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ZealotChampion", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionFenixCreateKaldalis_Init () {
    libCPCD_gt_CM_AbilityTransmissionFenixCreateKaldalis = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionFenixCreateKaldalis_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionFenixCreateKaldalis, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionFenixCreateKaldalis, null, AbilityCommand("FenixKaldalisZealotMorph", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixCreateTaldarin
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionFenixCreateTaldarin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ImmortalChampion", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionFenixCreateTaldarin_Init () {
    libCPCD_gt_CM_AbilityTransmissionFenixCreateTaldarin = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionFenixCreateTaldarin_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionFenixCreateTaldarin, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionFenixCreateTaldarin, null, AbilityCommand("FenixTaldarinImmortalMorph", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixCreateWarbringer
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionFenixCreateWarbringer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ColossusChampion", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionFenixCreateWarbringer_Init () {
    libCPCD_gt_CM_AbilityTransmissionFenixCreateWarbringer = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionFenixCreateWarbringer_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionFenixCreateWarbringer, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionFenixCreateWarbringer, null, AbilityCommand("FenixWarbringerColossusMorph", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixCreateMojo
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionFenixCreateMojo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ScoutChampion", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionFenixCreateMojo_Init () {
    libCPCD_gt_CM_AbilityTransmissionFenixCreateMojo = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionFenixCreateMojo_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionFenixCreateMojo, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionFenixCreateMojo, null, AbilityCommand("FenixMojoScoutMorph", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixCreateClolarion
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionFenixCreateClolarion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_CarrierChampion", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionFenixCreateClolarion_Init () {
    libCPCD_gt_CM_AbilityTransmissionFenixCreateClolarion = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionFenixCreateClolarion_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionFenixCreateClolarion, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionFenixCreateClolarion, null, AbilityCommand("FenixClolarionCarrierMorph", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixZealotSuit
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionFenixZealotSuit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCPCD_gv_cM_FenixVOTalandarRecalled[EventPlayer()] == false) && (TechTreeUpgradeCount(EventPlayer(), "AStrongHeart", c_techCountCompleteOnly) > 0)) {
        libCPCD_gv_cM_FenixVOTalandarRecalled[EventPlayer()] = true;
        libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("FenixNameChangeTalandar", -1), PlayerGroupSingle(EventPlayer()));
        libCPCD_gf_DisplayCampaignMessage(PlayerGroupSingle(EventPlayer()), libCPCD_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_CPCD_5E0C796A"), libCPCD_ge_CampaignMessageFormatNotFormat_FormatMessage);
        return true;
    }

    if (((libCPCD_gv_cM_FenixVOTransmissionFirstPlay[1][lv_player] == true) || (RandomInt(1, 100) <= libCPCD_gv_cMC_FenixVOTransmissionProbablity) || (TimerGetRemaining(libCPCD_gv_cM_FenixVOTransmissionTimer) <= 0.0))) {
        libCPCD_gv_cM_FenixVOTransmissionFirstPlay[1][lv_player] = false;
        libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ZealotSuit", -1), PlayerGroupAll());
        TimerStart(libCPCD_gv_cM_FenixVOTransmissionTimer, libCPCD_gv_cMC_FenixVOTransmissionTimerDelay, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionFenixZealotSuit_Init () {
    libCPCD_gt_CM_AbilityTransmissionFenixZealotSuit = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionFenixZealotSuit_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionFenixZealotSuit, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionFenixZealotSuit, null, AbilityCommand("SOASummonFenix", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixDragoonSuit
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionFenixDragoonSuit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCPCD_gv_cM_FenixVOTalandarRecalled[EventPlayer()] == false) && (TechTreeUpgradeCount(EventPlayer(), "AStrongHeart", c_techCountCompleteOnly) > 0)) {
        libCPCD_gv_cM_FenixVOTalandarRecalled[EventPlayer()] = true;
        libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("FenixNameChangeTalandar", -1), PlayerGroupSingle(EventPlayer()));
        libCPCD_gf_DisplayCampaignMessage(PlayerGroupSingle(UnitGetOwner(lv_unit)), libCPCD_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_CPCD_94670261"), libCPCD_ge_CampaignMessageFormatNotFormat_FormatMessage);
        return true;
    }

    if (((libCPCD_gv_cM_FenixVOTransmissionFirstPlay[2][lv_player] == true) || (RandomInt(1, 100) <= libCPCD_gv_cMC_FenixVOTransmissionProbablity) || (TimerGetRemaining(libCPCD_gv_cM_FenixVOTransmissionTimer) <= 0.0))) {
        libCPCD_gv_cM_FenixVOTransmissionFirstPlay[2][lv_player] = false;
        libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_DragoonSuit", -1), PlayerGroupAll());
        TimerStart(libCPCD_gv_cM_FenixVOTransmissionTimer, libCPCD_gv_cMC_FenixVOTransmissionTimerDelay, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionFenixDragoonSuit_Init () {
    libCPCD_gt_CM_AbilityTransmissionFenixDragoonSuit = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionFenixDragoonSuit_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionFenixDragoonSuit, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionFenixDragoonSuit, null, AbilityCommand("SOASummonFenixDragoon", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixArbiterSuit
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionFenixArbiterSuit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCPCD_gv_cM_FenixVOTalandarRecalled[lv_player] == false) && (TechTreeUpgradeCount(lv_player, "AStrongHeart", c_techCountCompleteOnly) > 0)) {
        libCPCD_gv_cM_FenixVOTalandarRecalled[lv_player] = true;
        libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(lv_player), SoundLink("FenixNameChangeTalandar", -1), PlayerGroupSingle(lv_player));
        libCPCD_gf_DisplayCampaignMessage(PlayerGroupSingle(lv_player), libCPCD_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_CPCD_84BF46CC"), libCPCD_ge_CampaignMessageFormatNotFormat_FormatMessage);
        return true;
    }

    if (((libCPCD_gv_cM_FenixVOTransmissionFirstPlay[3][lv_player] == true) || (RandomInt(1, 100) <= libCPCD_gv_cMC_FenixVOTransmissionProbablity) || (TimerGetRemaining(libCPCD_gv_cM_FenixVOTransmissionTimer) <= 0.0))) {
        libCPCD_gv_cM_FenixVOTransmissionFirstPlay[3][lv_player] = false;
        libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(lv_player), SoundLink("FenixCommander_ArbiterSuit", -1), libCOOC_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(lv_player));
        TimerStart(libCPCD_gv_cM_FenixVOTransmissionTimer, libCPCD_gv_cMC_FenixVOTransmissionTimerDelay, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionFenixArbiterSuit_Init () {
    libCPCD_gt_CM_AbilityTransmissionFenixArbiterSuit = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionFenixArbiterSuit_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionFenixArbiterSuit, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionFenixArbiterSuit, null, AbilityCommand("SOASummonFenixArbiter", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixMassRecall
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionFenixMassRecall_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_MassRecall", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionFenixMassRecall_Init () {
    libCPCD_gt_CM_AbilityTransmissionFenixMassRecall = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionFenixMassRecall_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionFenixMassRecall, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionFenixMassRecall, null, AbilityCommand("ArbiterMPRecall", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_HeroTransmissionFenixHeroDies
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_HeroTransmissionFenixHeroDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingUnit() != EventUnit()))) {
            return false;
        }

        if (!((UnitGroupHasUnit(libCPCD_gv_cDFenixHeroGroup[lv_player], EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "FenixCoop")) {
        libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ZealotSuitDestroyed", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }

    if ((UnitGetType(EventUnit()) == "FenixDragoon")) {
        libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_DragoonSuitDestroyed", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }

    if ((UnitGetType(EventUnit()) == "FenixArbiter")) {
        libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ArbiterSuitDestroyed", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_HeroTransmissionFenixHeroDies_Init () {
    libCPCD_gt_CM_HeroTransmissionFenixHeroDies = TriggerCreate("libCPCD_gt_CM_HeroTransmissionFenixHeroDies_Func");
    TriggerEnable(libCPCD_gt_CM_HeroTransmissionFenixHeroDies, false);
    TriggerAddEventUnitDied(libCPCD_gt_CM_HeroTransmissionFenixHeroDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_HeroTransmissionFenixHeroRepaired
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_HeroTransmissionFenixHeroRepaired_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    string autoB2FBC6CF_val;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    autoB2FBC6CF_val = UnitGetType(EventUnit());
    if (autoB2FBC6CF_val == UnitGetType(libCPCD_gv_cDFenixSuits[1][lv_player])) {
        libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(lv_player), SoundLink("FenixCommander_ZealotSuitReady", -1), PlayerGroupSingle(lv_player));
    }
    else if (autoB2FBC6CF_val == UnitGetType(libCPCD_gv_cDFenixSuits[2][lv_player])) {
        libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(lv_player), SoundLink("FenixCommander_DragoonSuitReady", -1), PlayerGroupSingle(lv_player));
    }
    else if (autoB2FBC6CF_val == UnitGetType(libCPCD_gv_cDFenixSuits[3][lv_player])) {
        libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(lv_player), SoundLink("FenixCommander_ArbiterSuitReady", -1), PlayerGroupSingle(lv_player));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_HeroTransmissionFenixHeroRepaired_Init () {
    libCPCD_gt_CM_HeroTransmissionFenixHeroRepaired = TriggerCreate("libCPCD_gt_CM_HeroTransmissionFenixHeroRepaired_Func");
    TriggerEnable(libCPCD_gt_CM_HeroTransmissionFenixHeroRepaired, false);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CM_HeroTransmissionFenixHeroRepaired, null, "SOASummonFenixCooldownDummy", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CM_HeroTransmissionFenixHeroRepaired, null, "SOASummonFenixDragoonCooldownDummy", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(libCPCD_gt_CM_HeroTransmissionFenixHeroRepaired, null, "SOASummonFenixArbiterCooldownDummy", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_HeroTransmissionFenixNameChange
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_HeroTransmissionFenixNameChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCPCD_gv_cM_FenixVOTalandarRecalled[EventPlayer()] = true;
    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("FenixNameChangeTalandar", -1), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_HeroTransmissionFenixNameChange_Init () {
    libCPCD_gt_CM_HeroTransmissionFenixNameChange = TriggerCreate("libCPCD_gt_CM_HeroTransmissionFenixNameChange_Func");
    TriggerEnable(libCPCD_gt_CM_HeroTransmissionFenixNameChange, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_HeroTransmissionFenixNameChange, null, AbilityCommand("ForgeResearch", 16), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionDehakaGlevig
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionDehakaGlevig_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnit())), SoundLink("DehakaCommander_SummonGlevig", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionDehakaGlevig_Init () {
    libCPCD_gt_CM_AbilityTransmissionDehakaGlevig = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionDehakaGlevig_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionDehakaGlevig, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionDehakaGlevig, null, AbilityCommand("DehakaGlevigTopBar", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionDehakaMurvar
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionDehakaMurvar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnit())), SoundLink("DehakaCommander_SummonMurvar", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionDehakaMurvar_Init () {
    libCPCD_gt_CM_AbilityTransmissionDehakaMurvar = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionDehakaMurvar_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionDehakaMurvar, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionDehakaMurvar, null, AbilityCommand("DehakaMurvarTopBar", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionDehakaDakrun
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionDehakaDakrun_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnit())), SoundLink("DehakaCommander_SummonDakrun", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionDehakaDakrun_Init () {
    libCPCD_gt_CM_AbilityTransmissionDehakaDakrun = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionDehakaDakrun_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionDehakaDakrun, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionDehakaDakrun, null, AbilityCommand("DehakaDakrunTopBar", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionDehakaPrimalWurm
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionDehakaPrimalWurm_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnit())), SoundLink("DehakaCommander_SummonPrimalWurm", -1), PlayerGroupAll());
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(15.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionDehakaPrimalWurm_Init () {
    libCPCD_gt_CM_AbilityTransmissionDehakaPrimalWurm = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionDehakaPrimalWurm_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionDehakaPrimalWurm, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionDehakaPrimalWurm, null, AbilityCommand("DehakaNydusDestroyerTopBar", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionDehakaGlevigConstruct
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_UnitTransmissionDehakaGlevigConstruct_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "DehakaGlevigStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnitProgressUnit())), SoundLink("DehakaCommander_ConstructGlevig", -1), PlayerGroupSingle(UnitGetOwner(EventUnitProgressUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_UnitTransmissionDehakaGlevigConstruct_Init () {
    libCPCD_gt_CM_UnitTransmissionDehakaGlevigConstruct = TriggerCreate("libCPCD_gt_CM_UnitTransmissionDehakaGlevigConstruct_Func");
    TriggerEnable(libCPCD_gt_CM_UnitTransmissionDehakaGlevigConstruct, false);
    TriggerAddEventUnitConstructProgress(libCPCD_gt_CM_UnitTransmissionDehakaGlevigConstruct, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionDehakaMurvarConstruct
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_UnitTransmissionDehakaMurvarConstruct_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "DehakaMurvarStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnitProgressUnit())), SoundLink("DehakaCommander_ConstructMurvar", -1), PlayerGroupSingle(UnitGetOwner(EventUnitProgressUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_UnitTransmissionDehakaMurvarConstruct_Init () {
    libCPCD_gt_CM_UnitTransmissionDehakaMurvarConstruct = TriggerCreate("libCPCD_gt_CM_UnitTransmissionDehakaMurvarConstruct_Func");
    TriggerEnable(libCPCD_gt_CM_UnitTransmissionDehakaMurvarConstruct, false);
    TriggerAddEventUnitConstructProgress(libCPCD_gt_CM_UnitTransmissionDehakaMurvarConstruct, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionDehakaDakrunConstruct
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_UnitTransmissionDehakaDakrunConstruct_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "DehakaDakrunStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnitProgressUnit())), SoundLink("DehakaCommander_ConstructDakrun", -1), PlayerGroupSingle(UnitGetOwner(EventUnitProgressUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_UnitTransmissionDehakaDakrunConstruct_Init () {
    libCPCD_gt_CM_UnitTransmissionDehakaDakrunConstruct = TriggerCreate("libCPCD_gt_CM_UnitTransmissionDehakaDakrunConstruct_Func");
    TriggerEnable(libCPCD_gt_CM_UnitTransmissionDehakaDakrunConstruct, false);
    TriggerAddEventUnitConstructProgress(libCPCD_gt_CM_UnitTransmissionDehakaDakrunConstruct, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionDehakaChangeReminderLevel
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionDehakaChangeReminderLevel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "DehakaCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(libCPCD_gv_cM_DehakaVOLearnReminderTimer) <= 0.0)) {
        TimerStart(libCPCD_gv_cM_DehakaVOLearnReminderTimer, libCPCD_gv_cMC_DehakaVOLearnReminderDelay, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionDehakaChangeReminderLevel_Init () {
    libCPCD_gt_CM_AbilityTransmissionDehakaChangeReminderLevel = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionDehakaChangeReminderLevel_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionDehakaChangeReminderLevel, false);
    TriggerAddEventUnitGainLevel(libCPCD_gt_CM_AbilityTransmissionDehakaChangeReminderLevel, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionDehakaChangeReminderLearn
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionDehakaChangeReminderLearn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "DehakaCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gf_HeroCanSpendSkillPoint(EventUnit(), AbilityCommandGetAbility(EventUnitAbility())) == false)) {
        libNtve_gf_StopTimer(libCPCD_gv_cM_DehakaVOLearnReminderTimer);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionDehakaChangeReminderLearn_Init () {
    libCPCD_gt_CM_AbilityTransmissionDehakaChangeReminderLearn = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionDehakaChangeReminderLearn_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionDehakaChangeReminderLearn, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionDehakaChangeReminderLearn, null, AbilityCommand("DehakaLearn", 255), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionDehakaChangeReminderTimerExpire
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionDehakaChangeReminderTimerExpire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCPCD_gv_cM_DehakaVODehakaPlayer, SoundLink("DehakaCommander_ChangeReminder", -1), PlayerGroupSingle(libCPCD_gv_cM_DehakaVODehakaPlayer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionDehakaChangeReminderTimerExpire_Init () {
    libCPCD_gt_CM_AbilityTransmissionDehakaChangeReminderTimerExpire = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionDehakaChangeReminderTimerExpire_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionDehakaChangeReminderTimerExpire, false);
    TriggerAddEventTimer(libCPCD_gt_CM_AbilityTransmissionDehakaChangeReminderTimerExpire, libCPCD_gv_cM_DehakaVOLearnReminderTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionDehakaWurmStructureBuilt
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "DehakaGlevigStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gv_cM_DehakaVOWurmStructureAlive = true;
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionDehakaWurmStructureKilled, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt_Init () {
    libCPCD_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt, false);
    TriggerAddEventUnitConstructProgress(libCPCD_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionDehakaWurmStructureKilled
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionDehakaWurmStructureKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "DehakaGlevigStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gv_cM_DehakaVOWurmStructureAlive = false;
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionDehakaWurmStructureKilled_Init () {
    libCPCD_gt_CM_AbilityTransmissionDehakaWurmStructureKilled = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionDehakaWurmStructureKilled_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionDehakaWurmStructureKilled, false);
    TriggerAddEventUnitDied(libCPCD_gt_CM_AbilityTransmissionDehakaWurmStructureKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionHornerFleet
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionHornerFleet_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnit())), SoundLink("HornerHan_CallFleetUsed", -1), PlayerGroupAll());
    libCPCD_gv_cM_HornerVOFleetOffCooldown = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionHornerFleet_Init () {
    libCPCD_gt_CM_AbilityTransmissionHornerFleet = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionHornerFleet_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionHornerFleet, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionHornerFleet, null, AbilityCommand("HornerAirFleetExecute", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionHornerStation
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionHornerStation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnit())), SoundLink("HornerHan_SpacestationUsed", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionHornerStation_Init () {
    libCPCD_gt_CM_AbilityTransmissionHornerStation = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionHornerStation_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionHornerStation, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionHornerStation, null, AbilityCommand("HHSummonMercenarySpaceStation", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionHornerBomberBuild
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_UnitTransmissionHornerBomberBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "HHBomberPlatform"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gv_cM_HornerVOBomberBuilt = true;
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionHornerBomberUse, true);
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionHornerBomberReminder, true);
    TimerStart(libCPCD_gv_cM_HornerVOBomberReminderTimer, libCPCD_gv_cMC_HornerVOBomberReminderDelay, false, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_UnitTransmissionHornerBomberBuild_Init () {
    libCPCD_gt_CM_UnitTransmissionHornerBomberBuild = TriggerCreate("libCPCD_gt_CM_UnitTransmissionHornerBomberBuild_Func");
    TriggerEnable(libCPCD_gt_CM_UnitTransmissionHornerBomberBuild, false);
    TriggerAddEventUnitConstructProgress(libCPCD_gt_CM_UnitTransmissionHornerBomberBuild, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionHornerBomberUse
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionHornerBomberUse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libCPCD_gv_cM_HornerVOBomberReminderTimer, libCPCD_gv_cMC_HornerVOBomberReminderDelay, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionHornerBomberUse_Init () {
    libCPCD_gt_CM_AbilityTransmissionHornerBomberUse = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionHornerBomberUse_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionHornerBomberUse, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionHornerBomberUse, null, AbilityCommand("HHBomberPlatformAreaBombTopBarOrder", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionHornerBomberUse, null, AbilityCommand("HHBomberPlatformAreaBombOrder", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionHornerBomberReminder
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionHornerBomberReminder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitAbilityChargeInfo(libCPGL_gv_commander[libCPCD_gv_cM_HornerVOHornerPlayer].lv_globalCasterUnit, AbilityCommand("HHBomberPlatformAreaBombTopBarOrder", 0), c_unitAbilChargeCountLeft) > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(libCPCD_gv_cM_HornerVOHornerPlayer), SoundLink("HornerHan_BomberPlatformReady", -1), PlayerGroupSingle(libCPCD_gv_cM_HornerVOHornerPlayer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionHornerBomberReminder_Init () {
    libCPCD_gt_CM_AbilityTransmissionHornerBomberReminder = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionHornerBomberReminder_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionHornerBomberReminder, false);
    TriggerAddEventTimer(libCPCD_gt_CM_AbilityTransmissionHornerBomberReminder, libCPCD_gv_cM_HornerVOBomberReminderTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusCreateReaper
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionTychusCreateReaper_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("TychusCommander_ReaperReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionTychusCreateReaper_Init () {
    libCPCD_gt_CM_AbilityTransmissionTychusCreateReaper = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionTychusCreateReaper_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionTychusCreateReaper, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionTychusCreateReaper, null, AbilityCommand("TychusBarracksTrain", 3), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusCreateWarhound
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionTychusCreateWarhound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("TychusCommander_WarhoundReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionTychusCreateWarhound_Init () {
    libCPCD_gt_CM_AbilityTransmissionTychusCreateWarhound = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionTychusCreateWarhound_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionTychusCreateWarhound, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionTychusCreateWarhound, null, AbilityCommand("TychusFactoryTrain", 3), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusCreateFirebat
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionTychusCreateFirebat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("TychusCommander_FirebatReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionTychusCreateFirebat_Init () {
    libCPCD_gt_CM_AbilityTransmissionTychusCreateFirebat = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionTychusCreateFirebat_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionTychusCreateFirebat, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionTychusCreateFirebat, null, AbilityCommand("TychusBarracksTrain", 1), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusCreateMarauder
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionTychusCreateMarauder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("TychusCommander_MarauderReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionTychusCreateMarauder_Init () {
    libCPCD_gt_CM_AbilityTransmissionTychusCreateMarauder = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionTychusCreateMarauder_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionTychusCreateMarauder, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionTychusCreateMarauder, null, AbilityCommand("TychusBarracksTrain", 4), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusCreateHERC
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionTychusCreateHERC_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("TychusCommander_HERCReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionTychusCreateHERC_Init () {
    libCPCD_gt_CM_AbilityTransmissionTychusCreateHERC = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionTychusCreateHERC_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionTychusCreateHERC, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionTychusCreateHERC, null, AbilityCommand("TychusFactoryTrain", 1), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusCreateGhost
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionTychusCreateGhost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("TychusCommander_GhostReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionTychusCreateGhost_Init () {
    libCPCD_gt_CM_AbilityTransmissionTychusCreateGhost = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionTychusCreateGhost_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionTychusCreateGhost, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionTychusCreateGhost, null, AbilityCommand("TychusBarracksTrain", 2), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusCreatePhantom
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionTychusCreatePhantom_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("TychusCommander_SpectreReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionTychusCreatePhantom_Init () {
    libCPCD_gt_CM_AbilityTransmissionTychusCreatePhantom = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionTychusCreatePhantom_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionTychusCreatePhantom, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionTychusCreatePhantom, null, AbilityCommand("TychusBarracksTrain", 5), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusCreateMedic
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionTychusCreateMedic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("TychusCommander_MedicReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionTychusCreateMedic_Init () {
    libCPCD_gt_CM_AbilityTransmissionTychusCreateMedic = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionTychusCreateMedic_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionTychusCreateMedic, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionTychusCreateMedic, null, AbilityCommand("TychusBarracksTrain", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusOdinUse
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionTychusOdinUse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnit())), SoundLink("TychusCommander_OdinUsed", -1), PlayerGroupAll());
    if ((libCPCD_gv_cM_MengskSnarkExecuted[0] == false) && (libCOOC_gf_CC_CommanderInGame("TerranMengsk") == true)) {
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        libCPCD_gv_cM_MengskSnarkExecuted[0] = true;
        Wait(0.5, c_timeReal);
        libCPCD_gf_CTCommanderVOSend(EventPlayer(), SoundLink("MengskCommander_TychusSpawn", -1), PlayerGroupAll());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionTychusOdinUse_Init () {
    libCPCD_gt_CM_AbilityTransmissionTychusOdinUse = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionTychusOdinUse_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionTychusOdinUse, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionTychusOdinUse, null, AbilityCommand("TychusCalldownOdinTargeted", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusTransportUse
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionTychusTransportUse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnit())), SoundLink("TychusCommander_MedivacUsed", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionTychusTransportUse_Init () {
    libCPCD_gt_CM_AbilityTransmissionTychusTransportUse = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionTychusTransportUse_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionTychusTransportUse, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionTychusTransportUse, null, AbilityCommand("TychusMedicTransportLoadUnits", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusTransportReminder
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionTychusTransportReminder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(libCPCD_gv_cM_TychusVOTransportFlairCooldownTimer) <= 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCPCD_gv_cM_TychusVOTychusPlayer, SoundLink("TychusCommander_MedivacPlatformReminder", -1), PlayerGroupSingle(libCPCD_gv_cM_TychusVOTychusPlayer));
    TriggerEnable(libCPCD_gt_CM_UnitTransmissionTychusTransportBuild, false);
    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(libCPCD_gv_cM_TychusVOTransportFlairCooldownTimer, libCPCD_gv_cMC_TychusVOTransportFlairCooldown, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionTychusTransportReminder_Init () {
    libCPCD_gt_CM_AbilityTransmissionTychusTransportReminder = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionTychusTransportReminder_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionTychusTransportReminder, false);
    TriggerAddEventTimer(libCPCD_gt_CM_AbilityTransmissionTychusTransportReminder, libCPCD_gv_cM_TychusVOTransportReminderTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionTychusTransportBuild
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_UnitTransmissionTychusTransportBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "TychusMedivacPlatform"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionTychusTransportReminder, false);
    libNtve_gf_StopTimer(libCPCD_gv_cM_TychusVOTransportReminderTimer);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_UnitTransmissionTychusTransportBuild_Init () {
    libCPCD_gt_CM_UnitTransmissionTychusTransportBuild = TriggerCreate("libCPCD_gt_CM_UnitTransmissionTychusTransportBuild_Func");
    TriggerEnable(libCPCD_gt_CM_UnitTransmissionTychusTransportBuild, false);
    TriggerAddEventUnitConstructProgress(libCPCD_gt_CM_UnitTransmissionTychusTransportBuild, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionTychusOutlawFirstDeath
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_UnitTransmissionTychusOutlawFirstDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libCPCD_gf_CDTychusEventHeroUnit()) != UserDataGetUnit("CoopTechTychusSquad", "Tychus", "Unit Type", 1))) {
        libCPCD_gf_CTCommanderVOSend(UnitGetOwner(libCPCD_gf_CDTychusEventHeroUnit()), SoundLink("TychusCommander_OutlawDeath", -1), PlayerGroupSingle(UnitGetOwner(libCPCD_gf_CDTychusEventHeroUnit())));
    }
    else {
        libCPCD_gf_CTCommanderVOSend(UnitGetOwner(libCPCD_gf_CDTychusEventHeroUnit()), SoundLink("TychusHeroVO_Death", -1), PlayerGroupSingle(UnitGetOwner(libCPCD_gf_CDTychusEventHeroUnit())));
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_UnitTransmissionTychusOutlawFirstDeath_Init () {
    libCPCD_gt_CM_UnitTransmissionTychusOutlawFirstDeath = TriggerCreate("libCPCD_gt_CM_UnitTransmissionTychusOutlawFirstDeath_Func");
    TriggerEnable(libCPCD_gt_CM_UnitTransmissionTychusOutlawFirstDeath, false);
    libCPCD_gf_CDTychusEvent(libCPCD_gt_CM_UnitTransmissionTychusOutlawFirstDeath, "Event_TychusHeroDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionTychusOutlawDeath
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_UnitTransmissionTychusOutlawDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(libCPCD_gf_CDTychusEventHeroUnit()) != UserDataGetUnit("CoopTechTychusSquad", "Tychus", "Unit Type", 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libCPCD_gt_CM_UnitTransmissionTychusOutlawReviveReminder) == true) && (TimerGetRemaining(libCPCD_gv_cM_TychusVOOutlawReviveReminderTimer) <= 0.0)) {
        TimerStart(libCPCD_gv_cM_TychusVOOutlawReviveReminderTimer, libCPCD_gv_cMC_TychusVOOutlawReviveReminderDelay, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_UnitTransmissionTychusOutlawDeath_Init () {
    libCPCD_gt_CM_UnitTransmissionTychusOutlawDeath = TriggerCreate("libCPCD_gt_CM_UnitTransmissionTychusOutlawDeath_Func");
    TriggerEnable(libCPCD_gt_CM_UnitTransmissionTychusOutlawDeath, false);
    libCPCD_gf_CDTychusEvent(libCPCD_gt_CM_UnitTransmissionTychusOutlawDeath, "Event_TychusHeroDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionTychusOutlawRevived
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_UnitTransmissionTychusOutlawRevived_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(libCPCD_gf_CDTychusEventHeroUnit()) != UserDataGetUnit("CoopTechTychusSquad", "Tychus", "Unit Type", 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(libCPCD_gv_cM_TychusVOOutlawReviveReminderTimer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_UnitTransmissionTychusOutlawRevived_Init () {
    libCPCD_gt_CM_UnitTransmissionTychusOutlawRevived = TriggerCreate("libCPCD_gt_CM_UnitTransmissionTychusOutlawRevived_Func");
    TriggerEnable(libCPCD_gt_CM_UnitTransmissionTychusOutlawRevived, false);
    libCPCD_gf_CDTychusEvent(libCPCD_gt_CM_UnitTransmissionTychusOutlawRevived, "Event_TychusHeroRevive");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionTychusOutlawReviveReminder
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_UnitTransmissionTychusOutlawReviveReminder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCPCD_gv_cM_TychusVOTychusPlayer, SoundLink("TychusCommander_ReviveOutlaw", -1), PlayerGroupSingle(libCPCD_gv_cM_TychusVOTychusPlayer));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_UnitTransmissionTychusOutlawReviveReminder_Init () {
    libCPCD_gt_CM_UnitTransmissionTychusOutlawReviveReminder = TriggerCreate("libCPCD_gt_CM_UnitTransmissionTychusOutlawReviveReminder_Func");
    TriggerEnable(libCPCD_gt_CM_UnitTransmissionTychusOutlawReviveReminder, false);
    TriggerAddEventTimer(libCPCD_gt_CM_UnitTransmissionTychusOutlawReviveReminder, libCPCD_gv_cM_TychusVOOutlawReviveReminderTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionTychusOutlawRecruitAvailable
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_UnitTransmissionTychusOutlawRecruitAvailable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libCPCD_gv_cM_TychusVOOutlawRecruitReminderTimer, libCPCD_gv_cMC_TychusVOOutlawRecruitReminderDelay, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_UnitTransmissionTychusOutlawRecruitAvailable_Init () {
    libCPCD_gt_CM_UnitTransmissionTychusOutlawRecruitAvailable = TriggerCreate("libCPCD_gt_CM_UnitTransmissionTychusOutlawRecruitAvailable_Func");
    TriggerEnable(libCPCD_gt_CM_UnitTransmissionTychusOutlawRecruitAvailable, false);
    TriggerAddEventGeneric(libCPCD_gt_CM_UnitTransmissionTychusOutlawRecruitAvailable, "TychusHeroAvailable");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionTychusOutlawRecruited
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_UnitTransmissionTychusOutlawRecruited_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(libCPCD_gf_CDTychusEventHeroUnit()) != UserDataGetUnit("CoopTechTychusSquad", "Tychus", "Unit Type", 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(libCPCD_gv_cM_TychusVOOutlawRecruitReminderTimer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_UnitTransmissionTychusOutlawRecruited_Init () {
    libCPCD_gt_CM_UnitTransmissionTychusOutlawRecruited = TriggerCreate("libCPCD_gt_CM_UnitTransmissionTychusOutlawRecruited_Func");
    TriggerEnable(libCPCD_gt_CM_UnitTransmissionTychusOutlawRecruited, false);
    libCPCD_gf_CDTychusEvent(libCPCD_gt_CM_UnitTransmissionTychusOutlawRecruited, "Event_TychusHeroCreate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionTychusOutlawRecruitReminder
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_UnitTransmissionTychusOutlawRecruitReminder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCPCD_gv_cM_TychusVOTychusPlayer, SoundLink("TychusCommander_RecruitOutlaw", -1), PlayerGroupSingle(libCPCD_gv_cM_TychusVOTychusPlayer));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_UnitTransmissionTychusOutlawRecruitReminder_Init () {
    libCPCD_gt_CM_UnitTransmissionTychusOutlawRecruitReminder = TriggerCreate("libCPCD_gt_CM_UnitTransmissionTychusOutlawRecruitReminder_Func");
    TriggerEnable(libCPCD_gt_CM_UnitTransmissionTychusOutlawRecruitReminder, false);
    TriggerAddEventTimer(libCPCD_gt_CM_UnitTransmissionTychusOutlawRecruitReminder, libCPCD_gv_cM_TychusVOOutlawRecruitReminderTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ArtifactTransmission_Hint
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_ArtifactTransmission_Hint_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCPCD_gf_CDZeratulProphecyHintLevel(libCPCD_gf_CDZeratulProphecyEventGetArtifactNumber()) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCPCD_gf_CTCommanderVOSend(libCPCD_gf_CDZeratulProphecyEventGetPlayer(), SoundLink("ZeratulCommander_FindArtifact", -1), libCOOC_gf_CC_PlayersOfCommander("ProtossZeratul"));
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_ArtifactTransmission_Hint_Init () {
    libCPCD_gt_CM_ArtifactTransmission_Hint = TriggerCreate("libCPCD_gt_CM_ArtifactTransmission_Hint_Func");
    TriggerEnable(libCPCD_gt_CM_ArtifactTransmission_Hint, false);
    libCPCD_gf_CDZeratulProphecyEvent(libCPCD_gt_CM_ArtifactTransmission_Hint, "ZeratulEvent_ArtifactMissed");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ArtifactTransmission_PickedUp
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_ArtifactTransmission_PickedUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoC7DEBED3_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCPCD_gf_CDZeratulProphecyEventGetArtifactNumber() <= 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libCPCD_gv_cM_ArtifactTransmission_SelectAbilityReminder, 45.0, false, c_timeGame);
    autoC7DEBED3_val = libCPCD_gf_CDZeratulProphecyEventGetArtifactNumber();
    if (autoC7DEBED3_val == 3) {
        libCPCD_gf_CTCommanderVOSend(libCPCD_gf_CDZeratulProphecyEventGetPlayer(), SoundLink("ZeratulCommander_CompleteArtifact", -1), libCOOC_gf_CC_PlayersOfCommander("ProtossZeratul"));
    }
    else {
        libCPCD_gf_CTCommanderVOSend(libCPCD_gf_CDZeratulProphecyEventGetPlayer(), SoundLink("ZeratulCommander_ObtainArtifact", -1), libCOOC_gf_CC_PlayersOfCommander("ProtossZeratul"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_ArtifactTransmission_PickedUp_Init () {
    libCPCD_gt_CM_ArtifactTransmission_PickedUp = TriggerCreate("libCPCD_gt_CM_ArtifactTransmission_PickedUp_Func");
    TriggerEnable(libCPCD_gt_CM_ArtifactTransmission_PickedUp, false);
    libCPCD_gf_CDZeratulProphecyEvent(libCPCD_gt_CM_ArtifactTransmission_PickedUp, "ZeratulEvent_ArtifactPickedUp");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ArtifactTransmission_ProphecyCast
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_ArtifactTransmission_ProphecyCast_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libNtve_gf_UnitInRegion(libCPCD_gv_cDZeratulProphecyArtifactUnit, RegionCircle(UnitGetPosition(DataTableGetUnit(false, TriggerEventParamName(("ZeratulEvent_ProphecyCastStart"), "ZeratulEventUnit"))), 14.0)) == false)) {
        libCPCD_gf_CTCommanderVOSend(libCPCD_gf_CDZeratulProphecyEventGetPlayer(), SoundLink("ZeratulCommander_FindArtifact", -1), libCOOC_gf_CC_PlayersOfCommander("ProtossZeratul"));
        Wait(libCPCD_gv_cMC_ZeratulVOTransmissionProphacyCastDelay, c_timeGame);
    }

    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_ArtifactTransmission_ProphecyCast_Init () {
    libCPCD_gt_CM_ArtifactTransmission_ProphecyCast = TriggerCreate("libCPCD_gt_CM_ArtifactTransmission_ProphecyCast_Func");
    TriggerEnable(libCPCD_gt_CM_ArtifactTransmission_ProphecyCast, false);
    libCPCD_gf_CDZeratulProphecyEvent(libCPCD_gt_CM_ArtifactTransmission_ProphecyCast, "ZeratulEvent_ProphecyCastStart");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ArtifactTransmission_Upgraded
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_ArtifactTransmission_Upgraded_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((PlayerCommander(EventPlayer()) == "Zeratul"))) {
            return false;
        }

        if (!(((EventUpgradeName() == "ZeratulArtifactUpgradeTier0A") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier0B") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier0C") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier1A") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier1B") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier1C") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier2A") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier2B") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier2C") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier3A") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier3B")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(libCPCD_gv_cM_ArtifactTransmission_SelectAbilityReminder, true);
    libCPCD_gf_CTCommanderVOSend(EventPlayer(), SoundLink("ZeratulCommander_AbilitySelected", -1), libCOOC_gf_CC_PlayersOfCommander("ProtossZeratul"));
    if (((EventUpgradeName() == "ZeratulArtifactUpgradeTier3A") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier3B"))) {
        libCPCD_gf_CTCommanderVOAbilityWatch(EventPlayer(), SoundLink("ZeratulCommander_AbilityReady", -1), "Abil/ZeratulTopBarUltimateWarpTrain", null, null);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_ArtifactTransmission_Upgraded_Init () {
    libCPCD_gt_CM_ArtifactTransmission_Upgraded = TriggerCreate("libCPCD_gt_CM_ArtifactTransmission_Upgraded_Func");
    TriggerEnable(libCPCD_gt_CM_ArtifactTransmission_Upgraded, false);
    TriggerAddEventUpgradeLevelChanged(libCPCD_gt_CM_ArtifactTransmission_Upgraded, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ArtifactTransmission_SelectAbilityReminder
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_ArtifactTransmission_SelectAbilityReminder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("ProtossZeratul", libCOOC_gf_CommanderPlayers()), SoundLink("ZeratulCommander_SelectAbility", -1), libCOOC_gf_CC_PlayersOfCommander("ProtossZeratul"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_ArtifactTransmission_SelectAbilityReminder_Init () {
    libCPCD_gt_CM_ArtifactTransmission_SelectAbilityReminder = TriggerCreate("libCPCD_gt_CM_ArtifactTransmission_SelectAbilityReminder_Func");
    TriggerEnable(libCPCD_gt_CM_ArtifactTransmission_SelectAbilityReminder, false);
    TriggerAddEventTimer(libCPCD_gt_CM_ArtifactTransmission_SelectAbilityReminder, libCPCD_gv_cM_ArtifactTransmission_SelectAbilityReminder);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_GaryDeath
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_GaryDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOOC_gf_PlayerIsCommander(UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((libCPGL_gv_commander[UnitGetOwner(EventUnit())].lv_heroDeathCount == 0))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "GaryStetmann") || (UnitGetType(EventUnit()) == "SuperGaryStetmann")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    libCPCD_gf_CTCommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("GaryStetmann_Death", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_GaryDeath_Init () {
    libCPCD_gt_CM_GaryDeath = TriggerCreate("libCPCD_gt_CM_GaryDeath_Func");
    TriggerEnable(libCPCD_gt_CM_GaryDeath, false);
    TriggerAddEventUnitDied(libCPCD_gt_CM_GaryDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_GaryUpgradeReminder
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_GaryUpgradeReminder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCPCD_gf_EventStetmannPowerTowerTechLevel("StetmannPowerTowerTechLevelNew") == 2))) {
            return false;
        }

        if (!((libCPGL_gv_commander[libCPCD_gf_EventStetmannPowerTowerPlayer()].lv_commanderLevel >= 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCPCD_gf_CM_AbilityTransmission_GaryUpgradeReminder(libCPCD_gf_EventStetmannPowerTowerPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_GaryUpgradeReminder_Init () {
    libCPCD_gt_CM_GaryUpgradeReminder = TriggerCreate("libCPCD_gt_CM_GaryUpgradeReminder_Func");
    TriggerEnable(libCPCD_gt_CM_GaryUpgradeReminder, false);
    libCPCD_gf_StetmannPowerTowerEvent(libCPCD_gt_CM_GaryUpgradeReminder, "Event_PowerTowerLevelUp");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_ArtilleryBuilt
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_Mengsk_ArtilleryBuilt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOOC_gf_PlayerIsCommander(UnitGetOwner(EventUnitProgressUnit())) == true))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "ArtilleryMengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCPCD_gf_CTCommanderVOSend(UnitGetOwner(EventUnitProgressUnit()), SoundLink("MengskCommander_ArtilleryReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnitProgressUnit())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_Mengsk_ArtilleryBuilt_Init () {
    libCPCD_gt_CM_Mengsk_ArtilleryBuilt = TriggerCreate("libCPCD_gt_CM_Mengsk_ArtilleryBuilt_Func");
    TriggerEnable(libCPCD_gt_CM_Mengsk_ArtilleryBuilt, false);
    TriggerAddEventUnitConstructProgress(libCPCD_gt_CM_Mengsk_ArtilleryBuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_ArtilleryStarted
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_Mengsk_ArtilleryStarted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOOC_gf_PlayerIsCommander(UnitGetOwner(EventUnitProgressUnit())) == true))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "ArtilleryMengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCPCD_gv_cM_MengskArtilleryBuilt[0] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_Mengsk_ArtilleryStarted_Init () {
    libCPCD_gt_CM_Mengsk_ArtilleryStarted = TriggerCreate("libCPCD_gt_CM_Mengsk_ArtilleryStarted_Func");
    TriggerEnable(libCPCD_gt_CM_Mengsk_ArtilleryStarted, false);
    TriggerAddEventUnitConstructProgress(libCPCD_gt_CM_Mengsk_ArtilleryStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionMengskNuclearAnnihilation
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionMengskNuclearAnnihilation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("MengskCommander_NuclearAnnihilationUsed", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionMengskNuclearAnnihilation_Init () {
    libCPCD_gt_CM_AbilityTransmissionMengskNuclearAnnihilation = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionMengskNuclearAnnihilation_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionMengskNuclearAnnihilation, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionMengskNuclearAnnihilation, null, AbilityCommand("NuclearAnnihilationMengsk", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionMengskDirtyBomb
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionMengskDirtyBomb_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TimerGetRemaining(libCPCD_gv_cM_MengskTransmissionTimerDirtyBomb[0]) <= 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libCPCD_gv_cM_MengskTransmissionTimerDirtyBomb[0], 120.0, false, c_timeReal);
    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("MengskCommander_DirtyBombUsed", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionMengskDirtyBomb_Init () {
    libCPCD_gt_CM_AbilityTransmissionMengskDirtyBomb = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionMengskDirtyBomb_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionMengskDirtyBomb, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionMengskDirtyBomb, null, AbilityCommand("ArtilleryMengskGlobalExperimentalStrike", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionMengskZergCalldown
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionMengskZergCalldown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("MengskCommander_ZergCalldownUsed", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionMengskZergCalldown_Init () {
    libCPCD_gt_CM_AbilityTransmissionMengskZergCalldown = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionMengskZergCalldown_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionMengskZergCalldown, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionMengskZergCalldown, null, AbilityCommand("MengskZergCalldownLevel1", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionMengskZergCalldown, null, AbilityCommand("MengskZergCalldownLevel2", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionMengskZergCalldown, null, AbilityCommand("MengskZergCalldownLevel3", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionMengskZergCalldown, null, AbilityCommand("MengskZergCalldownLevel4", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionMengskForcedConscription
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_AbilityTransmissionMengskForcedConscription_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TimerGetRemaining(libCPCD_gv_cM_MengskTransmissionTimerForcedConscription[0]) <= 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libCPCD_gv_cM_MengskTransmissionTimerForcedConscription[0], 120.0, false, c_timeReal);
    libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("MengskCommander_ForcedConscriptionUsed", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_AbilityTransmissionMengskForcedConscription_Init () {
    libCPCD_gt_CM_AbilityTransmissionMengskForcedConscription = TriggerCreate("libCPCD_gt_CM_AbilityTransmissionMengskForcedConscription_Func");
    TriggerEnable(libCPCD_gt_CM_AbilityTransmissionMengskForcedConscription, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_AbilityTransmissionMengskForcedConscription, null, AbilityCommand("BunkerDepotMengskDrop", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_VOResourceSent
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_VOResourceSent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventResourceTradeAmount(c_resourceTypeMinerals) == 0)) {
        libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOVespeneSent), PlayerGroupSingle(libCOOC_gf_CC_PlayerAlly(EventPlayer())));
    }
    else if ((EventResourceTradeAmount(c_resourceTypeVespene) == 0)) {
        libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOMineralsSent), PlayerGroupSingle(libCOOC_gf_CC_PlayerAlly(EventPlayer())));
    }
    else if (true) {
        libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOResourcesSent), PlayerGroupSingle(libCOOC_gf_CC_PlayerAlly(EventPlayer())));
    }
    libCPCD_gf_CTCommanderVOSend(EventPlayer(), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(libCOOC_gf_CC_PlayerAlly(EventPlayer())), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOThankyou), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_VOResourceSent_Init () {
    libCPCD_gt_CM_VOResourceSent = TriggerCreate("libCPCD_gt_CM_VOResourceSent_Func");
    TriggerEnable(libCPCD_gt_CM_VOResourceSent, false);
    TriggerAddEventResourceTrade(libCPCD_gt_CM_VOResourceSent, c_playerAny, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_VOResourceRequest
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_VOResourceRequest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventResourceRequestAmount(c_resourceTypeMinerals) == 0)) {
        libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOVespeneRequested), PlayerGroupSingle(libCOOC_gf_CC_PlayerAlly(EventPlayer())));
    }
    else if ((EventResourceRequestAmount(c_resourceTypeVespene) == 0)) {
        libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOMineralsRequested), PlayerGroupSingle(libCOOC_gf_CC_PlayerAlly(EventPlayer())));
    }
    else if (true) {
        libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOResourcesRequested), PlayerGroupSingle(libCOOC_gf_CC_PlayerAlly(EventPlayer())));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_VOResourceRequest_Init () {
    libCPCD_gt_CM_VOResourceRequest = TriggerCreate("libCPCD_gt_CM_VOResourceRequest_Func");
    TriggerEnable(libCPCD_gt_CM_VOResourceRequest, false);
    TriggerAddEventResourceRequest(libCPCD_gt_CM_VOResourceRequest, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_VOEnemySpotted
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_VOEnemySpotted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enemyPlayer;
    int lv_userPlayer;
    unit lv_enemyUnit;

    // Automatic Variable Declarations
    string auto8849C611_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(libCOOC_gf_CommanderPlayers(), UnitGetOwner(EventUnitTarget())) == true)) {
        lv_userPlayer = UnitGetOwner(EventUnitTarget());
    }
    else if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnitTarget()), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true)) {
        lv_enemyPlayer = UnitGetOwner(EventUnitTarget());
        lv_enemyUnit = EventUnitTarget();
    }
    if ((PlayerGroupHasPlayer(libCOOC_gf_CommanderPlayers(), EventPlayer()) == true)) {
        lv_userPlayer = EventPlayer();
    }
    else if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnitTarget()), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true)) {
        lv_enemyPlayer = EventPlayer();
        lv_enemyUnit = EventUnit();
    }
    if (((lv_enemyPlayer == 0) || (lv_userPlayer == 0))) {
        return true;
    }

    if (((lv_enemyUnit == null))) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto8849C611_val = PlayerRace(lv_enemyPlayer);
    if (auto8849C611_val == "Prot") {
        libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(lv_userPlayer), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(lv_userPlayer), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOEnemyIsProtoss), PlayerGroupAll());
    }
    else if (auto8849C611_val == "Terr") {
        libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(lv_userPlayer), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(lv_userPlayer), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOEnemyIsTerran), PlayerGroupAll());
    }
    else if (auto8849C611_val == "Zerg") {
        libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(lv_userPlayer), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(lv_userPlayer), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOEnemyIsZerg), PlayerGroupAll());
    }
    else {
    }
    libCOUI_gf_CU_EnemyBriefShowHide(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_VOEnemySpotted_Init () {
    libCPCD_gt_CM_VOEnemySpotted = TriggerCreate("libCPCD_gt_CM_VOEnemySpotted_Func");
    TriggerEnable(libCPCD_gt_CM_VOEnemySpotted, false);
    TriggerAddEventUnitAttacked2(libCPCD_gt_CM_VOEnemySpotted, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_VOUnitsLostCheck
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_VOUnitsLostCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] lv_lastKnownArmySize;
    fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] lv_highestArmySize;
    fixed lv_currentArmySize;
    int lv_indexPlayer;
    unit lv_indexUnit;
    fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] lv_percentThreshold;

    // Automatic Variable Declarations
    playergroup autoF34C1DBD_g;
    playergroup auto4A50A42E_g;
    unitgroup auto79F963B6_g;
    int auto79F963B6_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoF34C1DBD_g = libCOOC_gf_CommanderPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoF34C1DBD_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer) == "ZergZagara")) {
            lv_percentThreshold[lv_indexPlayer] = 0.2;
        }
        else {
            lv_percentThreshold[lv_indexPlayer] = 0.4;
        }
    }
    while (true) {
        Wait(10.0, c_timeGame);
        if ((libCPGL_gf_GameIsOver() == true)) {
            return true;
        }

        auto4A50A42E_g = libCOOC_gf_CommanderPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto4A50A42E_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            lv_currentArmySize = 0;
            auto79F963B6_g = UnitGroup(null, lv_indexPlayer, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
            auto79F963B6_u = UnitGroupCount(auto79F963B6_g, c_unitCountAll);
            for (;; auto79F963B6_u -= 1) {
                lv_indexUnit = UnitGroupUnitFromEnd(auto79F963B6_g, auto79F963B6_u);
                if (lv_indexUnit == null) { break; }
                if (((UnitTestState(lv_indexUnit, c_unitStateUsingSupply) == false) || ((libNtve_gf_UnitIsHidden(lv_indexUnit) == true) && (libNtve_gf_UnitIsInsideTransport(lv_indexUnit) == false)))) {
                    continue;
                }
                else if ((UnitFilterMatch(lv_indexUnit, lv_indexPlayer, UnitFilter((1 << c_targetFilterWorker), 0, 0, 0)) == true) && (UnitGetType(lv_indexUnit) != "SCVMengsk")) {
                    continue;
                }
                lv_currentArmySize += UnitGetPropertyFixed(lv_indexUnit, c_unitPropSuppliesUsed, c_unitPropCurrent);
            }
            if ((lv_currentArmySize > lv_highestArmySize[lv_indexPlayer])) {
                lv_highestArmySize[lv_indexPlayer] = lv_currentArmySize;
                continue;
            }

            if (((lv_lastKnownArmySize[lv_indexPlayer] - lv_currentArmySize) >= 10.0) && ((lv_currentArmySize / lv_highestArmySize[lv_indexPlayer]) <= lv_percentThreshold[lv_indexPlayer]) && ((lv_highestArmySize[lv_indexPlayer] - lv_currentArmySize) >= 20.0)) {
                libCPCD_gf_CTCommanderVOSend(libCOOC_gf_CC_PlayerAlly(lv_indexPlayer), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOArmyLost), PlayerGroupAll());
                Wait(60.0, c_timeGame);
                TriggerExecute(libCPCD_gt_CM_VOUnitsLostCheck, true, false);
                return true;
            }

            lv_lastKnownArmySize[lv_indexPlayer] = lv_currentArmySize;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_VOUnitsLostCheck_Init () {
    libCPCD_gt_CM_VOUnitsLostCheck = TriggerCreate("libCPCD_gt_CM_VOUnitsLostCheck_Func");
    TriggerEnable(libCPCD_gt_CM_VOUnitsLostCheck, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_VOEnemyCloakedSpotted
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_VOEnemyCloakedSpotted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_userPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitFilterMatch(EventUnitTarget(), EventPlayer(), UnitFilter((1 << c_targetFilterCloaked), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) || (PlayerGroupHasPlayer(libCPGL_gf_HumanPlayers(), UnitGetOwner(EventUnitTarget())) == true) || (libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnitTarget()), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == false) || (TriggerQueueIsEmpty() == false))) {
        return true;
    }

    lv_userPlayer = EventPlayer();
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "BeaconDetectPing", UnitGetPosition(EventUnitTarget()), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 10.0, 270.0);
    libCPCD_gf_SendMissionTransmission("CloakedUnitsSpotted", true, lv_userPlayer);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_VOEnemyCloakedSpotted_Init () {
    libCPCD_gt_CM_VOEnemyCloakedSpotted = TriggerCreate("libCPCD_gt_CM_VOEnemyCloakedSpotted_Func");
    TriggerEnable(libCPCD_gt_CM_VOEnemyCloakedSpotted, false);
    TriggerAddEventUnitAttacked2(libCPCD_gt_CM_VOEnemyCloakedSpotted, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TransmissionSend
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_TransmissionSend_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UserDataSetInt("MissionTransmission", libCPCD_gv_cM_TransmissionCurrentType, "PlayingNow", 1, 1);
    if ((libCPCD_gv_cM_TransmissionSource != -1) && (PlayerGroupHasPlayer(libCPGL_gf_HumanPlayers(), libCPCD_gv_cM_TransmissionSource) == true)) {
        if (((libCPCD_gv_cM_TransmissionCurrentType == "AttackWave") || (libCPCD_gv_cM_TransmissionCurrentType == "CloakedUnitsSpotted"))) {
            ConversationDataSetListenerGender("acAttackWave", libCOOC_gf_CC_CommanderGender(libCPGL_gf_ActiveCommanderForPlayer2(lv_indexPlayer)));
        }

        UserDataSetInt("PlayerCommanders", libCPGL_gf_ActiveCommanderForPlayer2(libCPCD_gv_cM_TransmissionSource), "SendingTransmission", 1, 1);
    }
    else {
        if (((libCPCD_gv_cM_TransmissionCurrentType == "AttackWave") || (libCPCD_gv_cM_TransmissionCurrentType == "CloakedUnitsSpotted"))) {
            ConversationDataSetListenerGender("acAttackWave", c_genderDefault);
        }

    }
    libCPCD_gf_CM_TransmissionUpdateConvoPlayers(UserDataGetGameLink("MissionTransmission", libCPCD_gv_cM_TransmissionCurrentType, "Conversation", 1));
    ConversationDataRun(UserDataGetGameLink("MissionTransmission", libCPCD_gv_cM_TransmissionCurrentType, "Conversation", 1), libCOOC_gf_NondefeatedPlayers(), c_conversationSkipNone, true);
    while (!((libCPCD_gf_CM_PlayerHasTransmission(1) == false) && (libCPCD_gf_CM_PlayerHasTransmission(2) == false))) {
        Wait(0.0625, c_timeGame);
    }
    if ((RandomInt(1, 100) <= UserDataGetInt("MissionTransmission", libCPCD_gv_cM_TransmissionCurrentType, "ResponseChance", 1))) {
        ConversationDataRun("acResponses", libCOOC_gf_NondefeatedPlayers(), c_conversationSkipNone, true);
        while (!((libCPCD_gf_CM_PlayerHasTransmission(1) == false) && (libCPCD_gf_CM_PlayerHasTransmission(2) == false))) {
            Wait(0.0625, c_timeGame);
        }
    }

    UserDataSetInt("MissionTransmission", libCPCD_gv_cM_TransmissionCurrentType, "PlayingNow", 1, 0);
    libCPCD_gv_cM_TransmissionCurrentType = null;
    if ((libCPCD_gv_cM_TransmissionSource != -1) && (PlayerGroupHasPlayer(libCOOC_gf_CommanderPlayers(), libCPCD_gv_cM_TransmissionSource) == true)) {
        UserDataSetInt("PlayerCommanders", libCOOC_gf_ActiveCommanderForPlayer(libCPCD_gv_cM_TransmissionSource), "SendingTransmission", 1, 0);
    }

    libCPCD_gv_cM_TransmissionCount += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_TransmissionSend_Init () {
    libCPCD_gt_CM_TransmissionSend = TriggerCreate("libCPCD_gt_CM_TransmissionSend_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SendTransmissionCampaignTick
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_SendTransmissionCampaignTick_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((libCPCD_gv_cM_SendTransmissionCampaignIndex == 0) && (libCPCD_gv_cM_SendTransmissionCampaignPlayingTick > 0)) {
            libCPCD_gv_cM_SendTransmissionCampaignPlayingTick -= 1;
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_SendTransmissionCampaignTick_Init () {
    libCPCD_gt_CM_SendTransmissionCampaignTick = TriggerCreate("libCPCD_gt_CM_SendTransmissionCampaignTick_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_GPReminderAbilityUsed
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_CM_GPReminderAbilityUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_onoff;

    // Automatic Variable Declarations
    playergroup autoB8778428_g;
    int autoB8778428_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    autoB8778428_g = libCPGL_gf_HumanPlayers();
    autoB8778428_var = -1;
    while (true) {
        autoB8778428_var = PlayerGroupNextPlayer(autoB8778428_g, autoB8778428_var);
        if (autoB8778428_var < 0) { break; }
        if ((libCPCD_gv_cM_GPRemindersOn[EventPlayer()] == false)) {
        }
        else {
            lv_onoff = true;
        }
    }
    TriggerEnable(TriggerGetCurrent(), lv_onoff);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_CM_GPReminderAbilityUsed_Init () {
    libCPCD_gt_CM_GPReminderAbilityUsed = TriggerCreate("libCPCD_gt_CM_GPReminderAbilityUsed_Func");
    TriggerEnable(libCPCD_gt_CM_GPReminderAbilityUsed, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_GPReminderAbilityUsed, null, AbilityCommand("SoASuperShield", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_GPReminderAbilityUsed, null, AbilityCommand("SOAOrbitalStrikeActivate", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_GPReminderAbilityUsed, null, AbilityCommand("VoidSentryBlackHole", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_GPReminderAbilityUsed, null, AbilityCommand("SOADarkPylon", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_GPReminderAbilityUsed, null, AbilityCommand("SOAShadowGuardCalldown", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_GPReminderAbilityUsed, null, AbilityCommand("SpawnToxicNest", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCPCD_gt_CM_GPReminderAbilityUsed, null, AbilityCommand("HHTrainTopBar", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Info Clicked
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_PlayerInfoClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto0E41B322_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto0E41B322_g = libCPGL_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto0E41B322_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((EventDialogControl() == libCPCD_gv_playerInfoScreenButton[lv_indexPlayer])) {
            if ((libCPCD_gv_playerInfoVisible[lv_indexPlayer] == true)) {
                libCPCD_gf_PlayerInfoShowHide(lv_indexPlayer, false);
            }
            else {
                libCPCD_gf_PlayerInfoShowHide(lv_indexPlayer, true);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_PlayerInfoClicked_Init () {
    libCPCD_gt_PlayerInfoClicked = TriggerCreate("libCPCD_gt_PlayerInfoClicked_Func");
    TriggerAddEventDialogControl(libCPCD_gt_PlayerInfoClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Info Escape
//--------------------------------------------------------------------------------------------------
bool libCPCD_gt_PlayerInfoEscape_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCPCD_gv_playerInfoVisible[lv_player] == true)) {
        libCPCD_gf_PlayerInfoShowHide(lv_player, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCD_gt_PlayerInfoEscape_Init () {
    libCPCD_gt_PlayerInfoEscape = TriggerCreate("libCPCD_gt_PlayerInfoEscape_Func");
    TriggerAddEventKeyPressed(libCPCD_gt_PlayerInfoEscape, c_playerAny, c_keyEscape, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

void libCPCD_InitTriggers () {
    libCPCD_gt_HeroPanelUpdate_Init();
    libCPCD_gt_HeroPanelDamaged_Init();
    libCPCD_gt_HeroPanelVitalChanged_Init();
    libCPCD_gt_HeroPanelHoverTooltip_Init();
    libCPCD_gt_HeroDied_Init();
    libCPCD_gt_HeroReviveNovaBuyBackUsed_Init();
    libCPCD_gt_HeroReviveNovaBuyBackAdjustment_Init();
    libCPCD_gt_GlobalCasterVitalChange_Init();
    libCPCD_gt_GPCutsceneBirthFinished_Init();
    libCPCD_gt_GPCutsceneDeathRemove_Init();
    libCPCD_gt_GPAlarakGemPress_Init();
    libCPCD_gt_GPTMTargetingForceOff_Init();
    libCPCD_gt_GPTMTargetingDeactivated_Init();
    libCPCD_gt_GPTMTargetingPointChosen_Init();
    libCPCD_gt_GPTMTargetingDirectionChosen_Init();
    libCPCD_gt_GPTMTargetingEffectFired_Init();
    libCPCD_gt_GPTMTargetingCancel_Init();
    libCPCD_gt_GPTMTargetingCancelFromUI_Init();
    libCPCD_gt_GPTMTargetingCameraShake_Init();
    libCPCD_gt_GPTMOrbitalStrikeActivated_Init();
    libCPCD_gt_GPTMOrbitalStrikeActivatedKarax_Init();
    libCPCD_gt_GPTMTemporalFieldActivated_Init();
    libCPCD_gt_GPTMSolarLanceActivated_Init();
    libCPCD_gt_GPTMTimeStopOn_Init();
    libCPCD_gt_GPTMTimeStopCleanup_Init();
    libCPCD_gt_GPTMTargetingPurifierBeamOn_Init();
    libCPCD_gt_GPTMTargetingPurifierBeamOff_Init();
    libCPCD_gt_GPTMSuperShieldsActivated_Init();
    libCPCD_gt_GPTMShiftCheatFailSafeThermal_Init();
    libCPCD_gt_GPTMShiftCheatFailSafeHHCallFleet_Init();
    libCPCD_gt_GPTMShiftCheatFailSafeNovaBombing_Init();
    libCPCD_gt_GPTMStrafeActivated_Init();
    libCPCD_gt_CDHHAirFleet_Activated_Init();
    libCPCD_gt_CDNovaGriffinBombingRunActivate_Init();
    libCPCD_gt_CDNovaGriffinBombingRunFinish_Init();
    libCPCD_gt_CDZagaraWeaponSwap_Init();
    libCPCD_gt_CDZagaraRoachDropScale_Init();
    libCPCD_gt_CDSwannDrillCallforHelp_Init();
    libCPCD_gt_CDSwannThorRebuildController_Init();
    libCPCD_gt_CDSwannTankrRebuildController_Init();
    libCPCD_gt_CDSwannVespeneDroneTrigger_Init();
    libCPCD_gt_AdvancedConstructionAutoUser_Init();
    libCPCD_gt_AdvancedConstructionAutoAutoCast_Init();
    libCPCD_gt_CDSwannDrillBeamActivate_Init();
    libCPCD_gt_CDSwannDrillNukeActivate_Init();
    libCPCD_gt_CDSwannDrillBeam_Init();
    libCPCD_gt_CDSwannSoundRegionStart_Init();
    libCPCD_gt_CDSwannSoundRegionClear_Init();
    libCPCD_gt_CDSwannSoundBeamStart_Init();
    libCPCD_gt_CDSwannSoundNukeRegionStart_Init();
    libCPCD_gt_CDSwannSoundNukeRegionClear_Init();
    libCPCD_gt_CDSwannDrillAttackOrder_Init();
    libCPCD_gt_CDArtanisGuardianShell_Init();
    libCPCD_gt_CDKerriganWeaponSwap_Init();
    libCPCD_gt_CDKerriganEcoDrop_Init();
    libCPCD_gt_CDKerriganPsiStrike_Init();
    libCPCD_gt_CM_MasteryKerriganInstantReviveCooldown_Init();
    libCPCD_gt_CDKerriganEggModels_Init();
    libCPCD_gt_CDKerriganEggBirth_Init();
    libCPCD_gt_CDRaynorPrestigeAirSupply_Init();
    libCPCD_gt_CDRaynorHyperionPing_Init();
    libCPCD_gt_TimeStop_Init();
    libCPCD_gt_CDKaraxSolarForge_Init();
    libCPCD_gt_CDKaraxUnityBarrier_Init();
    libCPCD_gt_CDKaraxRepairBeamLimit_Init();
    libCPCD_gt_CDAbathurTriggersInit_Init();
    libCPCD_gt_CDAbathurRavagerSpellCooldown_Init();
    libCPCD_gt_CDAbathurSwarmHostLaunchCast_Init();
    libCPCD_gt_CDAbathurToxicNest_Init();
    libCPCD_gt_CDAbathurDeathCreateLocusts_Init();
    libCPCD_gt_CDAbathurBiomassScaler_Init();
    libCPCD_gt_CDAbathurBiomassManualUpdate_Init();
    libCPCD_gt_CDAbathurBiomassTrain_Init();
    libCPCD_gt_CDAbathurBiomassRefund_Init();
    libCPCD_gt_CDAbathurBiomassPickup_Init();
    libCPCD_gt_CDAbathurBiomassDrop_Init();
    libCPCD_gt_CDAbathurMeleeBonusUpgrade_Init();
    libCPCD_gt_CDAbathurToxicNestDeathFailsafe_Init();
    libCPCD_gt_CDAlarakEmpowerAdd_Init();
    libCPCD_gt_CDAlarakEmpowerRemove_Init();
    libCPCD_gt_CDAlarakEmpowerWorshiperAdd_Init();
    libCPCD_gt_CDAlarakEmpowerWorshiperRemove_Init();
    libCPCD_gt_CDAlarakEmpowerUpdate_Init();
    libCPCD_gt_CDAlarakSoulAbsorptionImpact_Init();
    libCPCD_gt_CDAlarakSoulAbsorptionLaunch_Init();
    libCPCD_gt_CDAlarakSoulAbsorptionPrestigeMechBuff_Init();
    libCPCD_gt_CDAlarakLightningStrikesHighlightOn_Init();
    libCPCD_gt_CDAlarakLightningStrikesHighlightOff_Init();
    libCPCD_gt_CDAlarakLightningStrikesSacrifice_Init();
    libCPCD_gt_CDAlarakSacrificeScale_Init();
    libCPCD_gt_CDAlarakAirUpgrade_Init();
    libCPCD_gt_CDNovaTriggersInit_Init();
    libCPCD_gt_CDNovaBuildingCompleted_Init();
    libCPCD_gt_CDNovaPsiStrike_Init();
    libCPCD_gt_CDNovaTankRange_Init();
    libCPCD_gt_CDNovaGriffinTransportActivate_Init();
    libCPCD_gt_CDNovaGriffinTransportStop_Init();
    libCPCD_gt_CDNovaGriffinTransportTimeOut_Init();
    libCPCD_gt_CDNovaGriffinTransportAirReapply_Init();
    libCPCD_gt_CDNovaGriffinTransportGroundReapply_Init();
    libCPCD_gt_CDNovaGriffinTransportTeleportUnload_Init();
    libCPCD_gt_CDNovaNamesGenerate_Init();
    libCPCD_gt_CDNovaNamesAssign_Init();
    libCPCD_gt_CDNovaNamesKillUpdate_Init();
    libCPCD_gt_CDNovaNamesKillUpdateTurret_Init();
    libCPCD_gt_CDStukovTriggersInit_Init();
    libCPCD_gt_CDStukovCreepTumorSpawn_Init();
    libCPCD_gt_CDStukovAleksanderSpawnSupplyRemove_Init();
    libCPCD_gt_CDStukovTankDeath_Init();
    libCPCD_gt_CDStukovUnitCostRefund_Init();
    libCPCD_gt_CDStukovBunkerBirthCargoSpawn_Init();
    libCPCD_gt_CDStukovBunkerRegister_Init();
    libCPCD_gt_CDStukovBunkerUnloadRally_Init();
    libCPCD_gt_CDStukovBunkerAutoLoad_Init();
    libCPCD_gt_CDStukovTimedLifeSupplyRemove_Init();
    libCPCD_gt_CDStukovBurrowSupplyRemove_Init();
    libCPCD_gt_CDStukovCompoundRebuiltSpawn_Init();
    libCPCD_gt_CDStukovCompoundRebuilt_Init();
    libCPCD_gt_CDStukovHordeWaveSpawner_Init();
    libCPCD_gt_CDStukovHordeWaveCreated_Init();
    libCPCD_gt_CDStukovHordeWaveVolatile_Init();
    libCPCD_gt_CDStukovHordeInterruptionReissueOrder_Init();
    libCPCD_gt_CDStukovRallyPlaced_Init();
    libCPCD_gt_CDStukovRallytoUnitDies_Init();
    libCPCD_gt_CDFenixTriggersInit_Init();
    libCPCD_gt_CDFenixAutocastOn_Init();
    libCPCD_gt_CDFenixAutocastOff_Init();
    libCPCD_gt_CDFenixSummonAutocastAdjust_Init();
    libCPCD_gt_CDFenixDragoonOverchargeOn_Init();
    libCPCD_gt_CDFenixDragoonOverchargeOff_Init();
    libCPCD_gt_CDFenixSpawn_Init();
    libCPCD_gt_CDFenixSpawnCleanup_Init();
    libCPCD_gt_CDFenisSpawnCleanupRemove_Init();
    libCPCD_gt_CDFenixVitalRefresh_Init();
    libCPCD_gt_CDFenixDeath_Init();
    libCPCD_gt_CDFenixSuicideUpdateVital_Init();
    libCPCD_gt_CDFenixNameRemoveSuicide_Init();
    libCPCD_gt_CDFenixRallyReset_Init();
    libCPCD_gt_CDFenixChampionSetup_Init();
    libCPCD_gt_CDFenixChampionShellMade_Init();
    libCPCD_gt_CDFenixChampionConclaveRemade_Init();
    libCPCD_gt_CDFenixChampionAIResearched_Init();
    libCPCD_gt_CDFenixChampionTimers_Init();
    libCPCD_gt_CDFenixChampionMorphed_Init();
    libCPCD_gt_CDFenixChampionDeath_Init();
    libCPCD_gt_CDFenixChampionShellDies_Init();
    libCPCD_gt_CDFenixChampionProbius_Init();
    libCPCD_gt_CDFenixChampionDeathBuffExpire_Init();
    libCPCD_gt_CDFenixChampionConclaveTrainStart_Init();
    libCPCD_gt_CDFenixChampionConclaveTrainStop_Init();
    libCPCD_gt_CDFenixChampionConclaveAugmentSound_Init();
    libCPCD_gt_CDFenixTaldarinStore_Init();
    libCPCD_gt_CDFenixTaldarinRelease_Init();
    libCPCD_gt_CDFenixSentryShield_Init();
    libCPCD_gt_AchievementFenixCarrierAmount_Init();
    libCPCD_gt_AchievementFenixCarrierResearched_Init();
    libCPCD_gt_CDDehakaTriggersInit_Init();
    libCPCD_gt_CDDehakaPrestigeCloneRevive_Init();
    libCPCD_gt_CDDehakaPrestigeClone_Init();
    libCPCD_gt_CDDehakaUnitCostRefund_Init();
    libCPCD_gt_CDDehakaGeneThornsOn_Init();
    libCPCD_gt_CDDehakaLearnOrder_Init();
    libCPCD_gt_CDDehakaLevelUpStunOff_Init();
    libCPCD_gt_CDDehakaLevelUpStage3_Init();
    libCPCD_gt_CDDehakaLevelUpStage2_Init();
    libCPCD_gt_CDDehakaEssenceManualUpdate_Init();
    libCPCD_gt_CDDehakaEssencePickup_Init();
    libCPCD_gt_CDDehakaEssenceDrop_Init();
    libCPCD_gt_CDDehakaReviveGasWorkerBehaviorAdd_Init();
    libCPCD_gt_CDDehakaReviveGasWorkerBehaviorRemove_Init();
    libCPCD_gt_CDDehakaReviveEatButtonClicked_Init();
    libCPCD_gt_CDDehakaReviveTimerAdjustments_Init();
    libCPCD_gt_CDDehakaLearn_Init();
    libCPCD_gt_CDDehakaBeamStart_Init();
    libCPCD_gt_CDDehakaBeamStop_Init();
    libCPCD_gt_CDDehakaConsumeTimeStopImmunity_Init();
    libCPCD_gt_CDDehakaConsumeExecuted_Init();
    libCPCD_gt_CDDehakaConsumeDetachFailSafe_Init();
    libCPCD_gt_CDDehakaConsumeLaunchFailSafe_Init();
    libCPCD_gt_CDDehakaConsumeEffectHeroic_Init();
    libCPCD_gt_CDDehakaConsumeLearnLevel2_Init();
    libCPCD_gt_CDDehakaConsumeLearnLevel3_Init();
    libCPCD_gt_CDDehakaBossFacingSetting_Init();
    libCPCD_gt_CDDehakaAutocastSettingsOn_Init();
    libCPCD_gt_CDDehakaAutocastSettingsOff_Init();
    libCPCD_gt_CDDehakaAutocastBossSummonStateAdjust_Init();
    libCPCD_gt_CDDehakaGlevigTimerAdjustments_Init();
    libCPCD_gt_CDDehakaPackLeaderGlevigBuilt_Init();
    libCPCD_gt_CDDehakaPackLeaderMurvarBuilt_Init();
    libCPCD_gt_CDDehakaPackLeaderDakrunBuilt_Init();
    libCPCD_gt_CDDehakaDenReviveFootprintOn_Init();
    libCPCD_gt_CDDehakaDenReviveFootprintOff_Init();
    libCPCD_gt_CDDehakaDenReviveEatTextTagDead_Init();
    libCPCD_gt_CDDehakaDenReviveEatTextTagRevived_Init();
    libCPCD_gt_CDDehakaDenReviveEatUsed_Init();
    libCPCD_gt_CDDehakaMutaliskReviveCooldownOn_Init();
    libCPCD_gt_CDHHTriggersInit_Init();
    libCPCD_gt_CDHHMagMines_Init();
    libCPCD_gt_CDHHVikingTacticalJumpMorph_Init();
    libCPCD_gt_CM_Horner_HangerFinish_Init();
    libCPCD_gt_CDHHMiraTakeover_Upgrade_Init();
    libCPCD_gt_CDHHDoubleSupplyStun_Init();
    libCPCD_gt_CDHHDeathRattleHellionFearApply_Init();
    libCPCD_gt_CDHHBomberPlatform_PlatformCreated_Init();
    libCPCD_gt_CDHHBomberPlatform_PlatformDies_Init();
    libCPCD_gt_CDHHBomberPlatform_BomberLaunched_Init();
    libCPCD_gt_CDHHBomberPlatform_BomberReturned_Init();
    libCPCD_gt_CDHHBomberPlatform_BomberRebuilt_Init();
    libCPCD_gt_CDHHBomberPlatform_TopBar_TargetSelected_Init();
    libCPCD_gt_CDHHBomberPlatform_Individual_TargetSelected_Init();
    libCPCD_gt_CDHHStarportRecreateTechLabOrder_Init();
    libCPCD_gt_CDHHStarportRecreate_Init();
    libCPCD_gt_CDHHStarportFinishCreateTechLabOrder_Init();
    libCPCD_gt_CDHHStarportCreateTechLabOrder_Init();
    libCPCD_gt_CDHHStarportCreateTechLabStart_Init();
    libCPCD_gt_CDHHStarportCreateTechLabFinish_Init();
    libCPCD_gt_CDHHSupplyAchievement_Init();
    libCPCD_gt_CDHHScrapDrop_Init();
    libCPCD_gt_CDHHScrapDropForSwannWreckage_Init();
    libCPCD_gt_CDHHScrapPickup_Init();
    libCPCD_gt_CDHHDeathRattle_Reaper_Init();
    libCPCD_gt_CDHHDeathRattle_WidowMine_Init();
    libCPCD_gt_CDHHDeathRattle_Hellion_Init();
    libCPCD_gt_CDHHDeathRattle_Hellbat_Init();
    libCPCD_gt_CDTychusTriggersInit_Init();
    libCPCD_gt_CDTychusWarhoundFearApply_Init();
    libCPCD_gt_CDTychusHERC_ShieldCooldown_Init();
    libCPCD_gt_CDTychusHERC_CriticalText_Init();
    libCPCD_gt_CDTychusSnareFailSafe_Init();
    libCPCD_gt_CDTychusOilBombFireDamageResponse_Init();
    libCPCD_gt_CDTychusSpectreAuraOn_Init();
    libCPCD_gt_CDTychusSpectreAuraOff_Init();
    libCPCD_gt_CDTychusOdinCameraShake_Init();
    libCPCD_gt_CDTychusOdinBirth_Init();
    libCPCD_gt_CDTychusOdinTimeout_Init();
    libCPCD_gt_CDTychusOdinDeathTychusSelect_Init();
    libCPCD_gt_CDTychusOdinBirthTychusDeselect_Init();
    libCPCD_gt_CDTychusOdinCalldownUIUpdate_Init();
    libCPCD_gt_CDTychusMedicTransportActived_Init();
    libCPCD_gt_CDTychusMedicTopBarButton_Init();
    libCPCD_gt_CDTychusMedicTransportTargetOn_Init();
    libCPCD_gt_CDTychusMedicTransportTargetOff_Init();
    libCPCD_gt_CDTychusMedicTransportStop_Init();
    libCPCD_gt_CDTychusMedicTransportTimeOut_Init();
    libCPCD_gt_CDTychusMedicTransportAirBehaviorApplied_Init();
    libCPCD_gt_CDTychusMedicTransportGroundBehaviorApplied_Init();
    libCPCD_gt_CDTychusMedicTransportTeleportUnload_Init();
    libCPCD_gt_CDTychusTriUnitHealthUpgrade_Init();
    libCPCD_gt_CDTychusTriUnitSpeedUpgrade_Init();
    libCPCD_gt_CDTychusPrestigeLoneWolfChanged_Init();
    libCPCD_gt_CDTychusEventHook_Init();
    libCPCD_gt_CDTychusReviveReaperCharges_Init();
    libCPCD_gt_CDTychusReviveWarhoundCharges_Init();
    libCPCD_gt_CDTychusReviveUsed_Init();
    libCPCD_gt_CDTychusReviveFailsafe_Init();
    libCPCD_gt_CDTychusTrainMaxChargesRemove_Init();
    libCPCD_gt_CDTychusHeroQueue_Init();
    libCPCD_gt_CDTychusHeroCancel_Init();
    libCPCD_gt_CDTychusHeroPurchaseDummy_Init();
    libCPCD_gt_CDTychusHeroChargeTiming_Init();
    libCPCD_gt_CDTychusReplaceResearchCenter_Init();
    libCPCD_gt_CDTychusUISpawnCheat_Init();
    libCPCD_gt_CDTychusUISquadMemberTrained_Init();
    libCPCD_gt_CDTychusUISquadMemberReviveQueued_Init();
    libCPCD_gt_CDTychusUISquadMemberReviveCancelled_Init();
    libCPCD_gt_CDTychusUISquadMemberRevived_Init();
    libCPCD_gt_CDTychusUISquadMemberDeath_Init();
    libCPCD_gt_CDTychusUISquadStructureBuilt_Init();
    libCPCD_gt_CDTychusUISquadBarBuilt_Init();
    libCPCD_gt_CDTychusUISquadBarUpdateProgress_Init();
    libCPCD_gt_CDTychusUIMedivacPlatformBuilt_Init();
    libCPCD_gt_CDTychusUIMedivacAbilityReady_Init();
    libCPCD_gt_CDTychusUIMedivacAbilityUnready_Init();
    libCPCD_gt_CDTychusUIEquipmentUpgraded_Init();
    libCPCD_gt_CDTychusUISwapInit_Init();
    libCPCD_gt_CDTychusUISwapButtonClicked_Init();
    libCPCD_gt_CDTychusUISwapPurchased_Init();
    libCPCD_gt_AchievementTychusGear_Init();
    libCPCD_gt_AchievementTychusHeal_Init();
    libCPCD_gt_CDZeratulTriggersInit_Init();
    libCPCD_gt_CDZeratulRallySetZeratul_Init();
    libCPCD_gt_CDZeratulOrbitalAssimilator_Init();
    libCPCD_gt_CDZeratulArtifactTriggerUpdates_Init();
    libCPCD_gt_CDZeratulArtifactUpdates_Init();
    libCPCD_gt_CDZeratulArt2Stun_Init();
    libCPCD_gt_CDZeratulTrade_Init();
    libCPCD_gt_CDZeratulTradeFullEnergyOn_Init();
    libCPCD_gt_CDZeratulTradeFullEnergyOff_Init();
    libCPCD_gt_CDZeratulDisruptorShotFinal_Init();
    libCPCD_gt_CDZeratulDisruptorShotCreate_Init();
    libCPCD_gt_CDZeratulDisruptorShotImpact_Init();
    libCPCD_gt_CDZeratulSentryShield_Init();
    libCPCD_gt_CDZeratulDarkTemplarRevive_Init();
    libCPCD_gt_CDZeratulWarpPrismAutoUnloadOn_Init();
    libCPCD_gt_CDZeratulWarpPrismAutoUnloadOff_Init();
    libCPCD_gt_CDZeratulWarpPrismSelectRift_Init();
    libCPCD_gt_CDZeratulWarpPrismAutoUnloadMorph_Init();
    libCPCD_gt_CDZeratulCannonUnitLink_Init();
    libCPCD_gt_CDZeratulProjectionTimedLifeFate_Init();
    libCPCD_gt_CDZeratulProjectionCancel_Init();
    libCPCD_gt_CDZeratulTransportUnload_Init();
    libCPCD_gt_CDZeratulTransportResetRally_Init();
    libCPCD_gt_CDZeratulAvatarsPing_Init();
    libCPCD_gt_CDZeratulEntropicBlastSpawns_Init();
    libCPCD_gt_CDZeratulDevolve_Init();
    libCPCD_gt_CDZeratulStasisBeamIssueOrder_Init();
    libCPCD_gt_CDZeratulStasisBeam_Init();
    libCPCD_gt_CDZeratulStasisDuration_Init();
    libCPCD_gt_CDZeratulTopBarWarpTrainStart_Init();
    libCPCD_gt_CDZeratulTopBarWarpTrainFinish_Init();
    libCPCD_gt_CDZeratullTopBarRallySet_Init();
    libCPCD_gt_CDZeratulTopBarRallyRedirect_Init();
    libCPCD_gt_CM_ZeratulTopBarRallyCancel_Init();
    libCPCD_gt_CDZeratulProphecyEventVision_Init();
    libCPCD_gt_CDZeratulProphecyEventArtifactMised_Init();
    libCPCD_gt_CDZeratulProphecyEventArtifactPickedUp_Init();
    libCPCD_gt_CDZeratulProphecyEventArtifactRevealed_Init();
    libCPCD_gt_CDZeratulProphecyEventArtifactUsed_Init();
    libCPCD_gt_CDZeratulProphecyEventProphecyCast_Init();
    libCPCD_gt_CDZeratulProphecyMiss_Init();
    libCPCD_gt_CDZeratulProphecyCastStop_Init();
    libCPCD_gt_CDZeratulProphecyIntroQ_Init();
    libCPCD_gt_CDZeratulProphecyArtifactPickedUp_Init();
    libCPCD_gt_CDZeratulProphecyArtifactRevealed_Init();
    libCPCD_gt_CDZeratulProphecyArtifactPathingSafety_Init();
    libCPCD_gt_CDZeratulProphecyArrtifactDebug_Init();
    libCPCD_gt_CDZeratulProphecyReady_Init();
    libCPCD_gt_CDZeratulProphecyNotReady_Init();
    libCPCD_gt_CDZeratulArtifactCollected_Init();
    libCPCD_gt_CDZeratulArtifactUpgraded_Init();
    libCPCD_gt_CDZeratulArtifactUsed_Init();
    libCPCD_gt_AchievementZeratulDevolveKills_Init();
    libCPCD_gt_CDStetmannTriggersInit_Init();
    libCPCD_gt_CDStetmannEventLairHiveCreated_Init();
    libCPCD_gt_CDStetmannEventLairHiveMorph_Init();
    libCPCD_gt_CDStetmannStetelliteToggle_Init();
    libCPCD_gt_CDStetmannStetelliteTechLevel_Init();
    libCPCD_gt_CDStetmannStetelliteChainCast_Init();
    libCPCD_gt_CDStetmannStetelliteMaxChargesChanged_Init();
    libCPCD_gt_CDStetmannStetelliteChargesChanged_Init();
    libCPCD_gt_CDStetmannBanelingEnergyDamageBoost_Init();
    libCPCD_gt_CDStetmannBroodLordArmBroodling_Init();
    libCPCD_gt_CDStetmannGaryUpgrade_Init();
    libCPCD_gt_CM_Stetmann_Set_Init();
    libCPCD_gt_AchievementStetmannGaryTransform_Init();
    libCPCD_gt_AchievementStetmannSteteliteOverchargeAlly_Init();
    libCPCD_gt_CDMengskTriggersInit_Init();
    libCPCD_gt_CDMengskWeaponPickup_Init();
    libCPCD_gt_CDMengskWeaponPickerUpperUnregister_Init();
    libCPCD_gt_CDMengskWeaponPickerUpperRegister_Init();
    libCPCD_gt_CDMengskWeaponPickupRegister_Init();
    libCPCD_gt_CDMengskReturnToWork_Init();
    libCPCD_gt_CDMengskEnlistStop_Init();
    libCPCD_gt_CDMengskEnlistStart_Init();
    libCPCD_gt_CDMengskVeterancyEarned_Init();
    libCPCD_gt_CDMengskVeteranDing_Init();
    libCPCD_gt_CDMengskVeteranDies_Init();
    libCPCD_gt_CDMengskRegisterVeteranUnit_Init();
    libCPCD_gt_CDMengskRemoveVeteranUnit_Init();
    libCPCD_gt_CDMengskDirtyBombSweetener_Init();
    libCPCD_gt_CDMengskGlobalAbilityCast_Init();
    libCPCD_gt_CDMengskNuclearAnnihilationSmallNukes_Init();
    libCPCD_gt_CDMengskArtilleryBombardmentCargoChange_Init();
    libCPCD_gt_CDMengskArtilleryExperimentalStrikeFearApply_Init();
    libCPCD_gt_CDMengskArtilleryGlobalExperimentalStrikeTarget_Init();
    libCPCD_gt_CDMengskArtilleryExperimentalStrikeTarget_Init();
    libCPCD_gt_CDMengskArtilleryBombardmentTarget_Init();
    libCPCD_gt_CDMengskPropagandaUpgraded_Init();
    libCPCD_gt_CDMengskRemovePropagandaUnit_Init();
    libCPCD_gt_CDMengskRegisterPropagandaUnit_Init();
    libCPCD_gt_CDMengskBunkerDepotDropFillCargo_Init();
    libCPCD_gt_CDMengskMedivacAirliftDing_Init();
    libCPCD_gt_CDMengskMedivacAirlift_Init();
    libCPCD_gt_CDMengskUltraliskMengskSpawn_Init();
    libCPCD_gt_CDMengskMutaliskMengskSpawn_Init();
    libCPCD_gt_CDMengskHydraliskMengskSpawn_Init();
    libCPCD_gt_CDMengskZerglingMengskSpawn_Init();
    libCPCD_gt_CDMengskZergSeekDestroy_Init();
    libCPCD_gt_AchievementMengskTopBarKills_Init();
    libCPCD_gt_DeathPreventGrantKillCredit_Init();
    libCPCD_gt_AttackFastBuffHack_Init();
    libCPCD_gt_DmgandAttackSpeedInheritNew_Init();
    libCPCD_gt_DmgandAttackSpeedInheritExisting_Init();
    libCPCD_gt_ConjoinedVitalRegenOnOff_Init();
    libCPCD_gt_CM_TargetLockOrder_Init();
    libCPCD_gt_CM_TargetLockOrderRaven_Init();
    libCPCD_gt_ChronoAnimSpeedOn_Init();
    libCPCD_gt_ChronoAnimSpeedOff_Init();
    libCPCD_gt_SamePlaceRevive_Init();
    libCPCD_gt_CM_InstantRevive_Init();
    libCPCD_gt_SupplicantWarpTrain_Init();
    libCPCD_gt_SupplicantActualTrain_Init();
    libCPCD_gt_SupplicantWarpFinish_Init();
    libCPCD_gt_SupplicantWarpCancel_Init();
    libCPCD_gt_StukovSnareBehaviorOn2_Init();
    libCPCD_gt_CM_CargoDeath_Init();
    libCPCD_gt_CreepTumorBuild_Init();
    libCPCD_gt_MindControlSupplyOn_Init();
    libCPCD_gt_MindControlSupplyOff_Init();
    libCPCD_gt_BehaviorPermanentlyChangesOwner_Init();
    libCPCD_gt_CODConstrucInvulnerableOn_Init();
    libCPCD_gt_CODConstrucInvulnerableOff_Init();
    libCPCD_gt_VoidACShardModifyHealth_Init();
    libCPCD_gt_ResourcePickupAllyNew_Init();
    libCPCD_gt_StunAnimOn_Init();
    libCPCD_gt_StunAnimOff_Init();
    libCPCD_gt_HighlightTooltip_Init();
    libCPCD_gt_OverlordUpgrade_Init();
    libCPCD_gt_ZerglingUpgrade_Init();
    libCPCD_gt_CreepEngulfCreate_Init();
    libCPCD_gt_CreepEngulfMorph_Init();
    libCPCD_gt_ShieldColorUnitCreate_Init();
    libCPCD_gt_ShieldColorUnitMorph_Init();
    libCPCD_gt_CDTownHallRallyConstruction_Init();
    libCPCD_gt_CDTownHallRallyLand_Init();
    libCPCD_gt_BanelingScourgeDeathrattleScrapDeaths_Init();
    libCPCD_gt_BanelingScourgeEconDrop_Init();
    libCPCD_gt_BanelingScourgeLocusts_Init();
    libCPCD_gt_BanelingScourgeEssenceDrop_Init();
    libCPCD_gt_BanelingScourgeBiomassDrop_Init();
    libCPCD_gt_CTHeroReviveQueue_HeroRevived_Init();
    libCPCD_gt_CTAbilityRaynorHyperion_Init();
    libCPCD_gt_CTAbilityRaynorBansheesUsed_Init();
    libCPCD_gt_CTAbilitySwannDrone_Init();
    libCPCD_gt_CTAbilitySwannLaserDrill_Init();
    libCPCD_gt_CTAbilitySwannCombatDropUsed_Init();
    libCPCD_gt_CTAbilityKerriganCrushingGrip_Init();
    libCPCD_gt_CTAbilityKerriganAssimilation_Init();
    libCPCD_gt_CM_AbilityTransmissionZagaraRoachDrop_Init();
    libCPCD_gt_CM_AbilityTransmissionArtanisSuperShields_Init();
    libCPCD_gt_CM_AbilityTransmissionVorazunTimeStop_Init();
    libCPCD_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost_Init();
    libCPCD_gt_CM_AbilityTransmissionKaraxChronoMap_Init();
    libCPCD_gt_CM_AbilityTransmissionAbathurMend_Init();
    libCPCD_gt_CM_AbilityTransmissionAlarakEmpower_Init();
    libCPCD_gt_CM_AbilityTransmissionAlarakDeathFleet_Init();
    libCPCD_gt_CM_AbilityTransmissionAlarakOvercharge_Init();
    libCPCD_gt_CM_AbilityTransmissionAlarakSacrifice_Init();
    libCPCD_gt_CM_AbilityTransmissionNovaBombingRun_Init();
    libCPCD_gt_CM_AbilityTransmissionNovaTransport_Init();
    libCPCD_gt_CM_AbilityTransmissionNovaDMatrix_Init();
    libCPCD_gt_CM_AbilityTransmissionStukovAleksander_Init();
    libCPCD_gt_CM_AbilityTransmissionStukovApocalisk_Init();
    libCPCD_gt_CM_AbilityTransmissionStukovInfestStructure_Init();
    libCPCD_gt_CM_AbilityTransmissionFenixCreateTalis_Init();
    libCPCD_gt_CM_AbilityTransmissionFenixCreateKaldalis_Init();
    libCPCD_gt_CM_AbilityTransmissionFenixCreateTaldarin_Init();
    libCPCD_gt_CM_AbilityTransmissionFenixCreateWarbringer_Init();
    libCPCD_gt_CM_AbilityTransmissionFenixCreateMojo_Init();
    libCPCD_gt_CM_AbilityTransmissionFenixCreateClolarion_Init();
    libCPCD_gt_CM_AbilityTransmissionFenixZealotSuit_Init();
    libCPCD_gt_CM_AbilityTransmissionFenixDragoonSuit_Init();
    libCPCD_gt_CM_AbilityTransmissionFenixArbiterSuit_Init();
    libCPCD_gt_CM_AbilityTransmissionFenixMassRecall_Init();
    libCPCD_gt_CM_HeroTransmissionFenixHeroDies_Init();
    libCPCD_gt_CM_HeroTransmissionFenixHeroRepaired_Init();
    libCPCD_gt_CM_HeroTransmissionFenixNameChange_Init();
    libCPCD_gt_CM_AbilityTransmissionDehakaGlevig_Init();
    libCPCD_gt_CM_AbilityTransmissionDehakaMurvar_Init();
    libCPCD_gt_CM_AbilityTransmissionDehakaDakrun_Init();
    libCPCD_gt_CM_AbilityTransmissionDehakaPrimalWurm_Init();
    libCPCD_gt_CM_UnitTransmissionDehakaGlevigConstruct_Init();
    libCPCD_gt_CM_UnitTransmissionDehakaMurvarConstruct_Init();
    libCPCD_gt_CM_UnitTransmissionDehakaDakrunConstruct_Init();
    libCPCD_gt_CM_AbilityTransmissionDehakaChangeReminderLevel_Init();
    libCPCD_gt_CM_AbilityTransmissionDehakaChangeReminderLearn_Init();
    libCPCD_gt_CM_AbilityTransmissionDehakaChangeReminderTimerExpire_Init();
    libCPCD_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt_Init();
    libCPCD_gt_CM_AbilityTransmissionDehakaWurmStructureKilled_Init();
    libCPCD_gt_CM_AbilityTransmissionHornerFleet_Init();
    libCPCD_gt_CM_AbilityTransmissionHornerStation_Init();
    libCPCD_gt_CM_UnitTransmissionHornerBomberBuild_Init();
    libCPCD_gt_CM_AbilityTransmissionHornerBomberUse_Init();
    libCPCD_gt_CM_AbilityTransmissionHornerBomberReminder_Init();
    libCPCD_gt_CM_AbilityTransmissionTychusCreateReaper_Init();
    libCPCD_gt_CM_AbilityTransmissionTychusCreateWarhound_Init();
    libCPCD_gt_CM_AbilityTransmissionTychusCreateFirebat_Init();
    libCPCD_gt_CM_AbilityTransmissionTychusCreateMarauder_Init();
    libCPCD_gt_CM_AbilityTransmissionTychusCreateHERC_Init();
    libCPCD_gt_CM_AbilityTransmissionTychusCreateGhost_Init();
    libCPCD_gt_CM_AbilityTransmissionTychusCreatePhantom_Init();
    libCPCD_gt_CM_AbilityTransmissionTychusCreateMedic_Init();
    libCPCD_gt_CM_AbilityTransmissionTychusOdinUse_Init();
    libCPCD_gt_CM_AbilityTransmissionTychusTransportUse_Init();
    libCPCD_gt_CM_AbilityTransmissionTychusTransportReminder_Init();
    libCPCD_gt_CM_UnitTransmissionTychusTransportBuild_Init();
    libCPCD_gt_CM_UnitTransmissionTychusOutlawFirstDeath_Init();
    libCPCD_gt_CM_UnitTransmissionTychusOutlawDeath_Init();
    libCPCD_gt_CM_UnitTransmissionTychusOutlawRevived_Init();
    libCPCD_gt_CM_UnitTransmissionTychusOutlawReviveReminder_Init();
    libCPCD_gt_CM_UnitTransmissionTychusOutlawRecruitAvailable_Init();
    libCPCD_gt_CM_UnitTransmissionTychusOutlawRecruited_Init();
    libCPCD_gt_CM_UnitTransmissionTychusOutlawRecruitReminder_Init();
    libCPCD_gt_CM_ArtifactTransmission_Hint_Init();
    libCPCD_gt_CM_ArtifactTransmission_PickedUp_Init();
    libCPCD_gt_CM_ArtifactTransmission_ProphecyCast_Init();
    libCPCD_gt_CM_ArtifactTransmission_Upgraded_Init();
    libCPCD_gt_CM_ArtifactTransmission_SelectAbilityReminder_Init();
    libCPCD_gt_CM_GaryDeath_Init();
    libCPCD_gt_CM_GaryUpgradeReminder_Init();
    libCPCD_gt_CM_Mengsk_ArtilleryBuilt_Init();
    libCPCD_gt_CM_Mengsk_ArtilleryStarted_Init();
    libCPCD_gt_CM_AbilityTransmissionMengskNuclearAnnihilation_Init();
    libCPCD_gt_CM_AbilityTransmissionMengskDirtyBomb_Init();
    libCPCD_gt_CM_AbilityTransmissionMengskZergCalldown_Init();
    libCPCD_gt_CM_AbilityTransmissionMengskForcedConscription_Init();
    libCPCD_gt_CM_VOResourceSent_Init();
    libCPCD_gt_CM_VOResourceRequest_Init();
    libCPCD_gt_CM_VOEnemySpotted_Init();
    libCPCD_gt_CM_VOUnitsLostCheck_Init();
    libCPCD_gt_CM_VOEnemyCloakedSpotted_Init();
    libCPCD_gt_CM_TransmissionSend_Init();
    libCPCD_gt_CM_SendTransmissionCampaignTick_Init();
    libCPCD_gt_CM_GPReminderAbilityUsed_Init();
    libCPCD_gt_PlayerInfoClicked_Init();
    libCPCD_gt_PlayerInfoEscape_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libCPCD_InitLib_completed = false;

void libCPCD_InitLib () {
    if (libCPCD_InitLib_completed) {
        return;
    }

    libCPCD_InitLib_completed = true;

    libCPCD_InitLibraries();
    libCPCD_InitVariables();
    libCPCD_InitTriggers();
}

include "LibCPGL"
include "LibCPCC"
include "LibCPCM"

