include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "LibCOOC"
include "LibCOUI"
include "LibCOMU"
include "LibCOMI"
include "LibCOOC"
include "LibCOUI"
include "LibCOMU"
include "LibCOMI"
include "LibCPCD_h"
include "LibCPCC_h"
include "LibCPCM_h"

include "LibCPGL_h"

//--------------------------------------------------------------------------------------------------
// Library: Coop+Global
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libCPGL_InitLibraries () {
    libNtve_InitVariables();
    libLbty_InitVariables();
    libCOOC_InitVariables();
    libCOUI_InitVariables();
    libCOMU_InitVariables();
    libCOMI_InitVariables();
    libCOOC_InitVariables();
    libCOUI_InitVariables();
    libCOMU_InitVariables();
    libCOMI_InitVariables();
    libCPCD_InitVariables();
    libCPCC_InitVariables();
    libCPCM_InitVariables();
}

// Variable Initialization
bool libCPGL_InitVariables_completed = false;

void libCPGL_InitVariables () {
    int init_i;

    if (libCPGL_InitVariables_completed) {
        return;
    }

    libCPGL_InitVariables_completed = true;

    libCPGL_gv_humanPlayersGroup = PlayerGroupEmpty();
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPGL_gv_commander[init_i].lv_commanderLevel = 15;
        libCPGL_gv_commander[init_i].lv_prestigeIcon = "Assets\\Textures\\ui_battlenet_glue_coop_commandericon_maxicon_large.dds";
        libCPGL_gv_commander[init_i].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_CBA80E29");
        libCPGL_gv_commander[init_i].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_4EA6F650");
        libCPGL_gv_commander[init_i].lv_heroReviveLink = "";
        libCPGL_gv_commander[init_i].lv_heroDeathCount = -1;
        libCPGL_gv_commander[init_i].lv_heroStructureGroup = UnitGroupEmpty();
        libCPGL_gv_commander[init_i].lv_globalCasterGroup = UnitGroupEmpty();
        libCPGL_gv_commander[init_i].lv_globalCasterGroupSecondary = UnitGroupEmpty();
    }
    libCPGL_gv_hTHeroTimeTimer = TimerCreate();
    libCPGL_gv_bTBuildTimeTimer = TimerCreate();
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPGL_gv_cNPlayerCinematicMode[init_i] = c_uiModeConsole;
    }
    libCPGL_gv_cDMissionUIContainer = c_invalidDialogControlId;
    libCPGL_gv_cDMissionObjectivePanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPGL_gv_minimapPing[init_i] = c_invalidPingId;
    }
    libCPGL_gv_cM_UpgradeTextTag = c_textTagNone;
    libCPGL_gv_cM_DrillTextTagInitial = c_textTagNone;
    libCPGL_gv_cM_DrillTextTagCreated = c_textTagNone;
    libCPGL_gv_cM_DrillTextTagDamaged = c_textTagNone;
    libCPGL_gv_cM_CybCoreTextTag = c_textTagNone;
    libCPGL_gv_cM_SolarForgeTextTag = c_textTagNone;
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPGL_gv_cC_PlayerMasteryEnabled[init_i] = true;
    }
    libCPGL_gv_cM_DebugAITargetSpawners = true;
    libCPGL_gv_cC_DebugDefeatMultiplierOverride = -1.0;
    libCPGL_gv_cU_FanfareFlash = c_invalidDialogControlId;
    libCPGL_gv_cU_FanfareCloseButton = c_invalidDialogControlId;
    libCPGL_gv_cU_FanfareConvertToReplayButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPGL_gv_cU_FanfareResult[init_i] = c_gameOverVictory;
    }
    libCPGL_gv_cU_FanfarePanel = c_invalidDialogControlId;
    libCPGL_gv_cU_FanfareDialog = c_invalidDialogId;
    libCPGL_gv_cU_ScoreDialog = c_invalidDialogId;
    libCPGL_gv_cU_ScorePanel = c_invalidDialogControlId;
    libCPGL_gv_cU_ScoreTitleLabel = c_invalidDialogControlId;
    libCPGL_gv_cU_ScoreContinueButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libCPGL_gv_cU_ScoreCategoryTitleLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libCPGL_gv_cU_ScoreCategoryValueLabel[init_i] = c_invalidDialogControlId;
    }
    libCPGL_gv_cU_ScoreTotalValueLabel = c_invalidDialogControlId;
    libCPGL_gv_cC_ScoreVorazunBHGroup = UnitGroupEmpty();
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCPGL_gv_cM_EndMissionResult[init_i] = c_gameOverDefeat;
    }
    libCPGL_gv_pC_StatEventLastCampaign = -1;
}

// Presets
// Functions
playergroup libCPGL_gf_IntersectionofPlayerGroupsCoop (playergroup lp_playerGroup1, playergroup lp_playerGroup2) {
    // Variable Declarations
    int lv_indexPlayer;
    playergroup lv_playerGroup;

    // Automatic Variable Declarations
    playergroup autoE70EBA88_g;

    // Variable Initialization
    lv_playerGroup = PlayerGroupEmpty();

    // Implementation
    autoE70EBA88_g = lp_playerGroup1;
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoE70EBA88_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerGroupHasPlayer(lp_playerGroup2, lv_indexPlayer) == true)) {
            PlayerGroupAdd(lv_playerGroup, lv_indexPlayer);
        }

    }
    return lv_playerGroup;
}

playergroup libCPGL_gf_HumanPlayers () {
    // Automatic Variable Declarations
    // Implementation
    return libCPGL_gv_humanPlayersGroup;
}

bool libCPGL_gf_PlayerinHumanPlayers (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupHasPlayer(libCPGL_gf_HumanPlayers(), lp_player) == true)) {
        return true;
    }
    else {
        return false;
    }
}

bool libCPGL_gf_PlayerhasaCommanderAllyinPlayerGroup (int lp_player, string lp_commander, playergroup lp_playergroup) {
    // Variable Declarations
    bool lv_truefalse;

    // Automatic Variable Declarations
    playergroup auto52ACF84C_g;
    int auto52ACF84C_var;

    // Variable Initialization

    // Implementation
    auto52ACF84C_g = lp_playergroup;
    auto52ACF84C_var = -1;
    while (true) {
        auto52ACF84C_var = PlayerGroupNextPlayer(auto52ACF84C_g, auto52ACF84C_var);
        if (auto52ACF84C_var < 0) { break; }
        if ((libCPGL_gv_commander[auto52ACF84C_var].lv_commander == lp_commander) && (libNtve_gf_PlayerIsEnemy(lp_player, auto52ACF84C_var, libNtve_ge_PlayerRelation_Ally) == true)) {
            lv_truefalse = true;
        }
        else {
            lv_truefalse = false;
        }
    }
    return lv_truefalse;
}

playergroup libCPGL_gf_AllCommandersinPlayerGroup (string lp_commander, playergroup lp_humanplayers) {
    // Variable Declarations
    playergroup lv_commanderplayers;

    // Automatic Variable Declarations
    playergroup autoAD27C1DC_g;
    int autoAD27C1DC_var;

    // Variable Initialization
    lv_commanderplayers = PlayerGroupEmpty();

    // Implementation
    autoAD27C1DC_g = lp_humanplayers;
    autoAD27C1DC_var = -1;
    while (true) {
        autoAD27C1DC_var = PlayerGroupNextPlayer(autoAD27C1DC_g, autoAD27C1DC_var);
        if (autoAD27C1DC_var < 0) { break; }
        if ((libCPGL_gv_commander[autoAD27C1DC_var].lv_commander == lp_commander)) {
            PlayerGroupAdd(lv_commanderplayers, autoAD27C1DC_var);
        }

    }
    return lv_commanderplayers;
}

bool libCPGL_gf_CommanderisinPlayerGroup (string lp_commander, playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto7196A78F_g;

    // Variable Initialization

    // Implementation
    auto7196A78F_g = lp_playerGroup;
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto7196A78F_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCPGL_gv_commander[lv_indexPlayer].lv_commander == lp_commander)) {
            return true;
        }

    }
    return false;
}

point libCPGL_gf_StartLocationOffset (int lp_player, fixed lp_arc, int lp_offset) {
    // Variable Declarations
    point lv_spawnPoint;
    point lv_mineralPoint;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_mineralPoint = UnitGroupCenterOfGroup(UnitGroup(null, c_playerAny, RegionCircle(PlayerStartLocation(lp_player), 10.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    lv_spawnPoint = libNtve_gf_PointOffsetTowardsPoint(lv_mineralPoint, DistanceBetweenPoints(lv_mineralPoint, PlayerStartLocation(lp_player)), PlayerStartLocation(lp_player));
    lv_point = PlayerStartLocation(lp_player);
    PointSetFacing(lv_point, (lp_arc + AngleBetweenPoints(lv_mineralPoint, lv_spawnPoint)));
    PointSet(lv_point, libNtve_gf_PointOffsetTowardsPoint(lv_point, lp_offset, libNtve_gf_PointFacingAngle(lv_point, PointGetFacing(lv_point))));
    return lv_point;
}

string libCPGL_gf_GetClosestRace (string lp_race) {
    // Automatic Variable Declarations
    int auto1A564CE1_val;

    // Implementation
    if (((lp_race == "InfT") || (lp_race == "ZerM") || (lp_race == "PZrg") || (lp_race == "Zerg"))) {
        return "Zerg";
    }
    else if (((lp_race == "Prot") || (lp_race == "ProZ"))) {
        return "Prot";
    }
    else if (((lp_race == "Terr") || (lp_race == "TerH") || (lp_race == "TerM") || (lp_race == "TerT"))) {
        return "Terr";
    }
    auto1A564CE1_val = RandomInt(1, 3);
    if (auto1A564CE1_val == 1) {
        return "Terr";
    }
    else if (auto1A564CE1_val == 2) {
        return "Zerg";
    }
    else {
        return "Prot";
    }
}

unitgroup libCPGL_gf_CommanderUnitGroup (int lp_commanderunittype) {
    // Variable Declarations
    unitgroup lv_units;

    // Automatic Variable Declarations
    playergroup auto0A7F78B0_g;
    int auto0A7F78B0_var;
    int auto2BD59F2B_val;

    // Variable Initialization
    lv_units = UnitGroupEmpty();

    // Implementation
    auto0A7F78B0_g = libCPGL_gf_HumanPlayers();
    auto0A7F78B0_var = -1;
    while (true) {
        auto0A7F78B0_var = PlayerGroupNextPlayer(auto0A7F78B0_g, auto0A7F78B0_var);
        if (auto0A7F78B0_var < 0) { break; }
        auto2BD59F2B_val = lp_commanderunittype;
        if (auto2BD59F2B_val == libCPGL_ge_CommanderUnitType_GlobalCasterUnit) {
            UnitGroupAdd(lv_units, libCPGL_gv_commander[auto0A7F78B0_var].lv_globalCasterUnit);
        }
        else if (auto2BD59F2B_val == libCPGL_ge_CommanderUnitType_GlobalCasterUnitSecondary) {
            UnitGroupAdd(lv_units, libCPGL_gv_commander[auto0A7F78B0_var].lv_globalCasterUnitSecondary);
        }
        else if (auto2BD59F2B_val == libCPGL_ge_CommanderUnitType_HeroBeacon) {
            UnitGroupAdd(lv_units, libCPGL_gv_commander[auto0A7F78B0_var].lv_heroBeacon);
        }
        else if (auto2BD59F2B_val == libCPGL_ge_CommanderUnitType_HeroStructure) {
            UnitGroupAdd(lv_units, libCPGL_gv_commander[auto0A7F78B0_var].lv_heroStructure);
        }
        else if (auto2BD59F2B_val == libCPGL_ge_CommanderUnitType_HeroUnit) {
            UnitGroupAdd(lv_units, libCPGL_gv_commander[auto0A7F78B0_var].lv_heroUnit);
        }
        else {
        }
    }
    return lv_units;
}

int libCPGL_gf_CommanderPrestigeCount (int lp_player, string lp_commander) {
    // Variable Declarations
    int lv_level;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Abathur") || (libCPGL_gf_GetCommanderDataCommander(lp_player) == "Alarak") || (libCPGL_gf_GetCommanderDataCommander(lp_player) == "Artanis") || (libCPGL_gf_GetCommanderDataCommander(lp_player) == "Dehaka") || (libCPGL_gf_GetCommanderDataCommander(lp_player) == "Fenix") || (libCPGL_gf_GetCommanderDataCommander(lp_player) == "Horner") || (libCPGL_gf_GetCommanderDataCommander(lp_player) == "Karax") || (libCPGL_gf_GetCommanderDataCommander(lp_player) == "Kerrigan") || (libCPGL_gf_GetCommanderDataCommander(lp_player) == "Mengsk") || (libCPGL_gf_GetCommanderDataCommander(lp_player) == "Nova") || (libCPGL_gf_GetCommanderDataCommander(lp_player) == "Raynor") || (libCPGL_gf_GetCommanderDataCommander(lp_player) == "Stetmann") || (libCPGL_gf_GetCommanderDataCommander(lp_player) == "Stukov") || (libCPGL_gf_GetCommanderDataCommander(lp_player) == "Swann") || (libCPGL_gf_GetCommanderDataCommander(lp_player) == "Tychus") || (libCPGL_gf_GetCommanderDataCommander(lp_player) == "Vorazun") || (libCPGL_gf_GetCommanderDataCommander(lp_player) == "Zagara") || (libCPGL_gf_GetCommanderDataCommander(lp_player) == "Zeratul"))) {
        lv_level = 3;
    }
    return lv_level;
}

int libCPGL_gf_CommanderMaxType () {
    // Automatic Variable Declarations
    // Implementation
    return 18;
}

string libCPGL_gf_ActiveCommanderForPlayer2 (int lp_player) {
    // Automatic Variable Declarations
    string auto71A58E23_val;

    // Implementation
    auto71A58E23_val = libCPGL_gv_commander[lp_player].lv_commander;
    if (auto71A58E23_val == "Abathur") {
        return "ZergAbathur";
    }
    else if (auto71A58E23_val == "Alarak") {
        return "ProtossAlarak";
    }
    else if (auto71A58E23_val == "Artanis") {
        return "ProtossArtanis";
    }
    else if (auto71A58E23_val == "Dehaka") {
        return "ZergDehaka";
    }
    else if (auto71A58E23_val == "Fenix") {
        return "ProtossFenix";
    }
    else if (auto71A58E23_val == "Horner") {
        return "TerranHorner";
    }
    else if (auto71A58E23_val == "Karax") {
        return "ProtossKarax";
    }
    else if (auto71A58E23_val == "Kerrigan") {
        return "ZergKerrigan";
    }
    else if (auto71A58E23_val == "Mengsk") {
        return "TerranMengsk";
    }
    else if (auto71A58E23_val == "Nova") {
        return "TerranNova";
    }
    else if (auto71A58E23_val == "Raynor") {
        return "TerranRaynor";
    }
    else if (auto71A58E23_val == "Stetmann") {
        return "ZergStetmann";
    }
    else if (auto71A58E23_val == "Stukov") {
        return "ZergStukov";
    }
    else if (auto71A58E23_val == "Swann") {
        return "TerranSwann";
    }
    else if (auto71A58E23_val == "Tychus") {
        return "TerranTychus";
    }
    else if (auto71A58E23_val == "Vorazun") {
        return "ProtossVorazun";
    }
    else if (auto71A58E23_val == "Zagara") {
        return "ZergZagara";
    }
    else if (auto71A58E23_val == "Zeratul") {
        return "ProtossZeratul";
    }
    else {
        return null;
    }
}

string libCPGL_gf_GetCommanderDataCommander (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCPGL_gv_commander[lp_player].lv_commander;
}

int libCPGL_gf_GetCommanderDataPrestigeLevel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCPGL_gv_commander[lp_player].lv_prestigeLevel;
}

text libCPGL_gf_GetCommanderDataName (int lp_player) {
    // Automatic Variable Declarations
    string auto016E94AD_val;

    // Implementation
    auto016E94AD_val = libCPGL_gv_commander[lp_player].lv_commander;
    if (auto016E94AD_val == "Raynor") {
        return StringExternal("Param/Value/lib_CPGL_F627102D");
    }
    else if (auto016E94AD_val == "Kerrigan") {
        return StringExternal("Param/Value/lib_CPGL_650D5276");
    }
    else if (auto016E94AD_val == "Artanis") {
        return StringExternal("Param/Value/lib_CPGL_AD64C5C6");
    }
    else if (auto016E94AD_val == "Swann") {
        return StringExternal("Param/Value/lib_CPGL_08BB9D20");
    }
    else if (auto016E94AD_val == "Zagara") {
        return StringExternal("Param/Value/lib_CPGL_C7200FDF");
    }
    else if (auto016E94AD_val == "Vorazun") {
        return StringExternal("Param/Value/lib_CPGL_84AAB609");
    }
    else if (auto016E94AD_val == "Karax") {
        return StringExternal("Param/Value/lib_CPGL_07A2EBD0");
    }
    else if (auto016E94AD_val == "Abathur") {
        return StringExternal("Param/Value/lib_CPGL_AAB1F2C7");
    }
    else if (auto016E94AD_val == "Alarak") {
        return StringExternal("Param/Value/lib_CPGL_058AA8FF");
    }
    else if (auto016E94AD_val == "Nova") {
        return StringExternal("Param/Value/lib_CPGL_DF630EBD");
    }
    else if (auto016E94AD_val == "Stukov") {
        return StringExternal("Param/Value/lib_CPGL_2D981726");
    }
    else if (auto016E94AD_val == "Fenix") {
        return StringExternal("Param/Value/lib_CPGL_A87B0A93");
    }
    else if (auto016E94AD_val == "Dehaka") {
        return StringExternal("Param/Value/lib_CPGL_05F61882");
    }
    else if (auto016E94AD_val == "Horner") {
        return StringExternal("Param/Value/lib_CPGL_7C5BF6C4");
    }
    else if (auto016E94AD_val == "Tychus") {
        return StringExternal("Param/Value/lib_CPGL_E06700EF");
    }
    else if (auto016E94AD_val == "Zeratul") {
        return StringExternal("Param/Value/lib_CPGL_2696C04C");
    }
    else if (auto016E94AD_val == "Stetmann") {
        return StringExternal("Param/Value/lib_CPGL_B7625C16");
    }
    else if (auto016E94AD_val == "Mengsk") {
        return StringExternal("Param/Value/lib_CPGL_48569937");
    }
    else {
        return StringExternal("Param/Value/lib_CPGL_C28D24EC");
    }
}

string libCPGL_gf_GetCommanderDataRace (int lp_player) {
    // Automatic Variable Declarations
    string autoF168F115_val;

    // Implementation
    autoF168F115_val = libCPGL_gv_commander[lp_player].lv_commander;
    if (autoF168F115_val == "Raynor") {
        return "Terr";
    }
    else if (autoF168F115_val == "Kerrigan") {
        return "Zerg";
    }
    else if (autoF168F115_val == "Artanis") {
        return "Prot";
    }
    else if (autoF168F115_val == "Swann") {
        return "Terr";
    }
    else if (autoF168F115_val == "Zagara") {
        return "Zerg";
    }
    else if (autoF168F115_val == "Vorazun") {
        return "Prot";
    }
    else if (autoF168F115_val == "Karax") {
        return "Prot";
    }
    else if (autoF168F115_val == "Abathur") {
        return "Zerg";
    }
    else if (autoF168F115_val == "Alarak") {
        return "Prot";
    }
    else if (autoF168F115_val == "Nova") {
        return "Terr";
    }
    else if (autoF168F115_val == "Stukov") {
        return "Zerg";
    }
    else if (autoF168F115_val == "Fenix") {
        return "Prot";
    }
    else if (autoF168F115_val == "Dehaka") {
        return "Zerg";
    }
    else if (autoF168F115_val == "Horner") {
        return "Terr";
    }
    else if (autoF168F115_val == "Tychus") {
        return "Terr";
    }
    else if (autoF168F115_val == "Zeratul") {
        return "Prot";
    }
    else if (autoF168F115_val == "Stetmann") {
        return "Zerg";
    }
    else if (autoF168F115_val == "Mengsk") {
        return "Terr";
    }
    else {
        return "Neut";
    }
}

string libCPGL_gf_GetCommanderDataSpawnRace (int lp_player) {
    // Automatic Variable Declarations
    string autoD8A31D7C_val;

    // Implementation
    autoD8A31D7C_val = libCPGL_gv_commander[lp_player].lv_commander;
    if (autoD8A31D7C_val == "Raynor") {
        return "Terr";
    }
    else if (autoD8A31D7C_val == "Kerrigan") {
        return "Zerg";
    }
    else if (autoD8A31D7C_val == "Artanis") {
        return "Prot";
    }
    else if (autoD8A31D7C_val == "Swann") {
        return "Terr";
    }
    else if (autoD8A31D7C_val == "Zagara") {
        return "Zerg";
    }
    else if (autoD8A31D7C_val == "Vorazun") {
        return "Prot";
    }
    else if (autoD8A31D7C_val == "Karax") {
        return "Prot";
    }
    else if (autoD8A31D7C_val == "Abathur") {
        return "Zerg";
    }
    else if (autoD8A31D7C_val == "Alarak") {
        return "Prot";
    }
    else if (autoD8A31D7C_val == "Nova") {
        return "Terr";
    }
    else if (autoD8A31D7C_val == "Stukov") {
        return "InfT";
    }
    else if (autoD8A31D7C_val == "Fenix") {
        return "Prot";
    }
    else if (autoD8A31D7C_val == "Dehaka") {
        return "PZrg";
    }
    else if (autoD8A31D7C_val == "Horner") {
        return "TerH";
    }
    else if (autoD8A31D7C_val == "Tychus") {
        return "TerT";
    }
    else if (autoD8A31D7C_val == "Zeratul") {
        return "Prot";
    }
    else if (autoD8A31D7C_val == "Stetmann") {
        return "ZerM";
    }
    else if (autoD8A31D7C_val == "Mengsk") {
        return "TerM";
    }
    else {
        return "Neut";
    }
}

bool libCPGL_gf_CommanderPrestigeComparison (string lp_commander, int lp_prestigeLevel, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPGL_gv_commander[lp_player].lv_commander == lp_commander) && (libCPGL_gv_commander[lp_player].lv_prestigeLevel == lp_prestigeLevel)) {
        return true;
    }
    else {
        return false;
    }
}

int libCPGL_gf_AttributePrestigeLevel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((GameAttributePlayerValue("19", lp_player) == "0004") || (GameAttributePlayerValue("19", lp_player) == "0004") || (GameAttributePlayerValue("20", lp_player) == "0004") || (GameAttributePlayerValue("14", lp_player) == "0004") || (GameAttributePlayerValue("24", lp_player) == "0004") || (GameAttributePlayerValue("23", lp_player) == "0004") || (GameAttributePlayerValue("25", lp_player) == "0004") || (GameAttributePlayerValue("18", lp_player) == "0004") || (GameAttributePlayerValue("13", lp_player) == "0004") || (GameAttributePlayerValue("29", lp_player) == "0004") || (GameAttributePlayerValue("21", lp_player) == "0004") || (GameAttributePlayerValue("9", lp_player) == "0004") || (GameAttributePlayerValue("28", lp_player) == "0004") || (GameAttributePlayerValue("22", lp_player) == "0004") || (GameAttributePlayerValue("15", lp_player) == "0004") || (GameAttributePlayerValue("26", lp_player) == "0004") || (GameAttributePlayerValue("17", lp_player) == "0004") || (GameAttributePlayerValue("16", lp_player) == "0004") || (GameAttributePlayerValue("27", lp_player) == "0004"))) {
        return 0;
    }
    else if (((GameAttributePlayerValue("19", lp_player) == "0001") || (GameAttributePlayerValue("20", lp_player) == "0001") || (GameAttributePlayerValue("14", lp_player) == "0001") || (GameAttributePlayerValue("24", lp_player) == "0001") || (GameAttributePlayerValue("23", lp_player) == "0001") || (GameAttributePlayerValue("25", lp_player) == "0001") || (GameAttributePlayerValue("18", lp_player) == "0001") || (GameAttributePlayerValue("13", lp_player) == "0001") || (GameAttributePlayerValue("29", lp_player) == "0001") || (GameAttributePlayerValue("21", lp_player) == "0001") || (GameAttributePlayerValue("9", lp_player) == "0001") || (GameAttributePlayerValue("28", lp_player) == "0001") || (GameAttributePlayerValue("22", lp_player) == "0001") || (GameAttributePlayerValue("15", lp_player) == "0001") || (GameAttributePlayerValue("26", lp_player) == "0001") || (GameAttributePlayerValue("17", lp_player) == "0001") || (GameAttributePlayerValue("16", lp_player) == "0001") || (GameAttributePlayerValue("27", lp_player) == "0001"))) {
        return 1;
    }
    else if (((GameAttributePlayerValue("19", lp_player) == "0002") || (GameAttributePlayerValue("20", lp_player) == "0002") || (GameAttributePlayerValue("14", lp_player) == "0002") || (GameAttributePlayerValue("24", lp_player) == "0002") || (GameAttributePlayerValue("23", lp_player) == "0002") || (GameAttributePlayerValue("25", lp_player) == "0002") || (GameAttributePlayerValue("18", lp_player) == "0002") || (GameAttributePlayerValue("13", lp_player) == "0002") || (GameAttributePlayerValue("29", lp_player) == "0002") || (GameAttributePlayerValue("21", lp_player) == "0002") || (GameAttributePlayerValue("9", lp_player) == "0002") || (GameAttributePlayerValue("28", lp_player) == "0002") || (GameAttributePlayerValue("22", lp_player) == "0002") || (GameAttributePlayerValue("15", lp_player) == "0002") || (GameAttributePlayerValue("26", lp_player) == "0002") || (GameAttributePlayerValue("17", lp_player) == "0002") || (GameAttributePlayerValue("16", lp_player) == "0002") || (GameAttributePlayerValue("27", lp_player) == "0002"))) {
        return 2;
    }
    else if (((GameAttributePlayerValue("19", lp_player) == "0003") || (GameAttributePlayerValue("20", lp_player) == "0003") || (GameAttributePlayerValue("14", lp_player) == "0003") || (GameAttributePlayerValue("24", lp_player) == "0003") || (GameAttributePlayerValue("23", lp_player) == "0003") || (GameAttributePlayerValue("25", lp_player) == "0003") || (GameAttributePlayerValue("18", lp_player) == "0003") || (GameAttributePlayerValue("13", lp_player) == "0003") || (GameAttributePlayerValue("29", lp_player) == "0003") || (GameAttributePlayerValue("21", lp_player) == "0003") || (GameAttributePlayerValue("9", lp_player) == "0003") || (GameAttributePlayerValue("28", lp_player) == "0003") || (GameAttributePlayerValue("22", lp_player) == "0003") || (GameAttributePlayerValue("15", lp_player) == "0003") || (GameAttributePlayerValue("26", lp_player) == "0003") || (GameAttributePlayerValue("17", lp_player) == "0003") || (GameAttributePlayerValue("16", lp_player) == "0003") || (GameAttributePlayerValue("27", lp_player) == "0003"))) {
        return 3;
    }
    return 0;
}

string libCPGL_gf_AttributeCommander (int lp_player) {
    // Automatic Variable Declarations
    string auto4D09717E_val;

    // Implementation
    auto4D09717E_val = GameAttributePlayerValue("1", lp_player);
    if (auto4D09717E_val == "0010") {
        return "Abathur";
    }
    else if (auto4D09717E_val == "0011") {
        return "Alarak";
    }
    else if (auto4D09717E_val == "0005") {
        return "Artanis";
    }
    else if (auto4D09717E_val == "0015") {
        return "Dehaka";
    }
    else if (auto4D09717E_val == "0014") {
        return "Fenix";
    }
    else if (auto4D09717E_val == "0016") {
        return "Horner";
    }
    else if (auto4D09717E_val == "0009") {
        return "Karax";
    }
    else if (auto4D09717E_val == "0004") {
        return "Kerrigan";
    }
    else if (auto4D09717E_val == "0020") {
        return "Mengsk";
    }
    else if (auto4D09717E_val == "0012") {
        return "Nova";
    }
    else if (auto4D09717E_val == "0001") {
        return "Raynor";
    }
    else if (auto4D09717E_val == "0019") {
        return "Stetmann";
    }
    else if (auto4D09717E_val == "0013") {
        return "Stukov";
    }
    else if (auto4D09717E_val == "0006") {
        return "Swann";
    }
    else if (auto4D09717E_val == "0017") {
        return "Tychus";
    }
    else if (auto4D09717E_val == "0008") {
        return "Vorazun";
    }
    else if (auto4D09717E_val == "0007") {
        return "Zagara";
    }
    else if (auto4D09717E_val == "0018") {
        return "Zeratul";
    }
    else {
        return null;
    }
}

string libCPGL_gf_AttributeCommanderRandom () {
    // Variable Declarations
    string lv_commander;

    // Automatic Variable Declarations
    int auto27F1CE36_val;

    // Variable Initialization

    // Implementation
    auto27F1CE36_val = RandomInt(1, libCPGL_gf_CommanderMaxType());
    if (auto27F1CE36_val == 1) {
        lv_commander = "Abathur";
    }
    else if (auto27F1CE36_val == 2) {
        lv_commander = "Alarak";
    }
    else if (auto27F1CE36_val == 3) {
        lv_commander = "Artanis";
    }
    else if (auto27F1CE36_val == 4) {
        lv_commander = "Dehaka";
    }
    else if (auto27F1CE36_val == 5) {
        lv_commander = "Fenix";
    }
    else if (auto27F1CE36_val == 6) {
        lv_commander = "Horner";
    }
    else if (auto27F1CE36_val == 7) {
        lv_commander = "Karax";
    }
    else if (auto27F1CE36_val == 8) {
        lv_commander = "Kerrigan";
    }
    else if (auto27F1CE36_val == 9) {
        lv_commander = "Mengsk";
    }
    else if (auto27F1CE36_val == 10) {
        lv_commander = "Nova";
    }
    else if (auto27F1CE36_val == 11) {
        lv_commander = "Raynor";
    }
    else if (auto27F1CE36_val == 12) {
        lv_commander = "Stetmann";
    }
    else if (auto27F1CE36_val == 13) {
        lv_commander = "Stukov";
    }
    else if (auto27F1CE36_val == 14) {
        lv_commander = "Swann";
    }
    else if (auto27F1CE36_val == 15) {
        lv_commander = "Tychus";
    }
    else if (auto27F1CE36_val == 16) {
        lv_commander = "Vorazun";
    }
    else if (auto27F1CE36_val == 17) {
        lv_commander = "Zagara";
    }
    else {
        lv_commander = "Zeratul";
    }
    return lv_commander;
}

string libCPGL_gf_AttributeCommanderInstance (int lp_player) {
    // Automatic Variable Declarations
    string autoA69AFCD5_val;

    // Implementation
    autoA69AFCD5_val = GameAttributePlayerValue("1", lp_player);
    if (autoA69AFCD5_val == "0010") {
        return "ZergAbathur";
    }
    else if (autoA69AFCD5_val == "0011") {
        return "ProtossAlarak";
    }
    else if (autoA69AFCD5_val == "0005") {
        return "ProtossArtanis";
    }
    else if (autoA69AFCD5_val == "0015") {
        return "ZergDehaka";
    }
    else if (autoA69AFCD5_val == "0014") {
        return "ProtossFenix";
    }
    else if (autoA69AFCD5_val == "0016") {
        return "TerranHorner";
    }
    else if (autoA69AFCD5_val == "0009") {
        return "ProtossKarax";
    }
    else if (autoA69AFCD5_val == "0004") {
        return "ZergKerrigan";
    }
    else if (autoA69AFCD5_val == "0020") {
        return "TerranMengsk";
    }
    else if (autoA69AFCD5_val == "0012") {
        return "TerranNova";
    }
    else if (autoA69AFCD5_val == "0001") {
        return "TerranRaynor";
    }
    else if (autoA69AFCD5_val == "0019") {
        return "ZergStetmann";
    }
    else if (autoA69AFCD5_val == "0013") {
        return "ZergStukov";
    }
    else if (autoA69AFCD5_val == "0006") {
        return "TerranSwann";
    }
    else if (autoA69AFCD5_val == "0017") {
        return "TerranTychus";
    }
    else if (autoA69AFCD5_val == "0008") {
        return "ProtossVorazun";
    }
    else if (autoA69AFCD5_val == "0007") {
        return "ZergZagara";
    }
    else if (autoA69AFCD5_val == "0018") {
        return "ProtossZeratul";
    }
    else {
        return null;
    }
}

string libCPGL_gf_AttributeCommanderInstanceRandom () {
    // Variable Declarations
    string lv_commander;

    // Automatic Variable Declarations
    int autoED83D45E_val;

    // Variable Initialization

    // Implementation
    autoED83D45E_val = RandomInt(1, libCPGL_gf_CommanderMaxType());
    if (autoED83D45E_val == 1) {
        lv_commander = "ZergAbathur";
    }
    else if (autoED83D45E_val == 2) {
        lv_commander = "ProtossAlarak";
    }
    else if (autoED83D45E_val == 3) {
        lv_commander = "ProtossArtanis";
    }
    else if (autoED83D45E_val == 4) {
        lv_commander = "ZergDehaka";
    }
    else if (autoED83D45E_val == 5) {
        lv_commander = "ProtossFenix";
    }
    else if (autoED83D45E_val == 6) {
        lv_commander = "TerranHorner";
    }
    else if (autoED83D45E_val == 7) {
        lv_commander = "ProtossKarax";
    }
    else if (autoED83D45E_val == 8) {
        lv_commander = "ZergKerrigan";
    }
    else if (autoED83D45E_val == 9) {
        lv_commander = "TerranMengsk";
    }
    else if (autoED83D45E_val == 10) {
        lv_commander = "TerranNova";
    }
    else if (autoED83D45E_val == 11) {
        lv_commander = "TerranRaynor";
    }
    else if (autoED83D45E_val == 12) {
        lv_commander = "ZergStetmann";
    }
    else if (autoED83D45E_val == 13) {
        lv_commander = "ZergStukov";
    }
    else if (autoED83D45E_val == 14) {
        lv_commander = "TerranSwann";
    }
    else if (autoED83D45E_val == 15) {
        lv_commander = "TerranTychus";
    }
    else if (autoED83D45E_val == 16) {
        lv_commander = "ProtossVorazun";
    }
    else if (autoED83D45E_val == 17) {
        lv_commander = "ZergZagara";
    }
    else {
        lv_commander = "ProtossZeratul";
    }
    return lv_commander;
}

void libCPGL_gf_CalculateMainNat () {
    // Variable Declarations
    int lv_indexPlayer;
    int lv_indexEnemyPlayer;
    region lv_enemyRegion;

    // Automatic Variable Declarations
    playergroup auto0B46D57A_g;
    playergroup autoC81C7039_g;

    // Variable Initialization

    // Implementation
    auto0B46D57A_g = PlayerGroupActive();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto0B46D57A_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCPGL_gv_mainNats = null;
        libCPGL_gv_mainNatEnemy[lv_indexPlayer] = null;
        RegionAddCircle(libCPGL_gv_mainNats, true, PlayerStartLocation(lv_indexPlayer), 20.0);
        if ((GameAttributeGameValue("5") == "0001")) {
            libNtve_gf_CreateActorAtPoint("MainNatRange", PlayerStartLocation(lv_indexPlayer));
        }

        lv_enemyRegion = null;
        autoC81C7039_g = PlayerGroupAlliance(c_playerGroupEnemy, lv_indexPlayer);
        lv_indexEnemyPlayer = -1;
        while (true) {
            lv_indexEnemyPlayer = PlayerGroupNextPlayer(autoC81C7039_g, lv_indexEnemyPlayer);
            if (lv_indexEnemyPlayer < 0) { break; }
            RegionAddCircle(lv_enemyRegion, true, PlayerStartLocation(lv_indexEnemyPlayer), 20.0);
        }
        libCPGL_gv_mainNatEnemy[lv_indexPlayer] = lv_enemyRegion;
        lv_enemyRegion = null;
    }
}

region libCPGL_gf_StartingLocationsOfHumanPlayers () {
    // Automatic Variable Declarations
    // Implementation
    return libCPGL_gv_mainNats;
}

void libCPGL_gf_ResourcesInit () {
    // Variable Declarations
    fixed lv_multiplier;
    int lv_player;

    // Automatic Variable Declarations
    string autoD0C12816_val;

    // Variable Initialization

    // Implementation
    autoD0C12816_val = GameAttributeGameValue("4");
    if (autoD0C12816_val == "0001") {
        lv_multiplier = 1.0;
    }
    else if (autoD0C12816_val == "0002") {
        lv_multiplier = 2.0;
    }
    else if (autoD0C12816_val == "0003") {
        lv_multiplier = 3.0;
    }
    else if (autoD0C12816_val == "0004") {
        lv_multiplier = 4.0;
    }
    else {
    }
    libCPGL_gf_ResourceMultiply("MineralFieldMinerals750", lv_multiplier, lv_player);
    libCPGL_gf_ResourceMultiply("MineralFieldMinerals450", lv_multiplier, lv_player);
    libCPGL_gf_ResourceMultiply("AutomaticHarvestableVespene", lv_multiplier, lv_player);
    libCPGL_gf_ResourceMultiply("MineralFieldMinerals", lv_multiplier, lv_player);
    libCPGL_gf_ResourceMultiply("MineralFieldMineralsOpaque", lv_multiplier, lv_player);
    libCPGL_gf_ResourceMultiply("MineralFieldMineralsOpaque900", lv_multiplier, lv_player);
    libCPGL_gf_ResourceMultiply("HighYieldMineralFieldMinerals", lv_multiplier, lv_player);
    libCPGL_gf_ResourceMultiply("RawVespeneGeyserGas", lv_multiplier, lv_player);
    libCPGL_gf_ResourceMultiply("RawRichVespeneGeyserGas", lv_multiplier, lv_player);
    libCPGL_gf_ResourceMultiply("RawTerrazineGeyserGas", lv_multiplier, lv_player);
    libCPGL_gf_ResourceMultiply("TerrazineNodeHarvestB", lv_multiplier, lv_player);
    libCPGL_gf_ResourceMultiply("MutatorVespeneRawLowYield", lv_multiplier, lv_player);
    libCPGL_gf_ResourceMultiply("ChrysalisEgg", lv_multiplier, lv_player);
    libCPGL_gf_ResourceMultiply("HighYieldMineralFieldMinerals750", lv_multiplier, lv_player);
    libCPGL_gf_ResourceMultiply("TerrazineNodeHarvestA", lv_multiplier, lv_player);
    libCPGL_gf_ResourceMultiply("MineralFieldMineralsNoRemove", lv_multiplier, lv_player);
    libCPGL_gf_ResourceMultiply("MutatorMineralsLowYield", lv_multiplier, lv_player);
    libCPGL_gf_ResourceMultiply("HarvestableTerrazineGeyserGasProtoss", lv_multiplier, lv_player);
    libCPGL_gf_ResourceMultiply("HarvestableVespeneGeyserGasProtoss", lv_multiplier, lv_player);
    libCPGL_gf_ResourceMultiply("HarvestableRichVespeneGeyserGasZerg", lv_multiplier, lv_player);
    libCPGL_gf_ResourceMultiply("HarvestableRichVespeneGeyserGasProtoss", lv_multiplier, lv_player);
    libCPGL_gf_ResourceMultiply("HarvestableVespeneGeyserGas", lv_multiplier, lv_player);
    libCPGL_gf_ResourceMultiply("HarvestableTerrazineGeyserGas", lv_multiplier, lv_player);
    libCPGL_gf_ResourceMultiply("HarvestableRichVespeneGeyserGas", lv_multiplier, lv_player);
    libCPGL_gf_ResourceMultiply("HarvestableVespeneGeyserGasZerg", lv_multiplier, lv_player);
    libCPGL_gf_ResourceMultiply("HarvestableTerrazineGeyserGasZerg", lv_multiplier, lv_player);
}

void libCPGL_gf_ResourceMultiply (string lp_behavior, fixed lp_multiplier, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogBehavior, lp_behavior, "Capacity", lp_player, lp_multiplier, c_upgradeOperationMultiply);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogBehavior, lp_behavior, "Contents", lp_player, lp_multiplier, c_upgradeOperationMultiply);
}

void libCPGL_gf_HTCAbathur (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    CatalogFieldValueSet(c_gameCatalogAbil, "AbathurMend", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString(libCPGL_gv_hTHeroTime, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "SpawnToxicNest", "InfoArray[" + IntToString(1) + "].Charge.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime / 2.0), c_fixedPrecisionAny));
}

void libCPGL_gf_HTCAlarak (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    CatalogFieldValueSet(c_gameCatalogBehavior, "AlarakInitialReviveTimer", "Duration", lp_player, FixedToString((libCPGL_gv_hTHeroTime - 4.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "AlarakStructureOvercharge", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime / 2.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "AlarakACSummonDeathfleetTarget", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 2.0), c_fixedPrecisionAny));
}

void libCPGL_gf_HTCArtanis (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GameAttributePlayerValue("14", lp_player) == "0003")) {
        CatalogFieldValueSet(c_gameCatalogAbil, "SOAOrbitalStrikeActivate", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 2.0), c_fixedPrecisionAny));
    }
    else {
        CatalogFieldValueSet(c_gameCatalogAbil, "SOAOrbitalStrikeActivate", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime / 2.0), c_fixedPrecisionAny));
    }
    CatalogFieldValueSet(c_gameCatalogAbil, "CommanderPrestigeArtanisOrbitalStrikeShieldOverchargeTargeted", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 0.66), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "SoASuperShield", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString(libCPGL_gv_hTHeroTime, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "SOAStrafeAttackActivate", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 2.0), c_fixedPrecisionAny));
    if ((GameAttributePlayerValue("14", lp_player) == "0002")) {
        CatalogFieldValueSet(c_gameCatalogAbil, "SOAPylonPower", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 0.66), c_fixedPrecisionAny));
    }
    else {
        CatalogFieldValueSet(c_gameCatalogAbil, "SOAPylonPower", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime / 2.0), c_fixedPrecisionAny));
    }
}

void libCPGL_gf_HTCDehaka (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    CatalogFieldValueSet(c_gameCatalogBehavior, "DehakaFirstReviveTimer", "Duration", lp_player, FixedToString((libCPGL_gv_hTHeroTime / 4.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "DehakaNydusDestroyerTopBar", "InfoArray[" + IntToString(1) + "].Charge.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime / 2.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "DehakaNydusDestroyerTopBarDummy", "InfoArray[" + IntToString(1) + "].Charge.TimeStart", lp_player, FixedToString((lp_player / 2.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "DehakaDakrunTopBar", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((lp_player * 2.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "DehakaGlevigTopBar", "InfoArray[" + IntToString(1) + "].Charge.TimeStart", lp_player, FixedToString((lp_player * 2.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "DehakaMurvarTopBar", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((lp_player * 2.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "DehakaDeepTunnel", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((lp_player * 1.5), c_fixedPrecisionAny));
}

void libCPGL_gf_HTCFenix (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    CatalogFieldValueSet(c_gameCatalogAbil, "SOASummonFenix", "Cost[" + IntToString(1) + "].Cooldown.TimeStart", lp_player, FixedToString(libCPGL_gv_hTHeroTime, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "SOASummonFenixArbiter", "Cost[" + IntToString(1) + "].Cooldown.TimeStart", lp_player, FixedToString(libCPGL_gv_hTHeroTime, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "SOASummonFenixDragoon", "Cost[" + IntToString(1) + "].Cooldown.TimeStart", lp_player, FixedToString(libCPGL_gv_hTHeroTime, c_fixedPrecisionAny));
}

void libCPGL_gf_HTCHH (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    CatalogFieldValueSet(c_gameCatalogAbil, "HHTrainTopBar", "InfoArray[" + IntToString(1) + "].Charge.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime / 2.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "HHTrainTopBar", "InfoArray[" + IntToString(2) + "].Charge.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime / 2.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "HHSummonMercenarySpaceStation", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 2.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "HornerAirFleetActivate", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 2.0), c_fixedPrecisionAny));
}

void libCPGL_gf_HTCKarax (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    CatalogFieldValueSet(c_gameCatalogAbil, "SOAMapWideChrono", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 2.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "SOASuperChronoMapwide", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 2.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "SOAOrbitalStrikeKarax", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 0.5), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "SOAPurifierBeam", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 2.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "SOAThermalLanceActivate", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString(libCPGL_gv_hTHeroTime, c_fixedPrecisionAny));
}

void libCPGL_gf_HTCKerrigan (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    CatalogFieldValueSet(c_gameCatalogBehavior, "KerriganFirstReviveTimer", "Duration", lp_player, FixedToString(libCPGL_gv_hTHeroTime, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "KerriganVoidCoopCrushingGripWave", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 2.0), c_fixedPrecisionAny));
}

void libCPGL_gf_HTCMengsk (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    CatalogFieldValueSet(c_gameCatalogAbil, "ArtilleryMengskGlobalExperimentalStrike", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString(libCPGL_gv_hTHeroTime, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "BunkerDepotMengskDrop", "InfoArray[" + IntToString(1) + "].Charge.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime / 2.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "MengskZergCalldownLevel1", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 0.5), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "MengskZergCalldownLevel2", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 1.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "MengskZergCalldownLevel3", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 1.5), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "MengskZergCalldownLevel4", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 2.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "NuclearAnnihilationMengsk", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 2.0), c_fixedPrecisionAny));
}

void libCPGL_gf_HTCRaynor (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    CatalogFieldValueSet(c_gameCatalogAbil, "VoidCoopSummonHyperion", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 2.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "BansheeAirstrike", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 1.5), c_fixedPrecisionAny));
}

void libCPGL_gf_HTCNova (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    CatalogFieldValueSet(c_gameCatalogBehavior, "NovaReviveTimerInitial", "Duration", lp_player, FixedToString(libCPGL_gv_hTHeroTime, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "NovaGriffinBombingRunActivate", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 2.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "NovaGriffinTransportLoadUnits", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 1.5), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "NovaReviveInstantBuyback", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 1.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "NovaDefensiveMatrixDrone", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 0.5), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "NovaCoopDecoyTarget", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 2.5), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "NovaCoopCasterNuke", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 2.5), c_fixedPrecisionAny));
}

void libCPGL_gf_HTCStetmann (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    CatalogFieldValueSet(c_gameCatalogBehavior, "GaryFirstReviveTimer", "Duration", lp_player, FixedToString(libCPGL_gv_hTHeroTime, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "GaryStetmannRecall", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 2.5), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "SuperGaryStetmannRecall", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 2.5), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "MorphToSuperGaryStetmann", "Cost.Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 2.5), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "GaryStetmannPowerTowerOverchargeEnergy", "Cost[" + IntToString(0) + "].Charge.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 1.5), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "GaryStetmannPowerTowerOverchargeHealth", "Cost[" + IntToString(0) + "].Charge.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 1.5), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "GaryStetmannPowerTowerOverchargeSpeed", "Cost[" + IntToString(0) + "].Charge.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 1.5), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "SuperGaryStetmannPowerTowerOverchargeEnergy", "Cost[" + IntToString(0) + "].Charge.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 1.5), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "SuperGaryStetmannPowerTowerOverchargeHealth", "Cost[" + IntToString(0) + "].Charge.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 1.5), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "SuperGaryStetmannPowerTowerOverchargeSpeed", "Cost[" + IntToString(0) + "].Charge.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 1.5), c_fixedPrecisionAny));
}

void libCPGL_gf_HTCStukov (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    CatalogFieldValueSet(c_gameCatalogBehavior, "StukovFirstReviveTimer", "Duration", lp_player, FixedToString(libCPGL_gv_hTHeroTime, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "SIStukovInfestStructure", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 1.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "SIStukovInfestStructureUpgraded", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 1.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "StukovSummonApocalisk", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 2.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "StukovSummonAleksander", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 2.0), c_fixedPrecisionAny));
}

void libCPGL_gf_HTCSwann (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    CatalogFieldValueSet(c_gameCatalogBehavior, "DrakkenLaserDrillBuild", "Duration", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 1.25), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "SpecialDelivery", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 1.0), c_fixedPrecisionAny));
}

void libCPGL_gf_HTCTychus (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    CatalogFieldValueSet(c_gameCatalogBehavior, "TychusReviveTimerInitial", "Duration", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 0.625), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "TychusStarportTrain", "InfoArray[" + IntToString(1) + "].Time", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 0.625), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "TychusCalldownOdinTargeted", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 2.0), c_fixedPrecisionAny));
}

void libCPGL_gf_HTCVorazun (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    CatalogFieldValueSet(c_gameCatalogAbil, "CommanderPrestigeVorazunTimeStop", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 3.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "SOATimeFreeze", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 3.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "SOADarkPylon", "InfoArray[" + IntToString(1) + "].Charge.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime / 2.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "SOAShadowGuardCalldown", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 1.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "VoidSentryBlackHole", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 1.5), c_fixedPrecisionAny));
}

void libCPGL_gf_HTCZagara (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    CatalogFieldValueSet(c_gameCatalogBehavior, "ZagaraFirstReviveTimer", "Duration", lp_player, FixedToString(libCPGL_gv_hTHeroTime, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "CommanderPrestigeZagaraZagaraDeepTunnel", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 1.5), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "ZagaraVoidCoopMassRoachDrop", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 2.0), c_fixedPrecisionAny));
}

void libCPGL_gf_HTCZeratul (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    CatalogFieldValueSet(c_gameCatalogBehavior, "ZeratulInitialReviveTimer", "Duration", lp_player, FixedToString(libCPGL_gv_hTHeroTime, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "ZeratulTopBarWarpTrain", "InfoArray[" + IntToString(1) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 1.5), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "ZeratulTopBarWarpTrain", "InfoArray[" + IntToString(2) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 1.5), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "ZeratulTopBarWarpTrain", "InfoArray[" + IntToString(3) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 1.5), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "ProphecyVision", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 1.5), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "CommanderPrestigeZeratulVoidSeeker", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 1.5), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "ZeratulTeleport", "Cost[" + IntToString(0) + "].Cooldown.TimeStart", lp_player, FixedToString((libCPGL_gv_hTHeroTime * 1.5), c_fixedPrecisionAny));
}

fixed libCPGL_gf_HTHeroTime () {
    // Automatic Variable Declarations
    string autoE5E44375_val;

    // Implementation
    autoE5E44375_val = GameAttributeGameValue("2");
    if (autoE5E44375_val == "0013") {
        return 0.0;
    }
    else if (autoE5E44375_val == "0001") {
        return 60.0;
    }
    else if (autoE5E44375_val == "0002") {
        return 120.0;
    }
    else if (autoE5E44375_val == "0003") {
        return 180.0;
    }
    else if (autoE5E44375_val == "0004") {
        return (4.0 * 60.0);
    }
    else if (autoE5E44375_val == "0005") {
        return (5.0 * 60.0);
    }
    else if (autoE5E44375_val == "0006") {
        return (6.0 * 60.0);
    }
    else if (autoE5E44375_val == "0007") {
        return (7.0 * 60.0);
    }
    else if (autoE5E44375_val == "0008") {
        return (8.0 * 60.0);
    }
    else if (autoE5E44375_val == "0009") {
        return (9.0 * 60.0);
    }
    else if (autoE5E44375_val == "0010") {
        return (10.0 * 60.0);
    }
    else if (autoE5E44375_val == "0011") {
        return (15.0 * 60.0);
    }
    else if (autoE5E44375_val == "0012") {
        return (20.0 * 60.0);
    }
    else {
        return 0.0;
    }
}

fixed libCPGL_gf_BTBuildTime () {
    // Automatic Variable Declarations
    string auto00EBC743_val;

    // Implementation
    auto00EBC743_val = GameAttributeGameValue("6");
    if (auto00EBC743_val == "0013") {
        return 0.0;
    }
    else if (auto00EBC743_val == "0001") {
        return 60.0;
    }
    else if (auto00EBC743_val == "0002") {
        return 120.0;
    }
    else if (auto00EBC743_val == "0003") {
        return 180.0;
    }
    else if (auto00EBC743_val == "0004") {
        return (4.0 * 60.0);
    }
    else if (auto00EBC743_val == "0005") {
        return (5.0 * 60.0);
    }
    else if (auto00EBC743_val == "0006") {
        return (6.0 * 60.0);
    }
    else if (auto00EBC743_val == "0007") {
        return (7.0 * 60.0);
    }
    else if (auto00EBC743_val == "0008") {
        return (8.0 * 60.0);
    }
    else if (auto00EBC743_val == "0009") {
        return (9.0 * 60.0);
    }
    else if (auto00EBC743_val == "0010") {
        return (10.0 * 60.0);
    }
    else if (auto00EBC743_val == "0011") {
        return (15.0 * 60.0);
    }
    else if (auto00EBC743_val == "0012") {
        return (20.0 * 60.0);
    }
    else {
        return 0.0;
    }
}

void libCPGL_gf_SetScreenModeCoop (int lp_mode, fixed lp_duration, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPGL_gv_cNPlayerCinematicMode[lp_player] == c_uiModeConsole) && (lp_mode != c_uiModeConsole)) {
        libCPCD_gf_GPVisibilityAuto(false, lp_player, lp_duration);
    }
    else if ((libCPGL_gv_cNPlayerCinematicMode[lp_player] != c_uiModeConsole) && (lp_mode == c_uiModeConsole)) {
        libCPCD_gf_GPVisibilityAuto(true, lp_player, lp_duration);
    }
    UISetMode(PlayerGroupSingle(lp_player), lp_mode, lp_duration);
    libCPGL_gv_cNPlayerCinematicMode[lp_player] = lp_mode;
}

void libCPGL_gf_CinematicModeCampaign (bool lp_onOff, fixed lp_duration, bool lp_waitOptions) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_onOff == true)) {
        libCPGL_gv_cNPlayersInCinematic = true;
    }
    else {
        libCPGL_gv_cNPlayersInCinematic = false;
    }
    if ((lp_waitOptions == false)) {
        libCPGL_gf_CM_CinematicModeNoWait(lp_onOff, lp_duration);
    }
    else {
        libCPGL_gf_CM_CinematicModeInternal(lp_onOff, lp_duration);
    }
}

trigger auto_libCPGL_gf_CM_CinematicModeNoWait_Trigger = null;
bool auto_libCPGL_gf_CM_CinematicModeNoWait_lp_onOff;
fixed auto_libCPGL_gf_CM_CinematicModeNoWait_lp_duration;

void libCPGL_gf_CM_CinematicModeNoWait (bool lp_onOff, fixed lp_duration) {
    auto_libCPGL_gf_CM_CinematicModeNoWait_lp_onOff = lp_onOff;
    auto_libCPGL_gf_CM_CinematicModeNoWait_lp_duration = lp_duration;

    if (auto_libCPGL_gf_CM_CinematicModeNoWait_Trigger == null) {
        auto_libCPGL_gf_CM_CinematicModeNoWait_Trigger = TriggerCreate("auto_libCPGL_gf_CM_CinematicModeNoWait_TriggerFunc");
    }

    TriggerExecute(auto_libCPGL_gf_CM_CinematicModeNoWait_Trigger, false, false);
}

bool auto_libCPGL_gf_CM_CinematicModeNoWait_TriggerFunc (bool testConds, bool runActions) {
    bool lp_onOff = auto_libCPGL_gf_CM_CinematicModeNoWait_lp_onOff;
    fixed lp_duration = auto_libCPGL_gf_CM_CinematicModeNoWait_lp_duration;

    // Automatic Variable Declarations
    // Implementation
    libCPGL_gf_CM_CinematicModeInternal(lp_onOff, lp_duration);
    return true;
}

void libCPGL_gf_CM_CinematicModeInternal (bool lp_onOff, fixed lp_duration) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoFB6F9A21_g;
    playergroup autoCAAF82DD_g;
    playergroup auto3D7BBB21_g;

    // Variable Initialization
    lv_indexPlayer = 1;

    // Implementation
    if ((lp_onOff == true)) {
        autoFB6F9A21_g = libCPGL_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoFB6F9A21_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCPCD_gf_GPVisibilityAuto(false, lv_indexPlayer, lp_duration);
        }
        libNtve_gf_CinematicMode(true, PlayerGroupAll(), lp_duration);
        UISetMode(PlayerGroupAll(), c_uiModeFullscreen, lp_duration);
        if ((lp_duration > 0.0) && (lp_duration != c_transitionDurationImmediate)) {
            Wait(lp_duration, c_timeReal);
        }

        libCPGL_gf_CNCinematicModeActivate();
        libNtve_gf_GlobalCinematicSettingFixedSeedOnOff(true, false);
        auto3D7BBB21_g = libCPGL_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto3D7BBB21_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            PlayerScoreValueEnableAll(lv_indexPlayer, true);
        }
    }
    else {
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lp_duration);
        libNtve_gf_GlobalCinematicSetting(false);
        autoCAAF82DD_g = libCPGL_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoCAAF82DD_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCPCD_gf_GPVisibilityAuto(true, lv_indexPlayer, lp_duration);
            if ((lp_duration > 0.0) && (lp_duration != c_transitionDurationImmediate)) {
                Wait(lp_duration, c_timeReal);
            }

        }
    }
}

void libCPGL_gf_CNCinematicModeActivate () {
    // Variable Declarations
    playergroup lv_validPlayers;
    int lv_pickedPlayer;

    // Automatic Variable Declarations
    playergroup auto205B1BAD_g;
    playergroup autoAF270CD9_g;
    playergroup auto6C5F61D3_g;
    playergroup auto6859E587_g;

    // Variable Initialization
    lv_validPlayers = PlayerGroupEmpty();

    // Implementation
    lv_validPlayers = PlayerGroupAll();
    auto205B1BAD_g = lv_validPlayers;
    lv_pickedPlayer = -1;
    while (true) {
        lv_pickedPlayer = PlayerGroupNextPlayer(auto205B1BAD_g, lv_pickedPlayer);
        if (lv_pickedPlayer < 0) { break; }
        if ((libNtve_gf_PlayerInCinematicMode(lv_pickedPlayer) == true)) {
            PlayerGroupRemove(lv_validPlayers, lv_pickedPlayer);
        }

    }
    if ((PlayerGroupCount(lv_validPlayers) == 0)) {
        return ;
    }

    UISetHotkeyAllowed(lv_validPlayers, c_hotkeyCameraFollow, false);
    libNtve_gf__CineModeTurnOnOffForPlayerGroup(lv_validPlayers, true);
    libNtve_gf__CineModeHideUI(lv_validPlayers);
    CinematicMode(lv_validPlayers, true, 0.0);
    UISetCursorVisible(lv_validPlayers, false);
    libNtve_gf_ShowHidePlacementModels(false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Cinematic, lv_validPlayers, MaxF(0.0, 1.5));
    autoAF270CD9_g = lv_validPlayers;
    lv_pickedPlayer = -1;
    while (true) {
        lv_pickedPlayer = PlayerGroupNextPlayer(autoAF270CD9_g, lv_pickedPlayer);
        if (lv_pickedPlayer < 0) { break; }
        UISetMode(PlayerGroupSingle(lv_pickedPlayer), c_uiModeLetterboxed, 0.0);
    }
    auto6C5F61D3_g = lv_validPlayers;
    lv_pickedPlayer = -1;
    while (true) {
        lv_pickedPlayer = PlayerGroupNextPlayer(auto6C5F61D3_g, lv_pickedPlayer);
        if (lv_pickedPlayer < 0) { break; }
        PlayerPauseAllCharges(lv_pickedPlayer, true);
        PlayerPauseAllCooldowns(lv_pickedPlayer, true);
    }
    auto6859E587_g = lv_validPlayers;
    lv_pickedPlayer = -1;
    while (true) {
        lv_pickedPlayer = PlayerGroupNextPlayer(auto6859E587_g, lv_pickedPlayer);
        if (lv_pickedPlayer < 0) { break; }
        PlayerScoreValueEnableAll(lv_pickedPlayer, false);
    }
    UIFlyerHelperOverride(lv_validPlayers, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayNone);
    TriggerSendEvent("CinematicModeOn");
}

bool libCPGL_gf_PlayerInCinematicModeCampaign2 () {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoC4432589_g;

    // Variable Initialization

    // Implementation
    autoC4432589_g = libCPGL_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoC4432589_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libNtve_gf_PlayerInCinematicMode(lv_indexPlayer) == true)) {
            return true;
        }

    }
    return false;
}

trigger auto_libCPGL_gf_CU_UpdateObjectivePanel_Trigger = null;

void libCPGL_gf_CU_UpdateObjectivePanel () {
    if (auto_libCPGL_gf_CU_UpdateObjectivePanel_Trigger == null) {
        auto_libCPGL_gf_CU_UpdateObjectivePanel_Trigger = TriggerCreate("auto_libCPGL_gf_CU_UpdateObjectivePanel_TriggerFunc");
    }

    TriggerExecute(auto_libCPGL_gf_CU_UpdateObjectivePanel_Trigger, false, false);
}

bool auto_libCPGL_gf_CU_UpdateObjectivePanel_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPGL_gv_cDMissionObjectivePanelRunning == false)) {
        libCPGL_gv_cDMissionObjectivePanelRunning = true;
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
        libCPGL_gv_cDMissionUIContainer = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/ObjectivePanel");
        libCPGL_gv_cDMissionObjectivePanel = DialogControlLastCreated();
        while (true) {
            if ((libCPGL_gv_cDMissionObjectivePanel != c_invalidDialogControlId) && (libCPGL_gf_PlayerInCinematicModeCampaign2() == false) && (libCPGL_gf_GameIsOver() == false)) {
                if ((libCPGL_gf_PortraitisVisibleforHP() == true) && (libCPGL_gf_HeroPanelIsVisibleHP() == true)) {
                    libNtve_gf_SetDialogItemAlphaMask(libCPGL_gv_cDMissionObjectivePanel, "@UI/ObjectivePanelMaskTwoHeroes", libCPGL_gf_HumanPlayers());
                }
                else if ((libCPGL_gf_PortraitisVisibleforHP() == true) && ((libCPGL_gf_HeroPanelSlotIsVisibleHP(1) == true) || (libCPGL_gf_HeroPanelSlotIsVisibleHP(2) == true))) {
                    libNtve_gf_SetDialogItemAlphaMask(libCPGL_gv_cDMissionObjectivePanel, "@UI/ObjectivePanelMask", libCPGL_gf_HumanPlayers());
                }
                else if (((libCPGL_gf_PortraitisVisibleforHP() == true) || ((libCPGL_gf_HeroPanelSlotIsVisibleHP(1) == true) || (libCPGL_gf_HeroPanelSlotIsVisibleHP(2) == true)))) {
                    libNtve_gf_SetDialogItemAlphaMask(libCPGL_gv_cDMissionObjectivePanel, "", libCPGL_gf_HumanPlayers());
                }
            }

            Wait(0.5, c_timeGame);
        }
    }

    return true;
}

bool libCPGL_gf_HeroPanelIsVisibleHP () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    playergroup autoE04C0D9C_g;

    // Variable Initialization

    // Implementation
    autoE04C0D9C_g = libCPGL_gf_HumanPlayers();
    lv_index = -1;
    while (true) {
        lv_index = PlayerGroupNextPlayer(autoE04C0D9C_g, lv_index);
        if (lv_index < 0) { break; }
        if ((libCPCD_gv_heroPanel[1] != c_invalidDialogControlId) && (DialogControlIsVisible(libCPCD_gv_heroPanel[1], lv_index) == true) && (libCPCD_gv_heroPanel[2] != c_invalidDialogControlId) && (DialogControlIsVisible(libCPCD_gv_heroPanel[2], lv_index) == true)) {
            return true;
        }

    }
    return false;
}

bool libCPGL_gf_HeroPanelSlotIsVisibleHP (int lp_slot) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    playergroup auto43C77630_g;

    // Variable Initialization

    // Implementation
    auto43C77630_g = libCPGL_gf_HumanPlayers();
    lv_index = -1;
    while (true) {
        lv_index = PlayerGroupNextPlayer(auto43C77630_g, lv_index);
        if (lv_index < 0) { break; }
        if ((libCPCD_gv_heroPanel[lp_slot] != c_invalidDialogControlId) && (DialogControlIsVisible(libCPCD_gv_heroPanel[lp_slot], lv_index) == true)) {
            return true;
        }

    }
    return false;
}

bool libCPGL_gf_PortraitisVisibleforHP () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    playergroup autoCC8AA0F7_g;

    // Variable Initialization

    // Implementation
    autoCC8AA0F7_g = libCPGL_gf_HumanPlayers();
    lv_index = -1;
    while (true) {
        lv_index = PlayerGroupNextPlayer(autoCC8AA0F7_g, lv_index);
        if (lv_index < 0) { break; }
        if ((PortraitVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), lv_index) == true)) {
            return true;
        }

    }
    return false;
}

void libCPGL_gf_CU_HelpSetupGeneralTips () {
    // Variable Declarations
    int lv_i;
    string lv_generalTipInstance;

    // Automatic Variable Declarations
    const int autoC3E5924F_ae = 1;
    const int autoC3E5924F_ai = -1;

    // Variable Initialization

    // Implementation
    lv_i = UserDataInstanceCount("GeneralTips");
    for ( ; ( (autoC3E5924F_ai >= 0 && lv_i <= autoC3E5924F_ae) || (autoC3E5924F_ai < 0 && lv_i >= autoC3E5924F_ae) ) ; lv_i += autoC3E5924F_ai ) {
        lv_generalTipInstance = UserDataInstance("GeneralTips", lv_i);
        HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(libCOOC_gf_CC_CommanderGeneralTipTitle(lv_generalTipInstance), libNtve_ge_TipType_NormalTip), libCOOC_gf_CC_CommanderGeneralTipDetails(lv_generalTipInstance), StringToText(""), libCOOC_gf_CC_CommanderGeneralTipIcon(lv_generalTipInstance));
    }
}

void libCPGL_gf_CU_HelpSetupMutatorTips () {
    // Variable Declarations
    string lv_indexMutator;

    // Automatic Variable Declarations
    int auto6FC58301_ai;
    int auto6FC58301_ae;

    // Variable Initialization

    // Implementation
    auto6FC58301_ai = 1;
    auto6FC58301_ae = UserDataInstanceCount("Mutators")+1;
    while (auto6FC58301_ai < auto6FC58301_ae) {
        lv_indexMutator = UserDataInstance("Mutators", auto6FC58301_ai);
        auto6FC58301_ai = auto6FC58301_ai+1;
        if ((libCOMU_gf_MutatorIsEnabled(lv_indexMutator) == true)) {
            HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(libCOMU_gf_CT_MutatorName(lv_indexMutator), libNtve_ge_TipType_NormalTip), libCOMU_gf_CT_MutatorDescription(lv_indexMutator), StringToText(""), libCOMU_gf_CT_MutatorIcon(lv_indexMutator));
        }

    }
}

void libCPGL_gf_SetUnitInfoTextCampaignDetailed (unit lp_unit, text lp_info, text lp_tip, text lp_subTip) {
    // Variable Declarations
    text lv_tipStyled;
    text lv_subTipStyled;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_tip != null)) {
        TextExpressionSetToken("Param/Expression/lib_CPGL_DFD8302A", "A", lp_tip);
        lv_tipStyled = TextExpressionAssemble("Param/Expression/lib_CPGL_DFD8302A");
    }
    else {
        lv_tipStyled = lp_tip;
    }
    if ((lp_subTip != null)) {
        TextExpressionSetToken("Param/Expression/lib_CPGL_5175D9D1", "A", lp_subTip);
        lv_subTipStyled = TextExpressionAssemble("Param/Expression/lib_CPGL_5175D9D1");
    }
    else {
        lv_subTipStyled = lp_subTip;
    }
    UnitSetInfoText(lp_unit, lp_info, lv_tipStyled, lv_subTipStyled);
    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void libCPGL_gf_SetUnitInfoTextCampaign (unit lp_unit, text lp_info, text lp_tip, text lp_subTip) {
    // Variable Declarations
    text lv_tipStyled;
    text lv_subTipStyled;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_tip != null)) {
        TextExpressionSetToken("Param/Expression/lib_CPGL_ADD942FA", "A", lp_tip);
        lv_tipStyled = TextExpressionAssemble("Param/Expression/lib_CPGL_ADD942FA");
    }
    else {
        lv_tipStyled = lp_tip;
    }
    if ((lp_subTip != null)) {
        TextExpressionSetToken("Param/Expression/lib_CPGL_AB2F6927", "A", lp_subTip);
        lv_subTipStyled = TextExpressionAssemble("Param/Expression/lib_CPGL_AB2F6927");
    }
    else {
        lv_subTipStyled = lp_subTip;
    }
    UnitSetInfoText(lp_unit, lp_info, lv_tipStyled, lv_subTipStyled);
    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void libCPGL_gf_CM_ApplyCampaignTeachingToUnit (unit lp_teachUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetType(lp_teachUnit) == "DrakkenLaserDrillCoop")) {
        TextTagCreate(StringExternal("Param/Value/lib_CPGL_C57FA5C0"), 18, UnitGetPosition(lp_teachUnit), 1.0, true, false, PlayerGroupSingle(UnitGetOwner(lp_teachUnit)));
        TextTagAttachToUnit(TextTagLastCreated(), lp_teachUnit, 2.5);
        libCPGL_gv_cM_DrillTextTagCreated = TextTagLastCreated();
        TriggerEnable(libCPGL_gt_CM_CampaignLaserDrillSelected, true);
        TriggerEnable(libCPGL_gt_CM_CampaignLaserDrillDamaged, true);
    }

    if ((UnitGetType(lp_teachUnit) == "SolarForge") && (TechTreeUpgradeCount(UnitGetOwner(lp_teachUnit), "KaraxCommander", c_techCountCompleteOnly) == 1)) {
        TextTagCreate(StringExternal("Param/Value/lib_CPGL_D3D4C852"), 18, UnitGetPosition(lp_teachUnit), 1.0, true, false, PlayerGroupSingle(UnitGetOwner(lp_teachUnit)));
        TextTagAttachToUnit(TextTagLastCreated(), lp_teachUnit, 2.5);
        libCPGL_gv_cM_SolarForgeTextTag = TextTagLastCreated();
        TriggerEnable(libCPGL_gt_CM_CampaignSolarForgeSelected, true);
    }

}

void libCPGL_gf_CM_UseUnitNameAsUnitTip (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "ZergDropPod") || (UnitGetType(lp_unit) == "ZergDropPodLarge") || (UnitGetType(lp_unit) == "TerranDropPod") || (UnitGetType(lp_unit) == "ZergDropPodCreep"))) {
        return ;
    }

    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void libCPGL_gf_LoadPlayer1Vars (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((GameAttributePlayerValue("[bnet:Liberty (Mod)/0.0/999,file:Mods/Liberty.SC2Mod]3013", lp_player) == "0003")) {
        libCPGL_gv_commander[lp_player].lv_commander = libCPGL_gf_AttributeCommanderRandom();
        libCPGL_gv_commander[lp_player].lv_commanderInstance = libCPGL_gf_AttributeCommanderInstanceRandom();
    }
    else {
        libCPGL_gv_commander[lp_player].lv_commander = libCPGL_gf_AttributeCommander(lp_player);
        libCPGL_gv_commander[lp_player].lv_commanderInstance = libCPGL_gf_AttributeCommanderInstance(lp_player);
    }
    libCPGL_gv_commander[lp_player].lv_commanderName = libCPGL_gf_GetCommanderDataName(lp_player);
    libCPGL_gv_commander[lp_player].lv_race = libCPGL_gf_GetCommanderDataRace(lp_player);
    libCPGL_gv_commander[lp_player].lv_spawnRace = libCPGL_gf_GetCommanderDataSpawnRace(lp_player);
}

void libCPGL_gf_LoadPlayer2PrestigeCmdVar (int lp_player) {
    // Automatic Variable Declarations
    int auto7246E995_val;
    int auto006B648D_val;
    int autoB7200F3D_val;
    int autoA43A3D70_val;
    int auto5DA13160_val;
    int auto43FF519D_val;
    int autoF918CED1_val;
    int auto31A3838F_val;
    int autoE60B994C_val;
    int auto2E2CC1EE_val;
    int autoE65E9C2E_val;
    int auto86E47813_val;
    int autoC6C765FD_val;
    int autoF9045EF5_val;
    int auto81EA4558_val;
    int autoC016E2D9_val;
    int autoA16F1347_val;
    int auto15B5946A_val;

    // Implementation
    if ((GameAttributeGameValue("3") == "0001")) {
        if ((GameAttributePlayerValue("10", lp_player) == "0001")) {
            libCPGL_gv_commander[lp_player].lv_prestigeLevel = RandomInt(0, libCPGL_gf_CommanderPrestigeCount(lp_player, libCPGL_gv_commander[lp_player].lv_commander));
        }

        libCPGL_gv_commander[lp_player].lv_prestigeLevel = libCPGL_gf_AttributePrestigeLevel(lp_player);
    }

    libCPGL_gv_commander[lp_player].lv_heroAllowed = false;
    libCPGL_gv_commander[lp_player].lv_heroUnitType = null;
    libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[1] = null;
    libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[2] = null;
    libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[3] = null;
    libCPGL_gv_commander[lp_player].lv_heroBeaconType = null;
    libCPGL_gv_commander[lp_player].lv_heroReviveCommand = null;
    libCPGL_gv_commander[lp_player].lv_heroReviveLink = null;
    libCPGL_gv_commander[lp_player].lv_heroStructureAllowed = false;
    libCPGL_gv_commander[lp_player].lv_heroStructureType = null;
    libCPGL_gv_commander[lp_player].lv_heroBeaconIsHeroStructure = false;
    if ((GameAttributeGameValue("3") == "0002")) {
        return ;
    }

    libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_890A5288");
    if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Abathur")) {
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        libCPGL_gv_commander[lp_player].lv_heroAllowed = false;
        libCPGL_gv_commander[lp_player].lv_heroUnitType = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[1] = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[2] = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[3] = null;
        libCPGL_gv_commander[lp_player].lv_heroBeaconType = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveCommand = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveLink = null;
        libCPGL_gv_commander[lp_player].lv_heroStructureAllowed = false;
        libCPGL_gv_commander[lp_player].lv_heroStructureType = null;
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitAllowed = true;
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitType = "CoopCasterAbathur";
        auto7246E995_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (auto7246E995_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_3BEC2931");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-abathur.dds";
        }
        else if (auto7246E995_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_C9324458");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_1D873E39");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-zerg-abathur-biomass.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeAbathurBiomass", 1);
        }
        else if (auto7246E995_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_4D8C4380");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_370A9A8B");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-zerg-abathur-locustinjection.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeAbathurDeepTunnel", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeAbathurDeepTunnelLevel12", 1);
        }
        else if (auto7246E995_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_7EFAA918");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_558C1D38");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-zerg-abathur-symbiote.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeAbathurUltEvo", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeAbathurUltEvoLevel15", 1);
        }
        else if (auto7246E995_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Alarak")) {
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        libCPGL_gv_commander[lp_player].lv_heroAllowed = true;
        libCPGL_gv_commander[lp_player].lv_heroUnitType = "AlarakCoop";
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[1] = "AlarakInitialReviveTimer";
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[2] = "AlarakReviveTimer";
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[3] = null;
        libCPGL_gv_commander[lp_player].lv_heroBeaconType = "AlarakReviveBeacon";
        libCPGL_gv_commander[lp_player].lv_heroReviveCommand = AbilityCommand("AlarakRevive", 0);
        libCPGL_gv_commander[lp_player].lv_heroReviveLink = "Abil/AlarakRevive";
        libCPGL_gv_commander[lp_player].lv_heroStructureAllowed = false;
        libCPGL_gv_commander[lp_player].lv_heroStructureType = null;
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitAllowed = true;
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitType = "CoopCasterAlarak";
        auto006B648D_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (auto006B648D_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_CF8878AC");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-alarak.dds";
        }
        else if (auto006B648D_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_9AFDED6F");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_A7D957B3");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-alarak-reliquaryofsouls.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeAlarakMech", 1);
        }
        else if (auto006B648D_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_A897D081");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_F0CA67BB");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-protoss-alarak-empoweraoeattacks.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeAlarakEmpowerMe", 1);
        }
        else if (auto006B648D_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_EF8FDD0D");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_81E63F2A");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-protoss-alarak-deathfleet.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeAlarakDeathFleet", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeAlarakDeathFleetPerk", 1);
        }
        else if (auto006B648D_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Artanis")) {
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 200;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        libCPGL_gv_commander[lp_player].lv_heroAllowed = false;
        libCPGL_gv_commander[lp_player].lv_heroUnitType = "ArtanisVoid";
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[1] = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[2] = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[3] = null;
        libCPGL_gv_commander[lp_player].lv_heroBeaconType = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveCommand = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveLink = null;
        libCPGL_gv_commander[lp_player].lv_heroStructureAllowed = false;
        libCPGL_gv_commander[lp_player].lv_heroStructureType = null;
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitAllowed = true;
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitType = "SoACasterArtanis";
        autoB7200F3D_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (autoB7200F3D_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-artanis.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_F0FA711F");
        }
        else if (autoB7200F3D_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_9A7BCC53");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_047E07EA");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\talent-artanis-level01-swiftretribution.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeArtanisCombatAbilities", 1);
        }
        else if (autoB7200F3D_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_88DD99D5");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_8DA6730D");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-artanis-pylonpower.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeArtanisPowerField", 1);
        }
        else if (autoB7200F3D_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_E3FAB19F");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_9E310C75");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-karax-orbitalassault_stun.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeArtanisOrbitalStrikes", 1);
        }
        else if (autoB7200F3D_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Dehaka")) {
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 200;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        libCPGL_gv_commander[lp_player].lv_heroAllowed = true;
        libCPGL_gv_commander[lp_player].lv_heroUnitType = "DehakaCoop";
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[1] = "DehakaFirstReviveTimer";
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[2] = "DehakaNormalReviveTimer";
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[3] = null;
        libCPGL_gv_commander[lp_player].lv_heroBeaconType = "DehakaReviveCocoon";
        libCPGL_gv_commander[lp_player].lv_heroReviveCommand = AbilityCommand("DehakaRevive", 0);
        libCPGL_gv_commander[lp_player].lv_heroReviveLink = "Abil/DehakaRevive";
        libCPGL_gv_commander[lp_player].lv_heroStructureAllowed = true;
        libCPGL_gv_commander[lp_player].lv_heroStructureType = "DehakaCoopReviveCocoon";
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitAllowed = true;
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitType = "CoopCasterDehaka";
        libCPGL_gv_commander[lp_player].lv_heroBeaconIsHeroStructure = true;
        autoA43A3D70_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (autoA43A3D70_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-dehaka.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_DD12A3E8");
        }
        else if (autoA43A3D70_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_74446B6D");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_2FCFDB7D");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-zerg-dehaka-consume.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeDehakaDevour", 1);
        }
        else if (autoA43A3D70_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_F6360A52");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_DDCD8F07");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-zerg-dehaka-superroar.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeDehakaPackLeaders", 1);
        }
        else if (autoA43A3D70_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_B08EB98C");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_3B429AF5");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-progression-zerg-dehaka-1-dehakaunlock.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeDehakaClone", 1);
        }
        else if (autoA43A3D70_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Fenix")) {
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        libCPGL_gv_commander[lp_player].lv_heroAllowed = false;
        libCPGL_gv_commander[lp_player].lv_heroUnitType = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[1] = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[2] = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[3] = null;
        libCPGL_gv_commander[lp_player].lv_heroBeaconType = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveCommand = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveLink = null;
        libCPGL_gv_commander[lp_player].lv_heroStructureAllowed = true;
        libCPGL_gv_commander[lp_player].lv_heroStructureType = "FenixAltarOfPsiStorms";
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitAllowed = true;
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitType = "SoACasterFenix";
        auto5DA13160_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (auto5DA13160_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-fenix.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_10EC69A4");
        }
        else if (auto5DA13160_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_6330F1FE");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_5296B0BA");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-progression-protoss-fenix-1-zealotsuit.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeFenixSuitSwap", 1);
        }
        else if (auto5DA13160_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_888CBCE1");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_D486EBF1");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-progression-protoss-fenix-15-networksuperiority.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeFenixDataWeb", 1);
        }
        else if (auto5DA13160_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_AEAFE875");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_E0B41E32");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-progression-protoss-fenix-11-championtransferbuff.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeFenixAvenger", 1);
        }
        else if (auto5DA13160_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Horner")) {
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        libCPGL_gv_commander[lp_player].lv_heroAllowed = false;
        libCPGL_gv_commander[lp_player].lv_heroUnitType = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[1] = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[2] = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[3] = null;
        libCPGL_gv_commander[lp_player].lv_heroBeaconType = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveCommand = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveLink = null;
        libCPGL_gv_commander[lp_player].lv_heroStructureAllowed = true;
        libCPGL_gv_commander[lp_player].lv_heroStructureType = "HHStarport";
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitAllowed = true;
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitType = "CoopCasterHorner";
        auto43FF519D_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (auto43FF519D_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-horner.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_7453CE11");
        }
        else if (auto43FF519D_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_E6F0329F");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_08CC4A42");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-top-hornerhan-magmines.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeHornerMagMines", 1);
        }
        else if (auto43FF519D_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_EB25E691");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_DB6E3241");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-progression-hornerhan-1-precisionchaos.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeHornerStarport", 1);
        }
        else if (auto43FF519D_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_22C28ADB");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_2FE97521");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-progression-hornerhan-2-bomberplatforms.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeHornerBombingPlatforms", 1);
        }
        else if (auto43FF519D_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Karax")) {
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        libCPGL_gv_commander[lp_player].lv_heroAllowed = false;
        libCPGL_gv_commander[lp_player].lv_heroUnitType = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[1] = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[2] = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[3] = null;
        libCPGL_gv_commander[lp_player].lv_heroBeaconType = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveCommand = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveLink = null;
        libCPGL_gv_commander[lp_player].lv_heroStructureAllowed = true;
        libCPGL_gv_commander[lp_player].lv_heroStructureType = "SolarForge";
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitAllowed = true;
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitType = "SoACasterKarax";
        autoF918CED1_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (autoF918CED1_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-karax.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_7D606C1D");
        }
        else if (autoF918CED1_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_E836043D");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_2C605FA7");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-spearofadun-reconstructionbeam.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeKaraxStructures", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeKaraxStructuresPerk", 1);
        }
        else if (autoF918CED1_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_8F7D17F0");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_DACA9052");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-karax-unitybarrier.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeKaraxArmy", 1);
        }
        else if (autoF918CED1_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_3897C6FB");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_6EB0150F");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-karax-solarefficiencylevel3.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeKaraxTopBar", 1);
        }
        else if (autoF918CED1_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Kerrigan")) {
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        libCPGL_gv_commander[lp_player].lv_heroAllowed = true;
        libCPGL_gv_commander[lp_player].lv_heroUnitType = "K5Kerrigan";
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[1] = "KerriganFirstReviveTimer";
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[2] = "KerriganNormalReviveTimer";
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[3] = null;
        libCPGL_gv_commander[lp_player].lv_heroBeaconType = "KerriganReviveCocoon";
        libCPGL_gv_commander[lp_player].lv_heroReviveCommand = AbilityCommand("KerriganRevive", 0);
        libCPGL_gv_commander[lp_player].lv_heroReviveLink = "Abil/KerriganRevive";
        libCPGL_gv_commander[lp_player].lv_heroStructureAllowed = false;
        libCPGL_gv_commander[lp_player].lv_heroStructureType = null;
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitAllowed = false;
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitType = null;
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeKerriganAssimilationAura", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "K5PrimalSlash", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "K5PsiStrike", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganInfestedCosmetic", 1);
        auto31A3838F_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (auto31A3838F_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-kerrigan.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_4BEA9E55");
        }
        else if (auto31A3838F_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_537455C8");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_6FF647B7");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-zerg-stukov-creepspread.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeKerriganCreep", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeKerriganCreepPerk", 1);
        }
        else if (auto31A3838F_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_CC583A27");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_610B6A90");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-kerrigan-fury.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeKerriganAbilities", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeKerriganAbilitiesPerk", 1);
        }
        else if (auto31A3838F_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_8BF7640E");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_870E428D");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-kerrigan_revive.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeKerriganAssimilationAura", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeKerriganAssimilationAuraShared", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "K5PrimalSlash", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "K5PsiStrike", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganInfestedCosmetic", 0);
        }
        else if (auto31A3838F_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Mengsk")) {
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        libCPGL_gv_commander[lp_player].lv_heroAllowed = false;
        libCPGL_gv_commander[lp_player].lv_heroUnitType = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[1] = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[2] = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[3] = null;
        libCPGL_gv_commander[lp_player].lv_heroBeaconType = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveCommand = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveLink = null;
        libCPGL_gv_commander[lp_player].lv_heroStructureAllowed = false;
        libCPGL_gv_commander[lp_player].lv_heroStructureType = null;
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitAllowed = true;
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitType = "CoopCasterMengsk";
        autoE60B994C_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (autoE60B994C_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-mengsk.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_4E050F71");
        }
        else if (autoE60B994C_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_BDDE1899");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_1E5FB760");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-progression-mengsk-04-contaminatedstrike.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeMengskArtillery", 1);
        }
        else if (autoE60B994C_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_048BB2A3");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_372229F7");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-mengsk-royalguard-mightoftheempire.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeMengskRoyalGuard", 1);
        }
        else if (autoE60B994C_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_6EAA7940");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_FFC7BF2C");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-mengsk-trooper-volunteertofight.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeMengskTroopers", 1);
        }
        else if (autoE60B994C_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Nova")) {
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 100;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 100;
        libCPGL_gv_commander[lp_player].lv_heroAllowed = true;
        libCPGL_gv_commander[lp_player].lv_heroUnitType = "NovaCoop";
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[1] = "NovaReviveTimerInitial";
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[2] = "NovaReviveTimer";
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[3] = null;
        libCPGL_gv_commander[lp_player].lv_heroBeaconType = "NovaReviveBeacon";
        libCPGL_gv_commander[lp_player].lv_heroReviveCommand = AbilityCommand("NovaRevive", 0);
        libCPGL_gv_commander[lp_player].lv_heroReviveLink = "Abil/NovaRevive";
        libCPGL_gv_commander[lp_player].lv_heroStructureAllowed = true;
        libCPGL_gv_commander[lp_player].lv_heroStructureType = "GhostAcademyNova";
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitAllowed = true;
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitType = "CoopCasterNova";
        auto2E2CC1EE_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (auto2E2CC1EE_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-nova.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_8408C957");
        }
        else if (auto2E2CC1EE_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_98B627A7");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_D8524FB1");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-terran-nova-specialordance.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeNovaBio", 1);
        }
        else if (auto2E2CC1EE_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_F1CF262C");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_1C483E1A");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-terran-nova-griffintransport.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeNovaAirlift", 1);
        }
        else if (auto2E2CC1EE_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_0B31E8DA");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_35B597C3");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-nova-tacticalstealthsuit.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeNovaSuperCloak", 1);
        }
        else if (auto2E2CC1EE_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Raynor")) {
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        libCPGL_gv_commander[lp_player].lv_heroAllowed = false;
        libCPGL_gv_commander[lp_player].lv_heroUnitType = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[1] = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[2] = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[3] = null;
        libCPGL_gv_commander[lp_player].lv_heroBeaconType = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveCommand = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveLink = null;
        libCPGL_gv_commander[lp_player].lv_heroStructureAllowed = false;
        libCPGL_gv_commander[lp_player].lv_heroStructureType = null;
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitAllowed = true;
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitType = "CoopCasterRaynor";
        autoE65E9C2E_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (autoE65E9C2E_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-raynor.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_35400202");
        }
        else if (autoE65E9C2E_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_FA423DC5");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_2E739CBF");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\talent-tychus-level12-ultimategear1.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeRaynorBio", 1);
        }
        else if (autoE65E9C2E_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_8FD6DCBB");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_D62A3085");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-terran-emergencythrusters.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeRaynorMechAfterburners", 1);
        }
        else if (autoE65E9C2E_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_1BD78D1A");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_F5552709");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\talent-raynor-level13-starportresearchbundle.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeRaynorAir", 1);
        }
        else if (autoE65E9C2E_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Stetmann")) {
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        libCPGL_gv_commander[lp_player].lv_heroAllowed = true;
        libCPGL_gv_commander[lp_player].lv_heroUnitType = "GaryStetmann";
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[1] = "GaryFirstReviveTimer";
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[2] = "GaryNormalReviveTimer";
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[3] = null;
        libCPGL_gv_commander[lp_player].lv_heroBeaconType = "GarysDen";
        libCPGL_gv_commander[lp_player].lv_heroReviveCommand = AbilityCommand("GaryRevive", 0);
        libCPGL_gv_commander[lp_player].lv_heroReviveLink = "Abil/GaryRevive";
        libCPGL_gv_commander[lp_player].lv_heroStructureAllowed = true;
        libCPGL_gv_commander[lp_player].lv_heroStructureType = "GarysDen";
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitAllowed = true;
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitType = "CoopCasterStetmann";
        libCPGL_gv_commander[lp_player].lv_heroBeaconIsHeroStructure = true;
        auto86E47813_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (auto86E47813_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-stetmann.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_838285C8");
        }
        else if (auto86E47813_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_8454F87D");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_EEA7F64C");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-stetmann-garymassteleport.dds";
            libCPGL_gv_commander[lp_player].lv_heroAllowed = false;
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeStetmannStetellites", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeStetmannStetzones", 1);
        }
        else if (auto86E47813_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_9899AFB1");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_D0E44B1A");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-progression-stetmann-15-supergarytransform.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeStetmannGary", 1);
        }
        else if (auto86E47813_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_B4E4DC94");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_31EAF838");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-stetmann-garyattackandregen.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeStetmannCombatBuff", 1);
        }
        else if (auto86E47813_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Stukov")) {
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        libCPGL_gv_commander[lp_player].lv_heroAllowed = false;
        libCPGL_gv_commander[lp_player].lv_heroUnitType = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[1] = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[2] = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[3] = null;
        libCPGL_gv_commander[lp_player].lv_heroBeaconType = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveCommand = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveLink = null;
        libCPGL_gv_commander[lp_player].lv_heroStructureAllowed = true;
        libCPGL_gv_commander[lp_player].lv_heroStructureType = "SICivilianStructure";
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitAllowed = true;
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitType = "CoopCasterStukov";
        autoC6C765FD_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (autoC6C765FD_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-stukov.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_8B0CAB52");
        }
        else if (autoC6C765FD_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_F6C08A53");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_9407996D");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-zerg-stukov-attackspeedmastery.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeStukovMech", 1);
        }
        else if (autoC6C765FD_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_AB82C93A");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_83913CD0");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-zerg-stukov-bansheeburrowregeneration.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeStukovBanshees", 1);
        }
        else if (autoC6C765FD_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_BED961DA");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_556B908C");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-zerg-stukov-bunkerresearchbundle_05.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeStukovBunkers", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeStukovBunkersPerk", 1);
        }
        else if (autoC6C765FD_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Swann")) {
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        libCPGL_gv_commander[lp_player].lv_heroAllowed = false;
        libCPGL_gv_commander[lp_player].lv_heroUnitType = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[1] = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[2] = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[3] = null;
        libCPGL_gv_commander[lp_player].lv_heroBeaconType = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveCommand = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveLink = null;
        libCPGL_gv_commander[lp_player].lv_heroStructureAllowed = true;
        libCPGL_gv_commander[lp_player].lv_heroStructureType = "DrakkenLaserDrillCoop";
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitAllowed = true;
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitType = "CoopCasterSwann";
        autoF9045EF5_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (autoF9045EF5_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-swann.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_4C86C4C8");
        }
        else if (autoF9045EF5_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_6C01856B");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_616A361C");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-swann-pulsecannon.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeSwannDrill", 1);
        }
        else if (autoF9045EF5_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_C0277982");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_01002819");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-research-zerg-perditionturret.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeSwannTurrets", 1);
        }
        else if (autoF9045EF5_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_6839B396");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_FAA0DA07");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-terran-hercules-tacticaljump.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeSwannHercules", 1);
        }
        else if (autoF9045EF5_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Tychus")) {
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 100;
        libCPGL_gv_commander[lp_player].lv_heroAllowed = false;
        libCPGL_gv_commander[lp_player].lv_heroUnitType = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[1] = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[2] = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[3] = null;
        libCPGL_gv_commander[lp_player].lv_heroBeaconType = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveCommand = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveLink = null;
        libCPGL_gv_commander[lp_player].lv_heroStructureAllowed = true;
        libCPGL_gv_commander[lp_player].lv_heroStructureType = "TychusResearchCenterUnlocked";
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitAllowed = true;
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitType = "CoopCasterTychus";
        libCPGL_gv_commander[lp_player].lv_heroBeaconIsHeroStructure = true;
        auto81EA4558_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (auto81EA4558_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-tychus.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_74C25DA7");
        }
        else if (auto81EA4558_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_ACC5A2D2");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_FF4054A7");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\talent-tychus-level02-additionaloutlaw.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeTychusSquadAbilities", 1);
        }
        else if (auto81EA4558_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_131A4683");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_61EB5D60");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-tychus-detection.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeTychusLoneWolf", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeTychusLoneWolfPerk", 1);
        }
        else if (auto81EA4558_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_987276A8");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_35D01F21");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-tychus-odin.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeTychusOdin", 1);
        }
        else if (auto81EA4558_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Vorazun")) {
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        libCPGL_gv_commander[lp_player].lv_heroAllowed = false;
        libCPGL_gv_commander[lp_player].lv_heroUnitType = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[1] = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[2] = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[3] = null;
        libCPGL_gv_commander[lp_player].lv_heroBeaconType = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveCommand = null;
        libCPGL_gv_commander[lp_player].lv_heroReviveLink = null;
        libCPGL_gv_commander[lp_player].lv_heroStructureAllowed = false;
        libCPGL_gv_commander[lp_player].lv_heroStructureType = null;
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitAllowed = true;
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitType = "SoACasterVorazun";
        autoC016E2D9_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (autoC016E2D9_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-vorazun.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_35CF701F");
        }
        else if (autoC016E2D9_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_51E91DF4");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_397EDCDD");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-vorazun-darkpylonrecall.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeVorazunEmergencyRecall", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeVorazunEmergencyRecallSeekPylon", 1);
        }
        else if (autoC016E2D9_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_367AC557");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_B9A30631");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-vorazun-placewormhole.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeVorazunStasis", 1);
        }
        else if (autoC016E2D9_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_4B459838");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_92D3574B");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\talent-vorazun-level03-shadowguarddetectionsuppression.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeVorazunTimeStop", 1);
        }
        else if (autoC016E2D9_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Zagara")) {
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 100;
        libCPGL_gv_commander[lp_player].lv_heroAllowed = true;
        libCPGL_gv_commander[lp_player].lv_heroUnitType = "ZagaraVoidCoop";
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[1] = "ZagaraFirstReviveTimer";
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[2] = "ZagaraNormalReviveTimer";
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[3] = null;
        libCPGL_gv_commander[lp_player].lv_heroBeaconType = "ZagaraReviveCocoon";
        libCPGL_gv_commander[lp_player].lv_heroReviveCommand = AbilityCommand("ZagaraRevive", 0);
        libCPGL_gv_commander[lp_player].lv_heroReviveLink = "Abil/ZagaraRevive";
        libCPGL_gv_commander[lp_player].lv_heroStructureAllowed = false;
        libCPGL_gv_commander[lp_player].lv_heroStructureType = null;
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitAllowed = false;
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitType = null;
        autoA16F1347_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (autoA16F1347_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-zagara.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_D371456E");
        }
        else if (autoA16F1347_val == 1) {
            libCPGL_gv_commander[lp_player].lv_heroAllowed = false;
            libCPGL_gv_commander[lp_player].lv_suppliesMax = 150;
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_E35EF422");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_4F367353");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\talent-zagara-level04-scourgeresearchbundle.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeZagaraMaxSupply", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeZagaraMaxSupplyScourgeCostUpgrade", 1);
        }
        else if (autoA16F1347_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_835C6C2F");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_BE8484AE");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\talent-zagara-level01-relentless.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeZagaraCorruptorsAberrations", 1);
        }
        else if (autoA16F1347_val == 3) {
            libCPGL_gv_commander[lp_player].lv_suppliesStart = 100;
            libCPGL_gv_commander[lp_player].lv_suppliesMax = 100;
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_35E62BB4");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_84EEF38A");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\talent-zagara-level15-masterspawner.dds";
            TechTreeUnitAllow(lp_player, "Overlord", false);
            TechTreeUnitAllow(lp_player, "Overseer", false);
            TechTreeAbilityAllow(lp_player, AbilityCommand("LarvaTrain", 2), false);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeZagaraZagara", 1);
        }
        else if (autoA16F1347_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Zeratul")) {
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 100;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 100;
        libCPGL_gv_commander[lp_player].lv_heroAllowed = true;
        libCPGL_gv_commander[lp_player].lv_heroUnitType = "ZeratulCoop";
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[1] = "ZeratulInitialReviveTimer";
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[2] = "ZeratulReviveTimer";
        libCPGL_gv_commander[lp_player].lv_heroReviveBehavior[3] = null;
        libCPGL_gv_commander[lp_player].lv_heroBeaconType = "ZeratulCoopReviveBeacon";
        libCPGL_gv_commander[lp_player].lv_heroReviveCommand = AbilityCommand("ZeratulRevive", 0);
        libCPGL_gv_commander[lp_player].lv_heroReviveLink = "Abil/ZeratulRevive";
        libCPGL_gv_commander[lp_player].lv_heroStructureAllowed = true;
        libCPGL_gv_commander[lp_player].lv_heroStructureType = "ZeratulACArtifact";
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitAllowed = true;
        libCPGL_gv_commander[lp_player].lv_globalCasterUnitType = "CoopCasterZeratul";
        auto15B5946A_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (auto15B5946A_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-zeratul.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_14A0C7CE");
        }
        else if (auto15B5946A_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_5366DC3E");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_4D1739C0");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-zeratul-hero-summonvoidseeker.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeZeratulVoidSeeker", 1);
        }
        else if (auto15B5946A_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_BD8F10BF");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_425E060B");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-zeratul-hero-propheticvision.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeZeratulArtifactFragments", 1);
        }
        else if (auto15B5946A_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_4CD46933");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_C67C3227");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-zeratul-hero-purityofwill.dds";
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderPrestigeZeratulTornadoes", 1);
        }
        else if (auto15B5946A_val == 4) {
        }
        else {
        }
    }
}

void libCPGL_gf_LoadPlayer3Commander (int lp_player) {
    // Automatic Variable Declarations
    int autoAD03D600_val;
    int autoA2CEEF8A_val;
    int auto627FF05C_val;
    int autoDFFA81B6_val;
    int autoBA026357_val;
    int autoF0153BB9_val;
    int auto35A53E51_val;
    int auto4F4EC2D4_val;
    int auto7DF455F0_val;
    int auto0D98415F_val;
    int auto85FB8C15_val;
    int auto31DC64BA_val;
    int auto45B35ACB_val;
    int auto1310C5DE_val;
    int auto19EBB0C5_val;
    int auto6485D497_val;
    int autoD3CDEA2C_val;
    int auto1BABC10C_val;

    // Implementation
    if ((GameAttributeGameValue("3") == "0002")) {
        return ;
    }

    libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_C8B80484");
    if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Abathur")) {
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "AbathurCommander", true);
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        autoAD03D600_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (autoAD03D600_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_A384D963");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-abathur.dds";
        }
        else if (autoAD03D600_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_C74DF959");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_4E3B1B60");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-zerg-abathur-biomass.dds";
        }
        else if (autoAD03D600_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_EB86EBAB");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_012DF1BB");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-zerg-abathur-locustinjection.dds";
        }
        else if (autoAD03D600_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_47E719D7");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_15D044EB");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-zerg-abathur-symbiote.dds";
        }
        else if (autoAD03D600_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Alarak")) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AlarakCommander", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "DarkProtoss", 1);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "TaldarimSkin", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "AlarakCommander", true);
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        autoA2CEEF8A_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (autoA2CEEF8A_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_158349F9");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-alarak.dds";
        }
        else if (autoA2CEEF8A_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_AE4E76FA");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_4A28A7BF");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-alarak-reliquaryofsouls.dds";
        }
        else if (autoA2CEEF8A_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_C17CCA54");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_0FA5A2E9");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-protoss-alarak-empoweraoeattacks.dds";
        }
        else if (autoA2CEEF8A_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_E914164A");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_F90EA28F");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-protoss-alarak-deathfleet.dds";
        }
        else if (autoA2CEEF8A_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Artanis")) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ArtanisCommander", 1);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ArtanisCommander", true);
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 200;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        auto627FF05C_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (auto627FF05C_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-artanis.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_541EA768");
        }
        else if (auto627FF05C_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_9A4A6186");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_E16EF5AD");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\talent-artanis-level01-swiftretribution.dds";
        }
        else if (auto627FF05C_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_B7BD6C92");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_5CF9EC05");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-artanis-pylonpower.dds";
        }
        else if (auto627FF05C_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_D0E39E7D");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_80DDE0FE");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-karax-orbitalassault_stun.dds";
        }
        else if (auto627FF05C_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Dehaka")) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "DehakaCommander", 1);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "DehakaPrimal", true);
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 200;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        autoDFFA81B6_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (autoDFFA81B6_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-dehaka.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_2236B764");
        }
        else if (autoDFFA81B6_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_A6576B7F");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_36E4FF3E");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-zerg-dehaka-consume.dds";
        }
        else if (autoDFFA81B6_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_D57612F3");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_68662CEF");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-zerg-dehaka-superroar.dds";
        }
        else if (autoDFFA81B6_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_231A4CAA");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_1D277C70");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-progression-zerg-dehaka-1-dehakaunlock.dds";
        }
        else if (autoDFFA81B6_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Fenix")) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "FenixCommander", 1);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "Fenix_Purifier_COOP", true);
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        autoBA026357_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (autoBA026357_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-fenix.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_84C8685B");
        }
        else if (autoBA026357_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_EF31A8E0");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_6F66A084");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-progression-protoss-fenix-1-zealotsuit.dds";
        }
        else if (autoBA026357_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_FEA39A47");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_25743343");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-progression-protoss-fenix-15-networksuperiority.dds";
        }
        else if (autoBA026357_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_8B586DB3");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_62957898");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-progression-protoss-fenix-11-championtransferbuff.dds";
        }
        else if (autoBA026357_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Horner")) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "HornerCommander", 1);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "HornerHanCoop", true);
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        autoF0153BB9_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (autoF0153BB9_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-horner.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_A49246B0");
        }
        else if (autoF0153BB9_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_6452C5C6");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_90228A79");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-top-hornerhan-magmines.dds";
        }
        else if (autoF0153BB9_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_0C947C80");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_67FEC10D");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-progression-hornerhan-1-precisionchaos.dds";
        }
        else if (autoF0153BB9_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_18A1DE64");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_62EA15A6");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-progression-hornerhan-2-bomberplatforms.dds";
        }
        else if (autoF0153BB9_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Karax")) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KaraxCommander", 1);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "KaraxCommander", true);
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        auto35A53E51_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (auto35A53E51_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-karax.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_7384F8F7");
        }
        else if (auto35A53E51_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_4AE939E3");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_328B6504");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-spearofadun-reconstructionbeam.dds";
        }
        else if (auto35A53E51_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_D8052C47");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_38F49542");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-karax-unitybarrier.dds";
        }
        else if (auto35A53E51_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_07A470B9");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_51BC368A");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-karax-solarefficiencylevel3.dds";
        }
        else if (auto35A53E51_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Kerrigan")) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganCommander", 1);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "KerriganCommander", true);
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        auto4F4EC2D4_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (auto4F4EC2D4_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-kerrigan.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_90F7BBC4");
        }
        else if (auto4F4EC2D4_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_27DE13A5");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_8B47F6AE");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-zerg-stukov-creepspread.dds";
        }
        else if (auto4F4EC2D4_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_5B340C7D");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_356F9815");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-kerrigan-fury.dds";
        }
        else if (auto4F4EC2D4_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_17DD0134");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_18E675DC");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-kerrigan_revive.dds";
        }
        else if (auto4F4EC2D4_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Mengsk")) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "MengskCommander", 1);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "MengskCommander", true);
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        auto7DF455F0_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (auto7DF455F0_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-mengsk.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_7798D2FC");
        }
        else if (auto7DF455F0_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_4C16F339");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_A79ED897");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-progression-mengsk-04-contaminatedstrike.dds";
        }
        else if (auto7DF455F0_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_02CCB7BF");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_88F549B1");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-mengsk-royalguard-mightoftheempire.dds";
        }
        else if (auto7DF455F0_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_9AE2FF6E");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_B1771503");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-mengsk-trooper-volunteertofight.dds";
        }
        else if (auto7DF455F0_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Nova")) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "NovaCommander", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BlackOps", 1);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "Nova_BlackOps_COOP", true);
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 100;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 100;
        auto0D98415F_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (auto0D98415F_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-nova.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_0E24BC03");
        }
        else if (auto0D98415F_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_458F8349");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_50383707");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-terran-nova-specialordance.dds";
        }
        else if (auto0D98415F_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_EB23BEF4");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_E7D4C5CA");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-terran-nova-griffintransport.dds";
        }
        else if (auto0D98415F_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_5BB4212D");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_E3E928FF");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-nova-tacticalstealthsuit.dds";
        }
        else if (auto0D98415F_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Raynor")) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCommander", 1);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "Raynor_COOP", true);
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        auto85FB8C15_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (auto85FB8C15_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-raynor.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_41584299");
        }
        else if (auto85FB8C15_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_D794C45F");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_EED7E83A");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\talent-tychus-level12-ultimategear1.dds";
        }
        else if (auto85FB8C15_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_A780084F");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_B7BFE9B2");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-terran-emergencythrusters.dds";
        }
        else if (auto85FB8C15_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_139E9006");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_E3B3AFA1");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\talent-raynor-level13-starportresearchbundle.dds";
        }
        else if (auto85FB8C15_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Stetmann")) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "StetmannCommander", 1);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "StetmannCommander", true);
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        auto31DC64BA_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (auto31DC64BA_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-stetmann.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_E0E6D4B6");
        }
        else if (auto31DC64BA_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_0E4E51C1");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_5045B2C6");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-stetmann-garymassteleport.dds";
            libCPGL_gv_commander[lp_player].lv_heroAllowed = false;
        }
        else if (auto31DC64BA_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_C608483D");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_B39922BF");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-progression-stetmann-15-supergarytransform.dds";
        }
        else if (auto31DC64BA_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_56BBBD7C");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_5DE3B079");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-stetmann-garyattackandregen.dds";
        }
        else if (auto31DC64BA_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Stukov")) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "StukovCommander", 1);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "StukovCommander", true);
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        auto45B35ACB_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (auto45B35ACB_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-stukov.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_2271251D");
        }
        else if (auto45B35ACB_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_182BDC8A");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_1B22CE14");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-zerg-stukov-attackspeedmastery.dds";
        }
        else if (auto45B35ACB_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_917D98F0");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_DB87C293");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-zerg-stukov-bansheeburrowregeneration.dds";
        }
        else if (auto45B35ACB_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_1A39F6A4");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_0C13CA48");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-zerg-stukov-bunkerresearchbundle_05.dds";
        }
        else if (auto45B35ACB_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Swann")) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SwannCommander", 1);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SwannCommander", true);
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        auto1310C5DE_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (auto1310C5DE_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-swann.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_9984BBE5");
        }
        else if (auto1310C5DE_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_C74E0646");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_357D67F4");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-swann-pulsecannon.dds";
        }
        else if (auto1310C5DE_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_0FA64570");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_E67B699F");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-research-zerg-perditionturret.dds";
        }
        else if (auto1310C5DE_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_384A9173");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_AAE29984");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-terran-hercules-tacticaljump.dds";
        }
        else if (auto1310C5DE_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Tychus")) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TychusCommander", 1);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "TychusCoop", true);
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 100;
        auto19EBB0C5_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (auto19EBB0C5_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-tychus.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_AA28222D");
        }
        else if (auto19EBB0C5_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_7C61A0C1");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_32340258");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\talent-tychus-level02-additionaloutlaw.dds";
        }
        else if (auto19EBB0C5_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_1D7820DF");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_7FC3A101");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-tychus-detection.dds";
        }
        else if (auto19EBB0C5_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_79577881");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_7C73FE18");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-tychus-odin.dds";
        }
        else if (auto19EBB0C5_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Vorazun")) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "VorazunCommander", 1);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "VorazunCommander", true);
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
        auto6485D497_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (auto6485D497_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-vorazun.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_C32F4FE7");
        }
        else if (auto6485D497_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_49D84FD6");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_2CBB2593");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-vorazun-darkpylonrecall.dds";
        }
        else if (auto6485D497_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_B699AC1A");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_153D7CC3");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-upgrade-vorazun-placewormhole.dds";
        }
        else if (auto6485D497_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_492E14B1");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_12275B6E");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\talent-vorazun-level03-shadowguarddetectionsuppression.dds";
        }
        else if (auto6485D497_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Zagara")) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZagaraCommander", 1);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ZagaraWebby", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ZagaraWebbyBaneling", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ZagaraWebbyZergling", true);
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 0;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 100;
        autoD3CDEA2C_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (autoD3CDEA2C_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-zagara.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_462A8A17");
        }
        else if (autoD3CDEA2C_val == 1) {
            libCPGL_gv_commander[lp_player].lv_suppliesMax = 150;
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_A1A561AA");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_380D95A2");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\talent-zagara-level04-scourgeresearchbundle.dds";
        }
        else if (autoD3CDEA2C_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_4129B79E");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_4DE776D2");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\talent-zagara-level01-relentless.dds";
        }
        else if (autoD3CDEA2C_val == 3) {
            libCPGL_gv_commander[lp_player].lv_suppliesMax = 200;
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_D97AC646");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_DE292781");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\talent-zagara-level15-masterspawner.dds";
        }
        else if (autoD3CDEA2C_val == 4) {
        }
        else {
        }
    }
    else if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Zeratul")) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZeratulCommander", 1);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ZeratulCoop", true);
        libCPGL_gv_commander[lp_player].lv_suppliesStart = 100;
        libCPGL_gv_commander[lp_player].lv_suppliesMax = 100;
        auto1BABC10C_val = libCPGL_gf_GetCommanderDataPrestigeLevel(lp_player);
        if (auto1BABC10C_val == 0) {
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-commander-zeratul.dds";
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_23A34E33");
        }
        else if (auto1BABC10C_val == 1) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_80813099");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_9762E631");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-zeratul-hero-summonvoidseeker.dds";
        }
        else if (auto1BABC10C_val == 2) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_26E9436D");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_1130D5D1");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-zeratul-hero-propheticvision.dds";
        }
        else if (auto1BABC10C_val == 3) {
            libCPGL_gv_commander[lp_player].lv_prestigeName = StringExternal("Param/Value/lib_CPGL_EF2DA3DF");
            libCPGL_gv_commander[lp_player].lv_prestigeDescription = StringExternal("Param/Value/lib_CPGL_1A55231E");
            libCPGL_gv_commander[lp_player].lv_prestigeIcon = "Assets\\Textures\\btn-ability-zeratul-hero-purityofwill.dds";
        }
        else if (auto1BABC10C_val == 4) {
        }
        else {
        }
    }
}

void libCPGL_gf_LoadPlayer4Tech (int lp_player) {
    // Automatic Variable Declarations
    string auto680226A6_val;

    // Implementation
    TechTreeUpgradeAddLevel(lp_player, "PlayerCommander", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderLevel", libCPGL_gv_commander[lp_player].lv_commanderLevel);
    libCPGL_gf_VoicePackCommanderDefaultApply(lp_player);
    libCPGL_gf_CC_ApplyTech(lp_player);
    TechTreeUpgradeAllow(lp_player, "WarpGateResearch", true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 6), true);
    auto680226A6_val = libCPGL_gv_commander[lp_player].lv_commander;
    if (auto680226A6_val == "Raynor") {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCommander", 1);
        libCPGL_gf_LPTRaynor(lp_player);
    }
    else if (auto680226A6_val == "Kerrigan") {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganCommander", 1);
        libCPGL_gf_LPTKerrigan(lp_player);
    }
    else if (auto680226A6_val == "Artanis") {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ArtanisCommander", 1);
        libCPGL_gf_LPTArtanis(lp_player);
    }
    else if (auto680226A6_val == "Swann") {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SwannCommander", 1);
        libCPGL_gf_LPTSwann(lp_player);
    }
    else if (auto680226A6_val == "Zagara") {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZagaraCommander", 1);
        libCPGL_gf_LPTZagara(lp_player);
    }
    else if (auto680226A6_val == "Vorazun") {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "VorazunCommander", 1);
        libCPGL_gf_LPTVorazun(lp_player);
    }
    else if (auto680226A6_val == "Karax") {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KaraxCommander", 1);
        libCPGL_gf_LPTKarax(lp_player);
    }
    else if (auto680226A6_val == "Abathur") {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AbathurCommander", 1);
        libCPGL_gf_LPTAbathur(lp_player);
    }
    else if (auto680226A6_val == "Alarak") {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AlarakCommander", 1);
        libCPGL_gf_LPTAlarak(lp_player);
    }
    else if (auto680226A6_val == "Nova") {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "NovaCommander", 1);
        libCPGL_gf_LPTNova(lp_player);
    }
    else if (auto680226A6_val == "Stukov") {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "StukovCommander", 1);
        libCPGL_gf_LPTStukov(lp_player);
    }
    else if (auto680226A6_val == "Fenix") {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "FenixCommander", 1);
        libCPGL_gf_LPTFenix(lp_player);
    }
    else if (auto680226A6_val == "Dehaka") {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "DehakaCommander", 1);
        libCPGL_gf_LPTDehaka(lp_player);
    }
    else if (auto680226A6_val == "Horner") {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "HornerCommander", 1);
        libCPGL_gf_LPTHH(lp_player);
    }
    else if (auto680226A6_val == "Tychus") {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TychusCommander", 1);
        libCPGL_gf_LPTTychus(lp_player);
    }
    else if (auto680226A6_val == "Zeratul") {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZeratulCommander", 1);
        libCPGL_gf_LPTZeratul(lp_player);
    }
    else if (auto680226A6_val == "Stetmann") {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "StetmannCommander", 1);
        libCPGL_gf_LPTStetmann(lp_player);
    }
    else if (auto680226A6_val == "Mengsk") {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "MengskCommander", 1);
        libCPGL_gf_LPTMengsk(lp_player);
    }
    else {
    }
}

void libCPGL_gf_LoadPlayer5StartingUnits (int lp_player) {
    // Variable Declarations
    point lv_spawnPoint;
    point lv_mineralPoint;
    unitgroup lv_geysers;
    int lv_unitIter;
    fixed lv_distance;
    fixed lv_startingAngle;
    fixed lv_placementAngle;
    unit lv_workerRally;
    point lv_mercSpawnPoint;
    unit lv_townHall;
    string lv_townHallType;
    int lv_larvaCount;
    unitgroup lv_startingunits;
    unit lv_indexunit;

    // Automatic Variable Declarations
    unitgroup autoBAE0461E_g;
    int autoBAE0461E_u;
    unit autoBAE0461E_var;
    unitgroup auto16F606DF_g;
    int auto16F606DF_u;
    unitgroup auto0175E9EC_g;
    int auto0175E9EC_u;
    unitgroup autoD8441916_g;
    int autoD8441916_u;
    unit autoD8441916_var;

    // Variable Initialization
    lv_geysers = UnitGroupEmpty();
    lv_townHallType = (CatalogFieldValueGet(c_gameCatalogRace, libCPGL_gv_commander[lp_player].lv_spawnRace, "StartingUnitArray[" + IntToString(0) + "].Unit", c_playerAny));
    lv_larvaCount = UserDataGetInt("PlayerCommanders", libCPGL_gf_ActiveCommanderForPlayer2(lp_player), "StartingLarvaCount", 1);
    lv_startingunits = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), 0), 0);

    // Implementation
    MeleeSetOption(lp_player, c_meleeOptionDefeat, false);
    MeleeSetOption(lp_player, c_meleeOptionPoints, false);
    MeleeSetOption(lp_player, c_meleeOptionReveal, false);
    MeleeSetOption(lp_player, c_meleeOptionSplitResources, false);
    MeleeSetOption(lp_player, c_meleeOptionStalemate, false);
    MeleeSetOption(lp_player, c_meleeOptionVictory, false);
    MeleeSetOption(lp_player, c_meleeOptionXPGainDisable, true);
    PlayerOptionOverride(lp_player, "showworkerstatus", "1");
    PlayerOptionOverride(lp_player, "gametooltips", "1");
    PlayerOptionOverride(lp_player, "selectuncontrolable", "1");
    PlayerOptionOverride(lp_player, "simplecommandcard", "0");
    PlayerOptionOverride(lp_player, "tickedunitstatus", "1");
    PlayerOptionOverride(lp_player, "selectallconjoined", "1");
    PlayerOptionOverride(lp_player, "showalerts", "1");
    PlayerOptionOverride(lp_player, "showcurrentordermodel", "1");
    PlayerOptionOverride(lp_player, "displayflyerhelper", "Selected");
    PlayerOptionOverride(lp_player, "displayunitstatus", "Damaged");
    if ((libCPGL_gv_commander[lp_player].lv_suppliesStart > 0)) {
        PlayerModifyPropertyInt(lp_player, c_playerPropSuppliesMade, c_playerPropOperSetTo, libCPGL_gv_commander[lp_player].lv_suppliesStart);
    }

    PlayerModifyPropertyInt(lp_player, c_playerPropSuppliesLimit, c_playerPropOperSetTo, libCPGL_gv_commander[lp_player].lv_suppliesMax);
    CreepModify(PlayerStartLocation(lp_player), 20.0, false, false);
    autoBAE0461E_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), 0), 0);
    autoBAE0461E_u = UnitGroupCount(autoBAE0461E_g, c_unitCountAll);
    for (;; autoBAE0461E_u -= 1) {
        autoBAE0461E_var = UnitGroupUnitFromEnd(autoBAE0461E_g, autoBAE0461E_u);
        if (autoBAE0461E_var == null) { break; }
        UnitRemove(autoBAE0461E_var);
    }
    auto16F606DF_g = lv_startingunits;
    auto16F606DF_u = UnitGroupCount(auto16F606DF_g, c_unitCountAll);
    for (;; auto16F606DF_u -= 1) {
        lv_indexunit = UnitGroupUnitFromEnd(auto16F606DF_g, auto16F606DF_u);
        if (lv_indexunit == null) { break; }
        UnitRemove(lv_indexunit);
    }
    if ((PlayerStartLocation(lp_player) == null)) {
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/lib_CPGL_9A7C936A"));
    }

    PlayerSetRace(lp_player, libCPGL_gv_commander[lp_player].lv_spawnRace);
    if (((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Abathur") || (libCPGL_gf_GetCommanderDataCommander(lp_player) == "Kerrigan") || (libCPGL_gf_GetCommanderDataCommander(lp_player) == "Stetmann") || (libCPGL_gf_GetCommanderDataCommander(lp_player) == "Zagara"))) {
        auto0175E9EC_g = UnitGroup(lv_townHallType, lp_player, RegionCircle(PlayerStartLocation(lp_player), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0175E9EC_u = UnitGroupCount(auto0175E9EC_g, c_unitCountAll);
        for (;; auto0175E9EC_u -= 1) {
            lv_townHall = UnitGroupUnitFromEnd(auto0175E9EC_g, auto0175E9EC_u);
            if (lv_townHall == null) { break; }
            UnitBehaviorAdd(lv_townHall, "SpawnLarvaInstant", lv_townHall, lv_larvaCount);
        }
    }

    if ((libCPGL_gf_GetCommanderDataCommander(lp_player) == "Swann")) {
        if ((TechTreeUpgradeCount(lp_player, "SwannCommanderStartingOrbitalCommand", c_techCountCompleteOnly) == 1)) {
            autoD8441916_g = UnitGroup("CommandCenter", lp_player, RegionCircle(PlayerStartLocation(lp_player), 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
            autoD8441916_u = UnitGroupCount(autoD8441916_g, c_unitCountAll);
            for (;; autoD8441916_u -= 1) {
                autoD8441916_var = UnitGroupUnitFromEnd(autoD8441916_g, autoD8441916_u);
                if (autoD8441916_var == null) { break; }
                UnitIssueOrder(autoD8441916_var, Order(AbilityCommand("UpgradeToOrbitalCoop", 0)), c_orderQueueReplace);
            }
        }

        if ((TechTreeUpgradeCount(lp_player, "SwannCommanderStartingRefinery", c_techCountCompleteOnly) == 1)) {
            UnitGroupAddUnitGroup(lv_geysers, UnitGroup("VespeneGeyser", c_playerAny, RegionCircle(PlayerStartLocation(lp_player), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 2));
            UnitGroupAddUnitGroup(lv_geysers, UnitGroup("ProtossVespeneGeyser", c_playerAny, RegionCircle(PlayerStartLocation(lp_player), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 2));
            UnitGroupAddUnitGroup(lv_geysers, UnitGroup("SpacePlatformGeyser", c_playerAny, RegionCircle(PlayerStartLocation(lp_player), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 2));
            if ((TechTreeUpgradeCount(lp_player, "AutoHarvester", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "AutomatedRefinery", c_unitCreateIgnorePlacement, lp_player, UnitGetPosition(UnitGroupUnit(lv_geysers, 1)));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "AutomatedRefinery", c_unitCreateIgnorePlacement, lp_player, UnitGetPosition(UnitGroupUnit(lv_geysers, 2)));
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Refinery", c_unitCreateIgnorePlacement, lp_player, UnitGetPosition(UnitGroupUnit(lv_geysers, 1)));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Refinery", c_unitCreateIgnorePlacement, lp_player, UnitGetPosition(UnitGroupUnit(lv_geysers, 2)));
            }
        }

    }

    MeleeSetOption(lp_player, c_meleeOptionDefeat, true);
    MeleeSetOption(lp_player, c_meleeOptionPoints, true);
    MeleeSetOption(lp_player, c_meleeOptionReveal, true);
    MeleeSetOption(lp_player, c_meleeOptionSplitResources, true);
    MeleeSetOption(lp_player, c_meleeOptionStalemate, true);
    MeleeSetOption(lp_player, c_meleeOptionVictory, true);
    MeleeSetOption(lp_player, c_meleeOptionXPGainDisable, false);
    MeleeSetOption(lp_player, c_meleeOptionPoints, false);
    PlayerSetState(lp_player, c_playerStateXPGain, true);
}

void libCPGL_gf_LoadPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libCPGL_gf_LoadPlayer1Vars(lp_player);
    libCPGL_gf_LoadPlayer2PrestigeCmdVar(lp_player);
    libCPGL_gf_LoadPlayer3Commander(lp_player);
    libCPGL_gf_LoadPlayer4Tech(lp_player);
    libCPGL_gf_LoadPlayer5StartingUnits(lp_player);
    libCPCD_gf_SetWorkerRallyPointforNexus(UnitGroupUnit(UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventReveal), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), 0), 0), 1));
    PlayerSetCommander(lp_player, libCPGL_gv_commander[lp_player].lv_commander);
    libCPCD_gf_HeroSpawn(lp_player);
    libCPCD_gf_CM_PlayerSetGlobalCaster2(lp_player);
    libCPCD_gf_GPInit(lp_player);
    libCPGL_gf_SetCommanderConsole(lp_player);
}

void libCPGL_gf_LPTRaynor (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TriggerEnable(libCPCD_gt_CDRaynorHyperionPing, true);
    TriggerEnable(libCPCD_gt_CDRaynorPrestigeAirSupply, true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "MarineRemastered", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "MarauderDeluxe", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SiegeTankMerc", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "BattlecruiserMerc", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SupplyDepotXPR", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "VanadiumPlating", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCommanderArmorVanadium", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "UltraCapacitors", 1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("Stimpack", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("StimpackMarauder", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ScannerSweep", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CalldownMULE", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("BansheeCloak", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("BansheeCloak", 1), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("FactoryTrain", 10), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("FusionCoreResearch", 2), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("FusionCoreResearch", 1), false);
}

void libCPGL_gf_LPTKerrigan (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TriggerEnable(libCPCD_gt_CM_MasteryKerriganInstantReviveCooldown, true);
    TriggerEnable(libCPCD_gt_CDKerriganPsiStrike, true);
    TriggerEnable(libCPCD_gt_CDKerriganEcoDrop, true);
    TriggerEnable(libCPCD_gt_BanelingScourgeEconDrop, true);
    TriggerEnable(libCPCD_gt_CDKerriganWeaponSwap, true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "DroneRemastered", true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("LarvaTrainSwarm", 23), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("LarvaTrainSwarm", 16), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("PsiStrike", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("PsionicLift", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("PrimalSlash", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("MindBolt", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 19), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 1), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 2), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 6), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 7), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 8), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 3), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 4), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 5), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 1), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 2), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 3), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 4), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 5), true);
}

void libCPGL_gf_LPTArtanis (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCPCD_gf_ApplyGoldenSkin(lp_player);
    TriggerEnable(libCPCD_gt_CDArtanisGuardianShell, true);
    TriggerEnable(libCPCD_gt_GPTMOrbitalStrikeActivated, true);
    TriggerEnable(libCPCD_gt_GPTMStrafeActivated, true);
    TriggerEnable(libCPCD_gt_GPTMSuperShieldsActivated, true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WarpGateResearch", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SOAWarpTech", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SOAWarpGateCharges", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SOAPylonPower", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SOAOrbitalStrike", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SOASuperShield", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SOASuperShieldUpgrade", 1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("FleetBeaconResearch", 1), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("FleetBeaconResearch", 17), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("SoASuperShield", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CommanderPrestigeArtanisOrbitalStrikeShieldOverchargeTargeted", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("SOAOrbitalStrikeActivate", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("SOAOrbitalStrikeExecute", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("SOAOrbitalStrikeTargetingDummy", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("SOAPylonPower", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("RoboticsBayResearch", 8), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 1), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 2), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 3), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 4), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 5), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 6), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 7), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 8), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 3), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 4), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 5), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 1), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 2), true);
}

void libCPGL_gf_LPTSwann (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TriggerEnable(libCPCD_gt_AdvancedConstructionAutoUser, true);
    TriggerEnable(libCPCD_gt_AdvancedConstructionAutoAutoCast, true);
    TriggerEnable(libCPCD_gt_CDSwannVespeneDroneTrigger, true);
    TriggerEnable(libCPCD_gt_CDSwannTankrRebuildController, true);
    TriggerEnable(libCPCD_gt_CDSwannThorRebuildController, true);
    TriggerEnable(libCPCD_gt_CDSwannDrillCallforHelp, true);
    TriggerEnable(libCPCD_gt_CDSwannDrillBeamActivate, true);
    TriggerEnable(libCPCD_gt_CDSwannDrillNukeActivate, true);
    TriggerEnable(libCPCD_gt_CDSwannDrillBeam, true);
    TriggerEnable(libCPCD_gt_CDSwannSoundRegionClear, true);
    TriggerEnable(libCPCD_gt_CDSwannSoundRegionStart, true);
    TriggerEnable(libCPCD_gt_CDSwannSoundBeamStart, true);
    TriggerEnable(libCPCD_gt_CDSwannSoundNukeRegionStart, true);
    TriggerEnable(libCPCD_gt_CDSwannSoundNukeRegionClear, true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommandCenterReactor", 1);
}

void libCPGL_gf_LPTZagara (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TriggerEnable(libCPCD_gt_CDZagaraRoachDropScale, true);
    TriggerEnable(libCPCD_gt_CDZagaraWeaponSwap, true);
    TechTreeUnitAllow(lp_player, "Roachling", true);
    TechTreeUnitAllow(lp_player, "RoachCorpser", true);
    TechTreeUnitAllow(lp_player, "RoachCorpserBurrowed", true);
    TechTreeUnitAllow(lp_player, "ScourgeNest", true);
    TechTreeUnitAllow(lp_player, "ZergTowerArtillery", true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZergBuild", 24), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZergBuild", 11), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZergBuild", 16), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UpgradeToLurkerDen", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UpgradeToLurkerDenMP", 0), false);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "K5TwoDrones", 1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 19), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZagaraVoidCoopBanelingBarrage", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZagaraVoidCoopSpawnHunterKillers", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZagaraVoidCoopMassFrenzy", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("LarvaTrainSwarm", 22), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("LarvaTrain", 9), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 12), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 13), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 14), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 3), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 4), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 5), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 1), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 2), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 3), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 4), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 5), true);
}

void libCPGL_gf_LPTVorazun (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TriggerEnable(libCPCD_gt_TimeStop, true);
    TriggerEnable(libCPCD_gt_GPTMTimeStopOn, true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "VoidPylonRecall", 1);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "StalkerDeluxe", true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("FleetBeaconResearch", 1), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 1), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 2), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 3), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 4), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 5), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 6), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 7), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 8), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 3), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 4), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 5), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 1), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 2), true);
}

void libCPGL_gf_LPTKarax (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TriggerEnable(libCPCD_gt_CDKaraxUnityBarrier, true);
    TriggerEnable(libCPCD_gt_CDKaraxSolarForge, true);
    TriggerEnable(libCPCD_gt_CDKaraxRepairBeamLimit, true);
    TriggerExecute(libCPCD_gt_CDKaraxRepairBeamLimit, false, true);
    TriggerEnable(libCPCD_gt_GPTMOrbitalStrikeActivatedKarax, true);
    TriggerEnable(libCPCD_gt_GPTMSolarLanceActivated, true);
    TriggerEnable(libCPCD_gt_GPTMTargetingPurifierBeamOn, true);
    TriggerEnable(libCPCD_gt_GPTMTargetingPurifierBeamOff, true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SOAOrbitalStrike", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SOAThermalLance", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SOAMapWideChrono", 1);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ImmortalAdun", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "PylonXPR", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ShieldBatteryStructureBarrier", 0);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 11), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("FleetBeaconResearch", 1), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("FleetBeaconResearch", 1), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("RoboticsBayResearch", 11), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 1), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 2), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 3), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 4), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 5), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 6), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 7), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 8), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 3), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 4), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 5), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 1), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 2), true);
}

void libCPGL_gf_LPTAbathur (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TriggerExecute(libCPCD_gt_CDAbathurTriggersInit, true, false);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "K5AutoExtractor", 1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZergBuild", 11), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZergBuild", 16), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UpgradeToLurkerDen", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UpgradeToLurkerDenMP", 0), false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "OverlordXPR", true);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "RavagerBone", true);
}

void libCPGL_gf_LPTAlarak (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TriggerEnable(libCPCD_gt_CDAlarakSacrificeScale, true);
    TriggerEnable(libCPCD_gt_CDAlarakAirUpgrade, true);
    TriggerEnable(libCPCD_gt_CDAlarakLightningStrikesHighlightOn, true);
    TriggerEnable(libCPCD_gt_CDAlarakLightningStrikesHighlightOff, true);
    TriggerEnable(libCPCD_gt_CDAlarakLightningStrikesSacrifice, true);
    TriggerEnable(libCPCD_gt_CDAlarakSoulAbsorptionImpact, true);
    TriggerEnable(libCPCD_gt_CDAlarakSoulAbsorptionLaunch, true);
    TriggerEnable(libCPCD_gt_CDAlarakSoulAbsorptionPrestigeMechBuff, true);
    TriggerEnable(libCPCD_gt_CDAlarakEmpowerAdd, true);
    TriggerEnable(libCPCD_gt_CDAlarakEmpowerRemove, true);
    TriggerEnable(libCPCD_gt_CDAlarakEmpowerWorshiperAdd, true);
    TriggerEnable(libCPCD_gt_CDAlarakEmpowerWorshiperRemove, true);
    TriggerEnable(libCPCD_gt_CDAlarakEmpowerUpdate, true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("WarpGateTrain", 10), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("WarpGateTrainSupplicantTrue", 11), true);
    TechTreeUnitAllow(lp_player, "Supplicant", true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("WarpGateTrain", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("GatewayTrain", 0), false);
    libCPCD_gf_ApplyTaldarimSkin(lp_player);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 20), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 21), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 22), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 17), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 18), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 19), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 6), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 7), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 8), true);
}

void libCPGL_gf_LPTNova (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TriggerExecute(libCPCD_gt_CDNovaTriggersInit, true, false);
    TriggerEnable(libCPCD_gt_CDNovaGriffinBombingRunActivate, true);
    TriggerEnable(libCPCD_gt_CDNovaGriffinBombingRunFinish, true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "NovaDetector", 0);
    TechTreeAbilityAllow(1, AbilityCommand("GhostAcademyResearch", 2), true);
}

void libCPGL_gf_LPTStukov (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TriggerExecute(libCPCD_gt_CDStukovTriggersInit, true, false);
}

void libCPGL_gf_LPTFenix (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCPCD_gf_FenixInitialDummySpawn(lp_player);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "FenixCommander", 1);
    TriggerExecute(libCPCD_gt_CDFenixTriggersInit, true, false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "DisruptorPurifier", true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "Legionnaire", 1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("FleetBeaconResearch", 1), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 1), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 2), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 3), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 4), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 5), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 6), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 7), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 8), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 3), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 4), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 5), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 1), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 2), true);
}

void libCPGL_gf_LPTDehaka (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TriggerExecute(libCPCD_gt_CDDehakaTriggersInit, true, false);
    if ((libCPGL_gv_commander[lp_player].lv_commanderLevel >= 5)) {
        libCPCD_gv_cDDehakaLevelsMax[lp_player] = 12;
        libCPCD_gv_cDDehakaVeterencyBehavior[lp_player] = "DehakaVeterancyCoopMedium";
    }

    if ((libCPGL_gv_commander[lp_player].lv_commanderLevel >= 12)) {
        libCPCD_gv_cDDehakaLevelsMax[lp_player] = 14;
        libCPCD_gv_cDDehakaVeterencyBehavior[lp_player] = "DehakaVeterancyCoopHigh";
    }

    if ((libCPGL_gv_commander[lp_player].lv_commanderLevel >= 14)) {
        libCPCD_gv_cDDehakaLevelsMax[lp_player] = 15;
        libCPCD_gv_cDDehakaVeterencyBehavior[lp_player] = "DehakaVeterancyCoopFinal";
    }

    libCPCD_gf_CDDehakaSetLevelValues(lp_player);
}

void libCPGL_gf_LPTHH (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TriggerExecute(libCPCD_gt_CDHHTriggersInit, true, false);
    TriggerEnable(libCPCD_gt_CDHHAirFleet_Activated, true);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "HHMercStarportLimitCount", CatalogFieldValueGetAsInt(c_gameCatalogEffect, "HHMercStarportLimitDummy", "Amount", lp_player));
    TechTreeUnitAllow(lp_player, "Bunker", true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 6), true);
    if ((TechTreeUpgradeCount(lp_player, "HHScrapPickup", c_techCountQueuedOrBetter) == 1)) {
        TriggerEnable(libCPCD_gt_CDHHScrapDrop, true);
        TriggerEnable(libCPCD_gt_CDHHScrapPickup, true);
        TriggerEnable(libCPCD_gt_CDHHScrapDropForSwannWreckage, true);
        TriggerEnable(libCPCD_gt_BanelingScourgeDeathrattleScrapDeaths, true);
    }

}

void libCPGL_gf_LPTTychus (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TriggerExecute(libCPCD_gt_CDTychusTriggersInit, true, true);
    libCPCD_gf_CDTychusTriggersInit(lp_player);
    TriggerExecute(libCPCD_gt_CDTychusUISwapInit, true, true);
}

void libCPGL_gf_LPTZeratul (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZeratulCommander", 1);
    libCPGL_gf_CC_ApplyCommanderTechZeratul(lp_player);
    TriggerExecute(libCPCD_gt_CDZeratulTriggersInit, true, false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("NexusBuild", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZeratulBuild", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZeratulBuild", 5), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZeratulBuild", 6), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZeratulBuild", 2), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZeratulBuild", 3), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZeratulBuild", 4), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZeratulBuild", 1), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZeratulArt2Damage", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZeratulArt2Stun", 0), true);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 23), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 3), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 7), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 1), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 4), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 14), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 11), false);
}

void libCPGL_gf_LPTStetmann (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TriggerExecute(libCPCD_gt_CDStetmannTriggersInit, true, false);
}

void libCPGL_gf_LPTMengsk (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TriggerExecute(libCPCD_gt_CDMengskTriggersInit, true, false);
}

trigger auto_libCPGL_gf_SetCommanderConsole_Trigger = null;
int auto_libCPGL_gf_SetCommanderConsole_lp_player;

void libCPGL_gf_SetCommanderConsole (int lp_player) {
    auto_libCPGL_gf_SetCommanderConsole_lp_player = lp_player;

    if (auto_libCPGL_gf_SetCommanderConsole_Trigger == null) {
        auto_libCPGL_gf_SetCommanderConsole_Trigger = TriggerCreate("auto_libCPGL_gf_SetCommanderConsole_TriggerFunc");
    }

    TriggerExecute(auto_libCPGL_gf_SetCommanderConsole_Trigger, false, false);
}

bool auto_libCPGL_gf_SetCommanderConsole_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCPGL_gf_SetCommanderConsole_lp_player;

    // Automatic Variable Declarations
    // Implementation
    Wait(0.0625, c_timeGame);
    PlayerSetRace(lp_player, "Prot");
    Wait(0.0625, c_timeGame);
    PlayerSetRace(lp_player, libCPGL_gv_commander[lp_player].lv_race);
    PlayerSetCommander(lp_player, libCPGL_gv_commander[lp_player].lv_commander);
    libNtve_gf_HideGameUI(false, PlayerGroupSingle(lp_player));
    Wait(0.0625, c_timeGame);
    libNtve_gf_HideGameUI(true, PlayerGroupSingle(lp_player));
    return true;
}

void libCPGL_gf_VoicePackOverridesApplyUnused (int lp_player) {
    // Variable Declarations
    string lv_itReward;
    string lv_appReward;
    string lv_rewardStringIDCombine;

    // Automatic Variable Declarations
    int auto184EE8F0_catalog;
    int auto184EE8F0_i;
    int auto8EE96CC7_catalog;
    int auto8EE96CC7_i;

    // Variable Initialization
    lv_rewardStringIDCombine = "";

    // Implementation
    auto184EE8F0_catalog = c_gameCatalogReward;
    auto184EE8F0_i = 1;
    for ( ; auto184EE8F0_i <= CatalogEntryCount(c_gameCatalogReward) ; auto184EE8F0_i += 1 ) {
        lv_itReward = CatalogEntryGet(auto184EE8F0_catalog, auto184EE8F0_i);
        if ((CatalogEntryScope(c_gameCatalogReward, lv_itReward) == "CRewardVoicePack")) {
            if ((PlayerHasReward(lp_player, lv_itReward) == true)) {
                lv_rewardStringIDCombine = (((lv_itReward) + "_" + (libCOOC_gf_ActiveCommanderForPlayer(lp_player))));
                auto8EE96CC7_catalog = c_gameCatalogReward;
                auto8EE96CC7_i = 1;
                for ( ; auto8EE96CC7_i <= CatalogEntryCount(c_gameCatalogReward) ; auto8EE96CC7_i += 1 ) {
                    lv_appReward = CatalogEntryGet(auto8EE96CC7_catalog, auto8EE96CC7_i);
                    if ((CatalogEntryScope(c_gameCatalogReward, lv_appReward) == "CRewardVoicePack")) {
                        if (((lv_appReward) == lv_rewardStringIDCombine)) {
                            PlayerAddReward(lp_player, lv_rewardStringIDCombine);
                        }

                    }

                }
            }

        }

    }
}

void libCPGL_gf_VoicePackCommanderDefaultApply (int lp_player) {
    // Variable Declarations
    string lv_defaultvoicepack;
    string lv_itReward;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_defaultvoicepack = libCOOC_gf_CC_CommanderDefaultVoicePack(libCPGL_gv_commander[lp_player].lv_commanderInstance);

    // Implementation
    if ((lv_defaultvoicepack != "") && (lv_defaultvoicepack != null)) {
        PlayerAddReward(lp_player, (lv_defaultvoicepack));
    }
    else {
        return ;
    }
}

int libCPGL_gf_CC_PlayerMasteryLevel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCPGL_gv_cCX_PlayerMasteryLevel[lp_player];
}

int libCPGL_gf_CC_PlayerMasteryCategory (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("MasteryUpgrades", lp_masteryUpgrade, "Category", 1);
}

int libCPGL_gf_CC_PlayerMasteryCategoryPointsAtLevel (int lp_player, int lp_categoryIndex, int lp_level) {
    // Variable Declarations
    int lv_categoryPoints;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_categoryPoints = (lp_level / libCPGL_gv_cCC_MASTERY_CATEGORIES);
    if ((ModI(lp_level, libCPGL_gv_cCC_MASTERY_CATEGORIES) >= lp_categoryIndex)) {
        lv_categoryPoints += 1;
    }

    return lv_categoryPoints;
}

int libCPGL_gf_CC_PlayerMasteryCategoryPointsSpent (int lp_player, int lp_categoryIndex) {
    // Variable Declarations
    int lv_pointsSpent;
    string lv_indexMasteryUpgrade;

    // Automatic Variable Declarations
    int auto13179823_ai;
    int auto13179823_ae;
    int auto13179823_ac;

    // Variable Initialization

    // Implementation
    auto13179823_ai = 0;
    auto13179823_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (auto13179823_ai < auto13179823_ae) {
        auto13179823_ai = auto13179823_ai+1;
        auto13179823_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", auto13179823_ai), "Category", 1);
        if( auto13179823_ac == lp_categoryIndex &&
        libCPGL_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", auto13179823_ai),"Commander",1) ) {
            lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", auto13179823_ai);
            lv_pointsSpent += libCPGL_gf_CC_PlayerMasteryUpgradeLevel(lp_player, lv_indexMasteryUpgrade);
        }    
    }
    return lv_pointsSpent;
}

int libCPGL_gf_CC_PlayerMasteryCategoryPointsAvailable (int lp_player, int lp_categoryIndex) {
    // Automatic Variable Declarations
    // Implementation
    return (libCPGL_gf_CC_PlayerMasteryCategoryPointsAtLevel(lp_player, lp_categoryIndex, 0) - libCPGL_gf_CC_PlayerMasteryCategoryPointsSpent(lp_player, lp_categoryIndex));
}

int libCPGL_gf_CC_PlayerMasteryUpgradeLevel (int lp_player, string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return libCPGL_gv_cCX_PlayerMasteryPointsSpent[lp_player][libCPGL_gf_CC_CommanderInternalIndex(libCPGL_gf_CC_PlayerMasteryCommander(lp_masteryUpgrade))][libCPGL_gf_CC_PlayerMasteryInternalIndex(lp_masteryUpgrade)];
}

string libCPGL_gf_CC_PlayerMasteryCommander (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetUserInstance("MasteryUpgrades", lp_masteryUpgrade, "Commander", 1);
}

string libCPGL_gf_CC_PlayerMasteryUpgradeData (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetUpgrade("MasteryUpgrades", lp_masteryUpgrade, "Upgrade", 1);
}

string libCPGL_gf_CC_PlayerMasteryTalent (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("MasteryUpgrades", lp_masteryUpgrade, "TalentData", 1);
}

int libCPGL_gf_CC_PlayerMasteryInternalIndex (string lp_masteryUpgrade) {
    // Variable Declarations
    int lv_internalIndex;
    int lv_talentIndex;

    // Automatic Variable Declarations
    int auto9EC00349_ae;
    const int auto9EC00349_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_masteryUpgrade == null)) {
        return 0;
    }

    lv_internalIndex = UserDataGetInt("MasteryUpgrades", lp_masteryUpgrade, "InternalIndex", 1);
    if ((lv_internalIndex == 0)) {
        auto9EC00349_ae = (CatalogFieldValueCount(c_gameCatalogCommander, libCPGL_gf_CC_CommanderData(libCPGL_gf_CC_PlayerMasteryCommander(lp_masteryUpgrade)), "MasteryTalentArray", c_playerAny)-1);
        lv_talentIndex = 0;
        for ( ; ( (auto9EC00349_ai >= 0 && lv_talentIndex <= auto9EC00349_ae) || (auto9EC00349_ai < 0 && lv_talentIndex >= auto9EC00349_ae) ) ; lv_talentIndex += auto9EC00349_ai ) {
            lv_internalIndex += 1;
            if (((CatalogFieldValueGet(c_gameCatalogCommander, libCPGL_gf_CC_CommanderData(libCPGL_gf_CC_PlayerMasteryCommander(lp_masteryUpgrade)), "MasteryTalentArray[" + IntToString(lv_talentIndex) + "].Talent", c_playerAny)) == libCPGL_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade))) {
                UserDataSetInt("MasteryUpgrades", lp_masteryUpgrade, "InternalIndex", 1, lv_internalIndex);
                return lv_internalIndex;
                break;
            }

        }
    }
    else {
        return lv_internalIndex;
    }
    return 0;
}

text libCPGL_gf_CC_PlayerMasteryName (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPGL_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade) == null)) {
        return StringToText((lp_masteryUpgrade));
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogButton, CatalogFieldValueGet(c_gameCatalogTalent, libCPGL_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade), "Face", c_playerAny), "Name", c_playerAny));
}

text libCPGL_gf_CC_PlayerMasteryTooltip (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPGL_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade) == null)) {
        return StringToText((lp_masteryUpgrade));
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogButton, CatalogFieldValueGet(c_gameCatalogTalent, libCPGL_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade), "Face", c_playerAny), "Tooltip", c_playerAny));
}

text libCPGL_gf_CC_PlayerMasteryValueFormat (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("MasteryUpgrades", lp_masteryUpgrade, "ValueFormat", 1);
}

fixed libCPGL_gf_CC_PlayerMasteryValueIncrement (string lp_masteryUpgrade, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetFixed("MasteryUpgrades", lp_masteryUpgrade, "PointIncrement", lp_index);
}

bool libCPGL_gf_CC_PlayerMasteryEnabled (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCPGL_gv_cC_PlayerMasteryEnabled[lp_player];
}

void libCPGL_gf_CC_PlayerMasteryUpgradeLevelSet (int lp_player, string lp_masteryUpgrade, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    libCPGL_gv_cCX_PlayerMasteryPointsSpent[lp_player][libCPGL_gf_CC_CommanderInternalIndex(libCPGL_gf_CC_PlayerMasteryCommander(lp_masteryUpgrade))][libCPGL_gf_CC_PlayerMasteryInternalIndex(lp_masteryUpgrade)] = lp_level;
    libCPGL_gf_CC_ScoreValueSet(lp_player, (("MasteryPoints" + IntToString(libCPGL_gf_CC_PlayerMasteryInternalIndex(lp_masteryUpgrade)))), lp_level);
}

void libCPGL_gf_CC_PlayerMasteryLevelSet (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    libCPGL_gv_cCX_PlayerMasteryLevel[lp_player] = lp_level;
}

void libCPGL_gf_CC_PlayerMasteryEnabledSet (int lp_player, bool lp_enabled) {
    // Automatic Variable Declarations
    // Implementation
    libCPGL_gv_cC_PlayerMasteryEnabled[lp_player] = lp_enabled;
}

void libCPGL_gf_CC_ApplyMasteryTech (int lp_player) {
    // Variable Declarations
    string lv_indexMasteryUpgrade;

    // Automatic Variable Declarations
    int auto7097D963_ai;
    int auto7097D963_ae;
    int auto7097D963_ac;

    // Variable Initialization

    // Implementation
    if ((libCPGL_gv_cC_PlayerMasteryEnabled[lp_player] == false)) {
        return ;
    }

    auto7097D963_ai = 0;
    auto7097D963_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (auto7097D963_ai < auto7097D963_ae) {
        auto7097D963_ai = auto7097D963_ai+1;
        auto7097D963_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", auto7097D963_ai), "Category", 1);
        if( libCPGL_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", auto7097D963_ai),"Commander",1) ) {
            lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", auto7097D963_ai);
            if ((libCPGL_gf_CC_PlayerMasteryUpgradeData(lv_indexMasteryUpgrade) != null)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libCPGL_gf_CC_PlayerMasteryUpgradeData(lv_indexMasteryUpgrade), libCPGL_gf_CC_PlayerMasteryUpgradeLevel(lp_player, lv_indexMasteryUpgrade));
            }

        }    
    }
}

void libCPGL_gf_CC_SaveMasteryToBank (int lp_player, bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexMasteryUpgrade;

    // Automatic Variable Declarations
    int auto5658C031_ai;
    int auto5658C031_ae;

    // Variable Initialization

    // Implementation
    libCPCM_gf_CC_SaveTransitionVarInteger(lp_bank, lp_section, "MasteryLevel", libCPGL_gf_CC_PlayerMasteryLevel(lp_player), 0);
    auto5658C031_ai = 0;
    auto5658C031_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (auto5658C031_ai < auto5658C031_ae) {
        auto5658C031_ai = auto5658C031_ai+1;
        lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", auto5658C031_ai);
        libCPCM_gf_CC_SaveTransitionVarInteger(lp_bank, lp_section, (lv_indexMasteryUpgrade), libCPGL_gf_CC_PlayerMasteryUpgradeLevel(lp_player, lv_indexMasteryUpgrade), 0);
    }
}

void libCPGL_gf_CC_LoadMasteryFromBank (int lp_player, bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexMasteryUpgrade;

    // Automatic Variable Declarations
    int auto3A1E8FA0_ai;
    int auto3A1E8FA0_ae;

    // Variable Initialization

    // Implementation
    libCPGL_gv_cCX_PlayerMasteryLevel[lp_player] = libCPCM_gf_CC_LoadTransitionVarInteger(lp_bank, lp_section, "MasteryLevel", 0);
    auto3A1E8FA0_ai = 0;
    auto3A1E8FA0_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (auto3A1E8FA0_ai < auto3A1E8FA0_ae) {
        auto3A1E8FA0_ai = auto3A1E8FA0_ai+1;
        lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", auto3A1E8FA0_ai);
        libCPGL_gv_cCX_PlayerMasteryPointsSpent[lp_player][libCPGL_gf_CC_CommanderInternalIndex(libCPGL_gf_CC_PlayerMasteryCommander(lv_indexMasteryUpgrade))][libCPGL_gf_CC_PlayerMasteryInternalIndex(lv_indexMasteryUpgrade)] = libCPCM_gf_CC_LoadTransitionVarInteger(lp_bank, lp_section, (lv_indexMasteryUpgrade), 0);
        libCPCM_gf_CC_SaveTransitionVarInteger(lp_bank, lp_section, (lv_indexMasteryUpgrade), libCPGL_gf_CC_PlayerMasteryUpgradeLevel(lp_player, lv_indexMasteryUpgrade), 0);
    }
}

string libCPGL_gf_CC_CommanderPrestigeIndexFace (string lp_commander, int lp_index) {
    // Variable Declarations
    int lv_prestigeindex;
    string lv_prestigefacestring;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_prestigefacestring = "";

    // Implementation
    if ((lp_commander != null) && ((lp_index >= 1) && (lp_index <= libCPGL_gv_cCC_PLAYERPRESTIGEMAXRANK)) && (CatalogEntryIsValid(c_gameCatalogCommander, lp_commander) == true) && (CatalogFieldValueCount(c_gameCatalogCommander, lp_commander, "PrestigeArray", c_playerAny) >= lp_index)) {
        lv_prestigefacestring = CatalogFieldValueGet(c_gameCatalogCommander, lp_commander, "PrestigeArray[" + IntToString((lp_index - 1)) + "]", c_playerAny);
        if ((CatalogEntryIsValid(c_gameCatalogButton, lv_prestigefacestring) == true)) {
            return (lv_prestigefacestring);
        }

    }

    return "CommanderPrestige";
}

int libCPGL_gf_CC_PlayerActivePrestigeIndex (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCPGL_gv_commander[lp_player].lv_prestigeLevel;
}

string libCPGL_gf_CC_PlayerActivePrestigeInstance (int lp_player) {
    // Variable Declarations
    string lv_commander;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_commander = libCPGL_gf_ActiveCommanderForPlayer(lp_player);

    // Implementation
    if ((lv_commander != null)) {
        return UserDataGetUserInstance("PlayerCommanders", lv_commander, "Prestige", libCPGL_gf_CC_PlayerActivePrestigeIndex(lp_player));
    }

    return null;
}

string libCPGL_gf_CC_PrestigeCommanderBankKey (string lp_commander, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return ("PRESTIGE" + "_" + (lp_commander));
}

string libCPGL_gf_CC_PrestigeCommanderTableKey (string lp_commander, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return ("PRESTIGE" + "_" + IntToString(lp_player) + "_" + (lp_commander));
}

bool libCPGL_gf_CC_PrestigeSuppressed (int lp_player, string lp_suppressionType) {
    // Variable Declarations
    string lv_prestige;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_prestige = libCPGL_gf_CC_PlayerActivePrestigeInstance(lp_player);

    // Implementation
    if ((UserDataGetInt("PlayerPrestige", lv_prestige, lp_suppressionType, 1) == 1)) {
        return true;
    }

    return false;
}

void libCPGL_gf_CC_SetPlayerPrestigeIndex (int lp_player, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_CPGL_BAA40876", "A", IntToText(lp_index));
    TextExpressionSetToken("Param/Expression/lib_CPGL_BAA40876", "B", IntToText(lp_player));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPGL_BAA40876"), false);
    libCPGL_gv_commander[lp_player].lv_prestigeLevel = libNtve_gf_ArithmeticIntClamp(lp_index, 0, libCPGL_gv_cCC_PLAYERPRESTIGEMAXRANK);
}

void libCPGL_gf_CC_ApplyUpgradeSupplemental (int lp_player, string lp_upgradeSupplemental) {
    // Variable Declarations
    string lv_upgrade;
    string lv_supplement;
    string lv_script;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_upgrade = UserDataGetGameLink("PlayerPrestigeUpgradeSupplements", lp_upgradeSupplemental, "Upgrade", 1);
    lv_supplement = UserDataGetGameLink("PlayerPrestigeUpgradeSupplements", lp_upgradeSupplemental, "Supplement", 1);
    lv_script = "";

    // Implementation
    if ((lp_upgradeSupplemental != null) && (CatalogEntryIsValid(c_gameCatalogUpgrade, lv_upgrade) == true) && (CatalogEntryIsValid(c_gameCatalogUpgrade, lv_supplement) == true) && (TechTreeUpgradeCount(lp_player, lv_upgrade, c_techCountCompleteOnly) > 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_supplement, TechTreeUpgradeCount(lp_player, lv_upgrade, c_techCountCompleteOnly));
        lv_script = UserDataGetString("PlayerPrestigeUpgradeSupplements", lp_upgradeSupplemental, "PostScript", 1);
        if ((lv_script != "")) {
            libNtve_gf_TriggerExecuteByName((lv_script + "_Func"), false, true);
        }

    }

}

void libCPGL_gf_CC_PlayerPrestigeEnable (int lp_player, string lp_prestige) {
    // Variable Declarations
    int lv_index;
    string lv_upgrade;
    string lv_script;
    int lv_ally;

    // Automatic Variable Declarations
    int auto9AABCC7A_ae;
    const int auto9AABCC7A_ai = 1;
    int auto06096711_ae;
    const int auto06096711_ai = 1;
    int autoCCC6C6EE_ae;
    const int autoCCC6C6EE_ai = 1;
    int auto12BFBD19_ae;
    const int auto12BFBD19_ai = 1;
    playergroup autoD9A0F93B_g;
    int autoBA364D59_ae;
    const int autoBA364D59_ai = 1;
    int autoB2A63CFE_ae;
    const int autoB2A63CFE_ai = 1;
    int auto4352434E_ae;
    const int auto4352434E_ai = 1;
    int auto72BC9E4D_ae;
    const int auto72BC9E4D_ai = 1;
    playergroup autoCE39E66D_g;
    int auto5896F5D3_ae;
    const int auto5896F5D3_ai = 1;

    // Variable Initialization
    lv_script = "";

    // Implementation
    if ((lp_prestige == null)) {
        return ;
    }

    auto9AABCC7A_ae = UserDataFieldValueCount("PlayerPrestige", "DisableAbil");
    lv_index = 1;
    for ( ; ( (auto9AABCC7A_ai >= 0 && lv_index <= auto9AABCC7A_ae) || (auto9AABCC7A_ai < 0 && lv_index >= auto9AABCC7A_ae) ) ; lv_index += auto9AABCC7A_ai ) {
        TechTreeAbilityAllow(lp_player, UserDataGetAbilCmd("PlayerPrestige", lp_prestige, "DisableAbil", lv_index), false);
    }
    auto06096711_ae = UserDataFieldValueCount("PlayerPrestige", "EnableAbil");
    lv_index = 1;
    for ( ; ( (auto06096711_ai >= 0 && lv_index <= auto06096711_ae) || (auto06096711_ai < 0 && lv_index >= auto06096711_ae) ) ; lv_index += auto06096711_ai ) {
        TechTreeAbilityAllow(lp_player, UserDataGetAbilCmd("PlayerPrestige", lp_prestige, "EnableAbil", lv_index), true);
    }
    autoCCC6C6EE_ae = UserDataFieldValueCount("PlayerPrestige", "SuppressUpgrade");
    lv_index = 1;
    for ( ; ( (autoCCC6C6EE_ai >= 0 && lv_index <= autoCCC6C6EE_ae) || (autoCCC6C6EE_ai < 0 && lv_index >= autoCCC6C6EE_ae) ) ; lv_index += autoCCC6C6EE_ai ) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, UserDataGetGameLink("PlayerPrestige", lp_prestige, "SuppressUpgrade", lv_index), 0);
    }
    auto12BFBD19_ae = UserDataFieldValueCount("PlayerPrestige", "SuppressUpgradeShared");
    lv_index = 1;
    for ( ; ( (auto12BFBD19_ai >= 0 && lv_index <= auto12BFBD19_ae) || (auto12BFBD19_ai < 0 && lv_index >= auto12BFBD19_ae) ) ; lv_index += auto12BFBD19_ai ) {
        autoD9A0F93B_g = libCPGL_gf_HumanPlayers();
        lv_ally = -1;
        while (true) {
            lv_ally = PlayerGroupNextPlayer(autoD9A0F93B_g, lv_ally);
            if (lv_ally < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(lv_ally, UserDataGetGameLink("PlayerPrestige", lp_prestige, "SuppressUpgradeShared", lv_index), 0);
        }
    }
    autoBA364D59_ae = UserDataFieldValueCount("PlayerPrestige", "DisableUnit");
    lv_index = 1;
    for ( ; ( (autoBA364D59_ai >= 0 && lv_index <= autoBA364D59_ae) || (autoBA364D59_ai < 0 && lv_index >= autoBA364D59_ae) ) ; lv_index += autoBA364D59_ai ) {
        TechTreeUnitAllow(lp_player, UserDataGetUnit("PlayerPrestige", lp_prestige, "DisableUnit", lv_index), false);
    }
    autoB2A63CFE_ae = UserDataFieldValueCount("PlayerPrestige", "UpgradeSupplements");
    lv_index = 1;
    for ( ; ( (autoB2A63CFE_ai >= 0 && lv_index <= autoB2A63CFE_ae) || (autoB2A63CFE_ai < 0 && lv_index >= autoB2A63CFE_ae) ) ; lv_index += autoB2A63CFE_ai ) {
        libCPGL_gf_CC_ApplyUpgradeSupplemental(lp_player, UserDataGetUserInstance("PlayerPrestige", lp_prestige, "UpgradeSupplements", lv_index));
    }
    lv_upgrade = UserDataGetGameLink("PlayerPrestige", lp_prestige, "PrimaryUpgrade", 1);
    if ((lv_upgrade != null)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_upgrade, 1);
    }

    lv_script = UserDataGetString("PlayerPrestige", lp_prestige, "ScriptName", 1);
    if ((lv_script != "")) {
        libNtve_gf_TriggerExecuteByName((lv_script + "_Func"), true, true);
    }

    auto4352434E_ae = UserDataFieldValueCount("PlayerPrestige", "SecondaryUpgradesSelf");
    lv_index = 1;
    for ( ; ( (auto4352434E_ai >= 0 && lv_index <= auto4352434E_ae) || (auto4352434E_ai < 0 && lv_index >= auto4352434E_ae) ) ; lv_index += auto4352434E_ai ) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, UserDataGetGameLink("PlayerPrestige", lp_prestige, "SecondaryUpgradesSelf", lv_index), 1);
    }
    auto72BC9E4D_ae = UserDataFieldValueCount("PlayerPrestige", "SecondaryUpgradesShared");
    lv_index = 1;
    for ( ; ( (auto72BC9E4D_ai >= 0 && lv_index <= auto72BC9E4D_ae) || (auto72BC9E4D_ai < 0 && lv_index >= auto72BC9E4D_ae) ) ; lv_index += auto72BC9E4D_ai ) {
        autoCE39E66D_g = libCPCD_gf_CommanderPlayers();
        lv_ally = -1;
        while (true) {
            lv_ally = PlayerGroupNextPlayer(autoCE39E66D_g, lv_ally);
            if (lv_ally < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(lv_ally, UserDataGetGameLink("PlayerPrestige", lp_prestige, "SecondaryUpgradesShared", lv_index), 1);
        }
    }
    auto5896F5D3_ae = UserDataFieldValueCount("PlayerPrestige", "PlayerResponses");
    lv_index = 1;
    for ( ; ( (auto5896F5D3_ai >= 0 && lv_index <= auto5896F5D3_ae) || (auto5896F5D3_ai < 0 && lv_index >= auto5896F5D3_ae) ) ; lv_index += auto5896F5D3_ai ) {
        libCPGL_gf_CC_PlayerResponseEnable(lp_player, UserDataGetUserInstance("PlayerPrestige", lp_prestige, "PlayerResponses", lv_index), true);
    }
    PlayerApplySkin(lp_player, UserDataGetGameLink("PlayerPrestige", lp_prestige, "Skin", 1), true);
}

void libCPGL_gf_CC_ApplyPrestigeTech (int lp_player) {
    // Variable Declarations
    string lv_upgrade;
    string lv_button;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_CPGL_696618E5", "A", IntToText(libCPGL_gf_CC_PlayerActivePrestigeIndex(lp_player)));
    TextExpressionSetToken("Param/Expression/lib_CPGL_696618E5", "B", IntToText(lp_player));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPGL_696618E5"), false);
    libCPGL_gf_CC_PlayerPrestigeEnable(lp_player, libCPGL_gf_CC_PlayerActivePrestigeInstance(lp_player));
}

void libCPGL_gf_CC_SaveChampionToBank3 (int lp_player, bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexCommander;
    string lv_indexPerk;

    // Automatic Variable Declarations
    int auto95C90754_ai;
    int auto95C90754_ae;

    // Variable Initialization

    // Implementation
    auto95C90754_ai = 1;
    auto95C90754_ae = UserDataInstanceCount("PlayerCommander")+1;
    while (auto95C90754_ai < auto95C90754_ae) {
        lv_indexCommander = UserDataInstance("PlayerCommander", auto95C90754_ai);
        auto95C90754_ai = auto95C90754_ai+1;
        libCPCM_gf_CC_SaveTransitionVarInteger(lp_bank, lp_section, libCPGL_gf_CC_PrestigeCommanderBankKey(lv_indexCommander, lp_player), DataTableGetInt(true, libCPGL_gf_CC_PrestigeCommanderTableKey(lv_indexCommander, lp_player)), 0);
    }
}

void libCPGL_gf_CC_LoadChampionFromBank3 (int lp_player, bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexPerk;
    string lv_indexCommander;

    // Automatic Variable Declarations
    int auto38F0FE71_ai;
    int auto38F0FE71_ae;

    // Variable Initialization

    // Implementation
    auto38F0FE71_ai = 1;
    auto38F0FE71_ae = UserDataInstanceCount("PlayerCommander")+1;
    while (auto38F0FE71_ai < auto38F0FE71_ae) {
        lv_indexCommander = UserDataInstance("PlayerCommander", auto38F0FE71_ai);
        auto38F0FE71_ai = auto38F0FE71_ai+1;
        DataTableSetInt(true, libCPGL_gf_CC_PrestigeCommanderTableKey(lv_indexCommander, lp_player), libCPCM_gf_CC_LoadTransitionVarInteger(lp_bank, lp_section, libCPGL_gf_CC_PrestigeCommanderBankKey(lv_indexCommander, lp_player), 0));
    }
}

string libCPGL_gf_ActiveCommanderForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCPGL_gv_commander[lp_player].lv_commanderInstance;
}

int libCPGL_gf_CC_CommanderLevel (int lp_player, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return libCPGL_gv_commander[lp_player].lv_commanderLevel;
}

string libCPGL_gf_CC_PlayerLevelCommander (string lp_playerLevel) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetUserInstance("PlayerLevels", lp_playerLevel, "Commander", 1);
}

int libCPGL_gf_CC_PlayerLevelValue (string lp_playerLevel) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("PlayerLevels", lp_playerLevel, "Level", 1);
}

int libCPGL_gf_CC_PlayerExperience (int lp_player, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return libCPGL_gv_commander[lp_player].lv_commanderExperience;
}

void libCPGL_gf_SetMissionEffort (fixed lp_percentEffort) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto2858F5E5_g;

    // Variable Initialization

    // Implementation
    libCPGL_gv_cC_PlayerExperienceEffortPct = lp_percentEffort;
    auto2858F5E5_g = libCPCD_gf_NondefeatedPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto2858F5E5_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCPGL_gf_CC_PlayerSetXPScores(c_gameOverDefeat, lv_indexPlayer);
    }
}

fixed libCPGL_gf_CC_PlayerExperienceResultModifier (int lp_result) {
    // Automatic Variable Declarations
    // Implementation
    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true) && (libCPGL_gv_cC_DebugDefeatMultiplierOverride >= 0.0)) {
        return libCPGL_gv_cC_DebugDefeatMultiplierOverride;
    }

    if ((lp_result == c_gameOverVictory)) {
        return 1.0;
    }

    return UserDataGetFixed("Experience", "GameValues", "LossMaxMultiplier", 1);
}

fixed libCPGL_gf_CC_PlayerExperienceInLevelPct (int lp_player, string lp_commander) {
    // Variable Declarations
    int lv_xPStart;
    int lv_xPInLevel;
    int lv_currentLevel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_currentLevel = libCPGL_gf_CC_CommanderLevel(lp_player, lp_commander);
    if ((lv_currentLevel == libCPGL_gv_cCC_PLAYERLEVELMAX)) {
        return 100.0;
    }

    lv_xPStart = libCPGL_gf_CC_PlayerLevelExperienceNeededTotal(lv_currentLevel);
    lv_xPInLevel = (libCPGL_gf_CC_PlayerExperience(lp_player, lp_commander)-lv_xPStart);
    return (IntToFixed(lv_xPInLevel) / IntToFixed(libCPGL_gf_CC_PlayerLevelExperienceNeededDelta((lv_currentLevel+1))));
}

int libCPGL_gf_CC_PlayerExperienceToNextLevel (int lp_player, string lp_commander) {
    // Variable Declarations
    int lv_xPStart;
    int lv_xPInLevel;
    int lv_currentLevel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_currentLevel = libCPGL_gf_CC_CommanderLevel(lp_player, lp_commander);
    if ((lv_currentLevel == libCPGL_gv_cCC_PLAYERLEVELMAX)) {
        return 0;
    }

    return (libCPGL_gf_CC_PlayerLevelExperienceNeededTotal((lv_currentLevel+1))-libCPGL_gf_CC_PlayerExperience(lp_player, lp_commander));
}

int libCPGL_gf_CC_PlayerLevelExperienceNeededDelta (int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level == 0)) {
        return 0;
    }

    return UserDataGetInt("Experience", "GameValues", "ExperienceToLevel", lp_level);
}

int libCPGL_gf_CC_PlayerLevelExperienceNeededTotal (int lp_level) {
    // Variable Declarations
    int lv_levelIndex;
    int lv_maxLevel;
    int lv_xPTotal;

    // Automatic Variable Declarations
    int autoFA2E7C61_ae;
    const int autoFA2E7C61_ai = 1;

    // Variable Initialization

    // Implementation
    lv_maxLevel = MinI(lp_level, libCPGL_gv_cCC_PLAYERLEVELMAX);
    autoFA2E7C61_ae = lv_maxLevel;
    lv_levelIndex = 1;
    for ( ; ( (autoFA2E7C61_ai >= 0 && lv_levelIndex <= autoFA2E7C61_ae) || (autoFA2E7C61_ai < 0 && lv_levelIndex >= autoFA2E7C61_ae) ) ; lv_levelIndex += autoFA2E7C61_ai ) {
        lv_xPTotal += libCPGL_gf_CC_PlayerLevelExperienceNeededDelta(lv_levelIndex);
    }
    return lv_xPTotal;
}

int libCPGL_gf_CC_PlayerLevelFromExperience (int lp_experience) {
    // Variable Declarations
    int lv_levelIndex;
    int lv_xPRemaining;

    // Automatic Variable Declarations
    const int auto18D7A588_ae = libCPGL_gv_cCC_PLAYERLEVELMAX;
    const int auto18D7A588_ai = 1;

    // Variable Initialization

    // Implementation
    lv_xPRemaining = lp_experience;
    lv_levelIndex = 1;
    for ( ; ( (auto18D7A588_ai >= 0 && lv_levelIndex <= auto18D7A588_ae) || (auto18D7A588_ai < 0 && lv_levelIndex >= auto18D7A588_ae) ) ; lv_levelIndex += auto18D7A588_ai ) {
        if ((lv_xPRemaining < libCPGL_gf_CC_PlayerLevelExperienceNeededDelta(lv_levelIndex))) {
            return (lv_levelIndex-1);
        }

        lv_xPRemaining -= libCPGL_gf_CC_PlayerLevelExperienceNeededDelta(lv_levelIndex);
    }
    return libCPGL_gv_cCC_PLAYERLEVELMAX;
}

int libCPGL_gf_CC_PlayerAlly (int lp_player) {
    // Variable Declarations
    playergroup lv_group;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = libCPCD_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(lp_player);

    // Implementation
    PlayerGroupRemove(lv_group, lp_player);
    if ((PlayerGroupCount(lv_group) > 0)) {
        return PlayerGroupPlayer(lv_group, 1);
    }

    if ((lp_player == 1)) {
        return 2;
    }
    else {
        return 1;
    }
}

int libCPGL_gf_CC_MissionExperienceReward () {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("Experience", "GameValues", "WinExperience", 1);
}

fixed libCPGL_gf_CC_MissionExperienceDifficultyBonus (int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetFixed("Experience", "GameValues", "DifficultyModifier", libCPCD_gf_CC_DifficultyIndex(lp_difficulty))+libCOMU_gf_CT_GetRandomMutatorXPModifier());
}

string libCPGL_gf_CC_CommanderUserInstance (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogCommander, lp_commander) == false)) {
        return null;
    }

    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogCommander, (lp_commander), "UserReference", libCPCC_gv_cCC_DISREGARDPLAYER));
}

string libCPGL_gf_CC_CommanderData (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "CommanderData", 1);
}

string libCPGL_gf_CC_CommanderRace (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "Race", 1);
}

string libCPGL_gf_CC_CommanderSpawnRace (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "SpawnRace", 1);
}

int libCPGL_gf_CC_CommanderInternalIndex (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("PlayerCommanders", lp_commander, "UniqueIndex", 1);
}

string libCPGL_gf_CC_CommanderConversationLink (string lp_characterInstance) {
    // Automatic Variable Declarations
    string autoABE60D99_val;

    // Implementation
    autoABE60D99_val = lp_characterInstance;
    if (autoABE60D99_val == "TerranRaynor") {
        return "char_Raynor";
    }
    else if (autoABE60D99_val == "TerranSwann") {
        return "char_Swann";
    }
    else if (autoABE60D99_val == "ZergKerrigan") {
        return "char_Kerrigan";
    }
    else if (autoABE60D99_val == "ZergZagara") {
        return "char_Zagara";
    }
    else if (autoABE60D99_val == "ProtossArtanis") {
        return "char_Artanis";
    }
    else if (autoABE60D99_val == "ProtossVorazun") {
        return "char_Vorazun";
    }
    else if (autoABE60D99_val == "ProtossKarax") {
        return "char_Karax";
    }
    else if (autoABE60D99_val == "ZergAbathur") {
        return "char_Abathur";
    }
    else if (autoABE60D99_val == "ProtossAlarak") {
        return "char_Alarak";
    }
    else if (autoABE60D99_val == "TerranNova") {
        return "char_Nova";
    }
    else if (autoABE60D99_val == "ZergStukov") {
        return "char_Stukov";
    }
    else if (autoABE60D99_val == "ProtossFenix") {
        return "char_ProtossAI";
    }
    else if (autoABE60D99_val == "ZergDehaka") {
        return "char_Dehaka";
    }
    else if (autoABE60D99_val == "TerranHorner") {
        return "char_Horner";
    }
    else if (autoABE60D99_val == "TerranTychus") {
        return "char_Tychus";
    }
    else if (autoABE60D99_val == "ProtossZeratul") {
        return "char_ZeratulAC";
    }
    else if (autoABE60D99_val == "ZergStetmann") {
        return "char_BelshirScientist";
    }
    else if (autoABE60D99_val == "TerranMengsk") {
        return "char_MengskCommander";
    }
    else {
    }
    return "char_TerranAdjutant";
}

string libCPGL_gf_CC_CommanderPortraitModel (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetModel("PlayerCommanders", lp_commander, "PortraitModel", 1);
}

string libCPGL_gf_CC_CommanderPortraitActor (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "PortraitActor", 1);
}

string libCPGL_gf_CC_CommanderCustomImage (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("PlayerCommanders", lp_commander, "CustomImage", 1);
}

text libCPGL_gf_CC_CommanderName (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("PlayerCommanders", lp_commander, "Name", 1);
}

int libCPGL_gf_CC_CommanderGender (string lp_commander) {
    // Variable Declarations
    int lv_genderIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_genderIndex = UserDataGetInt("PlayerCommanders", lp_commander, "Gender", 1);
    return lv_genderIndex;
}

text libCPGL_gf_CC_CommanderDescription (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("PlayerCommanders", lp_commander, "Description", 1);
}

string libCPGL_gf_CC_CommanderDefaultVoicePack (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "DefaultVoicePack", 1);
}

text libCPGL_gf_CC_CommanderInfoDetails (string lp_commander, int lp_detailIndex) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("PlayerCommanders", lp_commander, "InfoDetails", lp_detailIndex);
}

string libCPGL_gf_CC_CommanderSelectCutscene (string lp_commander) {
    // Variable Declarations
    string lv_sceneName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sceneName = "";

    // Implementation
    lv_sceneName = UserDataGetString("PlayerCommanders", lp_commander, "SelectionScene", 1);
    return "Cutscenes\\" + lv_sceneName + ".SC2Cutscene";
}

string libCPGL_gf_CC_CommanderConvoTag (string lp_commander) {
    // Automatic Variable Declarations
    string auto0E057EC2_val;

    // Implementation
    auto0E057EC2_val = lp_commander;
    if (auto0E057EC2_val == "ProtossArtanis") {
        return "Artanis";
    }
    else if (auto0E057EC2_val == "ProtossVorazun") {
        return "Vorazun";
    }
    else if (auto0E057EC2_val == "ZergKerrigan") {
        return "Kerrigan";
    }
    else if (auto0E057EC2_val == "ZergZagara") {
        return "Zagara";
    }
    else if (auto0E057EC2_val == "TerranRaynor") {
        return "Raynor";
    }
    else if (auto0E057EC2_val == "TerranSwann") {
        return "Swann";
    }
    else if (auto0E057EC2_val == "ZergAbathur") {
        return "Abathur";
    }
    else if (auto0E057EC2_val == "ProtossFenix") {
        return "Fenix";
    }
    else if (auto0E057EC2_val == "ZergDehaka") {
        return "Dehaka";
    }
    else if (auto0E057EC2_val == "TerranHorner") {
        return "Horner";
    }
    else if (auto0E057EC2_val == "TerranTychus") {
        return "Tychus";
    }
    else if (auto0E057EC2_val == "ProtossZeratul") {
        return "Zeratul";
    }
    else if (auto0E057EC2_val == "ZergStetmann") {
        return "Stetmann";
    }
    else if (auto0E057EC2_val == "TerranMengsk") {
        return "Mengsk";
    }
    else {
    }
    return "Raynor";
}

string libCPGL_gf_CC_CommanderScoreCoopStatistic (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "ScoreStatisticCoop", 1);
}

string libCPGL_gf_CC_CommanderScoreSelfStatistic (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "ScoreStatisticSelf", 1);
}

int libCPGL_gf_CC_CommanderUserFieldInt (string lp_commander, string lp_userType, string lp_userInstance, string lp_userField) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoED8F704E_ae;
    const int autoED8F704E_ai = 1;

    // Variable Initialization

    // Implementation
    autoED8F704E_ae = UserDataFieldValueCount(lp_userType, "Commander");
    lv_index = 1;
    for ( ; ( (autoED8F704E_ai >= 0 && lv_index <= autoED8F704E_ae) || (autoED8F704E_ai < 0 && lv_index >= autoED8F704E_ae) ) ; lv_index += autoED8F704E_ai ) {
        if ((UserDataGetUserInstance(lp_userType, lp_userInstance, "Commander", lv_index) == lp_commander)) {
            return UserDataGetInt(lp_userType, lp_userInstance, lp_userField, lv_index);
        }

    }
    return -1;
}

string libCPGL_gf_CC_CommanderHeroUnitType (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "HeroUnit", 1);
}

string libCPGL_gf_CC_CommanderHeroStructureType (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "HeroStructure", 1);
}

abilcmd libCPGL_gf_CC_CommanderHeroReviveCommand (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetAbilCmd("PlayerCommanders", lp_commander, "ReviveAbilityCommand", 1);
}

string libCPGL_gf_CC_CommanderHeroReviveUnitType (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "HeroReviveUnit", 1);
}

string libCPGL_gf_CC_CommanderHeroReviveLink (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetString("PlayerCommanders", lp_commander, "HeroReviveLink", 1);
}

string libCPGL_gf_CC_CommanderHeroFirstReviveBehavior (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "HeroUnitFirstReviveBehavior", 1);
}

string libCPGL_gf_CC_CommanderHeroNormalReviveBehavior (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "HeroUnitNormalReviveBehavior", 1);
}

string libCPGL_gf_CC_CommanderHeroReviverExtraBehavior (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "HeroReviverExtraReviveBehavior", 1);
}

bool libCPGL_gf_CC_CommanderInGame (string lp_commander) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoEC7A17A2_g;

    // Variable Initialization

    // Implementation
    autoEC7A17A2_g = libCPGL_gf_HumanPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoEC7A17A2_g, lv_player);
        if (lv_player < 0) { break; }
        if ((libCPGL_gf_ActiveCommanderForPlayer(lv_player) == lp_commander)) {
            return true;
        }

    }
    return false;
}

string libCPGL_gf_CC_CommanderGlobalCastUnitType (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "GlobalCastUnit", 1);
}

soundlink libCPGL_gf_CC_CommanderVOLine (string lp_commander, int lp_line) {
    // Variable Declarations
    string lv_vOSound;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_vOSound = UserDataGetSound("PlayerCommanders", lp_commander, "StandardVO", (lp_line));
    if ((lv_vOSound == null)) {
        return null;
    }

    return SoundLink(lv_vOSound, c_soundIndexAny);
}

text libCPGL_gf_CC_CommanderGeneralTipTitle (string lp_tipID) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("GeneralTips", lp_tipID, "TipTitle", 1);
}

text libCPGL_gf_CC_CommanderGeneralTipDetails (string lp_tipID) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("GeneralTips", lp_tipID, "TipDetails", 1);
}

string libCPGL_gf_CC_CommanderGeneralTipIcon (string lp_tipID) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("GeneralTips", lp_tipID, "TipIcon", 1);
}

int libCPGL_gf_CC_CommanderPlayer (string lp_commander) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoC4191391_g;

    // Variable Initialization

    // Implementation
    autoC4191391_g = libCPCD_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoC4191391_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCPGL_gf_ActiveCommanderForPlayer(lv_indexPlayer) == lp_commander)) {
            return lv_indexPlayer;
        }

    }
    return c_playerAny;
}

int libCPGL_gf_CC_PlayerOfCommanderInGroupFirst (string lp_commander, playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoF83D4BDC_g;

    // Variable Initialization

    // Implementation
    autoF83D4BDC_g = lp_playerGroup;
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoF83D4BDC_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCPGL_gf_ActiveCommanderForPlayer(lv_indexPlayer) == lp_commander)) {
            return lv_indexPlayer;
        }

    }
    return c_playerAny;
}

playergroup libCPGL_gf_CC_PlayersOfCommander (string lp_commander) {
    // Variable Declarations
    int lv_indexPlayer;
    playergroup lv_playerGroup;

    // Automatic Variable Declarations
    playergroup autoC3A17754_g;

    // Variable Initialization
    lv_playerGroup = PlayerGroupEmpty();

    // Implementation
    autoC3A17754_g = libCPGL_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoC3A17754_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCPGL_gf_ActiveCommanderForPlayer(lv_indexPlayer) == lp_commander)) {
            PlayerGroupAdd(lv_playerGroup, lv_indexPlayer);
        }

    }
    return lv_playerGroup;
}

string libCPGL_gf_CC_CommanderSkin (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("PlayerCommanders", lp_commander, "CommanderSkin", 1);
}

void libCPGL_gf_CC_PlayerAwardMissionXP (int lp_result, int lp_player) {
    // Variable Declarations
    int lv_baseXP;
    int lv_objectiveXP;
    int lv_totalXP;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCPCM_gv_cC_InContestMap == true)) {
        return ;
    }

    if ((GameIsOnline() == true)) {
        libCPGL_gf_CC_PlayerSetXPScores(lp_result, lp_player);
    }
    else {
        lv_baseXP = FixedToInt((libCPGL_gf_CC_MissionExperienceReward()*libCPGL_gf_CC_PlayerExperienceResultModifier(lp_result)*libCPGL_gf_CC_MissionExperienceDifficultyBonus(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player))));
        lv_totalXP = (lv_totalXP + lv_objectiveXP);
        libCPGL_gf_CC_PlayerExperienceAdd(lp_player, lv_totalXP);
        libCPGL_gf_CC_UpdatePlayerLevel(lp_player);
    }
}

void libCPGL_gf_CC_PlayerSetXPScores (int lp_result, int lp_player) {
    // Variable Declarations
    int lv_baseXP;
    int lv_objectiveXP;
    int lv_totalXP;
    int lv_objectiveXPGained;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GameIsOnline() == false)) {
        return ;
    }

    if ((libCPCM_gv_cC_InContestMap == true)) {
        return ;
    }

    lv_baseXP = FixedToInt(Ceiling((IntToFixed(libCPGL_gf_CC_MissionExperienceReward())*libCPGL_gf_CC_PlayerExperienceResultModifier(lp_result))));
    if ((lp_result == c_gameOverDefeat)) {
        lv_baseXP = FixedToInt((lv_baseXP / 100.0));
        lv_baseXP = FixedToInt(Ceiling((IntToFixed(lv_baseXP)*libCPGL_gv_cC_PlayerExperienceEffortPct)));
        lv_objectiveXP = FixedToInt((lv_objectiveXP / 100.0));
        lv_objectiveXP = FixedToInt(Ceiling((IntToFixed(lv_objectiveXP)*libCPGL_gv_cC_PlayerExperienceEffortPct)));
    }

    lv_totalXP = (lv_baseXP + lv_objectiveXP);
    if ((lv_objectiveXP > PlayerScoreValueGetAsInt(lp_player, "BonusObjectiveXP"))) {
        lv_objectiveXPGained = (lv_objectiveXP-PlayerScoreValueGetAsInt(lp_player, "BonusObjectiveXP"));
        AchievementTermQuantityAdd(lp_player, "CommanderRecruitXPBonus25", lv_objectiveXPGained);
        AchievementTermQuantityAdd(lp_player, "CommanderRecruitXPBonus50", lv_objectiveXPGained);
        AchievementTermQuantityAdd(lp_player, "CommanderRecruitXPBonus100", lv_objectiveXPGained);
        if (((libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player) == 2) || (libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player) == 3) || (libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player) == 4))) {
            AchievementTermQuantityAdd(lp_player, "CommanderSoldierXPBonus25", lv_objectiveXPGained);
            AchievementTermQuantityAdd(lp_player, "CommanderSoldierXPBonus50", lv_objectiveXPGained);
            AchievementTermQuantityAdd(lp_player, "CommanderSoldierXPBonus100", lv_objectiveXPGained);
        }

        if (((libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player) == 3) || (libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player) == 4))) {
            AchievementTermQuantityAdd(lp_player, "CommanderVeteranXPBonus25", lv_objectiveXPGained);
            AchievementTermQuantityAdd(lp_player, "CommanderVeteranXPBonus50", lv_objectiveXPGained);
            AchievementTermQuantityAdd(lp_player, "CommanderVeteranXPBonus100", lv_objectiveXPGained);
        }

        if ((libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player) == 4)) {
            AchievementTermQuantityAdd(lp_player, "CommanderCommanderXPBonus25", lv_objectiveXPGained);
            AchievementTermQuantityAdd(lp_player, "CommanderCommanderXPBonus50", lv_objectiveXPGained);
            AchievementTermQuantityAdd(lp_player, "CommanderCommanderXPBonus100", lv_objectiveXPGained);
        }

    }

    PlayerScoreValueSetFromInt(lp_player, "MetaExperience", lv_totalXP);
    PlayerScoreValueSetFromInt(lp_player, "BonusObjectiveXP", lv_objectiveXP);
    PlayerScoreValueSetFromInt(lp_player, "MissionXP", lv_baseXP);
    PlayerScoreValueSetFromInt(lp_player, "UnitsKilledPoints", 0);
    PlayerScoreValueSetFromInt(lp_player, "UnitsMadePoints", 0);
    PlayerScoreValueSetFromInt(lp_player, "TechnologyPoints", 0);
    PlayerScoreValueSetFromInt(lp_player, "StructuresKilledPoints", 0);
    PlayerScoreValueSetFromInt(lp_player, "StructuresMadePoints", 0);
}

void libCPGL_gf_CC_PlayerCommanderSet (int lp_player, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPCM_gv_cC_DevStart_Forced == false) && (GameMapIsBlizzard() == false) && (lp_commander != "TerranRaynor") && (lp_commander != "ZergKerrigan") && (lp_commander != "ProtossArtanis")) {
        libCPGL_gf_CC_PlayerCommanderSet(lp_player, "TerranRaynor");
        return ;
    }

    if ((PlayerCommander(lp_player) != libCPGL_gf_CC_CommanderData(lp_commander))) {
        PlayerSetCommander(lp_player, libCPGL_gf_CC_CommanderData(lp_commander));
    }

    libCPGL_gv_commander[lp_player].lv_commanderInstance = lp_commander;
}

void libCPGL_gf_CC_UpdatePlayerLevel (int lp_player) {
    // Variable Declarations
    string lv_indexCommander;

    // Automatic Variable Declarations
    int auto95A0D131_ai;
    int auto95A0D131_ae;

    // Variable Initialization

    // Implementation
    if ((libCPCM_gv_cC_DevStart_Forced == false) && (GameIsOnline() == true)) {
        return ;
    }

    auto95A0D131_ai = 1;
    auto95A0D131_ae = UserDataInstanceCount("PlayerCommander")+1;
    while (auto95A0D131_ai < auto95A0D131_ae) {
        lv_indexCommander = UserDataInstance("PlayerCommander", auto95A0D131_ai);
        auto95A0D131_ai = auto95A0D131_ai+1;
        libCPGL_gf_CC_PlayerLevelSet(lp_player, libCPGL_gf_CC_PlayerLevelFromExperience(libCPGL_gf_CC_PlayerExperience(lp_player, lv_indexCommander)), lv_indexCommander);
    }
}

void libCPGL_gf_CC_PlayerExperienceSet (int lp_player, int lp_experience, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    libCPGL_gv_commander[lp_player].lv_commanderExperience = lp_experience;
}

void libCPGL_gf_CC_PlayerLevelSet (int lp_player, int lp_level, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    libCPGL_gv_commander[lp_player].lv_commanderLevel = MinI(lp_level, libCPGL_gv_cCC_PLAYERLEVELMAX);
}

void libCPGL_gf_CC_PlayerExperienceAdd (int lp_player, int lp_experience) {
    // Automatic Variable Declarations
    // Implementation
    libCPGL_gf_CC_PlayerExperienceSet(lp_player, (libCPGL_gf_CC_PlayerExperience(lp_player, libCPGL_gf_ActiveCommanderForPlayer(lp_player))+lp_experience), libCPGL_gf_ActiveCommanderForPlayer(lp_player));
}

void libCPGL_gf_CC_PlayerExperienceSetToLevel (int lp_player, int lp_level, string lp_commander) {
    // Variable Declarations
    int lv_levelCount;
    int lv_xPCount;
    string lv_indexLevel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCPGL_gf_CC_PlayerExperienceSet(lp_player, libCPGL_gf_CC_PlayerLevelExperienceNeededTotal(lp_level), lp_commander);
}

void libCPGL_gf_CC_LoadCommandersFromBank (int lp_player, bank lp_bank, string lp_section) {
    // Variable Declarations
    int lv_commanderIndex;
    int lv_selectedCommanderIndex;
    string lv_indexCommander;

    // Automatic Variable Declarations
    int autoBDBEE013_ai;
    int autoBDBEE013_ae;

    // Variable Initialization

    // Implementation
    lv_selectedCommanderIndex = libCPCM_gf_CC_LoadTransitionVarInteger(lp_bank, lp_section, "ActiveCommander", 0);
    autoBDBEE013_ai = 1;
    autoBDBEE013_ae = UserDataInstanceCount("PlayerCommander")+1;
    while (autoBDBEE013_ai < autoBDBEE013_ae) {
        lv_indexCommander = UserDataInstance("PlayerCommander", autoBDBEE013_ai);
        autoBDBEE013_ai = autoBDBEE013_ai+1;
        lv_commanderIndex = libCPGL_gf_CC_CommanderInternalIndex(lv_indexCommander);
        if ((lv_selectedCommanderIndex == lv_commanderIndex)) {
        }

        libCPGL_gv_commander[lp_player].lv_commanderExperience = libCPCM_gf_CC_LoadTransitionVarInteger(lp_bank, lp_section, (lv_indexCommander), 0);
    }
}

void libCPGL_gf_CC_SaveCommandersToBank (int lp_player, bank lp_bank, string lp_section) {
    // Variable Declarations
    int lv_commanderIndex;
    string lv_indexCommander;

    // Automatic Variable Declarations
    int auto20492729_ai;
    int auto20492729_ae;

    // Variable Initialization

    // Implementation
    libCPCM_gf_CC_SaveTransitionVarInteger(lp_bank, lp_section, "ActiveCommander", libCPGL_gf_CC_CommanderInternalIndex(libCPGL_gv_commander[lp_player].lv_commanderInstance), 0);
    auto20492729_ai = 1;
    auto20492729_ae = UserDataInstanceCount("PlayerCommander")+1;
    while (auto20492729_ai < auto20492729_ae) {
        lv_indexCommander = UserDataInstance("PlayerCommander", auto20492729_ai);
        auto20492729_ai = auto20492729_ai+1;
        lv_commanderIndex = libCPGL_gf_CC_CommanderInternalIndex(lv_indexCommander);
        libCPCM_gf_CC_SaveTransitionVarInteger(lp_bank, lp_section, (lv_indexCommander), libCPGL_gv_commander[lp_player].lv_commanderExperience, 0);
    }
}

void libCPGL_gf_CC_ResetCurrency (int lp_player) {
    // Variable Declarations
    int lv_raceIndex;
    string lv_indexCommander;

    // Automatic Variable Declarations
    int autoAA0A7FD8_ai;
    int autoAA0A7FD8_ae;

    // Variable Initialization

    // Implementation
    autoAA0A7FD8_ai = 1;
    autoAA0A7FD8_ae = UserDataInstanceCount("PlayerCommander")+1;
    while (autoAA0A7FD8_ai < autoAA0A7FD8_ae) {
        lv_indexCommander = UserDataInstance("PlayerCommander", autoAA0A7FD8_ai);
        autoAA0A7FD8_ai = autoAA0A7FD8_ai+1;
        libCPGL_gf_CC_PlayerExperienceSetToLevel(lp_player, 0, lv_indexCommander);
    }
}

void libCPGL_gf_CC_ApplyCommanderTech (int lp_player) {
    // Variable Declarations
    int lv_indexTech;
    string lv_playerCommander;

    // Automatic Variable Declarations
    int auto84A1F503_ae;
    const int auto84A1F503_ai = 1;
    int auto05974962_ae;
    const int auto05974962_ai = 1;

    // Variable Initialization

    // Implementation
    lv_playerCommander = libCPGL_gf_ActiveCommanderForPlayer(lp_player);
    auto84A1F503_ae = UserDataFieldValueCount("PlayerCommanders", "DefaultAbilityCommands");
    lv_indexTech = 1;
    for ( ; ( (auto84A1F503_ai >= 0 && lv_indexTech <= auto84A1F503_ae) || (auto84A1F503_ai < 0 && lv_indexTech >= auto84A1F503_ae) ) ; lv_indexTech += auto84A1F503_ai ) {
        if ((UserDataGetAbilCmd("PlayerCommanders", lv_playerCommander, "DefaultAbilityCommands", lv_indexTech) != null)) {
            TechTreeAbilityAllow(lp_player, UserDataGetAbilCmd("PlayerCommanders", lv_playerCommander, "DefaultAbilityCommands", lv_indexTech), true);
        }

    }
    auto05974962_ae = UserDataFieldValueCount("PlayerCommanders", "DefaultUpgrades");
    lv_indexTech = 1;
    for ( ; ( (auto05974962_ai >= 0 && lv_indexTech <= auto05974962_ae) || (auto05974962_ai < 0 && lv_indexTech >= auto05974962_ae) ) ; lv_indexTech += auto05974962_ai ) {
        if ((UserDataGetUpgrade("PlayerCommanders", lv_playerCommander, "DefaultUpgrades", lv_indexTech) != null)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, UserDataGetUpgrade("PlayerCommanders", lv_playerCommander, "DefaultUpgrades", lv_indexTech), 1);
        }

    }
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderLevel", libCPGL_gv_commander[lp_player].lv_commanderLevel);
    libCPGL_gf_CC_ApplyMasteryTech(lp_player);
    if ((libCPGL_gf_CC_CommanderSkin(lv_playerCommander) != "")) {
        PlayerApplySkin(lp_player, libCPGL_gf_CC_CommanderSkin(lv_playerCommander), true);
    }

}

void libCPGL_gf_CC_ApplyCommanderTechZeratul (int lp_player) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itAllyAspect;
    bool lv_itAllyAspectStateAB;
    bool lv_itAllyAspectStateBA;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itAllyAspect = c_allianceIdPassive;
    lv_itAllyAspectStateAB = true;
    lv_itAllyAspectStateBA = true;

    // Implementation
    TechTreeUnitAllow(lp_player, "Assimilator", false);
    TechTreeUnitAllow(lp_player, "AutomatedAssimilator", false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 1), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 3), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 11), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 14), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 4), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 7), false);
    TechTreeUnitAllow(lp_player, "AutomatedAssimilatorZeratul", true);
    TechTreeUnitAllow(lp_player, "ZeratulRoboticsFacility", true);
    TechTreeUnitAllow(lp_player, "ZeratulRoboticsBay", true);
    TechTreeUnitAllow(lp_player, "ZeratulGateway", true);
    TechTreeUnitAllow(lp_player, "ZeratulCyberneticsCore", true);
    TechTreeUnitAllow(lp_player, "ZeratulDarkShrine", true);
    TechTreeUnitAllow(lp_player, "ZeratulPhotonCannon", true);
}

void libCPGL_gf_CC_UpdateProtossStates (int lp_player) {
    // Automatic Variable Declarations
}

void libCPGL_gf_CC_UpdateTerranStates (int lp_player) {
    // Automatic Variable Declarations
}

void libCPGL_gf_CC_ApplyRaceTechTerran (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libNtve_gf_PlayerInCinematicMode(lp_player) == true)) {
        libCPCD_gf_GPShowHide(true, lp_player, c_transitionDurationImmediate);
        libCPCD_gf_GPVisibilityAuto(false, lp_player, c_transitionDurationImmediate);
    }
    else {
        libCPCD_gf_GPShowHide(true, lp_player, c_transitionDurationDefault);
    }
    if ((TechTreeUpgradeCount(lp_player, "SuperiorCommand", c_techCountQueuedOrBetter) == 1)) {
        PlayerModifyPropertyInt(lp_player, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 225);
    }

    if (((libCPGL_gf_CampaignTechUnitIsEnabled("Medivac", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Viking", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Wraith", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Liberator", lp_player) == true))) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("StarportAddOns", 1), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("StarportAddOns", 3), true);
    }
    else {
        TechTreeAbilityAllow(lp_player, AbilityCommand("StarportAddOns", 1), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("StarportAddOns", 3), false);
    }
    if (((libCPGL_gf_CampaignTechUnitIsEnabled("Marine", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Medic", lp_player) == true))) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksAddOns", 1), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksAddOns", 3), true);
    }
    else {
        TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksAddOns", 1), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksAddOns", 3), false);
    }
    if (((libCPGL_gf_CampaignTechUnitIsEnabled("Hellion", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Vulture", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Goliath", lp_player) == true))) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("FactoryAddOns", 1), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("FactoryAddOns", 3), true);
    }
    else {
        TechTreeAbilityAllow(lp_player, AbilityCommand("FactoryAddOns", 1), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("FactoryAddOns", 3), false);
    }
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypePylonButton, false);
}

void libCPGL_gf_CC_ApplyRaceTechZerg (int lp_player) {
    // Variable Declarations
    int lv_spawnCreepRadius;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawnCreepRadius = UserDataGetInt("PlayerCommanders", libCPGL_gf_ActiveCommanderForPlayer(lp_player), "SpawnCreep", 1);

    // Implementation
    if ((libNtve_gf_PlayerInCinematicMode(lp_player) == true)) {
        libCPCD_gf_GPShowHide(true, lp_player, c_transitionDurationImmediate);
        libCPCD_gf_GPVisibilityAuto(false, lp_player, c_transitionDurationImmediate);
    }
    else {
        libCPCD_gf_GPShowHide(true, lp_player, c_transitionDurationDefault);
    }
    libCPGL_gf_CC_KerriganApplyModelUpgrades(lp_player);
    libCPGL_gf_CC_ZergHeroApplyStatBonuses(lp_player, libCPGL_gf_CC_CommanderLevel(lp_player, libCPGL_gf_ActiveCommanderForPlayer(lp_player)));
    if ((lv_spawnCreepRadius > 0)) {
        CreepModify(PlayerStartLocation(lp_player), IntToFixed(lv_spawnCreepRadius), true, false);
    }

    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypePylonButton, false);
}

void libCPGL_gf_CC_ApplyRaceTechProtoss (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libNtve_gf_PlayerInCinematicMode(lp_player) == true)) {
        libCPCD_gf_GPShowHide(true, lp_player, c_transitionDurationImmediate);
        libCPCD_gf_GPVisibilityAuto(false, lp_player, c_transitionDurationImmediate);
    }
    else {
        libCPCD_gf_GPShowHide(true, lp_player, c_transitionDurationDefault);
    }
}

void libCPGL_gf_CC_ApplyRaceTechInfestedTerran (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libNtve_gf_PlayerInCinematicMode(lp_player) == true)) {
        libCPCD_gf_GPShowHide(true, lp_player, c_transitionDurationImmediate);
        libCPCD_gf_GPVisibilityAuto(false, lp_player, c_transitionDurationImmediate);
    }
    else {
        libCPCD_gf_GPShowHide(true, lp_player, c_transitionDurationDefault);
    }
    CreepModify(PlayerStartLocation(lp_player), 11.0, true, false);
}

int libCPGL_gf_CC_RaceIndex (string lp_race) {
    // Automatic Variable Declarations
    string auto201BA330_val;

    // Implementation
    auto201BA330_val = lp_race;
    if (auto201BA330_val == "Terr") {
        return 1;
    }
    else if (auto201BA330_val == "Zerg") {
        return 2;
    }
    else if (auto201BA330_val == "Prot") {
        return 3;
    }
    else {
    }
    return 0;
}

int libCPGL_gf_CC_ZergHeroBonusLife (int lp_player, int lp_startLevel, int lp_endLevel) {
    // Variable Declarations
    int lv_totalLife;
    string lv_indexLevel;

    // Automatic Variable Declarations
    int auto74D79A30_ai;
    int auto74D79A30_ae;
    int auto74D79A30_al;

    // Variable Initialization

    // Implementation
    auto74D79A30_ai = 1;
    auto74D79A30_ae = UserDataInstanceCount("PlayerLevels")+1;
    while (auto74D79A30_ai < auto74D79A30_ae) {
        lv_indexLevel = UserDataInstance("PlayerLevels", auto74D79A30_ai);
        auto74D79A30_ai = auto74D79A30_ai+1;
        auto74D79A30_al = UserDataGetInt("PlayerLevels",lv_indexLevel,"Level",1);
        if( libCPGL_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("PlayerLevels",lv_indexLevel,"Commander",1) &&
        auto74D79A30_al >= lp_startLevel && auto74D79A30_al <= lp_endLevel ) {
            lv_totalLife += UserDataGetInt("PlayerLevels", lv_indexLevel, "Life", 1);
        }
    }
    return lv_totalLife;
}

int libCPGL_gf_CC_ZergHeroBonusEnergy (int lp_player, int lp_startLevel, int lp_endLevel) {
    // Variable Declarations
    int lv_levelIndex;
    int lv_totalEnergy;
    string lv_indexLevel;

    // Automatic Variable Declarations
    int auto960FB885_ai;
    int auto960FB885_ae;
    int auto960FB885_al;

    // Variable Initialization

    // Implementation
    auto960FB885_ai = 1;
    auto960FB885_ae = UserDataInstanceCount("PlayerLevels")+1;
    while (auto960FB885_ai < auto960FB885_ae) {
        lv_indexLevel = UserDataInstance("PlayerLevels", auto960FB885_ai);
        auto960FB885_ai = auto960FB885_ai+1;
        auto960FB885_al = UserDataGetInt("PlayerLevels",lv_indexLevel,"Level",1);
        if( libCPGL_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("PlayerLevels",lv_indexLevel,"Commander",1) &&
        auto960FB885_al >= lp_startLevel && auto960FB885_al <= lp_endLevel ) {
            lv_totalEnergy += UserDataGetInt("PlayerLevels", lv_indexLevel, "Energy", 1);
        }
    }
    return lv_totalEnergy;
}

int libCPGL_gf_CC_ZergHeroBonusArmor (int lp_player, int lp_startLevel, int lp_endLevel) {
    // Variable Declarations
    int lv_totalArmor;
    string lv_indexLevel;

    // Automatic Variable Declarations
    int auto3363F083_ai;
    int auto3363F083_ae;
    int auto3363F083_al;

    // Variable Initialization

    // Implementation
    auto3363F083_ai = 1;
    auto3363F083_ae = UserDataInstanceCount("PlayerLevels")+1;
    while (auto3363F083_ai < auto3363F083_ae) {
        lv_indexLevel = UserDataInstance("PlayerLevels", auto3363F083_ai);
        auto3363F083_ai = auto3363F083_ai+1;
        auto3363F083_al = UserDataGetInt("PlayerLevels",lv_indexLevel,"Level",1);
        if( libCPGL_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("PlayerLevels",lv_indexLevel,"Commander",1) &&
        auto3363F083_al >= lp_startLevel && auto3363F083_al <= lp_endLevel ) {
            lv_totalArmor += UserDataGetInt("PlayerLevels", lv_indexLevel, "Armor", 1);
        }
    }
    return lv_totalArmor;
}

int libCPGL_gf_CC_ZergHeroBonusDamage (int lp_player, int lp_startLevel, int lp_endLevel) {
    // Variable Declarations
    int lv_totalDamage;
    string lv_indexLevel;

    // Automatic Variable Declarations
    int auto3420313E_ai;
    int auto3420313E_ae;
    int auto3420313E_al;

    // Variable Initialization

    // Implementation
    auto3420313E_ai = 1;
    auto3420313E_ae = UserDataInstanceCount("PlayerLevels")+1;
    while (auto3420313E_ai < auto3420313E_ae) {
        lv_indexLevel = UserDataInstance("PlayerLevels", auto3420313E_ai);
        auto3420313E_ai = auto3420313E_ai+1;
        auto3420313E_al = UserDataGetInt("PlayerLevels",lv_indexLevel,"Level",1);
        if( libCPGL_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("PlayerLevels",lv_indexLevel,"Commander",1) &&
        auto3420313E_al >= lp_startLevel && auto3420313E_al <= lp_endLevel ) {
            lv_totalDamage += UserDataGetInt("PlayerLevels", lv_indexLevel, "Damage", 1);
        }
    }
    return lv_totalDamage;
}

void libCPGL_gf_CC_KerriganApplyModelUpgrades (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerRace(lp_player) != "Zerg")) {
        return ;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganPostZerusSounds", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganPostLabSounds", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganPostZerus", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganGhostCosmetic", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganInfestedCosmetic", 1);
}

void libCPGL_gf_CC_ZergHeroApplyStatBonuses (int lp_player, int lp_level) {
    // Variable Declarations
    int lv_life;
    int lv_energy;
    int lv_damage;
    int lv_armor;
    int lv_index;
    string lv_indexLevel;

    // Automatic Variable Declarations
    int autoB4C59E29_ai;
    int autoB4C59E29_ae;
    int autoB4C59E29_al;

    // Variable Initialization

    // Implementation
    autoB4C59E29_ai = 1;
    autoB4C59E29_ae = UserDataInstanceCount("PlayerLevels")+1;
    while (autoB4C59E29_ai < autoB4C59E29_ae) {
        lv_indexLevel = UserDataInstance("PlayerLevels", autoB4C59E29_ai);
        autoB4C59E29_ai = autoB4C59E29_ai+1;
        autoB4C59E29_al = UserDataGetInt("PlayerLevels",lv_indexLevel,"Level",1);
        if( libCPGL_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("PlayerLevels",lv_indexLevel,"Commander",1) &&
        autoB4C59E29_al >= 1 && autoB4C59E29_al <= lp_level ) {
            lv_life += UserDataGetInt("PlayerLevels", lv_indexLevel, "Life", 1);
            lv_energy += UserDataGetInt("PlayerLevels", lv_indexLevel, "Energy", 1);
            lv_damage += UserDataGetInt("PlayerLevels", lv_indexLevel, "Damage", 1);
            lv_armor += UserDataGetInt("PlayerLevels", lv_indexLevel, "Armor", 1);
        }
    }
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganKitUpgradeEnergy", ModI(lv_energy, 10));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganKitUpgradeHealth", ModI(lv_life, 10));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganKitUpgradeEnergy10", (lv_energy / 10));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganKitUpgradeHealth10", (lv_life / 10));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganKitUpgradeDamage", lv_damage);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganKitUpgradeArmor", lv_armor);
}

void libCPGL_gf_CC_ArmyCategoryStateSet (string lp_armyCategory, int lp_state, int lp_player, string lp_commander) {
    // Variable Declarations
    string lv_indexUpgrade;
    string lv_indexArmyUnit;

    // Automatic Variable Declarations
    int auto08D5EC33_ae;
    int auto08D5EC33_ai;
    int auto559ACF13_ae;
    int auto559ACF13_ai;

    // Variable Initialization

    // Implementation
    if ((libCPGL_gf_CC_ArmyCategoryState(lp_armyCategory, lp_player, lp_commander) == lp_state)) {
        return ;
    }

    DataTableSetInt(true, libCPGL_gf_CC_ArmyCategoryStateKey(lp_armyCategory, lp_commander, lp_player), (lp_state));
    if ((lp_state == c_armyUnitStateLocked)) {
        auto08D5EC33_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUpgradeArray", 1);
        auto08D5EC33_ai = 1;
        while (auto08D5EC33_ai <= auto08D5EC33_ae) {
            lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUpgradeArray["+IntToString(auto08D5EC33_ai-1)+"]", 1);
            auto08D5EC33_ai = auto08D5EC33_ai + 1;
            libCPGL_gf_CC_ArmyUpgradeStateSet(lv_indexUpgrade, c_armyUpgradeStateLocked, lp_commander, lp_player);
        }
        auto559ACF13_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray", 1);
        auto559ACF13_ai = 1;
        while (auto559ACF13_ai <= auto559ACF13_ae) {
            lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray["+IntToString(auto559ACF13_ai-1)+"]", 1);
            auto559ACF13_ai = auto559ACF13_ai + 1;
            libCPGL_gf_CC_SetArmyUnitState(lv_indexArmyUnit, c_armyUnitStateLocked, lp_commander, lp_player);
        }
    }

}

void libCPGL_gf_CC_UpdateArmyCategoryStates (int lp_player) {
    // Variable Declarations
    string lv_playerCommander;
    string lv_indexCategory;
    int lv_requiredLevel;

    // Automatic Variable Declarations
    int autoD82C7F7D_ae;
    int autoD82C7F7D_ai;

    // Variable Initialization

    // Implementation
    lv_playerCommander = libCPGL_gf_ActiveCommanderForPlayer(lp_player);
    autoD82C7F7D_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoD82C7F7D_ai = 1;
    while (autoD82C7F7D_ai <= autoD82C7F7D_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoD82C7F7D_ai);
        autoD82C7F7D_ai = autoD82C7F7D_ai + 1;
        if ((libCPGL_gf_CC_ArmyCategoryUnlocksExternal(lv_indexCategory) == true)) {
            continue;
        }

        if ((libCPGL_gf_CC_ArmyCategoryCommanderValid(lv_indexCategory, lv_playerCommander) == true)) {
            lv_requiredLevel = libCPGL_gf_CC_ArmyCategoryRequiredLevel(lv_indexCategory, lv_playerCommander);
            if ((lv_requiredLevel <= libCPGL_gf_CC_CommanderLevel(lp_player, lv_playerCommander))) {
                libCPGL_gf_CC_ArmyCategoryStateSet(lv_indexCategory, c_armyUnitStatePurchased, lp_player, lv_playerCommander);
            }
            else {
                libCPGL_gf_CC_ArmyCategoryStateSet(lv_indexCategory, c_armyUnitStateLocked, lp_player, lv_playerCommander);
            }
        }
        else {
            libCPGL_gf_CC_ArmyCategoryStateSet(lv_indexCategory, c_armyUnitStateLocked, lp_player, lv_playerCommander);
        }
    }
}

string libCPGL_gf_CC_TechUnitOfArmyCategory (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "UserReference", libCPCC_gv_cCC_DISREGARDPLAYER));
}

string libCPGL_gf_CC_ArmyCategoryOfTechUnit (string lp_techUnit) {
    // Variable Declarations
    string lv_indexCategory;

    // Automatic Variable Declarations
    int auto8A1F9000_ae;
    int auto8A1F9000_ai;

    // Variable Initialization

    // Implementation
    auto8A1F9000_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto8A1F9000_ai = 1;
    while (auto8A1F9000_ai <= auto8A1F9000_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto8A1F9000_ai);
        auto8A1F9000_ai = auto8A1F9000_ai + 1;
        if ((libCPGL_gf_CC_TechUnitOfArmyCategory(lv_indexCategory) == lp_techUnit)) {
            return lv_indexCategory;
        }

    }
    return null;
}

int libCPGL_gf_CC_ArmyCategoryRequiredLevel (string lp_armyCategory, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return libCPGL_gf_CC_CommanderUserFieldInt(lp_commander, "TechUnit", libCPGL_gf_CC_TechUnitOfArmyCategory(lp_armyCategory), "RequiredLevel");
}

text libCPGL_gf_CC_ArmyCategoryName (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Name", libCPCC_gv_cCC_DISREGARDPLAYER));
}

text libCPGL_gf_CC_ArmyCategoryName2 (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Title", libCPCC_gv_cCC_DISREGARDPLAYER));
}

text libCPGL_gf_CC_ArmyCategoryUnitDescription (string lp_armyCategory) {
    // Variable Declarations
    string lv_unitLink;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_unitLink = (CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "Unit", libCPCC_gv_cCC_DISREGARDPLAYER));
    return StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, (lv_unitLink), "Description", libCPCC_gv_cCC_DISREGARDPLAYER));
}

text libCPGL_gf_CC_ArmyCategoryDescription (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Description", libCPCC_gv_cCC_DISREGARDPLAYER));
}

string libCPGL_gf_CC_ArmyCategoryIcon (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Icon", c_playerAny));
}

string libCPGL_gf_CC_ArmyCategoryEvolutionIcon (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("TechUnit", libCPGL_gf_CC_TechUnitOfArmyCategory(lp_armyCategory), "EvolutionMissionIcon", 1);
}

string libCPGL_gf_CC_ArmyCategoryUnitType (string lp_armyCategory) {
    // Variable Declarations
    string lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_value = "";

    // Implementation
    if ((lp_armyCategory == null)) {
        return null;
    }

    lv_value = CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Unit", libCPCC_gv_cCC_DISREGARDPLAYER);
    return (lv_value);
}

text libCPGL_gf_StoryArmyUnitTooltip2 (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("TechUnit", libCPGL_gf_CC_TechUnitOfArmyCategory(lp_armyCategory), "TechnologyTooltip", 1);
}

bool libCPGL_gf_CC_ArmyCategoryCommanderValid (string lp_armyCategory, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPGL_gf_CC_ArmyCategoryRequiredLevel(lp_armyCategory, lp_commander) == -1)) {
        return false;
    }

    return true;
}

int libCPGL_gf_CC_ArmyCategoryState (string lp_armyCategory, int lp_player, string lp_commander) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_value = DataTableGetInt(true, libCPGL_gf_CC_ArmyCategoryStateKey(lp_armyCategory, lp_commander, lp_player));
    return lv_value;
}

string libCPGL_gf_CC_ArmyCategoryPurchasedUnit (string lp_armyCategory, int lp_player) {
    // Variable Declarations
    string lv_indexArmyUnit;

    // Automatic Variable Declarations
    int autoB90C01DD_ae;
    int autoB90C01DD_ai;

    // Variable Initialization

    // Implementation
    autoB90C01DD_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray", 1);
    autoB90C01DD_ai = 1;
    while (autoB90C01DD_ai <= autoB90C01DD_ae) {
        lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUnitArray["+IntToString(autoB90C01DD_ai-1)+"]", 1);
        autoB90C01DD_ai = autoB90C01DD_ai + 1;
        if ((libCPGL_gf_CC_StoryArmyUnitState(lv_indexArmyUnit, libCPGL_gf_ActiveCommanderForPlayer(lp_player), lp_player) == c_armyUnitStatePurchased)) {
            return lv_indexArmyUnit;
        }

    }
    return null;
}

bool libCPGL_gf_CC_ArmyCategoryCanUpgrade (string lp_armyCategory, int lp_player) {
    // Variable Declarations
    string lv_indexArmyUpgrade;

    // Automatic Variable Declarations
    int autoB72EFFE5_ae;
    int autoB72EFFE5_ai;

    // Variable Initialization

    // Implementation
    autoB72EFFE5_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUpgradeArray", 1);
    autoB72EFFE5_ai = 1;
    while (autoB72EFFE5_ai <= autoB72EFFE5_ae) {
        lv_indexArmyUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lp_armyCategory, "ArmyUpgradeArray["+IntToString(autoB72EFFE5_ai-1)+"]", 1);
        autoB72EFFE5_ai = autoB72EFFE5_ai + 1;
        if ((libCPGL_gf_CC_ArmyUpgradeStateCheck(lv_indexArmyUpgrade, c_armyUpgradeStateLocked, libCPGL_gf_ActiveCommanderForPlayer(lp_player), lp_player) == false)) {
            return true;
        }

    }
    return false;
}

bool libCPGL_gf_ArmyCategoryStateCheck (string lp_armyCategory, int lp_state, string lp_commander, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (libCPGL_gf_CC_ArmyCategoryState(lp_armyCategory, lp_player, lp_commander) == lp_state);
}

bool libCPGL_gf_CC_ArmyCategoryUsedInUI (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyCategory, (lp_armyCategory), "Flags[Hidden]", libCPCC_gv_cCC_DISREGARDPLAYER) == "0");
}

int libCPGL_gf_CC_ArmyCategoryUIOrder (string lp_armyCategory, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return libCPGL_gf_CC_CommanderUserFieldInt(lp_commander, "TechUnit", libCPGL_gf_CC_TechUnitOfArmyCategory(lp_armyCategory), "UIOrder");
}

bool libCPGL_gf_CC_ArmyCategoryToastShown (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_armyCategory == null)) {
        return false;
    }

    return (UserDataGetInt("TechUnit", libCPGL_gf_CC_TechUnitOfArmyCategory(lp_armyCategory), "IsNew", 1) > 0);
}

bool libCPGL_gf_CC_ArmyCategoryUnlocksExternal (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("TechUnit", libCPGL_gf_CC_TechUnitOfArmyCategory(lp_armyCategory), "UnlocksExternal", 1) != 0);
}

string libCPGL_gf_CC_ArmyCategoryStateKey (string lp_category, string lp_commander, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (libCPGL_gv_pCC_ArmyCategoryStateKey + "_" + IntToString(lp_player) + "_" + (lp_commander) + "_" + (lp_category));
}

bool libCPGL_gf_CC_ArmyHasUnusedTech () {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUpgrade;
    string lv_indexUnit;
    bool lv_categoryFilled;

    // Automatic Variable Declarations
    int auto33EC9C98_ae;
    int auto33EC9C98_ai;

    // Variable Initialization

    // Implementation
    auto33EC9C98_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto33EC9C98_ai = 1;
    while (auto33EC9C98_ai <= auto33EC9C98_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto33EC9C98_ai);
        auto33EC9C98_ai = auto33EC9C98_ai + 1;
    }
    return false;
}

void libCPGL_gf_CC_UpdateArmyUpgradeStates (int lp_player) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUpgrade;
    int lv_requiredLevel;

    // Automatic Variable Declarations
    int auto6B2E4192_ae;
    int auto6B2E4192_ai;
    int auto7E8F0282_ae;
    int auto7E8F0282_ai;
    int autoE321D36A_ae;
    int autoE321D36A_ai;

    // Variable Initialization

    // Implementation
    auto6B2E4192_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto6B2E4192_ai = 1;
    while (auto6B2E4192_ai <= auto6B2E4192_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto6B2E4192_ai);
        auto6B2E4192_ai = auto6B2E4192_ai + 1;
        if ((libCPGL_gf_CC_ArmyCategoryUsedInUI(lv_indexCategory) == true)) {
            if ((libCPGL_gf_CC_ArmyCategoryState(lv_indexCategory, lp_player, libCPGL_gf_ActiveCommanderForPlayer(lp_player)) != c_armyUnitStateLocked)) {
                autoE321D36A_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray", 1);
                autoE321D36A_ai = 1;
                while (autoE321D36A_ai <= autoE321D36A_ae) {
                    lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray["+IntToString(autoE321D36A_ai-1)+"]", 1);
                    autoE321D36A_ai = autoE321D36A_ai + 1;
                    lv_requiredLevel = libCPGL_gf_CC_ArmyUpgradeRequiredLevel(lv_indexUpgrade, libCPGL_gf_ActiveCommanderForPlayer(lp_player));
                    if ((lv_requiredLevel != -1) && (lv_requiredLevel <= libCPGL_gf_CC_CommanderLevel(lp_player, libCPGL_gf_ActiveCommanderForPlayer(lp_player)))) {
                        if ((libCPGL_gf_CC_ArmyUpgradeState(lv_indexUpgrade, libCPGL_gf_ActiveCommanderForPlayer(lp_player), lp_player) != c_armyUpgradeStatePurchased)) {
                            libCPGL_gf_CC_ArmyUpgradeStateSet(lv_indexUpgrade, c_armyUpgradeStateUnlocked, libCPGL_gf_ActiveCommanderForPlayer(lp_player), lp_player);
                        }

                    }
                    else {
                        libCPGL_gf_CC_ArmyUpgradeStateSet(lv_indexUpgrade, c_armyUpgradeStateLocked, libCPGL_gf_ActiveCommanderForPlayer(lp_player), lp_player);
                    }
                }
            }
            else {
                auto7E8F0282_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray", 1);
                auto7E8F0282_ai = 1;
                while (auto7E8F0282_ai <= auto7E8F0282_ae) {
                    lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray["+IntToString(auto7E8F0282_ai-1)+"]", 1);
                    auto7E8F0282_ai = auto7E8F0282_ai + 1;
                    libCPGL_gf_CC_ArmyUpgradeStateSet(lv_indexUpgrade, c_armyUpgradeStateLocked, libCPGL_gf_ActiveCommanderForPlayer(lp_player), lp_player);
                }
            }
        }

    }
}

int libCPGL_gf_CC_ArmyUpgradeState (string lp_upgrade, string lp_commander, int lp_player) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_value = DataTableGetInt(true, libCPGL_gf_CC_ArmyUpgradeStateKey(lp_upgrade, lp_commander, lp_player));
    return lv_value;
}

bool libCPGL_gf_CC_ArmyUpgradeStateCheck (string lp_upgrade, int lp_state, string lp_commander, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (libCPGL_gf_CC_ArmyUpgradeState(lp_upgrade, lp_commander, lp_player) == lp_state);
}

int libCPGL_gf_CC_ArmyUpgradeRequiredLevel (string lp_upgrade, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return libCPGL_gf_CC_CommanderUserFieldInt(lp_commander, "ArmyUpgrade", libCPGL_gf_CC_ArmyUpgradeUserData(lp_upgrade), "LevelRequired");
}

void libCPGL_gf_CC_ArmyUpgradeStateSet (string lp_armyUpgrade, int lp_state, string lp_commander, int lp_player) {
    // Variable Declarations
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCPGL_gf_CC_ArmyUpgradeState(lp_armyUpgrade, lp_commander, lp_player) == lp_state)) {
        return ;
    }

    DataTableSetInt(true, libCPGL_gf_CC_ArmyUpgradeStateKey(lp_armyUpgrade, lp_commander, lp_player), (lp_state));
}

text libCPGL_gf_CC_ArmyUpgradeName (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyUpgrade, (lp_armyUpgrade), "Name", libCPCC_gv_cCC_DISREGARDPLAYER));
}

text libCPGL_gf_CC_ArmyUpgradeDescription (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyUpgrade, (lp_armyUpgrade), "Description", libCPCC_gv_cCC_DISREGARDPLAYER));
}

text libCPGL_gf_CC_ArmyUpgradeDescription2 (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("ArmyUpgrade", libCPGL_gf_CC_ArmyUpgradeUserData(lp_armyUpgrade), "Results", 1);
}

string libCPGL_gf_CC_ArmyUpgradeIcon (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyUpgrade, (lp_armyUpgrade), "Icon", libCPCC_gv_cCC_DISREGARDPLAYER));
}

string libCPGL_gf_CC_ArmyUpgradeMovie (string lp_armyUpgrade) {
    // Variable Declarations
    string lv_moviePath;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_moviePath = "";

    // Implementation
    lv_moviePath = CatalogFieldValueGet(c_gameCatalogArmyUpgrade, (lp_armyUpgrade), "Movie", libCPCC_gv_cCC_DISREGARDPLAYER);
    return (lv_moviePath);
}

string libCPGL_gf_CC_ArmyUpgradeCategory (string lp_armyUpgrade) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    int auto75B13D54_ae;
    int auto75B13D54_ai;
    int auto0CB5A1DC_ae;
    int auto0CB5A1DC_ai;

    // Variable Initialization

    // Implementation
    auto75B13D54_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto75B13D54_ai = 1;
    while (auto75B13D54_ai <= auto75B13D54_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto75B13D54_ai);
        auto75B13D54_ai = auto75B13D54_ai + 1;
        auto0CB5A1DC_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray", 1);
        auto0CB5A1DC_ai = 1;
        while (auto0CB5A1DC_ai <= auto0CB5A1DC_ae) {
            lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray["+IntToString(auto0CB5A1DC_ai-1)+"]", 1);
            auto0CB5A1DC_ai = auto0CB5A1DC_ai + 1;
            if ((lv_indexUpgrade == lp_armyUpgrade)) {
                return lv_indexCategory;
            }

        }
    }
    return null;
}

int libCPGL_gf_CC_ArmyUpgradeCost (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGetAsInt(c_gameCatalogArmyUpgrade, lp_armyUpgrade, "Cost", c_playerAny);
}

text libCPGL_gf_CC_ArmyUpgradeTooltip (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyUpgrade, (lp_armyUpgrade), "Tooltip", libCPCC_gv_cCC_DISREGARDPLAYER));
}

text libCPGL_gf_CC_ArmyUpgradeTooltip2 (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("ArmyUpgradeCategories", lp_armyUpgrade, "Name", libCPCC_gv_cCC_PLAYERNYI);
}

string libCPGL_gf_CC_ArmyUpgradeUserData (string lp_armyUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogArmyUpgrade, (lp_armyUpgrade), "UserReference", libCPCC_gv_cCC_DISREGARDPLAYER));
}

string libCPGL_gf_CC_ArmyUpgradeStateKey (string lp_upgrade, string lp_commander, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (libCPGL_gv_pCC_ArmyUpgradeStateKey + "_" + IntToString(lp_player) + "_" + (lp_commander) + "_" + (lp_upgrade));
}

string libCPGL_gf_CC_StoryArmyUnitUnitType3 (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_armyUnit), "Unit", libCPCC_gv_cCC_DISREGARDPLAYER));
}

string libCPGL_gf_CC_ArmyUnitOfTechUnit (string lp_armyUnit) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUnit;

    // Automatic Variable Declarations
    int autoAA1E1CF8_ae;
    int autoAA1E1CF8_ai;
    int auto6BDC6588_ae;
    int auto6BDC6588_ai;

    // Variable Initialization

    // Implementation
    autoAA1E1CF8_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoAA1E1CF8_ai = 1;
    while (autoAA1E1CF8_ai <= autoAA1E1CF8_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoAA1E1CF8_ai);
        autoAA1E1CF8_ai = autoAA1E1CF8_ai + 1;
        auto6BDC6588_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        auto6BDC6588_ai = 1;
        while (auto6BDC6588_ai <= auto6BDC6588_ae) {
            lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto6BDC6588_ai-1)+"]", 1);
            auto6BDC6588_ai = auto6BDC6588_ai + 1;
            if ((libCPGL_gf_CC_TechUnitOfArmyUnit(lv_indexUnit) == lp_armyUnit)) {
                return lv_indexUnit;
            }

        }
    }
    return null;
}

string libCPGL_gf_CC_TechUnitOfArmyUnit (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_armyUnit), "UserReference", libCPCC_gv_cCC_DISREGARDPLAYER));
}

string libCPGL_gf_StoryArmyUnitInCategory (string lp_category, int lp_index) {
    // Variable Declarations
    string lv_armyUnitString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_armyUnitString = "";

    // Implementation
    lv_armyUnitString = libCPCC_gf_CC_CatalogGetFieldArrayValue(c_gameCatalogArmyCategory, (lp_category), "ArmyUnitArray", lp_index, libCPCC_gv_cCC_DISREGARDPLAYER);
    return (lv_armyUnitString);
}

text libCPGL_gf_CC_ArmyUnitDescription (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogArmyUnit, lp_armyUnit, "Description", libCPCC_gv_cCC_DISREGARDPLAYER));
}

text libCPGL_gf_StoryArmyUnitTooltip (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("TechUnit", libCPGL_gf_CC_TechUnitOfArmyUnit(lp_armyUnit), "TechnologyTooltip", libCPCC_gv_cCC_DISREGARDPLAYER);
}

string libCPGL_gf_CC_ArmyUnitIcon (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyUnit, (lp_armyCategory), "Icon", libCPCC_gv_cCC_DISREGARDPLAYER));
}

bool libCPGL_gf_CC_ArmyUnitStartsLocked (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("TechUnit", libCPGL_gf_CC_TechUnitOfArmyUnit(lp_armyUnit), "UnlocksExternal", 1) == 1);
}

int libCPGL_gf_CC_ArmyUnitRequiredLevel (string lp_armyUnit, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return libCPGL_gf_CC_CommanderUserFieldInt(lp_commander, "TechUnit", libCPGL_gf_CC_TechUnitOfArmyUnit(lp_armyUnit), "RequiredLevel");
}

string libCPGL_gf_CC_ArmyCategoryOfArmyUnit (string lp_armyUnit) {
    // Variable Declarations
    string lv_indexUnit;
    string lv_indexCategory;

    // Automatic Variable Declarations
    int autoAC47FC89_ae;
    int autoAC47FC89_ai;
    int auto0DCC3453_ae;
    int auto0DCC3453_ai;

    // Variable Initialization

    // Implementation
    autoAC47FC89_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    autoAC47FC89_ai = 1;
    while (autoAC47FC89_ai <= autoAC47FC89_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, autoAC47FC89_ai);
        autoAC47FC89_ai = autoAC47FC89_ai + 1;
        auto0DCC3453_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        auto0DCC3453_ai = 1;
        while (auto0DCC3453_ai <= auto0DCC3453_ae) {
            lv_indexUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto0DCC3453_ai-1)+"]", 1);
            auto0DCC3453_ai = auto0DCC3453_ai + 1;
            if ((lv_indexUnit == lp_armyUnit)) {
                return lv_indexCategory;
            }

        }
    }
    return null;
}

string libCPGL_gf_CC_ArmyUnitSkin (string lp_armyCategory) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogArmyUnit, lp_armyCategory, "Skin", c_playerAny));
}

int libCPGL_gf_CC_StoryArmyUnitState (string lp_armyUnit, string lp_commander, int lp_player) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_value = DataTableGetInt(true, libCPGL_gf_CC_ArmyUnitStateKey(lp_armyUnit, lp_commander, lp_player));
    return lv_value;
}

bool libCPGL_gf_CC_StoryArmyUnitState2 (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("TechUnit", libCPGL_gf_CC_TechUnitOfArmyUnit(lp_armyUnit), "IsNew", 1) == 1);
}

string libCPGL_gf_CC_ArmyUnitStateKey (string lp_armyUnit, string lp_commander, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (libCPGL_gv_pCC_ArmyUnitStateKey + "_" + IntToString(lp_player) + "_" + (lp_commander) + "_" + (lp_armyUnit));
}

string libCPGL_gf_CC_ArmyUnitEnableButton (string lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGet(c_gameCatalogArmyUnit, lp_armyUnit, "EnableButton", c_playerAny);
}

void libCPGL_gf_CC_SetArmyUnitState (string lp_armyUnit, int lp_state, string lp_commander, int lp_player) {
    // Variable Declarations
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DataTableSetInt(true, libCPGL_gf_CC_ArmyUnitStateKey(lp_armyUnit, lp_commander, lp_player), (lp_state));
}

void libCPGL_gf_CC_ArmyUnitSetNew (string lp_armyUnit, bool lp_new) {
    // Automatic Variable Declarations
    // Implementation
    UserDataSetInt("TechUnit", libCPGL_gf_CC_TechUnitOfArmyUnit(lp_armyUnit), "IsNew", 1, BoolToInt(lp_new));
}

void libCPGL_gf_CC_UpdateArmyUnitStates (int lp_player) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexArmyUnit;
    int lv_requiredLevel;

    // Automatic Variable Declarations
    int auto4D0D6402_ae;
    int auto4D0D6402_ai;
    int auto65D28CC9_ae;
    int auto65D28CC9_ai;

    // Variable Initialization

    // Implementation
    auto4D0D6402_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto4D0D6402_ai = 1;
    while (auto4D0D6402_ai <= auto4D0D6402_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto4D0D6402_ai);
        auto4D0D6402_ai = auto4D0D6402_ai + 1;
        if ((libCPGL_gf_ArmyCategoryStateCheck(lv_indexCategory, c_armyUnitStateLocked, libCPGL_gf_ActiveCommanderForPlayer(lp_player), lp_player) == false)) {
            auto65D28CC9_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
            auto65D28CC9_ai = 1;
            while (auto65D28CC9_ai <= auto65D28CC9_ae) {
                lv_indexArmyUnit = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto65D28CC9_ai-1)+"]", 1);
                auto65D28CC9_ai = auto65D28CC9_ai + 1;
                lv_requiredLevel = libCPGL_gf_CC_ArmyUnitRequiredLevel(lv_indexArmyUnit, libCPGL_gf_ActiveCommanderForPlayer(lp_player));
                if ((lv_requiredLevel != -1) && (lv_requiredLevel <= libCPGL_gf_CC_CommanderLevel(lp_player, libCPGL_gf_ActiveCommanderForPlayer(lp_player)))) {
                    if ((libCPGL_gf_CC_StoryArmyUnitState(lv_indexArmyUnit, libCPGL_gf_ActiveCommanderForPlayer(lp_player), lp_player) != c_armyUnitStatePurchased)) {
                        libCPGL_gf_CC_SetArmyUnitState(lv_indexArmyUnit, c_armyUnitStateUnlocked, libCPGL_gf_ActiveCommanderForPlayer(lp_player), lp_player);
                    }

                }
                else {
                    libCPGL_gf_CC_SetArmyUnitState(lv_indexArmyUnit, c_armyUnitStateLocked, libCPGL_gf_ActiveCommanderForPlayer(lp_player), lp_player);
                }
            }
        }

    }
}

void libCPGL_gf_CC_ApplyArmyTech (int lp_player) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexCategory2;
    string lv_indexUpgrade;
    string lv_playerCommander;
    bool lv_categoryEnableDisable;
    bool lv_upgradeEnableDisable;

    // Automatic Variable Declarations
    int auto8B8223F2_ae;
    int auto8B8223F2_ai;
    int auto5C79ACAD_ae;
    int auto5C79ACAD_ai;
    int auto2B4CA19B_ae;
    int auto2B4CA19B_ai;
    int autoB242DB36_ae;
    int autoB242DB36_ai;
    int auto5774FE0C_ae;
    int auto5774FE0C_ai;

    // Variable Initialization
    lv_categoryEnableDisable = true;
    lv_upgradeEnableDisable = true;

    // Implementation
    lv_playerCommander = libCPGL_gf_ActiveCommanderForPlayer(lp_player);
    auto8B8223F2_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto8B8223F2_ai = 1;
    while (auto8B8223F2_ai <= auto8B8223F2_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto8B8223F2_ai);
        auto8B8223F2_ai = auto8B8223F2_ai + 1;
        libCPGL_gf_EnableCampaignTechUnit(false, libCPGL_gf_CC_TechUnitOfArmyCategory(lv_indexCategory), lp_player);
        auto5C79ACAD_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
        auto5C79ACAD_ai = 1;
        while (auto5C79ACAD_ai <= auto5C79ACAD_ae) {
            lv_indexCategory2 = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto5C79ACAD_ai-1)+"]", 1);
            auto5C79ACAD_ai = auto5C79ACAD_ai + 1;
            libCPGL_gf_EnableCampaignTechUnit(false, libCPGL_gf_CC_TechUnitOfArmyUnit(lv_indexCategory2), lp_player);
        }
    }
    auto2B4CA19B_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
    auto2B4CA19B_ai = 1;
    while (auto2B4CA19B_ai <= auto2B4CA19B_ae) {
        lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto2B4CA19B_ai);
        auto2B4CA19B_ai = auto2B4CA19B_ai + 1;
        if ((libCPGL_gf_ArmyCategoryStateCheck(lv_indexCategory, c_armyUnitStatePurchased, lv_playerCommander, lp_player) == true)) {
            lv_categoryEnableDisable = true;
            autoB242DB36_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray", 1);
            autoB242DB36_ai = 1;
            while (autoB242DB36_ai <= autoB242DB36_ae) {
                lv_indexUpgrade = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUpgradeArray["+IntToString(autoB242DB36_ai-1)+"]", 1);
                autoB242DB36_ai = autoB242DB36_ai + 1;
                if ((libCPGL_gf_CC_ArmyUpgradeStateCheck(lv_indexUpgrade, c_armyUpgradeStatePurchased, lv_playerCommander, lp_player) == true)) {
                    libCPGL_gf_CC_EnableUpgradeAndAbilityCommandForTech(true, c_gameCatalogArmyUpgrade, (lv_indexUpgrade), null, null, lp_player);
                }
                else {
                    libCPGL_gf_CC_EnableUpgradeAndAbilityCommandForTech(false, c_gameCatalogArmyUpgrade, (lv_indexUpgrade), null, null, lp_player);
                }
            }
            auto5774FE0C_ae = CatalogFieldValueCount(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray", 1);
            auto5774FE0C_ai = 1;
            while (auto5774FE0C_ai <= auto5774FE0C_ae) {
                lv_indexCategory2 = CatalogFieldValueGet(c_gameCatalogArmyCategory, lv_indexCategory, "ArmyUnitArray["+IntToString(auto5774FE0C_ai-1)+"]", 1);
                auto5774FE0C_ai = auto5774FE0C_ai + 1;
                if ((libCPGL_gf_CC_StoryArmyUnitState(lv_indexCategory2, lv_playerCommander, lp_player) == c_armyUnitStatePurchased)) {
                    libCPGL_gf_EnableCampaignTechUnit(true, libCPGL_gf_CC_TechUnitOfArmyUnit(lv_indexCategory2), lp_player);
                    lv_categoryEnableDisable = false;
                }

            }
        }
        else {
            lv_categoryEnableDisable = false;
        }
        if ((lv_categoryEnableDisable == true)) {
            libCPGL_gf_EnableCampaignTechUnit(true, libCPGL_gf_CC_TechUnitOfArmyCategory(lv_indexCategory), lp_player);
        }

    }
}

void libCPGL_gf_CC_ResetArmyTech (int lp_player) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexCommander;

    // Automatic Variable Declarations
    int autoF62EE5F9_ai;
    int autoF62EE5F9_ae;
    int auto711B9E80_ae;
    int auto711B9E80_ai;

    // Variable Initialization

    // Implementation
    autoF62EE5F9_ai = 1;
    autoF62EE5F9_ae = UserDataInstanceCount("PlayerCommander")+1;
    while (autoF62EE5F9_ai < autoF62EE5F9_ae) {
        lv_indexCommander = UserDataInstance("PlayerCommander", autoF62EE5F9_ai);
        autoF62EE5F9_ai = autoF62EE5F9_ai+1;
        auto711B9E80_ae = CatalogEntryCount(c_gameCatalogArmyCategory);
        auto711B9E80_ai = 1;
        while (auto711B9E80_ai <= auto711B9E80_ae) {
            lv_indexCategory = CatalogEntryGet(c_gameCatalogArmyCategory, auto711B9E80_ai);
            auto711B9E80_ai = auto711B9E80_ai + 1;
            libCPGL_gf_CC_ArmyCategoryStateSet(lv_indexCategory, c_armyUnitStateLocked, lp_player, lv_indexCommander);
        }
    }
}

void libCPGL_gf_CC_PerkStateSet (string lp_perk, int lp_perkState, string lp_commander, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libCPGL_gf_CC_PerkStateKey(lp_perk, lp_commander, lp_player), (lp_perkState));
    if ((libCPGL_gv_cC_DebugTechSpam == true)) {
        TextExpressionSetToken("Param/Expression/lib_CPGL_6A6AFD4D", "A", StringToText((lp_perk)));
        TextExpressionSetToken("Param/Expression/lib_CPGL_6A6AFD4D", "B", IntToText((lp_perkState)));
        TextExpressionSetToken("Param/Expression/lib_CPGL_6A6AFD4D", "C", StringToText((lp_commander)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPGL_6A6AFD4D"), true);
    }

}

string libCPGL_gf_CC_PerkStateKey (string lp_campaignPerk, string lp_commander, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (libCPGL_gv_cCC_PerkStateKey + "_" + IntToString(lp_player) + "_" + (lp_commander) + "_" + (lp_campaignPerk));
}

bool libCPGL_gf_CC_PerkStateCheck (string lp_campaignPerk, int lp_perkState, string lp_commander, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (libCPGL_gf_CC_PerkState(lp_campaignPerk, lp_commander, lp_player) == lp_perkState);
}

int libCPGL_gf_CC_PerkState (string lp_upgrade, string lp_commander, int lp_player) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_value = DataTableGetInt(true, libCPGL_gf_CC_PerkStateKey(lp_upgrade, lp_commander, lp_player));
    return lv_value;
}

void libCPGL_gf_EnableDisableCampaignPerk (bool lp_enableDisable, string lp_perk, int lp_player) {
    // Variable Declarations
    int lv_indexTech;
    bool lv_allowDisallow;
    int lv_upgradeLevel;

    // Automatic Variable Declarations
    int auto04ACA8E8_ae;
    const int auto04ACA8E8_ai = 1;
    int auto69D581C0_ae;
    const int auto69D581C0_ai = 1;
    int auto991A019B_ae;
    const int auto991A019B_ai = 1;

    // Variable Initialization
    lv_allowDisallow = true;

    // Implementation
    if ((lp_enableDisable == true)) {
        lv_allowDisallow = true;
        lv_upgradeLevel = 1;
        if ((UserDataGetGameLink("CampaignPerk", lp_perk, "CampaignPerkSkin", 1) != "")) {
            PlayerApplySkin(lp_player, UserDataGetGameLink("CampaignPerk", lp_perk, "CampaignPerkSkin", 1), true);
        }

    }
    else {
        lv_allowDisallow = false;
        lv_upgradeLevel = 0;
    }
    auto04ACA8E8_ae = UserDataFieldValueCount("CampaignPerk", "AbilityCommand");
    lv_indexTech = 1;
    for ( ; ( (auto04ACA8E8_ai >= 0 && lv_indexTech <= auto04ACA8E8_ae) || (auto04ACA8E8_ai < 0 && lv_indexTech >= auto04ACA8E8_ae) ) ; lv_indexTech += auto04ACA8E8_ai ) {
        if ((UserDataGetAbilCmd("CampaignPerk", lp_perk, "AbilityCommand", lv_indexTech) != null)) {
            TechTreeAbilityAllow(lp_player, UserDataGetAbilCmd("CampaignPerk", lp_perk, "AbilityCommand", lv_indexTech), lv_allowDisallow);
            if ((libCPGL_gv_cC_DebugTechSuperSpam == true)) {
                TextExpressionSetToken("Param/Expression/lib_CPGL_DB5198CA", "A", StringToText((AbilityCommandGetAbility(UserDataGetAbilCmd("CampaignPerk", lp_perk, "AbilityCommand", lv_indexTech)))));
                TextExpressionSetToken("Param/Expression/lib_CPGL_DB5198CA", "B", libNtve_gf_ConvertBooleanToText(lv_allowDisallow));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPGL_DB5198CA"), true);
            }

        }

    }
    auto69D581C0_ae = UserDataFieldValueCount("CampaignPerk", "Upgrade");
    lv_indexTech = 1;
    for ( ; ( (auto69D581C0_ai >= 0 && lv_indexTech <= auto69D581C0_ae) || (auto69D581C0_ai < 0 && lv_indexTech >= auto69D581C0_ae) ) ; lv_indexTech += auto69D581C0_ai ) {
        if ((UserDataGetUpgrade("CampaignPerk", lp_perk, "Upgrade", lv_indexTech) != null)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, UserDataGetUpgrade("CampaignPerk", lp_perk, "Upgrade", lv_indexTech), lv_upgradeLevel);
            if ((libCPGL_gv_cC_DebugTechSuperSpam == true)) {
                TextExpressionSetToken("Param/Expression/lib_CPGL_7CFD8072", "A", StringToText((UserDataGetUpgrade("CampaignPerk", lp_perk, "Upgrade", lv_indexTech))));
                TextExpressionSetToken("Param/Expression/lib_CPGL_7CFD8072", "B", IntToText(lv_upgradeLevel));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPGL_7CFD8072"), true);
            }

        }

    }
    auto991A019B_ae = UserDataFieldValueCount("CampaignPerk", "UpgradeOff");
    lv_indexTech = 1;
    for ( ; ( (auto991A019B_ai >= 0 && lv_indexTech <= auto991A019B_ae) || (auto991A019B_ai < 0 && lv_indexTech >= auto991A019B_ae) ) ; lv_indexTech += auto991A019B_ai ) {
        if ((UserDataGetUpgrade("CampaignPerk", lp_perk, "UpgradeOff", lv_indexTech) != null)) {
            if ((lp_enableDisable == true)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, UserDataGetUpgrade("CampaignPerk", lp_perk, "UpgradeOff", lv_indexTech), 0);
            }

            if ((libCPGL_gv_cC_DebugTechSuperSpam == true)) {
                TextExpressionSetToken("Param/Expression/lib_CPGL_36F8290E", "A", StringToText((UserDataGetUpgrade("CampaignPerk", lp_perk, "UpgradeOff", lv_indexTech))));
                TextExpressionSetToken("Param/Expression/lib_CPGL_36F8290E", "B", IntToText(lv_upgradeLevel));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPGL_36F8290E"), true);
            }

        }

    }
}

void libCPGL_gf_EnableDisableActivePerks (bool lp_enableDisable, int lp_player) {
    // Variable Declarations
    string lv_indexPerk;

    // Automatic Variable Declarations
    int autoA06A8B47_ai;
    int autoA06A8B47_ae;

    // Variable Initialization

    // Implementation
    autoA06A8B47_ai = 1;
    autoA06A8B47_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (autoA06A8B47_ai < autoA06A8B47_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", autoA06A8B47_ai);
        autoA06A8B47_ai = autoA06A8B47_ai+1;
        if ((libCPGL_gf_CC_PerkStateCheck(lv_indexPerk, libCPGL_ge_CC_PerkState_Active, libCPGL_gf_ActiveCommanderForPlayer(lp_player), lp_player) == true)) {
            libCPGL_gf_EnableDisableCampaignPerk(lp_enableDisable, lv_indexPerk, lp_player);
        }

    }
}

fixed libCPGL_gf_CostOfAbility (string lp_ability, string lp_costType) {
    // Variable Declarations
    string lv_value;
    string lv_field;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_value = "";
    lv_field = "";

    // Implementation
    if (((lp_costType == "Minerals") || (lp_costType == "Gas"))) {
        if ((CatalogFieldExists(CatalogEntryScope(c_gameCatalogAbil, lp_ability), "Cost") == false)) {
            if ((CatalogFieldExists(CatalogEntryScope(c_gameCatalogAbil, lp_ability), "InfoArray") == false)) {
                return 0.0;
            }

            lv_field = ("InfoArray[Build1].Resource[" + lp_costType + "]");
        }
        else {
            lv_field = ("Cost." + lp_costType);
        }
    }
    else if (((lp_costType == "Energy") || (lp_costType == "Life") || (lp_costType == "Shields"))) {
        if ((CatalogFieldExists(CatalogEntryScope(c_gameCatalogAbil, lp_ability), "Cost") == false)) {
            if ((CatalogFieldExists(CatalogEntryScope(c_gameCatalogAbil, lp_ability), "InfoArray") == false)) {
                return 0.0;
            }

            lv_field = ("InfoArray[Build1].Vital[" + lp_costType + "]");
        }
        else {
            lv_field = ("Cost[0].Vital[" + lp_costType + "]");
        }
    }
    lv_value = CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, (lv_field), c_playerAny);
    return StringToFixed(lv_value);
}

string libCPGL_gf_CC_PerkIcon (string lp_campaignPerk) {
    // Variable Declarations
    string lv_icon;
    string lv_perkButton;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_perkButton = UserDataGetGameLink("CampaignPerk", lp_campaignPerk, "Button", 1);
    if ((lv_perkButton == null)) {
        lv_icon = "Assets\\Textures\\btn-missing-kaeo.dds";
    }
    else {
        lv_icon = (CatalogFieldValueGet(c_gameCatalogButton, lv_perkButton, "Icon", c_playerAny));
    }
    if ((lv_icon == null)) {
        lv_icon = "Assets\\Textures\\btn-missing-kaeo.dds";
    }

    return lv_icon;
}

string libCPGL_gf_CC_PerkMovie (string lp_campaignPerk) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetMovie("CampaignPerk", lp_campaignPerk, "Movie", 1);
}

text libCPGL_gf_CC_PerkTooltip (string lp_campaignPerk) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_CPGL_43F0F82C", "NAME", libCPGL_gf_CC_PerkName(lp_campaignPerk));
    TextExpressionSetToken("Param/Expression/lib_CPGL_43F0F82C", "DESCRIPTION", libCPGL_gf_CC_PerkDescription(lp_campaignPerk));
    return TextExpressionAssemble("Param/Expression/lib_CPGL_43F0F82C");
}

text libCPGL_gf_CC_PerkDescription (string lp_campaignPerk) {
    // Variable Declarations
    string lv_perkButton;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_perkButton = UserDataGetGameLink("CampaignPerk", lp_campaignPerk, "Button", 1);
    if ((lv_perkButton == null)) {
        return StringExternal("Param/Value/lib_CPGL_4F77427C");
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("CampaignPerk", lp_campaignPerk, "Button", 1), "Tooltip", c_playerAny));
}

text libCPGL_gf_CC_PerkName (string lp_power) {
    // Variable Declarations
    string lv_perkButton;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_perkButton = UserDataGetGameLink("CampaignPerk", lp_power, "Button", 1);
    if ((lv_perkButton == null)) {
        return StringExternal("Param/Value/lib_CPGL_207508A3");
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("CampaignPerk", lp_power, "Button", 1), "Name", c_playerAny));
}

int libCPGL_gf_CC_PerkUIOrder (string lp_campaignPerk) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("CampaignPerk", lp_campaignPerk, "UISlot", 1);
}

int libCPGL_gf_CC_PerkCost (string lp_campaignPerk) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_campaignPerk == null)) {
        return 0;
    }

    return UserDataGetInt("CampaignPerk", lp_campaignPerk, "Cost", 1);
}

string libCPGL_gf_CC_PerkLevel (string lp_campaignPerk) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetUserInstance("CampaignPerk", lp_campaignPerk, "Level", 1);
}

void libCPGL_gf_CC_SaveChampionToBank2 (int lp_player, bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexCommander;
    string lv_indexPerk;

    // Automatic Variable Declarations
    int autoE0692CD3_ai;
    int autoE0692CD3_ae;
    int autoC430C580_ai;
    int autoC430C580_ae;

    // Variable Initialization

    // Implementation
    autoE0692CD3_ai = 1;
    autoE0692CD3_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (autoE0692CD3_ai < autoE0692CD3_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", autoE0692CD3_ai);
        autoE0692CD3_ai = autoE0692CD3_ai+1;
        autoC430C580_ai = 1;
        autoC430C580_ae = UserDataInstanceCount("PlayerCommander")+1;
        while (autoC430C580_ai < autoC430C580_ae) {
            lv_indexCommander = UserDataInstance("PlayerCommander", autoC430C580_ai);
            autoC430C580_ai = autoC430C580_ai+1;
            libCPCM_gf_CC_SaveTransitionVarInteger(lp_bank, lp_section, libCPCM_gf_CC_BankMIssionDifficultyKey6(lv_indexPerk, lv_indexCommander), (libCPGL_gf_CC_PerkState(lv_indexPerk, lv_indexCommander, lp_player)), 0);
        }
    }
}

void libCPGL_gf_CC_LoadChampionFromBank2 (int lp_player, bank lp_bank, string lp_section) {
    // Variable Declarations
    string lv_indexPerk;
    string lv_indexCommander;
    int lv_stateInt;
    int lv_state;

    // Automatic Variable Declarations
    int autoAC58066B_ai;
    int autoAC58066B_ae;
    int autoDAD1B3AC_ai;
    int autoDAD1B3AC_ae;

    // Variable Initialization

    // Implementation
    autoAC58066B_ai = 1;
    autoAC58066B_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (autoAC58066B_ai < autoAC58066B_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", autoAC58066B_ai);
        autoAC58066B_ai = autoAC58066B_ai+1;
        autoDAD1B3AC_ai = 1;
        autoDAD1B3AC_ae = UserDataInstanceCount("PlayerCommander")+1;
        while (autoDAD1B3AC_ai < autoDAD1B3AC_ae) {
            lv_indexCommander = UserDataInstance("PlayerCommander", autoDAD1B3AC_ai);
            autoDAD1B3AC_ai = autoDAD1B3AC_ai+1;
            lv_stateInt = libCPCM_gf_CC_LoadTransitionVarInteger(lp_bank, lp_section, libCPCM_gf_CC_BankMIssionDifficultyKey6(lv_indexPerk, lv_indexCommander), 0);
            lv_state = lv_stateInt;
            libCPGL_gf_CC_PerkStateSet(lv_indexPerk, lv_state, lv_indexCommander, lp_player);
        }
    }
}

void libCPGL_gf_CC_UpdatePerkStates (int lp_player) {
    // Variable Declarations
    int lv_categoryIndex;
    string lv_indexPerk;
    string lv_perkLevel;
    string lv_playerCommander;

    // Automatic Variable Declarations
    int auto4608D06C_ai;
    int auto4608D06C_ae;
    int auto0FD1A623_ae;
    const int auto0FD1A623_ai = 1;
    int auto2C8B07D3_ae;
    const int auto2C8B07D3_ai = 1;

    // Variable Initialization

    // Implementation
    lv_playerCommander = libCPGL_gf_ActiveCommanderForPlayer(lp_player);
    auto4608D06C_ai = 1;
    auto4608D06C_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (auto4608D06C_ai < auto4608D06C_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", auto4608D06C_ai);
        auto4608D06C_ai = auto4608D06C_ai+1;
        lv_perkLevel = libCPGL_gf_CC_PerkLevel(lv_indexPerk);
        if ((libCPGL_gf_CC_PlayerLevelCommander(lv_perkLevel) != lv_playerCommander)) {
            continue;
        }

        if ((libCPGL_gf_CC_PlayerLevelValue(lv_perkLevel) <= libCPGL_gf_CC_CommanderLevel(lp_player, lv_playerCommander))) {
            libCPGL_gf_CC_PerkStateSet(lv_indexPerk, libCPGL_ge_CC_PerkState_Active, libCPGL_gf_ActiveCommanderForPlayer(lp_player), lp_player);
        }
        else {
            libCPGL_gf_CC_PerkStateSet(lv_indexPerk, libCPGL_ge_CC_PerkState_Locked, libCPGL_gf_ActiveCommanderForPlayer(lp_player), lp_player);
        }
        auto0FD1A623_ae = UserDataFieldValueCount("CampaignPerk", "ArmyCategoryOn");
        lv_categoryIndex = 1;
        for ( ; ( (auto0FD1A623_ai >= 0 && lv_categoryIndex <= auto0FD1A623_ae) || (auto0FD1A623_ai < 0 && lv_categoryIndex >= auto0FD1A623_ae) ) ; lv_categoryIndex += auto0FD1A623_ai ) {
            if ((UserDataGetGameLink("CampaignPerk", lv_indexPerk, "ArmyCategoryOn", lv_categoryIndex) != null)) {
                if ((libCPGL_gf_CC_PerkStateCheck(lv_indexPerk, libCPGL_ge_CC_PerkState_Active, lv_playerCommander, lp_player) == true)) {
                    libCPGL_gf_CC_ArmyCategoryStateSet(UserDataGetGameLink("CampaignPerk", lv_indexPerk, "ArmyCategoryOn", lv_categoryIndex), c_armyUnitStatePurchased, lp_player, libCPGL_gf_ActiveCommanderForPlayer(lp_player));
                }
                else {
                    libCPGL_gf_CC_ArmyCategoryStateSet(UserDataGetGameLink("CampaignPerk", lv_indexPerk, "ArmyCategoryOn", lv_categoryIndex), c_armyUnitStateLocked, lp_player, libCPGL_gf_ActiveCommanderForPlayer(lp_player));
                }
            }

        }
        if ((libCPGL_gf_CC_PerkStateCheck(lv_indexPerk, libCPGL_ge_CC_PerkState_Active, lv_playerCommander, lp_player) == true)) {
            auto2C8B07D3_ae = UserDataFieldValueCount("CampaignPerk", "ArmyCategoryOff");
            lv_categoryIndex = 1;
            for ( ; ( (auto2C8B07D3_ai >= 0 && lv_categoryIndex <= auto2C8B07D3_ae) || (auto2C8B07D3_ai < 0 && lv_categoryIndex >= auto2C8B07D3_ae) ) ; lv_categoryIndex += auto2C8B07D3_ai ) {
                if ((UserDataGetGameLink("CampaignPerk", lv_indexPerk, "ArmyCategoryOff", lv_categoryIndex) != null)) {
                    libCPGL_gf_CC_ArmyCategoryStateSet(UserDataGetGameLink("CampaignPerk", lv_indexPerk, "ArmyCategoryOff", lv_categoryIndex), c_armyUnitStateLocked, lp_player, libCPGL_gf_ActiveCommanderForPlayer(lp_player));
                }

            }
        }

    }
}

void libCPGL_gf_CC_ApplyPerkTech (int lp_player) {
    // Variable Declarations
    string lv_indexPerk;
    int lv_techIndex;
    string lv_indexUpgrade;

    // Automatic Variable Declarations
    int auto213CD725_ai;
    int auto213CD725_ae;
    int autoC04EE95D_ai;
    int autoC04EE95D_ae;

    // Variable Initialization

    // Implementation
    auto213CD725_ai = 1;
    auto213CD725_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (auto213CD725_ai < auto213CD725_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", auto213CD725_ai);
        auto213CD725_ai = auto213CD725_ai+1;
        libCPGL_gf_EnableDisableCampaignPerk(false, lv_indexPerk, lp_player);
    }
    if ((libCPGL_gv_cC_DebugTechSpam == true)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_CPGL_0C0C2951"), true);
    }

    autoC04EE95D_ai = 1;
    autoC04EE95D_ae = UserDataInstanceCount("CampaignPerk")+1;
    while (autoC04EE95D_ai < autoC04EE95D_ae) {
        lv_indexPerk = UserDataInstance("CampaignPerk", autoC04EE95D_ai);
        autoC04EE95D_ai = autoC04EE95D_ai+1;
        if ((libCPGL_gf_CC_PerkStateCheck(lv_indexPerk, libCPGL_ge_CC_PerkState_Active, libCPGL_gf_ActiveCommanderForPlayer(lp_player), lp_player) == true)) {
            if ((libCPGL_gv_cC_DebugTechSpam == true)) {
                TextExpressionSetToken("Param/Expression/lib_CPGL_3128D1B8", "A", StringToText((lv_indexPerk)));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPGL_3128D1B8"), true);
            }

            libCPGL_gf_EnableDisableCampaignPerk(true, lv_indexPerk, lp_player);
        }

    }
}

void libCPGL_gf_CC_ResetPerkTech (int lp_player) {
    // Variable Declarations
    string lv_indexPerk;
    string lv_indexCommander;
    int lv_defaultPerkState;

    // Automatic Variable Declarations
    int auto311A8F13_ai;
    int auto311A8F13_ae;
    int auto361681F3_ai;
    int auto361681F3_ae;

    // Variable Initialization

    // Implementation
    auto311A8F13_ai = 1;
    auto311A8F13_ae = UserDataInstanceCount("PlayerCommander")+1;
    while (auto311A8F13_ai < auto311A8F13_ae) {
        lv_indexCommander = UserDataInstance("PlayerCommander", auto311A8F13_ai);
        auto311A8F13_ai = auto311A8F13_ai+1;
        auto361681F3_ai = 1;
        auto361681F3_ae = UserDataInstanceCount("CampaignPerk")+1;
        while (auto361681F3_ai < auto361681F3_ae) {
            lv_indexPerk = UserDataInstance("CampaignPerk", auto361681F3_ai);
            auto361681F3_ai = auto361681F3_ai+1;
            libCPGL_gf_CC_PerkStateSet(lv_indexPerk, libCPGL_ge_CC_PerkState_Locked, lv_indexCommander, lp_player);
        }
    }
}

void libCPGL_gf_CC_PlayerResponseEnable (int lp_player, string lp_response, bool lp_enforceMinLvl) {
    // Variable Declarations
    int lv_ally;
    playergroup lv_allygroup;

    // Automatic Variable Declarations
    playergroup autoF6401977_g;

    // Variable Initialization
    lv_allygroup = PlayerGroupEmpty();

    // Implementation
    if ((lp_enforceMinLvl == true) && (libCPGL_gf_CC_CommanderLevel(lp_player, libCPGL_gf_ActiveCommanderForPlayer(lp_player)) < UserDataGetInt("PlayerResponse", lp_response, "MinLvl", 1))) {
        return ;
    }

    if ((UserDataGetInt("PlayerResponse", lp_response, "Self", 1) == 1)) {
        PlayerAddResponse(lp_player, UserDataGetGameLink("PlayerResponse", lp_response, "Response", 1));
    }

    if ((UserDataGetInt("PlayerResponse", lp_response, "Ally", 1) == 1)) {
        lv_allygroup = libCPCD_gf_CommanderPlayers();
        PlayerGroupRemove(lv_allygroup, lp_player);
        autoF6401977_g = lv_allygroup;
        lv_ally = -1;
        while (true) {
            lv_ally = PlayerGroupNextPlayer(autoF6401977_g, lv_ally);
            if (lv_ally < 0) { break; }
            PlayerAddResponse(lv_ally, UserDataGetGameLink("PlayerResponse", lp_response, "Response", 1));
        }
    }

}

void libCPGL_gf_CC_ApplyTech (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;
    int lv_index;
    string lv_indexTechUnit;

    // Automatic Variable Declarations
    string auto4FAA28EB_val;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_CPGL_AD0B2F02", "A", IntToText(lp_player));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPGL_AD0B2F02"), false);
    libCPGL_gv_cC_ApplyingCampaignTech = true;
    TechTreeRestrictionsEnable(lp_player, true);
    libCPGL_gf_CC_UpdateTechStates(lp_player);
    libCPGL_gf_CC_ApplyArmyTech(lp_player);
    libCPGL_gf_CC_ApplyPerkTech(lp_player);
    auto4FAA28EB_val = libCPGL_gv_commander[lp_player].lv_race;
    if (auto4FAA28EB_val == "Terr") {
        libCPGL_gf_CC_ApplyRaceTechTerran(lp_player);
    }
    else if (auto4FAA28EB_val == "Zerg") {
        libCPGL_gf_CC_ApplyRaceTechZerg(lp_player);
    }
    else if (auto4FAA28EB_val == "Prot") {
        libCPGL_gf_CC_ApplyRaceTechProtoss(lp_player);
    }
    else if (auto4FAA28EB_val == "InfT") {
        libCPGL_gf_CC_ApplyRaceTechInfestedTerran(lp_player);
    }
    else {
    }
    libCPGL_gf_CC_ApplyPrestigeTech(lp_player);
    libCPGL_gf_CC_ApplyTechPostPrestige(lp_player);
    libCPGL_gv_cC_ApplyingCampaignTech = false;
    libCPGL_gv_cC_CampaignTechApplied = true;
    libCPGL_gf_CC_SharedUpgradesEnable();
    libCOMI_gf_CM_DetectionUpgradesApply();
}

void libCPGL_gf_CC_ApplyTechPostPrestige (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((TechTreeUpgradeCount(lp_player, "MasteryKerriganArmyGasCost", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryKerriganArmyVespeneCostList(lp_player);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasterySwannImmortalityProtocol", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasterySwannSiegeTankImmortalityProtocolCostReduction(lp_player);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasteryKaraxUnitVital", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryKerriganArmyVespeneCostList3(lp_player);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasteryKerriganResearchSpeedandCost", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryKerriganResearchSpeedCost(lp_player);
    }

    TechTreeBehaviorAllow(lp_player, libCOMI_gv_cM_Alarak_EmpowerBehaviorCaster, false);
    if ((TechTreeUpgradeCount(lp_player, "MasteryZagaraRoachDropDamageAndHealth", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryZagraRoachLifeIncrease(lp_player);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasteryFenixReducedResearchCosts", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryResearchCostReduction(lp_player, "MasteryFenixReducedResearchCosts", 1.0);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasteryStetmannStetzoneBonuses", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryStetmannUpgradeCost(lp_player);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasteryMengskRoyalGuardCost", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryMengskRoyalGuardCostList(lp_player);
    }

    if ((TechTreeUpgradeCount(lp_player, "NovaCommander", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_Nova_IterateExistingBuildings(lp_player);
    }

}

void libCPGL_gf_CC_UpdateTechStates (int lp_player) {
    // Automatic Variable Declarations
    string auto42095377_val;

    // Implementation
    libCPGL_gf_CC_UpdatePlayerLevel(lp_player);
    libCPGL_gf_CC_UpdateArmyCategoryStates(lp_player);
    libCPGL_gf_CC_UpdateArmyUnitStates(lp_player);
    libCPGL_gf_CC_UpdateArmyUpgradeStates(lp_player);
    libCPGL_gf_CC_UpdatePerkStates(lp_player);
    auto42095377_val = libCPGL_gv_commander[lp_player].lv_race;
    if (auto42095377_val == "Terr") {
        libCPGL_gf_CC_UpdateTerranStates(lp_player);
    }
    else if (auto42095377_val == "Zerg") {
    }
    else if (auto42095377_val == "Prot") {
        libCPGL_gf_CC_UpdateProtossStates(lp_player);
    }
    else {
    }
}

void libCPGL_gf_CC_ResetTech (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libCPGL_gf_CC_ResetCurrency(lp_player);
    libCPGL_gf_CC_ResetArmyTech(lp_player);
    libCPGL_gf_CC_ResetPerkTech(lp_player);
}

void libCPGL_gf_EnableCampaignTechUnit (bool lp_enableDisable, string lp_techUnit, int lp_player) {
    // Variable Declarations
    string lv_armyCategory;
    string lv_armyCategory2;
    text lv_debugMessage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), lp_player) == false)) {
        TextExpressionSetToken("Param/Expression/lib_CPGL_7F4ACDE5", "A", IntToText(lp_player));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPGL_7F4ACDE5"), true);
        return ;
    }

    if ((lp_enableDisable == true)) {
        UserDataSetInt("TechUnit", lp_techUnit, "Enabled", lp_player, 1);
        lv_debugMessage = StringExternal("Param/Value/lib_CPGL_E6739DC3");
    }
    else {
        UserDataSetInt("TechUnit", lp_techUnit, "Enabled", lp_player, 0);
        lv_debugMessage = StringExternal("Param/Value/lib_CPGL_6EFF2A49");
    }
    lv_armyCategory = libCPGL_gf_CC_ArmyCategoryOfTechUnit(lp_techUnit);
    if ((lv_armyCategory != null)) {
        libCPGL_gf_CC_EnableUpgradeAndAbilityCommandForTech(lp_enableDisable, c_gameCatalogArmyCategory, (lv_armyCategory), null, null, lp_player);
        CatalogLinkReplace(lp_player, c_gameCatalogUnit, (libCPGL_gf_CC_ArmyCategoryUnitType(lv_armyCategory)), (libCPGL_gf_CC_ArmyCategoryUnitType(lv_armyCategory)));
    }

    lv_armyCategory2 = libCPGL_gf_CC_ArmyUnitOfTechUnit(lp_techUnit);
    if ((lv_armyCategory2 != null)) {
        libCPGL_gf_CC_EnableUpgradeAndAbilityCommandForTech(lp_enableDisable, c_gameCatalogArmyUnit, (lv_armyCategory2), null, null, lp_player);
        if ((lp_enableDisable == true)) {
            CatalogLinkReplace(lp_player, c_gameCatalogUnit, (libCPGL_gf_CC_ArmyCategoryUnitType(libCPGL_gf_CC_ArmyCategoryOfArmyUnit(lv_armyCategory2))), (libCPGL_gf_CC_StoryArmyUnitUnitType3(lv_armyCategory2)));
            PlayerApplySkin(lp_player, libCPGL_gf_CC_ArmyUnitSkin(lv_armyCategory2), true);
        }

    }

    libCPGL_gf_CC_UpdateWeaponArmorUpgrades(lp_player);
}

bool libCPGL_gf_CampaignTechUnitIsEnabled (string lp_techUnit, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("TechUnit", lp_techUnit, "Enabled", lp_player) > 0);
}

string libCPGL_gf_CC_CampaignTechUnitType (string lp_techUnit) {
    // Variable Declarations
    string lv_armyCategory;
    string lv_armyCategory2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_armyCategory = libCPGL_gf_CC_ArmyCategoryOfTechUnit(lp_techUnit);
    if ((lv_armyCategory != null)) {
        return libCPGL_gf_CC_ArmyCategoryUnitType(lv_armyCategory);
    }

    lv_armyCategory2 = libCPGL_gf_CC_ArmyUnitOfTechUnit(lp_techUnit);
    if ((lv_armyCategory2 != null)) {
        return libCPGL_gf_CC_StoryArmyUnitUnitType3(lv_armyCategory2);
    }

    return null;
}

void libCPGL_gf_CC_UpdateWeaponArmorUpgrades (int lp_player) {
    // Variable Declarations
    bool lv_groundWeapon4;
    bool lv_groundWeapon5;
    bool lv_groundWeapon7;
    bool lv_groundWeapon6;
    bool lv_groundWeapon1;
    bool lv_groundArmor1;
    bool lv_airWeapon1;
    bool lv_airArmor1;
    bool lv_airArmor2;
    bool lv_airArmor3;
    bool lv_airArmor4;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groundWeapon4 = true;
    lv_groundWeapon5 = true;
    lv_groundWeapon7 = true;
    lv_groundWeapon6 = true;
    lv_groundWeapon1 = true;
    lv_groundArmor1 = true;
    lv_airWeapon1 = true;
    lv_airArmor1 = true;
    lv_airArmor2 = true;
    lv_airArmor3 = true;
    lv_airArmor4 = true;

    // Implementation
    if ((PlayerRace(lp_player) == "Terr")) {
        lv_groundWeapon6 = false;
        lv_groundWeapon7 = false;
        lv_groundWeapon4 = false;
        lv_groundWeapon5 = false;
        if (((libCPGL_gf_CampaignTechUnitIsEnabled("Banshee", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Battlecruiser", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("ScienceVessel", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Viking", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Wraith", lp_player) == true))) {
            lv_groundWeapon7 = true;
        }

        if (((libCPGL_gf_CampaignTechUnitIsEnabled("Banshee", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Battlecruiser", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Viking", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Wraith", lp_player) == true))) {
            lv_groundWeapon6 = true;
        }

        TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 11), lv_groundWeapon6);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 12), lv_groundWeapon6);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 13), lv_groundWeapon6);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 8), lv_groundWeapon7);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 9), lv_groundWeapon7);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 10), lv_groundWeapon7);
        if (((libCPGL_gf_CampaignTechUnitIsEnabled("Diamondback", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Goliath", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Hellion", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Siege Tank", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Thor", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Vulture", lp_player) == true))) {
            lv_groundWeapon4 = true;
            lv_groundWeapon5 = true;
        }

        TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 5), lv_groundWeapon5);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 6), lv_groundWeapon5);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 7), lv_groundWeapon5);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 2), lv_groundWeapon4);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 3), lv_groundWeapon4);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 4), lv_groundWeapon4);
    }
    else if ((PlayerRace(lp_player) == "Prot") && (libCPGL_gf_ActiveCommanderForPlayer(lp_player) == "ProtossZeratul")) {
    }
    else if ((PlayerRace(lp_player) == "Prot") && (PlayerCommander(lp_player) == "Alarak")) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 17), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 18), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 19), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 20), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 21), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 22), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 6), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 7), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 8), true);
    }
    else if ((PlayerRace(lp_player) == "Prot")) {
        lv_airArmor1 = false;
        lv_airWeapon1 = false;
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 3), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 4), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 5), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 0), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 1), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 2), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 6), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 7), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("ForgeResearch", 8), true);
        if (((libCPGL_gf_CampaignTechUnitIsEnabled("Carrier", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("CarrierTaldarim", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("CarrierAiur", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("CarrierPurifier", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("PhoenixAiur", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("PhoenixShakuras", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Phoenix", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("PhoenixPurifier", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("VoidRayAiur", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("VoidRayShakuras", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Void Ray", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("VoidRayTaldarim", lp_player) == true))) {
            lv_airWeapon1 = true;
            lv_airArmor1 = true;
        }

        TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 3), lv_airArmor1);
        TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 4), lv_airArmor1);
        TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 5), lv_airArmor1);
        TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 0), lv_airWeapon1);
        TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 1), lv_airWeapon1);
        TechTreeAbilityAllow(lp_player, AbilityCommand("CyberneticsCoreResearch", 2), lv_airWeapon1);
    }
    else if ((PlayerRace(lp_player) == "Zerg")) {
        lv_airArmor4 = false;
        lv_airArmor3 = false;
        lv_airArmor2 = false;
        TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 3), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 4), true);
        TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 5), true);
        if (((libCPGL_gf_CampaignTechUnitIsEnabled("HydraliskImpaler", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("HydraliskLurker", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Hydralisk", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("RoachCorpser", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Roach", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("RoachVile", lp_player) == true))) {
            lv_airArmor4 = true;
        }

        TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 6), lv_airArmor4);
        TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 7), lv_airArmor4);
        TechTreeAbilityAllow(lp_player, AbilityCommand("evolutionchamberresearch", 8), lv_airArmor4);
        if (((libCPGL_gf_CampaignTechUnitIsEnabled("MutaliskBroodlord", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Scourge", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Mutalisk", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("MutaliskViper", lp_player) == true))) {
            lv_airArmor2 = true;
            lv_airArmor3 = true;
        }

        TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 3), lv_airArmor2);
        TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 4), lv_airArmor2);
        TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 5), lv_airArmor2);
        TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 0), lv_airArmor2);
        TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 1), lv_airArmor2);
        TechTreeAbilityAllow(lp_player, AbilityCommand("SpireResearch", 2), lv_airArmor2);
    }
}

bool libCPGL_gf_CC_AirUnitsEnabled (int lp_player) {
    // Automatic Variable Declarations
    string auto0003FE2E_val;

    // Implementation
    auto0003FE2E_val = PlayerRace(lp_player);
    if (auto0003FE2E_val == "Prot") {
        if (((libCPGL_gf_CampaignTechUnitIsEnabled("Void Ray", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("VoidRayTaldarim", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("VoidRayShakuras", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("VoidRayAiur", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Phoenix", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("PhoenixPurifier", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("PhoenixShakuras", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("PhoenixAiur", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Carrier", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("CarrierPurifier", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("CarrierTaldarim", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("CarrierAiur", lp_player) == true))) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (auto0003FE2E_val == "Zerg") {
        if (((libCPGL_gf_CampaignTechUnitIsEnabled("Mutalisk", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("MutaliskViper", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("MutaliskBroodlord", lp_player) == true))) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (auto0003FE2E_val == "Terr") {
        if (((libCPGL_gf_CampaignTechUnitIsEnabled("Banshee", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Battlecruiser", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Medivac", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("ScienceVessel", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Wraith", lp_player) == true) || (libCPGL_gf_CampaignTechUnitIsEnabled("Viking", lp_player) == true))) {
            return true;
        }
        else {
            return false;
        }
    }
    else {
    }
    return false;
}

void libCPGL_gf_CC_EnableUpgradeAndAbilityCommandForTech (bool lp_enableDisable, int lp_catalog, string lp_entry, string lp_upgradeField, string lp_abilCommandField, int lp_player) {
    // Variable Declarations
    string lv_indexCategory;
    string lv_indexUnit;
    string lv_indexUpgrade;
    int lv_index;
    int lv_unitIndex;
    string lv_upgrade;
    abilcmd lv_abilityCommand;
    string lv_uField;
    string lv_aField;

    // Automatic Variable Declarations
    int auto6D207C7B_ae;
    const int auto6D207C7B_ai = 1;
    int auto7D01187B_ae;
    const int auto7D01187B_ai = 1;

    // Variable Initialization
    lv_uField = "";
    lv_aField = "";

    // Implementation
    if ((lp_upgradeField == null)) {
        lv_uField = "UpgradeArray";
    }
    else {
        lv_uField = lp_upgradeField;
    }
    if ((lp_abilCommandField == null)) {
        lv_aField = "AbilCommandArray";
    }
    else {
        lv_aField = lp_abilCommandField;
    }
    auto6D207C7B_ae = CatalogFieldValueCount(lp_catalog, lp_entry, lv_uField, lp_player);
    lv_index = 1;
    for ( ; ( (auto6D207C7B_ai >= 0 && lv_index <= auto6D207C7B_ae) || (auto6D207C7B_ai < 0 && lv_index >= auto6D207C7B_ae) ) ; lv_index += auto6D207C7B_ai ) {
        lv_upgrade = (libCPCC_gf_CC_CatalogGetFieldArrayValue(lp_catalog, lp_entry, lv_uField, lv_index, lp_player));
        if ((lp_enableDisable == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_upgrade, 1);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_upgrade, 0);
        }
    }
    auto7D01187B_ae = CatalogFieldValueCount(lp_catalog, lp_entry, lv_aField, lp_player);
    lv_index = 1;
    for ( ; ( (auto7D01187B_ai >= 0 && lv_index <= auto7D01187B_ae) || (auto7D01187B_ai < 0 && lv_index >= auto7D01187B_ae) ) ; lv_index += auto7D01187B_ai ) {
        lv_abilityCommand = StringToAbilCmd(libCPCC_gf_CC_CatalogGetFieldArrayValue(lp_catalog, lp_entry, lv_aField, lv_index, lp_player));
        if ((lp_enableDisable == true)) {
            if ((libCPGL_gv_cC_DebugTechSuperSpam == true)) {
                TextExpressionSetToken("Param/Expression/lib_CPGL_105EC6C1", "A", StringToText((AbilityCommandGetAbility(StringToAbilCmd(libCPCC_gf_CC_CatalogGetFieldArrayValue(lp_catalog, lp_entry, lv_aField, lv_index, lp_player))))));
                TextExpressionSetToken("Param/Expression/lib_CPGL_105EC6C1", "B", libNtve_gf_ConvertBooleanToText(true));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPGL_105EC6C1"), true);
            }

            TechTreeAbilityAllow(lp_player, lv_abilityCommand, true);
        }
        else {
            if ((libCPGL_gv_cC_DebugTechSuperSpam == true)) {
                TextExpressionSetToken("Param/Expression/lib_CPGL_A01B5C7D", "A", StringToText((AbilityCommandGetAbility(StringToAbilCmd(libCPCC_gf_CC_CatalogGetFieldArrayValue(lp_catalog, lp_entry, lv_aField, lv_index, lp_player))))));
                TextExpressionSetToken("Param/Expression/lib_CPGL_A01B5C7D", "B", libNtve_gf_ConvertBooleanToText(false));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPGL_A01B5C7D"), true);
            }

            TechTreeAbilityAllow(lp_player, lv_abilityCommand, false);
        }
    }
}

void libCPGL_gf_CC_SharedUpgradesEnable () {
    // Variable Declarations
    string lv_indexSharedUpgrade;

    // Automatic Variable Declarations
    int autoBF9F77CD_ai;
    int autoBF9F77CD_ae;

    // Variable Initialization

    // Implementation
    autoBF9F77CD_ai = 1;
    autoBF9F77CD_ae = UserDataInstanceCount("SharedUpgrades")+1;
    while (autoBF9F77CD_ai < autoBF9F77CD_ae) {
        lv_indexSharedUpgrade = UserDataInstance("SharedUpgrades", autoBF9F77CD_ai);
        autoBF9F77CD_ai = autoBF9F77CD_ai+1;
        if ((UserDataGetUpgrade("SharedUpgrades", lv_indexSharedUpgrade, "Upgrade", 1) != null)) {
            libCPGL_gf_CC_SharedUpgradesCheckAndApply(UserDataGetUpgrade("SharedUpgrades", lv_indexSharedUpgrade, "Upgrade", 1));
        }

    }
}

void libCPGL_gf_CC_SharedUpgradesCheckAndApply (string lp_checkUpgrade) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itPlayerApplyTarget;

    // Automatic Variable Declarations
    playergroup autoFCD12BE4_g;
    playergroup autoA31B3062_g;

    // Variable Initialization

    // Implementation
    autoFCD12BE4_g = libCPGL_gf_HumanPlayers();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoFCD12BE4_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((TechTreeUpgradeCount(lv_itPlayer, lp_checkUpgrade, c_techCountCompleteOnly) >= 1)) {
            autoA31B3062_g = PlayerGroupAlliance(c_playerGroupAlly, lv_itPlayer);
            lv_itPlayerApplyTarget = -1;
            while (true) {
                lv_itPlayerApplyTarget = PlayerGroupNextPlayer(autoA31B3062_g, lv_itPlayerApplyTarget);
                if (lv_itPlayerApplyTarget < 0) { break; }
                if ((TechTreeUpgradeCount(lv_itPlayer, lp_checkUpgrade, c_techCountCompleteOnly) > TechTreeUpgradeCount(lv_itPlayerApplyTarget, lp_checkUpgrade, c_techCountCompleteOnly))) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lv_itPlayerApplyTarget, lp_checkUpgrade, TechTreeUpgradeCount(lv_itPlayer, lp_checkUpgrade, c_techCountCompleteOnly));
                }

            }
        }

    }
}

bool libCPGL_gf_CoopDebugModeIsOn (string lp_mode, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return GameIsDebugOptionSet((lp_mode), lp_player);
}

void libCPGL_gf_SetTechRestrictionsCallback (trigger lp_callbackTrigger) {
    // Automatic Variable Declarations
    // Implementation
    libCPGL_gv_cC_TechLimitsCallback = lp_callbackTrigger;
}

void libCPGL_gf_PurchaseStorymodeTech () {
    // Variable Declarations
    string lv_indexMission;
    string lv_armyCategory;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GameIsTransitionMap() == true)) {
        return ;
    }

    TriggerExecute(libCPGL_gv_cC_TechLimitsCallback, true, false);
}

bool libCPGL_gf_CC_PlaytestModeEnabled () {
    // Automatic Variable Declarations
    // Implementation
    return libCPGL_gv_cC_DebugPlaytestMode;
}

bool libCPGL_gf_DebugModeEnabled () {
    // Automatic Variable Declarations
    // Implementation
    return libCPGL_gv_debugModeEnabled;
}

string libCPGL_gf_ConvertPresettoStringChatCommandType (int lp_type) {
    // Automatic Variable Declarations
    int autoCEF47C37_val;

    // Implementation
    autoCEF47C37_val = lp_type;
    if (autoCEF47C37_val == libCPGL_ge_ChatCommandType_Normal) {
        return null;
    }
    else if (autoCEF47C37_val == libCPGL_ge_ChatCommandType_Cheat) {
        return "Cheat";
    }
    else if (autoCEF47C37_val == libCPGL_ge_ChatCommandType_Debug) {
        return "Debug";
    }
    else {
        return "Error";
    }
}

void libCPGL_gf_ChatCommand (trigger t, int lp_type, string lp_command) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, ("!" + libCPGL_gf_ConvertPresettoStringChatCommandType(lp_type) + " " + lp_command));
}

void libCPGL_gf_DebugMessagePlayer (int lp_type, text lp_message, int lp_player, int lp_area) {
    // Automatic Variable Declarations
    int autoED769A6A_val;

    // Implementation
    autoED769A6A_val = lp_type;
    if (autoED769A6A_val == libCPGL_ge_ChatCommandType_Normal) {
        TextExpressionSetToken("Param/Expression/lib_CPGL_B99F8D06", "A", lp_message);
        UIDisplayMessage(PlayerGroupSingle(lp_player), lp_area, TextExpressionAssemble("Param/Expression/lib_CPGL_B99F8D06"));
    }
    else if (autoED769A6A_val == libCPGL_ge_ChatCommandType_Debug) {
        TextExpressionSetToken("Param/Expression/lib_CPGL_8C77285B", "A", lp_message);
        UIDisplayMessage(PlayerGroupSingle(lp_player), lp_area, TextExpressionAssemble("Param/Expression/lib_CPGL_8C77285B"));
    }
    else if (autoED769A6A_val == libCPGL_ge_ChatCommandType_Cheat) {
        TextExpressionSetToken("Param/Expression/lib_CPGL_AF857827", "A", lp_message);
        UIDisplayMessage(PlayerGroupSingle(lp_player), lp_area, TextExpressionAssemble("Param/Expression/lib_CPGL_AF857827"));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lp_player), lp_area, TextExpressionAssemble("Param/Expression/lib_CPGL_974244D6"));
    }
}

void libCPGL_gf_DebugMessagePlayerGroup (int lp_type, text lp_message, playergroup lp_players, int lp_area) {
    // Automatic Variable Declarations
    int autoB9714E02_val;

    // Implementation
    autoB9714E02_val = lp_type;
    if (autoB9714E02_val == libCPGL_ge_ChatCommandType_Normal) {
        TextExpressionSetToken("Param/Expression/lib_CPGL_25469979", "A", lp_message);
        UIDisplayMessage(lp_players, lp_area, TextExpressionAssemble("Param/Expression/lib_CPGL_25469979"));
    }
    else if (autoB9714E02_val == libCPGL_ge_ChatCommandType_Debug) {
        TextExpressionSetToken("Param/Expression/lib_CPGL_31A4F516", "A", lp_message);
        UIDisplayMessage(lp_players, lp_area, TextExpressionAssemble("Param/Expression/lib_CPGL_31A4F516"));
    }
    else if (autoB9714E02_val == libCPGL_ge_ChatCommandType_Cheat) {
        TextExpressionSetToken("Param/Expression/lib_CPGL_E5CCA758", "A", lp_message);
        UIDisplayMessage(lp_players, lp_area, TextExpressionAssemble("Param/Expression/lib_CPGL_E5CCA758"));
    }
    else {
        UIDisplayMessage(lp_players, lp_area, TextExpressionAssemble("Param/Expression/lib_CPGL_78190EEC"));
    }
}

void libCPGL_gf_CU_FanfareCreate () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPGL_gv_cU_FanfareDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetRenderPriority(DialogLastCreated(), 500);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libCPGL_gv_cU_FanfareDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "Coop_ScoreScreen/GameOverFanfareTemplate");
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libCPGL_gv_cU_FanfarePanel = DialogControlLastCreated();
    DialogControlHookup(libCPGL_gv_cU_FanfarePanel, c_triggerControlTypeFlash, "FlashFrame");
    libCPGL_gv_cU_FanfareFlash = DialogControlLastCreated();
    DialogControlHookup(libCPGL_gv_cU_FanfarePanel, c_triggerControlTypeButton, "QuitButton");
    libCPGL_gv_cU_FanfareCloseButton = DialogControlLastCreated();
    DialogControlHookup(libCPGL_gv_cU_FanfarePanel, c_triggerControlTypeButton, "ConvertToReplayButton");
    libCPGL_gv_cU_FanfareConvertToReplayButton = DialogControlLastCreated();
}

void libCPGL_gf_CU_FanfareDisplay (int lp_result, int lp_player) {
    // Variable Declarations
    playergroup lv_fanfarePlayers;
    string lv_playerRace;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fanfarePlayers = PlayerGroupEmpty();

    // Implementation
    if ((libCPGL_gv_cU_FanfareShown[lp_player] == true)) {
        return ;
    }

    libCPGL_gv_cU_FanfareShown[lp_player] = true;
    libCPGL_gf_CU_FanfareCreate();
    lv_fanfarePlayers = PlayerGroupSingle(lp_player);
    lv_playerRace = PlayerRace(lp_player);
    libCPGL_gv_cU_FanfareResult[lp_player] = lp_result;
    if (((lv_playerRace == "InfT") || (lv_playerRace == "PZrg"))) {
        lv_playerRace = "Zerg";
    }

    TriggerEnable(libCPGL_gt_CU_FanfareDismissed, true);
    DialogSetVisible(libCPGL_gv_cU_FanfareDialog, lv_fanfarePlayers, true);
    if ((lp_result == c_gameOverVictory)) {
        DialogControlInvokeAsText(libCPGL_gv_cU_FanfareFlash, lv_fanfarePlayers, "SetVictoryText", StringExternal("@UI/Text/Victory"), null, null, null);
    }
    else {
        DialogControlInvokeAsText(libCPGL_gv_cU_FanfareFlash, lv_fanfarePlayers, "SetVictoryText", StringExternal("@UI/Text/Defeat"), null, null, null);
    }
    DialogControlInvokeAsText(libCPGL_gv_cU_FanfareFlash, lv_fanfarePlayers, "SetNameText", PlayerName(lp_player), null, null, null);
    DialogControlInvokeAsString(libCPGL_gv_cU_FanfareFlash, lv_fanfarePlayers, "PlayVictoryScreen", StringCase((lv_playerRace), false), null, null, null);
    SoundPlayForPlayer(SoundLink("UI_Victory_All", 0), c_maxPlayers, lv_fanfarePlayers, 100.0, 0.0);
}

trigger auto_libCPGL_gf_CU_FanfareTransmission_Trigger = null;

void libCPGL_gf_CU_FanfareTransmission () {
    if (auto_libCPGL_gf_CU_FanfareTransmission_Trigger == null) {
        auto_libCPGL_gf_CU_FanfareTransmission_Trigger = TriggerCreate("auto_libCPGL_gf_CU_FanfareTransmission_TriggerFunc");
    }

    TriggerExecute(auto_libCPGL_gf_CU_FanfareTransmission_Trigger, false, false);
}

bool auto_libCPGL_gf_CU_FanfareTransmission_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto1D0D8A64_g;

    // Variable Initialization

    // Implementation
    if ((libCPGL_gv_cU_FanfareTransmissionPlayed == true)) {
        return true;
    }

    libCPGL_gv_cU_FanfareTransmissionPlayed = true;
    Wait(0.5, c_timeGame);
    UserDataSetInt("MissionTransmission", "Victory", "PlayingNow", 1, 1);
    libCOMI_gv_cM_TransmissionCurrentType = "Victory";
    auto1D0D8A64_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto1D0D8A64_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        ConversationDataLineSetPlayers("acVictory", (libCOOC_gf_CC_CommanderConvoTag(libCOOC_gf_ActiveCommanderForPlayer(libCOOC_gf_CC_PlayerAlly(lv_indexPlayer)))), PlayerGroupSingle(lv_indexPlayer));
    }
    ConversationDataRun(UserDataGetGameLink("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "Conversation", 1), PlayerGroupAll(), c_conversationSkipNone, true);
    while (!((TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false))) {
        Wait(0.0625, c_timeGame);
    }
    UserDataSetInt("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "PlayingNow", 1, 0);
    libCOMI_gv_cM_TransmissionCurrentType = null;
    if ((libCOMI_gv_cM_TransmissionSource != -1) && (PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), libCOMI_gv_cM_TransmissionSource) == true)) {
        UserDataSetInt("PlayerCommanders", libCOOC_gf_ActiveCommanderForPlayer(libCOMI_gv_cM_TransmissionSource), "SendingTransmission", 1, 0);
    }

    return true;
}

void libCPGL_gf_CU_ScoreCreate () {
    // Variable Declarations
    int lv_categoryIndex;

    // Automatic Variable Declarations
    const int auto3A09F064_ae = 3;
    const int auto3A09F064_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libCPGL_gv_cU_ScoreDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libCPGL_gv_cU_ScoreDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(libCPGL_gv_cU_ScoreDialog, c_triggerControlTypePanel, "Coop_ScoreScreen/ScoreScreenTemplate");
    libCPGL_gv_cU_ScorePanel = DialogControlLastCreated();
    DialogControlHookup(libCPGL_gv_cU_ScorePanel, c_triggerControlTypeLabel, "Title");
    libCPGL_gv_cU_ScoreTitleLabel = DialogControlLastCreated();
    lv_categoryIndex = 1;
    for ( ; ( (auto3A09F064_ai >= 0 && lv_categoryIndex <= auto3A09F064_ae) || (auto3A09F064_ai < 0 && lv_categoryIndex >= auto3A09F064_ae) ) ; lv_categoryIndex += auto3A09F064_ai ) {
        DialogControlHookup(libCPGL_gv_cU_ScorePanel, c_triggerControlTypeLabel, "ScoreTitle" + IntToString(lv_categoryIndex));
        libCPGL_gv_cU_ScoreCategoryTitleLabel[lv_categoryIndex] = DialogControlLastCreated();
        DialogControlHookup(libCPGL_gv_cU_ScorePanel, c_triggerControlTypeLabel, "ScoreValue" + IntToString(lv_categoryIndex));
        libCPGL_gv_cU_ScoreCategoryValueLabel[lv_categoryIndex] = DialogControlLastCreated();
    }
    DialogControlHookup(libCPGL_gv_cU_ScorePanel, c_triggerControlTypeLabel, "ScoreValueTotal");
    libCPGL_gv_cU_ScoreTotalValueLabel = DialogControlLastCreated();
    DialogControlHookup(libCPGL_gv_cU_ScorePanel, c_triggerControlTypeButton, "ContinueButton");
    libCPGL_gv_cU_ScoreContinueButton = DialogControlLastCreated();
}

void libCPGL_gf_CU_ScoreDisplay (int lp_player, int lp_result) {
    // Automatic Variable Declarations
    // Implementation
    libCPGL_gf_CU_ScoreCreate();
    libNtve_gf_HideGameUI(false, PlayerGroupSingle(lp_player));
    UISetWorldVisible(PlayerGroupSingle(lp_player), false);
    libCPGL_gf_CU_ScoreUpdate(lp_player, lp_result);
    DialogSetVisible(libCPGL_gv_cU_ScoreDialog, PlayerGroupSingle(lp_player), true);
    TriggerEnable(libCPGL_gt_CU_ScoreClosed, true);
}

void libCPGL_gf_CU_ScoreUpdate (int lp_player, int lp_result) {
    // Variable Declarations
    playergroup lv_updatePlayers;
    fixed lv_xPBonus;
    fixed lv_xPBase;
    fixed lv_xPObjective;
    int lv_categoryIndex;
    string lv_indexScoreType;

    // Automatic Variable Declarations
    const int auto8A1B261B_ae = 3;
    const int auto8A1B261B_ai = 1;

    // Variable Initialization
    lv_updatePlayers = PlayerGroupEmpty();

    // Implementation
    lv_updatePlayers = PlayerGroupSingle(lp_player);
    if ((lp_result == c_gameOverVictory)) {
        libNtve_gf_SetDialogItemText(libCPGL_gv_cU_ScoreTitleLabel, StringExternal("Param/Value/lib_CPGL_9EE4021C"), lv_updatePlayers);
    }
    else {
        libNtve_gf_SetDialogItemText(libCPGL_gv_cU_ScoreTitleLabel, StringExternal("Param/Value/lib_CPGL_F5235151"), lv_updatePlayers);
    }
    lv_categoryIndex = 1;
    for ( ; ( (auto8A1B261B_ai >= 0 && lv_categoryIndex <= auto8A1B261B_ae) || (auto8A1B261B_ai < 0 && lv_categoryIndex >= auto8A1B261B_ae) ) ; lv_categoryIndex += auto8A1B261B_ai ) {
        lv_indexScoreType = libCOOC_gf_CC_MissionScoreType(lv_categoryIndex, lp_player);
        if ((lv_indexScoreType != null)) {
            TextExpressionSetToken("Param/Expression/lib_CPGL_EEC43497", "SCORE", IntToText(libCOOC_gf_CC_MissionScoreValue(lv_categoryIndex, lp_player)));
            libNtve_gf_SetDialogItemText(libCPGL_gv_cU_ScoreCategoryValueLabel[lv_categoryIndex], TextExpressionAssemble("Param/Expression/lib_CPGL_EEC43497"), lv_updatePlayers);
            libNtve_gf_SetDialogItemText(libCPGL_gv_cU_ScoreCategoryTitleLabel[lv_categoryIndex], StringExternal(CatalogFieldValueGet(c_gameCatalogScoreValue, lv_indexScoreType, "Name", c_playerAny)), lv_updatePlayers);
            DialogControlSetVisible(libCPGL_gv_cU_ScoreCategoryTitleLabel[lv_categoryIndex], lv_updatePlayers, true);
            DialogControlSetVisible(libCPGL_gv_cU_ScoreCategoryValueLabel[lv_categoryIndex], lv_updatePlayers, true);
        }
        else {
            DialogControlSetVisible(libCPGL_gv_cU_ScoreCategoryTitleLabel[lv_categoryIndex], lv_updatePlayers, false);
            DialogControlSetVisible(libCPGL_gv_cU_ScoreCategoryValueLabel[lv_categoryIndex], lv_updatePlayers, false);
        }
    }
    libNtve_gf_SetDialogItemText(libCPGL_gv_cU_ScoreTotalValueLabel, IntToText(PlayerScoreValueGetAsInt(lp_player, "TotalMissionScore")), lv_updatePlayers);
}

void libCPGL_gf_CU_ScoreClose (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(libCPGL_gv_cU_ScoreDialog, PlayerGroupSingle(lp_player), false);
}

int libCPGL_gf_CU_ScoreTriggeringPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libCPGL_gv_cUC_ScoreEventClosed, libCPGL_gv_cUC_ScoreParameterPlayer));
}

void libCPGL_gf_CU_ScoreClosed (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libCPGL_gv_cUC_ScoreEventClosed);
}

void libCPGL_gf_CC_ScoreInit () {
    // Variable Declarations
    int lv_indexPlayer;
    string lv_indexCommander;
    string lv_indexMission;

    // Automatic Variable Declarations
    playergroup auto223CCE96_g;
    playergroup auto6E19CB3A_g;
    string auto6017D07F_val;

    // Variable Initialization

    // Implementation
    if ((libCPCM_gv_cC_InContestMap == true) && (libCPCM_gv_mutatorsEnabled == false)) {
        return ;
    }

    auto223CCE96_g = libCPGL_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto223CCE96_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        PlayerScoreValueSetFromInt(lv_indexPlayer, "CommanderOneScorePrimary", CatalogFieldValueGetAsInt(c_gameCatalogScoreValue, libCPGL_gf_CC_CommanderScoreCoopStatistic(libCPGL_gf_ActiveCommanderForPlayer(1)), "UniqueTag", c_playerAny));
        PlayerScoreValueSetFromInt(lv_indexPlayer, "CommanderOneScoreSecondary", CatalogFieldValueGetAsInt(c_gameCatalogScoreValue, libCPGL_gf_CC_CommanderScoreSelfStatistic(libCPGL_gf_ActiveCommanderForPlayer(1)), "UniqueTag", c_playerAny));
        PlayerScoreValueSetFromInt(lv_indexPlayer, "CommanderTwoScorePrimary", CatalogFieldValueGetAsInt(c_gameCatalogScoreValue, libCPGL_gf_CC_CommanderScoreCoopStatistic(libCPGL_gf_ActiveCommanderForPlayer(2)), "UniqueTag", c_playerAny));
        if ((libCPGL_gf_CC_PlayerOfCommanderInGroupFirst("ProtossArtanis", libCPCD_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(lv_indexPlayer)) != c_playerAny) && (libCPGL_gf_CC_PlayerOfCommanderInGroupFirst("ProtossKarax", libCPCD_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(lv_indexPlayer)) != c_playerAny)) {
        }
        else {
            PlayerScoreValueSetFromInt(lv_indexPlayer, "CommanderTwoScoreSecondary", CatalogFieldValueGetAsInt(c_gameCatalogScoreValue, libCPGL_gf_CC_CommanderScoreSelfStatistic(libCPGL_gf_ActiveCommanderForPlayer(2)), "UniqueTag", c_playerAny));
        }
        PlayerScoreValueSetFromInt(lv_indexPlayer, "MissionScore", CatalogFieldValueGetAsInt(c_gameCatalogScoreValue, libCPCD_gf_CC_MapScoreStatistic(libCPCD_gf_CC_CurrentMap()), "UniqueTag", c_playerAny));
        PlayerScoreValueSetFromInt(lv_indexPlayer, "MetaExperience", 0);
        PlayerScoreValueSetFromInt(lv_indexPlayer, "MissionXP", 0);
        PlayerScoreValueSetFromInt(lv_indexPlayer, "BonusObjectiveXP", 0);
    }
    auto6E19CB3A_g = libCPGL_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto6E19CB3A_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        auto6017D07F_val = libCPGL_gv_commander[lv_indexPlayer].lv_commanderInstance;
        if (auto6017D07F_val == "ProtossArtanis") {
            TriggerEnable(libCPGL_gt_CC_ScoreArtanisAbsorb, true);
            TriggerEnable(libCPGL_gt_CC_ScoreArtanisBombardment, true);
            TriggerEnable(libCPGL_gt_CC_ScoreArtanisKaraxOrbitalStrike, true);
        }
        else if (auto6017D07F_val == "ProtossVorazun") {
            TriggerEnable(libCPGL_gt_CC_ScoreVorazunBHDmg, true);
            TriggerEnable(libCPGL_gt_CC_ScoreVorazunBHManageGroup, true);
            TriggerEnable(libCPGL_gt_CC_ScoreVorazunCloakDmg, true);
        }
        else if (auto6017D07F_val == "ProtossKarax") {
            TriggerEnable(libCPGL_gt_CC_ScoreArtanisKaraxOrbitalStrike, true);
            TriggerEnable(libCPGL_gt_CC_ScoreKaraxSolarLance, true);
            TriggerEnable(libCPGL_gt_CC_ScoreKaraxPurifierBeam, true);
        }
        else if (auto6017D07F_val == "ZergKerrigan") {
            TriggerEnable(libCPGL_gt_CC_ScoreKerriganResources, true);
            TriggerEnable(libCPGL_gt_CC_ScoreKerriganDmg, true);
        }
        else if (auto6017D07F_val == "ZergZagara") {
            TriggerEnable(libCPGL_gt_CC_ScoreZagaraFrenzyDmg, true);
            TriggerEnable(libCPGL_gt_CC_ScoreZagaraSuicideDmg, true);
            TriggerEnable(libCPGL_gt_CC_ScoreZagaraBanelingBarrage, true);
        }
        else if (auto6017D07F_val == "TerranRaynor") {
            TriggerEnable(libCPGL_gt_CC_ScoreRaynorMedicHeal, true);
            TriggerEnable(libCPGL_gt_CC_ScoreRaynorHyperionDmg, true);
        }
        else if (auto6017D07F_val == "TerranSwann") {
            TriggerEnable(libCPGL_gt_CC_ScoreSwannSVHeal, true);
            TriggerEnable(libCPGL_gt_CC_ScoreSwannDrillDmg, true);
        }
        else if (auto6017D07F_val == "ZergAbathur") {
            TriggerEnable(libCPGL_gt_CC_ScoreAbathurMonsterDmg, true);
            TriggerEnable(libCPGL_gt_CC_ScoreAbathurHealing, true);
        }
        else if (auto6017D07F_val == "ProtossAlarak") {
            TriggerEnable(libCPGL_gt_CC_ScoreAlarakDmg, true);
            TriggerEnable(libCPGL_gt_CC_ScoreAlarakHeal, true);
            TriggerEnable(libCPGL_gt_CC_ScoreAlarakSacrificeHeal, true);
        }
        else if (auto6017D07F_val == "TerranNova") {
            TriggerEnable(libCPGL_gt_CC_ScoreNovaDmg, true);
            TriggerEnable(libCPGL_gt_CC_ScoreNovaHeal, true);
            TriggerEnable(libCPGL_gt_CC_ScoreNovaAbsorb, true);
        }
        else if (auto6017D07F_val == "ZergStukov") {
            TriggerEnable(libCPGL_gt_CC_ScoreStukovInfestedDmg, true);
            TriggerEnable(libCPGL_gt_CC_ScoreStukovMonstrosityDmg, true);
        }
        else if (auto6017D07F_val == "ProtossFenix") {
            TriggerEnable(libCPGL_gt_CC_ScoreFenixChampionDmg, true);
            TriggerEnable(libCPGL_gt_CC_ScoreFenixSuitDmg, true);
        }
        else if (auto6017D07F_val == "ZergDehaka") {
            TriggerEnable(libCPGL_gt_CC_ScoreDehakaDmg, true);
            TriggerEnable(libCPGL_gt_CC_ScoreDehakaConsumeSupply, true);
        }
        else if (auto6017D07F_val == "TerranHorner") {
            TriggerEnable(libCPGL_gt_CC_ScoreHornerMagMineDmg, true);
            TriggerEnable(libCPGL_gt_CC_ScoreHornerScrapPickup, true);
        }
        else if (auto6017D07F_val == "TerranTychus") {
            TriggerEnable(libCPGL_gt_CC_ScoreTychusFirebatOilDmg, true);
            TriggerEnable(libCPGL_gt_CC_ScoreTychusGhostDominatedDmg, true);
            TriggerEnable(libCPGL_gt_CC_ScoreTychusGrenadeDmg, true);
            TriggerEnable(libCPGL_gt_CC_ScoreTychusHERCImpactDuration, true);
            TriggerEnable(libCPGL_gt_CC_ScoreTychusMarauderHeal, true);
            TriggerEnable(libCPGL_gt_CC_ScoreTychusMedicAbsorb, true);
            TriggerEnable(libCPGL_gt_CC_ScoreTychusMedicHeal, true);
            TriggerEnable(libCPGL_gt_CC_ScoreTychusMedicHealAoE, true);
            TriggerEnable(libCPGL_gt_CC_ScoreTychusOdinDmg, true);
            TriggerEnable(libCPGL_gt_CC_ScoreTychusReaperBombDmg, true);
            TriggerEnable(libCPGL_gt_CC_ScoreTychusSpectrePulseDmg, true);
            TriggerEnable(libCPGL_gt_CC_ScoreTychusWarhoundTurretDmg, true);
        }
        else if (auto6017D07F_val == "ProtossZeratul") {
            TriggerEnable(libCPGL_gt_CC_ScoreZeratulDmg, true);
            TriggerEnable(libCPGL_gt_CC_ScoreZeratulShieldRestore, true);
        }
        else if (auto6017D07F_val == "ZergStetmann") {
            TriggerEnable(libCPGL_gt_CC_ScoreStetmannGaryDmg, true);
            TriggerEnable(libCPGL_gt_CC_ScoreStetmannOverload, true);
        }
        else if (auto6017D07F_val == "TerranMengsk") {
            TriggerEnable(libCPGL_gt_CC_ScoreMengskDamage, true);
        }
        else {
        }
    }
}

void libCPGL_gf_CC_SetTychusScoreUnit (int lp_tychusPlayer, string lp_unitType, bool lp_primary) {
    // Variable Declarations
    trigger lv_scoretrigger;
    string lv_scoregamelink;
    int lv_player;

    // Automatic Variable Declarations
    string autoBCE743BC_val;
    int auto45E5B279_val;
    playergroup auto4A327CBE_g;
    playergroup autoFDB9001D_g;

    // Variable Initialization

    // Implementation
    autoBCE743BC_val = lp_unitType;
    if (autoBCE743BC_val == "TychusCoop") {
        lv_scoregamelink = "TychusGrenadeDamage";
    }
    else if (autoBCE743BC_val == "TychusReaper") {
        lv_scoregamelink = "TychusReaperBombDamage";
    }
    else if (autoBCE743BC_val == "TychusWarhound") {
        lv_scoregamelink = "TychusWarhoundTurretDamage";
    }
    else if (autoBCE743BC_val == "TychusFirebat") {
        lv_scoregamelink = "TychusFirebatOilDamage";
    }
    else if (autoBCE743BC_val == "TychusHERC") {
        lv_scoregamelink = "TychusHERCImpactDuration";
    }
    else if (autoBCE743BC_val == "TychusMarauder") {
        lv_scoregamelink = "TychusMarauderHeal";
    }
    else if (autoBCE743BC_val == "TychusGhost") {
        lv_scoregamelink = "TychusGhostDominatedDamage";
    }
    else if (autoBCE743BC_val == "TychusSpectre") {
        lv_scoregamelink = "TychusSpectrePulseDamage";
    }
    else if (autoBCE743BC_val == "TychusMedic") {
        lv_scoregamelink = "TychusMedicHeal";
    }
    else {
        lv_scoregamelink = "TychusOdinDamage";
    }
    if ((lp_primary == true)) {
        UserDataSetGameLink("PlayerCommanders", "TerranTychus", "ScoreStatisticCoop", 1, lv_scoregamelink);
    }
    else {
        UserDataSetGameLink("PlayerCommanders", "TerranTychus", "ScoreStatisticSelf", 1, lv_scoregamelink);
    }
    auto45E5B279_val = lp_tychusPlayer;
    if (auto45E5B279_val == 1) {
        auto4A327CBE_g = libCPCD_gf_CommanderPlayers();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto4A327CBE_g, lv_player);
            if (lv_player < 0) { break; }
            PlayerScoreValueSetFromInt(lv_player, "CommanderOneScorePrimary", CatalogFieldValueGetAsInt(c_gameCatalogScoreValue, libCPGL_gf_CC_CommanderScoreCoopStatistic("TerranTychus"), "UniqueTag", c_playerAny));
            PlayerScoreValueSetFromInt(lv_player, "CommanderOneScoreSecondary", CatalogFieldValueGetAsInt(c_gameCatalogScoreValue, libCPGL_gf_CC_CommanderScoreSelfStatistic("TerranTychus"), "UniqueTag", c_playerAny));
        }
    }
    else if (auto45E5B279_val == 2) {
        autoFDB9001D_g = libCPCD_gf_CommanderPlayers();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoFDB9001D_g, lv_player);
            if (lv_player < 0) { break; }
            PlayerScoreValueSetFromInt(lv_player, "CommanderTwoScorePrimary", CatalogFieldValueGetAsInt(c_gameCatalogScoreValue, libCPGL_gf_CC_CommanderScoreCoopStatistic("TerranTychus"), "UniqueTag", c_playerAny));
            PlayerScoreValueSetFromInt(lv_player, "CommanderTwoScoreSecondary", CatalogFieldValueGetAsInt(c_gameCatalogScoreValue, libCPGL_gf_CC_CommanderScoreSelfStatistic("TerranTychus"), "UniqueTag", c_playerAny));
        }
    }
    else {
    }
}

void libCPGL_gf_TrackUnitDamageTakenForScoreScreen (bool lp_enableDisable, unit lp_trackedUnit, string lp_scoreType) {
    // Variable Declarations
    unitgroup lv_scoreGroup;
    int lv_scoreIndex;

    // Automatic Variable Declarations
    int auto7A7158C7_ae;
    const int auto7A7158C7_ai = 1;
    int auto4CF021C6_ae;
    const int auto4CF021C6_ai = 1;

    // Variable Initialization
    lv_scoreGroup = UnitGroupEmpty();

    // Implementation
    if ((lp_enableDisable == false)) {
        auto7A7158C7_ae = libCPGL_gv_cC_ScoreTrackedDmgTakenCount;
        lv_scoreIndex = 1;
        for ( ; ( (auto7A7158C7_ai >= 0 && lv_scoreIndex <= auto7A7158C7_ae) || (auto7A7158C7_ai < 0 && lv_scoreIndex >= auto7A7158C7_ae) ) ; lv_scoreIndex += auto7A7158C7_ai ) {
            if ((DataTableGetString(true, ("CC_ScoreType_" + IntToString(lv_scoreIndex))) == (lp_scoreType))) {
                lv_scoreGroup = DataTableGetUnitGroup(true, ("CC_ScoreGroup_" + IntToString(lv_scoreIndex)));
                UnitGroupRemove(lv_scoreGroup, lp_trackedUnit);
                return ;
            }

        }
        return ;
    }

    auto4CF021C6_ae = libCPGL_gv_cC_ScoreTrackedDmgTakenCount;
    lv_scoreIndex = 1;
    for ( ; ( (auto4CF021C6_ai >= 0 && lv_scoreIndex <= auto4CF021C6_ae) || (auto4CF021C6_ai < 0 && lv_scoreIndex >= auto4CF021C6_ae) ) ; lv_scoreIndex += auto4CF021C6_ai ) {
        if ((DataTableGetString(true, ("CC_ScoreType_" + IntToString(lv_scoreIndex))) == (lp_scoreType))) {
            lv_scoreGroup = DataTableGetUnitGroup(true, ("CC_ScoreGroup_" + IntToString(lv_scoreIndex)));
            UnitGroupAdd(lv_scoreGroup, lp_trackedUnit);
            return ;
        }

    }
    libCPGL_gv_cC_ScoreTrackedDmgTakenCount += 1;
    UnitGroupAdd(lv_scoreGroup, lp_trackedUnit);
    DataTableSetString(true, ("CC_ScoreType_" + IntToString(libCPGL_gv_cC_ScoreTrackedDmgTakenCount)), (lp_scoreType));
    DataTableSetUnitGroup(true, ("CC_ScoreGroup_" + IntToString(libCPGL_gv_cC_ScoreTrackedDmgTakenCount)), lv_scoreGroup);
    TriggerEnable(libCPGL_gt_CC_ScoreDynDmgTaken, true);
}

void libCPGL_gf_CM_MissionEndAwardAchievements (int lp_player) {
    // Automatic Variable Declarations
    int auto4F329FA5_val;

    // Implementation
    if ((libCPGL_gv_cM_EndMissionResult[lp_player] != c_gameOverVictory)) {
        return ;
    }

    if ((libCOOC_gv_cC_InContestMap == true)) {
        return ;
    }

    auto4F329FA5_val = libCPCD_gf_DifficultyLevelForPlayerCoop(lp_player);
    if (auto4F329FA5_val == 1) {
        AchievementAward(lp_player, "DifficultyRecruit1");
    }
    else if (auto4F329FA5_val == 2) {
        AchievementAward(lp_player, "DifficultyRecruit1");
        AchievementAward(lp_player, "DifficultySoldier1");
    }
    else if (auto4F329FA5_val == 3) {
        AchievementAward(lp_player, "DifficultyRecruit1");
        AchievementAward(lp_player, "DifficultySoldier1");
        AchievementAward(lp_player, "DifficultyVeteran1");
    }
    else if (auto4F329FA5_val == 4) {
        AchievementAward(lp_player, "DifficultyRecruit1");
        AchievementAward(lp_player, "DifficultySoldier1");
        AchievementAward(lp_player, "DifficultyVeteran1");
        AchievementAward(lp_player, "DifficultyCommander1");
    }
    else {
    }
    AchievementTermQuantitySet(lp_player, libCOOC_gf_CC_MapAchievementTerm(libCOOC_gf_CC_CurrentMap(), libCPCD_gf_DifficultyLevelForPlayerCoop(lp_player)), 1);
}

void libCPGL_gf_GameOver (int lp_gameOverType) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCPGL_gv_cM_GameOverResult = lp_gameOverType;
    GameCheatAllow(c_gameCheatVictory, false);
    GameCheatAllow(c_gameCheatDefeat, false);
}

bool libCPGL_gf_GameIsOver () {
    // Automatic Variable Declarations
    // Implementation
    return (libCPGL_gv_cM_GameOverResult != libCPGL_ge_CampaignMissionGameResultType_None);
}

void libCPGL_gf_RunMissionVictorySequence (trigger lp_victoryCinematic) {
    // Variable Declarations
    timer lv_maxWaitTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_maxWaitTimer = TimerCreate();

    // Implementation
    TimerStart(lv_maxWaitTimer, 60.0, false, c_timeReal);
    libCPGL_gf_GameOver(libCPGL_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueClear(c_triggerQueueRetain);
    TriggerQueuePause(false);
    libCPGL_gv_cM_MissionVictoryActionQueyeEmpty = false;
    TriggerExecute(libCPGL_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute, true, false);
    while (!(((libCPGL_gv_cM_MissionVictoryActionQueyeEmpty == true) || (TimerGetRemaining(lv_maxWaitTimer) <= 0.0)))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueClear(c_triggerQueueKill);
    TriggerExecute(lp_victoryCinematic, true, false);
    TriggerExecute(libCPGL_gt_CM_MissionVictoryCallbackBlockActionQueue, true, false);
}

void libCPGL_gf_EndCampaignMission (int lp_type) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto4BBF9797_g;
    playergroup auto5635EC9A_g;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_CPGL_04D2BC4A", "A", IntToText(libCPCD_gv_cDDehakaDebugEssenceCollected));
    TextExpressionSetToken("Param/Expression/lib_CPGL_04D2BC4A", "B", IntToText(libCPCD_gv_cDDehakaDebugEssenceDroppedNormal));
    TextExpressionSetToken("Param/Expression/lib_CPGL_04D2BC4A", "C", IntToText(libCPCD_gv_cDDehakaDebugEssenceLost));
    TextExpressionSetToken("Param/Expression/lib_CPGL_04D2BC4A", "D", IntToText(libCPCD_gv_cDDehakaDebugEssenceDroppedRefund));
    TriggerDebugOutput(13, TextExpressionAssemble("Param/Expression/lib_CPGL_04D2BC4A"), false);
    PerfTestStop();
    TriggerQueueClear(c_triggerQueueRetain);
    TriggerQueuePause(true);
    auto4BBF9797_g = libCOOC_gf_NondefeatedPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto4BBF9797_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOOC_gf_CC_PlayerAwardMissionXP(lp_type, lv_indexPlayer);
        libCOOC_gf_CC_SaveAllTransitionData((lp_type != c_gameOverVictory), lv_indexPlayer);
        libCPGL_gv_cM_EndMissionResult[lv_indexPlayer] = lp_type;
        libCPGL_gf_CM_MissionEndAwardAchievements(lv_indexPlayer);
    }
    auto5635EC9A_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto5635EC9A_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((lp_type == c_gameOverVictory)) {
            UIAlert("VictoryAlertCoop", lv_indexPlayer, StringToText(""), null);
        }

        if ((lp_type == c_gameOverDefeat)) {
            UIAlert("DefeatAlertCoop", lv_indexPlayer, StringToText(""), null);
        }

        if ((lp_type == c_gameOverTie)) {
            UIAlert("DrawAlertCoop", lv_indexPlayer, StringToText(""), null);
        }

        libCOOC_gf_CC_SetPlayerDefeated(lv_indexPlayer);
        if ((libCOOC_gv_cC_InContestMap == true)) {
            GameOver(lv_indexPlayer, libCPGL_gv_cM_EndMissionResult[lv_indexPlayer], true, true);
        }
        else {
            libCOUI_gf_CU_FanfareDisplay(lp_type, lv_indexPlayer);
        }
    }
    if ((libCOOC_gf_CoopDebugModeIsOn("LogPerf", 1) == true)) {
        PerfTestStop();
    }

}

void libCPGL_gf_CC_ScoreValueSet (int lp_player, string lp_scoreType, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPCM_gv_cC_InContestMap == true)) {
        return ;
    }

    if (libCPGL_gf_DebugModeEnabled()) {
        TextExpressionSetToken("Param/Expression/lib_CPGL_8A8E4B93", "A", StringToText((lp_scoreType)));
        TextExpressionSetToken("Param/Expression/lib_CPGL_8A8E4B93", "B", IntToText(lp_value));
        TextExpressionSetToken("Param/Expression/lib_CPGL_8A8E4B93", "C", IntToText(lp_player));
        TriggerDebugOutput(14, TextExpressionAssemble("Param/Expression/lib_CPGL_8A8E4B93"), false);
    }

    PlayerScoreValueSetFromInt(lp_player, lp_scoreType, lp_value);
}

int libCPGL_gf_CC_StatEventLast () {
    // Automatic Variable Declarations
    // Implementation
    return libCPGL_gv_pC_StatEventLastCampaign;
}

void libCPGL_gf_CC_StatEventCreate (string lp_name) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPCM_gv_cC_InContestMap == true)) {
        return ;
    }

    StatEventCreate(lp_name);
    if (libCPGL_gf_DebugModeEnabled()) {
        TriggerDebugOutput(13, StringToText(lp_name), false);
    }

    libCPGL_gv_pC_StatEventLastCampaign = StatEventLastCreated();
}

void libCPGL_gf_CC_StatEventAddStr (string lp_key, string lp_value, int lp_event) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPCM_gv_cC_InContestMap == true)) {
        return ;
    }

    if (libCPGL_gf_DebugModeEnabled()) {
        TextExpressionSetToken("Param/Expression/lib_CPGL_10795220", "A", StringToText(lp_key));
        TextExpressionSetToken("Param/Expression/lib_CPGL_10795220", "B", StringToText(lp_value));
        TriggerDebugOutput(13, TextExpressionAssemble("Param/Expression/lib_CPGL_10795220"), false);
    }

    StatEventAddDataString(lp_event, lp_key, lp_value);
}

void libCPGL_gf_CC_StatEventAddInt (string lp_key, int lp_value, int lp_event) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPCM_gv_cC_InContestMap == true)) {
        return ;
    }

    if (libCPGL_gf_DebugModeEnabled()) {
        TextExpressionSetToken("Param/Expression/lib_CPGL_5372BD0C", "A", StringToText(lp_key));
        TextExpressionSetToken("Param/Expression/lib_CPGL_5372BD0C", "B", IntToText(lp_value));
        TriggerDebugOutput(13, TextExpressionAssemble("Param/Expression/lib_CPGL_5372BD0C"), false);
    }

    StatEventAddDataInt(lp_event, lp_key, lp_value);
}

void libCPGL_gf_CC_StatEventAddReal (string lp_key, fixed lp_value, int lp_event) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPCM_gv_cC_InContestMap == true)) {
        return ;
    }

    if (libCPGL_gf_DebugModeEnabled()) {
        TextExpressionSetToken("Param/Expression/lib_CPGL_3FBF4821", "A", StringToText(lp_key));
        TextExpressionSetToken("Param/Expression/lib_CPGL_3FBF4821", "B", FixedToText(lp_value, c_fixedPrecisionAny));
        TriggerDebugOutput(13, TextExpressionAssemble("Param/Expression/lib_CPGL_3FBF4821"), false);
    }

    StatEventAddDataFixed(lp_event, lp_key, lp_value);
}

void libCPGL_gf_CC_StatEventDone (int lp_statEvent) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPCM_gv_cC_InContestMap == true)) {
        return ;
    }

    if (libCPGL_gf_DebugModeEnabled()) {
        TriggerDebugOutput(13, StringToText(""), false);
    }

    StatEventSend(lp_statEvent);
    if ((lp_statEvent == libCPGL_gv_pC_StatEventLastCampaign)) {
        libCPGL_gv_pC_StatEventLastCampaign = -1;
    }

}

void libCPGL_gf_CC_StatRecordMapStart () {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto8914FC33_g;

    // Variable Initialization

    // Implementation
    if ((libCPCM_gv_cC_InContestMap == true)) {
        return ;
    }

    libCPGL_gf_CC_StatEventCreate("ACMapStart");
    libCPGL_gf_CC_StatEventAddInt("Version", libCPGL_gv_pCC_StatVersion, libCPGL_gf_CC_StatEventLast());
    libCPGL_gf_CC_StatEventDone(libCPGL_gf_CC_StatEventLast());
    auto8914FC33_g = libCPCD_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto8914FC33_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) != c_playerTypeUser)) {
            continue;
        }

        libCPGL_gf_CC_ScoreValueSet(lv_indexPlayer, "CommanderLevel", libCPGL_gf_CC_CommanderLevel(lv_indexPlayer, libCPGL_gf_ActiveCommanderForPlayer(lv_indexPlayer)));
        libCPGL_gf_CC_ScoreValueSet(lv_indexPlayer, "CommanderSelection", libCPGL_gf_CC_CommanderInternalIndex(libCPGL_gf_ActiveCommanderForPlayer(lv_indexPlayer)));
        libCPGL_gf_CC_ScoreValueSet(lv_indexPlayer, "Difficulty", libCPCD_gf_CC_DifficultyIndex(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer)));
        libCPGL_gf_CC_ScoreValueSet(lv_indexPlayer, "MasteryLevel", libCPGL_gf_CC_PlayerMasteryLevel(lv_indexPlayer));
        libCPGL_gf_CC_StatEventCreate("PlayerInfo");
        libCPGL_gf_CC_StatEventAddInt("PlayerIndex", lv_indexPlayer, libCPGL_gf_CC_StatEventLast());
        if ((GameIsOnline() == true)) {
            libCPGL_gf_CC_StatEventAddStr("PlayerHandle", PlayerHandle(lv_indexPlayer), libCPGL_gf_CC_StatEventLast());
        }

        libCPGL_gf_CC_StatEventAddInt("PlayerDifficulty", libCPCD_gf_CC_DifficultyIndex(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer)), libCPGL_gf_CC_StatEventLast());
        libCPGL_gf_CC_StatEventAddStr("Commander", (libCPGL_gf_ActiveCommanderForPlayer(lv_indexPlayer)), libCPGL_gf_CC_StatEventLast());
        libCPGL_gf_CC_StatEventAddInt("CommanderLevel", libCPGL_gf_CC_CommanderLevel(lv_indexPlayer, libCPGL_gf_ActiveCommanderForPlayer(lv_indexPlayer)), libCPGL_gf_CC_StatEventLast());
        libCPGL_gf_CC_StatEventDone(libCPGL_gf_CC_StatEventLast());
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Bug Fixes
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_BugFixes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_BugFixes_Init () {
    libCPGL_gt_BugFixes = TriggerCreate("libCPGL_gt_BugFixes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Changes
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_Changes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_Changes_Init () {
    libCPGL_gt_Changes = TriggerCreate("libCPGL_gt_Changes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quality of Life
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_QualityofLife_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_QualityofLife_Init () {
    libCPGL_gt_QualityofLife = TriggerCreate("libCPGL_gt_QualityofLife_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Coop+Init
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CoopInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    fixed lv_originalDistance;

    // Automatic Variable Declarations
    playergroup autoA892689B_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMI_gt_CM_MissionHandlePlayerQuitGiveResources, false);
    TriggerEnable(libCOMI_gt_CM_MissionHandlePlayerQuitGameEnd, false);
    TriggerEnable(libCOMI_gt_CM_AbortMission, false);
    TriggerEnable(libCOMI_gt_CM_MissionScoreScreenExited, false);
    GameSetSpeedValue(c_gameSpeedFaster);
    libCPCM_gf_MutatorGlobalInit(false);
    TriggerExecute(libCPGL_gt_PlayersInit, true, true);
    TriggerExecute(libCPGL_gt_GameStart, true, true);
    libCPGL_gf_CU_UpdateObjectivePanel();
    libCPGL_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    autoA892689B_g = libCPGL_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoA892689B_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCPCD_gf_PlayerInfoShowHide(lv_indexPlayer, false);
        lv_originalDistance = CameraGetDistance(lv_indexPlayer);
        CameraSetValue(lv_indexPlayer, c_cameraValueDistance, (lv_originalDistance+4.0), 0.0, -1, 10.0);
    }
    Wait(0.0625, c_timeGame);
    TriggerExecute(libCPGL_gt_Zoomin, true, true);
    Wait(0.0625, c_timeGame);
    TriggerExecute(libCPGL_gt_LobbyInit, true, true);
    Wait(0.0625, c_timeGame);
    TriggerExecute(libCPGL_gt_HelpInit, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CoopInit_Init () {
    libCPGL_gt_CoopInit = TriggerCreate("libCPGL_gt_CoopInit_Func");
    TriggerAddEventMapInit(libCPGL_gt_CoopInit);
    libCPGL_gf_ChatCommand(libCPGL_gt_CoopInit, libCPGL_ge_ChatCommandType_Debug, "Init");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PlayersInit
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_PlayersInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto4A5E69A8_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto4A5E69A8_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto4A5E69A8_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) == c_playerTypeUser) && (GameAttributePlayerValue("1", lv_indexPlayer) != "0002") && (PlayerStatus(lv_indexPlayer) == c_playerStatusActive)) {
            MeleeSetOption(lv_indexPlayer, c_meleeOptionDefeat, false);
            PlayerGroupAdd(libCPGL_gv_humanPlayersGroup, lv_indexPlayer);
            libCPGL_gf_LoadPlayer(lv_indexPlayer);
            PlayerSetDifficulty(lv_indexPlayer, libCPCM_gf_GetPlayerDifficultyFromMutatorLevel());
            MeleeSetOption(lv_indexPlayer, c_meleeOptionDefeat, true);
        }

        if ((PlayerType(lv_indexPlayer) == c_playerTypeComputer)) {
            PlayerSetRace(lv_indexPlayer, libCPGL_gf_GetClosestRace(PlayerRace(lv_indexPlayer)));
            AIMeleeStart(lv_indexPlayer);
            AIStart(lv_indexPlayer, false, 200);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_PlayersInit_Init () {
    libCPGL_gt_PlayersInit = TriggerCreate("libCPGL_gt_PlayersInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LobbyInit
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_LobbyInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnitMin;
    unit lv_indexUnitGas;

    // Automatic Variable Declarations
    unitgroup auto97424F7D_g;
    int auto97424F7D_u;
    unitgroup auto91B9462B_g;
    int auto91B9462B_u;
    playergroup auto396BC7BF_g;
    int auto396BC7BF_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameAttributeGameValue("35") == "0001")) {
        libCPGL_gv_helpMode = true;
    }
    else {
        libCPGL_gv_helpMode = false;
    }
    if ((GameAttributeGameValue("4") == "0005")) {
        auto97424F7D_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto97424F7D_u = UnitGroupCount(auto97424F7D_g, c_unitCountAll);
        for (;; auto97424F7D_u -= 1) {
            lv_indexUnitMin = UnitGroupUnitFromEnd(auto97424F7D_g, auto97424F7D_u);
            if (lv_indexUnitMin == null) { break; }
            libNtve_gf_ReplaceUnit(lv_indexUnitMin, "RichMineralField", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
        }
        auto91B9462B_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto91B9462B_u = UnitGroupCount(auto91B9462B_g, c_unitCountAll);
        for (;; auto91B9462B_u -= 1) {
            lv_indexUnitGas = UnitGroupUnitFromEnd(auto91B9462B_g, auto91B9462B_u);
            if (lv_indexUnitGas == null) { break; }
            libNtve_gf_ReplaceUnit(lv_indexUnitMin, "RichVespeneGeyser", libNtve_ge_ReplaceUnitOptions_NewUnitsDefault);
        }
    }
    else {
        libCPGL_gf_ResourcesInit();
    }
    TriggerExecute(libCPGL_gt_HeroTimeStarts, true, true);
    TriggerExecute(libCPGL_gt_BTBuildTimeStarts, true, true);
    TriggerExecute(libCPGL_gt_AllianceChanges, true, true);
    TriggerEnable(libCPGL_gt_AllianceChanges, true);
    TriggerEnable(libCPGL_gt_MainNatCameraGlobalCaster, true);
    TriggerEnable(libCPGL_gt_MainNatRegionEnter, true);
    TriggerEnable(libCPGL_gt_MainNatRegionExit, true);
    TriggerEnable(libCPGL_gt_MinimapAllianceCheck, true);
    TriggerEnable(libCPGL_gt_MinimapCameraUpdate, true);
    TriggerEnable(libCPGL_gt_MinimapInit, true);
    TriggerExecute(libCPGL_gt_MinimapInit, true, true);
    TriggerEnable(libCPGL_gt_PlayerLeavesGame, true);
    auto396BC7BF_g = PlayerGroupAll();
    auto396BC7BF_var = -1;
    while (true) {
        auto396BC7BF_var = PlayerGroupNextPlayer(auto396BC7BF_g, auto396BC7BF_var);
        if (auto396BC7BF_var < 0) { break; }
        if ((PlayerType(auto396BC7BF_var) == c_playerTypeComputer)) {
            AIMeleeStart(auto396BC7BF_var);
            libNtve_gf_SetUpgradeLevelForPlayer(auto396BC7BF_var, "HunterSeeker", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto396BC7BF_var, "YamatoCannon", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto396BC7BF_var, "BattlecruiserEnableSpecializations", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto396BC7BF_var, "GhostCoopAIFriendlyFire", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto396BC7BF_var, "HatcheryLarvaDeath", 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_LobbyInit_Init () {
    libCPGL_gt_LobbyInit = TriggerCreate("libCPGL_gt_LobbyInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alliance Changes
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_AllianceChanges_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iPlayer;
    int lv_iPlayer2;

    // Automatic Variable Declarations
    playergroup auto1415F651_g;
    int auto1415F651_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto1415F651_g = libCPGL_gf_HumanPlayers();
    auto1415F651_var = -1;
    while (true) {
        auto1415F651_var = PlayerGroupNextPlayer(auto1415F651_g, auto1415F651_var);
        if (auto1415F651_var < 0) { break; }
        lv_iPlayer = auto1415F651_var;
        if ((libNtve_gf_PlayerIsEnemy(lv_iPlayer, lv_iPlayer2, libNtve_ge_PlayerRelation_Ally) == true)) {
            libCOMI_gf_SetAllianceAspectCoop(lv_iPlayer, c_allianceIdPower, lv_iPlayer2, true);
        }

        lv_iPlayer2 = auto1415F651_var;
    }
    libCPGL_gf_CalculateMainNat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_AllianceChanges_Init () {
    libCPGL_gt_AllianceChanges = TriggerCreate("libCPGL_gt_AllianceChanges_Func");
    TriggerAddEventMapInit(libCPGL_gt_AllianceChanges);
    TriggerAddEventPlayerAllianceChange(libCPGL_gt_AllianceChanges, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Start
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_GameStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto4F5F98FA_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTipAlertPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, true);
    libLbty_gf_EnableDisablePingPanel(true, PlayerGroupAll());
    libCOMI_gf_CM_ChatBarSetMode(libCOMI_ge_CM_ChatBarMode_CM_ChatBarNormal, libCPGL_gf_HumanPlayers());
    auto4F5F98FA_g = libCPGL_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto4F5F98FA_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        UIAlertClear(lv_indexPlayer);
        UIAlertPoint("StartLocation", lv_indexPlayer, StringExternal("Param/Value/lib_CPGL_BB8DE67E"), "coopplusicon.dds", PlayerStartLocation(lv_indexPlayer));
        if ((libCPGL_gv_commander[lv_indexPlayer].lv_commander == "Tychus")) {
            UnitIssueOrder(libCPGL_gv_commander[lv_indexPlayer].lv_heroStructure, Order(AbilityCommand("TychusStarportTrain", 0)), c_orderQueueReplace);
        }

        if ((libCPGL_gv_commander[lv_indexPlayer].lv_commander == "Stetmann")) {
            UnitIssueOrder(libCPGL_gv_commander[lv_indexPlayer].lv_globalCasterUnit, Order(AbilityCommand("PowerFieldMovementSpeedOn", 0)), c_orderQueueReplace);
        }

    }
    libCPCD_gf_TransmissionVoiceoverInit();
    libCPCD_gf_CM_GPRemindersInit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_GameStart_Init () {
    libCPGL_gt_GameStart = TriggerCreate("libCPGL_gt_GameStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Leaves Game
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_PlayerLeavesGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexAlly;

    // Automatic Variable Declarations
    playergroup auto350E723F_g;
    int auto350E723F_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCPGL_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupCount(libCPGL_gf_HumanPlayers()) == 1)) {
        TriggerEnable(libCPGL_gt_PlayerLeavesGame, false);
    }
    else {
        auto350E723F_g = PlayerGroupAlliance(c_playerGroupAlly, EventPlayer());
        auto350E723F_var = -1;
        while (true) {
            auto350E723F_var = PlayerGroupNextPlayer(auto350E723F_g, auto350E723F_var);
            if (auto350E723F_var < 0) { break; }
            if ((PlayerGroupHasPlayer(libCPGL_gf_HumanPlayers(), lv_indexAlly) == true)) {
                PlayerModifyPropertyInt(auto350E723F_var, c_playerPropMinerals, c_playerPropOperAdd, ModI(PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals), PlayerGroupCount(libCPGL_gf_IntersectionofPlayerGroupsCoop(PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()), libCPGL_gf_HumanPlayers()))));
                PlayerModifyPropertyInt(auto350E723F_var, c_playerPropVespene, c_playerPropOperAdd, ModI(PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene), PlayerGroupCount(libCPGL_gf_IntersectionofPlayerGroupsCoop(PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()), libCPGL_gf_HumanPlayers()))));
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 0);
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
                TechTreeUpgradeAddLevel(lv_indexAlly, "NydusNetworkCoopAllyLeft", 1);
                libCOMI_gf_SetAllianceOneWayCoop(EventPlayer(), lv_indexAlly, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_PlayerLeavesGame_Init () {
    libCPGL_gt_PlayerLeavesGame = TriggerCreate("libCPGL_gt_PlayerLeavesGame_Func");
    TriggerAddEventPlayerLeft(libCPGL_gt_PlayerLeavesGame, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main+NatRegionEnter
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_MainNatRegionEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameAttributeGameValue("5") == "0001"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitInRegion(EventUnit(), libCPGL_gv_mainNatEnemy[UnitGetOwner(EventUnit())]) == true)) {
        UnitBehaviorAdd(EventUnit(), "MainBaseDisabler", libCPGL_gv_commander[UnitGetOwner(EventUnit())].lv_globalCasterUnit, 1);
    }

    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionCircle(PlayerStartLocation(UnitGetOwner(EventUnit())), 20.0)) == true)) {
        UnitBehaviorAdd(EventUnit(), "MainBaseProtection", libCPGL_gv_commander[UnitGetOwner(EventUnit())].lv_globalCasterUnit, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_MainNatRegionEnter_Init () {
    libCPGL_gt_MainNatRegionEnter = TriggerCreate("libCPGL_gt_MainNatRegionEnter_Func");
    TriggerAddEventUnitRegion(libCPGL_gt_MainNatRegionEnter, null, libCPGL_gf_StartingLocationsOfHumanPlayers(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main+NatRegionExit
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_MainNatRegionExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameAttributeGameValue("5") == "0001"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitInRegion(EventUnit(), libCPGL_gv_mainNatEnemy[UnitGetOwner(EventUnit())]) == false)) {
        UnitBehaviorRemove(EventUnit(), "MainBaseDisabler", c_unitBehaviorCountAll);
    }

    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionCircle(PlayerStartLocation(UnitGetOwner(EventUnit())), 20.0)) == false)) {
        UnitBehaviorRemove(EventUnit(), "MainBaseProtection", c_unitBehaviorCountAll);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_MainNatRegionExit_Init () {
    libCPGL_gt_MainNatRegionExit = TriggerCreate("libCPGL_gt_MainNatRegionExit_Func");
    TriggerAddEventUnitRegion(libCPGL_gt_MainNatRegionExit, null, libCPGL_gf_StartingLocationsOfHumanPlayers(), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main+NatCameraGlobalCaster
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_MainNatCameraGlobalCaster_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nounit;
    int lv_anyPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nounit = UnitGroupRandomUnit(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll);
    lv_anyPlayer = c_playerAny;

    // Conditions
    if (testConds) {
        if (!((GameAttributeGameValue("5") == "0001"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(libCPGL_gv_mainNatEnemy[EventPlayer()], Point(PointGetX(CameraGetTarget(EventPlayer())), PointGetY(CameraGetTarget(EventPlayer())))) == true)) {
        UnitBehaviorAdd(libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit, "MainBaseDisabler", lv_nounit, 1);
        UnitBehaviorAdd(libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnitSecondary, "MainBaseDisabler", lv_nounit, 1);
        TriggerExecute(libCPCD_gt_GPTMTargetingForceOff, true, false);
        if (true) {
        }

    }
    else {
        UnitBehaviorRemove(libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit, "MainBaseDisabler", c_unitBehaviorCountAll);
        UnitBehaviorRemove(libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnitSecondary, "MainBaseDisabler", c_unitBehaviorCountAll);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_MainNatCameraGlobalCaster_Init () {
    libCPGL_gt_MainNatCameraGlobalCaster = TriggerCreate("libCPGL_gt_MainNatCameraGlobalCaster_Func");
    TriggerAddEventCameraMove(libCPGL_gt_MainNatCameraGlobalCaster, 0, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MainNatCameraGlobalCaster, 1, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MainNatCameraGlobalCaster, 2, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MainNatCameraGlobalCaster, 3, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MainNatCameraGlobalCaster, 4, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MainNatCameraGlobalCaster, 5, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MainNatCameraGlobalCaster, 6, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MainNatCameraGlobalCaster, 7, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MainNatCameraGlobalCaster, 8, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MainNatCameraGlobalCaster, 9, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MainNatCameraGlobalCaster, 10, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MainNatCameraGlobalCaster, 11, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MainNatCameraGlobalCaster, 12, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MainNatCameraGlobalCaster, 13, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MainNatCameraGlobalCaster, 14, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MainNatCameraGlobalCaster, 15, c_cameraMoveReasonAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroTime Starts
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_HeroTimeStarts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoCC4B6F86_g;
    playergroup autoA11C10F6_g;
    playergroup auto5C74FEB2_g;
    playergroup auto105C5019_g;
    playergroup auto92AF394D_g;
    playergroup auto926636DB_g;
    playergroup auto4395EEC2_g;
    playergroup auto31AC2858_g;
    playergroup auto2347CECB_g;
    playergroup autoF59FE56F_g;
    playergroup autoD671B475_g;
    playergroup auto1D9863F3_g;
    playergroup auto9C161507_g;
    playergroup autoB9FBF720_g;
    playergroup autoDE00DCCE_g;
    playergroup autoFF6D407F_g;
    playergroup auto17B0E31C_g;
    playergroup autoF8756297_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameAttributeGameValue("2") != "0013"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libCPGL_gv_hTHeroTimeTimer, libCPGL_gf_HTHeroTime(), false, c_timeGame);
    TextExpressionSetToken("Param/Expression/lib_CPGL_D7DA0699", "A", FixedToText(libCPGL_gf_HTHeroTime(), c_fixedPrecisionAny));
    TextExpressionSetToken("Param/Expression/lib_CPGL_D7DA0699", "B", FixedToText(libCPGL_gf_HTHeroTime(), c_fixedPrecisionAny));
    libCPGL_gf_DebugMessagePlayerGroup(libCPGL_ge_ChatCommandType_Normal, TextExpressionAssemble("Param/Expression/lib_CPGL_D7DA0699"), libCPGL_gf_HumanPlayers(), c_messageAreaChat);
    libCPGL_gv_hTHeroTime = libCPGL_gf_HTHeroTime();
    if ((libCPGL_gf_CommanderisinPlayerGroup("Abathur", libCPGL_gf_HumanPlayers()) == true)) {
        autoCC4B6F86_g = libCPGL_gf_AllCommandersinPlayerGroup("Abathur", libCPGL_gf_HumanPlayers());
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoCC4B6F86_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCPGL_gf_HTCAbathur(lv_indexPlayer);
        }
    }

    if ((libCPGL_gf_CommanderisinPlayerGroup("Alarak", libCPGL_gf_HumanPlayers()) == true)) {
        autoA11C10F6_g = libCPGL_gf_AllCommandersinPlayerGroup("Alarak", libCPGL_gf_HumanPlayers());
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoA11C10F6_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCPGL_gf_HTCAlarak(lv_indexPlayer);
        }
    }

    if ((libCPGL_gf_CommanderisinPlayerGroup("Artanis", libCPGL_gf_HumanPlayers()) == true)) {
        auto5C74FEB2_g = libCPGL_gf_AllCommandersinPlayerGroup("Artanis", libCPGL_gf_HumanPlayers());
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto5C74FEB2_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCPGL_gf_HTCArtanis(lv_indexPlayer);
        }
    }

    if ((libCPGL_gf_CommanderisinPlayerGroup("Dehaka", libCPGL_gf_HumanPlayers()) == true)) {
        auto105C5019_g = libCPGL_gf_AllCommandersinPlayerGroup("Dehaka", libCPGL_gf_HumanPlayers());
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto105C5019_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCPGL_gf_HTCDehaka(lv_indexPlayer);
        }
    }

    if ((libCPGL_gf_CommanderisinPlayerGroup("Fenix", libCPGL_gf_HumanPlayers()) == true)) {
        auto92AF394D_g = libCPGL_gf_AllCommandersinPlayerGroup("Fenix", libCPGL_gf_HumanPlayers());
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto92AF394D_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCPGL_gf_HTCFenix(lv_indexPlayer);
        }
    }

    if ((libCPGL_gf_CommanderisinPlayerGroup("Horner", libCPGL_gf_HumanPlayers()) == true)) {
        auto926636DB_g = libCPGL_gf_AllCommandersinPlayerGroup("Horner", libCPGL_gf_HumanPlayers());
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto926636DB_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCPGL_gf_HTCHH(lv_indexPlayer);
        }
    }

    if ((libCPGL_gf_CommanderisinPlayerGroup("Karax", libCPGL_gf_HumanPlayers()) == true)) {
        auto4395EEC2_g = libCPGL_gf_AllCommandersinPlayerGroup("Karax", libCPGL_gf_HumanPlayers());
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto4395EEC2_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCPGL_gf_HTCKarax(lv_indexPlayer);
        }
    }

    if ((libCPGL_gf_CommanderisinPlayerGroup("Kerrigan", libCPGL_gf_HumanPlayers()) == true)) {
        auto31AC2858_g = libCPGL_gf_AllCommandersinPlayerGroup("Kerrigan", libCPGL_gf_HumanPlayers());
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto31AC2858_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCPGL_gf_HTCKerrigan(lv_indexPlayer);
        }
    }

    if ((libCPGL_gf_CommanderisinPlayerGroup("Mengsk", libCPGL_gf_HumanPlayers()) == true)) {
        auto2347CECB_g = libCPGL_gf_AllCommandersinPlayerGroup("Mengsk", libCPGL_gf_HumanPlayers());
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto2347CECB_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCPGL_gf_HTCMengsk(lv_indexPlayer);
        }
    }

    if ((libCPGL_gf_CommanderisinPlayerGroup("Nova", libCPGL_gf_HumanPlayers()) == true)) {
        autoF59FE56F_g = libCPGL_gf_AllCommandersinPlayerGroup("Nova", libCPGL_gf_HumanPlayers());
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoF59FE56F_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCPGL_gf_HTCNova(lv_indexPlayer);
        }
    }

    if ((libCPGL_gf_CommanderisinPlayerGroup("Raynor", libCPGL_gf_HumanPlayers()) == true)) {
        autoD671B475_g = libCPGL_gf_AllCommandersinPlayerGroup("Raynor", libCPGL_gf_HumanPlayers());
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoD671B475_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCPGL_gf_HTCRaynor(lv_indexPlayer);
        }
    }

    if ((libCPGL_gf_CommanderisinPlayerGroup("Stetmann", libCPGL_gf_HumanPlayers()) == true)) {
        auto1D9863F3_g = libCPGL_gf_AllCommandersinPlayerGroup("Stetmann", libCPGL_gf_HumanPlayers());
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto1D9863F3_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCPGL_gf_HTCStetmann(lv_indexPlayer);
        }
    }

    if ((libCPGL_gf_CommanderisinPlayerGroup("Stukov", libCPGL_gf_HumanPlayers()) == true)) {
        auto9C161507_g = libCPGL_gf_AllCommandersinPlayerGroup("Stukov", libCPGL_gf_HumanPlayers());
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto9C161507_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCPGL_gf_HTCStukov(lv_indexPlayer);
        }
    }

    if ((libCPGL_gf_CommanderisinPlayerGroup("Swann", libCPGL_gf_HumanPlayers()) == true)) {
        autoB9FBF720_g = libCPGL_gf_AllCommandersinPlayerGroup("Swann", libCPGL_gf_HumanPlayers());
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoB9FBF720_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCPGL_gf_HTCSwann(lv_indexPlayer);
        }
    }

    if ((libCPGL_gf_CommanderisinPlayerGroup("Tychus", libCPGL_gf_HumanPlayers()) == true)) {
        autoDE00DCCE_g = libCPGL_gf_AllCommandersinPlayerGroup("Tychus", libCPGL_gf_HumanPlayers());
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoDE00DCCE_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCPGL_gf_HTCTychus(lv_indexPlayer);
        }
    }

    if ((libCPGL_gf_CommanderisinPlayerGroup("Vorazun", libCPGL_gf_HumanPlayers()) == true)) {
        autoFF6D407F_g = libCPGL_gf_AllCommandersinPlayerGroup("Vorazun", libCPGL_gf_HumanPlayers());
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoFF6D407F_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCPGL_gf_HTCVorazun(lv_indexPlayer);
        }
    }

    if ((libCPGL_gf_CommanderisinPlayerGroup("Zagara", libCPGL_gf_HumanPlayers()) == true)) {
        auto17B0E31C_g = libCPGL_gf_AllCommandersinPlayerGroup("Zagara", libCPGL_gf_HumanPlayers());
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto17B0E31C_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCPGL_gf_HTCZagara(lv_indexPlayer);
        }
    }

    if ((libCPGL_gf_CommanderisinPlayerGroup("Zeratul", libCPGL_gf_HumanPlayers()) == true)) {
        autoF8756297_g = libCPGL_gf_AllCommandersinPlayerGroup("Zeratul", libCPGL_gf_HumanPlayers());
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoF8756297_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCPGL_gf_HTCZeratul(lv_indexPlayer);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_HeroTimeStarts_Init () {
    libCPGL_gt_HeroTimeStarts = TriggerCreate("libCPGL_gt_HeroTimeStarts_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroTime Ends
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_HeroTimeEnds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_HeroTimeEnds_Init () {
    libCPGL_gt_HeroTimeEnds = TriggerCreate("libCPGL_gt_HeroTimeEnds_Func");
    TriggerAddEventTimer(libCPGL_gt_HeroTimeEnds, libCPGL_gv_hTHeroTimeTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BTBuildTime Starts
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_BTBuildTimeStarts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto311F149D_g;
    int auto311F149D_var;

    // Conditions
    if (testConds) {
        if (!((TimerGetDuration(libCPGL_gv_bTBuildTimeTimer) >= 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_CPGL_33BF90E1", "A", FixedToText(libCPGL_gf_BTBuildTime(), c_fixedPrecisionAny));
    TextExpressionSetToken("Param/Expression/lib_CPGL_33BF90E1", "B", FixedToText(libCPGL_gf_BTBuildTime(), c_fixedPrecisionAny));
    libCPGL_gf_DebugMessagePlayerGroup(libCPGL_ge_ChatCommandType_Normal, TextExpressionAssemble("Param/Expression/lib_CPGL_33BF90E1"), libCPGL_gf_HumanPlayers(), c_messageAreaChat);
    TimerStart(libCPGL_gv_bTBuildTimeTimer, libCPGL_gf_BTBuildTime(), false, c_timeGame);
    auto311F149D_g = libCPGL_gf_HumanPlayers();
    auto311F149D_var = -1;
    while (true) {
        auto311F149D_var = PlayerGroupNextPlayer(auto311F149D_g, auto311F149D_var);
        if (auto311F149D_var < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(auto311F149D_var, "BuildTime", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_BTBuildTimeStarts_Init () {
    libCPGL_gt_BTBuildTimeStarts = TriggerCreate("libCPGL_gt_BTBuildTimeStarts_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BTBuildTime Ends
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_BTBuildTimeEnds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto8FD740B0_g;
    int auto8FD740B0_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto8FD740B0_g = libCPGL_gf_HumanPlayers();
    auto8FD740B0_var = -1;
    while (true) {
        auto8FD740B0_var = PlayerGroupNextPlayer(auto8FD740B0_g, auto8FD740B0_var);
        if (auto8FD740B0_var < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(auto8FD740B0_var, "BuildTime", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(auto8FD740B0_var, "BuildTimeReset", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_BTBuildTimeEnds_Init () {
    libCPGL_gt_BTBuildTimeEnds = TriggerCreate("libCPGL_gt_BTBuildTimeEnds_Func");
    TriggerAddEventTimer(libCPGL_gt_BTBuildTimeEnds, libCPGL_gv_bTBuildTimeTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CNCinematicModeOn
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CNCinematicModeOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CNCinematicModeOn_Init () {
    libCPGL_gt_CNCinematicModeOn = TriggerCreate("libCPGL_gt_CNCinematicModeOn_Func");
    TriggerAddEventGeneric(libCPGL_gt_CNCinematicModeOn, "CinematicModeOn");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CNCinematicModeOff
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CNCinematicModeOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCPGL_gt_CM_MissionHandlePlayerQuitGameEnd, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CNCinematicModeOff_Init () {
    libCPGL_gt_CNCinematicModeOff = TriggerCreate("libCPGL_gt_CNCinematicModeOff_Func");
    TriggerAddEventGeneric(libCPGL_gt_CNCinematicModeOff, "CinematicModeOff");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zoomin
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_Zoomin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_originalDistance;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoED5D680A_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    Wait(0.0625, c_timeGame);
    Wait(0.0625, c_timeGame);
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libCPGL_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 100.0, false);
    autoED5D680A_g = libCPGL_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoED5D680A_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        lv_originalDistance = (CameraGetDistance(lv_indexPlayer) - 4.0);
        CameraSetValue(lv_indexPlayer, c_cameraValueDistance, lv_originalDistance, 0.5, -1, 10.0);
    }
    Wait(0.5, c_timeGame);
    libCPGL_gf_CinematicModeCampaign(false, 0.5, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_Zoomin_Init () {
    libCPGL_gt_Zoomin = TriggerCreate("libCPGL_gt_Zoomin_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MinimapCameraUpdate
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_MinimapCameraUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PingSetPosition(libCPGL_gv_minimapPing[EventPlayer()], CameraGetTarget(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_MinimapCameraUpdate_Init () {
    libCPGL_gt_MinimapCameraUpdate = TriggerCreate("libCPGL_gt_MinimapCameraUpdate_Func");
    TriggerEnable(libCPGL_gt_MinimapCameraUpdate, false);
    TriggerAddEventCameraMove(libCPGL_gt_MinimapCameraUpdate, 0, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MinimapCameraUpdate, 1, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MinimapCameraUpdate, 2, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MinimapCameraUpdate, 3, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MinimapCameraUpdate, 4, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MinimapCameraUpdate, 5, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MinimapCameraUpdate, 6, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MinimapCameraUpdate, 7, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MinimapCameraUpdate, 8, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MinimapCameraUpdate, 9, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MinimapCameraUpdate, 10, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MinimapCameraUpdate, 11, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MinimapCameraUpdate, 12, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MinimapCameraUpdate, 13, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MinimapCameraUpdate, 14, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libCPGL_gt_MinimapCameraUpdate, 15, c_cameraMoveReasonAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MinimapAllianceCheck
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_MinimapAllianceCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup auto2A1FB581_g;
    int auto2A1FB581_var;

    // Variable Initialization
    lv_players = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto2A1FB581_g = libCPGL_gf_HumanPlayers();
    auto2A1FB581_var = -1;
    while (true) {
        auto2A1FB581_var = PlayerGroupNextPlayer(auto2A1FB581_g, auto2A1FB581_var);
        if (auto2A1FB581_var < 0) { break; }
        lv_players = PlayerGroupAlliance(c_playerGroupAlly, auto2A1FB581_var);
        PlayerGroupRemove(lv_players, auto2A1FB581_var);
        PingSetPlayerGroup(libCPGL_gv_minimapPing[auto2A1FB581_var], lv_players);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_MinimapAllianceCheck_Init () {
    libCPGL_gt_MinimapAllianceCheck = TriggerCreate("libCPGL_gt_MinimapAllianceCheck_Func");
    TriggerEnable(libCPGL_gt_MinimapAllianceCheck, false);
    TriggerAddEventPlayerAllianceChange(libCPGL_gt_MinimapAllianceCheck, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MinimapInit
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_MinimapInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const fixed lv_baseScale = 0.5;
    const fixed lv_baseMapSize = 108.0;
    fixed lv_mapScale;
    int lv_pickedplayer2;

    // Automatic Variable Declarations
    playergroup autoF5A5C074_g;
    int autoF5A5C074_var;

    // Variable Initialization
    lv_mapScale = 0.5;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_mapScale = (lv_baseMapSize / MaxF(libNtve_gf_WidthOfRegion(RegionPlayableMap()), libNtve_gf_HeightOfRegion(RegionPlayableMap())));
    lv_mapScale = (lv_mapScale * lv_baseScale);
    autoF5A5C074_g = libCPGL_gf_HumanPlayers();
    autoF5A5C074_var = -1;
    while (true) {
        autoF5A5C074_var = PlayerGroupNextPlayer(autoF5A5C074_g, autoF5A5C074_var);
        if (autoF5A5C074_var < 0) { break; }
        libNtve_gf_CreatePingFacingAngle(libCPGL_gf_HumanPlayers(), "PingViewArea", CameraGetTarget(autoF5A5C074_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoF5A5C074_var, false)), 0.0, 270.0);
        PingSetScale(PingLastCreated(), lv_mapScale);
        TextExpressionSetToken("Param/Expression/lib_CPGL_96B9F508", "A", PlayerName(autoF5A5C074_var));
        TextExpressionSetToken("Param/Expression/lib_CPGL_96F95318", "A", TextWithColor(TextExpressionAssemble("Param/Expression/lib_CPGL_96B9F508"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
        PingSetTooltip(PingLastCreated(), TextExpressionAssemble("Param/Expression/lib_CPGL_96F95318"));
        libCPGL_gv_minimapPing[autoF5A5C074_var] = PingLastCreated();
        TriggerEnable(libCPGL_gt_MinimapCameraUpdate, true);
    }
    TriggerEnable(libCPGL_gt_MinimapAllianceCheck, true);
    TriggerExecute(libCPGL_gt_MinimapAllianceCheck, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_MinimapInit_Init () {
    libCPGL_gt_MinimapInit = TriggerCreate("libCPGL_gt_MinimapInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HelpInit
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_HelpInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoC4FAD136_g;
    int autoC4FAD136_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
    HelpPanelEnableTechGlossaryButton(PlayerGroupAll(), false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Zerg", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Neut", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "InfT", false);
    autoC4FAD136_g = PlayerGroupAll();
    autoC4FAD136_var = -1;
    while (true) {
        autoC4FAD136_var = PlayerGroupNextPlayer(autoC4FAD136_g, autoC4FAD136_var);
        if (autoC4FAD136_var < 0) { break; }
        TechTreeUnitHelpDefault(autoC4FAD136_var, false);
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_HelpInit_Init () {
    libCPGL_gt_HelpInit = TriggerCreate("libCPGL_gt_HelpInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignUnitInfoUnitMorphes
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CM_CampaignUnitInfoUnitMorphes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gf_CM_UseUnitNameAsUnitTip(EventUnit());
    libCPGL_gf_CM_ApplyCampaignTeachingToUnit(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CM_CampaignUnitInfoUnitMorphes_Init () {
    libCPGL_gt_CM_CampaignUnitInfoUnitMorphes = TriggerCreate("libCPGL_gt_CM_CampaignUnitInfoUnitMorphes_Func");
    TriggerEnable(libCPGL_gt_CM_CampaignUnitInfoUnitMorphes, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignUnitChangeOwner
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CM_CampaignUnitChangeOwner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gf_CM_UseUnitNameAsUnitTip(EventUnit());
    libCPGL_gf_CM_ApplyCampaignTeachingToUnit(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CM_CampaignUnitChangeOwner_Init () {
    libCPGL_gt_CM_CampaignUnitChangeOwner = TriggerCreate("libCPGL_gt_CM_CampaignUnitChangeOwner_Func");
    TriggerEnable(libCPGL_gt_CM_CampaignUnitChangeOwner, false);
    TriggerAddEventUnitChangeOwner(libCPGL_gt_CM_CampaignUnitChangeOwner, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignSolarForgeSelected
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CM_CampaignSolarForgeSelected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SolarForge"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TextTagDestroy(libCPGL_gv_cM_SolarForgeTextTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CM_CampaignSolarForgeSelected_Init () {
    libCPGL_gt_CM_CampaignSolarForgeSelected = TriggerCreate("libCPGL_gt_CM_CampaignSolarForgeSelected_Func");
    TriggerEnable(libCPGL_gt_CM_CampaignSolarForgeSelected, false);
    TriggerAddEventUnitAbility(libCPGL_gt_CM_CampaignSolarForgeSelected, null, AbilityCommand("SolarForgeResearch", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignLaserDrillDamaged
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CM_CampaignLaserDrillDamaged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DamagedDrakkenLaserDrillCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TextTagDestroy(libCPGL_gv_cM_DrillTextTagCreated);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CM_CampaignLaserDrillDamaged_Init () {
    libCPGL_gt_CM_CampaignLaserDrillDamaged = TriggerCreate("libCPGL_gt_CM_CampaignLaserDrillDamaged_Func");
    TriggerEnable(libCPGL_gt_CM_CampaignLaserDrillDamaged, false);
    TriggerAddEventUnitAbility(libCPGL_gt_CM_CampaignLaserDrillDamaged, null, AbilityCommand("BrokenDrakkenLaserDrill", 0), c_abilMorphStageUnitStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignLaserDrillSelected
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CM_CampaignLaserDrillSelected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DrakkenLaserDrillCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TextTagDestroy(libCPGL_gv_cM_DrillTextTagCreated);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CM_CampaignLaserDrillSelected_Init () {
    libCPGL_gt_CM_CampaignLaserDrillSelected = TriggerCreate("libCPGL_gt_CM_CampaignLaserDrillSelected_Func");
    TriggerEnable(libCPGL_gt_CM_CampaignLaserDrillSelected, false);
    TriggerAddEventUnitAbility(libCPGL_gt_CM_CampaignLaserDrillSelected, null, AbilityCommand("DrakkenLaserDrillResearch", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignLaserDrillCreated
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CM_CampaignLaserDrillCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DrakkenLaserDrillCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.5, c_timeGame);
    libCPGL_gf_CM_UseUnitNameAsUnitTip(EventUnit());
    libCPGL_gf_CM_ApplyCampaignTeachingToUnit(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CM_CampaignLaserDrillCreated_Init () {
    libCPGL_gt_CM_CampaignLaserDrillCreated = TriggerCreate("libCPGL_gt_CM_CampaignLaserDrillCreated_Func");
    TriggerEnable(libCPGL_gt_CM_CampaignLaserDrillCreated, false);
    TriggerAddEventUnitAbility(libCPGL_gt_CM_CampaignLaserDrillCreated, null, AbilityCommand("ConstructDrakkenLaserDrillCoop", 0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignCyberneticsDestroyed
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CM_CampaignCyberneticsDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libCPGL_gt_CM_CampaignCyberneticsSelected, false);
    libNtve_gf_KillModel(libCPGL_gv_cM_UpgradeReticle);
    TextTagDestroy(libCPGL_gv_cM_UpgradeTextTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CM_CampaignCyberneticsDestroyed_Init () {
    libCPGL_gt_CM_CampaignCyberneticsDestroyed = TriggerCreate("libCPGL_gt_CM_CampaignCyberneticsDestroyed_Func");
    TriggerEnable(libCPGL_gt_CM_CampaignCyberneticsDestroyed, false);
    TriggerAddEventUnitDied(libCPGL_gt_CM_CampaignCyberneticsDestroyed, UnitRefFromVariable("libCPGL_gv_cM_UpgradeUnit"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignCybCoreBuilding
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CM_CampaignCybCoreBuilding_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CyberneticsCore"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TextTagDestroy(libCPGL_gv_cM_CybCoreTextTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CM_CampaignCybCoreBuilding_Init () {
    libCPGL_gt_CM_CampaignCybCoreBuilding = TriggerCreate("libCPGL_gt_CM_CampaignCybCoreBuilding_Func");
    TriggerEnable(libCPGL_gt_CM_CampaignCybCoreBuilding, false);
    TriggerAddEventUnitAbility(libCPGL_gt_CM_CampaignCybCoreBuilding, null, AbilityCommand("CyberneticsCoreResearch", 14), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignCyberneticsSelected
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CM_CampaignCyberneticsSelected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "CyberneticsCore"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libCPGL_gt_CM_CampaignCyberneticsDestroyed, false);
    libCOOC_gv_pCX_UpgradesTaught = true;
    libNtve_gf_KillModel(libCPGL_gv_cM_UpgradeReticle);
    TextTagDestroy(libCPGL_gv_cM_UpgradeTextTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CM_CampaignCyberneticsSelected_Init () {
    libCPGL_gt_CM_CampaignCyberneticsSelected = TriggerCreate("libCPGL_gt_CM_CampaignCyberneticsSelected_Func");
    TriggerEnable(libCPGL_gt_CM_CampaignCyberneticsSelected, false);
    TriggerAddEventUnitSelected(libCPGL_gt_CM_CampaignCyberneticsSelected, null, 1, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignUnitCreated
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CM_CampaignUnitCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCPGL_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_CommanderPlayers(), UnitGetOwner(EventUnitCreatedUnit())) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitCreatedUnit(), UnitGetOwner(EventUnitCreatedUnit()), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gf_CM_UseUnitNameAsUnitTip(EventUnitCreatedUnit());
    libCPGL_gf_CM_ApplyCampaignTeachingToUnit(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CM_CampaignUnitCreated_Init () {
    libCPGL_gt_CM_CampaignUnitCreated = TriggerCreate("libCPGL_gt_CM_CampaignUnitCreated_Func");
    TriggerEnable(libCPGL_gt_CM_CampaignUnitCreated, false);
    TriggerAddEventUnitCreated(libCPGL_gt_CM_CampaignUnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignUnitTeaching
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CM_CampaignUnitTeaching_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto135815D1_g;
    int auto135815D1_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto135815D1_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto135815D1_u = UnitGroupCount(auto135815D1_g, c_unitCountAll);
    for (;; auto135815D1_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto135815D1_g, auto135815D1_u);
        if (lv_indexUnit == null) { break; }
        if (((UnitGetOwner(lv_indexUnit) == 1) || (UnitGetOwner(lv_indexUnit) == 2))) {
            libCPGL_gf_CM_UseUnitNameAsUnitTip(lv_indexUnit);
            libCPGL_gf_CM_ApplyCampaignTeachingToUnit(lv_indexUnit);
        }

        if (((UnitFilterMatch(lv_indexUnit, 1, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true) || (UnitFilterMatch(lv_indexUnit, 1, UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            libCPGL_gf_CM_UseUnitNameAsUnitTip(lv_indexUnit);
        }

    }
    TriggerEnable(libCPGL_gt_CM_CampaignUnitCreated, true);
    TriggerEnable(libCPGL_gt_CM_CampaignUnitChangeOwner, true);
    TriggerEnable(libCPGL_gt_CM_CampaignUnitInfoUnitMorphes, true);
    TriggerEnable(libCPGL_gt_CM_CampaignLaserDrillCreated, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CM_CampaignUnitTeaching_Init () {
    libCPGL_gt_CM_CampaignUnitTeaching = TriggerCreate("libCPGL_gt_CM_CampaignUnitTeaching_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: VoicePackDebug
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_VoicePackDebug_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_itReward;
    string lv_appReward;
    string lv_rewardStringIDCombine;

    // Automatic Variable Declarations
    int autoD38DF97C_catalog;
    int autoD38DF97C_i;
    int autoB78EF058_catalog;
    int autoB78EF058_i;

    // Variable Initialization
    lv_rewardStringIDCombine = "";

    // Conditions
    if (testConds) {
        if (!((libCPGL_gf_DebugModeEnabled() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD38DF97C_catalog = c_gameCatalogReward;
    autoD38DF97C_i = 1;
    for ( ; autoD38DF97C_i <= CatalogEntryCount(c_gameCatalogReward) ; autoD38DF97C_i += 1 ) {
        lv_itReward = CatalogEntryGet(autoD38DF97C_catalog, autoD38DF97C_i);
        if (((CatalogEntryScope(c_gameCatalogReward, lv_itReward) == "CRewardVoicePack") && (StringContains((lv_itReward), ("_" + (libCOOC_gf_ActiveCommanderForPlayer(1))), c_stringAnywhere, c_stringCase) == false))) {
            if ((PlayerHasReward(1, lv_itReward) == true)) {
                lv_rewardStringIDCombine = (((lv_itReward) + "_" + (libCOOC_gf_ActiveCommanderForPlayer(1))));
                TextExpressionSetToken("Param/Expression/lib_CPGL_05A4C8F8", "A", StringToText((lv_itReward)));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPGL_05A4C8F8"), true);
                TextExpressionSetToken("Param/Expression/lib_CPGL_95D86D2C", "A", StringToText(lv_rewardStringIDCombine));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPGL_95D86D2C"), true);
                autoB78EF058_catalog = c_gameCatalogReward;
                autoB78EF058_i = 1;
                for ( ; autoB78EF058_i <= CatalogEntryCount(c_gameCatalogReward) ; autoB78EF058_i += 1 ) {
                    lv_appReward = CatalogEntryGet(autoB78EF058_catalog, autoB78EF058_i);
                    if ((CatalogEntryScope(c_gameCatalogReward, lv_appReward) == "CRewardVoicePack")) {
                        if (((lv_appReward) == lv_rewardStringIDCombine)) {
                            PlayerAddReward(1, lv_rewardStringIDCombine);
                            TriggerDebugOutput(1, StringExternal("Param/Value/lib_CPGL_F1941922"), true);
                        }

                    }

                }
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_VoicePackDebug_Init () {
    libCPGL_gt_VoicePackDebug = TriggerCreate("libCPGL_gt_VoicePackDebug_Func");
    TriggerAddEventChatMessage(libCPGL_gt_VoicePackDebug, c_playerAny, "voicepackdebug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_PrestigeUpgradeSupplement
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_PrestigeUpgradeSupplement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_prestige;
    string lv_supplemental;
    int lv_index;

    // Automatic Variable Declarations
    int autoFA985E53_ae;
    const int autoFA985E53_ai = 1;

    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCPGL_gf_HumanPlayers(), lv_player) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_prestige = libCPGL_gf_CC_PlayerActivePrestigeInstance(lv_player);
    if ((lv_prestige == null)) {
        return true;
    }

    autoFA985E53_ae = UserDataFieldValueCount("PlayerPrestige", "UpgradeSupplements");
    lv_index = 1;
    for ( ; ( (autoFA985E53_ai >= 0 && lv_index <= autoFA985E53_ae) || (autoFA985E53_ai < 0 && lv_index >= autoFA985E53_ae) ) ; lv_index += autoFA985E53_ai ) {
        lv_supplemental = UserDataGetUserInstance("PlayerPrestige", lv_prestige, "UpgradeSupplements", lv_index);
        if ((UserDataGetGameLink("PlayerPrestigeUpgradeSupplements", lv_supplemental, "Upgrade", 1) == EventUpgradeName())) {
            libCPGL_gf_CC_ApplyUpgradeSupplemental(lv_player, lv_supplemental);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_PrestigeUpgradeSupplement_Init () {
    libCPGL_gt_CC_PrestigeUpgradeSupplement = TriggerCreate("libCPGL_gt_CC_PrestigeUpgradeSupplement_Func");
    TriggerEnable(libCPGL_gt_CC_PrestigeUpgradeSupplement, false);
    TriggerAddEventUpgradeLevelChanged(libCPGL_gt_CC_PrestigeUpgradeSupplement, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_SharedUpgradesRecheck
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_SharedUpgradesRecheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gf_CC_SharedUpgradesEnable();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_SharedUpgradesRecheck_Init () {
    libCPGL_gt_CC_SharedUpgradesRecheck = TriggerCreate("libCPGL_gt_CC_SharedUpgradesRecheck_Func");
    TriggerAddEventUnitResearchProgress(libCPGL_gt_CC_SharedUpgradesRecheck, null, c_unitProgressStageComplete);
    TriggerAddEventPlayerEffectUsed(libCPGL_gt_CC_SharedUpgradesRecheck, c_playerAny, "RefreshSharedUpgrades");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroSpawn
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_HeroSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCPGL_gf_DebugModeEnabled())) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCD_gf_HeroSpawn(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_HeroSpawn_Init () {
    libCPGL_gt_HeroSpawn = TriggerCreate("libCPGL_gt_HeroSpawn_Func");
    TriggerAddEventChatMessage(libCPGL_gt_HeroSpawn, c_playerAny, "herospawn", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Color
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_Color_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_color;

    // Automatic Variable Declarations
    string autoD54DD05B_val;

    // Variable Initialization
    lv_color = PlayerGetColorIndex(EventPlayer(), false);

    // Actions
    if (!runActions) {
        return true;
    }

    autoD54DD05B_val = StringWord(EventChatMessage(false), 2);
    if (autoD54DD05B_val == "White") {
    }
    else if (autoD54DD05B_val == "Red") {
    }
    else if (autoD54DD05B_val == "Blue") {
    }
    else if (autoD54DD05B_val == "Teal") {
    }
    else if (autoD54DD05B_val == "Purple") {
    }
    else if (autoD54DD05B_val == "Yellow") {
    }
    else if (autoD54DD05B_val == "Orange") {
    }
    else if (autoD54DD05B_val == "Aquamarine") {
    }
    else if (autoD54DD05B_val == "Light Purple") {
    }
    else if (autoD54DD05B_val == "Violet") {
    }
    else if (autoD54DD05B_val == "Tuscany") {
    }
    else if (autoD54DD05B_val == "Rose") {
    }
    else if (autoD54DD05B_val == "Blue Grey") {
    }
    else if (autoD54DD05B_val == "Dark Blue") {
    }
    else if (autoD54DD05B_val == "Dark Red") {
    }
    else if (autoD54DD05B_val == "Magenta") {
    }
    else if (autoD54DD05B_val == "Mengsk") {
    }
    else {
    }
    PlayerSetColorIndex(EventPlayer(), lv_color, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_Color_Init () {
    libCPGL_gt_Color = TriggerCreate("libCPGL_gt_Color_Func");
    libCPGL_gf_ChatCommand(libCPGL_gt_Color, libCPGL_ge_ChatCommandType_Normal, "color");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugAbathurBiomassLost
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CM_DebugAbathurBiomassLost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) != "Locust") && (libCPGL_gv_commander[UnitGetOwner(EventUnit())].lv_commander == "Abathur") && (UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitHasBehavior2(EventUnit(), "BiomassBuff1") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff10") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff100") == true))) {
        TextExpressionSetToken("Param/Expression/lib_CPGL_A631BB16", "A", UnitGetName(EventUnit()));
        TextExpressionSetToken("Param/Expression/lib_CPGL_A631BB16", "B", IntToText((UnitBehaviorCount(EventUnit(), "BiomassBuff100") * 100)));
        TextExpressionSetToken("Param/Expression/lib_CPGL_A631BB16", "C", IntToText((UnitBehaviorCount(EventUnit(), "BiomassBuff10") * 10)));
        TextExpressionSetToken("Param/Expression/lib_CPGL_A631BB16", "D", IntToText(UnitBehaviorCount(EventUnit(), "BiomassBuff1")));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPGL_A631BB16"), false);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_CPGL_0C77E139", "A", UnitGetName(EventUnit()));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPGL_0C77E139"), false);
        return true;
    }
    libCPGL_gv_cM_DebugAbathurBiomassLost += (UnitBehaviorCount(EventUnit(), "BiomassBuff100") * 100);
    libCPGL_gv_cM_DebugAbathurBiomassLost += (UnitBehaviorCount(EventUnit(), "BiomassBuff10") * 10);
    libCPGL_gv_cM_DebugAbathurBiomassLost += UnitBehaviorCount(EventUnit(), "BiomassBuff1");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CM_DebugAbathurBiomassLost_Init () {
    libCPGL_gt_CM_DebugAbathurBiomassLost = TriggerCreate("libCPGL_gt_CM_DebugAbathurBiomassLost_Func");
    TriggerEnable(libCPGL_gt_CM_DebugAbathurBiomassLost, false);
    TriggerAddEventUnitDied(libCPGL_gt_CM_DebugAbathurBiomassLost, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugAbathurBiomassReport
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CM_DebugAbathurBiomassReport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCPGL_gf_DebugModeEnabled() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_CPGL_B21A64F4", "A", IntToText(libCPGL_gv_cM_DebugAbathurBiomassCollected));
    TextExpressionSetToken("Param/Expression/lib_CPGL_B21A64F4", "B", IntToText(libCPGL_gv_cM_DebugAbathurBiomassDroppedNormal));
    TextExpressionSetToken("Param/Expression/lib_CPGL_B21A64F4", "C", IntToText(libCPGL_gv_cM_DebugAbathurBiomassLost));
    TextExpressionSetToken("Param/Expression/lib_CPGL_B21A64F4", "D", IntToText(libCPGL_gv_cM_DebugAbathurBiomassDroppedRefund));
    TriggerDebugOutput(13, TextExpressionAssemble("Param/Expression/lib_CPGL_B21A64F4"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CM_DebugAbathurBiomassReport_Init () {
    libCPGL_gt_CM_DebugAbathurBiomassReport = TriggerCreate("libCPGL_gt_CM_DebugAbathurBiomassReport_Func");
    TriggerAddEventChatMessage(libCPGL_gt_CM_DebugAbathurBiomassReport, c_playerAny, "-bioreport", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GlobalCasterEnergyLink
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_GlobalCasterEnergyLink_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto734BFF8A_g;
    int auto734BFF8A_u;
    unit auto734BFF8A_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(libCPGL_gf_DebugModeEnabled())) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto734BFF8A_g = UnitGroupSelected(EventPlayer());
    auto734BFF8A_u = UnitGroupCount(auto734BFF8A_g, c_unitCountAll);
    for (;; auto734BFF8A_u -= 1) {
        auto734BFF8A_var = UnitGroupUnitFromEnd(auto734BFF8A_g, auto734BFF8A_u);
        if (auto734BFF8A_var == null) { break; }
        libCPCD_gf_LinkUnitEnergyToGPCmdButton(auto734BFF8A_var, EventPlayer(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_GlobalCasterEnergyLink_Init () {
    libCPGL_gt_GlobalCasterEnergyLink = TriggerCreate("libCPGL_gt_GlobalCasterEnergyLink_Func");
    TriggerAddEventChatMessage(libCPGL_gt_GlobalCasterEnergyLink, c_playerAny, "!GP", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CommanderDebug
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CommanderDebug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_CPGL_ED81E1C1", "A", PlayerName(EventPlayer()));
    TextExpressionSetToken("Param/Expression/lib_CPGL_ED81E1C1", "B", StringToText((libCPGL_gv_commander[EventPlayer()].lv_commander)));
    libCPGL_gf_DebugMessagePlayer(libCPGL_ge_ChatCommandType_Normal, TextExpressionAssemble("Param/Expression/lib_CPGL_ED81E1C1"), EventPlayer(), c_messageAreaChat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CommanderDebug_Init () {
    libCPGL_gt_CommanderDebug = TriggerCreate("libCPGL_gt_CommanderDebug_Func");
    libCPGL_gf_ChatCommand(libCPGL_gt_CommanderDebug, libCPGL_ge_ChatCommandType_Debug, "Commander");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugHeroReviveInstant
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CM_DebugHeroReviveInstant_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = 1;

    // Conditions
    if (testConds) {
        if (!(libCPGL_gf_DebugModeEnabled())) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != "")) {
        lv_player = StringToInt(StringWord(EventChatMessage(false), 2));
    }

    libNtve_gf_PlayerRemoveCooldown(lv_player, libCOOC_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(lv_player)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CM_DebugHeroReviveInstant_Init () {
    libCPGL_gt_CM_DebugHeroReviveInstant = TriggerCreate("libCPGL_gt_CM_DebugHeroReviveInstant_Func");
    TriggerAddEventChatMessage(libCPGL_gt_CM_DebugHeroReviveInstant, c_playerAny, "revivenow", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugCommanderCooldowns
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CM_DebugCommanderCooldowns_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoEEA0A50D_val;

    // Conditions
    if (testConds) {
        if (!(libCPGL_gf_DebugModeEnabled())) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoEEA0A50D_val = PlayerCommander(EventPlayer());
    if (autoEEA0A50D_val == "Fenix") {
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "SOASummonFenix");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "SOASummonFenixDragoon");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "SOASummonFenixArbiter");
    }
    else if (autoEEA0A50D_val == "Alarak") {
        libNtve_gf_UnitAbilityRemoveChargeUsed(libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit, "AlarakStructureOvercharge", "Abil/AlarakStructureOvercharge");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/AlarakACSummonDeathfleetTarget");
    }
    else if (autoEEA0A50D_val == "Artanis") {
        libNtve_gf_UnitRemoveCooldown(libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit, "SOACaster");
        libNtve_gf_UnitAbilityRemoveCooldown(libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit, "SoASuperShield", "Abil/SoASuperShield");
        libNtve_gf_UnitAbilityRemoveCooldown(libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit, "SOAOrbitalStrikeActivate", "Abil/SOAOrbitalStrikeActivate");
        libNtve_gf_UnitAbilityRemoveCooldown(libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit, "SOAStrafeAttack", "Abil/SOAStrafeAttack");
    }
    else if (autoEEA0A50D_val == "Vorazun") {
        libNtve_gf_UnitAbilityRemoveCooldown(libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit, "SOADarkPylon", "Abil/SOADarkPylon");
        libNtve_gf_UnitAbilityRemoveCooldown(libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit, "SOAShadowGuardCalldown", "Abil/SOAShadowGuardCalldown");
        libNtve_gf_UnitAbilityRemoveCooldown(libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit, "SOATimeFreeze", "Abil/SOATimeFreeze");
    }
    else if (autoEEA0A50D_val == "Karax") {
        libNtve_gf_UnitAbilityRemoveCooldown(libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit, "SOAThermalLanceActivate", "Abil/SOAThermalLanceActivate");
        libNtve_gf_UnitAbilityRemoveCooldown(libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit, "SOAMapWideChrono", "Abil/SOAMapWideChrono");
        libNtve_gf_UnitAbilityRemoveCooldown(libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit, "SOAPurifierBeam", "Abil/SOAPurifierBeam");
    }
    else if (autoEEA0A50D_val == "Raynor") {
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/VoidCoopSummonHyperion");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/BansheeAirstrike");
    }
    else if (autoEEA0A50D_val == "Swann") {
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/DrakkenLaserDrillBFG");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/DrakkenLaserDrillNuke");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/SpecialDelivery");
    }
    else if (autoEEA0A50D_val == "Nova") {
        libNtve_gf_PlayerRemoveChargeUsed(EventPlayer(), "Abil/NovaDefensiveMatrixDrone");
        libNtve_gf_UnitAbilityRemoveCooldown(libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit, "NovaGriffinBombingRunActivate", "Abil/NovaGriffinBombingRunActivate");
        libNtve_gf_UnitAbilityRemoveCooldown(libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit, "NovaGriffinTransportLoadUnits", "Abil/NovaGriffinTransportLoadUnits");
    }
    else if (autoEEA0A50D_val == "Abathur") {
        libNtve_gf_PlayerRemoveChargeUsed(EventPlayer(), "Abil/ToxicNestBuild");
        libNtve_gf_UnitAbilityRemoveCooldown(libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit, "AbathurMend", "Abil/AbathurMend");
        libNtve_gf_UnitAbilityRemoveChargeUsed(libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit, "AbathurMend", "Abil/AbathurMend");
    }
    else if (autoEEA0A50D_val == "Stukov") {
        libNtve_gf_UnitAbilityRemoveCooldown(libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit, "SIStukovInfestStructure", "Abil/SIStukovInfestStructure");
        libNtve_gf_UnitAbilityRemoveChargeUsed(libCPGL_gv_commander[EventPlayer()].lv_globalCasterUnit, "SIStukovInfestStructureUpgraded", "Abil/SIStukovInfestStructureUpgraded");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/StukovSummonApocalisk");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/StukovSummonAleksander");
    }
    else if (autoEEA0A50D_val == "Dehaka") {
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/DehakaGlevigTopBar");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/DehakaMurvarTopBar");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/DehakaDakrunTopBar");
    }
    else {
    }
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_CPGL_FB768008") + IntToText(EventPlayer())), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CM_DebugCommanderCooldowns_Init () {
    libCPGL_gt_CM_DebugCommanderCooldowns = TriggerCreate("libCPGL_gt_CM_DebugCommanderCooldowns_Func");
    TriggerAddEventChatMessage(libCPGL_gt_CM_DebugCommanderCooldowns, c_playerAny, "-coopcd", false);
    TriggerAddEventChatMessage(libCPGL_gt_CM_DebugCommanderCooldowns, c_playerAny, "cdr", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugApplySkin
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CM_DebugApplySkin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCPGL_gf_DebugModeEnabled())) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringLength(StringWord(EventChatMessage(false), 3)) >= 1)) {
        PlayerApplySkin(StringToInt(StringWord(EventChatMessage(false), 3)), (StringWord(EventChatMessage(false), 2)), true);
    }
    else {
        PlayerApplySkin(EventPlayer(), (StringWord(EventChatMessage(false), 2)), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CM_DebugApplySkin_Init () {
    libCPGL_gt_CM_DebugApplySkin = TriggerCreate("libCPGL_gt_CM_DebugApplySkin_Func");
    TriggerAddEventChatMessage(libCPGL_gt_CM_DebugApplySkin, c_playerAny, "-skin", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugTargetSpawnersSet
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CM_DebugTargetSpawnersSet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_parameter;

    // Automatic Variable Declarations
    string auto246A30AD_val;
    playergroup autoDD32EC32_g;
    int autoDD32EC32_var;

    // Variable Initialization
    lv_parameter = "";

    // Conditions
    if (testConds) {
        if (!(libCPGL_gf_DebugModeEnabled())) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_parameter = StringWord(EventChatMessage(false), 2);
    lv_parameter = StringCase(lv_parameter, false);
    auto246A30AD_val = lv_parameter;
    if (auto246A30AD_val == "on") {
        libCPGL_gv_cM_DebugAITargetSpawners = true;
        libCPCD_gf_DisplayCampaignMessage(PlayerGroupAll(), libCPCD_ge_CampaignMessageType_Hint, StringExternal("Param/Value/lib_CPGL_E0328EC1"), libCPCD_ge_CampaignMessageFormatNotFormat_FormatMessage);
    }
    else if (auto246A30AD_val == "off") {
        libCPGL_gv_cM_DebugAITargetSpawners = false;
        libCPCD_gf_DisplayCampaignMessage(PlayerGroupAll(), libCPCD_ge_CampaignMessageType_Hint, StringExternal("Param/Value/lib_CPGL_05606E36"), libCPCD_ge_CampaignMessageFormatNotFormat_FormatMessage);
    }
    else if (auto246A30AD_val == "random") {
        if ((RandomInt(0, 1) == 1)) {
            libCPGL_gv_cM_DebugAITargetSpawners = true;
        }
        else {
            libCPGL_gv_cM_DebugAITargetSpawners = false;
        }
        libCPCD_gf_DisplayCampaignMessage(PlayerGroupAll(), libCPCD_ge_CampaignMessageType_Hint, StringExternal("Param/Value/lib_CPGL_7BDD0041"), libCPCD_ge_CampaignMessageFormatNotFormat_FormatMessage);
    }
    else {
        libCPCD_gf_DisplayCampaignMessage(PlayerGroupAll(), libCPCD_ge_CampaignMessageType_Hint, StringExternal("Param/Value/lib_CPGL_752A8F3B"), libCPCD_ge_CampaignMessageFormatNotFormat_FormatMessage);
        return true;
    }
    autoDD32EC32_g = PlayerGroupAll();
    autoDD32EC32_var = -1;
    while (true) {
        autoDD32EC32_var = PlayerGroupNextPlayer(autoDD32EC32_g, autoDD32EC32_var);
        if (autoDD32EC32_var < 0) { break; }
        AISetDifficulty(autoDD32EC32_var, c_diffTargetSpawners, libCPGL_gv_cM_DebugAITargetSpawners);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CM_DebugTargetSpawnersSet_Init () {
    libCPGL_gt_CM_DebugTargetSpawnersSet = TriggerCreate("libCPGL_gt_CM_DebugTargetSpawnersSet_Func");
    TriggerAddEventChatMessage(libCPGL_gt_CM_DebugTargetSpawnersSet, c_playerAny, "-TargetSpawners", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_DebugDefeatMultiplier
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_DebugDefeatMultiplier_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCPGL_gf_DebugModeEnabled())) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_DebugDefeatMultiplierOverride = StringToFixed(StringWord(EventChatMessage(false), 2));
    if ((libCPGL_gv_cC_DebugDefeatMultiplierOverride < 0.0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_CPGL_4E928DFF"), true);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_CPGL_7708C7E3", "A", FixedToText(libCPGL_gv_cC_DebugDefeatMultiplierOverride, c_fixedPrecisionAny));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPGL_7708C7E3"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_DebugDefeatMultiplier_Init () {
    libCPGL_gt_CC_DebugDefeatMultiplier = TriggerCreate("libCPGL_gt_CC_DebugDefeatMultiplier_Func");
    TriggerAddEventChatMessage(libCPGL_gt_CC_DebugDefeatMultiplier, c_playerAny, "-xpmult", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_DebugToggleTechSpam
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_DebugToggleTechSpam_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCPGL_gf_DebugModeEnabled())) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_DebugTechSpam = !(libCPGL_gv_cC_DebugTechSpam);
    TextExpressionSetToken("Param/Expression/lib_CPGL_047537B3", "A", libNtve_gf_ConvertBooleanToText(libCPGL_gv_cC_DebugTechSpam));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPGL_047537B3"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_DebugToggleTechSpam_Init () {
    libCPGL_gt_CC_DebugToggleTechSpam = TriggerCreate("libCPGL_gt_CC_DebugToggleTechSpam_Func");
    TriggerAddEventChatMessage(libCPGL_gt_CC_DebugToggleTechSpam, c_playerAny, "techspam", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_DebugToggleTechSuperSpam
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_DebugToggleTechSuperSpam_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCPGL_gf_DebugModeEnabled())) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_DebugTechSuperSpam = !(libCPGL_gv_cC_DebugTechSuperSpam);
    TextExpressionSetToken("Param/Expression/lib_CPGL_6D9F133F", "A", libNtve_gf_ConvertBooleanToText(libCPGL_gv_cC_DebugTechSuperSpam));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPGL_6D9F133F"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_DebugToggleTechSuperSpam_Init () {
    libCPGL_gt_CC_DebugToggleTechSuperSpam = TriggerCreate("libCPGL_gt_CC_DebugToggleTechSuperSpam_Func");
    TriggerAddEventChatMessage(libCPGL_gt_CC_DebugToggleTechSuperSpam, c_playerAny, "techsuperspam", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_DebugUpdateTech
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_DebugUpdateTech_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCPGL_gf_DebugModeEnabled())) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gf_CC_UpdateTechStates(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_DebugUpdateTech_Init () {
    libCPGL_gt_CC_DebugUpdateTech = TriggerCreate("libCPGL_gt_CC_DebugUpdateTech_Func");
    TriggerAddEventChatMessage(libCPGL_gt_CC_DebugUpdateTech, c_playerAny, "techupdate", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugGiveOfflineControl (Redundant)
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CM_DebugGiveOfflineControlRedundant_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayerOuter;
    int lv_indexPlayerInner;

    // Automatic Variable Declarations
    playergroup autoC25B9877_g;
    playergroup auto45AAF9DB_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(libCPGL_gf_DebugModeEnabled())) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC25B9877_g = PlayerGroupAll();
    lv_indexPlayerOuter = -1;
    while (true) {
        lv_indexPlayerOuter = PlayerGroupNextPlayer(autoC25B9877_g, lv_indexPlayerOuter);
        if (lv_indexPlayerOuter < 0) { break; }
        if ((PlayerType(lv_indexPlayerOuter) == c_playerTypeUser)) {
            auto45AAF9DB_g = PlayerGroupAll();
            lv_indexPlayerInner = -1;
            while (true) {
                lv_indexPlayerInner = PlayerGroupNextPlayer(auto45AAF9DB_g, lv_indexPlayerInner);
                if (lv_indexPlayerInner < 0) { break; }
                if ((PlayerType(lv_indexPlayerInner) == c_playerTypeNone) && (libNtve_gf_PlayerIsEnemy(lv_indexPlayerInner, lv_indexPlayerOuter, libNtve_ge_PlayerRelation_Ally) == true)) {
                    libNtve_gf_SetAlliance(lv_indexPlayerOuter, lv_indexPlayerInner, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CM_DebugGiveOfflineControlRedundant_Init () {
    libCPGL_gt_CM_DebugGiveOfflineControlRedundant = TriggerCreate("libCPGL_gt_CM_DebugGiveOfflineControlRedundant_Func");
    TriggerEnable(libCPGL_gt_CM_DebugGiveOfflineControlRedundant, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugVictoryS (Redundant)
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CM_DebugVictorySRedundant_Func (bool testConds, bool runActions) {
    // Variable Declarations
    trigger lv_cineTrigger;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(libCPGL_gf_DebugModeEnabled())) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueClear(c_triggerQueueKill);
    TransmissionClearAll();
    libCPCD_gf_HideCampaignTransmissionPortrait();
    libCPGL_gv_cM_MissionVictoryActionQueyeEmpty = false;
    TriggerExecute(libCPGL_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute, true, false);
    while (!((libCPGL_gv_cM_MissionVictoryActionQueyeEmpty == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueClear(c_triggerQueueKill);
    lv_cineTrigger = TriggerCreate("gt_VictorySequence_Func");
    TriggerExecute(lv_cineTrigger, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CM_DebugVictorySRedundant_Init () {
    libCPGL_gt_CM_DebugVictorySRedundant = TriggerCreate("libCPGL_gt_CM_DebugVictorySRedundant_Func");
    TriggerEnable(libCPGL_gt_CM_DebugVictorySRedundant, false);
    TriggerAddEventChatMessage(libCPGL_gt_CM_DebugVictorySRedundant, c_playerAny, "VICTORYS", true);
    TriggerAddEventChatMessage(libCPGL_gt_CM_DebugVictorySRedundant, c_playerAny, "VICTORYSEQUENCE", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DebugMode
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_DebugMode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCPGL_gf_DebugModeEnabled() == true)) {
        libCPGL_gv_debugModeEnabled = false;
        libCPGL_gf_DebugMessagePlayerGroup(libCPGL_ge_ChatCommandType_Debug, StringExternal("Param/Value/lib_CPGL_CE5DCD58"), PlayerGroupAll(), c_messageAreaChat);
    }
    else {
        libCPGL_gv_debugModeEnabled = true;
        libCPGL_gf_DebugMessagePlayerGroup(libCPGL_ge_ChatCommandType_Debug, StringExternal("Param/Value/lib_CPGL_5A5B8C83"), PlayerGroupAll(), c_messageAreaChat);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_DebugMode_Init () {
    libCPGL_gt_DebugMode = TriggerCreate("libCPGL_gt_DebugMode_Func");
    libCPGL_gf_ChatCommand(libCPGL_gt_DebugMode, libCPGL_ge_ChatCommandType_Normal, "Debug");
    libCPGL_gf_ChatCommand(libCPGL_gt_DebugMode, libCPGL_ge_ChatCommandType_Debug, "Debug");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chat Command (Normal)
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_ChatCommandNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSendEvent((StringWord(EventChatMessage(false), 1)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_ChatCommandNormal_Init () {
    libCPGL_gt_ChatCommandNormal = TriggerCreate("libCPGL_gt_ChatCommandNormal_Func");
    TriggerAddEventChatMessage(libCPGL_gt_ChatCommandNormal, c_playerAny, "!", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chat Command (Debug)
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_ChatCommandDebug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSendEvent(("!Debug" + StringWord(EventChatMessage(false), 2)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_ChatCommandDebug_Init () {
    libCPGL_gt_ChatCommandDebug = TriggerCreate("libCPGL_gt_ChatCommandDebug_Func");
    TriggerAddEventChatMessage(libCPGL_gt_ChatCommandDebug, c_playerAny, "!debug", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chat Command (Cheat)
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_ChatCommandCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSendEvent(("!Cheat" + StringWord(EventChatMessage(false), 2)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_ChatCommandCheat_Init () {
    libCPGL_gt_ChatCommandCheat = TriggerCreate("libCPGL_gt_ChatCommandCheat_Func");
    TriggerAddEventChatMessage(libCPGL_gt_ChatCommandCheat, c_playerAny, "!cheat", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_ScoreClosed
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CU_ScoreClosed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCPGL_gv_cU_ScoreContinueButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DataTableSetInt(false, TriggerEventParamName(libCPGL_gv_cUC_ScoreEventClosed, libCPGL_gv_cUC_ScoreParameterPlayer), EventPlayer());
    TriggerSendEvent(libCPGL_gv_cUC_ScoreEventClosed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CU_ScoreClosed_Init () {
    libCPGL_gt_CU_ScoreClosed = TriggerCreate("libCPGL_gt_CU_ScoreClosed_Func");
    TriggerEnable(libCPGL_gt_CU_ScoreClosed, false);
    TriggerAddEventDialogControl(libCPGL_gt_CU_ScoreClosed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_FanfareDismissed
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CU_FanfareDismissed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libCPGL_gv_cU_FanfareCloseButton) || (EventDialogControl() == libCPGL_gv_cU_FanfareConvertToReplayButton)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameIsOnline() == true)) {
        DataTableSetInt(false, TriggerEventParamName(libCPGL_gv_cUC_ScoreEventClosed, libCPGL_gv_cUC_ScoreParameterPlayer), EventPlayer());
        TriggerSendEvent(libCPGL_gv_cUC_ScoreEventClosed);
    }
    else {
        DialogSetVisible(libCPGL_gv_cU_FanfareDialog, PlayerGroupSingle(EventPlayer()), false);
        libCPGL_gf_CU_ScoreDisplay(EventPlayer(), libCPGL_gv_cU_FanfareResult[EventPlayer()]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CU_FanfareDismissed_Init () {
    libCPGL_gt_CU_FanfareDismissed = TriggerCreate("libCPGL_gt_CU_FanfareDismissed_Func");
    TriggerEnable(libCPGL_gt_CU_FanfareDismissed, false);
    TriggerAddEventDialogControl(libCPGL_gt_CU_FanfareDismissed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreArtanisAbsorb
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreArtanisAbsorb_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreArtanisAbsorb[UnitGetOwner(EventUnit())] += EventUnitDamageAbsorbed();
    PlayerScoreValueSetFromInt(UnitGetOwner(EventUnit()), "ArtanisShieldAbsorb", FixedToInt(libCPGL_gv_cC_ScoreArtanisAbsorb[UnitGetOwner(EventUnit())]));
    if ((libCPGL_gf_ActiveCommanderForPlayer(UnitGetOwner(EventUnit())) != "ProtossArtanis")) {
        if ((libCPCM_gv_cC_InContestMap == false) && ((FixedToInt(libCPGL_gv_cC_ScoreArtanisAbsorb[UnitGetOwner(EventUnit())]) - FixedToInt(libCPGL_gv_cC_ScoreArtanisAbsorbLast[UnitGetOwner(EventUnit())])) > 5)) {
            AchievementTermQuantityAdd(libCPGL_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), "CommanderArtanisSolalright", (FixedToInt(libCPGL_gv_cC_ScoreArtanisAbsorb[UnitGetOwner(EventUnit())]) - FixedToInt(libCPGL_gv_cC_ScoreArtanisAbsorbLast[UnitGetOwner(EventUnit())])));
            libCPGL_gv_cC_ScoreArtanisAbsorbLast[UnitGetOwner(EventUnit())] = libCPGL_gv_cC_ScoreArtanisAbsorb[UnitGetOwner(EventUnit())];
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreArtanisAbsorb_Init () {
    libCPGL_gt_CC_ScoreArtanisAbsorb = TriggerCreate("libCPGL_gt_CC_ScoreArtanisAbsorb_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreArtanisAbsorb, false);
    TriggerAddEventUnitDamageAbsorbed(libCPGL_gt_CC_ScoreArtanisAbsorb, null, "SOASuperShield");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreArtanisKaraxOrbitalStrike
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreArtanisKaraxOrbitalStrike_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreArtanisKaraxSoADmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "ArtanisSoADamage", FixedToInt(libCPGL_gv_cC_ScoreArtanisKaraxSoADmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreArtanisKaraxOrbitalStrike_Init () {
    libCPGL_gt_CC_ScoreArtanisKaraxOrbitalStrike = TriggerCreate("libCPGL_gt_CC_ScoreArtanisKaraxOrbitalStrike_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreArtanisKaraxOrbitalStrike, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreArtanisKaraxOrbitalStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "SOAOrbitalStrikeDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreArtanisBombardment
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreArtanisBombardment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreArtanisKaraxSoADmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "ArtanisSoADamage", FixedToInt(libCPGL_gv_cC_ScoreArtanisKaraxSoADmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreArtanisBombardment_Init () {
    libCPGL_gt_CC_ScoreArtanisBombardment = TriggerCreate("libCPGL_gt_CC_ScoreArtanisBombardment_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreArtanisBombardment, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreArtanisBombardment, null, c_unitDamageTypeAny, c_unitDamageEither, "SOAStrafeAttackDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreVorazunBHManageGroup
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreVorazunBHManageGroup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
        UnitGroupAdd(libCPGL_gv_cC_ScoreVorazunBHGroup, EventUnit());
    }
    else if ((EventUnitBehaviorChange() == c_unitBehaviorChangeDestroy)) {
        UnitGroupRemove(libCPGL_gv_cC_ScoreVorazunBHGroup, EventUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreVorazunBHManageGroup_Init () {
    libCPGL_gt_CC_ScoreVorazunBHManageGroup = TriggerCreate("libCPGL_gt_CC_ScoreVorazunBHManageGroup_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreVorazunBHManageGroup, false);
    TriggerAddEventUnitBehaviorChange(libCPGL_gt_CC_ScoreVorazunBHManageGroup, null, "VoidSentryBlackHole", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreVorazunBHDmg
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreVorazunBHDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(libCPGL_gv_cC_ScoreVorazunBHGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreVorazunBHDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "VorazunBlackHoleDamage", FixedToInt(libCPGL_gv_cC_ScoreVorazunBHDmg[EventUnitDamageSourcePlayer()]));
    if ((libCPCM_gv_cC_InContestMap == false) && ((libCOMI_gf_DifficultyLevelForPlayerCoop(EventUnitDamageSourcePlayer()) == 3) || (libCOMI_gf_DifficultyLevelForPlayerCoop(EventUnitDamageSourcePlayer()) == 4)) && (UnitIsAlive(EventUnit()) == false) && (libCPGL_gf_ActiveCommanderForPlayer(EventUnitDamageSourcePlayer()) == "ProtossVorazun")) {
        AchievementTermQuantityAdd(EventUnitDamageSourcePlayer(), "CommanderVorazun1Shot15Kills", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreVorazunBHDmg_Init () {
    libCPGL_gt_CC_ScoreVorazunBHDmg = TriggerCreate("libCPGL_gt_CC_ScoreVorazunBHDmg_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreVorazunBHDmg, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreVorazunBHDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreVorazunCloakDmg
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreVorazunCloakDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnitDamageSourceUnit()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitDamageSourceUnit(), 1, UnitFilter((1 << c_targetFilterCloaked), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreVorazunCloakDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "VorazunCloakedDamage", FixedToInt(libCPGL_gv_cC_ScoreVorazunCloakDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreVorazunCloakDmg_Init () {
    libCPGL_gt_CC_ScoreVorazunCloakDmg = TriggerCreate("libCPGL_gt_CC_ScoreVorazunCloakDmg_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreVorazunCloakDmg, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreVorazunCloakDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreKaraxSolarLance
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreKaraxSolarLance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreArtanisKaraxSoADmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "ArtanisSoADamage", FixedToInt(libCPGL_gv_cC_ScoreArtanisKaraxSoADmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreKaraxSolarLance_Init () {
    libCPGL_gt_CC_ScoreKaraxSolarLance = TriggerCreate("libCPGL_gt_CC_ScoreKaraxSolarLance_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreKaraxSolarLance, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreKaraxSolarLance, null, c_unitDamageTypeAny, c_unitDamageEither, "SOAThermalLanceDamage");
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreKaraxSolarLance, null, c_unitDamageTypeAny, c_unitDamageEither, "ThermalLancesFireBeamDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreKaraxPurifierBeam
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreKaraxPurifierBeam_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreArtanisKaraxSoADmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "ArtanisSoADamage", FixedToInt(libCPGL_gv_cC_ScoreArtanisKaraxSoADmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreKaraxPurifierBeam_Init () {
    libCPGL_gt_CC_ScoreKaraxPurifierBeam = TriggerCreate("libCPGL_gt_CC_ScoreKaraxPurifierBeam_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreKaraxPurifierBeam, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreKaraxPurifierBeam, null, c_unitDamageTypeAny, c_unitDamageEither, "SOAPurifierBeamDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreKaraxChronoProduction
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreKaraxChronoProduction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() != c_playerAny))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!(((UnitHasBehavior2(EventUnit(), "SOAMapWideChrono") == true) || (UnitGetType(EventUnit()) == "Larva")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCPGL_gf_ActiveCommanderForPlayer(EventPlayer()) != "ProtossKarax")) {
        AchievementTermQuantityAdd(libCPGL_gf_CC_PlayerAlly(EventPlayer()), "CommanderKaraxSuperChrono", 1);
    }

    PlayerScoreValueSetFromInt(EventPlayer(), "KaraxChronoCoop", (PlayerScoreValueGetAsInt(EventPlayer(), "KaraxChronoCoop") + 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreKaraxChronoProduction_Init () {
    libCPGL_gt_CC_ScoreKaraxChronoProduction = TriggerCreate("libCPGL_gt_CC_ScoreKaraxChronoProduction_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreKaraxChronoProduction, false);
    TriggerAddEventUnitTrainProgress(libCPGL_gt_CC_ScoreKaraxChronoProduction, null, c_unitProgressStageComplete);
    TriggerAddEventUnitConstructProgress(libCPGL_gt_CC_ScoreKaraxChronoProduction, null, c_unitProgressStageComplete);
    TriggerAddEventUnitAbility(libCPGL_gt_CC_ScoreKaraxChronoProduction, null, null, c_abilMorphStageUnitStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreRaynorMedicHeal
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreRaynorMedicHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCPGL_gf_ActiveCommanderForPlayer(EventUnitHealLaunchPlayer()) == "TerranRaynor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreRaynorHeal[EventPlayer()] += EventUnitHealAmount();
    PlayerScoreValueSetFromInt(EventPlayer(), "RaynorMedicHealing", FixedToInt(libCPGL_gv_cC_ScoreRaynorHeal[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreRaynorMedicHeal_Init () {
    libCPGL_gt_CC_ScoreRaynorMedicHeal = TriggerCreate("libCPGL_gt_CC_ScoreRaynorMedicHeal_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreRaynorMedicHeal, false);
    TriggerAddEventUnitHealed(libCPGL_gt_CC_ScoreRaynorMedicHeal, null, c_unitVitalLife, "heal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreRaynorHyperionDmg
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreRaynorHyperionDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "HyperionVoidCoop"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreRaynorHyperionDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "RaynorHyperionDamage", FixedToInt(libCPGL_gv_cC_ScoreRaynorHyperionDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreRaynorHyperionDmg_Init () {
    libCPGL_gt_CC_ScoreRaynorHyperionDmg = TriggerCreate("libCPGL_gt_CC_ScoreRaynorHyperionDmg_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreRaynorHyperionDmg, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreRaynorHyperionDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreSwannSVHeal
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreSwannSVHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCPGL_gf_ActiveCommanderForPlayer(EventUnitHealLaunchPlayer()) == "TerranSwann"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitHealLaunchUnit()) == "ScienceVessel"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreSwannHeal[EventPlayer()] += EventUnitHealAmount();
    PlayerScoreValueSetFromInt(EventPlayer(), "SwannMechHealing", FixedToInt(libCPGL_gv_cC_ScoreSwannHeal[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreSwannSVHeal_Init () {
    libCPGL_gt_CC_ScoreSwannSVHeal = TriggerCreate("libCPGL_gt_CC_ScoreSwannSVHeal_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreSwannSVHeal, false);
    TriggerAddEventUnitHealed(libCPGL_gt_CC_ScoreSwannSVHeal, null, c_unitVitalLife, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreSwannDrillDmg
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreSwannDrillDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "DrakkenLaserDrillCoop"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreSwannDrillDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "SwannDrillDamage", FixedToInt(libCPGL_gv_cC_ScoreSwannDrillDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreSwannDrillDmg_Init () {
    libCPGL_gt_CC_ScoreSwannDrillDmg = TriggerCreate("libCPGL_gt_CC_ScoreSwannDrillDmg_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreSwannDrillDmg, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreSwannDrillDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreKerriganResources
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreKerriganResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto5DC0D28F_val;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto5DC0D28F_val = EventPlayerEffectUsedUnitType(c_effectUnitCaster);
    if (auto5DC0D28F_val == "KerriganVoidCoopEconDropLT1") {
        PlayerScoreValueSetFromInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources", (PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources")+5));
    }
    else if (auto5DC0D28F_val == "KerriganVoidCoopEconDrop1") {
        PlayerScoreValueSetFromInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources", (PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources")+10));
    }
    else if (auto5DC0D28F_val == "KerriganVoidCoopEconDrop2") {
        PlayerScoreValueSetFromInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources", (PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources")+15));
    }
    else if (auto5DC0D28F_val == "KerriganVoidCoopEconDrop3") {
        PlayerScoreValueSetFromInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources", (PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources")+30));
    }
    else if (auto5DC0D28F_val == "KerriganVoidCoopEconDrop4") {
        PlayerScoreValueSetFromInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources", (PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources")+60));
    }
    else if (auto5DC0D28F_val == "KerriganVoidCoopEconDrop5") {
        PlayerScoreValueSetFromInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources", (PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "KerriganAssimilationResources")+75));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreKerriganResources_Init () {
    libCPGL_gt_CC_ScoreKerriganResources = TriggerCreate("libCPGL_gt_CC_ScoreKerriganResources_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreKerriganResources, false);
    TriggerAddEventPlayerEffectUsed(libCPGL_gt_CC_ScoreKerriganResources, 1, "VoidPickupRemoveDelay");
    TriggerAddEventPlayerEffectUsed(libCPGL_gt_CC_ScoreKerriganResources, 2, "VoidPickupRemoveDelay");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreKerriganDmg
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreKerriganDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "K5Kerrigan"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreKerriganDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "KerriganDamage", FixedToInt(libCPGL_gv_cC_ScoreKerriganDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreKerriganDmg_Init () {
    libCPGL_gt_CC_ScoreKerriganDmg = TriggerCreate("libCPGL_gt_CC_ScoreKerriganDmg_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreKerriganDmg, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreKerriganDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreZagaraFrenzyDmg
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreZagaraFrenzyDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnitDamageSourceUnit(), "ZagaraVoidCoopMassFrenzyTarget") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreZagaraFrenzyDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "ZagaraFrenzyDamage", FixedToInt(libCPGL_gv_cC_ScoreZagaraFrenzyDmg[EventUnitDamageSourcePlayer()]));
    if ((libCPGL_gf_ActiveCommanderForPlayer(EventUnitDamageSourcePlayer()) != "ZergZagara")) {
        if (((FixedToInt(libCPGL_gv_cC_ScoreZagaraFrenzyDmg[EventUnitDamageSourcePlayer()]) - FixedToInt(libCPGL_gv_cC_ScoreZagaraFrenzyDmgLast[EventUnitDamageSourcePlayer()])) > 5)) {
            if ((libCPCM_gv_cC_InContestMap == false)) {
                AchievementTermQuantityAdd(libCPGL_gf_CC_PlayerAlly(EventUnitDamageSourcePlayer()), "CommanderZagaraFrenzy4Everyone", (FixedToInt(libCPGL_gv_cC_ScoreZagaraFrenzyDmg[EventUnitDamageSourcePlayer()]) - FixedToInt(libCPGL_gv_cC_ScoreZagaraFrenzyDmgLast[EventUnitDamageSourcePlayer()])));
            }

            libCPGL_gv_cC_ScoreZagaraFrenzyDmgLast[EventUnitDamageSourcePlayer()] = libCPGL_gv_cC_ScoreZagaraFrenzyDmg[EventUnitDamageSourcePlayer()];
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreZagaraFrenzyDmg_Init () {
    libCPGL_gt_CC_ScoreZagaraFrenzyDmg = TriggerCreate("libCPGL_gt_CC_ScoreZagaraFrenzyDmg_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreZagaraFrenzyDmg, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreZagaraFrenzyDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreZagaraSuicideDmg
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreZagaraSuicideDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "Baneling") || (UnitGetType(EventUnitDamageSourceUnit()) == "BanelingBurrowed") || (UnitGetType(EventUnitDamageSourceUnit()) == "HotSHunterBurrowed") || (UnitGetType(EventUnitDamageSourceUnit()) == "HotSHunter") || (UnitGetType(EventUnitDamageSourceUnit()) == "HotSSplitterlingBigBurrowed") || (UnitGetType(EventUnitDamageSourceUnit()) == "HotSSplitterlingBig") || (UnitGetType(EventUnitDamageSourceUnit()) == "HotSSplitterlingMediumBurrowed") || (UnitGetType(EventUnitDamageSourceUnit()) == "HotSSplitterlingMedium") || (UnitGetType(EventUnitDamageSourceUnit()) == "Scourge") || (UnitGetType(EventUnitDamageSourceUnit()) == "BanelingStetmann") || (UnitGetType(EventUnitDamageSourceUnit()) == "BanelingStetmannBurrowed")))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreZagaraSuicideDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "ZagaraSuicideDamage", FixedToInt(libCPGL_gv_cC_ScoreZagaraSuicideDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreZagaraSuicideDmg_Init () {
    libCPGL_gt_CC_ScoreZagaraSuicideDmg = TriggerCreate("libCPGL_gt_CC_ScoreZagaraSuicideDmg_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreZagaraSuicideDmg, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreZagaraSuicideDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreZagaraBanelingBarrage
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreZagaraBanelingBarrage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreZagaraSuicideDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "ZagaraSuicideDamage", FixedToInt(libCPGL_gv_cC_ScoreZagaraSuicideDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreZagaraBanelingBarrage_Init () {
    libCPGL_gt_CC_ScoreZagaraBanelingBarrage = TriggerCreate("libCPGL_gt_CC_ScoreZagaraBanelingBarrage_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreZagaraBanelingBarrage, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreZagaraBanelingBarrage, null, c_unitDamageTypeAny, c_unitDamageEither, "ZagaraVoidCoopBanelingBarrageExplodeSearchUnit");
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreZagaraBanelingBarrage, null, c_unitDamageTypeAny, c_unitDamageEither, "ZagaraVoidCoopBanelingBarrageExplodeSearchStructure");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreAbathurHealing
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreAbathurHealing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCPGL_gf_ActiveCommanderForPlayer(EventUnitHealLaunchPlayer()) == "ZergAbathur"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreAbathurHeal[EventPlayer()] += EventUnitHealAmount();
    PlayerScoreValueSetFromInt(EventPlayer(), "AbathurHealingReceived", FixedToInt(libCPGL_gv_cC_ScoreAbathurHeal[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreAbathurHealing_Init () {
    libCPGL_gt_CC_ScoreAbathurHealing = TriggerCreate("libCPGL_gt_CC_ScoreAbathurHealing_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreAbathurHealing, false);
    TriggerAddEventUnitHealed(libCPGL_gt_CC_ScoreAbathurHealing, null, c_unitVitalAny, "AbathurMendInitialHealer");
    TriggerAddEventUnitHealed(libCPGL_gt_CC_ScoreAbathurHealing, null, c_unitVitalAny, "AbathurMendSecondaryHealer");
    TriggerAddEventUnitHealed(libCPGL_gt_CC_ScoreAbathurHealing, null, c_unitVitalAny, "QueenBurstHeal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreAbathurMonsterDmg
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreAbathurMonsterDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "Brutalisk") || (UnitGetType(EventUnitDamageSourceUnit()) == "AbathurSymbioteBrutalisk") || (UnitGetType(EventUnitDamageSourceUnit()) == "HotSLeviathan") || (UnitGetType(EventUnitDamageSourceUnit()) == "AbathurSymbioteLeviathan")))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreAbathurMonsterDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "AbathurMonsterDamage", FixedToInt(libCPGL_gv_cC_ScoreAbathurMonsterDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreAbathurMonsterDmg_Init () {
    libCPGL_gt_CC_ScoreAbathurMonsterDmg = TriggerCreate("libCPGL_gt_CC_ScoreAbathurMonsterDmg_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreAbathurMonsterDmg, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreAbathurMonsterDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreAlarakDmg
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreAlarakDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "AlarakCoop"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreAlarakDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "AlarakDamage", FixedToInt(libCPGL_gv_cC_ScoreAlarakDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreAlarakDmg_Init () {
    libCPGL_gt_CC_ScoreAlarakDmg = TriggerCreate("libCPGL_gt_CC_ScoreAlarakDmg_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreAlarakDmg, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreAlarakDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreAlarakHeal
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreAlarakHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCPGL_gf_ActiveCommanderForPlayer(EventUnitHealLaunchPlayer()) == "ProtossAlarak"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "AlarakCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreAlarakHeal[EventPlayer()] += EventUnitHealAmount();
    PlayerScoreValueSetFromInt(EventPlayer(), "AlarakSelfHeals", FixedToInt(libCPGL_gv_cC_ScoreAlarakHeal[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreAlarakHeal_Init () {
    libCPGL_gt_CC_ScoreAlarakHeal = TriggerCreate("libCPGL_gt_CC_ScoreAlarakHeal_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreAlarakHeal, false);
    TriggerAddEventUnitHealed(libCPGL_gt_CC_ScoreAlarakHeal, null, c_unitVitalAny, "SoulAbsorptionMU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreAlarakSacrificeHeal
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreAlarakSacrificeHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCPGL_gf_ActiveCommanderForPlayer(EventUnitHealLaunchPlayer()) == "ProtossAlarak"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "AlarakCoop"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitHealLaunchUnit()) != "AlarakCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreAlarakHeal[EventPlayer()] += EventUnitHealAmount();
    PlayerScoreValueSetFromInt(EventPlayer(), "AlarakSelfHeals", FixedToInt(libCPGL_gv_cC_ScoreAlarakHeal[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreAlarakSacrificeHeal_Init () {
    libCPGL_gt_CC_ScoreAlarakSacrificeHeal = TriggerCreate("libCPGL_gt_CC_ScoreAlarakSacrificeHeal_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreAlarakSacrificeHeal, false);
    TriggerAddEventUnitHealed(libCPGL_gt_CC_ScoreAlarakSacrificeHeal, null, c_unitVitalAny, "AlarakTheStrongestSurviveStealLife");
    TriggerAddEventUnitHealed(libCPGL_gt_CC_ScoreAlarakSacrificeHeal, null, c_unitVitalAny, "AlarakTheStrongestSurviveStealShield");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreNovaDmg
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreNovaDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "NovaCoop") || (UnitGetType(EventUnitDamageSourceUnit()) == "NovaCoopDecoy") || (UnitGetType(EventUnitDamageSourceUnit()) == "NovaBoombotBurrowed")))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreNovaDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "NovaDamage", FixedToInt(libCPGL_gv_cC_ScoreNovaDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreNovaDmg_Init () {
    libCPGL_gt_CC_ScoreNovaDmg = TriggerCreate("libCPGL_gt_CC_ScoreNovaDmg_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreNovaDmg, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreNovaDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreNovaHeal
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreNovaHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCPGL_gf_ActiveCommanderForPlayer(EventUnitHealLaunchPlayer()) == "TerranNova"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreNovaHeal[EventPlayer()] += EventUnitHealAmount();
    PlayerScoreValueSetFromInt(EventPlayer(), "NovaHealandAbsorb", FixedToInt(libCPGL_gv_cC_ScoreNovaHeal[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreNovaHeal_Init () {
    libCPGL_gt_CC_ScoreNovaHeal = TriggerCreate("libCPGL_gt_CC_ScoreNovaHeal_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreNovaHeal, false);
    TriggerAddEventUnitHealed(libCPGL_gt_CC_ScoreNovaHeal, null, c_unitVitalAny, "HealingDroneHeal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreNovaAbsorb
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreNovaAbsorb_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreNovaHeal[UnitGetOwner(EventUnit())] += EventUnitDamageAbsorbed();
    PlayerScoreValueSetFromInt(UnitGetOwner(EventUnit()), "NovaHealandAbsorb", FixedToInt(libCPGL_gv_cC_ScoreNovaHeal[UnitGetOwner(EventUnit())]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreNovaAbsorb_Init () {
    libCPGL_gt_CC_ScoreNovaAbsorb = TriggerCreate("libCPGL_gt_CC_ScoreNovaAbsorb_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreNovaAbsorb, false);
    TriggerAddEventUnitDamageAbsorbed(libCPGL_gt_CC_ScoreNovaAbsorb, null, "NovaCoopCasterDefensiveMatrix");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreStukovInfestedDmg
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreStukovInfestedDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "SIInfestedCivilian") || (UnitGetType(EventUnitDamageSourceUnit()) == "SIInfestedMarine") || (UnitGetType(EventUnitDamageSourceUnit()) == "SIInfestedTrooper") || (UnitGetType(EventUnitDamageSourceUnit()) == "SIVolatileInfested") || (UnitGetType(EventUnitDamageSourceUnit()) == "SIVolatileInfestedBurrowed")))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreStukovInfestedDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "StukovInfestedDamage", FixedToInt(libCPGL_gv_cC_ScoreStukovInfestedDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreStukovInfestedDmg_Init () {
    libCPGL_gt_CC_ScoreStukovInfestedDmg = TriggerCreate("libCPGL_gt_CC_ScoreStukovInfestedDmg_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreStukovInfestedDmg, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreStukovInfestedDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreStukovMonstrosityDmg
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreStukovMonstrosityDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "StukovAleksander") || (UnitGetType(EventUnitDamageSourceUnit()) == "StukovAleksanderCrashed") || (UnitGetType(EventUnitDamageSourceUnit()) == "StukovApocalisk")))) {
            return false;
        }

        if (!(((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true) || (UnitHasBehavior2(EventUnit(), "StukovAleksanderAirMindControl") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreStukovMonstrosityDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "StukovMonstrosityDamage", FixedToInt(libCPGL_gv_cC_ScoreStukovMonstrosityDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreStukovMonstrosityDmg_Init () {
    libCPGL_gt_CC_ScoreStukovMonstrosityDmg = TriggerCreate("libCPGL_gt_CC_ScoreStukovMonstrosityDmg_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreStukovMonstrosityDmg, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreStukovMonstrosityDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreFenixChampionDmg
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreFenixChampionDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "FenixKaldalisZealot") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixTalisAdept") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixTalisAdeptPhaseShift") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixTaldarinImmortal") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixWarbringerColossus") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixMojoScout") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixClolarionCarrier") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixClolarionInterceptor") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixClolarionBomber")))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreFenixChampionDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "FenixChampionDamage", FixedToInt(libCPGL_gv_cC_ScoreFenixChampionDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreFenixChampionDmg_Init () {
    libCPGL_gt_CC_ScoreFenixChampionDmg = TriggerCreate("libCPGL_gt_CC_ScoreFenixChampionDmg_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreFenixChampionDmg, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreFenixChampionDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreFenixSuitDmg
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreFenixSuitDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "FenixArbiter") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixCoop") || (UnitGetType(EventUnitDamageSourceUnit()) == "FenixDragoon")))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreFenixSuitDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "FenixSuitDamage", FixedToInt(libCPGL_gv_cC_ScoreFenixSuitDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreFenixSuitDmg_Init () {
    libCPGL_gt_CC_ScoreFenixSuitDmg = TriggerCreate("libCPGL_gt_CC_ScoreFenixSuitDmg_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreFenixSuitDmg, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreFenixSuitDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreDehakaDmg
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreDehakaDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "DehakaCoop"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreDehakaDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "DehakaDamage", FixedToInt(libCPGL_gv_cC_ScoreDehakaDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreDehakaDmg_Init () {
    libCPGL_gt_CC_ScoreDehakaDmg = TriggerCreate("libCPGL_gt_CC_ScoreDehakaDmg_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreDehakaDmg, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreDehakaDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreDehakaConsumeSupply
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreDehakaConsumeSupply_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeEat) == true))) {
            return false;
        }

        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "DehakaCoop"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreDehakaConsumeSupply[EventUnitDamageSourcePlayer()] += UnitGetPropertyFixed(EventUnit(), c_unitPropSuppliesUsed, c_unitPropNormal);
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "DehakaConsume", FixedToInt(libCPGL_gv_cC_ScoreDehakaConsumeSupply[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreDehakaConsumeSupply_Init () {
    libCPGL_gt_CC_ScoreDehakaConsumeSupply = TriggerCreate("libCPGL_gt_CC_ScoreDehakaConsumeSupply_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreDehakaConsumeSupply, false);
    TriggerAddEventUnitDied(libCPGL_gt_CC_ScoreDehakaConsumeSupply, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreHornerMagMineDmg
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreHornerMagMineDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreHornerMagMineDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "HornerMagMineDamage", FixedToInt(libCPGL_gv_cC_ScoreHornerMagMineDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreHornerMagMineDmg_Init () {
    libCPGL_gt_CC_ScoreHornerMagMineDmg = TriggerCreate("libCPGL_gt_CC_ScoreHornerMagMineDmg_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreHornerMagMineDmg, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreHornerMagMineDmg, null, c_unitDamageTypeAny, c_unitDamageEither, "HHMagneticMineWeaponSearchDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreHornerScrapPickup
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreHornerScrapPickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minerals;
    int lv_vespene;
    int lv_totalResources;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_minerals = FixedToInt(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 62));
    lv_vespene = FixedToInt(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 63));
    lv_totalResources = (lv_minerals + lv_vespene);
    libCPGL_gv_cC_ScoreHornerScrapResources[EventPlayer()] += lv_totalResources;
    PlayerScoreValueSetFromInt(EventPlayer(), "HornerScrapCollected", FixedToInt(libCPGL_gv_cC_ScoreHornerScrapResources[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreHornerScrapPickup_Init () {
    libCPGL_gt_CC_ScoreHornerScrapPickup = TriggerCreate("libCPGL_gt_CC_ScoreHornerScrapPickup_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreHornerScrapPickup, false);
    TriggerAddEventPlayerEffectUsed(libCPGL_gt_CC_ScoreHornerScrapPickup, c_playerAny, "HHScrapPickupDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusGrenadeDmg
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreTychusGrenadeDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreTychusGrenadeDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "TychusGrenadeDamage", FixedToInt(libCPGL_gv_cC_ScoreTychusGrenadeDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreTychusGrenadeDmg_Init () {
    libCPGL_gt_CC_ScoreTychusGrenadeDmg = TriggerCreate("libCPGL_gt_CC_ScoreTychusGrenadeDmg_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreTychusGrenadeDmg, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreTychusGrenadeDmg, null, c_unitDamageTypeAny, c_unitDamageEither, "TychusShredderGrenadeDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusReaperBombDmg
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreTychusReaperBombDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreTychusReaperBombDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "TychusReaperBombDamage", FixedToInt(libCPGL_gv_cC_ScoreTychusReaperBombDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreTychusReaperBombDmg_Init () {
    libCPGL_gt_CC_ScoreTychusReaperBombDmg = TriggerCreate("libCPGL_gt_CC_ScoreTychusReaperBombDmg_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreTychusReaperBombDmg, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreTychusReaperBombDmg, null, c_unitDamageTypeAny, c_unitDamageEither, "TychusReaperBombU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusWarhoundTurretDmg
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreTychusWarhoundTurretDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "TychusWarhoundAutoTurret"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreTychusWarhoundTurretDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "TychusWarhoundTurretDamage", FixedToInt(libCPGL_gv_cC_ScoreTychusWarhoundTurretDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreTychusWarhoundTurretDmg_Init () {
    libCPGL_gt_CC_ScoreTychusWarhoundTurretDmg = TriggerCreate("libCPGL_gt_CC_ScoreTychusWarhoundTurretDmg_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreTychusWarhoundTurretDmg, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreTychusWarhoundTurretDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusFirebatOilDmg
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreTychusFirebatOilDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreTychusFirebatOilDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "TychusFirebatOilDamage", FixedToInt(libCPGL_gv_cC_ScoreTychusFirebatOilDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreTychusFirebatOilDmg_Init () {
    libCPGL_gt_CC_ScoreTychusFirebatOilDmg = TriggerCreate("libCPGL_gt_CC_ScoreTychusFirebatOilDmg_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreTychusFirebatOilDmg, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreTychusFirebatOilDmg, null, c_unitDamageTypeAny, c_unitDamageEither, "TychusFireBatOilFireDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusHERCImpactDuration
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreTychusHERCImpactDuration_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreTychusHERCImpactDuration[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))] += libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, "TychusHercGrappleImpactStun", "Duration", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    PlayerScoreValueSetFromInt(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), "TychusHERCImpactDuration", FixedToInt(libCPGL_gv_cC_ScoreTychusHERCImpactDuration[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreTychusHERCImpactDuration_Init () {
    libCPGL_gt_CC_ScoreTychusHERCImpactDuration = TriggerCreate("libCPGL_gt_CC_ScoreTychusHERCImpactDuration_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreTychusHERCImpactDuration, false);
    TriggerAddEventPlayerEffectUsed(libCPGL_gt_CC_ScoreTychusHERCImpactDuration, c_playerAny, "TychusHercGrappleLaunchCasterStunAB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusMarauderHeal
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreTychusMarauderHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreTychusMarauderHeal[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))] += (UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifeMax, c_unitPropCurrent) * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, EventPlayerEffectUsed(), "VitalArray[" + IntToString(0) + "].ChangeFraction", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    PlayerScoreValueSetFromInt(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), "TychusMarauderHeal", FixedToInt(libCPGL_gv_cC_ScoreTychusMarauderHeal[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreTychusMarauderHeal_Init () {
    libCPGL_gt_CC_ScoreTychusMarauderHeal = TriggerCreate("libCPGL_gt_CC_ScoreTychusMarauderHeal_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreTychusMarauderHeal, false);
    TriggerAddEventPlayerEffectUsed(libCPGL_gt_CC_ScoreTychusMarauderHeal, c_playerAny, "TychusMarauderHealingWardMU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusGhostDominatedDmg
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreTychusGhostDominatedDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!(((UnitHasBehavior2(EventUnitDamageSourceUnit(), "TychusGhostDominate") == true) || (UnitHasBehavior2(EventUnitDamageSourceUnit(), "TychusGhostDominateUpgraded") == true)))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreTychusGhostDominatedDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "TychusGhostDominatedDamage", FixedToInt(libCPGL_gv_cC_ScoreTychusGhostDominatedDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreTychusGhostDominatedDmg_Init () {
    libCPGL_gt_CC_ScoreTychusGhostDominatedDmg = TriggerCreate("libCPGL_gt_CC_ScoreTychusGhostDominatedDmg_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreTychusGhostDominatedDmg, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreTychusGhostDominatedDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusSpectrePulseDmg
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreTychusSpectrePulseDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreTychusSpectrePulseDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "TychusSpectrePulseDamage", FixedToInt(libCPGL_gv_cC_ScoreTychusSpectrePulseDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreTychusSpectrePulseDmg_Init () {
    libCPGL_gt_CC_ScoreTychusSpectrePulseDmg = TriggerCreate("libCPGL_gt_CC_ScoreTychusSpectrePulseDmg_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreTychusSpectrePulseDmg, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreTychusSpectrePulseDmg, null, c_unitDamageTypeAny, c_unitDamageEither, "TychusSpectreUltrasonicDamageLv1");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusMedicHeal
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreTychusMedicHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCPGL_gf_ActiveCommanderForPlayer(EventUnitHealLaunchPlayer()) == "TerranTychus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreTychusMedicHeal[EventUnitHealLaunchPlayer()] += EventUnitHealAmount();
    PlayerScoreValueSetFromInt(EventUnitHealLaunchPlayer(), "TychusMedicHeal", FixedToInt(libCPGL_gv_cC_ScoreTychusMedicHeal[EventUnitHealLaunchPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreTychusMedicHeal_Init () {
    libCPGL_gt_CC_ScoreTychusMedicHeal = TriggerCreate("libCPGL_gt_CC_ScoreTychusMedicHeal_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreTychusMedicHeal, false);
    TriggerAddEventUnitHealed(libCPGL_gt_CC_ScoreTychusMedicHeal, null, c_unitVitalAny, "TychusMedicHeal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusMedicHealAoE
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreTychusMedicHealAoE_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreTychusMedicHeal[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))] += libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, EventPlayerEffectUsed(), "VitalArray[" + IntToString(0) + "].Change", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    PlayerScoreValueSetFromInt(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), "TychusMedicHeal", FixedToInt(libCPGL_gv_cC_ScoreTychusMedicHeal[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreTychusMedicHealAoE_Init () {
    libCPGL_gt_CC_ScoreTychusMedicHealAoE = TriggerCreate("libCPGL_gt_CC_ScoreTychusMedicHealAoE_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreTychusMedicHealAoE, false);
    TriggerAddEventPlayerEffectUsed(libCPGL_gt_CC_ScoreTychusMedicHealAoE, c_playerAny, "TychusMedicAoEHoTHeal");
    TriggerAddEventPlayerEffectUsed(libCPGL_gt_CC_ScoreTychusMedicHealAoE, c_playerAny, "TychusMedicAoESearchAlliance");
    TriggerAddEventPlayerEffectUsed(libCPGL_gt_CC_ScoreTychusMedicHealAoE, c_playerAny, "TychusMedivacHealModifyTargetLife");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusMedicAbsorb
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreTychusMedicAbsorb_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreTychusMedicHeal[UnitGetOwner(EventUnit())] += EventUnitDamageAbsorbed();
    PlayerScoreValueSetFromInt(UnitGetOwner(EventUnit()), "TychusMedicHeal", FixedToInt(libCPGL_gv_cC_ScoreTychusMedicHeal[UnitGetOwner(EventUnit())]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreTychusMedicAbsorb_Init () {
    libCPGL_gt_CC_ScoreTychusMedicAbsorb = TriggerCreate("libCPGL_gt_CC_ScoreTychusMedicAbsorb_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreTychusMedicAbsorb, false);
    TriggerAddEventUnitDamageAbsorbed(libCPGL_gt_CC_ScoreTychusMedicAbsorb, null, "TychusMedicDefensiveMatrix");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreTychusOdinDmg
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreTychusOdinDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "TychusOdin"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreTychusOdinDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "TychusOdinDamage", FixedToInt(libCPGL_gv_cC_ScoreTychusOdinDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreTychusOdinDmg_Init () {
    libCPGL_gt_CC_ScoreTychusOdinDmg = TriggerCreate("libCPGL_gt_CC_ScoreTychusOdinDmg_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreTychusOdinDmg, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreTychusOdinDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreZeratulDmg
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreZeratulDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "ZeratulCoop"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreZeratulDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "ZeratulDamage", FixedToInt(libCPGL_gv_cC_ScoreZeratulDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreZeratulDmg_Init () {
    libCPGL_gt_CC_ScoreZeratulDmg = TriggerCreate("libCPGL_gt_CC_ScoreZeratulDmg_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreZeratulDmg, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreZeratulDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreZeratulShieldRestore
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreZeratulShieldRestore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreZeratulShieldRestore[EventUnitHealLaunchPlayer()] += EventUnitHealAmount();
    PlayerScoreValueSetFromInt(EventUnitHealLaunchPlayer(), "ZeratulShieldRestore", FixedToInt(libCPGL_gv_cC_ScoreZeratulShieldRestore[EventUnitHealLaunchPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreZeratulShieldRestore_Init () {
    libCPGL_gt_CC_ScoreZeratulShieldRestore = TriggerCreate("libCPGL_gt_CC_ScoreZeratulShieldRestore_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreZeratulShieldRestore, false);
    TriggerAddEventUnitHealed(libCPGL_gt_CC_ScoreZeratulShieldRestore, null, c_unitVitalAny, "VoidSentryShieldRepair");
    TriggerAddEventUnitHealed(libCPGL_gt_CC_ScoreZeratulShieldRestore, null, c_unitVitalAny, "ShieldBatteryRechargeChanneled");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreStetmannGaryDmg
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreStetmannGaryDmg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitDamageSourceUnit()) == "GaryStetmann") || (UnitGetType(EventUnitDamageSourceUnit()) == "SuperGaryStetmann")))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreStetmannGaryDmg[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
    PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "StetmannGaryDamage", FixedToInt(libCPGL_gv_cC_ScoreStetmannGaryDmg[EventUnitDamageSourcePlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreStetmannGaryDmg_Init () {
    libCPGL_gt_CC_ScoreStetmannGaryDmg = TriggerCreate("libCPGL_gt_CC_ScoreStetmannGaryDmg_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreStetmannGaryDmg, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreStetmannGaryDmg, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreStetmannOverload
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreStetmannOverload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() != c_playerAny))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gv_cC_ScoreStetmannOverload[EventPlayer()] += 1;
    PlayerScoreValueSetFromInt(EventPlayer(), "StetmannUnitsOverloaded", libCPGL_gv_cC_ScoreStetmannOverload[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreStetmannOverload_Init () {
    libCPGL_gt_CC_ScoreStetmannOverload = TriggerCreate("libCPGL_gt_CC_ScoreStetmannOverload_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreStetmannOverload, false);
    TriggerAddEventPlayerEffectUsed(libCPGL_gt_CC_ScoreStetmannOverload, c_playerAny, "FASTOverloadStetmannAB");
    TriggerAddEventPlayerEffectUsed(libCPGL_gt_CC_ScoreStetmannOverload, c_playerAny, "HUGSOverloadStetmannAB");
    TriggerAddEventPlayerEffectUsed(libCPGL_gt_CC_ScoreStetmannOverload, c_playerAny, "JUICEOverloadStetmannAB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreMengskDamage
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreMengskDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_HumanPlayers(), EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((PlayerCommander(EventUnitDamageSourcePlayer()) == "Mengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnitDamageSourceUnit()) == "TrooperMengsk") || (UnitGetType(EventUnitDamageSourceUnit()) == "TrooperMengskImproved") || (UnitGetType(EventUnitDamageSourceUnit()) == "TrooperMengskFlamethrower") || (UnitGetType(EventUnitDamageSourceUnit()) == "TrooperMengskAA") || (UnitGetType(EventUnitDamageSourceUnit()) == "SCVMengsk"))) {
        libCPGL_gv_cC_ScoreMengskTrooperDamage[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
        PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "MengskTrooperDamage", FixedToInt(libCPGL_gv_cC_ScoreMengskTrooperDamage[EventUnitDamageSourcePlayer()]));
    }
    else if ((UnitGroupHasUnit(libCOMI_gv_cM_Mengsk_VeteranUnits, EventUnitDamageSourceUnit()) == true)) {
        libCPGL_gv_cC_ScoreMengskRoyalGuardDamage[EventUnitDamageSourcePlayer()] += EventUnitDamageAmount();
        PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), "MengskRoyalGuardDamage", FixedToInt(libCPGL_gv_cC_ScoreMengskRoyalGuardDamage[EventUnitDamageSourcePlayer()]));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreMengskDamage_Init () {
    libCPGL_gt_CC_ScoreMengskDamage = TriggerCreate("libCPGL_gt_CC_ScoreMengskDamage_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreMengskDamage, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreMengskDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreDebugDisplay
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreDebugDisplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_humanPlayer;
    int lv_scorePlayer;

    // Automatic Variable Declarations
    playergroup auto1E8B0699_g;
    playergroup auto0A25EFF1_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(libCPGL_gf_DebugModeEnabled())) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto1E8B0699_g = libCPCD_gf_HumanPlayers();
    lv_humanPlayer = -1;
    while (true) {
        lv_humanPlayer = PlayerGroupNextPlayer(auto1E8B0699_g, lv_humanPlayer);
        if (lv_humanPlayer < 0) { break; }
        auto0A25EFF1_g = libCPCD_gf_HumanPlayers();
        lv_scorePlayer = -1;
        while (true) {
            lv_scorePlayer = PlayerGroupNextPlayer(auto0A25EFF1_g, lv_scorePlayer);
            if (lv_scorePlayer < 0) { break; }
            TextExpressionSetToken("Param/Expression/lib_CPGL_46D67012", "A", StringToText((libCPGL_gf_CC_CommanderScoreSelfStatistic(libCPGL_gf_ActiveCommanderForPlayer(lv_humanPlayer)))));
            TextExpressionSetToken("Param/Expression/lib_CPGL_46D67012", "B", IntToText(PlayerScoreValueGetAsInt(lv_scorePlayer, libCPGL_gf_CC_CommanderScoreSelfStatistic(libCPGL_gf_ActiveCommanderForPlayer(lv_humanPlayer)))));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPGL_46D67012"), true);
            TextExpressionSetToken("Param/Expression/lib_CPGL_D8D99E72", "A", StringToText((libCPGL_gf_CC_CommanderScoreCoopStatistic(libCPGL_gf_ActiveCommanderForPlayer(lv_humanPlayer)))));
            TextExpressionSetToken("Param/Expression/lib_CPGL_D8D99E72", "B", IntToText(PlayerScoreValueGetAsInt(lv_scorePlayer, libCPGL_gf_CC_CommanderScoreCoopStatistic(libCPGL_gf_ActiveCommanderForPlayer(lv_humanPlayer)))));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPGL_D8D99E72"), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreDebugDisplay_Init () {
    libCPGL_gt_CC_ScoreDebugDisplay = TriggerCreate("libCPGL_gt_CC_ScoreDebugDisplay_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreDebugDisplay, false);
    TriggerAddEventChatMessage(libCPGL_gt_CC_ScoreDebugDisplay, c_playerAny, "scores", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreEnemiesKilled
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreEnemiesKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPCD_gf_NondefeatedPlayers(), libNtve_gf_KillingPlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(libNtve_gf_KillingPlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerScoreValueSetFromInt(libNtve_gf_KillingPlayer(), "UnitsStructuresKilled", (PlayerScoreValueGetAsInt(libNtve_gf_KillingPlayer(), "UnitsStructuresKilled")+1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreEnemiesKilled_Init () {
    libCPGL_gt_CC_ScoreEnemiesKilled = TriggerCreate("libCPGL_gt_CC_ScoreEnemiesKilled_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreEnemiesKilled, false);
    TriggerAddEventUnitDied(libCPGL_gt_CC_ScoreEnemiesKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreDynDmgTaken
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CC_ScoreDynDmgTaken_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_scoreIndex;
    fixed lv_newScore;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    int auto3DB6F82E_ae;
    const int auto3DB6F82E_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto3DB6F82E_ae = libCPGL_gv_cC_ScoreTrackedDmgTakenCount;
    lv_scoreIndex = 1;
    for ( ; ( (auto3DB6F82E_ai >= 0 && lv_scoreIndex <= auto3DB6F82E_ae) || (auto3DB6F82E_ai < 0 && lv_scoreIndex >= auto3DB6F82E_ae) ) ; lv_scoreIndex += auto3DB6F82E_ai ) {
        if ((UnitGroupHasUnit(DataTableGetUnitGroup(true, ("CC_ScoreGroup_" + IntToString(lv_scoreIndex))), EventUnit()) == true) && (PlayerGroupHasPlayer(libCPCD_gf_NondefeatedPlayers(), EventUnitDamageSourcePlayer()) == true)) {
            lv_newScore = (DataTableGetFixed(true, ("CC_ScoreVal_" + IntToString(lv_scoreIndex) + "_" + IntToString(EventUnitDamageSourcePlayer()))) + EventUnitDamageAmount());
            DataTableSetFixed(true, ("CC_ScoreVal_" + IntToString(lv_scoreIndex) + "_" + IntToString(EventUnitDamageSourcePlayer())), lv_newScore);
            PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), (DataTableGetString(true, ("CC_ScoreType_" + IntToString(lv_scoreIndex)))), FixedToInt(lv_newScore));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CC_ScoreDynDmgTaken_Init () {
    libCPGL_gt_CC_ScoreDynDmgTaken = TriggerCreate("libCPGL_gt_CC_ScoreDynDmgTaken_Func");
    TriggerEnable(libCPGL_gt_CC_ScoreDynDmgTaken, false);
    TriggerAddEventUnitDamaged(libCPGL_gt_CC_ScoreDynDmgTaken, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abort Mission
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CM_AbortMission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCPGL_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PerfTestStop();
    libCPGL_gv_cM_EndMissionResult[EventPlayer()] = c_gameOverDefeat;
    libCOOC_gf_CC_PlayerAwardMissionXP(c_gameOverDefeat, EventPlayer());
    libCOOC_gf_CC_SetPlayerDefeated(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CM_AbortMission_Init () {
    libCPGL_gt_CM_AbortMission = TriggerCreate("libCPGL_gt_CM_AbortMission_Func");
    TriggerEnable(libCPGL_gt_CM_AbortMission, false);
    TriggerAddEventAbortMission(libCPGL_gt_CM_AbortMission, c_playerAny);
    TriggerAddEventGameMenuItemSelected(libCPGL_gt_CM_AbortMission, c_playerAny, c_gameMenuDialogQuitButton);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MissionScoreScreenExited
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CM_MissionScoreScreenExited_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerScoreValueGetAsInt(libCOUI_gf_CU_ScoreTriggeringPlayer(), "MutatorIsWeeklyChallenge") == 999)) {
        GameOver(libCOUI_gf_CU_ScoreTriggeringPlayer(), c_gameOverVictory, false, false);
        return true;
    }

    GameOver(libCOUI_gf_CU_ScoreTriggeringPlayer(), libCPGL_gv_cM_EndMissionResult[libCOUI_gf_CU_ScoreTriggeringPlayer()], false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CM_MissionScoreScreenExited_Init () {
    libCPGL_gt_CM_MissionScoreScreenExited = TriggerCreate("libCPGL_gt_CM_MissionScoreScreenExited_Func");
    TriggerEnable(libCPGL_gt_CM_MissionScoreScreenExited, false);
    libCOUI_gf_CU_ScoreClosed(libCPGL_gt_CM_MissionScoreScreenExited);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MissionHandlePlayerQuitGameEnd
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CM_MissionHandlePlayerQuitGameEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_CommanderPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCPGL_gf_GameIsOver() == false))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CM_MissionHandlePlayerQuitGameEnd_Init () {
    libCPGL_gt_CM_MissionHandlePlayerQuitGameEnd = TriggerCreate("libCPGL_gt_CM_MissionHandlePlayerQuitGameEnd_Func");
    TriggerEnable(libCPGL_gt_CM_MissionHandlePlayerQuitGameEnd, false);
    TriggerAddEventPlayerLeft(libCPGL_gt_CM_MissionHandlePlayerQuitGameEnd, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MissionVictoryCheatEndMission
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CM_MissionVictoryCheatEndMission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPGL_gf_EndCampaignMission(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CM_MissionVictoryCheatEndMission_Init () {
    libCPGL_gt_CM_MissionVictoryCheatEndMission = TriggerCreate("libCPGL_gt_CM_MissionVictoryCheatEndMission_Func");
    TriggerEnable(libCPGL_gt_CM_MissionVictoryCheatEndMission, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MissionVictoryCallbackBlockActionQueueOneMinute
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCPGL_gv_cM_MissionVictoryActionQueyeEmpty = true;
    Wait(60.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute_Init () {
    libCPGL_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute = TriggerCreate("libCPGL_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute_Func");
    TriggerEnable(libCPGL_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MissionVictoryCallbackBlockActionQueue
//--------------------------------------------------------------------------------------------------
bool libCPGL_gt_CM_MissionVictoryCallbackBlockActionQueue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCPGL_gv_cM_MissionVictoryActionQueyeEmpty = true;
    while (true) {
        Wait(10.0, c_timeReal);
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPGL_gt_CM_MissionVictoryCallbackBlockActionQueue_Init () {
    libCPGL_gt_CM_MissionVictoryCallbackBlockActionQueue = TriggerCreate("libCPGL_gt_CM_MissionVictoryCallbackBlockActionQueue_Func");
    TriggerEnable(libCPGL_gt_CM_MissionVictoryCallbackBlockActionQueue, false);
}

void libCPGL_InitTriggers () {
    libCPGL_gt_BugFixes_Init();
    libCPGL_gt_Changes_Init();
    libCPGL_gt_QualityofLife_Init();
    libCPGL_gt_CoopInit_Init();
    libCPGL_gt_PlayersInit_Init();
    libCPGL_gt_LobbyInit_Init();
    libCPGL_gt_AllianceChanges_Init();
    libCPGL_gt_GameStart_Init();
    libCPGL_gt_PlayerLeavesGame_Init();
    libCPGL_gt_MainNatRegionEnter_Init();
    libCPGL_gt_MainNatRegionExit_Init();
    libCPGL_gt_MainNatCameraGlobalCaster_Init();
    libCPGL_gt_HeroTimeStarts_Init();
    libCPGL_gt_HeroTimeEnds_Init();
    libCPGL_gt_BTBuildTimeStarts_Init();
    libCPGL_gt_BTBuildTimeEnds_Init();
    libCPGL_gt_CNCinematicModeOn_Init();
    libCPGL_gt_CNCinematicModeOff_Init();
    libCPGL_gt_Zoomin_Init();
    libCPGL_gt_MinimapCameraUpdate_Init();
    libCPGL_gt_MinimapAllianceCheck_Init();
    libCPGL_gt_MinimapInit_Init();
    libCPGL_gt_HelpInit_Init();
    libCPGL_gt_CM_CampaignUnitInfoUnitMorphes_Init();
    libCPGL_gt_CM_CampaignUnitChangeOwner_Init();
    libCPGL_gt_CM_CampaignSolarForgeSelected_Init();
    libCPGL_gt_CM_CampaignLaserDrillDamaged_Init();
    libCPGL_gt_CM_CampaignLaserDrillSelected_Init();
    libCPGL_gt_CM_CampaignLaserDrillCreated_Init();
    libCPGL_gt_CM_CampaignCyberneticsDestroyed_Init();
    libCPGL_gt_CM_CampaignCybCoreBuilding_Init();
    libCPGL_gt_CM_CampaignCyberneticsSelected_Init();
    libCPGL_gt_CM_CampaignUnitCreated_Init();
    libCPGL_gt_CM_CampaignUnitTeaching_Init();
    libCPGL_gt_VoicePackDebug_Init();
    libCPGL_gt_CC_PrestigeUpgradeSupplement_Init();
    libCPGL_gt_CC_SharedUpgradesRecheck_Init();
    libCPGL_gt_HeroSpawn_Init();
    libCPGL_gt_Color_Init();
    libCPGL_gt_CM_DebugAbathurBiomassLost_Init();
    libCPGL_gt_CM_DebugAbathurBiomassReport_Init();
    libCPGL_gt_GlobalCasterEnergyLink_Init();
    libCPGL_gt_CommanderDebug_Init();
    libCPGL_gt_CM_DebugHeroReviveInstant_Init();
    libCPGL_gt_CM_DebugCommanderCooldowns_Init();
    libCPGL_gt_CM_DebugApplySkin_Init();
    libCPGL_gt_CM_DebugTargetSpawnersSet_Init();
    libCPGL_gt_CC_DebugDefeatMultiplier_Init();
    libCPGL_gt_CC_DebugToggleTechSpam_Init();
    libCPGL_gt_CC_DebugToggleTechSuperSpam_Init();
    libCPGL_gt_CC_DebugUpdateTech_Init();
    libCPGL_gt_CM_DebugGiveOfflineControlRedundant_Init();
    libCPGL_gt_CM_DebugVictorySRedundant_Init();
    libCPGL_gt_DebugMode_Init();
    libCPGL_gt_ChatCommandNormal_Init();
    libCPGL_gt_ChatCommandDebug_Init();
    libCPGL_gt_ChatCommandCheat_Init();
    libCPGL_gt_CU_ScoreClosed_Init();
    libCPGL_gt_CU_FanfareDismissed_Init();
    libCPGL_gt_CC_ScoreArtanisAbsorb_Init();
    libCPGL_gt_CC_ScoreArtanisKaraxOrbitalStrike_Init();
    libCPGL_gt_CC_ScoreArtanisBombardment_Init();
    libCPGL_gt_CC_ScoreVorazunBHManageGroup_Init();
    libCPGL_gt_CC_ScoreVorazunBHDmg_Init();
    libCPGL_gt_CC_ScoreVorazunCloakDmg_Init();
    libCPGL_gt_CC_ScoreKaraxSolarLance_Init();
    libCPGL_gt_CC_ScoreKaraxPurifierBeam_Init();
    libCPGL_gt_CC_ScoreKaraxChronoProduction_Init();
    libCPGL_gt_CC_ScoreRaynorMedicHeal_Init();
    libCPGL_gt_CC_ScoreRaynorHyperionDmg_Init();
    libCPGL_gt_CC_ScoreSwannSVHeal_Init();
    libCPGL_gt_CC_ScoreSwannDrillDmg_Init();
    libCPGL_gt_CC_ScoreKerriganResources_Init();
    libCPGL_gt_CC_ScoreKerriganDmg_Init();
    libCPGL_gt_CC_ScoreZagaraFrenzyDmg_Init();
    libCPGL_gt_CC_ScoreZagaraSuicideDmg_Init();
    libCPGL_gt_CC_ScoreZagaraBanelingBarrage_Init();
    libCPGL_gt_CC_ScoreAbathurHealing_Init();
    libCPGL_gt_CC_ScoreAbathurMonsterDmg_Init();
    libCPGL_gt_CC_ScoreAlarakDmg_Init();
    libCPGL_gt_CC_ScoreAlarakHeal_Init();
    libCPGL_gt_CC_ScoreAlarakSacrificeHeal_Init();
    libCPGL_gt_CC_ScoreNovaDmg_Init();
    libCPGL_gt_CC_ScoreNovaHeal_Init();
    libCPGL_gt_CC_ScoreNovaAbsorb_Init();
    libCPGL_gt_CC_ScoreStukovInfestedDmg_Init();
    libCPGL_gt_CC_ScoreStukovMonstrosityDmg_Init();
    libCPGL_gt_CC_ScoreFenixChampionDmg_Init();
    libCPGL_gt_CC_ScoreFenixSuitDmg_Init();
    libCPGL_gt_CC_ScoreDehakaDmg_Init();
    libCPGL_gt_CC_ScoreDehakaConsumeSupply_Init();
    libCPGL_gt_CC_ScoreHornerMagMineDmg_Init();
    libCPGL_gt_CC_ScoreHornerScrapPickup_Init();
    libCPGL_gt_CC_ScoreTychusGrenadeDmg_Init();
    libCPGL_gt_CC_ScoreTychusReaperBombDmg_Init();
    libCPGL_gt_CC_ScoreTychusWarhoundTurretDmg_Init();
    libCPGL_gt_CC_ScoreTychusFirebatOilDmg_Init();
    libCPGL_gt_CC_ScoreTychusHERCImpactDuration_Init();
    libCPGL_gt_CC_ScoreTychusMarauderHeal_Init();
    libCPGL_gt_CC_ScoreTychusGhostDominatedDmg_Init();
    libCPGL_gt_CC_ScoreTychusSpectrePulseDmg_Init();
    libCPGL_gt_CC_ScoreTychusMedicHeal_Init();
    libCPGL_gt_CC_ScoreTychusMedicHealAoE_Init();
    libCPGL_gt_CC_ScoreTychusMedicAbsorb_Init();
    libCPGL_gt_CC_ScoreTychusOdinDmg_Init();
    libCPGL_gt_CC_ScoreZeratulDmg_Init();
    libCPGL_gt_CC_ScoreZeratulShieldRestore_Init();
    libCPGL_gt_CC_ScoreStetmannGaryDmg_Init();
    libCPGL_gt_CC_ScoreStetmannOverload_Init();
    libCPGL_gt_CC_ScoreMengskDamage_Init();
    libCPGL_gt_CC_ScoreDebugDisplay_Init();
    libCPGL_gt_CC_ScoreEnemiesKilled_Init();
    libCPGL_gt_CC_ScoreDynDmgTaken_Init();
    libCPGL_gt_CM_AbortMission_Init();
    libCPGL_gt_CM_MissionScoreScreenExited_Init();
    libCPGL_gt_CM_MissionHandlePlayerQuitGameEnd_Init();
    libCPGL_gt_CM_MissionVictoryCheatEndMission_Init();
    libCPGL_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute_Init();
    libCPGL_gt_CM_MissionVictoryCallbackBlockActionQueue_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libCPGL_InitLib_completed = false;

void libCPGL_InitLib () {
    if (libCPGL_InitLib_completed) {
        return;
    }

    libCPGL_InitLib_completed = true;

    libCPGL_InitLibraries();
    libCPGL_InitVariables();
    libCPGL_InitTriggers();
}

include "LibCPCD"
include "LibCPCC"
include "LibCPCM"

