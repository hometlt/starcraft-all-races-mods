include "LibCOOC"
include "LibCOOC"

//--------------------------------------------------------------------------------------------------
// Library: Coop+Global
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libCPGL_ge_CommanderUnitType_GlobalCasterUnit = 0;
const int libCPGL_ge_CommanderUnitType_GlobalCasterUnitSecondary = 1;
const int libCPGL_ge_CommanderUnitType_HeroBeacon = 2;
const int libCPGL_ge_CommanderUnitType_HeroStructure = 3;
const int libCPGL_ge_CommanderUnitType_HeroUnit = 4;
const int libCPGL_ge_CC_CommanderVOLines_None = 0;
const int libCPGL_ge_CC_CommanderVOLines_CC_CommanderVOResourcesSent = 1;
const int libCPGL_ge_CC_CommanderVOLines_CC_CommanderVOResourcesRequested = 2;
const int libCPGL_ge_CC_CommanderVOLines_CC_CommanderVOMineralsSent = 3;
const int libCPGL_ge_CC_CommanderVOLines_CC_CommanderVOMineralsRequested = 4;
const int libCPGL_ge_CC_CommanderVOLines_CC_CommanderVOVespeneSent = 5;
const int libCPGL_ge_CC_CommanderVOLines_CC_CommanderVOVespeneRequested = 6;
const int libCPGL_ge_CC_CommanderVOLines_CC_CommanderVOThankyou = 7;
const int libCPGL_ge_CC_CommanderVOLines_CC_CommanderVOEnemyIsProtoss = 8;
const int libCPGL_ge_CC_CommanderVOLines_CC_CommanderVOEnemyIsTerran = 9;
const int libCPGL_ge_CC_CommanderVOLines_CC_CommanderVOEnemyIsZerg = 10;
const int libCPGL_ge_CC_CommanderVOLines_CC_CommanderVOEnemyIsCloaked = 11;
const int libCPGL_ge_CC_CommanderVOLines_CC_CommanderVOArmyLost = 12;
const int libCPGL_ge_ArmyUpgradeTypeState_Locked = 0;
const int libCPGL_ge_ArmyUpgradeTypeState_Unlocked = 1;
const int libCPGL_ge_ArmyUpgradeCostType__None = 0;
const int libCPGL_ge_ArmyUpgradeCostType_Red = 1;
const int libCPGL_ge_ArmyUpgradeCostType_Green = 2;
const int libCPGL_ge_ArmyUpgradeCostType_Yellow = 3;
const int libCPGL_ge_ArmyUpgradeCostType_Wild = 4;
const int libCPGL_ge_CC_PerkState_Locked = 0;
const int libCPGL_ge_CC_PerkState_Unlocked = 1;
const int libCPGL_ge_CC_PerkState_Active = 2;
const int libCPGL_ge_CC_PerkState_Hidden = 3;
const int libCPGL_ge_ChatCommandType_Normal = 0;
const int libCPGL_ge_ChatCommandType_Debug = 1;
const int libCPGL_ge_ChatCommandType_Cheat = 2;
const int libCPGL_ge_ChatCommandType_Error = 3;
const int libCPGL_ge_CampaignMissionGameResultType_None = 0;
const int libCPGL_ge_CampaignMissionGameResultType_Victory = 1;
const int libCPGL_ge_CampaignMissionGameResultType_Defeat = 2;

// Constants
const int libCPGL_gv_humanPlayerCount = 15;
const int libCPGL_gv_cCC_MASTERY_CATEGORIES = 3;
const int libCPGL_gv_cCC_MASTERY_UPGRADE_MAX_LEVEL = 30;
const int libCPGL_gv_cCC_MASTERY_MAX_LEVEL = 120;
const int libCPGL_gv_cCC_MASTERIES_PER_COMMANDER = 6;
const int libCPGL_gv_cCC_PLAYERPRESTIGEMAXRANK = 3;
const int libCPGL_gv_cCC_PLAYERLEVELMAX = 15;
const int libCPGL_gv_cCC_COMMANDERCOUNT = 18;
const string libCPGL_gv_pCC_ArmyCategoryStateKey = "CS_ArmyCatState_";
const string libCPGL_gv_pCC_ArmyUpgradeStateKey = "CS_ArmyUpgradeState_";
const string libCPGL_gv_pCC_ArmyUnitStateKey = "CS_ArmyUnitState_";
const string libCPGL_gv_cCC_PerkStateKey = "CC_PerkState_";
const string libCPGL_gv_cUC_ScoreEventClosed = "CU_ScoreEventClosed";
const string libCPGL_gv_cUC_ScoreParameterPlayer = "CU_ScoreParamPlayer";
const int libCPGL_gv_pCC_StatVersion = 1;

// Structures
struct libCPGL_gs_Commander {
    string lv_commander;
    text lv_commanderName;
    int lv_commanderLevel;
    string lv_commanderInstance;
    int lv_commanderExperience;
    int lv_prestigeLevel;
    string lv_prestigeIcon;
    text lv_prestigeName;
    text lv_prestigeDescription;
    string lv_race;
    string lv_spawnRace;
    int lv_suppliesStart;
    int lv_suppliesMax;
    unit lv_heroUnit;
    string lv_heroUnitType;
    unit lv_heroBeacon;
    string lv_heroBeaconType;
    bool lv_heroAllowed;
    abilcmd lv_heroReviveCommand;
    string lv_heroReviveLink;
    string[4] lv_heroReviveBehavior;
    int lv_heroDeathCount;
    bool lv_heroBeaconIsHeroStructure;
    fixed lv_heroTimer;
    unit lv_heroStructure;
    string lv_heroStructureType;
    unitgroup lv_heroStructureGroup;
    bool lv_heroStructureAllowed;
    unit lv_globalCasterUnit;
    unit lv_globalCasterUnitSecondary;
    string lv_globalCasterUnitType;
    unitgroup lv_globalCasterGroup;
    unitgroup lv_globalCasterGroupSecondary;
    bool lv_globalCasterUnitAllowed;
};

// Variable Declarations
playergroup libCPGL_gv_humanPlayersGroup;
libCPGL_gs_Commander[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_commander;
region libCPGL_gv_mainNats;
region[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_mainNatEnemy;
fixed libCPGL_gv_hTHeroTime;
timer libCPGL_gv_hTHeroTimeTimer;
timer libCPGL_gv_bTBuildTimeTimer;
bool libCPGL_gv_cNPlayersInCinematic;
int[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cNPlayerCinematicMode;
int libCPGL_gv_cDMissionUIContainer;
int libCPGL_gv_cDMissionObjectivePanel;
bool libCPGL_gv_cDMissionObjectivePanelRunning;
int[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_minimapPing;
bool libCPGL_gv_helpMode;
actor libCPGL_gv_cM_UpgradeReticle;
int libCPGL_gv_cM_UpgradeTextTag;
unit libCPGL_gv_cM_UpgradeUnit;
int libCPGL_gv_cM_DrillTextTagInitial;
int libCPGL_gv_cM_DrillTextTagCreated;
int libCPGL_gv_cM_DrillTextTagDamaged;
int libCPGL_gv_cM_CybCoreTextTag;
int libCPGL_gv_cM_SolarForgeTextTag;
int[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cCX_PlayerMasteryLevel;
int[libCPGL_gv_humanPlayerCount + 1][libCPGL_gv_cCC_COMMANDERCOUNT + 1][libCPGL_gv_cCC_MASTERIES_PER_COMMANDER + 1] libCPGL_gv_cCX_PlayerMasteryPointsSpent;
bool[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_PlayerMasteryEnabled;
fixed libCPGL_gv_cC_PlayerExperienceEffortPct;
bool libCPGL_gv_cC_ApplyingCampaignTech;
bool libCPGL_gv_cC_CampaignTechApplied;
int libCPGL_gv_cM_DebugAbathurBiomassCollected;
int libCPGL_gv_cM_DebugAbathurBiomassLost;
int libCPGL_gv_cM_DebugAbathurBiomassDroppedNormal;
int libCPGL_gv_cM_DebugAbathurBiomassDroppedRefund;
bool libCPGL_gv_cM_DebugAITargetSpawners;
fixed libCPGL_gv_cC_DebugDefeatMultiplierOverride;
trigger libCPGL_gv_cC_TechLimitsCallback;
bool libCPGL_gv_cC_DebugTechSpam;
bool libCPGL_gv_cC_DebugPlaytestMode;
bool libCPGL_gv_cC_DebugTechSuperSpam;
bool libCPGL_gv_debugModeEnabled;
int libCPGL_gv_cU_FanfareFlash;
int libCPGL_gv_cU_FanfareCloseButton;
int libCPGL_gv_cU_FanfareConvertToReplayButton;
int[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cU_FanfareResult;
bool[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cU_FanfareShown;
int libCPGL_gv_cU_FanfarePanel;
int libCPGL_gv_cU_FanfareDialog;
bool libCPGL_gv_cU_FanfareTransmissionPlayed;
int libCPGL_gv_cU_ScoreDialog;
int libCPGL_gv_cU_ScorePanel;
int libCPGL_gv_cU_ScoreTitleLabel;
int libCPGL_gv_cU_ScoreContinueButton;
int[4] libCPGL_gv_cU_ScoreCategoryTitleLabel;
int[4] libCPGL_gv_cU_ScoreCategoryValueLabel;
int libCPGL_gv_cU_ScoreTotalValueLabel;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreRaynorHeal;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreRaynorHyperionDmg;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreSwannHeal;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreSwannDrillDmg;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreArtanisAbsorb;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreArtanisAbsorbLast;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreArtanisKaraxSoADmg;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreVorazunBHDmg;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreVorazunCloakDmg;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreZagaraFrenzyDmg;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreZagaraFrenzyDmgLast;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreZagaraSuicideDmg;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreKerriganDmg;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreAbathurHeal;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreAbathurMonsterDmg;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreAlarakDmg;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreAlarakHeal;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreNovaDmg;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreNovaHeal;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreStukovInfestedDmg;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreStukovMonstrosityDmg;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreFenixChampionDmg;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreFenixSuitDmg;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreDehakaDmg;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreDehakaConsumeSupply;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreHornerMagMineDmg;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreHornerScrapResources;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreTychusGrenadeDmg;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreTychusReaperBombDmg;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreTychusWarhoundTurretDmg;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreTychusFirebatOilDmg;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreTychusHERCImpactDuration;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreTychusMarauderHeal;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreTychusGhostDominatedDmg;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreTychusSpectrePulseDmg;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreTychusMedicHeal;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreTychusOdinDmg;
unitgroup libCPGL_gv_cC_ScoreVorazunBHGroup;
int libCPGL_gv_cC_ScoreTrackedDmgTakenCount;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreZeratulDmg;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreZeratulShieldRestore;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreStetmannGaryDmg;
int[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreStetmannOverload;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreMengskTrooperDamage;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPGL_gv_cC_ScoreMengskRoyalGuardDamage;
int libCPGL_gv_cM_GameOverResult;
bool libCPGL_gv_cM_MissionVictoryActionQueyeEmpty;
int libCPGL_gv_cM_MissionCompleteTime;
int[libCOOC_gv_cCC_MAXPLAYERS + 1] libCPGL_gv_cM_EndMissionResult;
int libCPGL_gv_pC_StatEventLastCampaign;

// Function Declarations
playergroup libCPGL_gf_IntersectionofPlayerGroupsCoop (playergroup lp_playerGroup1, playergroup lp_playerGroup2);
playergroup libCPGL_gf_HumanPlayers ();
bool libCPGL_gf_PlayerinHumanPlayers (int lp_player);
bool libCPGL_gf_PlayerhasaCommanderAllyinPlayerGroup (int lp_player, string lp_commander, playergroup lp_playergroup);
playergroup libCPGL_gf_AllCommandersinPlayerGroup (string lp_commander, playergroup lp_humanplayers);
bool libCPGL_gf_CommanderisinPlayerGroup (string lp_commander, playergroup lp_playerGroup);
point libCPGL_gf_StartLocationOffset (int lp_player, fixed lp_arc, int lp_offset);
string libCPGL_gf_GetClosestRace (string lp_race);
unitgroup libCPGL_gf_CommanderUnitGroup (int lp_commanderunittype);
int libCPGL_gf_CommanderPrestigeCount (int lp_player, string lp_commander);
int libCPGL_gf_CommanderMaxType ();
string libCPGL_gf_ActiveCommanderForPlayer2 (int lp_player);
string libCPGL_gf_GetCommanderDataCommander (int lp_player);
int libCPGL_gf_GetCommanderDataPrestigeLevel (int lp_player);
text libCPGL_gf_GetCommanderDataName (int lp_player);
string libCPGL_gf_GetCommanderDataRace (int lp_player);
string libCPGL_gf_GetCommanderDataSpawnRace (int lp_player);
bool libCPGL_gf_CommanderPrestigeComparison (string lp_commander, int lp_prestigeLevel, int lp_player);
int libCPGL_gf_AttributePrestigeLevel (int lp_player);
string libCPGL_gf_AttributeCommander (int lp_player);
string libCPGL_gf_AttributeCommanderRandom ();
string libCPGL_gf_AttributeCommanderInstance (int lp_player);
string libCPGL_gf_AttributeCommanderInstanceRandom ();
void libCPGL_gf_CalculateMainNat ();
region libCPGL_gf_StartingLocationsOfHumanPlayers ();
void libCPGL_gf_ResourcesInit ();
void libCPGL_gf_ResourceMultiply (string lp_behavior, fixed lp_multiplier, int lp_player);
void libCPGL_gf_HTCAbathur (int lp_player);
void libCPGL_gf_HTCAlarak (int lp_player);
void libCPGL_gf_HTCArtanis (int lp_player);
void libCPGL_gf_HTCDehaka (int lp_player);
void libCPGL_gf_HTCFenix (int lp_player);
void libCPGL_gf_HTCHH (int lp_player);
void libCPGL_gf_HTCKarax (int lp_player);
void libCPGL_gf_HTCKerrigan (int lp_player);
void libCPGL_gf_HTCMengsk (int lp_player);
void libCPGL_gf_HTCRaynor (int lp_player);
void libCPGL_gf_HTCNova (int lp_player);
void libCPGL_gf_HTCStetmann (int lp_player);
void libCPGL_gf_HTCStukov (int lp_player);
void libCPGL_gf_HTCSwann (int lp_player);
void libCPGL_gf_HTCTychus (int lp_player);
void libCPGL_gf_HTCVorazun (int lp_player);
void libCPGL_gf_HTCZagara (int lp_player);
void libCPGL_gf_HTCZeratul (int lp_player);
fixed libCPGL_gf_HTHeroTime ();
fixed libCPGL_gf_BTBuildTime ();
void libCPGL_gf_SetScreenModeCoop (int lp_mode, fixed lp_duration, int lp_player);
void libCPGL_gf_CinematicModeCampaign (bool lp_onOff, fixed lp_duration, bool lp_waitOptions);
void libCPGL_gf_CM_CinematicModeNoWait (bool lp_onOff, fixed lp_duration);
void libCPGL_gf_CM_CinematicModeInternal (bool lp_onOff, fixed lp_duration);
void libCPGL_gf_CNCinematicModeActivate ();
bool libCPGL_gf_PlayerInCinematicModeCampaign2 ();
void libCPGL_gf_CU_UpdateObjectivePanel ();
bool libCPGL_gf_HeroPanelIsVisibleHP ();
bool libCPGL_gf_HeroPanelSlotIsVisibleHP (int lp_slot);
bool libCPGL_gf_PortraitisVisibleforHP ();
void libCPGL_gf_CU_HelpSetupGeneralTips ();
void libCPGL_gf_CU_HelpSetupMutatorTips ();
void libCPGL_gf_SetUnitInfoTextCampaignDetailed (unit lp_unit, text lp_info, text lp_tip, text lp_subTip);
void libCPGL_gf_SetUnitInfoTextCampaign (unit lp_unit, text lp_info, text lp_tip, text lp_subTip);
void libCPGL_gf_CM_ApplyCampaignTeachingToUnit (unit lp_teachUnit);
void libCPGL_gf_CM_UseUnitNameAsUnitTip (unit lp_unit);
void libCPGL_gf_LoadPlayer1Vars (int lp_player);
void libCPGL_gf_LoadPlayer2PrestigeCmdVar (int lp_player);
void libCPGL_gf_LoadPlayer3Commander (int lp_player);
void libCPGL_gf_LoadPlayer4Tech (int lp_player);
void libCPGL_gf_LoadPlayer5StartingUnits (int lp_player);
void libCPGL_gf_LoadPlayer (int lp_player);
void libCPGL_gf_LPTRaynor (int lp_player);
void libCPGL_gf_LPTKerrigan (int lp_player);
void libCPGL_gf_LPTArtanis (int lp_player);
void libCPGL_gf_LPTSwann (int lp_player);
void libCPGL_gf_LPTZagara (int lp_player);
void libCPGL_gf_LPTVorazun (int lp_player);
void libCPGL_gf_LPTKarax (int lp_player);
void libCPGL_gf_LPTAbathur (int lp_player);
void libCPGL_gf_LPTAlarak (int lp_player);
void libCPGL_gf_LPTNova (int lp_player);
void libCPGL_gf_LPTStukov (int lp_player);
void libCPGL_gf_LPTFenix (int lp_player);
void libCPGL_gf_LPTDehaka (int lp_player);
void libCPGL_gf_LPTHH (int lp_player);
void libCPGL_gf_LPTTychus (int lp_player);
void libCPGL_gf_LPTZeratul (int lp_player);
void libCPGL_gf_LPTStetmann (int lp_player);
void libCPGL_gf_LPTMengsk (int lp_player);
void libCPGL_gf_SetCommanderConsole (int lp_player);
void libCPGL_gf_VoicePackOverridesApplyUnused (int lp_player);
void libCPGL_gf_VoicePackCommanderDefaultApply (int lp_player);
int libCPGL_gf_CC_PlayerMasteryLevel (int lp_player);
int libCPGL_gf_CC_PlayerMasteryCategory (string lp_masteryUpgrade);
int libCPGL_gf_CC_PlayerMasteryCategoryPointsAtLevel (int lp_player, int lp_categoryIndex, int lp_level);
int libCPGL_gf_CC_PlayerMasteryCategoryPointsSpent (int lp_player, int lp_categoryIndex);
int libCPGL_gf_CC_PlayerMasteryCategoryPointsAvailable (int lp_player, int lp_categoryIndex);
int libCPGL_gf_CC_PlayerMasteryUpgradeLevel (int lp_player, string lp_masteryUpgrade);
string libCPGL_gf_CC_PlayerMasteryCommander (string lp_masteryUpgrade);
string libCPGL_gf_CC_PlayerMasteryUpgradeData (string lp_masteryUpgrade);
string libCPGL_gf_CC_PlayerMasteryTalent (string lp_masteryUpgrade);
int libCPGL_gf_CC_PlayerMasteryInternalIndex (string lp_masteryUpgrade);
text libCPGL_gf_CC_PlayerMasteryName (string lp_masteryUpgrade);
text libCPGL_gf_CC_PlayerMasteryTooltip (string lp_masteryUpgrade);
text libCPGL_gf_CC_PlayerMasteryValueFormat (string lp_masteryUpgrade);
fixed libCPGL_gf_CC_PlayerMasteryValueIncrement (string lp_masteryUpgrade, int lp_index);
bool libCPGL_gf_CC_PlayerMasteryEnabled (int lp_player);
void libCPGL_gf_CC_PlayerMasteryUpgradeLevelSet (int lp_player, string lp_masteryUpgrade, int lp_level);
void libCPGL_gf_CC_PlayerMasteryLevelSet (int lp_player, int lp_level);
void libCPGL_gf_CC_PlayerMasteryEnabledSet (int lp_player, bool lp_enabled);
void libCPGL_gf_CC_ApplyMasteryTech (int lp_player);
void libCPGL_gf_CC_SaveMasteryToBank (int lp_player, bank lp_bank, string lp_section);
void libCPGL_gf_CC_LoadMasteryFromBank (int lp_player, bank lp_bank, string lp_section);
string libCPGL_gf_CC_CommanderPrestigeIndexFace (string lp_commander, int lp_index);
int libCPGL_gf_CC_PlayerActivePrestigeIndex (int lp_player);
string libCPGL_gf_CC_PlayerActivePrestigeInstance (int lp_player);
string libCPGL_gf_CC_PrestigeCommanderBankKey (string lp_commander, int lp_player);
string libCPGL_gf_CC_PrestigeCommanderTableKey (string lp_commander, int lp_player);
bool libCPGL_gf_CC_PrestigeSuppressed (int lp_player, string lp_suppressionType);
void libCPGL_gf_CC_SetPlayerPrestigeIndex (int lp_player, int lp_index);
void libCPGL_gf_CC_ApplyUpgradeSupplemental (int lp_player, string lp_upgradeSupplemental);
void libCPGL_gf_CC_PlayerPrestigeEnable (int lp_player, string lp_prestige);
void libCPGL_gf_CC_ApplyPrestigeTech (int lp_player);
void libCPGL_gf_CC_SaveChampionToBank3 (int lp_player, bank lp_bank, string lp_section);
void libCPGL_gf_CC_LoadChampionFromBank3 (int lp_player, bank lp_bank, string lp_section);
string libCPGL_gf_ActiveCommanderForPlayer (int lp_player);
int libCPGL_gf_CC_CommanderLevel (int lp_player, string lp_commander);
string libCPGL_gf_CC_PlayerLevelCommander (string lp_playerLevel);
int libCPGL_gf_CC_PlayerLevelValue (string lp_playerLevel);
int libCPGL_gf_CC_PlayerExperience (int lp_player, string lp_commander);
void libCPGL_gf_SetMissionEffort (fixed lp_percentEffort);
fixed libCPGL_gf_CC_PlayerExperienceResultModifier (int lp_result);
fixed libCPGL_gf_CC_PlayerExperienceInLevelPct (int lp_player, string lp_commander);
int libCPGL_gf_CC_PlayerExperienceToNextLevel (int lp_player, string lp_commander);
int libCPGL_gf_CC_PlayerLevelExperienceNeededDelta (int lp_level);
int libCPGL_gf_CC_PlayerLevelExperienceNeededTotal (int lp_level);
int libCPGL_gf_CC_PlayerLevelFromExperience (int lp_experience);
int libCPGL_gf_CC_PlayerAlly (int lp_player);
int libCPGL_gf_CC_MissionExperienceReward ();
fixed libCPGL_gf_CC_MissionExperienceDifficultyBonus (int lp_difficulty);
string libCPGL_gf_CC_CommanderUserInstance (string lp_commander);
string libCPGL_gf_CC_CommanderData (string lp_commander);
string libCPGL_gf_CC_CommanderRace (string lp_commander);
string libCPGL_gf_CC_CommanderSpawnRace (string lp_commander);
int libCPGL_gf_CC_CommanderInternalIndex (string lp_commander);
string libCPGL_gf_CC_CommanderConversationLink (string lp_characterInstance);
string libCPGL_gf_CC_CommanderPortraitModel (string lp_commander);
string libCPGL_gf_CC_CommanderPortraitActor (string lp_commander);
string libCPGL_gf_CC_CommanderCustomImage (string lp_commander);
text libCPGL_gf_CC_CommanderName (string lp_commander);
int libCPGL_gf_CC_CommanderGender (string lp_commander);
text libCPGL_gf_CC_CommanderDescription (string lp_commander);
string libCPGL_gf_CC_CommanderDefaultVoicePack (string lp_commander);
text libCPGL_gf_CC_CommanderInfoDetails (string lp_commander, int lp_detailIndex);
string libCPGL_gf_CC_CommanderSelectCutscene (string lp_commander);
string libCPGL_gf_CC_CommanderConvoTag (string lp_commander);
string libCPGL_gf_CC_CommanderScoreCoopStatistic (string lp_commander);
string libCPGL_gf_CC_CommanderScoreSelfStatistic (string lp_commander);
int libCPGL_gf_CC_CommanderUserFieldInt (string lp_commander, string lp_userType, string lp_userInstance, string lp_userField);
string libCPGL_gf_CC_CommanderHeroUnitType (string lp_commander);
string libCPGL_gf_CC_CommanderHeroStructureType (string lp_commander);
abilcmd libCPGL_gf_CC_CommanderHeroReviveCommand (string lp_commander);
string libCPGL_gf_CC_CommanderHeroReviveUnitType (string lp_commander);
string libCPGL_gf_CC_CommanderHeroReviveLink (string lp_commander);
string libCPGL_gf_CC_CommanderHeroFirstReviveBehavior (string lp_commander);
string libCPGL_gf_CC_CommanderHeroNormalReviveBehavior (string lp_commander);
string libCPGL_gf_CC_CommanderHeroReviverExtraBehavior (string lp_commander);
bool libCPGL_gf_CC_CommanderInGame (string lp_commander);
string libCPGL_gf_CC_CommanderGlobalCastUnitType (string lp_commander);
soundlink libCPGL_gf_CC_CommanderVOLine (string lp_commander, int lp_line);
text libCPGL_gf_CC_CommanderGeneralTipTitle (string lp_tipID);
text libCPGL_gf_CC_CommanderGeneralTipDetails (string lp_tipID);
string libCPGL_gf_CC_CommanderGeneralTipIcon (string lp_tipID);
int libCPGL_gf_CC_CommanderPlayer (string lp_commander);
int libCPGL_gf_CC_PlayerOfCommanderInGroupFirst (string lp_commander, playergroup lp_playerGroup);
playergroup libCPGL_gf_CC_PlayersOfCommander (string lp_commander);
string libCPGL_gf_CC_CommanderSkin (string lp_commander);
void libCPGL_gf_CC_PlayerAwardMissionXP (int lp_result, int lp_player);
void libCPGL_gf_CC_PlayerSetXPScores (int lp_result, int lp_player);
void libCPGL_gf_CC_PlayerCommanderSet (int lp_player, string lp_commander);
void libCPGL_gf_CC_UpdatePlayerLevel (int lp_player);
void libCPGL_gf_CC_PlayerExperienceSet (int lp_player, int lp_experience, string lp_commander);
void libCPGL_gf_CC_PlayerLevelSet (int lp_player, int lp_level, string lp_commander);
void libCPGL_gf_CC_PlayerExperienceAdd (int lp_player, int lp_experience);
void libCPGL_gf_CC_PlayerExperienceSetToLevel (int lp_player, int lp_level, string lp_commander);
void libCPGL_gf_CC_LoadCommandersFromBank (int lp_player, bank lp_bank, string lp_section);
void libCPGL_gf_CC_SaveCommandersToBank (int lp_player, bank lp_bank, string lp_section);
void libCPGL_gf_CC_ResetCurrency (int lp_player);
void libCPGL_gf_CC_ApplyCommanderTech (int lp_player);
void libCPGL_gf_CC_ApplyCommanderTechZeratul (int lp_player);
void libCPGL_gf_CC_UpdateProtossStates (int lp_player);
void libCPGL_gf_CC_UpdateTerranStates (int lp_player);
void libCPGL_gf_CC_ApplyRaceTechTerran (int lp_player);
void libCPGL_gf_CC_ApplyRaceTechZerg (int lp_player);
void libCPGL_gf_CC_ApplyRaceTechProtoss (int lp_player);
void libCPGL_gf_CC_ApplyRaceTechInfestedTerran (int lp_player);
int libCPGL_gf_CC_RaceIndex (string lp_race);
int libCPGL_gf_CC_ZergHeroBonusLife (int lp_player, int lp_startLevel, int lp_endLevel);
int libCPGL_gf_CC_ZergHeroBonusEnergy (int lp_player, int lp_startLevel, int lp_endLevel);
int libCPGL_gf_CC_ZergHeroBonusArmor (int lp_player, int lp_startLevel, int lp_endLevel);
int libCPGL_gf_CC_ZergHeroBonusDamage (int lp_player, int lp_startLevel, int lp_endLevel);
void libCPGL_gf_CC_KerriganApplyModelUpgrades (int lp_player);
void libCPGL_gf_CC_ZergHeroApplyStatBonuses (int lp_player, int lp_level);
void libCPGL_gf_CC_ArmyCategoryStateSet (string lp_armyCategory, int lp_state, int lp_player, string lp_commander);
void libCPGL_gf_CC_UpdateArmyCategoryStates (int lp_player);
string libCPGL_gf_CC_TechUnitOfArmyCategory (string lp_armyCategory);
string libCPGL_gf_CC_ArmyCategoryOfTechUnit (string lp_techUnit);
int libCPGL_gf_CC_ArmyCategoryRequiredLevel (string lp_armyCategory, string lp_commander);
text libCPGL_gf_CC_ArmyCategoryName (string lp_armyCategory);
text libCPGL_gf_CC_ArmyCategoryName2 (string lp_armyCategory);
text libCPGL_gf_CC_ArmyCategoryUnitDescription (string lp_armyCategory);
text libCPGL_gf_CC_ArmyCategoryDescription (string lp_armyCategory);
string libCPGL_gf_CC_ArmyCategoryIcon (string lp_armyCategory);
string libCPGL_gf_CC_ArmyCategoryEvolutionIcon (string lp_armyCategory);
string libCPGL_gf_CC_ArmyCategoryUnitType (string lp_armyCategory);
text libCPGL_gf_StoryArmyUnitTooltip2 (string lp_armyCategory);
bool libCPGL_gf_CC_ArmyCategoryCommanderValid (string lp_armyCategory, string lp_commander);
int libCPGL_gf_CC_ArmyCategoryState (string lp_armyCategory, int lp_player, string lp_commander);
string libCPGL_gf_CC_ArmyCategoryPurchasedUnit (string lp_armyCategory, int lp_player);
bool libCPGL_gf_CC_ArmyCategoryCanUpgrade (string lp_armyCategory, int lp_player);
bool libCPGL_gf_ArmyCategoryStateCheck (string lp_armyCategory, int lp_state, string lp_commander, int lp_player);
bool libCPGL_gf_CC_ArmyCategoryUsedInUI (string lp_armyCategory);
int libCPGL_gf_CC_ArmyCategoryUIOrder (string lp_armyCategory, string lp_commander);
bool libCPGL_gf_CC_ArmyCategoryToastShown (string lp_armyCategory);
bool libCPGL_gf_CC_ArmyCategoryUnlocksExternal (string lp_armyCategory);
string libCPGL_gf_CC_ArmyCategoryStateKey (string lp_category, string lp_commander, int lp_player);
bool libCPGL_gf_CC_ArmyHasUnusedTech ();
void libCPGL_gf_CC_UpdateArmyUpgradeStates (int lp_player);
int libCPGL_gf_CC_ArmyUpgradeState (string lp_upgrade, string lp_commander, int lp_player);
bool libCPGL_gf_CC_ArmyUpgradeStateCheck (string lp_upgrade, int lp_state, string lp_commander, int lp_player);
int libCPGL_gf_CC_ArmyUpgradeRequiredLevel (string lp_upgrade, string lp_commander);
void libCPGL_gf_CC_ArmyUpgradeStateSet (string lp_armyUpgrade, int lp_state, string lp_commander, int lp_player);
text libCPGL_gf_CC_ArmyUpgradeName (string lp_armyUpgrade);
text libCPGL_gf_CC_ArmyUpgradeDescription (string lp_armyUpgrade);
text libCPGL_gf_CC_ArmyUpgradeDescription2 (string lp_armyUpgrade);
string libCPGL_gf_CC_ArmyUpgradeIcon (string lp_armyUpgrade);
string libCPGL_gf_CC_ArmyUpgradeMovie (string lp_armyUpgrade);
string libCPGL_gf_CC_ArmyUpgradeCategory (string lp_armyUpgrade);
int libCPGL_gf_CC_ArmyUpgradeCost (string lp_armyUpgrade);
text libCPGL_gf_CC_ArmyUpgradeTooltip (string lp_armyUpgrade);
text libCPGL_gf_CC_ArmyUpgradeTooltip2 (string lp_armyUpgrade);
string libCPGL_gf_CC_ArmyUpgradeUserData (string lp_armyUpgrade);
string libCPGL_gf_CC_ArmyUpgradeStateKey (string lp_upgrade, string lp_commander, int lp_player);
string libCPGL_gf_CC_StoryArmyUnitUnitType3 (string lp_armyUnit);
string libCPGL_gf_CC_ArmyUnitOfTechUnit (string lp_armyUnit);
string libCPGL_gf_CC_TechUnitOfArmyUnit (string lp_armyUnit);
string libCPGL_gf_StoryArmyUnitInCategory (string lp_category, int lp_index);
text libCPGL_gf_CC_ArmyUnitDescription (string lp_armyUnit);
text libCPGL_gf_StoryArmyUnitTooltip (string lp_armyUnit);
string libCPGL_gf_CC_ArmyUnitIcon (string lp_armyCategory);
bool libCPGL_gf_CC_ArmyUnitStartsLocked (string lp_armyUnit);
int libCPGL_gf_CC_ArmyUnitRequiredLevel (string lp_armyUnit, string lp_commander);
string libCPGL_gf_CC_ArmyCategoryOfArmyUnit (string lp_armyUnit);
string libCPGL_gf_CC_ArmyUnitSkin (string lp_armyCategory);
int libCPGL_gf_CC_StoryArmyUnitState (string lp_armyUnit, string lp_commander, int lp_player);
bool libCPGL_gf_CC_StoryArmyUnitState2 (string lp_armyUnit);
string libCPGL_gf_CC_ArmyUnitStateKey (string lp_armyUnit, string lp_commander, int lp_player);
string libCPGL_gf_CC_ArmyUnitEnableButton (string lp_armyUnit);
void libCPGL_gf_CC_SetArmyUnitState (string lp_armyUnit, int lp_state, string lp_commander, int lp_player);
void libCPGL_gf_CC_ArmyUnitSetNew (string lp_armyUnit, bool lp_new);
void libCPGL_gf_CC_UpdateArmyUnitStates (int lp_player);
void libCPGL_gf_CC_ApplyArmyTech (int lp_player);
void libCPGL_gf_CC_ResetArmyTech (int lp_player);
void libCPGL_gf_CC_PerkStateSet (string lp_perk, int lp_perkState, string lp_commander, int lp_player);
string libCPGL_gf_CC_PerkStateKey (string lp_campaignPerk, string lp_commander, int lp_player);
bool libCPGL_gf_CC_PerkStateCheck (string lp_campaignPerk, int lp_perkState, string lp_commander, int lp_player);
int libCPGL_gf_CC_PerkState (string lp_upgrade, string lp_commander, int lp_player);
void libCPGL_gf_EnableDisableCampaignPerk (bool lp_enableDisable, string lp_perk, int lp_player);
void libCPGL_gf_EnableDisableActivePerks (bool lp_enableDisable, int lp_player);
fixed libCPGL_gf_CostOfAbility (string lp_ability, string lp_costType);
string libCPGL_gf_CC_PerkIcon (string lp_campaignPerk);
string libCPGL_gf_CC_PerkMovie (string lp_campaignPerk);
text libCPGL_gf_CC_PerkTooltip (string lp_campaignPerk);
text libCPGL_gf_CC_PerkDescription (string lp_campaignPerk);
text libCPGL_gf_CC_PerkName (string lp_power);
int libCPGL_gf_CC_PerkUIOrder (string lp_campaignPerk);
int libCPGL_gf_CC_PerkCost (string lp_campaignPerk);
string libCPGL_gf_CC_PerkLevel (string lp_campaignPerk);
void libCPGL_gf_CC_SaveChampionToBank2 (int lp_player, bank lp_bank, string lp_section);
void libCPGL_gf_CC_LoadChampionFromBank2 (int lp_player, bank lp_bank, string lp_section);
void libCPGL_gf_CC_UpdatePerkStates (int lp_player);
void libCPGL_gf_CC_ApplyPerkTech (int lp_player);
void libCPGL_gf_CC_ResetPerkTech (int lp_player);
void libCPGL_gf_CC_PlayerResponseEnable (int lp_player, string lp_response, bool lp_enforceMinLvl);
void libCPGL_gf_CC_ApplyTech (int lp_player);
void libCPGL_gf_CC_ApplyTechPostPrestige (int lp_player);
void libCPGL_gf_CC_UpdateTechStates (int lp_player);
void libCPGL_gf_CC_ResetTech (int lp_player);
void libCPGL_gf_EnableCampaignTechUnit (bool lp_enableDisable, string lp_techUnit, int lp_player);
bool libCPGL_gf_CampaignTechUnitIsEnabled (string lp_techUnit, int lp_player);
string libCPGL_gf_CC_CampaignTechUnitType (string lp_techUnit);
void libCPGL_gf_CC_UpdateWeaponArmorUpgrades (int lp_player);
bool libCPGL_gf_CC_AirUnitsEnabled (int lp_player);
void libCPGL_gf_CC_EnableUpgradeAndAbilityCommandForTech (bool lp_enableDisable, int lp_catalog, string lp_entry, string lp_upgradeField, string lp_abilCommandField, int lp_player);
void libCPGL_gf_CC_SharedUpgradesEnable ();
void libCPGL_gf_CC_SharedUpgradesCheckAndApply (string lp_checkUpgrade);
bool libCPGL_gf_CoopDebugModeIsOn (string lp_mode, int lp_player);
void libCPGL_gf_SetTechRestrictionsCallback (trigger lp_callbackTrigger);
void libCPGL_gf_PurchaseStorymodeTech ();
bool libCPGL_gf_CC_PlaytestModeEnabled ();
bool libCPGL_gf_DebugModeEnabled ();
string libCPGL_gf_ConvertPresettoStringChatCommandType (int lp_type);
void libCPGL_gf_ChatCommand (trigger t, int lp_type, string lp_command);
void libCPGL_gf_DebugMessagePlayer (int lp_type, text lp_message, int lp_player, int lp_area);
void libCPGL_gf_DebugMessagePlayerGroup (int lp_type, text lp_message, playergroup lp_players, int lp_area);
void libCPGL_gf_CU_FanfareCreate ();
void libCPGL_gf_CU_FanfareDisplay (int lp_result, int lp_player);
void libCPGL_gf_CU_FanfareTransmission ();
void libCPGL_gf_CU_ScoreCreate ();
void libCPGL_gf_CU_ScoreDisplay (int lp_player, int lp_result);
void libCPGL_gf_CU_ScoreUpdate (int lp_player, int lp_result);
void libCPGL_gf_CU_ScoreClose (int lp_player);
int libCPGL_gf_CU_ScoreTriggeringPlayer ();
void libCPGL_gf_CU_ScoreClosed (trigger t);
void libCPGL_gf_CC_ScoreInit ();
void libCPGL_gf_CC_SetTychusScoreUnit (int lp_tychusPlayer, string lp_unitType, bool lp_primary);
void libCPGL_gf_TrackUnitDamageTakenForScoreScreen (bool lp_enableDisable, unit lp_trackedUnit, string lp_scoreType);
void libCPGL_gf_CM_MissionEndAwardAchievements (int lp_player);
void libCPGL_gf_GameOver (int lp_gameOverType);
bool libCPGL_gf_GameIsOver ();
void libCPGL_gf_RunMissionVictorySequence (trigger lp_victoryCinematic);
void libCPGL_gf_EndCampaignMission (int lp_type);
void libCPGL_gf_CC_ScoreValueSet (int lp_player, string lp_scoreType, int lp_value);
int libCPGL_gf_CC_StatEventLast ();
void libCPGL_gf_CC_StatEventCreate (string lp_name);
void libCPGL_gf_CC_StatEventAddStr (string lp_key, string lp_value, int lp_event);
void libCPGL_gf_CC_StatEventAddInt (string lp_key, int lp_value, int lp_event);
void libCPGL_gf_CC_StatEventAddReal (string lp_key, fixed lp_value, int lp_event);
void libCPGL_gf_CC_StatEventDone (int lp_statEvent);
void libCPGL_gf_CC_StatRecordMapStart ();

// Trigger Declarations
trigger libCPGL_gt_BugFixes;
trigger libCPGL_gt_Changes;
trigger libCPGL_gt_QualityofLife;
trigger libCPGL_gt_CoopInit;
trigger libCPGL_gt_PlayersInit;
trigger libCPGL_gt_LobbyInit;
trigger libCPGL_gt_AllianceChanges;
trigger libCPGL_gt_GameStart;
trigger libCPGL_gt_PlayerLeavesGame;
trigger libCPGL_gt_MainNatRegionEnter;
trigger libCPGL_gt_MainNatRegionExit;
trigger libCPGL_gt_MainNatCameraGlobalCaster;
trigger libCPGL_gt_HeroTimeStarts;
trigger libCPGL_gt_HeroTimeEnds;
trigger libCPGL_gt_BTBuildTimeStarts;
trigger libCPGL_gt_BTBuildTimeEnds;
trigger libCPGL_gt_CNCinematicModeOn;
trigger libCPGL_gt_CNCinematicModeOff;
trigger libCPGL_gt_Zoomin;
trigger libCPGL_gt_MinimapCameraUpdate;
trigger libCPGL_gt_MinimapAllianceCheck;
trigger libCPGL_gt_MinimapInit;
trigger libCPGL_gt_HelpInit;
trigger libCPGL_gt_CM_CampaignUnitInfoUnitMorphes;
trigger libCPGL_gt_CM_CampaignUnitChangeOwner;
trigger libCPGL_gt_CM_CampaignSolarForgeSelected;
trigger libCPGL_gt_CM_CampaignLaserDrillDamaged;
trigger libCPGL_gt_CM_CampaignLaserDrillSelected;
trigger libCPGL_gt_CM_CampaignLaserDrillCreated;
trigger libCPGL_gt_CM_CampaignCyberneticsDestroyed;
trigger libCPGL_gt_CM_CampaignCybCoreBuilding;
trigger libCPGL_gt_CM_CampaignCyberneticsSelected;
trigger libCPGL_gt_CM_CampaignUnitCreated;
trigger libCPGL_gt_CM_CampaignUnitTeaching;
trigger libCPGL_gt_VoicePackDebug;
trigger libCPGL_gt_CC_PrestigeUpgradeSupplement;
trigger libCPGL_gt_CC_SharedUpgradesRecheck;
trigger libCPGL_gt_HeroSpawn;
trigger libCPGL_gt_Color;
trigger libCPGL_gt_CM_DebugAbathurBiomassLost;
trigger libCPGL_gt_CM_DebugAbathurBiomassReport;
trigger libCPGL_gt_GlobalCasterEnergyLink;
trigger libCPGL_gt_CommanderDebug;
trigger libCPGL_gt_CM_DebugHeroReviveInstant;
trigger libCPGL_gt_CM_DebugCommanderCooldowns;
trigger libCPGL_gt_CM_DebugApplySkin;
trigger libCPGL_gt_CM_DebugTargetSpawnersSet;
trigger libCPGL_gt_CC_DebugDefeatMultiplier;
trigger libCPGL_gt_CC_DebugToggleTechSpam;
trigger libCPGL_gt_CC_DebugToggleTechSuperSpam;
trigger libCPGL_gt_CC_DebugUpdateTech;
trigger libCPGL_gt_CM_DebugGiveOfflineControlRedundant;
trigger libCPGL_gt_CM_DebugVictorySRedundant;
trigger libCPGL_gt_DebugMode;
trigger libCPGL_gt_ChatCommandNormal;
trigger libCPGL_gt_ChatCommandDebug;
trigger libCPGL_gt_ChatCommandCheat;
trigger libCPGL_gt_CU_ScoreClosed;
trigger libCPGL_gt_CU_FanfareDismissed;
trigger libCPGL_gt_CC_ScoreArtanisAbsorb;
trigger libCPGL_gt_CC_ScoreArtanisKaraxOrbitalStrike;
trigger libCPGL_gt_CC_ScoreArtanisBombardment;
trigger libCPGL_gt_CC_ScoreVorazunBHManageGroup;
trigger libCPGL_gt_CC_ScoreVorazunBHDmg;
trigger libCPGL_gt_CC_ScoreVorazunCloakDmg;
trigger libCPGL_gt_CC_ScoreKaraxSolarLance;
trigger libCPGL_gt_CC_ScoreKaraxPurifierBeam;
trigger libCPGL_gt_CC_ScoreKaraxChronoProduction;
trigger libCPGL_gt_CC_ScoreRaynorMedicHeal;
trigger libCPGL_gt_CC_ScoreRaynorHyperionDmg;
trigger libCPGL_gt_CC_ScoreSwannSVHeal;
trigger libCPGL_gt_CC_ScoreSwannDrillDmg;
trigger libCPGL_gt_CC_ScoreKerriganResources;
trigger libCPGL_gt_CC_ScoreKerriganDmg;
trigger libCPGL_gt_CC_ScoreZagaraFrenzyDmg;
trigger libCPGL_gt_CC_ScoreZagaraSuicideDmg;
trigger libCPGL_gt_CC_ScoreZagaraBanelingBarrage;
trigger libCPGL_gt_CC_ScoreAbathurHealing;
trigger libCPGL_gt_CC_ScoreAbathurMonsterDmg;
trigger libCPGL_gt_CC_ScoreAlarakDmg;
trigger libCPGL_gt_CC_ScoreAlarakHeal;
trigger libCPGL_gt_CC_ScoreAlarakSacrificeHeal;
trigger libCPGL_gt_CC_ScoreNovaDmg;
trigger libCPGL_gt_CC_ScoreNovaHeal;
trigger libCPGL_gt_CC_ScoreNovaAbsorb;
trigger libCPGL_gt_CC_ScoreStukovInfestedDmg;
trigger libCPGL_gt_CC_ScoreStukovMonstrosityDmg;
trigger libCPGL_gt_CC_ScoreFenixChampionDmg;
trigger libCPGL_gt_CC_ScoreFenixSuitDmg;
trigger libCPGL_gt_CC_ScoreDehakaDmg;
trigger libCPGL_gt_CC_ScoreDehakaConsumeSupply;
trigger libCPGL_gt_CC_ScoreHornerMagMineDmg;
trigger libCPGL_gt_CC_ScoreHornerScrapPickup;
trigger libCPGL_gt_CC_ScoreTychusGrenadeDmg;
trigger libCPGL_gt_CC_ScoreTychusReaperBombDmg;
trigger libCPGL_gt_CC_ScoreTychusWarhoundTurretDmg;
trigger libCPGL_gt_CC_ScoreTychusFirebatOilDmg;
trigger libCPGL_gt_CC_ScoreTychusHERCImpactDuration;
trigger libCPGL_gt_CC_ScoreTychusMarauderHeal;
trigger libCPGL_gt_CC_ScoreTychusGhostDominatedDmg;
trigger libCPGL_gt_CC_ScoreTychusSpectrePulseDmg;
trigger libCPGL_gt_CC_ScoreTychusMedicHeal;
trigger libCPGL_gt_CC_ScoreTychusMedicHealAoE;
trigger libCPGL_gt_CC_ScoreTychusMedicAbsorb;
trigger libCPGL_gt_CC_ScoreTychusOdinDmg;
trigger libCPGL_gt_CC_ScoreZeratulDmg;
trigger libCPGL_gt_CC_ScoreZeratulShieldRestore;
trigger libCPGL_gt_CC_ScoreStetmannGaryDmg;
trigger libCPGL_gt_CC_ScoreStetmannOverload;
trigger libCPGL_gt_CC_ScoreMengskDamage;
trigger libCPGL_gt_CC_ScoreDebugDisplay;
trigger libCPGL_gt_CC_ScoreEnemiesKilled;
trigger libCPGL_gt_CC_ScoreDynDmgTaken;
trigger libCPGL_gt_CM_AbortMission;
trigger libCPGL_gt_CM_MissionScoreScreenExited;
trigger libCPGL_gt_CM_MissionHandlePlayerQuitGameEnd;
trigger libCPGL_gt_CM_MissionVictoryCheatEndMission;
trigger libCPGL_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute;
trigger libCPGL_gt_CM_MissionVictoryCallbackBlockActionQueue;

// Library Initialization
void libCPGL_InitVariables ();

