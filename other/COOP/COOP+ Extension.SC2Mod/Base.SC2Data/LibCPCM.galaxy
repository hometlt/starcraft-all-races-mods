include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "LibCOOC"
include "LibCOUI"
include "LibCOMU"
include "LibCOMI"
include "LibCOOC"
include "LibCOUI"
include "LibCOMU"
include "LibCOMI"
include "LibCPGL_h"
include "LibCPCD_h"
include "LibCPCC_h"

include "LibCPCM_h"

//--------------------------------------------------------------------------------------------------
// Library: Coop+Mutator
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libCPCM_InitLibraries () {
    libNtve_InitVariables();
    libHots_InitVariables();
    libCOOC_InitVariables();
    libCOUI_InitVariables();
    libCOMU_InitVariables();
    libCOMI_InitVariables();
    libCOOC_InitVariables();
    libCOUI_InitVariables();
    libCOMU_InitVariables();
    libCOMI_InitVariables();
    libCPGL_InitVariables();
    libCPCD_InitVariables();
    libCPCC_InitVariables();
}

// Variable Initialization
bool libCPCM_InitVariables_completed = false;

void libCPCM_InitVariables () {
    int init_i;

    if (libCPCM_InitVariables_completed) {
        return;
    }

    libCPCM_InitVariables_completed = true;

    libCPCM_gv_mutatorGameType = libCPCM_ge_MutatorGameType_NoMutators;
    libCPCM_gv_mutatorUIAllowed = true;
    libCPCM_gv_mutatorMicroAllowed = true;
    libCPCM_gv_mutatorSafeZoneAllowed = true;
    for (init_i = 0; init_i <= libCPGL_gv_humanPlayerCount; init_i += 1) {
        libCPCM_gv_cT_MutatorVisionPlayers[init_i] = PlayerGroupEmpty();
    }
    libCPCM_gv_cT_BarrierRecipients = UnitGroupEmpty();
    libCPCM_gv_cT_TempDamageReflectUnits = UnitGroupEmpty();
    for (init_i = 0; init_i <= libCPCM_gv_cTC_AmonHeroMaxHeroTypes; init_i += 1) {
        libCPCM_gv_cT_AmonHeroSoundArray[init_i] = SoundLink("EditorDefaultSound", -1);
    }
    libCPCM_gv_cT_AmonHeroLastSpawnTimer = TimerCreate();
    libCPCM_gv_cT_Gifts = UnitGroupEmpty();
    libCPCM_gv_cT_CandyBowlTextTag = c_textTagNone;
    libCPCM_gv_cT_FoodHuntWarningLabel = c_invalidDialogControlId;
    libCPCM_gv_cT_FoodHuntAttackLabel = c_invalidDialogControlId;
    libCPCM_gv_cT_OrderCostImmuneUnits = UnitGroupEmpty();
    libCPCM_gv_cT_PolarityPlayer = 1;
    libCPCM_gv_cT_PolarityPlayerTrains = 1;
    libCPCM_gv_cT_BlizzardSpacingTolerance = 10.0;
    libCPCM_gv_cT_RecentBlizzards = UnitGroupEmpty();
    libCPCM_gv_cT_RandomCycleTimer = TimerCreate();
    libCPCM_gv_cT_PurifierBeamTargets = UnitGroupEmpty();
    libCPCM_gv_cT_PurifierBeamBaseAvoidDistance = 25.0;
    libCPCM_gv_cT_Reanimators = UnitGroupEmpty();
    libCPCM_gv_cT_VoidRifts = UnitGroupEmpty();
    libCPCM_gv_cT_VoidRiftLastSpawnedUnits = UnitGroupEmpty();
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libCPCM_gv_cT_BoomBotsDigits[init_i] = 4;
    }
    libCPCM_gv_cT_BoomBotsIndexStart = 40;
    libCPCM_gv_cT_BoomBotsInputTextTagIndex = 5;
    libCPCM_gv_cT_OnDeathSpawns = UnitGroupEmpty();
    libCPCM_gv_cT_SpawnedUnits = UnitGroupEmpty();
    libCPCM_gv_cT_Tornadoes = UnitGroupEmpty();
    libCPCM_gv_cT_StolenStructures = UnitGroupEmpty();
    libCPCM_gv_allMutatorUnits = UnitGroupEmpty();
    libCPCM_gv_allMutatorStructures = UnitGroupEmpty();
    libCPCM_gv_cC_ContestDefaultCommander1 = "TerranRaynor";
    libCPCM_gv_cC_ContestDefaultCommander2 = "ZergKerrigan";
    libCPCM_gv_cC_CoopBankName = "COCampaign";
}

// Presets
// Functions
void libCPCM_gf_MutatorRegister () {
    // Variable Declarations
    string lv_indexMutator;

    // Automatic Variable Declarations
    int autoF9C24CCD_ai;
    int autoF9C24CCD_ae;

    // Variable Initialization

    // Implementation
    libCPCM_gf_RegisterMutator("Avenger", libCPCM_gt_CT_InitializeAvenger, libCPCM_gt_CT_ShutdownAvenger);
    libCPCM_gf_RegisterMutator("Barrier", libCPCM_gt_CT_InitializeBarrier, libCPCM_gt_CT_ShutdownBarrier);
    libCPCM_gf_RegisterMutator("BlackFog", libCPCM_gt_CT_InitializeBlackFog, libCPCM_gt_CT_ShutdownBlackFog);
    libCPCM_gf_RegisterMutator("ConcussiveAttacks", libCPCM_gt_CT_InitializeConcussiveAttacks, libCPCM_gt_CT_ShutdownConcussiveAttacks);
    libCPCM_gf_RegisterMutator("DeathAOE", libCPCM_gt_CT_InitializeDeathAOE, libCPCM_gt_CT_ShutdownDeathAOE);
    libCPCM_gf_RegisterMutator("FireFight", libCPCM_gt_CT_InitializeDeathFire, libCPCM_gt_CT_ShutdownDeathFire);
    libCPCM_gf_RegisterMutator("DropPods", libCPCM_gt_CT_InitializeDropPods, libCPCM_gt_CT_ShutdownDropPods);
    libCPCM_gf_RegisterMutator("Entomb", libCPCM_gt_CT_InitializeEntomb, libCPCM_gt_CT_ShutdownEntomb);
    libCPCM_gf_RegisterMutator("HybridNuke", libCPCM_gt_CT_InitializeHybridDeathNuke, libCPCM_gt_CT_ShutdownHybridDeathNuke);
    libCPCM_gf_RegisterMutator("InfestedTerranSpawner", libCPCM_gt_CT_InitializeOutbreak, libCPCM_gt_CT_ShutdownOutbreak);
    libCPCM_gf_RegisterMutator("JustDie", libCPCM_gt_CT_InitializeJustDie, libCPCM_gt_CT_ShutdownJustDie);
    libCPCM_gf_RegisterMutator("LaserDrill", libCPCM_gt_CT_InitializeLaserDrill, libCPCM_gt_CT_ShutdownLaserDrill);
    libCPCM_gf_RegisterMutator("LavaBurst", libCPCM_gt_CT_InitializeLavaBurst, libCPCM_gt_CT_ShutdownLavaBurst);
    libCPCM_gf_RegisterMutator("LongRange", libCPCM_gt_CT_InitializeLongRange, libCPCM_gt_CT_ShutdownLongRange);
    libCPCM_gf_RegisterMutator("Magnificent", libCPCM_gt_CT_InitializeMagMines, libCPCM_gt_CT_ShutdownMagMines);
    libCPCM_gf_RegisterMutator("NoResources", libCPCM_gt_CT_InitializeMinedOut, libCPCM_gt_CT_ShutdownMinedOut);
    libCPCM_gf_RegisterMutator("AllEnemiesCloaked", libCPCM_gt_CT_InitializePermaCloak, libCPCM_gt_CT_ShutdownPermaCloak);
    libCPCM_gf_RegisterMutator("ReducedVision", libCPCM_gt_CT_InitializeShortSighted, libCPCM_gt_CT_ShutdownShortSighted);
    libCPCM_gf_RegisterMutator("SideStep", libCPCM_gt_CT_InitializeSideStep, libCPCM_gt_CT_ShutdownSideStep);
    libCPCM_gf_RegisterMutator("Fear", libCPCM_gt_CT_InitializeFear, libCPCM_gt_CT_ShutdownFear);
    libCPCM_gf_RegisterMutator("WalkingInfested", libCPCM_gt_CT_InitializeSpawnInfested, libCPCM_gt_CT_ShutdownSpawnInfested);
    libCPCM_gf_RegisterMutator("SpawnBroodlings", libCPCM_gt_CT_InitializeSpawnBroodling, libCPCM_gt_CT_ShutdownSpawnBroodling);
    libCPCM_gf_RegisterMutator("StoneZealots", libCPCM_gt_CT_InitializeStoneZealots, libCPCM_gt_CT_ShutdownStoneZealots);
    libCPCM_gf_RegisterMutator("TemporalField", libCPCM_gt_CT_InitializeTemporalField, libCPCM_gt_CT_ShutdownTemporalField);
    libCPCM_gf_RegisterMutator("TimeWarp", libCPCM_gt_CT_InitializeTimeWarp, libCPCM_gt_CT_ShutdownTimeWarp);
    libCPCM_gf_RegisterMutator("UnitSpeed", libCPCM_gt_CT_InitializeUnitSpeed, libCPCM_gt_CT_ShutdownUnitSpeed);
    libCPCM_gf_RegisterMutator("LazyWorkers", libCPCM_gt_CT_InitializeWorkerSleep, libCPCM_gt_CT_ShutdownWorkerSleep);
    libCPCM_gf_RegisterMutator("VoidRifts", libCPCM_gt_CT_InitializeVoidRifts, libCPCM_gt_CT_ShutdownVoidRifts);
    libCPCM_gf_RegisterMutator("Tornadoes", libCPCM_gt_CT_InitializeTornadoes, libCPCM_gt_CT_ShutdownTornadoes);
    libCPCM_gf_RegisterMutator("OrbitalStrike", libCPCM_gt_CT_InitializeOrbitalStrike, libCPCM_gt_CT_ShutdownOrbitalStrike);
    libCPCM_gf_RegisterMutator("PurifierBeam", libCPCM_gt_CT_InitializePurifierBeam, libCPCM_gt_CT_ShutdownPurifierBeam);
    libCPCM_gf_RegisterMutator("Blizzard", libCPCM_gt_CT_InitializeBlizzard, libCPCM_gt_CT_ShutdownBlizzard);
    libCPCM_gf_RegisterMutator("PhotonOverload", libCPCM_gt_CT_InitializePhotonOverload, libCPCM_gt_CT_ShutdownPhotonOverload);
    libCPCM_gf_RegisterMutator("SpiderMines", libCPCM_gt_CT_InitializeMineFields, libCPCM_gt_CT_ShutdownMineFields);
    libCPCM_gf_RegisterMutator("CycleRandom", libCPCM_gt_CT_InitializeCycleRandom, libCPCM_gt_CT_ShutdownCycleRandom);
    libCPCM_gf_RegisterMutator("Reanimators", libCPCM_gt_CT_InitializeReanimators, libCPCM_gt_CT_ShutdownReanimators);
    libCPCM_gf_RegisterMutator("Nukes", libCPCM_gt_CT_InitializeNukes, libCPCM_gt_CT_ShutdownNukes);
    libCPCM_gf_RegisterMutator("LifeLeech", libCPCM_gt_CT_InitializeLifeLeech, libCPCM_gt_CT_ShutdownLifeLeech);
    libCPCM_gf_RegisterMutator("OopsAllCasters", libCPCM_gt_CT_InitializeAllCasters, libCPCM_gt_CT_ShutdownAllCasters);
    libCPCM_gf_RegisterMutator("OrderCosts", libCPCM_gt_CT_InitializeOrderCosts, libCPCM_gt_CT_ShutdownOrderCosts);
    libCPCM_gf_RegisterMutator("MissileBarrage", libCPCM_gt_CT_InitializeMissileBarrage, libCPCM_gt_CT_ShutdownMissileBarrage);
    libCPCM_gf_RegisterMutator("Vertigo", libCPCM_gt_CT_InitializeVertigo, libCPCM_gt_CT_ShutdownVertigo);
    libCPCM_gf_RegisterMutator("UndyingEvil", libCPCM_gt_CT_InitializeUndyingEvil, libCPCM_gt_CT_ShutdownUndyingEvil);
    libCPCM_gf_RegisterMutator("Polarity", libCPCM_gt_CT_InitializePolarity, libCPCM_gt_CT_ShutdownPolarity);
    libCPCM_gf_RegisterMutator("Evolve", libCPCM_gt_CT_InitializeEvolve, libCPCM_gt_CT_ShutdownEvolve);
    libCPCM_gf_RegisterMutator("UberDarkness", libCPCM_gt_CT_InitializeUberDarkness, libCPCM_gt_CT_ShutdownUberDarkness);
    libCPCM_gf_RegisterMutator("FoodHunt", libCPCM_gt_CT_InitializeFoodHunt, libCPCM_gt_CT_ShutdownFoodHunt);
    libCPCM_gf_RegisterMutator("SharedSupply", libCPCM_gt_CT_InitializeSharedSupply, libCPCM_gt_CT_ShutdownSharedSupply);
    libCPCM_gf_RegisterMutator("TrickOrTreat", libCPCM_gt_CT_InitializeTrickOrTreat, libCPCM_gt_CT_ShutdownTrickOrTreat);
    libCPCM_gf_RegisterMutator("DamageBounce", libCPCM_gt_CT_InitializeDamageBounce, libCPCM_gt_CT_ShutdownDamageBounce);
    libCPCM_gf_RegisterMutator("Plague", libCPCM_gt_CT_InitializePlague, libCPCM_gt_CT_ShutdownPlague);
    libCPCM_gf_RegisterMutator("StructureSteal", libCPCM_gt_CT_InitializeStructureSteal, libCPCM_gt_CT_ShutdownStructureSteal);
    libCPCM_gf_RegisterMutator("GiftFight", libCPCM_gt_CT_InitializeGiftFight, libCPCM_gt_CT_ShutdownGiftFight);
    libCPCM_gf_RegisterMutator("KillKarma", libCPCM_gt_CT_InitializeKillKarma, libCPCM_gt_CT_ShutdownKillKarma);
    libCPCM_gf_RegisterMutator("AfraidOfTheDark", libCPCM_gt_CT_InitializeAfraidOfTheDark, libCPCM_gt_CT_ShutdownAfraidOfTheDark);
    libCPCM_gf_RegisterMutator("Insubordination", libCPCM_gt_CT_InitializeInsubordination, libCPCM_gt_CT_ShutdownInsubordination);
    libCPCM_gf_RegisterMutator("HeroesFromTheStorm", libCPCM_gt_CT_InitializeHeroesFromTheStorm, libCPCM_gt_CT_ShutdownHeroesFromTheStorm);
    libCPCM_gf_RegisterMutator("Inspiration", libCPCM_gt_CT_InitializeInspiration, libCPCM_gt_CT_ShutdownInspiration);
    libCPCM_gf_RegisterMutator("HardenedWill", libCPCM_gt_CT_InitializeHardenedWill, libCPCM_gt_CT_ShutdownHardenedWill);
    libCPCM_gf_RegisterMutator("Fireworks", libCPCM_gt_CT_InitializeFireworks, libCPCM_gt_CT_ShutdownFireworks);
    libCPCM_gf_RegisterMutator("RedEnvelopes", libCPCM_gt_CT_InitializeRedEnvelopes, libCPCM_gt_CT_ShutdownRedEnvelopes);
    libCPCM_gf_RegisterMutator("Sluggish", libCPCM_gt_CT_InitializeSluggishness, libCPCM_gt_CT_ShutdownSluggishness);
    libCPCM_gf_RegisterMutator("DamageReflect", libCPCM_gt_CT_InitializeTempDamageReflect, libCPCM_gt_CT_ShutdownTempDamageReflect);
    libCPCM_gf_RegisterMutator("DeathPull", libCPCM_gt_CT_InitializeDeathPull, libCPCM_gt_CT_ShutdownDeathPull);
    libCPCM_gf_RegisterMutator("Propagate", libCPCM_gt_CT_InitializePropagate, libCPCM_gt_CT_ShutdownPropagate);
    libCPCM_gf_RegisterMutator("KillBots", libCPCM_gt_CT_InitializeKillBots, libCPCM_gt_CT_ShutdownKillBots);
    libCPCM_gf_RegisterMutator("MomentOfSilence", libCPCM_gt_CT_InitializeMomentOfSilence, libCPCM_gt_CT_ShutdownMomentOfSilence);
    libCPCM_gf_RegisterMutator("BoomBots", libCPCM_gt_CT_InitializeBoomBots, libCPCM_gt_CT_ShutdownBoomBots);
    if ((libCPCM_gf_MutatorIsEnabled("CycleRandom") == true)) {
        TriggerExecute(libCPCM_gf_GetMutatorTriggerInitialization("CycleRandom"), true, false);
    }

    autoF9C24CCD_ai = 1;
    autoF9C24CCD_ae = UserDataInstanceCount("Mutators")+1;
    while (autoF9C24CCD_ai < autoF9C24CCD_ae) {
        lv_indexMutator = UserDataInstance("Mutators", autoF9C24CCD_ai);
        autoF9C24CCD_ai = autoF9C24CCD_ai+1;
        if ((lv_indexMutator != "CycleRandom") && (libCPCM_gf_MutatorIsEnabled(lv_indexMutator) == true)) {
            TriggerExecute(libCPCM_gf_GetMutatorTriggerInitialization(lv_indexMutator), true, false);
        }

    }
}

void libCPCM_gf_RegisterMutator (string lp_mutator, trigger lp_initTrigger, trigger lp_shutdownTrigger) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetTrigger(true, ("CT_IN_" + (lp_mutator)), lp_initTrigger);
    DataTableSetTrigger(true, ("CT_SD_" + (lp_mutator)), lp_shutdownTrigger);
}

void libCPCM_gf_MutatorLobbyInit () {
    // Automatic Variable Declarations
    string auto0D91599F_val;
    string autoE8DB9B6D_val;
    string auto2CECA537_val;
    string autoCA89B1BB_val;
    string auto4495127B_val;

    // Implementation
    auto0D91599F_val = GameAttributeGameValue("31");
    if (auto0D91599F_val == "0001") {
        libCPCM_gv_mutatorGameType = libCPCM_ge_MutatorGameType_NoMutators;
    }
    else if (auto0D91599F_val == "0003") {
        libCPCM_gv_mutatorGameType = libCPCM_ge_MutatorGameType_Random;
    }
    else if (auto0D91599F_val == "0002") {
        libCPCM_gv_mutatorGameType = libCPCM_ge_MutatorGameType_Brutal;
    }
    else if (auto0D91599F_val == "0004") {
        libCPCM_gv_mutatorGameType = libCPCM_ge_MutatorGameType_ChaosStudios;
    }
    else if (auto0D91599F_val == "0006") {
        libCPCM_gv_mutatorGameType = libCPCM_ge_MutatorGameType_WeeklyBrutation;
    }
    else if (auto0D91599F_val == "0005") {
        libCPCM_gv_mutatorGameType = libCPCM_ge_MutatorGameType_Curation;
    }
    else {
        libCPCM_gv_mutatorGameType = libCPCM_ge_MutatorGameType_NoMutators;
    }
    autoE8DB9B6D_val = GameAttributeGameValue("30");
    if (autoE8DB9B6D_val == "0001") {
        libCPCM_gv_mutatorIndex = 0;
    }
    else if (autoE8DB9B6D_val == "0008") {
        libCPCM_gv_mutatorIndex = 1;
    }
    else if (autoE8DB9B6D_val == "0009") {
        libCPCM_gv_mutatorIndex = 2;
    }
    else if (autoE8DB9B6D_val == "0010") {
        libCPCM_gv_mutatorIndex = 3;
    }
    else if (autoE8DB9B6D_val == "0011") {
        libCPCM_gv_mutatorIndex = 4;
    }
    else if (autoE8DB9B6D_val == "0012") {
        libCPCM_gv_mutatorIndex = 5;
    }
    else if (autoE8DB9B6D_val == "0013") {
        libCPCM_gv_mutatorIndex = 6;
    }
    else if (autoE8DB9B6D_val == "0002") {
        libCPCM_gv_mutatorIndex = 7;
    }
    else if (autoE8DB9B6D_val == "0003") {
        libCPCM_gv_mutatorIndex = 8;
    }
    else {
        libCPCM_gv_mutatorIndex = 0;
    }
    auto2CECA537_val = GameAttributeGameValue("32");
    if (auto2CECA537_val == "0001") {
        libCPCM_gv_mutatorUIAllowed = true;
    }
    else if (auto2CECA537_val == "0002") {
        libCPCM_gv_mutatorUIAllowed = false;
    }
    else {
        libCPCM_gv_mutatorUIAllowed = true;
    }
    autoCA89B1BB_val = GameAttributeGameValue("33");
    if (autoCA89B1BB_val == "0001") {
        libCPCM_gv_mutatorMicroAllowed = true;
    }
    else if (autoCA89B1BB_val == "0002") {
        libCPCM_gv_mutatorMicroAllowed = false;
    }
    else {
        libCPCM_gv_mutatorMicroAllowed = true;
    }
    auto4495127B_val = GameAttributeGameValue("34");
    if (auto4495127B_val == "0001") {
        libCPCM_gv_mutatorSafeZoneAllowed = true;
    }
    else if (auto4495127B_val == "0002") {
        libCPCM_gv_mutatorSafeZoneAllowed = false;
    }
    else {
        libCPCM_gv_mutatorSafeZoneAllowed = true;
    }
}

bool libCPCM_gf_MutatorsEnabled () {
    // Automatic Variable Declarations
    // Implementation
    return libCPCM_gv_mutatorsEnabled;
}

int libCPCM_gf_GetPlayerDifficultyFromMutatorLevel () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPCM_gv_mutatorIndex > 0)) {
        if ((libCPCM_gv_mutatorIndex > 5)) {
            return 5;
        }
        else {
            return 6;
        }
    }
    else {
        return 4;
    }
}

void libCPCM_gf_MutatorDataInit () {
    // Automatic Variable Declarations
    int auto5B6641C9_val;

    // Implementation
    auto5B6641C9_val = libCPCM_gv_mutatorGameType;
    if (auto5B6641C9_val == libCPCM_ge_MutatorGameType_Random) {
    }
    else if (auto5B6641C9_val == libCPCM_ge_MutatorGameType_Brutal) {
    }
    else if (auto5B6641C9_val == libCPCM_ge_MutatorGameType_ChaosStudios) {
    }
    else if (auto5B6641C9_val == libCPCM_ge_MutatorGameType_WeeklyBrutation) {
    }
    else if (auto5B6641C9_val == libCPCM_ge_MutatorGameType_Curation) {
    }
    else {
    }
}

bool libCPCM_gf_MutatorIsEnabled (string lp_mutator) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto3079C20F_ae = libCPCM_gv_activeMutatorMaxCount;
    const int auto3079C20F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto3079C20F_ai >= 0 && lv_index <= auto3079C20F_ae) || (auto3079C20F_ai < 0 && lv_index >= auto3079C20F_ae) ) ; lv_index += auto3079C20F_ai ) {
        if ((libCPCM_gv_activeMutatorList[lv_index].lv_instance == lp_mutator)) {
            return true;
        }

    }
    return false;
}

color libCPCM_gf_GetColorfromMutatorCategory (string lp_mutatorCategory) {
    // Automatic Variable Declarations
    string auto03ACC789_val;

    // Implementation
    auto03ACC789_val = UserDataGetUserInstance("CoopPlusMutators", lp_mutatorCategory, "Category", 1);
    if (auto03ACC789_val == "Buff") {
        return Color(20*100/255,134*100/255,107*100/255);
    }
    else if (auto03ACC789_val == "Damage") {
        return Color(100.00, 0.00, 0.00);
    }
    else if (auto03ACC789_val == "Death") {
        return Color(149*100/255,150*100/255,151*100/255);
    }
    else if (auto03ACC789_val == "Environment ") {
        return Color(254*100/255,138*100/255,14*100/255);
    }
    else if (auto03ACC789_val == "Micro") {
        return Color(78*100/255,42*100/255,4*100/255);
    }
    else if (auto03ACC789_val == "UI") {
        return Color(100,100,100);
    }
    else if (auto03ACC789_val == "Unit") {
        return Color(16*100/255,98*100/255,70*100/255);
    }
    else {
        return Color(0,0,0);
    }
}

text libCPCM_gf_GetMutatorDataName (string lp_mutator) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Mutators", lp_mutator, "Name", 1);
}

text libCPCM_gf_GetMutatorDataDescription (string lp_mutator) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Mutators", lp_mutator, "Description", 1);
}

string libCPCM_gf_GetMutatorDataIcon (string lp_mutator) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("Mutators", lp_mutator, "Icon", 1);
}

trigger libCPCM_gf_GetMutatorTriggerShutdown (string lp_mutator) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetTrigger(true, ("CT_SD_" + (lp_mutator)));
}

trigger libCPCM_gf_GetMutatorTriggerInitialization (string lp_mutator) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetTrigger(true, ("CT_IN_" + (lp_mutator)));
}

void libCPCM_gf_MutatorGlobalInit (bool lp_enabled) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_enabled == true)) {
        libCPCM_gf_MutatorLobbyInit();
        libCPCM_gf_MutatorRegister();
        libCPCM_gf_MutatorDataInit();
        libCOUI_gf_CU_MutatorListInit();
        libCOMU_gf_CT_InitializeAll();
        libCPGL_gf_CU_HelpSetupGeneralTips();
        libCPGL_gf_CU_HelpSetupMutatorTips();
    }

}

int libCPCM_gf_ActiveMutatorCount () {
    // Variable Declarations
    int lv_index;
    int lv_activeCount;

    // Automatic Variable Declarations
    const int auto7C3038CD_ae = libCPCM_gv_activeMutatorMaxCount;
    const int auto7C3038CD_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto7C3038CD_ai >= 0 && lv_index <= auto7C3038CD_ae) || (auto7C3038CD_ai < 0 && lv_index >= auto7C3038CD_ae) ) ; lv_index += auto7C3038CD_ai ) {
        if ((libCPCM_gv_activeMutatorList[lv_index].lv_instance != null)) {
            lv_activeCount += 1;
        }

    }
    return lv_activeCount;
}

void libCPCM_gf_EnableDisableMutator (bool lp_enableDisable, string lp_mutator) {
    // Variable Declarations
    int lv_indexPlayer;
    int lv_intState;
    trigger lv_shutdownTrigger;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_enableDisable == true)) {
        lv_intState = 1;
    }
    else {
        if ((libCPCM_gf_MutatorIsEnabled(lp_mutator) == true)) {
            lv_shutdownTrigger = libCPCM_gf_GetMutatorTriggerShutdown(lp_mutator);
            if ((lv_shutdownTrigger != null)) {
                TriggerExecute(lv_shutdownTrigger, true, false);
            }

        }

        lv_intState = 0;
    }
    UserDataSetInt("Mutators", lp_mutator, "State", 1, lv_intState);
}

void libCPCM_gf_SetMutatorWeeklyChallengeOn (int lp_challengeIndex) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoF76C9FDA_g;

    // Variable Initialization

    // Implementation
    libCPCM_gv_cT_MutatorIsWeeklyChallenge = true;
    autoF76C9FDA_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoF76C9FDA_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOOC_gf_CC_ScoreValueSet(lv_indexPlayer, "MutatorIsWeeklyChallenge", lp_challengeIndex);
    }
}

bool libCPCM_gf_IsWeeklyMutation () {
    // Automatic Variable Declarations
    // Implementation
    return libCPCM_gv_cT_MutatorIsWeeklyChallenge;
}

bool libCPCM_gf_IsCustomMutators () {
    // Automatic Variable Declarations
    // Implementation
    return libCPCM_gv_cT_MutatorCustomMode;
}

bool libCPCM_gf_IsRandomMutators (string lp_mutator) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("Mutators", lp_mutator, "RandomAllowed", 1) == 1);
}

bool libCPCM_gf_CT_MutatorRandomFirstAllowed (string lp_mutator) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("Mutators", lp_mutator, "RandomFirstAllowed", 1) == 1);
}

bool libCPCM_gf_CustomMutatorsAllowed (string lp_mutator) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("Mutators", lp_mutator, "CustomAllowed", 1) == 1);
}

bool libCPCM_gf_CustomMutatorsMultipleAllowed (string lp_mutator) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("Mutators", lp_mutator, "CustomAllowMultiple", 1) == 1);
}

string libCPCM_gf_IsRandomUnusedCustomMutator () {
    // Variable Declarations
    string lv_randomMutator;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while (true) {
        lv_randomMutator = UserDataInstance("Mutators", RandomInt(1, UserDataInstanceCount("Mutators")));
        if ((libCPCM_gf_CustomMutatorsAllowed(lv_randomMutator) == true) && (lv_randomMutator != "Random") && (lv_randomMutator != "Vertigo") && (libCPCM_gf_MutatorIsEnabled(lv_randomMutator) == false)) {
            return lv_randomMutator;
        }

    }
    return null;
}

void libCPCM_gf_CT_MutatorShutdownTriggerSet (string lp_mutator, trigger lp_shutdownTrigger) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetTrigger(true, ("CT_SD_" + (lp_mutator)), lp_shutdownTrigger);
}

void libCPCM_gf_ToggleMutator (int lp_triggerType, bool lp_onOff) {
    // Automatic Variable Declarations
    int auto6FE394AF_val;

    // Implementation
    if ((lp_onOff == true)) {
        libCPCM_gv_cT_TriggerRefCount[(lp_triggerType)] += 1;
    }
    else {
        libCPCM_gv_cT_TriggerRefCount[(lp_triggerType)] -= 1;
        if ((libCPCM_gv_cT_TriggerRefCount[(lp_triggerType)] < 0)) {
            libCPCM_gv_cT_TriggerRefCount[(lp_triggerType)] = 0;
        }

    }
    if (((lp_onOff == true) || (libCPCM_gv_cT_TriggerRefCount[(lp_triggerType)] == 0))) {
        auto6FE394AF_val = lp_triggerType;
        if (auto6FE394AF_val == libCPCM_ge_CT_TriggerType_UnitDeath) {
            TriggerEnable(libCPCM_gt_UnitDies, lp_onOff);
        }
        else if (auto6FE394AF_val == libCPCM_ge_CT_TriggerType_UnitDamage) {
            TriggerEnable(libCPCM_gt_UnitTakesDamage, lp_onOff);
        }
        else if (auto6FE394AF_val == libCPCM_ge_CT_TriggerType_UnitCreation) {
            TriggerEnable(libCPCM_gt_UnitisCreated, lp_onOff);
        }
        else if (auto6FE394AF_val == libCPCM_ge_CT_TriggerType_OwnerChanges) {
            TriggerEnable(libCPCM_gt_UnitOwnerChanges, lp_onOff);
        }
        else if (auto6FE394AF_val == libCPCM_ge_CT_TriggerType_UnitIssuedOrder) {
            TriggerEnable(libCPCM_gt_UnitisOrdered, lp_onOff);
        }
        else if (auto6FE394AF_val == libCPCM_ge_CT_TriggerType_UpgradeChanged) {
            TriggerEnable(libCPCM_gt_UpgradeChanges, lp_onOff);
        }
        else {
        }
    }

}

bool libCPCM_gf_CT_NearbyCliffs (point lp_testPoint, fixed lp_testDistance) {
    // Automatic Variable Declarations
    // Implementation
    if (((CrossCliff(lp_testPoint, PointWithOffsetPolar(lp_testPoint, lp_testDistance, 0.0)) == true) || (CrossCliff(lp_testPoint, PointWithOffsetPolar(lp_testPoint, lp_testDistance, 45.0)) == true) || (CrossCliff(lp_testPoint, PointWithOffsetPolar(lp_testPoint, lp_testDistance, 90.0)) == true) || (CrossCliff(lp_testPoint, PointWithOffsetPolar(lp_testPoint, lp_testDistance, 135.0)) == true) || (CrossCliff(lp_testPoint, PointWithOffsetPolar(lp_testPoint, lp_testDistance, 180.0)) == true) || (CrossCliff(lp_testPoint, PointWithOffsetPolar(lp_testPoint, lp_testDistance, 225.0)) == true) || (CrossCliff(lp_testPoint, PointWithOffsetPolar(lp_testPoint, lp_testDistance, 270.0)) == true) || (CrossCliff(lp_testPoint, PointWithOffsetPolar(lp_testPoint, lp_testDistance, 315.0)) == true))) {
        return true;
    }
    else {
        return false;
    }
}

bool libCPCM_gf_CT_LineCrossesRegion (point lp_pointA, point lp_pointB, region lp_testRegion) {
    // Variable Declarations
    fixed lv_indexReal;

    // Automatic Variable Declarations
    const fixed auto17513C65_ae = 1.0;
    const fixed auto17513C65_ai = 0.05;

    // Variable Initialization

    // Implementation
    lv_indexReal = 0.0;
    for ( ; ( (auto17513C65_ai >= 0 && lv_indexReal <= auto17513C65_ae) || (auto17513C65_ai < 0 && lv_indexReal >= auto17513C65_ae) ) ; lv_indexReal += auto17513C65_ai ) {
        if ((RegionContainsPoint(lp_testRegion, PointInterpolate(lp_pointA, lp_pointB, lv_indexReal)) == true)) {
            return true;
        }

    }
    return false;
}

bool libCPCM_gf_CT_MutatorUnitIsMapObjective (unit lp_unit) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_unitType = UnitGetType(lp_unit);
    if (((UnitFilterMatch(lp_unit, 1, UnitFilter(0, 0, 0, (1 << (c_targetFilterMapBoss - 32)))) == false) || (lv_unitType == "VoidThrasher") || (lv_unitType == "Caboose") || (lv_unitType == "TarsonisEngineFast") || (lv_unitType == "TarsonisEngine") || (lv_unitType == "FreightCar") || (lv_unitType == "ACPirateCapitalShip") || (lv_unitType == "SlaynElemental") || (lv_unitType == "ArchAngelCoopAssault") || (lv_unitType == "ArchAngelCoopFighter") || (lv_unitType == "RedstoneSalamander") || (lv_unitType == "RedstoneSalamanderBurrowed") || (lv_unitType == "XelNagaConstruct") || (lv_unitType == "Blightbringer") || (lv_unitType == "BlightbringerBurrowed") || (lv_unitType == "NovaEradicator") || (lv_unitType == "ProtossFrigate") || (lv_unitType == "CODXelNagaConstruct"))) {
        return true;
    }

    return false;
}

void libCPCM_gf_CT_ApplyPermaCloak (unit lp_createdUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCPCM_gf_MutatorIsEnabled("AllEnemiesCloaked") == false) || (UnitGetOwner(lp_createdUnit) == c_playerAny) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(lp_createdUnit)) == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterDead - 32)))) == false) || (UnitGetType(lp_createdUnit) == "MutatorStormCloud") || (UnitGetType(lp_createdUnit) == "MutatorTornado") || (UnitGetType(lp_createdUnit) == "VoidThrasher"))) {
        return ;
    }

    UnitBehaviorAddPlayer(lp_createdUnit, "MutatorPermanentlyCloaked", UnitGetOwner(lp_createdUnit), 1);
}

void libCPCM_gf_CT_ApplyUnitSpeed (unit lp_createdUnit) {
    // Variable Declarations
    string lv_createdUnitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_createdUnitType = UnitGetType(lp_createdUnit);
    if (((libCPCM_gf_MutatorIsEnabled("UnitSpeed") == false) || (UnitGetOwner(lp_createdUnit) == c_playerAny) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(lp_createdUnit)) == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == false) || (lv_createdUnitType == "Caboose") || (lv_createdUnitType == "TarsonisEngineFast") || (lv_createdUnitType == "TarsonisEngine") || (lv_createdUnitType == "FreightCar") || (lv_createdUnitType == "ProtossFrigate") || (lv_createdUnitType == "MutatorStormCloud") || (lv_createdUnitType == "MutatorPurifierBeam") || (lv_createdUnitType == "MutatorTornado") || (UnitGetPropertyFixed(lp_createdUnit, c_unitPropBaseMovementSpeed, c_unitPropCurrent) == 0.0) || (UnitGetPropertyFixed(lp_createdUnit, c_unitPropBaseMovementSpeed, c_unitPropCurrent) > 5.5))) {
        return ;
    }

    libCPCM_gv_cT_StatSpeedFreaksSpeedAdded += (5.5 - UnitGetPropertyFixed(lp_createdUnit, c_unitPropBaseMovementSpeed, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_createdUnit, c_unitPropBaseMovementSpeed, 5.5);
}

void libCPCM_gf_CT_ApplyHardenedWill (unit lp_createdUnit) {
    // Variable Declarations
    string lv_createdUnitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickHardenedWill)] == false) || (UnitGetOwner(lp_createdUnit) == c_playerAny) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(lp_createdUnit)) == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == false))) {
        return ;
    }

    UnitBehaviorAdd(lp_createdUnit, "MutatorHardenedWillSelfCycle", lp_createdUnit, 1);
}

void libCPCM_gf_CT_ApplyInspiration (unit lp_createdUnit) {
    // Variable Declarations
    string lv_createdUnitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCPCM_gf_MutatorIsEnabled("Inspiration") == false) || (UnitGetOwner(lp_createdUnit) == c_playerAny) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(lp_createdUnit)) == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == false))) {
        return ;
    }

    UnitBehaviorAdd(lp_createdUnit, "MutatorInspirationSearch", lp_createdUnit, 1);
}

void libCPCM_gf_CT_ApplyUberDarkness (string lp_upgrade, int lp_player) {
    // Automatic Variable Declarations
    string autoEB801E78_val;

    // Implementation
    autoEB801E78_val = lp_upgrade;
    if (autoEB801E78_val == "ZeratulArtifactTier3_RoboticsBay") {
        CatalogFieldValueSet(c_gameCatalogUnit, "ZeratulObserver", "Sight", lp_player, "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "ZeratulObserverSiegeMode", "Sight", lp_player, "0");
    }
    else {
    }
}

void libCPCM_gf_CT_ApplySpawnBroodling (unit lp_killedUnit) {
    // Variable Declarations
    unitgroup lv_broodlingGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_broodlingGroup = UnitGroupEmpty();

    // Implementation
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickAlienIncubation)] == false) || (UnitGetOwner(lp_killedUnit) == c_playerAny) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(lp_killedUnit)) == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == false) || (UnitGroupHasUnit(libCPCM_gv_cT_OnDeathSpawns, lp_killedUnit) == true) || (UnitGetType(lp_killedUnit) == "TerranDropPod") || (UnitGetType(lp_killedUnit) == "ZergDropPodLarge") || (UnitGetType(lp_killedUnit) == "ZergDropPod"))) {
        return ;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(MaxI(FixedToInt(Ceiling(UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed))), 1), "KerriganInfestBroodling", 0, UnitGetOwner(lp_killedUnit), UnitGetPosition(lp_killedUnit));
    UnitGroupAddUnitGroup(libCPCM_gv_cT_OnDeathSpawns, UnitLastCreatedGroup());
    UnitGroupAddUnitGroup(lv_broodlingGroup, UnitLastCreatedGroup());
    libCPCM_gv_cT_StatBroodlingsSpawned += MaxI(FixedToInt(Ceiling(UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed))), 1);
    libCPCM_gf_CT_RegisterSpawnedUnitGroup(UnitLastCreatedGroup());
    AISetGroupScriptControlled(lv_broodlingGroup, false);
    AISetGroupSuicide(lv_broodlingGroup, true);
}

void libCPCM_gf_CT_ApplySpawnInfested (unit lp_killedUnit) {
    // Variable Declarations
    unit lv_indexUnit;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickWalkingInfested)] == false) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(lp_killedUnit)) == false) || (UnitGetOwner(lp_killedUnit) == c_playerAny) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == false) || (UnitGroupHasUnit(libCPCM_gv_cT_OnDeathSpawns, lp_killedUnit) == true) || (libNtve_gf_KillingPlayer() == UnitGetOwner(lp_killedUnit)) || (UnitGetType(lp_killedUnit) == "TerranDropPod") || (UnitGetType(lp_killedUnit) == "ZergDropPodLarge") || (UnitGetType(lp_killedUnit) == "ZergDropPod") || (PathingType(UnitGetPosition(lp_killedUnit)) != c_pathingGround))) {
        return ;
    }
    else {
        lv_owner = UnitGetOwner(lp_killedUnit);
        libNtve_gf_CreateUnitsWithDefaultFacing(MaxI(FixedToInt(Ceiling(UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed))), 1), "InfestedCivilian", c_unitCreateIgnorePlacement, lv_owner, UnitGetPosition(lp_killedUnit));
        UnitGroupAddUnitGroup(libCPCM_gv_cT_OnDeathSpawns, UnitLastCreatedGroup());
        libCPCM_gf_CT_RegisterSpawnedUnitGroup(UnitLastCreatedGroup());
        AISetGroupSuicide(UnitLastCreatedGroup(), true);
    }
}

void libCPCM_gf_CT_ApplyDeathAOE (unit lp_killedUnit) {
    // Variable Declarations
    fixed lv_aOESpawnArea;
    int lv_indexAOE;

    // Automatic Variable Declarations
    int autoEA2A785E_ae;
    const int autoEA2A785E_ai = 1;

    // Variable Initialization
    lv_aOESpawnArea = 1.0;

    // Implementation
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickSelfDestruction)] == false) || (UnitGetOwner(lp_killedUnit) == c_playerAny) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(lp_killedUnit)) == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (UnitGetType(lp_killedUnit) == "TerranDropPod") || (UnitGetType(lp_killedUnit) == "ZergDropPodLarge") || (UnitGetType(lp_killedUnit) == "ZergDropPod"))) {
        return ;
    }

    UnitCreateEffectPoint(lp_killedUnit, "MutatorDeathAOECP", UnitGetPosition(lp_killedUnit));
    if ((UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed) > 2.0)) {
        if (((UnitGetType(lp_killedUnit) == "Caboose") || (UnitGetType(lp_killedUnit) == "TarsonisEngineFast") || (UnitGetType(lp_killedUnit) == "TarsonisEngine") || (UnitGetType(lp_killedUnit) == "FreightCar"))) {
            lv_aOESpawnArea = 2.0;
        }

        autoEA2A785E_ae = FixedToInt(UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed));
        lv_indexAOE = 1;
        for ( ; ( (autoEA2A785E_ai >= 0 && lv_indexAOE <= autoEA2A785E_ae) || (autoEA2A785E_ai < 0 && lv_indexAOE >= autoEA2A785E_ae) ) ; lv_indexAOE += autoEA2A785E_ai ) {
            UnitCreateEffectPoint(lp_killedUnit, "MutatorDeathAOECP", RegionRandomPoint(RegionCircle(UnitGetPosition(lp_killedUnit), lv_aOESpawnArea)));
        }
    }

}

void libCPCM_gf_CT_ApplyFireworks (unit lp_killedUnit) {
    // Variable Declarations
    fixed lv_aOESpawnArea;
    int lv_indexAOE;
    int lv_enemyUnitsRemaining;
    unit lv_fireworkTargetUnit;
    point lv_noTargetPoint;
    bool lv_targetUnitsNearby;

    // Automatic Variable Declarations
    int auto0903E079_ae;
    const int auto0903E079_ai = 1;

    // Variable Initialization
    lv_aOESpawnArea = 1.0;

    // Implementation
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickFireworks)] == false) || (UnitGetOwner(lp_killedUnit) == c_playerAny) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(lp_killedUnit)) == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (UnitGetType(lp_killedUnit) == "TerranDropPod") || (UnitGetType(lp_killedUnit) == "ZergDropPodLarge") || (UnitGetType(lp_killedUnit) == "ZergDropPod"))) {
        return ;
    }

    if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(lp_killedUnit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_killedUnit), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        lv_targetUnitsNearby = true;
        UnitCreateEffectPoint(lp_killedUnit, "MutatorFireworksTargetSearch", UnitGetPosition(lp_killedUnit));
    }
    else {
        lv_noTargetPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_killedUnit), 3.0));
        PointSetHeight(lv_noTargetPoint, 10.0);
        UnitCreateEffectPoint(lp_killedUnit, "MutatorFireworksMissileCP", lv_noTargetPoint);
    }
    if ((UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed) >= 2.0)) {
        if (((UnitGetType(lp_killedUnit) == "Caboose") || (UnitGetType(lp_killedUnit) == "TarsonisEngineFast") || (UnitGetType(lp_killedUnit) == "TarsonisEngine") || (UnitGetType(lp_killedUnit) == "FreightCar"))) {
            lv_aOESpawnArea = 2.0;
        }

        auto0903E079_ae = FixedToInt(UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed));
        lv_indexAOE = 1;
        for ( ; ( (auto0903E079_ai >= 0 && lv_indexAOE <= auto0903E079_ae) || (auto0903E079_ai < 0 && lv_indexAOE >= auto0903E079_ae) ) ; lv_indexAOE += auto0903E079_ai ) {
            if ((lv_targetUnitsNearby == true)) {
                UnitCreateEffectPoint(lp_killedUnit, "MutatorFireworksTargetSearch", UnitGetPosition(lp_killedUnit));
            }
            else {
                lv_noTargetPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_killedUnit), 3.0));
                PointSetHeight(lv_noTargetPoint, 10.0);
                UnitCreateEffectPoint(lp_killedUnit, "MutatorFireworksMissileCP", lv_noTargetPoint);
            }
        }
    }

}

void libCPCM_gf_CT_ApplyHybridDeathNuke (unit lp_killedUnit) {
    // Variable Declarations
    point lv_unitLocation;
    string lv_killedUnitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickHybridNuke)] == false) || (UnitGetOwner(lp_killedUnit) == c_playerAny) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(lp_killedUnit)) == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false))) {
        return ;
    }

    if (((UnitGetType(lp_killedUnit) == "Hybrid") || (UnitGetType(lp_killedUnit) == "Maar") || (UnitGetType(lp_killedUnit) == "HybridBehemoth") || (UnitGetType(lp_killedUnit) == "HybridDestroyer") || (UnitGetType(lp_killedUnit) == "HybridDominatorVoid") || (UnitGetType(lp_killedUnit) == "HybridGeneral") || (UnitGetType(lp_killedUnit) == "HybridNemesis") || (UnitGetType(lp_killedUnit) == "HybridReaver") || (UnitGetType(lp_killedUnit) == "HybridBehemothCoopBoss") || (UnitGetType(lp_killedUnit) == "HybridDominatorCoopBoss")) && (UnitHasBehavior2(lp_killedUnit, "HybridPnPMirrorImage") == false)) {
        lv_unitLocation = UnitGetPosition(lp_killedUnit);
        lv_killedUnitType = UnitGetType(lp_killedUnit);
        if (((UnitGetType(lp_killedUnit) == "HybridNemesis") || (UnitGetType(lp_killedUnit) == "HybridDominatorCoopBoss"))) {
            Wait(2.0, c_timeReal);
        }
        else {
            Wait(1.0, c_timeReal);
        }
        if ((lv_killedUnitType == "HybridDestroyer")) {
            PlayerCreateEffectPoint(3, "HybridNukeDamageSmall", lv_unitLocation);
        }
        else {
            PlayerCreateEffectPoint(3, "HybridNukeDamage", lv_unitLocation);
        }
    }

}

void libCPCM_gf_CT_ApplyDeathFire (unit lp_killedUnit) {
    // Variable Declarations
    int lv_indexFlame;
    fixed lv_fireSpawnArea;
    point lv_unitPosition;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickDeathFire)] == false) || (libCPCM_gf_MutatorIsEnabled("FireFight") == false) || (UnitGetOwner(lp_killedUnit) == c_playerAny) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(lp_killedUnit)) == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (UnitGetType(lp_killedUnit) == "AdeptPhaseShift") || (UnitGetType(lp_killedUnit) == "DisruptorPhased"))) {
        return ;
    }

    lv_unitPosition = UnitGetPosition(lp_killedUnit);
    if ((UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed) <= 1.0)) {
        if (((UnitGetType(lp_killedUnit) == "XelNagaConstruct") || (UnitHasBehavior2(lp_killedUnit, "HybridUnitDummy") == true))) {
            PlayerCreateEffectPoint(UnitGetOwner(lp_killedUnit), "MutatorScorchedEarthFireBeamLargeInitialCP", lv_unitPosition);
        }
        else {
            PlayerCreateEffectPoint(UnitGetOwner(lp_killedUnit), "MutatorScorchedEarthFireBeamSmallInitialCP", lv_unitPosition);
        }
    }
    else {
        if ((UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed) <= 4.0)) {
            PlayerCreateEffectPoint(UnitGetOwner(lp_killedUnit), "MutatorScorchedEarthFireBeamInitialCP", lv_unitPosition);
        }
        else {
            PlayerCreateEffectPoint(UnitGetOwner(lp_killedUnit), "MutatorScorchedEarthFireBeamLargeInitialCP", lv_unitPosition);
        }
    }
}

void libCPCM_gf_CT_ApplyAvenger (unit lp_killedUnit) {
    // Variable Declarations
    unit lv_nearbyUnit;
    fixed lv_actualDistance;
    int lv_index;
    fixed lv_supplyvalue;

    // Automatic Variable Declarations
    unitgroup autoB6A27E11_g;
    int autoB6A27E11_u;

    // Variable Initialization

    // Implementation
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickAvenger)] == false) || (UnitGetOwner(lp_killedUnit) == c_playerAny) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(lp_killedUnit)) == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), 0)) == false))) {
        return ;
    }

    lv_supplyvalue = UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed);
    if ((lv_supplyvalue < 1)) {
        libCPCM_gv_cT_AvengerWimpCounter += 1;
        if ((ModI(libCPCM_gv_cT_AvengerWimpCounter, 2) == 1)) {
            return ;
        }

    }

    autoB6A27E11_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", 1, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_killedUnit), 3.5), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB6A27E11_u = UnitGroupCount(autoB6A27E11_g, c_unitCountAll);
    for (;; autoB6A27E11_u -= 1) {
        lv_nearbyUnit = UnitGroupUnitFromEnd(autoB6A27E11_g, autoB6A27E11_u);
        if (lv_nearbyUnit == null) { break; }
        if ((UnitWeaponCount(lv_nearbyUnit) == 0) && (UnitGetType(lv_nearbyUnit) != "VoidThrasher")) {
            continue;
        }

        lv_actualDistance = DistanceBetweenPoints(UnitGetPosition(lp_killedUnit), UnitGetPosition(lv_nearbyUnit));
        lv_actualDistance -= StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_nearbyUnit), "Radius", c_playerAny));
        lv_actualDistance -= StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lp_killedUnit), "Radius", c_playerAny));
        if ((lv_actualDistance > 1.25)) {
            continue;
        }

        UnitBehaviorAdd(lv_nearbyUnit, "MutatorAvenger", lp_killedUnit, MaxI(FixedToInt(lv_supplyvalue), 1));
        libCPCM_gv_cT_StatAvengerStacksApplied += FixedToInt(UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed));
        libNtve_gf_SendActorMessageToUnit(lv_nearbyUnit, (("SetScale " + FixedToString(((0.08 * UnitBehaviorCount(lv_nearbyUnit, "MutatorAvenger")) + 1.0), 1))));
        libNtve_gf_SendActorMessageToUnit(lv_nearbyUnit, "GlowStart");
    }
}

void libCPCM_gf_CT_ApplyEvolve (unit lp_killingUnit, unit lp_victimUnit) {
    // Variable Declarations
    unit lv_nearbyUnit;
    int lv_index;
    fixed lv_killerSupply;
    fixed lv_victimSupply;
    fixed lv_newSupply;
    fixed lv_lifePercentage;
    fixed lv_shieldPercentage;
    int lv_tier;
    int lv_type;
    int lv_intSupply;
    int lv_intUnit;
    string lv_newUnitType;
    string[11][11] lv_unitTypes;
    point lv_spawnPosition;
    string lv_killerTier;
    string lv_killingUnitTestUnit;
    int lv_tierEndpoint;
    string lv_endpointTestUnit;

    // Automatic Variable Declarations
    const int auto5CDE456A_ae = 10;
    const int auto5CDE456A_ai = 1;
    const int autoF130D7F2_ae = 10;
    const int autoF130D7F2_ai = 1;
    const int autoBBB8BA2D_ae = 1;
    const int autoBBB8BA2D_ai = -1;
    const int auto9E6DDF13_ae = 1;
    const int auto9E6DDF13_ai = -1;
    string autoCC68D266_val;

    // Variable Initialization

    // Implementation
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickEvolve)] == false) || (UnitIsAlive(lp_killingUnit) == false) || (UnitGetOwner(lp_killingUnit) == c_playerAny) || (UnitGetOwner(lp_killingUnit) == 0) || (UnitGetOwner(lp_victimUnit) == 0) || (UnitGetType(lp_killingUnit) == "MutatorKillBot") || (UnitGetType(lp_killingUnit) == "MutatorPropagator") || (UnitGetType(lp_killingUnit) == "MutatorBoomBot") || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(lp_killingUnit)) == false) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(lp_victimUnit)) == true) || (UnitHasBehavior2(lp_killingUnit, "MutatorEvolve") == true) || (UnitFilterMatch(lp_killingUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (libCPCM_gf_CT_MutatorUnitIsMapObjective(lp_killingUnit) == true))) {
        return ;
    }

    lv_tier = 1;
    for ( ; ( (auto5CDE456A_ai >= 0 && lv_tier <= auto5CDE456A_ae) || (auto5CDE456A_ai < 0 && lv_tier >= auto5CDE456A_ae) ) ; lv_tier += auto5CDE456A_ai ) {
        lv_killerTier = UserDataInstance("EvolutionTiers", lv_tier);
        lv_type = 1;
        for ( ; ( (autoF130D7F2_ai >= 0 && lv_type <= autoF130D7F2_ae) || (autoF130D7F2_ai < 0 && lv_type >= autoF130D7F2_ae) ) ; lv_type += autoF130D7F2_ai ) {
            lv_killingUnitTestUnit = UserDataGetUnit("EvolutionTiers", lv_killerTier, "UnitsToEvolveInto", lv_type);
            if ((lv_killingUnitTestUnit == UnitGetType(lp_killingUnit))) {
                lv_killerSupply = lv_tier;
                break;
            }

        }
        if ((lv_killerSupply > 0.0)) {
            break;
        }

    }
    if ((lv_killerSupply == 0.0)) {
        lv_killerSupply = 1.0;
    }
    else {
        if ((lv_killerTier == "Tier10")) {
            return ;
        }

    }
    if ((UnitIsAlive(lp_victimUnit) == true)) {
        lv_victimSupply = 1.0;
    }
    else {
        if (((libCOMI_gv_cM_HeroUnit[1] == lp_victimUnit) || (libCOMI_gv_cM_HeroUnit[2] == lp_victimUnit))) {
            lv_victimSupply = 10.0;
        }
        else {
            if ((UnitGetPropertyFixed(lp_victimUnit, c_unitPropSuppliesUsed, c_unitPropCurrent) < 1)) {
                lv_victimSupply = 1.0;
            }
            else {
                lv_victimSupply = UnitGetPropertyFixed(lp_victimUnit, c_unitPropSuppliesUsed, c_unitPropCurrent);
            }
        }
    }
    lv_newSupply = (lv_victimSupply + lv_killerSupply);
    lv_tier = MinI(FixedToInt(lv_newSupply), 10);
    for ( ; ( (autoBBB8BA2D_ai >= 0 && lv_tier <= autoBBB8BA2D_ae) || (autoBBB8BA2D_ai < 0 && lv_tier >= autoBBB8BA2D_ae) ) ; lv_tier += autoBBB8BA2D_ai ) {
        lv_tierEndpoint = 8;
        for ( ; ( (auto9E6DDF13_ai >= 0 && lv_tierEndpoint <= auto9E6DDF13_ae) || (auto9E6DDF13_ai < 0 && lv_tierEndpoint >= auto9E6DDF13_ae) ) ; lv_tierEndpoint += auto9E6DDF13_ai ) {
            lv_endpointTestUnit = UserDataGetUnit("EvolutionTiers", UserDataInstance("EvolutionTiers", lv_tier), "UnitsToEvolveInto", lv_tierEndpoint);
            if ((lv_endpointTestUnit != "")) {
                break;
            }

        }
        lv_newUnitType = UserDataGetUnit("EvolutionTiers", UserDataInstance("EvolutionTiers", lv_tier), "UnitsToEvolveInto", RandomInt(1, lv_tierEndpoint));
        if ((lv_newUnitType != "")) {
            break;
        }

    }
    lv_spawnPosition = UnitGetPosition(lp_killingUnit);
    PointSetFacing(lv_spawnPosition, UnitGetFacing(lp_killingUnit));
    UnitRemove(lp_killingUnit);
    libNtve_gf_CreateUnitsAtPoint2(1, lv_newUnitType, c_unitCreateIgnorePlacement, UnitGetOwner(lp_killingUnit), lv_spawnPosition);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    UnitBehaviorAdd(UnitLastCreated(), "MutatorEvolve", UnitLastCreated(), 1);
    autoCC68D266_val = libCOMI_gf_GetUnitRace(UnitLastCreated());
    if (autoCC68D266_val == "Prot") {
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MutatorQuickEvolveProtoss");
    }
    else if (autoCC68D266_val == "Terr") {
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MutatorQuickEvolveTerran");
    }
    else if (autoCC68D266_val == "Zerg") {
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MutatorQuickEvolveZerg");
    }
    else {
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MutatorQuickEvolveZerg");
    }
    UnitCreateEffectUnit(lp_victimUnit, "MutatorQuickEvolveMissleLaunch", UnitLastCreated());
    AISetUnitSuicide(UnitLastCreated(), true);
}

void libCPCM_gf_CT_ApplyJustDie (unit lp_createdUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCPCM_gf_MutatorIsEnabled("JustDie") == false) || (UnitGetOwner(lp_createdUnit) == c_playerAny) || (PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(lp_createdUnit)) == true) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), 0)) == false))) {
        return ;
    }

    UnitBehaviorAdd(lp_createdUnit, "MutatorMasterController", lp_createdUnit, 1);
}

void libCPCM_gf_CT_ApplyConcussiveAttacks (unit lp_damagedUnit, unit lp_damagingUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickConcussiveAttacks)] == false) || (PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(lp_damagedUnit)) == false) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(lp_damagingUnit)), UnitGetOwner(lp_damagedUnit)) == false))) {
        return ;
    }

    UnitCreateEffectUnit(lp_damagingUnit, "MutatorConcussiveAttacksAB", lp_damagedUnit);
}

trigger auto_libCPCM_gf_CT_ApplyDamageBounce2_Trigger = null;
unit auto_libCPCM_gf_CT_ApplyDamageBounce2_lp_damagedUnit;
unit auto_libCPCM_gf_CT_ApplyDamageBounce2_lp_damagingUnit;
fixed auto_libCPCM_gf_CT_ApplyDamageBounce2_lp_initialDamageAmount;
string auto_libCPCM_gf_CT_ApplyDamageBounce2_lp_damagingEffect;

void libCPCM_gf_CT_ApplyDamageBounce2 (unit lp_damagedUnit, unit lp_damagingUnit, fixed lp_initialDamageAmount, string lp_damagingEffect) {
    auto_libCPCM_gf_CT_ApplyDamageBounce2_lp_damagedUnit = lp_damagedUnit;
    auto_libCPCM_gf_CT_ApplyDamageBounce2_lp_damagingUnit = lp_damagingUnit;
    auto_libCPCM_gf_CT_ApplyDamageBounce2_lp_initialDamageAmount = lp_initialDamageAmount;
    auto_libCPCM_gf_CT_ApplyDamageBounce2_lp_damagingEffect = lp_damagingEffect;

    if (auto_libCPCM_gf_CT_ApplyDamageBounce2_Trigger == null) {
        auto_libCPCM_gf_CT_ApplyDamageBounce2_Trigger = TriggerCreate("auto_libCPCM_gf_CT_ApplyDamageBounce2_TriggerFunc");
    }

    TriggerExecute(auto_libCPCM_gf_CT_ApplyDamageBounce2_Trigger, false, false);
}

bool auto_libCPCM_gf_CT_ApplyDamageBounce2_TriggerFunc (bool testConds, bool runActions) {
    unit lp_damagedUnit = auto_libCPCM_gf_CT_ApplyDamageBounce2_lp_damagedUnit;
    unit lp_damagingUnit = auto_libCPCM_gf_CT_ApplyDamageBounce2_lp_damagingUnit;
    fixed lp_initialDamageAmount = auto_libCPCM_gf_CT_ApplyDamageBounce2_lp_initialDamageAmount;
    string lp_damagingEffect = auto_libCPCM_gf_CT_ApplyDamageBounce2_lp_damagingEffect;

    // Variable Declarations
    fixed lv_searchRegionRadius;
    region lv_searchRegion;
    fixed lv_bounceTargetsUnitCount;
    unitgroup lv_bounceTargetsUnitGroup;
    fixed lv_difficultyDamageModifier;
    fixed lv_bouncePercentage;
    fixed lv_finalDamageAmount;
    fixed lv_bouncedDamageAmount;
    fixed lv_takenDamageAmount;

    // Automatic Variable Declarations
    unitgroup auto3AD938FF_g;
    int auto3AD938FF_u;
    unit auto3AD938FF_var;
    unitgroup auto61FE6E0B_g;
    int auto61FE6E0B_u;
    unit auto61FE6E0B_var;

    // Variable Initialization
    lv_searchRegionRadius = 5.0;
    lv_bounceTargetsUnitGroup = UnitGroupEmpty();

    // Implementation
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickDamageBounce)] == false) || (EventUnitDamageEffect() == "AttackDummyImpact") || (EventUnitDamageEffect() == "DiffusionDummyImpact") || (PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(lp_damagedUnit)) == true) || (UnitFilterMatch(lp_damagedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral), 0)) == false) || (UnitIsAlive(lp_damagedUnit) == false))) {
        return true;
    }

    lv_bouncePercentage = libCOMI_gf_MinimumDifficultyValueCoopReal(0.25, 0.3, 0.4, 0.5, 0.0, 0.0);
    lv_bouncedDamageAmount = (lp_initialDamageAmount * lv_bouncePercentage);
    lv_takenDamageAmount = (lp_initialDamageAmount - lv_bouncedDamageAmount);
    auto3AD938FF_g = UnitGroupAlliance(UnitGetOwner(lp_damagedUnit), c_unitAllianceAny, RegionCircle(UnitGetPosition(lp_damagedUnit), lv_searchRegionRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto3AD938FF_u = UnitGroupCount(auto3AD938FF_g, c_unitCountAll);
    for (;; auto3AD938FF_u -= 1) {
        auto3AD938FF_var = UnitGroupUnitFromEnd(auto3AD938FF_g, auto3AD938FF_u);
        if (auto3AD938FF_var == null) { break; }
        if ((auto3AD938FF_var != lp_damagedUnit)) {
            lv_bounceTargetsUnitCount += 1.0;
            UnitGroupAdd(lv_bounceTargetsUnitGroup, auto3AD938FF_var);
        }

    }
    if ((lv_bounceTargetsUnitCount != 0)) {
        auto61FE6E0B_g = lv_bounceTargetsUnitGroup;
        auto61FE6E0B_u = UnitGroupCount(auto61FE6E0B_g, c_unitCountAll);
        for (;; auto61FE6E0B_u -= 1) {
            auto61FE6E0B_var = UnitGroupUnitFromEnd(auto61FE6E0B_g, auto61FE6E0B_u);
            if (auto61FE6E0B_var == null) { break; }
            UnitDamage(lp_damagedUnit, "DiffusionDummyImpact", auto61FE6E0B_var, (lv_bouncedDamageAmount / lv_bounceTargetsUnitCount));
        }
        if ((UnitGetPropertyFixed(lp_damagedUnit, c_unitPropShieldsMax, c_unitPropCurrent) != 0.0)) {
            UnitSetPropertyFixed(lp_damagedUnit, c_unitPropShields, (UnitGetPropertyFixed(lp_damagedUnit, c_unitPropShields, c_unitPropCurrent) + lv_bouncedDamageAmount));
            if ((libHots_gf_ActorForUnit(lp_damagedUnit, 420) == null)) {
                ActorCreate(ActorScopeFromUnit(lp_damagedUnit), "Diffusion_Shockwave_Coop", null, null, null);
                libHots_gf_StoreActorForUnit(lp_damagedUnit, 420, libNtve_gf_ActorLastCreated());
                Wait(2.0, c_timeGame);
                libHots_gf_StoreActorForUnit(lp_damagedUnit, 420, null);
            }

        }
        else {
            UnitSetPropertyFixed(lp_damagedUnit, c_unitPropLife, (UnitGetPropertyFixed(lp_damagedUnit, c_unitPropLife, c_unitPropCurrent) + lv_bouncedDamageAmount));
            if ((libHots_gf_ActorForUnit(lp_damagedUnit, 420) == null)) {
                ActorCreate(ActorScopeFromUnit(lp_damagedUnit), "Diffusion_Shockwave_Coop", null, null, null);
                libHots_gf_StoreActorForUnit(lp_damagedUnit, 420, libNtve_gf_ActorLastCreated());
                Wait(2.0, c_timeGame);
                libHots_gf_StoreActorForUnit(lp_damagedUnit, 420, null);
            }

        }
    }

    return true;
}

void libCPCM_gf_CT_ApplyBarrier (unit lp_damagedUnit, unit lp_damagingUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickBarrier)] == false) || (PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(lp_damagedUnit)) == true) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(lp_damagingUnit)), UnitGetOwner(lp_damagedUnit)) == false) || (UnitFilterMatch(lp_damagedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral), 0)) == false) || (UnitGroupHasUnit(libCPCM_gv_cT_BarrierRecipients, lp_damagedUnit) == true) || (UnitTypeTestFlag(UnitGetType(lp_damagedUnit), c_unitFlagDestructible) == true) || (UnitGetType(lp_damagedUnit) == "TempleShakuras02"))) {
        return ;
    }

    UnitBehaviorAdd(lp_damagedUnit, "MutatorBarrier", lp_damagedUnit, 1);
    UnitGroupAdd(libCPCM_gv_cT_BarrierRecipients, lp_damagedUnit);
}

void libCPCM_gf_CT_ApplySideStep (unit lp_damagedUnit, unit lp_damagingUnit) {
    // Variable Declarations
    int lv_safteyIndex;
    int lv_teleportRange;
    point lv_teleportPoint;
    point lv_departPoint;

    // Automatic Variable Declarations
    const int autoC12BD16F_ae = 10;
    const int autoC12BD16F_ai = 1;

    // Variable Initialization
    lv_teleportRange = 5;

    // Implementation
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickSidestep)] == false) || (PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(lp_damagedUnit)) == true) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(lp_damagingUnit)), UnitGetOwner(lp_damagedUnit)) == false) || (UnitFilterMatch(lp_damagedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (UnitHasBehavior2(lp_damagedUnit, "MutatorSideStep") == true) || (UnitWeaponCount(lp_damagedUnit) == 0) || (UnitHasBehavior2(lp_damagedUnit, "UnitKnockback") == true))) {
        return ;
    }

    lv_safteyIndex = 1;
    for ( ; ( (autoC12BD16F_ai >= 0 && lv_safteyIndex <= autoC12BD16F_ae) || (autoC12BD16F_ai < 0 && lv_safteyIndex >= autoC12BD16F_ae) ) ; lv_safteyIndex += autoC12BD16F_ai ) {
        if ((UnitIsAlive(lp_damagingUnit) == true) && (UnitIsAlive(lp_damagedUnit) == true) && (DistanceBetweenPoints(UnitGetPosition(lp_damagedUnit), UnitGetPosition(lp_damagingUnit)) < 20.0)) {
            lv_teleportPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_damagingUnit), lv_teleportRange));
        }
        else {
            if ((UnitIsAlive(lp_damagedUnit) == true)) {
                lv_teleportPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_damagedUnit), lv_teleportRange));
            }
            else {
                return ;
            }
        }
        if ((PathingType(lv_teleportPoint) == c_pathingGround)) {
            lv_departPoint = UnitGetPosition(lp_damagedUnit);
            PointSetFacing(lv_departPoint, AngleBetweenPoints(lv_departPoint, lv_teleportPoint));
            PointSetHeight(lv_departPoint, UnitGetHeight(lp_damagedUnit));
            libNtve_gf_CreateModelWithPointFacing("DarkTemplarChampionBlinkOut", lv_departPoint);
            ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.250000");
            UnitSetPosition(lp_damagedUnit, lv_teleportPoint, false);
            if ((UnitIsAlive(lp_damagingUnit) == true)) {
                libNtve_gf_MakeUnitFacePoint(lp_damagedUnit, UnitGetPosition(lp_damagingUnit), 0.0);
            }

            UnitSetState(lp_damagedUnit, c_unitStateInvulnerable, true);
            UnitBehaviorAdd(lp_damagedUnit, "MutatorSideStep", lp_damagedUnit, 1);
            PointSetFacing(lv_teleportPoint, AngleBetweenPoints(lv_teleportPoint, lv_departPoint));
            PointSetHeight(lv_teleportPoint, UnitGetHeight(lp_damagedUnit));
            libNtve_gf_CreateModelWithPointFacing("DarkTemplarChampionBlinkIn", lv_teleportPoint);
            ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.250000");
            Wait(0.25, c_timeGame);
            UnitSetState(lp_damagedUnit, c_unitStateInvulnerable, false);
            return ;
        }

    }
}

void libCPCM_gf_CT_ApplyFear (unit lp_damagedUnit, unit lp_damagingUnit, fixed lp_damageAmount) {
    // Variable Declarations
    point lv_attackLocation;
    int lv_fearChance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickFear)] == false) || (PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(lp_damagedUnit)) == false) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(lp_damagingUnit)), UnitGetOwner(lp_damagedUnit)) == false) || (UnitFilterMatch(lp_damagedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (UnitHasBehavior2(lp_damagedUnit, "MutatorFear") == true) || (lp_damageAmount <= 0.0))) {
        return ;
    }
    else {
        lv_fearChance = libCOMI_gf_MinimumDifficultyValueCoopInteger(5, 10, 15, 20, 100, 100);
        if ((RandomInt(0, FixedToInt((UnitGetPropertyFixed(lp_damagedUnit, c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(lp_damagedUnit, c_unitPropShieldsMax, c_unitPropCurrent)))) <= lv_fearChance)) {
            if ((lp_damagingUnit != null) && (UnitIsValid(lp_damagingUnit) == true)) {
                lv_attackLocation = UnitGetPosition(lp_damagingUnit);
            }
            else {
                lv_attackLocation = PointWithOffsetPolar(UnitGetPosition(lp_damagedUnit), 1.0, libNtve_gf_RandomAngle());
            }
            UnitBehaviorAdd(lp_damagedUnit, "MutatorFear", lp_damagingUnit, 1);
            UnitIssueOrder(lp_damagedUnit, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_damagedUnit), -5.0, lv_attackLocation)), c_orderQueueReplace);
            Wait(1.0, c_timeGame);
            while ((UnitHasBehavior2(lp_damagedUnit, "MutatorFear") == true) && (UnitIsAlive(lp_damagedUnit) == true)) {
                UnitIssueOrder(lp_damagedUnit, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_damagedUnit), 3.0))), c_orderQueueReplace);
                Wait(0.5, c_timeGame);
            }
            UnitIssueOrder(lp_damagedUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        }

    }
}

void libCPCM_gf_CT_ApplyLifeLeech (unit lp_damagedUnit, unit lp_damagingUnit, fixed lp_damageAmount) {
    // Variable Declarations
    fixed lv_leechPercentage;
    fixed lv_healAmount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickLifeLeech)] == false) || (UnitIsAlive(lp_damagingUnit) == false) || (PlayerGroupHasPlayer(libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Ally, 1), UnitGetOwner(lp_damagingUnit)) == true) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(lp_damagingUnit)), UnitGetOwner(lp_damagedUnit)) == false) || (UnitFilterMatch(lp_damagedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false))) {
        return ;
    }
    else {
        lv_leechPercentage = libCOMI_gf_MinimumDifficultyValueCoopReal(0.25, 0.5, 0.75, 1.0, 1.0, 1.0);
        lv_healAmount = (lp_damageAmount * lv_leechPercentage);
        if ((UnitGetPropertyFixed(lp_damagingUnit, c_unitPropLifePercent, c_unitPropCurrent) < 100.0)) {
            UnitSetPropertyFixed(lp_damagingUnit, c_unitPropLife, (UnitGetPropertyFixed(lp_damagingUnit, c_unitPropLife, c_unitPropCurrent) + lv_healAmount));
        }
        else {
            if ((UnitGetPropertyFixed(lp_damagingUnit, c_unitPropShieldsPercent, c_unitPropCurrent) < 100.0) && (UnitGetPropertyFixed(lp_damagingUnit, c_unitPropShieldsMax, c_unitPropCurrent) > 0.0)) {
                UnitSetPropertyFixed(lp_damagingUnit, c_unitPropShields, (UnitGetPropertyFixed(lp_damagingUnit, c_unitPropShields, c_unitPropCurrent) + lv_healAmount));
            }

        }
    }
}

void libCPCM_gf_CT_ApplyPhotonOverload (unit lp_damagedUnit, unit lp_damagingUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickPhotonOverload)] == false) || (PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(lp_damagedUnit)) == true) || (lp_damagingUnit == null) || (UnitIsValid(lp_damagingUnit) == false) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(lp_damagingUnit)), UnitGetOwner(lp_damagedUnit)) == false) || (UnitFilterMatch(lp_damagedUnit, 1, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (UnitTypeTestFlag(UnitGetType(lp_damagedUnit), c_unitFlagDestructible) == true) || (UnitGetType(lp_damagedUnit) == "TempleShakuras02") || (UnitHasBehavior2(lp_damagedUnit, "MutatorPhotonOvercharge") == true))) {
        return ;
    }

    UnitBehaviorAdd(lp_damagedUnit, "MutatorPhotonOvercharge", lp_damagedUnit, 1);
}

void libCPCM_gf_CT_ApplyReanimatorCorpse (unit lp_killedUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickReanimator)] == false) || (UnitGetOwner(lp_killedUnit) == c_playerAny) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(lp_killedUnit)) == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)) | (1 << (c_targetFilterMapBoss - 32)))) == false) || (UnitFilterMatch(lp_killedUnit, 3, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy), 0)) == true) || (UnitGetType(lp_killedUnit) == "MutatorVoidReanimator") || (libCPCM_gf_CT_MutatorUnitIsMapObjective(lp_killedUnit) == true))) {
        return ;
    }

    libCPCM_gf_CT_CorpseCreate(lp_killedUnit);
}

void libCPCM_gf_CT_ApplyAllSpellsEnergy (unit lp_createdUnit) {
    // Variable Declarations
    string lv_createdUnitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_createdUnitType = UnitGetType(lp_createdUnit);
    if (((libCPCM_gf_MutatorIsEnabled("OopsAllCasters") == false) || (UnitGetOwner(lp_createdUnit) == c_playerAny) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(lp_createdUnit)) == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral), 0)) == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)))) == false) || (UnitGetPropertyFixed(lp_createdUnit, c_unitPropEnergyMax, c_unitPropCurrent) != 0.0) || (libCPCM_gf_CT_AllCastersBlacklistedUnit(lp_createdUnit) == true))) {
        return ;
    }

    UnitSetPropertyFixed(lp_createdUnit, c_unitPropEnergyMax, 200.0);
    UnitSetPropertyFixed(lp_createdUnit, c_unitPropEnergy, 50.0);
    UnitSetPropertyFixed(lp_createdUnit, c_unitPropEnergyRegen, 0.5625);
}

void libCPCM_gf_CT_ApplyOrderCosts (unit lp_orderedUnit, order lp_order) {
    // Variable Declarations
    fixed lv_orderCost;
    bool lv_useVespene;
    int lv_microPlayer;
    string lv_abil;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abil = AbilityCommandGetAbility(OrderGetAbilityCommand(lp_order));

    // Implementation
    lv_microPlayer = OrderGetPlayer(lp_order);
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickOrderCosts)] == false) || (PlayerGroupHasPlayer(libCOOC_gf_CommanderPlayers(), lv_microPlayer) == false) || (OrderGetFlag(lp_order, c_cmdUser) == false) || (UnitGroupHasUnit(libCPCM_gv_cT_OrderCostImmuneUnits, lp_orderedUnit) == true))) {
        return ;
    }

    if ((PlayerGetPropertyInt(lv_microPlayer, c_playerPropMinerals) <= 0)) {
        return ;
    }

    if (((lp_orderedUnit == libCOMI_gv_cM_HeroUnit[lv_microPlayer]) || (lp_orderedUnit == libCOMI_gv_cM_GlobalCasterUnit[lv_microPlayer]) || (UnitHasBehavior2(lp_orderedUnit, "TychusHeroCount") == true))) {
        if ((PlayerGetPropertyInt(UnitGetOwner(lp_orderedUnit), c_playerPropVespene) > 0)) {
            libCOMI_gf_GivePlayerResources(PointWithOffset(UnitGetPosition(lp_orderedUnit), -0.4, 0.0), libCOMI_ge_CacheResourceType_Mineral, -10, null, null, lv_microPlayer);
            libCOMI_gf_GivePlayerResources(PointWithOffset(UnitGetPosition(lp_orderedUnit), 0.4, 0.0), libCOMI_ge_CacheResourceType_Vespene, -5, null, null, lv_microPlayer);
            libCPCM_gv_cT_StatOrderCostVespeneLost[lv_microPlayer] += MinI(PlayerGetPropertyInt(lv_microPlayer, c_playerPropVespene), 5);
            libCPCM_gv_cT_StatOrderCostMineralsLost[lv_microPlayer] += MinI(PlayerGetPropertyInt(lv_microPlayer, c_playerPropMinerals), 10);
        }
        else {
            libCOMI_gf_GivePlayerResources(UnitGetPosition(lp_orderedUnit), libCOMI_ge_CacheResourceType_Mineral, -10, null, null, lv_microPlayer);
            libCPCM_gv_cT_StatOrderCostMineralsLost[lv_microPlayer] += MinI(PlayerGetPropertyInt(lv_microPlayer, c_playerPropMinerals), 10);
        }
    }
    else if (true) {
        if ((UnitTypeTestAttribute(UnitGetType(lp_orderedUnit), c_unitAttributeStructure) == true) && (AbilityClass(lv_abil) != c_classIdCAbilAttack) && (AbilityClass(lv_abil) != c_classIdCAbilMove) && (AbilityClass(lv_abil) != c_classIdCAbilStop) && (AbilityClass(lv_abil) != c_classIdCAbilTransport) && (AbilityClass(lv_abil) != c_classIdCAbilMorph) && (AbilityClass(lv_abil) != c_classIdCAbilMorphPlacement)) {
        }
        else {
            lv_orderCost = FixedToInt(Ceiling((UnitGetPropertyFixed(lp_orderedUnit, c_unitPropSuppliesUsed, c_unitPropCurrent) * -1.0)));
        }
        if (((UnitGetType(lp_orderedUnit) == "Brutalisk") || (UnitGetType(lp_orderedUnit) == "HotSLeviathan"))) {
            lv_useVespene = true;
        }

        if ((UnitTypeGetCost(UnitGetType(lp_orderedUnit), c_unitCostVespene) > 0) && (PlayerGetPropertyInt(lv_microPlayer, c_playerPropVespene) > 0) && (UnitGetType(lp_orderedUnit) != "Roach") && (UnitGetType(lp_orderedUnit) != "RoachVile")) {
            lv_useVespene = true;
        }

        if ((lv_useVespene == true)) {
            libCPCM_gv_cT_StatOrderCostMineralsLost[lv_microPlayer] += MinI(PlayerGetPropertyInt(lv_microPlayer, c_playerPropMinerals), MaxI(AbsI(FixedToInt(lv_orderCost)), 1));
            libCPCM_gv_cT_StatOrderCostVespeneLost[lv_microPlayer] += MinI(PlayerGetPropertyInt(lv_microPlayer, c_playerPropVespene), MaxI(AbsI(FixedToInt(lv_orderCost)), 1));
            libCOMI_gf_GivePlayerResources(PointWithOffset(UnitGetPosition(lp_orderedUnit), -0.36, 0.0), libCOMI_ge_CacheResourceType_Mineral, MinI(FixedToInt(lv_orderCost), -1), null, null, lv_microPlayer);
            libCOMI_gf_GivePlayerResources(PointWithOffset(UnitGetPosition(lp_orderedUnit), 0.36, 0.0), libCOMI_ge_CacheResourceType_Vespene, MinI(FixedToInt(lv_orderCost), -1), null, null, lv_microPlayer);
        }
        else {
            lv_orderCost *= 2.0;
            libCOMI_gf_GivePlayerResources(UnitGetPosition(lp_orderedUnit), libCOMI_ge_CacheResourceType_Mineral, MinI(FixedToInt(lv_orderCost), -1), null, null, lv_microPlayer);
            libCPCM_gv_cT_StatOrderCostMineralsLost[lv_microPlayer] += MinI(PlayerGetPropertyInt(lv_microPlayer, c_playerPropMinerals), MaxI(AbsI(FixedToInt(lv_orderCost)), 1));
        }
    }
}

void libCPCM_gf_CT_ApplyMissileBirth (unit lp_createdUnit) {
    // Variable Declarations
    string lv_createdUnitType;

    // Automatic Variable Declarations
    string auto689372C4_val;

    // Variable Initialization

    // Implementation
    lv_createdUnitType = UnitGetType(lp_createdUnit);
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickMissileMadness)] == false) || (UnitTestState(lp_createdUnit, c_unitStateUsingSupply) == false))) {
        return ;
    }

    auto689372C4_val = lv_createdUnitType;
    if (auto689372C4_val == "MutatorMissileStandard") {
        libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingMissileStandard", UnitGetPosition(lp_createdUnit), ColorWithAlpha(100.00, 52.55, 0.00, 0.00), 0.0);
        PingSetScale(PingLastCreated(), 0.2);
    }
    else if (auto689372C4_val == "MutatorMissileSplitter") {
        libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingMissileStandard", UnitGetPosition(lp_createdUnit), ColorWithAlpha(100.00, 52.55, 0.00, 0.00), 0.0);
        PingSetScale(PingLastCreated(), 0.2);
    }
    else if (auto689372C4_val == "MutatorMissileNuke") {
        libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingNuke", UnitGetPosition(lp_createdUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
        PingSetScale(PingLastCreated(), 0.5);
    }
    else if (auto689372C4_val == "MutatorMissilePointDefense") {
        UnitSetState(lp_createdUnit, c_unitStateTooltipable, true);
        return ;
    }
    else {
        return ;
    }
    PingSetUnit(PingLastCreated(), lp_createdUnit);
    libHots_gf_StorePingForUnit(lp_createdUnit, 1, PingLastCreated());
    libCPCM_gf_CT_RegisterSpawnedUnit(lp_createdUnit);
}

void libCPCM_gf_CT_ApplyMissileDeath (unit lp_deadUnit) {
    // Variable Declarations
    string lv_deadUnitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_deadUnitType = UnitGetType(lp_deadUnit);
    if (((libCPCM_gv_cT_MissileCleanupEnabled == false) || ((lv_deadUnitType != "MutatorMissileStandard") && (lv_deadUnitType != "MutatorMissilePointDefense") && (lv_deadUnitType != "MutatorMissileSplitter") && (lv_deadUnitType != "MutatorMissileNuke")))) {
        return ;
    }

    libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(lp_deadUnit, 1));
}

void libCPCM_gf_CT_ApplyPolarity (unit lp_createdUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCPCM_gf_MutatorIsEnabled("Polarity") == false) || (UnitGetOwner(lp_createdUnit) == c_playerAny) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(lp_createdUnit)) == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == false) || (UnitHasBehavior2(lp_createdUnit, "MutatorImmunetoPlayer1") == true) || (UnitHasBehavior2(lp_createdUnit, "MutatorImmunetoPlayer2") == true))) {
        return ;
    }

    if ((libCOOC_gf_CC_CurrentMap() == "AC_TarsonisTrain") && ((UnitGetType(lp_createdUnit) == "Caboose") || (UnitGetType(lp_createdUnit) == "TarsonisEngineFast") || (UnitGetType(lp_createdUnit) == "TarsonisEngine") || (UnitGetType(lp_createdUnit) == "FreightCar"))) {
        libCPCM_gf_CT_Polarity_TrainApply(lp_createdUnit);
        return ;
    }

    if (libCPCM_gv_cT_PolarityPlayer >= 2) {
        libCPCM_gv_cT_PolarityPlayer = 1;
    }
    else {
        libCPCM_gv_cT_PolarityPlayer = libCPCM_gv_cT_PolarityPlayer + 1;
    }
    if ((libCPCM_gv_cT_PolarityCloneTarget[libCPCM_gv_cT_PolarityPlayer] == null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, libCPCM_gv_cT_PolarityEnemies[libCPCM_gv_cT_PolarityPlayer], Point(0.0, 0.0));
        UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
        libCPCM_gv_cT_PolarityCloneTarget[libCPCM_gv_cT_PolarityPlayer] = UnitLastCreated();
    }

    UnitCreateEffectUnit(lp_createdUnit, "MutatorPolarityMimic", libCPCM_gv_cT_PolarityCloneTarget[libCPCM_gv_cT_PolarityPlayer]);
    if ((libCPCM_gv_cT_PolarityPlayer == 1)) {
        UnitBehaviorAddPlayer(lp_createdUnit, "MutatorImmunetoPlayer1", UnitGetOwner(lp_createdUnit), 1);
    }
    else {
        UnitBehaviorAddPlayer(lp_createdUnit, "MutatorImmunetoPlayer2", UnitGetOwner(lp_createdUnit), 1);
    }
}

trigger auto_libCPCM_gf_CT_ApplyFoodHuntSpawn_Trigger = null;
unit auto_libCPCM_gf_CT_ApplyFoodHuntSpawn_lp_killedUnit;

void libCPCM_gf_CT_ApplyFoodHuntSpawn (unit lp_killedUnit) {
    auto_libCPCM_gf_CT_ApplyFoodHuntSpawn_lp_killedUnit = lp_killedUnit;

    if (auto_libCPCM_gf_CT_ApplyFoodHuntSpawn_Trigger == null) {
        auto_libCPCM_gf_CT_ApplyFoodHuntSpawn_Trigger = TriggerCreate("auto_libCPCM_gf_CT_ApplyFoodHuntSpawn_TriggerFunc");
    }

    TriggerExecute(auto_libCPCM_gf_CT_ApplyFoodHuntSpawn_Trigger, false, false);
}

bool auto_libCPCM_gf_CT_ApplyFoodHuntSpawn_TriggerFunc (bool testConds, bool runActions) {
    unit lp_killedUnit = auto_libCPCM_gf_CT_ApplyFoodHuntSpawn_lp_killedUnit;

    // Variable Declarations
    unit lv_indexUnit;
    int lv_trainWave;
    bool lv_spawnInfested;
    bool lv_spawnKing;
    int lv_trainsLeft;
    int lv_kingPing;
    unit lv_theTurking;

    // Automatic Variable Declarations
    int auto19376FB1_val;
    unitgroup auto3AB70C78_g;
    int auto3AB70C78_u;
    unitgroup autoC89FD49C_g;
    int autoC89FD49C_u;
    const int auto7EA307D1_n = 7;
    int auto7EA307D1_i;

    // Variable Initialization
    lv_kingPing = c_invalidPingId;

    // Implementation
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickFoodHunt)] == false) || ((UnitGetType(lp_killedUnit) != "Caboose") && (UnitGetType(lp_killedUnit) != "TarsonisEngineFast") && (UnitGetType(lp_killedUnit) != "TarsonisEngine") && (UnitGetType(lp_killedUnit) != "FreightCar")))) {
        return true;
    }

    lv_trainWave = FixedToInt(UnitGetCustomValue(lp_killedUnit, 1));
    lv_trainsLeft = (libCOMI_gf_MissionObjectiveItemCountCoop("AC_TarsonisTrain_Primary01") - lv_trainWave);
    if (((lv_trainWave == 3) || (lv_trainWave == 5))) {
        lv_spawnInfested = true;
    }

    if ((lv_spawnInfested == true)) {
        libCPCM_gv_cT_FoodHuntInfestedWaves += 1;
        auto19376FB1_val = libCPCM_gv_cT_FoodHuntInfestedWaves;
        if (auto19376FB1_val == 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 3, 3, 3), "MutatorInfestedTurkey", 0, 3, UnitGetPosition(lp_killedUnit));
        }
        else if (auto19376FB1_val == 2) {
            libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 3, 4, 4, 4), "MutatorInfestedTurkey", 0, 3, UnitGetPosition(lp_killedUnit));
        }
        else if (auto19376FB1_val == 3) {
            libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 2, 4, 6, 6, 6), "MutatorInfestedTurkey", 0, 3, UnitGetPosition(lp_killedUnit));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 2, 4, 6, 6, 6), "MutatorInfestedTurkey", 0, 3, UnitGetPosition(lp_killedUnit));
        }
        UnitGroupAddUnitGroup(libCPCM_gv_cT_OnDeathSpawns, UnitLastCreatedGroup());
        auto3AB70C78_g = UnitLastCreatedGroup();
        auto3AB70C78_u = UnitGroupCount(auto3AB70C78_g, c_unitCountAll);
        for (;; auto3AB70C78_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(auto3AB70C78_g, auto3AB70C78_u);
            if (lv_indexUnit == null) { break; }
            UnitSetState(lv_indexUnit, c_unitStateTooltipable, true);
        }
        libCPCM_gf_CT_RegisterSpawnedUnitGroup(UnitLastCreatedGroup());
        AISetGroupSuicide(UnitLastCreatedGroup(), true);
        DialogControlSetVisible(libCPCM_gv_cT_FoodHuntAttackLabel, PlayerGroupAll(), true);
        SoundPlayForPlayer(SoundLink("MutatorInfestedTurkeysSpawnWarning", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else {
        UnitCreate(5, "MutatorTurkey", 0, 0, UnitGetPosition(lp_killedUnit), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(libCPCM_gv_cT_OnDeathSpawns, UnitLastCreatedGroup());
        autoC89FD49C_g = UnitLastCreatedGroup();
        autoC89FD49C_u = UnitGroupCount(autoC89FD49C_g, c_unitCountAll);
        for (;; autoC89FD49C_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(autoC89FD49C_g, autoC89FD49C_u);
            if (lv_indexUnit == null) { break; }
            UnitSetState(lv_indexUnit, c_unitStateTooltipable, true);
        }
        libCPCM_gf_CT_RegisterSpawnedUnitGroup(UnitLastCreatedGroup());
    }
    if ((libCPCM_gv_cT_FoodHuntKingSpawned == false) && (lv_trainWave == 6)) {
        libCPCM_gv_cT_FoodHuntKingSpawned = true;
        lv_spawnKing = true;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorTurking", 0, 3, PlayerStartLocation(RandomInt(3, 4)));
        UnitGroupAddUnitGroup(libCPCM_gv_cT_OnDeathSpawns, UnitLastCreatedGroup());
        UnitSetState(UnitLastCreated(), c_unitStateTooltipable, true);
        lv_theTurking = UnitLastCreated();
        libCPCM_gf_CT_RegisterSpawnedUnitGroup(UnitLastCreatedGroup());
        AISetGroupSuicide(UnitLastCreatedGroup(), true);
        SoundPlayForPlayer(SoundLink("MutatorTurkeyKingSpawned", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("UI_PingAdvanced_Danger", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libCOMI_gf_CreatePingFacingAngleCoop(libCOOC_gf_HumanPlayers(), UnitGetPosition(lv_theTurking), 270.0, "PingBoss", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
        PingSetUnit(PingLastCreated(), lv_theTurking);
        lv_kingPing = PingLastCreated();
    }

    if (((lv_spawnInfested == true) || (lv_spawnKing == true))) {
        if ((lv_spawnKing == true)) {
            libNtve_gf_SetDialogItemText(libCPCM_gv_cT_FoodHuntAttackLabel, StringExternal("Param/Value/lib_CPCM_765B773A"), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(libCPCM_gv_cT_FoodHuntAttackLabel, StringExternal("Param/Value/lib_CPCM_97CBB33E"), PlayerGroupAll());
        }
        for (auto7EA307D1_i = 1; auto7EA307D1_i <= auto7EA307D1_n; auto7EA307D1_i += 1) {
            Wait(0.2, c_timeGame);
            DialogControlSetVisible(libCPCM_gv_cT_FoodHuntAttackLabel, PlayerGroupAll(), true);
            Wait(0.8, c_timeGame);
            DialogControlSetVisible(libCPCM_gv_cT_FoodHuntAttackLabel, PlayerGroupAll(), false);
        }
        if ((lv_spawnKing == true)) {
            while (!((UnitIsAlive(lv_theTurking) == false))) {
                Wait(0.5, c_timeGame);
            }
            libCOMI_gf_DestroyPingCoop(lv_kingPing);
        }

    }

    return true;
}

void libCPCM_gf_CT_ApplyFoodHuntBounty (unit lp_killedUnit) {
    // Variable Declarations
    int lv_currentFood;
    int lv_indexPlayer;
    int lv_foodBounty;
    int lv_totalLimit;

    // Automatic Variable Declarations
    playergroup auto5BE27DBF_g;

    // Variable Initialization

    // Implementation
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickFoodHunt)] == false) || (UnitGetType(lp_killedUnit) != "MutatorTurkey"))) {
        return ;
    }

    lv_totalLimit = (libCPCM_gv_cT_FoodHuntOriginalSupplyLimit[1]+libCPCM_gv_cT_FoodHuntOriginalSupplyLimit[2]);
    lv_foodBounty = 2;
    auto5BE27DBF_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto5BE27DBF_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        lv_currentFood = PlayerGetPropertyInt(lv_indexPlayer, c_playerPropSuppliesMade);
        lv_currentFood = MinI((lv_currentFood+lv_foodBounty), lv_totalLimit);
        PlayerModifyPropertyInt(lv_indexPlayer, c_playerPropSuppliesMade, c_playerPropOperSetTo, lv_currentFood);
        PlayerModifyPropertyInt(lv_indexPlayer, c_playerPropSuppliesLimit, c_playerPropOperSetTo, lv_currentFood);
        libCOMI_gf_DisplayRewardFloatingText(UnitGetPosition(lp_killedUnit), libCOMI_ge_CacheResourceType_CustomResource, lv_foodBounty, "Assets\\Textures\\btn-doodad-zerg-ancientmeat.dds", null, lv_indexPlayer);
    }
}

void libCPCM_gf_CT_ApplyFoodHuntAggro (unit lp_damagedUnit, unit lp_damagingUnit) {
    // Variable Declarations
    unitgroup lv_turkeyFriends;
    unit lv_indexTurkey;

    // Automatic Variable Declarations
    unitgroup autoDBCCD186_g;
    int autoDBCCD186_u;

    // Variable Initialization
    lv_turkeyFriends = UnitGroupEmpty();

    // Implementation
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickFoodHunt)] == false) || (PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(lp_damagedUnit)) == true) || (UnitGetType(lp_damagedUnit) != "MutatorTurkey"))) {
        return ;
    }

    lv_turkeyFriends = UnitGroup("MutatorTurkey", 0, RegionCircle(UnitGetPosition(lp_damagedUnit), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDBCCD186_g = lv_turkeyFriends;
    autoDBCCD186_u = UnitGroupCount(autoDBCCD186_g, c_unitCountAll);
    for (;; autoDBCCD186_u -= 1) {
        lv_indexTurkey = UnitGroupUnitFromEnd(autoDBCCD186_g, autoDBCCD186_u);
        if (lv_indexTurkey == null) { break; }
        UnitSetOwner(lv_indexTurkey, 3, false);
        UnitSetInfoText(lv_indexTurkey, StringToText(""), StringExternal("Param/Value/lib_CPCM_B5DB7FAD"), StringToText(""));
    }
    if ((lp_damagingUnit != null) && (UnitIsValid(lp_damagingUnit) == true)) {
        UnitGroupIssueOrder(lv_turkeyFriends, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lp_damagingUnit)), c_orderQueueReplace);
    }

}

void libCPCM_gf_CT_ApplyPlague (unit lp_newUnit) {
    // Variable Declarations
    int lv_plagueChance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickPlague)] == false) || (libCPCM_gf_MutatorIsEnabled("Plague") == false) || (UnitGetOwner(lp_newUnit) == c_playerAny) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(lp_newUnit)) == false) || (UnitFilterMatch(lp_newUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterInvulnerable - 32)))) == false) || (UnitGetType(lp_newUnit) == "AdeptPhaseShift") || (UnitGetType(lp_newUnit) == "DisruptorPhased") || (UnitGetType(lp_newUnit) == "BiomassPickup"))) {
        return ;
    }
    else {
        lv_plagueChance = libCOMI_gf_MinimumDifficultyValueCoopInteger(20, 10, 5, 3, 0, 0);
        if ((RandomInt(1, lv_plagueChance) == 1)) {
            UnitBehaviorAdd(lp_newUnit, "MutatorPlagueBehaviorVisual", lp_newUnit, 1);
        }

    }
}

void libCPCM_gf_CT_ApplyPlagueOnDeath (unit lp_killedUnit) {
    // Variable Declarations
    unitgroup lv_playerUnitGroup;
    int lv_infectedUnitCount;
    int lv_infectedUnitCountMax;
    fixed lv_infectionRange;
    point lv_unitPosition;
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto15E6A5C3_g;
    int auto15E6A5C3_u;

    // Variable Initialization
    lv_playerUnitGroup = UnitGroupEmpty();
    lv_infectionRange = 5.0;

    // Implementation
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickPlague)] == false) || (UnitGetOwner(lp_killedUnit) == c_playerAny))) {
        return ;
    }

    if (((UnitHasBehavior2(lp_killedUnit, "MutatorPlagueBehavior") == true) || (UnitHasBehavior2(lp_killedUnit, "MutatorPlagueBehaviorVisual") == true))) {
        lv_infectedUnitCountMax = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 3, 0, 0);
        auto15E6A5C3_g = UnitGroupAlliance(1, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_killedUnit), lv_infectionRange), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto15E6A5C3_u = UnitGroupCount(auto15E6A5C3_g, c_unitCountAll);
        for (;; auto15E6A5C3_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(auto15E6A5C3_g, auto15E6A5C3_u);
            if (lv_indexUnit == null) { break; }
            if (((UnitHasBehavior2(lv_indexUnit, "MutatorPlagueBehavior") == false) && (UnitGetType(lv_indexUnit) != "AdeptPhaseShift") && (UnitGetType(lv_indexUnit) != "BiomassPickup") && (UnitGetType(lv_indexUnit) != "DisruptorPhased") && (UnitGetType(lv_indexUnit) != "Larva") && (UnitGetType(lv_indexUnit) != "SICocoonInfestedOverlord") && (UnitGetType(lv_indexUnit) != "SICocoonInfestedCivilian") && (UnitGetType(lv_indexUnit) != "SICocoonInfestedMarine") && (UnitGetType(lv_indexUnit) != "SICocoonInfestedDiamondBack") && (UnitGetType(lv_indexUnit) != "SICocoonInfestedSiegeTank") && (UnitGetType(lv_indexUnit) != "SICocoonInfestedBanshee") && (UnitGetType(lv_indexUnit) != "SICocoonQueen") && (UnitGetType(lv_indexUnit) != "SICocoonInfestedLiberator") && (UnitGetType(lv_indexUnit) != "DehakaTrainEgg") && (UnitGetType(lv_indexUnit) != "DehakaTrainEggDrone") && (UnitGetType(lv_indexUnit) != "DehakaTrainEggZergling") && (UnitGetType(lv_indexUnit) != "DehakaTrainEggRoach") && (UnitGetType(lv_indexUnit) != "DehakaTrainEggHydralisk") && (UnitGetType(lv_indexUnit) != "DehakaTrainEggSwarmHost") && (UnitGetType(lv_indexUnit) != "DehakaTrainEggUltralisk") && (UnitGetType(lv_indexUnit) != "CODFlatbedTruck") && (UnitGetType(lv_indexUnit) != "CODFlatbedTruckFlying") && ((UnitGetOwner(lv_indexUnit) == 1) || (UnitGetOwner(lv_indexUnit) == 2)))) {
                UnitBehaviorAdd(lv_indexUnit, "MutatorPlagueBehavior", lv_indexUnit, 1);
                lv_infectedUnitCount += 1;
                if ((lv_infectedUnitCount >= lv_infectedUnitCountMax)) {
                    break;
                }

            }

        }
        UnitBehaviorRemove(lp_killedUnit, "MutatorPlagueBehavior", 1);
    }
    else {
        return ;
    }
}

void libCPCM_gf_CT_ApplyStructureSteal (unit lp_killingUnit, unit lp_deadStructure, int lp_killingPlayer) {
    // Variable Declarations
    string lv_structureType;
    int lv_moverType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_structureType = UnitGetType(lp_deadStructure);
    if ((lp_killingUnit != lp_deadStructure) && (PlayerGroupHasPlayer(libCOOC_gf_CommanderPlayers(), UnitGetOwner(lp_killingUnit)) == true)) {
        UnitKill(lp_deadStructure);
        return ;
    }

    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickStructureSteal)] == false) || (UnitGetOwner(lp_deadStructure) == c_playerAny) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(lp_deadStructure)) == true) || (UnitFilterMatch(lp_deadStructure, 1, UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), 0)) == false) || (UnitHasBehavior2(lp_deadStructure, "MutatorHouseHunters") == false) || (lv_structureType == "NydusNetworkAlly") || (lv_structureType == "NydusCanalAlly") || (lv_structureType == "GreaterNydusWormAlly") || (lv_structureType == "CybrosEscortDownloader") || (lv_structureType == "HHStarport") || (lv_structureType == "HHStarportFlying") || (lv_structureType == "TychusOdin") || (lv_structureType == "TychusResearchCenter") || (lv_structureType == "TychusResearchCenterUnlocked") || (lv_structureType == "PowerTowerStetmann"))) {
        UnitKill(lp_deadStructure);
        return ;
    }

    if ((UnitFilterMatch(lp_deadStructure, 1, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), 0)) == false)) {
        if ((lv_structureType == "SIInfestedBunkerUprooted")) {
            UnitKill(lp_deadStructure);
        }

        return ;
    }

    UnitBehaviorRemove(lp_deadStructure, "MutatorHouseHunters", 1);
    UnitSetPropertyFixed(lp_deadStructure, c_unitPropLifePercent, 100.0);
    if ((UnitGetPropertyFixed(lp_deadStructure, c_unitPropShieldsMax, c_unitPropCurrent) > 0.0)) {
        UnitSetPropertyFixed(lp_deadStructure, c_unitPropShieldsPercent, 100.0);
    }

    UnitSetOwner(lp_deadStructure, lp_killingPlayer, true);
    UnitGroupAdd(libCPCM_gv_cT_StolenStructures, lp_deadStructure);
    UnitGroupAdd(libCPCM_gv_cT_SpawnedUnits, lp_deadStructure);
    UnitBehaviorRemove(UnitLastCreated(), "PowerUserBaseDefenseSmall", 1);
    UnitBehaviorRemove(UnitLastCreated(), "PowerUserQueue", 1);
    if ((lp_killingUnit != null) && (UnitGetPropertyFixed(lp_killingUnit, c_unitPropMovementSpeed, c_unitPropCurrent) != 0.0) && (UnitPathableToPoint(lp_killingUnit, PlayerStartLocation(1), 5.0, 100000.0) == false)) {
        UnitKill(lp_deadStructure);
    }

}

void libCPCM_gf_CT_ApplyStructureStealBehavior (unit lp_createdUnit) {
    // Variable Declarations
    string lv_structureType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_structureType = UnitGetType(lp_createdUnit);
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickStructureSteal)] == false) || (UnitGetOwner(lp_createdUnit) == c_playerAny) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(lp_createdUnit)) == true) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), 0)) == false) || (lv_structureType == "DrakkenLaserDrillCoop") || (lv_structureType == "UnfinishedDrakkenLaserDrillCoop") || (lv_structureType == "DamagedSolarForge") || (lv_structureType == "SolarForge") || (lv_structureType == "NydusNetworkAlly") || (lv_structureType == "NydusCanalAlly") || (lv_structureType == "GreaterNydusWormAlly") || (lv_structureType == "HHStarport") || (lv_structureType == "HHStarportFlying") || (lv_structureType == "ToxicNest") || (lv_structureType == "ToxicNestBurrowed"))) {
        return ;
    }

    UnitBehaviorAdd(lp_createdUnit, "MutatorHouseHunters", lp_createdUnit, 1);
}

void libCPCM_gf_CT_ApplyWinterCheer (unit lp_createdUnit) {
    // Variable Declarations
    string lv_createdUnitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCPCM_gf_MutatorIsEnabled("GiftFight") == false) || (UnitGetOwner(lp_createdUnit) == c_playerAny) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(lp_createdUnit)) == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == false))) {
        return ;
    }

    lv_createdUnitType = UnitGetType(lp_createdUnit);
    if ((lv_createdUnitType == "ProtossFrigate") && (libCPCM_gv_cT_GiftShuttlesOvercharged > 0)) {
        UnitBehaviorAddPlayer(lp_createdUnit, "MutatorShuttleOvercharge", 3, 1);
        libCPCM_gv_cT_GiftShuttlesOvercharged -= 1;
        return ;
    }

    if ((lv_createdUnitType != "Hybrid") && (lv_createdUnitType != "HybridReaver") && (lv_createdUnitType != "HybridDestroyer") && (lv_createdUnitType != "HybridDominatorVoid") && (lv_createdUnitType != "HybridNemesis") && (lv_createdUnitType != "HybridBehemoth")) {
        return ;
    }

    libNtve_gf_SendActorMessageToUnit(lp_createdUnit, "Create MutatorWinterHat");
}

void libCPCM_gf_CT_ApplyKillKarma (unit lp_killer, unit lp_killedUnit) {
    // Variable Declarations
    int lv_totalKills;
    int lv_behaviorIndex;
    unit lv_actualKiller;
    string lv_creditor;
    int lv_creditorEffectUnit;

    // Automatic Variable Declarations
    int auto9A773A6D_ae;
    const int auto9A773A6D_ai = 1;
    string auto5F0C6011_val;

    // Variable Initialization
    lv_creditor = "";
    lv_creditorEffectUnit = c_effectUnitCaster;

    // Implementation
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickKillKarma)] == false) || (lp_killer == null) || (UnitIsValid(lp_killer) == false) || (PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(lp_killer)) == false))) {
        return ;
    }

    lv_actualKiller = lp_killer;
    if ((UnitGetMagazine(lp_killer) != null)) {
        lv_actualKiller = UnitGetMagazine(lp_killer);
    }
    else {
        auto9A773A6D_ae = UnitBehaviorCountAll(lp_killer);
        lv_behaviorIndex = 1;
        for ( ; ( (auto9A773A6D_ai >= 0 && lv_behaviorIndex <= auto9A773A6D_ae) || (auto9A773A6D_ai < 0 && lv_behaviorIndex >= auto9A773A6D_ae) ) ; lv_behaviorIndex += auto9A773A6D_ai ) {
            if (((UnitBehaviorGet(lp_killer, lv_behaviorIndex) == "") || (CatalogEntryScope(c_gameCatalogBehavior, UnitBehaviorGet(lp_killer, lv_behaviorIndex)) != "CBehaviorBuff"))) {
                continue;
            }

            lv_creditor = CatalogFieldValueGet(c_gameCatalogBehavior, UnitBehaviorGet(lp_killer, lv_behaviorIndex), "KillCredit.Value", c_playerAny);
            if ((lv_creditor != "Unknown")) {
                auto5F0C6011_val = lv_creditor;
                if (auto5F0C6011_val == "Caster") {
                    lv_creditorEffectUnit = c_effectUnitCaster;
                }
                else if (auto5F0C6011_val == "Origin") {
                    lv_creditorEffectUnit = c_effectUnitOrigin;
                }
                else if (auto5F0C6011_val == "Outer") {
                    lv_creditorEffectUnit = c_effectUnitOuter;
                }
                else if (auto5F0C6011_val == "Source") {
                    lv_creditorEffectUnit = c_effectUnitSource;
                }
                else if (auto5F0C6011_val == "Target") {
                    lv_creditorEffectUnit = c_effectUnitTarget;
                }
                else {
                }
                lv_actualKiller = UnitBehaviorEffectUnit(lp_killer, UnitBehaviorGet(lp_killer, lv_behaviorIndex), lv_creditorEffectUnit, 0);
                break;
            }

        }
    }
    if ((lv_actualKiller == null)) {
        return ;
    }

    lv_totalKills = libNtve_gf_UnitGetPropertyKills(lv_actualKiller, c_unitPropCurrent);
    UnitBehaviorAdd(lv_actualKiller, "MutatorKarmaIncreasedDamageVet", lv_actualKiller, 1);
    UnitXPSetCurrentLevel(lv_actualKiller, "MutatorKarmaIncreasedDamageVet", lv_totalKills);
}

void libCPCM_gf_CT_ApplyAfraidOfTheDark (unit lp_orderedUnit, order lp_order) {
    // Variable Declarations
    point lv_orderLocation;
    int lv_microPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_microPlayer = UnitGetOwner(lp_orderedUnit);
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickAfraidOfTheDark)] == false) || (PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), lv_microPlayer) == false) || (OrderGetFlag(lp_order, 8) == false))) {
        return ;
    }

    lv_orderLocation = OrderGetTargetPosition(lp_order);
    if (((VisIsVisibleForPlayer(1, lv_orderLocation) == true) || (lv_orderLocation == null))) {
    }
    else {
        UnitIssueOrder(lp_orderedUnit, OrderTargetingPoint(OrderGetAbilityCommand(lp_order), UnitGetPosition(lp_orderedUnit)), c_orderQueueReplace);
    }
}

void libCPCM_gf_CT_ApplyInsubordination (unit lp_orderedUnit, order lp_order) {
    // Variable Declarations
    point lv_orderLocation;
    int lv_microPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_microPlayer = UnitGetOwner(lp_orderedUnit);
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickInsubordination)] == false) || (PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), lv_microPlayer) == false) || (OrderGetFlag(lp_order, 8) == false) || (OrderGetTargetPosition(lp_order) == null) || (OrderGetTargetType(lp_order) == c_orderTargetNone) || (OrderGetTargetType(lp_order) == c_orderTargetNone))) {
        return ;
    }

    lv_orderLocation = OrderGetTargetPosition(lp_order);
    if ((RandomInt(0, 10) > libCOMI_gf_MinimumDifficultyValueCoopInteger(8, 6, 4, 2, 0, 0))) {
        UnitIssueOrder(lp_orderedUnit, OrderTargetingPoint(OrderGetAbilityCommand(lp_order), PointWithOffsetPolar(lv_orderLocation, RandomFixed(1.0, 15.0), RandomFixed(0.0, 360.0))), c_orderQueueReplace);
    }

}

void libCPCM_gf_CT_ApplyTempDamageReflect (unit lp_damagedUnit, unit lp_damagingUnit, fixed lp_damageAmount, string lp_damagingEffect) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickTempDamageReflect)] == false) || (lp_damageAmount <= 0.0) || (UnitGetOwner(lp_damagingUnit) == c_playerAny) || (PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(lp_damagingUnit)) == false) || (lp_damagingEffect == "MutatorTempDamageReflect") || (lp_damagingEffect == "ZagaraVoidCoopBanelingBarrageExplodeSearchUnit") || (lp_damagingEffect == "ZagaraVoidCoopInfestedPodsImpactDamage") || (UnitFilterMatch(lp_damagingUnit, UnitGetOwner(lp_damagingUnit), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == false))) {
        return ;
    }

    UnitGroupAdd(libCPCM_gv_cT_TempDamageReflectUnits, lp_damagingUnit);
    UnitSetCustomValue(lp_damagingUnit, libCPCM_gv_cTC_TempDamageCustomIndex, (UnitGetCustomValue(lp_damagingUnit, libCPCM_gv_cTC_TempDamageCustomIndex) + lp_damageAmount));
    UnitDamage(lp_damagingUnit, "MutatorTempDamageReflect", lp_damagingUnit, lp_damageAmount);
}

void libCPCM_gf_CT_ApplyDeathPull (unit lp_killedUnit) {
    // Variable Declarations
    fixed lv_aOESpawnArea;
    int lv_indexAOE;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_aOESpawnArea = 1.0;

    // Implementation
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickDeathPull)] == false) || (UnitGetOwner(lp_killedUnit) == c_playerAny) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(lp_killedUnit)) == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral), (1 << (c_targetFilterHidden - 32)))) == false) || (UnitGetType(lp_killedUnit) == "TerranDropPod") || (UnitGetType(lp_killedUnit) == "ZergDropPodLarge") || (UnitGetType(lp_killedUnit) == "ZergDropPod"))) {
        return ;
    }

    if ((UnitGetPropertyFixed(lp_killedUnit, c_unitPropSuppliesUsed, c_unitPropCurrent) <= 1.0)) {
        UnitCreateEffectPoint(lp_killedUnit, "MutatorDeathPullPersistentWeak", UnitGetPosition(lp_killedUnit));
    }
    else if ((UnitGetPropertyFixed(lp_killedUnit, c_unitPropSuppliesUsed, c_unitPropCurrent) >= 6.0)) {
        UnitCreateEffectPoint(lp_killedUnit, "MutatorDeathPullPersistentStrong", UnitGetPosition(lp_killedUnit));
    }
    else if (true) {
        UnitCreateEffectPoint(lp_killedUnit, "MutatorDeathPullPersistent", UnitGetPosition(lp_killedUnit));
    }
}

void libCPCM_gf_CT_ApplyPropagatorPing (unit lp_createdUnit) {
    // Variable Declarations
    int lv_storedPing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_storedPing = c_invalidPingId;

    // Implementation
    libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), UnitGetPosition(lp_createdUnit), 270.0, "BeaconClaimPing", ColorWithAlpha(0.00, 50.20, 75.29, 0.00), 0.0);
    PingSetScale(PingLastCreated(), 0.5);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_CPCM_65D2617F"));
    PingSetUnit(PingLastCreated(), lp_createdUnit);
    libHots_gf_StorePingForUnit(lp_createdUnit, 1, PingLastCreated());
}

void libCPCM_gf_CT_ApplyPropagatorPingCleanup (unit lp_killedUnit) {
    // Variable Declarations
    int lv_storedPing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_storedPing = c_invalidPingId;

    // Implementation
    if (((libCPCM_gv_cT_PropagatorCleanupEnabled == false) || (UnitGetType(lp_killedUnit) != "MutatorPropagator"))) {
        return ;
    }

    lv_storedPing = libHots_gf_PingStoredForUnit(lp_killedUnit, 1);
    if ((lv_storedPing != c_invalidPingId)) {
        libCOMI_gf_DestroyPingCoop(lv_storedPing);
    }

}

void libCPCM_gf_CT_ApplyMomentOfSilence (unit lp_killedUnit) {
    // Variable Declarations
    point lv_unitLocation;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickMomentOfSilence)] == false) || (UnitGetOwner(lp_killedUnit) == c_playerAny) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, 1), UnitGetOwner(lp_killedUnit)) == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (UnitHasBehavior2(lp_killedUnit, "HybridPnPMirrorImage") == true))) {
        return ;
    }
    else {
        lv_unitLocation = UnitGetPosition(lp_killedUnit);
        if ((UnitGetType(lp_killedUnit) == "HybridNemesis")) {
            Wait(2.0, c_timeReal);
        }
        else {
            Wait(1.0, c_timeReal);
        }
        PlayerCreateEffectPoint(3, "MutatorMomentOfSilenceSearch", lv_unitLocation);
    }
}

void libCPCM_gf_CT_ApplyBoomBotPing (unit lp_createdUnit) {
    // Variable Declarations
    int lv_storedPing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_storedPing = c_invalidPingId;

    // Implementation
    libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), UnitGetPosition(lp_createdUnit), 270.0, "BeaconClaimPing", ColorWithAlpha(0.00, 50.20, 75.29, 0.00), 0.0);
    PingSetScale(PingLastCreated(), 0.5);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_CPCM_9A1795C0"));
    PingSetUnit(PingLastCreated(), lp_createdUnit);
    libHots_gf_StorePingForUnit(lp_createdUnit, 1, PingLastCreated());
}

void libCPCM_gf_CT_ApplyBoomBotPingCleanup (unit lp_killedUnit) {
    // Variable Declarations
    int lv_storedPing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_storedPing = c_invalidPingId;

    // Implementation
    if (((libCPCM_gv_cT_BoomBotCleanupEnabled == false) || (UnitGetType(lp_killedUnit) != "MutatorBoomBot"))) {
        return ;
    }

    lv_storedPing = libHots_gf_PingStoredForUnit(lp_killedUnit, 1);
    if ((lv_storedPing != c_invalidPingId)) {
        libCOMI_gf_DestroyPingCoop(lv_storedPing);
    }

}

void libCPCM_gf_CT_RemovePolarity (unit lp_polarityUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPCM_gf_MutatorIsEnabled("Polarity") == false)) {
        return ;
    }

    UnitBehaviorRemove(lp_polarityUnit, "MutatorImmunetoPlayer1", 1);
    UnitBehaviorRemove(lp_polarityUnit, "MutatorImmunetoPlayer2", 1);
    UnitCreateEffectUnit(lp_polarityUnit, "MutatorPolarityMimic", lp_polarityUnit);
}

void libCPCM_gf_CT_RemoveAvenger (unit lp_avengeUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPCM_gf_MutatorIsEnabled("Avenger") == false)) {
        return ;
    }

    UnitBehaviorRemove(lp_avengeUnit, "MutatorAvenger", 100);
    libNtve_gf_SendActorMessageToUnit(lp_avengeUnit, "SetScale");
    libNtve_gf_SendActorMessageToUnit(lp_avengeUnit, "GlowStop");
}

void libCPCM_gf_CT_RemoveUnitSpeed (unit lp_speedUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPCM_gf_MutatorIsEnabled("UnitSpeed") == false)) {
        return ;
    }

    UnitResetSpeed(lp_speedUnit);
}

void libCPCM_gf_CT_RemoveStructureStealBehavior (unit lp_structure) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitHasBehavior2(lp_structure, "MutatorHouseHunters") == false))) {
        return ;
    }

    UnitBehaviorRemove(lp_structure, "MutatorHouseHunters", c_unitBehaviorCountAll);
}

void libCPCM_gf_CT_RemoveAllCastersEnergy (unit lp_energyUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCPCM_gf_MutatorIsEnabled("OopsAllCasters") == false) || (UnitGetPropertyFixed(lp_energyUnit, c_unitPropEnergyMax, c_unitPropNormal) != 0.0))) {
        return ;
    }

    UnitSetPropertyFixed(lp_energyUnit, c_unitPropEnergyMax, 0.0);
    UnitSetPropertyFixed(lp_energyUnit, c_unitPropEnergy, 0.0);
    UnitSetPropertyFixed(lp_energyUnit, c_unitPropEnergyRegen, 0.0);
}

void libCPCM_gf_CT_AmonHeroTychus_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    point lv_target;
    fixed lv_abilityRange;
    int lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;
    order lv_orderVariable;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((UnitGroupCount(lp_nearByUnits, c_unitCountAlive) <= 0) || (UnitOrderIsValid(lp_aIUnit, Order(AbilityCommand("MutatorAmonTychusTossGrenade", 0))) == false) || (UnitAbilityGetCooldown(lp_aIUnit, "MutatorAmonTychusTossGrenade", "Abil/MutatorAmonTychusTossGrenade") > 0.0) || (UnitOrderHasAbil(lp_aIUnit, "MutatorAmonTychusTossGrenade") == true))) {
        return ;
    }

    lv_abilityRange = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "MutatorAmonTychusTossGrenade", "Range[" + IntToString(0) + "]", lp_owner);
    lv_abilityDamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MutatorAmonTychusTossGrenadeDamage", "Amount", lp_owner);
    lv_abilityAoE = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "MutatorAmonTychusTossGrenadeDamage", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny));
    lv_score = 1;
    lv_target = AIBestTargetPoint(UnitGroupFilterAlliance(lp_nearByUnits, lp_owner, c_unitAllianceEnemy, 0), 3, lv_abilityDamage, lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
    if ((lv_target != null)) {
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonTychusTossGrenade", 0), lv_target));
        return ;
    }

}

void libCPCM_gf_CT_AmonHeroRaynor_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    unitgroup lv_enemiesNearby;
    aifilter lv_enemyNearbyFilter;
    unitgroup lv_enemyUnitsNearby;
    point lv_target;
    fixed lv_abilityRange;
    int lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemiesNearby = UnitGroupEmpty();
    lv_enemyNearbyFilter = AIFilter(lp_owner);
    lv_enemyUnitsNearby = UnitGroupEmpty();

    // Implementation
    AISetFilterAlliance(lv_enemyNearbyFilter, c_playerGroupEnemy);
    AISetFilterBits(lv_enemyNearbyFilter, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
    lv_enemyUnitsNearby = AIGetFilterGroup(lv_enemyNearbyFilter, lp_nearByUnits);
    if (((UnitGroupCount(lv_enemyUnitsNearby, c_unitCountAlive) <= 0) || (UnitOrderIsValid(lp_aIUnit, Order(AbilityCommand("MutatorAmonRaynorSnipe", 0))) == false) || (UnitAbilityGetCooldown(lp_aIUnit, "MutatorAmonRaynorSnipe", "Abil/MutatorAmonRaynorSnipe") > 0.0) || (UnitOrderHasAbil(lp_aIUnit, "MutatorAmonRaynorSnipe") == true))) {
        return ;
    }

    AISetFilterBits(lv_enemyNearbyFilter, libNtve_gv_visibleFilter);
    lv_abilityRange = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "MutatorAmonRaynorSnipe", "Range[" + IntToString(0) + "]", lp_owner);
    lv_abilityDamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MutatorAmonRaynorSnipeDamage", "Amount", lp_owner);
    lv_score = 1;
    lv_abilityAoE = 0.5;
    lv_target = AIBestTargetPoint(UnitGroupFilterAlliance(lp_nearByUnits, lp_owner, c_unitAllianceEnemy, 0), 1, lv_abilityDamage, lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
    if ((lv_target != null)) {
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonRaynorSnipe", 0), lv_target));
        return ;
    }

}

void libCPCM_gf_CT_AmonHeroDehaka_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    unitgroup lv_enemiesNearby;
    aifilter lv_enemyNearbyFilter;
    unitgroup lv_canidates;
    aifilter lv_canidatesFilter;
    fixed lv_abilityRange;
    fixed lv_abilityDamage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemiesNearby = UnitGroupEmpty();
    lv_enemyNearbyFilter = AIFilter(lp_owner);
    lv_canidates = UnitGroupEmpty();
    lv_canidatesFilter = AIFilter(lp_owner);

    // Implementation
    AISetFilterAlliance(lv_enemyNearbyFilter, c_playerGroupEnemy);
    lv_enemiesNearby = AIGetFilterGroup(lv_enemyNearbyFilter, lp_nearByUnits);
    if ((UnitGetCooldown(lp_aIUnit, "MutatorAmonDehakaHeal") <= 0.0) && ((UnitGetPropertyFixed(lp_aIUnit, c_unitPropLifeMax, c_unitPropCurrent) - UnitGetPropertyFixed(lp_aIUnit, c_unitPropLife, c_unitPropCurrent)) > 150.0)) {
        libNtve_gf_AICast(lp_aIUnit, Order(AbilityCommand("MutatorAmonDehakaHeal", 0)));
        return ;
    }

    if ((UnitGroupCount(lv_enemiesNearby, c_unitCountAlive) <= 0)) {
        return ;
    }

    if ((UnitGetCooldown(lp_aIUnit, "MutatorAmonDehakaMirrorImage") <= 0.0)) {
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonDehakaMirrorImage", 0), PointWithOffsetPolar(UnitGetPosition(lp_aIUnit), 5.0, AngleBetweenPoints(UnitGetPosition(lp_aIUnit), UnitGroupCenterOfGroup(lv_enemiesNearby)))));
        return ;
    }

    if ((UnitOrderHasAbil(lp_aIUnit, "MutatorAmonDehakaDrag") == false) && (UnitAbilityGetCooldown(lp_aIUnit, "MutatorAmonDehakaDrag", "Drag") <= 0.0)) {
        lv_abilityRange = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "MutatorAmonDehakaDrag", "Range[" + IntToString(0) + "]", lp_owner));
        AISetFilterAlliance(lv_canidatesFilter, c_playerGroupEnemy);
        AISetFilterBits(lv_canidatesFilter, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32))));
        AISetFilterRange(lv_canidatesFilter, lp_aIUnit, lv_abilityRange);
        AISetFilterLifeSortReference(lv_canidatesFilter, 100.0, 50);
        lv_canidates = AIGetFilterGroup(lv_canidatesFilter, lp_nearByUnits);
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingUnit(AbilityCommand("MutatorAmonDehakaDrag", 0), UnitGroupUnit(lv_canidates, UnitGroupCount(lv_canidates, c_unitCountAlive))));
        return ;
    }

}

void libCPCM_gf_CT_AmonHeroDehakaBurrowed_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Automatic Variable Declarations
}

void libCPCM_gf_CT_AmonHeroDehakaSpawn_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Automatic Variable Declarations
}

void libCPCM_gf_CT_AmonHeroDehakaSpawnBurrowed_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Automatic Variable Declarations
}

void libCPCM_gf_CT_AmonHeroKarax_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGroupCount(lp_nearByUnits, c_unitCountAlive) <= 0)) {
        return ;
    }

    if ((UnitAbilityGetCooldown(lp_aIUnit, "MutatorAmonKhaydarinMonolith", "Abil/MutatorAmonKhaydarinMonolith") <= 0.0)) {
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonKhaydarinMonolith", 0), PointInterpolate(UnitGetPosition(lp_aIUnit), UnitGetPosition(UnitGroupRandomUnit(lp_nearByUnits, c_unitCountAlive)), -0.5)));
        return ;
    }

    if ((UnitGetCooldown(lp_aIUnit, "SpawnPhaseCannon") <= 0.0)) {
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonPhaseCannon", 0), PointInterpolate(UnitGetPosition(lp_aIUnit), UnitGetPosition(UnitGroupRandomUnit(lp_nearByUnits, c_unitCountAlive)), 0.5)));
        return ;
    }

}

void libCPCM_gf_CT_AmonHeroNova_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    unitgroup lv_enemiesNearby;
    aifilter lv_enemyNearbyFilter;
    unitgroup lv_canidates;
    aifilter lv_targetFilter2;
    point lv_target;
    fixed lv_abilityRange;
    fixed lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;
    fixed lv_autoAttackDamage;
    wave lv_wave;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemiesNearby = UnitGroupEmpty();
    lv_enemyNearbyFilter = AIFilter(lp_owner);
    lv_canidates = UnitGroupEmpty();
    lv_targetFilter2 = AIFilter(lp_owner);

    // Implementation
    AISetFilterAlliance(lv_enemyNearbyFilter, c_playerGroupEnemy);
    lv_enemiesNearby = AIGetFilterGroup(lv_enemyNearbyFilter, lp_nearByUnits);
    if ((UnitGroupCount(lp_nearByUnits, c_unitCountAlive) <= 0)) {
        return ;
    }

    if (((UnitOrderHasAbil(lp_aIUnit, "MutatorAmonNovaNuke") == true) || (UnitOrderHasAbil(lp_aIUnit, "MutatorAmonNovaWeaponImprovedCanisterRifleSnipe") == true))) {
        return ;
    }

    if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) == 1) && (UnitAbilityGetCooldown(lp_aIUnit, "MutatorAmonNovaNuke", "Abil/MutatorAmonNovaNuke") <= 0.0)) {
        lv_abilityRange = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "MutatorAmonNovaNuke", "Range[" + IntToString(0) + "]", lp_owner);
        lv_abilityDamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MutatorAmonNovaNukeDamage", "Amount", lp_owner);
        lv_abilityAoE = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "MutatorAmonNovaNukeDamage", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny));
        lv_score = 2;
        lv_target = AIBestTargetPoint(lv_enemiesNearby, 4, FixedToInt(lv_abilityDamage), lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
        if ((lv_target != null)) {
            lv_wave = AIUnitGetWave(lp_aIUnit);
            UnitIssueOrder(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonNovaNuke", 0), lv_target), c_orderQueueReplace);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_aIUnit, false);
            AIWaveAddUnit(lv_wave, lp_aIUnit);
            return ;
        }

    }

    if ((UnitGetPropertyFixed(lp_aIUnit, c_unitPropEnergy, c_unitPropCurrent) >= 50.0)) {
        lv_abilityRange = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "MutatorAmonNovaWeaponImprovedCanisterRifleSnipe", "Range[" + IntToString(0) + "]", c_playerAny));
        lv_abilityDamage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "MutatorAmonNovaWeaponImprovedCanisterRifleSnipe", "Amount", c_playerAny));
        lv_autoAttackDamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MutatorAmonNovaWeaponImprovedCanisterRifleCloaked", "Amount", lp_owner);
        AISetFilterLife(lv_targetFilter2, lv_autoAttackDamage, 524287.0);
        AISetFilterAlliance(lv_targetFilter2, c_playerGroupEnemy);
        AISetFilterBits(lv_targetFilter2, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
        AISetFilterRange(lv_targetFilter2, lp_aIUnit, lv_abilityRange);
        AISetFilterLifeSortReference(lv_targetFilter2, lv_abilityDamage, (lv_abilityDamage * 0.2));
        lv_canidates = AIGetFilterGroup(lv_targetFilter2, lp_nearByUnits);
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingUnit(AbilityCommand("MutatorAmonNovaWeaponImprovedCanisterRifleSnipe", 0), UnitGroupUnit(lv_canidates, UnitGroupCount(lv_canidates, c_unitCountAlive))));
        return ;
    }

}

void libCPCM_gf_CT_AmonHeroZagara_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    unitgroup lv_enemiesNearby;
    aifilter lv_enemyNearbyFilter;
    unitgroup lv_friendsNearby;
    aifilter lv_friendsNearbyFilter;
    unitgroup lv_canidates;
    unitgroup lv_harmlessCandidates;
    aifilter lv_targetFilter2;
    unitgroup lv_roachCandidates;
    aifilter lv_targetFilter3;
    point lv_target;
    fixed lv_abilityRange;
    int lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;
    fixed lv_frenzyAoE;
    int lv_frenzyMinTargets;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemiesNearby = UnitGroupEmpty();
    lv_enemyNearbyFilter = AIFilter(lp_owner);
    lv_friendsNearby = UnitGroupEmpty();
    lv_friendsNearbyFilter = AIFilter(lp_owner);
    lv_canidates = UnitGroupEmpty();
    lv_harmlessCandidates = UnitGroupEmpty();
    lv_targetFilter2 = AIFilter(lp_owner);
    lv_roachCandidates = UnitGroupEmpty();
    lv_targetFilter3 = AIFilter(lp_owner);

    // Implementation
    AISetFilterAlliance(lv_enemyNearbyFilter, c_playerGroupEnemy);
    lv_enemiesNearby = AIGetFilterGroup(lv_enemyNearbyFilter, lp_nearByUnits);
    if ((UnitGroupCount(lv_enemiesNearby, c_unitCountAlive) <= 0)) {
        return ;
    }

    if ((PlayerGetCooldown(UnitGetOwner(lp_aIUnit), "MutatorAmonZagaraBanelingBarrage") <= 0.0)) {
        AISetFilterAlliance(lv_targetFilter2, c_playerGroupEnemy);
        AISetFilterPlane(lv_targetFilter2, c_planeGround);
        AISetFilterBits(lv_targetFilter2, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
        AISetFilterRange(lv_targetFilter2, lp_aIUnit, 10.0);
        AISetFilterLifeSortReference(lv_targetFilter2, 160.0, 40);
        lv_canidates = AIGetFilterGroup(lv_targetFilter2, lp_nearByUnits);
        AISetFilterBits(lv_targetFilter2, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
        lv_harmlessCandidates = AIGetFilterGroup(lv_targetFilter2, lp_nearByUnits);
        if ((UnitGroupUnit(lv_canidates, UnitGroupCount(lv_canidates, c_unitCountAlive)) != null)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonZagaraBanelingBarrage", 0), UnitGetPosition(UnitGroupUnit(lv_canidates, UnitGroupCount(lv_canidates, c_unitCountAlive)))));
            return ;
        }
        else {
            if ((UnitGroupUnit(lv_harmlessCandidates, UnitGroupCount(lv_harmlessCandidates, c_unitCountAlive)) != null)) {
                libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonZagaraBanelingBarrage", 0), UnitGetPosition(UnitGroupUnit(lv_harmlessCandidates, UnitGroupCount(lv_harmlessCandidates, c_unitCountAlive)))));
                return ;
            }

        }
    }

    if ((PlayerGetCooldown(UnitGetOwner(lp_aIUnit), "MutatorAmonZagaraSpawnHunterKillers") <= 0.0)) {
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonZagaraSpawnHunterKillers", 0), PointWithOffsetPolar(UnitGetPosition(lp_aIUnit), 5.0, AngleBetweenPoints(UnitGetPosition(lp_aIUnit), UnitGroupCenterOfGroup(lv_enemiesNearby)))));
        return ;
    }

    AISetFilterPlane(lv_targetFilter3, c_planeGround);
    lv_roachCandidates = AIGetFilterGroup(lv_targetFilter3, lp_nearByUnits);
    if ((UnitAbilityGetCooldown(lp_aIUnit, "MutatorAmonZagaraMassRoachDrop", "MutatorAmonZagaraInfestedPods") <= 0.0) && (UnitGroupCount(lv_roachCandidates, c_unitCountAlive) > 0)) {
        lv_abilityRange = 13.0;
        lv_abilityDamage = 500;
        lv_score = 3;
        lv_abilityAoE = 5.0;
        lv_target = AIBestTargetPoint(UnitGroupFilterAlliance(lp_nearByUnits, lp_owner, c_unitAllianceEnemy, 0), 2, lv_abilityDamage, lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
        if ((lv_target != null)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonZagaraMassRoachDrop", 0), lv_target));
            return ;
        }

    }

    lv_frenzyMinTargets = 5;
    lv_frenzyAoE = 15.0;
    lv_friendsNearby = UnitGroupAlliance(lp_owner, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_aIUnit), lv_frenzyAoE), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lv_frenzyMinTargets);
    if ((UnitGroupCount(lv_friendsNearby, c_unitCountAlive) >= lv_frenzyMinTargets) && (PlayerGetCooldown(UnitGetOwner(lp_aIUnit), "MutatorAmonZagaraMassFrenzy") <= 0.0)) {
        libNtve_gf_AICast(lp_aIUnit, Order(AbilityCommand("MutatorAmonZagaraMassFrenzy", 0)));
        return ;
    }

}

void libCPCM_gf_CT_AmonHeroZagaraBurrowed_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Automatic Variable Declarations
}

void libCPCM_gf_CT_AmonHeroArtanis_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    int init_i;

    // Variable Declarations
    unitgroup lv_enemiesNearby;
    aifilter lv_enemyNearbyFilter;
    unit lv_unitException;
    unit lv_victim;
    unitgroup lv_canidates;
    unitgroup[3] lv_potentialTargets;
    aifilter lv_targetFilter2;
    int lv_targetIndex;
    point lv_target;
    fixed lv_abilityRange;
    int lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemiesNearby = UnitGroupEmpty();
    lv_enemyNearbyFilter = AIFilter(lp_owner);
    lv_canidates = UnitGroupEmpty();
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_potentialTargets[init_i] = UnitGroupEmpty();
    }
    lv_targetFilter2 = AIFilter(lp_owner);

    // Implementation
    AISetFilterAlliance(lv_enemyNearbyFilter, c_playerGroupEnemy);
    lv_enemiesNearby = AIGetFilterGroup(lv_enemyNearbyFilter, lp_nearByUnits);
    if ((UnitAbilityGetCooldown(lp_aIUnit, "MutatorAmonArtanisAstralWind", "Abil/MutatorAmonArtanisAstralWind") <= 0.0) && ((UnitGetPropertyFixed(lp_aIUnit, c_unitPropShieldsMax, c_unitPropCurrent) - UnitGetPropertyFixed(lp_aIUnit, c_unitPropShields, c_unitPropCurrent)) > 150.0)) {
        libNtve_gf_AICast(lp_aIUnit, Order(AbilityCommand("MutatorAmonArtanisAstralWind", 0)));
        return ;
    }

    if ((UnitGroupCount(lp_nearByUnits, c_unitCountAlive) <= 0)) {
        return ;
    }

    if ((UnitAbilityGetCooldown(lp_aIUnit, "MutatorAmonArtanisLightningDash", "Abil/MutatorAmonArtanisLightningDash") <= 0.0)) {
        lv_abilityRange = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "MutatorAmonArtanisLightningDash", "Range[" + IntToString(0) + "]", lp_owner);
        lv_abilityDamage = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "MutatorAmonArtanisLightningDashDamage", "Amount", lp_owner));
        lv_abilityAoE = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "MutatorAmonArtanisLightningDashSearch", "AreaArray[" + IntToString(0) + "].Radius", lp_owner));
        lv_score = 2;
        lv_target = AIBestTargetPoint(UnitGroupFilterAlliance(lp_nearByUnits, lp_owner, c_unitAllianceEnemy, 0), 3, lv_abilityDamage, lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
        if ((lv_target != null)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonArtanisLightningDash", 0), lv_target));
            return ;
        }

    }

}

void libCPCM_gf_CT_AmonHeroZeratul_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    unitgroup lv_enemyUnitsNearby;
    aifilter lv_enemyNearbyFilter;
    unitgroup lv_canidates;
    aifilter lv_canidatesFilter;
    fixed lv_slashDamage;
    fixed lv_blinkDistance;
    unit lv_debugUnit;
    int lv_debugIndex;
    unitgroup lv_debugGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyUnitsNearby = UnitGroupEmpty();
    lv_enemyNearbyFilter = AIFilter(lp_owner);
    lv_canidates = UnitGroupEmpty();
    lv_canidatesFilter = AIFilter(lp_owner);
    lv_debugGroup = UnitGroupEmpty();

    // Implementation
    AISetFilterAlliance(lv_enemyNearbyFilter, c_playerGroupEnemy);
    AISetFilterBits(lv_enemyNearbyFilter, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
    lv_enemyUnitsNearby = AIGetFilterGroup(lv_enemyNearbyFilter, lp_nearByUnits);
    if ((UnitGroupCount(lv_enemyUnitsNearby, c_unitCountAlive) <= 0)) {
        return ;
    }

    if ((UnitAbilityGetCooldown(lp_aIUnit, "MutatorAmonPrologueVoidArmor", "Abil/MutatorAmonPrologueVoidArmor") <= 0.0)) {
        libNtve_gf_AICast(lp_aIUnit, Order(AbilityCommand("MutatorAmonPrologueVoidArmor", 0)));
        return ;
    }

    lv_slashDamage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "MutatorAmonShadowBladeDamage", "Amount", lp_owner));
    lv_blinkDistance = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "MutatorAmonZeratulBlink", "Range", lp_owner));
    AISetFilterPlane(lv_canidatesFilter, c_planeGround);
    AISetFilterLifeSortReference(lv_canidatesFilter, lv_slashDamage, (lv_slashDamage * 0.2));
    if ((UnitAbilityGetCooldown(lp_aIUnit, "MutatorAmonZeratulBlink", "Abil/MutatorAmonZeratulBlink") <= 0.0)) {
        AISetFilterRange(lv_canidatesFilter, lp_aIUnit, lv_blinkDistance);
        lv_canidates = AIGetFilterGroup(lv_canidatesFilter, lv_enemyUnitsNearby);
        if ((UnitGroupCount(lv_canidates, c_unitCountAlive) > 0)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonZeratulBlink", 0), UnitGetPosition(UnitGroupUnit(lv_canidates, UnitGroupCount(lv_canidates, c_unitCountAlive)))));
            return ;
        }

    }

    if ((UnitOrderHasAbil(lp_aIUnit, "MutatorAmonShadowBlade") == false) && (UnitAbilityGetCooldown(lp_aIUnit, "MutatorAmonShadowBlade", "Abil/MutatorAmonShadowBlade") <= 0.0)) {
        AISetFilterRange(lv_canidatesFilter, lp_aIUnit, 1.0);
        lv_canidates = AIGetFilterGroup(lv_canidatesFilter, lv_enemyUnitsNearby);
        if ((UnitGroupCount(lv_canidates, c_unitCountAlive) > 0)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingUnit(AbilityCommand("MutatorAmonShadowBlade", 0), UnitGroupUnit(lv_canidates, 1)));
            return ;
        }

    }

}

void libCPCM_gf_CT_AmonHeroKerrigan_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    int init_i;

    // Variable Declarations
    unitgroup lv_enemiesNearby;
    aifilter lv_enemyNearbyFilter;
    unit lv_unitException;
    unit lv_victim;
    unitgroup lv_canidates;
    unitgroup[3] lv_potentialTargets;
    aifilter lv_primalSlashTargetFilter;
    aifilter lv_failSafeTargetFilter;
    int lv_targetIndex;
    point lv_target;
    fixed lv_abilityRange;
    fixed lv_abilityRadius;
    int lv_abilityDamage;
    int lv_score;
    point lv_apocTargetLocation;

    // Automatic Variable Declarations
    unitgroup autoFA23F32F_g;
    int autoFA23F32F_u;

    // Variable Initialization
    lv_enemiesNearby = UnitGroupEmpty();
    lv_enemyNearbyFilter = AIFilter(lp_owner);
    lv_canidates = UnitGroupEmpty();
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_potentialTargets[init_i] = UnitGroupEmpty();
    }
    lv_primalSlashTargetFilter = AIFilter(lp_owner);
    lv_failSafeTargetFilter = AIFilter(lp_owner);

    // Implementation
    AISetFilterAlliance(lv_enemyNearbyFilter, c_playerGroupEnemy);
    lv_enemiesNearby = AIGetFilterGroup(lv_enemyNearbyFilter, lp_nearByUnits);
    if ((UnitGroupCount(lv_enemiesNearby, c_unitCountAlive) <= 0)) {
        return ;
    }

    if (((UnitOrderHasAbil(lp_aIUnit, "MutatorAmonKerriganApocalypse") == true) || (UnitOrderHasAbil(lp_aIUnit, "MutatorAmonKerriganPrimalSlash") == true) || (UnitHasBehavior2(lp_aIUnit, "MutatorAmonKerriganPsiStrikeWalkSpeed") == true) || (UnitOrderHasAbil(lp_aIUnit, "MutatorAmonKerriganPsiStrikeWalk") == true) || (UnitMoverExists(lp_aIUnit, "PrimalSlashUpgradedMover") == true))) {
        return ;
    }

    if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) == 1) && (UnitGetCooldown(lp_aIUnit, "Apocalypse") <= 0.0)) {
        lv_abilityRadius = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "Apocalypse", "AreaArray[" + IntToString(0) + "].Radius", lp_owner);
        lv_abilityRange = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "MutatorAmonKerriganApocalypse", "Range[" + IntToString(0) + "]", lp_owner);
        lv_abilityDamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "ApocalypseDamage", "Amount", lp_owner);
        lv_abilityRadius = MinI(FixedToInt(lv_abilityRadius), 4);
        lv_score = 1;
        lv_target = AIBestTargetPoint(lv_enemiesNearby, 4, lv_abilityDamage, lv_score, lv_abilityRadius, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeStructure);
        if ((lv_target != null)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonKerriganApocalypse", 0), lv_target));
            return ;
        }

    }

    autoFA23F32F_g = lv_enemiesNearby;
    autoFA23F32F_u = UnitGroupCount(autoFA23F32F_g, c_unitCountAll);
    for (;; autoFA23F32F_u -= 1) {
        lv_victim = UnitGroupUnitFromEnd(autoFA23F32F_g, autoFA23F32F_u);
        if (lv_victim == null) { break; }
        if ((UnitWeaponCount(lv_victim) <= 0) && (UnitFilterMatch(lv_victim, lp_owner, UnitFilter((1 << c_targetFilterStructure), 0, 0, 0)) == true)) {
            UnitGroupRemove(lv_enemiesNearby, lv_victim);
        }

    }
    if ((UnitAbilityGetCooldown(lp_aIUnit, "MutatorAmonKerriganPrimalSlash", "Abil/MutatorAmonKerriganPrimalSlash") <= 0.0) && (UnitGetPropertyFixed(lp_aIUnit, c_unitPropEnergy, c_unitPropCurrent) >= StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "MutatorAmonKerriganPrimalSlash", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", c_playerAny)))) {
        lv_abilityRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "MutatorAmonKerriganPrimalSlashPointSearch", "AreaArray[" + IntToString(0) + "].Radius", lp_owner));
        lv_abilityRange = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "MutatorAmonKerriganPrimalSlash", "Range[" + IntToString(0) + "]", lp_owner);
        lv_abilityDamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MutatorAmonKerriganPrimalSlash", "Amount", lp_owner);
        AISetFilterLife(lv_primalSlashTargetFilter, lv_abilityDamage, 524287.0);
        AISetFilterPlane(lv_primalSlashTargetFilter, c_planeGround);
        AISetFilterRange(lv_primalSlashTargetFilter, lp_aIUnit, lv_abilityRadius);
        lv_canidates = AIGetFilterGroup(lv_primalSlashTargetFilter, lv_enemiesNearby);
        if ((UnitGroupCount(lv_canidates, c_unitCountAlive) > 0)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingUnit(AbilityCommand("MutatorAmonKerriganPrimalSlash", 0), UnitGroupUnit(lv_canidates, 1)));
            return ;
        }

    }

    if ((UnitAbilityGetCooldown(lp_aIUnit, "MutatorAmonKerriganPsiStrikeWalk", "Abil/MutatorAmonKerriganPsiStrikeWalk") <= 0.0) && (UnitGetPropertyFixed(lp_aIUnit, c_unitPropEnergy, c_unitPropCurrent) >= StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "MutatorAmonKerriganPsiStrikeWalk", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", c_playerAny)))) {
        lv_abilityRadius = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MutatorAmonKerriganPsiStrikeTargetSearch", "AreaArray[" + IntToString(0) + "].Radius", lp_owner);
        lv_abilityRange = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "MutatorAmonKerriganPrimalSlash", "Range[" + IntToString(0) + "]", lp_owner);
        lv_abilityDamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MutatorAmonKerriganPsiStrikeDamage", "Amount", lp_owner);
        lv_score = 2;
        lv_canidates = UnitGroupFilter(null, c_playerAny, lv_enemiesNearby, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_target = AIBestTargetPoint(lv_canidates, 3, lv_abilityDamage, lv_score, lv_abilityRadius, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
        if ((lv_target != null)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonKerriganPsiStrikeWalk", 0), lv_target));
            return ;
        }

    }

}

void libCPCM_gf_CT_AmonHeroKerriganBurrowed_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Automatic Variable Declarations
}

void libCPCM_gf_CT_AmonHero_AddToWave (int lp_player, unitgroup lp_units, point lp_gatherPoint, int lp_targetType) {
    // Variable Declarations
    int lv_heroCount;
    int lv_numHeroesToSpawn;
    bool lv_playSweetener;

    // Automatic Variable Declarations
    int autoFE65E688_ae;
    const int autoFE65E688_ai = 1;

    // Variable Initialization
    lv_playSweetener = true;

    // Implementation
    if ((lp_targetType == libCOMI_ge_CM_CoopAI_WaveAttackTargetType_ShakurasTempleAirRamp)) {
        return ;
    }
    else if ((TimerGetRemaining(libCPCM_gv_cT_AmonHeroLastSpawnTimer) > 0.0) && (DistanceBetweenPoints(lp_gatherPoint, libCPCM_gv_cT_AmonHeroLastSpawnPoint) < 5.0)) {
        return ;
    }
    TimerStart(libCPCM_gv_cT_AmonHeroLastSpawnTimer, 10.0, false, c_timeGame);
    libCPCM_gv_cT_AmonHeroLastSpawnPoint = lp_gatherPoint;
    lv_numHeroesToSpawn = MinI(libCPCM_gv_cT_AmonHeroPool, libCPCM_gf_CT_AmonHero_HeroMaxPerWave(lp_targetType));
    autoFE65E688_ae = lv_numHeroesToSpawn;
    lv_heroCount = 1;
    for ( ; ( (autoFE65E688_ai >= 0 && lv_heroCount <= autoFE65E688_ae) || (autoFE65E688_ai < 0 && lv_heroCount >= autoFE65E688_ae) ) ; lv_heroCount += autoFE65E688_ai ) {
        libCPCM_gv_cT_AmonHeroPool -= 1;
        libCPCM_gv_cT_AmonHeroNumber += 1;
        if ((libCPCM_gv_cT_AmonHeroNumber < 10)) {
            UnitGroupAdd(lp_units, libCPCM_gf_CT_AmonHero_SpawnHero(lp_player, libCPCM_gv_cT_AmonHeroNumber, lp_gatherPoint, lv_playSweetener));
        }
        else if ((ModI(libCPCM_gv_cT_AmonHeroNumber, 3) == 1)) {
            UnitGroupAdd(lp_units, libCPCM_gf_CT_AmonHero_SpawnHero(lp_player, RandomInt(1, 3), lp_gatherPoint, lv_playSweetener));
        }
        else if ((ModI(libCPCM_gv_cT_AmonHeroNumber, 3) == 2)) {
            UnitGroupAdd(lp_units, libCPCM_gf_CT_AmonHero_SpawnHero(lp_player, RandomInt(4, 6), lp_gatherPoint, lv_playSweetener));
        }
        else if (true) {
            UnitGroupAdd(lp_units, libCPCM_gf_CT_AmonHero_SpawnHero(lp_player, RandomInt(7, 9), lp_gatherPoint, lv_playSweetener));
        }
        lv_playSweetener = false;
    }
}

unit libCPCM_gf_CT_AmonHero_SpawnHero (int lp_player, int lp_heroIndex, point lp_spawnPoint, bool lp_playSweeteners) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, libCPCM_gv_cT_AmonHeroUnitTypeArray[lp_heroIndex], 0, lp_player, lp_spawnPoint);
    SoundPlayAtPointForPlayer(libCPCM_gv_cT_AmonHeroSoundArray[lp_heroIndex], c_maxPlayers, PlayerGroupAll(), lp_spawnPoint, 0.0, 100.0, 0.0);
    if ((lp_playSweeteners == true)) {
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lp_spawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX_Sur", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lp_spawnPoint, 0.0, 100.0, 0.0);
    }

    AISetUnitScriptControlled(UnitLastCreated(), false);
    return UnitLastCreated();
}

void libCPCM_gf_CT_AmonHero_GrantPoolAtMissionTime (fixed lp_missionTimeInMinutes, int lp_poolGranted) {
    // Automatic Variable Declarations
    // Implementation
    while (!((GameGetMissionTime() >= (lp_missionTimeInMinutes * 60.0 - 5)))) {
        Wait(1.0, c_timeGame);
    }
    libCPCM_gv_cT_AmonHeroPool += lp_poolGranted;
}

int libCPCM_gf_CT_AmonHero_HeroMaxPerWave (int lp_targetType) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gf_CC_CurrentMap() == "AC_ShakurasTemple") && (lp_targetType != libCOMI_ge_CM_CoopAI_WaveAttackTargetType_ShakurasTempleMainRamp)) {
        return 1;
    }
    else if ((libCOOC_gf_CC_CurrentMap() == "AC_BelshirEscort") && (lp_targetType == libCOMI_ge_CM_CoopAI_WaveAttackTargetType_Objective)) {
        return 1;
    }
    return 6;
}

int libCPCM_gf_CT_GiftState (unit lp_gift) {
    // Variable Declarations
    int lv_giftStateInt;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_giftStateInt = FixedToInt(UnitGetCustomValue(lp_gift, 11));
    return lv_giftStateInt;
}

trigger auto_libCPCM_gf_CT_GiftSpawn_Trigger = null;
point auto_libCPCM_gf_CT_GiftSpawn_lp_spawnLocation;

void libCPCM_gf_CT_GiftSpawn (point lp_spawnLocation) {
    auto_libCPCM_gf_CT_GiftSpawn_lp_spawnLocation = lp_spawnLocation;

    if (auto_libCPCM_gf_CT_GiftSpawn_Trigger == null) {
        auto_libCPCM_gf_CT_GiftSpawn_Trigger = TriggerCreate("auto_libCPCM_gf_CT_GiftSpawn_TriggerFunc");
    }

    TriggerExecute(auto_libCPCM_gf_CT_GiftSpawn_Trigger, false, false);
}

bool auto_libCPCM_gf_CT_GiftSpawn_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnLocation = auto_libCPCM_gf_CT_GiftSpawn_lp_spawnLocation;

    // Variable Declarations
    unit lv_gift;
    actor lv_spawnFX;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorGift", 0, 0, lp_spawnLocation);
    lv_gift = UnitLastCreated();
    UnitGroupAdd(libCPCM_gv_cT_Gifts, lv_gift);
    UnitGroupAdd(libCPCM_gv_cT_SpawnedUnits, lv_gift);
    libCPCM_gv_cT_GiftLastCreated = lv_gift;
    libNtve_gf_ShowHideUnit(lv_gift, false);
    libCOUI_gf_DisplayUnitProgressBar(lv_gift, StringExternal("Param/Value/lib_CPCM_5DA3665F"), 1, 100);
    libCOUI_gf_ShowHideUnitProgressBar2(lv_gift, false);
    libCOUI_gf_ShowHideUnitProgressBar(lv_gift, false);
    SoundPlayForPlayer(SoundLink("ChristmasGiftPing", -1), c_maxPlayers, PlayerGroupAll(), 300.0, 0.0);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "MutatorGift", lp_spawnLocation, ColorWithAlpha(50.20, 100.00, 0.00, 0.00), 0.0);
    PingSetScale(PingLastCreated(), 0.15);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_CPCM_5E4E1E93"));
    libHots_gf_StorePingForUnit(lv_gift, 1, PingLastCreated());
    libNtve_gf_CreateModelAtPoint("MutatorGift", lp_spawnLocation);
    lv_spawnFX = libNtve_gf_ActorLastCreated();
    ActorSend(lv_spawnFX, "SetOpacity 0.300000");
    ActorSend(lv_spawnFX, "SetTintColor 0,255,255");
    Wait(40.0, c_timeAI);
    libNtve_gf_KillModel(lv_spawnFX);
    libNtve_gf_ShowHideUnit(lv_gift, true);
    libCPCM_gf_CT_GiftSetState(lv_gift, libCPCM_ge_CT_GiftState_CT_GiftStateNeutral);
    return true;
}

void libCPCM_gf_CT_GiftSetState (unit lp_gift, int lp_state) {
    // Variable Declarations
    int lv_oldState;

    // Automatic Variable Declarations
    int autoB703ADA7_val;

    // Variable Initialization

    // Implementation
    lv_oldState = libCPCM_gf_CT_GiftState(lp_gift);
    if ((lv_oldState == lp_state)) {
        return ;
    }

    if ((lv_oldState == libCPCM_ge_CT_GiftState_CT_GiftStateStealing)) {
        return ;
    }

    UnitSetCustomValue(lp_gift, 11, IntToFixed((lp_state)));
    libCPCM_gf_CT_GiftSetProgress(lp_gift, 0.0);
    autoB703ADA7_val = lp_state;
    if (autoB703ADA7_val == libCPCM_ge_CT_GiftState_CT_GiftStateNeutral) {
        libCOUI_gf_ShowHideUnitProgressBar(lp_gift, false);
    }
    else if (autoB703ADA7_val == libCPCM_ge_CT_GiftState_CT_GiftStateContested) {
        libCOUI_gf_ShowHideUnitProgressBar(lp_gift, false);
    }
    else if (autoB703ADA7_val == libCPCM_ge_CT_GiftState_CT_GiftStatePlayer) {
        libCOUI_gf_ShowHideUnitProgressBar(lp_gift, true);
    }
    else if (autoB703ADA7_val == libCPCM_ge_CT_GiftState_CT_GiftStateEnemy) {
        libCOUI_gf_ShowHideUnitProgressBar(lp_gift, true);
    }
    else if (autoB703ADA7_val == libCPCM_ge_CT_GiftState_CT_GiftStateStealing) {
        SoundPlayForPlayer(SoundLink("MutatorAmonGiftSteal", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libCOUI_gf_CU_MutatorListShowNotification(StringExternal("Param/Value/lib_CPCM_92DEA6FF"));
        libCOUI_gf_SetUnitProgresBarTitle(lp_gift, StringExternal("Param/Value/lib_CPCM_9B6C4880"));
        libCOUI_gf_ShowHideUnitProgressBar(lp_gift, true);
        libNtve_gf_CreateModelAtPoint("DisintegrationState", UnitGetPosition(lp_gift));
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor 255,0,0");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 3.000000");
        libHots_gf_StoreActorForUnit(lp_gift, 6, libNtve_gf_ActorLastCreated());
    }
    else {
    }
}

void libCPCM_gf_CT_GiftSetProgress (unit lp_gift, fixed lp_progress) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_progress >= 100.0)) {
        libCPCM_gf_CT_GiftClaim(lp_gift);
        return ;
    }

    UnitSetCustomValue(lp_gift, 12, lp_progress);
    libCOUI_gf_SetUnitProgressBarProgress(lp_gift, FixedToInt(lp_progress));
}

void libCPCM_gf_CT_GiftAddProgress (unit lp_gift, fixed lp_progress) {
    // Automatic Variable Declarations
    // Implementation
    libCPCM_gf_CT_GiftSetProgress(lp_gift, (UnitGetCustomValue(lp_gift, 12) + lp_progress));
}

trigger auto_libCPCM_gf_CT_GiftSendAttack_Trigger = null;
unit auto_libCPCM_gf_CT_GiftSendAttack_lp_gift;

void libCPCM_gf_CT_GiftSendAttack (unit lp_gift) {
    auto_libCPCM_gf_CT_GiftSendAttack_lp_gift = lp_gift;

    if (auto_libCPCM_gf_CT_GiftSendAttack_Trigger == null) {
        auto_libCPCM_gf_CT_GiftSendAttack_Trigger = TriggerCreate("auto_libCPCM_gf_CT_GiftSendAttack_TriggerFunc");
    }

    TriggerExecute(auto_libCPCM_gf_CT_GiftSendAttack_Trigger, false, false);
}

bool auto_libCPCM_gf_CT_GiftSendAttack_TriggerFunc (bool testConds, bool runActions) {
    unit lp_gift = auto_libCPCM_gf_CT_GiftSendAttack_lp_gift;

    // Variable Declarations
    unitgroup lv_attackUnits;
    int lv_basePower;
    int lv_modifiedPower;
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoA6A35A19_g;
    int autoA6A35A19_u;

    // Variable Initialization
    lv_attackUnits = UnitGroupEmpty();

    // Implementation
    lv_basePower = libCPCM_gv_cT_GiftAmonPower;
    Wait(10.0, c_timeGame);
    lv_modifiedPower = (lv_basePower+FixedToInt((GameGetMissionTime() / libCOMI_gf_MinimumDifficultyValueCoopReal(215.0, 215.0, 140.0, 120.0, 120.0, 120.0))));
    if ((lv_basePower >= 2)) {
        while (!((libCPCM_gf_CT_GiftState(lp_gift) != libCPCM_ge_CT_GiftState_CT_GiftStateSpawning))) {
            Wait(0.1, c_timeGame);
        }
        libCPCM_gv_cT_GiftAmonPower -= 1;
        libCPCM_gf_CT_GiftSetState(lp_gift, libCPCM_ge_CT_GiftState_CT_GiftStateStealing);
        return true;
    }
    else if ((lv_modifiedPower <= 1)) {
        lv_attackUnits = libCOMI_gf_CreateCoopAIAttackGroup2(3, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__1Early);
    }
    else if ((lv_modifiedPower <= 3)) {
        lv_attackUnits = libCOMI_gf_CreateCoopAIAttackGroup2(3, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid);
    }
    else if ((lv_modifiedPower <= 6)) {
        lv_attackUnits = libCOMI_gf_CreateCommanderAttackGroupatPoint(3, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__3Mid, UnitGetPosition(lp_gift));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDestroyer", 0, 3, UnitGetPosition(lp_gift));
        libCPCM_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
    }
    else if ((lv_modifiedPower <= 8)) {
        lv_attackUnits = libCOMI_gf_CreateCommanderAttackGroupatPoint(3, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, UnitGetPosition(lp_gift));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridReaver", 0, 3, UnitGetPosition(lp_gift));
        libCPCM_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
    }
    else if ((lv_modifiedPower <= 9)) {
        lv_attackUnits = libCOMI_gf_CreateCommanderAttackGroupatPoint(3, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__1Early, UnitGetPosition(lp_gift));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDestroyer", 0, 3, UnitGetPosition(lp_gift));
        libCPCM_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDestroyer", 0, 3, UnitGetPosition(lp_gift));
        libCPCM_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
    }
    else if ((lv_modifiedPower <= 10)) {
        lv_attackUnits = libCOMI_gf_CreateCommanderAttackGroupatPoint(3, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__1Early, UnitGetPosition(lp_gift));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridReaver", 0, 3, UnitGetPosition(lp_gift));
        libCPCM_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridReaver", 0, 3, UnitGetPosition(lp_gift));
        libCPCM_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
    }
    else if ((lv_modifiedPower <= 11)) {
        lv_attackUnits = libCOMI_gf_CreateCommanderAttackGroupatPoint(3, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__1Early, UnitGetPosition(lp_gift));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridBehemoth", 0, 3, UnitGetPosition(lp_gift));
        libCPCM_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
    }
    else if ((lv_modifiedPower <= 12)) {
        lv_attackUnits = libCOMI_gf_CreateCommanderAttackGroupatPoint(3, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, UnitGetPosition(lp_gift));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridBehemoth", 0, 3, UnitGetPosition(lp_gift));
        libCPCM_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDominatorVoid", 0, 3, UnitGetPosition(lp_gift));
        libCPCM_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
    }
    else if ((lv_modifiedPower <= 13)) {
        lv_attackUnits = libCOMI_gf_CreateCommanderAttackGroupatPoint(3, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, UnitGetPosition(lp_gift));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridBehemoth", 0, 3, UnitGetPosition(lp_gift));
        libCPCM_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridNemesis", 0, 3, UnitGetPosition(lp_gift));
        libCPCM_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
    }
    else if (true) {
        lv_attackUnits = libCOMI_gf_CreateCommanderAttackGroupatPoint(3, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__3Mid, UnitGetPosition(lp_gift));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridBehemoth", 0, 3, UnitGetPosition(lp_gift));
        libCPCM_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridNemesis", 0, 3, UnitGetPosition(lp_gift));
        libCPCM_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDominatorVoid", 0, 3, UnitGetPosition(lp_gift));
        libCPCM_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
    }
    DataTableSetUnitGroup(true, ("CT_GiftAtk_" + IntToString(UnitGetTag(lp_gift))), lv_attackUnits);
    AISetGroupScriptControlled(lv_attackUnits, false);
    autoA6A35A19_g = lv_attackUnits;
    autoA6A35A19_u = UnitGroupCount(autoA6A35A19_g, c_unitCountAll);
    for (;; autoA6A35A19_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoA6A35A19_g, autoA6A35A19_u);
        if (lv_indexUnit == null) { break; }
        libNtve_gf_AICast(lv_indexUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lp_gift)));
    }
    return true;
}

trigger auto_libCPCM_gf_CT_GiftSpawnHybridFX_Trigger = null;
point auto_libCPCM_gf_CT_GiftSpawnHybridFX_lp_location;

void libCPCM_gf_CT_GiftSpawnHybridFX (point lp_location) {
    auto_libCPCM_gf_CT_GiftSpawnHybridFX_lp_location = lp_location;

    if (auto_libCPCM_gf_CT_GiftSpawnHybridFX_Trigger == null) {
        auto_libCPCM_gf_CT_GiftSpawnHybridFX_Trigger = TriggerCreate("auto_libCPCM_gf_CT_GiftSpawnHybridFX_TriggerFunc");
    }

    TriggerExecute(auto_libCPCM_gf_CT_GiftSpawnHybridFX_Trigger, false, false);
}

bool auto_libCPCM_gf_CT_GiftSpawnHybridFX_TriggerFunc (bool testConds, bool runActions) {
    point lp_location = auto_libCPCM_gf_CT_GiftSpawnHybridFX_lp_location;

    // Variable Declarations
    actor lv_spawnFX;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_CreateModelAtPoint("HybridWarpInEffect", lp_location);
    lv_spawnFX = libNtve_gf_ActorLastCreated();
    Wait(2.0, c_timeGame);
    libNtve_gf_KillModel(lv_spawnFX);
    return true;
}

void libCPCM_gf_CT_GiftClaim (unit lp_gift) {
    // Variable Declarations
    unitgroup lv_attackingForce;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoFC5D1A81_g;

    // Variable Initialization
    lv_attackingForce = UnitGroupEmpty();

    // Implementation
    lv_attackingForce = DataTableGetUnitGroup(true, ("CT_GiftAtk_" + IntToString(UnitGetTag(lp_gift))));
    if ((libCPCM_gf_CT_GiftState(lp_gift) == libCPCM_ge_CT_GiftState_CT_GiftStatePlayer)) {
        libCPCM_gv_cT_GiftAmonPower += 1;
        autoFC5D1A81_g = libCOOC_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoFC5D1A81_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCPCM_gf_CT_GiftPlayerBonus(UnitGetPosition(lp_gift), RandomInt(1, libCPCM_gv_cTC_GiftPlayerBonuses), lv_indexPlayer);
        }
    }
    else if (((libCPCM_gf_CT_GiftState(lp_gift) == libCPCM_ge_CT_GiftState_CT_GiftStateEnemy) || (libCPCM_gf_CT_GiftState(lp_gift) == libCPCM_ge_CT_GiftState_CT_GiftStateStealing))) {
        libCPCM_gv_cT_GiftAmonPower -= 1;
        libCPCM_gf_CT_GiftEnemyBonus(UnitGetPosition(lp_gift), RandomInt(1, libCPCM_gv_cTC_GiftEnemyBonuses));
        if ((libHots_gf_ActorForUnit(lp_gift, 6) != null)) {
            libNtve_gf_KillModel(libHots_gf_ActorForUnit(lp_gift, 6));
        }

    }
    else if (true) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_CPCM_47EE0D17"), true);
        return ;
    }
    libCOUI_gf_ShowHideUnitProgressBar(lp_gift, false);
    libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(lp_gift, 1));
    UnitGroupRemove(libCPCM_gv_cT_Gifts, lp_gift);
    UnitKill(lp_gift);
    if ((lv_attackingForce != null)) {
        AISetGroupSuicide(lv_attackingForce, true);
    }

}

trigger auto_libCPCM_gf_CT_GiftPlayerBonus_Trigger = null;
point auto_libCPCM_gf_CT_GiftPlayerBonus_lp_giftLocation;
int auto_libCPCM_gf_CT_GiftPlayerBonus_lp_bonusType;
int auto_libCPCM_gf_CT_GiftPlayerBonus_lp_giftPlayer;

void libCPCM_gf_CT_GiftPlayerBonus (point lp_giftLocation, int lp_bonusType, int lp_giftPlayer) {
    auto_libCPCM_gf_CT_GiftPlayerBonus_lp_giftLocation = lp_giftLocation;
    auto_libCPCM_gf_CT_GiftPlayerBonus_lp_bonusType = lp_bonusType;
    auto_libCPCM_gf_CT_GiftPlayerBonus_lp_giftPlayer = lp_giftPlayer;

    if (auto_libCPCM_gf_CT_GiftPlayerBonus_Trigger == null) {
        auto_libCPCM_gf_CT_GiftPlayerBonus_Trigger = TriggerCreate("auto_libCPCM_gf_CT_GiftPlayerBonus_TriggerFunc");
    }

    TriggerExecute(auto_libCPCM_gf_CT_GiftPlayerBonus_Trigger, false, false);
}

bool auto_libCPCM_gf_CT_GiftPlayerBonus_TriggerFunc (bool testConds, bool runActions) {
    point lp_giftLocation = auto_libCPCM_gf_CT_GiftPlayerBonus_lp_giftLocation;
    int lp_bonusType = auto_libCPCM_gf_CT_GiftPlayerBonus_lp_bonusType;
    int lp_giftPlayer = auto_libCPCM_gf_CT_GiftPlayerBonus_lp_giftPlayer;

    // Variable Declarations
    int lv_bonusAmount;
    int lv_attempts;
    unit lv_mineralPatch;
    unit lv_bonusUnit;
    unitgroup lv_bonusUnits;
    point lv_spawnLocation;
    sound lv_bonusSound;
    bool lv_oracleMade;

    // Automatic Variable Declarations
    int auto2C58991C_val;
    int auto8A06C87D_ae;
    const int auto8A06C87D_ai = 1;
    const int auto14845BF8_ae = 50;
    const int auto14845BF8_ai = 1;
    const int autoDDAF73D6_ae = 3;
    const int autoDDAF73D6_ai = 1;
    const int auto0F1A7743_ae = 200;
    const int auto0F1A7743_ai = 1;
    unitgroup autoF4C10799_g;
    int autoF4C10799_u;

    // Variable Initialization
    lv_bonusUnits = UnitGroupEmpty();

    // Implementation
    SoundPlayForPlayer(SoundLink("ChristmasGiftAlly", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    auto2C58991C_val = lp_bonusType;
    if (auto2C58991C_val == 1) {
        libCOUI_gf_CU_MutatorListShowNotificationToPlayer(StringExternal("Param/Value/lib_CPCM_51DDEFD7"), lp_giftPlayer);
        auto8A06C87D_ae = (15+(FixedToInt((GameGetMissionTime() / 60.0))));
        lv_bonusAmount = 1;
        for ( ; ( (auto8A06C87D_ai >= 0 && lv_bonusAmount <= auto8A06C87D_ae) || (auto8A06C87D_ai < 0 && lv_bonusAmount >= auto8A06C87D_ae) ) ; lv_bonusAmount += auto8A06C87D_ai ) {
            lv_attempts = 1;
            for ( ; ( (auto14845BF8_ai >= 0 && lv_attempts <= auto14845BF8_ae) || (auto14845BF8_ai < 0 && lv_attempts >= auto14845BF8_ae) ) ; lv_attempts += auto14845BF8_ai ) {
                lv_spawnLocation = RegionRandomPoint(RegionPlayableMap());
                if ((libCPCM_gf_CT_ResourceSpawnLocationValid(lv_spawnLocation) == true)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorNaturalGas50", 0, 0, lv_spawnLocation);
                    break;
                }

            }
        }
    }
    else if (auto2C58991C_val == 2) {
        PlayerCreateEffectPoint(lp_giftPlayer, "SOAMapWideChronoSearch", lp_giftLocation);
        libCOUI_gf_CU_MutatorListShowNotificationToPlayer(StringExternal("Param/Value/lib_CPCM_7999FCAB"), lp_giftPlayer);
    }
    else if (auto2C58991C_val == 3) {
        if ((PlayerRace(lp_giftPlayer) == "Terr")) {
            UnitCreate(1, "HERC", 0, lp_giftPlayer, lp_giftLocation, libNtve_gf_RandomAngle());
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, lp_giftLocation, UnitLastCreatedGroup(), false, lp_giftPlayer);
            libCOUI_gf_CU_MutatorListShowNotificationToPlayer(StringExternal("Param/Value/lib_CPCM_19FABD77"), lp_giftPlayer);
        }
        else if ((PlayerRace(lp_giftPlayer) == "Prot")) {
            UnitCreate(1, "Scout", 0, lp_giftPlayer, lp_giftLocation, libNtve_gf_RandomAngle());
            libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2(UnitLastCreated());
            libCOUI_gf_CU_MutatorListShowNotificationToPlayer(StringExternal("Param/Value/lib_CPCM_E3725572"), lp_giftPlayer);
        }
        else if (true) {
            UnitCreate(1, "QueenClassic", 0, lp_giftPlayer, lp_giftLocation, libNtve_gf_RandomAngle());
            UnitSetHeight(UnitLastCreated(), 16.0, 0.0);
            UnitSetHeight(UnitLastCreated(), UnitTypeGetProperty(UnitGetType(UnitLastCreated()), c_unitPropHeight), 3.0);
            libCOUI_gf_CU_MutatorListShowNotificationToPlayer(StringExternal("Param/Value/lib_CPCM_36D029B1"), lp_giftPlayer);
        }
    }
    else if (auto2C58991C_val == 4) {
        libCOUI_gf_CU_MutatorListShowNotificationToPlayer(StringExternal("Param/Value/lib_CPCM_BA1B5F1C"), lp_giftPlayer);
        lv_bonusAmount = 1;
        for ( ; ( (autoDDAF73D6_ai >= 0 && lv_bonusAmount <= autoDDAF73D6_ae) || (autoDDAF73D6_ai < 0 && lv_bonusAmount >= autoDDAF73D6_ae) ) ; lv_bonusAmount += autoDDAF73D6_ai ) {
            lv_mineralPatch = UnitGroupRandomUnit(UnitGroup("MineralField", c_playerAny, RegionCircle(PlayerStartLocation(lp_giftPlayer), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
            PlayerCreateEffectUnit(lp_giftPlayer, "MutatorCalldownMULECreateUnit", lv_mineralPatch);
            if ((lv_oracleMade == false)) {
                lv_oracleMade = true;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorDancingOracle", 0, 0, PlayerStartLocation(lp_giftPlayer));
                UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
                UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
                UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
                UnitBehaviorAdd(UnitLastCreated(), "MULETimedLife", UnitLastCreated(), 1);
            }

        }
        SoundPlayForPlayer(SoundLink("Music_MuleParty", -1), c_maxPlayers, PlayerGroupSingle(lp_giftPlayer), 100.0, 1.0);
        SoundChannelMute(PlayerGroupSingle(lp_giftPlayer), c_soundCategoryMusic, true);
        lv_bonusSound = SoundLastPlayed();
        SoundWait(lv_bonusSound, 0.0, c_soundOffsetEnd);
        SoundChannelMute(PlayerGroupSingle(lp_giftPlayer), c_soundCategoryMusic, false);
    }
    else if (auto2C58991C_val == 5) {
        lv_bonusUnits = UnitGroup(null, lp_giftPlayer, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_attempts = 1;
        for ( ; ( (auto0F1A7743_ai >= 0 && lv_attempts <= auto0F1A7743_ae) || (auto0F1A7743_ai < 0 && lv_attempts >= auto0F1A7743_ae) ) ; lv_attempts += auto0F1A7743_ai ) {
            lv_bonusUnit = UnitGroupRandomUnit(UnitGroup(null, lp_giftPlayer, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
            if ((lv_bonusUnit == null)) {
                break;
            }

            if (((UnitWeaponCount(lv_bonusUnit) == 0) || (UnitIsValid(lv_bonusUnit) == false) || (UnitHasBehavior2(lv_bonusUnit, "MutatorAvenger") == true))) {
                UnitGroupRemove(lv_bonusUnits, lv_bonusUnit);
                continue;
            }

            TextExpressionSetToken("Param/Expression/lib_CPCM_3F97F914", "UNIT", TextCase(UnitTypeGetName(UnitGetType(lv_bonusUnit)), true));
            libCOUI_gf_CU_MutatorListShowNotificationToPlayer(TextExpressionAssemble("Param/Expression/lib_CPCM_3F97F914"), lp_giftPlayer);
            UnitBehaviorAdd(lv_bonusUnit, "MutatorAvenger", lv_bonusUnit, 10);
            if ((UnitHasBehavior2(lv_bonusUnit, "MutatorShrunk") == true)) {
                libNtve_gf_SendActorMessageToUnit(lv_bonusUnit, (("SetScale " + "0.9")));
            }
            else {
                libNtve_gf_SendActorMessageToUnit(lv_bonusUnit, (("SetScale " + "1.8")));
            }
            libNtve_gf_SendActorMessageToUnit(lv_bonusUnit, "GlowStart");
            return true;
        }
        libCPCM_gf_CT_GiftPlayerBonus(lp_giftLocation, 4, lp_giftPlayer);
    }
    else if (auto2C58991C_val == 6) {
        libCOUI_gf_CU_MutatorListShowNotificationToPlayer(StringExternal("Param/Value/lib_CPCM_4E3F4CFD"), lp_giftPlayer);
        lv_bonusUnits = UnitGroup(null, lp_giftPlayer, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF4C10799_g = lv_bonusUnits;
        autoF4C10799_u = UnitGroupCount(autoF4C10799_g, c_unitCountAll);
        for (;; autoF4C10799_u -= 1) {
            lv_bonusUnit = UnitGroupUnitFromEnd(autoF4C10799_g, autoF4C10799_u);
            if (lv_bonusUnit == null) { break; }
            if ((UnitHasBehavior2(lv_bonusUnit, "MutatorKarmaIncreasedDamageVet") == true)) {
                UnitXPSetCurrentLevel(lv_bonusUnit, "MutatorKarmaIncreasedDamageVet", 0);
                UnitSetPropertyFixed(lv_bonusUnit, c_unitPropKills, 0.0);
            }

        }
    }
    else if (auto2C58991C_val == 7) {
        libCOUI_gf_CU_MutatorListShowNotificationToPlayer(StringExternal("Param/Value/lib_CPCM_748D35AB"), lp_giftPlayer);
        CatalogFieldValueSet(c_gameCatalogAbil, "ArchAngelCoopMissileShot", "Cost[" + IntToString(0) + "].Charge.CountStart", lp_giftPlayer, "5");
        CatalogFieldValueSet(c_gameCatalogAbil, "ArchAngelCoopMissileShot", "Cost[" + IntToString(0) + "].Charge.CountMax", lp_giftPlayer, "5");
        CatalogFieldValueSet(c_gameCatalogAbil, "ArchAngelCoopMissileShot", "Cost[" + IntToString(0) + "].Charge.CountUse", lp_giftPlayer, "1");
        CatalogFieldValueSet(c_gameCatalogAbil, "ArchAngelCoopMissileShot", "Cost[" + IntToString(0) + "].Charge.TimeUse", lp_giftPlayer, "5.0");
        CatalogFieldValueSet(c_gameCatalogAbil, "ArchAngelCoopMissileShot", "Range[" + IntToString(0) + "]", lp_giftPlayer, "10");
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArchAngelCoopAssault", 0, lp_giftPlayer, lp_giftLocation);
        TechTreeAbilityAllow(lp_giftPlayer, AbilityCommand("ArchAngelCoopFighterMode", 0), false);
        TechTreeAbilityAllow(lp_giftPlayer, AbilityCommand("ArchAngelCoopRepel", 0), false);
    }
    else if (auto2C58991C_val == 8) {
        libCOUI_gf_CU_MutatorListShowNotificationToPlayer(StringExternal("Param/Value/lib_CPCM_12B84D35"), lp_giftPlayer);
        PlayerSetState(lp_giftPlayer, c_playerStateVespeneCostIgnored, true);
        PlayerSetState(lp_giftPlayer, c_playerStateMineralCostIgnored, true);
        SoundPlayForPlayer(SoundLink("MutatorShoppingSpree", -1), c_maxPlayers, PlayerGroupSingle(lp_giftPlayer), 100.0, 1.0);
        SoundChannelMute(PlayerGroupSingle(lp_giftPlayer), c_soundCategoryMusic, true);
        lv_bonusSound = SoundLastPlayed();
        Wait(10.0, c_timeGame);
        SoundStop(lv_bonusSound, true);
        SoundChannelMute(PlayerGroupSingle(lp_giftPlayer), c_soundCategoryMusic, false);
        PlayerSetState(lp_giftPlayer, c_playerStateVespeneCostIgnored, false);
        PlayerSetState(lp_giftPlayer, c_playerStateMineralCostIgnored, false);
    }
    else if (auto2C58991C_val == 9) {
        if ((GameGetMissionTime() <= 480.0)) {
            libCPCM_gf_CT_GiftPlayerBonus(lp_giftLocation, RandomInt(1, libCPCM_gv_cTC_GiftPlayerBonuses), lp_giftPlayer);
            return true;
        }

        libCOUI_gf_CU_MutatorListShowNotificationToPlayer(StringExternal("Param/Value/lib_CPCM_C0B92E3F"), lp_giftPlayer);
        PlayerCreateEffectPoint(lp_giftPlayer, "MutatorGiftHealingSearch", lp_giftLocation);
    }
    else if (auto2C58991C_val == 10) {
    }
    else {
    }
    return true;
}

trigger auto_libCPCM_gf_CT_GiftEnemyBonus_Trigger = null;
point auto_libCPCM_gf_CT_GiftEnemyBonus_lp_giftLocation;
int auto_libCPCM_gf_CT_GiftEnemyBonus_lp_bonusType;

void libCPCM_gf_CT_GiftEnemyBonus (point lp_giftLocation, int lp_bonusType) {
    auto_libCPCM_gf_CT_GiftEnemyBonus_lp_giftLocation = lp_giftLocation;
    auto_libCPCM_gf_CT_GiftEnemyBonus_lp_bonusType = lp_bonusType;

    if (auto_libCPCM_gf_CT_GiftEnemyBonus_Trigger == null) {
        auto_libCPCM_gf_CT_GiftEnemyBonus_Trigger = TriggerCreate("auto_libCPCM_gf_CT_GiftEnemyBonus_TriggerFunc");
    }

    TriggerExecute(auto_libCPCM_gf_CT_GiftEnemyBonus_Trigger, false, false);
}

bool auto_libCPCM_gf_CT_GiftEnemyBonus_TriggerFunc (bool testConds, bool runActions) {
    point lp_giftLocation = auto_libCPCM_gf_CT_GiftEnemyBonus_lp_giftLocation;
    int lp_bonusType = auto_libCPCM_gf_CT_GiftEnemyBonus_lp_bonusType;

    // Variable Declarations
    int lv_indexPlayer;
    string lv_bonusMutator;
    unitgroup lv_bonusUnits;
    unit lv_indexUnit;
    point lv_targetLocation;
    int lv_attempts;
    int lv_count;
    int lv_killBotKillCap;
    int lv_killBotKills;
    unit lv_killBot;
    int lv_killBotPing;
    int lv_killBotDialog;
    int lv_killBotLabel;

    // Automatic Variable Declarations
    int auto25BE16F5_val;
    int auto3E280111_ae;
    const int auto3E280111_ai = 1;
    const int auto5D4F6B19_ae = 100;
    const int auto5D4F6B19_ai = 1;
    int auto5C59813E_val;
    unitgroup auto8DDCC7AA_g;
    int auto8DDCC7AA_u;
    unitgroup autoF681C486_g;
    int autoF681C486_u;
    unitgroup autoD7C8B056_g;
    int autoD7C8B056_u;
    unitgroup auto1B77D617_g;
    int auto1B77D617_u;

    // Variable Initialization
    lv_bonusUnits = UnitGroupEmpty();
    lv_killBotPing = c_invalidPingId;
    lv_killBotDialog = c_invalidDialogId;
    lv_killBotLabel = c_invalidDialogControlId;

    // Implementation
    SoundPlayForPlayer(SoundLink("ChristmasGiftEnemy", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    auto25BE16F5_val = lp_bonusType;
    if (auto25BE16F5_val == 1) {
        lv_bonusMutator = libCPCM_gf_CT_GiftRandomMutator();
        libCPCM_gf_EnableDisableMutator(true, lv_bonusMutator);
        libCOUI_gf_CU_MutatorListShowNotification(StringExternal("Param/Value/lib_CPCM_8CCC505E"));
        TriggerExecute(libCPCM_gf_GetMutatorTriggerInitialization(lv_bonusMutator), true, false);
        libCOUI_gf_CU_MutatorListInit();
        Wait(180.0, c_timeGame);
        libCPCM_gf_EnableDisableMutator(false, lv_bonusMutator);
        libCOUI_gf_CU_MutatorListInit();
    }
    else if (auto25BE16F5_val == 2) {
        libCOUI_gf_CU_MutatorListShowNotification(StringExternal("Param/Value/lib_CPCM_4086A1E0"));
        auto3E280111_ae = libCOMI_gf_MinimumDifficultyValueCoopInteger(10, 15, 25, 30, 30, 30);
        lv_count = 1;
        for ( ; ( (auto3E280111_ai >= 0 && lv_count <= auto3E280111_ae) || (auto3E280111_ai < 0 && lv_count >= auto3E280111_ae) ) ; lv_count += auto3E280111_ai ) {
            lv_attempts = 1;
            for ( ; ( (auto5D4F6B19_ai >= 0 && lv_attempts <= auto5D4F6B19_ae) || (auto5D4F6B19_ai < 0 && lv_attempts >= auto5D4F6B19_ae) ) ; lv_attempts += auto5D4F6B19_ai ) {
                lv_targetLocation = RegionRandomPoint(RegionPlayableMap());
                if ((PathingType(lv_targetLocation) == c_pathingGround) && (PointPathingIsConnected(lv_targetLocation, PlayerStartLocation(1)) == true) && (DistanceBetweenPoints(lv_targetLocation, PlayerStartLocation(1)) > 30.0) && (UnitCount(null, c_playerAny, RegionCircle(lv_targetLocation, 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1) <= 0)) {
                    auto5C59813E_val = RandomInt(1, 3);
                    if (auto5C59813E_val == 1) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "WidowMineBurrowed", 0, 3, lv_targetLocation);
                    }
                    else if (auto5C59813E_val == 2) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "BanelingBurrowed", 0, 3, lv_targetLocation);
                    }
                    else if (auto5C59813E_val == 3) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "OracleStasisTrap", 0, 3, lv_targetLocation);
                    }
                    else {
                    }
                    break;
                }

            }
        }
    }
    else if (auto25BE16F5_val == 3) {
        lv_count = libCOMI_gf_MinimumDifficultyValueCoopInteger(8, 12, 15, 30, 30, 30);
        if ((GameGetMissionTime() >= 360.0)) {
            lv_count += libCOMI_gf_MinimumDifficultyValueCoopInteger(3, 4, 8, 15, 15, 15);
        }

        if ((GameGetMissionTime() >= 600.0)) {
            lv_count += libCOMI_gf_MinimumDifficultyValueCoopInteger(5, 5, 10, 15, 15, 15);
        }

        if ((UnitCountAlliance(1, c_unitAllianceAlly, RegionEntireMap(), UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 5)) {
            libCOUI_gf_CU_MutatorListShowNotification(StringExternal("Param/Value/lib_CPCM_598D7EEC"));
            libNtve_gf_CreateUnitsWithDefaultFacing(lv_count, "Scourge", 0, 3, lp_giftLocation);
            lv_bonusUnits = UnitLastCreatedGroup();
            auto8DDCC7AA_g = lv_bonusUnits;
            auto8DDCC7AA_u = UnitGroupCount(auto8DDCC7AA_g, c_unitCountAll);
            for (;; auto8DDCC7AA_u -= 1) {
                lv_indexUnit = UnitGroupUnitFromEnd(auto8DDCC7AA_g, auto8DDCC7AA_u);
                if (lv_indexUnit == null) { break; }
                UnitSetHeight(lv_indexUnit, 16.0, 0.0);
                UnitSetHeight(lv_indexUnit, UnitTypeGetProperty(UnitGetType(lv_indexUnit), c_unitPropHeight), 3.0);
            }
            Wait(3.0, c_timeGame);
            AISetGroupScriptControlled(lv_bonusUnits, false);
            AISetGroupSuicide(lv_bonusUnits, true);
        }
        else {
            libCOUI_gf_CU_MutatorListShowNotification(StringExternal("Param/Value/lib_CPCM_132FC38D"));
            libNtve_gf_CreateUnitsWithDefaultFacing(lv_count, "BanelingBurrowed", 0, 3, PointWithOffsetPolar(lp_giftLocation, RandomFixed(0.0, 3.0), libNtve_gf_RandomAngle()));
            lv_bonusUnits = UnitLastCreatedGroup();
            UnitGroupIssueOrder(lv_bonusUnits, Order(AbilityCommand("BurrowBanelingUp", 0)), c_orderQueueReplace);
            Wait(1.0, c_timeGame);
            AISetGroupScriptControlled(lv_bonusUnits, false);
            AISetGroupSuicide(lv_bonusUnits, true);
        }
    }
    else if (auto25BE16F5_val == 4) {
        libCOUI_gf_CU_MutatorListShowNotification(StringExternal("Param/Value/lib_CPCM_42378FE0"));
        libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 1, 2, 2, 2), "HybridReaver", 0, 3, lp_giftLocation);
        lv_bonusUnits = UnitLastCreatedGroup();
        if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 1, 1, 1) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 1, 1, 1), "HybridDominatorVoid", 0, 3, lp_giftLocation);
            UnitGroupAddUnitGroup(lv_bonusUnits, UnitLastCreatedGroup());
        }

        if ((GameGetMissionTime() > 500.0)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 1, 1), "HybridDominatorVoid", 0, 3, lp_giftLocation);
            UnitGroupAddUnitGroup(lv_bonusUnits, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 1, 1, 1), "HybridBehemoth", 0, 3, lp_giftLocation);
            UnitGroupAddUnitGroup(lv_bonusUnits, UnitLastCreatedGroup());
        }

        if ((GameGetMissionTime() > 700.0)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 1, 1), "HybridBehemoth", 0, 3, lp_giftLocation);
            UnitGroupAddUnitGroup(lv_bonusUnits, UnitLastCreatedGroup());
        }

        autoF681C486_g = lv_bonusUnits;
        autoF681C486_u = UnitGroupCount(autoF681C486_g, c_unitCountAll);
        for (;; autoF681C486_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(autoF681C486_g, autoF681C486_u);
            if (lv_indexUnit == null) { break; }
            libCPCM_gf_CT_GiftSpawnHybridFX(UnitGetPosition(lv_indexUnit));
        }
        AISetGroupScriptControlled(lv_bonusUnits, false);
        AISetGroupSuicide(lv_bonusUnits, true);
    }
    else if (auto25BE16F5_val == 5) {
        libCOUI_gf_CU_MutatorListShowNotification(StringExternal("Param/Value/lib_CPCM_4C1DD608"));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorKillBot", 0, 3, lp_giftLocation);
        lv_killBot = UnitLastCreated();
        UnitSetState(lv_killBot, c_unitStateInvulnerable, true);
        libCOMI_gf_CreatePingFacingAngleCoop(libCOOC_gf_HumanPlayers(), UnitGetPosition(UnitLastCreated()), 270.0, "PingBoss", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
        lv_killBotPing = PingLastCreated();
        PingSetScale(lv_killBotPing, 0.45);
        PingSetUnit(lv_killBotPing, lv_killBot);
        PingSetTooltip(lv_killBotPing, StringExternal("Param/Value/lib_CPCM_28236E8B"));
        UnitStatusBarOverride(lv_killBot, c_unitStatusGroupAll);
        DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "InfoLabel", lv_killBot);
        lv_killBotLabel = DialogControlLastCreated();
        AISetUnitSuicide(lv_killBot, true);
        if ((GameGetMissionTime() < 600.0)) {
            lv_killBotKillCap = libCOMI_gf_MinimumDifficultyValueCoopInteger(3, 5, 20, 30, 30, 30);
        }
        else {
            lv_killBotKillCap = libCOMI_gf_MinimumDifficultyValueCoopInteger(5, 10, 30, 50, 50, 50);
        }
        lv_killBotKills = -1;
        TriggerEnable(libCPCM_gt_CT_GiftKillBotBanelingCredit, true);
        while (true) {
            if (((UnitIsValid(lv_killBot) == false) || (UnitIsAlive(lv_killBot) == false))) {
                libCOMI_gf_DestroyPingCoop(lv_killBotPing);
                return true;
            }

            if ((lv_killBotKills != libNtve_gf_UnitGetPropertyKills(lv_killBot, c_unitPropCurrent))) {
                lv_killBotKills = libNtve_gf_UnitGetPropertyKills(lv_killBot, c_unitPropCurrent);
                TextExpressionSetToken("Param/Expression/lib_CPCM_6BFC0C7A", "A", IntToText(lv_killBotKills));
                TextExpressionSetToken("Param/Expression/lib_CPCM_6BFC0C7A", "B", IntToText(lv_killBotKillCap));
                libNtve_gf_SetDialogItemText(lv_killBotLabel, TextExpressionAssemble("Param/Expression/lib_CPCM_6BFC0C7A"), PlayerGroupAll());
                if ((lv_killBotKills >= lv_killBotKillCap)) {
                    UnitKill(lv_killBot);
                }

            }

            Wait(0.5, c_timeGame);
        }
    }
    else if (auto25BE16F5_val == 6) {
        libCOUI_gf_CU_MutatorListShowNotification(StringExternal("Param/Value/lib_CPCM_FB7EE045"));
        libCPCM_gv_cT_GiftShuttlesOvercharged += libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 4, 5, 5, 5);
        autoD7C8B056_g = UnitGroup("ProtossFrigate", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoD7C8B056_u = UnitGroupCount(autoD7C8B056_g, c_unitCountAll);
        for (;; autoD7C8B056_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(autoD7C8B056_g, autoD7C8B056_u);
            if (lv_indexUnit == null) { break; }
            if ((libCPCM_gv_cT_GiftShuttlesOvercharged == 0)) {
                break;
            }

            if ((UnitHasBehavior2(lv_indexUnit, "MutatorShuttleOvercharge") == false)) {
                UnitBehaviorAddPlayer(lv_indexUnit, "MutatorShuttleOvercharge", 3, 1);
                libCPCM_gv_cT_GiftShuttlesOvercharged -= 1;
            }

        }
    }
    else if (auto25BE16F5_val == 7) {
        libCOUI_gf_CU_MutatorListShowNotification(StringExternal("Param/Value/lib_CPCM_D32798EC"));
        TriggerEnable(libCPCM_gt_CT_GiftShrunkEffectOn, true);
        TriggerEnable(libCPCM_gt_CT_GiftShrunkEffectOff, true);
        auto1B77D617_g = UnitGroupAlliance(1, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1B77D617_u = UnitGroupCount(auto1B77D617_g, c_unitCountAll);
        for (;; auto1B77D617_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(auto1B77D617_g, auto1B77D617_u);
            if (lv_indexUnit == null) { break; }
            UnitBehaviorAddPlayer(lv_indexUnit, "MutatorShrunk", 3, 1);
        }
    }
    else if (auto25BE16F5_val == 8) {
    }
    else if (auto25BE16F5_val == 9) {
    }
    else if (auto25BE16F5_val == 10) {
    }
    else {
    }
    return true;
}

string libCPCM_gf_CT_GiftRandomMutator () {
    // Variable Declarations
    string lv_randomMutator;

    // Automatic Variable Declarations
    int auto24EDF7FA_val;

    // Variable Initialization

    // Implementation
    while (true) {
        auto24EDF7FA_val = RandomInt(1, 10);
        if (auto24EDF7FA_val == 1) {
            lv_randomMutator = "Evolve";
        }
        else if (auto24EDF7FA_val == 2) {
            lv_randomMutator = "JustDie";
        }
        else if (auto24EDF7FA_val == 3) {
            lv_randomMutator = "HybridNuke";
        }
        else if (auto24EDF7FA_val == 4) {
            lv_randomMutator = "AllEnemiesCloaked";
        }
        else if (auto24EDF7FA_val == 5) {
            lv_randomMutator = "SpawnBroodlings";
        }
        else if (auto24EDF7FA_val == 6) {
            lv_randomMutator = "InfestedTerranSpawner";
        }
        else if (auto24EDF7FA_val == 7) {
            lv_randomMutator = "ConcussiveAttacks";
        }
        else if (auto24EDF7FA_val == 8) {
            lv_randomMutator = "Nukes";
        }
        else if (auto24EDF7FA_val == 9) {
            lv_randomMutator = "Blizzard";
        }
        else if (auto24EDF7FA_val == 10) {
            lv_randomMutator = "DeathAOE";
        }
        else {
        }
        if ((libCPCM_gf_MutatorIsEnabled(lv_randomMutator) == false)) {
            return lv_randomMutator;
        }

    }
    return null;
}

trigger auto_libCPCM_gf_CT_TrickOrTreaterLogic_Trigger = null;
unit auto_libCPCM_gf_CT_TrickOrTreaterLogic_lp_civilianUnit;

void libCPCM_gf_CT_TrickOrTreaterLogic (unit lp_civilianUnit) {
    auto_libCPCM_gf_CT_TrickOrTreaterLogic_lp_civilianUnit = lp_civilianUnit;

    if (auto_libCPCM_gf_CT_TrickOrTreaterLogic_Trigger == null) {
        auto_libCPCM_gf_CT_TrickOrTreaterLogic_Trigger = TriggerCreate("auto_libCPCM_gf_CT_TrickOrTreaterLogic_TriggerFunc");
    }

    TriggerExecute(auto_libCPCM_gf_CT_TrickOrTreaterLogic_Trigger, false, false);
}

bool auto_libCPCM_gf_CT_TrickOrTreaterLogic_TriggerFunc (bool testConds, bool runActions) {
    unit lp_civilianUnit = auto_libCPCM_gf_CT_TrickOrTreaterLogic_lp_civilianUnit;

    // Variable Declarations
    unit lv_nearbyUnit;
    int lv_index;
    fixed lv_killerSupply;
    fixed lv_victimSupply;
    fixed lv_newSupply;
    fixed lv_lifePercentage;
    fixed lv_shieldPercentage;
    int lv_tier;
    int lv_type;
    int lv_intSupply;
    int lv_intUnit;
    string lv_newUnitType;
    string[11][11] lv_unitTypes;
    point lv_spawnPosition;
    string lv_killerTier;
    string lv_killingUnitTestUnit;
    int lv_tierEndpoint;
    string lv_endpointTestUnit;
    int lv_tierCeiling;
    int lv_tierFloor;

    // Automatic Variable Declarations
    fixed auto2BA21DFB_at;
    const int autoAADDFCC3_ae = 1;
    const int autoAADDFCC3_ai = -1;
    const int auto1BAE1AEF_ae = 1;
    const int auto1BAE1AEF_ai = -1;
    string autoE9B751B1_val;

    // Variable Initialization

    // Implementation
    UnitSetState(lp_civilianUnit, c_unitStateInvulnerable, true);
    auto2BA21DFB_at = 0;
    while (!((libNtve_gf_UnitInRegion(lp_civilianUnit, RegionCircle(UnitGetPosition(libCPCM_gv_cT_CandyBowlUnit), 3.0)) == true)) && auto2BA21DFB_at <= 300.0) {
        Wait(1.0, c_timeGame);
        auto2BA21DFB_at = auto2BA21DFB_at + 1.0;
    }
    if ((libNtve_gf_UnitInRegion(lp_civilianUnit, RegionCircle(UnitGetPosition(libCPCM_gv_cT_CandyBowlUnit), 3.0)) == true) && (UnitAbilityChargeInfo(libCPCM_gv_cT_CandyBowlUnit, AbilityCommand("MutatorBuyCandy", 0), c_unitAbilChargeCountLeft) >= 1)) {
        UnitAbilityAddChargeUsed(libCPCM_gv_cT_CandyBowlUnit, "MutatorBuyCandy", "Abil/MutatorBuyCandy", 1.0);
        UnitIssueOrder(lp_civilianUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_civilianUnit), c_animNameDefault, "Stand Victory", 0, c_animTimeDefault);
        TextTagSetText(libCPCM_gv_cT_CandyBowlTextTag, TextExpressionAssemble("Param/Expression/lib_CPCM_A43C9BD5"));
        libCOUI_gf_SetSingularBossBarCurrentValueVoidCampaign(FixedToInt(UnitAbilityChargeInfo(libCPCM_gv_cT_CandyBowlUnit, AbilityCommand("MutatorBuyCandy", 0), c_unitAbilChargeCountLeft)), true);
        Wait(3.0, c_timeGame);
        UnitRemove(lp_civilianUnit);
    }
    else {
        UnitIssueOrder(lp_civilianUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        lv_tierFloor = 1;
        if ((GameGetMissionTime() < 120.0)) {
            lv_tierCeiling = 1;
        }
        else if ((GameGetMissionTime() < 240.0)) {
            lv_tierCeiling = 2;
        }
        else if ((GameGetMissionTime() < 360.0)) {
            lv_tierCeiling = 3;
        }
        else if ((GameGetMissionTime() < 420.0)) {
            lv_tierCeiling = 4;
            lv_tierFloor = 2;
        }
        else if ((GameGetMissionTime() < 450.0)) {
            lv_tierCeiling = 5;
            lv_tierFloor = 3;
        }
        else if ((GameGetMissionTime() < 480.0)) {
            lv_tierCeiling = 6;
            lv_tierFloor = 4;
        }
        else if ((GameGetMissionTime() < 510.0)) {
            lv_tierCeiling = 7;
            lv_tierFloor = 5;
        }
        else if ((GameGetMissionTime() < 540.0)) {
            lv_tierCeiling = 8;
            lv_tierFloor = 6;
        }
        else if ((GameGetMissionTime() < 570.0)) {
            lv_tierCeiling = 9;
            lv_tierFloor = 7;
        }
        else if ((GameGetMissionTime() < 600.0)) {
            lv_tierCeiling = 10;
            lv_tierFloor = 8;
        }
        lv_newSupply = RandomInt(lv_tierFloor, lv_tierCeiling);
        lv_tier = MinI(FixedToInt(lv_newSupply), 10);
        for ( ; ( (autoAADDFCC3_ai >= 0 && lv_tier <= autoAADDFCC3_ae) || (autoAADDFCC3_ai < 0 && lv_tier >= autoAADDFCC3_ae) ) ; lv_tier += autoAADDFCC3_ai ) {
            lv_tierEndpoint = 8;
            for ( ; ( (auto1BAE1AEF_ai >= 0 && lv_tierEndpoint <= auto1BAE1AEF_ae) || (auto1BAE1AEF_ai < 0 && lv_tierEndpoint >= auto1BAE1AEF_ae) ) ; lv_tierEndpoint += auto1BAE1AEF_ai ) {
                lv_endpointTestUnit = UserDataGetUnit("EvolutionTiers", UserDataInstance("EvolutionTiers", lv_tier), "UnitsToEvolveInto", lv_tierEndpoint);
                if ((lv_endpointTestUnit != "")) {
                    break;
                }

            }
            lv_newUnitType = UserDataGetUnit("EvolutionTiers", UserDataInstance("EvolutionTiers", lv_tier), "UnitsToEvolveInto", RandomInt(1, lv_tierEndpoint));
            if ((lv_newUnitType != "")) {
                break;
            }

        }
        lv_spawnPosition = UnitGetPosition(lp_civilianUnit);
        PointSetFacing(lv_spawnPosition, UnitGetFacing(lp_civilianUnit));
        UnitRemove(lp_civilianUnit);
        libNtve_gf_CreateUnitsAtPoint2(1, lv_newUnitType, c_unitCreateIgnorePlacement, RandomInt(3, 4), lv_spawnPosition);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        UnitBehaviorAdd(UnitLastCreated(), "MutatorEvolve", UnitLastCreated(), 1);
        autoE9B751B1_val = libCOMI_gf_GetUnitRace(UnitLastCreated());
        if (autoE9B751B1_val == "Prot") {
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MutatorQuickEvolveProtoss");
        }
        else if (autoE9B751B1_val == "Terr") {
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MutatorQuickEvolveTerran");
        }
        else if (autoE9B751B1_val == "Zerg") {
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MutatorQuickEvolveZerg");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MutatorQuickEvolveZerg");
        }
        UnitCreateEffectUnit(lp_civilianUnit, "MutatorQuickEvolveMissleLaunch", UnitLastCreated());
        AISetUnitSuicide(UnitLastCreated(), true);
    }
    return true;
}

fixed libCPCM_gf_CT_MathNumberWrap (fixed lp_value, fixed lp_minAmount, fixed lp_maxAmount) {
    // Variable Declarations
    fixed lv_width;
    fixed lv_OffsetValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_width = (lp_maxAmount - lp_minAmount);
    lv_OffsetValue = (lp_value - lp_minAmount);
    return ((lv_OffsetValue - (Floor((lv_OffsetValue / lv_width)) * lv_width)) + lp_minAmount);
}

void libCPCM_gf_CT_NullifyDamage (unit lp_damagedUnit, unit lp_damagingUnit, fixed lp_damageAmount) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickPolarity)] == true) && (lp_damageAmount > 0.0) && (((UnitGetOwner(lp_damagingUnit) == 1) && (UnitHasBehavior2(lp_damagedUnit, "MutatorImmunetoPlayer1") == true)) || ((UnitGetOwner(lp_damagingUnit) == 2) && (UnitHasBehavior2(lp_damagedUnit, "MutatorImmunetoPlayer2") == true)))) {
        UnitSetPropertyFixed(lp_damagedUnit, c_unitPropLife, (UnitGetPropertyFixed(lp_damagedUnit, c_unitPropLife, c_unitPropCurrent) + lp_damageAmount));
    }

}

void libCPCM_gf_CT_Polarity_Swap (unit lp_polarizedUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickPolarity)] == false)) {
        return ;
    }
    else if ((UnitHasBehavior2(lp_polarizedUnit, "MutatorImmunetoPlayer1") == true)) {
        libCPCM_gf_CT_RemovePolarity(lp_polarizedUnit);
        UnitCreateEffectUnit(lp_polarizedUnit, "MutatorPolarityMimic", libCPCM_gv_cT_PolarityCloneTarget[2]);
        UnitBehaviorAdd(lp_polarizedUnit, "MutatorImmunetoPlayer2", lp_polarizedUnit, 1);
    }
    else if ((UnitHasBehavior2(lp_polarizedUnit, "MutatorImmunetoPlayer2") == true)) {
        libCPCM_gf_CT_RemovePolarity(lp_polarizedUnit);
        UnitCreateEffectUnit(lp_polarizedUnit, "MutatorPolarityMimic", libCPCM_gv_cT_PolarityCloneTarget[1]);
        UnitBehaviorAdd(lp_polarizedUnit, "MutatorImmunetoPlayer1", lp_polarizedUnit, 1);
    }
}

void libCPCM_gf_CT_Polarity_TrainApply (unit lp_createdUnit) {
    // Variable Declarations
    unit lv_indexTrain;
    unitgroup lv_trainCars;
    int lv_polarityPlayer;

    // Automatic Variable Declarations
    unitgroup auto0D546A6C_g;
    int auto0D546A6C_u;

    // Variable Initialization
    lv_trainCars = UnitGroupEmpty();

    // Implementation
    lv_trainCars = UnitGroup("Caboose", c_playerAny, RegionCircle(UnitGetPosition(lp_createdUnit), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_trainCars, UnitGroup("TarsonisEngineFast", c_playerAny, RegionCircle(UnitGetPosition(lp_createdUnit), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_trainCars, UnitGroup("TarsonisEngine", c_playerAny, RegionCircle(UnitGetPosition(lp_createdUnit), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_trainCars, UnitGroup("FreightCar", c_playerAny, RegionCircle(UnitGetPosition(lp_createdUnit), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupRemove(lv_trainCars, lp_createdUnit);
    auto0D546A6C_g = lv_trainCars;
    auto0D546A6C_u = UnitGroupCount(auto0D546A6C_g, c_unitCountAll);
    for (;; auto0D546A6C_u -= 1) {
        lv_indexTrain = UnitGroupUnitFromEnd(auto0D546A6C_g, auto0D546A6C_u);
        if (lv_indexTrain == null) { break; }
        if ((UnitHasBehavior2(lv_indexTrain, "MutatorImmunetoPlayer1") == true)) {
            lv_polarityPlayer = 1;
            break;
        }
        else if ((UnitHasBehavior2(lv_indexTrain, "MutatorImmunetoPlayer2") == true)) {
            lv_polarityPlayer = 2;
            break;
        }
    }
    if ((lv_polarityPlayer == 0)) {
        if (libCPCM_gv_cT_PolarityPlayerTrains >= 2) {
            libCPCM_gv_cT_PolarityPlayerTrains = 1;
        }
        else {
            libCPCM_gv_cT_PolarityPlayerTrains = libCPCM_gv_cT_PolarityPlayerTrains + 1;
        }
        lv_polarityPlayer = libCPCM_gv_cT_PolarityPlayerTrains;
    }

    if ((libCPCM_gv_cT_PolarityCloneTarget[lv_polarityPlayer] == null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, libCPCM_gv_cT_PolarityEnemies[lv_polarityPlayer], Point(0.0, 0.0));
        UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
        libCPCM_gv_cT_PolarityCloneTarget[lv_polarityPlayer] = UnitLastCreated();
    }

    UnitCreateEffectUnit(lp_createdUnit, "MutatorPolarityMimic", libCPCM_gv_cT_PolarityCloneTarget[lv_polarityPlayer]);
    if ((lv_polarityPlayer == 1)) {
        UnitBehaviorAddPlayer(lp_createdUnit, "MutatorImmunetoPlayer1", UnitGetOwner(lp_createdUnit), 1);
    }
    else {
        UnitBehaviorAddPlayer(lp_createdUnit, "MutatorImmunetoPlayer2", UnitGetOwner(lp_createdUnit), 1);
    }
}

void libCPCM_gf_CT_AllCastersUseAbility (unit lp_caster, unit lp_target, int lp_ability) {
    // Automatic Variable Declarations
    int autoBF60D836_val;

    // Implementation
    autoBF60D836_val = lp_ability;
    if (autoBF60D836_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersPsiStorm) {
        UnitCreateEffectPoint(lp_caster, "PsiStormPersistent", UnitGetPosition(lp_target));
    }
    else if (autoBF60D836_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersGuardianShield) {
        UnitCreateEffectUnit(lp_caster, "GuardianShieldPersistent", lp_caster);
    }
    else if (autoBF60D836_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersSeekerMissile) {
        UnitCreateEffectUnit(lp_caster, "SeekerMissileLaunchMissile", lp_target);
    }
    else if (autoBF60D836_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersFungal) {
        UnitCreateEffectPoint(lp_caster, "FungalGrowthLaunchMissile", UnitGetPosition(lp_target));
    }
    else if (autoBF60D836_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersIrradiate) {
        UnitCreateEffectUnit(lp_caster, "IrradiateSet", lp_target);
    }
    else if (autoBF60D836_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersAbduct) {
        UnitCreateEffectUnit(lp_caster, "YoinkStartSwitch", lp_target);
    }
    else if (autoBF60D836_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersYamato) {
        UnitCreateEffectUnit(lp_caster, "Yamato", lp_target);
    }
    else if (autoBF60D836_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersGravitonBeam) {
        UnitCreateEffectUnit(lp_caster, "GravitonBeamUrun", lp_target);
    }
    else if (autoBF60D836_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersNeural) {
        UnitCreateEffectUnit(lp_caster, "NeuralParasiteLaunchMissile", lp_target);
    }
    else if (autoBF60D836_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersPsiOrb) {
        UnitCreateEffectPoint(lp_caster, "VoidHighTemplarPsiOrbInitialPersistent", UnitGetPosition(lp_target));
    }
    else if (autoBF60D836_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersTimeWarp) {
        UnitCreateEffectPoint(lp_caster, "TemporalFieldCreatePersistent", UnitGetPosition(lp_target));
    }
    else if (autoBF60D836_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersVortex) {
        UnitCreateEffectPoint(lp_caster, "VoidSentryBlackHolePersistent", UnitGetPosition(lp_target));
    }
    else if (autoBF60D836_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersDefensiveMatrix) {
        UnitCreateEffectUnit(lp_caster, "DefensiveMatrixSet", lp_caster);
    }
    else if (autoBF60D836_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersPDD) {
        UnitCreateEffectPoint(lp_caster, "PointDefenseDroneReleaseCreateUnit", libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_caster), 1.5, UnitGetPosition(lp_target)));
    }
    else if (autoBF60D836_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersDisruptionWeb) {
        UnitCreateEffectPoint(lp_caster, "CorsairMPDisruptionWebCreatePersistent", UnitGetPosition(lp_target));
    }
    else if (autoBF60D836_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersPhaseShift) {
        UnitCreateEffectUnit(lp_caster, "HybridGeneralPhaseShiftSet", lp_target);
    }
    else {
    }
    UnitSetPropertyFixed(lp_caster, c_unitPropEnergy, (UnitGetPropertyFixed(lp_caster, c_unitPropEnergy, c_unitPropCurrent) - 50.0));
    libCPCM_gv_cT_StatAllCastersSpellsCast[UnitGetOwner(lp_target)] += 1;
    if ((UnitGetType(lp_caster) != "Caboose") && (UnitGetType(lp_caster) != "TarsonisEngineFast") && (UnitGetType(lp_caster) != "TarsonisEngine") && (UnitGetType(lp_caster) != "FreightCar") && (UnitGetType(lp_caster) != "ProtossFrigate")) {
        libNtve_gf_MakeUnitFacePoint(lp_caster, UnitGetPosition(lp_target), 0.1);
    }

}

int libCPCM_gf_CT_AllCastersAbilityPlayerCost (int lp_ability) {
    // Automatic Variable Declarations
    int autoEB6F7676_val;

    // Implementation
    autoEB6F7676_val = lp_ability;
    if (autoEB6F7676_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersVortex) {
        return 150;
    }
    else if (autoEB6F7676_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersYamato) {
        return 80;
    }
    else if (autoEB6F7676_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersNeural) {
        return 90;
    }
    else if (autoEB6F7676_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersDefensiveMatrix) {
        return 20;
    }
    else if (autoEB6F7676_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersGuardianShield) {
        return 20;
    }
    else if (autoEB6F7676_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersPDD) {
        return 20;
    }
    else if (autoEB6F7676_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersSeekerMissile) {
        return 40;
    }
    else if (autoEB6F7676_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersPsiStorm) {
        return 40;
    }
    else if (autoEB6F7676_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersPsiOrb) {
        return 45;
    }
    else if (autoEB6F7676_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersIrradiate) {
        return 45;
    }
    else if (autoEB6F7676_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersFungal) {
        return 40;
    }
    else if (autoEB6F7676_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersTimeWarp) {
        return 30;
    }
    else if (autoEB6F7676_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersGravitonBeam) {
        return 20;
    }
    else if (autoEB6F7676_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersAbduct) {
        return 20;
    }
    else if (autoEB6F7676_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersDisruptionWeb) {
        return 40;
    }
    else if (autoEB6F7676_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersPhaseShift) {
        return 40;
    }
    else {
    }
    return 50;
}

int libCPCM_gf_CT_AllCastersAbilityChance (int lp_ability, int lp_targetPlayer, unit lp_targetUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(lp_targetPlayer) != 4) && (lp_ability == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersVortex)) {
        return 0;
    }
    else if ((UnitFilterMatch(lp_targetUnit, 1, UnitFilter((1 << c_targetFilterStructure), 0, 0, 0)) == true)) {
        if ((lp_ability != libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersPDD) && (lp_ability != libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersGuardianShield) && (lp_ability != libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersDefensiveMatrix) && (lp_ability != libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersDisruptionWeb) && (lp_ability != libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersPhaseShift)) {
            return 0;
        }

        if ((lp_ability == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersDisruptionWeb) && (UnitWeaponCount(lp_targetUnit) == 0)) {
            return 0;
        }

    }
    else if ((lp_ability == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersVortex)) {
        return 50;
    }
    else if ((lp_ability == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersPhaseShift)) {
        return 0;
    }
    else if ((lp_ability == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersDisruptionWeb)) {
        return 10;
    }
    else if ((lp_ability == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersIrradiate) && (UnitFilterMatch(lp_targetUnit, 1, UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterStructure), 0)) == false)) {
        return 0;
    }
    else if ((lp_ability == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersGravitonBeam) && (UnitFilterMatch(lp_targetUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterMassive) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic), 0)) == false)) {
        return 0;
    }
    return 100;
}

int libCPCM_gf_CT_AllCastersRandomAbility (int lp_targetPlayer, unit lp_targetUnit) {
    // Variable Declarations
    int[31] lv_abilityOptions;
    int lv_indexAbilityInt;
    int lv_indexAbility;
    int lv_abilityCount;

    // Automatic Variable Declarations
    int autoC36D4FE0_ae;
    const int autoC36D4FE0_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libCPCM_gv_cT_AllCastersPlayerEnergy[lp_targetPlayer] < libCPCM_gv_cTC_AllCastersMinEnergyCost)) {
        return libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersNone;
    }

    if ((libCPCM_gv_cT_DebugAllCastersAbility != 0)) {
        lv_indexAbilityInt = libCPCM_gv_cT_DebugAllCastersAbility;
        lv_indexAbility = lv_indexAbilityInt;
        if ((libCPCM_gf_CT_AllCastersAbilityPlayerCost(lv_indexAbility) <= libCPCM_gv_cT_AllCastersPlayerEnergy[lp_targetPlayer])) {
            return lv_indexAbilityInt;
        }
        else {
            return libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersNone;
        }
    }

    autoC36D4FE0_ae = (libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersMax);
    lv_indexAbilityInt = 1;
    for ( ; ( (autoC36D4FE0_ai >= 0 && lv_indexAbilityInt <= autoC36D4FE0_ae) || (autoC36D4FE0_ai < 0 && lv_indexAbilityInt >= autoC36D4FE0_ae) ) ; lv_indexAbilityInt += autoC36D4FE0_ai ) {
        lv_indexAbility = lv_indexAbilityInt;
        if ((libCPCM_gf_CT_AllCastersAbilityPlayerCost(lv_indexAbility) <= libCPCM_gv_cT_AllCastersPlayerEnergy[lp_targetPlayer]) && (RandomInt(1, 100) <= libCPCM_gf_CT_AllCastersAbilityChance(lv_indexAbility, lp_targetPlayer, lp_targetUnit))) {
            lv_abilityCount += 1;
            lv_abilityOptions[lv_abilityCount] = lv_indexAbility;
        }

    }
    if ((lv_abilityCount == 0)) {
        return libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersNone;
    }

    return lv_abilityOptions[RandomInt(1, lv_abilityCount)];
}

fixed libCPCM_gf_CT_AllCastersAbilityRange (int lp_ability) {
    // Automatic Variable Declarations
    int auto29142B1C_val;

    // Implementation
    auto29142B1C_val = lp_ability;
    if (auto29142B1C_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersPsiStorm) {
        return 9.0;
    }
    else if (auto29142B1C_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersIrradiate) {
        return 9.0;
    }
    else if (auto29142B1C_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersAbduct) {
        return 9.0;
    }
    else if (auto29142B1C_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersGravitonBeam) {
        return 4.0;
    }
    else if (auto29142B1C_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersNeural) {
        return 7.0;
    }
    else if (auto29142B1C_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersTimeWarp) {
        return 9.0;
    }
    else if (auto29142B1C_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersVortex) {
        return 9.0;
    }
    else if (auto29142B1C_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersDefensiveMatrix) {
        return 6.0;
    }
    else if (auto29142B1C_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersPDD) {
        return 9.0;
    }
    else if (auto29142B1C_val == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersDisruptionWeb) {
        return 9.0;
    }
    else {
    }
    return 10.0;
}

bool libCPCM_gf_CT_AllCastersBlacklistedUnit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "MutatorStormCloud") || (UnitGetType(lp_unit) == "MutatorTornado") || (UnitGetType(lp_unit) == "MutatorPurifierBeam") || (UnitGetType(lp_unit) == "MutatorCloakedMine"))) {
        return true;
    }
    else {
        return false;
    }
}

trigger auto_libCPCM_gf_CT_DestroyBlizzard_Trigger = null;
unit auto_libCPCM_gf_CT_DestroyBlizzard_lp_blizzardUnit;

void libCPCM_gf_CT_DestroyBlizzard (unit lp_blizzardUnit) {
    auto_libCPCM_gf_CT_DestroyBlizzard_lp_blizzardUnit = lp_blizzardUnit;

    if (auto_libCPCM_gf_CT_DestroyBlizzard_Trigger == null) {
        auto_libCPCM_gf_CT_DestroyBlizzard_Trigger = TriggerCreate("auto_libCPCM_gf_CT_DestroyBlizzard_TriggerFunc");
    }

    TriggerExecute(auto_libCPCM_gf_CT_DestroyBlizzard_Trigger, false, false);
}

bool auto_libCPCM_gf_CT_DestroyBlizzard_TriggerFunc (bool testConds, bool runActions) {
    unit lp_blizzardUnit = auto_libCPCM_gf_CT_DestroyBlizzard_lp_blizzardUnit;

    // Variable Declarations
    point lv_originalPosition;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_originalPosition = UnitGetPosition(lp_blizzardUnit);
    while (true) {
        Wait(1.0, c_timeGame);
        if (((PointGetX(UnitGetPosition(lp_blizzardUnit)) >= libNtve_gf_WidthOfRegion(RegionPlayableMap())) || (PointGetY(UnitGetPosition(lp_blizzardUnit)) <= PointGetY(RegionGetBoundsMin(RegionPlayableMap()))))) {
            break;
        }

        if ((DistanceBetweenPoints(UnitGetPosition(lp_blizzardUnit), lv_originalPosition) >= libCPCM_gv_cT_BlizzardSpacingTolerance)) {
            UnitGroupRemove(libCPCM_gv_cT_RecentBlizzards, lp_blizzardUnit);
        }

    }
    UnitGroupRemove(libCPCM_gv_cT_RecentBlizzards, lp_blizzardUnit);
    UnitRemove(lp_blizzardUnit);
    return true;
}

string libCPCM_gf_CT_RandomUnusedCycleMutator () {
    // Variable Declarations
    int lv_attempts;
    string lv_randomMutator;

    // Automatic Variable Declarations
    const int autoB0A7563D_ae = 1000;
    const int autoB0A7563D_ai = 1;

    // Variable Initialization

    // Implementation
    lv_attempts = 1;
    for ( ; ( (autoB0A7563D_ai >= 0 && lv_attempts <= autoB0A7563D_ae) || (autoB0A7563D_ai < 0 && lv_attempts >= autoB0A7563D_ae) ) ; lv_attempts += autoB0A7563D_ai ) {
        lv_randomMutator = UserDataInstance("Mutators", RandomInt(1, UserDataInstanceCount("Mutators")));
        if ((libCPCM_gf_IsRandomMutators(lv_randomMutator) == true) && (libCPCM_gf_MutatorIsEnabled(lv_randomMutator) == false)) {
            return lv_randomMutator;
        }

    }
    return null;
}

trigger auto_libCPCM_gf_CT_OrbitalStrikeLaunch_Trigger = null;
unitgroup auto_libCPCM_gf_CT_OrbitalStrikeLaunch_lp_targetCandidates;
int auto_libCPCM_gf_CT_OrbitalStrikeLaunch_lp_unitTargetCount;
int auto_libCPCM_gf_CT_OrbitalStrikeLaunch_lp_strikesPerTarget;
fixed auto_libCPCM_gf_CT_OrbitalStrikeLaunch_lp_fireDelay;
fixed auto_libCPCM_gf_CT_OrbitalStrikeLaunch_lp_targetDelay;

void libCPCM_gf_CT_OrbitalStrikeLaunch (unitgroup lp_targetCandidates, int lp_unitTargetCount, int lp_strikesPerTarget, fixed lp_fireDelay, fixed lp_targetDelay) {
    auto_libCPCM_gf_CT_OrbitalStrikeLaunch_lp_targetCandidates = lp_targetCandidates;
    auto_libCPCM_gf_CT_OrbitalStrikeLaunch_lp_unitTargetCount = lp_unitTargetCount;
    auto_libCPCM_gf_CT_OrbitalStrikeLaunch_lp_strikesPerTarget = lp_strikesPerTarget;
    auto_libCPCM_gf_CT_OrbitalStrikeLaunch_lp_fireDelay = lp_fireDelay;
    auto_libCPCM_gf_CT_OrbitalStrikeLaunch_lp_targetDelay = lp_targetDelay;

    if (auto_libCPCM_gf_CT_OrbitalStrikeLaunch_Trigger == null) {
        auto_libCPCM_gf_CT_OrbitalStrikeLaunch_Trigger = TriggerCreate("auto_libCPCM_gf_CT_OrbitalStrikeLaunch_TriggerFunc");
    }

    TriggerExecute(auto_libCPCM_gf_CT_OrbitalStrikeLaunch_Trigger, false, false);
}

bool auto_libCPCM_gf_CT_OrbitalStrikeLaunch_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_targetCandidates = auto_libCPCM_gf_CT_OrbitalStrikeLaunch_lp_targetCandidates;
    int lp_unitTargetCount = auto_libCPCM_gf_CT_OrbitalStrikeLaunch_lp_unitTargetCount;
    int lp_strikesPerTarget = auto_libCPCM_gf_CT_OrbitalStrikeLaunch_lp_strikesPerTarget;
    fixed lp_fireDelay = auto_libCPCM_gf_CT_OrbitalStrikeLaunch_lp_fireDelay;
    fixed lp_targetDelay = auto_libCPCM_gf_CT_OrbitalStrikeLaunch_lp_targetDelay;

    // Variable Declarations
    actor[51] lv_targetModels;
    point[51] lv_targetPoints;
    point lv_expectedUnitLocation;
    int lv_targetIndex;
    int lv_unitIndex;
    unit lv_targetUnit;
    int lv_strikeIndex;
    int lv_totalStrikes;
    fixed lv_finalDelay;

    // Automatic Variable Declarations
    int auto0F579DC3_ae;
    const int auto0F579DC3_ai = 1;
    int autoD00FC41F_ae;
    const int autoD00FC41F_ai = 1;
    int auto3632E969_ae;
    const int auto3632E969_ai = 1;
    int auto6376904A_ae;
    const int auto6376904A_ai = 1;
    int auto49B875D8_ae;
    const int auto49B875D8_ai = 1;

    // Variable Initialization

    // Implementation
    if ((UnitGroupCount(lp_targetCandidates, c_unitCountAlive) <= 0)) {
        return true;
    }

    lv_finalDelay = lp_fireDelay;
    lv_totalStrikes = (lp_unitTargetCount * lp_strikesPerTarget);
    auto0F579DC3_ae = lp_unitTargetCount;
    lv_unitIndex = 1;
    for ( ; ( (auto0F579DC3_ai >= 0 && lv_unitIndex <= auto0F579DC3_ae) || (auto0F579DC3_ai < 0 && lv_unitIndex >= auto0F579DC3_ae) ) ; lv_unitIndex += auto0F579DC3_ai ) {
        lv_targetIndex += 1;
        lv_targetUnit = UnitGroupRandomUnit(lp_targetCandidates, c_unitCountAlive);
        if ((UnitGetPropertyFixed(lv_targetUnit, c_unitPropMovementSpeedCurrent, c_unitPropCurrent) > 0.0)) {
            lv_expectedUnitLocation = PointWithOffsetPolar(UnitGetPosition(lv_targetUnit), (UnitGetPropertyFixed(lv_targetUnit, c_unitPropMovementSpeedCurrent, c_unitPropCurrent)*2.0), UnitGetFacing(lv_targetUnit));
            lv_targetPoints[lv_targetIndex] = UnitGetPosition(lv_targetUnit);
            lv_targetIndex += 1;
            lv_targetPoints[lv_targetIndex] = lv_expectedUnitLocation;
            auto3632E969_ae = lp_strikesPerTarget;
            lv_strikeIndex = 3;
            for ( ; ( (auto3632E969_ai >= 0 && lv_strikeIndex <= auto3632E969_ae) || (auto3632E969_ai < 0 && lv_strikeIndex >= auto3632E969_ae) ) ; lv_strikeIndex += auto3632E969_ai ) {
                lv_targetIndex += 1;
                lv_targetPoints[lv_targetIndex] = RegionRandomPoint(RegionCircle(lv_expectedUnitLocation, 7.0));
            }
        }
        else {
            lv_expectedUnitLocation = UnitGetPosition(lv_targetUnit);
            lv_targetPoints[lv_targetIndex] = lv_expectedUnitLocation;
            autoD00FC41F_ae = lp_strikesPerTarget;
            lv_strikeIndex = 2;
            for ( ; ( (autoD00FC41F_ai >= 0 && lv_strikeIndex <= autoD00FC41F_ae) || (autoD00FC41F_ai < 0 && lv_strikeIndex >= autoD00FC41F_ae) ) ; lv_strikeIndex += autoD00FC41F_ai ) {
                lv_targetIndex += 1;
                lv_targetPoints[lv_targetIndex] = RegionRandomPoint(RegionCircle(lv_expectedUnitLocation, 7.0));
            }
        }
    }
    auto6376904A_ae = lv_totalStrikes;
    lv_targetIndex = 1;
    for ( ; ( (auto6376904A_ai >= 0 && lv_targetIndex <= auto6376904A_ae) || (auto6376904A_ai < 0 && lv_targetIndex >= auto6376904A_ae) ) ; lv_targetIndex += auto6376904A_ai ) {
        libNtve_gf_CreateActorAtPoint("MutatorOrbitalStrikeTarget", lv_targetPoints[lv_targetIndex]);
        lv_targetModels[lv_targetIndex] = libNtve_gf_ActorLastCreated();
        Wait(lp_targetDelay, c_timeGame);
        lv_finalDelay -= 0.08;
    }
    Wait(lv_finalDelay, c_timeGame);
    auto49B875D8_ae = lv_totalStrikes;
    lv_targetIndex = 1;
    for ( ; ( (auto49B875D8_ai >= 0 && lv_targetIndex <= auto49B875D8_ae) || (auto49B875D8_ai < 0 && lv_targetIndex >= auto49B875D8_ae) ) ; lv_targetIndex += auto49B875D8_ai ) {
        PlayerCreateEffectPoint(3, "MutatorOrbitalStrike", lv_targetPoints[lv_targetIndex]);
        ActorSend(lv_targetModels[lv_targetIndex], "Signal Destroy");
        Wait(0.08, c_timeGame);
    }
    return true;
}

bool libCPCM_gf_CT_PurifierBeamTargetValid (unit lp_beam, unit lp_target) {
    // Variable Declarations
    point lv_stepLocation;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_target == null) || (UnitIsValid(lp_target) == false) || (UnitIsAlive(lp_target) == false) || (UnitGetType(lp_target) == "PowerTowerStetmann"))) {
        return false;
    }

    if (((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), UnitGetOwner(lp_target)) == false) || (libNtve_gf_UnitInRegion(lp_target, libCPCM_gf_CT_MutatorSafetyZone()) == true))) {
        return false;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(lp_beam), UnitGetPosition(lp_target)) > 10.0)) {
        lv_stepLocation = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_beam), 10.0, UnitGetPosition(lp_target));
        if ((RegionContainsPoint(libCPCM_gf_CT_MutatorSafetyZone(), lv_stepLocation) == true)) {
            return false;
        }

    }

    return true;
}

int libCPCM_gf_CT_CorpseNearestToLocation (point lp_location, fixed lp_maxDistance) {
    // Variable Declarations
    int lv_corpseIndex;
    int lv_bestIndex;
    fixed lv_bestDistance;
    fixed lv_testDistance;

    // Automatic Variable Declarations
    int auto9223BD58_ae;
    const int auto9223BD58_ai = 1;

    // Variable Initialization
    lv_bestDistance = 600.0;

    // Implementation
    auto9223BD58_ae = libCPCM_gv_cT_CorpseCount;
    lv_corpseIndex = 1;
    for ( ; ( (auto9223BD58_ai >= 0 && lv_corpseIndex <= auto9223BD58_ae) || (auto9223BD58_ai < 0 && lv_corpseIndex >= auto9223BD58_ae) ) ; lv_corpseIndex += auto9223BD58_ai ) {
        if ((libCPCM_gf_CT_CorpseBeingRevived(lv_corpseIndex) == true)) {
            continue;
        }

        lv_testDistance = DistanceBetweenPoints(lp_location, libCPCM_gv_cT_CorpseLocations[lv_corpseIndex]);
        if ((lv_testDistance < lv_bestDistance) && (lv_testDistance <= lp_maxDistance)) {
            lv_bestIndex = lv_corpseIndex;
            lv_bestDistance = lv_testDistance;
        }

    }
    return lv_bestIndex;
}

int libCPCM_gf_CT_CorpseAtRandom () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPCM_gv_cT_CorpseCount == 0)) {
        return 0;
    }

    return RandomInt(1, libCPCM_gv_cT_CorpseCount);
}

bool libCPCM_gf_CT_CorpseBeingRevived (int lp_corpseIndex) {
    // Variable Declarations
    unit lv_indexReanimator;

    // Automatic Variable Declarations
    unitgroup auto8EA6D032_g;
    int auto8EA6D032_u;

    // Variable Initialization

    // Implementation
    auto8EA6D032_g = libCPCM_gv_cT_Reanimators;
    auto8EA6D032_u = UnitGroupCount(auto8EA6D032_g, c_unitCountAll);
    for (;; auto8EA6D032_u -= 1) {
        lv_indexReanimator = UnitGroupUnitFromEnd(auto8EA6D032_g, auto8EA6D032_u);
        if (lv_indexReanimator == null) { break; }
        if ((libCPCM_gf_CT_CorpseTargetOfReanimator(lv_indexReanimator) == lp_corpseIndex)) {
            return true;
        }

    }
    return false;
}

int libCPCM_gf_CT_CorpseTargetOfReanimator (unit lp_reanimator) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_reanimator, 29));
}

string libCPCM_gf_CT_CorpseUnitType (int lp_corpseIndex) {
    // Automatic Variable Declarations
    // Implementation
    return (DataTableGetString(true, ("CT_CorpseType_" + IntToString(lp_corpseIndex))));
}

void libCPCM_gf_CT_CorpseSetAsTarget (unit lp_reanimator, int lp_corpseIndex) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetCustomValue(lp_reanimator, 29, lp_corpseIndex);
}

void libCPCM_gf_CT_CorpseCreate (unit lp_deadUnit) {
    // Variable Declarations
    int lv_corpseIndex;
    int lv_randomAttempt;

    // Automatic Variable Declarations
    const int auto55B4FC98_ae = 100;
    const int auto55B4FC98_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libCPCM_gv_cT_CorpseCount >= libCPCM_gv_cTC_CorpseMaxCount)) {
        if ((UnitTypeGetProperty(UnitGetType(lp_deadUnit), c_unitPropSuppliesUsed) < 2.0)) {
            return ;
        }

        lv_randomAttempt = 1;
        for ( ; ( (auto55B4FC98_ai >= 0 && lv_randomAttempt <= auto55B4FC98_ae) || (auto55B4FC98_ai < 0 && lv_randomAttempt >= auto55B4FC98_ae) ) ; lv_randomAttempt += auto55B4FC98_ai ) {
            lv_corpseIndex = RandomInt(1, libCPCM_gv_cTC_CorpseMaxCount);
            if ((libCPCM_gf_CT_CorpseBeingRevived(lv_corpseIndex) == false)) {
                break;
            }
            else {
                lv_corpseIndex = 0;
            }
        }
    }
    else {
        libCPCM_gv_cT_CorpseCount += 1;
        lv_corpseIndex = libCPCM_gv_cT_CorpseCount;
    }
    if ((lv_corpseIndex == 0)) {
        return ;
    }

    libCPCM_gv_cT_CorpseLocations[lv_corpseIndex] = UnitGetPosition(lp_deadUnit);
    DataTableSetString(true, ("CT_CorpseType_" + IntToString(lv_corpseIndex)), (UnitGetType(lp_deadUnit)));
}

void libCPCM_gf_CT_CorpseRemove (int lp_corpseIndex) {
    // Variable Declarations
    unit lv_indexReanimator;

    // Automatic Variable Declarations
    unitgroup autoFF5BEE9E_g;
    int autoFF5BEE9E_u;

    // Variable Initialization

    // Implementation
    libCPCM_gv_cT_CorpseLocations[lp_corpseIndex] = libCPCM_gv_cT_CorpseLocations[libCPCM_gv_cT_CorpseCount];
    DataTableSetString(true, ("CT_CorpseType_" + IntToString(lp_corpseIndex)), (libCPCM_gf_CT_CorpseUnitType(libCPCM_gv_cT_CorpseCount)));
    autoFF5BEE9E_g = libCPCM_gv_cT_Reanimators;
    autoFF5BEE9E_u = UnitGroupCount(autoFF5BEE9E_g, c_unitCountAll);
    for (;; autoFF5BEE9E_u -= 1) {
        lv_indexReanimator = UnitGroupUnitFromEnd(autoFF5BEE9E_g, autoFF5BEE9E_u);
        if (lv_indexReanimator == null) { break; }
        if ((libCPCM_gf_CT_CorpseTargetOfReanimator(lv_indexReanimator) == libCPCM_gv_cT_CorpseCount)) {
            libCPCM_gf_CT_CorpseSetAsTarget(lv_indexReanimator, lp_corpseIndex);
            break;
        }

    }
    libCPCM_gv_cT_CorpseCount -= 1;
}

void libCPCM_gf_CT_VoidRiftCreate (int lp_forPlayer) {
    // Variable Declarations
    int lv_riftPlayer;
    int lv_spawnAttempt;
    point lv_riftLocation;
    fixed lv_maxDistance;

    // Automatic Variable Declarations
    const int auto7BD80AA0_ae = 1000;
    const int auto7BD80AA0_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_forPlayer == 2)) {
        lv_riftPlayer = 4;
    }
    else {
        lv_riftPlayer = 3;
    }
    if ((GameGetMissionTime() < 480.0)) {
        lv_maxDistance = 80.0;
    }
    else if (true) {
        lv_maxDistance = 500.0;
    }
    lv_spawnAttempt = 1;
    for ( ; ( (auto7BD80AA0_ai >= 0 && lv_spawnAttempt <= auto7BD80AA0_ae) || (auto7BD80AA0_ai < 0 && lv_spawnAttempt >= auto7BD80AA0_ae) ) ; lv_spawnAttempt += auto7BD80AA0_ai ) {
        lv_riftLocation = RegionRandomPoint(RegionPlayableMap());
        if (((DistanceBetweenPoints(lv_riftLocation, PlayerStartLocation(1)) <= 30.0) || (DistanceBetweenPoints(lv_riftLocation, PlayerStartLocation(2)) <= 30.0) || (DistanceBetweenPoints(lv_riftLocation, PlayerStartLocation(1)) > lv_maxDistance) || (libCOOC_gf_CC_SpawnAllowedAtPoint(lv_riftLocation) == false) || (UnitCountAlliance(1, c_unitAllianceEnemy, RegionCircle(lv_riftLocation, 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 3) || (UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(lv_riftLocation, 10.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (PointPathingIsConnected(lv_riftLocation, PlayerStartLocation(1)) == false) || (UnitGroupCount(UnitGroup("MutatorVoidRift", c_playerAny, RegionCircle(lv_riftLocation, 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || ((libCOOC_gf_CC_CurrentMap() == "AC_UlnarLocks") && (GameGetMissionTime() < 300.0) && (AIPathingCostMap(lv_riftLocation, PlayerStartLocation(lp_forPlayer)) > 70)))) {
            lv_riftLocation = null;
            continue;
        }
        else {
            break;
        }
    }
    if ((lv_riftLocation == null)) {
        return ;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorVoidRift", 0, lv_riftPlayer, lv_riftLocation);
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), lv_riftLocation, 2.0, Color(100.00, 0.00, 0.00));
    libCPCM_gv_cT_VoidRiftCount += 1;
    UnitSetCustomValue(UnitLastCreated(), 0, libCPCM_gv_cT_VoidRiftCount);
    UnitGroupAdd(libCPCM_gv_cT_VoidRifts, UnitLastCreated());
    libCPCM_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
    DataTableSetTimer(true, ("RiftTimer" + IntToString(libCPCM_gv_cT_VoidRiftCount)), TimerCreate());
    TimerStart(DataTableGetTimer(true, ("RiftTimer" + IntToString(libCPCM_gv_cT_VoidRiftCount))), libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_forPlayer), 90.0, 70.0, 45.0, 30.0, 30.0, 30.0), false, c_timeAI);
    DataTableSetTimer(true, ("RiftTrickleTimer" + IntToString(libCPCM_gv_cT_VoidRiftCount)), TimerCreate());
    TimerStart(DataTableGetTimer(true, ("RiftTrickleTimer" + IntToString(libCPCM_gv_cT_VoidRiftCount))), libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_forPlayer), 20.0, 18.0, 13.0, 10.0, 10.0, 10.0), false, c_timeAI);
}

void libCPCM_gf_CT_VoidRiftBirthUnits (unit lp_spawningRift, unitgroup lp_birthUnits) {
    // Variable Declarations
    unit lv_birthingUnit;
    int lv_birthAttempt;
    point lv_spawnLocation;

    // Automatic Variable Declarations
    unitgroup auto3C775968_g;
    int auto3C775968_u;
    const int autoB6CB61F6_ae = 100;
    const int autoB6CB61F6_ai = 1;

    // Variable Initialization

    // Implementation
    auto3C775968_g = lp_birthUnits;
    auto3C775968_u = UnitGroupCount(auto3C775968_g, c_unitCountAll);
    for (;; auto3C775968_u -= 1) {
        lv_birthingUnit = UnitGroupUnitFromEnd(auto3C775968_g, auto3C775968_u);
        if (lv_birthingUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_birthingUnit, false);
        lv_birthAttempt = 1;
        for ( ; ( (autoB6CB61F6_ai >= 0 && lv_birthAttempt <= autoB6CB61F6_ae) || (autoB6CB61F6_ai < 0 && lv_birthAttempt >= autoB6CB61F6_ae) ) ; lv_birthAttempt += autoB6CB61F6_ai ) {
            lv_spawnLocation = PointWithOffsetPolar(UnitGetPosition(lp_spawningRift), 4.0, libNtve_gf_RandomAngle());
            if ((PathingType(lv_spawnLocation) == c_pathingGround) && (PointPathingIsConnected(lv_spawnLocation, PlayerStartLocation(1)) == true)) {
                UnitSetPosition(lv_birthingUnit, lv_spawnLocation, false);
                if ((AIPathingCostUnit(lv_birthingUnit, PlayerStartLocation(1), c_ignoreEnemyBuildings) > 0)) {
                    break;
                }

            }

        }
        UnitSetPosition(lv_birthingUnit, lv_spawnLocation, false);
        UnitCreateEffectUnit(lp_spawningRift, "MutatorVoidRiftSpawnLM", lv_birthingUnit);
        libCPCM_gv_cT_StatVoidRiftUnitsSpawned += 1;
    }
}

void libCPCM_gf_CT_VoidRiftSpawnUnitsPlain (int lp_player, point lp_spawnLocation) {
    // Variable Declarations
    fixed lv_resourceValue;
    string lv_spawnType;
    int lv_maxRandom;

    // Automatic Variable Declarations
    int auto143D5F51_val;

    // Variable Initialization

    // Implementation
    libCPCM_gv_cT_VoidRiftLastSpawnedUnits = UnitGroupEmpty();
    if ((GameGetMissionTime() >= 1200.0)) {
        lv_resourceValue = UserDataGetFixed("CoopAIAttackWaves", "SiegeMissionWave03", "resourceSize", libCOOC_gf_CC_DifficultyIndex(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player)));
    }
    else if ((GameGetMissionTime() >= 500.0)) {
        lv_resourceValue = UserDataGetFixed("CoopAIAttackWaves", "SiegeMissionWave02", "resourceSize", libCOOC_gf_CC_DifficultyIndex(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player)));
    }
    else if (true) {
        lv_resourceValue = UserDataGetFixed("CoopAIAttackWaves", "SiegeMissionWave01", "resourceSize", libCOOC_gf_CC_DifficultyIndex(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player)));
    }
    if ((GameGetMissionTime() >= 1000.0)) {
        lv_maxRandom = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player), 10, 15, 19, 20, 20, 20);
    }
    else if ((GameGetMissionTime() >= 600.0)) {
        lv_maxRandom = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player), 10, 10, 13, 16, 16, 16);
    }
    else if (true) {
        lv_maxRandom = 10;
    }
    while ((lv_resourceValue > 0.0)) {
        auto143D5F51_val = RandomInt(1, lv_maxRandom);
        if (auto143D5F51_val == 1) {
            lv_spawnType = "Zergling";
        }
        else if (auto143D5F51_val == 2) {
            lv_spawnType = "Baneling";
        }
        else if (auto143D5F51_val == 3) {
            lv_spawnType = "Roach";
        }
        else if (auto143D5F51_val == 4) {
            lv_spawnType = "Hydralisk";
        }
        else if (auto143D5F51_val == 5) {
            lv_spawnType = "Marine";
        }
        else if (auto143D5F51_val == 6) {
            lv_spawnType = "Marauder";
        }
        else if (auto143D5F51_val == 7) {
            lv_spawnType = "Hellion";
        }
        else if (auto143D5F51_val == 8) {
            lv_spawnType = "Adept";
        }
        else if (auto143D5F51_val == 9) {
            lv_spawnType = "Zealot";
        }
        else if (auto143D5F51_val == 10) {
            lv_spawnType = "Stalker";
        }
        else if (auto143D5F51_val == 11) {
            lv_spawnType = "SiegeTank";
        }
        else if (auto143D5F51_val == 12) {
            lv_spawnType = "Immortal";
        }
        else if (auto143D5F51_val == 13) {
            lv_spawnType = "Ravager";
        }
        else if (auto143D5F51_val == 14) {
            lv_spawnType = "Mutalisk";
        }
        else if (auto143D5F51_val == 15) {
            lv_spawnType = "VoidRay";
        }
        else if (auto143D5F51_val == 16) {
            lv_spawnType = "Banshee";
        }
        else if (auto143D5F51_val == 17) {
            lv_spawnType = "HighTemplar";
        }
        else if (auto143D5F51_val == 18) {
            lv_spawnType = "Raven";
        }
        else if (auto143D5F51_val == 19) {
            lv_spawnType = "Infestor";
        }
        else if (auto143D5F51_val == 20) {
            lv_spawnType = "HybridDestroyer";
        }
        else {
            lv_spawnType = "Zergling";
        }
        if ((lv_spawnType == null)) {
            lv_spawnType = "Zergling";
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_spawnType, c_unitCreateIgnorePlacement, lp_player, lp_spawnLocation);
        libCPCM_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
        UnitGroupAdd(libCPCM_gv_cT_VoidRiftLastSpawnedUnits, UnitLastCreated());
        lv_resourceValue -= UnitTypeGetCost(lv_spawnType, c_unitCostMinerals);
        lv_resourceValue -= UnitTypeGetCost(lv_spawnType, c_unitCostVespene);
    }
}

unitgroup libCPCM_gf_CT_VoidRiftLastSpawnedUnits () {
    // Automatic Variable Declarations
    // Implementation
    return libCPCM_gv_cT_VoidRiftLastSpawnedUnits;
}

trigger auto_libCPCM_gf_CT_KillBotsUpdate_Trigger = null;
unit auto_libCPCM_gf_CT_KillBotsUpdate_lp_killBot;
int auto_libCPCM_gf_CT_KillBotsUpdate_lp_killBotLevel;

void libCPCM_gf_CT_KillBotsUpdate (unit lp_killBot, int lp_killBotLevel) {
    auto_libCPCM_gf_CT_KillBotsUpdate_lp_killBot = lp_killBot;
    auto_libCPCM_gf_CT_KillBotsUpdate_lp_killBotLevel = lp_killBotLevel;

    if (auto_libCPCM_gf_CT_KillBotsUpdate_Trigger == null) {
        auto_libCPCM_gf_CT_KillBotsUpdate_Trigger = TriggerCreate("auto_libCPCM_gf_CT_KillBotsUpdate_TriggerFunc");
    }

    TriggerExecute(auto_libCPCM_gf_CT_KillBotsUpdate_Trigger, false, false);
}

bool auto_libCPCM_gf_CT_KillBotsUpdate_TriggerFunc (bool testConds, bool runActions) {
    unit lp_killBot = auto_libCPCM_gf_CT_KillBotsUpdate_lp_killBot;
    int lp_killBotLevel = auto_libCPCM_gf_CT_KillBotsUpdate_lp_killBotLevel;

    // Variable Declarations
    int lv_killBotKillCap;
    int lv_killBotKills;
    int lv_killBotLabel;
    int lv_storedPing;
    unit lv_wakeupUnitIndex;

    // Automatic Variable Declarations
    int auto45637499_val;
    unitgroup autoA0E24E54_g;
    int autoA0E24E54_u;

    // Variable Initialization
    lv_killBotLabel = c_invalidDialogControlId;
    lv_storedPing = c_invalidPingId;

    // Implementation
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "InfoLabel", lp_killBot);
    lv_killBotLabel = DialogControlLastCreated();
    auto45637499_val = lp_killBotLevel;
    if (auto45637499_val == 1) {
        lv_killBotKillCap = 5;
    }
    else if (auto45637499_val == 2) {
        lv_killBotKillCap = 10;
    }
    else if (auto45637499_val == 3) {
        lv_killBotKillCap = 15;
    }
    else {
    }
    lv_killBotKills = -1;
    while (true) {
        if (((UnitIsValid(lp_killBot) == false) || (UnitIsAlive(lp_killBot) == false))) {
            lv_storedPing = libHots_gf_PingStoredForUnit(lp_killBot, 1);
            if ((lv_storedPing != c_invalidPingId)) {
                libCOMI_gf_DestroyPingCoop(lv_storedPing);
            }

            return true;
        }

        if ((lv_killBotKills != libNtve_gf_UnitGetPropertyKills(lp_killBot, c_unitPropCurrent))) {
            lv_killBotKills = libNtve_gf_UnitGetPropertyKills(lp_killBot, c_unitPropCurrent);
            TextExpressionSetToken("Param/Expression/lib_CPCM_3E8E579A", "A", IntToText(lv_killBotKills));
            TextExpressionSetToken("Param/Expression/lib_CPCM_3E8E579A", "B", IntToText(lv_killBotKillCap));
            libNtve_gf_SetDialogItemText(lv_killBotLabel, TextExpressionAssemble("Param/Expression/lib_CPCM_3E8E579A"), PlayerGroupAll());
            if ((lv_killBotKills >= lv_killBotKillCap)) {
                UnitKill(lp_killBot);
            }

        }

        if ((libNtve_gf_UnitIsVisibleToPlayer(lp_killBot, 1) == false) && (libNtve_gf_UnitIsVisibleToPlayer(lp_killBot, 2) == false)) {
            autoA0E24E54_g = UnitGroupAlliance(1, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_killBot), (UnitGetPropertyFixed(lp_killBot, c_unitPropRadius, c_unitPropNormal) + 1.0)), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoA0E24E54_u = UnitGroupCount(autoA0E24E54_g, c_unitCountAll);
            for (;; autoA0E24E54_u -= 1) {
                lv_wakeupUnitIndex = UnitGroupUnitFromEnd(autoA0E24E54_g, autoA0E24E54_u);
                if (lv_wakeupUnitIndex == null) { break; }
                libCOMI_gf_SleepWakeUpUnitCoop(lv_wakeupUnitIndex, false, libCOMI_ge_SleepWakeUpExcludeOption_RespectExclusions);
            }
        }

        Wait(0.5, c_timeGame);
    }
    return true;
}

void libCPCM_gf_CT_KillBot_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    unitgroup lv_enemyUnitsNearby;
    aifilter lv_enemyNearbyFilter;
    int lv_targetSelectionAttempts;
    int lv_targetSelectionIndex;
    unit lv_targetUnit;
    unit lv_possibleTargetUnit;

    // Automatic Variable Declarations
    int auto26E47317_ae;
    const int auto26E47317_ai = 1;

    // Variable Initialization
    lv_enemyUnitsNearby = UnitGroupEmpty();
    lv_enemyNearbyFilter = AIFilter(lp_owner);
    lv_targetSelectionAttempts = 100;

    // Implementation
    AISetFilterAlliance(lv_enemyNearbyFilter, c_playerGroupEnemy);
    AISetFilterBits(lv_enemyNearbyFilter, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
    AISetFilterRange(lv_enemyNearbyFilter, lp_aIUnit, (UnitGetPropertyFixed(lp_aIUnit, c_unitPropRadius, c_unitPropNormal) + 1.0));
    lv_enemyUnitsNearby = AIGetFilterGroup(lv_enemyNearbyFilter, lp_nearByUnits);
    if ((UnitGroupCount(lv_enemyUnitsNearby, c_unitCountAlive) <= 0)) {
        return ;
    }

    auto26E47317_ae = lv_targetSelectionAttempts;
    lv_targetSelectionIndex = 1;
    for ( ; ( (auto26E47317_ai >= 0 && lv_targetSelectionIndex <= auto26E47317_ae) || (auto26E47317_ai < 0 && lv_targetSelectionIndex >= auto26E47317_ae) ) ; lv_targetSelectionIndex += auto26E47317_ai ) {
        lv_possibleTargetUnit = UnitGroupRandomUnit(lv_enemyUnitsNearby, c_unitCountAlive);
        if ((UnitCanAttackTarget(lp_aIUnit, lv_possibleTargetUnit) == true)) {
            lv_targetUnit = lv_possibleTargetUnit;
            break;
        }
        else {
            UnitGroupRemove(lv_enemyUnitsNearby, lv_possibleTargetUnit);
        }
    }
    if ((lv_targetUnit == null)) {
        return ;
    }

    libNtve_gf_AICast(lp_aIUnit, OrderTargetingUnit(AbilityCommand("attack", 0), lv_targetUnit));
}

trigger auto_libCPCM_gf_CT_BoomBotsUpdate_Trigger = null;
unit auto_libCPCM_gf_CT_BoomBotsUpdate_lp_boomBot;

void libCPCM_gf_CT_BoomBotsUpdate (unit lp_boomBot) {
    auto_libCPCM_gf_CT_BoomBotsUpdate_lp_boomBot = lp_boomBot;

    if (auto_libCPCM_gf_CT_BoomBotsUpdate_Trigger == null) {
        auto_libCPCM_gf_CT_BoomBotsUpdate_Trigger = TriggerCreate("auto_libCPCM_gf_CT_BoomBotsUpdate_TriggerFunc");
    }

    TriggerExecute(auto_libCPCM_gf_CT_BoomBotsUpdate_Trigger, false, false);
}

bool auto_libCPCM_gf_CT_BoomBotsUpdate_TriggerFunc (bool testConds, bool runActions) {
    unit lp_boomBot = auto_libCPCM_gf_CT_BoomBotsUpdate_lp_boomBot;

    // Variable Declarations
    unit lv_boombothelper;
    int lv_codeplayer;
    int lv_defuseplayer;
    string lv_codestring;
    string lv_inputstring;
    int lv_codetexttag;
    int lv_inputtexttag;
    int lv_customvalueindex;

    // Automatic Variable Declarations
    int auto57BB6C54_ae;
    const int auto57BB6C54_ai = 1;

    // Variable Initialization
    lv_codestring = "";
    lv_inputstring = "";
    lv_codetexttag = c_textTagNone;
    lv_inputtexttag = c_textTagNone;

    // Implementation
    libCPCM_gv_cT_BoomBotsCount += 1;
    if ((ModI(libCPCM_gv_cT_BoomBotsCount, 2) == 1)) {
        lv_codeplayer = 1;
        lv_defuseplayer = 2;
    }
    else {
        lv_codeplayer = 2;
        lv_defuseplayer = 1;
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorBoomBotHelper", c_unitCreateIgnorePlacement, lv_defuseplayer, UnitGetPosition(lp_boomBot));
    lv_boombothelper = UnitLastCreated();
    UnitSetCustomValue(lv_boombothelper, libCPCM_gv_cT_BoomBotsIndexStart, libCPCM_gv_cT_BoomBotsDigits[lv_defuseplayer]);
    auto57BB6C54_ae = (libCPCM_gv_cT_BoomBotsIndexStart + libCPCM_gv_cT_BoomBotsDigits[lv_defuseplayer]);
    lv_customvalueindex = (libCPCM_gv_cT_BoomBotsIndexStart + 1);
    for ( ; ( (auto57BB6C54_ai >= 0 && lv_customvalueindex <= auto57BB6C54_ae) || (auto57BB6C54_ai < 0 && lv_customvalueindex >= auto57BB6C54_ae) ) ; lv_customvalueindex += auto57BB6C54_ai ) {
        UnitSetCustomValue(lv_boombothelper, lv_customvalueindex, RandomInt(1, 9));
        if ((lv_customvalueindex == (libCPCM_gv_cT_BoomBotsIndexStart+1))) {
            lv_codestring = FixedToString(UnitGetCustomValue(lv_boombothelper, lv_customvalueindex), 0);
            lv_inputstring = "?";
        }
        else {
            lv_codestring = (lv_codestring + "-" + FixedToString(UnitGetCustomValue(lv_boombothelper, lv_customvalueindex), 0));
            lv_inputstring = (lv_inputstring + "-?");
        }
    }
    TextExpressionSetToken("Param/Expression/lib_CPCM_0AA797DE", "A", StringToText(lv_codestring));
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_CPCM_0AA797DE"), 24, UnitGetPosition(lp_boomBot), 3.0, true, true, PlayerGroupSingle(lv_codeplayer));
    lv_codetexttag = TextTagLastCreated();
    TextTagAttachToUnit(lv_codetexttag, lp_boomBot, 3.0);
    TextTagSetFogVisibility(lv_codetexttag, c_visTypeFog);
    TextExpressionSetToken("Param/Expression/lib_CPCM_746AA9FC", "A", StringToText(lv_inputstring));
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_CPCM_746AA9FC"), 24, UnitGetPosition(lp_boomBot), 3.0, true, true, PlayerGroupSingle(lv_defuseplayer));
    lv_inputtexttag = TextTagLastCreated();
    TextTagAttachToUnit(lv_inputtexttag, lp_boomBot, 3.0);
    TextTagSetFogVisibility(lv_inputtexttag, c_visTypeFog);
    libHots_gf_StoreTextTagForUnit(lv_boombothelper, libCPCM_gv_cT_BoomBotsInputTextTagIndex, lv_inputtexttag);
    while ((UnitIsAlive(lp_boomBot) == true) && (UnitIsAlive(lv_boombothelper) == true)) {
        if ((libNtve_gf_UnitIsVisibleToPlayer(lp_boomBot, lv_defuseplayer) == true)) {
            libNtve_gf_ShowHideUnit(lv_boombothelper, true);
        }
        else {
            libNtve_gf_ShowHideUnit(lv_boombothelper, false);
        }
        Wait(0.0625, c_timeGame);
        UnitSetPosition(lv_boombothelper, UnitGetPosition(lp_boomBot), true);
    }
    UnitKill(lp_boomBot);
    UnitRemove(lv_boombothelper);
    TextTagDestroy(lv_codetexttag);
    TextTagDestroy(lv_inputtexttag);
    return true;
}

bool libCPCM_gf_CT_ResourceSpawnLocationValid (point lp_spawnPoint) {
    // Automatic Variable Declarations
    // Implementation
    if ((PathingType(lp_spawnPoint) != c_pathingGround)) {
        return false;
    }

    if ((UnitCountAlliance(1, c_unitAllianceEnemy, RegionCircle(lp_spawnPoint, 7.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0)) {
        return false;
    }

    return true;
}

bool libCPCM_gf_CT_UnitSpawnedByMutator (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupHasUnit(libCPCM_gv_cT_SpawnedUnits, lp_unit);
}

void libCPCM_gf_CT_RegisterSpawnedUnit (unit lp_spawnedUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gf_CC_CurrentMap() == "AC_VeridiaCourier")) {
        UnitBehaviorAdd(lp_spawnedUnit, "LavaDamageCoopImmune", lp_spawnedUnit, 1);
    }

    UnitGroupAdd(libCPCM_gv_cT_SpawnedUnits, lp_spawnedUnit);
}

void libCPCM_gf_CT_RegisterSpawnedUnitGroup (unitgroup lp_spawnedUnits) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoD08879BF_g;
    int autoD08879BF_u;

    // Variable Initialization

    // Implementation
    if ((libCOOC_gf_CC_CurrentMap() == "AC_VeridiaCourier")) {
        autoD08879BF_g = lp_spawnedUnits;
        autoD08879BF_u = UnitGroupCount(autoD08879BF_g, c_unitCountAll);
        for (;; autoD08879BF_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(autoD08879BF_g, autoD08879BF_u);
            if (lv_indexUnit == null) { break; }
            UnitBehaviorAdd(lv_indexUnit, "LavaDamageCoopImmune", lv_indexUnit, 1);
        }
    }

    UnitGroupAddUnitGroup(libCPCM_gv_cT_SpawnedUnits, lp_spawnedUnits);
}

void libCPCM_gf_CT_Mutator_AttackWaveHook_WaveCreated (int lp_attackingPlayer, unitgroup lp_attackingUnitGroup, point lp_attackOrigin, int lp_attackTargetType) {
    // Automatic Variable Declarations
}

void libCPCM_gf_CT_Mutator_AttackWaveHook_WaveSent (int lp_attackingPlayer, unitgroup lp_attackingUnitGroup, point lp_attackOrigin, int lp_attackTargetType) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickHeroesFromTheStorm)] == true) && (lp_attackTargetType != libCOMI_ge_CM_CoopAI_WaveAttackTargetType_Special)) {
        libCPCM_gf_CT_AmonHero_AddToWave(lp_attackingPlayer, lp_attackingUnitGroup, lp_attackOrigin, lp_attackTargetType);
    }

}

void libCPCM_gf_CT_MutatorSafetyZone_Init () {
    // Variable Declarations
    region lv_safetyzone;
    region lv_basereveal;
    region lv_startinglocations;
    fixed lv_startinglocationsafetyradius;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_safetyzone = RegionFromName("MutatorSafetyZone");
    lv_basereveal = RegionFromName("BaseReveal");
    lv_startinglocationsafetyradius = 25.0;

    // Implementation
    if ((lv_safetyzone != null)) {
        libCPCM_gv_cT_MutatorSafetyZone = lv_safetyzone;
    }
    else if ((lv_basereveal != null)) {
        libCPCM_gv_cT_MutatorSafetyZone = lv_basereveal;
    }
    else if (true) {
        libCPCM_gv_cT_MutatorSafetyZone = RegionCircle(PlayerStartLocation(1), lv_startinglocationsafetyradius);
        RegionAddRegion(libCPCM_gv_cT_MutatorSafetyZone, RegionCircle(PlayerStartLocation(2), lv_startinglocationsafetyradius));
    }
}

region libCPCM_gf_CT_MutatorSafetyZone () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPCM_gv_cT_MutatorSafetyZone == null)) {
        libCPCM_gf_CT_MutatorSafetyZone_Init();
    }

    return libCPCM_gv_cT_MutatorSafetyZone;
}

region libCPCM_gf_PlayerSafeZone (bool lp_entireMap) {
    // Variable Declarations
    region lv_safezone;
    region lv_safezonenegate;

    // Automatic Variable Declarations
    unitgroup auto2FEFC4EB_g;
    int auto2FEFC4EB_u;
    unit auto2FEFC4EB_var;

    // Variable Initialization
    lv_safezone = RegionEmpty();
    lv_safezonenegate = RegionEntireMap();

    // Implementation
    auto2FEFC4EB_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventReveal), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2FEFC4EB_u = UnitGroupCount(auto2FEFC4EB_g, c_unitCountAll);
    for (;; auto2FEFC4EB_u -= 1) {
        auto2FEFC4EB_var = UnitGroupUnitFromEnd(auto2FEFC4EB_g, auto2FEFC4EB_u);
        if (auto2FEFC4EB_var == null) { break; }
        RegionAddCircle(lv_safezone, true, UnitGetPosition(auto2FEFC4EB_var), 20.0);
        RegionAddCircle(lv_safezonenegate, false, UnitGetPosition(auto2FEFC4EB_var), 20.0);
    }
    if ((lp_entireMap == true)) {
        return lv_safezonenegate;
    }
    else {
        return lv_safezone;
    }
}

region libCPCM_gf_PlayerStartingZones () {
    // Variable Declarations
    region lv_region;

    // Automatic Variable Declarations
    playergroup autoB299E1C4_g;
    int autoB299E1C4_var;

    // Variable Initialization

    // Implementation
    autoB299E1C4_g = libCPGL_gf_HumanPlayers();
    autoB299E1C4_var = -1;
    while (true) {
        autoB299E1C4_var = PlayerGroupNextPlayer(autoB299E1C4_g, autoB299E1C4_var);
        if (autoB299E1C4_var < 0) { break; }
        RegionAddRegion(lv_region, RegionCircle(PlayerStartLocation(autoB299E1C4_var), 20.0));
    }
    return lv_region;
}

region libCPCM_gf_StartLocationofPlayerGroup (playergroup lp_playerGroup) {
    // Variable Declarations
    region lv_region;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto44A81411_g;

    // Variable Initialization

    // Implementation
    auto44A81411_g = lp_playerGroup;
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto44A81411_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        RegionAddCircle(lv_region, true, PlayerStartLocation(lv_indexPlayer), 20.0);
        RegionAddRegion(lv_region, RegionCircle(PlayerStartLocation(lv_indexPlayer), 20.0));
    }
    return lv_region;
}

point libCPCM_gf_PointinPlayerSafeZone (region lp_region) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_point = RegionRandomPoint(lp_region);

    // Implementation
    return lv_point;
}

void libCPCM_gf_EnableArcadeContestMode () {
    // Automatic Variable Declarations
    // Implementation
    libCPCM_gv_cC_InContestMap = true;
}

bool libCPCM_gf_GameIsContestLocalTest () {
    // Automatic Variable Declarations
    // Implementation
    if ((GameIsOnline() == false) && (GameIsTestMap(false) == true) && (GameCheatsEnabled(c_gameCheatCategoryDevelopment) == false) && (GameMapIsBlizzard() == false)) {
        libCPCM_gv_cC_InContestMap = true;
        return true;
    }
    else {
        return false;
    }
}

void libCPCM_gf_SetDefaultCommandersForContestLocalTest (string lp_player1Commnader, string lp_player2Commnader) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPCM_gf_GameIsContestLocalTest() == true)) {
        libCPCM_gv_cC_ContestDefaultCommander1 = ((lp_player1Commnader));
        libCPCM_gv_cC_ContestDefaultCommander2 = ((lp_player2Commnader));
    }

}

void libCPCM_gf_LoadAlliedCommandersData (string lp_map, trigger lp_startTrigger) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoADB560F9_g;
    playergroup autoD3B21BEF_g;
    playergroup auto98DA5BEB_g;
    playergroup auto1ED7B2B5_g;
    playergroup autoB3F334B6_g;
    playergroup autoD0AB74BA_g;

    // Variable Initialization

    // Implementation
    libCPGL_gv_cC_DebugPlaytestMode = GameIsOnline();
    TriggerDebugSetTypeFile(1, "StoryModeDebug.txt");
    TriggerDebugSetTypeFile(13, "ACStats.txt");
    TriggerDebugSetTypeFile(14, "ACScores.txt");
    if ((libCPCM_gv_cC_DevStart_Forced == false) && (GameCheatsEnabled(c_gameCheatCategoryDevelopment) == false)) {
        TriggerDebugOutputEnable(false);
    }

    libCPCD_gf_SetCurrentMap(lp_map);
    UserDataSetInt("Maps", libCPCD_gf_CC_MapUserDataInstance(libCPCM_gv_cC_CurrentMap), "IsCurrent", 1, 1);
    if ((libCPCM_gv_cC_InContestMap == false)) {
        AchievementPanelSetCategory(PlayerGroupAll(), "DifficultyRecruit1");
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_CPCM_3F148DED"), false);
    autoADB560F9_g = libCPCD_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoADB560F9_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCPCM_gf_CC_LoadAllTransitionData(lv_indexPlayer);
    }
    libCPCM_gf_CC_CampaignPreload();
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_CPCM_34E39151"), false);
    TransmissionSetOption(c_transmissionOptionHideAlertPanel, true);
    autoD3B21BEF_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoD3B21BEF_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) != c_playerTypeUser)) {
            PlayerSetState(lv_indexPlayer, c_playerStateDisplayInLeaderPanel, false);
            PlayerSetState(lv_indexPlayer, c_playerStateDisplayInViewMenu, false);
            PlayerSetState(lv_indexPlayer, c_playerStateShowScore, false);
        }

    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_CPCM_80683C52"), false);
    libCPCD_gf_CC_InitNonDefeatedPlayers();
    auto98DA5BEB_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto98DA5BEB_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        PlayerSetState(lv_indexPlayer, c_playerStateContinueEnabled, false);
    }
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogAbortButton, false);
    auto1ED7B2B5_g = libCPCD_gf_CommanderPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto1ED7B2B5_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        TechTreeUpgradeAddLevel(lv_indexPlayer, "PlayerCommander", 1);
    }
    if ((libCPCM_gv_cC_DevStart_Forced == false) && ((GameIsOnline() == true) || (libCPCM_gf_GameIsContestLocalTest() == true))) {
        libCPCM_gf_CC_LoadDefaultCommanderForContestLocalTest();
        libCPGL_gf_CC_ScoreInit();
        autoB3F334B6_g = libCPCD_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoB3F334B6_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCPGL_gf_CC_ApplyTech(lv_indexPlayer);
        }
        TriggerEnable(libCPGL_gt_CC_PrestigeUpgradeSupplement, true);
        libCOUI_gf_CU_PrestigeBriefInit(1, 2);
        if ((libCOMU_gf_CT_MutatorInCustom() == true)) {
            libCPCM_gv_cC_StartupMissionTrigger = lp_startTrigger;
            libCPCM_gf_CC_CustomStartupBegin();
        }
        else {
            TriggerExecute(lp_startTrigger, true, false);
        }
    }
    else {
        libCPCM_gv_cC_StartupMissionTrigger = lp_startTrigger;
        libCPCM_gf_CC_DevStartupBegin();
    }
    autoD0AB74BA_g = libCPCD_gf_CommanderPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoD0AB74BA_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        TechTreeUpgradeAddLevel(lv_indexPlayer, "PlayerCommander", 1);
    }
}

void libCPCM_gf_CC_LoadDefaultCommanderForContestLocalTest () {
    // Variable Declarations
    string lv_commander1;
    string lv_commander2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_commander1 = libCPCM_gv_cC_ContestDefaultCommander1;
    lv_commander2 = libCPCM_gv_cC_ContestDefaultCommander2;

    // Implementation
    if ((libCPCM_gf_GameIsContestLocalTest() == true)) {
        PlayerSetCommander(1, UserDataGetGameLink("PlayerCommanders", lv_commander1, "CommanderData", 1));
        libCPGL_gf_CC_PlayerCommanderSet(1, lv_commander1);
        PlayerSetRace(1, libCPGL_gf_CC_CommanderRace(lv_commander1));
        PlayerSetCommander(2, UserDataGetGameLink("PlayerCommanders", lv_commander2, "CommanderData", 1));
        libCPGL_gf_CC_PlayerCommanderSet(2, lv_commander2);
        PlayerSetRace(2, libCPGL_gf_CC_CommanderRace(lv_commander2));
    }

}

void libCPCM_gf_CC_CampaignPreload () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPCD_gf_CC_CampaignMapTypeCheck(libCPCD_gf_CC_CurrentMap(), c_mapKindMission) == true)) {
        libNtve_gf_PreloadSoundObject("UI_LowHealthWarning_Start", false);
        libNtve_gf_PreloadSoundObject("UI_LowHealthWarning_BreathLoop", false);
        libNtve_gf_PreloadSoundObject("UI_LowHealthWarning_HeartBeatLoop", false);
        SoundLengthQuery(SoundLink("UI_LowHealthWarning_BreathLoop", -1));
        SoundLengthQuery(SoundLink("UI_LowHealthWarning_HeartBeatLoop", -1));
    }

}

void libCPCM_gf_CC_SaveAllTransitionData (bool lp_resultFromDefeat, int lp_player) {
    // Variable Declarations
    int lv_saveType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GameIsOnline() == true)) {
        libCPCM_gf_CC_SaveBNetChoices(lp_player);
        return ;
    }

    libCPCM_gf_CC_OpenCoopBank(lp_player);
    libCPCM_gf_CC_SaveTransitionVars(lp_player, libCPCM_gv_cC_CoopBank[lp_player], lp_resultFromDefeat);
    libCPCM_gf_CC_SaveCoopBank(lp_player);
}

void libCPCM_gf_CC_LoadAllTransitionData (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPCM_gv_cC_DevStart_Forced == false) && (GameIsOnline() == true)) {
        libCPCM_gf_CC_LoadBNetChoices(lp_player);
        return ;
    }

    if ((libCPCM_gf_CC_CoopBankExists(lp_player) == false)) {
        TextExpressionSetToken("Param/Expression/lib_CPCM_37ACD3A6", "A", IntToText(lp_player));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPCM_37ACD3A6"), false);
        libCPCM_gf_ResetCampaignData(lp_player);
        return ;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_CPCM_603B414F"), false);
    libCPCM_gf_CC_OpenCoopBank(lp_player);
    libCPCM_gf_CC_LoadTransitionVars(lp_player, libCPCM_gv_cC_CoopBank[lp_player]);
    if ((libCPCM_gv_cCX_PlayerBankVersion[lp_player] < libCPCM_gv_cCC_BankVersion)) {
        TextExpressionSetToken("Param/Expression/lib_CPCM_1605D3EB", "A", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_CPCM_1605D3EB", "B", IntToText(libCPCM_gv_cCX_PlayerBankVersion[lp_player]));
        TextExpressionSetToken("Param/Expression/lib_CPCM_1605D3EB", "C", IntToText(libCPCM_gv_cCC_BankVersion));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPCM_1605D3EB"), false);
        libCPCM_gf_ResetCampaignData(lp_player);
        return ;
    }

}

void libCPCM_gf_CC_LoadBNetChoices (int lp_player) {
    // Variable Declarations
    string lv_chosenCommander;
    string lv_indexMasteryUpgrade;
    int lv_currentLevel;

    // Automatic Variable Declarations
    int auto84440A51_ai;
    int auto84440A51_ae;
    int auto84440A51_ac;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_CPCM_402C909D", "A", IntToText(lp_player));
    TextExpressionSetToken("Param/Expression/lib_CPCM_402C909D", "B", PlayerName(lp_player));
    TextExpressionSetToken("Param/Expression/lib_CPCM_402C909D", "C", StringToText((PlayerCommander(lp_player))));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPCM_402C909D"), false);
    lv_chosenCommander = libCPGL_gf_CC_CommanderUserInstance(PlayerCommander(lp_player));
    libCPGL_gf_CC_PlayerCommanderSet(lp_player, lv_chosenCommander);
    if ((PlayerRace(lp_player) != libCPGL_gf_CC_CommanderRace(lv_chosenCommander))) {
        PlayerSetRace(lp_player, libCPGL_gf_CC_CommanderRace(lv_chosenCommander));
    }

    if ((libCPCM_gv_cC_InContestMap == true)) {
        lv_currentLevel = 15;
    }
    else {
        lv_currentLevel = PlayerCommanderLevel(lp_player);
    }
    libCPGL_gf_CC_PlayerLevelSet(lp_player, lv_currentLevel, lv_chosenCommander);
    libCPGL_gf_CC_SetPlayerPrestigeIndex(lp_player, PlayerCommanderSelectedPrestige(lp_player));
    libCPGL_gf_CC_PlayerMasteryLevelSet(lp_player, PlayerCommanderMasteryLevel(lp_player));
    auto84440A51_ai = 0;
    auto84440A51_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (auto84440A51_ai < auto84440A51_ae) {
        auto84440A51_ai = auto84440A51_ai+1;
        auto84440A51_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", auto84440A51_ai), "Category", 1);
        if( libCPGL_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", auto84440A51_ai),"Commander",1) ) {
            lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", auto84440A51_ai);
            TextExpressionSetToken("Param/Expression/lib_CPCM_32FF3BFB", "A", IntToText(lp_player));
            TextExpressionSetToken("Param/Expression/lib_CPCM_32FF3BFB", "B", IntToText(libCPGL_gf_CC_PlayerMasteryInternalIndex(lv_indexMasteryUpgrade)));
            TextExpressionSetToken("Param/Expression/lib_CPCM_32FF3BFB", "C", IntToText(PlayerCommanderMasteryTalentRank(lp_player, libCPGL_gf_CC_PlayerMasteryInternalIndex(lv_indexMasteryUpgrade))));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPCM_32FF3BFB"), false);
            libCPGL_gf_CC_PlayerMasteryUpgradeLevelSet(lp_player, lv_indexMasteryUpgrade, PlayerCommanderMasteryTalentRank(lp_player, libCPGL_gf_CC_PlayerMasteryInternalIndex(lv_indexMasteryUpgrade)));
        }    
    }
}

void libCPCM_gf_CC_SaveBNetChoices (int lp_player) {
    // Automatic Variable Declarations
}

void libCPCM_gf_CC_SaveTransitionVars (int lp_player, bank lp_targetBank, bool lp_resultFromDefeat) {
    // Variable Declarations
    string lv__SectionName;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    lv__SectionName = libCPCM_gf_CC_BankSectionName("CampaignSetting");
    libCPCM_gf_CC_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, ("Bank Version"), libCPCM_gv_cCX_PlayerBankVersion[lp_player], 0);
    lv__SectionName = libCPCM_gf_CC_BankSectionName("CampaignCurrency");
    libCPGL_gf_CC_SaveCommandersToBank(lp_player, lp_targetBank, lv__SectionName);
    libCPGL_gf_CC_SaveChampionToBank3(lp_player, lp_targetBank, lv__SectionName);
    libCPGL_gf_CC_SaveMasteryToBank(lp_player, lp_targetBank, lv__SectionName);
    lv__SectionName = libCPCM_gf_CC_BankSectionName("CampaignPerks");
    BankSectionCreate(lp_targetBank, lv__SectionName);
    libCPGL_gf_CC_SaveChampionToBank2(lp_player, lp_targetBank, lv__SectionName);
}

void libCPCM_gf_CC_LoadTransitionVars (int lp_player, bank lp_sourceBank) {
    // Variable Declarations
    string lv__SectionName;
    int lv_count;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__SectionName = "";

    // Implementation
    lv__SectionName = libCPCM_gf_CC_BankSectionName("CampaignCurrency");
    libCPGL_gf_CC_LoadCommandersFromBank(lp_player, lp_sourceBank, lv__SectionName);
    libCPGL_gf_CC_LoadChampionFromBank3(lp_player, lp_sourceBank, lv__SectionName);
    libCPGL_gf_CC_LoadMasteryFromBank(lp_player, lp_sourceBank, lv__SectionName);
    lv__SectionName = libCPCM_gf_CC_BankSectionName("CampaignSetting");
    libCPCM_gv_cCX_PlayerBankVersion[lp_player] = libCPCM_gf_CC_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, ("Bank Version"), 0);
    lv__SectionName = libCPCM_gf_CC_BankSectionName("CampaignPerks");
    libCPGL_gf_CC_LoadChampionFromBank2(lp_player, lp_sourceBank, lv__SectionName);
}

void libCPCM_gf_ResetCampaignData (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libCPCM_gv_cCX_PlayerBankVersion[lp_player] = libCPCM_gv_cCC_BankVersion;
    libCPGL_gf_CC_ResetTech(lp_player);
    libCPGL_gf_CC_UpdateTechStates(lp_player);
}

void libCPCM_gf_CC_CustomStartupBegin () {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto51178F83_g;

    // Variable Initialization

    // Implementation
    GameSetMissionTimePaused(true);
    AITimePause(true);
    UnitPauseAll(true);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, false);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, false);
    auto51178F83_g = libCPCD_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto51178F83_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) == c_playerTypeNone)) {
            PlayerSetDifficulty(lv_indexPlayer, 2);
        }

        libCPCC_gf_ShowHideWorldCover(true, 0.0, lv_indexPlayer);
    }
    libCOUI_gf_CU_CustomMutatorDisplay();
}

void libCPCM_gf_CC_CustomStartupLaunch () {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto1E79B3EB_g;

    // Variable Initialization

    // Implementation
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, false, true);
    GameSetMissionTimePaused(false);
    AITimePause(false);
    UnitPauseAll(false);
    auto1E79B3EB_g = libCPCD_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto1E79B3EB_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCPCC_gf_ShowHideWorldCover(false, 0.0, lv_indexPlayer);
    }
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    TriggerExecute(libCPCM_gv_cC_StartupMissionTrigger, true, false);
}

void libCPCM_gf_CC_ForceDevStartup () {
    // Automatic Variable Declarations
    // Implementation
    libCPCM_gv_cC_DevStart_Forced = true;
}

void libCPCM_gf_CC_DevStartupBegin () {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto1CF77FF4_g;
    playergroup auto76E3C5E3_g;

    // Variable Initialization

    // Implementation
    GameSetMissionTimePaused(true);
    AITimePause(true);
    UnitPauseAll(true);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    if ((libCPCM_gv_cC_DevStart_Forced == false) && (GameCheatsEnabled(c_gameCheatCategoryDevelopment) == false)) {
        TriggerEnable(libCPCM_gt_CC_DevStartupDevForceQuit, true);
        UIShowCustomDialog(PlayerGroupAll(), libNtve_ge_CustomDialogType_c_customDialogTypeMessage, null, StringExternal("Param/Value/lib_CPCM_0AF33C75"), true);
        return ;
    }

    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, false);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, false);
    auto1CF77FF4_g = libCPCD_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto1CF77FF4_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) == c_playerTypeNone)) {
            PlayerSetDifficulty(lv_indexPlayer, 2);
        }

        libCPCC_gf_ShowHideWorldCover(true, 0.0, lv_indexPlayer);
    }
    if ((libCPGL_gf_CoopDebugModeIsOn("CustomMutators", 1) == true)) {
        libCPGL_gf_CC_PlayerCommanderSet(1, "TerranRaynor");
        PlayerSetRace(1, libCPGL_gf_CC_CommanderRace("TerranRaynor"));
        libCPGL_gf_CC_PlayerCommanderSet(2, "ZergKerrigan");
        PlayerSetRace(2, libCPGL_gf_CC_CommanderRace("ZergKerrigan"));
        auto76E3C5E3_g = libCPCD_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto76E3C5E3_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCPGL_gf_CC_UpdateTechStates(lv_indexPlayer);
            libCPGL_gf_CC_ApplyTech(lv_indexPlayer);
        }
        TriggerEnable(libCPGL_gt_CC_PrestigeUpgradeSupplement, true);
        libCOMU_gf_EnableMutatorCustomMode();
        libCOUI_gf_CU_CustomMutatorDisplay();
    }
    else {
        libCOUI_gf_CU_CommanderDisplay();
    }
}

void libCPCM_gf_CC_DevStartupFinish () {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoB848C4C4_g;
    playergroup auto6950A567_g;

    // Variable Initialization

    // Implementation
    autoB848C4C4_g = libCPCD_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoB848C4C4_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCPCM_gf_CC_SaveAllTransitionData(false, 1);
        libCPGL_gf_CC_ApplyTech(lv_indexPlayer);
    }
    TriggerEnable(libCPGL_gt_CC_PrestigeUpgradeSupplement, true);
    libCOUI_gf_CU_PrestigeBriefInit(1, 2);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, false, true);
    GameSetMissionTimePaused(false);
    AITimePause(false);
    UnitPauseAll(false);
    auto6950A567_g = libCPCD_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto6950A567_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCPCC_gf_ShowHideWorldCover(false, 0.0, lv_indexPlayer);
    }
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    libCPGL_gf_CC_ScoreInit();
    TriggerExecute(libCPCM_gv_cC_StartupMissionTrigger, true, false);
}

void libCPCM_gf_CC_OpenCoopBank (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPCM_gv_cC_CoopBank[lp_player] != null)) {
        return ;
    }

    BankLoad(libCPCM_gv_cC_CoopBankName, lp_player);
    libCPCM_gv_cC_CoopBank[lp_player] = BankLastCreated();
}

bool libCPCM_gf_CC_CoopBankExists (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return BankExists(libCPCM_gv_cC_CoopBankName, lp_player);
}

void libCPCM_gf_CC_SaveCoopBank (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCPCM_gv_cC_CoopBank[lp_player] == null)) {
        return ;
    }

    BankSave(libCPCM_gv_cC_CoopBank[lp_player]);
}

string libCPCM_gf_CC_BankMIssionDifficultyKey6 (string lp_campaignPerk, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return ((lp_commander) + "_" + (lp_campaignPerk));
}

string libCPCM_gf_CC_BankSectionName (string lp_section) {
    // Automatic Variable Declarations
    // Implementation
    return ("CCampaign" + "|" + (lp_section));
}

int libCPCM_gf_CC_LoadTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == false)) {
        return lp_default;
    }
    else {
        return BankValueGetAsInt(lp_bank, lp_section, lp_key);
    }
}

bool libCPCM_gf_CC_LoadTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == false)) {
        return lp_default;
    }
    else {
        return BankValueGetAsFlag(lp_bank, lp_section, lp_key);
    }
}

string libCPCM_gf_CC_LoadTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == false)) {
        return lp_default;
    }
    else {
        return BankValueGetAsString(lp_bank, lp_section, lp_key);
    }
}

void libCPCM_gf_CC_SaveTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_value, int lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromInt(lp_bank, lp_section, lp_key, lp_value);
    }
}

void libCPCM_gf_CC_SaveTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_value, bool lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromFlag(lp_bank, lp_section, lp_key, lp_value);
    }
}

void libCPCM_gf_CC_SaveTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_value, string lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromString(lp_bank, lp_section, lp_key, lp_value);
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugDropPodSpawnNow
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_DebugDropPodSpawnNow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCPCM_gf_MutatorIsEnabled("DropPods") == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "2")) {
        libCPCM_gv_cT_DebugDropPodSpawnNow[2] = true;
    }
    else {
        libCPCM_gv_cT_DebugDropPodSpawnNow[1] = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_DebugDropPodSpawnNow_Init () {
    libCPCM_gt_CT_DebugDropPodSpawnNow = TriggerCreate("libCPCM_gt_CT_DebugDropPodSpawnNow_Func");
    TriggerAddEventChatMessage(libCPCM_gt_CT_DebugDropPodSpawnNow, c_playerAny, "dropnow", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugMakeVoidRift
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_DebugMakeVoidRift_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCPCM_gf_MutatorIsEnabled("VoidRifts") == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gf_CT_VoidRiftCreate(1);
    libCPCM_gf_CT_VoidRiftCreate(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_DebugMakeVoidRift_Init () {
    libCPCM_gt_CT_DebugMakeVoidRift = TriggerCreate("libCPCM_gt_CT_DebugMakeVoidRift_Func");
    TriggerAddEventChatMessage(libCPCM_gt_CT_DebugMakeVoidRift, c_playerAny, "riftme", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugMakePurifierBeam
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_DebugMakePurifierBeam_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCPCM_gf_MutatorIsEnabled("PurifierBeam") == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCPCM_gt_CT_PurifierBeamController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_DebugMakePurifierBeam_Init () {
    libCPCM_gt_CT_DebugMakePurifierBeam = TriggerCreate("libCPCM_gt_CT_DebugMakePurifierBeam_Func");
    TriggerAddEventChatMessage(libCPCM_gt_CT_DebugMakePurifierBeam, c_playerAny, "beammeup", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugRandomCycleNow
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_DebugRandomCycleNow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libCPCM_gf_MutatorIsEnabled("CycleRandom") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libCPCM_gv_cT_RandomCycleTimer, 0.5, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_DebugRandomCycleNow_Init () {
    libCPCM_gt_CT_DebugRandomCycleNow = TriggerCreate("libCPCM_gt_CT_DebugRandomCycleNow_Func");
    TriggerAddEventChatMessage(libCPCM_gt_CT_DebugRandomCycleNow, c_playerAny, "cyclenow", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugSpawnReanimator
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_DebugSpawnReanimator_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libCPCM_gf_MutatorIsEnabled("Reanimators") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorVoidReanimator", 0, 3, CameraGetTarget(EventPlayer()));
    UnitGroupAdd(libCPCM_gv_cT_Reanimators, UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_DebugSpawnReanimator_Init () {
    libCPCM_gt_CT_DebugSpawnReanimator = TriggerCreate("libCPCM_gt_CT_DebugSpawnReanimator_Func");
    TriggerAddEventChatMessage(libCPCM_gt_CT_DebugSpawnReanimator, c_playerAny, "-reanim", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugAllCastersForceAbility
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_DebugAllCastersForceAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libCPCM_gf_MutatorIsEnabled("OopsAllCasters") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_DebugAllCastersAbility = StringToInt(StringWord(EventChatMessage(false), 2));
    if ((libCPCM_gv_cT_DebugAllCastersAbility >= (libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersMax))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_CPCM_2395C3B1"), true);
        libCPCM_gv_cT_DebugAllCastersAbility = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_DebugAllCastersForceAbility_Init () {
    libCPCM_gt_CT_DebugAllCastersForceAbility = TriggerCreate("libCPCM_gt_CT_DebugAllCastersForceAbility_Func");
    TriggerAddEventChatMessage(libCPCM_gt_CT_DebugAllCastersForceAbility, c_playerAny, "forcecast", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugAllCastersSetEnergy
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_DebugAllCastersSetEnergy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libCPCM_gf_MutatorIsEnabled("OopsAllCasters") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_AllCastersPlayerEnergy[EventPlayer()] = StringToInt(StringWord(EventChatMessage(false), 2));
    if ((libCPCM_gv_cT_DebugAllCastersAbility >= (libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersMax))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_CPCM_67441F81"), true);
        libCPCM_gv_cT_DebugAllCastersAbility = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_DebugAllCastersSetEnergy_Init () {
    libCPCM_gt_CT_DebugAllCastersSetEnergy = TriggerCreate("libCPCM_gt_CT_DebugAllCastersSetEnergy_Func");
    TriggerAddEventChatMessage(libCPCM_gt_CT_DebugAllCastersSetEnergy, c_playerAny, "playerenergy", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugMissileMe
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_DebugMissileMe_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_missileLauncher;
    point lv_launchLocation;
    int lv_type;

    // Automatic Variable Declarations
    int autoA291B6D1_val;
    int autoAF1D1F96_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, 3, Point(0.0, 0.0));
    lv_missileLauncher = UnitLastCreated();
    autoA291B6D1_val = RandomInt(1, 4);
    if (autoA291B6D1_val == 1) {
        lv_launchLocation = Point(RandomFixed(0.0, libNtve_gf_WidthOfRegion(RegionEntireMap())), libNtve_gf_HeightOfRegion(RegionEntireMap()));
    }
    else if (autoA291B6D1_val == 2) {
        lv_launchLocation = Point(RandomFixed(0.0, libNtve_gf_WidthOfRegion(RegionEntireMap())), 0.0);
    }
    else if (autoA291B6D1_val == 3) {
        lv_launchLocation = Point(0.0, RandomFixed(0.0, libNtve_gf_HeightOfRegion(RegionEntireMap())));
    }
    else if (autoA291B6D1_val == 4) {
        lv_launchLocation = Point(libNtve_gf_WidthOfRegion(RegionEntireMap()), RandomFixed(0.0, libNtve_gf_HeightOfRegion(RegionEntireMap())));
    }
    else {
    }
    UnitSetPosition(lv_missileLauncher, lv_launchLocation, false);
    CameraPan(1, lv_launchLocation, 0.0, -1, 10.0, false);
    if ((StringWord(EventChatMessage(false), 2) == "")) {
        lv_type = 1;
    }
    else {
        lv_type = StringToInt(StringWord(EventChatMessage(false), 2));
    }
    autoAF1D1F96_val = lv_type;
    if (autoAF1D1F96_val == 2) {
        UnitCreateEffectUnit(lv_missileLauncher, "MutatorMissileSplitterLaunch", UnitGroupRandomUnit(UnitGroupSelected(1), c_unitCountAlive));
    }
    else if (autoAF1D1F96_val == 3) {
        UnitCreateEffectUnit(lv_missileLauncher, "MutatorMissilePointDefenseLaunch", UnitGroupRandomUnit(UnitGroupSelected(1), c_unitCountAlive));
    }
    else if (autoAF1D1F96_val == 4) {
        UnitCreateEffectUnit(lv_missileLauncher, "MutatorMissilePointDefenseNukeEscortLaunch", UnitGroupRandomUnit(UnitGroupSelected(1), c_unitCountAlive));
    }
    else if (autoAF1D1F96_val == 5) {
        UnitCreateEffectUnit(lv_missileLauncher, "MutatorMissileNukeLaunch", UnitGroupRandomUnit(UnitGroupSelected(1), c_unitCountAlive));
    }
    else {
        UnitCreateEffectUnit(lv_missileLauncher, "MutatorMissileStandardLaunch", UnitGroupRandomUnit(UnitGroupSelected(1), c_unitCountAlive));
    }
    Wait(0.1, c_timeGame);
    UnitKill(lv_missileLauncher);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_DebugMissileMe_Init () {
    libCPCM_gt_CT_DebugMissileMe = TriggerCreate("libCPCM_gt_CT_DebugMissileMe_Func");
    TriggerAddEventChatMessage(libCPCM_gt_CT_DebugMissileMe, c_playerAny, "missileme", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugMissileGo
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_DebugMissileGo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_missileLauncher;
    point lv_launchLocation;
    int lv_type;
    point lv_targetUnitPoint;

    // Automatic Variable Declarations
    int auto4E644AF1_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, 3, Point(0.0, 0.0));
    lv_missileLauncher = UnitLastCreated();
    UnitSetPosition(lv_missileLauncher, CameraGetTarget(1), false);
    if ((StringWord(EventChatMessage(false), 2) == "")) {
        lv_type = 1;
    }
    else {
        lv_type = StringToInt(StringWord(EventChatMessage(false), 2));
    }
    auto4E644AF1_val = lv_type;
    if (auto4E644AF1_val == 2) {
        UnitCreateEffectUnit(lv_missileLauncher, "MutatorMissileSplitterLaunch", UnitGroupRandomUnit(UnitGroupSelected(1), c_unitCountAlive));
    }
    else if (auto4E644AF1_val == 3) {
        lv_targetUnitPoint = UnitGetPosition(UnitGroupRandomUnit(UnitGroupSelected(1), c_unitCountAlive));
        UnitCreateEffectPoint(lv_missileLauncher, "MutatorMissilePointDefenseLaunch", libNtve_gf_PointFromXYZ(PointGetX(lv_targetUnitPoint), PointGetY(lv_targetUnitPoint), 2.0));
    }
    else if (auto4E644AF1_val == 4) {
        lv_targetUnitPoint = UnitGetPosition(UnitGroupRandomUnit(UnitGroupSelected(1), c_unitCountAlive));
        UnitCreateEffectPoint(lv_missileLauncher, "MutatorMissilePointDefenseNukeEscortLaunch", libNtve_gf_PointFromXYZ(PointGetX(lv_targetUnitPoint), PointGetY(lv_targetUnitPoint), 2.0));
    }
    else if (auto4E644AF1_val == 5) {
        UnitCreateEffectUnit(lv_missileLauncher, "MutatorMissileNukeLaunch", UnitGroupRandomUnit(UnitGroupSelected(1), c_unitCountAlive));
    }
    else {
        UnitCreateEffectUnit(lv_missileLauncher, "MutatorMissileStandardLaunch", UnitGroupRandomUnit(UnitGroupSelected(1), c_unitCountAlive));
    }
    Wait(0.1, c_timeGame);
    UnitKill(lv_missileLauncher);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_DebugMissileGo_Init () {
    libCPCM_gt_CT_DebugMissileGo = TriggerCreate("libCPCM_gt_CT_DebugMissileGo_Func");
    TriggerAddEventChatMessage(libCPCM_gt_CT_DebugMissileGo, c_playerAny, "missilego", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugPathCost
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_DebugPathCost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroupSelected(1), c_unitCountAlive) > 0)) {
        TextExpressionSetToken("Param/Expression/lib_CPCM_2962E44B", "A", FixedToText(AIPathingCostMap(UnitGetPosition(UnitGroupUnit(UnitGroupSelected(EventPlayer()), 1)), PlayerStartLocation(1)), c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/lib_CPCM_2962E44B", "B", FixedToText(AIPathingCostMap(UnitGetPosition(UnitGroupUnit(UnitGroupSelected(EventPlayer()), 1)), PlayerStartLocation(2)), c_fixedPrecisionAny));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPCM_2962E44B"), true);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_CPCM_E9ED44C9", "A", FixedToText(AIPathingCostMap(CameraGetTarget(EventPlayer()), PlayerStartLocation(1)), c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/lib_CPCM_E9ED44C9", "B", FixedToText(AIPathingCostMap(CameraGetTarget(EventPlayer()), PlayerStartLocation(2)), c_fixedPrecisionAny));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPCM_E9ED44C9"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_DebugPathCost_Init () {
    libCPCM_gt_CT_DebugPathCost = TriggerCreate("libCPCM_gt_CT_DebugPathCost_Func");
    TriggerAddEventChatMessage(libCPCM_gt_CT_DebugPathCost, c_playerAny, "pathcost", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugCanPath
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_DebugCanPath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, IntToText(AIPathingCostUnit(UnitGroupUnit(UnitGroupSelected(1), 1), PlayerStartLocation(1), c_ignoreEnemyBuildings)), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_DebugCanPath_Init () {
    libCPCM_gt_CT_DebugCanPath = TriggerCreate("libCPCM_gt_CT_DebugCanPath_Func");
    TriggerAddEventChatMessage(libCPCM_gt_CT_DebugCanPath, c_playerAny, "canpath", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugRiftSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_DebugRiftSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCPCM_gt_CT_VoidRiftUnitMade, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, (StringWord(EventChatMessage(false), 2)), c_unitCreateIgnorePlacement, UnitGetOwner(UnitGroupUnit(UnitGroupSelected(1), 1)), UnitGetPosition(UnitGroupUnit(UnitGroupSelected(1), 1)));
    libCPCM_gf_CT_VoidRiftBirthUnits(UnitGroupUnit(UnitGroupSelected(1), 1), UnitLastCreatedGroup());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_DebugRiftSpawn_Init () {
    libCPCM_gt_CT_DebugRiftSpawn = TriggerCreate("libCPCM_gt_CT_DebugRiftSpawn_Func");
    TriggerAddEventChatMessage(libCPCM_gt_CT_DebugRiftSpawn, c_playerAny, "riftspawn", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugGiftSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_DebugGiftSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gf_CT_GiftSpawn(CameraGetTarget(EventPlayer()));
    libCPCM_gf_CT_GiftSendAttack(libCPCM_gv_cT_GiftLastCreated);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_DebugGiftSpawn_Init () {
    libCPCM_gt_CT_DebugGiftSpawn = TriggerCreate("libCPCM_gt_CT_DebugGiftSpawn_Func");
    TriggerAddEventChatMessage(libCPCM_gt_CT_DebugGiftSpawn, c_playerAny, "giftspawn", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugGiftSetPower
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_DebugGiftSetPower_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_GiftAmonPower = StringToInt(StringWord(EventChatMessage(false), 2));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_DebugGiftSetPower_Init () {
    libCPCM_gt_CT_DebugGiftSetPower = TriggerCreate("libCPCM_gt_CT_DebugGiftSetPower_Func");
    TriggerAddEventChatMessage(libCPCM_gt_CT_DebugGiftSetPower, c_playerAny, "giftpower", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugGiftPlayer
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_DebugGiftPlayer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gf_CT_GiftPlayerBonus(CameraGetTarget(EventPlayer()), StringToInt(StringWord(EventChatMessage(false), 2)), EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_DebugGiftPlayer_Init () {
    libCPCM_gt_CT_DebugGiftPlayer = TriggerCreate("libCPCM_gt_CT_DebugGiftPlayer_Func");
    TriggerAddEventChatMessage(libCPCM_gt_CT_DebugGiftPlayer, c_playerAny, "giftme", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugGiftEnemy
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_DebugGiftEnemy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gf_CT_GiftEnemyBonus(CameraGetTarget(EventPlayer()), StringToInt(StringWord(EventChatMessage(false), 2)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_DebugGiftEnemy_Init () {
    libCPCM_gt_CT_DebugGiftEnemy = TriggerCreate("libCPCM_gt_CT_DebugGiftEnemy_Func");
    TriggerAddEventChatMessage(libCPCM_gt_CT_DebugGiftEnemy, c_playerAny, "giftenemy", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugBoomBotSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_DebugBoomBotSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libCPCM_gf_MutatorIsEnabled("BoomBots") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorBoomBot", 0, 3, CameraGetTarget(EventPlayer()));
    libCPCM_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
    AISetUnitSuicide(UnitLastCreated(), true);
    libCPCM_gf_CT_ApplyBoomBotPing(UnitLastCreated());
    libCPCM_gf_CT_BoomBotsUpdate(UnitLastCreated());
    SoundPlayForPlayer(SoundLink("TUIWarning", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_DebugBoomBotSpawn_Init () {
    libCPCM_gt_CT_DebugBoomBotSpawn = TriggerCreate("libCPCM_gt_CT_DebugBoomBotSpawn_Func");
    TriggerAddEventChatMessage(libCPCM_gt_CT_DebugBoomBotSpawn, c_playerAny, "-boombot", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugBrutal+
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_DebugBrutal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_difficultylevel;
    int lv_mutatorcount;
    int lv_player;

    // Automatic Variable Declarations
    string auto1F2B8AA3_val;
    playergroup autoDD0E9556_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((StringSub(EventChatMessage(false), 1, 7) == "brutal+"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto1F2B8AA3_val = EventChatMessage(false);
    if (auto1F2B8AA3_val == "brutal+6") {
        lv_difficultylevel = 6;
    }
    else if (auto1F2B8AA3_val == "brutal+5") {
        lv_difficultylevel = 5;
    }
    else if (auto1F2B8AA3_val == "brutal+4") {
        lv_difficultylevel = 4;
    }
    else if (auto1F2B8AA3_val == "brutal+3") {
        lv_difficultylevel = 3;
    }
    else if (auto1F2B8AA3_val == "brutal+2") {
        lv_difficultylevel = 2;
    }
    else {
        lv_difficultylevel = 1;
    }
    autoDD0E9556_g = libCOOC_gf_HumanPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoDD0E9556_g, lv_player);
        if (lv_player < 0) { break; }
        libCOUI_gf_CU_CommanderUpdate(lv_player);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_DebugBrutal_Init () {
    libCPCM_gt_CT_DebugBrutal = TriggerCreate("libCPCM_gt_CT_DebugBrutal_Func");
    TriggerAddEventChatMessage(libCPCM_gt_CT_DebugBrutal, 1, "brutal+", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeCycleRandom
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeCycleRandom_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_mutatorIndex;

    // Automatic Variable Declarations
    const int auto787680B1_ae = 3;
    const int auto787680B1_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mutatorIndex = 1;
    for ( ; ( (auto787680B1_ai >= 0 && lv_mutatorIndex <= auto787680B1_ae) || (auto787680B1_ai < 0 && lv_mutatorIndex >= auto787680B1_ae) ) ; lv_mutatorIndex += auto787680B1_ai ) {
        while (true) {
            libCPCM_gv_cT_RandomMutators[lv_mutatorIndex] = libCPCM_gf_CT_RandomUnusedCycleMutator();
            if ((libCPCM_gf_CT_MutatorRandomFirstAllowed(libCPCM_gv_cT_RandomMutators[lv_mutatorIndex]) == true)) {
                break;
            }

        }
        libCPCM_gf_EnableDisableMutator(true, libCPCM_gv_cT_RandomMutators[lv_mutatorIndex]);
    }
    Wait(0.0625, c_timeGame);
    libCOUI_gf_CU_MutatorListSetItem(4, libCPCM_gv_cT_RandomMutators[3]);
    libCOUI_gf_CU_MutatorListSetItem(3, libCPCM_gv_cT_RandomMutators[2]);
    libCOUI_gf_CU_MutatorListSetItem(2, libCPCM_gv_cT_RandomMutators[1]);
    libCOUI_gf_CU_MutatorListSetItem(1, "CycleRandom");
    TriggerExecute(libCPCM_gt_CT_CycleRandomMutators, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeCycleRandom_Init () {
    libCPCM_gt_CT_InitializeCycleRandom = TriggerCreate("libCPCM_gt_CT_InitializeCycleRandom_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_AmonHeroPool_Tracker
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_AmonHeroPool_Tracker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerActiveCount(TriggerGetCurrent()) <= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_AmonHeroNumber = 0;
    libCPCM_gv_cT_AmonHeroPool = 1;
    libCPCM_gf_CT_AmonHero_GrantPoolAtMissionTime(5.0, 2);
    libCPCM_gf_CT_AmonHero_GrantPoolAtMissionTime(6.5, 1);
    libCPCM_gf_CT_AmonHero_GrantPoolAtMissionTime(8.0, 1);
    libCPCM_gf_CT_AmonHero_GrantPoolAtMissionTime(9.5, 1);
    libCPCM_gf_CT_AmonHero_GrantPoolAtMissionTime(11.0, 1);
    libCPCM_gf_CT_AmonHero_GrantPoolAtMissionTime(12.5, 1);
    libCPCM_gf_CT_AmonHero_GrantPoolAtMissionTime(14.0, 1);
    libCPCM_gf_CT_AmonHero_GrantPoolAtMissionTime(15.0, 1);
    libCPCM_gf_CT_AmonHero_GrantPoolAtMissionTime(16.0, 1);
    libCPCM_gf_CT_AmonHero_GrantPoolAtMissionTime(17.0, 1);
    libCPCM_gf_CT_AmonHero_GrantPoolAtMissionTime(18.0, 1);
    libCPCM_gf_CT_AmonHero_GrantPoolAtMissionTime(19.0, 1);
    libCPCM_gf_CT_AmonHero_GrantPoolAtMissionTime(20.0, 1);
    while (true) {
        Wait(30.0, c_timeGame);
        libCPCM_gv_cT_AmonHeroPool += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_AmonHeroPool_Tracker_Init () {
    libCPCM_gt_CT_AmonHeroPool_Tracker = TriggerCreate("libCPCM_gt_CT_AmonHeroPool_Tracker_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_JustDieTrainHealth
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_JustDieTrainHealth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_trainUnit;
    unit lv_indexTrain;
    unitgroup lv_trainCars;
    fixed lv_trainID;

    // Automatic Variable Declarations
    unitgroup auto53B5AC01_g;
    int auto53B5AC01_u;
    unitgroup autoFFF5560E_g;
    int autoFFF5560E_u;

    // Variable Initialization
    lv_trainUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_trainCars = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(lv_trainUnit) == "Caboose") || (UnitGetType(lv_trainUnit) == "TarsonisEngineFast") || (UnitGetType(lv_trainUnit) == "TarsonisEngine") || (UnitGetType(lv_trainUnit) == "FreightCar")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_trainID = UnitGetCustomValue(lv_trainUnit, 2);
    lv_trainCars = libCOMI_gf_ConjoinedTrainsofTrainCar(lv_trainUnit);
    UnitGroupRemove(lv_trainCars, lv_trainUnit);
    auto53B5AC01_g = lv_trainCars;
    auto53B5AC01_u = UnitGroupCount(auto53B5AC01_g, c_unitCountAll);
    for (;; auto53B5AC01_u -= 1) {
        lv_indexTrain = UnitGroupUnitFromEnd(auto53B5AC01_g, auto53B5AC01_u);
        if (lv_indexTrain == null) { break; }
        if ((UnitGetCustomValue(lv_indexTrain, 2) == lv_trainID) && (UnitHasBehavior2(lv_indexTrain, "MutatorMasterController") == true)) {
            UnitBehaviorRemove(lv_indexTrain, "MutatorMasterController", 1);
            UnitBehaviorAdd(lv_indexTrain, "MutatorJustDie", lv_indexTrain, 1);
        }
        else {
            UnitGroupRemove(lv_trainCars, lv_indexTrain);
        }
    }
    Wait(0.0625, c_timeGame);
    UnitGroupAdd(lv_trainCars, lv_trainUnit);
    autoFFF5560E_g = lv_trainCars;
    autoFFF5560E_u = UnitGroupCount(autoFFF5560E_g, c_unitCountAll);
    for (;; autoFFF5560E_u -= 1) {
        lv_indexTrain = UnitGroupUnitFromEnd(autoFFF5560E_g, autoFFF5560E_u);
        if (lv_indexTrain == null) { break; }
        if ((UnitGetCustomValue(lv_indexTrain, 2) == lv_trainID)) {
            UnitSetPropertyFixed(lv_indexTrain, c_unitPropLifePercent, 100.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_JustDieTrainHealth_Init () {
    libCPCM_gt_CT_JustDieTrainHealth = TriggerCreate("libCPCM_gt_CT_JustDieTrainHealth_Func");
    TriggerEnable(libCPCM_gt_CT_JustDieTrainHealth, false);
    TriggerAddEventPlayerEffectUsed(libCPCM_gt_CT_JustDieTrainHealth, c_playerAny, "MutatorJustDieAB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_JustDiePolarityInteraction
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_JustDiePolarityInteraction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gf_CT_Polarity_Swap(lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_JustDiePolarityInteraction_Init () {
    libCPCM_gt_CT_JustDiePolarityInteraction = TriggerCreate("libCPCM_gt_CT_JustDiePolarityInteraction_Func");
    TriggerEnable(libCPCM_gt_CT_JustDiePolarityInteraction, false);
    TriggerAddEventUnitBehaviorChange(libCPCM_gt_CT_JustDiePolarityInteraction, null, "MutatorJustDie", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_StatBlizzardFreeze
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_StatBlizzardFreeze_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) > 0) && (UnitGetOwner(EventUnit()) <= libCOOC_gv_cCC_MAXCOMMANDERS_PVE)) {
        libCPCM_gv_cT_StatBlizzardUnitsFrozen[UnitGetOwner(EventUnit())] += 1;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_StatBlizzardFreeze_Init () {
    libCPCM_gt_CT_StatBlizzardFreeze = TriggerCreate("libCPCM_gt_CT_StatBlizzardFreeze_Func");
    TriggerEnable(libCPCM_gt_CT_StatBlizzardFreeze, false);
    TriggerAddEventUnitBehaviorChange(libCPCM_gt_CT_StatBlizzardFreeze, null, "MutatorStormCloudSlow", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_GiftKillBotBanelingCredit
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_GiftKillBotBanelingCredit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "MutatorKillBot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropKills, (UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropKills, c_unitPropCurrent) + 1.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_GiftKillBotBanelingCredit_Init () {
    libCPCM_gt_CT_GiftKillBotBanelingCredit = TriggerCreate("libCPCM_gt_CT_GiftKillBotBanelingCredit_Func");
    TriggerEnable(libCPCM_gt_CT_GiftKillBotBanelingCredit, false);
    TriggerAddEventPlayerEffectUsed(libCPCM_gt_CT_GiftKillBotBanelingCredit, 1, "HotSBanelingDeathExplodeLargeSet");
    TriggerAddEventPlayerEffectUsed(libCPCM_gt_CT_GiftKillBotBanelingCredit, 2, "HotSBanelingDeathExplodeLargeSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_GiftShrunkEffectOn
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_GiftShrunkEffectOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_currentScale;
    fixed lv_targetScale;
    fixed lv_step;

    // Automatic Variable Declarations
    const int auto400190FA_n = 10;
    int auto400190FA_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "MutatorAvenger") == true)) {
        lv_currentScale = 1.8;
        lv_targetScale = 0.9;
    }
    else {
        lv_currentScale = 1.0;
        lv_targetScale = 0.5;
    }
    lv_step = ((lv_targetScale - lv_currentScale) / 10.0);
    for (auto400190FA_i = 1; auto400190FA_i <= auto400190FA_n; auto400190FA_i += 1) {
        Wait(0.0625, c_timeGame);
        lv_currentScale += lv_step;
        libNtve_gf_SendActorMessageToUnit(EventUnit(), (("SetScale " + FixedToString(lv_currentScale, c_fixedPrecisionAny))));
    }
    libNtve_gf_SendActorMessageToUnit(EventUnit(), (("SetScale " + FixedToString(lv_targetScale, c_fixedPrecisionAny))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_GiftShrunkEffectOn_Init () {
    libCPCM_gt_CT_GiftShrunkEffectOn = TriggerCreate("libCPCM_gt_CT_GiftShrunkEffectOn_Func");
    TriggerEnable(libCPCM_gt_CT_GiftShrunkEffectOn, false);
    TriggerAddEventUnitBehaviorChange(libCPCM_gt_CT_GiftShrunkEffectOn, null, "MutatorShrunk", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_GiftShrunkEffectOff
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_GiftShrunkEffectOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_currentScale;
    fixed lv_targetScale;
    fixed lv_step;

    // Automatic Variable Declarations
    const int auto116CBC15_n = 10;
    int auto116CBC15_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "MutatorAvenger") == true)) {
        lv_targetScale = 1.8;
        lv_currentScale = 0.9;
    }
    else {
        lv_targetScale = 1.0;
        lv_currentScale = 0.5;
    }
    lv_step = ((lv_targetScale - lv_currentScale) / 10.0);
    for (auto116CBC15_i = 1; auto116CBC15_i <= auto116CBC15_n; auto116CBC15_i += 1) {
        Wait(0.0625, c_timeGame);
        lv_currentScale += lv_step;
        libNtve_gf_SendActorMessageToUnit(EventUnit(), (("SetScale " + FixedToString(lv_currentScale, c_fixedPrecisionAny))));
    }
    libNtve_gf_SendActorMessageToUnit(EventUnit(), (("SetScale " + FixedToString(lv_targetScale, c_fixedPrecisionAny))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_GiftShrunkEffectOff_Init () {
    libCPCM_gt_CT_GiftShrunkEffectOff = TriggerCreate("libCPCM_gt_CT_GiftShrunkEffectOff_Func");
    TriggerEnable(libCPCM_gt_CT_GiftShrunkEffectOff, false);
    TriggerAddEventUnitBehaviorChange(libCPCM_gt_CT_GiftShrunkEffectOff, null, "MutatorShrunk", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_CandyBowlTextUpdate
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_CandyBowlTextUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOUI_gf_SetSingularBossBarCurrentValueVoidCampaign(FixedToInt(UnitAbilityChargeInfo(libCPCM_gv_cT_CandyBowlUnit, AbilityCommand("MutatorBuyCandy", 0), c_unitAbilChargeCountLeft)), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_CandyBowlTextUpdate_Init () {
    libCPCM_gt_CT_CandyBowlTextUpdate = TriggerCreate("libCPCM_gt_CT_CandyBowlTextUpdate_Func");
    TriggerEnable(libCPCM_gt_CT_CandyBowlTextUpdate, false);
    TriggerAddEventUnitAbility(libCPCM_gt_CT_CandyBowlTextUpdate, UnitRefFromVariable("libCPCM_gv_cT_CandyBowlUnit"), AbilityCommand("MutatorBuyCandy", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_BlizzardEntersSafetyZone
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_BlizzardEntersSafetyZone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MutatorStormCloud"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "MutatorStormCloudBlizzardDisable", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_BlizzardEntersSafetyZone_Init () {
    libCPCM_gt_CT_BlizzardEntersSafetyZone = TriggerCreate("libCPCM_gt_CT_BlizzardEntersSafetyZone_Func");
    TriggerEnable(libCPCM_gt_CT_BlizzardEntersSafetyZone, false);
    TriggerAddEventUnitRegion(libCPCM_gt_CT_BlizzardEntersSafetyZone, null, libCPCM_gf_CT_MutatorSafetyZone(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_BlizzardLeavesSafetyZone
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_BlizzardLeavesSafetyZone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MutatorStormCloud"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "MutatorStormCloudBlizzardDisable", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_BlizzardLeavesSafetyZone_Init () {
    libCPCM_gt_CT_BlizzardLeavesSafetyZone = TriggerCreate("libCPCM_gt_CT_BlizzardLeavesSafetyZone_Func");
    TriggerEnable(libCPCM_gt_CT_BlizzardLeavesSafetyZone, false);
    TriggerAddEventUnitRegion(libCPCM_gt_CT_BlizzardLeavesSafetyZone, null, libCPCM_gf_CT_MutatorSafetyZone(), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mutator Laser Drill Beam Sound Region Clear
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_MutatorLaserDrillBeamSoundRegionClear_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCPCM_gv_mutatorLaserDrillSoundRegionCreated == true)) {
        ActorScopeSend(ActorScopeFromActor(libCPCM_gv_mutatorLaserDrillSoundRegionActor), "Signal StopSound");
        libCPCM_gv_mutatorLaserDrillSoundRegion = RegionEmpty();
        libCPCM_gv_mutatorLaserDrillSoundRegionCreated = false;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_MutatorLaserDrillBeamSoundRegionClear_Init () {
    libCPCM_gt_MutatorLaserDrillBeamSoundRegionClear = TriggerCreate("libCPCM_gt_MutatorLaserDrillBeamSoundRegionClear_Func");
    TriggerAddEventPlayerEffectUsed(libCPCM_gt_MutatorLaserDrillBeamSoundRegionClear, c_playerAny, "MutatorLaserDrillSoundFinalEffect");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mutator Laser Drill Beam Sound Firing
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_MutatorLaserDrillBeamSoundFiring_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_a;
    point lv_b;
    fixed lv_d;
    int lv_di;
    fixed lv_facing;
    int lv_i;
    fixed lv_x;
    fixed lv_y;

    // Automatic Variable Declarations
    int autoF50378B9_ae;
    const int autoF50378B9_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCPCM_gv_mutatorLaserDrillSoundRegionCreated == true)) {
        ActorScopeSend(ActorScopeFromActor(libCPCM_gv_mutatorLaserDrillSoundRegionActor), "Signal StopSound");
        libCPCM_gv_mutatorLaserDrillSoundRegion = RegionEmpty();
        libCPCM_gv_mutatorLaserDrillSoundRegionCreated = false;
    }

    lv_a = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_b = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    lv_facing = AngleBetweenPoints(lv_a, lv_b);
    lv_d = DistanceBetweenPoints(lv_a, lv_b);
    lv_di = FixedToInt((lv_d / 5.0));
    lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * 5.0));
    lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * 5.0));
    libCPCM_gv_mutatorLaserDrillSoundRegion = RegionCircle(Point(lv_x, lv_y), 1.0);
    autoF50378B9_ae = lv_di;
    lv_i = 1;
    for ( ; ( (autoF50378B9_ai >= 0 && lv_i <= autoF50378B9_ae) || (autoF50378B9_ai < 0 && lv_i >= autoF50378B9_ae) ) ; lv_i += autoF50378B9_ai ) {
        lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        RegionAddCircle(libCPCM_gv_mutatorLaserDrillSoundRegion, true, Point(lv_x, lv_y), 3.0);
    }
    ActorRegionCreate(null, "MutatorLaserDrillBeamRegion", libCPCM_gv_mutatorLaserDrillSoundRegion);
    libCPCM_gv_mutatorLaserDrillSoundRegionActor = libNtve_gf_ActorLastCreated();
    libCPCM_gv_mutatorLaserDrillSoundRegionCreated = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_MutatorLaserDrillBeamSoundFiring_Init () {
    libCPCM_gt_MutatorLaserDrillBeamSoundFiring = TriggerCreate("libCPCM_gt_MutatorLaserDrillBeamSoundFiring_Func");
    TriggerAddEventPlayerEffectUsed(libCPCM_gt_MutatorLaserDrillBeamSoundFiring, c_playerAny, "MutatorLaserDrillSoundCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit is Created
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_UnitisCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCPCM_gf_MutatorsEnabled() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gf_CT_ApplyPermaCloak(EventUnitCreatedUnit());
    libCPCM_gf_CT_ApplyUnitSpeed(EventUnitCreatedUnit());
    libCPCM_gf_CT_ApplyJustDie(EventUnitCreatedUnit());
    libCPCM_gf_CT_ApplyAllSpellsEnergy(EventUnitCreatedUnit());
    libCPCM_gf_CT_ApplyMissileBirth(EventUnitCreatedUnit());
    libCPCM_gf_CT_ApplyPolarity(EventUnitCreatedUnit());
    libCPCM_gf_CT_ApplyPlague(EventUnitCreatedUnit());
    libCPCM_gf_CT_ApplyStructureStealBehavior(EventUnitCreatedUnit());
    libCPCM_gf_CT_ApplyWinterCheer(EventUnitCreatedUnit());
    libCPCM_gf_CT_ApplyHardenedWill(EventUnitCreatedUnit());
    libCPCM_gf_CT_ApplyInspiration(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_UnitisCreated_Init () {
    libCPCM_gt_UnitisCreated = TriggerCreate("libCPCM_gt_UnitisCreated_Func");
    TriggerEnable(libCPCM_gt_UnitisCreated, false);
    TriggerAddEventUnitCreated(libCPCM_gt_UnitisCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit is Ordered
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_UnitisOrdered_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCPCM_gf_MutatorsEnabled() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gf_CT_ApplyOrderCosts(EventUnit(), EventUnitOrder());
    libCPCM_gf_CT_ApplyAfraidOfTheDark(EventUnit(), EventUnitOrder());
    libCPCM_gf_CT_ApplyInsubordination(EventUnit(), EventUnitOrder());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_UnitisOrdered_Init () {
    libCPCM_gt_UnitisOrdered = TriggerCreate("libCPCM_gt_UnitisOrdered_Func");
    TriggerEnable(libCPCM_gt_UnitisOrdered, false);
    TriggerAddEventUnitOrder(libCPCM_gt_UnitisOrdered, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Owner Changes
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_UnitOwnerChanges_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCPCM_gf_MutatorsEnabled() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitOwnerOld()) == false) && (PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitOwnerNew()) == true)) {
        libCPCM_gf_CT_RemoveAvenger(EventUnit());
        libCPCM_gf_CT_RemoveUnitSpeed(EventUnit());
        libCPCM_gf_CT_RemoveAllCastersEnergy(EventUnit());
    }

    if ((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitOwnerOld()) == true) && (PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), EventUnitOwnerNew()) == false)) {
        libCPCM_gf_CT_RemoveStructureStealBehavior(EventUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_UnitOwnerChanges_Init () {
    libCPCM_gt_UnitOwnerChanges = TriggerCreate("libCPCM_gt_UnitOwnerChanges_Func");
    TriggerEnable(libCPCM_gt_UnitOwnerChanges, false);
    TriggerAddEventUnitChangeOwner(libCPCM_gt_UnitOwnerChanges, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Takes Damage
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_UnitTakesDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCPCM_gf_MutatorsEnabled() == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gf_CT_ApplyConcussiveAttacks(EventUnit(), EventUnitDamageSourceUnit());
    libCPCM_gf_CT_ApplyBarrier(EventUnit(), EventUnitDamageSourceUnit());
    libCPCM_gf_CT_ApplySideStep(EventUnit(), EventUnitDamageSourceUnit());
    libCPCM_gf_CT_ApplyPhotonOverload(EventUnit(), EventUnitDamageSourceUnit());
    libCPCM_gf_CT_ApplyLifeLeech(EventUnit(), EventUnitDamageSourceUnit(), EventUnitDamageAmount());
    libCPCM_gf_CT_ApplyFoodHuntAggro(EventUnit(), EventUnitDamageSourceUnit());
    libCPCM_gf_CT_ApplyDamageBounce2(EventUnit(), EventUnitDamageSourceUnit(), EventUnitDamageAmount(), EventUnitDamageEffect());
    libCPCM_gf_CT_ApplyTempDamageReflect(EventUnit(), EventUnitDamageSourceUnit(), EventUnitDamageAmount(), EventUnitDamageEffect());
    libCPCM_gf_CT_NullifyDamage(EventUnit(), EventUnitDamageSourceUnit(), EventUnitDamageAmount());
    if ((RandomInt(0, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 500, 400, 300, 200, 0, 0)) <= FixedToInt(EventUnitDamageAmount()))) {
        libCPCM_gf_CT_ApplyEvolve(EventUnitDamageSourceUnit(), EventUnit());
    }

    libCPCM_gf_CT_ApplyFear(EventUnit(), EventUnitDamageSourceUnit(), EventUnitDamageAmount());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_UnitTakesDamage_Init () {
    libCPCM_gt_UnitTakesDamage = TriggerCreate("libCPCM_gt_UnitTakesDamage_Func");
    TriggerEnable(libCPCM_gt_UnitTakesDamage, false);
    TriggerAddEventUnitDamaged(libCPCM_gt_UnitTakesDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Dies
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_UnitDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCPCM_gf_MutatorsEnabled() == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DisruptorPhased"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "AdeptPhaseShift"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "TerranDropPod"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ZergDropPodLarge"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ZergDropPod"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ZergDropPodCreep"))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), 0)) == true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnit()) == "MutatorMissileNuke") || (UnitGetType(EventUnit()) == "MutatorMissilePointDefense") || (UnitGetType(EventUnit()) == "MutatorMissileSplitter") || (UnitGetType(EventUnit()) == "MutatorMissileSplitterChild") || (UnitGetType(EventUnit()) == "MutatorMissileStandard"))) {
        libCPCM_gf_CT_ApplyMissileDeath(EventUnit());
        return true;
    }

    if ((EventUnitDamageDeathCheck(c_deathTypeTimeout) == false)) {
        libCPCM_gf_CT_ApplySpawnBroodling(EventUnit());
        libCPCM_gf_CT_ApplySpawnInfested(EventUnit());
        libCPCM_gf_CT_ApplyReanimatorCorpse(EventUnit());
    }

    libCPCM_gf_CT_ApplyDeathAOE(EventUnit());
    libCPCM_gf_CT_ApplyAvenger(EventUnit());
    libCPCM_gf_CT_ApplyDeathFire(EventUnit());
    libCPCM_gf_CT_ApplyHybridDeathNuke(EventUnit());
    libCPCM_gf_CT_ApplyEvolve(libNtve_gf_KillingUnit(), EventUnit());
    libCPCM_gf_CT_ApplyFoodHuntBounty(EventUnit());
    libCPCM_gf_CT_ApplyFoodHuntSpawn(EventUnit());
    libCPCM_gf_CT_ApplyPlagueOnDeath(EventUnit());
    libCPCM_gf_CT_ApplyKillKarma(libNtve_gf_KillingUnit(), EventUnit());
    libCPCM_gf_CT_ApplyFireworks(EventUnit());
    libCPCM_gf_CT_ApplyDeathPull(EventUnit());
    libCPCM_gf_CT_ApplyPropagatorPingCleanup(EventUnit());
    libCPCM_gf_CT_ApplyMomentOfSilence(EventUnit());
    libCPCM_gf_CT_ApplyBoomBotPingCleanup(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_UnitDies_Init () {
    libCPCM_gt_UnitDies = TriggerCreate("libCPCM_gt_UnitDies_Func");
    TriggerEnable(libCPCM_gt_UnitDies, false);
    TriggerAddEventUnitDied(libCPCM_gt_UnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Changes
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_UpgradeChanges_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCPCM_gf_MutatorsEnabled() == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCPGL_gf_HumanPlayers(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gf_CT_ApplyUberDarkness(EventUpgradeName(), EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_UpgradeChanges_Init () {
    libCPCM_gt_UpgradeChanges = TriggerCreate("libCPCM_gt_UpgradeChanges_Func");
    TriggerEnable(libCPCM_gt_UpgradeChanges, false);
    TriggerAddEventUpgradeLevelChanged(libCPCM_gt_UpgradeChanges, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_PlagueDeath
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_PlagueDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) != "DisruptorPhased"))) {
            return false;
        }

        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) != "AdeptPhaseShift"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gf_CT_ApplyPlague(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_PlagueDeath_Init () {
    libCPCM_gt_CT_PlagueDeath = TriggerCreate("libCPCM_gt_CT_PlagueDeath_Func");
    TriggerEnable(libCPCM_gt_CT_PlagueDeath, false);
    TriggerAddEventPlayerEffectUsed(libCPCM_gt_CT_PlagueDeath, c_playerAny, "MutatorPlagueDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_OutbreakSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_OutbreakSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_spawnedUnits;
    unit lv_spawningStructure;
    unit lv_targetStructure;
    int lv_minSpawn;
    int lv_maxSpawn;
    int lv_extraSpawn;
    int lv_spawnAttempt;

    // Automatic Variable Declarations
    const int auto9687C507_ae = 100;
    const int auto9687C507_ai = 1;
    int auto72C9419E_ae;
    int auto72C9419E_var;

    // Variable Initialization
    lv_spawnedUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawnAttempt = 1;
    for ( ; ( (auto9687C507_ai >= 0 && lv_spawnAttempt <= auto9687C507_ae) || (auto9687C507_ai < 0 && lv_spawnAttempt >= auto9687C507_ae) ) ; lv_spawnAttempt += auto9687C507_ai ) {
        lv_spawningStructure = UnitGroupRandomUnit(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", 1, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_targetStructure = UnitGroupRandomUnit(UnitGroup(null, RandomInt(1, 2), RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        if ((lv_spawningStructure != null) && (lv_targetStructure != null) && (PointPathingIsConnected(UnitGetPosition(lv_spawningStructure), UnitGetPosition(lv_targetStructure)) == true)) {
            break;
        }

        lv_spawningStructure = null;
        lv_targetStructure = null;
    }
    if (((lv_spawningStructure == null) || (lv_targetStructure == null))) {
        return true;
    }

    if ((GameGetMissionTime() >= 900.0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedMedic", 0, UnitGetOwner(lv_spawningStructure), PointWithOffsetPolar(UnitGetPosition(lv_spawningStructure), 1.0, libNtve_gf_RandomAngle()));
        UnitGroupAddUnitGroup(lv_spawnedUnits, UnitLastCreatedGroup());
        libCPCM_gf_CT_RegisterSpawnedUnitGroup(UnitLastCreatedGroup());
    }

    lv_minSpawn = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 2, 3);
    lv_maxSpawn = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 2, 3, 4, 5, 6);
    if ((GameGetMissionTime() >= 800.0)) {
        lv_extraSpawn = libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 1, 2, 2, 2, 2);
        lv_minSpawn += lv_extraSpawn;
        lv_maxSpawn += lv_extraSpawn;
    }

    auto72C9419E_ae = RandomInt(lv_minSpawn, lv_maxSpawn);
    auto72C9419E_var = 1;
    for ( ; auto72C9419E_var <= auto72C9419E_ae; auto72C9419E_var += 1 ) {
        if ((GameGetMissionTime() <= 400.0)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedCivilian", 0, UnitGetOwner(lv_spawningStructure), PointWithOffsetPolar(UnitGetPosition(lv_spawningStructure), 1.0, libNtve_gf_RandomAngle()));
            UnitGroupAddUnitGroup(lv_spawnedUnits, UnitLastCreatedGroup());
        }
        else if (((GameGetMissionTime() <= 1200.0) || (libCOMI_gf_DifficultyValueFixed4(libCOMI_gf_DifficultyLevelForPlayerCoop(1), true, true, false, false, false, false) == true) || (libCOMI_gf_DifficultyValueFixed4(libCOMI_gf_DifficultyLevelForPlayerCoop(2), true, true, false, false, false, false) == true))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "StukovInfestedTerran", 0, UnitGetOwner(lv_spawningStructure), PointWithOffsetPolar(UnitGetPosition(lv_spawningStructure), 1.0, libNtve_gf_RandomAngle()));
            UnitGroupAddUnitGroup(lv_spawnedUnits, UnitLastCreatedGroup());
        }
        else if (true) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, UnitGetOwner(lv_spawningStructure), PointWithOffsetPolar(UnitGetPosition(lv_spawningStructure), 1.0, libNtve_gf_RandomAngle()));
            UnitGroupAddUnitGroup(lv_spawnedUnits, UnitLastCreatedGroup());
        }
        UnitGroupIssueOrder(lv_spawnedUnits, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_targetStructure)), c_orderQueueReplace);
        UnitGroupAddUnitGroup(libCPCM_gv_cT_OnDeathSpawns, lv_spawnedUnits);
        libCPCM_gf_CT_RegisterSpawnedUnitGroup(lv_spawnedUnits);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_OutbreakSpawn_Init () {
    libCPCM_gt_CT_OutbreakSpawn = TriggerCreate("libCPCM_gt_CT_OutbreakSpawn_Func");
    TriggerEnable(libCPCM_gt_CT_OutbreakSpawn, false);
    TriggerAddEventTimePeriodic(libCPCM_gt_CT_OutbreakSpawn, 25.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_StoneZealotsSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_StoneZealotsSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    unit lv_spawningStructure;
    unit lv_targetStructure;
    int lv_minSpawn;
    int lv_maxSpawn;
    int lv_maxSpawnAttempts;
    int lv_spawnCount;
    int lv_extraSpawn;
    int lv_spawnAttempt;
    unit lv_monster;
    string lv_monsterType;
    unitgroup lv_attackGroup;

    // Automatic Variable Declarations
    unitgroup autoD4F8FE36_g;
    int autoD4F8FE36_u;

    // Variable Initialization
    lv_maxSpawn = 50;
    lv_maxSpawnAttempts = 1000;
    lv_monsterType = "MutatorStoneZealot";
    lv_attackGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_maxSpawn = libCOMI_gf_MinimumDifficultyValueCoopInteger(15, 25, 50, 100, 100, 100);
    while ((lv_spawnCount <= lv_maxSpawn) && (lv_spawnAttempt <= lv_maxSpawnAttempts)) {
        lv_spawnPoint = RegionRandomPoint(RegionEntireMap());
        if ((PointPathingIsConnected(lv_spawnPoint, PlayerStartLocation(1)) == true) && (PathingType(lv_spawnPoint) == c_pathingGround) && (libCOOC_gf_CC_SpawnAllowedAtPoint(lv_spawnPoint) == true) && (VisIsVisibleForPlayer(1, lv_spawnPoint) == false) && (UnitCount(null, c_playerAny, RegionCircle(lv_spawnPoint, 5.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount(null, c_playerAny, RegionCircle(lv_spawnPoint, 10.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCountAlliance(1, c_unitAllianceEnemy, RegionCircle(lv_spawnPoint, 25.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0) && (DistanceBetweenPoints(lv_spawnPoint, PlayerStartLocation(1)) >= 30.0) && (DistanceBetweenPoints(lv_spawnPoint, PlayerStartLocation(2)) >= 30.0) && (UnitCount("CelestialLock", c_playerAny, RegionCircle(lv_spawnPoint, 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount("DuelBubbleUnit", c_playerAny, RegionCircle(lv_spawnPoint, 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0)) {
            UnitCreate(1, lv_monsterType, 0, 3, lv_spawnPoint, libNtve_gf_RandomAngle());
            lv_spawnCount += 1;
            TextExpressionSetToken("Param/Expression/lib_CPCM_284370DE", "A", IntToText(lv_spawnCount));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPCM_284370DE"), true);
        }
        else {
            lv_spawnAttempt += 1;
            TextExpressionSetToken("Param/Expression/lib_CPCM_7E1FA252", "A", IntToText(lv_spawnAttempt));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_CPCM_7E1FA252"), true);
        }
    }
    UnitGroupAddUnitGroup(libCPCM_gv_cT_OnDeathSpawns, UnitLastCreatedGroup());
    Wait(120.0, c_timeGame);
    while ((libCOMI_gf_GameIsOver() == false)) {
        autoD4F8FE36_g = UnitGroup(null, 3, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoD4F8FE36_u = UnitGroupCount(autoD4F8FE36_g, c_unitCountAll);
        for (;; autoD4F8FE36_u -= 1) {
            lv_monster = UnitGroupUnitFromEnd(autoD4F8FE36_g, autoD4F8FE36_u);
            if (lv_monster == null) { break; }
            if ((UnitGetType(lv_monster) == lv_monsterType)) {
                AISetUnitSuicide(lv_monster, true);
                break;
            }

        }
        Wait(libCOMI_gf_MinimumDifficultyValueCoopInteger(240, 120, 60, 30, 0, 0), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_StoneZealotsSpawn_Init () {
    libCPCM_gt_CT_StoneZealotsSpawn = TriggerCreate("libCPCM_gt_CT_StoneZealotsSpawn_Func");
    TriggerEnable(libCPCM_gt_CT_StoneZealotsSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_MagMineSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_MagMineSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    unit lv_spawningStructure;
    unit lv_targetStructure;
    int lv_minSpawn;
    int lv_maxSpawn;
    int lv_maxSpawnAttempts;
    int lv_spawnCount;
    int lv_extraSpawn;
    int lv_spawnAttempt;
    unit lv_monster;
    string lv_monsterType;
    unitgroup lv_attackGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_maxSpawn = 50;
    lv_maxSpawnAttempts = 1000;
    lv_monsterType = "MutatorCloakedMine";
    lv_attackGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_maxSpawn = libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 3, 5, 5, 100, 100);
    while ((lv_spawnCount <= lv_maxSpawn) && (lv_spawnAttempt <= lv_maxSpawnAttempts)) {
        lv_spawnPoint = RegionRandomPoint(RegionEntireMap());
        if ((PointPathingIsConnected(lv_spawnPoint, PlayerStartLocation(1)) == true) && (PathingType(lv_spawnPoint) == c_pathingGround) && (VisIsVisibleForPlayer(1, lv_spawnPoint) == false) && (UnitCount(null, c_playerAny, RegionCircle(lv_spawnPoint, 5.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount(null, c_playerAny, RegionCircle(lv_spawnPoint, 10.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCountAlliance(1, c_unitAllianceEnemy, RegionCircle(lv_spawnPoint, 25.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0) && (DistanceBetweenPoints(lv_spawnPoint, PlayerStartLocation(1)) >= 30.0) && (DistanceBetweenPoints(lv_spawnPoint, PlayerStartLocation(2)) >= 30.0) && (UnitCount("CelestialLock", c_playerAny, RegionCircle(lv_spawnPoint, 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount("DuelBubbleUnit", c_playerAny, RegionCircle(lv_spawnPoint, 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0)) {
            UnitCreate(1, lv_monsterType, 0, 3, lv_spawnPoint, libNtve_gf_RandomAngle());
            libCPCM_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
            UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
            UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
            lv_spawnCount += 1;
        }
        else {
            lv_spawnAttempt += 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_MagMineSpawn_Init () {
    libCPCM_gt_CT_MagMineSpawn = TriggerCreate("libCPCM_gt_CT_MagMineSpawn_Func");
    TriggerEnable(libCPCM_gt_CT_MagMineSpawn, false);
    TriggerAddEventTimePeriodic(libCPCM_gt_CT_MagMineSpawn, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DropPodSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_DropPodSpawn_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    timer[libCOOC_gv_cCC_MAXPLAYERS + 1] lv_dropPodTimers;
    int lv_indexPlayer;
    unitgroup lv_attackGroup;
    unitgroup lv_targetCandidates;
    unit lv_dropTarget;
    point lv_dropLocation;
    point lv_targetLocation;
    int lv_dropPlayer;
    int[libCOOC_gv_cCC_MAXPLAYERS + 1] lv_dropCount;
    int lv_dropSafetyIndex;

    // Automatic Variable Declarations
    playergroup auto1487D041_g;
    playergroup autoA3F6CCE4_g;
    unitgroup auto37E29D61_g;
    int auto37E29D61_u;
    const int auto1DC828B9_ae = 1000;
    const int auto1DC828B9_ai = 1;
    const int auto648F3739_ae = 1000;
    const int auto648F3739_ai = 1;
    int auto81ADB508_val;

    // Variable Initialization
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        lv_dropPodTimers[init_i] = TimerCreate();
    }
    lv_attackGroup = UnitGroupEmpty();
    lv_targetCandidates = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto1487D041_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto1487D041_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        TimerStart(lv_dropPodTimers[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 360.0, 330.0, 310.0, 280.0, 0.0, 0.0), false, c_timeAI);
    }
    while (true) {
        Wait(10.0, c_timeAI);
        autoA3F6CCE4_g = libCOOC_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoA3F6CCE4_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            if ((libCPCM_gv_cT_DebugDropPodSpawnNow[lv_indexPlayer] == true)) {
                libNtve_gf_StopTimer(lv_dropPodTimers[lv_indexPlayer]);
                libCPCM_gv_cT_DebugDropPodSpawnNow[lv_indexPlayer] = false;
            }

            if ((TimerGetRemaining(lv_dropPodTimers[lv_indexPlayer]) <= 0.0)) {
                lv_dropCount[lv_indexPlayer] += 1;
                if ((lv_indexPlayer == 1)) {
                    lv_dropPlayer = 3;
                }
                else {
                    lv_dropPlayer = 4;
                }
                lv_targetCandidates = UnitGroup(null, lv_indexPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto37E29D61_g = lv_targetCandidates;
                auto37E29D61_u = UnitGroupCount(auto37E29D61_g, c_unitCountAll);
                for (;; auto37E29D61_u -= 1) {
                    lv_dropTarget = UnitGroupUnitFromEnd(auto37E29D61_g, auto37E29D61_u);
                    if (lv_dropTarget == null) { break; }
                    if (((UnitWeaponCount(lv_dropTarget) == 0) || (UnitGetPropertyFixed(lv_dropTarget, c_unitPropSuppliesUsed, c_unitPropCurrent) <= 0.0) || (libCOOC_gf_CC_UnitIsInternal(lv_dropTarget) == true) || (UnitGetType(lv_dropTarget) == "QueenCoop") || (UnitGetType(lv_dropTarget) == "QueenCoopBurrowed") || (DistanceBetweenPoints(UnitGetPosition(lv_dropTarget), PlayerStartLocation(1)) <= 15.0) || (DistanceBetweenPoints(UnitGetPosition(lv_dropTarget), PlayerStartLocation(2)) <= 15.0))) {
                        UnitGroupRemove(lv_targetCandidates, lv_dropTarget);
                    }

                }
                if ((UnitGroupCount(lv_targetCandidates, c_unitCountAlive) <= 0)) {
                    lv_dropSafetyIndex = 1;
                    for ( ; ( (auto1DC828B9_ai >= 0 && lv_dropSafetyIndex <= auto1DC828B9_ae) || (auto1DC828B9_ai < 0 && lv_dropSafetyIndex >= auto1DC828B9_ae) ) ; lv_dropSafetyIndex += auto1DC828B9_ai ) {
                        lv_dropLocation = RegionRandomPoint(RegionCircle(PlayerStartLocation(lv_indexPlayer), 40.0));
                        if (((PathingType(lv_dropLocation) != c_pathingGround) || (PointPathingPassable(lv_dropLocation) == false) || (PointPathingIsConnected(lv_dropLocation, PlayerStartLocation(lv_indexPlayer)) == false) || (DistanceBetweenPoints(lv_dropLocation, PlayerStartLocation(1)) <= 25.0) || (DistanceBetweenPoints(lv_dropLocation, PlayerStartLocation(2)) <= 25.0) || (UnitCount("MineralField", c_playerAny, RegionCircle(lv_dropLocation, 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1) || (libCPCM_gf_CT_NearbyCliffs(lv_dropLocation, 3.0) == true))) {
                            lv_dropLocation = null;
                            continue;
                        }
                        else {
                            break;
                        }
                    }
                }
                else {
                    lv_targetLocation = UnitGetPosition(UnitGroupRandomUnit(lv_targetCandidates, c_unitCountAlive));
                    lv_dropSafetyIndex = 1;
                    for ( ; ( (auto648F3739_ai >= 0 && lv_dropSafetyIndex <= auto648F3739_ae) || (auto648F3739_ai < 0 && lv_dropSafetyIndex >= auto648F3739_ae) ) ; lv_dropSafetyIndex += auto648F3739_ai ) {
                        lv_dropLocation = PointWithOffsetPolar(lv_targetLocation, 7.0, libNtve_gf_RandomAngle());
                        if (((PathingType(lv_dropLocation) != c_pathingGround) || (PointPathingPassable(lv_dropLocation) == false) || (PointPathingIsConnected(lv_dropLocation, PlayerStartLocation(lv_indexPlayer)) == false) || (libCPCM_gf_CT_NearbyCliffs(lv_dropLocation, 3.0) == true))) {
                            lv_dropLocation = null;
                            continue;
                        }
                        else {
                            break;
                        }
                    }
                }
                if ((lv_dropLocation == null)) {
                    continue;
                }

                auto81ADB508_val = lv_dropCount[lv_indexPlayer];
                if (auto81ADB508_val == 1) {
                    lv_attackGroup = libCOMI_gf_CreateCommanderAttackGroupatPoint(lv_dropPlayer, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early, lv_dropLocation);
                }
                else if (auto81ADB508_val == 2) {
                    lv_attackGroup = libCOMI_gf_CreateCommanderAttackGroupatPoint(lv_dropPlayer, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__1Early, lv_dropLocation);
                }
                else if (auto81ADB508_val == 3) {
                    lv_attackGroup = libCOMI_gf_CreateCommanderAttackGroupatPoint(lv_dropPlayer, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, lv_dropLocation);
                }
                else if (auto81ADB508_val == 4) {
                    lv_attackGroup = libCOMI_gf_CreateCommanderAttackGroupatPoint(lv_dropPlayer, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, lv_dropLocation);
                }
                else if (auto81ADB508_val == 5) {
                    lv_attackGroup = libCOMI_gf_CreateCommanderAttackGroupatPoint(lv_dropPlayer, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__3Mid, lv_dropLocation);
                }
                else if (auto81ADB508_val == 6) {
                    lv_attackGroup = libCOMI_gf_CreateCommanderAttackGroupatPoint(lv_dropPlayer, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, lv_dropLocation);
                }
                else if (auto81ADB508_val == 6) {
                    lv_attackGroup = libCOMI_gf_CreateCommanderAttackGroupatPoint(lv_dropPlayer, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__5Late, lv_dropLocation);
                }
                else {
                    lv_attackGroup = libCOMI_gf_CreateCommanderAttackGroupatPoint(lv_dropPlayer, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, lv_dropLocation);
                }
                libCPCM_gf_CT_RegisterSpawnedUnitGroup(lv_attackGroup);
                libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), lv_dropLocation, 2.0, Color(100.00, 0.00, 0.00));
                AISetGroupScriptControlled(lv_attackGroup, false);
                AISetGroupSuicide(lv_attackGroup, true);
                TimerStart(lv_dropPodTimers[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 240.0, 220.0, 160.0, 120.0, 0.0, 0.0), false, c_timeAI);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_DropPodSpawn_Init () {
    libCPCM_gt_CT_DropPodSpawn = TriggerCreate("libCPCM_gt_CT_DropPodSpawn_Func");
    TriggerEnable(libCPCM_gt_CT_DropPodSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ResourceSpawns
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ResourceSpawns_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnLocation;
    region lv_spawnRegion;
    int lv_safetyCount;
    bool lv_spawnIsOdd;
    int lv_mineralCount;
    int lv_vespeneCount;

    // Automatic Variable Declarations
    const int autoCBCB6A82_ae = 100;
    const int autoCBCB6A82_ai = 1;
    const int auto842E5CE0_ae = 100;
    const int auto842E5CE0_ai = 1;
    const int autoF0A94C0E_ae = 100;
    const int autoF0A94C0E_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    while (true) {
        if (((GameGetMissionTime() > 180.0) || (lv_spawnIsOdd == true))) {
            lv_spawnRegion = RegionEntireMap();
        }
        else {
            lv_spawnRegion = RegionCircle(PlayerStartLocation(1), 30.0);
            RegionAddRegion(lv_spawnRegion, RegionCircle(PlayerStartLocation(2), 30.0));
        }
        lv_safetyCount = 1;
        for ( ; ( (autoCBCB6A82_ai >= 0 && lv_safetyCount <= autoCBCB6A82_ae) || (autoCBCB6A82_ai < 0 && lv_safetyCount >= autoCBCB6A82_ae) ) ; lv_safetyCount += autoCBCB6A82_ai ) {
            lv_spawnLocation = RegionRandomPoint(lv_spawnRegion);
            if ((libCPCM_gf_CT_ResourceSpawnLocationValid(lv_spawnLocation) == false)) {
                continue;
            }

            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorMineralCrystal", 0, 0, lv_spawnLocation);
            lv_mineralCount += 50;
            break;
        }
        if ((lv_spawnIsOdd == true)) {
            lv_safetyCount = 1;
            for ( ; ( (auto842E5CE0_ai >= 0 && lv_safetyCount <= auto842E5CE0_ae) || (auto842E5CE0_ai < 0 && lv_safetyCount >= auto842E5CE0_ae) ) ; lv_safetyCount += auto842E5CE0_ai ) {
                lv_spawnLocation = RegionRandomPoint(lv_spawnRegion);
                if ((libCPCM_gf_CT_ResourceSpawnLocationValid(lv_spawnLocation) == false)) {
                    continue;
                }

                libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorMineralCrystal", 0, 0, lv_spawnLocation);
                lv_mineralCount += 50;
                break;
            }
            lv_safetyCount = 1;
            for ( ; ( (autoF0A94C0E_ai >= 0 && lv_safetyCount <= autoF0A94C0E_ae) || (autoF0A94C0E_ai < 0 && lv_safetyCount >= autoF0A94C0E_ae) ) ; lv_safetyCount += autoF0A94C0E_ai ) {
                lv_spawnLocation = RegionRandomPoint(lv_spawnRegion);
                if ((libCPCM_gf_CT_ResourceSpawnLocationValid(lv_spawnLocation) == false)) {
                    continue;
                }

                libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorNaturalGas50", 0, 0, lv_spawnLocation);
                lv_vespeneCount += 50;
                break;
            }
        }

        lv_spawnIsOdd = !(lv_spawnIsOdd);
        if ((GameGetMissionTime() > 180.0)) {
            Wait(libCOMI_gf_MinimumDifficultyValueCoopReal(4.2, 5.0, 5.2, 5.4, 100.0, 100.0), c_timeGame);
        }
        else {
            Wait(libCOMI_gf_MinimumDifficultyValueCoopReal(5.0, 5.0, 6.0, 7.0, 100.0, 100.0), c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ResourceSpawns_Init () {
    libCPCM_gt_CT_ResourceSpawns = TriggerCreate("libCPCM_gt_CT_ResourceSpawns_Func");
    TriggerEnable(libCPCM_gt_CT_ResourceSpawns, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_RedEnvelopeSpawns
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_RedEnvelopeSpawns_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnLocation;
    region lv_spawnRegion;
    int lv_safetyCount;
    bool lv_spawnIsOdd;
    int lv_mineralCount;
    int lv_vespeneCount;

    // Automatic Variable Declarations
    const int autoAF458147_ae = 100;
    const int autoAF458147_ai = 1;
    const int auto68363ECE_ae = 100;
    const int auto68363ECE_ai = 1;
    const int auto3EC8608C_ae = 100;
    const int auto3EC8608C_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if (((GameGetMissionTime() > 180.0) || (lv_spawnIsOdd == true))) {
            lv_spawnRegion = RegionEntireMap();
        }
        else {
            lv_spawnRegion = RegionCircle(PlayerStartLocation(1), 30.0);
            RegionAddRegion(lv_spawnRegion, RegionCircle(PlayerStartLocation(2), 30.0));
        }
        lv_safetyCount = 1;
        for ( ; ( (autoAF458147_ai >= 0 && lv_safetyCount <= autoAF458147_ae) || (autoAF458147_ai < 0 && lv_safetyCount >= autoAF458147_ae) ) ; lv_safetyCount += autoAF458147_ai ) {
            lv_spawnLocation = RegionRandomPoint(lv_spawnRegion);
            if ((libCPCM_gf_CT_ResourceSpawnLocationValid(lv_spawnLocation) == false)) {
                continue;
            }

            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorEnvelopeMineralPickup", 0, 0, lv_spawnLocation);
            lv_mineralCount += 50;
            break;
        }
        if ((lv_spawnIsOdd == true)) {
            lv_safetyCount = 1;
            for ( ; ( (auto68363ECE_ai >= 0 && lv_safetyCount <= auto68363ECE_ae) || (auto68363ECE_ai < 0 && lv_safetyCount >= auto68363ECE_ae) ) ; lv_safetyCount += auto68363ECE_ai ) {
                lv_spawnLocation = RegionRandomPoint(lv_spawnRegion);
                if ((libCPCM_gf_CT_ResourceSpawnLocationValid(lv_spawnLocation) == false)) {
                    continue;
                }

                libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorEnvelopeMineralPickup", 0, 0, lv_spawnLocation);
                lv_mineralCount += 50;
                break;
            }
            lv_safetyCount = 1;
            for ( ; ( (auto3EC8608C_ai >= 0 && lv_safetyCount <= auto3EC8608C_ae) || (auto3EC8608C_ai < 0 && lv_safetyCount >= auto3EC8608C_ae) ) ; lv_safetyCount += auto3EC8608C_ai ) {
                lv_spawnLocation = RegionRandomPoint(lv_spawnRegion);
                if ((libCPCM_gf_CT_ResourceSpawnLocationValid(lv_spawnLocation) == false)) {
                    continue;
                }

                libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorEnvelopeGasPickup", 0, 0, lv_spawnLocation);
                lv_vespeneCount += 50;
                break;
            }
        }

        lv_spawnIsOdd = !(lv_spawnIsOdd);
        if ((GameGetMissionTime() > 180.0)) {
            Wait(libCOMI_gf_MinimumDifficultyValueCoopReal(4.2, 5.0, 5.2, 5.4, 100.0, 100.0), c_timeGame);
        }
        else {
            Wait(libCOMI_gf_MinimumDifficultyValueCoopReal(5.0, 5.0, 6.0, 7.0, 100.0, 100.0), c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_RedEnvelopeSpawns_Init () {
    libCPCM_gt_CT_RedEnvelopeSpawns = TriggerCreate("libCPCM_gt_CT_RedEnvelopeSpawns_Func");
    TriggerEnable(libCPCM_gt_CT_RedEnvelopeSpawns, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_TimeWarpSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_TimeWarpSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnLocation;
    region lv_spawnRegion;
    int lv_safetyInt;
    fixed lv_waitTime;

    // Automatic Variable Declarations
    const int auto6A3D2BEF_ae = 100;
    const int auto6A3D2BEF_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waitTime = libCOMI_gf_MinimumDifficultyValueCoopReal(8.0, 6.0, 4.0, 3.0, 0.1, 0.1);
    lv_spawnRegion = RegionPlayableMap();
    while ((libCOMI_gf_GameIsOver() == false)) {
        Wait(lv_waitTime, c_timeGame);
        lv_safetyInt = 1;
        for ( ; ( (auto6A3D2BEF_ai >= 0 && lv_safetyInt <= auto6A3D2BEF_ae) || (auto6A3D2BEF_ai < 0 && lv_safetyInt >= auto6A3D2BEF_ae) ) ; lv_safetyInt += auto6A3D2BEF_ai ) {
            lv_spawnLocation = RegionRandomPoint(lv_spawnRegion);
            if (((PathingType(lv_spawnLocation) != c_pathingGround) || (RegionContainsPoint(libCPCM_gf_CT_MutatorSafetyZone(), lv_spawnLocation) == true) || (UnitCountAlliance(3, c_unitAllianceEnemy, RegionCircle(lv_spawnLocation, 50.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0))) {
                continue;
            }
            else {
                PlayerCreateEffectPoint(3, "MutatorTimeWarpInitialCP", lv_spawnLocation);
                break;
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_TimeWarpSpawn_Init () {
    libCPCM_gt_CT_TimeWarpSpawn = TriggerCreate("libCPCM_gt_CT_TimeWarpSpawn_Func");
    TriggerEnable(libCPCM_gt_CT_TimeWarpSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_NukeSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_NukeSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnLocation;
    region lv_spawnRegion;
    int lv_safetyInt;
    fixed lv_waitTime;

    // Automatic Variable Declarations
    const int auto4CD79FD4_ae = 100;
    const int auto4CD79FD4_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waitTime = libCOMI_gf_MinimumDifficultyValueCoopReal(7.0, 5.0, 3.0, 2.0, 0.1, 0.1);
    lv_spawnRegion = RegionPlayableMap();
    while ((libCOMI_gf_GameIsOver() == false)) {
        Wait(lv_waitTime, c_timeGame);
        lv_safetyInt = 1;
        for ( ; ( (auto4CD79FD4_ai >= 0 && lv_safetyInt <= auto4CD79FD4_ae) || (auto4CD79FD4_ai < 0 && lv_safetyInt >= auto4CD79FD4_ae) ) ; lv_safetyInt += auto4CD79FD4_ai ) {
            lv_spawnLocation = RegionRandomPoint(lv_spawnRegion);
            if (((PathingType(lv_spawnLocation) != c_pathingGround) || (RegionContainsPoint(libCPCM_gf_CT_MutatorSafetyZone(), lv_spawnLocation) == true) || ((UnitCount(null, 1, RegionCircle(lv_spawnLocation, 50.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount(null, 2, RegionCircle(lv_spawnLocation, 50.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0)))) {
                continue;
            }
            else {
                PlayerCreateEffectPoint(3, "MutatorNukePersistent", lv_spawnLocation);
                break;
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_NukeSpawn_Init () {
    libCPCM_gt_CT_NukeSpawn = TriggerCreate("libCPCM_gt_CT_NukeSpawn_Func");
    TriggerEnable(libCPCM_gt_CT_NukeSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_BlizzardSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_BlizzardSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnLocation;
    point lv_destinationLocation;
    region lv_spawnRegion;
    int lv_safetyInt;
    fixed lv_waitTime;
    fixed lv_drift;
    fixed lv_mapSizeModifier;
    fixed lv_moveDirection;
    fixed lv_xIntercept;
    fixed lv_yIntercept;
    fixed lv_spawnSpan;
    fixed lv_spawnDistance;
    point lv_midPoint;
    fixed lv_rightTriangleAngle;

    // Automatic Variable Declarations
    string auto6DECDAF1_val;
    const int auto9AB008DB_ae = 100;
    const int auto9AB008DB_ai = 1;

    // Variable Initialization
    lv_moveDirection = 90.0;

    // Actions
    if (!runActions) {
        return true;
    }

    auto6DECDAF1_val = libCOOC_gf_CC_CurrentMap();
    if (auto6DECDAF1_val == "AC_CharThrasher") {
        lv_moveDirection = 320.0;
    }
    else if (auto6DECDAF1_val == "AC_CybrosEscort") {
        lv_moveDirection = 320.0;
    }
    else if (auto6DECDAF1_val == "AC_JarbanPointCapture") {
        lv_moveDirection = 320.0;
    }
    else {
        lv_moveDirection = 0.0;
    }
    lv_mapSizeModifier = (500.0 - libNtve_gf_HeightOfRegion(RegionPlayableMap()));
    lv_waitTime = ((libCOMI_gf_MinimumDifficultyValueCoopReal(4.0, 3.0, 2.0, 1.5, 0.1, 0.1) * lv_mapSizeModifier) / 100.0);
    lv_spawnRegion = RegionPlayableMap();
    while ((libCOMI_gf_GameIsOver() == false)) {
        Wait(lv_waitTime, c_timeGame);
        lv_safetyInt = 1;
        for ( ; ( (auto9AB008DB_ai >= 0 && lv_safetyInt <= auto9AB008DB_ae) || (auto9AB008DB_ai < 0 && lv_safetyInt >= auto9AB008DB_ae) ) ; lv_safetyInt += auto9AB008DB_ai ) {
            if ((lv_moveDirection == 0.0)) {
                lv_spawnLocation = Point(0.0, RandomFixed(0.0, (libNtve_gf_HeightOfRegion(RegionPlayableMap()) + lv_drift)));
                lv_destinationLocation = Point(libNtve_gf_WidthOfRegion(RegionEntireMap()), (PointGetY(lv_spawnLocation) - lv_drift));
            }
            else if (true) {
                lv_spawnSpan = (libNtve_gf_HeightOfRegion(RegionPlayableMap()) + libNtve_gf_WidthOfRegion(RegionPlayableMap()));
                lv_spawnDistance = RandomFixed(0.0, lv_spawnSpan);
                lv_rightTriangleAngle = libCPCM_gf_CT_MathNumberWrap(lv_moveDirection, 0.0, 90.0);
                if ((lv_spawnDistance > libNtve_gf_HeightOfRegion(RegionPlayableMap()))) {
                    lv_spawnLocation = Point((lv_spawnDistance - libNtve_gf_HeightOfRegion(RegionPlayableMap())), libNtve_gf_HeightOfRegion(RegionPlayableMap()));
                    lv_destinationLocation = PointWithOffsetPolar(lv_spawnLocation, ((libNtve_gf_WidthOfRegion(RegionEntireMap()) - PointGetX(lv_spawnLocation)) / Cos(lv_rightTriangleAngle)), lv_moveDirection);
                }
                else {
                    lv_spawnLocation = Point(0.0, lv_spawnDistance);
                    lv_destinationLocation = PointWithOffsetPolar(lv_spawnLocation, (PointGetY(lv_spawnLocation) / Cos(lv_rightTriangleAngle)), lv_moveDirection);
                }
            }
            if ((((UnitGroupCount(libCPCM_gv_cT_RecentBlizzards, c_unitCountAlive) > 0) && (DistanceBetweenPoints(UnitGetPosition(UnitGroupClosestToPoint(libCPCM_gv_cT_RecentBlizzards, lv_spawnLocation)), lv_spawnLocation) < libCPCM_gv_cT_BlizzardSpacingTolerance)))) {
                continue;
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorStormCloud", c_unitCreateIgnorePlacement, 3, lv_spawnLocation);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_destinationLocation), c_orderQueueReplace);
                UnitGroupAdd(libCPCM_gv_cT_RecentBlizzards, UnitLastCreated());
                libCPCM_gf_CT_DestroyBlizzard(UnitLastCreated());
                break;
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_BlizzardSpawn_Init () {
    libCPCM_gt_CT_BlizzardSpawn = TriggerCreate("libCPCM_gt_CT_BlizzardSpawn_Func");
    TriggerEnable(libCPCM_gt_CT_BlizzardSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_LavaBurstSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_LavaBurstSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnLocation;
    region lv_spawnRegion;
    int lv_safetyInt;
    fixed lv_waitTime;

    // Automatic Variable Declarations
    const int auto75A0CBDD_ae = 100;
    const int auto75A0CBDD_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waitTime = libCOMI_gf_MinimumDifficultyValueCoopReal(4.0, 2.0, 0.5, 0.5, 0.1, 0.1);
    lv_spawnRegion = RegionPlayableMap();
    while ((libCOMI_gf_GameIsOver() == false)) {
        Wait(lv_waitTime, c_timeGame);
        lv_safetyInt = 1;
        for ( ; ( (auto75A0CBDD_ai >= 0 && lv_safetyInt <= auto75A0CBDD_ae) || (auto75A0CBDD_ai < 0 && lv_safetyInt >= auto75A0CBDD_ae) ) ; lv_safetyInt += auto75A0CBDD_ai ) {
            lv_spawnLocation = RegionRandomPoint(lv_spawnRegion);
            if (((PathingType(lv_spawnLocation) != c_pathingGround) || (libCOOC_gf_CC_SpawnAllowedAtPoint(lv_spawnLocation) == false) || (RegionContainsPoint(libCPCM_gf_CT_MutatorSafetyZone(), lv_spawnLocation) == true) || (UnitCountAlliance(3, c_unitAllianceEnemy, RegionCircle(lv_spawnLocation, 1.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0) || (UnitCountAlliance(3, c_unitAllianceEnemy, RegionCircle(lv_spawnLocation, 35.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0))) {
                continue;
            }
            else {
                PlayerCreateEffectPoint(3, "LavaBurstInitialCP", lv_spawnLocation);
                break;
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_LavaBurstSpawn_Init () {
    libCPCM_gt_CT_LavaBurstSpawn = TriggerCreate("libCPCM_gt_CT_LavaBurstSpawn_Func");
    TriggerEnable(libCPCM_gt_CT_LavaBurstSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_TemporalFieldSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_TemporalFieldSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnLocation;
    region lv_spawnRegion;
    int lv_safetyCount;
    fixed lv_waitTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawnRegion = RegionPlayableMap();
    lv_waitTime = libCOMI_gf_MinimumDifficultyValueCoopReal(8.0, 6.0, 4.0, 3.0, 0.1, 0.1);
    while ((libCOMI_gf_GameIsOver() == false)) {
        Wait(lv_waitTime, c_timeGame);
        while (true) {
            lv_spawnLocation = RegionRandomPoint(lv_spawnRegion);
            if (((PathingType(lv_spawnLocation) != c_pathingGround) || (libCOOC_gf_CC_SpawnAllowedAtPoint(lv_spawnLocation) == false) || (RegionContainsPoint(libCPCM_gf_CT_MutatorSafetyZone(), lv_spawnLocation) == true))) {
                continue;
            }
            else {
                PlayerCreateEffectPoint(3, "MutatorGravitonBombInitialCP", lv_spawnLocation);
                break;
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_TemporalFieldSpawn_Init () {
    libCPCM_gt_CT_TemporalFieldSpawn = TriggerCreate("libCPCM_gt_CT_TemporalFieldSpawn_Func");
    TriggerEnable(libCPCM_gt_CT_TemporalFieldSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_EvilSoACast
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_EvilSoACast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;
    unitgroup lv_playerUnits;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        lv_playerUnits = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", 1, c_unitAllianceAlly, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_targetUnit = UnitGroupRandomUnit(lv_playerUnits, c_unitCountAlive);
        if ((lv_targetUnit == null)) {
            continue;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_EvilSoACast_Init () {
    libCPCM_gt_CT_EvilSoACast = TriggerCreate("libCPCM_gt_CT_EvilSoACast_Func");
    TriggerEnable(libCPCM_gt_CT_EvilSoACast, false);
    TriggerAddEventTimePeriodic(libCPCM_gt_CT_EvilSoACast, 115.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_EntombApply
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_EntombApply_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    timer[3] lv_entombTimer;
    int lv_indexPlayer;
    unit lv_indexUnit;
    int[3] lv_entombChance;
    unit lv_mineralNode;
    unitgroup lv_mineralGroup;
    unitgroup lv_townHallGroup;

    // Automatic Variable Declarations
    unitgroup auto93D94DE9_g;
    int auto93D94DE9_u;
    playergroup autoE0C75178_g;
    unitgroup auto99FF92B8_g;
    int auto99FF92B8_u;

    // Variable Initialization
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_entombTimer[init_i] = TimerCreate();
    }
    lv_mineralGroup = UnitGroupEmpty();
    lv_townHallGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_entombChance[1] = 10;
    lv_entombChance[2] = 10;
    auto93D94DE9_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto93D94DE9_u = UnitGroupCount(auto93D94DE9_g, c_unitCountAll);
    for (;; auto93D94DE9_u -= 1) {
        lv_mineralNode = UnitGroupUnitFromEnd(auto93D94DE9_g, auto93D94DE9_u);
        if (lv_mineralNode == null) { break; }
        if ((CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_mineralNode), "ResourceType", c_playerAny) == "Minerals")) {
            UnitGroupAdd(lv_mineralGroup, lv_mineralNode);
        }

    }
    while (true) {
        Wait(1.0, c_timeGame);
        autoE0C75178_g = libCOOC_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoE0C75178_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            if ((GameGetMissionTime() >= libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 300.0, 240.0, 200.0, 160.0, 0.0, 0.0)) && (TimerGetRemaining(lv_entombTimer[lv_indexPlayer]) <= 0.0) && (libCOMI_gf_GameIsOver() == false)) {
                if ((libCPCM_gf_MutatorIsEnabled("CycleRandom") == true)) {
                    lv_entombChance[lv_indexPlayer] = 100;
                }
                else {
                    lv_entombChance[lv_indexPlayer] += 5;
                }
                TimerStart(lv_entombTimer[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 240.0, 180.0, 150.0, 120.0, 0.0, 0.0), false, c_timeGame);
                lv_townHallGroup = libCOOC_gf_CC_TownHallsForPlayer(lv_indexPlayer);
                if ((UnitGroupCount(libCOOC_gf_CC_TownHallsForPlayer(lv_indexPlayer), c_unitCountAlive) >= 1)) {
                    auto99FF92B8_g = lv_mineralGroup;
                    auto99FF92B8_u = UnitGroupCount(auto99FF92B8_g, c_unitCountAll);
                    for (;; auto99FF92B8_u -= 1) {
                        lv_mineralNode = UnitGroupUnitFromEnd(auto99FF92B8_g, auto99FF92B8_u);
                        if (lv_mineralNode == null) { break; }
                        if ((UnitIsValid(lv_mineralNode) == false)) {
                            UnitGroupRemove(lv_mineralGroup, lv_mineralNode);
                            continue;
                        }

                        if ((DistanceBetweenPoints(UnitGetPosition(lv_mineralNode), UnitGetPosition(UnitGroupClosestToPoint(lv_townHallGroup, UnitGetPosition(lv_mineralNode)))) <= 15.0)) {
                            if ((RandomInt(1, 100) <= lv_entombChance[lv_indexPlayer])) {
                                if ((libCPCM_gf_MutatorIsEnabled("CycleRandom") == true)) {
                                    lv_entombChance[lv_indexPlayer] -= libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 50, 30, 10, 0, 0, 0);
                                }

                                UnitBehaviorAddPlayer(lv_mineralNode, "ResourceStun", 3, 1);
                                libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(lv_mineralNode), 2.0, Color(100.00, 0.00, 0.00));
                            }

                        }

                    }
                }

            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_EntombApply_Init () {
    libCPCM_gt_CT_EntombApply = TriggerCreate("libCPCM_gt_CT_EntombApply_Func");
    TriggerEnable(libCPCM_gt_CT_EntombApply, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_WorkerSleep
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_WorkerSleep_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    timer[3] lv_sleepTimer;
    int lv_indexPlayer;
    unit lv_sleepyWorker;
    unitgroup lv_workerGroup;
    unit lv_indexWorker;

    // Automatic Variable Declarations
    playergroup auto0F3DC934_g;
    playergroup auto7E958980_g;
    unitgroup autoC00D642F_g;
    int autoC00D642F_u;

    // Variable Initialization
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_sleepTimer[init_i] = TimerCreate();
    }
    lv_workerGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto0F3DC934_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto0F3DC934_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        TimerStart(lv_sleepTimer[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 60.0, 45.0, 30.0, 20.0, 0.0, 0.0), false, c_timeGame);
    }
    while (true) {
        Wait(1.0, c_timeGame);
        auto7E958980_g = libCOOC_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto7E958980_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            if ((TimerGetRemaining(lv_sleepTimer[lv_indexPlayer]) <= 0.0)) {
                TimerStart(lv_sleepTimer[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 60.0, 45.0, 30.0, 20.0, 0.0, 0.0), false, c_timeGame);
                lv_workerGroup = UnitGroup(null, lv_indexPlayer, RegionEntireMap(), UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                autoC00D642F_g = lv_workerGroup;
                autoC00D642F_u = UnitGroupCount(autoC00D642F_g, c_unitCountAll);
                for (;; autoC00D642F_u -= 1) {
                    lv_indexWorker = UnitGroupUnitFromEnd(autoC00D642F_g, autoC00D642F_u);
                    if (lv_indexWorker == null) { break; }
                    if (((UnitHasBehavior2(lv_indexWorker, "MutatorWorkerSleep") == true) || (UnitGetType(lv_indexWorker) == "MULE"))) {
                        UnitGroupRemove(lv_workerGroup, lv_indexWorker);
                    }

                }
                lv_sleepyWorker = UnitGroupRandomUnit(lv_workerGroup, c_unitCountAlive);
                UnitBehaviorAdd(lv_sleepyWorker, "MutatorWorkerSleep", lv_sleepyWorker, 1);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_WorkerSleep_Init () {
    libCPCM_gt_CT_WorkerSleep = TriggerCreate("libCPCM_gt_CT_WorkerSleep_Func");
    TriggerEnable(libCPCM_gt_CT_WorkerSleep, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_VoidRiftSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_VoidRiftSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(140.0, c_timeAI);
    while (true) {
        if ((GameGetMissionTime() >= 480.0)) {
            libCPCM_gf_CT_VoidRiftCreate(1);
            libCPCM_gf_CT_VoidRiftCreate(2);
        }

        libCPCM_gf_CT_VoidRiftCreate(1);
        libCPCM_gf_CT_VoidRiftCreate(2);
        Wait(libCOMI_gf_MinimumDifficultyValueCoopReal(180.0, 150.0, 110.0, 90.0, 80.0, 80.0), c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_VoidRiftSpawn_Init () {
    libCPCM_gt_CT_VoidRiftSpawn = TriggerCreate("libCPCM_gt_CT_VoidRiftSpawn_Func");
    TriggerEnable(libCPCM_gt_CT_VoidRiftSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_VoidRiftMakeUnits
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_VoidRiftMakeUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_rift;
    timer lv_riftTimer;
    timer lv_riftTrickleTimer;
    unitgroup lv_riftSpawnUnits;
    unit lv_riftSpawnedUnit;
    int lv_spawnAttempts;
    point lv_spawnLocation;
    fixed lv_tricklePeriod;
    int lv_trickleOption;
    bool lv_customMode;

    // Automatic Variable Declarations
    unitgroup auto3806F24D_g;
    int auto3806F24D_u;
    int autoEAC0A223_val;

    // Variable Initialization
    lv_riftTimer = TimerCreate();
    lv_riftTrickleTimer = TimerCreate();
    lv_riftSpawnUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_customMode = libCPCM_gf_IsCustomMutators();
    while (true) {
        Wait(1.0, c_timeAI);
        auto3806F24D_g = libCPCM_gv_cT_VoidRifts;
        auto3806F24D_u = UnitGroupCount(auto3806F24D_g, c_unitCountAll);
        for (;; auto3806F24D_u -= 1) {
            lv_rift = UnitGroupUnitFromEnd(auto3806F24D_g, auto3806F24D_u);
            if (lv_rift == null) { break; }
            if ((lv_customMode == true)) {
                lv_tricklePeriod = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(UnitGetOwner(lv_rift)), 42.0, 36.0, 30.0, 24.0, 24.0, 24.0);
            }
            else {
                lv_tricklePeriod = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(UnitGetOwner(lv_rift)), 21.0, 18.0, 15.0, 12.0, 12.0, 12.0);
            }
            lv_riftTimer = DataTableGetTimer(true, ("RiftTimer" + IntToString(FixedToInt(UnitGetCustomValue(lv_rift, 0)))));
            lv_riftTrickleTimer = DataTableGetTimer(true, ("RiftTrickleTimer" + IntToString(FixedToInt(UnitGetCustomValue(lv_rift, 0)))));
            if ((UnitIsAlive(lv_rift) == false)) {
                libNtve_gf_StopTimer(lv_riftTimer);
                libNtve_gf_StopTimer(lv_riftTrickleTimer);
                DataTableSetTimer(true, ("RiftTimer" + IntToString(FixedToInt(UnitGetCustomValue(lv_rift, 0)))), null);
                DataTableSetTimer(true, ("RiftTrickleTimer" + IntToString(FixedToInt(UnitGetCustomValue(lv_rift, 0)))), null);
                UnitGroupRemove(libCPCM_gv_cT_VoidRifts, lv_rift);
                continue;
            }

            if ((TimerGetRemaining(lv_riftTimer) <= 0.0)) {
                libCPCM_gf_CT_VoidRiftSpawnUnitsPlain(UnitGetOwner(lv_rift), UnitGetPosition(lv_rift));
                libCPCM_gf_CT_VoidRiftBirthUnits(lv_rift, libCPCM_gf_CT_VoidRiftLastSpawnedUnits());
                TimerStart(lv_riftTimer, libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(UnitGetOwner(lv_rift)), 150.0, 130.0, 110.0, 90.0, 90.0, 90.0), false, c_timeAI);
            }
            else {
                if ((TimerGetRemaining(lv_riftTrickleTimer) <= 0.0)) {
                    lv_trickleOption = RandomInt(1, 3);
                    autoEAC0A223_val = lv_trickleOption;
                    if (autoEAC0A223_val == 1) {
                        if ((lv_customMode == true)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", c_unitCreateIgnorePlacement, UnitGetOwner(lv_rift), UnitGetPosition(lv_rift));
                        }
                        else {
                            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", c_unitCreateIgnorePlacement, UnitGetOwner(lv_rift), UnitGetPosition(lv_rift));
                        }
                    }
                    else if (autoEAC0A223_val == 2) {
                        if ((lv_customMode == true)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marauder", c_unitCreateIgnorePlacement, UnitGetOwner(lv_rift), UnitGetPosition(lv_rift));
                        }
                        else {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", c_unitCreateIgnorePlacement, UnitGetOwner(lv_rift), UnitGetPosition(lv_rift));
                        }
                    }
                    else if (autoEAC0A223_val == 3) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", c_unitCreateIgnorePlacement, UnitGetOwner(lv_rift), UnitGetPosition(lv_rift));
                    }
                    else {
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", c_unitCreateIgnorePlacement, UnitGetOwner(lv_rift), UnitGetPosition(lv_rift));
                    }
                    libCPCM_gf_CT_RegisterSpawnedUnitGroup(UnitLastCreatedGroup());
                    libCPCM_gf_CT_VoidRiftBirthUnits(lv_rift, UnitLastCreatedGroup());
                    if ((lv_trickleOption == 3) && (lv_customMode == false)) {
                        TimerStart(lv_riftTrickleTimer, (lv_tricklePeriod * 2.0), false, c_timeAI);
                    }
                    else {
                        TimerStart(lv_riftTrickleTimer, lv_tricklePeriod, false, c_timeAI);
                    }
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_VoidRiftMakeUnits_Init () {
    libCPCM_gt_CT_VoidRiftMakeUnits = TriggerCreate("libCPCM_gt_CT_VoidRiftMakeUnits_Func");
    TriggerEnable(libCPCM_gt_CT_VoidRiftMakeUnits, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_VoidRiftUnitMade
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_VoidRiftUnitMade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), true);
    UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitTarget), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    AISetUnitSuicide(EventPlayerEffectUsedUnit(c_effectUnitTarget), true);
    AISetUnitScriptControlled(EventPlayerEffectUsedUnit(c_effectUnitTarget), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_VoidRiftUnitMade_Init () {
    libCPCM_gt_CT_VoidRiftUnitMade = TriggerCreate("libCPCM_gt_CT_VoidRiftUnitMade_Func");
    TriggerEnable(libCPCM_gt_CT_VoidRiftUnitMade, false);
    TriggerAddEventPlayerEffectUsed(libCPCM_gt_CT_VoidRiftUnitMade, 3, "MutatorVoidRiftSpawnLMImpactDummy");
    TriggerAddEventPlayerEffectUsed(libCPCM_gt_CT_VoidRiftUnitMade, 4, "MutatorVoidRiftSpawnLMImpactDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_TornadoMovement
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_TornadoMovement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexTornado;
    point lv_targetLocation;
    int lv_searchAttempts;
    unitgroup lv_nearbyTornadoes;

    // Automatic Variable Declarations
    unitgroup auto150B8A52_g;
    int auto150B8A52_u;
    const int autoF1CEBF88_ae = 10;
    const int autoF1CEBF88_ai = 1;

    // Variable Initialization
    lv_nearbyTornadoes = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        auto150B8A52_g = libCPCM_gv_cT_Tornadoes;
        auto150B8A52_u = UnitGroupCount(auto150B8A52_g, c_unitCountAll);
        for (;; auto150B8A52_u -= 1) {
            lv_indexTornado = UnitGroupUnitFromEnd(auto150B8A52_g, auto150B8A52_u);
            if (lv_indexTornado == null) { break; }
            lv_searchAttempts = 1;
            for ( ; ( (autoF1CEBF88_ai >= 0 && lv_searchAttempts <= autoF1CEBF88_ae) || (autoF1CEBF88_ai < 0 && lv_searchAttempts >= autoF1CEBF88_ae) ) ; lv_searchAttempts += autoF1CEBF88_ai ) {
                lv_nearbyTornadoes = UnitGroup("MutatorTornado", c_playerAny, RegionCircle(UnitGetPosition(lv_indexTornado), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                UnitGroupRemove(lv_nearbyTornadoes, lv_indexTornado);
                if ((UnitGroupCount(lv_nearbyTornadoes, c_unitCountAlive) > 0)) {
                    lv_targetLocation = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(UnitGroupUnit(lv_nearbyTornadoes, 1)), (DistanceBetweenPoints(UnitGetPosition(UnitGroupUnit(lv_nearbyTornadoes, 1)), UnitGetPosition(lv_indexTornado)) + 10.0), UnitGetPosition(lv_indexTornado));
                }
                else {
                    lv_targetLocation = PointWithOffsetPolar(UnitGetPosition(lv_indexTornado), 10.0, libNtve_gf_RandomAngle());
                }
                if ((RegionContainsPoint(libCPCM_gf_CT_MutatorSafetyZone(), lv_targetLocation) == false)) {
                    break;
                }
                else {
                    lv_targetLocation = null;
                }
            }
            if ((lv_targetLocation != null)) {
                UnitIssueOrder(lv_indexTornado, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetLocation), c_orderQueueReplace);
            }

        }
        Wait(RandomFixed(4.0, 6.0), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_TornadoMovement_Init () {
    libCPCM_gt_CT_TornadoMovement = TriggerCreate("libCPCM_gt_CT_TornadoMovement_Func");
    TriggerEnable(libCPCM_gt_CT_TornadoMovement, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_OrbitalStrikes
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_OrbitalStrikes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_targetCandidates;
    unit lv_candidate;
    int lv_strikesPerTarget;
    int lv_strikeIndex;
    int lv_totalTargets;
    int lv_unitIndex;
    int lv_divisor;
    fixed lv_firingBreak;

    // Automatic Variable Declarations
    unitgroup auto76D96D0E_g;
    int auto76D96D0E_u;
    unitgroup auto5AD6B9CE_g;
    int auto5AD6B9CE_u;

    // Variable Initialization
    lv_targetCandidates = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(libCOMI_gf_MinimumDifficultyValueCoopReal(240.0, 240.0, 180.0, 1.0, 1.0, 1.0), c_timeAI);
    while (true) {
        lv_targetCandidates = UnitGroup(null, 1, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupAddUnitGroup(lv_targetCandidates, UnitGroup(null, 2, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        auto76D96D0E_g = lv_targetCandidates;
        auto76D96D0E_u = UnitGroupCount(auto76D96D0E_g, c_unitCountAll);
        for (;; auto76D96D0E_u -= 1) {
            lv_candidate = UnitGroupUnitFromEnd(auto76D96D0E_g, auto76D96D0E_u);
            if (lv_candidate == null) { break; }
            if ((RegionContainsPoint(libCPCM_gf_CT_MutatorSafetyZone(), UnitGetPosition(lv_candidate)) == true) && (true)) {
                UnitGroupRemove(lv_targetCandidates, lv_candidate);
            }

        }
        if ((UnitGroupCount(lv_targetCandidates, c_unitCountAlive) < 5)) {
            Wait(5.0, c_timeAI);
            continue;
        }

        if ((GameGetMissionTime() <= 300.0)) {
            lv_totalTargets = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 1, 2, 2, 2);
            lv_totalTargets = 10;
        }
        else if ((GameGetMissionTime() <= 500.0)) {
            lv_totalTargets = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 2, 3, 3, 3, 3);
        }
        else if ((GameGetMissionTime() <= 700.0)) {
            lv_totalTargets = libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 3, 4, 4, 4, 4);
        }
        else if ((GameGetMissionTime() <= 1000.0)) {
            lv_totalTargets = libCOMI_gf_MinimumDifficultyValueCoopInteger(3, 4, 6, 8, 8, 8);
        }
        else if (true) {
            lv_totalTargets = libCOMI_gf_MinimumDifficultyValueCoopInteger(3, 5, 8, 10, 10, 10);
        }
        SoundPlayForPlayer(SoundLink("MutatorSoAPowerWarning", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libCPCM_gf_CT_OrbitalStrikeLaunch(lv_targetCandidates, lv_totalTargets, 3, 7.5, 0.12);
        lv_firingBreak = libCOMI_gf_MinimumDifficultyValueCoopReal(2.5, 3.0, 3.5, 4.0, 4.0, 4.0);
        Wait(lv_firingBreak, c_timeGame);
        auto5AD6B9CE_g = lv_targetCandidates;
        auto5AD6B9CE_u = UnitGroupCount(auto5AD6B9CE_g, c_unitCountAll);
        for (;; auto5AD6B9CE_u -= 1) {
            lv_candidate = UnitGroupUnitFromEnd(auto5AD6B9CE_g, auto5AD6B9CE_u);
            if (lv_candidate == null) { break; }
            if ((RegionContainsPoint(libCPCM_gf_CT_MutatorSafetyZone(), UnitGetPosition(lv_candidate)) == true) && (true)) {
                UnitGroupRemove(lv_targetCandidates, lv_candidate);
            }

        }
        libCPCM_gf_CT_OrbitalStrikeLaunch(lv_targetCandidates, lv_totalTargets, 3, (7.5-lv_firingBreak), 0.08);
        Wait(libCOMI_gf_MinimumDifficultyValueCoopReal(180.0, 140.0, 110.0, 80.0, 80.0, 80.0), c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_OrbitalStrikes_Init () {
    libCPCM_gt_CT_OrbitalStrikes = TriggerCreate("libCPCM_gt_CT_OrbitalStrikes_Func");
    TriggerEnable(libCPCM_gt_CT_OrbitalStrikes, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_PurifierBeamController
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_PurifierBeamController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_purifierBeam;
    point lv_targetLocation;
    int lv_searchAttempts;
    unitgroup lv_targetCandidates;
    unit lv_currentTarget;
    int lv_beamPing;

    // Automatic Variable Declarations
    const int autoC4944A09_ae = 100;
    const int autoC4944A09_ai = 1;

    // Variable Initialization
    lv_targetCandidates = UnitGroupEmpty();
    lv_beamPing = c_invalidPingId;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if (((lv_purifierBeam == null) || (UnitIsValid(lv_purifierBeam) == false))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorPurifierBeam", 0, 3, PlayerStartLocation(RandomInt(3, 4)));
            lv_purifierBeam = UnitLastCreated();
            if ((lv_beamPing == c_invalidPingId)) {
                libCOMI_gf_CreatePingFacingAngleCoop(libCOOC_gf_HumanPlayers(), UnitGetPosition(UnitLastCreated()), 270.0, "PingBoss", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
                lv_beamPing = PingLastCreated();
                libHots_gf_StorePingForUnit(lv_purifierBeam, 1, lv_beamPing);
                PingSetScale(lv_beamPing, 0.45);
            }

            PingSetUnit(lv_beamPing, lv_purifierBeam);
            PingSetTooltip(lv_beamPing, StringExternal("Param/Value/lib_CPCM_3F1929CC"));
            Wait(1.0, c_timeAI);
            continue;
        }

        if ((lv_currentTarget != null)) {
            UnitGroupRemove(libCPCM_gv_cT_PurifierBeamTargets, lv_currentTarget);
        }

        lv_currentTarget = null;
        lv_targetCandidates = UnitGroupAlliance(1, c_unitAllianceAlly, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        UnitGroupRemoveUnitGroup(lv_targetCandidates, libCPCM_gv_cT_PurifierBeamTargets);
        while ((libCPCM_gf_CT_PurifierBeamTargetValid(lv_purifierBeam, lv_currentTarget) == false)) {
            if ((lv_currentTarget != null)) {
                UnitGroupRemove(lv_targetCandidates, lv_currentTarget);
                lv_currentTarget = null;
            }

            if (((lv_purifierBeam == null) || (UnitGroupCount(lv_targetCandidates, c_unitCountAlive) <= 0))) {
                break;
            }

            lv_currentTarget = UnitGroupClosestToPoint(lv_targetCandidates, UnitGetPosition(lv_purifierBeam));
        }
        if ((lv_currentTarget != null)) {
            UnitIssueOrder(lv_purifierBeam, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_currentTarget)), c_orderQueueReplace);
            UnitGroupAdd(libCPCM_gv_cT_PurifierBeamTargets, lv_currentTarget);
        }
        else {
            if ((DistanceBetweenPoints(UnitGetPosition(lv_purifierBeam), PlayerStartLocation(1)) > 80.0)) {
                lv_targetLocation = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_purifierBeam), 10.0, PlayerStartLocation(1));
            }
            else {
                lv_targetLocation = PointWithOffsetPolar(UnitGetPosition(lv_purifierBeam), 10.0, libNtve_gf_RandomAngle());
            }
            lv_searchAttempts = 1;
            for ( ; ( (autoC4944A09_ai >= 0 && lv_searchAttempts <= autoC4944A09_ae) || (autoC4944A09_ai < 0 && lv_searchAttempts >= autoC4944A09_ae) ) ; lv_searchAttempts += autoC4944A09_ai ) {
                if ((RegionContainsPoint(libCPCM_gf_CT_MutatorSafetyZone(), lv_targetLocation) == false)) {
                    UnitIssueOrder(lv_purifierBeam, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetLocation), c_orderQueueReplace);
                    break;
                }
                else {
                    lv_targetLocation = PointWithOffsetPolar(UnitGetPosition(lv_purifierBeam), 10.0, libNtve_gf_RandomAngle());
                }
            }
        }
        Wait(RandomFixed(4.0, 6.0), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_PurifierBeamController_Init () {
    libCPCM_gt_CT_PurifierBeamController = TriggerCreate("libCPCM_gt_CT_PurifierBeamController_Func");
    TriggerEnable(libCPCM_gt_CT_PurifierBeamController, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_CycleRandomMutators
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_CycleRandomMutators_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_cycleIndex;
    string lv_newMutator;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libCPCM_gv_cT_RandomCycleTimer, 270.0, false, c_timeGame);
    libNtve_gf_WaitForTimer(libCPCM_gv_cT_RandomCycleTimer, 0.0, false);
    while (true) {
        lv_newMutator = libCPCM_gf_CT_RandomUnusedCycleMutator();
        libCPCM_gf_EnableDisableMutator(false, libCPCM_gv_cT_RandomMutators[3]);
        libCOUI_gf_CU_MutatorListHideItem(4);
        SoundPlayForPlayer(SoundLink("MutatorRemoval", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(11.5, c_timeGame);
        SoundPlayForPlayer(SoundLink("ChaosStudio", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(3.25, c_timeGame);
        libCPCM_gv_cT_RandomMutators[3] = libCPCM_gv_cT_RandomMutators[2];
        libCPCM_gv_cT_RandomMutators[2] = libCPCM_gv_cT_RandomMutators[1];
        libCPCM_gv_cT_RandomMutators[1] = lv_newMutator;
        libCPCM_gf_EnableDisableMutator(true, lv_newMutator);
        libCOUI_gf_CU_MutatorListSetItem(4, libCPCM_gv_cT_RandomMutators[3]);
        libCOUI_gf_CU_MutatorListSetItem(3, libCPCM_gv_cT_RandomMutators[2]);
        libCOUI_gf_CU_MutatorListSetItem(2, libCPCM_gv_cT_RandomMutators[1]);
        TextExpressionSetToken("Param/Expression/lib_CPCM_A846A897", "A", libCPCM_gf_GetMutatorDataName(lv_newMutator));
        libCOUI_gf_CU_MutatorListShowNotification(TextExpressionAssemble("Param/Expression/lib_CPCM_A846A897"));
        TriggerExecute(libCPCM_gf_GetMutatorTriggerInitialization(lv_newMutator), true, false);
        TimerStart(libCPCM_gv_cT_RandomCycleTimer, 90.0, false, c_timeGame);
        libNtve_gf_WaitForTimer(libCPCM_gv_cT_RandomCycleTimer, 0.0, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_CycleRandomMutators_Init () {
    libCPCM_gt_CT_CycleRandomMutators = TriggerCreate("libCPCM_gt_CT_CycleRandomMutators_Func");
    TriggerEnable(libCPCM_gt_CT_CycleRandomMutators, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ReanimatorSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ReanimatorSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawningStructure;
    int lv_spawnAttempt;
    timer lv_spawnTimer;
    unit lv_indexReanimator;

    // Automatic Variable Declarations
    unitgroup autoBB1C0688_g;
    int autoBB1C0688_u;
    const int autoF5C9D6CE_ae = 100;
    const int autoF5C9D6CE_ai = 1;

    // Variable Initialization
    lv_spawnTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_spawnTimer, 10.0, false, c_timeAI);
    while (true) {
        Wait(10.0, c_timeAI);
        if ((libCPCM_gv_cT_CorpseCount == 0)) {
            continue;
        }

        autoBB1C0688_g = libCPCM_gv_cT_Reanimators;
        autoBB1C0688_u = UnitGroupCount(autoBB1C0688_g, c_unitCountAll);
        for (;; autoBB1C0688_u -= 1) {
            lv_indexReanimator = UnitGroupUnitFromEnd(autoBB1C0688_g, autoBB1C0688_u);
            if (lv_indexReanimator == null) { break; }
            if ((UnitIsAlive(lv_indexReanimator) == false)) {
                UnitGroupRemove(libCPCM_gv_cT_Reanimators, lv_indexReanimator);
            }

        }
        if (((UnitGroupCount(libCPCM_gv_cT_Reanimators, c_unitCountAlive) >= libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 4, 4, 4)) || (TimerGetRemaining(lv_spawnTimer) > 0.0))) {
            continue;
        }

        lv_spawnAttempt = 1;
        for ( ; ( (autoF5C9D6CE_ai >= 0 && lv_spawnAttempt <= autoF5C9D6CE_ae) || (autoF5C9D6CE_ai < 0 && lv_spawnAttempt >= autoF5C9D6CE_ae) ) ; lv_spawnAttempt += autoF5C9D6CE_ai ) {
            lv_spawningStructure = UnitGroupRandomUnit(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", 1, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
            if ((PointPathingIsConnected(UnitGetPosition(lv_spawningStructure), PlayerStartLocation(1)) == true)) {
                break;
            }
            else {
                lv_spawningStructure = null;
            }
        }
        if ((lv_spawningStructure == null)) {
            continue;
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorVoidReanimator", 0, 3, UnitGetPosition(lv_spawningStructure));
        libCPCM_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "ProtossGenericWarpInOut", UnitLastCreated(), 1);
        Wait(2.0, c_timeAI);
        UnitBehaviorRemove(UnitLastCreated(), "ProtossGenericWarpInOut", 1);
        UnitGroupAdd(libCPCM_gv_cT_Reanimators, UnitLastCreated());
        TimerStart(lv_spawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(80.0, 70.0, 60.0, 55.0, 55.0, 55.0), false, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ReanimatorSpawn_Init () {
    libCPCM_gt_CT_ReanimatorSpawn = TriggerCreate("libCPCM_gt_CT_ReanimatorSpawn_Func");
    TriggerEnable(libCPCM_gt_CT_ReanimatorSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ReanimatorLogic
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ReanimatorLogic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_reanimator;
    int lv_targetCorpse;
    fixed lv_targetSupply;

    // Automatic Variable Declarations
    unitgroup autoE002FA49_g;
    int autoE002FA49_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeAI);
        autoE002FA49_g = libCPCM_gv_cT_Reanimators;
        autoE002FA49_u = UnitGroupCount(autoE002FA49_g, c_unitCountAll);
        for (;; autoE002FA49_u -= 1) {
            lv_reanimator = UnitGroupUnitFromEnd(autoE002FA49_g, autoE002FA49_u);
            if (lv_reanimator == null) { break; }
            if ((libCPCM_gf_CT_CorpseTargetOfReanimator(lv_reanimator) == 0)) {
                if ((libCPCM_gv_cT_CorpseCount == 0)) {
                    continue;
                }

                lv_targetCorpse = libCPCM_gf_CT_CorpseNearestToLocation(UnitGetPosition(lv_reanimator), 550.0);
                if ((lv_targetCorpse == 0)) {
                    continue;
                }

                libCPCM_gf_CT_CorpseSetAsTarget(lv_reanimator, lv_targetCorpse);
                lv_targetSupply = UnitTypeGetProperty(libCPCM_gf_CT_CorpseUnitType(lv_targetCorpse), c_unitPropSuppliesUsed);
                if ((lv_targetSupply >= 6.0)) {
                    UnitIssueOrder(lv_reanimator, OrderTargetingPoint(AbilityCommand("MutatorReanimateSlow", 0), libCPCM_gv_cT_CorpseLocations[lv_targetCorpse]), c_orderQueueReplace);
                }
                else if ((lv_targetSupply > 2.0)) {
                    UnitIssueOrder(lv_reanimator, OrderTargetingPoint(AbilityCommand("MutatorReanimateStandard", 0), libCPCM_gv_cT_CorpseLocations[lv_targetCorpse]), c_orderQueueReplace);
                }
                else if (true) {
                    UnitIssueOrder(lv_reanimator, OrderTargetingPoint(AbilityCommand("MutatorReanimateFast", 0), libCPCM_gv_cT_CorpseLocations[lv_targetCorpse]), c_orderQueueReplace);
                }
                Wait(RandomFixed(0.1, 0.5), c_timeGame);
            }
            else {
                if ((UnitOrderCount(lv_reanimator) == 0)) {
                    Wait(0.0625, c_timeGame);
                    if ((UnitOrderCount(lv_reanimator) == 0)) {
                        libCPCM_gf_CT_CorpseSetAsTarget(lv_reanimator, 0);
                    }

                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ReanimatorLogic_Init () {
    libCPCM_gt_CT_ReanimatorLogic = TriggerCreate("libCPCM_gt_CT_ReanimatorLogic_Func");
    TriggerEnable(libCPCM_gt_CT_ReanimatorLogic, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ReanimateUsed
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ReanimateUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_corpseIndex;
    string lv_reviveType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_corpseIndex = libCPCM_gf_CT_CorpseTargetOfReanimator(EventUnit());
    if ((lv_corpseIndex == 0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_CPCM_57F7C879"), true);
        return true;
    }

    lv_reviveType = libCPCM_gf_CT_CorpseUnitType(lv_corpseIndex);
    if ((lv_reviveType == null)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_CPCM_9A4C7B6C"), true);
        return true;
    }

    UnitCreate(1, lv_reviveType, 0, 3, libCPCM_gv_cT_CorpseLocations[lv_corpseIndex], libNtve_gf_RandomAngle());
    UnitCreateEffectUnit(UnitLastCreated(), "ReanimateCleanupTargetBehaviorsSet", UnitLastCreated());
    ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "Reanimator_Resurrect_Coop", null, null, null);
    UnitGroupAdd(libCPCM_gv_cT_OnDeathSpawns, UnitLastCreated());
    libCPCM_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
    if ((lv_reviveType == "MutatorVoidReanimator")) {
        UnitGroupAdd(libCPCM_gv_cT_Reanimators, UnitLastCreated());
    }
    else {
        AISetUnitSuicide(UnitLastCreated(), true);
    }
    libCPCM_gf_CT_CorpseSetAsTarget(EventUnit(), 0);
    libCPCM_gf_CT_CorpseRemove(lv_corpseIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ReanimateUsed_Init () {
    libCPCM_gt_CT_ReanimateUsed = TriggerCreate("libCPCM_gt_CT_ReanimateUsed_Func");
    TriggerEnable(libCPCM_gt_CT_ReanimateUsed, false);
    TriggerAddEventUnitAbility(libCPCM_gt_CT_ReanimateUsed, null, AbilityCommand("MutatorReanimateSlow", 0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(libCPCM_gt_CT_ReanimateUsed, null, AbilityCommand("MutatorReanimateStandard", 0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(libCPCM_gt_CT_ReanimateUsed, null, AbilityCommand("MutatorReanimateFast", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_SpeedFreaksMorphCleanup
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_SpeedFreaksMorphCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetPropertyFixed(EventUnit(), c_unitPropBaseMovementSpeed, c_unitPropNormal) == 0.0) || (UnitGetPropertyFixed(EventUnit(), c_unitPropBaseMovementSpeed, c_unitPropNormal) > 5.5))) {
        libCPCM_gf_CT_RemoveUnitSpeed(EventUnit());
    }
    else {
        libCPCM_gf_CT_ApplyUnitSpeed(EventUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_SpeedFreaksMorphCleanup_Init () {
    libCPCM_gt_CT_SpeedFreaksMorphCleanup = TriggerCreate("libCPCM_gt_CT_SpeedFreaksMorphCleanup_Func");
    TriggerEnable(libCPCM_gt_CT_SpeedFreaksMorphCleanup, false);
    TriggerAddEventUnitAbility(libCPCM_gt_CT_SpeedFreaksMorphCleanup, null, null, c_abilMorphStageStatsStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_AllCastersPeriodicCast
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_AllCastersPeriodicCast_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    timer[libCOOC_gv_cCC_MAXPLAYERS + 1] lv_periodicCastTimer;
    int[libCOOC_gv_cCC_MAXPLAYERS + 1] lv_energyRegenRate;
    int[libCOOC_gv_cCC_MAXPLAYERS + 1] lv_maxPlayerEnergy;
    int[libCOOC_gv_cCC_MAXPLAYERS + 1] lv_requiredPlayerEnergy;
    int lv_indexPlayer;
    int lv_randomAbility;
    int lv_randomAbilityInt;
    fixed lv_range;
    int lv_targetAttempts;
    unitgroup lv_potentialTargets;
    unitgroup lv_potentialCasters;
    unit lv_target;
    unit lv_caster;

    // Automatic Variable Declarations
    playergroup auto40D34EDB_g;
    playergroup auto1224EC4D_g;
    const int auto92148A64_ae = 10;
    const int auto92148A64_ai = 1;
    unitgroup auto2472949A_g;
    int auto2472949A_u;

    // Variable Initialization
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        lv_periodicCastTimer[init_i] = TimerCreate();
    }
    lv_potentialTargets = UnitGroupEmpty();
    lv_potentialCasters = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto40D34EDB_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto40D34EDB_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCPCM_gv_cT_AllCastersPlayerEnergy[lv_indexPlayer] = FixedToInt(GameGetMissionTime());
    }
    while (true) {
        Wait(1.0, c_timeGame);
        auto1224EC4D_g = libCOOC_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto1224EC4D_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            if ((GameGetMissionTime() <= 300.0)) {
                lv_maxPlayerEnergy[lv_indexPlayer] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 20, 40, 70, 90, 90, 90);
                lv_requiredPlayerEnergy[lv_indexPlayer] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 20, 40, 60, 80, 80, 80);
                libCPCM_gv_cT_AllCastersPlayerEnergy[lv_indexPlayer] += libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 1, 1, 1, 1, 1, 1);
            }
            else if ((GameGetMissionTime() <= 480.0)) {
                lv_maxPlayerEnergy[lv_indexPlayer] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 40, 60, 90, 110, 110, 110);
                lv_requiredPlayerEnergy[lv_indexPlayer] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 20, 40, 60, 80, 80, 80);
                libCPCM_gv_cT_AllCastersPlayerEnergy[lv_indexPlayer] += libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 1, 1, 2, 4, 4, 4);
            }
            else if ((GameGetMissionTime() <= 600.0)) {
                lv_maxPlayerEnergy[lv_indexPlayer] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 60, 80, 110, 140, 140, 140);
                lv_requiredPlayerEnergy[lv_indexPlayer] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 20, 60, 80, 80, 80, 80);
                libCPCM_gv_cT_AllCastersPlayerEnergy[lv_indexPlayer] += libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 1, 1, 3, 6, 6, 6);
            }
            else if (true) {
                lv_maxPlayerEnergy[lv_indexPlayer] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 90, 120, 210, 290, 290, 290);
                lv_requiredPlayerEnergy[lv_indexPlayer] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 90, 90, 90, 150, 150, 150);
                libCPCM_gv_cT_AllCastersPlayerEnergy[lv_indexPlayer] += libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 1, 2, 6, 10, 10, 10);
            }
            if ((libCPCM_gv_cT_AllCastersPlayerEnergy[lv_indexPlayer] > lv_maxPlayerEnergy[lv_indexPlayer])) {
                libCPCM_gv_cT_AllCastersPlayerEnergy[lv_indexPlayer] = lv_maxPlayerEnergy[lv_indexPlayer];
            }

            if ((libCPCM_gv_cT_AllCastersPlayerEnergy[lv_indexPlayer] < lv_requiredPlayerEnergy[lv_indexPlayer])) {
                continue;
            }

            lv_potentialTargets = UnitGroup(null, lv_indexPlayer, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
            lv_targetAttempts = 1;
            for ( ; ( (auto92148A64_ai >= 0 && lv_targetAttempts <= auto92148A64_ae) || (auto92148A64_ai < 0 && lv_targetAttempts >= auto92148A64_ae) ) ; lv_targetAttempts += auto92148A64_ai ) {
                if ((UnitGroupCount(lv_potentialTargets, c_unitCountAlive) <= 0)) {
                    break;
                }

                lv_target = UnitGroupRandomUnit(lv_potentialTargets, c_unitCountAlive);
                lv_randomAbility = libCPCM_gf_CT_AllCastersRandomAbility(lv_indexPlayer, lv_target);
                if ((lv_randomAbility == libCPCM_ge_CT_AllCastersAbilities_CT_AllCastersNone)) {
                    break;
                }

                lv_range = libCPCM_gf_CT_AllCastersAbilityRange(lv_randomAbility);
                lv_potentialCasters = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", lv_indexPlayer, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_target), lv_range), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto2472949A_g = lv_potentialCasters;
                auto2472949A_u = UnitGroupCount(auto2472949A_g, c_unitCountAll);
                for (;; auto2472949A_u -= 1) {
                    lv_caster = UnitGroupUnitFromEnd(auto2472949A_g, auto2472949A_u);
                    if (lv_caster == null) { break; }
                    if ((UnitGetPropertyFixed(lv_caster, c_unitPropEnergy, c_unitPropCurrent) > 50.0)) {
                        libCPCM_gf_CT_AllCastersUseAbility(lv_caster, lv_target, lv_randomAbility);
                        libCPCM_gv_cT_AllCastersPlayerEnergy[lv_indexPlayer] -= libCPCM_gf_CT_AllCastersAbilityPlayerCost(lv_randomAbility);
                        UnitGroupRemove(lv_potentialTargets, lv_target);
                        break;
                    }

                }
                if ((TimerGetRemaining(lv_periodicCastTimer[lv_indexPlayer]) > 0.0)) {
                    break;
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_AllCastersPeriodicCast_Init () {
    libCPCM_gt_CT_AllCastersPeriodicCast = TriggerCreate("libCPCM_gt_CT_AllCastersPeriodicCast_Func");
    TriggerEnable(libCPCM_gt_CT_AllCastersPeriodicCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_MissileBarrage
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_MissileBarrage_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unit[7][libCOOC_gv_cCC_MAXPLAYERS + 1] lv_missileLauncher;
    unitgroup lv_launchTargets;
    unit lv_chosenTarget;
    timer[libCOOC_gv_cCC_MAXPLAYERS + 1] lv_barrageTimer;
    timer lv_nukeCD;
    int lv_indexLauncher;
    int lv_indexPlayer;
    point lv_launchLocation;
    int lv_launchAttempts;
    int lv_randomLaunchRoll;
    point lv_pDDTarget;
    unit lv_indexUnit;

    // Automatic Variable Declarations
    playergroup auto7EB46BCE_g;
    playergroup auto7794F714_g;
    const int auto615C260E_ae = 6;
    const int auto615C260E_ai = 1;
    unitgroup auto67DF03F7_g;
    int auto67DF03F7_u;
    const int auto9F863B31_ae = 100;
    const int auto9F863B31_ai = 1;
    int autoF816D525_val;

    // Variable Initialization
    lv_launchTargets = UnitGroupEmpty();
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        lv_barrageTimer[init_i] = TimerCreate();
    }
    lv_nukeCD = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    auto7EB46BCE_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto7EB46BCE_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        TimerStart(lv_barrageTimer[lv_indexPlayer], 5.0, false, c_timeAI);
    }
    TimerStart(lv_nukeCD, libCOMI_gf_MinimumDifficultyValueCoopReal(0.0, 0.0, 900.0, 600.0, 0.0, 0.0), false, c_timeAI);
    while (true) {
        Wait(1.0, c_timeAI);
        auto7794F714_g = libCOOC_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto7794F714_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            lv_indexLauncher = 1;
            for ( ; ( (auto615C260E_ai >= 0 && lv_indexLauncher <= auto615C260E_ae) || (auto615C260E_ai < 0 && lv_indexLauncher >= auto615C260E_ae) ) ; lv_indexLauncher += auto615C260E_ai ) {
                if (((lv_missileLauncher[lv_indexLauncher][lv_indexPlayer] == null) || (UnitIsAlive(lv_missileLauncher[lv_indexLauncher][lv_indexPlayer]) == false) || (UnitIsValid(lv_missileLauncher[lv_indexLauncher][lv_indexPlayer]) == false))) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, 3, Point(0.0, 0.0));
                    UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
                    lv_missileLauncher[lv_indexLauncher][lv_indexPlayer] = UnitLastCreated();
                    UnitSetHeight(lv_missileLauncher[lv_indexLauncher][lv_indexPlayer], 8.0, 0.0);
                }

            }
            if ((TimerGetRemaining(lv_barrageTimer[lv_indexPlayer]) <= 0.0)) {
                lv_launchTargets = UnitGroup(null, lv_indexPlayer, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto67DF03F7_g = lv_launchTargets;
                auto67DF03F7_u = UnitGroupCount(auto67DF03F7_g, c_unitCountAll);
                for (;; auto67DF03F7_u -= 1) {
                    lv_indexUnit = UnitGroupUnitFromEnd(auto67DF03F7_g, auto67DF03F7_u);
                    if (lv_indexUnit == null) { break; }
                    if ((UnitFilterMatch(lv_indexUnit, lv_indexPlayer, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, 0)) == false)) {
                        UnitGroupRemove(lv_launchTargets, lv_indexUnit);
                    }

                }
                if ((UnitGroupCount(lv_launchTargets, c_unitCountAlive) <= 0)) {
                    continue;
                }

                lv_chosenTarget = UnitGroupRandomUnit(lv_launchTargets, c_unitCountAlive);
                lv_launchAttempts = 1;
                for ( ; ( (auto9F863B31_ai >= 0 && lv_launchAttempts <= auto9F863B31_ae) || (auto9F863B31_ai < 0 && lv_launchAttempts >= auto9F863B31_ae) ) ; lv_launchAttempts += auto9F863B31_ai ) {
                    autoF816D525_val = RandomInt(1, 4);
                    if (autoF816D525_val == 1) {
                        lv_launchLocation = Point(RandomFixed(0.0, libNtve_gf_WidthOfRegion(RegionEntireMap())), libNtve_gf_HeightOfRegion(RegionEntireMap()));
                    }
                    else if (autoF816D525_val == 2) {
                        lv_launchLocation = Point(RandomFixed(0.0, libNtve_gf_WidthOfRegion(RegionEntireMap())), 0.0);
                    }
                    else if (autoF816D525_val == 3) {
                        lv_launchLocation = Point(0.0, RandomFixed(0.0, libNtve_gf_HeightOfRegion(RegionEntireMap())));
                    }
                    else if (autoF816D525_val == 4) {
                        lv_launchLocation = Point(libNtve_gf_WidthOfRegion(RegionEntireMap()), RandomFixed(0.0, libNtve_gf_HeightOfRegion(RegionEntireMap())));
                    }
                    else {
                    }
                    if ((DistanceBetweenPoints(lv_launchLocation, PlayerStartLocation(1)) > 50.0)) {
                        break;
                    }

                }
                if ((lv_launchAttempts >= 100)) {
                    continue;
                }

                UnitSetPosition(lv_missileLauncher[1][lv_indexPlayer], lv_launchLocation, false);
                lv_randomLaunchRoll = RandomInt(1, 100);
                if ((GameGetMissionTime() <= 300.0)) {
                    UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileStandardLaunch", lv_chosenTarget);
                    TimerStart(lv_barrageTimer[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(PlayerDifficulty(lv_indexPlayer), 45.0, 30.0, 20.0, 15.0, 0.0, 0.0), false, c_timeAI);
                }
                else if ((GameGetMissionTime() <= 600.0)) {
                    if ((lv_randomLaunchRoll <= 90)) {
                        UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileStandardLaunch", lv_chosenTarget);
                    }
                    else {
                        UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileStandardLaunch", lv_chosenTarget);
                        UnitSetPosition(lv_missileLauncher[2][lv_indexPlayer], PointWithOffsetPolar(lv_launchLocation, 4.0, AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))), false);
                        lv_pDDTarget = libNtve_gf_PointWithZOffset(UnitGetPosition(lv_chosenTarget), 2.0);
                        UnitCreateEffectPoint(lv_missileLauncher[2][lv_indexPlayer], "MutatorMissilePointDefenseLaunch", lv_pDDTarget);
                    }
                    TimerStart(lv_barrageTimer[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(PlayerDifficulty(lv_indexPlayer), 30.0, 20.0, 15.0, 5.0, 0.0, 0.0), false, c_timeAI);
                }
                else if ((GameGetMissionTime() <= 900.0)) {
                    if ((lv_randomLaunchRoll <= 20)) {
                        UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileSplitterLaunch", lv_chosenTarget);
                    }
                    else if ((lv_randomLaunchRoll <= 40)) {
                        UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileStandardLaunch", lv_chosenTarget);
                        UnitSetPosition(lv_missileLauncher[2][lv_indexPlayer], PointWithOffsetPolar(lv_launchLocation, 4.0, AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))), false);
                        lv_pDDTarget = libNtve_gf_PointWithZOffset(UnitGetPosition(lv_chosenTarget), 2.0);
                        UnitCreateEffectPoint(lv_missileLauncher[2][lv_indexPlayer], "MutatorMissilePointDefenseLaunch", lv_pDDTarget);
                    }
                    else if (true) {
                        UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileStandardLaunch", lv_chosenTarget);
                    }
                    TimerStart(lv_barrageTimer[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(PlayerDifficulty(lv_indexPlayer), 30.0, 12.0, 4.0, 2.0, 0.0, 0.0), false, c_timeAI);
                }
                else if (true) {
                    if ((lv_randomLaunchRoll <= 10) && ((libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer) == 3) || (libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer) == 4)) && (TimerGetRemaining(lv_nukeCD) <= 0.0)) {
                        SoundPlayForPlayer(SoundLink("Tychus04BriefingAlarm", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                        TimerStart(lv_nukeCD, libCOMI_gf_MinimumDifficultyValueCoopReal(0.0, 0.0, 120.0, 60.0, 0.0, 0.0), false, c_timeAI);
                        lv_pDDTarget = PointWithOffsetPolar(UnitGetPosition(lv_chosenTarget), 7.0, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))+30.0));
                        lv_pDDTarget = libNtve_gf_PointWithZOffset(lv_pDDTarget, 2.0);
                        UnitSetPosition(lv_missileLauncher[2][lv_indexPlayer], PointWithOffsetPolar(lv_launchLocation, 7.0, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))+30.0)), false);
                        UnitCreateEffectPoint(lv_missileLauncher[2][lv_indexPlayer], "MutatorMissilePointDefenseNukeEscortLaunch", lv_pDDTarget);
                        lv_pDDTarget = PointWithOffsetPolar(UnitGetPosition(lv_chosenTarget), 7.0, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))-30.0));
                        lv_pDDTarget = libNtve_gf_PointWithZOffset(lv_pDDTarget, 2.0);
                        UnitSetPosition(lv_missileLauncher[3][lv_indexPlayer], PointWithOffsetPolar(lv_launchLocation, 7.0, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))-30.0)), false);
                        UnitCreateEffectPoint(lv_missileLauncher[3][lv_indexPlayer], "MutatorMissilePointDefenseNukeEscortLaunch", lv_pDDTarget);
                        if ((libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer) == 4)) {
                            lv_pDDTarget = PointWithOffsetPolar(UnitGetPosition(lv_chosenTarget), 7.0, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))+0.0));
                            lv_pDDTarget = libNtve_gf_PointWithZOffset(lv_pDDTarget, 2.0);
                            UnitSetPosition(lv_missileLauncher[4][lv_indexPlayer], PointWithOffsetPolar(lv_launchLocation, 7.0, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))+0.0)), false);
                            UnitCreateEffectPoint(lv_missileLauncher[4][lv_indexPlayer], "MutatorMissilePointDefenseNukeEscortLaunch", lv_pDDTarget);
                            lv_pDDTarget = PointWithOffsetPolar(UnitGetPosition(lv_chosenTarget), 4.5, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))-30.0));
                            lv_pDDTarget = libNtve_gf_PointWithZOffset(lv_pDDTarget, 2.0);
                            UnitSetPosition(lv_missileLauncher[5][lv_indexPlayer], PointWithOffsetPolar(lv_launchLocation, 4.5, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))-30.0)), false);
                            UnitCreateEffectPoint(lv_missileLauncher[5][lv_indexPlayer], "MutatorMissilePointDefenseNukeEscortLaunch", lv_pDDTarget);
                            lv_pDDTarget = PointWithOffsetPolar(UnitGetPosition(lv_chosenTarget), 4.5, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))+30.0));
                            lv_pDDTarget = libNtve_gf_PointWithZOffset(lv_pDDTarget, 2.0);
                            UnitSetPosition(lv_missileLauncher[6][lv_indexPlayer], PointWithOffsetPolar(lv_launchLocation, 4.5, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))+30.0)), false);
                            UnitCreateEffectPoint(lv_missileLauncher[6][lv_indexPlayer], "MutatorMissilePointDefenseNukeEscortLaunch", lv_pDDTarget);
                        }

                        UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileNukeLaunch", lv_chosenTarget);
                    }
                    else if ((lv_randomLaunchRoll <= 40)) {
                        UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileSplitterLaunch", lv_chosenTarget);
                    }
                    else if ((lv_randomLaunchRoll <= 60)) {
                        UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileStandardLaunch", lv_chosenTarget);
                        UnitSetPosition(lv_missileLauncher[2][lv_indexPlayer], PointWithOffsetPolar(lv_launchLocation, 4.0, AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))), false);
                        lv_pDDTarget = libNtve_gf_PointWithZOffset(UnitGetPosition(lv_chosenTarget), 2.0);
                        UnitCreateEffectPoint(lv_missileLauncher[2][lv_indexPlayer], "MutatorMissilePointDefenseLaunch", lv_pDDTarget);
                    }
                    else if (true) {
                        UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileStandardLaunch", lv_chosenTarget);
                    }
                    TimerStart(lv_barrageTimer[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(PlayerDifficulty(lv_indexPlayer), 15.0, 6.0, 2.0, 1.0, 0.0, 0.0), false, c_timeAI);
                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_MissileBarrage_Init () {
    libCPCM_gt_CT_MissileBarrage = TriggerCreate("libCPCM_gt_CT_MissileBarrage_Func");
    TriggerEnable(libCPCM_gt_CT_MissileBarrage, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_OrderCostCopyUsed
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_OrderCostCopyUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCPCM_gv_cT_OrderCostImmuneUnits, EventPlayerEffectUsedUnitImpact());
    Wait(0.0625, c_timeGame);
    UnitGroupRemove(libCPCM_gv_cT_OrderCostImmuneUnits, EventPlayerEffectUsedUnitImpact());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_OrderCostCopyUsed_Init () {
    libCPCM_gt_CT_OrderCostCopyUsed = TriggerCreate("libCPCM_gt_CT_OrderCostCopyUsed_Func");
    TriggerEnable(libCPCM_gt_CT_OrderCostCopyUsed, false);
    TriggerAddEventPlayerEffectUsed(libCPCM_gt_CT_OrderCostCopyUsed, 1, "CopyOrders");
    TriggerAddEventPlayerEffectUsed(libCPCM_gt_CT_OrderCostCopyUsed, 2, "CopyOrders");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UberDarknessSpotlight
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_UberDarknessSpotlight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_spotlightArea;
    int lv_humanPlayer;
    int lv_spotlightPlayer;
    unitgroup lv_nearbyUnits;
    fixed lv_distance;

    // Automatic Variable Declarations
    playergroup auto38894434_g;
    playergroup auto80A282D8_g;

    // Variable Initialization
    lv_nearbyUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(0.0625, c_timeGame);
        auto38894434_g = libCOOC_gf_HumanPlayers();
        lv_spotlightPlayer = -1;
        while (true) {
            lv_spotlightPlayer = PlayerGroupNextPlayer(auto38894434_g, lv_spotlightPlayer);
            if (lv_spotlightPlayer < 0) { break; }
            lv_nearbyUnits = UnitGroupAlliance(lv_spotlightPlayer, c_unitAllianceAlly, RegionCircle(CameraGetTarget(lv_spotlightPlayer), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((UnitGroupCount(lv_nearbyUnits, c_unitCountAlive) == 0)) {
                continue;
            }

            lv_distance = DistanceBetweenPoints(CameraGetTarget(lv_spotlightPlayer), UnitGetPosition(UnitGroupClosestToPoint(lv_nearbyUnits, CameraGetTarget(lv_spotlightPlayer))));
            lv_spotlightArea = RegionCircle(CameraGetTarget(lv_spotlightPlayer), (libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_spotlightPlayer), 8.0, 7.0, 4.0, 4.0, 4.0, 4.0)+(3.0*(1.0-(lv_distance/12.0)))));
            lv_spotlightArea = RegionCircle(CameraGetTarget(lv_spotlightPlayer), (4.0+(libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_spotlightPlayer), 7.0, 6.0, 3.0, 3.0, 3.0, 3.0)*(1.0-(lv_distance/12.0)))));
            auto80A282D8_g = libCOOC_gf_HumanPlayers();
            lv_humanPlayer = -1;
            while (true) {
                lv_humanPlayer = PlayerGroupNextPlayer(auto80A282D8_g, lv_humanPlayer);
                if (lv_humanPlayer < 0) { break; }
                VisRevealArea(lv_humanPlayer, lv_spotlightArea, 0.0625, false);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_UberDarknessSpotlight_Init () {
    libCPCM_gt_CT_UberDarknessSpotlight = TriggerCreate("libCPCM_gt_CT_UberDarknessSpotlight_Func");
    TriggerEnable(libCPCM_gt_CT_UberDarknessSpotlight, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_FoodHuntDepleteFood
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_FoodHuntDepleteFood_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    timer[libCOOC_gv_cCC_MAXPLAYERS + 1] lv_foodDepleteTimer;
    timer[libCOOC_gv_cCC_MAXPLAYERS + 1] lv_foodDamageTimer;
    int lv_indexPlayer;
    int lv_currentFood;
    fixed lv_foodUpdateTime;
    int lv_depletionCount;
    fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] lv_depleteRate;

    // Automatic Variable Declarations
    playergroup auto800A2F6A_g;
    playergroup autoD090CEA7_g;
    playergroup auto686A5C07_g;

    // Variable Initialization
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        lv_foodDepleteTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        lv_foodDamageTimer[init_i] = TimerCreate();
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto800A2F6A_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto800A2F6A_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        lv_depleteRate[lv_indexPlayer] = (250.0 * libCOMI_gf_DifficultyValueFixed2(PlayerDifficulty(lv_indexPlayer), 5.0, 4.0, 2.0, 1.0, 1.0, 1.0));
        TimerStart(lv_foodDepleteTimer[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(PlayerDifficulty(lv_indexPlayer), 15.0, 14.0, 13.0, 11.0, 11.0, 11.0), false, c_timeAI);
    }
    while (true) {
        Wait(1.0, c_timeAI);
        lv_depletionCount = 0;
        lv_currentFood = PlayerGetPropertyInt(1, c_playerPropSuppliesLimit);
        autoD090CEA7_g = libCOOC_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoD090CEA7_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            if ((TimerGetRemaining(lv_foodDepleteTimer[lv_indexPlayer]) <= 0.0)) {
                lv_depletionCount += 1;
                lv_foodUpdateTime = (lv_depleteRate[lv_indexPlayer]*(1.0/MaxF(libCPCM_gv_cT_SharedSupplyIndividual[lv_indexPlayer], 1.0)));
                TimerStart(lv_foodDepleteTimer[lv_indexPlayer], lv_foodUpdateTime, false, c_timeAI);
            }

        }
        if ((lv_depletionCount > 0)) {
            lv_currentFood = MaxI((lv_currentFood-lv_depletionCount), 0);
            auto686A5C07_g = libCOOC_gf_HumanPlayers();
            lv_indexPlayer = -1;
            while (true) {
                lv_indexPlayer = PlayerGroupNextPlayer(auto686A5C07_g, lv_indexPlayer);
                if (lv_indexPlayer < 0) { break; }
                PlayerModifyPropertyInt(lv_indexPlayer, c_playerPropSuppliesMade, c_playerPropOperSetTo, lv_currentFood);
                PlayerModifyPropertyInt(lv_indexPlayer, c_playerPropSuppliesLimit, c_playerPropOperSetTo, lv_currentFood);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_FoodHuntDepleteFood_Init () {
    libCPCM_gt_CT_FoodHuntDepleteFood = TriggerCreate("libCPCM_gt_CT_FoodHuntDepleteFood_Func");
    TriggerEnable(libCPCM_gt_CT_FoodHuntDepleteFood, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_FoodHuntHungerDamage
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_FoodHuntHungerDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_hungryPlayer;
    timer lv_foodDamageTimer;
    int[libCOOC_gv_cCC_MAXPLAYERS + 1] lv_hunger;
    int lv_damageCount;
    unitgroup lv_hungerUnits;
    unitgroup lv_hungerWorkers;
    unit lv_hungerTarget;

    // Automatic Variable Declarations
    int auto6C4DDA74_ae;
    const int auto6C4DDA74_ai = 1;

    // Variable Initialization
    lv_foodDamageTimer = TimerCreate();
    lv_hungerUnits = UnitGroupEmpty();
    lv_hungerWorkers = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeAI);
        if ((PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) > PlayerGetPropertyInt(1, c_playerPropSuppliesMade))) {
            DialogControlSetVisible(libCPCM_gv_cT_FoodHuntWarningLabel, PlayerGroupAll(), true);
        }
        else {
            DialogControlSetVisible(libCPCM_gv_cT_FoodHuntWarningLabel, PlayerGroupAll(), false);
        }
        if ((PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) > PlayerGetPropertyInt(1, c_playerPropSuppliesMade)) && (TimerGetRemaining(lv_foodDamageTimer) <= 0.0)) {
            TimerStart(lv_foodDamageTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(10.0, 8.0, 5.0, 3.0, 3.0, 3.0), false, c_timeAI);
            lv_hungerUnits = UnitGroup(null, lv_hungryPlayer, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
            lv_hungerWorkers = UnitGroup(null, lv_hungryPlayer, RegionPlayableMap(), UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
            if ((libCPCM_gv_cT_SharedSupplyIndividual[1] > libCPCM_gv_cT_SharedSupplyIndividual[2])) {
                lv_hungryPlayer = 1;
            }
            else if ((libCPCM_gv_cT_SharedSupplyIndividual[1] < libCPCM_gv_cT_SharedSupplyIndividual[2])) {
                lv_hungryPlayer = 2;
            }
            else if (true) {
                lv_hungryPlayer = RandomInt(1, 2);
            }
            lv_hunger[lv_hungryPlayer] += 1;
            auto6C4DDA74_ae = lv_hunger[lv_hungryPlayer];
            lv_damageCount = 1;
            for ( ; ( (auto6C4DDA74_ai >= 0 && lv_damageCount <= auto6C4DDA74_ae) || (auto6C4DDA74_ai < 0 && lv_damageCount >= auto6C4DDA74_ae) ) ; lv_damageCount += auto6C4DDA74_ai ) {
                if ((UnitGroupCount(lv_hungerUnits, c_unitCountAlive) > 0)) {
                    lv_hungerTarget = UnitGroupRandomUnit(lv_hungerUnits, c_unitCountAlive);
                    PlayerCreateEffectUnit(lv_hungryPlayer, "MutatorHungerDamage", lv_hungerTarget);
                    SoundPlayOnUnitForPlayer(SoundLink("InfestedCivilian_Moan", -1), c_maxPlayers, PlayerGroupAll(), lv_hungerTarget, 0.0, 100.0, 0.0);
                }
                else if ((UnitGroupCount(lv_hungerWorkers, c_unitCountAlive) > 0)) {
                    lv_hungerTarget = UnitGroupRandomUnit(lv_hungerWorkers, c_unitCountAlive);
                    PlayerCreateEffectUnit(lv_hungryPlayer, "MutatorHungerDamage", lv_hungerTarget);
                    SoundPlayOnUnitForPlayer(SoundLink("InfestedCivilian_Moan", -1), c_maxPlayers, PlayerGroupAll(), lv_hungerTarget, 0.0, 100.0, 0.0);
                }
            }
        }
        else {
            if ((PlayerGetPropertyInt(1, c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(1, c_playerPropSuppliesMade))) {
                lv_hunger[lv_hungryPlayer] = 0;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_FoodHuntHungerDamage_Init () {
    libCPCM_gt_CT_FoodHuntHungerDamage = TriggerCreate("libCPCM_gt_CT_FoodHuntHungerDamage_Func");
    TriggerEnable(libCPCM_gt_CT_FoodHuntHungerDamage, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_FoodHuntSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_FoodHuntSpawn_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    timer[libCOOC_gv_cCC_MAXPLAYERS + 1] lv_foodSpawnTimer;
    int lv_indexPlayer;
    int lv_spawnAttempt;
    point lv_spawnLocation;
    int lv_turkeyCount;

    // Automatic Variable Declarations
    const int auto132D6815_ae = 30;
    const int auto132D6815_ai = 1;
    const int auto258DE27E_ae = 100;
    const int auto258DE27E_ai = 1;
    playergroup autoC1C21BAE_g;
    playergroup autoC167A7DD_g;
    const int autoE03BCC8C_ae = 100;
    const int autoE03BCC8C_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        lv_foodSpawnTimer[init_i] = TimerCreate();
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_turkeyCount = 1;
    for ( ; ( (auto132D6815_ai >= 0 && lv_turkeyCount <= auto132D6815_ae) || (auto132D6815_ai < 0 && lv_turkeyCount >= auto132D6815_ae) ) ; lv_turkeyCount += auto132D6815_ai ) {
        lv_spawnAttempt = 1;
        for ( ; ( (auto258DE27E_ai >= 0 && lv_spawnAttempt <= auto258DE27E_ae) || (auto258DE27E_ai < 0 && lv_spawnAttempt >= auto258DE27E_ae) ) ; lv_spawnAttempt += auto258DE27E_ai ) {
            lv_spawnLocation = RegionRandomPoint(RegionPlayableMap());
            if (((PathingType(lv_spawnLocation) != c_pathingGround) || (PointPathingIsConnected(lv_spawnLocation, PlayerStartLocation(1)) == false) || (DistanceBetweenPoints(lv_spawnLocation, PlayerStartLocation(1)) > 40.0) || (DistanceBetweenPoints(lv_spawnLocation, PlayerStartLocation(1)) < 7.0) || (DistanceBetweenPoints(lv_spawnLocation, PlayerStartLocation(2)) < 7.0))) {
                continue;
            }

            UnitCreate(1, "MutatorTurkey", 0, 0, lv_spawnLocation, libNtve_gf_RandomAngle());
            UnitSetState(UnitLastCreated(), c_unitStateTooltipable, true);
            libCPCM_gf_CT_RegisterSpawnedUnitGroup(UnitLastCreatedGroup());
            break;
        }
    }
    autoC1C21BAE_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoC1C21BAE_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        TimerStart(lv_foodSpawnTimer[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(PlayerDifficulty(lv_indexPlayer), 8.0, 8.0, 8.0, 8.0, 8.0, 8.0), false, c_timeAI);
    }
    while (true) {
        Wait(1.0, c_timeAI);
        autoC167A7DD_g = libCOOC_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoC167A7DD_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            if ((TimerGetRemaining(lv_foodSpawnTimer[lv_indexPlayer]) > 0.0)) {
                continue;
            }

            lv_spawnAttempt = 1;
            for ( ; ( (autoE03BCC8C_ai >= 0 && lv_spawnAttempt <= autoE03BCC8C_ae) || (autoE03BCC8C_ai < 0 && lv_spawnAttempt >= autoE03BCC8C_ae) ) ; lv_spawnAttempt += autoE03BCC8C_ai ) {
                lv_spawnLocation = RegionRandomPoint(RegionRect((PointGetX(PlayerStartLocation(lv_indexPlayer))-50.0), (PointGetY(PlayerStartLocation(lv_indexPlayer))-30.0), (PointGetX(PlayerStartLocation(lv_indexPlayer))+50.0), (PointGetY(PlayerStartLocation(lv_indexPlayer))+30.0)));
                if (((PathingType(lv_spawnLocation) != c_pathingGround) || (PointPathingIsConnected(lv_spawnLocation, PlayerStartLocation(lv_indexPlayer)) == false) || (DistanceBetweenPoints(lv_spawnLocation, CameraGetTarget(libCOOC_gf_CC_PlayerAlly(lv_indexPlayer))) <= 20.0) || (DistanceBetweenPoints(lv_spawnLocation, CameraGetTarget(lv_indexPlayer)) <= 20.0))) {
                    continue;
                }

                libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorTurkey", 0, 0, lv_spawnLocation);
                UnitSetState(UnitLastCreated(), c_unitStateTooltipable, true);
                libCPCM_gf_CT_RegisterSpawnedUnitGroup(UnitLastCreatedGroup());
                break;
            }
            TimerStart(lv_foodSpawnTimer[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(PlayerDifficulty(lv_indexPlayer), 8.0, 8.0, 8.0, 8.0, 8.0, 8.0), false, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_FoodHuntSpawn_Init () {
    libCPCM_gt_CT_FoodHuntSpawn = TriggerCreate("libCPCM_gt_CT_FoodHuntSpawn_Func");
    TriggerEnable(libCPCM_gt_CT_FoodHuntSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_FoodHuntFear
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_FoodHuntFear_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitHasBehavior2(EventUnit(), "MutatorInfestedTurkeyTerrifyingGobble") == true) && (UnitIsAlive(EventUnit()) == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 3.0))), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_FoodHuntFear_Init () {
    libCPCM_gt_CT_FoodHuntFear = TriggerCreate("libCPCM_gt_CT_FoodHuntFear_Func");
    TriggerEnable(libCPCM_gt_CT_FoodHuntFear, false);
    TriggerAddEventUnitBehaviorChange(libCPCM_gt_CT_FoodHuntFear, null, "MutatorInfestedTurkeyTerrifyingGobble", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_SharedSupplyUpdate
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_SharedSupplyUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_supplyDelta;
    fixed lv_combinedSupply;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoE18AEC1C_g;
    playergroup auto586F2282_g;
    playergroup auto23A8FDA7_g;
    playergroup auto934E5B99_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        lv_combinedSupply = 0.0;
        autoE18AEC1C_g = libCOOC_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoE18AEC1C_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            lv_combinedSupply += libCPCM_gv_cT_SharedSupplyIndividual[lv_indexPlayer];
        }
        auto586F2282_g = libCOOC_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto586F2282_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            lv_supplyDelta = (PlayerGetPropertyFixed(lv_indexPlayer, c_playerPropSuppliesUsed) - lv_combinedSupply);
            libCPCM_gv_cT_SharedSupplyIndividual[lv_indexPlayer] += lv_supplyDelta;
        }
        lv_combinedSupply = 0.0;
        auto23A8FDA7_g = libCOOC_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto23A8FDA7_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            lv_combinedSupply += libCPCM_gv_cT_SharedSupplyIndividual[lv_indexPlayer];
        }
        auto934E5B99_g = libCOOC_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto934E5B99_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            PlayerModifyPropertyFixed(lv_indexPlayer, c_playerPropSuppliesUsed, c_playerPropOperSetTo, lv_combinedSupply);
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_SharedSupplyUpdate_Init () {
    libCPCM_gt_CT_SharedSupplyUpdate = TriggerCreate("libCPCM_gt_CT_SharedSupplyUpdate_Func");
    TriggerEnable(libCPCM_gt_CT_SharedSupplyUpdate, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_TrickOrTreatSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_TrickOrTreatSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawningStructure;
    unit lv_targetStructure;
    int lv_minSpawn;
    int lv_maxSpawn;
    int lv_extraSpawn;
    int lv_spawnAttempt;

    // Automatic Variable Declarations
    const int auto1628D7A8_ae = 100;
    const int auto1628D7A8_ai = 1;
    int auto8A1DA87E_ae;
    int auto8A1DA87E_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawnAttempt = 1;
    for ( ; ( (auto1628D7A8_ai >= 0 && lv_spawnAttempt <= auto1628D7A8_ae) || (auto1628D7A8_ai < 0 && lv_spawnAttempt >= auto1628D7A8_ae) ) ; lv_spawnAttempt += auto1628D7A8_ai ) {
        lv_spawningStructure = UnitGroupRandomUnit(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", 1, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_targetStructure = UnitGroupRandomUnit(UnitGroup(null, RandomInt(1, 2), RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        if ((PointPathingIsConnected(UnitGetPosition(lv_spawningStructure), UnitGetPosition(lv_targetStructure)) == true)) {
            break;
        }

    }
    lv_minSpawn = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 2, 3);
    lv_maxSpawn = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 2, 3);
    if ((GameGetMissionTime() <= 360.0)) {
    }
    else if ((GameGetMissionTime() <= 720.0)) {
        lv_extraSpawn = libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 1, 2, 2, 2, 2);
    }
    else if ((GameGetMissionTime() <= 1080.0)) {
        lv_extraSpawn = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 2, 2, 3, 4, 4);
    }
    else if (true) {
        lv_extraSpawn = libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 3, 3, 4, 5, 5);
    }
    lv_minSpawn += lv_extraSpawn;
    lv_maxSpawn += lv_extraSpawn;
    auto8A1DA87E_ae = RandomInt(lv_minSpawn, lv_maxSpawn);
    auto8A1DA87E_var = 1;
    for ( ; auto8A1DA87E_var <= auto8A1DA87E_ae; auto8A1DA87E_var += 1 ) {
        if ((RandomInt(0, 1) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CivilianFemale", 0, 0, PointWithOffsetPolar(UnitGetPosition(lv_spawningStructure), 1.0, libNtve_gf_RandomAngle()));
            libCPCM_gf_CT_TrickOrTreaterLogic(UnitLastCreated());
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Civilian", 0, 0, PointWithOffsetPolar(UnitGetPosition(lv_spawningStructure), 1.0, libNtve_gf_RandomAngle()));
            libCPCM_gf_CT_TrickOrTreaterLogic(UnitLastCreated());
        }
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointInterpolate(PlayerStartLocation(1), PlayerStartLocation(2), 0.5)), c_orderQueueReplace);
        UnitGroupAddUnitGroup(libCPCM_gv_cT_OnDeathSpawns, UnitLastCreatedGroup());
        libCPCM_gf_CT_RegisterSpawnedUnitGroup(UnitLastCreatedGroup());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_TrickOrTreatSpawn_Init () {
    libCPCM_gt_CT_TrickOrTreatSpawn = TriggerCreate("libCPCM_gt_CT_TrickOrTreatSpawn_Func");
    TriggerEnable(libCPCM_gt_CT_TrickOrTreatSpawn, false);
    TriggerAddEventTimePeriodic(libCPCM_gt_CT_TrickOrTreatSpawn, 30.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_StructureStealLogic
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_StructureStealLogic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexStructure;
    int lv_abilityIndex;
    int lv_commandIndex;
    int lv_commandCount;
    string lv_structureAbility;

    // Automatic Variable Declarations
    unitgroup autoC26BCC42_g;
    int autoC26BCC42_u;
    int auto120EAA8B_ae;
    const int auto120EAA8B_ai = 1;
    int auto7FF01F7C_val;
    const int auto112A88DC_ae = 29;
    const int auto112A88DC_ai = 1;
    const int autoFD7B8620_ae = 29;
    const int autoFD7B8620_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(2.0, c_timeAI);
        autoC26BCC42_g = libCPCM_gv_cT_StolenStructures;
        autoC26BCC42_u = UnitGroupCount(autoC26BCC42_g, c_unitCountAll);
        for (;; autoC26BCC42_u -= 1) {
            lv_indexStructure = UnitGroupUnitFromEnd(autoC26BCC42_g, autoC26BCC42_u);
            if (lv_indexStructure == null) { break; }
            UnitIssueOrder(lv_indexStructure, OrderTargetingPoint(AbilityCommand("Rally", 0), UnitGetPosition(lv_indexStructure)), c_orderQueueReplace);
            auto120EAA8B_ae = UnitAbilityCount(lv_indexStructure);
            lv_abilityIndex = 1;
            for ( ; ( (auto120EAA8B_ai >= 0 && lv_abilityIndex <= auto120EAA8B_ae) || (auto120EAA8B_ai < 0 && lv_abilityIndex >= auto120EAA8B_ae) ) ; lv_abilityIndex += auto120EAA8B_ai ) {
                lv_structureAbility = UnitAbilityGet(lv_indexStructure, lv_abilityIndex);
                if ((UnitAbilityCheck(lv_indexStructure, lv_structureAbility, true) == false)) {
                    continue;
                }

                auto7FF01F7C_val = AbilityClass(lv_structureAbility);
                if (auto7FF01F7C_val == c_classIdCAbilTrain) {
                    lv_commandCount = 0;
                    lv_commandIndex = 0;
                    for ( ; ( (auto112A88DC_ai >= 0 && lv_commandIndex <= auto112A88DC_ae) || (auto112A88DC_ai < 0 && lv_commandIndex >= auto112A88DC_ae) ) ; lv_commandIndex += auto112A88DC_ai ) {
                        if ((AbilityCommand(lv_structureAbility, lv_commandIndex) != null) && (UnitCheckAbilCmdState(lv_indexStructure, AbilityCommand(lv_structureAbility, lv_commandIndex), c_cmdStateDisabled) == false) && (UnitCheckAbilCmdState(lv_indexStructure, AbilityCommand(lv_structureAbility, lv_commandIndex), c_cmdStateHidden) == false) && (UnitOrderIsValid(lv_indexStructure, Order(AbilityCommand(lv_structureAbility, lv_commandIndex))) == true)) {
                            lv_commandCount += 1;
                        }

                    }
                    if ((lv_commandCount == 0)) {
                        break;
                    }

                    lv_commandCount = RandomInt(1, lv_commandCount);
                    lv_commandIndex = 0;
                    for ( ; ( (autoFD7B8620_ai >= 0 && lv_commandIndex <= autoFD7B8620_ae) || (autoFD7B8620_ai < 0 && lv_commandIndex >= autoFD7B8620_ae) ) ; lv_commandIndex += autoFD7B8620_ai ) {
                        if ((AbilityCommand(lv_structureAbility, lv_commandIndex) != null) && (UnitCheckAbilCmdState(lv_indexStructure, AbilityCommand(lv_structureAbility, lv_commandIndex), c_cmdStateDisabled) == false) && (UnitCheckAbilCmdState(lv_indexStructure, AbilityCommand(lv_structureAbility, lv_commandIndex), c_cmdStateHidden) == false) && (UnitOrderIsValid(lv_indexStructure, Order(AbilityCommand(lv_structureAbility, lv_commandIndex))) == true)) {
                            lv_commandCount -= 1;
                            if ((lv_commandCount == 0)) {
                                UnitIssueOrder(lv_indexStructure, Order(AbilityCommand(lv_structureAbility, lv_commandIndex)), c_orderQueueReplace);
                                break;
                            }

                        }

                    }
                }
                else {
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_StructureStealLogic_Init () {
    libCPCM_gt_CT_StructureStealLogic = TriggerCreate("libCPCM_gt_CT_StructureStealLogic_Func");
    TriggerEnable(libCPCM_gt_CT_StructureStealLogic, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_StructureStealTrigger
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_StructureStealTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gf_CT_ApplyStructureSteal(EventPlayerEffectUsedUnit(c_effectUnitTarget), EventPlayerEffectUsedUnit(c_effectUnitCaster), 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_StructureStealTrigger_Init () {
    libCPCM_gt_CT_StructureStealTrigger = TriggerCreate("libCPCM_gt_CT_StructureStealTrigger_Func");
    TriggerEnable(libCPCM_gt_CT_StructureStealTrigger, false);
    TriggerAddEventPlayerEffectUsed(libCPCM_gt_CT_StructureStealTrigger, 1, "MutatorHouseHuntersDummy");
    TriggerAddEventPlayerEffectUsed(libCPCM_gt_CT_StructureStealTrigger, 2, "MutatorHouseHuntersDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_StructureStealUnitTrained
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_StructureStealUnitTrained_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() != null))) {
            return false;
        }

        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(libCPCM_gv_cT_StolenStructures, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AISetUnitSuicide(EventUnitProgressUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_StructureStealUnitTrained_Init () {
    libCPCM_gt_CT_StructureStealUnitTrained = TriggerCreate("libCPCM_gt_CT_StructureStealUnitTrained_Func");
    TriggerEnable(libCPCM_gt_CT_StructureStealUnitTrained, false);
    TriggerAddEventUnitTrainProgress(libCPCM_gt_CT_StructureStealUnitTrained, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_GiftFightSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_GiftFightSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_spawnTimer;
    point lv_spawnLocation;
    int lv_spawnAttempt;

    // Automatic Variable Declarations
    const int autoD15DCB9C_ae = 500;
    const int autoD15DCB9C_ai = 1;

    // Variable Initialization
    lv_spawnTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_spawnTimer, 180.0, false, c_timeGame);
    while (true) {
        while (!((TimerGetRemaining(lv_spawnTimer) <= 0.0))) {
            Wait(1.0, c_timeGame);
        }
        lv_spawnAttempt = 1;
        for ( ; ( (autoD15DCB9C_ai >= 0 && lv_spawnAttempt <= autoD15DCB9C_ae) || (autoD15DCB9C_ai < 0 && lv_spawnAttempt >= autoD15DCB9C_ae) ) ; lv_spawnAttempt += autoD15DCB9C_ai ) {
            lv_spawnLocation = RegionRandomPoint(RegionPlayableMap());
            if ((PointPathingIsConnected(lv_spawnLocation, PlayerStartLocation(1)) == true) && (PathingType(lv_spawnLocation) == c_pathingGround) && (DistanceBetweenPoints(lv_spawnLocation, PlayerStartLocation(1)) >= 40.0) && (DistanceBetweenPoints(lv_spawnLocation, PlayerStartLocation(2)) >= 40.0) && (DistanceBetweenPoints(lv_spawnLocation, PlayerStartLocation(3)) >= 40.0) && (UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(lv_spawnLocation, libCPCM_gv_cTC_GiftCaptureRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) <= 0)) {
                break;
            }
            else {
                lv_spawnLocation = null;
            }
        }
        if ((lv_spawnLocation == null)) {
            continue;
        }

        libCPCM_gf_CT_GiftSpawn(lv_spawnLocation);
        libCPCM_gf_CT_GiftSendAttack(libCPCM_gv_cT_GiftLastCreated);
        if ((GameGetMissionTime() > 1200.0)) {
            TimerStart(lv_spawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(130.0, 130.0, 100.0, 100.0, 100.0, 100.0), false, c_timeGame);
        }
        else {
            TimerStart(lv_spawnTimer, 130.0, false, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_GiftFightSpawn_Init () {
    libCPCM_gt_CT_GiftFightSpawn = TriggerCreate("libCPCM_gt_CT_GiftFightSpawn_Func");
    TriggerEnable(libCPCM_gt_CT_GiftFightSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_GiftFightControl
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_GiftFightControl_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexGift;
    bool lv_playersPresent;
    bool lv_enemiesPresent;
    unitgroup lv_attackingForce;
    unit lv_indexAttacker;

    // Automatic Variable Declarations
    unitgroup auto350B59D5_g;
    int auto350B59D5_u;
    unitgroup autoB48D6460_g;
    int autoB48D6460_u;

    // Variable Initialization
    lv_attackingForce = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(0.1, c_timeAI);
        auto350B59D5_g = libCPCM_gv_cT_Gifts;
        auto350B59D5_u = UnitGroupCount(auto350B59D5_g, c_unitCountAll);
        for (;; auto350B59D5_u -= 1) {
            lv_indexGift = UnitGroupUnitFromEnd(auto350B59D5_g, auto350B59D5_u);
            if (lv_indexGift == null) { break; }
            lv_attackingForce = DataTableGetUnitGroup(true, ("CT_GiftAtk_" + IntToString(UnitGetTag(lv_indexGift))));
            if ((lv_attackingForce != null)) {
                AISetGroupScriptControlled(lv_attackingForce, false);
                autoB48D6460_g = lv_attackingForce;
                autoB48D6460_u = UnitGroupCount(autoB48D6460_g, c_unitCountAll);
                for (;; autoB48D6460_u -= 1) {
                    lv_indexAttacker = UnitGroupUnitFromEnd(autoB48D6460_g, autoB48D6460_u);
                    if (lv_indexAttacker == null) { break; }
                    if ((DistanceBetweenPoints(UnitGetPosition(lv_indexAttacker), UnitGetPosition(lv_indexGift)) >= libCPCM_gv_cTC_GiftCaptureRadius) && (UnitOrderCount(lv_indexAttacker) == 0)) {
                        libNtve_gf_AICast(lv_indexAttacker, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_indexGift)));
                    }

                }
            }

            if ((UnitGroupCount(UnitGroupAlliance(1, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lv_indexGift), libCPCM_gv_cTC_GiftCaptureRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                lv_playersPresent = true;
            }
            else {
                lv_playersPresent = false;
            }
            if ((UnitGroupCount(UnitGroupAlliance(1, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_indexGift), libCPCM_gv_cTC_GiftCaptureRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                lv_enemiesPresent = true;
            }
            else {
                lv_enemiesPresent = false;
            }
            if ((libCPCM_gf_CT_GiftState(lv_indexGift) == libCPCM_ge_CT_GiftState_CT_GiftStateSpawning)) {
                continue;
            }
            else if ((libCPCM_gf_CT_GiftState(lv_indexGift) == libCPCM_ge_CT_GiftState_CT_GiftStateStealing)) {
                libCPCM_gf_CT_GiftAddProgress(lv_indexGift, 1.0);
            }
            else if ((lv_enemiesPresent == true) && (lv_playersPresent == true)) {
                libCPCM_gf_CT_GiftSetState(lv_indexGift, libCPCM_ge_CT_GiftState_CT_GiftStateContested);
            }
            else if ((lv_enemiesPresent == true)) {
                libCPCM_gf_CT_GiftSetState(lv_indexGift, libCPCM_ge_CT_GiftState_CT_GiftStateEnemy);
                libCPCM_gf_CT_GiftAddProgress(lv_indexGift, 0.5);
            }
            else if ((lv_playersPresent == true)) {
                libCPCM_gf_CT_GiftSetState(lv_indexGift, libCPCM_ge_CT_GiftState_CT_GiftStatePlayer);
                libCPCM_gf_CT_GiftAddProgress(lv_indexGift, 0.5);
            }
            else if ((lv_playersPresent == false) && (lv_enemiesPresent == false)) {
                libCPCM_gf_CT_GiftSetState(lv_indexGift, libCPCM_ge_CT_GiftState_CT_GiftStateNeutral);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_GiftFightControl_Init () {
    libCPCM_gt_CT_GiftFightControl = TriggerCreate("libCPCM_gt_CT_GiftFightControl_Func");
    TriggerEnable(libCPCM_gt_CT_GiftFightControl, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_TempDamageReflectHealing
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_TempDamageReflectHealing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damageRemaining;
    fixed lv_healRemaining;
    unit lv_indexUnit;
    fixed lv_healAmount;
    fixed lv_healTotal;

    // Automatic Variable Declarations
    unitgroup autoA1E5BB5E_g;
    int autoA1E5BB5E_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(0.1, c_timeGame);
        autoA1E5BB5E_g = libCPCM_gv_cT_TempDamageReflectUnits;
        autoA1E5BB5E_u = UnitGroupCount(autoA1E5BB5E_g, c_unitCountAll);
        for (;; autoA1E5BB5E_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(autoA1E5BB5E_g, autoA1E5BB5E_u);
            if (lv_indexUnit == null) { break; }
            if (((UnitIsValid(lv_indexUnit) == false) || (UnitIsAlive(lv_indexUnit) == false))) {
                UnitGroupRemove(libCPCM_gv_cT_TempDamageReflectUnits, lv_indexUnit);
                continue;
            }

            lv_healRemaining = libCOMI_gf_MinimumDifficultyValueCoopReal(1.0, 1.0, 1.0, 1.0, 1.0, 1.0);
            lv_healTotal = lv_healRemaining;
            lv_healRemaining = MinF(lv_healRemaining, UnitGetCustomValue(lv_indexUnit, libCPCM_gv_cTC_TempDamageCustomIndex));
            lv_healAmount = MinF((UnitGetPropertyFixed(lv_indexUnit, c_unitPropLifeMax, c_unitPropCurrent) - UnitGetPropertyFixed(lv_indexUnit, c_unitPropLife, c_unitPropCurrent)), lv_healRemaining);
            if ((lv_healAmount > 0.0)) {
                UnitSetPropertyFixed(lv_indexUnit, c_unitPropLife, (UnitGetPropertyFixed(lv_indexUnit, c_unitPropLife, c_unitPropCurrent) + lv_healAmount));
            }

            lv_healRemaining -= lv_healAmount;
            lv_healAmount = MinF((UnitGetPropertyFixed(lv_indexUnit, c_unitPropShieldsMax, c_unitPropCurrent) - UnitGetPropertyFixed(lv_indexUnit, c_unitPropShields, c_unitPropCurrent)), lv_healRemaining);
            if ((lv_healAmount > 0.0)) {
                UnitSetPropertyFixed(lv_indexUnit, c_unitPropShields, (UnitGetPropertyFixed(lv_indexUnit, c_unitPropShields, c_unitPropCurrent) + lv_healAmount));
            }

            UnitSetCustomValue(lv_indexUnit, libCPCM_gv_cTC_TempDamageCustomIndex, (UnitGetCustomValue(lv_indexUnit, libCPCM_gv_cTC_TempDamageCustomIndex) - lv_healTotal));
            if ((UnitGetCustomValue(lv_indexUnit, libCPCM_gv_cTC_TempDamageCustomIndex) <= 0.0)) {
                UnitGroupRemove(libCPCM_gv_cT_TempDamageReflectUnits, lv_indexUnit);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_TempDamageReflectHealing_Init () {
    libCPCM_gt_CT_TempDamageReflectHealing = TriggerCreate("libCPCM_gt_CT_TempDamageReflectHealing_Func");
    TriggerEnable(libCPCM_gt_CT_TempDamageReflectHealing, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_PropagateClone
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_PropagateClone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLife, UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitSource), c_unitPropLife, c_unitPropCurrent));
    AISetUnitSuicide(EventPlayerEffectUsedUnit(c_effectUnitTarget), true);
    libCPCM_gf_CT_RegisterSpawnedUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    libCPCM_gf_CT_ApplyPropagatorPing(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_PropagateClone_Init () {
    libCPCM_gt_CT_PropagateClone = TriggerCreate("libCPCM_gt_CT_PropagateClone_Func");
    TriggerEnable(libCPCM_gt_CT_PropagateClone, false);
    TriggerAddEventPlayerEffectUsed(libCPCM_gt_CT_PropagateClone, 3, "MutatorPropagateModifyClone");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_PropagatorSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_PropagatorSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawningStructure;
    int lv_spawnAttempt;
    timer lv_spawnTimer;
    unit lv_indexReanimator;
    int lv_spawnCount;
    int lv_indexSpawn;

    // Automatic Variable Declarations
    int auto2BAA6B3D_ae;
    const int auto2BAA6B3D_ai = 1;
    const int auto4A782E52_ae = 100;
    const int auto4A782E52_ai = 1;

    // Variable Initialization
    lv_spawnTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((GameGetMissionTime() >= libCOMI_gf_MinimumDifficultyValueCoopReal(330.0, 280.0, 230.0, 190.0, 190.0, 190.0)))) {
        Wait(10.0, c_timeGame);
    }
    TimerStart(lv_spawnTimer, 5.0, false, c_timeAI);
    while (true) {
        Wait(10.0, c_timeAI);
        if ((TimerGetRemaining(lv_spawnTimer) > 0.0)) {
            continue;
        }

        if ((GameGetMissionTime() <= 700.0)) {
            lv_spawnCount = 1;
        }
        else if ((GameGetMissionTime() <= 1100.0)) {
            lv_spawnCount = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 2, 2);
        }
        else if ((GameGetMissionTime() <= 1400.0)) {
            lv_spawnCount = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 2, 3, 4, 4, 4);
        }
        else if (true) {
            lv_spawnCount = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 2, 4, 5, 5, 5);
        }
        auto2BAA6B3D_ae = lv_spawnCount;
        lv_indexSpawn = 1;
        for ( ; ( (auto2BAA6B3D_ai >= 0 && lv_indexSpawn <= auto2BAA6B3D_ae) || (auto2BAA6B3D_ai < 0 && lv_indexSpawn >= auto2BAA6B3D_ae) ) ; lv_indexSpawn += auto2BAA6B3D_ai ) {
            lv_spawnAttempt = 1;
            for ( ; ( (auto4A782E52_ai >= 0 && lv_spawnAttempt <= auto4A782E52_ae) || (auto4A782E52_ai < 0 && lv_spawnAttempt >= auto4A782E52_ae) ) ; lv_spawnAttempt += auto4A782E52_ai ) {
                lv_spawningStructure = UnitGroupRandomUnit(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", 1, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                if ((PointPathingIsConnected(UnitGetPosition(lv_spawningStructure), PlayerStartLocation(1)) == true)) {
                    break;
                }
                else {
                    lv_spawningStructure = null;
                }
            }
            if ((lv_spawningStructure == null)) {
                continue;
            }

            UnitCreate(1, "MutatorPropagator", 0, 3, UnitGetPosition(lv_spawningStructure), libNtve_gf_RandomAngle());
            libCPCM_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
            AISetUnitSuicide(UnitLastCreated(), true);
            libCPCM_gf_CT_ApplyPropagatorPing(UnitLastCreated());
        }
        SoundPlayForPlayer(SoundLink("UI_ZergWarning", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        if ((GameGetMissionTime() <= 500.0)) {
            TimerStart(lv_spawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(140.0, 120.0, 100.0, 80.0, 80.0, 80.0), false, c_timeAI);
        }
        else if ((GameGetMissionTime() <= 800.0)) {
            TimerStart(lv_spawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(120.0, 100.0, 75.0, 55.0, 55.0, 55.0), false, c_timeAI);
        }
        else if ((GameGetMissionTime() <= 1200.0)) {
            TimerStart(lv_spawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(120.0, 90.0, 70.0, 50.0, 50.0, 50.0), false, c_timeAI);
        }
        else if (true) {
            TimerStart(lv_spawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(120.0, 90.0, 55.0, 40.0, 40.0, 40.0), false, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_PropagatorSpawn_Init () {
    libCPCM_gt_CT_PropagatorSpawn = TriggerCreate("libCPCM_gt_CT_PropagatorSpawn_Func");
    TriggerEnable(libCPCM_gt_CT_PropagatorSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_KillBotsSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_KillBotsSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawningStructure;
    int lv_spawnAttempt;
    timer lv_spawnTimer;
    unit lv_indexReanimator;
    int lv_spawnCount;
    int lv_indexSpawn;
    int lv_killBotLevel;
    fixed lv_killBotPingSize;

    // Automatic Variable Declarations
    int auto452A0216_ae;
    const int auto452A0216_ai = 1;
    const int autoF52F27A0_ae = 100;
    const int autoF52F27A0_ai = 1;
    int autoA909C15E_val;

    // Variable Initialization
    lv_spawnTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((GameGetMissionTime() >= libCOMI_gf_MinimumDifficultyValueCoopReal(310.0, 290.0, 240.0, 200.0, 200.0, 200.0)))) {
        Wait(10.0, c_timeGame);
    }
    TimerStart(lv_spawnTimer, 5.0, false, c_timeAI);
    while (true) {
        Wait(10.0, c_timeAI);
        if ((TimerGetRemaining(lv_spawnTimer) > 0.0)) {
            continue;
        }

        if ((GameGetMissionTime() <= 400.0)) {
            lv_spawnCount = 1;
            lv_killBotLevel = 1;
        }
        else if ((GameGetMissionTime() <= 600.0)) {
            lv_spawnCount = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 2, 2);
            lv_killBotLevel = 1;
        }
        else if ((GameGetMissionTime() <= 850.0)) {
            lv_spawnCount = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 2, 2);
            lv_killBotLevel = 2;
        }
        else if ((GameGetMissionTime() <= 1150.0)) {
            lv_spawnCount = libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 3, 3, 3, 3);
            lv_killBotLevel = 2;
        }
        else if ((GameGetMissionTime() <= 1300.0)) {
            lv_spawnCount = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 2, 2);
            lv_killBotLevel = 3;
        }
        else if ((GameGetMissionTime() <= 1500.0)) {
            lv_spawnCount = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 3, 3, 3, 3);
            lv_killBotLevel = 3;
        }
        else if (true) {
            lv_spawnCount = libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 3, 4, 4, 4);
            lv_killBotLevel = 3;
        }
        auto452A0216_ae = lv_spawnCount;
        lv_indexSpawn = 1;
        for ( ; ( (auto452A0216_ai >= 0 && lv_indexSpawn <= auto452A0216_ae) || (auto452A0216_ai < 0 && lv_indexSpawn >= auto452A0216_ae) ) ; lv_indexSpawn += auto452A0216_ai ) {
            lv_spawnAttempt = 1;
            for ( ; ( (autoF52F27A0_ai >= 0 && lv_spawnAttempt <= autoF52F27A0_ae) || (autoF52F27A0_ai < 0 && lv_spawnAttempt >= autoF52F27A0_ae) ) ; lv_spawnAttempt += autoF52F27A0_ai ) {
                lv_spawningStructure = UnitGroupRandomUnit(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", 1, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                if ((PointPathingIsConnected(UnitGetPosition(lv_spawningStructure), PlayerStartLocation(1)) == true) && (libCPCM_gf_CT_NearbyCliffs(UnitGetPosition(lv_spawningStructure), 5.0) == false)) {
                    break;
                }
                else {
                    lv_spawningStructure = null;
                }
            }
            if ((lv_spawningStructure == null)) {
                continue;
            }

            autoA909C15E_val = lv_killBotLevel;
            if (autoA909C15E_val == 1) {
                UnitCreate(1, "MutatorMurderBot", 0, 3, UnitGetPosition(lv_spawningStructure), libNtve_gf_RandomAngle());
                lv_killBotPingSize = 0.4;
            }
            else if (autoA909C15E_val == 2) {
                UnitCreate(1, "MutatorDeathBot", 0, 3, UnitGetPosition(lv_spawningStructure), libNtve_gf_RandomAngle());
                lv_killBotPingSize = 0.45;
            }
            else if (autoA909C15E_val == 3) {
                UnitCreate(1, "MutatorKillBot", 0, 3, UnitGetPosition(lv_spawningStructure), libNtve_gf_RandomAngle());
                lv_killBotPingSize = 0.5;
            }
            else {
            }
            libCPCM_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
            AISetUnitSuicide(UnitLastCreated(), true);
            libNtve_gf_AICast(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PlayerStartLocation(RandomInt(1, 2))));
            UnitStatusBarOverride(UnitLastCreated(), c_unitStatusGroupAll);
            libCOMI_gf_CreatePingFacingAngleCoop(libCOOC_gf_HumanPlayers(), UnitGetPosition(UnitLastCreated()), 270.0, "PingTriangle", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
            PingSetScale(PingLastCreated(), lv_killBotPingSize);
            PingSetUnit(PingLastCreated(), UnitLastCreated());
            PingSetTooltip(PingLastCreated(), UnitGetName(UnitLastCreated()));
            libHots_gf_StorePingForUnit(UnitLastCreated(), 1, PingLastCreated());
            libCPCM_gf_CT_KillBotsUpdate(UnitLastCreated(), lv_killBotLevel);
        }
        SoundPlayForPlayer(SoundLink("UI_KillBotsWarningPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        if ((GameGetMissionTime() <= 500.0)) {
            TimerStart(lv_spawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(140.0, 120.0, 100.0, 80.0, 80.0, 80.0), false, c_timeAI);
        }
        else if ((GameGetMissionTime() <= 800.0)) {
            TimerStart(lv_spawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(120.0, 110.0, 85.0, 65.0, 65.0, 65.0), false, c_timeAI);
        }
        else if ((GameGetMissionTime() <= 1200.0)) {
            TimerStart(lv_spawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(120.0, 100.0, 80.0, 60.0, 60.0, 60.0), false, c_timeAI);
        }
        else if (true) {
            TimerStart(lv_spawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(120.0, 100.0, 70.0, 55.0, 55.0, 55.0), false, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_KillBotsSpawn_Init () {
    libCPCM_gt_CT_KillBotsSpawn = TriggerCreate("libCPCM_gt_CT_KillBotsSpawn_Func");
    TriggerEnable(libCPCM_gt_CT_KillBotsSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_BoomBotsSpawn
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_BoomBotsSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawningStructure;
    int lv_spawnAttempt;
    timer lv_spawnTimer;
    unit lv_indexReanimator;
    int lv_spawnCount;
    int lv_indexSpawn;

    // Automatic Variable Declarations
    int autoBDAB1935_ae;
    const int autoBDAB1935_ai = 1;
    const int auto940F532D_ae = 100;
    const int auto940F532D_ai = 1;

    // Variable Initialization
    lv_spawnTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((GameGetMissionTime() >= libCOMI_gf_MinimumDifficultyValueCoopReal(270.0, 220.0, 170.0, 130.0, 130.0, 130.0)))) {
        Wait(10.0, c_timeGame);
    }
    TimerStart(lv_spawnTimer, 5.0, false, c_timeAI);
    while (true) {
        Wait(10.0, c_timeAI);
        if ((TimerGetRemaining(lv_spawnTimer) > 0.0)) {
            continue;
        }

        if ((GameGetMissionTime() <= 720.0)) {
            lv_spawnCount = 1;
        }
        else if (true) {
            lv_spawnCount = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 2, 2);
        }
        autoBDAB1935_ae = lv_spawnCount;
        lv_indexSpawn = 1;
        for ( ; ( (autoBDAB1935_ai >= 0 && lv_indexSpawn <= autoBDAB1935_ae) || (autoBDAB1935_ai < 0 && lv_indexSpawn >= autoBDAB1935_ae) ) ; lv_indexSpawn += autoBDAB1935_ai ) {
            lv_spawnAttempt = 1;
            for ( ; ( (auto940F532D_ai >= 0 && lv_spawnAttempt <= auto940F532D_ae) || (auto940F532D_ai < 0 && lv_spawnAttempt >= auto940F532D_ae) ) ; lv_spawnAttempt += auto940F532D_ai ) {
                lv_spawningStructure = UnitGroupRandomUnit(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", 1, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                if ((PointPathingIsConnected(UnitGetPosition(lv_spawningStructure), PlayerStartLocation(1)) == true)) {
                    break;
                }
                else {
                    lv_spawningStructure = null;
                }
            }
            if ((lv_spawningStructure == null)) {
                continue;
            }

            UnitCreate(1, "MutatorBoomBot", 0, 3, UnitGetPosition(lv_spawningStructure), libNtve_gf_RandomAngle());
            libCPCM_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
            AISetUnitSuicide(UnitLastCreated(), true);
            libCPCM_gf_CT_ApplyBoomBotPing(UnitLastCreated());
            libCPCM_gf_CT_BoomBotsUpdate(UnitLastCreated());
        }
        SoundPlayForPlayer(SoundLink("TUIWarning", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        if ((GameGetMissionTime() <= 720.0)) {
            TimerStart(lv_spawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(140.0, 120.0, 100.0, 80.0, 80.0, 80.0), false, c_timeAI);
        }
        else if ((GameGetMissionTime() <= 1080.0)) {
            TimerStart(lv_spawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(130.0, 105.0, 77.5, 60.0, 60.0, 60.0), false, c_timeAI);
        }
        else if (true) {
            TimerStart(lv_spawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(120.0, 90.0, 55.0, 40.0, 40.0, 40.0), false, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_BoomBotsSpawn_Init () {
    libCPCM_gt_CT_BoomBotsSpawn = TriggerCreate("libCPCM_gt_CT_BoomBotsSpawn_Func");
    TriggerEnable(libCPCM_gt_CT_BoomBotsSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_BoomBotsInput
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_BoomBotsInput_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_boombothelper;
    int lv_remainingdigitcount;
    int lv_correctvalue;
    int lv_input;
    text lv_inputtext;
    int lv_customvalueindex;
    int lv_speedstacks;

    // Automatic Variable Declarations
    abilcmd auto63DFAD56_val;
    int autoDA4752E9_ae;
    const int autoDA4752E9_ai = 1;
    int auto78A9D12E_ae;
    const int auto78A9D12E_ai = 1;
    unitgroup auto7674DC0F_g;
    int auto7674DC0F_u;
    unit auto7674DC0F_var;

    // Variable Initialization
    lv_boombothelper = EventUnit();
    lv_remainingdigitcount = FixedToInt(UnitGetCustomValue(lv_boombothelper, libCPCM_gv_cT_BoomBotsIndexStart));
    lv_correctvalue = FixedToInt(UnitGetCustomValue(lv_boombothelper, (libCPCM_gv_cT_BoomBotsIndexStart+libCPCM_gv_cT_BoomBotsDigits[EventPlayer()]-lv_remainingdigitcount+1)));
    lv_speedstacks = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(EventPlayer()), 0, 1, 2, 4, 4, 4);

    // Actions
    if (!runActions) {
        return true;
    }

    auto63DFAD56_val = EventUnitAbility();
    if (auto63DFAD56_val == AbilityCommand("MutatorBoomBotDefuse", 0)) {
        lv_input = 1;
    }
    else if (auto63DFAD56_val == AbilityCommand("MutatorBoomBotDefuse", 1)) {
        lv_input = 2;
    }
    else if (auto63DFAD56_val == AbilityCommand("MutatorBoomBotDefuse", 2)) {
        lv_input = 3;
    }
    else if (auto63DFAD56_val == AbilityCommand("MutatorBoomBotDefuse", 3)) {
        lv_input = 4;
    }
    else if (auto63DFAD56_val == AbilityCommand("MutatorBoomBotDefuse", 4)) {
        lv_input = 5;
    }
    else if (auto63DFAD56_val == AbilityCommand("MutatorBoomBotDefuse", 5)) {
        lv_input = 6;
    }
    else if (auto63DFAD56_val == AbilityCommand("MutatorBoomBotDefuse", 6)) {
        lv_input = 7;
    }
    else if (auto63DFAD56_val == AbilityCommand("MutatorBoomBotDefuse", 7)) {
        lv_input = 8;
    }
    else if (auto63DFAD56_val == AbilityCommand("MutatorBoomBotDefuse", 8)) {
        lv_input = 9;
    }
    else {
        return true;
    }
    if ((lv_input == lv_correctvalue) && (lv_remainingdigitcount > 1)) {
        lv_remainingdigitcount -= 1;
        UnitSetCustomValue(lv_boombothelper, libCPCM_gv_cT_BoomBotsIndexStart, lv_remainingdigitcount);
        TextExpressionSetToken("Param/Expression/lib_CPCM_45FE54DD", "A", FixedToText(UnitGetCustomValue(lv_boombothelper, (libCPCM_gv_cT_BoomBotsIndexStart+1)), 0));
        lv_inputtext = TextExpressionAssemble("Param/Expression/lib_CPCM_45FE54DD");
        autoDA4752E9_ae = (libCPCM_gv_cT_BoomBotsIndexStart + libCPCM_gv_cT_BoomBotsDigits[EventPlayer()] - lv_remainingdigitcount);
        lv_customvalueindex = (libCPCM_gv_cT_BoomBotsIndexStart + 2);
        for ( ; ( (autoDA4752E9_ai >= 0 && lv_customvalueindex <= autoDA4752E9_ae) || (autoDA4752E9_ai < 0 && lv_customvalueindex >= autoDA4752E9_ae) ) ; lv_customvalueindex += autoDA4752E9_ai ) {
            TextExpressionSetToken("Param/Expression/lib_CPCM_D6FD92A0", "A", lv_inputtext);
            TextExpressionSetToken("Param/Expression/lib_CPCM_D6FD92A0", "B", FixedToText(UnitGetCustomValue(lv_boombothelper, lv_customvalueindex), 0));
            lv_inputtext = TextExpressionAssemble("Param/Expression/lib_CPCM_D6FD92A0");
        }
        TextExpressionSetToken("Param/Expression/lib_CPCM_49D31706", "A", lv_inputtext);
        lv_inputtext = TextExpressionAssemble("Param/Expression/lib_CPCM_49D31706");
        auto78A9D12E_ae = (libCPCM_gv_cT_BoomBotsIndexStart + libCPCM_gv_cT_BoomBotsDigits[EventPlayer()]);
        lv_customvalueindex = (libCPCM_gv_cT_BoomBotsIndexStart + libCPCM_gv_cT_BoomBotsDigits[EventPlayer()] - lv_remainingdigitcount + 1);
        for ( ; ( (auto78A9D12E_ai >= 0 && lv_customvalueindex <= auto78A9D12E_ae) || (auto78A9D12E_ai < 0 && lv_customvalueindex >= auto78A9D12E_ae) ) ; lv_customvalueindex += auto78A9D12E_ai ) {
            TextExpressionSetToken("Param/Expression/lib_CPCM_263CE99A", "A", lv_inputtext);
            lv_inputtext = TextExpressionAssemble("Param/Expression/lib_CPCM_263CE99A");
        }
        TextExpressionSetToken("Param/Expression/lib_CPCM_C6835D77", "A", lv_inputtext);
        lv_inputtext = TextExpressionAssemble("Param/Expression/lib_CPCM_C6835D77");
        TextExpressionSetToken("Param/Expression/lib_CPCM_FA84EE90", "A", lv_inputtext);
        TextTagSetText(libHots_gf_TextTagForUnit(lv_boombothelper, libCPCM_gv_cT_BoomBotsInputTextTagIndex), TextExpressionAssemble("Param/Expression/lib_CPCM_FA84EE90"));
    }
    else if ((lv_input == lv_correctvalue)) {
        UnitRemove(lv_boombothelper);
    }
    else if (true) {
        UnitModifyCooldown(lv_boombothelper, "Abil/MutatorBoomBotDefuse", libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(EventPlayer()), 1.0, 3.0, 5.0, 8.0, 8.0, 8.0), c_cooldownOperationDefault);
        if ((lv_speedstacks > 0)) {
            auto7674DC0F_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_boombothelper), 0.1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto7674DC0F_u = UnitGroupCount(auto7674DC0F_g, c_unitCountAll);
            for (;; auto7674DC0F_u -= 1) {
                auto7674DC0F_var = UnitGroupUnitFromEnd(auto7674DC0F_g, auto7674DC0F_u);
                if (auto7674DC0F_var == null) { break; }
                UnitBehaviorAdd(auto7674DC0F_var, "MutatorBoomBotSpeedUp", auto7674DC0F_var, lv_speedstacks);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_BoomBotsInput_Init () {
    libCPCM_gt_CT_BoomBotsInput = TriggerCreate("libCPCM_gt_CT_BoomBotsInput_Func");
    TriggerEnable(libCPCM_gt_CT_BoomBotsInput, false);
    TriggerAddEventUnitAbility(libCPCM_gt_CT_BoomBotsInput, null, AbilityCommand("MutatorBoomBotDefuse", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libCPCM_gt_CT_BoomBotsInput, null, AbilityCommand("MutatorBoomBotDefuse", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libCPCM_gt_CT_BoomBotsInput, null, AbilityCommand("MutatorBoomBotDefuse", 2), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libCPCM_gt_CT_BoomBotsInput, null, AbilityCommand("MutatorBoomBotDefuse", 3), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libCPCM_gt_CT_BoomBotsInput, null, AbilityCommand("MutatorBoomBotDefuse", 4), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libCPCM_gt_CT_BoomBotsInput, null, AbilityCommand("MutatorBoomBotDefuse", 5), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libCPCM_gt_CT_BoomBotsInput, null, AbilityCommand("MutatorBoomBotDefuse", 6), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libCPCM_gt_CT_BoomBotsInput, null, AbilityCommand("MutatorBoomBotDefuse", 7), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libCPCM_gt_CT_BoomBotsInput, null, AbilityCommand("MutatorBoomBotDefuse", 8), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeHardenedWill
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeHardenedWill_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto4B9A3BE5_g;
    int auto4B9A3BE5_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickHardenedWill)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitCreation, true);
    auto4B9A3BE5_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", 1, c_unitAllianceEnemy, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto4B9A3BE5_u = UnitGroupCount(auto4B9A3BE5_g, c_unitCountAll);
    for (;; auto4B9A3BE5_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto4B9A3BE5_g, auto4B9A3BE5_u);
        if (lv_indexUnit == null) { break; }
        libCPCM_gf_CT_ApplyHardenedWill(lv_indexUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeHardenedWill_Init () {
    libCPCM_gt_CT_InitializeHardenedWill = TriggerCreate("libCPCM_gt_CT_InitializeHardenedWill_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeInspiration
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeInspiration_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto493877AD_g;
    int auto493877AD_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickInspiration)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitCreation, true);
    auto493877AD_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", 1, c_unitAllianceEnemy, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto493877AD_u = UnitGroupCount(auto493877AD_g, c_unitCountAll);
    for (;; auto493877AD_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto493877AD_g, auto493877AD_u);
        if (lv_indexUnit == null) { break; }
        libCPCM_gf_CT_ApplyInspiration(lv_indexUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeInspiration_Init () {
    libCPCM_gt_CT_InitializeInspiration = TriggerCreate("libCPCM_gt_CT_InitializeInspiration_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeAllCasters
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeAllCasters_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto950D76CE_g;
    int auto950D76CE_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitCreation, true);
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_OwnerChanges, true);
    auto950D76CE_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", 1, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto950D76CE_u = UnitGroupCount(auto950D76CE_g, c_unitCountAll);
    for (;; auto950D76CE_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto950D76CE_g, auto950D76CE_u);
        if (lv_indexUnit == null) { break; }
        libCPCM_gf_CT_ApplyAllSpellsEnergy(lv_indexUnit);
    }
    TriggerExecute(libCPCM_gt_CT_AllCastersPeriodicCast, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeAllCasters_Init () {
    libCPCM_gt_CT_InitializeAllCasters = TriggerCreate("libCPCM_gt_CT_InitializeAllCasters_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeAvenger
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeAvenger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickAvenger)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, true);
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_OwnerChanges, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeAvenger_Init () {
    libCPCM_gt_CT_InitializeAvenger = TriggerCreate("libCPCM_gt_CT_InitializeAvenger_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeLongRange
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeLongRange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;
    string lv_stringUnitID;
    string lv_stringWeapon;
    fixed lv_sightRange;
    fixed lv_weaponRange;
    int lv_i;
    int lv_k;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoA7397C35_g;
    int autoEC1CF638_ae;
    const int autoEC1CF638_ai = 1;
    playergroup autoCDEBF809_g;
    int auto079B7317_ae;
    const int auto079B7317_ai = 1;
    playergroup auto83A9BAEB_g;

    // Variable Initialization
    lv_stringUnitID = "";
    lv_stringWeapon = "";

    // Actions
    if (!runActions) {
        return true;
    }

    autoA7397C35_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoA7397C35_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        TechTreeUpgradeAddLevel(lv_indexPlayer, "MutatorLongRange", 1);
    }
    autoEC1CF638_ae = CatalogEntryCount(c_gameCatalogUnit);
    lv_i = 1;
    for ( ; ( (autoEC1CF638_ai >= 0 && lv_i <= autoEC1CF638_ae) || (autoEC1CF638_ai < 0 && lv_i >= autoEC1CF638_ae) ) ; lv_i += autoEC1CF638_ai ) {
        lv_stringUnitID = (CatalogEntryGet(c_gameCatalogUnit, lv_i));
        lv_sightRange = (StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, lv_stringUnitID, "Sight", 0)) + 3.0);
        if ((lv_sightRange > 32.0)) {
            lv_sightRange = 32.0;
        }

        autoCDEBF809_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoCDEBF809_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, lv_stringUnitID, "Sight", lv_indexPlayer, FixedToString(lv_sightRange, 2));
        }
        if ((CatalogFieldValueCount(c_gameCatalogUnit, lv_stringUnitID, "WeaponArray", 0) > 0)) {
            auto079B7317_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_stringUnitID, "WeaponArray", 0) - 1);
            lv_k = 0;
            for ( ; ( (auto079B7317_ai >= 0 && lv_k <= auto079B7317_ae) || (auto079B7317_ai < 0 && lv_k >= auto079B7317_ae) ) ; lv_k += auto079B7317_ai ) {
                lv_stringWeapon = CatalogFieldValueGet(c_gameCatalogUnit, lv_stringUnitID, "WeaponArray[" + IntToString(lv_k) + "].Link", 0);
                if ((lv_stringWeapon != "")) {
                    if ((CatalogEntryIsValid(c_gameCatalogWeapon, lv_stringWeapon) == true)) {
                        if ((StringToInt(CatalogFieldValueGet(c_gameCatalogWeapon, lv_stringWeapon, "Options[" + IntToString(2) + "]", 0)) == 0)) {
                            lv_weaponRange = (StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, lv_stringWeapon, "Range", 0)) + 3.0);
                            if ((lv_weaponRange > 499.0)) {
                                lv_weaponRange = 499.0;
                            }

                            auto83A9BAEB_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
                            lv_indexPlayer = -1;
                            while (true) {
                                lv_indexPlayer = PlayerGroupNextPlayer(auto83A9BAEB_g, lv_indexPlayer);
                                if (lv_indexPlayer < 0) { break; }
                                CatalogFieldValueSet(c_gameCatalogWeapon, lv_stringWeapon, "Range", lv_indexPlayer, FixedToString(lv_weaponRange, 2));
                                CatalogFieldValueSet(c_gameCatalogWeapon, lv_stringWeapon, "MinScanRange", lv_indexPlayer, FixedToString((lv_weaponRange + 0.5), 2));
                            }
                        }

                    }

                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeLongRange_Init () {
    libCPCM_gt_CT_InitializeLongRange = TriggerCreate("libCPCM_gt_CT_InitializeLongRange_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializePermaCloak
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializePermaCloak_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto9D04B5C9_g;
    int auto9D04B5C9_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitCreation, true);
    auto9D04B5C9_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", 1, c_unitAllianceEnemy, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto9D04B5C9_u = UnitGroupCount(auto9D04B5C9_g, c_unitCountAll);
    for (;; auto9D04B5C9_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto9D04B5C9_g, auto9D04B5C9_u);
        if (lv_indexUnit == null) { break; }
        libCPCM_gf_CT_ApplyPermaCloak(lv_indexUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializePermaCloak_Init () {
    libCPCM_gt_CT_InitializePermaCloak = TriggerCreate("libCPCM_gt_CT_InitializePermaCloak_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeUnitSpeed
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeUnitSpeed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto8F1965DB_g;
    int auto8F1965DB_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitCreation, true);
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_OwnerChanges, true);
    TriggerEnable(libCPCM_gt_CT_SpeedFreaksMorphCleanup, true);
    auto8F1965DB_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", 1, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8F1965DB_u = UnitGroupCount(auto8F1965DB_g, c_unitCountAll);
    for (;; auto8F1965DB_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto8F1965DB_g, auto8F1965DB_u);
        if (lv_indexUnit == null) { break; }
        libCPCM_gf_CT_ApplyUnitSpeed(lv_indexUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeUnitSpeed_Init () {
    libCPCM_gt_CT_InitializeUnitSpeed = TriggerCreate("libCPCM_gt_CT_InitializeUnitSpeed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeMomentOfSilence
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeMomentOfSilence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickMomentOfSilence)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeMomentOfSilence_Init () {
    libCPCM_gt_CT_InitializeMomentOfSilence = TriggerCreate("libCPCM_gt_CT_InitializeMomentOfSilence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeDeathPull
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeDeathPull_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickDeathPull)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeDeathPull_Init () {
    libCPCM_gt_CT_InitializeDeathPull = TriggerCreate("libCPCM_gt_CT_InitializeDeathPull_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeFireworks
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeFireworks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickFireworks)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeFireworks_Init () {
    libCPCM_gt_CT_InitializeFireworks = TriggerCreate("libCPCM_gt_CT_InitializeFireworks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeKillKarma
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeKillKarma_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickKillKarma)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeKillKarma_Init () {
    libCPCM_gt_CT_InitializeKillKarma = TriggerCreate("libCPCM_gt_CT_InitializeKillKarma_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeStructureSteal
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeStructureSteal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoB4696F1F_g;
    playergroup autoE11FE1E0_g;
    unitgroup auto8655DBAF_g;
    int auto8655DBAF_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickStructureSteal)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitCreation, true);
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_OwnerChanges, true);
    TriggerExecute(libCPCM_gt_CT_StructureStealLogic, true, false);
    TriggerEnable(libCPCM_gt_CT_StructureStealUnitTrained, true);
    TriggerEnable(libCPCM_gt_CT_StructureStealTrigger, true);
    autoB4696F1F_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoB4696F1F_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        TechTreeUnitAllow(lv_indexPlayer, "HydraliskStetmann", false);
        TechTreeUnitAllow(lv_indexPlayer, "CorruptorStetmann", false);
        TechTreeUnitAllow(lv_indexPlayer, "ZerglingStetmann", false);
        TechTreeUnitAllow(lv_indexPlayer, "UltraliskStetmann", false);
        TechTreeUnitAllow(lv_indexPlayer, "InfestorStetmann", false);
    }
    autoE11FE1E0_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoE11FE1E0_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        auto8655DBAF_g = UnitGroup(null, lv_indexPlayer, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0);
        auto8655DBAF_u = UnitGroupCount(auto8655DBAF_g, c_unitCountAll);
        for (;; auto8655DBAF_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(auto8655DBAF_g, auto8655DBAF_u);
            if (lv_indexUnit == null) { break; }
            libCPCM_gf_CT_ApplyStructureStealBehavior(lv_indexUnit);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeStructureSteal_Init () {
    libCPCM_gt_CT_InitializeStructureSteal = TriggerCreate("libCPCM_gt_CT_InitializeStructureSteal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeReanimators
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeReanimators_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickReanimator)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, true);
    TriggerEnable(libCPCM_gt_CT_ReanimateUsed, true);
    TriggerExecute(libCPCM_gt_CT_ReanimatorSpawn, true, false);
    TriggerExecute(libCPCM_gt_CT_ReanimatorLogic, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeReanimators_Init () {
    libCPCM_gt_CT_InitializeReanimators = TriggerCreate("libCPCM_gt_CT_InitializeReanimators_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeJustDie
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeJustDie_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    unit lv_indexUnit;

    // Automatic Variable Declarations
    playergroup auto58757657_g;
    unitgroup autoEC3C71DF_g;
    int autoEC3C71DF_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitCreation, true);
    auto58757657_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto58757657_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        TechTreeUpgradeAddLevel(lv_indexPlayer, "MutatorJustDie", 1);
    }
    autoEC3C71DF_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", 1, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEC3C71DF_u = UnitGroupCount(autoEC3C71DF_g, c_unitCountAll);
    for (;; autoEC3C71DF_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoEC3C71DF_g, autoEC3C71DF_u);
        if (lv_indexUnit == null) { break; }
        libCPCM_gf_CT_ApplyJustDie(lv_indexUnit);
    }
    TriggerEnable(libCPCM_gt_CT_JustDiePolarityInteraction, true);
    if ((libCOOC_gf_CC_CurrentMap() == "AC_TarsonisTrain")) {
        TriggerEnable(libCPCM_gt_CT_JustDieTrainHealth, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeJustDie_Init () {
    libCPCM_gt_CT_InitializeJustDie = TriggerCreate("libCPCM_gt_CT_InitializeJustDie_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeDeathFire
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeDeathFire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickDeathFire)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeDeathFire_Init () {
    libCPCM_gt_CT_InitializeDeathFire = TriggerCreate("libCPCM_gt_CT_InitializeDeathFire_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeHybridDeathNuke
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeHybridDeathNuke_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickHybridNuke)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeHybridDeathNuke_Init () {
    libCPCM_gt_CT_InitializeHybridDeathNuke = TriggerCreate("libCPCM_gt_CT_InitializeHybridDeathNuke_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeDeathAOE
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeDeathAOE_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickSelfDestruction)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeDeathAOE_Init () {
    libCPCM_gt_CT_InitializeDeathAOE = TriggerCreate("libCPCM_gt_CT_InitializeDeathAOE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeSpawnInfested
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeSpawnInfested_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickWalkingInfested)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeSpawnInfested_Init () {
    libCPCM_gt_CT_InitializeSpawnInfested = TriggerCreate("libCPCM_gt_CT_InitializeSpawnInfested_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeSpawnBroodling
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeSpawnBroodling_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickAlienIncubation)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeSpawnBroodling_Init () {
    libCPCM_gt_CT_InitializeSpawnBroodling = TriggerCreate("libCPCM_gt_CT_InitializeSpawnBroodling_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeBoomBots
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeBoomBots_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int auto3A6C0CA0_ae = 2;
    const int auto3A6C0CA0_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickBoomBots)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, true);
    lv_player = 1;
    for ( ; ( (auto3A6C0CA0_ai >= 0 && lv_player <= auto3A6C0CA0_ae) || (auto3A6C0CA0_ai < 0 && lv_player >= auto3A6C0CA0_ae) ) ; lv_player += auto3A6C0CA0_ai ) {
        libCPCM_gv_cT_BoomBotsDigits[lv_player] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_player), 1, 2, 3, 4, 4, 4);
    }
    libCPCM_gv_cT_BoomBotCleanupEnabled = true;
    TriggerEnable(libCPCM_gt_CT_BoomBotsInput, true);
    TriggerExecute(libCPCM_gt_CT_BoomBotsSpawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeBoomBots_Init () {
    libCPCM_gt_CT_InitializeBoomBots = TriggerCreate("libCPCM_gt_CT_InitializeBoomBots_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeKillBots
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeKillBots_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCPCM_gt_CT_KillBotsSpawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeKillBots_Init () {
    libCPCM_gt_CT_InitializeKillBots = TriggerCreate("libCPCM_gt_CT_InitializeKillBots_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializePropagate
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializePropagate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogReferenceSet("Unit,MutatorPropagator,LifeStart", 3, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(200.0, 300.0, 350.0, 450.0, 450.0, 450.0), c_fixedPrecisionAny));
    CatalogReferenceSet("Unit,MutatorPropagator,LifeMax", 3, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(200.0, 300.0, 350.0, 450.0, 450.0, 450.0), c_fixedPrecisionAny));
    TriggerEnable(libCPCM_gt_CT_PropagateClone, true);
    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickPropagator)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, true);
    libCPCM_gv_cT_PropagatorCleanupEnabled = true;
    TriggerExecute(libCPCM_gt_CT_PropagatorSpawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializePropagate_Init () {
    libCPCM_gt_CT_InitializePropagate = TriggerCreate("libCPCM_gt_CT_InitializePropagate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeHeroesFromTheStorm
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeHeroesFromTheStorm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    fixed lv_raynorLife;
    fixed lv_tychusLife;
    fixed lv_dehakaLife;
    fixed lv_karaxLife;
    fixed lv_karaxShields;
    fixed lv_novaLife;
    fixed lv_zagaraLife;
    fixed lv_artanisLife;
    fixed lv_artanisShields;
    fixed lv_zeratulLife;
    fixed lv_zertaulShields;
    fixed lv_kerriganLife;
    int lv_heroIndex;

    // Automatic Variable Declarations
    const int autoB7A261C5_ae = libCPCM_gv_cTC_AmonHeroMaxHeroTypes;
    const int autoB7A261C5_ai = 1;
    string auto5126D4D6_val;
    const int autoC4B64E2A_ae = libCOMI_gv_cMC_CoopAI_HighestPlayerIndex;
    const int autoC4B64E2A_ai = 1;

    // Variable Initialization
    lv_raynorLife = 1000.0;
    lv_tychusLife = 1000.0;
    lv_dehakaLife = 1500.0;
    lv_karaxLife = 750.0;
    lv_karaxShields = 750.0;
    lv_novaLife = 2250.0;
    lv_zagaraLife = 2250.0;
    lv_artanisLife = 2000.0;
    lv_artanisShields = 2000.0;
    lv_zeratulLife = 2000.0;
    lv_zertaulShields = 2000.0;
    lv_kerriganLife = 5000.0;

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickHeroesFromTheStorm)] = true;
    libCPCM_gv_cT_AmonHeroUnitTypeArray[1] = "MutatorAmonRaynor";
    libCPCM_gv_cT_AmonHeroUnitTypeArray[2] = "MutatorAmonTychus";
    libCPCM_gv_cT_AmonHeroUnitTypeArray[3] = "MutatorAmonDehaka";
    libCPCM_gv_cT_AmonHeroUnitTypeArray[4] = "MutatorAmonKarax";
    libCPCM_gv_cT_AmonHeroUnitTypeArray[5] = "MutatorAmonNova";
    libCPCM_gv_cT_AmonHeroUnitTypeArray[6] = "MutatorAmonZagara";
    libCPCM_gv_cT_AmonHeroUnitTypeArray[7] = "MutatorAmonZeratul";
    libCPCM_gv_cT_AmonHeroUnitTypeArray[8] = "MutatorAmonArtanis";
    libCPCM_gv_cT_AmonHeroUnitTypeArray[9] = "MutatorAmonKerrigan";
    lv_heroIndex = 1;
    for ( ; ( (autoB7A261C5_ai >= 0 && lv_heroIndex <= autoB7A261C5_ae) || (autoB7A261C5_ai < 0 && lv_heroIndex >= autoB7A261C5_ae) ) ; lv_heroIndex += autoB7A261C5_ai ) {
        auto5126D4D6_val = libCPCM_gv_cT_AmonHeroUnitTypeArray[lv_heroIndex];
        if (auto5126D4D6_val == "MutatorAmonTychus") {
            libCPCM_gv_cT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonTychus_BirthDialog", c_soundIndexAny);
        }
        else if (auto5126D4D6_val == "MutatorAmonRaynor") {
            libCPCM_gv_cT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonRaynor_BirthDialog", c_soundIndexAny);
        }
        else if (auto5126D4D6_val == "MutatorAmonDehaka") {
            libCPCM_gv_cT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonDehaka_BirthDialog", c_soundIndexAny);
        }
        else if (auto5126D4D6_val == "MutatorAmonKarax") {
            libCPCM_gv_cT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonKarax_BirthDialog", c_soundIndexAny);
        }
        else if (auto5126D4D6_val == "MutatorAmonNova") {
            libCPCM_gv_cT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonNova_BirthDialog", c_soundIndexAny);
        }
        else if (auto5126D4D6_val == "MutatorAmonZagara") {
            libCPCM_gv_cT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonZagara_BirthDialog", c_soundIndexAny);
        }
        else if (auto5126D4D6_val == "MutatorAmonArtanis") {
            libCPCM_gv_cT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonArtanis_BirthDialog", c_soundIndexAny);
        }
        else if (auto5126D4D6_val == "MutatorAmonZeratul") {
            libCPCM_gv_cT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonZeratul_BirthDialog", c_soundIndexAny);
        }
        else if (auto5126D4D6_val == "MutatorAmonKerrigan") {
            libCPCM_gv_cT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonKerrigan_BirthDialog", c_soundIndexAny);
        }
        else {
        }
    }
    lv_player = 3;
    for ( ; ( (autoC4B64E2A_ai >= 0 && lv_player <= autoC4B64E2A_ae) || (autoC4B64E2A_ai < 0 && lv_player >= autoC4B64E2A_ae) ) ; lv_player += autoC4B64E2A_ai ) {
        if ((PlayerType(lv_player) == c_playerTypeComputer)) {
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonRaynor", "LifeMax", lv_player, FixedToString(lv_raynorLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonRaynor", "LifeStart", lv_player, FixedToString(lv_raynorLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonTychus", "LifeMax", lv_player, FixedToString(lv_tychusLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonTychus", "LifeStart", lv_player, FixedToString(lv_tychusLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonDehaka", "LifeMax", lv_player, FixedToString(lv_dehakaLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonDehaka", "LifeStart", lv_player, FixedToString(lv_dehakaLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKarax", "LifeMax", lv_player, FixedToString(lv_karaxLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKarax", "LifeStart", lv_player, FixedToString(lv_karaxLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKarax", "ShieldsMax", lv_player, FixedToString(lv_karaxShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKarax", "ShieldsStart", lv_player, FixedToString(lv_karaxShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonNova", "LifeMax", lv_player, FixedToString(lv_novaLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonNova", "LifeStart", lv_player, FixedToString(lv_novaLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZagara", "LifeMax", lv_player, FixedToString(lv_zagaraLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZagara", "LifeStart", lv_player, FixedToString(lv_zagaraLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonArtanis", "LifeMax", lv_player, FixedToString(lv_artanisLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonArtanis", "LifeStart", lv_player, FixedToString(lv_artanisLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonArtanis", "ShieldsMax", lv_player, FixedToString(lv_artanisShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonArtanis", "ShieldsStart", lv_player, FixedToString(lv_artanisShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZeratul", "LifeMax", lv_player, FixedToString(lv_zeratulLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZeratul", "LifeStart", lv_player, FixedToString(lv_zeratulLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZeratul", "ShieldsMax", lv_player, FixedToString(lv_zertaulShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZeratul", "ShieldsStart", lv_player, FixedToString(lv_zertaulShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKerrigan", "LifeMax", lv_player, FixedToString(lv_kerriganLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKerrigan", "LifeStart", lv_player, FixedToString(lv_kerriganLife, c_fixedPrecisionAny));
        }

    }
    TriggerExecute(libCPCM_gt_CT_AmonHeroPool_Tracker, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeHeroesFromTheStorm_Init () {
    libCPCM_gt_CT_InitializeHeroesFromTheStorm = TriggerCreate("libCPCM_gt_CT_InitializeHeroesFromTheStorm_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeUndyingEvil
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeUndyingEvil_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorHybridImmortal", 0, 3, PlayerStartLocation((3 + RandomInt(0, 1))));
    libCOMI_gf_CreatePingFacingAngleCoop(libCOOC_gf_HumanPlayers(), UnitGetPosition(UnitLastCreated()), 270.0, "PingBoss", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetScale(PingLastCreated(), 0.6);
    PingSetUnit(PingLastCreated(), UnitLastCreated());
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_CPCM_5766F614"));
    libHots_gf_StorePingForUnit(UnitLastCreated(), 1, PingLastCreated());
    AISetUnitSuicide(UnitLastCreated(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeUndyingEvil_Init () {
    libCPCM_gt_CT_InitializeUndyingEvil = TriggerCreate("libCPCM_gt_CT_InitializeUndyingEvil_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeMissileBarrage
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeMissileBarrage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCPCM_gt_CT_MissileBarrage, true, false);
    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickMissileMadness)] = true;
    libCPCM_gv_cT_MissileCleanupEnabled = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitCreation, true);
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeMissileBarrage_Init () {
    libCPCM_gt_CT_InitializeMissileBarrage = TriggerCreate("libCPCM_gt_CT_InitializeMissileBarrage_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeMineFields
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeMineFields_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    int lv_maxSpawn;
    int lv_maxSpawnAttempts;
    int lv_spawnCount;
    int lv_extraSpawn;
    int lv_spawnAttempt;
    unit lv_monster;
    string lv_monsterType;
    string lv_monsterType2;
    int lv_widowMineSpawn;
    int lv_spiderMineSpawn;
    point lv_mineSpawnPoint;
    unit lv_mineInBase;

    // Automatic Variable Declarations
    unitgroup autoF11D0911_g;
    int autoF11D0911_u;
    unit autoF11D0911_var;
    unitgroup auto408831C5_g;
    int auto408831C5_u;
    unit auto408831C5_var;

    // Variable Initialization
    lv_maxSpawn = 50;
    lv_maxSpawnAttempts = 1000;
    lv_monsterType = "WidowMineBurrowed";
    lv_monsterType2 = "MutatorSpiderMine";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_maxSpawn = libCOMI_gf_MinimumDifficultyValueCoopInteger(10, 15, 20, 25, 100, 100);
    libNtve_gf_SetUpgradeLevelForPlayer(3, "WidowMakerStrongerMines", 1);
    while ((lv_spawnCount <= lv_maxSpawn) && (lv_spawnAttempt <= lv_maxSpawnAttempts)) {
        lv_spawnPoint = RegionRandomPoint(RegionEntireMap());
        if ((PointPathingIsConnected(lv_spawnPoint, PlayerStartLocation(1)) == true) && (PathingType(lv_spawnPoint) == c_pathingGround) && (VisIsVisibleForPlayer(1, lv_spawnPoint) == false) && (libCOOC_gf_CC_SpawnAllowedAtPoint(lv_spawnPoint) == true) && (UnitCount(null, c_playerAny, RegionCircle(lv_spawnPoint, 1.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount(null, c_playerAny, RegionCircle(lv_spawnPoint, 10.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCountAlliance(1, c_unitAllianceEnemy, RegionCircle(lv_spawnPoint, 25.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0) && (DistanceBetweenPoints(lv_spawnPoint, PlayerStartLocation(1)) >= 30.0) && (DistanceBetweenPoints(lv_spawnPoint, PlayerStartLocation(2)) >= 30.0) && (UnitCount("CelestialLock", c_playerAny, RegionCircle(lv_spawnPoint, 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount("WidowMineBurrowed", c_playerAny, RegionCircle(lv_spawnPoint, 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount("SpiderMineBurrowed", c_playerAny, RegionCircle(lv_spawnPoint, 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount("DuelBubbleUnit", c_playerAny, RegionCircle(lv_spawnPoint, 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0)) {
            lv_widowMineSpawn = 0;
            lv_spiderMineSpawn = 0;
            while ((lv_widowMineSpawn < 5)) {
                lv_mineSpawnPoint = RegionRandomPoint(RegionCircle(lv_spawnPoint, 5.0));
                if ((libCOOC_gf_CC_SpawnAllowedAtPoint(lv_mineSpawnPoint) == true) && (PathingType(lv_mineSpawnPoint) == c_pathingGround)) {
                    lv_widowMineSpawn = (lv_widowMineSpawn + 1);
                    UnitCreate(1, lv_monsterType, 0, 3, lv_mineSpawnPoint, libNtve_gf_RandomAngle());
                    libCPCM_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
                }

            }
            while ((lv_spiderMineSpawn < 7)) {
                lv_mineSpawnPoint = RegionRandomPoint(RegionCircle(lv_spawnPoint, 5.0));
                if ((libCOOC_gf_CC_SpawnAllowedAtPoint(lv_mineSpawnPoint) == true) && (PathingType(lv_mineSpawnPoint) == c_pathingGround)) {
                    lv_spiderMineSpawn = (lv_spiderMineSpawn + 1);
                    UnitCreate(1, lv_monsterType2, 0, 3, lv_mineSpawnPoint, libNtve_gf_RandomAngle());
                    libCPCM_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
                }

            }
            lv_spawnCount += 1;
        }
        else {
            lv_spawnAttempt += 1;
        }
    }
    autoF11D0911_g = UnitGroup(null, 3, RegionCircle(PlayerStartLocation(1), 30.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF11D0911_u = UnitGroupCount(autoF11D0911_g, c_unitCountAll);
    for (;; autoF11D0911_u -= 1) {
        autoF11D0911_var = UnitGroupUnitFromEnd(autoF11D0911_g, autoF11D0911_u);
        if (autoF11D0911_var == null) { break; }
        if (((UnitGetType(autoF11D0911_var) == lv_monsterType) || (UnitGetType(autoF11D0911_var) == lv_monsterType2))) {
            UnitKill(autoF11D0911_var);
        }

    }
    auto408831C5_g = UnitGroup(null, 3, RegionCircle(PlayerStartLocation(2), 30.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto408831C5_u = UnitGroupCount(auto408831C5_g, c_unitCountAll);
    for (;; auto408831C5_u -= 1) {
        auto408831C5_var = UnitGroupUnitFromEnd(auto408831C5_g, auto408831C5_u);
        if (auto408831C5_var == null) { break; }
        if (((UnitGetType(auto408831C5_var) == lv_monsterType) || (UnitGetType(auto408831C5_var) == lv_monsterType2))) {
            UnitKill(auto408831C5_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeMineFields_Init () {
    libCPCM_gt_CT_InitializeMineFields = TriggerCreate("libCPCM_gt_CT_InitializeMineFields_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeVoidRifts
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeVoidRifts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCPCM_gt_CT_VoidRiftUnitMade, true);
    TriggerExecute(libCPCM_gt_CT_VoidRiftSpawn, true, false);
    TriggerExecute(libCPCM_gt_CT_VoidRiftMakeUnits, true, false);
    Wait(2.0, c_timeGame);
    VisRevealArea(3, RegionPlayableMap(), 0.1, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeVoidRifts_Init () {
    libCPCM_gt_CT_InitializeVoidRifts = TriggerCreate("libCPCM_gt_CT_InitializeVoidRifts_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeMagMines
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeMagMines_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    int lv_maxSpawn;
    int lv_maxSpawnAttempts;
    int lv_spawnCount;
    int lv_extraSpawn;
    int lv_spawnAttempt;
    unit lv_monster;
    string lv_monsterType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_maxSpawn = 50;
    lv_maxSpawnAttempts = 1000;
    lv_monsterType = "MutatorCloakedMine";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_maxSpawn = libCOMI_gf_MinimumDifficultyValueCoopInteger(50, 100, 150, 200, 100, 100);
    while ((lv_spawnCount <= lv_maxSpawn) && (lv_spawnAttempt <= lv_maxSpawnAttempts)) {
        lv_spawnPoint = RegionRandomPoint(RegionEntireMap());
        if ((PointPathingIsConnected(lv_spawnPoint, PlayerStartLocation(1)) == true) && (PathingType(lv_spawnPoint) == c_pathingGround) && (VisIsVisibleForPlayer(1, lv_spawnPoint) == false) && (UnitCount(null, c_playerAny, RegionCircle(lv_spawnPoint, 1.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount(null, c_playerAny, RegionCircle(lv_spawnPoint, 5.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCountAlliance(1, c_unitAllianceEnemy, RegionCircle(lv_spawnPoint, 25.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0) && (DistanceBetweenPoints(lv_spawnPoint, PlayerStartLocation(1)) >= 30.0) && (DistanceBetweenPoints(lv_spawnPoint, PlayerStartLocation(2)) >= 30.0) && (UnitCount("CelestialLock", c_playerAny, RegionCircle(lv_spawnPoint, 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount("DuelBubbleUnit", c_playerAny, RegionCircle(lv_spawnPoint, 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0)) {
            UnitCreate(1, lv_monsterType, 0, 3, lv_spawnPoint, libNtve_gf_RandomAngle());
            libCPCM_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
            UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
            UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
            lv_spawnCount += 1;
        }
        else {
            lv_spawnAttempt += 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeMagMines_Init () {
    libCPCM_gt_CT_InitializeMagMines = TriggerCreate("libCPCM_gt_CT_InitializeMagMines_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeStoneZealots
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeStoneZealots_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCPCM_gt_CT_StoneZealotsSpawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeStoneZealots_Init () {
    libCPCM_gt_CT_InitializeStoneZealots = TriggerCreate("libCPCM_gt_CT_InitializeStoneZealots_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeDropPods
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeDropPods_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCPCM_gt_CT_DropPodSpawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeDropPods_Init () {
    libCPCM_gt_CT_InitializeDropPods = TriggerCreate("libCPCM_gt_CT_InitializeDropPods_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeLaserDrill
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeLaserDrill_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoB34E70A2_g;
    int autoB34E70A2_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorLaserDrill", 0, 3, PlayerStartLocation(3));
    libCPCM_gv_cT_LaserDrill = UnitLastCreated();
    autoB34E70A2_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(libCPCM_gv_cT_LaserDrill), UnitGetPropertyFixed(libCPCM_gv_cT_LaserDrill, c_unitPropRadius, c_unitPropCurrent)), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB34E70A2_u = UnitGroupCount(autoB34E70A2_g, c_unitCountAll);
    for (;; autoB34E70A2_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoB34E70A2_g, autoB34E70A2_u);
        if (lv_indexUnit == null) { break; }
        if ((UnitGetType(lv_indexUnit) == "SiegeTankSieged")) {
            UnitIssueOrder(lv_indexUnit, Order(AbilityCommand("Unsiege", 0)), c_orderQueueReplace);
        }

        UnitIssueOrder(lv_indexUnit, OrderTargetingPoint(AbilityCommand("move", 0), libCOMI_gf_CM_NearbyGroundPathablePoint(UnitGetPosition(libCPCM_gv_cT_LaserDrill), UnitGetPropertyFixed(libCPCM_gv_cT_LaserDrill, c_unitPropRadius, c_unitPropCurrent), (UnitGetPropertyFixed(libCPCM_gv_cT_LaserDrill, c_unitPropRadius, c_unitPropCurrent) + 2.0))), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeLaserDrill_Init () {
    libCPCM_gt_CT_InitializeLaserDrill = TriggerCreate("libCPCM_gt_CT_InitializeLaserDrill_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeOutbreak
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeOutbreak_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((GameGetMissionTime() >= libCOMI_gf_MinimumDifficultyValueCoopReal(170.0, 140.0, 130.0, 120.0, 120.0, 120.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((libCPCM_gf_MutatorIsEnabled("InfestedTerranSpawner") == true)) {
        TriggerEnable(libCPCM_gt_CT_OutbreakSpawn, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeOutbreak_Init () {
    libCPCM_gt_CT_InitializeOutbreak = TriggerCreate("libCPCM_gt_CT_InitializeOutbreak_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializePurifierBeam
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializePurifierBeam_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOOC_gf_CC_CurrentMap() == "AC_ShakurasTemple")) {
        libCPCM_gv_cT_PurifierBeamBaseAvoidDistance = 18.0;
    }

    TriggerExecute(libCPCM_gt_CT_PurifierBeamController, true, false);
    if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 1, 1) == 1)) {
        Wait(600.0, c_timeAI);
        if ((libCPCM_gf_MutatorIsEnabled("PurifierBeam") == false)) {
            return true;
        }

        TriggerExecute(libCPCM_gt_CT_PurifierBeamController, true, false);
        if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 1, 1, 1) == 1)) {
            Wait(600.0, c_timeAI);
            if ((libCPCM_gf_MutatorIsEnabled("PurifierBeam") == false)) {
                return true;
            }

            TriggerExecute(libCPCM_gt_CT_PurifierBeamController, true, false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializePurifierBeam_Init () {
    libCPCM_gt_CT_InitializePurifierBeam = TriggerCreate("libCPCM_gt_CT_InitializePurifierBeam_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeOrbitalStrike
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeOrbitalStrike_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCPCM_gt_CT_OrbitalStrikes, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeOrbitalStrike_Init () {
    libCPCM_gt_CT_InitializeOrbitalStrike = TriggerCreate("libCPCM_gt_CT_InitializeOrbitalStrike_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeTornadoes
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeTornadoes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_harvestableSpawnBufferDistance;
    int lv_tornadoCount;
    int lv_spawnAttempt;
    point lv_spawnLocation;

    // Automatic Variable Declarations
    int autoABC447C2_n;
    int autoABC447C2_i;
    const int auto502B6FA1_ae = 1000;
    const int auto502B6FA1_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogEffect, "MutatorTornadoAOESearchDamage", "Amount", 3, IntToString(libCOMI_gf_MinimumDifficultyValueCoopInteger(5, 10, 15, 25, 25, 25)));
    lv_tornadoCount += MaxI(FixedToInt((libNtve_gf_WidthOfRegion(RegionPlayableMap()) / 19.0)), 1);
    lv_tornadoCount += MaxI(FixedToInt((libNtve_gf_HeightOfRegion(RegionPlayableMap()) / 19.0)), 1);
    if ((libCOOC_gf_CC_CurrentMap() == "AC_VeridiaCourier")) {
        lv_harvestableSpawnBufferDistance = 5;
    }
    else {
        lv_harvestableSpawnBufferDistance = 15;
    }
    autoABC447C2_n = lv_tornadoCount;
    for (autoABC447C2_i = 1; autoABC447C2_i <= autoABC447C2_n; autoABC447C2_i += 1) {
        lv_spawnAttempt = 1;
        for ( ; ( (auto502B6FA1_ai >= 0 && lv_spawnAttempt <= auto502B6FA1_ae) || (auto502B6FA1_ai < 0 && lv_spawnAttempt >= auto502B6FA1_ae) ) ; lv_spawnAttempt += auto502B6FA1_ai ) {
            lv_spawnLocation = RegionRandomPoint(RegionPlayableMap());
            if ((DistanceBetweenPoints(lv_spawnLocation, PlayerStartLocation(1)) > 30.0) && (DistanceBetweenPoints(lv_spawnLocation, PlayerStartLocation(2)) > 30.0) && (libCOOC_gf_CC_SpawnAllowedAtPoint(lv_spawnLocation) == true) && (PointPathingIsConnected(lv_spawnLocation, PlayerStartLocation(1)) == true) && (RegionContainsPoint(libCPCM_gf_CT_MutatorSafetyZone(), lv_spawnLocation) == false)) {
                break;
            }

        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorTornado", 0, 3, lv_spawnLocation);
        UnitGroupAdd(libCPCM_gv_cT_Tornadoes, UnitLastCreated());
    }
    TriggerExecute(libCPCM_gt_CT_TornadoMovement, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeTornadoes_Init () {
    libCPCM_gt_CT_InitializeTornadoes = TriggerCreate("libCPCM_gt_CT_InitializeTornadoes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeTemporalField
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeTemporalField_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCPCM_gt_CT_TemporalFieldSpawn, true);
    TriggerExecute(libCPCM_gt_CT_TemporalFieldSpawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeTemporalField_Init () {
    libCPCM_gt_CT_InitializeTemporalField = TriggerCreate("libCPCM_gt_CT_InitializeTemporalField_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeLavaBurst
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeLavaBurst_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCPCM_gt_CT_LavaBurstSpawn, true);
    TriggerExecute(libCPCM_gt_CT_LavaBurstSpawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeLavaBurst_Init () {
    libCPCM_gt_CT_InitializeLavaBurst = TriggerCreate("libCPCM_gt_CT_InitializeLavaBurst_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeBlizzard
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeBlizzard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCPCM_gt_CT_BlizzardSpawn, true);
    TriggerEnable(libCPCM_gt_CT_BlizzardEntersSafetyZone, true);
    TriggerEnable(libCPCM_gt_CT_BlizzardLeavesSafetyZone, true);
    TriggerExecute(libCPCM_gt_CT_BlizzardSpawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeBlizzard_Init () {
    libCPCM_gt_CT_InitializeBlizzard = TriggerCreate("libCPCM_gt_CT_InitializeBlizzard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeNukes
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeNukes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCPCM_gt_CT_NukeSpawn, true);
    TriggerExecute(libCPCM_gt_CT_NukeSpawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeNukes_Init () {
    libCPCM_gt_CT_InitializeNukes = TriggerCreate("libCPCM_gt_CT_InitializeNukes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeTimeWarp
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeTimeWarp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCPCM_gt_CT_TimeWarpSpawn, true);
    TriggerExecute(libCPCM_gt_CT_TimeWarpSpawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeTimeWarp_Init () {
    libCPCM_gt_CT_InitializeTimeWarp = TriggerCreate("libCPCM_gt_CT_InitializeTimeWarp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeMinedOut
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeMinedOut_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    unit lv_indexResource;
    unitgroup lv_resourceNodes;
    int lv_resourceAmount;

    // Automatic Variable Declarations
    unitgroup auto090A5253_g;
    int auto090A5253_u;

    // Variable Initialization
    lv_resourceNodes = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceNodes = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    UnitGroupAddUnitGroup(lv_resourceNodes, UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto090A5253_g = lv_resourceNodes;
    auto090A5253_u = UnitGroupCount(auto090A5253_g, c_unitCountAll);
    for (;; auto090A5253_u -= 1) {
        lv_indexResource = UnitGroupUnitFromEnd(auto090A5253_g, auto090A5253_u);
        if (lv_indexResource == null) { break; }
        if ((CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_indexResource), "ResourceType", c_playerAny) == "Minerals")) {
            lv_resourceAmount = libNtve_gf_UnitGetPropertyResources(lv_indexResource, c_unitPropCurrent);
            if ((UnitHasBehavior2(lv_indexResource, "MineralFieldMinerals") == true)) {
                DataTableSetString(true, ("CT_ResType_" + IntToString(UnitGetTag(lv_indexResource))), ("MineralFieldMinerals"));
                UnitBehaviorRemove(lv_indexResource, "MineralFieldMinerals", 1);
            }
            else if ((UnitHasBehavior2(lv_indexResource, "MineralFieldMinerals750") == true)) {
                DataTableSetString(true, ("CT_ResType_" + IntToString(UnitGetTag(lv_indexResource))), ("MineralFieldMinerals750"));
                UnitBehaviorRemove(lv_indexResource, "MineralFieldMinerals750", 1);
            }
            else if ((UnitHasBehavior2(lv_indexResource, "HighYieldMineralFieldMinerals") == true)) {
                DataTableSetString(true, ("CT_ResType_" + IntToString(UnitGetTag(lv_indexResource))), ("HighYieldMineralFieldMinerals"));
                UnitBehaviorRemove(lv_indexResource, "HighYieldMineralFieldMinerals", 1);
            }
            else if ((UnitHasBehavior2(lv_indexResource, "HighYieldMineralFieldMinerals750") == true)) {
                DataTableSetString(true, ("CT_ResType_" + IntToString(UnitGetTag(lv_indexResource))), ("HighYieldMineralFieldMinerals750"));
                UnitBehaviorRemove(lv_indexResource, "HighYieldMineralFieldMinerals750", 1);
            }
            else if ((UnitHasBehavior2(lv_indexResource, "MineralFieldMineralsNoRemove") == true)) {
                DataTableSetString(true, ("CT_ResType_" + IntToString(UnitGetTag(lv_indexResource))), ("MineralFieldMineralsNoRemove"));
                UnitBehaviorRemove(lv_indexResource, "MineralFieldMineralsNoRemove", 1);
            }
            UnitBehaviorAddPlayer(lv_indexResource, "MutatorMineralsLowYield", 0, 1);
            UnitSetPropertyFixed(lv_indexResource, c_unitPropResources, lv_resourceAmount);
            libNtve_gf_SendActorMessageToUnit(lv_indexResource, "Signal MutatorLowYield");
        }
        else if ((CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_indexResource), "ResourceType", c_playerAny) == "Vespene") && (UnitFilterMatch(lv_indexResource, 1, UnitFilter((1 << c_targetFilterRawResource), 0, 0, 0)) == true)) {
            if ((UnitHasBehavior2(lv_indexResource, "RawVespeneGeyserGas") == true)) {
                lv_resourceAmount = libNtve_gf_UnitGetPropertyResources(lv_indexResource, c_unitPropCurrent);
                UnitBehaviorRemove(lv_indexResource, "RawVespeneGeyserGas", 1);
                UnitBehaviorAddPlayer(lv_indexResource, "MutatorVespeneRawLowYield", 0, 1);
                UnitSetPropertyFixed(lv_indexResource, c_unitPropResources, lv_resourceAmount);
                libNtve_gf_SendActorMessageToUnit(lv_indexResource, "Signal MutatorLowYield");
            }

        }
    }
    TriggerExecute(libCPCM_gt_CT_ResourceSpawns, true, false);
    CatalogFieldValueSet(c_gameCatalogAbil, "MULEGather", "ResourceAmountMultiplier[" + IntToString(0) + "]", 1, "0.033333333333333333");
    CatalogFieldValueSet(c_gameCatalogAbil, "MULEGather", "ResourceAmountMultiplier[" + IntToString(0) + "]", 2, "0.033333333333333333");
    CatalogFieldValueSet(c_gameCatalogEffect, "AutoHarvestVespene4", "Resources", 1, "-1");
    CatalogFieldValueSet(c_gameCatalogEffect, "AutoHarvestVespene4", "Resources", 2, "-1");
    CatalogFieldValueSet(c_gameCatalogActor, "AutomatedAssimilatorTextKicker4", "Text", 1, "Button/Tooltip/AutomatedAssimilatorTextKicker1");
    CatalogFieldValueSet(c_gameCatalogActor, "AutomatedAssimilatorTextKicker4", "Text", 2, "Button/Tooltip/AutomatedAssimilatorTextKicker1");
    CatalogFieldValueSet(c_gameCatalogEffect, "VespeneDroneGrantResourcesTrigger", "Resources[" + IntToString(1) + "]", 1, "1");
    CatalogFieldValueSet(c_gameCatalogEffect, "VespeneDroneGrantResourcesTrigger", "Resources[" + IntToString(1) + "]", 1, "1");
    CatalogFieldValueSet(c_gameCatalogActor, "VespeneDronePickupText", "Text", 1, "Button/Tooltip/VespeneDronePickupTextMinedOut");
    CatalogFieldValueSet(c_gameCatalogActor, "VespeneDronePickupText", "Text", 2, "Button/Tooltip/VespeneDronePickupTextMinedOut");
    CatalogFieldValueSet(c_gameCatalogEffect, "AutoHarvestVespene", "Resources", 1, "-1");
    CatalogFieldValueSet(c_gameCatalogEffect, "AutoHarvestVespene", "Resources", 2, "-1");
    CatalogFieldValueSet(c_gameCatalogActor, "AutomatedRefineryTextKicker4", "Text", 1, "Button/Tooltip/AutomatedRefineryTextKicker1");
    CatalogFieldValueSet(c_gameCatalogActor, "AutomatedRefineryTextKicker4", "Text", 2, "Button/Tooltip/AutomatedRefineryTextKicker1");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeMinedOut_Init () {
    libCPCM_gt_CT_InitializeMinedOut = TriggerCreate("libCPCM_gt_CT_InitializeMinedOut_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeEntomb
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeEntomb_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCPCM_gt_CT_EntombApply, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeEntomb_Init () {
    libCPCM_gt_CT_InitializeEntomb = TriggerCreate("libCPCM_gt_CT_InitializeEntomb_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeTempDamageReflect
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeTempDamageReflect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickTempDamageReflect)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDamage, true);
    TriggerExecute(libCPCM_gt_CT_TempDamageReflectHealing, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeTempDamageReflect_Init () {
    libCPCM_gt_CT_InitializeTempDamageReflect = TriggerCreate("libCPCM_gt_CT_InitializeTempDamageReflect_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializePlague
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializePlague_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_difficultyModifier;

    // Automatic Variable Declarations
    unitgroup autoF810EB14_g;
    int autoF810EB14_u;
    unit autoF810EB14_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickPlague)] = true;
    TriggerEnable(libCPCM_gt_CT_PlagueDeath, true);
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, true);
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitCreation, true);
    lv_difficultyModifier = libCOMI_gf_MinimumDifficultyValueCoopInteger(20, 10, 5, 3, 0, 0);
    autoF810EB14_g = UnitGroupAlliance(1, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF810EB14_u = UnitGroupCount(autoF810EB14_g, c_unitCountAll);
    for (;; autoF810EB14_u -= 1) {
        autoF810EB14_var = UnitGroupUnitFromEnd(autoF810EB14_g, autoF810EB14_u);
        if (autoF810EB14_var == null) { break; }
        if ((RandomInt(1, lv_difficultyModifier) == 1)) {
            UnitBehaviorAdd(autoF810EB14_var, "MutatorPlagueBehaviorVisual", autoF810EB14_var, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializePlague_Init () {
    libCPCM_gt_CT_InitializePlague = TriggerCreate("libCPCM_gt_CT_InitializePlague_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeEvolve
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeEvolve_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickEvolve)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, true);
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDamage, true);
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_OwnerChanges, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeEvolve_Init () {
    libCPCM_gt_CT_InitializeEvolve = TriggerCreate("libCPCM_gt_CT_InitializeEvolve_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializePolarity
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializePolarity_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;
    int lv_indexPlayer;
    int lv_polarityPlayer;
    int lv_humanPlayer;
    int lv_enemyPlayer;

    // Automatic Variable Declarations
    playergroup auto89F2691C_g;
    playergroup auto95CFD68C_g;
    playergroup autoC4FC0340_g;
    unitgroup auto051FDC41_g;
    int auto051FDC41_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickPolarity)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDamage, true);
    lv_polarityPlayer = libCOOC_gv_cCC_MAXCOMMANDERS_PVE;
    auto89F2691C_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto89F2691C_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((lv_indexPlayer > libCOOC_gv_cCC_MAXCOMMANDERS_PVE) && (PlayerStatus(lv_indexPlayer) == c_playerStatusUnused)) {
            libCPCM_gv_cT_PolarityEnemies[lv_polarityPlayer] = lv_indexPlayer;
            PlayerSetColorIndex(lv_indexPlayer, libCOMI_gf_EnemyPlayerColor(), true);
            auto95CFD68C_g = libCOOC_gf_HumanPlayers();
            lv_humanPlayer = -1;
            while (true) {
                lv_humanPlayer = PlayerGroupNextPlayer(auto95CFD68C_g, lv_humanPlayer);
                if (lv_humanPlayer < 0) { break; }
                libNtve_gf_SetAlliance(lv_humanPlayer, lv_indexPlayer, libNtve_ge_AllianceSetting_Enemy);
            }
            autoC4FC0340_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
            lv_enemyPlayer = -1;
            while (true) {
                lv_enemyPlayer = PlayerGroupNextPlayer(autoC4FC0340_g, lv_enemyPlayer);
                if (lv_enemyPlayer < 0) { break; }
                libNtve_gf_SetAlliance(lv_enemyPlayer, lv_indexPlayer, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
            }
            PlayerSetAlliance(lv_polarityPlayer, c_allianceIdPassive, lv_indexPlayer, true);
            lv_polarityPlayer -= 1;
            if ((lv_polarityPlayer <= 0)) {
                break;
            }

        }

    }
    libNtve_gf_SetUpgradeLevelForPlayer(1, "MutatorIsPlayer1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(2, "MutatorIsPlayer2", 1);
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitCreation, true);
    auto051FDC41_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", 1, c_unitAllianceEnemy, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto051FDC41_u = UnitGroupCount(auto051FDC41_g, c_unitCountAll);
    for (;; auto051FDC41_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto051FDC41_g, auto051FDC41_u);
        if (lv_indexUnit == null) { break; }
        libCPCM_gf_CT_ApplyPolarity(lv_indexUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializePolarity_Init () {
    libCPCM_gt_CT_InitializePolarity = TriggerCreate("libCPCM_gt_CT_InitializePolarity_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializePhotonOverload
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializePhotonOverload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickPhotonOverload)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDamage, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializePhotonOverload_Init () {
    libCPCM_gt_CT_InitializePhotonOverload = TriggerCreate("libCPCM_gt_CT_InitializePhotonOverload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeLifeLeech
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeLifeLeech_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickLifeLeech)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDamage, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeLifeLeech_Init () {
    libCPCM_gt_CT_InitializeLifeLeech = TriggerCreate("libCPCM_gt_CT_InitializeLifeLeech_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeSideStep
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeSideStep_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickSidestep)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDamage, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeSideStep_Init () {
    libCPCM_gt_CT_InitializeSideStep = TriggerCreate("libCPCM_gt_CT_InitializeSideStep_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeBarrier
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeBarrier_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickBarrier)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDamage, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeBarrier_Init () {
    libCPCM_gt_CT_InitializeBarrier = TriggerCreate("libCPCM_gt_CT_InitializeBarrier_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeDamageBounce
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeDamageBounce_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickDamageBounce)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDamage, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeDamageBounce_Init () {
    libCPCM_gt_CT_InitializeDamageBounce = TriggerCreate("libCPCM_gt_CT_InitializeDamageBounce_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeConcussiveAttacks
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeConcussiveAttacks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickConcussiveAttacks)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDamage, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeConcussiveAttacks_Init () {
    libCPCM_gt_CT_InitializeConcussiveAttacks = TriggerCreate("libCPCM_gt_CT_InitializeConcussiveAttacks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeAfraidOfTheDark
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeAfraidOfTheDark_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickAfraidOfTheDark)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitIssuedOrder, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeAfraidOfTheDark_Init () {
    libCPCM_gt_CT_InitializeAfraidOfTheDark = TriggerCreate("libCPCM_gt_CT_InitializeAfraidOfTheDark_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeUberDarkness
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeUberDarkness_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    string lv_stringUnitID;
    fixed lv_sightRange;
    int lv_catalogIndex;

    // Automatic Variable Declarations
    int auto59F112E0_ae;
    const int auto59F112E0_ai = 1;
    playergroup auto49458891_g;

    // Variable Initialization
    lv_stringUnitID = "";

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UpgradeChanged, true);
    GameSetLighting("MutatorVeryDark", 0.0);
    auto59F112E0_ae = CatalogEntryCount(c_gameCatalogUnit);
    lv_catalogIndex = 1;
    for ( ; ( (auto59F112E0_ai >= 0 && lv_catalogIndex <= auto59F112E0_ae) || (auto59F112E0_ai < 0 && lv_catalogIndex >= auto59F112E0_ae) ) ; lv_catalogIndex += auto59F112E0_ai ) {
        lv_stringUnitID = (CatalogEntryGet(c_gameCatalogUnit, lv_catalogIndex));
        if ((UnitTypeTestAttribute(UnitTypeFromString(lv_stringUnitID), c_unitAttributeMapBoss) == true)) {
            continue;
        }
        else if ((UnitTypeTestAttribute(UnitTypeFromString(lv_stringUnitID), c_unitAttributeStructure) == true)) {
            if ((libCOOC_gf_CC_UnitTypeIsTownHall((lv_stringUnitID)) == true) && (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, (lv_stringUnitID), "Speed", c_playerAny) <= 0.0)) {
                lv_sightRange = libCOMI_gf_MinimumDifficultyValueCoopReal(9.0, 9.0, 7.0, 7.0, 7.0, 7.0);
            }
            else {
                lv_sightRange = libCOMI_gf_MinimumDifficultyValueCoopReal(4.0, 3.0, 2.0, 2.0, 2.0, 2.0);
            }
        }
        else if (true) {
            lv_sightRange = 0.0;
        }
        auto49458891_g = libCOOC_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto49458891_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, lv_stringUnitID, "Sight", lv_indexPlayer, FixedToString(lv_sightRange, 2));
        }
    }
    TriggerExecute(libCPCM_gt_CT_UberDarknessSpotlight, true, false);
    TriggerExecute(libCPCM_gt_CT_InitializeBlackFog, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeUberDarkness_Init () {
    libCPCM_gt_CT_InitializeUberDarkness = TriggerCreate("libCPCM_gt_CT_InitializeUberDarkness_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeVertigo
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeVertigo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_cameraRoll;
    camerainfo lv_player1Camera;
    camerainfo lv_player2Camera;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(10.0, c_timeGame);
    while ((libCOMI_gf_GameIsOver() == false)) {
        SoundPlayForPlayer(SoundLink("MutatorVertigo", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        lv_cameraRoll = RandomFixed(0.0, 360.0);
        CinematicFade(false, 0.25, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
        CameraSetValue(1, c_cameraValueRoll, lv_cameraRoll, 0.0, 0.0, 10.0);
        CameraSetValue(2, c_cameraValueRoll, lv_cameraRoll, 0.0, 0.0, 10.0);
        CinematicFade(true, 0.25, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
        Wait(libCOMI_gf_MinimumDifficultyValueCoopInteger(60, 40, 30, 20, 1, 1), c_timeGame);
    }
    CinematicFade(false, 0.25, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    CameraSetValue(1, c_cameraValueRoll, 0.0, 0.0, 100.0, 0.0);
    CameraSetValue(2, c_cameraValueRoll, 0.0, 0.0, 100.0, 0.0);
    CinematicFade(true, 0.25, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeVertigo_Init () {
    libCPCM_gt_CT_InitializeVertigo = TriggerCreate("libCPCM_gt_CT_InitializeVertigo_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeBlackFog
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeBlackFog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    int lv_humanPlayer;

    // Automatic Variable Declarations
    playergroup autoA181E596_g;
    playergroup autoAD669200_g;
    playergroup auto1DB7B14F_g;
    playergroup auto2BA3B4C3_g;
    const int autoE31D441D_n = 50;
    int autoE31D441D_i;
    playergroup auto7D141813_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_VisionShareEnable(false);
    libCOMI_gf_CM_RevealersEnableDisable(false);
    autoA181E596_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoA181E596_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        VisSetFoWAlpha(lv_indexPlayer, 100.0);
    }
    autoAD669200_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoAD669200_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), lv_indexPlayer) == false)) {
            TechTreeUpgradeAddLevel(lv_indexPlayer, "NoSnapshots", 1);
        }

    }
    auto1DB7B14F_g = libCOOC_gf_HumanPlayers();
    lv_humanPlayer = -1;
    while (true) {
        lv_humanPlayer = PlayerGroupNextPlayer(auto1DB7B14F_g, lv_humanPlayer);
        if (lv_humanPlayer < 0) { break; }
        libCPCM_gv_cT_MutatorVisionPlayers[lv_humanPlayer] = PlayerGroupEmpty();
        auto2BA3B4C3_g = PlayerGroupAll();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto2BA3B4C3_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            if ((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), lv_indexPlayer) == false) && (PlayerGetAlliance(lv_indexPlayer, c_allianceIdVision, lv_humanPlayer) == true)) {
                PlayerGroupAdd(libCPCM_gv_cT_MutatorVisionPlayers[lv_humanPlayer], lv_indexPlayer);
                PlayerSetAlliance(lv_indexPlayer, c_allianceIdVision, lv_humanPlayer, false);
            }

        }
    }
    for (autoE31D441D_i = 1; autoE31D441D_i <= autoE31D441D_n; autoE31D441D_i += 1) {
        auto7D141813_g = libCOOC_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto7D141813_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            VisExploreArea(lv_indexPlayer, RegionEntireMap(), false, false);
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeBlackFog_Init () {
    libCPCM_gt_CT_InitializeBlackFog = TriggerCreate("libCPCM_gt_CT_InitializeBlackFog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeShortSighted
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeShortSighted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    string lv_stringUnitID;
    fixed lv_sightRange;
    int lv_catalogIndex;
    fixed lv_sightFraction;

    // Automatic Variable Declarations
    playergroup autoB552EF0F_g;
    int autoBB20FE5D_ae;
    const int autoBB20FE5D_ai = 1;
    playergroup auto7F423064_g;

    // Variable Initialization
    lv_stringUnitID = "";
    lv_sightFraction = 0.4;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB552EF0F_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoB552EF0F_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        TechTreeUpgradeAddLevel(lv_indexPlayer, "MutatorShortSighted", 1);
    }
    autoBB20FE5D_ae = CatalogEntryCount(c_gameCatalogUnit);
    lv_catalogIndex = 1;
    for ( ; ( (autoBB20FE5D_ai >= 0 && lv_catalogIndex <= autoBB20FE5D_ae) || (autoBB20FE5D_ai < 0 && lv_catalogIndex >= autoBB20FE5D_ae) ) ; lv_catalogIndex += autoBB20FE5D_ai ) {
        lv_stringUnitID = (CatalogEntryGet(c_gameCatalogUnit, lv_catalogIndex));
        lv_sightRange = (StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, lv_stringUnitID, "Sight", 0)) * lv_sightFraction);
        if ((lv_sightRange < 1.0)) {
            lv_sightRange = 1.0;
        }

        auto7F423064_g = libCOOC_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto7F423064_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, lv_stringUnitID, "Sight", lv_indexPlayer, FixedToString(lv_sightRange, 2));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeShortSighted_Init () {
    libCPCM_gt_CT_InitializeShortSighted = TriggerCreate("libCPCM_gt_CT_InitializeShortSighted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeSluggishness
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeSluggishness_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    string lv_stringUnitID;
    int lv_catalogIndex;

    // Automatic Variable Declarations
    int autoE5452AB9_ae;
    const int autoE5452AB9_ai = 1;
    playergroup auto5C1B6B31_g;

    // Variable Initialization
    lv_stringUnitID = "";

    // Actions
    if (!runActions) {
        return true;
    }

    autoE5452AB9_ae = CatalogEntryCount(c_gameCatalogUnit);
    lv_catalogIndex = 1;
    for ( ; ( (autoE5452AB9_ai >= 0 && lv_catalogIndex <= autoE5452AB9_ae) || (autoE5452AB9_ai < 0 && lv_catalogIndex >= autoE5452AB9_ae) ) ; lv_catalogIndex += autoE5452AB9_ai ) {
        lv_stringUnitID = (CatalogEntryGet(c_gameCatalogUnit, lv_catalogIndex));
        if ((UnitTypeTestFlag((lv_stringUnitID), c_unitFlagWorker) == true)) {
            continue;
        }

        auto5C1B6B31_g = libCOOC_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto5C1B6B31_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, lv_stringUnitID, "TurningRate", lv_indexPlayer, FixedToString(50.0, 2));
            CatalogFieldValueSet(c_gameCatalogUnit, lv_stringUnitID, "Acceleration", lv_indexPlayer, FixedToString(0.5, 2));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeSluggishness_Init () {
    libCPCM_gt_CT_InitializeSluggishness = TriggerCreate("libCPCM_gt_CT_InitializeSluggishness_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeInsubordination
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeInsubordination_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickInsubordination)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitIssuedOrder, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeInsubordination_Init () {
    libCPCM_gt_CT_InitializeInsubordination = TriggerCreate("libCPCM_gt_CT_InitializeInsubordination_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeSharedSupply
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeSharedSupply_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCPCM_gt_CT_SharedSupplyUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeSharedSupply_Init () {
    libCPCM_gt_CT_InitializeSharedSupply = TriggerCreate("libCPCM_gt_CT_InitializeSharedSupply_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeOrderCosts
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeOrderCosts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickOrderCosts)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitIssuedOrder, true);
    TriggerEnable(libCPCM_gt_CT_OrderCostCopyUsed, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeOrderCosts_Init () {
    libCPCM_gt_CT_InitializeOrderCosts = TriggerCreate("libCPCM_gt_CT_InitializeOrderCosts_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeFear
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeFear_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickFear)] = true;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDamage, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeFear_Init () {
    libCPCM_gt_CT_InitializeFear = TriggerCreate("libCPCM_gt_CT_InitializeFear_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeWorkerSleep
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeWorkerSleep_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCPCM_gt_CT_WorkerSleep, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeWorkerSleep_Init () {
    libCPCM_gt_CT_InitializeWorkerSleep = TriggerCreate("libCPCM_gt_CT_InitializeWorkerSleep_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeRedEnvelopes
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeRedEnvelopes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    unit lv_indexResource;
    unitgroup lv_resourceNodes;
    int lv_resourceAmount;

    // Automatic Variable Declarations
    playergroup auto2C2254AC_g;
    string auto7269E47D_val;

    // Variable Initialization
    lv_resourceNodes = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCPCM_gt_CT_RedEnvelopeSpawns, true, false);
    Wait(0.0625, c_timeGame);
    auto2C2254AC_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto2C2254AC_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        auto7269E47D_val = PlayerRace(lv_indexPlayer);
        if (auto7269E47D_val == "Terr") {
            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_TerranRedEnvelope", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto7269E47D_val == "Prot") {
            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_ProtossRedEnvelope", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto7269E47D_val == "Zerg") {
            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_ZergRedEnvelope", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else {
            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_TerranRedEnvelope", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
    }
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_RedEnvelope_Intro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeRedEnvelopes_Init () {
    libCPCM_gt_CT_InitializeRedEnvelopes = TriggerCreate("libCPCM_gt_CT_InitializeRedEnvelopes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeGiftFight
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeGiftFight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoDD1DDC78_g;
    string auto9A7F9361_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitCreation, true);
    TriggerExecute(libCPCM_gt_CT_GiftFightControl, true, false);
    TriggerExecute(libCPCM_gt_CT_GiftFightSpawn, true, false);
    Wait(0.0625, c_timeGame);
    autoDD1DDC78_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoDD1DDC78_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        auto9A7F9361_val = PlayerRace(lv_indexPlayer);
        if (auto9A7F9361_val == "Terr") {
            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_TerrChristmas_Festive", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto9A7F9361_val == "Prot") {
            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_ProtChristmas_Festive", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto9A7F9361_val == "Zerg") {
            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_ZergChristmas_Festive", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else {
            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_TerrChristmas_Festive", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
    }
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Christmas_Intro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeGiftFight_Init () {
    libCPCM_gt_CT_InitializeGiftFight = TriggerCreate("libCPCM_gt_CT_InitializeGiftFight_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeTrickOrTreat
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeTrickOrTreat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_initialCandy;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoAB8333BF_g;
    string auto745D4C87_val;

    // Variable Initialization
    lv_initialCandy = -10.0;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorCandyBowl", 0, 0, PointInterpolate(PlayerStartLocation(1), PlayerStartLocation(2), 0.5));
    libCPCM_gv_cT_CandyBowlUnit = UnitLastCreated();
    UnitStatusBarClearOverride(libCPCM_gv_cT_CandyBowlUnit);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_CPCM_E5856361"), 24, UnitGetPosition(libCPCM_gv_cT_CandyBowlUnit), 3.0, true, false, PlayerGroupAll());
    libCPCM_gv_cT_CandyBowlTextTag = TextTagLastCreated();
    TriggerEnable(libCPCM_gt_CT_CandyBowlTextUpdate, true);
    libCOUI_gf_DisplaySingularBossBarVoidCampaign("Assets\\Textures\\btn-tips-scrap.dds", StringExternal("Param/Value/lib_CPCM_2E0158A0"), 50);
    UnitAbilityAddChargeUsed(libCPCM_gv_cT_CandyBowlUnit, "MutatorBuyCandy", "Abil/MutatorBuyCandy", lv_initialCandy);
    libCOUI_gf_SetSingularBossBarCurrentValueVoidCampaign(FixedToInt(UnitAbilityChargeInfo(libCPCM_gv_cT_CandyBowlUnit, AbilityCommand("MutatorBuyCandy", 0), c_unitAbilChargeCountLeft)), true);
    if ((libCPCM_gf_MutatorIsEnabled("TrickOrTreat") == true)) {
        TriggerEnable(libCPCM_gt_CT_TrickOrTreatSpawn, true);
    }

    Wait(1.0, c_timeGame);
    libCOUI_gf_SetSingularBossBarCurrentValueVoidCampaign(FixedToInt(UnitAbilityChargeInfo(libCPCM_gv_cT_CandyBowlUnit, AbilityCommand("MutatorBuyCandy", 0), c_unitAbilChargeCountLeft)), true);
    Wait(0.0625, c_timeGame);
    autoAB8333BF_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoAB8333BF_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        auto745D4C87_val = PlayerRace(lv_indexPlayer);
        if (auto745D4C87_val == "Terr") {
            SoundtrackDefault(PlayerGroupSingle(lv_indexPlayer), c_soundtrackCategoryMusic, "Music_TerrHalloween", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto745D4C87_val == "Prot") {
            SoundtrackDefault(PlayerGroupSingle(lv_indexPlayer), c_soundtrackCategoryMusic, "Music_ProtHalloween", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto745D4C87_val == "Zerg") {
            SoundtrackDefault(PlayerGroupSingle(lv_indexPlayer), c_soundtrackCategoryMusic, "Music_ZergHalloween", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else {
            SoundtrackDefault(PlayerGroupSingle(lv_indexPlayer), c_soundtrackCategoryMusic, "Music_TerrHalloween", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
    }
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "HalloweenMusic", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeTrickOrTreat_Init () {
    libCPCM_gt_CT_InitializeTrickOrTreat = TriggerCreate("libCPCM_gt_CT_InitializeTrickOrTreat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeFoodHunt
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_InitializeFoodHunt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    string lv_stringUnitID;
    int lv_catalogIndex;
    int lv_foodMade;

    // Automatic Variable Declarations
    int autoE49BB4EA_ae;
    const int autoE49BB4EA_ai = 1;
    playergroup auto199688BD_g;
    playergroup auto1953ED4B_g;

    // Variable Initialization
    lv_stringUnitID = "";

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogReferenceSet("Unit,MutatorTurking,LifeStart", 3, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(2000.0, 2500.0, 4000.0, 6000.0, 6000.0, 6000.0), c_fixedPrecisionAny));
    CatalogReferenceSet("Unit,MutatorTurking,LifeStart", 3, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(2000.0, 2500.0, 4000.0, 6000.0, 6000.0, 6000.0), c_fixedPrecisionAny));
    CatalogReferenceSet("Unit,MutatorTurking,LifeRegenRate", 3, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(0.0, 2.0, 15.0, 30.0, 30.0, 30.0), c_fixedPrecisionAny));
    CatalogReferenceSet("Unit,MutatorInfestedTurkey,LifeStart", 3, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(75.0, 100.0, 125.0, 150.0, 150.0, 150.0), c_fixedPrecisionAny));
    CatalogReferenceSet("Unit,MutatorInfestedTurkey,LifeMax", 3, FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(75.0, 100.0, 125.0, 150.0, 150.0, 150.0), c_fixedPrecisionAny));
    ActorSend(ActorFrom("::Scene"), "SceneHaloSetWidth 0.300000");
    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickFoodHunt)] = true;
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1000, 50, c_anchorCenter, 0, 100, StringExternal("Param/Value/lib_CPCM_EE099187"), Color(100.00, 0.00, 0.00), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize32Bold", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libCPCM_gv_cT_FoodHuntWarningLabel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1000, 50, c_anchorCenter, 0, 50, StringExternal("Param/Value/lib_CPCM_FF4AF192"), Color(100.00, 0.00, 0.00), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize32Bold", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libCPCM_gv_cT_FoodHuntAttackLabel = DialogControlLastCreated();
    autoE49BB4EA_ae = CatalogEntryCount(c_gameCatalogUnit);
    lv_catalogIndex = 1;
    for ( ; ( (autoE49BB4EA_ai >= 0 && lv_catalogIndex <= autoE49BB4EA_ae) || (autoE49BB4EA_ai < 0 && lv_catalogIndex >= autoE49BB4EA_ae) ) ; lv_catalogIndex += autoE49BB4EA_ai ) {
        lv_stringUnitID = (CatalogEntryGet(c_gameCatalogUnit, lv_catalogIndex));
        auto199688BD_g = libCOOC_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto199688BD_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            lv_foodMade = FixedToInt(UnitTypeGetProperty((lv_stringUnitID), c_unitPropSuppliesMade));
            if ((lv_foodMade > 0)) {
                CatalogFieldValueSet(c_gameCatalogUnit, lv_stringUnitID, "Food", lv_indexPlayer, "0");
            }

        }
    }
    auto1953ED4B_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto1953ED4B_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCPCM_gv_cT_FoodHuntOriginalSupplyLimit[lv_indexPlayer] = PlayerGetPropertyInt(lv_indexPlayer, c_playerPropSuppliesLimit);
        PlayerModifyPropertyInt(lv_indexPlayer, c_playerPropSuppliesMade, c_playerPropOperSetTo, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 80, 70, 60, 50, 50, 50));
        PlayerModifyPropertyInt(lv_indexPlayer, c_playerPropSuppliesLimit, c_playerPropOperSetTo, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 80, 70, 60, 50, 50, 50));
    }
    TriggerExecute(libCPCM_gt_CT_FoodHuntDepleteFood, true, false);
    TriggerExecute(libCPCM_gt_CT_FoodHuntSpawn, true, false);
    TriggerExecute(libCPCM_gt_CT_FoodHuntHungerDamage, true, false);
    TriggerEnable(libCPCM_gt_CT_FoodHuntFear, true);
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, true);
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDamage, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_InitializeFoodHunt_Init () {
    libCPCM_gt_CT_InitializeFoodHunt = TriggerCreate("libCPCM_gt_CT_InitializeFoodHunt_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownWorkerSleep
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownWorkerSleep_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCPCM_gt_CT_WorkerSleep);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownWorkerSleep_Init () {
    libCPCM_gt_CT_ShutdownWorkerSleep = TriggerCreate("libCPCM_gt_CT_ShutdownWorkerSleep_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownOutbreak
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownOutbreak_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCPCM_gt_CT_OutbreakSpawn, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownOutbreak_Init () {
    libCPCM_gt_CT_ShutdownOutbreak = TriggerCreate("libCPCM_gt_CT_ShutdownOutbreak_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownEntomb
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownEntomb_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCPCM_gt_CT_EntombApply);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownEntomb_Init () {
    libCPCM_gt_CT_ShutdownEntomb = TriggerCreate("libCPCM_gt_CT_ShutdownEntomb_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownPermaCloak
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownPermaCloak_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto2F763E19_g;
    int auto2F763E19_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitCreation, false);
    auto2F763E19_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", 1, c_unitAllianceEnemy, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto2F763E19_u = UnitGroupCount(auto2F763E19_g, c_unitCountAll);
    for (;; auto2F763E19_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto2F763E19_g, auto2F763E19_u);
        if (lv_indexUnit == null) { break; }
        UnitBehaviorRemove(lv_indexUnit, "MutatorPermanentlyCloaked", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownPermaCloak_Init () {
    libCPCM_gt_CT_ShutdownPermaCloak = TriggerCreate("libCPCM_gt_CT_ShutdownPermaCloak_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownUnitSpeed
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownUnitSpeed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoE9B64FF4_g;
    int autoE9B64FF4_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitCreation, false);
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_OwnerChanges, false);
    TriggerEnable(libCPCM_gt_CT_SpeedFreaksMorphCleanup, false);
    autoE9B64FF4_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", 1, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE9B64FF4_u = UnitGroupCount(autoE9B64FF4_g, c_unitCountAll);
    for (;; autoE9B64FF4_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoE9B64FF4_g, autoE9B64FF4_u);
        if (lv_indexUnit == null) { break; }
        libCPCM_gf_CT_RemoveUnitSpeed(lv_indexUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownUnitSpeed_Init () {
    libCPCM_gt_CT_ShutdownUnitSpeed = TriggerCreate("libCPCM_gt_CT_ShutdownUnitSpeed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownBlackFog
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownBlackFog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    int lv_humanPlayer;

    // Automatic Variable Declarations
    playergroup auto4B548753_g;
    playergroup autoBB021581_g;
    playergroup autoC0DD397C_g;
    playergroup auto60081A2E_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_VisionShareEnable(true);
    libCOMI_gf_CM_RevealersEnableDisable(true);
    auto4B548753_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto4B548753_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        VisResetFoWAlpha(lv_indexPlayer);
    }
    autoBB021581_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoBB021581_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), lv_indexPlayer) == false)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "NoSnapshots", 0);
        }

    }
    autoC0DD397C_g = libCOOC_gf_HumanPlayers();
    lv_humanPlayer = -1;
    while (true) {
        lv_humanPlayer = PlayerGroupNextPlayer(autoC0DD397C_g, lv_humanPlayer);
        if (lv_humanPlayer < 0) { break; }
        auto60081A2E_g = libCPCM_gv_cT_MutatorVisionPlayers[lv_humanPlayer];
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto60081A2E_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            PlayerSetAlliance(lv_indexPlayer, c_allianceIdVision, lv_humanPlayer, true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownBlackFog_Init () {
    libCPCM_gt_CT_ShutdownBlackFog = TriggerCreate("libCPCM_gt_CT_ShutdownBlackFog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownReducedVision
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownReducedVision_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto1A421E6A_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto1A421E6A_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto1A421E6A_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "MutatorShortSighted", 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownReducedVision_Init () {
    libCPCM_gt_CT_ShutdownReducedVision = TriggerCreate("libCPCM_gt_CT_ShutdownReducedVision_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownLongRange
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownLongRange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownLongRange_Init () {
    libCPCM_gt_CT_ShutdownLongRange = TriggerCreate("libCPCM_gt_CT_ShutdownLongRange_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownShortSighted
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownShortSighted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownShortSighted_Init () {
    libCPCM_gt_CT_ShutdownShortSighted = TriggerCreate("libCPCM_gt_CT_ShutdownShortSighted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownLaserDrill
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownLaserDrill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(libCPCM_gv_cT_LaserDrill);
    libCPCM_gv_cT_LaserDrill = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownLaserDrill_Init () {
    libCPCM_gt_CT_ShutdownLaserDrill = TriggerCreate("libCPCM_gt_CT_ShutdownLaserDrill_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownSpawnBroodling
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownSpawnBroodling_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickAlienIncubation)] = false;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownSpawnBroodling_Init () {
    libCPCM_gt_CT_ShutdownSpawnBroodling = TriggerCreate("libCPCM_gt_CT_ShutdownSpawnBroodling_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownSpawnInfested
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownSpawnInfested_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickWalkingInfested)] = false;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownSpawnInfested_Init () {
    libCPCM_gt_CT_ShutdownSpawnInfested = TriggerCreate("libCPCM_gt_CT_ShutdownSpawnInfested_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownDeathAOE
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownDeathAOE_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickSelfDestruction)] = false;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownDeathAOE_Init () {
    libCPCM_gt_CT_ShutdownDeathAOE = TriggerCreate("libCPCM_gt_CT_ShutdownDeathAOE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownStructureSteal
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownStructureSteal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto8CFB57C3_g;
    unitgroup autoE2BDEC66_g;
    int autoE2BDEC66_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickStructureSteal)] = false;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitCreation, false);
    TriggerEnable(libCPCM_gt_CT_StructureStealTrigger, false);
    auto8CFB57C3_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto8CFB57C3_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        autoE2BDEC66_g = UnitGroup(null, lv_indexPlayer, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0);
        autoE2BDEC66_u = UnitGroupCount(autoE2BDEC66_g, c_unitCountAll);
        for (;; autoE2BDEC66_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(autoE2BDEC66_g, autoE2BDEC66_u);
            if (lv_indexUnit == null) { break; }
            libCPCM_gf_CT_RemoveStructureStealBehavior(lv_indexUnit);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownStructureSteal_Init () {
    libCPCM_gt_CT_ShutdownStructureSteal = TriggerCreate("libCPCM_gt_CT_ShutdownStructureSteal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownHybridDeathNuke
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownHybridDeathNuke_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickHybridNuke)] = false;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownHybridDeathNuke_Init () {
    libCPCM_gt_CT_ShutdownHybridDeathNuke = TriggerCreate("libCPCM_gt_CT_ShutdownHybridDeathNuke_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownDeathFire
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownDeathFire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickDeathFire)] = false;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownDeathFire_Init () {
    libCPCM_gt_CT_ShutdownDeathFire = TriggerCreate("libCPCM_gt_CT_ShutdownDeathFire_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownPlague
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownPlague_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF8F869D4_g;
    int autoF8F869D4_u;
    unit autoF8F869D4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickPlague)] = false;
    TriggerEnable(libCPCM_gt_CT_PlagueDeath, false);
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, false);
    autoF8F869D4_g = UnitGroupAlliance(1, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF8F869D4_u = UnitGroupCount(autoF8F869D4_g, c_unitCountAll);
    for (;; autoF8F869D4_u -= 1) {
        autoF8F869D4_var = UnitGroupUnitFromEnd(autoF8F869D4_g, autoF8F869D4_u);
        if (autoF8F869D4_var == null) { break; }
        UnitBehaviorRemove(autoF8F869D4_var, "MutatorPlagueBehavior", c_unitBehaviorCountAll);
        UnitBehaviorRemove(autoF8F869D4_var, "MutatorPlagueBehaviorVisual", c_unitBehaviorCountAll);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownPlague_Init () {
    libCPCM_gt_CT_ShutdownPlague = TriggerCreate("libCPCM_gt_CT_ShutdownPlague_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownAvenger
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownAvenger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickAvenger)] = false;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, false);
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_OwnerChanges, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownAvenger_Init () {
    libCPCM_gt_CT_ShutdownAvenger = TriggerCreate("libCPCM_gt_CT_ShutdownAvenger_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownEvolve
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownEvolve_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickEvolve)] = false;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, false);
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_OwnerChanges, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownEvolve_Init () {
    libCPCM_gt_CT_ShutdownEvolve = TriggerCreate("libCPCM_gt_CT_ShutdownEvolve_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownJustDie
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownJustDie_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    unit lv_indexUnit;

    // Automatic Variable Declarations
    playergroup auto27E869DA_g;
    unitgroup auto9A306DA6_g;
    int auto9A306DA6_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitCreation, false);
    auto27E869DA_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto27E869DA_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "MutatorJustDie", 0);
    }
    auto9A306DA6_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", 1, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9A306DA6_u = UnitGroupCount(auto9A306DA6_g, c_unitCountAll);
    for (;; auto9A306DA6_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto9A306DA6_g, auto9A306DA6_u);
        if (lv_indexUnit == null) { break; }
        UnitBehaviorRemove(lv_indexUnit, "MutatorMasterController", c_unitBehaviorCountAll);
    }
    TriggerEnable(libCPCM_gt_CT_JustDiePolarityInteraction, false);
    TriggerEnable(libCPCM_gt_CT_JustDieTrainHealth, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownJustDie_Init () {
    libCPCM_gt_CT_ShutdownJustDie = TriggerCreate("libCPCM_gt_CT_ShutdownJustDie_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownConcussiveAttacks
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownConcussiveAttacks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickConcussiveAttacks)] = false;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDamage, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownConcussiveAttacks_Init () {
    libCPCM_gt_CT_ShutdownConcussiveAttacks = TriggerCreate("libCPCM_gt_CT_ShutdownConcussiveAttacks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownDamageBounce
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownDamageBounce_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickDamageBounce)] = false;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDamage, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownDamageBounce_Init () {
    libCPCM_gt_CT_ShutdownDamageBounce = TriggerCreate("libCPCM_gt_CT_ShutdownDamageBounce_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownMinedOut
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownMinedOut_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    unit lv_indexResource;
    unitgroup lv_resourceNodes;
    int lv_resourceAmount;

    // Automatic Variable Declarations
    unitgroup autoBD84E51D_g;
    int autoBD84E51D_u;

    // Variable Initialization
    lv_resourceNodes = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCPCM_gt_CT_ResourceSpawns);
    lv_resourceNodes = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    UnitGroupAddUnitGroup(lv_resourceNodes, UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    autoBD84E51D_g = lv_resourceNodes;
    autoBD84E51D_u = UnitGroupCount(autoBD84E51D_g, c_unitCountAll);
    for (;; autoBD84E51D_u -= 1) {
        lv_indexResource = UnitGroupUnitFromEnd(autoBD84E51D_g, autoBD84E51D_u);
        if (lv_indexResource == null) { break; }
        if ((CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_indexResource), "ResourceType", c_playerAny) == "Minerals")) {
            lv_resourceAmount = libNtve_gf_UnitGetPropertyResources(lv_indexResource, c_unitPropCurrent);
            UnitBehaviorRemove(lv_indexResource, "MutatorMineralsLowYield", 1);
            UnitBehaviorAddPlayer(lv_indexResource, (DataTableGetString(true, ("CT_ResType_" + IntToString(UnitGetTag(lv_indexResource))))), 0, 1);
            libNtve_gf_SendActorMessageToUnit(lv_indexResource, "Signal MutatorNormalYield");
            UnitSetPropertyFixed(lv_indexResource, c_unitPropResources, lv_resourceAmount);
        }
        else if ((CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_indexResource), "ResourceType", c_playerAny) == "Vespene") && (UnitFilterMatch(lv_indexResource, 1, UnitFilter((1 << c_targetFilterRawResource), 0, 0, 0)) == true)) {
            if ((UnitHasBehavior2(lv_indexResource, "MutatorVespeneRawLowYield") == true)) {
                lv_resourceAmount = libNtve_gf_UnitGetPropertyResources(lv_indexResource, c_unitPropCurrent);
                UnitBehaviorAddPlayer(lv_indexResource, "RawVespeneGeyserGas", 0, 1);
                UnitBehaviorRemove(lv_indexResource, "MutatorVespeneRawLowYield", 1);
                UnitSetPropertyFixed(lv_indexResource, c_unitPropResources, lv_resourceAmount);
                libNtve_gf_SendActorMessageToUnit(lv_indexResource, "Signal MutatorNormalYield");
            }

        }
    }
    CatalogFieldValueSet(c_gameCatalogAbil, "MULEGather", "ResourceAmountMultiplier[" + IntToString(0) + "]", 1, "1.0");
    CatalogFieldValueSet(c_gameCatalogAbil, "MULEGather", "ResourceAmountMultiplier[" + IntToString(0) + "]", 2, "1.0");
    CatalogFieldValueSet(c_gameCatalogEffect, "AutoHarvestVespene4", "Resources", 1, "-4");
    CatalogFieldValueSet(c_gameCatalogEffect, "AutoHarvestVespene4", "Resources", 2, "-4");
    CatalogFieldValueSet(c_gameCatalogActor, "AutomatedAssimilatorTextKicker4", "Text", 1, "<s val=\"Kicker_Refinery\">+4</s><IMG path=\"Assets\\Textures\\icon-gas-protoss.dds\" height=\"28\" width=\"28\"/>");
    CatalogFieldValueSet(c_gameCatalogActor, "AutomatedAssimilatorTextKicker4", "Text", 2, "<s val=\"Kicker_Refinery\">+4</s><IMG path=\"Assets\\Textures\\icon-gas-protoss.dds\" height=\"28\" width=\"28\"/>");
    CatalogFieldValueSet(c_gameCatalogEffect, "VespeneDroneGrantResourcesTrigger", "Resources[" + IntToString(1) + "]", 1, "2");
    CatalogFieldValueSet(c_gameCatalogEffect, "VespeneDroneGrantResourcesTrigger", "Resources[" + IntToString(1) + "]", 1, "2");
    CatalogFieldValueSet(c_gameCatalogActor, "VespeneDronePickupText", "Text", 1, "Player 1 <s val=\"Kicker_Gas\">+2 </s><IMG path=\"Assets\\Textures\\icon-gas-terran.dds\" height=\"28\" width=\"28\"/><n/>Player 2 <s val=\"Kicker_Gas\">+1 </s><IMG path=\"Assets\\Textures\\icon-gas-terran.dds\" height=\"28\" width=\"28\"/>");
    CatalogFieldValueSet(c_gameCatalogActor, "VespeneDronePickupText", "Text", 2, "Player 1 <s val=\"Kicker_Gas\">+2 </s><IMG path=\"Assets\\Textures\\icon-gas-terran.dds\" height=\"28\" width=\"28\"/><n/>Player 2 <s val=\"Kicker_Gas\">+1 </s><IMG path=\"Assets\\Textures\\icon-gas-terran.dds\" height=\"28\" width=\"28\"/>");
    CatalogFieldValueSet(c_gameCatalogEffect, "AutoHarvestVespene", "Resources", 1, "-4");
    CatalogFieldValueSet(c_gameCatalogEffect, "AutoHarvestVespene", "Resources", 2, "-4");
    CatalogFieldValueSet(c_gameCatalogActor, "AutomatedRefineryTextKicker4", "Text", 1, "Button/Tooltip/AutomatedRefineryTextKicker4");
    CatalogFieldValueSet(c_gameCatalogActor, "AutomatedRefineryTextKicker4", "Text", 2, "Button/Tooltip/AutomatedRefineryTextKicker4");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownMinedOut_Init () {
    libCPCM_gt_CT_ShutdownMinedOut = TriggerCreate("libCPCM_gt_CT_ShutdownMinedOut_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownDropPods
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownDropPods_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCPCM_gt_CT_DropPodSpawn);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownDropPods_Init () {
    libCPCM_gt_CT_ShutdownDropPods = TriggerCreate("libCPCM_gt_CT_ShutdownDropPods_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownBarrier
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownBarrier_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickBarrier)] = false;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDamage, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownBarrier_Init () {
    libCPCM_gt_CT_ShutdownBarrier = TriggerCreate("libCPCM_gt_CT_ShutdownBarrier_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownSideStep
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownSideStep_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickSidestep)] = false;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDamage, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownSideStep_Init () {
    libCPCM_gt_CT_ShutdownSideStep = TriggerCreate("libCPCM_gt_CT_ShutdownSideStep_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownFear
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownFear_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickFear)] = false;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDamage, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownFear_Init () {
    libCPCM_gt_CT_ShutdownFear = TriggerCreate("libCPCM_gt_CT_ShutdownFear_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownLifeLeech
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownLifeLeech_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickLifeLeech)] = false;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDamage, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownLifeLeech_Init () {
    libCPCM_gt_CT_ShutdownLifeLeech = TriggerCreate("libCPCM_gt_CT_ShutdownLifeLeech_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownTimeWarp
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownTimeWarp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCPCM_gt_CT_TimeWarpSpawn, false);
    TriggerStop(libCPCM_gt_CT_TimeWarpSpawn);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownTimeWarp_Init () {
    libCPCM_gt_CT_ShutdownTimeWarp = TriggerCreate("libCPCM_gt_CT_ShutdownTimeWarp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownNukes
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownNukes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCPCM_gt_CT_NukeSpawn, false);
    TriggerStop(libCPCM_gt_CT_NukeSpawn);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownNukes_Init () {
    libCPCM_gt_CT_ShutdownNukes = TriggerCreate("libCPCM_gt_CT_ShutdownNukes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownBlizzard
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownBlizzard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCPCM_gt_CT_BlizzardSpawn, false);
    TriggerStop(libCPCM_gt_CT_BlizzardSpawn);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownBlizzard_Init () {
    libCPCM_gt_CT_ShutdownBlizzard = TriggerCreate("libCPCM_gt_CT_ShutdownBlizzard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownLavaBurst
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownLavaBurst_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCPCM_gt_CT_LavaBurstSpawn, false);
    TriggerStop(libCPCM_gt_CT_LavaBurstSpawn);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownLavaBurst_Init () {
    libCPCM_gt_CT_ShutdownLavaBurst = TriggerCreate("libCPCM_gt_CT_ShutdownLavaBurst_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownTemporalField
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownTemporalField_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCPCM_gt_CT_TemporalFieldSpawn, false);
    TriggerStop(libCPCM_gt_CT_TemporalFieldSpawn);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownTemporalField_Init () {
    libCPCM_gt_CT_ShutdownTemporalField = TriggerCreate("libCPCM_gt_CT_ShutdownTemporalField_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownStoneZealots
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownStoneZealots_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCPCM_gt_CT_StoneZealotsSpawn);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownStoneZealots_Init () {
    libCPCM_gt_CT_ShutdownStoneZealots = TriggerCreate("libCPCM_gt_CT_ShutdownStoneZealots_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownMagMines
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownMagMines_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownMagMines_Init () {
    libCPCM_gt_CT_ShutdownMagMines = TriggerCreate("libCPCM_gt_CT_ShutdownMagMines_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownVoidRifts
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownVoidRifts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCPCM_gt_CT_VoidRiftSpawn);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownVoidRifts_Init () {
    libCPCM_gt_CT_ShutdownVoidRifts = TriggerCreate("libCPCM_gt_CT_ShutdownVoidRifts_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownTornadoes
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownTornadoes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexTornado;

    // Automatic Variable Declarations
    unitgroup auto4CF6174E_g;
    int auto4CF6174E_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto4CF6174E_g = libCPCM_gv_cT_Tornadoes;
    auto4CF6174E_u = UnitGroupCount(auto4CF6174E_g, c_unitCountAll);
    for (;; auto4CF6174E_u -= 1) {
        lv_indexTornado = UnitGroupUnitFromEnd(auto4CF6174E_g, auto4CF6174E_u);
        if (lv_indexTornado == null) { break; }
        UnitKill(lv_indexTornado);
        UnitGroupRemove(libCPCM_gv_cT_Tornadoes, lv_indexTornado);
    }
    TriggerStop(libCPCM_gt_CT_TornadoMovement);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownTornadoes_Init () {
    libCPCM_gt_CT_ShutdownTornadoes = TriggerCreate("libCPCM_gt_CT_ShutdownTornadoes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownOrbitalStrike
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownOrbitalStrike_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCPCM_gt_CT_OrbitalStrikes);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownOrbitalStrike_Init () {
    libCPCM_gt_CT_ShutdownOrbitalStrike = TriggerCreate("libCPCM_gt_CT_ShutdownOrbitalStrike_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownPurifierBeam
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownPurifierBeam_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexPurifierBeam;

    // Automatic Variable Declarations
    unitgroup autoC266BD54_g;
    int autoC266BD54_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCPCM_gt_CT_InitializePurifierBeam);
    TriggerStop(libCPCM_gt_CT_PurifierBeamController);
    autoC266BD54_g = UnitGroup("MutatorPurifierBeam", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC266BD54_u = UnitGroupCount(autoC266BD54_g, c_unitCountAll);
    for (;; autoC266BD54_u -= 1) {
        lv_indexPurifierBeam = UnitGroupUnitFromEnd(autoC266BD54_g, autoC266BD54_u);
        if (lv_indexPurifierBeam == null) { break; }
        PingDestroy(libHots_gf_PingStoredForUnit(lv_indexPurifierBeam, 1));
        UnitKill(lv_indexPurifierBeam);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownPurifierBeam_Init () {
    libCPCM_gt_CT_ShutdownPurifierBeam = TriggerCreate("libCPCM_gt_CT_ShutdownPurifierBeam_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownPhotonOverload
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownPhotonOverload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickPhotonOverload)] = false;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDamage, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownPhotonOverload_Init () {
    libCPCM_gt_CT_ShutdownPhotonOverload = TriggerCreate("libCPCM_gt_CT_ShutdownPhotonOverload_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownMineFields
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownMineFields_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(3, "WidowMakerStrongerMines", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownMineFields_Init () {
    libCPCM_gt_CT_ShutdownMineFields = TriggerCreate("libCPCM_gt_CT_ShutdownMineFields_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownCycleRandom
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownCycleRandom_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownCycleRandom_Init () {
    libCPCM_gt_CT_ShutdownCycleRandom = TriggerCreate("libCPCM_gt_CT_ShutdownCycleRandom_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownReanimators
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownReanimators_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCPCM_gt_CT_ReanimatorSpawn);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownReanimators_Init () {
    libCPCM_gt_CT_ShutdownReanimators = TriggerCreate("libCPCM_gt_CT_ShutdownReanimators_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownAllCasters
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownAllCasters_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCPCM_gt_CT_AllCastersPeriodicCast);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownAllCasters_Init () {
    libCPCM_gt_CT_ShutdownAllCasters = TriggerCreate("libCPCM_gt_CT_ShutdownAllCasters_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownOrderCosts
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownOrderCosts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickOrderCosts)] = false;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitIssuedOrder, false);
    TriggerEnable(libCPCM_gt_CT_OrderCostCopyUsed, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownOrderCosts_Init () {
    libCPCM_gt_CT_ShutdownOrderCosts = TriggerCreate("libCPCM_gt_CT_ShutdownOrderCosts_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownAfraidOfTheDark
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownAfraidOfTheDark_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickAfraidOfTheDark)] = false;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitIssuedOrder, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownAfraidOfTheDark_Init () {
    libCPCM_gt_CT_ShutdownAfraidOfTheDark = TriggerCreate("libCPCM_gt_CT_ShutdownAfraidOfTheDark_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownInsubordination
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownInsubordination_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickInsubordination)] = false;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitIssuedOrder, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownInsubordination_Init () {
    libCPCM_gt_CT_ShutdownInsubordination = TriggerCreate("libCPCM_gt_CT_ShutdownInsubordination_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownMissileBarrage
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownMissileBarrage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCPCM_gt_CT_MissileBarrage);
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitCreation, false);
    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickMissileMadness)] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownMissileBarrage_Init () {
    libCPCM_gt_CT_ShutdownMissileBarrage = TriggerCreate("libCPCM_gt_CT_ShutdownMissileBarrage_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownVertigo
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownVertigo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCPCM_gt_CT_InitializeVertigo);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownVertigo_Init () {
    libCPCM_gt_CT_ShutdownVertigo = TriggerCreate("libCPCM_gt_CT_ShutdownVertigo_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownUndyingEvil
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownUndyingEvil_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hybridImmortal;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_hybridImmortal = UnitGroupUnit(UnitGroup("MutatorHybridImmortal", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    libCOMI_gf_DestroyPingCoop(libHots_gf_PingStoredForUnit(lv_hybridImmortal, 1));
    UnitRemove(lv_hybridImmortal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownUndyingEvil_Init () {
    libCPCM_gt_CT_ShutdownUndyingEvil = TriggerCreate("libCPCM_gt_CT_ShutdownUndyingEvil_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownPolarity
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownPolarity_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto1D8C5FEE_g;
    int auto1D8C5FEE_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickPolarity)] = false;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDamage, false);
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitCreation, false);
    auto1D8C5FEE_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", 1, c_unitAllianceEnemy, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto1D8C5FEE_u = UnitGroupCount(auto1D8C5FEE_g, c_unitCountAll);
    for (;; auto1D8C5FEE_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto1D8C5FEE_g, auto1D8C5FEE_u);
        if (lv_indexUnit == null) { break; }
        libCPCM_gf_CT_RemovePolarity(lv_indexUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownPolarity_Init () {
    libCPCM_gt_CT_ShutdownPolarity = TriggerCreate("libCPCM_gt_CT_ShutdownPolarity_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownUberDarkness
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownUberDarkness_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UpgradeChanged, false);
    TriggerStop(libCPCM_gt_CT_UberDarknessSpotlight);
    TriggerExecute(libCPCM_gt_CT_ShutdownBlackFog, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownUberDarkness_Init () {
    libCPCM_gt_CT_ShutdownUberDarkness = TriggerCreate("libCPCM_gt_CT_ShutdownUberDarkness_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownFoodHunt
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownFoodHunt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCPCM_gt_CT_FoodHuntDepleteFood);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownFoodHunt_Init () {
    libCPCM_gt_CT_ShutdownFoodHunt = TriggerCreate("libCPCM_gt_CT_ShutdownFoodHunt_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownSharedSupply
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownSharedSupply_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCPCM_gt_CT_SharedSupplyUpdate);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownSharedSupply_Init () {
    libCPCM_gt_CT_ShutdownSharedSupply = TriggerCreate("libCPCM_gt_CT_ShutdownSharedSupply_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownTrickOrTreat
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownTrickOrTreat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCPCM_gt_CT_TrickOrTreatSpawn, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownTrickOrTreat_Init () {
    libCPCM_gt_CT_ShutdownTrickOrTreat = TriggerCreate("libCPCM_gt_CT_ShutdownTrickOrTreat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownBlizzconChallenge
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownBlizzconChallenge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownBlizzconChallenge_Init () {
    libCPCM_gt_CT_ShutdownBlizzconChallenge = TriggerCreate("libCPCM_gt_CT_ShutdownBlizzconChallenge_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownGiftFight
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownGiftFight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitCreation, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownGiftFight_Init () {
    libCPCM_gt_CT_ShutdownGiftFight = TriggerCreate("libCPCM_gt_CT_ShutdownGiftFight_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownKillKarma
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownKillKarma_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownKillKarma_Init () {
    libCPCM_gt_CT_ShutdownKillKarma = TriggerCreate("libCPCM_gt_CT_ShutdownKillKarma_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownSluggishness
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownSluggishness_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownSluggishness_Init () {
    libCPCM_gt_CT_ShutdownSluggishness = TriggerCreate("libCPCM_gt_CT_ShutdownSluggishness_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownHeroesFromTheStorm
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownHeroesFromTheStorm_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickHeroesFromTheStorm)] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownHeroesFromTheStorm_Init () {
    libCPCM_gt_CT_ShutdownHeroesFromTheStorm = TriggerCreate("libCPCM_gt_CT_ShutdownHeroesFromTheStorm_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownHardenedWill
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownHardenedWill_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoC2FFC44C_g;
    int autoC2FFC44C_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickHardenedWill)] = false;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitCreation, false);
    autoC2FFC44C_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", 1, c_unitAllianceEnemy, null, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoC2FFC44C_u = UnitGroupCount(autoC2FFC44C_g, c_unitCountAll);
    for (;; autoC2FFC44C_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoC2FFC44C_g, autoC2FFC44C_u);
        if (lv_indexUnit == null) { break; }
        UnitBehaviorRemove(lv_indexUnit, "MutatorHardenedWillSelfCycle", c_unitBehaviorCountAll);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownHardenedWill_Init () {
    libCPCM_gt_CT_ShutdownHardenedWill = TriggerCreate("libCPCM_gt_CT_ShutdownHardenedWill_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownInspiration
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownInspiration_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoD9C46D40_g;
    int autoD9C46D40_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickInspiration)] = false;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitCreation, false);
    autoD9C46D40_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", 1, c_unitAllianceEnemy, null, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoD9C46D40_u = UnitGroupCount(autoD9C46D40_g, c_unitCountAll);
    for (;; autoD9C46D40_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoD9C46D40_g, autoD9C46D40_u);
        if (lv_indexUnit == null) { break; }
        UnitBehaviorRemove(lv_indexUnit, "MutatorInspirationSearch", c_unitBehaviorCountAll);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownInspiration_Init () {
    libCPCM_gt_CT_ShutdownInspiration = TriggerCreate("libCPCM_gt_CT_ShutdownInspiration_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownFireworks
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownFireworks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickFireworks)] = false;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownFireworks_Init () {
    libCPCM_gt_CT_ShutdownFireworks = TriggerCreate("libCPCM_gt_CT_ShutdownFireworks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownRedEnvelopes
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownRedEnvelopes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCPCM_gt_CT_RedEnvelopeSpawns);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownRedEnvelopes_Init () {
    libCPCM_gt_CT_ShutdownRedEnvelopes = TriggerCreate("libCPCM_gt_CT_ShutdownRedEnvelopes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownTempDamageReflect
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownTempDamageReflect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickTempDamageReflect)] = false;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDamage, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownTempDamageReflect_Init () {
    libCPCM_gt_CT_ShutdownTempDamageReflect = TriggerCreate("libCPCM_gt_CT_ShutdownTempDamageReflect_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownDeathPull
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownDeathPull_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickDeathPull)] = false;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownDeathPull_Init () {
    libCPCM_gt_CT_ShutdownDeathPull = TriggerCreate("libCPCM_gt_CT_ShutdownDeathPull_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownPropagate
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownPropagate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCPCM_gt_CT_PropagatorSpawn);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownPropagate_Init () {
    libCPCM_gt_CT_ShutdownPropagate = TriggerCreate("libCPCM_gt_CT_ShutdownPropagate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownKillBots
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownKillBots_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCPCM_gt_CT_KillBotsSpawn);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownKillBots_Init () {
    libCPCM_gt_CT_ShutdownKillBots = TriggerCreate("libCPCM_gt_CT_ShutdownKillBots_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownMomentOfSilence
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownMomentOfSilence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCPCM_gv_cT_MutatorEnabledQuickList[(libCPCM_ge_CT_MutatorQuickList_CT_QuickMomentOfSilence)] = false;
    libCPCM_gf_ToggleMutator(libCPCM_ge_CT_TriggerType_UnitDeath, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownMomentOfSilence_Init () {
    libCPCM_gt_CT_ShutdownMomentOfSilence = TriggerCreate("libCPCM_gt_CT_ShutdownMomentOfSilence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownBoomBots
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CT_ShutdownBoomBots_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCPCM_gt_CT_BoomBotsSpawn);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CT_ShutdownBoomBots_Init () {
    libCPCM_gt_CT_ShutdownBoomBots = TriggerCreate("libCPCM_gt_CT_ShutdownBoomBots_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_CustomStartupSelectLaunch
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CC_CustomStartupSelectLaunch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOUI_gf_CU_CustomMutatorClose();
    libCPCM_gf_CC_CustomStartupLaunch();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CC_CustomStartupSelectLaunch_Init () {
    libCPCM_gt_CC_CustomStartupSelectLaunch = TriggerCreate("libCPCM_gt_CC_CustomStartupSelectLaunch_Func");
    libCOUI_gf_CU_CustomMutatorStartGame(libCPCM_gt_CC_CustomStartupSelectLaunch);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_DevStartupDevForceQuit
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CC_DevStartupDevForceQuit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameOver(1, c_gameOverDefeat, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CC_DevStartupDevForceQuit_Init () {
    libCPCM_gt_CC_DevStartupDevForceQuit = TriggerCreate("libCPCM_gt_CC_DevStartupDevForceQuit_Func");
    TriggerEnable(libCPCM_gt_CC_DevStartupDevForceQuit, false);
    TriggerAddEventCustomDialogDismissed(libCPCM_gt_CC_DevStartupDevForceQuit, c_playerAny, libNtve_ge_CustomDialogResult_c_customDialogResultAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_DevStartupCommSelectExit
//--------------------------------------------------------------------------------------------------
bool libCPCM_gt_CC_DevStartupCommSelectExit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoA2D64EA6_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoA2D64EA6_g = libCPCD_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoA2D64EA6_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOUI_gf_CU_CommanderClose(lv_indexPlayer);
    }
    libCPCM_gf_CC_DevStartupFinish();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCPCM_gt_CC_DevStartupCommSelectExit_Init () {
    libCPCM_gt_CC_DevStartupCommSelectExit = TriggerCreate("libCPCM_gt_CC_DevStartupCommSelectExit_Func");
    libCOUI_gf_CU_CommanderClosed(libCPCM_gt_CC_DevStartupCommSelectExit);
}

void libCPCM_InitTriggers () {
    libCPCM_gt_CT_DebugDropPodSpawnNow_Init();
    libCPCM_gt_CT_DebugMakeVoidRift_Init();
    libCPCM_gt_CT_DebugMakePurifierBeam_Init();
    libCPCM_gt_CT_DebugRandomCycleNow_Init();
    libCPCM_gt_CT_DebugSpawnReanimator_Init();
    libCPCM_gt_CT_DebugAllCastersForceAbility_Init();
    libCPCM_gt_CT_DebugAllCastersSetEnergy_Init();
    libCPCM_gt_CT_DebugMissileMe_Init();
    libCPCM_gt_CT_DebugMissileGo_Init();
    libCPCM_gt_CT_DebugPathCost_Init();
    libCPCM_gt_CT_DebugCanPath_Init();
    libCPCM_gt_CT_DebugRiftSpawn_Init();
    libCPCM_gt_CT_DebugGiftSpawn_Init();
    libCPCM_gt_CT_DebugGiftSetPower_Init();
    libCPCM_gt_CT_DebugGiftPlayer_Init();
    libCPCM_gt_CT_DebugGiftEnemy_Init();
    libCPCM_gt_CT_DebugBoomBotSpawn_Init();
    libCPCM_gt_CT_DebugBrutal_Init();
    libCPCM_gt_CT_InitializeCycleRandom_Init();
    libCPCM_gt_CT_AmonHeroPool_Tracker_Init();
    libCPCM_gt_CT_JustDieTrainHealth_Init();
    libCPCM_gt_CT_JustDiePolarityInteraction_Init();
    libCPCM_gt_CT_StatBlizzardFreeze_Init();
    libCPCM_gt_CT_GiftKillBotBanelingCredit_Init();
    libCPCM_gt_CT_GiftShrunkEffectOn_Init();
    libCPCM_gt_CT_GiftShrunkEffectOff_Init();
    libCPCM_gt_CT_CandyBowlTextUpdate_Init();
    libCPCM_gt_CT_BlizzardEntersSafetyZone_Init();
    libCPCM_gt_CT_BlizzardLeavesSafetyZone_Init();
    libCPCM_gt_MutatorLaserDrillBeamSoundRegionClear_Init();
    libCPCM_gt_MutatorLaserDrillBeamSoundFiring_Init();
    libCPCM_gt_UnitisCreated_Init();
    libCPCM_gt_UnitisOrdered_Init();
    libCPCM_gt_UnitOwnerChanges_Init();
    libCPCM_gt_UnitTakesDamage_Init();
    libCPCM_gt_UnitDies_Init();
    libCPCM_gt_UpgradeChanges_Init();
    libCPCM_gt_CT_PlagueDeath_Init();
    libCPCM_gt_CT_OutbreakSpawn_Init();
    libCPCM_gt_CT_StoneZealotsSpawn_Init();
    libCPCM_gt_CT_MagMineSpawn_Init();
    libCPCM_gt_CT_DropPodSpawn_Init();
    libCPCM_gt_CT_ResourceSpawns_Init();
    libCPCM_gt_CT_RedEnvelopeSpawns_Init();
    libCPCM_gt_CT_TimeWarpSpawn_Init();
    libCPCM_gt_CT_NukeSpawn_Init();
    libCPCM_gt_CT_BlizzardSpawn_Init();
    libCPCM_gt_CT_LavaBurstSpawn_Init();
    libCPCM_gt_CT_TemporalFieldSpawn_Init();
    libCPCM_gt_CT_EvilSoACast_Init();
    libCPCM_gt_CT_EntombApply_Init();
    libCPCM_gt_CT_WorkerSleep_Init();
    libCPCM_gt_CT_VoidRiftSpawn_Init();
    libCPCM_gt_CT_VoidRiftMakeUnits_Init();
    libCPCM_gt_CT_VoidRiftUnitMade_Init();
    libCPCM_gt_CT_TornadoMovement_Init();
    libCPCM_gt_CT_OrbitalStrikes_Init();
    libCPCM_gt_CT_PurifierBeamController_Init();
    libCPCM_gt_CT_CycleRandomMutators_Init();
    libCPCM_gt_CT_ReanimatorSpawn_Init();
    libCPCM_gt_CT_ReanimatorLogic_Init();
    libCPCM_gt_CT_ReanimateUsed_Init();
    libCPCM_gt_CT_SpeedFreaksMorphCleanup_Init();
    libCPCM_gt_CT_AllCastersPeriodicCast_Init();
    libCPCM_gt_CT_MissileBarrage_Init();
    libCPCM_gt_CT_OrderCostCopyUsed_Init();
    libCPCM_gt_CT_UberDarknessSpotlight_Init();
    libCPCM_gt_CT_FoodHuntDepleteFood_Init();
    libCPCM_gt_CT_FoodHuntHungerDamage_Init();
    libCPCM_gt_CT_FoodHuntSpawn_Init();
    libCPCM_gt_CT_FoodHuntFear_Init();
    libCPCM_gt_CT_SharedSupplyUpdate_Init();
    libCPCM_gt_CT_TrickOrTreatSpawn_Init();
    libCPCM_gt_CT_StructureStealLogic_Init();
    libCPCM_gt_CT_StructureStealTrigger_Init();
    libCPCM_gt_CT_StructureStealUnitTrained_Init();
    libCPCM_gt_CT_GiftFightSpawn_Init();
    libCPCM_gt_CT_GiftFightControl_Init();
    libCPCM_gt_CT_TempDamageReflectHealing_Init();
    libCPCM_gt_CT_PropagateClone_Init();
    libCPCM_gt_CT_PropagatorSpawn_Init();
    libCPCM_gt_CT_KillBotsSpawn_Init();
    libCPCM_gt_CT_BoomBotsSpawn_Init();
    libCPCM_gt_CT_BoomBotsInput_Init();
    libCPCM_gt_CT_InitializeHardenedWill_Init();
    libCPCM_gt_CT_InitializeInspiration_Init();
    libCPCM_gt_CT_InitializeAllCasters_Init();
    libCPCM_gt_CT_InitializeAvenger_Init();
    libCPCM_gt_CT_InitializeLongRange_Init();
    libCPCM_gt_CT_InitializePermaCloak_Init();
    libCPCM_gt_CT_InitializeUnitSpeed_Init();
    libCPCM_gt_CT_InitializeMomentOfSilence_Init();
    libCPCM_gt_CT_InitializeDeathPull_Init();
    libCPCM_gt_CT_InitializeFireworks_Init();
    libCPCM_gt_CT_InitializeKillKarma_Init();
    libCPCM_gt_CT_InitializeStructureSteal_Init();
    libCPCM_gt_CT_InitializeReanimators_Init();
    libCPCM_gt_CT_InitializeJustDie_Init();
    libCPCM_gt_CT_InitializeDeathFire_Init();
    libCPCM_gt_CT_InitializeHybridDeathNuke_Init();
    libCPCM_gt_CT_InitializeDeathAOE_Init();
    libCPCM_gt_CT_InitializeSpawnInfested_Init();
    libCPCM_gt_CT_InitializeSpawnBroodling_Init();
    libCPCM_gt_CT_InitializeBoomBots_Init();
    libCPCM_gt_CT_InitializeKillBots_Init();
    libCPCM_gt_CT_InitializePropagate_Init();
    libCPCM_gt_CT_InitializeHeroesFromTheStorm_Init();
    libCPCM_gt_CT_InitializeUndyingEvil_Init();
    libCPCM_gt_CT_InitializeMissileBarrage_Init();
    libCPCM_gt_CT_InitializeMineFields_Init();
    libCPCM_gt_CT_InitializeVoidRifts_Init();
    libCPCM_gt_CT_InitializeMagMines_Init();
    libCPCM_gt_CT_InitializeStoneZealots_Init();
    libCPCM_gt_CT_InitializeDropPods_Init();
    libCPCM_gt_CT_InitializeLaserDrill_Init();
    libCPCM_gt_CT_InitializeOutbreak_Init();
    libCPCM_gt_CT_InitializePurifierBeam_Init();
    libCPCM_gt_CT_InitializeOrbitalStrike_Init();
    libCPCM_gt_CT_InitializeTornadoes_Init();
    libCPCM_gt_CT_InitializeTemporalField_Init();
    libCPCM_gt_CT_InitializeLavaBurst_Init();
    libCPCM_gt_CT_InitializeBlizzard_Init();
    libCPCM_gt_CT_InitializeNukes_Init();
    libCPCM_gt_CT_InitializeTimeWarp_Init();
    libCPCM_gt_CT_InitializeMinedOut_Init();
    libCPCM_gt_CT_InitializeEntomb_Init();
    libCPCM_gt_CT_InitializeTempDamageReflect_Init();
    libCPCM_gt_CT_InitializePlague_Init();
    libCPCM_gt_CT_InitializeEvolve_Init();
    libCPCM_gt_CT_InitializePolarity_Init();
    libCPCM_gt_CT_InitializePhotonOverload_Init();
    libCPCM_gt_CT_InitializeLifeLeech_Init();
    libCPCM_gt_CT_InitializeSideStep_Init();
    libCPCM_gt_CT_InitializeBarrier_Init();
    libCPCM_gt_CT_InitializeDamageBounce_Init();
    libCPCM_gt_CT_InitializeConcussiveAttacks_Init();
    libCPCM_gt_CT_InitializeAfraidOfTheDark_Init();
    libCPCM_gt_CT_InitializeUberDarkness_Init();
    libCPCM_gt_CT_InitializeVertigo_Init();
    libCPCM_gt_CT_InitializeBlackFog_Init();
    libCPCM_gt_CT_InitializeShortSighted_Init();
    libCPCM_gt_CT_InitializeSluggishness_Init();
    libCPCM_gt_CT_InitializeInsubordination_Init();
    libCPCM_gt_CT_InitializeSharedSupply_Init();
    libCPCM_gt_CT_InitializeOrderCosts_Init();
    libCPCM_gt_CT_InitializeFear_Init();
    libCPCM_gt_CT_InitializeWorkerSleep_Init();
    libCPCM_gt_CT_InitializeRedEnvelopes_Init();
    libCPCM_gt_CT_InitializeGiftFight_Init();
    libCPCM_gt_CT_InitializeTrickOrTreat_Init();
    libCPCM_gt_CT_InitializeFoodHunt_Init();
    libCPCM_gt_CT_ShutdownWorkerSleep_Init();
    libCPCM_gt_CT_ShutdownOutbreak_Init();
    libCPCM_gt_CT_ShutdownEntomb_Init();
    libCPCM_gt_CT_ShutdownPermaCloak_Init();
    libCPCM_gt_CT_ShutdownUnitSpeed_Init();
    libCPCM_gt_CT_ShutdownBlackFog_Init();
    libCPCM_gt_CT_ShutdownReducedVision_Init();
    libCPCM_gt_CT_ShutdownLongRange_Init();
    libCPCM_gt_CT_ShutdownShortSighted_Init();
    libCPCM_gt_CT_ShutdownLaserDrill_Init();
    libCPCM_gt_CT_ShutdownSpawnBroodling_Init();
    libCPCM_gt_CT_ShutdownSpawnInfested_Init();
    libCPCM_gt_CT_ShutdownDeathAOE_Init();
    libCPCM_gt_CT_ShutdownStructureSteal_Init();
    libCPCM_gt_CT_ShutdownHybridDeathNuke_Init();
    libCPCM_gt_CT_ShutdownDeathFire_Init();
    libCPCM_gt_CT_ShutdownPlague_Init();
    libCPCM_gt_CT_ShutdownAvenger_Init();
    libCPCM_gt_CT_ShutdownEvolve_Init();
    libCPCM_gt_CT_ShutdownJustDie_Init();
    libCPCM_gt_CT_ShutdownConcussiveAttacks_Init();
    libCPCM_gt_CT_ShutdownDamageBounce_Init();
    libCPCM_gt_CT_ShutdownMinedOut_Init();
    libCPCM_gt_CT_ShutdownDropPods_Init();
    libCPCM_gt_CT_ShutdownBarrier_Init();
    libCPCM_gt_CT_ShutdownSideStep_Init();
    libCPCM_gt_CT_ShutdownFear_Init();
    libCPCM_gt_CT_ShutdownLifeLeech_Init();
    libCPCM_gt_CT_ShutdownTimeWarp_Init();
    libCPCM_gt_CT_ShutdownNukes_Init();
    libCPCM_gt_CT_ShutdownBlizzard_Init();
    libCPCM_gt_CT_ShutdownLavaBurst_Init();
    libCPCM_gt_CT_ShutdownTemporalField_Init();
    libCPCM_gt_CT_ShutdownStoneZealots_Init();
    libCPCM_gt_CT_ShutdownMagMines_Init();
    libCPCM_gt_CT_ShutdownVoidRifts_Init();
    libCPCM_gt_CT_ShutdownTornadoes_Init();
    libCPCM_gt_CT_ShutdownOrbitalStrike_Init();
    libCPCM_gt_CT_ShutdownPurifierBeam_Init();
    libCPCM_gt_CT_ShutdownPhotonOverload_Init();
    libCPCM_gt_CT_ShutdownMineFields_Init();
    libCPCM_gt_CT_ShutdownCycleRandom_Init();
    libCPCM_gt_CT_ShutdownReanimators_Init();
    libCPCM_gt_CT_ShutdownAllCasters_Init();
    libCPCM_gt_CT_ShutdownOrderCosts_Init();
    libCPCM_gt_CT_ShutdownAfraidOfTheDark_Init();
    libCPCM_gt_CT_ShutdownInsubordination_Init();
    libCPCM_gt_CT_ShutdownMissileBarrage_Init();
    libCPCM_gt_CT_ShutdownVertigo_Init();
    libCPCM_gt_CT_ShutdownUndyingEvil_Init();
    libCPCM_gt_CT_ShutdownPolarity_Init();
    libCPCM_gt_CT_ShutdownUberDarkness_Init();
    libCPCM_gt_CT_ShutdownFoodHunt_Init();
    libCPCM_gt_CT_ShutdownSharedSupply_Init();
    libCPCM_gt_CT_ShutdownTrickOrTreat_Init();
    libCPCM_gt_CT_ShutdownBlizzconChallenge_Init();
    libCPCM_gt_CT_ShutdownGiftFight_Init();
    libCPCM_gt_CT_ShutdownKillKarma_Init();
    libCPCM_gt_CT_ShutdownSluggishness_Init();
    libCPCM_gt_CT_ShutdownHeroesFromTheStorm_Init();
    libCPCM_gt_CT_ShutdownHardenedWill_Init();
    libCPCM_gt_CT_ShutdownInspiration_Init();
    libCPCM_gt_CT_ShutdownFireworks_Init();
    libCPCM_gt_CT_ShutdownRedEnvelopes_Init();
    libCPCM_gt_CT_ShutdownTempDamageReflect_Init();
    libCPCM_gt_CT_ShutdownDeathPull_Init();
    libCPCM_gt_CT_ShutdownPropagate_Init();
    libCPCM_gt_CT_ShutdownKillBots_Init();
    libCPCM_gt_CT_ShutdownMomentOfSilence_Init();
    libCPCM_gt_CT_ShutdownBoomBots_Init();
    libCPCM_gt_CC_CustomStartupSelectLaunch_Init();
    libCPCM_gt_CC_DevStartupDevForceQuit_Init();
    libCPCM_gt_CC_DevStartupCommSelectExit_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libCPCM_InitLib_completed = false;

void libCPCM_InitLib () {
    if (libCPCM_InitLib_completed) {
        return;
    }

    libCPCM_InitLib_completed = true;

    libCPCM_InitLibraries();
    libCPCM_InitVariables();
    libCPCM_InitTriggers();
}

include "LibCPGL"
include "LibCPCD"
include "LibCPCC"

