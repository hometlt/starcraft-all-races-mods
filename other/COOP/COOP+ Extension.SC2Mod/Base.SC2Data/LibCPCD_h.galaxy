include "LibCOOC"
include "LibCOOC"
include "LibCPGL_h"

//--------------------------------------------------------------------------------------------------
// Library: Coop+Data
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libCPCD_ge_HeroPanelUnitPresetType_None = 0;
const int libCPCD_ge_HeroPanelUnitPresetType_Artanis = 1;
const int libCPCD_ge_HeroPanelUnitPresetType_Kerrigan = 2;
const int libCPCD_ge_HeroPanelUnitPresetType_Zagara = 3;
const int libCPCD_ge_HeroPanelUnitPresetType_LaserDrill = 4;
const int libCPCD_ge_HeroPanelUnitPresetType_Hyperion = 5;
const int libCPCD_ge_HeroPanelUnitPresetType_KerriganReviveCocoon = 6;
const int libCPCD_ge_HeroPanelUnitPresetType_ZagaraReviveCocoon = 7;
const int libCPCD_ge_HeroPanelUnitPresetType_Nova = 8;
const int libCPCD_ge_HeroPanelUnitPresetType_Alarak = 9;
const int libCPCD_ge_HeroPanelUnitPresetType_NovaReviveBeacon = 10;
const int libCPCD_ge_HeroPanelUnitPresetType_AlarakReviveBeacon = 11;
const int libCPCD_ge_HeroPanelUnitPresetType_Fenix = 12;
const int libCPCD_ge_HeroPanelUnitPresetType_FenixDragoon = 13;
const int libCPCD_ge_HeroPanelUnitPresetType_FenixArbiter = 14;
const int libCPCD_ge_HeroPanelUnitPresetType_Selendis = 15;
const int libCPCD_ge_HeroPanelUnitPresetType_Colarion = 16;
const int libCPCD_ge_HeroPanelUnitPresetType_Megalith = 17;
const int libCPCD_ge_HeroPanelUnitPresetType_Dehaka = 18;
const int libCPCD_ge_HeroPanelUnitPresetType_DehakasDen = 19;
const int libCPCD_ge_HeroPanelUnitPresetType_ArtifactTruck = 20;
const int libCPCD_ge_HeroPanelUnitPresetType_Tychus = 21;
const int libCPCD_ge_HeroPanelUnitPresetType_TychusReviveBeacon = 22;
const int libCPCD_ge_HeroPanelUnitPresetType_Zeratul = 23;
const int libCPCD_ge_HeroPanelUnitPresetType_ZeratulReviveBeacon = 24;
const int libCPCD_ge_HeroPanelUnitPresetType_Gary = 25;
const int libCPCD_ge_HeroPanelUnitPresetType_SuperGary = 26;
const int libCPCD_ge_HeroPanelUnitPresetType_GaryReviveBeacon = 27;
const int libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog = 0;
const int libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Panel = 1;
const int libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Label = 2;
const int libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value = 3;
const int libCPCD_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar = 4;
const int libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_MinValue = 0;
const int libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_CurValue = 1;
const int libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_MaxValue = 2;
const int libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_OffsetX = 3;
const int libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_OffsetY = 4;
const int libCPCD_ge_CU_ProgressBarUnitStoredValuesOld_Attachment = 5;
const int libCPCD_ge_CU_UnitProgressBarDataName_MinValue = 0;
const int libCPCD_ge_CU_UnitProgressBarDataName_CurValue = 1;
const int libCPCD_ge_CU_UnitProgressBarDataName_MaxValue = 2;
const int libCPCD_ge_CU_UnitProgressBarDataName_DisplayValue = 3;
const int libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Label = 0;
const int libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Value = 1;
const int libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Bar = 2;
const int libCPCD_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Broder = 3;
const int libCPCD_ge_GPTMTargetingPhaseType_None = 0;
const int libCPCD_ge_GPTMTargetingPhaseType_Location = 1;
const int libCPCD_ge_GPTMTargetingPhaseType_Direction = 2;
const int libCPCD_ge_CDZeratulProphecyEventUnits_ZeratulUnit = 0;
const int libCPCD_ge_CDZeratulProphecyEventUnits_ArtifactUnit = 1;
const int libCPCD_ge_MissionTransmissionPortraitOptioins_LeavePortraitVisibleAfter = 0;
const int libCPCD_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter = 1;
const int libCPCD_ge_MissionTransmissionPortraitOptioins_DontShowPortrait = 2;
const int libCPCD_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior = 0;
const int libCPCD_ge_MissionTransmissionCueSoundOptions_PlayCueSound = 1;
const int libCPCD_ge_MissionTransmissionCueSoundOptions_DontPlayCueSound = 2;
const int libCPCD_ge_MissionTransmissionOptions_ChatBubble = 0;
const int libCPCD_ge_MissionStatus_Locked = 0;
const int libCPCD_ge_MissionStatus_Available = 1;
const int libCPCD_ge_MissionStatus_Completed = 2;
const int libCPCD_ge_MissionCountOptions_Locked = 0;
const int libCPCD_ge_MissionCountOptions_Available = 1;
const int libCPCD_ge_MissionCountOptions_Completed = 2;
const int libCPCD_ge_MissionCountOptions_All = 3;
const int libCPCD_ge_ObjectiveMessageType_ObjectiveDiscovered = 0;
const int libCPCD_ge_ObjectiveMessageType_ObjectiveUpdate = 1;
const int libCPCD_ge_ObjectiveMessageType_ObjectiveCompleted = 2;
const int libCPCD_ge_ObjectiveMessageType_ObjectiveFailed = 3;
const int libCPCD_ge_CampaignMessageType_MissionVictory = 0;
const int libCPCD_ge_CampaignMessageType_MissionFailed = 1;
const int libCPCD_ge_CampaignMessageType_Hint = 2;
const int libCPCD_ge_CampaignMessageType_SimpleHint = 3;
const int libCPCD_ge_CampaignMessageType_Secret = 4;
const int libCPCD_ge_CampaignMessageType_Warning = 5;
const int libCPCD_ge_CampaignMessageType_NewUnitAcquired = 6;
const int libCPCD_ge_CampaignMessageType_NewUnitAvailable = 7;
const int libCPCD_ge_CampaignMessageType_NewTechAvailable = 8;
const int libCPCD_ge_CampaignMessageType_NewUnitAvailable2 = 9;
const int libCPCD_ge_CampaignMessageFormatNotFormat_FormatMessage = 0;
const int libCPCD_ge_CampaignMessageFormatNotFormat_NotFormatMessage = 1;
const int libCPCD_ge_CampaginReticleType_ZergMainObjective = 0;
const int libCPCD_ge_CampaginReticleType_ZergBonusObjective = 1;
const int libCPCD_ge_CampaginReticleType_ZergEnemy = 2;
const int libCPCD_ge_CampaginReticleType_TerranMainObjective = 3;
const int libCPCD_ge_CampaginReticleType_TerranBonusObjective = 4;
const int libCPCD_ge_CampaginReticleType_TerranEnemy = 5;
const int libCPCD_ge_CampaginReticleType_ProtossMainObjective = 6;
const int libCPCD_ge_CampaginReticleType_ProtossBonusObjective = 7;
const int libCPCD_ge_CampaginReticleType_ProtossEnemy = 8;
const int libCPCD_ge_CampaginReticleSize_Large = 0;
const int libCPCD_ge_CampaginReticleSize_Medium = 1;
const int libCPCD_ge_CampaginReticleSize_Small = 2;

// Constants
const fixed libCPCD_gv_panelHeroPeriodicUpdate = 0.25;
const int libCPCD_gv_panelHeroMaxSlotCount = 2;
const int libCPCD_gv_panelHeroLifeHeight = 20;
const int libCPCD_gv_panelHeroShieldHeight = 8;
const int libCPCD_gv_panelHeroEnergyHeight = 8;
const int libCPCD_gv_panelHeroWidth = 200;
const int libCPCD_gv_gPTMTARGETCOUNTMAX = 5;
const fixed libCPCD_gv_cDAlarakEmpowerBaseDmgInc = 1.0;
const fixed libCPCD_gv_cDAlarakEmpowerBaseSpellDmgeIncPercent = 0.05;
const fixed libCPCD_gv_cDAlarakEmpowerDiminishingReturnsMultiplier = 0.5;
const fixed libCPCD_gv_cDAlarakEmpowerDiminishingReturnsSupplyThreshold = 100.0;
const fixed libCPCD_gv_cDAlarakEmpowerMaxPower = 200.0;
const string libCPCD_gv_cDAlarakEmpowerAuraTarget = "AlarakEmpowerTarget";
const string libCPCD_gv_cDAlarakEmpowerWorshiperTarget = "WorshipAlarak";
const string libCPCD_gv_cDAlarakEmpowerBehaviorCaster = "AlarakEmpowerDisplay";
const string libCPCD_gv_cDAlarakEmpowerAuraTargetPlayerFinalEffect = "AlarakEmpowerTargetPlayerFinal";
const string libCPCD_gv_cDAlarakEmpowerAuraTargetPlayerStartEffect = "AlarakEmpowerTargetPlayerStart";
const string libCPCD_gv_cDAlarakSoulAbsorptionImpactEffect = "AlarakSoulAbsorptionImpactDummy";
const string libCPCD_gv_cDAlarakSoulAbsorptionLaunchEffect = "AlarakSoulAbsorptionLaunchDummy";
const string libCPCD_gv_cDAlarakSoulAbsorptionScoreTrackerEffect = "SoulAbsorptionMU";
const fixed libCPCD_gv_cDAlarakSoulAbsorptionFoodFactor = 20.0;
const int libCPCD_gv_cDNovaNamesCount = 143;
const int libCPCD_gv_cDFenixHeroIndex = 1;
const fixed libCPCD_gv_cDFenixSuitSwapCooldown = 15.0;
const fixed libCPCD_gv_cDFenixOfflineVitalRegenMultiplier = 1.2;
const int libCPCD_gv_cDFenixChampionCount = 6;
const int libCPCD_gv_cDDehakaEssenceIndex = 17;
const string libCPCD_gv_cDDehakaConsumeCooldownLink = "Abil/DehakaConsume";
const string libCPCD_gv_cDDehakaConsumeAbility = "DehakaConsume";
const string libCPCD_gv_cDDehakaConsumeEffect = "DehakaConsumeImpactEatDamage";
const string libCPCD_gv_cDDehakaConsumeEffectTriggerEffect = "DehakaConsumeImpactEatDamageReal";
const string libCPCD_gv_cDDehakaConsumeBehaviorDisable = "DehakaConsumeDisableCommandCard";
const int libCPCD_gv_cDDehakaConsumeEffectHeroicEssenceAmount = 20;
const string libCPCD_gv_cDDehakaConsumeEffectHeroicLink = "DehakaConsumeEffectHeroic";
const string libCPCD_gv_cDDehakaConsumeEffectUserType = "CoopAbilityDehakaConsumeEffects";
const string libCPCD_gv_cDDehakaConsumeEffectPsiExplodeWeaponDmgLink = "DehakaConsumeEffectPsionicDamage";
const string libCPCD_gv_cDDehakaMutaliskReviveCooldownBehavior = "DehakaMutaliskTimerBehavior";
const string libCPCD_gv_cDDehakaMutaliskReviveCooldownIndicator = "PrimalReconstitutionCooldownIndicator";
const string libCPCD_gv_cDHHStatUserType = "TheHornersStat";
const string libCPCD_gv_cDHHStatBonus = "MasteryHornerMSOBonusDisplayDummy";
const string libCPCD_gv_cDHHFactionUserType = "TheHornersFactions";
const string libCPCD_gv_cDTychusOdinEffectCreate = "TychusCalldownOdinApplyTimedLife";
const string libCPCD_gv_cDTychusOdinEffectCalled = "TychusCalldownOdinCreatePrecursor";
const string libCPCD_gv_cDTychusOdinEffectCaller = "TychusCalldownOdinTargetedDummy";
const string libCPCD_gv_cDTychusUserType = "CoopTechTychusSquad";
const string libCPCD_gv_cDTychusUserTypeAbilities = "CoopTechTychusSquad";
const fixed libCPCD_gv_cDTychusRechargeTrainTimeMasteryReducePerLevel = 2.0;
const fixed libCPCD_gv_cDTychusRechargeTimeTrain = 240.0;
const int libCPCD_gv_cDTychusUISquadMaxSize = 5;
const int libCPCD_gv_cDTychusUIMedivacMaxCharges = 3;
const int libCPCD_gv_cDZeratulProphecyArtifactCount = 3;
const int libCPCD_gv_cDZeratulSelectionMax = 4;
const string libCPCD_gv_warpGateTrainAbility = "WarpGateTrain";
const string libCPCD_gv_supplicantWarpTrainActualAbility = "WarpGateTrainSupplicantTrue";
const string libCPCD_gv_supplicantWarpTrainDummyUnitLink = "AlarakSupplicantWarpTrainDummy";
const string libCPCD_gv_supplicantWarpTrainCreatorUnitLink = "AlarakSupplicantWarpTrainCreator";
const string libCPCD_gv_supplicantWarpTrainActualUnitLink = "Supplicant";
const string libCPCD_gv_supplicantWarpTrainWarpPowerCheckBehaviorLink = "SupplicantWarpPowerCheck";
const string libCPCD_gv_supplicantWarpTrainWarpRefundBehaviorLink = "SupplicantCancelCheck";
const string libCPCD_gv_supplicantWarpTrainCreatorFinderBehaviorLink = "SupplicantCreatorCheck";
const string libCPCD_gv_supplicantWarpTrainCreatorWarpGateFinderBehaviorLink = "SupplicantCreatorWarpGateCheck";
const string libCPCD_gv_supplicantWarpTrainActualUnitBirthEventLink = "SupplicantBirth";
const string libCPCD_gv_supplicantWarpTrainActualUnitCancelEventLink = "SuplicantWarpCancel";
const string libCPCD_gv_cM_SupplicantWarpGateMarkerPrefix = "CM_SupplicantCreatorWarpGate";
const string libCPCD_gv_StukovInfestedWraithSnareBehavior = "SIWraithSnare";
const fixed libCPCD_gv_StukovInfestedWraithSnareBehavior2 = 1.0;
const fixed libCPCD_gv_StukovInfestedWraithSnareBehavior3 = 1.0;
const string libCPCD_gv_cM_CargoDeathNotifyEffect = "CoopCargoDeathDummy";
const string libCPCD_gv_cM_CargoDeathKillEffect = "CoopCargoDeathKill";
const int libCPCD_gv_cMC_FenixVOTransmissionProbablity = 50;
const fixed libCPCD_gv_cMC_FenixVOTransmissionTimerDelay = 60.0;
const fixed libCPCD_gv_cMC_DehakaVOLearnReminderDelay = 60.0;
const fixed libCPCD_gv_cMC_HornerVOBomberUseDelay = 15.0;
const fixed libCPCD_gv_cMC_HornerVOBomberReminderDelay = 300.0;
const fixed libCPCD_gv_cMC_TychusVOTransportReminderDelay = 900.0;
const fixed libCPCD_gv_cMC_TychusVOTransportFlairCooldown = 30.0;
const fixed libCPCD_gv_cMC_TychusVOOutlawReviveReminderDelay = 120.0;
const fixed libCPCD_gv_cMC_TychusVOOutlawRecruitReminderDelay = 60.0;
const int libCPCD_gv_pSC_MissionObjectiveCount = 5;

// Variable Declarations
fixed[libCPCD_gv_panelHeroMaxSlotCount + 1][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_panelHeroReviveTime;
fixed libCPCD_gv_panelHeroReviveCooldown;
unit[libCPCD_gv_panelHeroMaxSlotCount + 1][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_heroPanelUnit;
int[libCPCD_gv_panelHeroMaxSlotCount + 1][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_heroPanelUnitPresetType;
bool[libCPGL_gv_humanPlayerCount + 1][libCPCD_gv_panelHeroMaxSlotCount + 1] libCPCD_gv_heroPanelUnitExists;
int[libCPCD_gv_panelHeroMaxSlotCount + 1][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_heroPanelPositionX;
int[libCPCD_gv_panelHeroMaxSlotCount + 1][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_heroPanelPositionY;
bool[libCPCD_gv_panelHeroMaxSlotCount + 1][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_heroPanelShowLevel;
int[libCPCD_gv_panelHeroMaxSlotCount + 1] libCPCD_gv_heroPanel;
int[libCPCD_gv_panelHeroMaxSlotCount + 1] libCPCD_gv_heroPanelDialogBorderImage;
int[libCPCD_gv_panelHeroMaxSlotCount + 1] libCPCD_gv_heroPanelDialogBorderImageNoDialog;
int[libCPCD_gv_panelHeroMaxSlotCount + 1] libCPCD_gv_heroPanelDialogBorderImageAll;
int[libCPCD_gv_panelHeroMaxSlotCount + 1] libCPCD_gv_heroPanelDialogIcon;
int[libCPCD_gv_panelHeroMaxSlotCount + 1] libCPCD_gv_heroPanelDialogCooldownImage;
int[libCPCD_gv_panelHeroMaxSlotCount + 1] libCPCD_gv_heroPanelDialogDamageTakenImage;
int[libCPCD_gv_panelHeroMaxSlotCount + 1] libCPCD_gv_heroPanelDialogDamageTakenLabel;
int[libCPCD_gv_panelHeroMaxSlotCount + 1] libCPCD_gv_heroPanelDialogNameLabel;
int[libCPCD_gv_panelHeroMaxSlotCount + 1] libCPCD_gv_heroPanelDialogLevelLabel;
int[libCPCD_gv_panelHeroMaxSlotCount + 1] libCPCD_gv_heroPanelDialogHealthBarImage;
int[libCPCD_gv_panelHeroMaxSlotCount + 1] libCPCD_gv_heroPanelDialogHealthBarBackground;
int[libCPCD_gv_panelHeroMaxSlotCount + 1] libCPCD_gv_heroPanelDialogShieldBarImage;
int[libCPCD_gv_panelHeroMaxSlotCount + 1] libCPCD_gv_heroPanelDialogShieldBarBackground;
int[libCPCD_gv_panelHeroMaxSlotCount + 1] libCPCD_gv_heroPanelDialogEnergyBarImage;
int[libCPCD_gv_panelHeroMaxSlotCount + 1] libCPCD_gv_heroPanelDialogEnergyBarBackground;
int[libCPCD_gv_panelHeroMaxSlotCount + 1] libCPCD_gv_heroPanelDialogHealthLabel;
int[libCPCD_gv_panelHeroMaxSlotCount + 1] libCPCD_gv_heroPanelDialogEnergyLabel;
int[libCPCD_gv_panelHeroMaxSlotCount + 1] libCPCD_gv_heroPanelDialogShieldLabel;
int[libCPCD_gv_panelHeroMaxSlotCount + 1] libCPCD_gv_heroPanelDialogButton;
int[libCPCD_gv_panelHeroMaxSlotCount + 1] libCPCD_gv_heroPanelDialogBox;
fixed[libCPCD_gv_panelHeroMaxSlotCount + 1][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_heroPanelDamageTimer;
bool[libCPCD_gv_panelHeroMaxSlotCount + 1][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_heroPanelUnitRevivable;
int libCPCD_gv_cU_ProgressBarPanel;
int libCPCD_gv_cU_ProgressBarLabelTitle;
int libCPCD_gv_cU_ProgressBarLabelBarLeft;
int libCPCD_gv_cU_ProgressBarImageBar;
int libCPCD_gv_cU_ProgressBarMax;
int libCPCD_gv_cU_ProgressBarMin;
int libCPCD_gv_cU_ProgressBarProgress;
bool libCPCD_gv_cU_ProgressBarShowing;
int libCPCD_gv_pUC_ProgressBarWidth;
int libCPCD_gv_pUC_ProgressBarHeight;
point[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cM_HeroReviveTargetLocation;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_globalPowerInitialized;
string[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_globalPowerCutsceneFilter;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_globalPowerAlarakGemClickCount;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_globalPowerLastEnergyUpdate;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_globalPowerEnergyhighlighting;
bool[5][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_globalPowerButtonHighlighted;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_globalPowerPanel;
int libCPCD_gv_globalPowerPanelHolder;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_globalPowerAlarakButton;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cU_GPMengskEnergyContainer;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cU_GPMengskEnergyRegenRoyalGuardContainer;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cU_GPMengskEnergyRegenTrooperContainer;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_globalPowerEnergyBar;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_globalPowerEnergyTooltip;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_globalPowerEnergyBarScene;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_globalPowerEnergyGlassScene;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_globalPowerEnergyLabel;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_globalPowerVisible;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_globalPowerCmdPanel;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_globalPowerCmdPanelUnitStatus;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_globalPowerCutscene;
int[5][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_globalPowerCmdButtons;
int[5][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_globalPowerCmdButtonArrows;
int[5][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_globalPowerUnitEnergyLinks;
int[5][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_globalPowerCmdButtonActiveImage;
int[5][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_globalPowerCmdButtonBackgroundImage;
bool libCPCD_gv_gPTMExitInstantly;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_gPTMTargetingChargesSpent;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_gPTMTargetingChargesTotal;
unit[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_gPTMCasterUnit;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_gPTMCasterGroup;
int libCPCD_gv_gPTMTargetingUsageCount;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_gPTMTargetingPhase;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_gPTMTargetingTransitioning;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_gPTMTargetingUnrefundableStageEntered;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_gPTMTargetingAlreadyCanceled;
string[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_gPTMTargetingModel;
string[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_gPTMTargetingUnitType;
unit[libCPCD_gv_gPTMTARGETCOUNTMAX + 1][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_gPTMTargetingUnit;
actor[libCPCD_gv_gPTMTARGETCOUNTMAX + 1][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_gPTMTargetingActors;
string[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_gPTMTargetingBehavior;
string[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_gPTMTargetingActivateAbility;
abilcmd[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_gPTMTargetingExecuteCommand;
text[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_gPTMTargetingInstructionsPrimary;
text[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_gPTMTargetingInstructionsSecondary;
string[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_gPTMTargetingCooldown;
order[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_gPTMTargetingOrder;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_gPTMTargetingDirectionGroup;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_gPTMTargetingCycling;
timer[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_gPTMTimeStopTimer;
unit[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDSwannLaserDrill;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDSwannLaserDrillGroup;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDSwannDrillBeamDistance;
region[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDSwannSoundRegion;
actor[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDSwannSoundRegionActor;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDSwannSoundRegionCreated;
region[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDSwannSoundBeamRegion;
actor[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDSwannSoundBeamRegionActor;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDSwannSoundBeamRegionCreated;
region[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDSwannSoundNukeRegion;
actor[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDSwannSoundNukeRegionActor;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDSwannSoundNukeRegionCreated;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDKerriganPsiStrikeFacing;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDRaynorPrestigeAir;
int libCPCD_gv_cDAbathurDeathCreateLocustsRandomModifier;
int libCPCD_gv_cM_CurrentSpawn;
int libCPCD_gv_cM_MaxSpawn;
unitgroup libCPCD_gv_cM_CreepGroup;
timer libCPCD_gv_cM_CreepTimer;
int libCPCD_gv_cM_SpawnTime;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDAlarakEmpowerSlaves;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDAlarakEmpowerWorshipers;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDNovaBarracksBuilt;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDNovaFactoriesBuilt;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDNovaStarportsBuilt;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDNovaPsiStrikeFacing;
unit[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDNovaGriffinTransportUnit;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDNovaGriffinTransportUnitGroup;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDNovaGriffinTransportCargoAir;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDNovaGriffinTransportCargoGround;
point[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDNovaGriffinTransportLoadPoint;
int libCPCD_gv_cDNovaNamesCountTurretn;
text[libCPCD_gv_cDNovaNamesCount + 1] libCPCD_gv_cDNovaNames;
int libCPCD_gv_cDNovaNamesStep;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDStukovHorde;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDStukovHordeWave;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDStukovHordeCount;
unit[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDStukovRallyUnit;
point[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDStukovRallyPoint;
unit[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDStukovRallyBeaconUnit;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDStukovBunkerGroup;
unit[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDStukovCompound;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDFenixAutocastWhirlwind;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDFenixAutocastShieldCapacitor;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDFenixAutocastCharge;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDFenixHeroGroup;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDFenixHeroDummyGroup;
string[4] libCPCD_gv_cDFenixAbilityCommands;
unit[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDFenixActiveHero;
string[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDFenixActiveHeroAbility;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDFenixActiveHeroSlot;
unit[4][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDFenixSuits;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDFenixOfflineHealthRegen;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDFenixOfflineShieldRegen;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDFenixOfflineEnergyRegen;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDFenixKillCount;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDFenixKilledSelf;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDFenixSuicideLife;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDFenixSuicideShield;
unitgroup libCPCD_gv_cDFenixRalliedGroup;
fixed[libCPCD_gv_cDFenixChampionCount + 1][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDFenixChampionRespawnTimer;
int[libCPCD_gv_cDFenixChampionCount + 1][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDFenixChampionKills;
unit[libCPCD_gv_cDFenixChampionCount + 1][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDFenixChampionUnit;
string[libCPCD_gv_cDFenixChampionCount + 1] libCPCD_gv_cDFenixChampionUnitType;
string[libCPCD_gv_cDFenixChampionCount + 1] libCPCD_gv_cDFenixChampionUnitReplaceType;
unit[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDFenixChampionStructure;
bool[libCPCD_gv_cDFenixChampionCount + 1][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDFenixChampionAvaliable;
unitgroup[libCPCD_gv_cDFenixChampionCount + 1][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDFenixChampionShells;
abilcmd[libCPCD_gv_cDFenixChampionCount + 1] libCPCD_gv_cDFenixChampionMorphAbility;
point[libCPCD_gv_cDFenixChampionCount + 1][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDFenixChampionDeathPoint;
string[libCPCD_gv_cDFenixChampionCount + 1] libCPCD_gv_cDFenixChampionNetworkUpgrades;
string[libCPCD_gv_cDFenixChampionCount + 1] libCPCD_gv_cDFenixChampionShellEffect;
string[libCPCD_gv_cDFenixChampionCount + 1] libCPCD_gv_cM_Fenix_ChampionNetworkMaxCountDummy;
string[libCPCD_gv_cDFenixChampionCount + 1] libCPCD_gv_cM_Fenix_ChampionNetworkStacksPerSupplyDummy;
string[libCPCD_gv_cDFenixChampionCount + 1] libCPCD_gv_cDFenixChampionDeathBuffBehavior;
int[libCPCD_gv_cDFenixChampionCount + 1] libCPCD_gv_cDFenixChampionDeathBuffStacks;
int[libCPCD_gv_cDFenixChampionCount + 1] libCPCD_gv_cDFenixChampionDeathBuffStackCount;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_achievementFenixCarrierAmount;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_achievementFenixCarrierResearched;
int libCPCD_gv_cDDehakaDebugEssenceCollected;
int libCPCD_gv_cDDehakaDebugEssenceDroppedNormal;
int libCPCD_gv_cDDehakaDebugEssenceDroppedRefund;
int libCPCD_gv_cDDehakaDebugEssenceLost;
bool libCPCD_gv_cDDehakaLevelMaxMusicPlayed;
string libCPCD_gv_cDDehakaEssenceAttribute;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDDehakaTotalEssence;
int[21] libCPCD_gv_cDDehakaNextLevelValueArray;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDDehakaCurrentLevel;
string[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDDehakaVeterencyBehavior;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDDehakaLevelsMax;
fixed libCPCD_gv_cDDehakaEatReviveTimerAdjustment;
fixed libCPCD_gv_cDDehakaConsumeCooldownMultiplier;
unitfilter libCPCD_gv_cDDehakaConsumeCooldownFilter;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDDehakaAutocastGlevigFirebreath;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDDehakaAutocastMurvarPuke;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDDehakaAutocastMurvarMurvarSpawnCreepers;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDDehakaBossBuildingBuilt_Glevig;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDDehakaBossBuildingBuilt_Murvar;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDDehakaBossBuildingBuilt_Dakrun;
unit[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDDehakaReviveFootprint;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDDehakaReviveEatUsed;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDDehakaReviveEatTextTag;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDHHBomberPlatforms;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDHHBomberPlatforms_Ready;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDHHBomberPlatforms_TotalCount;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDHHBomberPlatforms_ReadyCount;
unit libCPCD_gv_cDHHTechLab;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDHHMiraFactionSupply;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDHHMattFactionSupply;
unit libCPCD_gv_cDTychusFirebatOilCaster;
unit[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDTychusMedicTransportUnit;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDTychusMedicTransportUnitGroup;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDTychusMedicGroundUnitsTransportGroupAir;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDTychusMedicGroundUnitsTransportGroupGround;
point[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDTychusMedicTranportLoadPoint;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDTychusMedicTranportSendViaTopBar;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDTychusTrainMaxCharges;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDTychusMaxHeroCount;
string[4] libCPCD_gv_cDTychusUserTypeHeroRequirementArray;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDTychusBarReplaced;
string libCPCD_gv_cDTychusUIAbilityButtonBase;
unit[libCPCD_gv_cDTychusUISquadMaxSize + 1][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDTychusUIHeros;
unit[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDTychusUIBar;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDTychusUISquadContainer;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDTychusUISquadTrainingProgressBar;
int[libCPCD_gv_cDTychusUISquadMaxSize + 1][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDTychusUISquadAvailabilityProgressBars;
int[libCPCD_gv_cDTychusUISquadMaxSize + 1][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDTychusUISquadUnitFrames;
int[libCPCD_gv_cDTychusUISquadMaxSize + 1][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDTychusUISquadUnitTarget;
int[libCPCD_gv_cDTychusUISquadMaxSize + 1][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDTychusUIEquipmentStructureTargets;
int[libCPCD_gv_cDTychusUISquadMaxSize + 1][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDTychusUISquadBarTargets;
int[libCPCD_gv_cDTychusUISquadMaxSize + 1][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDTychusUISquadPortraits;
int[libCPCD_gv_cDTychusUISquadMaxSize + 1][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDTychusUISquadPortraitsStatic;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDTychusUISquadNextIndex;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDTychusUIMedivacCurrentCharges;
bool libCPCD_gv_cDTychusUISquadSpawnSkip;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDTychusUIUpgradePurchasePlaying;
int[4][3] libCPCD_gv_cDTychusUISwapTopBarIcons;
int libCPCD_gv_cDTychusUISwapTopBarIconsDialog;
int libCPCD_gv_achievementTychusGear;
unitgroup libCPCD_gv_cM_Zeratul_RalliedGroup;
int libCPCD_gv_cDZeratulPlayer;
unit[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDZeratulWarpPrismRift;
unitgroup libCPCD_gv_cDZeratulDevolvedUnits;
unit[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDZeratulHeroStructure;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDZeratulHeroStructureGroup;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDZeratulTopBarRallyUnits;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDZeratulTopBarRallyRedirectUnits;
point[17] libCPCD_gv_cDZeratulTopBarRallyPoint;
unit libCPCD_gv_cDZeratulProphecyCamera;
unit libCPCD_gv_cDZeratulProphecyHintUnit;
fixed libCPCD_gv_cDZeratulArtifactHint11;
fixed libCPCD_gv_cDZeratulArtifactHint12;
fixed libCPCD_gv_cDZeratulArtifactHint13;
fixed libCPCD_gv_cDZeratulArtifactHint21;
fixed libCPCD_gv_cDZeratulArtifactHint22;
fixed libCPCD_gv_cDZeratulArtifactHint23;
fixed libCPCD_gv_cDZeratulArtifactHint31;
fixed libCPCD_gv_cDZeratulArtifactHint32;
fixed libCPCD_gv_cDZeratulArtifactHint33;
unit libCPCD_gv_cDZeratulProphecyArtifactUnit;
int libCPCD_gv_cDZeratulProphecyArtifactNumber;
region libCPCD_gv_cDZeratulProphecyArtifactBadRegion;
int libCPCD_gv_cDZeratulSelectionCommandPanel;
int[libCPCD_gv_cDZeratulSelectionMax + 1] libCPCD_gv_cDZeratulSelectionButtonContainers;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDStetmannStetelliteChargeLevel;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDStetmannStetelliteChanged;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDStetmannStetelliteMaxCharges;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDMengskReturningWorkers;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDMengskWeaponPickups;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDMengskWeaponPickerUppers;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDMengskVeterans;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDMengskXPHungryUnits;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDMengskEnergyRegenTrooper;
fixed[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDMengskEnergyRegenRoyalGuard;
fixed libCPCD_gv_cDMengskArtilleryExperimentalStrikeMinRange;
unitgroup[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDMengskPropagandaUnits;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cM_Mengsk_CheckRoyalGuardSupply;
fixed libCPCD_gv_supplicantWarpTrainActualUnitCost;
abilcmd libCPCD_gv_supplicantWarpTrainActualCommand;
unit[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cDTownHall;
int libCPCD_gv_onDeathUnitMultiplier;
int libCPCD_gv_transmissionMissionAnnouncerGender;
bool libCPCD_gv_cTHeroReviveQueue_ActiveListeners;
bool[4][libCOOC_gv_cCC_MAXPLAYERS + 1] libCPCD_gv_cM_FenixVOTransmissionFirstPlay;
timer libCPCD_gv_cM_FenixVOTransmissionTimer;
bool[libCOOC_gv_cCC_MAXPLAYERS + 1] libCPCD_gv_cM_FenixVOTalandarRecalled;
timer libCPCD_gv_cM_DehakaVOLearnReminderTimer;
int libCPCD_gv_cM_DehakaVODehakaPlayer;
bool libCPCD_gv_cM_DehakaVOWurmStructureAlive;
int libCPCD_gv_cM_HornerVOHornerPlayer;
timer libCPCD_gv_cM_HornerVOBomberReminderTimer;
timer libCPCD_gv_cM_HornerVOBomberUseTimer;
bool libCPCD_gv_cM_HornerVOBomberBuilt;
bool libCPCD_gv_cM_HornerVOFleetOffCooldown;
int libCPCD_gv_cM_TychusVOTychusPlayer;
timer libCPCD_gv_cM_TychusVOTransportReminderTimer;
timer libCPCD_gv_cM_TychusVOTransportFlairCooldownTimer;
timer libCPCD_gv_cM_TychusVOOutlawReviveReminderTimer;
timer libCPCD_gv_cM_TychusVOOutlawRecruitReminderTimer;
timer libCPCD_gv_cM_ArtifactTransmission_SelectAbilityReminder;
fixed libCPCD_gv_cMC_ZeratulVOTransmissionProphacyCastDelay;
bool libCPCD_gv_cM_AbilityTransmission_StetelliteReminder_First;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cM_MengskSnarkExecuted;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cM_MengskEliteBuilt;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cM_MengskArtilleryBuilt;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cM_MengskTrooperEquipped;
timer[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cM_MengskTransmissionTimerDirtyBomb;
timer[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cM_MengskTransmissionTimerForcedConscription;
int libCPCD_gv_cM_VOResourceReqSendButton;
string libCPCD_gv_cM_TransmissionCurrentType;
int libCPCD_gv_cM_TransmissionSource;
int libCPCD_gv_cM_TransmissionCount;
playergroup libCPCD_gv_cM_TransmissionPrimaryPlayers;
playergroup libCPCD_gv_cM_TransmissionSecondaryPlayers;
int libCPCD_gv_cM_SendTransmissionCampaignIndex;
int libCPCD_gv_cM_SendTransmissionCampaignPortrait;
unit libCPCD_gv_cM_SendTransmissionCampaignSpeaker;
trigger libCPCD_gv_cM_SendTransmissionCampaignTrigger;
int libCPCD_gv_cM_SendTransmissionCampaignPlayingTick;
bool libCPCD_gv_cM_SendTransmissionCampaignChatBubbleOn;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_cM_GPRemindersOn;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_playerInfoScreenButton;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_playerInfoScreenButtonFrame;
bool[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_playerInfoVisible;
int[libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_playerInfoFrame;
int[libCPGL_gv_humanPlayerCount + 1][libCPGL_gv_humanPlayerCount + 1] libCPCD_gv_playerInfoButton;
playergroup libCPCD_gv_cC_NondefeatedPlayerGroup;
playergroup libCPCD_gv_cC_HumanPlayerGroup;

// Function Declarations
void libCPCD_gf_SetHeroPanelUnit (int lp_index, unit lp_heroUnit, int lp_player);
void libCPCD_gf_SetHeroPanelUnitOverride (int lp_index, unit lp_heroUnit, int lp_player);
void libCPCD_gf_CU_ShowHideHeroPanel (bool lp_showHide, int lp_index);
void libCPCD_gf_CU_CreateHeroPanel (int lp_index);
int libCPCD_gf_HeroPanelUnitTypePresetfromUnitType (string lp_unitType);
string libCPCD_gf_HeroPanelHeroIcon (int lp_heroType, unit lp_heroUnit);
void libCPCD_gf_CU_UpdateHeroPanel (int lp_index, int lp_player);
bool libCPCD_gf_CU_ChampionHasShields (int lp_heroType);
bool libCPCD_gf_CU_ChampionHasShields2 (int lp_heroType);
void libCPCD_gf_DisplayProgressBar (text lp_title, int lp_min, int lp_max);
void libCPCD_gf_SetProgressBarTitle (text lp_title);
void libCPCD_gf_SetProgressBarValueRange (int lp_min, int lp_max);
void libCPCD_gf_SetProgressBarLabel (text lp_label);
void libCPCD_gf_SetProgressBarProgress (int lp_progress);
void libCPCD_gf_SetProgressBarColor (color lp_color);
void libCPCD_gf_ShowHideProgressBar (bool lp_showHide);
void libCPCD_gf_CU_UpdateProgressBar ();
color libCPCD_gf_GetProgressBarColorCampaign ();
void libCPCD_gf_DisplayProgressBarUnitOld (unit lp_unit, int lp_minValue, int lp_maxValue, text lp_labelText, int lp_offsetX, int lp_offsetY, string lp_attachment);
void libCPCD_gf_DestroyProgressBarUnitOld (unit lp_unit);
void libCPCD_gf_SetProgressBarProgressUnitOld (unit lp_unit, int lp_value);
void libCPCD_gf_MoveProgressBarUnitOld (unit lp_unit, int lp_offsetX, int lp_offsetY);
void libCPCD_gf_SetProgresBarTitleUnitOld (unit lp_unit, text lp_titleText);
void libCPCD_gf_SetProgressBarValueRangeUnitOld (unit lp_unit, int lp_minValue, int lp_maxValue);
void libCPCD_gf_ShowHideProgressBarUnitOld (unit lp_unit, bool lp_showHide);
void libCPCD_gf_CU_UpdateProgressBarUnitOld (unit lp_unit);
string libCPCD_gf_CU_ProgressBarUnit_DataNameOld (unit lp_unit, int lp_type);
string libCPCD_gf_CU_ProgressBarUnit_DialogNameOld (unit lp_unit, int lp_type);
void libCPCD_gf_DisplayUnitProgressBar (unit lp_unit, text lp_title, int lp_minValue, int lp_maxValue);
void libCPCD_gf_SetUnitProgressBarIsWideBar (unit lp_unit, bool lp_isWideBar);
void libCPCD_gf_SetUnitProgressBarProgress (unit lp_unit, int lp_value);
void libCPCD_gf_SetUnitProgresBarTitle (unit lp_unit, text lp_titleText);
void libCPCD_gf_SetUnitProgressBarProgress2 (unit lp_unit, int lp_value);
void libCPCD_gf_SetUnitProgressBarValueRange (unit lp_unit, int lp_minValue, int lp_maxValue);
void libCPCD_gf_ShowHideUnitProgressBar (unit lp_unit, bool lp_showHide);
void libCPCD_gf_ShowHideUnitProgressBar2 (unit lp_unit, bool lp_showHide);
void libCPCD_gf_CU_UpdateUnitProgressBar (unit lp_unit);
string libCPCD_gf_CU_UnitProgressBar_Data (unit lp_unit, int lp_type);
string libCPCD_gf_CU_UnitProgressBar_Data2 (unit lp_unit);
string libCPCD_gf_CU_UnitProgressBar_IsWideBarString (unit lp_unit);
string libCPCD_gf_CU_UnitProgressBar_Dialog (unit lp_unit, int lp_type);
void libCPCD_gf_HeroReviveHandleDeath (int lp_player);
text libCPCD_gf_HeroReviveMessageNormal (int lp_player, fixed lp_duration);
text libCPCD_gf_HeroReviveMessageNoTownHall (int lp_player);
text libCPCD_gf_HeroReviveMessageComplete (int lp_player);
void libCPCD_gf_HeroReviveWait (int lp_player);
void libCPCD_gf_HeroCreate (point lp_spawnPoint, int lp_player, fixed lp_facing, int lp_flags);
void libCPCD_gf_HeroStructureCreate (point lp_spawnPoint, int lp_player, fixed lp_facing, int lp_flags);
void libCPCD_gf_HeroSpawn (int lp_player);
void libCPCD_gf_GlobalCasterCreateUnit (int lp_player);
void libCPCD_gf_CM_PlayerSetGlobalCaster2 (int lp_player);
void libCPCD_gf_GPInit (int lp_player);
void libCPCD_gf_GPInitProtoss (int lp_player);
void libCPCD_gf_GPInitAlarak (int lp_player);
void libCPCD_gf_GPInitFenix (int lp_player);
void libCPCD_gf_GPInitRaynor (int lp_player);
void libCPCD_gf_GPInitHorner (int lp_player);
void libCPCD_gf_GPInitSwann (int lp_player);
void libCPCD_gf_GPInitAbathur (int lp_player);
void libCPCD_gf_GPInitStukov (int lp_player);
void libCPCD_gf_GPInitDehaka (int lp_player);
void libCPCD_gf_GPInitNova (int lp_player);
void libCPCD_gf_GPInitTychus (int lp_player);
void libCPCD_gf_GPInitZeratul (int lp_player);
void libCPCD_gf_CU_GPInitStetmann (int lp_player);
void libCPCD_gf_CU_GPInitMengsk (int lp_player);
void libCPCD_gf_LinkUnitEnergyToGPCmdButton (unit lp_unit, int lp_player, int lp_index);
abilcmd libCPCD_gf_GetGPAbility (int lp_slot, int lp_player);
void libCPCD_gf_GPUpdateVitals (int lp_player);
void libCPCD_gf_GPButtonHighlight (int lp_slot, bool lp_on, int lp_player);
void libCPCD_gf_GPCheckforEnergyHighlight (int lp_player);
void libCPCD_gf_GPEnergyHighlight (bool lp_enable, int lp_player);
void libCPCD_gf_GPSetUnit (unit lp_casterUnit, int lp_player);
void libCPCD_gf_GPShowHide (bool lp_showHide, int lp_player, fixed lp_duration);
void libCPCD_gf_GPVisibilitySet (bool lp_showHide, int lp_player, fixed lp_duration);
void libCPCD_gf_GPVisibilityAuto (bool lp_showHide, int lp_player, fixed lp_duration);
void libCPCD_gf_GPTMCasterUnitSet (unit lp_unit, int lp_player);
void libCPCD_gf_GPTMTargetingModeEnter (int lp_player);
void libCPCD_gf_GPTMTargetingModeExit (int lp_player);
void libCPCD_gf_GPTMTargetingCleanupActorsAndUnits (int lp_player);
void libCPCD_gf_GPTMSetFogAlphaOverTime (fixed lp_targetAlpha, fixed lp_duration, int lp_player);
void libCPCD_gf_GPTMResetFogAlphaOverTime (fixed lp_duration, int lp_player);
void libCPCD_gf_GPTMTargetingCancel (int lp_player);
void libCPCD_gf_GPTMTimeStopApply (int lp_castingPlayer);
void libCPCD_gf_CM_MasteryKerriganArmyVespeneCostList (int lp_player);
void libCPCD_gf_CM_MasteryKerriganArmyVespeneCostReduction (string lp_unitType, int lp_player, int lp_upgradeCount);
void libCPCD_gf_CM_MasteryMengskRoyalGuardCostList (int lp_player);
void libCPCD_gf_CM_MasteryMengskRoyalGuardCostReduction (string lp_unitType, int lp_player, int lp_upgradeCount);
void libCPCD_gf_CM_MasteryZagraRoachLifeIncrease (int lp_player);
void libCPCD_gf_CM_MasteryKerriganArmyVespeneCostList3 (int lp_player);
void libCPCD_gf_CM_MasteryKaraxUnitVitalIncrease (string lp_unitType, int lp_player, int lp_upgradeCount);
void libCPCD_gf_CM_MasterySwannSiegeTankImmortalityProtocolCostReduction (int lp_player);
void libCPCD_gf_CM_MasteryKerriganMutatingCarapaceDegradation (int lp_player);
void libCPCD_gf_CM_MasteryKerriganResearchSpeedCost (int lp_player);
void libCPCD_gf_CM_MasteryStetmannUpgradeCost (int lp_player);
void libCPCD_gf_CM_MasteryResearchCostReduction (int lp_player, string lp_masteryUpgrade, fixed lp_percentReductionPerPoint);
point libCPCD_gf_CDSwannDrillTarget (point lp_casterPoint, point lp_targetPoint, region lp_region, int lp_player);
void libCPCD_gf_CDKerriganMalignantCreep (int lp_player);
void libCPCD_gf_EnableDisableZerglingRespawn (bool lp_enableDisable, int lp_player);
void libCPCD_gf_CM_PrestigeRaynor_AirSupplySetBonus (int lp_raynorPlayer);
void libCPCD_gf_CDRaynorUpgradeResearchCost (int lp_player, int lp_level);
void libCPCD_gf_CDAbathurBiomassMerge (unit lp_biomassUnit, int lp_biomassUnitCount);
void libCPCD_gf_CDAbathurBiomassScale (unit lp_biomassUnit, bool lp_instantScale);
void libCPCD_gf_CDAbathurBiomassTransfer (int lp_indexPlayer, unit lp_trainUnit, int lp_biomassBuff100Count, int lp_biomassBuff10Count, int lp_biomassBuff1Count);
int libCPCD_gf_CDAbathurBiomassGetStack (unit lp_biomass);
void libCPCD_gf_CDAbathurBiomassSetStack (unit lp_biomass, int lp_stack);
void libCPCD_gf_CM_Nova_IterateExistingBuildings (int lp_novaPlayer);
void libCPCD_gf_CDNovaModifyBuildingCooldowns (fixed lp_maxRegenTime, fixed lp_maxChargeCount, string lp_cooldownName, int lp_player);
void libCPCD_gf_CM_PrestigeNova_SpecializeUnitCharges (string lp_unitType, int lp_novaPlayer);
text libCPCD_gf_CC_StoryArmyUnitUnitType2 (string lp_unitType);
text libCPCD_gf_CC_StoryArmyUnitUnitType (int lp_armyUnit);
void libCPCD_gf_CDNovaNamesKillUpdate (unit lp_updatingUnit, int lp_iD);
void libCPCD_gf_CM_Stukov_InfestStructureInitialCooldown (int lp_player);
void libCPCD_gf_CDStukovRallyIssueOrdertoUnit (unit lp_rallyingUnit, bool lp_overrideExistingOrders);
void libCPCD_gf_CDStukovRallyIssueOrdertoHorde (int lp_player);
void libCPCD_gf_CDStukovBunkerTrainIssueOrder (unit lp_newUnit);
void libCPCD_gf_TransferGuardianShell (unit lp_source, unit lp_target);
void libCPCD_gf_FenixInitialDummySpawn (int lp_player);
void libCPCD_gf_CDFenixRecallReveal (int lp_player, abilcmd lp_cmd, point lp_targetPoint, string lp_unitType);
void libCPCD_gf_CDFenixVitalMatch (unit lp_hero);
void libCPCD_gf_CDFenixSetActiveHeroUIState (unit lp_unit, bool lp_active);
void libCPCD_gf_CDFenixSetActiveHeroRally (unit lp_unit);
void libCPCD_gf_CDFenixChampionDeathBuffUpdate (int lp_group, int lp_player, int lp_stacksToApply);
void libCPCD_gf_CDFenixChampionUpdateNetwork (int lp_group, int lp_player);
void libCPCD_gf_CDFenixChampionUpdateShellCount (int lp_group, int lp_player);
void libCPCD_gf_CDDehakaEssenceMerge (unit lp_essenceUnit, int lp_essenceUnitCount);
void libCPCD_gf_CDDehakaEssenceScale (unit lp_essenceUnit, bool lp_instantScale);
void libCPCD_gf_CDDehakaEssenceTransfer (int lp_indexPlayer, unit lp_trainUnit, int lp_essenceBuff100Count, int lp_essenceBuff10Count, int lp_essenceBuff1Count);
int libCPCD_gf_CDDehakaEssenceGetStack (unit lp_essence);
void libCPCD_gf_CDDehakaEssenceSetStack (unit lp_essence, int lp_stack);
void libCPCD_gf_CDDehakaLevelUp (int lp_dehakaPlayer, unit lp_dehakaUnit);
void libCPCD_gf_CDDehakaSetLevelValues (int lp_player);
void libCPCD_gf_CDDehakaConsumeFloatText (text lp_text, int lp_p, point lp_loc);
void libCPCD_gf_CDDehakaConsumeUpdatePsiExplodeDamage (int lp_dehakaPlayer, unit lp_dehakaUnit, fixed lp_maguroMemorialWeaponDamage);
void libCPCD_gf_CDDehakaConsumeEvolved (int lp_dehakaPlayer, unit lp_unit, fixed lp_multiplier);
fixed libCPCD_gf_CDDehakaIsEvolvedUnit (unit lp_unit);
void libCPCD_gf_CDHHBomberStatusCheck (int lp_player);
void libCPCD_gf_CDHHStatUpdate (int lp_player);
void libCPCD_gf_CDHHScrapResourceSetStack (unit lp_scrap, int lp_minerals, int lp_vespene);
void libCPCD_gf_CDTychusTriggersInit (int lp_player);
string libCPCD_gf_CDTychusEventHero ();
unit libCPCD_gf_CDTychusEventHeroUnit ();
void libCPCD_gf_CDTychusEvent (trigger t, string lp_event);
void libCPCD_gf_CDTychusUpdateHeroTechTree (int lp_p);
void libCPCD_gf_CDTychusSetHeroRequiredTechLevel (int lp_p, int lp_level);
void libCPCD_gf_CDTychusSetHeroCostMultiply (int lp_p, fixed lp_multiplyMinerals, fixed lp_multiplyVespene);
int libCPCD_gf_CM_Tychus_TechLevel (int lp_p);
int libCPCD_gf_CM_Tychus_TechLevel2 (int lp_p);
void libCPCD_gf_CDTychusFifthHeroUpgrade (int lp_player);
fixed libCPCD_gf_CDTychusGetRecruitmentChargeCooldown (int lp_tychusPlayer);
void libCPCD_gf_CDTychusInitHeroTechLimit (int lp_player);
void libCPCD_gf_CDTychusUIInit (int lp_tychusPlayer);
void libCPCD_gf_CDTychusUIPlayPurchaseSound (int lp_tychusPlayer);
void libCPCD_gf_CDTychusUISetBarUnit (unit lp_tychusBarUnit);
void libCPCD_gf_CDTychusUIMedivacModifyCharges (int lp_chargesDelta, int lp_player);
void libCPCD_gf_CDTychusUISquadAvailability ();
void libCPCD_gf_CDTychusUISquadAvailabilityProgressBar (int lp_squadIndex, fixed lp_duration, int lp_tychusPlayer);
void libCPCD_gf_CDTychusUISquadTargetFrame (string lp_squadInstance, unit lp_targetUnit);
void libCPCD_gf_CDTychusUISetTychusSquadMember (unit lp_unit, int lp_squadIndex, string lp_squadInstance);
int libCPCD_gf_CDTychusUIGetNextSquadIndex (int lp_player);
string libCPCD_gf_CDTychusUISquadInstance (unit lp_unit);
void libCPCD_gf_CDTychusUISwapSetSquadMember (unit lp_unit, int lp_squadIndex, string lp_squadInstance);
string libCPCD_gf_CDTychusUISwapGetSquadInstance (unit lp_unit);
void libCPCD_gf_AchievementTychusGear (int lp_player);
void libCPCD_gf_CDZeratulDisruptorShotSpawn (unit lp_caster, point lp_spawnPoint, point lp_targetPoint);
void libCPCD_gf_CDZeratulApplyDevolve (unit lp_targetUnit);
int libCPCD_gf_CDZeratulDevolveGetUnitTier (string lp_unitType);
string libCPCD_gf_CDZeratulDevoolveGetNewUnitType (string lp_oldUnitType, int lp_newTier);
void libCPCD_gf_CDZeratulProphecyEvent (trigger t, string lp_event);
void libCPCD_gf_CDZeratulProphecyEventSend (string lp_event, int lp_zeratulPlayer, unit lp_artifactUnit, int lp_artifactNumber);
unit libCPCD_gf_CDZeratulProphecyEventGetUnit (int lp_unit);
int libCPCD_gf_CDZeratulProphecyEventGetArtifactNumber ();
int libCPCD_gf_CDZeratulProphecyEventGetPlayer ();
int libCPCD_gf_CDZeratulProphecyHintLevel (int lp_artifactNumber);
void libCPCD_gf_CDZeratulProphecyHintStart (int lp_hintLevel);
void libCPCD_gf_CDZeratulProphecySetCooldown ();
void libCPCD_gf_CDZeratulProphecySpawnResourcePickups (int lp_count, point lp_location);
void libCPCD_gf_CDZeratulProphecyPlaceArtifact (int lp_p);
void libCPCD_gf_CM_ZeratulProphecyArtifactBadRegion_Set ();
int libCPCD_gf_CDZeratulProphecyGetArtifactDifficultyIndex (int lp_artifactNumber, string lp_artifactData);
point libCPCD_gf_CDZeratulProphecyArtifactPlacementPointOld (fixed lp_maxDistance);
point libCPCD_gf_CDZeratulProphecyArtifactPlacementPointNew (int lp_artifactNumber);
point libCPCD_gf_CDZeratulProphecyArtifactGetPoint ();
point libCPCD_gf_CDZeratulProphecyArtifactPlacementDebug (int lp_artifactNumber, color lp_color, color lp_pickedColor);
string libCPCD_gf_CDZeratulProphecyArtifactPlacementDataInstance ();
point libCPCD_gf_CDZeratulProphecyArtifactPlacementOrigin (string lp_artifactPlacementData);
int libCPCD_gf_CM_Zeratul_GetArtifactLimit (int lp_zeratulPlayer);
void libCPCD_gf_CDZeratulArtifactHintTract (int lp_player);
void libCPCD_gf_StetmannPowerTowerEvent (trigger t, string lp_event);
int libCPCD_gf_EventStetmannPowerTowerTechLevel (string lp_techLevelParameter);
int libCPCD_gf_EventStetmannPowerTowerPlayer ();
void libCPCD_gf_CM_Stetmann_ThrowPowerTowerEvent (int lp_player);
void libCPCD_gf_CM_Stetmann_AdjustStetelliteChargesUsed (int lp_player);
void libCPCD_gf_CU_SetStetelliteChargeMax (int lp_player);
void libCPCD_gf_CU_DrawStetelliteChargePips (int lp_player, int lp_currentCharges, int lp_maxCharges);
void libCPCD_gf_CM_Mengsk_ForceMorphTrooper (unit lp_trooper, unit lp_pickup, string lp_morphEffect, string lp_morphBehavior, string lp_actorSignal);
void libCPCD_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateTrooper (int lp_mengskPlayer);
void libCPCD_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateRoyalGuard (int lp_mengskPlayer);
void libCPCD_gf_CM_Mengsk_GlobalCasterEnergyRegen (unit lp_mengskGlobalCaster);
void libCPCD_gf_CM_Mengsk_EnergyChanged (int lp_mengskPlayer);
fixed libCPCD_gf_CM_Mengsk_SupplyLevel (unitgroup lp_unitGroup);
void libCPCD_gf_CM_Mengsk_CheckRoyalGuardSupply ();
void libCPCD_gf_ResourcePickupAlly (int lp_player, int lp_minerals, int lp_vespene);
void libCPCD_gf_ApplyGoldenSkin (int lp_player);
void libCPCD_gf_ApplyWebbySkin (int lp_player);
void libCPCD_gf_ApplyTaldarimSkin (int lp_player);
unit libCPCD_gf_CM_NexusBestWorkerRallyMineral (unit lp_nexus);
void libCPCD_gf_SetWorkerRallyPointforNexus (unit lp_nexus);
void libCPCD_gf_ZerglingRespawnSetPrimaryHatchery (unit lp_hatchery, int lp_player);
unit libCPCD_gf_CDTownHall (int lp_player);
void libCPCD_gf_TownHallSeach (int lp_player);
void libCPCD_gf_TransmissionVoiceoverInit ();
void libCPCD_gf_CTCommanderVOAbilityWatchUnit (int lp_player, soundlink lp_vOSound, string lp_cooldownLink, unit lp_unit, string lp_ability);
void libCPCD_gf_CM_HeroReviveQueue_PlaySound (soundlink lp_soundLink, fixed lp_soundDelay, playergroup lp_listeningPlayers);
void libCPCD_gf_CTCommanderVOAbilityWatch (int lp_player, soundlink lp_vOSound, string lp_cooldownLink, unit lp_unit, abilcmd lp_abilityCommand);
void libCPCD_gf_CTCommanderVOSend (int lp_ally, soundlink lp_vOSound, playergroup lp_playersWhoWillHear);
void libCPCD_gf_CTCommanderVOSendGroup (playergroup lp_allies, soundlink lp_vOSound, playergroup lp_playersWhoWillHear);
void libCPCD_gf_CM_AbilityTransmissionAbathurNestReminderActionVer (int lp_abathurPlayer);
void libCPCD_gf_CM_AbilityTransmissionNovaNukeReadyActionVer (int lp_novaPlayer);
void libCPCD_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime (int lp_player, string lp_cooldownLink, unit lp_unit);
void libCPCD_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer (int lp_dehakaPlayer);
void libCPCD_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer (int lp_hornerPlayer);
void libCPCD_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer (int lp_hornerPlayer);
void libCPCD_gf_CM_AbilityTransmissionHornerFleetReminderActionVer (int lp_player, soundlink lp_vOSound, string lp_cooldownLink, unit lp_unit, string lp_ability);
void libCPCD_gf_CM_AbilityTransmission_StetelliteReminder (int lp_stetmannPlayer);
void libCPCD_gf_CM_AbilityTransmission_StetzoneReminder (int lp_stetmannPlayer);
void libCPCD_gf_CM_AbilityTransmission_GaryUpgradeReminder (int lp_stetmannPlayer);
void libCPCD_gf_CM_AbilityTransmission_MengskReminders (int lp_mengskPlayer);
void libCPCD_gf_CM_VOResourceInit ();
void libCPCD_gf_SendMissionTransmission (string lp_transmissionType, bool lp_waitUntilDone, int lp_sourcePlayer);
void libCPCD_gf_SendVictoryTransmission (string lp_mapVictoryTransmission);
void libCPCD_gf_SendSplitMissionTransmission (string lp_transmissionType, bool lp_waitUntilDone, int lp_primaryPlayer, int lp_sourcePlayer);
void libCPCD_gf_WaitForMissionTransmission ();
void libCPCD_gf_CM_TransmissionUpdateConvoPlayers (string lp_conversation);
bool libCPCD_gf_CM_PlayerHasTransmission (int lp_player);
void libCPCD_gf_CM_SendTransmissionCampaignInternal (bool lp_isPlaceHolder, unit lp_unit, string lp_model, soundlink lp_sound, text lp_speaker, text lp_message, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption, string lp_portraitActor);
void libCPCD_gf_CM_SendTransmissionCampaignCleanUp (int lp_transmission, int lp_keepPortraitVisible, int lp_portrait, actor lp_talkIcon, int lp_ping, int lp_localIndex);
void libCPCD_gf_HideCampaignTransmissionPortrait ();
void libCPCD_gf_TurnTransmissionOptionsOnOffCampaign (int lp_option, bool lp_onOff);
fixed libCPCD_gf_ConvesationLineDuration (string lp_conversationLine);
void libCPCD_gf_SendTransmissionCampaign (unit lp_unit, string lp_conversationLine, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption);
void libCPCD_gf_SendTransmissionCampaignPlaceHolder (unit lp_unit, string lp_model, text lp_speaker, text lp_message, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption);
void libCPCD_gf_CM_GPRemindersInit ();
void libCPCD_gf_CM_GPReminderRaynor (int lp_player);
void libCPCD_gf_CM_GPReminderArtanis (int lp_player);
void libCPCD_gf_CM_GPReminderVorazun (int lp_player);
void libCPCD_gf_CM_GPReminderAbathur (int lp_player);
void libCPCD_gf_CM_GPReminderHorner (int lp_player);
void libCPCD_gf_CM_GPReminderTychus (int lp_player);
void libCPCD_gf_CM_GPReminderDisable (int lp_player);
bool libCPCD_gf_ValidAntiAirUnitIsNearUnit (int lp_player, unit lp_unit);
void libCPCD_gf_RemindPlayertoCreateAntiAirUnits ();
void libCPCD_gf_PlayerInfoShowHide (int lp_player, bool lp_showhide);
void libCPCD_gf_PlayerInfoCreate (int lp_player);
string libCPCD_gf_GetCommanderDataConsoleFrame (int lp_player);
color libCPCD_gf_GetCommanderDataConsoleColor (int lp_player);
string libCPCD_gf_GetCommanderDataCommanderImage (int lp_player);
string libCPCD_gf_CC_CurrentMap ();
bool libCPCD_gf_CC_CampaignMapTypeCheck (string lp_map, int lp_mapType);
string libCPCD_gf_CC_MapAchievementTerm (string lp_map, int lp_difficulty);
string libCPCD_gf_CC_CampaignMapFile (string lp_map);
text libCPCD_gf_CC_CampaignMapName (string lp_map, int lp_player);
string libCPCD_gf_CC_MapScoreStatistic (string lp_map);
string libCPCD_gf_CC_MapUserDataInstance (string lp_map);
void libCPCD_gf_SetCurrentMap (string lp_map);
int libCPCD_gf_CC_DifficultyIndex (int lp_difficulty);
int libCPCD_gf_CC_DifficultyFromIndex (int lp_index);
int libCPCD_gf_DifficultyLevelForPlayerCoop (int lp_player);
void libCPCD_gf_DisplayCampaignMessage (playergroup lp_toPlayerGroup, int lp_messageType, text lp_message, int lp_formatOrNot);
string libCPCD_gf_CM_ReticleModelOfStyle (int lp_type, int lp_size);
string libCPCD_gf_CM_ReticleTextFontOfStyle (int lp_type);
void libCPCD_gf_CreateReticleEffectAndTextTagAtPoint (int lp_type, int lp_size, text lp_text, point lp_location);
void libCPCD_gf_AttachReticleEffectAndTextTagOnUnit (int lp_type, int lp_size, text lp_text, unit lp_target, string lp_attachPoint);
void libCPCD_gf_CC_SetPlayerDefeated (int lp_player);
void libCPCD_gf_CC_InitNonDefeatedPlayers ();
playergroup libCPCD_gf_NondefeatedPlayers ();
playergroup libCPCD_gf_HumanPlayers ();
playergroup libCPCD_gf_CommanderPlayers ();
playergroup libCPCD_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf (int lp_player);

// Trigger Declarations
trigger libCPCD_gt_HeroPanelUpdate;
trigger libCPCD_gt_HeroPanelDamaged;
trigger libCPCD_gt_HeroPanelVitalChanged;
trigger libCPCD_gt_HeroPanelHoverTooltip;
trigger libCPCD_gt_HeroDied;
trigger libCPCD_gt_HeroReviveNovaBuyBackUsed;
trigger libCPCD_gt_HeroReviveNovaBuyBackAdjustment;
trigger libCPCD_gt_GlobalCasterVitalChange;
trigger libCPCD_gt_GPCutsceneBirthFinished;
trigger libCPCD_gt_GPCutsceneDeathRemove;
trigger libCPCD_gt_GPAlarakGemPress;
trigger libCPCD_gt_GPTMTargetingForceOff;
trigger libCPCD_gt_GPTMTargetingDeactivated;
trigger libCPCD_gt_GPTMTargetingPointChosen;
trigger libCPCD_gt_GPTMTargetingDirectionChosen;
trigger libCPCD_gt_GPTMTargetingEffectFired;
trigger libCPCD_gt_GPTMTargetingCancel;
trigger libCPCD_gt_GPTMTargetingCancelFromUI;
trigger libCPCD_gt_GPTMTargetingCameraShake;
trigger libCPCD_gt_GPTMOrbitalStrikeActivated;
trigger libCPCD_gt_GPTMOrbitalStrikeActivatedKarax;
trigger libCPCD_gt_GPTMTemporalFieldActivated;
trigger libCPCD_gt_GPTMSolarLanceActivated;
trigger libCPCD_gt_GPTMTimeStopOn;
trigger libCPCD_gt_GPTMTimeStopCleanup;
trigger libCPCD_gt_GPTMTargetingPurifierBeamOn;
trigger libCPCD_gt_GPTMTargetingPurifierBeamOff;
trigger libCPCD_gt_GPTMSuperShieldsActivated;
trigger libCPCD_gt_GPTMShiftCheatFailSafeThermal;
trigger libCPCD_gt_GPTMShiftCheatFailSafeHHCallFleet;
trigger libCPCD_gt_GPTMShiftCheatFailSafeNovaBombing;
trigger libCPCD_gt_GPTMStrafeActivated;
trigger libCPCD_gt_CDHHAirFleet_Activated;
trigger libCPCD_gt_CDNovaGriffinBombingRunActivate;
trigger libCPCD_gt_CDNovaGriffinBombingRunFinish;
trigger libCPCD_gt_CDZagaraWeaponSwap;
trigger libCPCD_gt_CDZagaraRoachDropScale;
trigger libCPCD_gt_CDSwannDrillCallforHelp;
trigger libCPCD_gt_CDSwannThorRebuildController;
trigger libCPCD_gt_CDSwannTankrRebuildController;
trigger libCPCD_gt_CDSwannVespeneDroneTrigger;
trigger libCPCD_gt_AdvancedConstructionAutoUser;
trigger libCPCD_gt_AdvancedConstructionAutoAutoCast;
trigger libCPCD_gt_CDSwannDrillBeamActivate;
trigger libCPCD_gt_CDSwannDrillNukeActivate;
trigger libCPCD_gt_CDSwannDrillBeam;
trigger libCPCD_gt_CDSwannSoundRegionStart;
trigger libCPCD_gt_CDSwannSoundRegionClear;
trigger libCPCD_gt_CDSwannSoundBeamStart;
trigger libCPCD_gt_CDSwannSoundNukeRegionStart;
trigger libCPCD_gt_CDSwannSoundNukeRegionClear;
trigger libCPCD_gt_CDSwannDrillAttackOrder;
trigger libCPCD_gt_CDArtanisGuardianShell;
trigger libCPCD_gt_CDKerriganWeaponSwap;
trigger libCPCD_gt_CDKerriganEcoDrop;
trigger libCPCD_gt_CDKerriganPsiStrike;
trigger libCPCD_gt_CM_MasteryKerriganInstantReviveCooldown;
trigger libCPCD_gt_CDKerriganEggModels;
trigger libCPCD_gt_CDKerriganEggBirth;
trigger libCPCD_gt_CDRaynorPrestigeAirSupply;
trigger libCPCD_gt_CDRaynorHyperionPing;
trigger libCPCD_gt_TimeStop;
trigger libCPCD_gt_CDKaraxSolarForge;
trigger libCPCD_gt_CDKaraxUnityBarrier;
trigger libCPCD_gt_CDKaraxRepairBeamLimit;
trigger libCPCD_gt_CDAbathurTriggersInit;
trigger libCPCD_gt_CDAbathurRavagerSpellCooldown;
trigger libCPCD_gt_CDAbathurSwarmHostLaunchCast;
trigger libCPCD_gt_CDAbathurToxicNest;
trigger libCPCD_gt_CDAbathurDeathCreateLocusts;
trigger libCPCD_gt_CDAbathurBiomassScaler;
trigger libCPCD_gt_CDAbathurBiomassManualUpdate;
trigger libCPCD_gt_CDAbathurBiomassTrain;
trigger libCPCD_gt_CDAbathurBiomassRefund;
trigger libCPCD_gt_CDAbathurBiomassPickup;
trigger libCPCD_gt_CDAbathurBiomassDrop;
trigger libCPCD_gt_CDAbathurMeleeBonusUpgrade;
trigger libCPCD_gt_CDAbathurToxicNestDeathFailsafe;
trigger libCPCD_gt_CDAlarakEmpowerAdd;
trigger libCPCD_gt_CDAlarakEmpowerRemove;
trigger libCPCD_gt_CDAlarakEmpowerWorshiperAdd;
trigger libCPCD_gt_CDAlarakEmpowerWorshiperRemove;
trigger libCPCD_gt_CDAlarakEmpowerUpdate;
trigger libCPCD_gt_CDAlarakSoulAbsorptionImpact;
trigger libCPCD_gt_CDAlarakSoulAbsorptionLaunch;
trigger libCPCD_gt_CDAlarakSoulAbsorptionPrestigeMechBuff;
trigger libCPCD_gt_CDAlarakLightningStrikesHighlightOn;
trigger libCPCD_gt_CDAlarakLightningStrikesHighlightOff;
trigger libCPCD_gt_CDAlarakLightningStrikesSacrifice;
trigger libCPCD_gt_CDAlarakSacrificeScale;
trigger libCPCD_gt_CDAlarakAirUpgrade;
trigger libCPCD_gt_CDNovaTriggersInit;
trigger libCPCD_gt_CDNovaBuildingCompleted;
trigger libCPCD_gt_CDNovaPsiStrike;
trigger libCPCD_gt_CDNovaTankRange;
trigger libCPCD_gt_CDNovaGriffinTransportActivate;
trigger libCPCD_gt_CDNovaGriffinTransportStop;
trigger libCPCD_gt_CDNovaGriffinTransportTimeOut;
trigger libCPCD_gt_CDNovaGriffinTransportAirReapply;
trigger libCPCD_gt_CDNovaGriffinTransportGroundReapply;
trigger libCPCD_gt_CDNovaGriffinTransportTeleportUnload;
trigger libCPCD_gt_CDNovaNamesGenerate;
trigger libCPCD_gt_CDNovaNamesAssign;
trigger libCPCD_gt_CDNovaNamesKillUpdate;
trigger libCPCD_gt_CDNovaNamesKillUpdateTurret;
trigger libCPCD_gt_CDStukovTriggersInit;
trigger libCPCD_gt_CDStukovCreepTumorSpawn;
trigger libCPCD_gt_CDStukovAleksanderSpawnSupplyRemove;
trigger libCPCD_gt_CDStukovTankDeath;
trigger libCPCD_gt_CDStukovUnitCostRefund;
trigger libCPCD_gt_CDStukovBunkerBirthCargoSpawn;
trigger libCPCD_gt_CDStukovBunkerRegister;
trigger libCPCD_gt_CDStukovBunkerUnloadRally;
trigger libCPCD_gt_CDStukovBunkerAutoLoad;
trigger libCPCD_gt_CDStukovTimedLifeSupplyRemove;
trigger libCPCD_gt_CDStukovBurrowSupplyRemove;
trigger libCPCD_gt_CDStukovCompoundRebuiltSpawn;
trigger libCPCD_gt_CDStukovCompoundRebuilt;
trigger libCPCD_gt_CDStukovHordeWaveSpawner;
trigger libCPCD_gt_CDStukovHordeWaveCreated;
trigger libCPCD_gt_CDStukovHordeWaveVolatile;
trigger libCPCD_gt_CDStukovHordeInterruptionReissueOrder;
trigger libCPCD_gt_CDStukovRallyPlaced;
trigger libCPCD_gt_CDStukovRallytoUnitDies;
trigger libCPCD_gt_CDFenixTriggersInit;
trigger libCPCD_gt_CDFenixAutocastOn;
trigger libCPCD_gt_CDFenixAutocastOff;
trigger libCPCD_gt_CDFenixSummonAutocastAdjust;
trigger libCPCD_gt_CDFenixDragoonOverchargeOn;
trigger libCPCD_gt_CDFenixDragoonOverchargeOff;
trigger libCPCD_gt_CDFenixSpawn;
trigger libCPCD_gt_CDFenixSpawnCleanup;
trigger libCPCD_gt_CDFenisSpawnCleanupRemove;
trigger libCPCD_gt_CDFenixVitalRefresh;
trigger libCPCD_gt_CDFenixDeath;
trigger libCPCD_gt_CDFenixSuicideUpdateVital;
trigger libCPCD_gt_CDFenixNameRemoveSuicide;
trigger libCPCD_gt_CDFenixRallyReset;
trigger libCPCD_gt_CDFenixChampionSetup;
trigger libCPCD_gt_CDFenixChampionShellMade;
trigger libCPCD_gt_CDFenixChampionConclaveRemade;
trigger libCPCD_gt_CDFenixChampionAIResearched;
trigger libCPCD_gt_CDFenixChampionTimers;
trigger libCPCD_gt_CDFenixChampionMorphed;
trigger libCPCD_gt_CDFenixChampionDeath;
trigger libCPCD_gt_CDFenixChampionShellDies;
trigger libCPCD_gt_CDFenixChampionProbius;
trigger libCPCD_gt_CDFenixChampionDeathBuffExpire;
trigger libCPCD_gt_CDFenixChampionConclaveTrainStart;
trigger libCPCD_gt_CDFenixChampionConclaveTrainStop;
trigger libCPCD_gt_CDFenixChampionConclaveAugmentSound;
trigger libCPCD_gt_CDFenixTaldarinStore;
trigger libCPCD_gt_CDFenixTaldarinRelease;
trigger libCPCD_gt_CDFenixSentryShield;
trigger libCPCD_gt_AchievementFenixCarrierAmount;
trigger libCPCD_gt_AchievementFenixCarrierResearched;
trigger libCPCD_gt_CDDehakaTriggersInit;
trigger libCPCD_gt_CDDehakaPrestigeCloneRevive;
trigger libCPCD_gt_CDDehakaPrestigeClone;
trigger libCPCD_gt_CDDehakaUnitCostRefund;
trigger libCPCD_gt_CDDehakaGeneThornsOn;
trigger libCPCD_gt_CDDehakaLearnOrder;
trigger libCPCD_gt_CDDehakaLevelUpStunOff;
trigger libCPCD_gt_CDDehakaLevelUpStage3;
trigger libCPCD_gt_CDDehakaLevelUpStage2;
trigger libCPCD_gt_CDDehakaEssenceManualUpdate;
trigger libCPCD_gt_CDDehakaEssencePickup;
trigger libCPCD_gt_CDDehakaEssenceDrop;
trigger libCPCD_gt_CDDehakaReviveGasWorkerBehaviorAdd;
trigger libCPCD_gt_CDDehakaReviveGasWorkerBehaviorRemove;
trigger libCPCD_gt_CDDehakaReviveEatButtonClicked;
trigger libCPCD_gt_CDDehakaReviveTimerAdjustments;
trigger libCPCD_gt_CDDehakaLearn;
trigger libCPCD_gt_CDDehakaBeamStart;
trigger libCPCD_gt_CDDehakaBeamStop;
trigger libCPCD_gt_CDDehakaConsumeTimeStopImmunity;
trigger libCPCD_gt_CDDehakaConsumeExecuted;
trigger libCPCD_gt_CDDehakaConsumeDetachFailSafe;
trigger libCPCD_gt_CDDehakaConsumeLaunchFailSafe;
trigger libCPCD_gt_CDDehakaConsumeEffectHeroic;
trigger libCPCD_gt_CDDehakaConsumeLearnLevel2;
trigger libCPCD_gt_CDDehakaConsumeLearnLevel3;
trigger libCPCD_gt_CDDehakaBossFacingSetting;
trigger libCPCD_gt_CDDehakaAutocastSettingsOn;
trigger libCPCD_gt_CDDehakaAutocastSettingsOff;
trigger libCPCD_gt_CDDehakaAutocastBossSummonStateAdjust;
trigger libCPCD_gt_CDDehakaGlevigTimerAdjustments;
trigger libCPCD_gt_CDDehakaPackLeaderGlevigBuilt;
trigger libCPCD_gt_CDDehakaPackLeaderMurvarBuilt;
trigger libCPCD_gt_CDDehakaPackLeaderDakrunBuilt;
trigger libCPCD_gt_CDDehakaDenReviveFootprintOn;
trigger libCPCD_gt_CDDehakaDenReviveFootprintOff;
trigger libCPCD_gt_CDDehakaDenReviveEatTextTagDead;
trigger libCPCD_gt_CDDehakaDenReviveEatTextTagRevived;
trigger libCPCD_gt_CDDehakaDenReviveEatUsed;
trigger libCPCD_gt_CDDehakaMutaliskReviveCooldownOn;
trigger libCPCD_gt_CDHHTriggersInit;
trigger libCPCD_gt_CDHHMagMines;
trigger libCPCD_gt_CDHHVikingTacticalJumpMorph;
trigger libCPCD_gt_CM_Horner_HangerFinish;
trigger libCPCD_gt_CDHHMiraTakeover_Upgrade;
trigger libCPCD_gt_CDHHDoubleSupplyStun;
trigger libCPCD_gt_CDHHDeathRattleHellionFearApply;
trigger libCPCD_gt_CDHHBomberPlatform_PlatformCreated;
trigger libCPCD_gt_CDHHBomberPlatform_PlatformDies;
trigger libCPCD_gt_CDHHBomberPlatform_BomberLaunched;
trigger libCPCD_gt_CDHHBomberPlatform_BomberReturned;
trigger libCPCD_gt_CDHHBomberPlatform_BomberRebuilt;
trigger libCPCD_gt_CDHHBomberPlatform_TopBar_TargetSelected;
trigger libCPCD_gt_CDHHBomberPlatform_Individual_TargetSelected;
trigger libCPCD_gt_CDHHStarportRecreateTechLabOrder;
trigger libCPCD_gt_CDHHStarportRecreate;
trigger libCPCD_gt_CDHHStarportFinishCreateTechLabOrder;
trigger libCPCD_gt_CDHHStarportCreateTechLabOrder;
trigger libCPCD_gt_CDHHStarportCreateTechLabStart;
trigger libCPCD_gt_CDHHStarportCreateTechLabFinish;
trigger libCPCD_gt_CDHHSupplyAchievement;
trigger libCPCD_gt_CDHHScrapDrop;
trigger libCPCD_gt_CDHHScrapDropForSwannWreckage;
trigger libCPCD_gt_CDHHScrapPickup;
trigger libCPCD_gt_CDHHDeathRattle_Reaper;
trigger libCPCD_gt_CDHHDeathRattle_WidowMine;
trigger libCPCD_gt_CDHHDeathRattle_Hellion;
trigger libCPCD_gt_CDHHDeathRattle_Hellbat;
trigger libCPCD_gt_CDTychusTriggersInit;
trigger libCPCD_gt_CDTychusWarhoundFearApply;
trigger libCPCD_gt_CDTychusHERC_ShieldCooldown;
trigger libCPCD_gt_CDTychusHERC_CriticalText;
trigger libCPCD_gt_CDTychusSnareFailSafe;
trigger libCPCD_gt_CDTychusOilBombFireDamageResponse;
trigger libCPCD_gt_CDTychusSpectreAuraOn;
trigger libCPCD_gt_CDTychusSpectreAuraOff;
trigger libCPCD_gt_CDTychusOdinCameraShake;
trigger libCPCD_gt_CDTychusOdinBirth;
trigger libCPCD_gt_CDTychusOdinTimeout;
trigger libCPCD_gt_CDTychusOdinDeathTychusSelect;
trigger libCPCD_gt_CDTychusOdinBirthTychusDeselect;
trigger libCPCD_gt_CDTychusOdinCalldownUIUpdate;
trigger libCPCD_gt_CDTychusMedicTransportActived;
trigger libCPCD_gt_CDTychusMedicTopBarButton;
trigger libCPCD_gt_CDTychusMedicTransportTargetOn;
trigger libCPCD_gt_CDTychusMedicTransportTargetOff;
trigger libCPCD_gt_CDTychusMedicTransportStop;
trigger libCPCD_gt_CDTychusMedicTransportTimeOut;
trigger libCPCD_gt_CDTychusMedicTransportAirBehaviorApplied;
trigger libCPCD_gt_CDTychusMedicTransportGroundBehaviorApplied;
trigger libCPCD_gt_CDTychusMedicTransportTeleportUnload;
trigger libCPCD_gt_CDTychusTriUnitHealthUpgrade;
trigger libCPCD_gt_CDTychusTriUnitSpeedUpgrade;
trigger libCPCD_gt_CDTychusPrestigeLoneWolfChanged;
trigger libCPCD_gt_CDTychusEventHook;
trigger libCPCD_gt_CDTychusReviveReaperCharges;
trigger libCPCD_gt_CDTychusReviveWarhoundCharges;
trigger libCPCD_gt_CDTychusReviveUsed;
trigger libCPCD_gt_CDTychusReviveFailsafe;
trigger libCPCD_gt_CDTychusTrainMaxChargesRemove;
trigger libCPCD_gt_CDTychusHeroQueue;
trigger libCPCD_gt_CDTychusHeroCancel;
trigger libCPCD_gt_CDTychusHeroPurchaseDummy;
trigger libCPCD_gt_CDTychusHeroChargeTiming;
trigger libCPCD_gt_CDTychusReplaceResearchCenter;
trigger libCPCD_gt_CDTychusUISpawnCheat;
trigger libCPCD_gt_CDTychusUISquadMemberTrained;
trigger libCPCD_gt_CDTychusUISquadMemberReviveQueued;
trigger libCPCD_gt_CDTychusUISquadMemberReviveCancelled;
trigger libCPCD_gt_CDTychusUISquadMemberRevived;
trigger libCPCD_gt_CDTychusUISquadMemberDeath;
trigger libCPCD_gt_CDTychusUISquadStructureBuilt;
trigger libCPCD_gt_CDTychusUISquadBarBuilt;
trigger libCPCD_gt_CDTychusUISquadBarUpdateProgress;
trigger libCPCD_gt_CDTychusUIMedivacPlatformBuilt;
trigger libCPCD_gt_CDTychusUIMedivacAbilityReady;
trigger libCPCD_gt_CDTychusUIMedivacAbilityUnready;
trigger libCPCD_gt_CDTychusUIEquipmentUpgraded;
trigger libCPCD_gt_CDTychusUISwapInit;
trigger libCPCD_gt_CDTychusUISwapButtonClicked;
trigger libCPCD_gt_CDTychusUISwapPurchased;
trigger libCPCD_gt_AchievementTychusGear;
trigger libCPCD_gt_AchievementTychusHeal;
trigger libCPCD_gt_CDZeratulTriggersInit;
trigger libCPCD_gt_CDZeratulRallySetZeratul;
trigger libCPCD_gt_CDZeratulOrbitalAssimilator;
trigger libCPCD_gt_CDZeratulArtifactTriggerUpdates;
trigger libCPCD_gt_CDZeratulArtifactUpdates;
trigger libCPCD_gt_CDZeratulArt2Stun;
trigger libCPCD_gt_CDZeratulTrade;
trigger libCPCD_gt_CDZeratulTradeFullEnergyOn;
trigger libCPCD_gt_CDZeratulTradeFullEnergyOff;
trigger libCPCD_gt_CDZeratulDisruptorShotFinal;
trigger libCPCD_gt_CDZeratulDisruptorShotCreate;
trigger libCPCD_gt_CDZeratulDisruptorShotImpact;
trigger libCPCD_gt_CDZeratulSentryShield;
trigger libCPCD_gt_CDZeratulDarkTemplarRevive;
trigger libCPCD_gt_CDZeratulWarpPrismAutoUnloadOn;
trigger libCPCD_gt_CDZeratulWarpPrismAutoUnloadOff;
trigger libCPCD_gt_CDZeratulWarpPrismSelectRift;
trigger libCPCD_gt_CDZeratulWarpPrismAutoUnloadMorph;
trigger libCPCD_gt_CDZeratulCannonUnitLink;
trigger libCPCD_gt_CDZeratulProjectionTimedLifeFate;
trigger libCPCD_gt_CDZeratulProjectionCancel;
trigger libCPCD_gt_CDZeratulTransportUnload;
trigger libCPCD_gt_CDZeratulTransportResetRally;
trigger libCPCD_gt_CDZeratulAvatarsPing;
trigger libCPCD_gt_CDZeratulEntropicBlastSpawns;
trigger libCPCD_gt_CDZeratulDevolve;
trigger libCPCD_gt_CDZeratulStasisBeamIssueOrder;
trigger libCPCD_gt_CDZeratulStasisBeam;
trigger libCPCD_gt_CDZeratulStasisDuration;
trigger libCPCD_gt_CDZeratulTopBarWarpTrainStart;
trigger libCPCD_gt_CDZeratulTopBarWarpTrainFinish;
trigger libCPCD_gt_CDZeratullTopBarRallySet;
trigger libCPCD_gt_CDZeratulTopBarRallyRedirect;
trigger libCPCD_gt_CM_ZeratulTopBarRallyCancel;
trigger libCPCD_gt_CDZeratulProphecyEventVision;
trigger libCPCD_gt_CDZeratulProphecyEventArtifactMised;
trigger libCPCD_gt_CDZeratulProphecyEventArtifactPickedUp;
trigger libCPCD_gt_CDZeratulProphecyEventArtifactRevealed;
trigger libCPCD_gt_CDZeratulProphecyEventArtifactUsed;
trigger libCPCD_gt_CDZeratulProphecyEventProphecyCast;
trigger libCPCD_gt_CDZeratulProphecyMiss;
trigger libCPCD_gt_CDZeratulProphecyCastStop;
trigger libCPCD_gt_CDZeratulProphecyIntroQ;
trigger libCPCD_gt_CDZeratulProphecyArtifactPickedUp;
trigger libCPCD_gt_CDZeratulProphecyArtifactRevealed;
trigger libCPCD_gt_CDZeratulProphecyArtifactPathingSafety;
trigger libCPCD_gt_CDZeratulProphecyArrtifactDebug;
trigger libCPCD_gt_CDZeratulProphecyReady;
trigger libCPCD_gt_CDZeratulProphecyNotReady;
trigger libCPCD_gt_CDZeratulArtifactCollected;
trigger libCPCD_gt_CDZeratulArtifactUpgraded;
trigger libCPCD_gt_CDZeratulArtifactUsed;
trigger libCPCD_gt_AchievementZeratulDevolveKills;
trigger libCPCD_gt_CDStetmannTriggersInit;
trigger libCPCD_gt_CDStetmannEventLairHiveCreated;
trigger libCPCD_gt_CDStetmannEventLairHiveMorph;
trigger libCPCD_gt_CDStetmannStetelliteToggle;
trigger libCPCD_gt_CDStetmannStetelliteTechLevel;
trigger libCPCD_gt_CDStetmannStetelliteChainCast;
trigger libCPCD_gt_CDStetmannStetelliteMaxChargesChanged;
trigger libCPCD_gt_CDStetmannStetelliteChargesChanged;
trigger libCPCD_gt_CDStetmannBanelingEnergyDamageBoost;
trigger libCPCD_gt_CDStetmannBroodLordArmBroodling;
trigger libCPCD_gt_CDStetmannGaryUpgrade;
trigger libCPCD_gt_CM_Stetmann_Set;
trigger libCPCD_gt_AchievementStetmannGaryTransform;
trigger libCPCD_gt_AchievementStetmannSteteliteOverchargeAlly;
trigger libCPCD_gt_CDMengskTriggersInit;
trigger libCPCD_gt_CDMengskWeaponPickup;
trigger libCPCD_gt_CDMengskWeaponPickerUpperUnregister;
trigger libCPCD_gt_CDMengskWeaponPickerUpperRegister;
trigger libCPCD_gt_CDMengskWeaponPickupRegister;
trigger libCPCD_gt_CDMengskReturnToWork;
trigger libCPCD_gt_CDMengskEnlistStop;
trigger libCPCD_gt_CDMengskEnlistStart;
trigger libCPCD_gt_CDMengskVeterancyEarned;
trigger libCPCD_gt_CDMengskVeteranDing;
trigger libCPCD_gt_CDMengskVeteranDies;
trigger libCPCD_gt_CDMengskRegisterVeteranUnit;
trigger libCPCD_gt_CDMengskRemoveVeteranUnit;
trigger libCPCD_gt_CDMengskDirtyBombSweetener;
trigger libCPCD_gt_CDMengskGlobalAbilityCast;
trigger libCPCD_gt_CDMengskNuclearAnnihilationSmallNukes;
trigger libCPCD_gt_CDMengskArtilleryBombardmentCargoChange;
trigger libCPCD_gt_CDMengskArtilleryExperimentalStrikeFearApply;
trigger libCPCD_gt_CDMengskArtilleryGlobalExperimentalStrikeTarget;
trigger libCPCD_gt_CDMengskArtilleryExperimentalStrikeTarget;
trigger libCPCD_gt_CDMengskArtilleryBombardmentTarget;
trigger libCPCD_gt_CDMengskPropagandaUpgraded;
trigger libCPCD_gt_CDMengskRemovePropagandaUnit;
trigger libCPCD_gt_CDMengskRegisterPropagandaUnit;
trigger libCPCD_gt_CDMengskBunkerDepotDropFillCargo;
trigger libCPCD_gt_CDMengskMedivacAirliftDing;
trigger libCPCD_gt_CDMengskMedivacAirlift;
trigger libCPCD_gt_CDMengskUltraliskMengskSpawn;
trigger libCPCD_gt_CDMengskMutaliskMengskSpawn;
trigger libCPCD_gt_CDMengskHydraliskMengskSpawn;
trigger libCPCD_gt_CDMengskZerglingMengskSpawn;
trigger libCPCD_gt_CDMengskZergSeekDestroy;
trigger libCPCD_gt_AchievementMengskTopBarKills;
trigger libCPCD_gt_DeathPreventGrantKillCredit;
trigger libCPCD_gt_AttackFastBuffHack;
trigger libCPCD_gt_DmgandAttackSpeedInheritNew;
trigger libCPCD_gt_DmgandAttackSpeedInheritExisting;
trigger libCPCD_gt_ConjoinedVitalRegenOnOff;
trigger libCPCD_gt_CM_TargetLockOrder;
trigger libCPCD_gt_CM_TargetLockOrderRaven;
trigger libCPCD_gt_ChronoAnimSpeedOn;
trigger libCPCD_gt_ChronoAnimSpeedOff;
trigger libCPCD_gt_SamePlaceRevive;
trigger libCPCD_gt_CM_InstantRevive;
trigger libCPCD_gt_SupplicantWarpTrain;
trigger libCPCD_gt_SupplicantActualTrain;
trigger libCPCD_gt_SupplicantWarpFinish;
trigger libCPCD_gt_SupplicantWarpCancel;
trigger libCPCD_gt_StukovSnareBehaviorOn2;
trigger libCPCD_gt_CM_CargoDeath;
trigger libCPCD_gt_CreepTumorBuild;
trigger libCPCD_gt_MindControlSupplyOn;
trigger libCPCD_gt_MindControlSupplyOff;
trigger libCPCD_gt_BehaviorPermanentlyChangesOwner;
trigger libCPCD_gt_CODConstrucInvulnerableOn;
trigger libCPCD_gt_CODConstrucInvulnerableOff;
trigger libCPCD_gt_VoidACShardModifyHealth;
trigger libCPCD_gt_ResourcePickupAllyNew;
trigger libCPCD_gt_StunAnimOn;
trigger libCPCD_gt_StunAnimOff;
trigger libCPCD_gt_HighlightTooltip;
trigger libCPCD_gt_OverlordUpgrade;
trigger libCPCD_gt_ZerglingUpgrade;
trigger libCPCD_gt_CreepEngulfCreate;
trigger libCPCD_gt_CreepEngulfMorph;
trigger libCPCD_gt_ShieldColorUnitCreate;
trigger libCPCD_gt_ShieldColorUnitMorph;
trigger libCPCD_gt_CDTownHallRallyConstruction;
trigger libCPCD_gt_CDTownHallRallyLand;
trigger libCPCD_gt_BanelingScourgeDeathrattleScrapDeaths;
trigger libCPCD_gt_BanelingScourgeEconDrop;
trigger libCPCD_gt_BanelingScourgeLocusts;
trigger libCPCD_gt_BanelingScourgeEssenceDrop;
trigger libCPCD_gt_BanelingScourgeBiomassDrop;
trigger libCPCD_gt_CTHeroReviveQueue_HeroRevived;
trigger libCPCD_gt_CTAbilityRaynorHyperion;
trigger libCPCD_gt_CTAbilityRaynorBansheesUsed;
trigger libCPCD_gt_CTAbilitySwannDrone;
trigger libCPCD_gt_CTAbilitySwannLaserDrill;
trigger libCPCD_gt_CTAbilitySwannCombatDropUsed;
trigger libCPCD_gt_CTAbilityKerriganCrushingGrip;
trigger libCPCD_gt_CTAbilityKerriganAssimilation;
trigger libCPCD_gt_CM_AbilityTransmissionZagaraRoachDrop;
trigger libCPCD_gt_CM_AbilityTransmissionArtanisSuperShields;
trigger libCPCD_gt_CM_AbilityTransmissionVorazunTimeStop;
trigger libCPCD_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost;
trigger libCPCD_gt_CM_AbilityTransmissionKaraxChronoMap;
trigger libCPCD_gt_CM_AbilityTransmissionAbathurMend;
trigger libCPCD_gt_CM_AbilityTransmissionAlarakEmpower;
trigger libCPCD_gt_CM_AbilityTransmissionAlarakDeathFleet;
trigger libCPCD_gt_CM_AbilityTransmissionAlarakOvercharge;
trigger libCPCD_gt_CM_AbilityTransmissionAlarakSacrifice;
trigger libCPCD_gt_CM_AbilityTransmissionNovaBombingRun;
trigger libCPCD_gt_CM_AbilityTransmissionNovaTransport;
trigger libCPCD_gt_CM_AbilityTransmissionNovaDMatrix;
trigger libCPCD_gt_CM_AbilityTransmissionStukovAleksander;
trigger libCPCD_gt_CM_AbilityTransmissionStukovApocalisk;
trigger libCPCD_gt_CM_AbilityTransmissionStukovInfestStructure;
trigger libCPCD_gt_CM_AbilityTransmissionFenixCreateTalis;
trigger libCPCD_gt_CM_AbilityTransmissionFenixCreateKaldalis;
trigger libCPCD_gt_CM_AbilityTransmissionFenixCreateTaldarin;
trigger libCPCD_gt_CM_AbilityTransmissionFenixCreateWarbringer;
trigger libCPCD_gt_CM_AbilityTransmissionFenixCreateMojo;
trigger libCPCD_gt_CM_AbilityTransmissionFenixCreateClolarion;
trigger libCPCD_gt_CM_AbilityTransmissionFenixZealotSuit;
trigger libCPCD_gt_CM_AbilityTransmissionFenixDragoonSuit;
trigger libCPCD_gt_CM_AbilityTransmissionFenixArbiterSuit;
trigger libCPCD_gt_CM_AbilityTransmissionFenixMassRecall;
trigger libCPCD_gt_CM_HeroTransmissionFenixHeroDies;
trigger libCPCD_gt_CM_HeroTransmissionFenixHeroRepaired;
trigger libCPCD_gt_CM_HeroTransmissionFenixNameChange;
trigger libCPCD_gt_CM_AbilityTransmissionDehakaGlevig;
trigger libCPCD_gt_CM_AbilityTransmissionDehakaMurvar;
trigger libCPCD_gt_CM_AbilityTransmissionDehakaDakrun;
trigger libCPCD_gt_CM_AbilityTransmissionDehakaPrimalWurm;
trigger libCPCD_gt_CM_UnitTransmissionDehakaGlevigConstruct;
trigger libCPCD_gt_CM_UnitTransmissionDehakaMurvarConstruct;
trigger libCPCD_gt_CM_UnitTransmissionDehakaDakrunConstruct;
trigger libCPCD_gt_CM_AbilityTransmissionDehakaChangeReminderLevel;
trigger libCPCD_gt_CM_AbilityTransmissionDehakaChangeReminderLearn;
trigger libCPCD_gt_CM_AbilityTransmissionDehakaChangeReminderTimerExpire;
trigger libCPCD_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt;
trigger libCPCD_gt_CM_AbilityTransmissionDehakaWurmStructureKilled;
trigger libCPCD_gt_CM_AbilityTransmissionHornerFleet;
trigger libCPCD_gt_CM_AbilityTransmissionHornerStation;
trigger libCPCD_gt_CM_UnitTransmissionHornerBomberBuild;
trigger libCPCD_gt_CM_AbilityTransmissionHornerBomberUse;
trigger libCPCD_gt_CM_AbilityTransmissionHornerBomberReminder;
trigger libCPCD_gt_CM_AbilityTransmissionTychusCreateReaper;
trigger libCPCD_gt_CM_AbilityTransmissionTychusCreateWarhound;
trigger libCPCD_gt_CM_AbilityTransmissionTychusCreateFirebat;
trigger libCPCD_gt_CM_AbilityTransmissionTychusCreateMarauder;
trigger libCPCD_gt_CM_AbilityTransmissionTychusCreateHERC;
trigger libCPCD_gt_CM_AbilityTransmissionTychusCreateGhost;
trigger libCPCD_gt_CM_AbilityTransmissionTychusCreatePhantom;
trigger libCPCD_gt_CM_AbilityTransmissionTychusCreateMedic;
trigger libCPCD_gt_CM_AbilityTransmissionTychusOdinUse;
trigger libCPCD_gt_CM_AbilityTransmissionTychusTransportUse;
trigger libCPCD_gt_CM_AbilityTransmissionTychusTransportReminder;
trigger libCPCD_gt_CM_UnitTransmissionTychusTransportBuild;
trigger libCPCD_gt_CM_UnitTransmissionTychusOutlawFirstDeath;
trigger libCPCD_gt_CM_UnitTransmissionTychusOutlawDeath;
trigger libCPCD_gt_CM_UnitTransmissionTychusOutlawRevived;
trigger libCPCD_gt_CM_UnitTransmissionTychusOutlawReviveReminder;
trigger libCPCD_gt_CM_UnitTransmissionTychusOutlawRecruitAvailable;
trigger libCPCD_gt_CM_UnitTransmissionTychusOutlawRecruited;
trigger libCPCD_gt_CM_UnitTransmissionTychusOutlawRecruitReminder;
trigger libCPCD_gt_CM_ArtifactTransmission_Hint;
trigger libCPCD_gt_CM_ArtifactTransmission_PickedUp;
trigger libCPCD_gt_CM_ArtifactTransmission_ProphecyCast;
trigger libCPCD_gt_CM_ArtifactTransmission_Upgraded;
trigger libCPCD_gt_CM_ArtifactTransmission_SelectAbilityReminder;
trigger libCPCD_gt_CM_GaryDeath;
trigger libCPCD_gt_CM_GaryUpgradeReminder;
trigger libCPCD_gt_CM_Mengsk_ArtilleryBuilt;
trigger libCPCD_gt_CM_Mengsk_ArtilleryStarted;
trigger libCPCD_gt_CM_AbilityTransmissionMengskNuclearAnnihilation;
trigger libCPCD_gt_CM_AbilityTransmissionMengskDirtyBomb;
trigger libCPCD_gt_CM_AbilityTransmissionMengskZergCalldown;
trigger libCPCD_gt_CM_AbilityTransmissionMengskForcedConscription;
trigger libCPCD_gt_CM_VOResourceSent;
trigger libCPCD_gt_CM_VOResourceRequest;
trigger libCPCD_gt_CM_VOEnemySpotted;
trigger libCPCD_gt_CM_VOUnitsLostCheck;
trigger libCPCD_gt_CM_VOEnemyCloakedSpotted;
trigger libCPCD_gt_CM_TransmissionSend;
trigger libCPCD_gt_CM_SendTransmissionCampaignTick;
trigger libCPCD_gt_CM_GPReminderAbilityUsed;
trigger libCPCD_gt_PlayerInfoClicked;
trigger libCPCD_gt_PlayerInfoEscape;

// Library Initialization
void libCPCD_InitVariables ();

