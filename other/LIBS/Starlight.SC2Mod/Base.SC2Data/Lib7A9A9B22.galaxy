include "TriggerLibs/NativeLib"
include "LibDDE92A83_h"
include "Lib1DE23868_h"
include "Lib29554E00_h"
include "LibCA960273_h"
include "Lib479C7CBB_h"
include "Lib39886FE6_h"
include "Lib7550A90B_h"

include "Lib7A9A9B22_h"

//--------------------------------------------------------------------------------------------------
// Library: Staging Area
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib7A9A9B22_InitLibraries () {
    libNtve_InitVariables();
    libDDE92A83_InitVariables();
    lib1DE23868_InitVariables();
    lib29554E00_InitVariables();
    libCA960273_InitVariables();
    lib479C7CBB_InitVariables();
    lib39886FE6_InitVariables();
    lib7550A90B_InitVariables();
}

// Variable Initialization
bool lib7A9A9B22_InitVariables_completed = false;

void lib7A9A9B22_InitVariables () {
    int init_i;

    if (lib7A9A9B22_InitVariables_completed) {
        return;
    }

    lib7A9A9B22_InitVariables_completed = true;

    for (init_i = 0; init_i <= 3; init_i += 1) {
        lib7A9A9B22_gv_stagingAreaTeamInternal[init_i] = PlayerGroupEmpty();
    }
    lib7A9A9B22_gv_mines = true;
    lib7A9A9B22_gv_waypointGroup = UnitGroupEmpty();
    lib7A9A9B22_gv__1x1MaxCountPerRow = 12;
    lib7A9A9B22_gv__2x2MaxCountPerRow = 6;
    lib7A9A9B22_gv_attackWaveGroup = UnitGroupEmpty();
    lib7A9A9B22_gv_attackWaveReady = UnitGroupEmpty();
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lib7A9A9B22_gv_attackWaveData[init_i] = "AttackWaveProtoss";
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lib7A9A9B22_gv_attackWaveDataSupport[init_i] = "AttackWaveProtossSupport";
    }
    lib7A9A9B22_gv_stagingAreaReady = UnitGroupEmpty();
    lib7A9A9B22_gv_stagingArea = UnitGroupEmpty();
    lib7A9A9B22_gv_stagingAreaTeamColor = UnitGroupEmpty();
    lib7A9A9B22_gv_stagingAreaGrid = UnitGroupEmpty();
    lib7A9A9B22_gv_stagingAreaSpawns = UnitGroupEmpty();
    for (init_i = 0; init_i <= 20; init_i += 1) {
        lib7A9A9B22_gv_stagingAreaSpawnsByIndex[init_i] = UnitGroupEmpty();
    }
    lib7A9A9B22_gv_stagingAreaSpawners = UnitGroupEmpty();
    lib7A9A9B22_gv_stagingAreaPeripherals = UnitGroupEmpty();
    lib7A9A9B22_gv_stagingAreaHeroSelect = UnitGroupEmpty();
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lib7A9A9B22_gv_stagingAreaTeamSpawns[init_i] = UnitGroupEmpty();
    }
    lib7A9A9B22_gv_stagingAreaPlayers = PlayerGroupEmpty();
    lib7A9A9B22_gv_preparationArea = UnitGroupEmpty();
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lib7A9A9B22_gv_playerNPC[init_i] = -1;
    }
    lib7A9A9B22_gv_equipmentShop = UnitGroupEmpty();
    lib7A9A9B22_gv_mineralFields = UnitGroupEmpty();
    lib7A9A9B22_gv_mineralMines = UnitGroupEmpty();
    lib7A9A9B22_gv_mineralIncomeBonus = 1.0;
    lib7A9A9B22_gv_mineralIncomeIncrement = 0.5;
    lib7A9A9B22_gv_mineralIncomeBase = 7.5;
    lib7A9A9B22_gv_spawnsFinalWaypoint = UnitGroupEmpty();
    lib7A9A9B22_gv_zeratulArtifactSearchGroup = UnitGroupEmpty();
}

// Functions
void lib7A9A9B22_gf_MineralIncomeCreate (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGroupCount(UnitGroup("MineralIncome", lp_player, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralIncome", c_unitCreateIgnorePlacement, lp_player, Point(0.0, 0.0));
        UnitGroupAdd(lib7A9A9B22_gv_stagingAreaPeripherals, UnitLastCreated());
    }

}

void lib7A9A9B22_gf_MineralIncomeUpdate (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    lib7A9A9B22_gf_MineralIncomeCreate(lp_player);
    if ((lib7A9A9B22_gv_mineralIncomeBase > 0.0)) {
        CatalogFieldValueSet(c_gameCatalogBehavior, "MineralIncome", "Period", lp_player, FixedToString((1.0 / ((lib7A9A9B22_gv_mineralIncomeBase + (lib7A9A9B22_gv_mineralIncomeIncrement * IntToFixed(TechTreeUpgradeCount(lp_player, "MineralIncome", c_techCountCompleteOnly)))) / 1.4)), 6));
        CatalogFieldValueSet(c_gameCatalogBehavior, "MineralIncomeBonus", "Period", lp_player, FixedToString((1.0 / (((lib7A9A9B22_gv_mineralIncomeBase + lib7A9A9B22_gv_mineralIncomeBonus) + (lib7A9A9B22_gv_mineralIncomeIncrement * IntToFixed(TechTreeUpgradeCount(lp_player, "MineralIncome", c_techCountCompleteOnly)))) / 1.4)), 6));
        CatalogFieldValueSet(c_gameCatalogEffect, "MineralIncomeModify", "Resources[" + IntToString(0) + "]", lp_player, IntToString(1));
    }
    else {
        CatalogFieldValueSet(c_gameCatalogBehavior, "MineralIncome", "Period", lp_player, FixedToString(1.0, 6));
        CatalogFieldValueSet(c_gameCatalogBehavior, "MineralIncomeBonus", "Period", lp_player, FixedToString(1.0, 6));
        CatalogFieldValueSet(c_gameCatalogEffect, "MineralIncomeModify", "Resources[" + IntToString(0) + "]", lp_player, IntToString(0));
    }
    CatalogFieldValueSet(c_gameCatalogEffect, "MineralIncomeDummyCurrent", "Amount", lp_player, FixedToString((lib7A9A9B22_gv_mineralIncomeBase + (lib7A9A9B22_gv_mineralIncomeIncrement * IntToFixed(TechTreeUpgradeCount(lp_player, "MineralIncome", c_techCountCompleteOnly)))), 2));
    CatalogFieldValueSet(c_gameCatalogEffect, "MineralIncomeDummyBonus", "Amount", lp_player, FixedToString(lib7A9A9B22_gv_mineralIncomeBonus, 2));
    CatalogFieldValueSet(c_gameCatalogEffect, "MineralIncomeDummyIncrement", "Amount", lp_player, FixedToString(lib7A9A9B22_gv_mineralIncomeIncrement, 2));
}

void lib7A9A9B22_gf_MineralIncomeSetBase (fixed lp_base) {
    // Automatic Variable Declarations
    playergroup autoBA7DC648_g;
    int autoBA7DC648_var;

    // Implementation
    lib7A9A9B22_gv_mineralIncomeBase = lp_base;
    autoBA7DC648_g = PlayerGroupAll();
    autoBA7DC648_var = -1;
    while (true) {
        autoBA7DC648_var = PlayerGroupNextPlayer(autoBA7DC648_g, autoBA7DC648_var);
        if (autoBA7DC648_var < 0) { break; }
        lib7A9A9B22_gf_MineralIncomeUpdate(autoBA7DC648_var);
    }
}

void lib7A9A9B22_gf_MineralIncomeSetIncrement (fixed lp_increment) {
    // Automatic Variable Declarations
    playergroup auto7C2CD79F_g;
    int auto7C2CD79F_var;

    // Implementation
    lib7A9A9B22_gv_mineralIncomeIncrement = lp_increment;
    auto7C2CD79F_g = PlayerGroupAll();
    auto7C2CD79F_var = -1;
    while (true) {
        auto7C2CD79F_var = PlayerGroupNextPlayer(auto7C2CD79F_g, auto7C2CD79F_var);
        if (auto7C2CD79F_var < 0) { break; }
        lib7A9A9B22_gf_MineralIncomeUpdate(auto7C2CD79F_var);
    }
}

void lib7A9A9B22_gf_MineralIncomeSetBonus (fixed lp_bonus) {
    // Automatic Variable Declarations
    playergroup auto8F5971D0_g;
    int auto8F5971D0_var;

    // Implementation
    lib7A9A9B22_gv_mineralIncomeBonus = lp_bonus;
    auto8F5971D0_g = PlayerGroupAll();
    auto8F5971D0_var = -1;
    while (true) {
        auto8F5971D0_var = PlayerGroupNextPlayer(auto8F5971D0_g, auto8F5971D0_var);
        if (auto8F5971D0_var < 0) { break; }
        lib7A9A9B22_gf_MineralIncomeUpdate(auto8F5971D0_var);
    }
}

void lib7A9A9B22_gf_MineralIncomePause (bool lp_pause) {
    // Automatic Variable Declarations
    unitgroup auto66C3EC4A_g;
    int auto66C3EC4A_u;
    unit auto66C3EC4A_var;

    // Implementation
    auto66C3EC4A_g = UnitGroupFilter("MineralIncome", c_playerAny, lib7A9A9B22_gv_stagingAreaPeripherals, UnitFilter(0, 0, 0, 0), 0);
    auto66C3EC4A_u = UnitGroupCount(auto66C3EC4A_g, c_unitCountAll);
    for (;; auto66C3EC4A_u -= 1) {
        auto66C3EC4A_var = UnitGroupUnitFromEnd(auto66C3EC4A_g, auto66C3EC4A_u);
        if (auto66C3EC4A_var == null) { break; }
        libNtve_gf_PauseUnit(auto66C3EC4A_var, lp_pause);
    }
}

void lib7A9A9B22_gf_MineralIncomeBonusToggle (playergroup lp_players, bool lp_toggle) {
    // Automatic Variable Declarations
    bool auto16ACC29C_val;
    playergroup auto07DACBD4_g;
    int auto07DACBD4_var;
    playergroup auto6A568523_g;
    int auto6A568523_var;

    // Implementation
    auto16ACC29C_val = lp_toggle;
    if (auto16ACC29C_val == true) {
        auto07DACBD4_g = lp_players;
        auto07DACBD4_var = -1;
        while (true) {
            auto07DACBD4_var = PlayerGroupNextPlayer(auto07DACBD4_g, auto07DACBD4_var);
            if (auto07DACBD4_var < 0) { break; }
            lib7A9A9B22_gf_MineralIncomeCreate(auto07DACBD4_var);
            if ((TechTreeUpgradeCount(auto07DACBD4_var, "MutationAccord", c_techCountCompleteOnly) == 0)) {
                libNtve_gf_SetUpgradeLevelForPlayer(auto07DACBD4_var, "MineralIncomeBonus", 1);
            }
            else {
                libNtve_gf_SetUpgradeLevelForPlayer(auto07DACBD4_var, "MineralIncomeBonus", 0);
            }
        }
    }
    else if (auto16ACC29C_val == false) {
        auto6A568523_g = lp_players;
        auto6A568523_var = -1;
        while (true) {
            auto6A568523_var = PlayerGroupNextPlayer(auto6A568523_g, auto6A568523_var);
            if (auto6A568523_var < 0) { break; }
            lib7A9A9B22_gf_MineralIncomeCreate(auto6A568523_var);
            libNtve_gf_SetUpgradeLevelForPlayer(auto6A568523_var, "MineralIncomeBonus", 0);
        }
    }
    else {
    }
}

void lib7A9A9B22_gf_UpdateMine (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetInfoText2(lp_unit, ((StringExternal("Param/Value/lib_7A9A9B22_E723FBEB") + StringExternal("Param/Value/lib_7A9A9B22_D73E0BBD") + IntToText(FixedToInt(((UnitGetCustomValue(lp_unit, 0) / 1.4) / 60.0))) + StringExternal("Param/Value/lib_7A9A9B22_759076F9") + IntToText(FixedToInt(((ModF((UnitGetCustomValue(lp_unit, 0) / 1.4), 60.0) - ModF(ModF((UnitGetCustomValue(lp_unit, 0) / 1.4), 60.0), 10.0)) / 10.0))) + IntToText(FixedToInt(ModF(ModF((UnitGetCustomValue(lp_unit, 0) / 1.4), 60.0), 10.0))) + StringExternal("Param/Value/lib_7A9A9B22_607E346F")) + StringExternal("Param/Value/lib_7A9A9B22_21EB9404") + (StringExternal("Param/Value/lib_7A9A9B22_6C3F4559") + IntToText(FixedToInt(UnitGetCustomValue(lp_unit, 1))) + StringExternal("Param/Value/lib_7A9A9B22_8B960E82")) + StringExternal("Param/Value/lib_7A9A9B22_940E8DDC") + (StringExternal("Param/Value/lib_7A9A9B22_16F4E191") + IntToText(FixedToInt((((GameGetMissionTime() - UnitGetCustomValue(lp_unit, 0)) / 1.4) * lib7A9A9B22_gv_mineralIncomeIncrement))))));
}

void lib7A9A9B22_gf_UpdateAllMines () {
    // Automatic Variable Declarations
    unitgroup autoA9AE81F3_g;
    int autoA9AE81F3_u;
    unit autoA9AE81F3_var;

    // Implementation
    autoA9AE81F3_g = lib7A9A9B22_gf_StagingAreaMineralMines();
    autoA9AE81F3_u = UnitGroupCount(autoA9AE81F3_g, c_unitCountAll);
    for (;; autoA9AE81F3_u -= 1) {
        autoA9AE81F3_var = UnitGroupUnitFromEnd(autoA9AE81F3_g, autoA9AE81F3_u);
        if (autoA9AE81F3_var == null) { break; }
        lib7A9A9B22_gf_UpdateMine(autoA9AE81F3_var);
    }
}

void lib7A9A9B22_gf_Dehaka2Genes (unit lp_unit, string lp_placeButton, string lp_gene0, string lp_gene1) {
    // Variable Declarations
    int lv_i;
    int lv_count;
    int lv_doubles;

    // Automatic Variable Declarations
    unitgroup auto5A2AB207_g;
    int auto5A2AB207_u;
    unit auto5A2AB207_var;

    // Variable Initialization

    // Implementation
    if (((TechTreeUpgradeCount(UnitGetOwner(lp_unit), lp_gene0, c_techCountCompleteOnly) >= 1) || ((TechTreeUpgradeCount(UnitGetOwner(lp_unit), lp_gene0, c_techCountCompleteOnly) == 0) && (TechTreeUpgradeCount(UnitGetOwner(lp_unit), lp_gene1, c_techCountCompleteOnly) == 0)))) {
        UnitBehaviorAdd(lp_unit, "DehakaGeneEvolvedCarapace", lp_unit, 1);
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lp_unit), lp_gene1, c_techCountCompleteOnly) >= 1)) {
        UnitBehaviorAdd(lp_unit, "DehakaGeneEvolvedIncubationSacs", lp_unit, 1);
    }

    lib7A9A9B22_gf_Dehaka2GenesUpdate(UnitGetOwner(lp_unit), UnitGetType(lp_unit), lp_placeButton, lp_gene0, lp_gene1);
    auto5A2AB207_g = UnitGroupFilter(UnitGetType(lp_unit), UnitGetOwner(lp_unit), lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5A2AB207_u = UnitGroupCount(auto5A2AB207_g, c_unitCountAll);
    for (;; auto5A2AB207_u -= 1) {
        auto5A2AB207_var = UnitGroupUnitFromEnd(auto5A2AB207_g, auto5A2AB207_u);
        if (auto5A2AB207_var == null) { break; }
        lv_count += 1;
        if ((UnitHasBehavior2(auto5A2AB207_var, "DehakaGeneDouble") == true)) {
            lv_doubles += 1;
        }

    }
    lv_count = (lv_count - (lv_doubles * 8));
    if ((lv_count >= 8)) {
        UnitBehaviorAdd(lp_unit, "DehakaGeneDouble", lp_unit, 1);
        Wait(0.5, c_timeGame);
        lv_i = RandomInt(0, 1);
        if ((UnitHasBehavior2(lp_unit, "DehakaGeneEvolvedCarapace") == true)) {
            UnitBehaviorAdd(lp_unit, "DehakaGeneEvolvedIncubationSacs", lp_unit, 1);

        }

        if ((UnitHasBehavior2(lp_unit, "DehakaGeneEvolvedIncubationSacs") == true)) {
            UnitBehaviorAdd(lp_unit, "DehakaGeneEvolvedCarapace", lp_unit, 1);

        }

    }

}

void lib7A9A9B22_gf_Dehaka2GenesUpdate (int lp_player, string lp_unitType, string lp_placeButton, string lp_gene0, string lp_gene1) {
    // Variable Declarations
    int lv_nextGene;
    int lv_gene0Count;
    int lv_gene1Count;

    // Automatic Variable Declarations
    unitgroup autoEDB3D2C7_g;
    int autoEDB3D2C7_u;
    unit autoEDB3D2C7_var;
    int autoA85402B8_val;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lp_gene0, 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lp_gene1, 0);
    autoEDB3D2C7_g = UnitGroupFilter(lp_unitType, lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0);
    autoEDB3D2C7_u = UnitGroupCount(autoEDB3D2C7_g, c_unitCountAll);
    for (;; autoEDB3D2C7_u -= 1) {
        autoEDB3D2C7_var = UnitGroupUnitFromEnd(autoEDB3D2C7_g, autoEDB3D2C7_u);
        if (autoEDB3D2C7_var == null) { break; }
        if ((UnitHasBehavior2(autoEDB3D2C7_var, "DehakaGeneEvolvedCarapace") == true)) {
            lv_gene0Count += 1;
        }

        if ((UnitHasBehavior2(autoEDB3D2C7_var, "DehakaGeneEvolvedIncubationSacs") == true)) {
            lv_gene1Count += 1;
        }

    }
    if (((lv_gene0Count <= lv_gene1Count))) {
        lv_nextGene = 0;
    }
    else {
        lv_nextGene = 1;
    }
    autoA85402B8_val = lv_nextGene;
    if (autoA85402B8_val == 1) {
        CatalogFieldValueSet(c_gameCatalogButton, lp_placeButton, "Tooltip", lp_player, ("Button/Tooltip/" + (lp_placeButton) + "Gene1"));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lp_gene1, 1);
    }
    else {
        CatalogFieldValueSet(c_gameCatalogButton, lp_placeButton, "Tooltip", lp_player, ("Button/Tooltip/" + (lp_placeButton)));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lp_gene0, 1);
    }
}

void lib7A9A9B22_gf_Dehaka3Genes (unit lp_unit, string lp_placeButton, string lp_gene0, string lp_gene1, string lp_gene2) {
    // Variable Declarations
    int lv_i;
    int lv_count;
    int lv_doubles;

    // Automatic Variable Declarations
    unitgroup auto18C4DCFF_g;
    int auto18C4DCFF_u;
    unit auto18C4DCFF_var;
    int auto6C25BF18_val;
    int auto82DDFEA3_val;
    int autoFD2689F6_val;

    // Variable Initialization

    // Implementation
    if ((lp_unit != null) && ((TechTreeUpgradeCount(UnitGetOwner(lp_unit), lp_gene0, c_techCountCompleteOnly) >= 1) || ((TechTreeUpgradeCount(UnitGetOwner(lp_unit), lp_gene0, c_techCountCompleteOnly) == 0) && (TechTreeUpgradeCount(UnitGetOwner(lp_unit), lp_gene1, c_techCountCompleteOnly) == 0) && (TechTreeUpgradeCount(UnitGetOwner(lp_unit), lp_gene2, c_techCountCompleteOnly) == 0)))) {
        UnitBehaviorAdd(lp_unit, "DehakaGeneEvolvedCarapace", lp_unit, 1);
    }

    if ((lp_unit != null) && (TechTreeUpgradeCount(UnitGetOwner(lp_unit), lp_gene1, c_techCountCompleteOnly) >= 1)) {
        UnitBehaviorAdd(lp_unit, "DehakaGeneEvolvedAdrenalGlands", lp_unit, 1);
    }

    if ((lp_unit != null) && (TechTreeUpgradeCount(UnitGetOwner(lp_unit), lp_gene2, c_techCountCompleteOnly) >= 1)) {
        UnitBehaviorAdd(lp_unit, "DehakaGeneEvolvedLeeching", lp_unit, 1);
    }

    lib7A9A9B22_gf_Dehaka3GenesUpdate(UnitGetOwner(lp_unit), UnitGetType(lp_unit), lp_placeButton, lp_gene0, lp_gene1, lp_gene2);
    auto18C4DCFF_g = UnitGroupFilter(UnitGetType(lp_unit), UnitGetOwner(lp_unit), lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto18C4DCFF_u = UnitGroupCount(auto18C4DCFF_g, c_unitCountAll);
    for (;; auto18C4DCFF_u -= 1) {
        auto18C4DCFF_var = UnitGroupUnitFromEnd(auto18C4DCFF_g, auto18C4DCFF_u);
        if (auto18C4DCFF_var == null) { break; }
        lv_count += 1;
        if ((UnitHasBehavior2(auto18C4DCFF_var, "DehakaGeneDouble") == true)) {
            lv_doubles += 1;
        }

    }
    lv_count = (lv_count - (lv_doubles * 8));
    if ((lv_count >= 8)) {
        UnitBehaviorAdd(lp_unit, "DehakaGeneDouble", lp_unit, 1);
        Wait(0.5, c_timeGame);
        lv_i = RandomInt(0, 1);
        if ((UnitHasBehavior2(lp_unit, "DehakaGeneEvolvedCarapace") == true)) {
            auto6C25BF18_val = lv_i;
            if (auto6C25BF18_val == 1) {
                UnitBehaviorAdd(lp_unit, "DehakaGeneEvolvedAdrenalGlands", lp_unit, 1);

            }
            else {
                UnitBehaviorAdd(lp_unit, "DehakaGeneEvolvedLeeching", lp_unit, 1);

            }
        }

        if ((UnitHasBehavior2(lp_unit, "DehakaGeneEvolvedAdrenalGlands") == true)) {
            auto82DDFEA3_val = lv_i;
            if (auto82DDFEA3_val == 1) {
                UnitBehaviorAdd(lp_unit, "DehakaGeneEvolvedCarapace", lp_unit, 1);

            }
            else {
                UnitBehaviorAdd(lp_unit, "DehakaGeneEvolvedLeeching", lp_unit, 1);

            }
        }

        if ((UnitHasBehavior2(lp_unit, "DehakaGeneEvolvedLeeching") == true)) {
            autoFD2689F6_val = lv_i;
            if (autoFD2689F6_val == 1) {
                UnitBehaviorAdd(lp_unit, "DehakaGeneEvolvedAdrenalGlands", lp_unit, 1);

            }
            else {
                UnitBehaviorAdd(lp_unit, "DehakaGeneEvolvedCarapace", lp_unit, 1);

            }
        }

    }

}

void lib7A9A9B22_gf_Dehaka3GenesUpdate (int lp_player, string lp_unitType, string lp_placeButton, string lp_gene0, string lp_gene1, string lp_gene2) {
    // Variable Declarations
    int lv_nextGene;
    int lv_gene0Count;
    int lv_gene1Count;
    int lv_gene2Count;

    // Automatic Variable Declarations
    unitgroup auto892D06C2_g;
    int auto892D06C2_u;
    unit auto892D06C2_var;
    int auto322D3E4A_val;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lp_gene0, 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lp_gene1, 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lp_gene2, 0);
    auto892D06C2_g = UnitGroupFilter(lp_unitType, lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0);
    auto892D06C2_u = UnitGroupCount(auto892D06C2_g, c_unitCountAll);
    for (;; auto892D06C2_u -= 1) {
        auto892D06C2_var = UnitGroupUnitFromEnd(auto892D06C2_g, auto892D06C2_u);
        if (auto892D06C2_var == null) { break; }
        if ((UnitHasBehavior2(auto892D06C2_var, "DehakaGeneEvolvedCarapace") == true)) {
            lv_gene0Count += 1;
        }

        if ((UnitHasBehavior2(auto892D06C2_var, "DehakaGeneEvolvedAdrenalGlands") == true)) {
            lv_gene1Count += 1;
        }

        if ((UnitHasBehavior2(auto892D06C2_var, "DehakaGeneEvolvedLeeching") == true)) {
            lv_gene2Count += 1;
        }

    }
    if (((lv_gene0Count <= lv_gene1Count) && (lv_gene0Count <= lv_gene2Count))) {
        lv_nextGene = 0;
    }
    else {
        if ((lv_gene1Count <= lv_gene2Count)) {
            lv_nextGene = 1;
        }
        else {
            lv_nextGene = 2;
        }
    }
    auto322D3E4A_val = lv_nextGene;
    if (auto322D3E4A_val == 1) {
        CatalogFieldValueSet(c_gameCatalogButton, lp_placeButton, "Tooltip", lp_player, ("Button/Tooltip/" + (lp_placeButton) + "Gene1"));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lp_gene1, 1);
    }
    else if (auto322D3E4A_val == 2) {
        CatalogFieldValueSet(c_gameCatalogButton, lp_placeButton, "Tooltip", lp_player, ("Button/Tooltip/" + (lp_placeButton) + "Gene2"));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lp_gene2, 1);
    }
    else {
        CatalogFieldValueSet(c_gameCatalogButton, lp_placeButton, "Tooltip", lp_player, ("Button/Tooltip/" + (lp_placeButton)));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lp_gene0, 1);
    }
}

void lib7A9A9B22_gf_Dehaka4Genes (unit lp_unit, string lp_placeButton, string lp_gene0, string lp_gene1, string lp_gene2, string lp_gene3) {
    // Variable Declarations
    int lv_i;
    int lv_count;
    int lv_doubles;

    // Automatic Variable Declarations
    unitgroup autoCFD81A4A_g;
    int autoCFD81A4A_u;
    unit autoCFD81A4A_var;
    int auto89256595_val;
    int auto12E32EE1_val;
    int auto260D7C35_val;

    // Variable Initialization

    // Implementation
    if ((lp_unit != null) && ((TechTreeUpgradeCount(UnitGetOwner(lp_unit), lp_gene0, c_techCountCompleteOnly) >= 1) || ((TechTreeUpgradeCount(UnitGetOwner(lp_unit), lp_gene0, c_techCountCompleteOnly) == 0) && (TechTreeUpgradeCount(UnitGetOwner(lp_unit), lp_gene1, c_techCountCompleteOnly) == 0) && (TechTreeUpgradeCount(UnitGetOwner(lp_unit), lp_gene2, c_techCountCompleteOnly) == 0) && (TechTreeUpgradeCount(UnitGetOwner(lp_unit), lp_gene3, c_techCountCompleteOnly) == 0)))) {
        UnitBehaviorAdd(lp_unit, "DehakaGeneEvolvedCarapace", lp_unit, 1);
    }

    if ((lp_unit != null) && (TechTreeUpgradeCount(UnitGetOwner(lp_unit), lp_gene1, c_techCountCompleteOnly) >= 1)) {
        UnitBehaviorAdd(lp_unit, "DehakaGeneEvolvedAdrenalGlands", lp_unit, 1);
    }

    if ((lp_unit != null) && (TechTreeUpgradeCount(UnitGetOwner(lp_unit), lp_gene2, c_techCountCompleteOnly) >= 1)) {
        UnitBehaviorAdd(lp_unit, "DehakaGeneEvolvedLeeching", lp_unit, 1);
    }

    if ((lp_unit != null) && (TechTreeUpgradeCount(UnitGetOwner(lp_unit), lp_gene3, c_techCountCompleteOnly) >= 1)) {
        UnitBehaviorAdd(lp_unit, "DehakaGeneSpikedHide", lp_unit, 1);
    }

    lib7A9A9B22_gf_Dehaka4GenesUpdate(UnitGetOwner(lp_unit), UnitGetType(lp_unit), lp_placeButton, lp_gene0, lp_gene1, lp_gene2, lp_gene3);
    autoCFD81A4A_g = UnitGroupFilter(UnitGetType(lp_unit), UnitGetOwner(lp_unit), lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCFD81A4A_u = UnitGroupCount(autoCFD81A4A_g, c_unitCountAll);
    for (;; autoCFD81A4A_u -= 1) {
        autoCFD81A4A_var = UnitGroupUnitFromEnd(autoCFD81A4A_g, autoCFD81A4A_u);
        if (autoCFD81A4A_var == null) { break; }
        lv_count += 1;
        if ((UnitHasBehavior2(autoCFD81A4A_var, "DehakaGeneDouble") == true)) {
            lv_doubles += 1;
        }

    }
    lv_count = (lv_count - (lv_doubles * 8));
    if ((lv_count >= 8)) {
        UnitBehaviorAdd(lp_unit, "DehakaGeneDouble", lp_unit, 1);
        Wait(0.5, c_timeGame);
        lv_i = RandomInt(0, 1);
        if ((UnitHasBehavior2(lp_unit, "DehakaGeneEvolvedCarapace") == true)) {
            auto89256595_val = lv_i;
            if (auto89256595_val == 1) {
                UnitBehaviorAdd(lp_unit, "DehakaGeneEvolvedAdrenalGlands", lp_unit, 1);

            }
            else {
                UnitBehaviorAdd(lp_unit, "DehakaGeneEvolvedLeeching", lp_unit, 1);

            }
        }

        if ((UnitHasBehavior2(lp_unit, "DehakaGeneEvolvedAdrenalGlands") == true)) {
            auto12E32EE1_val = lv_i;
            if (auto12E32EE1_val == 1) {
                UnitBehaviorAdd(lp_unit, "DehakaGeneEvolvedCarapace", lp_unit, 1);

            }
            else {
                UnitBehaviorAdd(lp_unit, "DehakaGeneEvolvedLeeching", lp_unit, 1);

            }
        }

        if ((UnitHasBehavior2(lp_unit, "DehakaGeneEvolvedLeeching") == true)) {
            auto260D7C35_val = lv_i;
            if (auto260D7C35_val == 1) {
                UnitBehaviorAdd(lp_unit, "DehakaGeneEvolvedAdrenalGlands", lp_unit, 1);

            }
            else {
                UnitBehaviorAdd(lp_unit, "DehakaGeneEvolvedCarapace", lp_unit, 1);

            }
        }

    }

}

void lib7A9A9B22_gf_Dehaka4GenesUpdate (int lp_player, string lp_unitType, string lp_placeButton, string lp_gene0, string lp_gene1, string lp_gene2, string lp_gene3) {
    // Variable Declarations
    int lv_nextGene;
    int lv_gene0Count;
    int lv_gene1Count;
    int lv_gene2Count;
    int lv_gene3Count;

    // Automatic Variable Declarations
    unitgroup auto2A243AE7_g;
    int auto2A243AE7_u;
    unit auto2A243AE7_var;
    int auto5A7C5471_val;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lp_gene0, 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lp_gene1, 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lp_gene2, 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lp_gene3, 0);
    auto2A243AE7_g = UnitGroupFilter(lp_unitType, lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0);
    auto2A243AE7_u = UnitGroupCount(auto2A243AE7_g, c_unitCountAll);
    for (;; auto2A243AE7_u -= 1) {
        auto2A243AE7_var = UnitGroupUnitFromEnd(auto2A243AE7_g, auto2A243AE7_u);
        if (auto2A243AE7_var == null) { break; }
        if ((UnitHasBehavior2(auto2A243AE7_var, "DehakaGeneEvolvedCarapace") == true)) {
            lv_gene0Count += 1;
        }

        if ((UnitHasBehavior2(auto2A243AE7_var, "DehakaGeneEvolvedAdrenalGlands") == true)) {
            lv_gene1Count += 1;
        }

        if ((UnitHasBehavior2(auto2A243AE7_var, "DehakaGeneEvolvedLeeching") == true)) {
            lv_gene2Count += 1;
        }

        if ((UnitHasBehavior2(auto2A243AE7_var, "DehakaGeneSpikedHide") == true)) {
            lv_gene3Count += 1;
        }

    }
    if (((lv_gene0Count <= lv_gene1Count) && (lv_gene0Count <= lv_gene2Count) && (lv_gene0Count <= lv_gene3Count))) {
        lv_nextGene = 0;
    }
    else {
        if ((lv_gene1Count <= lv_gene2Count) && (lv_gene1Count <= lv_gene3Count)) {
            lv_nextGene = 1;
        }
        else {
            if ((lv_gene2Count <= lv_gene3Count)) {
                lv_nextGene = 2;
            }
            else {
                lv_nextGene = 3;
            }
        }
    }
    auto5A7C5471_val = lv_nextGene;
    if (auto5A7C5471_val == 1) {
        CatalogFieldValueSet(c_gameCatalogButton, lp_placeButton, "Tooltip", lp_player, ("Button/Tooltip/" + (lp_placeButton) + "Gene1"));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lp_gene1, 1);
    }
    else if (auto5A7C5471_val == 2) {
        CatalogFieldValueSet(c_gameCatalogButton, lp_placeButton, "Tooltip", lp_player, ("Button/Tooltip/" + (lp_placeButton) + "Gene2"));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lp_gene2, 1);
    }
    else if (auto5A7C5471_val == 3) {
        CatalogFieldValueSet(c_gameCatalogButton, lp_placeButton, "Tooltip", lp_player, ("Button/Tooltip/" + (lp_placeButton) + "Gene3"));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lp_gene3, 1);
    }
    else {
        CatalogFieldValueSet(c_gameCatalogButton, lp_placeButton, "Tooltip", lp_player, ("Button/Tooltip/" + (lp_placeButton)));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lp_gene0, 1);
    }
}

unitgroup lib7A9A9B22_gf_StagingAreas () {
    // Automatic Variable Declarations
    // Implementation
    return lib7A9A9B22_gv_stagingArea;
}

unitgroup lib7A9A9B22_gf_StagingAreaSpawns () {
    // Automatic Variable Declarations
    // Implementation
    return lib7A9A9B22_gv_stagingAreaSpawns;
}

unitgroup lib7A9A9B22_gf_StagingAreaSpawnsSpecific (unit lp_stagingArea) {
    // Automatic Variable Declarations
    // Implementation
    return lib7A9A9B22_gv_stagingAreaSpawnsByIndex[FixedToInt(UnitGetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueStagingAreaIndex))];
}

unitgroup lib7A9A9B22_gf_StagingAreaSpawners () {
    // Automatic Variable Declarations
    // Implementation
    return lib7A9A9B22_gv_stagingAreaSpawners;
}

playergroup lib7A9A9B22_gf_StagingAreaTeam (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    return lib7A9A9B22_gv_stagingAreaTeamInternal[lp_team];
}

unitgroup lib7A9A9B22_gf_StagingAreaTeamSpawns (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    return lib7A9A9B22_gv_stagingAreaTeamSpawns[lp_team];
}

unitgroup lib7A9A9B22_gf_StagingAreaMineralFields (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupFilter(null, lp_player, lib7A9A9B22_gv_mineralFields, UnitFilter(0, 0, 0, 0), 0);
}

unitgroup lib7A9A9B22_gf_StagingAreaMineralMines () {
    // Automatic Variable Declarations
    // Implementation
    return lib7A9A9B22_gv_mineralMines;
}

unitgroup lib7A9A9B22_gf_StagingAreaHeroSelect () {
    // Automatic Variable Declarations
    // Implementation
    return lib7A9A9B22_gv_stagingAreaHeroSelect;
}

string lib7A9A9B22_gf_PlayerAttackWaveData (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return lib7A9A9B22_gv_attackWaveData[lp_player];
}

string lib7A9A9B22_gf_PlayerAttackWaveDataSupport (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return lib7A9A9B22_gv_attackWaveDataSupport[lp_player];
}

int lib7A9A9B22_gf_PlayerAttackWaveOffset (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return lib7A9A9B22_gv_attackWaveOffset[lp_player];
}

void lib7A9A9B22_gf_SetPlacementFacing (int lp_player, fixed lp_facing) {
    // Automatic Variable Declarations
    fixed autoAF35DFDB_val;

    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "PlacementFacingNE", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "PlacementFacingNW", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "PlacementFacingSE", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "PlacementFacingSW", 0);
    autoAF35DFDB_val = lp_facing;
    if (autoAF35DFDB_val == 45.0) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "PlacementFacingNE", 1);
    }
    else if (autoAF35DFDB_val == 135.0) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "PlacementFacingNW", 1);
    }
    else if (autoAF35DFDB_val == 315.0) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "PlacementFacingSE", 1);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "PlacementFacingSW", 1);
    }
}

void lib7A9A9B22_gf_AttackWavePreload (string lp_userData, int lp_userDataIndex) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto5A763508_ae;
    const int auto5A763508_ai = 1;

    // Variable Initialization

    // Implementation
    Wait(0.0, c_timeGame);
    auto5A763508_ae = UserDataFieldValueCount(lp_userData, UserDataField(lp_userData, 1));
    lv_i = 1;
    for ( ; ( (auto5A763508_ai >= 0 && lv_i <= auto5A763508_ae) || (auto5A763508_ai < 0 && lv_i >= auto5A763508_ae) ) ; lv_i += auto5A763508_ai ) {
        Wait(0.0, c_timeGame);
        if ((UserDataGetUnit(lp_userData, UserDataInstance(lp_userData, lp_userDataIndex), UserDataField(lp_userData, 1), lv_i) != null)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, UserDataGetUnit(lp_userData, UserDataInstance(lp_userData, lp_userDataIndex), UserDataField(lp_userData, 1), lv_i), c_unitCreateIgnorePlacement, 0, Point(1.0, 1.0));
            UnitKill(UnitLastCreated());
        }

    }
}

void lib7A9A9B22_gf_AttackWavePrepareManualWaypoints (int lp_player, fixed lp_facing, unit lp_stagingArea, string lp_userData, int lp_userDataIndex, int lp_value, point lp_waypointSpawn, point lp_waypoint1, point lp_waypoint2, point lp_waypoint3, point lp_waypoint4, point lp_waypoint5, point lp_waypoint6, point lp_waypoint7, point lp_waypoint8, point lp_waypoint9) {
    // Variable Declarations
    int lv_waypointCount;

    // Automatic Variable Declarations
    unitgroup autoF78BAECF_g;
    int autoF78BAECF_u;
    unit autoF78BAECF_var;

    // Variable Initialization

    // Implementation
    if ((GameIsTestMap(false) == true) && (lp_value == 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText(("<c val=\"FF0000\">" + "Attack Wave value is 0")));
    }

    if ((GameIsTestMap(false) == true) && (((lp_player >= 1) && (lp_player <= 14)) == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText(("<c val=\"FF0000\">" + "Attack Wave player returned player " + IntToString(lp_player))));
    }

    if ((GameIsTestMap(false) == true) && (lp_userDataIndex < 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText(("<c val=\"FF0000\">" + "Attack Wave user data index is below 1")));
    }

    lib7A9A9B22_gf_AttackWaveCreateParent(lp_player, lp_facing, "AttackWaveSetPrepare", lp_userData, lp_userDataIndex, lp_value, lp_waypointSpawn);
    lib7A9A9B22_gv__1x1MaxCountPerRow = 18;
    lib7A9A9B22_gv__2x2MaxCountPerRow = 9;
    if ((lp_waypoint1 != null) && (PointGetX(lp_waypoint1) > 1.0) && (PointGetY(lp_waypoint1) > 1.0)) {
        lv_waypointCount = 0;
        if ((lp_waypoint2 != null) && (PointGetX(lp_waypoint2) > 1.0) && (PointGetY(lp_waypoint2) > 1.0)) {
            lv_waypointCount = 1;
            if ((lp_waypoint3 != null) && (PointGetX(lp_waypoint3) > 1.0) && (PointGetY(lp_waypoint3) > 1.0)) {
                lv_waypointCount = 2;
                if ((lp_waypoint4 != null) && (PointGetX(lp_waypoint4) > 1.0) && (PointGetY(lp_waypoint4) > 1.0)) {
                    lv_waypointCount = 3;
                    if ((lp_waypoint5 != null) && (PointGetX(lp_waypoint5) > 1.0) && (PointGetY(lp_waypoint5) > 1.0)) {
                        lv_waypointCount = 4;
                        if ((lp_waypoint6 != null) && (PointGetX(lp_waypoint6) > 1.0) && (PointGetY(lp_waypoint6) > 1.0)) {
                            lv_waypointCount = 5;
                            if ((lp_waypoint7 != null) && (PointGetX(lp_waypoint7) > 1.0) && (PointGetY(lp_waypoint7) > 1.0)) {
                                lv_waypointCount = 6;
                                if ((lp_waypoint8 != null) && (PointGetX(lp_waypoint8) > 1.0) && (PointGetY(lp_waypoint8) > 1.0)) {
                                    lv_waypointCount = 7;
                                    if ((lp_waypoint9 != null) && (PointGetX(lp_waypoint9) > 1.0) && (PointGetY(lp_waypoint9) > 1.0)) {
                                        lv_waypointCount = 8;
                                    }

                                }

                            }

                        }

                    }

                }

            }

        }

    }

    autoF78BAECF_g = lib7A9A9B22_gv_attackWaveGroup;
    autoF78BAECF_u = UnitGroupCount(autoF78BAECF_g, c_unitCountAll);
    for (;; autoF78BAECF_u -= 1) {
        autoF78BAECF_var = UnitGroupUnitFromEnd(autoF78BAECF_g, autoF78BAECF_u);
        if (autoF78BAECF_var == null) { break; }
        lib7A9A9B22_gf_WaypointApply(autoF78BAECF_var, (PointGetX(UnitGetPosition(autoF78BAECF_var)) - PointGetX(lp_waypointSpawn)), (PointGetY(UnitGetPosition(autoF78BAECF_var)) - PointGetY(lp_waypointSpawn)), lv_waypointCount, lp_waypoint1, lp_waypoint2, lp_waypoint3, lp_waypoint4, lp_waypoint5, lp_waypoint6, lp_waypoint7, lp_waypoint8, lp_waypoint9);
    }
    if ((lp_stagingArea != null)) {
        UnitGroupAddUnitGroup(lib7A9A9B22_gv_stagingAreaSpawnsByIndex[FixedToInt(UnitGetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueStagingAreaIndex))], lib7A9A9B22_gv_attackWaveGroup);
    }

    UnitGroupClear(lib7A9A9B22_gv_attackWaveGroup);
}

void lib7A9A9B22_gf_AttackWavePrepare (int lp_player, fixed lp_facing, unit lp_stagingArea, string lp_userData, int lp_userDataIndex, int lp_value) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib7A9A9B22_gf_AttackWavePrepareManualWaypoints(lp_player, lp_facing, lp_stagingArea, lp_userData, lp_userDataIndex, lp_value, Point(UnitGetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypointSpawnX), UnitGetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypointSpawnY)), Point(UnitGetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint1X), UnitGetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint1Y)), Point(UnitGetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint2X), UnitGetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint2Y)), Point(UnitGetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint3X), UnitGetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint3Y)), Point(UnitGetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint4X), UnitGetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint4Y)), Point(UnitGetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint5X), UnitGetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint5Y)), Point(UnitGetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint6X), UnitGetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint6Y)), Point(UnitGetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint7X), UnitGetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint7Y)), Point(UnitGetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint8X), UnitGetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint8Y)), Point(UnitGetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint9X), UnitGetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint9Y)));
}

void lib7A9A9B22_gf_AttackWaveSend (string lp_timedLife) {
    // Automatic Variable Declarations
    unitgroup autoF0EFBD36_g;
    int autoF0EFBD36_u;
    unit autoF0EFBD36_var;

    // Implementation
    autoF0EFBD36_g = lib7A9A9B22_gv_attackWaveReady;
    autoF0EFBD36_u = UnitGroupCount(autoF0EFBD36_g, c_unitCountAll);
    for (;; autoF0EFBD36_u -= 1) {
        autoF0EFBD36_var = UnitGroupUnitFromEnd(autoF0EFBD36_g, autoF0EFBD36_u);
        if (autoF0EFBD36_var == null) { break; }
        UnitCreateEffectUnit(autoF0EFBD36_var, "AttackWaveSetSend", autoF0EFBD36_var);
        UnitBehaviorAdd(autoF0EFBD36_var, "SpeedLimitPrecursor", autoF0EFBD36_var, 1);
        UnitBehaviorAdd(autoF0EFBD36_var, lp_timedLife, autoF0EFBD36_var, 1);
        lib7A9A9B22_gf_WaypointRefreshOrder(autoF0EFBD36_var);
    }
    UnitGroupClear(lib7A9A9B22_gv_attackWaveReady);
}

void lib7A9A9B22_gf_AttackWaveCreateParent (int lp_player, fixed lp_facing, string lp_birthEffect, string lp_userData, int lp_userDataIndex, int lp_value, point lp_originPoint) {
    // Variable Declarations
    int lv_min;
    int lv_max;
    int lv_i;
    int lv_x;
    int[10] lv_attackWaveUnitCount;
    int lv_internalValue;
    int lv_numberofUnitTypes;
    fixed[10] lv_attackWaveFraction;
    fixed lv_attackWaveFractionTotal;
    fixed lv_attackWaveFractionFinal;
    fixed lv_attackWaveFractionMultiplier;
    int lv_startValue;
    int lv_endValue;
    int lv_incrementValue;
    bool lv_invertOrder;

    // Automatic Variable Declarations
    int auto79280C93_ae;
    int auto79280C93_ai;
    int auto6C5AF95B_ae;
    int auto6C5AF95B_ai;
    int auto5CDE5C44_ae;
    int auto5CDE5C44_ai;
    int auto03BF8CEF_ae;
    int auto03BF8CEF_ai;
    int auto4DDFC40D_ae;
    int auto4DDFC40D_ai;
    int auto46FDABCF_n;
    int auto46FDABCF_i;
    int auto85542E7A_ae;
    int auto85542E7A_ai;
    int auto5C138DAD_n;
    int auto5C138DAD_i;
    int auto6AF8A8F3_ae;
    int auto6AF8A8F3_ai;
    int auto7F84EC13_ae;
    int auto7F84EC13_ai;
    int autoED8E0306_ae;
    int autoED8E0306_ai;

    // Variable Initialization
    lv_min = 1;
    lv_max = 999;
    lv_startValue = 1;
    lv_endValue = UserDataFieldValueCount(lp_userData, UserDataField(lp_userData, lib7A9A9B22_gv_userDataPhaseUnits));
    lv_incrementValue = 1;

    // Implementation
    lv_internalValue = libNtve_gf_ArithmeticIntClamp(lp_value, 1, 100000);
    if ((lv_invertOrder == true)) {
        lv_startValue = UserDataFieldValueCount(lp_userData, UserDataField(lp_userData, lib7A9A9B22_gv_userDataPhaseUnits));
        lv_endValue = 1;
        lv_incrementValue = -1;
    }

    auto79280C93_ae = lv_endValue;
    auto79280C93_ai = lv_incrementValue;
    lv_i = lv_startValue;
    for ( ; ( (auto79280C93_ai >= 0 && lv_i <= auto79280C93_ae) || (auto79280C93_ai < 0 && lv_i >= auto79280C93_ae) ) ; lv_i += auto79280C93_ai ) {
        if ((UserDataGetUnit(lp_userData, UserDataInstance(lp_userData, lp_userDataIndex), UserDataField(lp_userData, lib7A9A9B22_gv_userDataPhaseUnits), lv_i) != null)) {
            lv_numberofUnitTypes += 1;
        }

    }
    auto6C5AF95B_ae = lv_endValue;
    auto6C5AF95B_ai = lv_incrementValue;
    lv_i = lv_startValue;
    for ( ; ( (auto6C5AF95B_ai >= 0 && lv_i <= auto6C5AF95B_ae) || (auto6C5AF95B_ai < 0 && lv_i >= auto6C5AF95B_ae) ) ; lv_i += auto6C5AF95B_ai ) {
        if ((UserDataGetUnit(lp_userData, UserDataInstance(lp_userData, lp_userDataIndex), UserDataField(lp_userData, lib7A9A9B22_gv_userDataPhaseUnits), lv_i) != null) && (UserDataGetFixed(lp_userData, UserDataInstance(lp_userData, lp_userDataIndex), UserDataField(lp_userData, lib7A9A9B22_gv_userDataPercentOfWaveBase), lv_i) != 0.0)) {
            if ((UserDataGetFixed(lp_userData, UserDataInstance(lp_userData, lp_userDataIndex), UserDataField(lp_userData, lib7A9A9B22_gv_userDataPercentOfWaveRandom), lv_i) != 0.0)) {
                lv_attackWaveFraction[lv_i] = libNtve_gf_ArithmeticRealClamp((UserDataGetFixed(lp_userData, UserDataInstance(lp_userData, lp_userDataIndex), UserDataField(lp_userData, lib7A9A9B22_gv_userDataPercentOfWaveBase), lv_i) * RandomFixed((0.0 - UserDataGetFixed(lp_userData, UserDataInstance(lp_userData, lp_userDataIndex), UserDataField(lp_userData, lib7A9A9B22_gv_userDataPercentOfWaveRandom), lv_i)), UserDataGetFixed(lp_userData, UserDataInstance(lp_userData, lp_userDataIndex), UserDataField(lp_userData, lib7A9A9B22_gv_userDataPercentOfWaveRandom), lv_i))), 0.05, 1.0);
            }
            else {
                lv_attackWaveFraction[lv_i] = UserDataGetFixed(lp_userData, UserDataInstance(lp_userData, lp_userDataIndex), UserDataField(lp_userData, lib7A9A9B22_gv_userDataPercentOfWaveBase), lv_i);
            }
        }
        else {
            if ((UserDataGetFixed(lp_userData, UserDataInstance(lp_userData, lp_userDataIndex), UserDataField(lp_userData, lib7A9A9B22_gv_userDataPercentOfWaveRandom), lv_i) != 0.0)) {
                lv_attackWaveFraction[lv_i] = libNtve_gf_ArithmeticRealClamp(((1.0 / IntToFixed(libNtve_gf_ArithmeticIntClamp(lv_numberofUnitTypes, 1, 100))) * RandomFixed((0.0 - UserDataGetFixed(lp_userData, UserDataInstance(lp_userData, lp_userDataIndex), UserDataField(lp_userData, lib7A9A9B22_gv_userDataPercentOfWaveRandom), lv_i)), UserDataGetFixed(lp_userData, UserDataInstance(lp_userData, lp_userDataIndex), UserDataField(lp_userData, lib7A9A9B22_gv_userDataPercentOfWaveRandom), lv_i))), 0.05, 1.0);
            }
            else {
                lv_attackWaveFraction[lv_i] = (1.0 / IntToFixed(libNtve_gf_ArithmeticIntClamp(lv_numberofUnitTypes, 1, 100)));
            }
        }
    }
    auto5CDE5C44_ae = lv_endValue;
    auto5CDE5C44_ai = lv_incrementValue;
    lv_i = lv_startValue;
    for ( ; ( (auto5CDE5C44_ai >= 0 && lv_i <= auto5CDE5C44_ae) || (auto5CDE5C44_ai < 0 && lv_i >= auto5CDE5C44_ae) ) ; lv_i += auto5CDE5C44_ai ) {
        if ((UserDataGetUnit(lp_userData, UserDataInstance(lp_userData, lp_userDataIndex), UserDataField(lp_userData, lib7A9A9B22_gv_userDataPhaseUnits), lv_i) != null)) {
            lv_attackWaveFractionTotal += lv_attackWaveFraction[lv_i];
        }

    }
    lv_attackWaveFractionMultiplier = (1.0 / libNtve_gf_ArithmeticRealClamp(lv_attackWaveFractionTotal, 0.1, 100.0));
    auto03BF8CEF_ae = lv_endValue;
    auto03BF8CEF_ai = lv_incrementValue;
    lv_i = lv_startValue;
    for ( ; ( (auto03BF8CEF_ai >= 0 && lv_i <= auto03BF8CEF_ae) || (auto03BF8CEF_ai < 0 && lv_i >= auto03BF8CEF_ae) ) ; lv_i += auto03BF8CEF_ai ) {
        if ((UserDataGetUnit(lp_userData, UserDataInstance(lp_userData, lp_userDataIndex), UserDataField(lp_userData, lib7A9A9B22_gv_userDataPhaseUnits), lv_i) != null)) {
            lv_attackWaveFraction[lv_i] *= lv_attackWaveFractionMultiplier;
            lv_attackWaveFractionFinal += lv_attackWaveFraction[lv_i];
        }

    }
    auto4DDFC40D_ae = lv_endValue;
    auto4DDFC40D_ai = lv_incrementValue;
    lv_i = lv_startValue;
    for ( ; ( (auto4DDFC40D_ai >= 0 && lv_i <= auto4DDFC40D_ae) || (auto4DDFC40D_ai < 0 && lv_i >= auto4DDFC40D_ae) ) ; lv_i += auto4DDFC40D_ai ) {
        if ((UserDataGetUnit(lp_userData, UserDataInstance(lp_userData, lp_userDataIndex), UserDataField(lp_userData, lib7A9A9B22_gv_userDataPhaseUnits), lv_i) != null)) {
            auto46FDABCF_n = lv_min;
            for (auto46FDABCF_i = 1; auto46FDABCF_i <= auto46FDABCF_n; auto46FDABCF_i += 1) {
                lv_attackWaveUnitCount[lv_i] += 1;
                lv_internalValue -= FixedToInt(IntToFixed(UnitTypeGetCost(UserDataGetUnit(lp_userData, UserDataInstance(lp_userData, lp_userDataIndex), UserDataField(lp_userData, lib7A9A9B22_gv_userDataPhaseUnits), lv_i), c_unitCostSumMineralsVespene)));
            }
        }

    }
    auto85542E7A_ae = lv_endValue;
    auto85542E7A_ai = lv_incrementValue;
    lv_i = lv_startValue;
    for ( ; ( (auto85542E7A_ai >= 0 && lv_i <= auto85542E7A_ae) || (auto85542E7A_ai < 0 && lv_i >= auto85542E7A_ae) ) ; lv_i += auto85542E7A_ai ) {
        if ((UserDataGetUnit(lp_userData, UserDataInstance(lp_userData, lp_userDataIndex), UserDataField(lp_userData, lib7A9A9B22_gv_userDataPhaseUnits), lv_i) != null)) {
            auto5C138DAD_n = libNtve_gf_ArithmeticIntClamp(FixedToInt(((IntToFixed(lp_value) * lv_attackWaveFraction[lv_i]) / IntToFixed(libNtve_gf_ArithmeticIntClamp(UnitTypeGetCost(UserDataGetUnit(lp_userData, UserDataInstance(lp_userData, lp_userDataIndex), UserDataField(lp_userData, 1), lv_i), c_unitCostSumMineralsVespene), 1, 10000)))), lv_min, lv_max);
            for (auto5C138DAD_i = 1; auto5C138DAD_i <= auto5C138DAD_n; auto5C138DAD_i += 1) {
                if ((lv_internalValue >= FixedToInt(IntToFixed(UnitTypeGetCost(UserDataGetUnit(lp_userData, UserDataInstance(lp_userData, lp_userDataIndex), UserDataField(lp_userData, lib7A9A9B22_gv_userDataPhaseUnits), lv_i), c_unitCostSumMineralsVespene))))) {
                    lv_attackWaveUnitCount[lv_i] += 1;
                    lv_internalValue -= FixedToInt(IntToFixed(UnitTypeGetCost(UserDataGetUnit(lp_userData, UserDataInstance(lp_userData, lp_userDataIndex), UserDataField(lp_userData, lib7A9A9B22_gv_userDataPhaseUnits), lv_i), c_unitCostSumMineralsVespene)));
                }

            }
        }

    }
    auto6AF8A8F3_ae = lv_endValue;
    auto6AF8A8F3_ai = lv_incrementValue;
    lv_i = lv_startValue;
    for ( ; ( (auto6AF8A8F3_ai >= 0 && lv_i <= auto6AF8A8F3_ae) || (auto6AF8A8F3_ai < 0 && lv_i >= auto6AF8A8F3_ae) ) ; lv_i += auto6AF8A8F3_ai ) {
        while ((UserDataGetUnit(lp_userData, UserDataInstance(lp_userData, lp_userDataIndex), UserDataField(lp_userData, lib7A9A9B22_gv_userDataPhaseUnits), lv_i) != null) && (lv_attackWaveUnitCount[lv_i] < lv_max) && (lv_internalValue >= FixedToInt(IntToFixed(UnitTypeGetCost(UserDataGetUnit(lp_userData, UserDataInstance(lp_userData, lp_userDataIndex), UserDataField(lp_userData, lib7A9A9B22_gv_userDataPhaseUnits), lv_i), c_unitCostSumMineralsVespene))))) {
            lv_attackWaveUnitCount[lv_i] += 1;
            lv_internalValue -= FixedToInt(IntToFixed(UnitTypeGetCost(UserDataGetUnit(lp_userData, UserDataInstance(lp_userData, lp_userDataIndex), UserDataField(lp_userData, lib7A9A9B22_gv_userDataPhaseUnits), lv_i), c_unitCostSumMineralsVespene)));
        }
    }
    lib7A9A9B22_gv_attackWaveRow = 0.0;
    auto7F84EC13_ae = lv_endValue;
    auto7F84EC13_ai = lv_incrementValue;
    lv_i = lv_startValue;
    for ( ; ( (auto7F84EC13_ai >= 0 && lv_i <= auto7F84EC13_ae) || (auto7F84EC13_ai < 0 && lv_i >= auto7F84EC13_ae) ) ; lv_i += auto7F84EC13_ai ) {
        if ((UserDataGetUnit(lp_userData, UserDataInstance(lp_userData, lp_userDataIndex), UserDataField(lp_userData, lib7A9A9B22_gv_userDataPhaseUnits), lv_i) != null)) {
            if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UserDataGetUnit(lp_userData, UserDataInstance(lp_userData, lp_userDataIndex), UserDataField(lp_userData, lib7A9A9B22_gv_userDataPhaseUnits), lv_i), "Radius", lp_player) < 0.75)) {
                lv_x = lv_attackWaveUnitCount[lv_i];
                while ((lv_x > 0)) {
                    lib7A9A9B22_gv_attackWaveRow += 1.0;
                    lv_x -= lib7A9A9B22_gv__1x1MaxCountPerRow;
                }
            }
            else {
                lv_x = lv_attackWaveUnitCount[lv_i];
                while ((lv_x > 0)) {
                    lib7A9A9B22_gv_attackWaveRow += 2.0;
                    lv_x -= lib7A9A9B22_gv__2x2MaxCountPerRow;
                }
            }
        }

    }
    autoED8E0306_ae = lv_endValue;
    autoED8E0306_ai = lv_incrementValue;
    lv_i = lv_startValue;
    for ( ; ( (autoED8E0306_ai >= 0 && lv_i <= autoED8E0306_ae) || (autoED8E0306_ai < 0 && lv_i >= autoED8E0306_ae) ) ; lv_i += autoED8E0306_ai ) {
        lib7A9A9B22_gf_AttackWaveCreateSwitch(lp_player, lv_attackWaveUnitCount[lv_i], lp_facing, UserDataGetUnit(lp_userData, UserDataInstance(lp_userData, lp_userDataIndex), UserDataField(lp_userData, lib7A9A9B22_gv_userDataPhaseUnits), lv_i), lp_birthEffect, lp_originPoint);
    }
}

void lib7A9A9B22_gf_AttackWaveCreateSwitch (int lp_player, int lp_count, fixed lp_facing, string lp_unitType, string lp_birthEffect, point lp_originPoint) {
    // Automatic Variable Declarations
    // Implementation
    lib7A9A9B22_gf_WaypointOrderControl(false);
    if ((lp_unitType != null)) {
        if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, lp_unitType, "Radius", lp_player) >= 0.625)) {
            lib7A9A9B22_gf_AttackWaveCreate2x2(lp_player, lp_count, lp_facing, lp_unitType, lp_birthEffect, lp_originPoint);
        }
        else {
            lib7A9A9B22_gf_AttackWaveCreate1x1(lp_player, lp_count, lp_facing, lp_unitType, lp_birthEffect, lp_originPoint);
        }
    }

    lib7A9A9B22_gf_WaypointOrderControl(true);
    Wait(0.0625, c_timeGame);
}

void lib7A9A9B22_gf_AttackWaveCreate1x1 (int lp_player, int lp_count, fixed lp_facing, string lp_unitType, string lp_birthEffect, point lp_originPoint) {
    // Variable Declarations
    bool lv_switch;
    fixed lv_positive;
    fixed lv_negative;
    int lv_x;

    // Automatic Variable Declarations
    int autoAC96D6B3_n;
    int autoAC96D6B3_i;

    // Variable Initialization
    lv_positive = 1.0;
    lv_negative = -1.0;

    // Implementation
    lv_x = lp_count;
    while ((lv_x > 0)) {
        if ((ModI(libNtve_gf_ArithmeticIntClamp(lv_x, 0, lib7A9A9B22_gv__1x1MaxCountPerRow), 2) != 0)) {
            lv_positive = 0;
            lv_negative = -2.0;
        }
        else {
            lv_positive = 1.0;
            lv_negative = -1.0;
        }
        lib7A9A9B22_gv_attackWaveRow -= 1.0;
        autoAC96D6B3_n = libNtve_gf_ArithmeticIntClamp(lv_x, 0, lib7A9A9B22_gv__1x1MaxCountPerRow);
        for (autoAC96D6B3_i = 1; autoAC96D6B3_i <= autoAC96D6B3_n; autoAC96D6B3_i += 1) {
            lv_x -= 1;
            if ((lv_switch == false)) {
                lv_switch = true;
                UnitCreate(1, lp_unitType, c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(PointWithOffsetPolar(lp_originPoint, (lib7A9A9B22_gv_attackWaveRow * SquareRoot(2.0)), (lp_facing + 180.0)), (lv_positive * (SquareRoot(2.0) / 2.0)), (lp_facing + 270.0)), lp_facing);
                lv_positive += 2.0;
            }
            else {
                lv_switch = false;
                UnitCreate(1, lp_unitType, c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(PointWithOffsetPolar(lp_originPoint, (lib7A9A9B22_gv_attackWaveRow * SquareRoot(2.0)), (lp_facing + 180.0)), (lv_negative * (SquareRoot(2.0) / 2.0)), (lp_facing + 270.0)), lp_facing);
                lv_negative -= 2.0;
            }
            UnitGroupAdd(lib7A9A9B22_gv_attackWaveGroup, UnitLastCreated());
            UnitGroupAdd(lib7A9A9B22_gv_attackWaveReady, UnitLastCreated());
            UnitCreateEffectUnit(UnitLastCreated(), lp_birthEffect, UnitLastCreated());
            if ((libDDE92A83_gf_GameIsUnityMutation() == true)) {
                UnitGroupAdd(lib7A9A9B22_gv_stagingAreaTeamSpawns[1], UnitLastCreated());
            }

        }
    }
}

void lib7A9A9B22_gf_AttackWaveCreate2x2 (int lp_player, int lp_count, fixed lp_facing, string lp_unitType, string lp_birthEffect, point lp_originPoint) {
    // Variable Declarations
    bool lv_switch;
    fixed lv_positive;
    fixed lv_negative;
    int lv_x;

    // Automatic Variable Declarations
    int autoE40B4199_n;
    int autoE40B4199_i;

    // Variable Initialization
    lv_positive = 2.0;
    lv_negative = -2.0;

    // Implementation
    lv_x = lp_count;
    while ((lv_x > 0)) {
        if ((ModI(libNtve_gf_ArithmeticIntClamp(lv_x, 0, lib7A9A9B22_gv__2x2MaxCountPerRow), 2) != 0)) {
            lv_positive = 0.0;
            lv_negative = -4.0;
        }
        else {
            lv_positive = 2.0;
            lv_negative = -2.0;
        }
        lib7A9A9B22_gv_attackWaveRow -= 2.0;
        autoE40B4199_n = libNtve_gf_ArithmeticIntClamp(lv_x, 0, lib7A9A9B22_gv__2x2MaxCountPerRow);
        for (autoE40B4199_i = 1; autoE40B4199_i <= autoE40B4199_n; autoE40B4199_i += 1) {
            lv_x -= 1;
            if ((lv_switch == false)) {
                lv_switch = true;
                UnitCreate(1, lp_unitType, c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(PointWithOffsetPolar(lp_originPoint, (lib7A9A9B22_gv_attackWaveRow * SquareRoot(2.0)), (lp_facing + 180.0)), (lv_positive * (SquareRoot(2.0) / 2.0)), (lp_facing + 270.0)), lp_facing);
                lv_positive += 4.0;
            }
            else {
                lv_switch = false;
                UnitCreate(1, lp_unitType, c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(PointWithOffsetPolar(lp_originPoint, (lib7A9A9B22_gv_attackWaveRow * SquareRoot(2.0)), (lp_facing + 180.0)), (lv_negative * (SquareRoot(2.0) / 2.0)), (lp_facing + 270.0)), lp_facing);
                lv_negative -= 4.0;
            }
            UnitGroupAdd(lib7A9A9B22_gv_attackWaveGroup, UnitLastCreated());
            UnitGroupAdd(lib7A9A9B22_gv_attackWaveReady, UnitLastCreated());
            UnitCreateEffectUnit(UnitLastCreated(), lp_birthEffect, UnitLastCreated());
            if ((libDDE92A83_gf_GameIsUnityMutation() == true)) {
                UnitGroupAdd(lib7A9A9B22_gv_stagingAreaTeamSpawns[1], UnitLastCreated());
            }

        }
    }
}

void lib7A9A9B22_gf_AttackWaveAssignRandom (int lp_player) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto71F008A7_val;

    // Variable Initialization
    lv_i = RandomInt(0, 2);

    // Implementation
    auto71F008A7_val = lv_i;
    if (auto71F008A7_val == 1) {
        lib7A9A9B22_gv_attackWaveData[lp_player] = "AttackWaveTerran";
        lib7A9A9B22_gv_attackWaveDataSupport[lp_player] = "AttackWaveTerranSupport";
    }
    else if (auto71F008A7_val == 2) {
        lib7A9A9B22_gv_attackWaveData[lp_player] = "AttackWaveZerg";
        lib7A9A9B22_gv_attackWaveDataSupport[lp_player] = "AttackWaveZergSupport";
    }
    else {
        lib7A9A9B22_gv_attackWaveData[lp_player] = "AttackWaveProtoss";
        lib7A9A9B22_gv_attackWaveDataSupport[lp_player] = "AttackWaveProtossSupport";
    }
    lib7A9A9B22_gv_attackWaveOffset[lp_player] = RandomInt(0, ((UserDataInstanceCount(lib7A9A9B22_gv_attackWaveData[lp_player]) / 8) - 1));
}

void lib7A9A9B22_gf_AttackWaveAssignDebug (int lp_player, string lp_attackWave, string lp_supportWave, int lp_waveOffset) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = RandomInt(0, 2);

    // Implementation
    lib7A9A9B22_gv_attackWaveData[lp_player] = lp_attackWave;
    lib7A9A9B22_gv_attackWaveDataSupport[lp_player] = lp_supportWave;
    lib7A9A9B22_gv_attackWaveOffset[lp_player] = lp_waveOffset;
}

void lib7A9A9B22_gf_WaypointApply (unit lp_unit, fixed lp_offsetX, fixed lp_offsetY, int lp_waypointCount, point lp_waypoint1, point lp_waypoint2, point lp_waypoint3, point lp_waypoint4, point lp_waypoint5, point lp_waypoint6, point lp_waypoint7, point lp_waypoint8, point lp_waypoint9) {
    // Automatic Variable Declarations
    // Implementation
    UnitGroupAdd(lib7A9A9B22_gv_waypointGroup, lp_unit);
    UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueUnitSpawnOffsetX, lp_offsetX);
    UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueUnitSpawnOffsetY, lp_offsetY);
    UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueOrderMax, IntToFixed(lp_waypointCount));
    if ((lp_waypointCount >= 0)) {
        UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypoint1X, (PointGetX(lp_waypoint1) + UnitGetCustomValue(lp_unit, lib7A9A9B22_gv_customValueUnitSpawnOffsetX)));
        UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypoint1Y, (PointGetY(lp_waypoint1) + UnitGetCustomValue(lp_unit, lib7A9A9B22_gv_customValueUnitSpawnOffsetY)));
        if ((lp_waypointCount >= 1)) {
            UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypoint2X, (PointGetX(lp_waypoint2) + UnitGetCustomValue(lp_unit, lib7A9A9B22_gv_customValueUnitSpawnOffsetX)));
            UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypoint2Y, (PointGetY(lp_waypoint2) + UnitGetCustomValue(lp_unit, lib7A9A9B22_gv_customValueUnitSpawnOffsetY)));
            if ((lp_waypointCount >= 2)) {
                UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypoint3X, (PointGetX(lp_waypoint3) + UnitGetCustomValue(lp_unit, lib7A9A9B22_gv_customValueUnitSpawnOffsetX)));
                UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypoint3Y, (PointGetY(lp_waypoint3) + UnitGetCustomValue(lp_unit, lib7A9A9B22_gv_customValueUnitSpawnOffsetY)));
                if ((lp_waypointCount >= 3)) {
                    UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypoint4X, (PointGetX(lp_waypoint4) + UnitGetCustomValue(lp_unit, lib7A9A9B22_gv_customValueUnitSpawnOffsetX)));
                    UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypoint4Y, (PointGetY(lp_waypoint4) + UnitGetCustomValue(lp_unit, lib7A9A9B22_gv_customValueUnitSpawnOffsetY)));
                    if ((lp_waypointCount >= 4)) {
                        UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypoint5X, (PointGetX(lp_waypoint5) + UnitGetCustomValue(lp_unit, lib7A9A9B22_gv_customValueUnitSpawnOffsetX)));
                        UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypoint5Y, (PointGetY(lp_waypoint5) + UnitGetCustomValue(lp_unit, lib7A9A9B22_gv_customValueUnitSpawnOffsetY)));
                        if ((lp_waypointCount >= 5)) {
                            UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypoint6X, (PointGetX(lp_waypoint6) + UnitGetCustomValue(lp_unit, lib7A9A9B22_gv_customValueUnitSpawnOffsetX)));
                            UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypoint6Y, (PointGetY(lp_waypoint6) + UnitGetCustomValue(lp_unit, lib7A9A9B22_gv_customValueUnitSpawnOffsetY)));
                            if ((lp_waypointCount >= 6)) {
                                UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypoint7X, (PointGetX(lp_waypoint7) + UnitGetCustomValue(lp_unit, lib7A9A9B22_gv_customValueUnitSpawnOffsetX)));
                                UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypoint7Y, (PointGetY(lp_waypoint7) + UnitGetCustomValue(lp_unit, lib7A9A9B22_gv_customValueUnitSpawnOffsetY)));
                                if ((lp_waypointCount >= 7)) {
                                    UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypoint8X, (PointGetX(lp_waypoint8) + UnitGetCustomValue(lp_unit, lib7A9A9B22_gv_customValueUnitSpawnOffsetX)));
                                    UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypoint8Y, (PointGetY(lp_waypoint8) + UnitGetCustomValue(lp_unit, lib7A9A9B22_gv_customValueUnitSpawnOffsetY)));
                                    if ((lp_waypointCount >= 8)) {
                                        UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypoint9X, (PointGetX(lp_waypoint9) + UnitGetCustomValue(lp_unit, lib7A9A9B22_gv_customValueUnitSpawnOffsetX)));
                                        UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypoint9Y, (PointGetY(lp_waypoint9) + UnitGetCustomValue(lp_unit, lib7A9A9B22_gv_customValueUnitSpawnOffsetY)));
                                        UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypointFinalX, PointGetX(lp_waypoint9));
                                        UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypointFinalY, PointGetY(lp_waypoint9));
                                    }
                                    else {
                                        UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypointFinalX, PointGetX(lp_waypoint8));
                                        UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypointFinalY, PointGetY(lp_waypoint8));
                                    }
                                }
                                else {
                                    UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypointFinalX, PointGetX(lp_waypoint7));
                                    UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypointFinalY, PointGetY(lp_waypoint7));
                                }
                            }
                            else {
                                UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypointFinalX, PointGetX(lp_waypoint6));
                                UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypointFinalY, PointGetY(lp_waypoint6));
                            }
                        }
                        else {
                            UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypointFinalX, PointGetX(lp_waypoint5));
                            UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypointFinalY, PointGetY(lp_waypoint5));
                        }
                    }
                    else {
                        UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypointFinalX, PointGetX(lp_waypoint4));
                        UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypointFinalY, PointGetY(lp_waypoint4));
                    }
                }
                else {
                    UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypointFinalX, PointGetX(lp_waypoint3));
                    UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypointFinalY, PointGetY(lp_waypoint3));
                }
            }
            else {
                UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypointFinalX, PointGetX(lp_waypoint2));
                UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypointFinalY, PointGetY(lp_waypoint2));
            }
        }
        else {
            UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypointFinalX, PointGetX(lp_waypoint1));
            UnitSetCustomValue(lp_unit, lib7A9A9B22_gv_customValueWaypointFinalY, PointGetY(lp_waypoint1));
        }
    }

}

void lib7A9A9B22_gf_WaypointRefreshOrder (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), Point(UnitGetCustomValue(lp_unit, (lib7A9A9B22_gv_customValueWaypoint1X + (FixedToInt(UnitGetCustomValue(lp_unit, lib7A9A9B22_gv_customValueOrderCurrent)) * 2))), UnitGetCustomValue(lp_unit, (lib7A9A9B22_gv_customValueWaypoint1Y + (FixedToInt(UnitGetCustomValue(lp_unit, lib7A9A9B22_gv_customValueOrderCurrent)) * 2))))), c_orderQueueReplace);
    UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("AttackWarpPrism", 0), Point(UnitGetCustomValue(lp_unit, (lib7A9A9B22_gv_customValueWaypoint1X + (FixedToInt(UnitGetCustomValue(lp_unit, lib7A9A9B22_gv_customValueOrderCurrent)) * 2))), UnitGetCustomValue(lp_unit, (lib7A9A9B22_gv_customValueWaypoint1Y + (FixedToInt(UnitGetCustomValue(lp_unit, lib7A9A9B22_gv_customValueOrderCurrent)) * 2))))), c_orderQueueReplace);
}

void lib7A9A9B22_gf_WaypointOrderControl (bool lp_toggle) {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(lib7A9A9B22_gt_UnitIdle, lp_toggle);
    TriggerEnable(lib7A9A9B22_gt_UnitIdleCheck, lp_toggle);
    TriggerEnable(lib7A9A9B22_gt_UnitMorph, lp_toggle);
    TriggerEnable(lib7A9A9B22_gt_UnitStun, lp_toggle);
    TriggerEnable(lib7A9A9B22_gt_UnitSummon, lp_toggle);
    TriggerEnable(lib7A9A9B22_gt_UnitSummonEffect, lp_toggle);
    TriggerEnable(lib7A9A9B22_gt_NeuralParasiteOn, lp_toggle);
    TriggerEnable(lib7A9A9B22_gt_NeuralParasiteOff, lp_toggle);
}

void lib7A9A9B22_gf_StagingAreaPrepareManualWaypoints (unit lp_stagingArea, int lp_spawnOwner, string lp_birth, fixed lp_rotationChange, point lp_waypointSpawn, point lp_waypoint1, point lp_waypoint2, point lp_waypoint3, point lp_waypoint4, point lp_waypoint5, point lp_waypoint6, point lp_waypoint7, point lp_waypoint8, point lp_waypoint9) {
    // Variable Declarations
    int lv_waypointCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_waypoint1 != null)) {
        lv_waypointCount = 0;
        if ((lp_waypoint2 != null)) {
            lv_waypointCount = 1;
            if ((lp_waypoint3 != null)) {
                lv_waypointCount = 2;
                if ((lp_waypoint4 != null)) {
                    lv_waypointCount = 3;
                    if ((lp_waypoint5 != null)) {
                        lv_waypointCount = 4;
                        if ((lp_waypoint6 != null)) {
                            lv_waypointCount = 5;
                            if ((lp_waypoint7 != null)) {
                                lv_waypointCount = 6;
                                if ((lp_waypoint8 != null)) {
                                    lv_waypointCount = 7;
                                    if ((lp_waypoint9 != null)) {
                                        lv_waypointCount = 8;
                                    }

                                }

                            }

                        }

                    }

                }

            }

        }

    }

    lib7A9A9B22_gf_StagingAreaCreateSpawns(lp_stagingArea, UnitGroupFilterRegion(lib7A9A9B22_gv_stagingAreaSpawners, RegionRect((PointGetX(UnitGetPosition(lp_stagingArea)) - UnitGetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueUnitSpawnAreaSizeX)), (PointGetY(UnitGetPosition(lp_stagingArea)) - UnitGetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueUnitSpawnAreaSizeY)), (PointGetX(UnitGetPosition(lp_stagingArea)) + UnitGetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueUnitSpawnAreaSizeX)), (PointGetY(UnitGetPosition(lp_stagingArea)) + UnitGetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueUnitSpawnAreaSizeY))), 0), lp_spawnOwner, lp_birth, lp_rotationChange, UnitGetPosition(lp_stagingArea), lv_waypointCount, lp_waypointSpawn, lp_waypoint1, lp_waypoint2, lp_waypoint3, lp_waypoint4, lp_waypoint5, lp_waypoint6, lp_waypoint7, lp_waypoint8, lp_waypoint9);
}

void lib7A9A9B22_gf_StagingAreaPrepare (unitgroup lp_stagingAreas, string lp_timedLife, string lp_birth) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup autoBEA75FAF_g;
    int autoBEA75FAF_u;

    // Variable Initialization

    // Implementation
    if ((libDDE92A83_gv_gameOver == false)) {
        autoBEA75FAF_g = lp_stagingAreas;
        autoBEA75FAF_u = UnitGroupCount(autoBEA75FAF_g, c_unitCountAll);
        for (;; autoBEA75FAF_u -= 1) {
            lv_u = UnitGroupUnitFromEnd(autoBEA75FAF_g, autoBEA75FAF_u);
            if (lv_u == null) { break; }
            lib7A9A9B22_gf_StagingAreaCreateSpawns(lv_u, UnitGroupFilterRegion(lib7A9A9B22_gv_stagingAreaSpawners, RegionRect((PointGetX(UnitGetPosition(lv_u)) - UnitGetCustomValue(lv_u, lib7A9A9B22_gv_customValueUnitSpawnAreaSizeX)), (PointGetY(UnitGetPosition(lv_u)) - UnitGetCustomValue(lv_u, lib7A9A9B22_gv_customValueUnitSpawnAreaSizeY)), (PointGetX(UnitGetPosition(lv_u)) + UnitGetCustomValue(lv_u, lib7A9A9B22_gv_customValueUnitSpawnAreaSizeX)), (PointGetY(UnitGetPosition(lv_u)) + UnitGetCustomValue(lv_u, lib7A9A9B22_gv_customValueUnitSpawnAreaSizeY))), 0), UnitGetOwner(lv_u), lp_birth, 0.0, UnitGetPosition(lv_u), FixedToInt(UnitGetCustomValue(lv_u, lib7A9A9B22_gv_customValueOrderMax)), Point(UnitGetCustomValue(lv_u, lib7A9A9B22_gv_customValueWaypointSpawnX), UnitGetCustomValue(lv_u, lib7A9A9B22_gv_customValueWaypointSpawnY)), Point(UnitGetCustomValue(lv_u, lib7A9A9B22_gv_customValueWaypoint1X), UnitGetCustomValue(lv_u, lib7A9A9B22_gv_customValueWaypoint1Y)), Point(UnitGetCustomValue(lv_u, lib7A9A9B22_gv_customValueWaypoint2X), UnitGetCustomValue(lv_u, lib7A9A9B22_gv_customValueWaypoint2Y)), Point(UnitGetCustomValue(lv_u, lib7A9A9B22_gv_customValueWaypoint3X), UnitGetCustomValue(lv_u, lib7A9A9B22_gv_customValueWaypoint3Y)), Point(UnitGetCustomValue(lv_u, lib7A9A9B22_gv_customValueWaypoint4X), UnitGetCustomValue(lv_u, lib7A9A9B22_gv_customValueWaypoint4Y)), Point(UnitGetCustomValue(lv_u, lib7A9A9B22_gv_customValueWaypoint5X), UnitGetCustomValue(lv_u, lib7A9A9B22_gv_customValueWaypoint5Y)), Point(UnitGetCustomValue(lv_u, lib7A9A9B22_gv_customValueWaypoint6X), UnitGetCustomValue(lv_u, lib7A9A9B22_gv_customValueWaypoint6Y)), Point(UnitGetCustomValue(lv_u, lib7A9A9B22_gv_customValueWaypoint7X), UnitGetCustomValue(lv_u, lib7A9A9B22_gv_customValueWaypoint7Y)), Point(UnitGetCustomValue(lv_u, lib7A9A9B22_gv_customValueWaypoint8X), UnitGetCustomValue(lv_u, lib7A9A9B22_gv_customValueWaypoint8Y)), Point(UnitGetCustomValue(lv_u, lib7A9A9B22_gv_customValueWaypoint9X), UnitGetCustomValue(lv_u, lib7A9A9B22_gv_customValueWaypoint9Y)));
        }
    }

}

void lib7A9A9B22_gf_StagingAreaSend (string lp_timedLife) {
    // Automatic Variable Declarations
    unitgroup auto1D15DCB7_g;
    int auto1D15DCB7_u;
    unit auto1D15DCB7_var;
    playergroup autoD13A2DCF_g;
    int autoD13A2DCF_var;

    // Implementation
    if ((libDDE92A83_gv_gameOver == false)) {
        auto1D15DCB7_g = lib7A9A9B22_gv_stagingAreaReady;
        auto1D15DCB7_u = UnitGroupCount(auto1D15DCB7_g, c_unitCountAll);
        for (;; auto1D15DCB7_u -= 1) {
            auto1D15DCB7_var = UnitGroupUnitFromEnd(auto1D15DCB7_g, auto1D15DCB7_u);
            if (auto1D15DCB7_var == null) { break; }
            UnitBehaviorAdd(auto1D15DCB7_var, "SpeedLimitPrecursor", auto1D15DCB7_var, 1);
            UnitBehaviorAdd(auto1D15DCB7_var, lp_timedLife, auto1D15DCB7_var, 1);
            UnitBehaviorRemove(auto1D15DCB7_var, "StagingAreaPreparedUnit", 1);
            UnitIssueOrder(auto1D15DCB7_var, OrderTargetingPoint(AbilityCommand("attack", 0), Point(UnitGetCustomValue(auto1D15DCB7_var, lib7A9A9B22_gv_customValueWaypoint1X), UnitGetCustomValue(auto1D15DCB7_var, lib7A9A9B22_gv_customValueWaypoint1Y))), c_orderQueueReplace);
            UnitIssueOrder(auto1D15DCB7_var, OrderTargetingPoint(AbilityCommand("AttackWarpPrism", 0), Point(UnitGetCustomValue(auto1D15DCB7_var, lib7A9A9B22_gv_customValueWaypoint1X), UnitGetCustomValue(auto1D15DCB7_var, lib7A9A9B22_gv_customValueWaypoint1Y))), c_orderQueueReplace);
        }
        UnitGroupClear(lib7A9A9B22_gv_stagingAreaReady);
        autoD13A2DCF_g = lib7550A90B_gv_originalPlayers;
        autoD13A2DCF_var = -1;
        while (true) {
            autoD13A2DCF_var = PlayerGroupNextPlayer(autoD13A2DCF_g, autoD13A2DCF_var);
            if (autoD13A2DCF_var < 0) { break; }
            lib7A9A9B22_gf_ZeratulArtifactSearchAftermath(autoD13A2DCF_var);
        }
    }

}

void lib7A9A9B22_gf_StagingAreaCreate (int lp_player, fixed lp_placementFacing, point lp_createAreaAtPoint) {
    // Variable Declarations
    int lv_i;
    unit lv_footprint;
    string lv_footprintType;
    string lv_teamColorType;
    string lv_borderType;
    string lv_checkType;
    point lv_footprintPoint;
    int lv_footprintX;
    int lv_footprintY;
    point lv_specialPoint;
    point lv_unitPoint;

    // Automatic Variable Declarations
    string autoAD5E8148_val;
    string auto0B77FF59_val;
    int auto6F4B5BD0_val;
    int auto73244606_val;

    // Variable Initialization
    lv_footprintType = "StagingAreaFootprint";
    lv_teamColorType = "StagingAreaTeamColor";
    lv_borderType = "StagingAreaBorderGrid";
    lv_checkType = "StagingAreaPrecursor";
    lv_specialPoint = PointWithOffsetPolar(lp_createAreaAtPoint, (0.0 - ((SquareRoot(2.0) / 2.0) * 9.0)), lp_placementFacing);
    lv_unitPoint = PointWithOffsetPolar(lp_createAreaAtPoint, (0.0 - ((SquareRoot(2.0) / 2.0) * 5.0)), lp_placementFacing);

    // Implementation
    TriggerEnable(lib7A9A9B22_gt_WaveUnitDeathSpecial, true);
    TriggerEnable(lib7A9A9B22_gt_WaveUnitDeathNormal, true);
    TriggerEnable(lib7A9A9B22_gt_SpawnsFinalWaypointRefresh, true);
    TriggerEnable(lib7A9A9B22_gt_UnitSpawnerBirth, true);
    TriggerEnable(lib7A9A9B22_gt_UnitSpawnerBuildSwitch, true);
    TriggerEnable(lib7A9A9B22_gt_UnitSpawnerReposition, true);
    TriggerEnable(lib7A9A9B22_gt_UnitSpawnerSell, true);
    TriggerEnable(lib7A9A9B22_gt_ZeratulArtifactSearchOff, true);
    TriggerEnable(lib7A9A9B22_gt_ZeratulArtifactSearchOn, true);
    PlayerGroupAdd(lib7A9A9B22_gv_stagingAreaPlayers, lp_player);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_checkType, c_unitCreateIgnorePlacement, lp_player, lp_createAreaAtPoint);
    lv_footprint = UnitLastCreated();
    lv_footprintPoint = UnitGetPosition(UnitLastCreated());
    lv_footprintX = 14;
    lv_footprintY = 14;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_teamColorType, c_unitCreateIgnorePlacement, lp_player, UnitGetPosition(lv_footprint));
    UnitGroupAdd(lib7A9A9B22_gv_stagingAreaTeamColor, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_borderType, c_unitCreateIgnorePlacement, lp_player, UnitGetPosition(lv_footprint));
    UnitGroupAdd(lib7A9A9B22_gv_stagingAreaGrid, UnitLastCreated());
    if ((libDDE92A83_gf_GameisusingAutoMineralFields() == false) && (TechTreeUpgradeCount(lp_player, "MutationSimplified", c_techCountCompleteOnly) == 0)) {
        UnitCreate(1, "TrophyRiftPremium", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(PointWithOffsetPolar(UnitGetPosition(lv_footprint), (0.0 + ((SquareRoot(2.0) / 2.0) * IntToFixed(0))), (lp_placementFacing + 90.0)), (0.0 - ((SquareRoot(2.0) / 2.0) * IntToFixed(18))), lp_placementFacing), lp_placementFacing);
        UnitGroupAdd(lib7A9A9B22_gv_stagingAreaPeripherals, UnitLastCreated());
    }

    if ((libDDE92A83_gf_GameisusingAutoMineralFields() == true)) {
        lib1DE23868_gf_MineralFieldAutoDefault(lp_player, UnitGetPosition(lv_footprint), lp_placementFacing);
    }
    else {
        if ((lib7A9A9B22_gv_mines == true) && (TechTreeUpgradeCount(lp_player, "MutationSimplified", c_techCountCompleteOnly) == 0)) {
            lib7A9A9B22_gf_StagingAreaCreateMineralFields(lp_player, lp_placementFacing, UnitGetPosition(lv_footprint), true);
        }

    }
    if ((TechTreeUpgradeCount(lp_player, "MutationHallowed", c_techCountCompleteOnly) == 1)) {
        lib7A9A9B22_gf_StagingAreaCreateHallowed(lp_player, lp_placementFacing, UnitGetPosition(lv_footprint));
    }

    if ((TechTreeUpgradeCount(lp_player, "MutationEquipment", c_techCountCompleteOnly) == 1)) {
        autoAD5E8148_val = PlayerRace(lp_player);
        if (autoAD5E8148_val == "Terr") {
            UnitCreate(1, "EquipmentSelectTerran", 0, lp_player, lv_specialPoint, lp_placementFacing);
            lv_specialPoint = PointWithOffsetPolar(lv_specialPoint, ((SquareRoot(2.0) / 2.0) * 6.0), (lp_placementFacing + 90.0));
            UnitGroupAdd(lib7A9A9B22_gv_equipmentShop, UnitLastCreated());
            UnitGroupAdd(lib7A9A9B22_gv_stagingAreaPeripherals, UnitLastCreated());
        }
        else if (autoAD5E8148_val == "Zerg") {
            UnitCreate(1, "EquipmentSelectZerg", 0, lp_player, lv_specialPoint, lp_placementFacing);
            lv_specialPoint = PointWithOffsetPolar(lv_specialPoint, ((SquareRoot(2.0) / 2.0) * 6.0), (lp_placementFacing + 90.0));
            UnitGroupAdd(lib7A9A9B22_gv_equipmentShop, UnitLastCreated());
            UnitGroupAdd(lib7A9A9B22_gv_stagingAreaPeripherals, UnitLastCreated());
        }
        else {
            UnitCreate(1, "EquipmentSelectProtoss", 0, lp_player, lv_specialPoint, lp_placementFacing);
            lv_specialPoint = PointWithOffsetPolar(lv_specialPoint, ((SquareRoot(2.0) / 2.0) * 6.0), (lp_placementFacing + 90.0));
            UnitGroupAdd(lib7A9A9B22_gv_equipmentShop, UnitLastCreated());
            UnitGroupAdd(lib7A9A9B22_gv_stagingAreaPeripherals, UnitLastCreated());
        }
    }

    if ((PlayerType(lp_player) == c_playerTypeUser) && (TechTreeUpgradeCount(lp_player, "MutationMercs", c_techCountCompleteOnly) == 1)) {
        auto0B77FF59_val = PlayerRace(lp_player);
        if (auto0B77FF59_val == "Terr") {
            UnitCreate(1, "MercCampTerran", c_unitCreateIgnorePlacement, lp_player, lv_specialPoint, lp_placementFacing);
            lv_specialPoint = PointWithOffsetPolar(lv_specialPoint, ((SquareRoot(2.0) / 2.0) * 6.0), (lp_placementFacing + 90.0));
            UnitGroupAdd(lib7A9A9B22_gv_stagingAreaPeripherals, UnitLastCreated());
        }
        else if (auto0B77FF59_val == "Zerg") {
            UnitCreate(1, "MercCampZerg", 0, lp_player, lv_specialPoint, lp_placementFacing);
            lv_specialPoint = PointWithOffsetPolar(lv_specialPoint, ((SquareRoot(2.0) / 2.0) * 6.0), (lp_placementFacing + 90.0));
            UnitGroupAdd(lib7A9A9B22_gv_stagingAreaPeripherals, UnitLastCreated());
        }
        else {
            UnitCreate(1, "MercCampProtoss", 0, lp_player, lv_specialPoint, lp_placementFacing);
            lv_specialPoint = PointWithOffsetPolar(lv_specialPoint, ((SquareRoot(2.0) / 2.0) * 6.0), (lp_placementFacing + 90.0));
            UnitGroupAdd(lib7A9A9B22_gv_stagingAreaPeripherals, UnitLastCreated());
        }
    }

    if ((PlayerType(lp_player) == c_playerTypeUser) && (TechTreeUpgradeCount(lp_player, "MutationLizzyBrigade", c_techCountCompleteOnly) == 1)) {
        UnitCreate(1, "DehakaHero", c_unitCreateIgnorePlacement, lp_player, lv_specialPoint, lp_placementFacing);
        lv_specialPoint = PointWithOffsetPolar(lv_specialPoint, ((SquareRoot(2.0) / 2.0) * 6.0), (lp_placementFacing + 90.0));
        UnitCreateEffectUnit(UnitLastCreated(), "UnitSpawner", UnitLastCreated());
    }

    if ((PlayerType(lp_player) == c_playerTypeUser) && (TechTreeUpgradeCount(lp_player, "MutationHeavensDevils", c_techCountCompleteOnly) == 1)) {
        lv_i = RandomInt(0, 7);
        auto6F4B5BD0_val = lv_i;
        if (auto6F4B5BD0_val == 1) {
            UnitCreate(1, "TychusSirius", c_unitCreateIgnorePlacement, lp_player, lv_specialPoint, lp_placementFacing);
            lv_specialPoint = PointWithOffsetPolar(lv_specialPoint, ((SquareRoot(2.0) / 2.0) * 6.0), (lp_placementFacing + 90.0));
            UnitCreateEffectUnit(UnitLastCreated(), "UnitSpawner", UnitLastCreated());
        }
        else if (auto6F4B5BD0_val == 2) {
            UnitCreate(1, "TychusRattlesnake", c_unitCreateIgnorePlacement, lp_player, lv_specialPoint, lp_placementFacing);
            lv_specialPoint = PointWithOffsetPolar(lv_specialPoint, ((SquareRoot(2.0) / 2.0) * 6.0), (lp_placementFacing + 90.0));
            UnitCreateEffectUnit(UnitLastCreated(), "UnitSpawner", UnitLastCreated());
        }
        else if (auto6F4B5BD0_val == 3) {
            UnitCreate(1, "TychusBlaze", c_unitCreateIgnorePlacement, lp_player, lv_specialPoint, lp_placementFacing);
            lv_specialPoint = PointWithOffsetPolar(lv_specialPoint, ((SquareRoot(2.0) / 2.0) * 6.0), (lp_placementFacing + 90.0));
            UnitCreateEffectUnit(UnitLastCreated(), "UnitSpawner", UnitLastCreated());
        }
        else if (auto6F4B5BD0_val == 4) {
            UnitCreate(1, "TychusNux", c_unitCreateIgnorePlacement, lp_player, lv_specialPoint, lp_placementFacing);
            lv_specialPoint = PointWithOffsetPolar(lv_specialPoint, ((SquareRoot(2.0) / 2.0) * 6.0), (lp_placementFacing + 90.0));
            UnitCreateEffectUnit(UnitLastCreated(), "UnitSpawner", UnitLastCreated());
        }
        else if (auto6F4B5BD0_val == 5) {
            UnitCreate(1, "TychusCannonball", c_unitCreateIgnorePlacement, lp_player, lv_specialPoint, lp_placementFacing);
            lv_specialPoint = PointWithOffsetPolar(lv_specialPoint, ((SquareRoot(2.0) / 2.0) * 6.0), (lp_placementFacing + 90.0));
            UnitCreateEffectUnit(UnitLastCreated(), "UnitSpawner", UnitLastCreated());
        }
        else if (auto6F4B5BD0_val == 6) {
            UnitCreate(1, "TychusTychus", c_unitCreateIgnorePlacement, lp_player, lv_specialPoint, lp_placementFacing);
            lv_specialPoint = PointWithOffsetPolar(lv_specialPoint, ((SquareRoot(2.0) / 2.0) * 6.0), (lp_placementFacing + 90.0));
            UnitCreateEffectUnit(UnitLastCreated(), "UnitSpawner", UnitLastCreated());
        }
        else if (auto6F4B5BD0_val == 7) {
            UnitCreate(1, "TychusVega", c_unitCreateIgnorePlacement, lp_player, lv_specialPoint, lp_placementFacing);
            lv_specialPoint = PointWithOffsetPolar(lv_specialPoint, ((SquareRoot(2.0) / 2.0) * 6.0), (lp_placementFacing + 90.0));
            UnitCreateEffectUnit(UnitLastCreated(), "UnitSpawner", UnitLastCreated());
        }
        else if (auto6F4B5BD0_val == 8) {
            UnitCreate(1, "TychusNikara", c_unitCreateIgnorePlacement, lp_player, lv_specialPoint, lp_placementFacing);
            lv_specialPoint = PointWithOffsetPolar(lv_specialPoint, ((SquareRoot(2.0) / 2.0) * 6.0), (lp_placementFacing + 90.0));
            UnitCreateEffectUnit(UnitLastCreated(), "UnitSpawner", UnitLastCreated());
        }
        else {
            UnitCreate(1, "TychusSam", c_unitCreateIgnorePlacement, lp_player, lv_specialPoint, lp_placementFacing);
            lv_specialPoint = PointWithOffsetPolar(lv_specialPoint, ((SquareRoot(2.0) / 2.0) * 6.0), (lp_placementFacing + 90.0));
            UnitCreateEffectUnit(UnitLastCreated(), "UnitSpawner", UnitLastCreated());
        }
    }

    if ((PlayerType(lp_player) == c_playerTypeUser) && (TechTreeUpgradeCount(lp_player, "MutationHillsCantina", c_techCountCompleteOnly) == 1)) {
        UnitCreate(1, "MercCampHillsCantina", 0, lp_player, lv_specialPoint, lp_placementFacing);
        lv_specialPoint = PointWithOffsetPolar(lv_specialPoint, ((SquareRoot(2.0) / 2.0) * 6.0), (lp_placementFacing + 90.0));
        UnitGroupAdd(lib7A9A9B22_gv_stagingAreaPeripherals, UnitLastCreated());
    }

    if ((PlayerType(lp_player) == c_playerTypeUser) && (TechTreeUpgradeCount(lp_player, "MutationAriseMyChampions", c_techCountCompleteOnly) == 1)) {
        UnitCreate(1, "ChampionSpawnerBrawl", 0, lp_player, lv_specialPoint, lp_placementFacing);
        lv_specialPoint = PointWithOffsetPolar(lv_specialPoint, ((SquareRoot(2.0) / 2.0) * 6.0), (lp_placementFacing + 90.0));
        UnitGroupAdd(lib7A9A9B22_gv_stagingAreaPeripherals, UnitLastCreated());
    }

    if ((PlayerType(lp_player) == c_playerTypeUser) && (TechTreeUpgradeCount(lp_player, "MutationTheBestOil", c_techCountCompleteOnly) == 1)) {
        UnitCreate(1, "GaryStetmann", 0, lp_player, PointWithOffsetPolar(lv_specialPoint, (SquareRoot(2.0) / 2.0), lp_placementFacing), lp_placementFacing);
        lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
        lv_specialPoint = PointWithOffsetPolar(lv_specialPoint, ((SquareRoot(2.0) / 2.0) * 6.0), (lp_placementFacing + 90.0));
    }

    if ((PlayerType(lp_player) == c_playerTypeUser) && (TechTreeUpgradeCount(lp_player, "MutationSN1PSN4P", c_techCountCompleteOnly) == 1)) {
        lv_i = RandomInt(0, 6);
        auto73244606_val = lv_i;
        if (auto73244606_val == 1) {
            UnitCreate(1, "BanelingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, 4.5, -4.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "BanelingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, 3.5, -3.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "BanelingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, 2.5, -2.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "BanelingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, 1.5, -1.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "BanelingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, 0.5, -0.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "BanelingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, -0.5, 0.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "BanelingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, -1.5, 1.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "BanelingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, -2.5, 2.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "BanelingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, -3.5, 3.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "BanelingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, -4.5, 4.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
        }
        else if (auto73244606_val == 2) {
            UnitCreate(1, "HydraliskStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, 2.5, -2.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "HydraliskStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, 1.5, -1.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "HydraliskStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, 0.5, -0.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "HydraliskStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, -0.5, 0.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "HydraliskStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, -1.5, 1.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "HydraliskStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, -2.5, 2.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
        }
        else if (auto73244606_val == 3) {
            UnitCreate(1, "LurkerStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, -2.0, 2.0), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "LurkerStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, 0.0, 0.0), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "LurkerStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, 2.0, -2.0), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
        }
        else if (auto73244606_val == 4) {
            UnitCreate(1, "InfestorStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, 1.0, -1.0), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "InfestorStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, -1.0, 1.0), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
        }
        else if (auto73244606_val == 5) {
            UnitCreate(1, "CorruptorStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, -3.0, 3.0), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "CorruptorStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, -2.0, 2.0), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "CorruptorStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, 0.0, 0.0), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "CorruptorStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, 2.0, -2.0), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "CorruptorStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, 3.0, -3.0), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
        }
        else if (auto73244606_val == 6) {
            UnitCreate(1, "UltraliskStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, 1.0, -1.0), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "UltraliskStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, -1.0, 1.0), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
        }
        else {
            UnitCreate(1, "ZerglingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, 8.5, -8.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "ZerglingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, 7.5, -7.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "ZerglingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, 6.5, -6.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "ZerglingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, 5.5, -5.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "ZerglingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, 4.5, -4.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "ZerglingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, 3.5, -3.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "ZerglingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, 2.5, -2.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "ZerglingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, 1.5, -1.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "ZerglingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, 0.5, -0.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "ZerglingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, -0.5, 0.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "ZerglingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, -1.5, 1.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "ZerglingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, -2.5, 2.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "ZerglingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, -3.5, 3.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "ZerglingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, -4.5, 4.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "ZerglingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, -5.5, 5.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "ZerglingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, -6.5, 6.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "ZerglingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, -7.5, 7.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
            UnitCreate(1, "ZerglingStetmann", c_unitCreateIgnorePlacement, lp_player, PointWithOffset(lv_unitPoint, -8.5, 8.5), lp_placementFacing);
            lib7A9A9B22_gf_AddMutationBonusUnit(UnitLastCreated());
        }
    }

    UnitRemove(lv_footprint);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_footprintType, c_unitCreateIgnorePlacement, lp_player, lv_footprintPoint);
    lib7A9A9B22_gf_IndexStagingArea(UnitLastCreated());
    UnitSetCustomValue(UnitLastCreated(), lib7A9A9B22_gv_customValueUnitSpawnAreaUnitFacing, lp_placementFacing);
    UnitSetCustomValue(UnitLastCreated(), lib7A9A9B22_gv_customValueUnitSpawnAreaSizeX, lv_footprintX);
    UnitSetCustomValue(UnitLastCreated(), lib7A9A9B22_gv_customValueUnitSpawnAreaSizeY, lv_footprintY);
    libCA960273_gf_StagingAreaCustomizationUpdate(lp_player);
    lib7A9A9B22_gf_SetPlacementFacing(lp_player, lp_placementFacing);
    lib7A9A9B22_gf_AttackWaveAssignRandom(lp_player);
}

void lib7A9A9B22_gf_StagingAreaSetWaypoints (unit lp_stagingArea, point lp_waypointSpawn, point lp_waypoint1, point lp_waypoint2, point lp_waypoint3, point lp_waypoint4, point lp_waypoint5, point lp_waypoint6, point lp_waypoint7, point lp_waypoint8, point lp_waypoint9) {
    // Automatic Variable Declarations
    // Implementation
    lib7A9A9B22_gf_IndexStagingArea(lp_stagingArea);
    if ((lp_waypointSpawn != null)) {
        UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypointSpawnX, PointGetX(lp_waypointSpawn));
        UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypointSpawnY, PointGetY(lp_waypointSpawn));
    }

    if ((lp_waypoint1 != null)) {
        UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueOrderMax, IntToFixed(0));
        UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint1X, PointGetX(lp_waypoint1));
        UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint1Y, PointGetY(lp_waypoint1));
        if ((lp_waypoint2 != null)) {
            UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueOrderMax, IntToFixed(1));
            UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint2X, PointGetX(lp_waypoint2));
            UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint2Y, PointGetY(lp_waypoint2));
            if ((lp_waypoint3 != null)) {
                UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueOrderMax, IntToFixed(2));
                UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint3X, PointGetX(lp_waypoint3));
                UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint3Y, PointGetY(lp_waypoint3));
                if ((lp_waypoint4 != null)) {
                    UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueOrderMax, IntToFixed(3));
                    UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint4X, PointGetX(lp_waypoint4));
                    UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint4Y, PointGetY(lp_waypoint4));
                    if ((lp_waypoint5 != null)) {
                        UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueOrderMax, IntToFixed(4));
                        UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint5X, PointGetX(lp_waypoint5));
                        UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint5Y, PointGetY(lp_waypoint5));
                        if ((lp_waypoint6 != null)) {
                            UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueOrderMax, IntToFixed(5));
                            UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint6X, PointGetX(lp_waypoint6));
                            UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint6Y, PointGetY(lp_waypoint6));
                            if ((lp_waypoint7 != null)) {
                                UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueOrderMax, IntToFixed(6));
                                UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint7X, PointGetX(lp_waypoint7));
                                UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint7Y, PointGetY(lp_waypoint7));
                                if ((lp_waypoint8 != null)) {
                                    UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueOrderMax, IntToFixed(7));
                                    UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint8X, PointGetX(lp_waypoint8));
                                    UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint8Y, PointGetY(lp_waypoint8));
                                    if ((lp_waypoint9 != null)) {
                                        UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueOrderMax, IntToFixed(8));
                                        UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint9X, PointGetX(lp_waypoint9));
                                        UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueWaypoint9Y, PointGetY(lp_waypoint9));
                                    }

                                }

                            }

                        }

                    }

                }

            }

        }

    }

}

void lib7A9A9B22_gf_StagingAreaTeamSet (playergroup lp_team0, int lp_team0NPC, point lp_team0Origin1, point lp_team0Origin2, point lp_team0Origin3, point lp_team0Origin4, point lp_team0Origin5, point lp_team0Origin6, playergroup lp_team1, int lp_team1NPC, point lp_team1Origin1, point lp_team1Origin2, point lp_team1Origin3, point lp_team1Origin4, point lp_team1Origin5, point lp_team1Origin6, playergroup lp_team2, int lp_team2NPC, point lp_team2Origin1, point lp_team2Origin2, point lp_team2Origin3, point lp_team2Origin4, point lp_team2Origin5, point lp_team2Origin6, playergroup lp_team3, int lp_team3NPC, point lp_team3Origin1, point lp_team3Origin2, point lp_team3Origin3, point lp_team3Origin4, point lp_team3Origin5, point lp_team3Origin6) {
    int init_i;

    // Variable Declarations
    const int lv_teamCap = 3;
    const int lv_playerCap = 5;
    int lv_i;
    int lv_t;
    playergroup[lv_teamCap + 1] lv_localTeam;
    point[lv_playerCap + 1][lv_teamCap + 1] lv_points;
    int[lv_teamCap + 1] lv_maxTeamSize;
    int[lv_teamCap + 1] lv_teamNPC;

    // Automatic Variable Declarations
    const int auto5DCB79FA_ae = lv_teamCap;
    const int auto5DCB79FA_ai = 1;
    const int autoBC6F0BF0_ae = lv_playerCap;
    const int autoBC6F0BF0_ai = 1;
    const int autoC39A975B_ae = lv_teamCap;
    const int autoC39A975B_ai = 1;
    int autoA1DC5933_ae;
    const int autoA1DC5933_ai = 1;
    const int auto93660F9E_n = 6;
    int auto93660F9E_i;
    const int autoC0DE4176_n = 6;
    int autoC0DE4176_i;
    const int auto934962FD_ae = lv_teamCap;
    const int auto934962FD_ai = 1;
    const int auto97EBAFFE_ae = lv_teamCap;
    const int auto97EBAFFE_ai = 1;
    const int auto4A53931A_ae = lv_teamCap;
    const int auto4A53931A_ai = 1;
    playergroup auto7B5EF7EC_g;
    int auto7B5EF7EC_var;

    // Variable Initialization
    for (init_i = 0; init_i <= lv_teamCap; init_i += 1) {
        lv_localTeam[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= lv_teamCap; init_i += 1) {
        lv_teamNPC[init_i] = -1;
    }

    // Implementation
    libNtve_gf_AddPlayerGroupToPlayerGroup(lp_team0, lv_localTeam[0]);
    lv_teamNPC[0] = lp_team0NPC;
    lv_points[0][0] = lp_team0Origin1;
    lv_points[1][0] = lp_team0Origin2;
    lv_points[2][0] = lp_team0Origin3;
    lv_points[3][0] = lp_team0Origin4;
    lv_points[4][0] = lp_team0Origin5;
    lv_points[5][0] = lp_team0Origin6;
    libNtve_gf_AddPlayerGroupToPlayerGroup(lp_team1, lv_localTeam[1]);
    lv_teamNPC[1] = lp_team1NPC;
    lv_points[0][1] = lp_team1Origin1;
    lv_points[1][1] = lp_team1Origin2;
    lv_points[2][1] = lp_team1Origin3;
    lv_points[3][1] = lp_team1Origin4;
    lv_points[4][1] = lp_team1Origin5;
    lv_points[5][1] = lp_team1Origin6;
    libNtve_gf_AddPlayerGroupToPlayerGroup(lp_team2, lv_localTeam[2]);
    lv_teamNPC[2] = lp_team2NPC;
    lv_points[0][2] = lp_team2Origin1;
    lv_points[1][2] = lp_team2Origin2;
    lv_points[2][2] = lp_team2Origin3;
    lv_points[3][2] = lp_team2Origin4;
    lv_points[4][2] = lp_team2Origin5;
    lv_points[5][2] = lp_team2Origin6;
    libNtve_gf_AddPlayerGroupToPlayerGroup(lp_team3, lv_localTeam[3]);
    lv_teamNPC[3] = lp_team3NPC;
    lv_points[0][3] = lp_team3Origin1;
    lv_points[1][3] = lp_team3Origin2;
    lv_points[2][3] = lp_team3Origin3;
    lv_points[3][3] = lp_team3Origin4;
    lv_points[4][3] = lp_team3Origin5;
    lv_points[5][3] = lp_team3Origin6;
    lv_t = 0;
    for ( ; ( (auto5DCB79FA_ai >= 0 && lv_t <= auto5DCB79FA_ae) || (auto5DCB79FA_ai < 0 && lv_t >= auto5DCB79FA_ae) ) ; lv_t += auto5DCB79FA_ai ) {
        lv_i = 0;
        for ( ; ( (autoBC6F0BF0_ai >= 0 && lv_i <= autoBC6F0BF0_ae) || (autoBC6F0BF0_ai < 0 && lv_i >= autoBC6F0BF0_ae) ) ; lv_i += autoBC6F0BF0_ai ) {
            if ((lv_points[lv_i][lv_t] != null)) {
                lv_maxTeamSize[lv_t] = (lv_i + 1);
            }

        }
    }
    lv_t = 0;
    for ( ; ( (autoC39A975B_ai >= 0 && lv_t <= autoC39A975B_ae) || (autoC39A975B_ai < 0 && lv_t >= autoC39A975B_ae) ) ; lv_t += autoC39A975B_ai ) {
        autoA1DC5933_ae = PlayerGroupCount(lv_localTeam[lv_t]);
        lv_i = 1;
        for ( ; ( (autoA1DC5933_ai >= 0 && lv_i <= autoA1DC5933_ae) || (autoA1DC5933_ai < 0 && lv_i >= autoA1DC5933_ae) ) ; lv_i += autoA1DC5933_ai ) {
            if (((PlayerGroupHasPlayer(lv_localTeam[0], PlayerGroupPlayer(lv_localTeam[lv_t], lv_i)) == true) && (PlayerGroupHasPlayer(lv_localTeam[1], PlayerGroupPlayer(lv_localTeam[lv_t], lv_i)) == true))) {
                PlayerGroupRemove(lv_localTeam[1], PlayerGroupPlayer(lv_localTeam[lv_t], lv_i));
            }

        }
    }
    for (auto93660F9E_i = 1; auto93660F9E_i <= auto93660F9E_n; auto93660F9E_i += 1) {
        if ((PlayerGroupCount(lv_localTeam[0]) > lv_maxTeamSize[0])) {
            PlayerGroupAdd(lv_localTeam[1], PlayerGroupPlayer(lv_localTeam[0], (lv_maxTeamSize[0] + 1)));
            PlayerGroupRemove(lv_localTeam[0], PlayerGroupPlayer(lv_localTeam[0], (lv_maxTeamSize[0] + 1)));
        }

        if ((PlayerGroupCount(lv_localTeam[1]) > lv_maxTeamSize[1])) {
            PlayerGroupAdd(lv_localTeam[0], PlayerGroupPlayer(lv_localTeam[1], (lv_maxTeamSize[1] + 1)));
            PlayerGroupRemove(lv_localTeam[1], PlayerGroupPlayer(lv_localTeam[1], (lv_maxTeamSize[1] + 1)));
        }

    }
    for (autoC0DE4176_i = 1; autoC0DE4176_i <= autoC0DE4176_n; autoC0DE4176_i += 1) {
        lv_t = 0;
        for ( ; ( (auto934962FD_ai >= 0 && lv_t <= auto934962FD_ae) || (auto934962FD_ai < 0 && lv_t >= auto934962FD_ae) ) ; lv_t += auto934962FD_ai ) {
            if ((PlayerGroupCount(lv_localTeam[lv_t]) > lv_maxTeamSize[lv_t])) {
                PlayerGroupRemove(lv_localTeam[lv_t], PlayerGroupPlayer(lv_localTeam[lv_t], (lv_maxTeamSize[lv_t] + 1)));
            }

        }
    }
    lv_t = 0;
    for ( ; ( (auto97EBAFFE_ai >= 0 && lv_t <= auto97EBAFFE_ae) || (auto97EBAFFE_ai < 0 && lv_t >= auto97EBAFFE_ae) ) ; lv_t += auto97EBAFFE_ai ) {
        libDDE92A83_gf_SetOriginPoints(lv_localTeam[lv_t], lv_points[0][lv_t], lv_points[1][lv_t], lv_points[2][lv_t], lv_points[3][lv_t], lv_points[4][lv_t], lv_points[5][lv_t], null, null, null, null, null, null, null, null);
    }
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(lv_localTeam[0], lv_localTeam[1], libNtve_ge_AllianceSetting_Enemy);
    lv_t = 0;
    for ( ; ( (auto4A53931A_ai >= 0 && lv_t <= auto4A53931A_ae) || (auto4A53931A_ai < 0 && lv_t >= auto4A53931A_ae) ) ; lv_t += auto4A53931A_ai ) {
        PlayerGroupClear(lib7A9A9B22_gv_stagingAreaTeamInternal[lv_t]);
        libNtve_gf_AddPlayerGroupToPlayerGroup(lv_localTeam[lv_t], lib7A9A9B22_gv_stagingAreaTeamInternal[lv_t]);
        libNtve_gf_SetPlayerGroupAlliance(lib7A9A9B22_gv_stagingAreaTeamInternal[lv_t], libNtve_ge_AllianceSetting_AllyWithSharedVision);
        auto7B5EF7EC_g = lib7A9A9B22_gv_stagingAreaTeamInternal[lv_t];
        auto7B5EF7EC_var = -1;
        while (true) {
            auto7B5EF7EC_var = PlayerGroupNextPlayer(auto7B5EF7EC_g, auto7B5EF7EC_var);
            if (auto7B5EF7EC_var < 0) { break; }
            if ((lv_teamNPC[lv_t] >= 0)) {
                lib7A9A9B22_gv_playerNPC[auto7B5EF7EC_var] = lv_teamNPC[lv_t];
                libNtve_gf_SetAlliance(auto7B5EF7EC_var, lv_teamNPC[lv_t], libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }

        }
    }
}

void lib7A9A9B22_gf_StagingAreaTeamCreate (string lp_stagingAreaType, int lp_team, fixed lp_facing, point lp_waypointSpawn, point lp_waypoint1, point lp_waypoint2, point lp_waypoint3, point lp_waypoint4, point lp_waypoint5, point lp_waypoint6, point lp_waypoint7, point lp_waypoint8, point lp_waypoint9) {
    // Automatic Variable Declarations
    playergroup autoCBB9EEEF_g;
    int autoCBB9EEEF_var;

    // Implementation
    autoCBB9EEEF_g = lib7A9A9B22_gv_stagingAreaTeamInternal[lp_team];
    autoCBB9EEEF_var = -1;
    while (true) {
        autoCBB9EEEF_var = PlayerGroupNextPlayer(autoCBB9EEEF_g, autoCBB9EEEF_var);
        if (autoCBB9EEEF_var < 0) { break; }
        lib7A9A9B22_gf_StagingAreaCreate(autoCBB9EEEF_var, lp_facing, libDDE92A83_gv_playerOrigin[autoCBB9EEEF_var]);
        lib7A9A9B22_gf_StagingAreaSetWaypoints(UnitLastCreated(), lp_waypointSpawn, lp_waypoint1, lp_waypoint2, lp_waypoint3, lp_waypoint4, lp_waypoint5, lp_waypoint6, lp_waypoint7, lp_waypoint8, lp_waypoint9);
    }
}

void lib7A9A9B22_gf_StagingAreaRemovePeripherals (int lp_player) {
    // Variable Declarations
    unitgroup lv_hiddenUnits;

    // Automatic Variable Declarations
    unitgroup autoF0D2DF49_g;
    int autoF0D2DF49_u;
    unit autoF0D2DF49_var;

    // Variable Initialization
    lv_hiddenUnits = UnitGroupEmpty();

    // Implementation
    UnitGroupAddUnitGroup(lv_hiddenUnits, UnitGroup("StagingAreaPowerVisualDummy", lp_player, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_hiddenUnits, UnitGroup("StagingAreaBoundaryBottomRight", lp_player, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_hiddenUnits, UnitGroup("StagingAreaBoundaryEast", lp_player, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_hiddenUnits, UnitGroup("StagingAreaBoundaryNorth", lp_player, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_hiddenUnits, UnitGroup("StagingAreaBoundarySouth", lp_player, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_hiddenUnits, UnitGroup("StagingAreaBoundaryWest", lp_player, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_hiddenUnits, UnitGroup("StagingAreaBoundaryTopLeft", lp_player, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_hiddenUnits, UnitGroup("StagingAreaFootprintEast", lp_player, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_hiddenUnits, UnitGroup("StagingAreaFootprintNorth", lp_player, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_hiddenUnits, UnitGroup("StagingAreaFootprintSouth", lp_player, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_hiddenUnits, UnitGroup("StagingAreaFootprintWest", lp_player, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_hiddenUnits, UnitGroup("DecorationPowerVisual", lp_player, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_hiddenUnits, UnitGroup("StagingAreaPerimeter", lp_player, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    autoF0D2DF49_g = lv_hiddenUnits;
    autoF0D2DF49_u = UnitGroupCount(autoF0D2DF49_g, c_unitCountAll);
    for (;; autoF0D2DF49_u -= 1) {
        autoF0D2DF49_var = UnitGroupUnitFromEnd(autoF0D2DF49_g, autoF0D2DF49_u);
        if (autoF0D2DF49_var == null) { break; }
        UnitRemove(autoF0D2DF49_var);
    }
}

trigger auto_lib7A9A9B22_gf_StagingAreaRemovePlayer_Trigger = null;
int auto_lib7A9A9B22_gf_StagingAreaRemovePlayer_lp_player;

void lib7A9A9B22_gf_StagingAreaRemovePlayer (int lp_player) {
    auto_lib7A9A9B22_gf_StagingAreaRemovePlayer_lp_player = lp_player;

    if (auto_lib7A9A9B22_gf_StagingAreaRemovePlayer_Trigger == null) {
        auto_lib7A9A9B22_gf_StagingAreaRemovePlayer_Trigger = TriggerCreate("auto_lib7A9A9B22_gf_StagingAreaRemovePlayer_TriggerFunc");
    }

    TriggerExecute(auto_lib7A9A9B22_gf_StagingAreaRemovePlayer_Trigger, false, false);
}

bool auto_lib7A9A9B22_gf_StagingAreaRemovePlayer_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib7A9A9B22_gf_StagingAreaRemovePlayer_lp_player;

    // Variable Declarations
    int lv_t;
    int lv_localPlayer;
    int lv_team;
    unitgroup lv_hiddenUnits;
    unitgroup lv_delayedRemoval;

    // Automatic Variable Declarations
    const int auto6F28BCC9_ae = 3;
    const int auto6F28BCC9_ai = 1;
    unitgroup auto566E63DD_g;
    int auto566E63DD_u;
    unit auto566E63DD_var;
    unitgroup auto14ED1D07_g;
    int auto14ED1D07_u;
    unit auto14ED1D07_var;
    playergroup auto4C3A8647_g;
    int auto4C3A8647_var;
    unitgroup auto90CF3A39_g;
    int auto90CF3A39_u;
    unit auto90CF3A39_var;
    playergroup autoBF6691EE_g;
    int autoBF6691EE_var;
    unitgroup auto5DD8C864_g;
    int auto5DD8C864_u;
    unit auto5DD8C864_var;
    playergroup auto78104C15_g;
    int auto78104C15_var;
    unitgroup auto2D8BA7FC_g;
    int auto2D8BA7FC_u;
    unit auto2D8BA7FC_var;
    unitgroup auto2DB9356F_g;
    int auto2DB9356F_u;
    unit auto2DB9356F_var;
    playergroup autoEAF45AC6_g;
    int autoEAF45AC6_var;
    unitgroup autoB3973BD3_g;
    int autoB3973BD3_u;
    unit autoB3973BD3_var;
    unitgroup autoFE68B470_g;
    int autoFE68B470_u;
    unit autoFE68B470_var;

    // Variable Initialization
    lv_hiddenUnits = UnitGroupEmpty();
    lv_delayedRemoval = UnitGroupEmpty();

    // Implementation
    if ((PlayerGroupHasPlayer(lib7A9A9B22_gv_stagingAreaPlayers, lp_player) == true)) {
        lv_localPlayer = libNtve_gf_ArithmeticIntClamp(lp_player, 0, 15);
        PlayerGroupRemove(lib7A9A9B22_gv_stagingAreaPlayers, lv_localPlayer);
        lv_t = 0;
        for ( ; ( (auto6F28BCC9_ai >= 0 && lv_t <= auto6F28BCC9_ae) || (auto6F28BCC9_ai < 0 && lv_t >= auto6F28BCC9_ae) ) ; lv_t += auto6F28BCC9_ai ) {
            PlayerGroupRemove(lib7A9A9B22_gv_stagingAreaTeamInternal[lv_t], lv_localPlayer);
        }
        if ((libDDE92A83_gv_gameOver == false)) {
            auto566E63DD_g = UnitGroupFilterPlayer(lib7A9A9B22_gf_StagingAreas(), lv_localPlayer, 0);
            auto566E63DD_u = UnitGroupCount(auto566E63DD_g, c_unitCountAll);
            for (;; auto566E63DD_u -= 1) {
                auto566E63DD_var = UnitGroupUnitFromEnd(auto566E63DD_g, auto566E63DD_u);
                if (auto566E63DD_var == null) { break; }
                UnitRemove(auto566E63DD_var);
            }
            lib7A9A9B22_gf_StagingAreaRemovePeripherals(lv_localPlayer);
            auto14ED1D07_g = UnitGroupFilterPlayer(lib7A9A9B22_gf_StagingAreaSpawners(), lv_localPlayer, 0);
            auto14ED1D07_u = UnitGroupCount(auto14ED1D07_g, c_unitCountAll);
            for (;; auto14ED1D07_u -= 1) {
                auto14ED1D07_var = UnitGroupUnitFromEnd(auto14ED1D07_g, auto14ED1D07_u);
                if (auto14ED1D07_var == null) { break; }
                UnitSetOwner(auto14ED1D07_var, 0, false);
                UnitBehaviorAdd(auto14ED1D07_var, "UnitSuicideCrystalPrecursor", auto14ED1D07_var, 1);
                auto4C3A8647_g = PlayerGroupAll();
                auto4C3A8647_var = -1;
                while (true) {
                    auto4C3A8647_var = PlayerGroupNextPlayer(auto4C3A8647_g, auto4C3A8647_var);
                    if (auto4C3A8647_var < 0) { break; }
                    libNtve_gf_ShareVisionofUnit(auto14ED1D07_var, true, auto4C3A8647_var);
                }
            }
            auto90CF3A39_g = UnitGroupFilterPlayer(lib7A9A9B22_gv_stagingAreaPeripherals, lv_localPlayer, 0);
            auto90CF3A39_u = UnitGroupCount(auto90CF3A39_g, c_unitCountAll);
            for (;; auto90CF3A39_u -= 1) {
                auto90CF3A39_var = UnitGroupUnitFromEnd(auto90CF3A39_g, auto90CF3A39_u);
                if (auto90CF3A39_var == null) { break; }
                UnitSetOwner(auto90CF3A39_var, 0, false);
                UnitBehaviorAdd(auto90CF3A39_var, "UnitSuicideCrystalPrecursor", auto90CF3A39_var, 1);
                autoBF6691EE_g = PlayerGroupAll();
                autoBF6691EE_var = -1;
                while (true) {
                    autoBF6691EE_var = PlayerGroupNextPlayer(autoBF6691EE_g, autoBF6691EE_var);
                    if (autoBF6691EE_var < 0) { break; }
                    libNtve_gf_ShareVisionofUnit(auto90CF3A39_var, true, autoBF6691EE_var);
                }
            }
            auto5DD8C864_g = UnitGroup("StagingAreaDecal", lv_localPlayer, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
            auto5DD8C864_u = UnitGroupCount(auto5DD8C864_g, c_unitCountAll);
            for (;; auto5DD8C864_u -= 1) {
                auto5DD8C864_var = UnitGroupUnitFromEnd(auto5DD8C864_g, auto5DD8C864_u);
                if (auto5DD8C864_var == null) { break; }
                UnitSetOwner(auto5DD8C864_var, 0, false);
                UnitBehaviorAdd(auto5DD8C864_var, "UnitSuicideCrystalPrecursor", auto5DD8C864_var, 1);
                auto78104C15_g = PlayerGroupAll();
                auto78104C15_var = -1;
                while (true) {
                    auto78104C15_var = PlayerGroupNextPlayer(auto78104C15_g, auto78104C15_var);
                    if (auto78104C15_var < 0) { break; }
                    libNtve_gf_ShareVisionofUnit(auto5DD8C864_var, true, auto78104C15_var);
                }
            }
            if ((lib7A9A9B22_gv_playerNPC[lp_player] >= 0)) {
                auto2D8BA7FC_g = UnitGroupFilterPlayer(lib7A9A9B22_gf_StagingAreaSpawns(), lv_localPlayer, 0);
                auto2D8BA7FC_u = UnitGroupCount(auto2D8BA7FC_g, c_unitCountAll);
                for (;; auto2D8BA7FC_u -= 1) {
                    auto2D8BA7FC_var = UnitGroupUnitFromEnd(auto2D8BA7FC_g, auto2D8BA7FC_u);
                    if (auto2D8BA7FC_var == null) { break; }
                    UnitSetOwner(auto2D8BA7FC_var, lib7A9A9B22_gv_playerNPC[lv_localPlayer], false);
                }
                TechTreeAbilityAllow(lib7A9A9B22_gv_playerNPC[lp_player], AbilityCommand("CorruptorStetmannRespawn", 0), false);
                TechTreeAbilityAllow(lib7A9A9B22_gv_playerNPC[lp_player], AbilityCommand("HydraliskStetmannRespawn", 0), false);
                TechTreeAbilityAllow(lib7A9A9B22_gv_playerNPC[lp_player], AbilityCommand("InfestorStetmannRespawn", 0), false);
                TechTreeAbilityAllow(lib7A9A9B22_gv_playerNPC[lp_player], AbilityCommand("UltraliskStetmannRespawn", 0), false);
                TechTreeAbilityAllow(lib7A9A9B22_gv_playerNPC[lp_player], AbilityCommand("ZerglingStetmannRespawn", 0), false);
                libNtve_gf_SetUpgradeLevelForPlayer(lib7A9A9B22_gv_playerNPC[lp_player], "NovaTacticalStealthSuit", TechTreeUpgradeCount(lp_player, "NovaTacticalStealthSuit", c_techCountCompleteOnly));
                libNtve_gf_SetUpgradeLevelForPlayer(lib7A9A9B22_gv_playerNPC[lp_player], "NovaTacticalStealthSuit", TechTreeUpgradeCount(lp_player, "NovaTurbojetJumpsuit", c_techCountCompleteOnly));
                libNtve_gf_SetUpgradeLevelForPlayer(lib7A9A9B22_gv_playerNPC[lp_player], "NovaTacticalStealthSuit", TechTreeUpgradeCount(lp_player, "NovaShotgun", c_techCountCompleteOnly));
                libNtve_gf_SetUpgradeLevelForPlayer(lib7A9A9B22_gv_playerNPC[lp_player], "NovaTacticalStealthSuit", TechTreeUpgradeCount(lp_player, "NovaRifle", c_techCountCompleteOnly));
            }

            UnitGroupAddUnitGroup(lv_delayedRemoval, UnitGroupFilterPlayer(lib7A9A9B22_gv_stagingAreaTeamColor, lv_localPlayer, 0));
            auto2DB9356F_g = lv_delayedRemoval;
            auto2DB9356F_u = UnitGroupCount(auto2DB9356F_g, c_unitCountAll);
            for (;; auto2DB9356F_u -= 1) {
                auto2DB9356F_var = UnitGroupUnitFromEnd(auto2DB9356F_g, auto2DB9356F_u);
                if (auto2DB9356F_var == null) { break; }
                UnitSetOwner(auto2DB9356F_var, 0, false);
                libNtve_gf_SendActorMessageToUnit(auto2DB9356F_var, "SetOpacity 0.000000 1.500000");
                autoEAF45AC6_g = PlayerGroupAll();
                autoEAF45AC6_var = -1;
                while (true) {
                    autoEAF45AC6_var = PlayerGroupNextPlayer(autoEAF45AC6_g, autoEAF45AC6_var);
                    if (autoEAF45AC6_var < 0) { break; }
                    libNtve_gf_ShareVisionofUnit(auto2DB9356F_var, true, autoEAF45AC6_var);
                }
            }
            autoB3973BD3_g = UnitGroupFilterPlayer(lib7A9A9B22_gv_stagingAreaGrid, lv_localPlayer, 0);
            autoB3973BD3_u = UnitGroupCount(autoB3973BD3_g, c_unitCountAll);
            for (;; autoB3973BD3_u -= 1) {
                autoB3973BD3_var = UnitGroupUnitFromEnd(autoB3973BD3_g, autoB3973BD3_u);
                if (autoB3973BD3_var == null) { break; }
                UnitSetOwner(autoB3973BD3_var, 0, false);
            }
            Wait(4.0, c_timeGame);
            autoFE68B470_g = lv_delayedRemoval;
            autoFE68B470_u = UnitGroupCount(autoFE68B470_g, c_unitCountAll);
            for (;; autoFE68B470_u -= 1) {
                autoFE68B470_var = UnitGroupUnitFromEnd(autoFE68B470_g, autoFE68B470_u);
                if (autoFE68B470_var == null) { break; }
                UnitRemove(autoFE68B470_var);
            }
        }

    }

    return true;
}

void lib7A9A9B22_gf_StagingAreaRecallWorkers (playergroup lp_players, bool lp_panCamera) {
    // Automatic Variable Declarations
    playergroup auto7242EAA8_g;
    int auto7242EAA8_var;
    unitgroup autoEC80D441_g;
    int autoEC80D441_u;
    unit autoEC80D441_var;

    // Implementation
    auto7242EAA8_g = lp_players;
    auto7242EAA8_var = -1;
    while (true) {
        auto7242EAA8_var = PlayerGroupNextPlayer(auto7242EAA8_g, auto7242EAA8_var);
        if (auto7242EAA8_var < 0) { break; }
        if ((UnitGroupCount(UnitGroupFilterPlayer(lib7A9A9B22_gf_StagingAreas(), auto7242EAA8_var, 0), c_unitCountAlive) >= 1) && (UnitGroupCount(libDDE92A83_gf_PlayerWorkers(auto7242EAA8_var), c_unitCountAlive) >= 1)) {
            autoEC80D441_g = libDDE92A83_gf_PlayerWorkers(auto7242EAA8_var);
            autoEC80D441_u = UnitGroupCount(autoEC80D441_g, c_unitCountAll);
            for (;; autoEC80D441_u -= 1) {
                autoEC80D441_var = UnitGroupUnitFromEnd(autoEC80D441_g, autoEC80D441_u);
                if (autoEC80D441_var == null) { break; }
                UnitSetPosition(autoEC80D441_var, UnitGetPosition(UnitGroupUnit(UnitGroupFilterPlayer(lib7A9A9B22_gf_StagingAreas(), auto7242EAA8_var, 0), 1)), false);
                UnitSetFacing(autoEC80D441_var, UnitGetCustomValue(UnitGroupUnit(UnitGroupFilterPlayer(lib7A9A9B22_gf_StagingAreas(), auto7242EAA8_var, 0), 1), lib7A9A9B22_gv_customValueUnitSpawnAreaUnitFacing), 0.0);
            }
        }

        if ((lp_panCamera == true)) {
            CameraPan(auto7242EAA8_var, RegionGetCenter(RegionPlayableMap()), 0.0, -1, 10.0, false);
            if ((UnitGroupCount(UnitGroupFilterPlayer(lib7A9A9B22_gf_StagingAreas(), auto7242EAA8_var, 0), c_unitCountAlive) >= 1)) {
                CameraPan(auto7242EAA8_var, PointWithOffset(UnitGetPosition(UnitGroupUnit(UnitGroupFilterPlayer(lib7A9A9B22_gf_StagingAreas(), auto7242EAA8_var, 0), 1)), 0.0, -1.63), 0.0, -1, 10.0, false);
            }

        }

    }
}

void lib7A9A9B22_gf_StagingAreaTestUnit (string lp_unitA, string lp_unitB, int lp_value) {
    // Variable Declarations
    const fixed lv_distance = 3.0;
    int lv_i;
    int lv_p;

    // Automatic Variable Declarations
    playergroup autoC817C699_g;
    int autoC817C699_var;
    int autoE96655FC_n;
    int autoE96655FC_i;
    int autoDE88A7F7_val;
    playergroup auto9DE0E3D1_g;
    int auto9DE0E3D1_var;
    int auto5A7D0053_n;
    int auto5A7D0053_i;
    int auto9D6314CF_val;
    playergroup autoEC5A07B6_g;
    int autoEC5A07B6_var;
    int auto8B8C951E_n;
    int auto8B8C951E_i;
    int auto6567C79F_val;

    // Variable Initialization

    // Implementation
    autoC817C699_g = lib7A9A9B22_gf_StagingAreaTeam(0);
    autoC817C699_var = -1;
    while (true) {
        autoC817C699_var = PlayerGroupNextPlayer(autoC817C699_g, autoC817C699_var);
        if (autoC817C699_var < 0) { break; }
        lv_p = autoC817C699_var;
        if ((lp_unitA != null)) {
            autoE96655FC_n = FixedToInt((IntToFixed(lp_value) / IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitA, "CostResource[" + IntToString(0) + "]", lv_p))));
            for (autoE96655FC_i = 1; autoE96655FC_i <= autoE96655FC_n; autoE96655FC_i += 1) {
                lv_i = RandomInt(0, 3);
                autoDE88A7F7_val = lv_i;
                if (autoDE88A7F7_val == 0) {
                    UnitCreate(1, lp_unitA, c_unitCreateIgnorePlacement, lv_p, RegionRandomPoint(RegionCircle(PointWithOffset(UnitGetPosition(UnitGroupUnit(UnitGroupFilterPlayer(lib7A9A9B22_gf_StagingAreas(), lv_p, 0), 1)), lv_distance, (0.0 - lv_distance)), 5.0)), 225.0);
                }
                else if (autoDE88A7F7_val == 1) {
                    UnitCreate(1, lp_unitA, c_unitCreateIgnorePlacement, lv_p, RegionRandomPoint(RegionCircle(PointWithOffset(UnitGetPosition(UnitGroupUnit(UnitGroupFilterPlayer(lib7A9A9B22_gf_StagingAreas(), lv_p, 0), 1)), (0.0 - lv_distance), lv_distance), 5.0)), 225.0);
                }
                else if (autoDE88A7F7_val == 2) {
                    UnitCreate(1, lp_unitA, c_unitCreateIgnorePlacement, lv_p, RegionRandomPoint(RegionCircle(PointWithOffset(UnitGetPosition(UnitGroupUnit(UnitGroupFilterPlayer(lib7A9A9B22_gf_StagingAreas(), lv_p, 0), 1)), (0.0 - (lv_distance * 2.0)), (lv_distance * 2.0)), 5.0)), 225.0);
                }
                else if (autoDE88A7F7_val == 3) {
                    UnitCreate(1, lp_unitA, c_unitCreateIgnorePlacement, lv_p, RegionRandomPoint(RegionCircle(PointWithOffset(UnitGetPosition(UnitGroupUnit(UnitGroupFilterPlayer(lib7A9A9B22_gf_StagingAreas(), lv_p, 0), 1)), (lv_distance * 2.0), (0.0 - (lv_distance * 2.0))), 5.0)), 225.0);
                }
                else {
                }
                UnitGroupAdd(lib7A9A9B22_gv_stagingAreaSpawners, UnitLastCreated());
                UnitCreateEffectUnit(UnitLastCreated(), "UnitSpawner", UnitLastCreated());
            }
        }

    }
    auto9DE0E3D1_g = lib7A9A9B22_gf_StagingAreaTeam(1);
    auto9DE0E3D1_var = -1;
    while (true) {
        auto9DE0E3D1_var = PlayerGroupNextPlayer(auto9DE0E3D1_g, auto9DE0E3D1_var);
        if (auto9DE0E3D1_var < 0) { break; }
        lv_p = auto9DE0E3D1_var;
        if ((lp_unitB != null)) {
            auto5A7D0053_n = FixedToInt((IntToFixed(lp_value) / IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitB, "CostResource[" + IntToString(0) + "]", lv_p))));
            for (auto5A7D0053_i = 1; auto5A7D0053_i <= auto5A7D0053_n; auto5A7D0053_i += 1) {
                lv_i = RandomInt(0, 3);
                auto9D6314CF_val = lv_i;
                if (auto9D6314CF_val == 0) {
                    UnitCreate(1, lp_unitB, c_unitCreateIgnorePlacement, lv_p, RegionRandomPoint(RegionCircle(PointWithOffset(UnitGetPosition(UnitGroupUnit(UnitGroupFilterPlayer(lib7A9A9B22_gf_StagingAreas(), lv_p, 0), 1)), lv_distance, (0.0 - lv_distance)), 5.0)), 225.0);
                }
                else if (auto9D6314CF_val == 1) {
                    UnitCreate(1, lp_unitB, c_unitCreateIgnorePlacement, lv_p, RegionRandomPoint(RegionCircle(PointWithOffset(UnitGetPosition(UnitGroupUnit(UnitGroupFilterPlayer(lib7A9A9B22_gf_StagingAreas(), lv_p, 0), 1)), (0.0 - lv_distance), lv_distance), 5.0)), 225.0);
                }
                else if (auto9D6314CF_val == 2) {
                    UnitCreate(1, lp_unitB, c_unitCreateIgnorePlacement, lv_p, RegionRandomPoint(RegionCircle(PointWithOffset(UnitGetPosition(UnitGroupUnit(UnitGroupFilterPlayer(lib7A9A9B22_gf_StagingAreas(), lv_p, 0), 1)), (0.0 - (lv_distance * 2.0)), (lv_distance * 2.0)), 5.0)), 225.0);
                }
                else if (auto9D6314CF_val == 3) {
                    UnitCreate(1, lp_unitB, c_unitCreateIgnorePlacement, lv_p, RegionRandomPoint(RegionCircle(PointWithOffset(UnitGetPosition(UnitGroupUnit(UnitGroupFilterPlayer(lib7A9A9B22_gf_StagingAreas(), lv_p, 0), 1)), (lv_distance * 2.0), (0.0 - (lv_distance * 2.0))), 5.0)), 225.0);
                }
                else {
                }
                UnitGroupAdd(lib7A9A9B22_gv_stagingAreaSpawners, UnitLastCreated());
                UnitCreateEffectUnit(UnitLastCreated(), "UnitSpawner", UnitLastCreated());
            }
        }

    }
    if ((PlayerGroupCount(lib7A9A9B22_gv_stagingAreaTeamInternal[0]) == 0) && (PlayerGroupCount(lib7A9A9B22_gv_stagingAreaTeamInternal[1]) == 0) && (PlayerGroupCount(lib7A9A9B22_gv_stagingAreaTeamInternal[2]) == 0) && (PlayerGroupCount(lib7A9A9B22_gv_stagingAreaTeamInternal[3]) == 0)) {
        autoEC5A07B6_g = lib7A9A9B22_gv_stagingAreaPlayers;
        autoEC5A07B6_var = -1;
        while (true) {
            autoEC5A07B6_var = PlayerGroupNextPlayer(autoEC5A07B6_g, autoEC5A07B6_var);
            if (autoEC5A07B6_var < 0) { break; }
            lv_p = autoEC5A07B6_var;
            if ((lp_unitA != null)) {
                auto8B8C951E_n = FixedToInt((IntToFixed(lp_value) / IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitA, "CostResource[" + IntToString(0) + "]", lv_p))));
                for (auto8B8C951E_i = 1; auto8B8C951E_i <= auto8B8C951E_n; auto8B8C951E_i += 1) {
                    lv_i = RandomInt(0, 3);
                    auto6567C79F_val = lv_i;
                    if (auto6567C79F_val == 0) {
                        UnitCreate(1, lp_unitA, c_unitCreateIgnorePlacement, lv_p, RegionRandomPoint(RegionCircle(PointWithOffset(UnitGetPosition(UnitGroupUnit(UnitGroupFilterPlayer(lib7A9A9B22_gf_StagingAreas(), lv_p, 0), 1)), lv_distance, (0.0 - lv_distance)), 5.0)), 225.0);
                    }
                    else if (auto6567C79F_val == 1) {
                        UnitCreate(1, lp_unitA, c_unitCreateIgnorePlacement, lv_p, RegionRandomPoint(RegionCircle(PointWithOffset(UnitGetPosition(UnitGroupUnit(UnitGroupFilterPlayer(lib7A9A9B22_gf_StagingAreas(), lv_p, 0), 1)), (0.0 - lv_distance), lv_distance), 5.0)), 225.0);
                    }
                    else if (auto6567C79F_val == 2) {
                        UnitCreate(1, lp_unitA, c_unitCreateIgnorePlacement, lv_p, RegionRandomPoint(RegionCircle(PointWithOffset(UnitGetPosition(UnitGroupUnit(UnitGroupFilterPlayer(lib7A9A9B22_gf_StagingAreas(), lv_p, 0), 1)), (0.0 - (lv_distance * 2.0)), (lv_distance * 2.0)), 5.0)), 225.0);
                    }
                    else if (auto6567C79F_val == 3) {
                        UnitCreate(1, lp_unitA, c_unitCreateIgnorePlacement, lv_p, RegionRandomPoint(RegionCircle(PointWithOffset(UnitGetPosition(UnitGroupUnit(UnitGroupFilterPlayer(lib7A9A9B22_gf_StagingAreas(), lv_p, 0), 1)), (lv_distance * 2.0), (0.0 - (lv_distance * 2.0))), 5.0)), 225.0);
                    }
                    else {
                    }
                    UnitGroupAdd(lib7A9A9B22_gv_stagingAreaSpawners, UnitLastCreated());
                    UnitCreateEffectUnit(UnitLastCreated(), "UnitSpawner", UnitLastCreated());
                }
            }

        }
    }

}

void lib7A9A9B22_gf_StagingAreaRemoveMines () {
    // Automatic Variable Declarations
    unitgroup auto69B0FF5C_g;
    int auto69B0FF5C_u;
    unit auto69B0FF5C_var;
    unitgroup auto64220074_g;
    int auto64220074_u;
    unit auto64220074_var;

    // Implementation
    lib7A9A9B22_gv_mines = false;
    auto69B0FF5C_g = lib7A9A9B22_gv_mineralFields;
    auto69B0FF5C_u = UnitGroupCount(auto69B0FF5C_g, c_unitCountAll);
    for (;; auto69B0FF5C_u -= 1) {
        auto69B0FF5C_var = UnitGroupUnitFromEnd(auto69B0FF5C_g, auto69B0FF5C_u);
        if (auto69B0FF5C_var == null) { break; }
        UnitRemove(auto69B0FF5C_var);
    }
    auto64220074_g = lib7A9A9B22_gv_mineralMines;
    auto64220074_u = UnitGroupCount(auto64220074_g, c_unitCountAll);
    for (;; auto64220074_u -= 1) {
        auto64220074_var = UnitGroupUnitFromEnd(auto64220074_g, auto64220074_u);
        if (auto64220074_var == null) { break; }
        UnitRemove(auto64220074_var);
    }
}

void lib7A9A9B22_gf_SetPlayerNPC (int lp_player, int lp_nPC) {
    // Automatic Variable Declarations
    // Implementation
    lib7A9A9B22_gv_playerNPC[lp_player] = lp_nPC;
}

void lib7A9A9B22_gf_AddMutationBonusUnit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreateEffectUnit(lp_unit, "UnitSpawner", lp_unit);
    UnitAbilityShow(lp_unit, "Sell50", false);
    UnitAbilityShow(lp_unit, "Sell60", false);
    UnitAbilityShow(lp_unit, "Sell70", false);
    UnitAbilityShow(lp_unit, "SellFull", false);
    UnitAbilityShow(lp_unit, "SellNone", false);
}

void lib7A9A9B22_gf_AddAutocastsHereCopyAbilityAutocastSettings (unit lp_source, unit lp_target) {
    // Automatic Variable Declarations
    string auto097A02B0_val;

    // Implementation
    auto097A02B0_val = UnitGetType(lp_target);
    if (auto097A02B0_val == "Zealot") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("Charge", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Stalker") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("Blink", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Sentry") {
        UnitCreateEffectUnit(lp_target, "CopyAutocast", lp_source);
    }
    else if (auto097A02B0_val == "Mothership") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("TemporalField", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "MothershipCore") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("TemporalField", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Oracle") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("OracleWeapon", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "DarkTemplar") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("DarkTemplarBlink", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("DarkTemplarBlinkRetreat", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "HighTemplar") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("Feedback", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("PsiStorm", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Phoenix") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("GravitonBeam", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Disruptor") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("PurificationNovaTargeted", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Adept") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("AdeptPhaseShift", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "VoidRay") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("VoidRaySwarmDamageBoost", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Marine") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("Stimpack", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Marauder") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("StimpackMarauder", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Ghost") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("ChannelSnipe", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("EMP", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("GhostCloak", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "GhostAlternate") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("ChannelSnipe", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("EMP", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("GhostCloak", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "GhostNova") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("ChannelSnipe", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("EMP", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("GhostCloak", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Medivac") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("MedivacHeal", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("MedivacSpeedBoost", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "VikingAssault") {
        lib7A9A9B22_gf_CopyAutocastModeSeparateAbilities(AbilityCommand("VikingFighterPlaceFromVikingAssault", 0), AbilityCommand("FighterMode", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "VikingFighter") {
        lib7A9A9B22_gf_CopyAutocastModeSeparateAbilities(AbilityCommand("VikingAssaultPlaceFromVikingFighter", 0), AbilityCommand("AssaultMode", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Banshee") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("BansheeCloak", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Raven") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("BuildAutoTurret", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("PlacePointDefenseDrone", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("SeekerMissile", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("RavenShredderMissile", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("RavenScramblerMissile", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("RavenRepairDrone", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "SiegeTank") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("SiegeMode", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Battlecruiser") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("Yamato", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("Hyperjump", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Cyclone") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("LockOn", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Liberator") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("LiberatorAGTarget", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Reaper") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("KD8Charge", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "VultureStarlight") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("VultureSpiderMines", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "ThorAP") {
        if ((UnitHasBehavior2(lp_source, "ThorAAToggle") == true)) {
            UnitIssueOrder(lp_target, Order(AbilityCommand("ThorAAToggle", 0)), c_orderQueueReplace);
        }

    }
    else if (auto097A02B0_val == "Thor") {
        if ((UnitHasBehavior2(lp_source, "ThorAAToggle") == true)) {
            UnitIssueOrder(lp_target, Order(AbilityCommand("ThorAAToggle", 0)), c_orderQueueReplace);
        }

    }
    else if (auto097A02B0_val == "Baneling") {
        if ((UnitHasBehavior2(lp_source, "VolatileBurstBuilding") == false)) {
            UnitBehaviorAdd(lp_target, "VolatileBurstBuildingTurnOff", lp_target, 1);
        }

    }
    else if (auto097A02B0_val == "Roach") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("BurrowRoachDown", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "SwarmHostMP") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("SpawnLocustsTargeted", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("MorphToSwarmHostBurrowedMP", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "LurkerMP") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("BurrowLurkerMPDown", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Queen") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("Transfusion", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Corruptor") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("Corruption", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("CausticSpray", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Ravager") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("RavagerCorrosiveBile", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Infestor") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("InfestedTerrans", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("FungalGrowth", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("FungalGrowth", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Viper") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("Yoink", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("BlindingCloud", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("ParasiticBomb", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "VileRoach") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("VileRoachBurrow", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "RavagerAbathur") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("RavagerCorrosiveBile", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "ViperAbathur") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("Yoink", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("ViperDisablingCloud", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("ParasiticBomb", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("ViperAbathurConsumption", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "SwarmQueenStarlight") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("SwarmQueenRapidTransfusion", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("SwarmQueenBioMechanicalTransfusion", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "DevourerStarlight") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("DevourerStarlightCorrosiveAcid", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "HeroAlarakWaveUnit") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("AlarakDeadlyChargeTargeted", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("AlarakDestructionWave", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("AlarakEmpowerMe", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Slayer") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("SlayerBlink", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "HavocStarlight") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("HavocStarlightTargetLock", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "AscendantStarlight") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("AscendantStarlightMindBlast", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("AscendantStarlightPsionicOrb", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("AscendantStarlightSacrifice", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "MothershipTaldarim") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("MothershipTaldarimThermalLance", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "HonorGuard") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("Charge", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("HonorGuardWhirlwind", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "HighArchon") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("PsiStorm", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("Feedback", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "HighTemplarArtanis") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("Feedback", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("PsiStorm", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "PhoenixArtanis") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("GravitonBeam", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "PurifierTempest") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("PurifierTempestDisintegration", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "DehakaHero") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("DehakaJump", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("DehakaRoar", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("DehakaEat", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("DehakaScorchingBreath", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "DehakaPrimalUltralisk") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("DehakaPrimalUltraliskBrutalCharge", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "DehakaTyrannozor") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("DehakaTyrannozorBarrageofSpikes", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "DehakaPrimalGuardian") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("DehakaPrimalGuardianExplosiveSpores", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "FenixFlyer") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("FenixFlyerStasisField", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "FenixPraetor") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("FenixPraetorShieldCapacitor", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("FenixPraetorThunderousCharge", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("FenixPraetorWhirlwind", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "FenixWalker") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("FenixWalkerSolarCannon", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("FenixWalkerSolariteFlare", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "PurifierDisruptor") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("PurifierDisruptorPurificationNova", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "HornerSovereignBattlecruiser") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("HornerTacticalJumpFree", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("HornerSovereignBattlecruiserOverchargedReactor", lp_source, lp_target);
        lib7A9A9B22_gf_CopyToggleMode("HornerSovereignBattlecruiserOverchargedReactor", AbilityCommand("HornerSovereignBattlecruiserOverchargedReactor", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "HornerReaper") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("HornerReaperJetPackOverdrive", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("HornerReaperKD8Charge", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "HornerHellion") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("HornerHellionTarBombs", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "HornerAsteriaWraith") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("HornerTacticalJump", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("HornerAsteriaWraithCloak", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "HornerDeimosVikingAssault") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("HornerTacticalJump", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("HornerDeimosVikingFighterMode", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "HornerDeimosVikingFighter") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("HornerTacticalJump", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("HornerDeimosVikingAssaultMode", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("HornerDeimosVikingWILDMissiles", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "HornerAssaultGalleon") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("HornerAssaultGalleonTrainHellbat", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("HornerAssaultGalleonTrainHellion", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("HornerAssaultGalleonTrainReaper", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("HornerAssaultGalleonTrainWidowMine", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "HornerAssaultGalleonUpgraded") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("HornerAssaultGalleonTrainHellbat", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("HornerAssaultGalleonTrainHellion", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("HornerAssaultGalleonTrainReaper", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("HornerAssaultGalleonTrainWidowMine", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "HornerTheiaRaven") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("HornerTacticalJump", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("HornerTheiaRavenAnalyzeWeakness", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Energizer") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("EnergizerChronoBeam", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("EnergizerReclamationStarlight", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Annihilator") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("AnnihilatorShadowCannon", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Mirage") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("MirageGravitonBeam", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "HeroKerriganWaveUnit") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("KerriganLeapingStrike", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("KerriganLeapingEvasion", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("KerriganPsionicShift", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastModeWithDelay(AbilityCommand("KerriganKineticBlast", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastModeWithDelay(AbilityCommand("KerriganPsionicLift", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "KerriganQueen") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("ZagaraQueenTransfusion", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "HydraliskKerrigan") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("HydraliskFrenzyStarlight", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "MarauderMengsk") {
        UnitBehaviorAdd(lp_target, "RecentlyCreated", lp_target, 1);
        UnitSetPropertyFixed(lp_target, c_unitPropXP, UnitGetPropertyFixed(lp_source, c_unitPropXP, c_unitPropCurrent));
        UnitBehaviorRemove(lp_target, "MengskVeterancyPassive", 1);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("MarauderMengskAttackSpeedBoost", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "GhostMengsk") {
        UnitBehaviorAdd(lp_target, "RecentlyCreated", lp_target, 1);
        UnitSetPropertyFixed(lp_target, c_unitPropXP, UnitGetPropertyFixed(lp_source, c_unitPropXP, c_unitPropCurrent));
        UnitBehaviorRemove(lp_target, "MengskVeterancyPassive", 1);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("GhostMengskIrradiateBigDamage", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("GhostMengskIrradiateSmallDamage", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("GhostMengskEMPBig", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("GhostMengskEMPLongStun", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("GhostMengskEMPShortStun", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("GhostMengskCloak", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "VikingMengskAssault") {
        UnitBehaviorAdd(lp_target, "RecentlyCreated", lp_target, 1);
        UnitSetPropertyFixed(lp_target, c_unitPropXP, UnitGetPropertyFixed(lp_source, c_unitPropXP, c_unitPropCurrent));
        UnitBehaviorRemove(lp_target, "MengskVeterancyPassive", 1);
        UnitCreateEffectUnit(lp_target, "VikingMengskWeaponChange", lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("AssaultModeMengsk", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("FighterModeMengsk", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "VikingMengskFighter") {
        UnitBehaviorAdd(lp_target, "RecentlyCreated", lp_target, 1);
        UnitSetPropertyFixed(lp_target, c_unitPropXP, UnitGetPropertyFixed(lp_source, c_unitPropXP, c_unitPropCurrent));
        UnitBehaviorRemove(lp_target, "MengskVeterancyPassive", 1);
        UnitCreateEffectUnit(lp_target, "VikingMengskWeaponChange", lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("AssaultModeMengsk", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("FighterModeMengsk", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "SiegeTankMengsk") {
        UnitBehaviorAdd(lp_target, "RecentlyCreated", lp_target, 1);
        UnitSetPropertyFixed(lp_target, c_unitPropXP, UnitGetPropertyFixed(lp_source, c_unitPropXP, c_unitPropCurrent));
        UnitBehaviorRemove(lp_target, "MengskVeterancyPassive", 1);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("SiegeModeMengsk", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "ThorMengsk") {
        UnitBehaviorAdd(lp_target, "RecentlyCreated", lp_target, 1);
        UnitSetPropertyFixed(lp_target, c_unitPropXP, UnitGetPropertyFixed(lp_source, c_unitPropXP, c_unitPropCurrent));
        UnitBehaviorRemove(lp_target, "MengskVeterancyPassive", 1);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("ThorMengskSiegeTargeted", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("ThorMengskSiegeTargetedIncreasedRange", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("ThorMengskSiegeTargetedLargeAoE", 0), lp_source, lp_target);
        if ((UnitHasBehavior2(lp_source, "ThorMengskAAToggle") == false)) {
            UnitBehaviorAdd(lp_target, "ThorMengskAAToggleDelay", lp_target, 1);
        }

    }
    else if (auto097A02B0_val == "BattlecruiserMengsk") {
        UnitBehaviorAdd(lp_target, "RecentlyCreated", lp_target, 1);
        UnitSetPropertyFixed(lp_target, c_unitPropXP, UnitGetPropertyFixed(lp_source, c_unitPropXP, c_unitPropCurrent));
        UnitBehaviorRemove(lp_target, "MengskVeterancyPassive", 1);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("BattlecruiserMengskYamato", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("BattlecruiserMengskYamatoTwoCharges", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("BattlecruiserMengskHyperjump", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("BattlecruiserMengskHyperjumpTwoCharges", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "MedivacMengsk") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("MedivacMengskHeal", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("MedivacMengskDoubleBeamHeal", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("MedivacMengskSpeedBoost", 0), lp_source, lp_target);
        if ((UnitHasBehavior2(lp_source, "MedivacMengskSiegeTankAirlift") == true)) {
            lib7A9A9B22_gf_CopyCargoUnits(lp_source, lp_target);
        }

    }
    else if (auto097A02B0_val == "RavenMengsk") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("RavenMengskMorphtoRavenMengskSieged", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "HeroNovaWaveUnit") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("NovaPenetratingBlast", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("NovaSniperRound", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("NovaBlink", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "EliteMarine") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("EliteMarineStimpack", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "SpecOpsGhost") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("SpecOpsGhostSnipe", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("SpecOpsGhostEMP", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "CovertBanshee") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("CovertBansheeRocketBarrage", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "RavenTypeII") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("RailgunTurret", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("BioMechanicalRepairDrone", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("PredatorMissile", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "HeavySiegeTank") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("HeavySiegeTankSiege", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "RaidLiberator") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("RaidLiberatorSiegeTarget", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "HoloDecoy") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("NovaDashAttack", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "MedicStarlight") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("MedicStarlightHeal", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("MedicStarlightHealMechanical", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "VultureStarlight") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("VultureSpiderMines", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "DuskWing") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("DuskWingBansheeCloakingField", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "RaynorHyperion") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("RaynorHyperionYamatoCannon", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("RaynorHyperionHyperjump", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("RaynorHyperionPointDefenseDrone", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "SiegeTankRaynor") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("SiegeMode", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "BattlecruiserRaynor") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("Yamato", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("Hyperjump", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Spectre") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("Obliterate", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("UltrasonicPulse", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("RogueGhostCloak", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "InfestedDiamondbackStarlight") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("InfestedDiamondbackStarlightSnare", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "InfestedBansheeStarlight") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("InfestedBansheeStarlightBurrowDown", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("InfestedBansheeStarlightCloak", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "InfestedLiberatorStarlight") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("InfestedLiberatorStarlightViralSwarm", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "InfestedSiegeTankStarlight") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("InfestedSiegeTankStarlightRoot", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "BroodQueenStarlight") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("BroodQueenStarlightOcularSymbiote", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("BroodQueenStarlightSpawnBroodlings", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("BroodQueenFungalGrowth", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "ApocaliskStarlight") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("ApocaliskCharge", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("ApocaliskClusterRockets", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "SwannThor") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("ThorBarrageCannon", 0), lp_source, lp_target);
        if ((UnitHasBehavior2(lp_source, "ThorAAToggle") == true)) {
            UnitBehaviorAdd(lp_target, "ThorAAToggleDelay", lp_target, 1);
        }

    }
    else if (auto097A02B0_val == "SiegeTankSwann") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("SiegeMode", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "ScienceVesselStarlight") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("ScienceVesselHeal", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("ScienceVesselIrradiate", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("ScienceVesselDefensiveMatrix", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "SwannCyclone") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("SwannCycloneLockOn", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "WraithStarlight") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("WraithCloak", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "TychusSam") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("TychusSamDemolitionCharge", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusSamLarsCorpG7Charges", lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusSamMoebiusRestraintMatrix", lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusSamProcyonShadeSuit", lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusSamEnhancedHostilitiesKit", lp_source, lp_target);
    }
    else if (auto097A02B0_val == "TychusNux") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("TychusNuxUltrasonicPulse", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("TychusNuxUltrasonicPulseUpgraded", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusNuxT4CloudburstShells", lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusNuxUltrasonicBooster", lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusNuxCrystallineAmplifiers", lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusNuxN3Networking", lp_source, lp_target);
    }
    else if (auto097A02B0_val == "TychusVega") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("TychusVegaDominate", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("TychusVegaPsiProjector", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusVegaPsionicMotivator", lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusVegaNeuralDisruptionDevice", lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusVegaPsiProjector", lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusVegaType88Persuader", lp_source, lp_target);
    }
    else if (auto097A02B0_val == "TychusRattlesnake") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("TychusRattlesnakeDeployRevitalizer", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("TychusRattlesnakeSecretStashStimpackUse", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusRattlesnakeUmojanSignalModulator", lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusRattlesnakeMoebiusAggressionBlend", lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusRattlesnakeSecretStashStimpack", lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusRattlesnakeHammerMunitions", lp_source, lp_target);
    }
    else if (auto097A02B0_val == "TychusBlaze") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("TychusBlazeOilSpill", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("TychusBlazeOilSpillUpgraded", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusBlazeHighCapacityContainers", lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusBlazeHadesOil", lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusBlazeWildflameFuelAdditives", lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusBlazeXCMC670", lp_source, lp_target);
    }
    else if (auto097A02B0_val == "TychusSirius") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("TychusSiriusDeployWarhoundTurret", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusSiriusSA55ThunderboltMissiles", lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusSiriusMoebiusM34TerrorRounds", lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusSiriusD99Detonator", lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusSiriusUmojanTurretFrame", lp_source, lp_target);
    }
    else if (auto097A02B0_val == "TychusNikara") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("TychusNikaraHeal", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("TychusNikaraHealUpgraded", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("TychusNikaraRestorativeBurst", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("TychusNikaraXM77MatrixGenerator", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusNikaraUmojanRepairNanites", lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusNikaraProcyonSerum", lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusNikaraProcyonTwinHealBeamGauntlet", lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusNikaraXM77MatrixGenerator", lp_source, lp_target);
    }
    else if (auto097A02B0_val == "TychusTychus") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("TychusTychusShredderGrenade", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusTychusKD9aImplosionCore", lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusTychusVanadiumShell", lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusTychusKelMorianRipperRounds", lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusTychusSureShotNetworkedHelmet", lp_source, lp_target);
    }
    else if (auto097A02B0_val == "TychusCannonball") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("TychusCannonballHeavyImpact", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("TychusCannonballHeavyImpactUpgraded", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusCannonballX71ImpactBoots", lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusCannonballCriticalResponseSystem", lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusCannonballRedlinePowerCells", lp_source, lp_target);
        lib7A9A9B22_gf_CopyBehavior("TychusCannonballMALICEAmmunition", lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Centurion") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("CenturionShadowCharge", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("CenturionDarkcoil", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "StalkerVorazun") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("Blink", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "DarkTemplarVorazun") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("ShadowFury", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("DarkTemplarBlink", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("DarkTemplarBlinkRetreat", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("BloodHunterVoidStasis", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "DarkArchonStarlight") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("DarkArchonStarlightConfusion", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("DarkArchonStarlightMindControl", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Corsair") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("CorsairDisruptionWeb", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "VorazunOracle") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("OracleWeapon", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "HeroZagaraWaveUnit") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("ZagaraBanelingBarrage", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "ZagaraQueen") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("ZagaraQueenTransfusion", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "Splitterling") {
        if ((UnitHasBehavior2(lp_source, "VolatileBurstBuilding") == false)) {
            UnitBehaviorAdd(lp_target, "VolatileBurstBuildingTurnOff", lp_target, 1);
        }

    }
    else if (auto097A02B0_val == "CorruptorZagara") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("Corruption", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "ZeratulCoop") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("ZeratulBlink", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("ZeratulBlinkAggressive", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("ZeratulShadowCleave", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "ZeratulStalker") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("ZeratulStalkerBlink", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "BanelingStetmann") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("BanelingStetmannJump", 0), lp_source, lp_target);
        if ((UnitHasBehavior2(lp_source, "VolatileBurstBuilding") == false)) {
            UnitBehaviorAdd(lp_target, "VolatileBurstBuildingTurnOff", lp_target, 1);
        }

    }
    else if (auto097A02B0_val == "BroodLordStetmann") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("BroodLordStetmannYamatoGun", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("BroodLordStetmannBroodlingEscortArm", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "CorruptorStetmann") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("CorruptorStetmannMissilePods", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("CorruptorStetmannCausticSpray", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "InfestorStetmann") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("InfestorStetmannEggLaunch", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("InfestorStetmannHealingTentacle", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "HydraliskStetmann") {
        if ((UnitHasBehavior2(lp_source, "HydraliskStetmannMissilePowerOn") == true)) {
            UnitIssueOrder(lp_target, Order(AbilityCommand("HydraliskStetmannMissilePowerOn", 0)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lp_target, Order(AbilityCommand("HydraliskStetmannMissilePowerOff", 0)), c_orderQueueReplace);
        }
    }
    else if (auto097A02B0_val == "LurkerStetmann") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("LurkerStetmannChannelingSpines", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("LurkerStetmannTunnelingBurst", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "UltraliskStetmann") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("UltraliskStetmannBurrowCharge", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("UltraliskStetmannMechanicalLifeLeech", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "GaryStetmann") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("GaryStetmannOrb", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("CorruptorStetmannRespawn", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("HydraliskStetmannRespawn", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("InfestorStetmannRespawn", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("UltraliskStetmannRespawn", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("ZerglingStetmannRespawn", 0), lp_source, lp_target);
    }
    else if (auto097A02B0_val == "SuperGaryStetmann") {
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("SuperGaryStetmannOrb", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("CorruptorStetmannRespawn", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("HydraliskStetmannRespawn", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("InfestorStetmannRespawn", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("UltraliskStetmannRespawn", 0), lp_source, lp_target);
        lib7A9A9B22_gf_CopyAutocastMode(AbilityCommand("ZerglingStetmannRespawn", 0), lp_source, lp_target);
    }
    else {
    }
}

void lib7A9A9B22_gf_IndexStagingArea (unit lp_stagingArea) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGroupHasUnit(lib7A9A9B22_gv_stagingArea, lp_stagingArea) == false)) {
        UnitGroupAdd(lib7A9A9B22_gv_stagingArea, lp_stagingArea);
        UnitSetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueStagingAreaIndex, UnitGroupCount(lib7A9A9B22_gv_stagingArea, c_unitCountAlive));
    }

}

void lib7A9A9B22_gf_StagingAreaCreateSpawns (unit lp_stagingArea, unitgroup lp_unitSpawners, int lp_spawnOwner, string lp_birth, fixed lp_rotationChange, point lp_centerofBuildArea, int lp_waypointMax, point lp_waypointSpawn, point lp_waypoint1, point lp_waypoint2, point lp_waypoint3, point lp_waypoint4, point lp_waypoint5, point lp_waypoint6, point lp_waypoint7, point lp_waypoint8, point lp_waypoint9) {
    // Variable Declarations
    int lv_i;
    int lv_team;
    unit lv_inventoryItem;
    unitgroup lv_unitGroupSource;
    unitgroup lv_unitGroupTarget;
    unitgroup lv_unitGroupCreated;

    // Automatic Variable Declarations
    unitgroup autoF680F0A1_g;
    int autoF680F0A1_u;
    unit autoF680F0A1_var;
    const int auto1FEB3A0F_ae = 3;
    const int auto1FEB3A0F_ai = 1;
    unitgroup autoB7801C96_g;
    int autoB7801C96_u;
    unit autoB7801C96_var;
    unitgroup auto09FC009F_g;
    int auto09FC009F_u;

    // Variable Initialization
    lv_team = -1;
    lv_unitGroupSource = UnitGroupEmpty();
    lv_unitGroupTarget = UnitGroupEmpty();
    lv_unitGroupCreated = UnitGroupEmpty();

    // Implementation
    lib29554E00_gf_UnitSpawnerSellAbuse(lp_spawnOwner);
    lib7A9A9B22_gf_StagingAreaSpawnAdditions(lp_spawnOwner);
    UnitGroupAddUnitGroup(lv_unitGroupSource, UnitGroupFilter(null, c_playerAny, lp_unitSpawners, UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    autoF680F0A1_g = lp_unitSpawners;
    autoF680F0A1_u = UnitGroupCount(autoF680F0A1_g, c_unitCountAll);
    for (;; autoF680F0A1_u -= 1) {
        autoF680F0A1_var = UnitGroupUnitFromEnd(autoF680F0A1_g, autoF680F0A1_u);
        if (autoF680F0A1_var == null) { break; }
        lv_i += UnitTypeGetCost(UnitGetType(autoF680F0A1_var), c_unitCostMinerals);
        UnitBehaviorRemove(autoF680F0A1_var, "SellFull", 1);
        UnitBehaviorRemove(autoF680F0A1_var, "UnitSpawnerMercenary", 1);
    }
    PlayerScoreValueSetFromInt(lp_spawnOwner, "TotalUnitsSpawnedValue", (PlayerScoreValueGetAsInt(lp_spawnOwner, "TotalUnitsSpawnedValue") + lv_i));
    PlayerScoreValueSetFromInt(lp_spawnOwner, "TotalUnitsSpawnedCount", (PlayerScoreValueGetAsInt(lp_spawnOwner, "TotalUnitsSpawnedCount") + UnitGroupCount(lp_unitSpawners, c_unitCountAlive)));
    lv_i = 0;
    for ( ; ( (auto1FEB3A0F_ai >= 0 && lv_i <= auto1FEB3A0F_ae) || (auto1FEB3A0F_ai < 0 && lv_i >= auto1FEB3A0F_ae) ) ; lv_i += auto1FEB3A0F_ai ) {
        if ((PlayerGroupHasPlayer(lib7A9A9B22_gv_stagingAreaTeamInternal[lv_i], lp_spawnOwner) == true)) {
            lv_team = lv_i;
        }

    }
    while ((UnitGroupCount(lv_unitGroupSource, c_unitCountAlive) > 0)) {
        lib7A9A9B22_gf_WaypointOrderControl(false);
        UnitGroupClear(lv_unitGroupTarget);
        UnitGroupAddUnitGroup(lv_unitGroupTarget, UnitGroupFilter(null, c_playerAny, lv_unitGroupSource, UnitFilter(0, 0, 0, 0), 20));
        UnitGroupRemoveUnitGroup(lv_unitGroupSource, lv_unitGroupTarget);
        autoB7801C96_g = lv_unitGroupTarget;
        autoB7801C96_u = UnitGroupCount(autoB7801C96_g, c_unitCountAll);
        for (;; autoB7801C96_u -= 1) {
            autoB7801C96_var = UnitGroupUnitFromEnd(autoB7801C96_g, autoB7801C96_u);
            if (autoB7801C96_var == null) { break; }
            UnitCreate(1, (CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(autoB7801C96_var), "ReviveType", lp_spawnOwner)), c_unitCreateIgnorePlacement, lp_spawnOwner, PointWithOffsetPolar(lp_waypointSpawn, DistanceBetweenPoints(UnitGetPosition(autoB7801C96_var), lp_centerofBuildArea), (AngleBetweenPoints(lp_centerofBuildArea, UnitGetPosition(autoB7801C96_var)) + lp_rotationChange)), AngleBetweenPoints(lp_waypointSpawn, lp_waypoint1));
            UnitGroupAdd(lv_unitGroupCreated, UnitLastCreated());
            lib7A9A9B22_gf_WaypointApply(UnitLastCreated(), (PointGetX(PointWithOffsetPolar(lp_centerofBuildArea, DistanceBetweenPoints(UnitGetPosition(autoB7801C96_var), lp_centerofBuildArea), (AngleBetweenPoints(lp_centerofBuildArea, UnitGetPosition(autoB7801C96_var)) + lp_rotationChange))) - PointGetX(lp_centerofBuildArea)), (PointGetY(PointWithOffsetPolar(lp_centerofBuildArea, DistanceBetweenPoints(UnitGetPosition(autoB7801C96_var), lp_centerofBuildArea), (AngleBetweenPoints(lp_centerofBuildArea, UnitGetPosition(autoB7801C96_var)) + lp_rotationChange))) - PointGetY(lp_centerofBuildArea)), lp_waypointMax, lp_waypoint1, lp_waypoint2, lp_waypoint3, lp_waypoint4, lp_waypoint5, lp_waypoint6, lp_waypoint7, lp_waypoint8, lp_waypoint9);
            lib7A9A9B22_gf_AddAutocastsHereCopyAbilityAutocastSettings(autoB7801C96_var, UnitLastCreated());
            UnitBehaviorAdd(UnitLastCreated(), lp_birth, UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "UnitSpawnerCasterTrigger", autoB7801C96_var, 1);
            UnitBehaviorAdd(UnitLastCreated(), "StagingAreaPreparedUnit", UnitLastCreated(), 1);
            auto09FC009F_g = UnitInventoryGroup(autoB7801C96_var);
            auto09FC009F_u = UnitGroupCount(auto09FC009F_g, c_unitCountAll);
            for (;; auto09FC009F_u -= 1) {
                lv_inventoryItem = UnitGroupUnitFromEnd(auto09FC009F_g, auto09FC009F_u);
                if (lv_inventoryItem == null) { break; }
                UnitInventoryCreate(UnitLastCreated(), UnitGetType(lv_inventoryItem));
            }
            if ((UnitFilterMatch(UnitLastCreated(), 0, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0)) == true)) {
                UnitAbilityEnable(UnitLastCreated(), "SkinSpecializePremium", false);
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropXP, UnitGetPropertyFixed(autoB7801C96_var, c_unitPropXP, c_unitPropCurrent));
            }

            if ((TechTreeUpgradeCount(UnitGetOwner(autoB7801C96_var), "MutationHallowed", c_techCountCompleteOnly) == 1)) {
                if ((UnitHasBehavior2(autoB7801C96_var, "HallowedAssault") == true)) {
                    UnitBehaviorAdd(UnitLastCreated(), "HallowedAssaultPermanent", autoB7801C96_var, 1);
                }
                else {
                    if ((UnitHasBehavior2(autoB7801C96_var, "HallowedPower") == true)) {
                        UnitBehaviorAdd(UnitLastCreated(), "HallowedPowerPermanent", autoB7801C96_var, 1);
                    }
                    else {
                        if ((UnitHasBehavior2(autoB7801C96_var, "HallowedVitality") == true)) {
                            UnitBehaviorAdd(UnitLastCreated(), "HallowedVitalityPermanent", autoB7801C96_var, 1);
                        }

                    }
                }
            }

            if ((UnitHasBehavior2(autoB7801C96_var, "GuardianShell") == true)) {
                UnitBehaviorAdd(UnitLastCreated(), "GuardianShell", autoB7801C96_var, 1);
            }

            if ((UnitHasBehavior2(autoB7801C96_var, "DehakaGeneEvolvedAdrenalGlands") == true)) {
                UnitBehaviorAdd(UnitLastCreated(), "DehakaGeneEvolvedAdrenalGlands", autoB7801C96_var, 1);
            }

            if ((UnitHasBehavior2(autoB7801C96_var, "DehakaGeneEvolvedCarapace") == true)) {
                UnitBehaviorAdd(UnitLastCreated(), "DehakaGeneEvolvedCarapace", autoB7801C96_var, 1);
            }

            if ((UnitHasBehavior2(autoB7801C96_var, "DehakaGeneEvolvedIncubationSacs") == true)) {
                UnitBehaviorAdd(UnitLastCreated(), "DehakaGeneEvolvedIncubationSacs", autoB7801C96_var, 1);
            }

            if ((UnitHasBehavior2(autoB7801C96_var, "DehakaGeneEvolvedLeeching") == true)) {
                UnitBehaviorAdd(UnitLastCreated(), "DehakaGeneEvolvedLeeching", autoB7801C96_var, 1);
            }

            if ((UnitHasBehavior2(autoB7801C96_var, "DehakaGeneSpikedHide") == true)) {
                UnitBehaviorAdd(UnitLastCreated(), "DehakaGeneSpikedHide", autoB7801C96_var, 1);
            }

            if ((UnitHasBehavior2(autoB7801C96_var, "AscendantStarlightSacrificeBuff") == true)) {
                UnitBehaviorAdd(UnitLastCreated(), "AscendantStarlightSacrificeBuff", autoB7801C96_var, UnitBehaviorCount(autoB7801C96_var, "AscendantStarlightSacrificeBuff"));
            }

            if ((TechTreeUpgradeCount(lp_spawnOwner, "MutationUnstoppable", c_techCountCompleteOnly) == 1)) {
                UnitBehaviorAdd(UnitLastCreated(), "Unstoppable", UnitLastCreated(), 1);
                UnitSetAttributePoint(UnitLastCreated(), "Unstoppable", false, UnitGetAttributePoint(autoB7801C96_var, "Unstoppable", false));
            }

            if ((UnitHasBehavior2(autoB7801C96_var, "KaraxOrbitalStrikeBeacon") == true)) {
                UnitBehaviorAdd(UnitLastCreated(), "KaraxOrbitalStrikeBeacon", UnitLastCreated(), 1);
            }

            if ((UnitHasBehavior2(autoB7801C96_var, "PromoteUnitGeneric") == true)) {
                UnitBehaviorAdd(UnitLastCreated(), "PromoteUnitGeneric", UnitLastCreated(), 1);
            }

            if ((UnitHasBehavior2(autoB7801C96_var, "AutoControlGroup") == true)) {
                if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(UnitLastCreated()), "ReviveInfoBase.Resource[" + IntToString(0) + "]", lp_spawnOwner) > 0)) {
                    UnitControlGroupAddUnit(lp_spawnOwner, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(UnitLastCreated()), "ReviveInfoBase.Resource[" + IntToString(0) + "]", lp_spawnOwner), UnitLastCreated());
                }

            }

        }
        lib7A9A9B22_gf_WaypointOrderControl(true);
        Wait(0.0, c_timeGame);
    }
    UnitGroupAddUnitGroup(lib7A9A9B22_gv_stagingAreaSpawns, lv_unitGroupCreated);
    UnitGroupAddUnitGroup(lib7A9A9B22_gv_stagingAreaReady, lv_unitGroupCreated);
    UnitGroupAddUnitGroup(lib7A9A9B22_gv_stagingAreaSpawnsByIndex[FixedToInt(UnitGetCustomValue(lp_stagingArea, lib7A9A9B22_gv_customValueStagingAreaIndex))], lv_unitGroupCreated);
    if ((lv_team >= 0)) {
        UnitGroupAddUnitGroup(lib7A9A9B22_gv_stagingAreaTeamSpawns[lv_team], lv_unitGroupCreated);
    }

}

void lib7A9A9B22_gf_SetRefineryScale (int lp_player) {
    // Variable Declarations
    fixed lv_scale;

    // Automatic Variable Declarations
    unitgroup autoA4C1AAD5_g;
    int autoA4C1AAD5_u;
    unit autoA4C1AAD5_var;
    unitgroup auto2995E540_g;
    int auto2995E540_u;
    unit auto2995E540_var;

    // Variable Initialization
    lv_scale = (1.0 + (IntToFixed((TechTreeUpgradeCount(lp_player, "MasteryRefinerySize", c_techCountCompleteOnly) + TechTreeUpgradeCount(lp_player, "MasteryRefinerySizeExtra", c_techCountCompleteOnly))) * 0.005) + (TechTreeUpgradeCount(lp_player, "MasteryRefinerySizeSmall", c_techCountCompleteOnly) * 0.001) + (TechTreeUpgradeCount(lp_player, "MasteryRefinerySizeSmallx10", c_techCountCompleteOnly) * 0.01));

    // Implementation
    autoA4C1AAD5_g = UnitGroupFilterPlayer(lib7A9A9B22_gv_mineralFields, lp_player, 0);
    autoA4C1AAD5_u = UnitGroupCount(autoA4C1AAD5_g, c_unitCountAll);
    for (;; autoA4C1AAD5_u -= 1) {
        autoA4C1AAD5_var = UnitGroupUnitFromEnd(autoA4C1AAD5_g, autoA4C1AAD5_u);
        if (autoA4C1AAD5_var == null) { break; }
        UnitSetScale(autoA4C1AAD5_var, (lv_scale * 100.0), (lv_scale * 100.0), (lv_scale * 100.0));
    }
    auto2995E540_g = UnitGroupFilterPlayer(lib7A9A9B22_gv_mineralMines, lp_player, 0);
    auto2995E540_u = UnitGroupCount(auto2995E540_g, c_unitCountAll);
    for (;; auto2995E540_u -= 1) {
        auto2995E540_var = UnitGroupUnitFromEnd(auto2995E540_g, auto2995E540_u);
        if (auto2995E540_var == null) { break; }
        UnitSetScale(auto2995E540_var, (lv_scale * 100.0), (lv_scale * 100.0), (lv_scale * 100.0));
    }
}

void lib7A9A9B22_gf_PreparationAreaCreate (point lp_point, string lp_spawnTimer, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "StagingAreaTeamColor", 0, 0, lp_point);
    UnitSetCustomValue(UnitLastCreated(), 0, IntToFixed(lp_index));
    UnitGroupAdd(lib7A9A9B22_gv_preparationArea, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "StagingAreaBorderDash", 0, 0, lp_point);
    UnitSetCustomValue(UnitLastCreated(), 0, IntToFixed(lp_index));
    UnitGroupAdd(lib7A9A9B22_gv_preparationArea, UnitLastCreated());
}

trigger auto_lib7A9A9B22_gf_PreparationAreaPrepare_Trigger = null;
int auto_lib7A9A9B22_gf_PreparationAreaPrepare_lp_player;
int auto_lib7A9A9B22_gf_PreparationAreaPrepare_lp_index;

void lib7A9A9B22_gf_PreparationAreaPrepare (int lp_player, int lp_index) {
    auto_lib7A9A9B22_gf_PreparationAreaPrepare_lp_player = lp_player;
    auto_lib7A9A9B22_gf_PreparationAreaPrepare_lp_index = lp_index;

    if (auto_lib7A9A9B22_gf_PreparationAreaPrepare_Trigger == null) {
        auto_lib7A9A9B22_gf_PreparationAreaPrepare_Trigger = TriggerCreate("auto_lib7A9A9B22_gf_PreparationAreaPrepare_TriggerFunc");
    }

    TriggerExecute(auto_lib7A9A9B22_gf_PreparationAreaPrepare_Trigger, false, false);
}

bool auto_lib7A9A9B22_gf_PreparationAreaPrepare_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib7A9A9B22_gf_PreparationAreaPrepare_lp_player;
    int lp_index = auto_lib7A9A9B22_gf_PreparationAreaPrepare_lp_index;

    // Variable Declarations
    int lv_currentOwner;
    int lv_nextOwner;
    bool lv_flairUpdate;
    unit lv_preparationArea;

    // Automatic Variable Declarations
    unitgroup auto7E05E69F_g;
    int auto7E05E69F_u;
    unit auto7E05E69F_var;
    unitgroup autoF5F0A3B5_g;
    int autoF5F0A3B5_u;
    unit autoF5F0A3B5_var;
    unitgroup auto257386C8_g;
    int auto257386C8_u;
    unit auto257386C8_var;

    // Variable Initialization

    // Implementation
    Wait(0.0625, c_timeGame);
    auto7E05E69F_g = lib7A9A9B22_gv_preparationArea;
    auto7E05E69F_u = UnitGroupCount(auto7E05E69F_g, c_unitCountAll);
    for (;; auto7E05E69F_u -= 1) {
        auto7E05E69F_var = UnitGroupUnitFromEnd(auto7E05E69F_g, auto7E05E69F_u);
        if (auto7E05E69F_var == null) { break; }
        if ((UnitGetCustomValue(auto7E05E69F_var, 0) == lp_index)) {
            if ((libDDE92A83_gv_gameOver == false) && (((lp_player >= 0) && (lp_player <= 15)) == true)) {
                if ((UnitGetOwner(auto7E05E69F_var) != lp_player)) {
                    lv_preparationArea = auto7E05E69F_var;
                    lv_currentOwner = UnitGetOwner(auto7E05E69F_var);
                    lv_nextOwner = lp_player;
                    lv_flairUpdate = true;
                    if ((TechTreeUpgradeCount(lv_currentOwner, "AreaFlairDefault", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(lv_nextOwner, "AreaFlairDefault", c_techCountCompleteOnly) == 1)) {
                        lv_flairUpdate = false;
                    }

                }

            }

        }

    }
    if ((lv_flairUpdate == true)) {
        libNtve_gf_SendActorMessageToUnit(lv_preparationArea, "SetOpacity 0.000000 0.500000");
    }

    Wait(0.375, c_timeGame);
    autoF5F0A3B5_g = lib7A9A9B22_gv_preparationArea;
    autoF5F0A3B5_u = UnitGroupCount(autoF5F0A3B5_g, c_unitCountAll);
    for (;; autoF5F0A3B5_u -= 1) {
        autoF5F0A3B5_var = UnitGroupUnitFromEnd(autoF5F0A3B5_g, autoF5F0A3B5_u);
        if (autoF5F0A3B5_var == null) { break; }
        if ((UnitGetCustomValue(autoF5F0A3B5_var, 0) == lp_index) && (libDDE92A83_gv_gameOver == false) && (((lp_player >= 0) && (lp_player <= 15)) == true)) {
            UnitSetOwner(autoF5F0A3B5_var, lp_player, true);
        }

    }
    Wait(0.375, c_timeGame);
    auto257386C8_g = lib7A9A9B22_gv_preparationArea;
    auto257386C8_u = UnitGroupCount(auto257386C8_g, c_unitCountAll);
    for (;; auto257386C8_u -= 1) {
        auto257386C8_var = UnitGroupUnitFromEnd(auto257386C8_g, auto257386C8_u);
        if (auto257386C8_var == null) { break; }
        if ((UnitGetCustomValue(auto257386C8_var, 0) == lp_index) && (libDDE92A83_gv_gameOver == false) && (lv_flairUpdate == true) && (((lp_player >= 0) && (lp_player <= 15)) == true)) {
            libNtve_gf_SendActorMessageToUnit(auto257386C8_var, "Signal FlairUpdate");
            libNtve_gf_SendActorMessageToUnit(auto257386C8_var, "SetOpacity 1.000000 0.500000");
        }

    }
    return true;
}

void lib7A9A9B22_gf_RemoveFromUnitSpawners (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    UnitGroupRemove(lib7A9A9B22_gv_stagingAreaSpawners, lp_unit);
}

void lib7A9A9B22_gf_AddToUnitSpawns (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    UnitGroupAdd(lib7A9A9B22_gv_stagingAreaSpawns, lp_unit);
    UnitCreateEffectUnit(lp_unit, "UnitSpawner", lp_unit);
}

void lib7A9A9B22_gf_CopyCargoUnits (unit lp_source, unit lp_target) {
    // Variable Declarations
    unit lv_u;
    int lv_i;

    // Automatic Variable Declarations
    int autoCD04BF5A_ae;
    const int autoCD04BF5A_ai = 1;
    unitgroup auto26CFDBB8_g;
    int auto26CFDBB8_u;

    // Variable Initialization

    // Implementation
    autoCD04BF5A_ae = UnitGroupCount(UnitCargoGroup(lp_source), c_unitCountAlive);
    lv_i = 1;
    for ( ; ( (autoCD04BF5A_ai >= 0 && lv_i <= autoCD04BF5A_ae) || (autoCD04BF5A_ai < 0 && lv_i >= autoCD04BF5A_ae) ) ; lv_i += autoCD04BF5A_ai ) {
        UnitCargoCreate(lp_target, UnitGetType(UnitGroupUnit(UnitCargoGroup(lp_source), lv_i)), 1);
        UnitSetPropertyFixed(UnitCargoLastCreated(), c_unitPropXP, UnitGetPropertyFixed(UnitGroupUnit(UnitCargoGroup(lp_source), lv_i), c_unitPropXP, c_unitPropCurrent));
        UnitBehaviorRemove(UnitCargoLastCreated(), "MengskVeterancyPassive", 1);
        UnitBehaviorAdd(UnitCargoLastCreated(), "UnitSpawnerCasterTrigger", UnitGroupUnit(UnitCargoGroup(lp_source), lv_i), 1);
        UnitBehaviorAdd(UnitCargoLastCreated(), "StagingAreaPreparedUnit", UnitCargoLastCreated(), 1);
        auto26CFDBB8_g = UnitInventoryGroup(UnitGroupUnit(UnitCargoGroup(lp_source), lv_i));
        auto26CFDBB8_u = UnitGroupCount(auto26CFDBB8_g, c_unitCountAll);
        for (;; auto26CFDBB8_u -= 1) {
            lv_u = UnitGroupUnitFromEnd(auto26CFDBB8_g, auto26CFDBB8_u);
            if (lv_u == null) { break; }
            UnitInventoryCreate(UnitCargoLastCreated(), UnitGetType(lv_u));
        }
        UnitGroupAdd(lib7A9A9B22_gv_stagingAreaSpawns, UnitCargoLastCreated());
        UnitGroupAdd(lib7A9A9B22_gv_stagingAreaReady, UnitCargoLastCreated());
    }
}

void lib7A9A9B22_gf_CopyAutocastMode (abilcmd lp_ability, unit lp_source, unit lp_target) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitCheckAbilCmdState(lp_source, lp_ability, c_cmdStateIsAutoCast) == false)) {
        UnitIssueOrder(lp_target, OrderSetAutoCast(lp_ability, false), c_orderQueueReplace);
    }

}

trigger auto_lib7A9A9B22_gf_CopyAutocastModeWithDelay_Trigger = null;
abilcmd auto_lib7A9A9B22_gf_CopyAutocastModeWithDelay_lp_ability;
unit auto_lib7A9A9B22_gf_CopyAutocastModeWithDelay_lp_source;
unit auto_lib7A9A9B22_gf_CopyAutocastModeWithDelay_lp_target;

void lib7A9A9B22_gf_CopyAutocastModeWithDelay (abilcmd lp_ability, unit lp_source, unit lp_target) {
    auto_lib7A9A9B22_gf_CopyAutocastModeWithDelay_lp_ability = lp_ability;
    auto_lib7A9A9B22_gf_CopyAutocastModeWithDelay_lp_source = lp_source;
    auto_lib7A9A9B22_gf_CopyAutocastModeWithDelay_lp_target = lp_target;

    if (auto_lib7A9A9B22_gf_CopyAutocastModeWithDelay_Trigger == null) {
        auto_lib7A9A9B22_gf_CopyAutocastModeWithDelay_Trigger = TriggerCreate("auto_lib7A9A9B22_gf_CopyAutocastModeWithDelay_TriggerFunc");
    }

    TriggerExecute(auto_lib7A9A9B22_gf_CopyAutocastModeWithDelay_Trigger, false, false);
}

bool auto_lib7A9A9B22_gf_CopyAutocastModeWithDelay_TriggerFunc (bool testConds, bool runActions) {
    abilcmd lp_ability = auto_lib7A9A9B22_gf_CopyAutocastModeWithDelay_lp_ability;
    unit lp_source = auto_lib7A9A9B22_gf_CopyAutocastModeWithDelay_lp_source;
    unit lp_target = auto_lib7A9A9B22_gf_CopyAutocastModeWithDelay_lp_target;

    // Automatic Variable Declarations
    // Implementation
    Wait(0.0, c_timeGame);
    if ((UnitCheckAbilCmdState(lp_source, lp_ability, c_cmdStateIsAutoCast) == false)) {
        UnitIssueOrder(lp_target, OrderSetAutoCast(lp_ability, false), c_orderQueueReplace);
    }

    return true;
}

void lib7A9A9B22_gf_CopyToggleMode (string lp_behavior, abilcmd lp_ability, unit lp_source, unit lp_target) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitHasBehavior2(lp_source, lp_behavior) == true)) {
        UnitIssueOrder(lp_target, Order(AbilityCommand(AbilityCommandGetAbility(lp_ability), 0)), c_orderQueueReplace);
    }

}

void lib7A9A9B22_gf_CopyBehavior (string lp_behavior, unit lp_source, unit lp_target) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitHasBehavior2(lp_source, lp_behavior) == true)) {
        UnitBehaviorAdd(lp_target, lp_behavior, lp_target, 1);
    }

}

void lib7A9A9B22_gf_CopyAutocastModeSeparateAbilities (abilcmd lp_sourceAbility, abilcmd lp_targetAbility, unit lp_source, unit lp_target) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitCheckAbilCmdState(lp_source, lp_sourceAbility, c_cmdStateIsAutoCast) == false)) {
        UnitIssueOrder(lp_target, OrderSetAutoCast(lp_targetAbility, false), c_orderQueueReplace);
    }

}

void lib7A9A9B22_gf_StagingAreaSpawnAdditions (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_PlayerRemoveChargeUsed(lp_player, "Abil/DehakaScan");
    libNtve_gf_PlayerRemoveCooldown(lp_player, "Abil/DehakaScan");
    libNtve_gf_PlayerRemoveChargeUsed(lp_player, "Abil/RaynorScan");
    libNtve_gf_PlayerRemoveCooldown(lp_player, "Abil/RaynorScan");
}

void lib7A9A9B22_gf_StagingAreaCreateMineralFields (int lp_player, fixed lp_rotation, point lp_point, bool lp_createMineralIncomeUnit) {
    // Variable Declarations
    string lv_minerals;
    string lv_unavailable;

    // Automatic Variable Declarations
    string autoF493D5D3_val;

    // Variable Initialization
    lv_minerals = "MineralFieldTerran";
    lv_unavailable = "MineralFieldTerranUnavailable";

    // Implementation
    autoF493D5D3_val = PlayerRace(lp_player);
    if (autoF493D5D3_val == "Prot") {
        lv_minerals = "MineralFieldProtoss";
        lv_unavailable = "MineralFieldProtossUnavailable";
    }
    else if (autoF493D5D3_val == "Zerg") {
        lv_minerals = "MineralFieldZerg";
        lv_unavailable = "MineralFieldZergUnavailable";
    }
    else {
    }
    UnitCreate(1, lv_minerals, c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(PointWithOffsetPolar(lp_point, (0.0 + ((SquareRoot(2.0) / 2.0) * IntToFixed(9))), ((lp_rotation + 180.0) + 90.0)), (0.0 + ((SquareRoot(2.0) / 2.0) * IntToFixed(15))), (lp_rotation + 180.0)), (lp_rotation + 180.0));
    UnitGroupAdd(lib7A9A9B22_gv_stagingAreaPeripherals, UnitLastCreated());
    UnitGroupAdd(lib7A9A9B22_gv_mineralFields, UnitLastCreated());
    UnitCreate(1, lv_minerals, c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(PointWithOffsetPolar(lp_point, (0.0 + ((SquareRoot(2.0) / 2.0) * IntToFixed(3))), ((lp_rotation + 180.0) + 90.0)), (0.0 + ((SquareRoot(2.0) / 2.0) * IntToFixed(15))), (lp_rotation + 180.0)), (lp_rotation + 180.0));
    UnitGroupAdd(lib7A9A9B22_gv_stagingAreaPeripherals, UnitLastCreated());
    UnitGroupAdd(lib7A9A9B22_gv_mineralFields, UnitLastCreated());
    UnitCreate(1, lv_minerals, c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(PointWithOffsetPolar(lp_point, (0.0 - ((SquareRoot(2.0) / 2.0) * IntToFixed(3))), ((lp_rotation + 180.0) + 90.0)), (0.0 + ((SquareRoot(2.0) / 2.0) * IntToFixed(15))), (lp_rotation + 180.0)), (lp_rotation + 180.0));
    UnitGroupAdd(lib7A9A9B22_gv_stagingAreaPeripherals, UnitLastCreated());
    UnitGroupAdd(lib7A9A9B22_gv_mineralFields, UnitLastCreated());
    UnitCreate(1, lv_unavailable, c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(PointWithOffsetPolar(lp_point, (0.0 - ((SquareRoot(2.0) / 2.0) * IntToFixed(9))), ((lp_rotation + 180.0) + 90.0)), (0.0 + ((SquareRoot(2.0) / 2.0) * IntToFixed(15))), (lp_rotation + 180.0)), (lp_rotation + 180.0));
    UnitGroupAdd(lib7A9A9B22_gv_stagingAreaPeripherals, UnitLastCreated());
    UnitGroupAdd(lib7A9A9B22_gv_mineralFields, UnitLastCreated());
    if ((lp_createMineralIncomeUnit == true)) {
        lib7A9A9B22_gf_MineralIncomeCreate(lp_player);
    }

}

void lib7A9A9B22_gf_StagingAreaCreateHallowed (int lp_player, fixed lp_rotation, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreate(1, "HallowedAssault", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(PointWithOffsetPolar(lp_point, (0.0 + ((SquareRoot(2.0) / 2.0) * IntToFixed(12))), ((lp_rotation + 180.0) + 90.0)), (0.0 - ((SquareRoot(2.0) / 2.0) * IntToFixed(6))), (lp_rotation + 180.0)), (lp_rotation + 180.0));
    UnitGroupAdd(lib7A9A9B22_gv_stagingAreaPeripherals, UnitLastCreated());
    UnitCreate(1, "HallowedVitality", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(PointWithOffsetPolar(lp_point, (0.0 + ((SquareRoot(2.0) / 2.0) * IntToFixed(0))), ((lp_rotation + 180.0) + 90.0)), (0.0 - ((SquareRoot(2.0) / 2.0) * IntToFixed(6))), (lp_rotation + 180.0)), (lp_rotation + 180.0));
    UnitGroupAdd(lib7A9A9B22_gv_stagingAreaPeripherals, UnitLastCreated());
    UnitCreate(1, "HallowedPower", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(PointWithOffsetPolar(lp_point, (0.0 - ((SquareRoot(2.0) / 2.0) * IntToFixed(12))), ((lp_rotation + 180.0) + 90.0)), (0.0 - ((SquareRoot(2.0) / 2.0) * IntToFixed(6))), (lp_rotation + 180.0)), (lp_rotation + 180.0));
    UnitGroupAdd(lib7A9A9B22_gv_stagingAreaPeripherals, UnitLastCreated());
    UnitCreate(1, "HallowedAssault", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(PointWithOffsetPolar(lp_point, (0.0 + ((SquareRoot(2.0) / 2.0) * IntToFixed(12))), ((lp_rotation + 180.0) + 90.0)), (0.0 + ((SquareRoot(2.0) / 2.0) * IntToFixed(6))), (lp_rotation + 180.0)), (lp_rotation + 180.0));
    UnitGroupAdd(lib7A9A9B22_gv_stagingAreaPeripherals, UnitLastCreated());
    UnitCreate(1, "HallowedVitality", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(PointWithOffsetPolar(lp_point, (0.0 - ((SquareRoot(2.0) / 2.0) * IntToFixed(0))), ((lp_rotation + 180.0) + 90.0)), (0.0 + ((SquareRoot(2.0) / 2.0) * IntToFixed(6))), (lp_rotation + 180.0)), (lp_rotation + 180.0));
    UnitGroupAdd(lib7A9A9B22_gv_stagingAreaPeripherals, UnitLastCreated());
    UnitCreate(1, "HallowedPower", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(PointWithOffsetPolar(lp_point, (0.0 - ((SquareRoot(2.0) / 2.0) * IntToFixed(12))), ((lp_rotation + 180.0) + 90.0)), (0.0 + ((SquareRoot(2.0) / 2.0) * IntToFixed(6))), (lp_rotation + 180.0)), (lp_rotation + 180.0));
    UnitGroupAdd(lib7A9A9B22_gv_stagingAreaPeripherals, UnitLastCreated());
}

void lib7A9A9B22_gf_SpawnsFinalWaypointRefresh () {
    // Automatic Variable Declarations
    unitgroup autoD4108AFC_g;
    int autoD4108AFC_u;
    unit autoD4108AFC_var;

    // Implementation
    autoD4108AFC_g = lib7A9A9B22_gv_spawnsFinalWaypoint;
    autoD4108AFC_u = UnitGroupCount(autoD4108AFC_g, c_unitCountAll);
    for (;; autoD4108AFC_u -= 1) {
        autoD4108AFC_var = UnitGroupUnitFromEnd(autoD4108AFC_g, autoD4108AFC_u);
        if (autoD4108AFC_var == null) { break; }
        UnitIssueOrder(autoD4108AFC_var, OrderTargetingPoint(AbilityCommand("attack", 0), Point(UnitGetCustomValue(autoD4108AFC_var, lib7A9A9B22_gv_customValueWaypointFinalX), UnitGetCustomValue(autoD4108AFC_var, lib7A9A9B22_gv_customValueWaypointFinalY))), c_orderQueueAddToEnd);
        UnitIssueOrder(autoD4108AFC_var, OrderTargetingPoint(AbilityCommand("AttackWarpPrism", 0), Point(UnitGetCustomValue(autoD4108AFC_var, lib7A9A9B22_gv_customValueWaypointFinalX), UnitGetCustomValue(autoD4108AFC_var, lib7A9A9B22_gv_customValueWaypointFinalY))), c_orderQueueAddToEnd);
    }
}

void lib7A9A9B22_gf_CheckUnitSpawnersHavePower (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
}

void lib7A9A9B22_gf_WaveUnitDeath (unit lp_killingUnit, unit lp_dyingUnit) {
    // Automatic Variable Declarations
    // Implementation
    lib39886FE6_gf_MasteryBarAwardExperience(UnitGetOwner(lp_killingUnit), libNtve_gf_ArithmeticIntClamp(FixedToInt((UnitTypeGetCost(UnitGetType(lp_dyingUnit), c_unitCostMinerals) * 0.4)), 0, 1000), false, false);
    CatalogFieldValueSet(c_gameCatalogEffect, "PlayerAttributeUnitKills", "Amount", UnitGetOwner(lp_killingUnit), IntToString(libNtve_gf_ArithmeticIntClamp(PlayerScoreValueGetAsInt(UnitGetOwner(lp_killingUnit), "UnitsKilledCount"), 0, 500000)));
    if ((UnitHasBehavior2(lp_killingUnit, "MinionKillRedirect") == true)) {
        UnitSetPropertyFixed(UnitBehaviorEffectUnit(UnitBehaviorEffectUnit(lp_killingUnit, "MinionKillRedirect", c_effectUnitCaster, 0), "UnitSpawnerCasterTrigger", c_effectUnitCaster, 0), c_unitPropKills, (UnitGetPropertyFixed(UnitBehaviorEffectUnit(UnitBehaviorEffectUnit(lp_killingUnit, "MinionKillRedirect", c_effectUnitCaster, 0), "UnitSpawnerCasterTrigger", c_effectUnitCaster, 0), c_unitPropKills, c_unitPropCurrent) + 1.0));
        if ((TechTreeUpgradeCount(UnitGetOwner(lp_killingUnit), "DecorationKillFanfare", c_techCountCompleteOnly) == 1)) {
            UnitCreateEffectUnit(UnitBehaviorEffectUnit(UnitBehaviorEffectUnit(lp_killingUnit, "MinionKillRedirect", c_effectUnitCaster, 0), "UnitSpawnerCasterTrigger", c_effectUnitCaster, 0), "KillFanfare", UnitBehaviorEffectUnit(UnitBehaviorEffectUnit(lp_killingUnit, "MinionKillRedirect", c_effectUnitCaster, 0), "UnitSpawnerCasterTrigger", c_effectUnitCaster, 0));
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lp_killingUnit), "MutationUnstoppable", c_techCountCompleteOnly) == 1) && (UnitFilterMatch(lp_dyingUnit, 0, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true)) {
            lib7A9A9B22_gf_ApplyUnstoppable(UnitBehaviorEffectUnit(lp_killingUnit, "MinionKillRedirect", c_effectUnitCaster, 0), UnitBehaviorEffectUnit(UnitBehaviorEffectUnit(lp_killingUnit, "MinionKillRedirect", c_effectUnitCaster, 0), "UnitSpawnerCasterTrigger", c_effectUnitCaster, 0), lp_dyingUnit);
        }

    }
    else {
        UnitSetPropertyFixed(UnitBehaviorEffectUnit(lp_killingUnit, "UnitSpawnerCasterTrigger", c_effectUnitCaster, 0), c_unitPropKills, (UnitGetPropertyFixed(UnitBehaviorEffectUnit(lp_killingUnit, "UnitSpawnerCasterTrigger", c_effectUnitCaster, 0), c_unitPropKills, c_unitPropCurrent) + 1.0));
        if ((TechTreeUpgradeCount(UnitGetOwner(lp_killingUnit), "DecorationKillFanfare", c_techCountCompleteOnly) == 1)) {
            UnitCreateEffectUnit(UnitBehaviorEffectUnit(lp_killingUnit, "UnitSpawnerCasterTrigger", c_effectUnitCaster, 0), "KillFanfare", UnitBehaviorEffectUnit(lp_killingUnit, "UnitSpawnerCasterTrigger", c_effectUnitCaster, 0));
        }

        if ((TechTreeUpgradeCount(UnitGetOwner(lp_killingUnit), "MutationUnstoppable", c_techCountCompleteOnly) == 1) && (UnitFilterMatch(lp_dyingUnit, 0, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true)) {
            lib7A9A9B22_gf_ApplyUnstoppable(lp_killingUnit, UnitBehaviorEffectUnit(lp_killingUnit, "UnitSpawnerCasterTrigger", c_effectUnitCaster, 0), lp_dyingUnit);
        }

    }
}

void lib7A9A9B22_gf_ApplyUnstoppable (unit lp_killer, unit lp_killerSpawner, unit lp_dyingUnit) {
    // Variable Declarations
    fixed lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_i = UnitGetPropertyFixed(lp_killer, c_unitPropLife, c_unitPropCurrent);
    UnitSetAttributePoint(lp_killer, "Unstoppable", false, FixedToInt((UnitGetAttributePoint(lp_killer, "Unstoppable", false) + FixedToInt(((IntToFixed(UnitTypeGetCost(UnitGetType(lp_dyingUnit), c_unitCostMinerals)) - ModF(IntToFixed(UnitTypeGetCost(UnitGetType(lp_dyingUnit), c_unitCostMinerals)), 10.0)) / 10.0)))));
    UnitSetAttributePoint(lp_killerSpawner, "Unstoppable", false, (UnitGetAttributePoint(lp_killerSpawner, "Unstoppable", false) + FixedToInt(((IntToFixed(UnitTypeGetCost(UnitGetType(lp_dyingUnit), c_unitCostMinerals)) - ModF(IntToFixed(UnitTypeGetCost(UnitGetType(lp_dyingUnit), c_unitCostMinerals)), 10.0)) / 10.0))));
    UnitSetPropertyFixed(lp_killer, c_unitPropLife, lv_i);
}

void lib7A9A9B22_gf_MengskRoyalGuardXPBank (unit lp_unit) {
    // Variable Declarations
    unitgroup lv_royalGuards;
    int lv_totalXP;

    // Automatic Variable Declarations
    unitgroup autoEE6972ED_g;
    int autoEE6972ED_u;
    unit autoEE6972ED_var;

    // Variable Initialization
    lv_royalGuards = UnitGroupEmpty();

    // Implementation
    UnitGroupAddUnitGroup(lv_royalGuards, UnitGroupFilter("MarauderMengsk", UnitGetOwner(lp_unit), lib7A9A9B22_gv_stagingAreaSpawners, UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_royalGuards, UnitGroupFilter("GhostMengsk", UnitGetOwner(lp_unit), lib7A9A9B22_gv_stagingAreaSpawners, UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_royalGuards, UnitGroupFilter("SiegeTankMengsk", UnitGetOwner(lp_unit), lib7A9A9B22_gv_stagingAreaSpawners, UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_royalGuards, UnitGroupFilter("VikingMengskAssault", UnitGetOwner(lp_unit), lib7A9A9B22_gv_stagingAreaSpawners, UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_royalGuards, UnitGroupFilter("VikingMengskFighter", UnitGetOwner(lp_unit), lib7A9A9B22_gv_stagingAreaSpawners, UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_royalGuards, UnitGroupFilter("ThorMengsk", UnitGetOwner(lp_unit), lib7A9A9B22_gv_stagingAreaSpawners, UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_royalGuards, UnitGroupFilter("BattlecruiserMengsk", UnitGetOwner(lp_unit), lib7A9A9B22_gv_stagingAreaSpawners, UnitFilter(0, 0, 0, 0), 0));
    autoEE6972ED_g = lv_royalGuards;
    autoEE6972ED_u = UnitGroupCount(autoEE6972ED_g, c_unitCountAll);
    for (;; autoEE6972ED_u -= 1) {
        autoEE6972ED_var = UnitGroupUnitFromEnd(autoEE6972ED_g, autoEE6972ED_u);
        if (autoEE6972ED_var == null) { break; }
        lv_totalXP += FixedToInt(UnitGetPropertyFixed(autoEE6972ED_var, c_unitPropXP, c_unitPropCurrent));
    }
}

void lib7A9A9B22_gf_HornerSignificantOtherRedesign (int lp_player) {
    // Variable Declarations
    unitgroup lv_hanUnits;
    int lv_hanValue;
    unitgroup lv_hornerUnits;
    int lv_hornerValue;
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup auto2F635828_g;
    int auto2F635828_u;
    unitgroup autoF1D6F60C_g;
    int autoF1D6F60C_u;

    // Variable Initialization
    lv_hanUnits = UnitGroupEmpty();
    lv_hornerUnits = UnitGroupEmpty();

    // Implementation
    UnitGroupAddUnitGroup(lv_hanUnits, UnitGroupFilter("HornerHellbat", lp_player, lib7A9A9B22_gv_stagingAreaSpawners, UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_hanUnits, UnitGroupFilter("HornerHellion", lp_player, lib7A9A9B22_gv_stagingAreaSpawners, UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_hanUnits, UnitGroupFilter("HornerReaper", lp_player, lib7A9A9B22_gv_stagingAreaSpawners, UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_hanUnits, UnitGroupFilter("HornerWidowMine", lp_player, lib7A9A9B22_gv_stagingAreaSpawners, UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_hanUnits, UnitGroupFilter("HornerAssaultGalleon", lp_player, lib7A9A9B22_gv_stagingAreaSpawners, UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_hanUnits, UnitGroupFilter("HornerAssaultGalleonUpgraded", lp_player, lib7A9A9B22_gv_stagingAreaSpawners, UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_hornerUnits, UnitGroupFilter("HornerDeimosVikingAssault", lp_player, lib7A9A9B22_gv_stagingAreaSpawners, UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_hornerUnits, UnitGroupFilter("HornerDeimosVikingFighter", lp_player, lib7A9A9B22_gv_stagingAreaSpawners, UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_hornerUnits, UnitGroupFilter("HornerTheiaRaven", lp_player, lib7A9A9B22_gv_stagingAreaSpawners, UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_hornerUnits, UnitGroupFilter("HornerAsteriaWraith", lp_player, lib7A9A9B22_gv_stagingAreaSpawners, UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_hornerUnits, UnitGroupFilter("HornerSovereignBattlecruiser", lp_player, lib7A9A9B22_gv_stagingAreaSpawners, UnitFilter(0, 0, 0, 0), 0));
    UnitGroupAddUnitGroup(lv_hornerUnits, UnitGroupFilter("HornerStrikeFighter", lp_player, lib7A9A9B22_gv_stagingAreaSpawners, UnitFilter(0, 0, 0, 0), 0));
    auto2F635828_g = lv_hanUnits;
    auto2F635828_u = UnitGroupCount(auto2F635828_g, c_unitCountAll);
    for (;; auto2F635828_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto2F635828_g, auto2F635828_u);
        if (lv_u == null) { break; }
        lv_hanValue += UnitTypeGetCost(UnitGetType(lv_u), c_unitCostMinerals);
    }
    lv_hanValue /= 5;
    autoF1D6F60C_g = lv_hornerUnits;
    autoF1D6F60C_u = UnitGroupCount(autoF1D6F60C_g, c_unitCountAll);
    for (;; autoF1D6F60C_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(autoF1D6F60C_g, autoF1D6F60C_u);
        if (lv_u == null) { break; }
        lv_hornerValue += UnitTypeGetCost(UnitGetType(lv_u), c_unitCostMinerals);
    }
    lv_hornerValue /= 5;
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "HornerMySignificantOtherBuffHan", FixedToInt((IntToFixed(lv_hornerValue) / 20.0)));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "HornerMySignificantOtherBuffHorner", FixedToInt((IntToFixed(lv_hanValue) / 20.0)));
}

void lib7A9A9B22_gf_RaynorSupplyDropRework (int lp_player, unit lp_unit) {
    // Automatic Variable Declarations
    string auto1769185F_val;

    // Implementation
    auto1769185F_val = UnitGetType(lp_unit);
    if (auto1769185F_val == "Banshee") {
        UnitBehaviorAdd(lp_unit, "RaynorCostReducedApplied", lp_unit, TechTreeUpgradeCount(lp_player, "RaynorCostReducedBanshee", c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCostReducedBanshee", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCostReducedBansheeCooldown", 0);
    }
    else if (auto1769185F_val == "BattlecruiserRaynor") {
        UnitBehaviorAdd(lp_unit, "RaynorCostReducedApplied", lp_unit, TechTreeUpgradeCount(lp_player, "RaynorCostReducedBattlecruiser", c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCostReducedBattlecruiser", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCostReducedBattlecruiserCooldown", 0);
    }
    else if (auto1769185F_val == "DuskWing") {
        UnitBehaviorAdd(lp_unit, "RaynorCostReducedApplied", lp_unit, TechTreeUpgradeCount(lp_player, "RaynorCostReducedDuskWings", c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCostReducedDuskWings", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCostReducedDuskWingsCooldown", 0);
    }
    else if (auto1769185F_val == "FirebatStarlight") {
        UnitBehaviorAdd(lp_unit, "RaynorCostReducedApplied", lp_unit, TechTreeUpgradeCount(lp_player, "RaynorCostReducedFirebat", c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCostReducedFirebat", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCostReducedFirebatCooldown", 0);
    }
    else if (auto1769185F_val == "RaynorHyperion") {
        UnitBehaviorAdd(lp_unit, "RaynorCostReducedApplied", lp_unit, TechTreeUpgradeCount(lp_player, "RaynorCostReducedHyperion", c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCostReducedHyperion", 0);
    }
    else if (auto1769185F_val == "Marauder") {
        UnitBehaviorAdd(lp_unit, "RaynorCostReducedApplied", lp_unit, TechTreeUpgradeCount(lp_player, "RaynorCostReducedMarauder", c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCostReducedMarauder", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCostReducedMarauderCooldown", 0);
    }
    else if (auto1769185F_val == "Marine") {
        UnitBehaviorAdd(lp_unit, "RaynorCostReducedApplied", lp_unit, TechTreeUpgradeCount(lp_player, "RaynorCostReducedMarine", c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCostReducedMarine", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCostReducedMarineCooldown", 0);
    }
    else if (auto1769185F_val == "MedicStarlight") {
        UnitBehaviorAdd(lp_unit, "RaynorCostReducedApplied", lp_unit, TechTreeUpgradeCount(lp_player, "RaynorCostReducedMedic", c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCostReducedMedic", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCostReducedMedicCooldown", 0);
    }
    else if (auto1769185F_val == "SiegeTankRaynor") {
        UnitBehaviorAdd(lp_unit, "RaynorCostReducedApplied", lp_unit, TechTreeUpgradeCount(lp_player, "RaynorCostReducedSiegeTank", c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCostReducedSiegeTank", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCostReducedSiegeTankCooldown", 0);
    }
    else if (auto1769185F_val == "VikingAssault") {
        UnitBehaviorAdd(lp_unit, "RaynorCostReducedApplied", lp_unit, TechTreeUpgradeCount(lp_player, "RaynorCostReducedViking", c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCostReducedViking", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCostReducedVikingCooldown", 0);
    }
    else if (auto1769185F_val == "VikingFighter") {
        UnitBehaviorAdd(lp_unit, "RaynorCostReducedApplied", lp_unit, TechTreeUpgradeCount(lp_player, "RaynorCostReducedViking", c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCostReducedViking", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCostReducedVikingCooldown", 0);
    }
    else if (auto1769185F_val == "VultureStarlight") {
        UnitBehaviorAdd(lp_unit, "RaynorCostReducedApplied", lp_unit, TechTreeUpgradeCount(lp_player, "RaynorCostReducedVulture", c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCostReducedVulture", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCostReducedVultureCooldown", 0);
    }
    else if (auto1769185F_val == "Spectre") {
        UnitBehaviorAdd(lp_unit, "RaynorCostReducedApplied", lp_unit, TechTreeUpgradeCount(lp_player, "RaynorCostReducedSpectre", c_techCountCompleteOnly));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCostReducedSpectre", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorCostReducedSpectreCooldown", 0);
    }
    else {
    }
}

void lib7A9A9B22_gf_ZeratulArtifactSearchUpdate (int lp_player, int lp_repeat) {
    // Variable Declarations
    int lv_artifactAbility;
    int lv_x;

    // Automatic Variable Declarations
    unitgroup auto2BECE1E2_g;
    int auto2BECE1E2_u;
    unit auto2BECE1E2_var;
    int auto8A42437F_n;
    int auto8A42437F_i;

    // Variable Initialization
    lv_x = 5;

    // Implementation
    if ((TechTreeUpgradeCount(lp_player, "ZeratulArtifactTier1", c_techCountCompleteOnly) >= 1)) {
        lv_artifactAbility = 1;
        if ((TechTreeUpgradeCount(lp_player, "ZeratulArtifactTier2", c_techCountCompleteOnly) >= 1)) {
            lv_artifactAbility = 2;
        }

    }

    auto2BECE1E2_g = UnitGroupFilterPlayer(lib7A9A9B22_gv_zeratulArtifactSearchGroup, lp_player, 0);
    auto2BECE1E2_u = UnitGroupCount(auto2BECE1E2_g, c_unitCountAll);
    for (;; auto2BECE1E2_u -= 1) {
        auto2BECE1E2_var = UnitGroupUnitFromEnd(auto2BECE1E2_g, auto2BECE1E2_u);
        if (auto2BECE1E2_var == null) { break; }
        auto8A42437F_n = lp_repeat;
        for (auto8A42437F_i = 1; auto8A42437F_i <= auto8A42437F_n; auto8A42437F_i += 1) {
            if ((CatalogFieldValueGetAsInt(c_gameCatalogAbil, "ZeratulArtifactSearchSpecialize", "InfoArray[" + IntToString(lv_artifactAbility) + "].Resource[" + IntToString(0) + "]", lp_player) > 0)) {
                lv_x = (UnitTypeGetCost(UnitGetType(auto2BECE1E2_var), c_unitCostMinerals) / 5);
                CatalogFieldValueSet(c_gameCatalogAbil, "ZeratulArtifactSearchSpecialize", "InfoArray[" + IntToString(lv_artifactAbility) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(libNtve_gf_ArithmeticIntClamp((CatalogFieldValueGetAsInt(c_gameCatalogAbil, "ZeratulArtifactSearchSpecialize", "InfoArray[" + IntToString(lv_artifactAbility) + "].Resource[" + IntToString(0) + "]", lp_player) - lv_x), 0, 99999)));
                UnitBehaviorRemove(auto2BECE1E2_var, "SellFull", 1);
            }
            else {
                UnitGroupAdd(lib7A9A9B22_gv_stagingAreaSpawners, auto2BECE1E2_var);
                UnitGroupRemove(lib7A9A9B22_gv_zeratulArtifactSearchGroup, auto2BECE1E2_var);
                UnitBehaviorRemove(auto2BECE1E2_var, "ZeratulArtifactSearchActive", 1);
            }
        }
    }
}

void lib7A9A9B22_gf_ZeratulArtifactSearchAftermath (int lp_player) {
    // Variable Declarations
    int lv_artifactAbility;

    // Automatic Variable Declarations
    unitgroup auto89140161_g;
    int auto89140161_u;
    unit auto89140161_var;

    // Variable Initialization

    // Implementation
    if ((TechTreeUpgradeCount(lp_player, "ZeratulArtifactTier1", c_techCountCompleteOnly) >= 1)) {
        lv_artifactAbility = 1;
        if ((TechTreeUpgradeCount(lp_player, "ZeratulArtifactTier2", c_techCountCompleteOnly) >= 1)) {
            lv_artifactAbility = 2;
        }

    }

    if ((CatalogFieldValueGetAsInt(c_gameCatalogAbil, "ZeratulArtifactSearchSpecialize", "InfoArray[" + IntToString(lv_artifactAbility) + "].Resource[" + IntToString(0) + "]", lp_player) == 0)) {
        auto89140161_g = UnitGroupFilterPlayer(lib7A9A9B22_gv_zeratulArtifactSearchGroup, lp_player, 0);
        auto89140161_u = UnitGroupCount(auto89140161_g, c_unitCountAll);
        for (;; auto89140161_u -= 1) {
            auto89140161_var = UnitGroupUnitFromEnd(auto89140161_g, auto89140161_u);
            if (auto89140161_var == null) { break; }
            UnitGroupAdd(lib7A9A9B22_gv_stagingAreaSpawners, auto89140161_var);
            UnitGroupRemove(lib7A9A9B22_gv_zeratulArtifactSearchGroup, auto89140161_var);
            UnitBehaviorRemove(auto89140161_var, "ZeratulArtifactSearchActive", 1);
        }
    }

}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Dehaka Gene Creeper Host
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_gt_DehakaGeneCreeperHost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib7A9A9B22_gf_Dehaka2Genes(EventPlayerEffectUsedUnit(c_effectUnitTarget), "DehakaCreeperHostPlace", "DehakaCreeperHostPlaceEvolvedCarapace", "DehakaCreeperHostPlaceEvolvedIncubationSacs");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7A9A9B22_gt_DehakaGeneCreeperHost_Init () {
    lib7A9A9B22_gt_DehakaGeneCreeperHost = TriggerCreate("lib7A9A9B22_gt_DehakaGeneCreeperHost_Func");
    TriggerAddEventPlayerEffectUsed(lib7A9A9B22_gt_DehakaGeneCreeperHost, c_playerAny, "DehakaGeneCreeperHost");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dehaka Gene Ravasaur
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_gt_DehakaGeneRavasaur_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib7A9A9B22_gf_Dehaka3Genes(EventPlayerEffectUsedUnit(c_effectUnitTarget), "DehakaRavasaurPlace", "DehakaRavasaurPlaceEvolvedCarapace", "DehakaRavasaurPlaceEvolvedAdrenalGlands", "DehakaRavasaurPlaceEvolvedLeeching");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7A9A9B22_gt_DehakaGeneRavasaur_Init () {
    lib7A9A9B22_gt_DehakaGeneRavasaur = TriggerCreate("lib7A9A9B22_gt_DehakaGeneRavasaur_Func");
    TriggerAddEventPlayerEffectUsed(lib7A9A9B22_gt_DehakaGeneRavasaur, c_playerAny, "DehakaGeneRavasaur");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dehaka Gene Primal Igniter
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_gt_DehakaGenePrimalIgniter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib7A9A9B22_gf_Dehaka3Genes(EventPlayerEffectUsedUnit(c_effectUnitTarget), "DehakaPrimalIgniterPlace", "DehakaPrimalIgniterPlaceEvolvedCarapace", "DehakaPrimalIgniterPlaceEvolvedAdrenalGlands", "DehakaPrimalIgniterPlaceEvolvedLeeching");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7A9A9B22_gt_DehakaGenePrimalIgniter_Init () {
    lib7A9A9B22_gt_DehakaGenePrimalIgniter = TriggerCreate("lib7A9A9B22_gt_DehakaGenePrimalIgniter_Func");
    TriggerAddEventPlayerEffectUsed(lib7A9A9B22_gt_DehakaGenePrimalIgniter, c_playerAny, "DehakaGenePrimalIgniter");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dehaka Gene Primal Mutalisk
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_gt_DehakaGenePrimalMutalisk_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib7A9A9B22_gf_Dehaka3Genes(EventPlayerEffectUsedUnit(c_effectUnitTarget), "DehakaPrimalMutaliskPlace", "DehakaPrimalMutaliskPlaceEvolvedCarapace", "DehakaPrimalMutaliskPlaceEvolvedAdrenalGlands", "DehakaPrimalMutaliskPlaceEvolvedLeeching");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7A9A9B22_gt_DehakaGenePrimalMutalisk_Init () {
    lib7A9A9B22_gt_DehakaGenePrimalMutalisk = TriggerCreate("lib7A9A9B22_gt_DehakaGenePrimalMutalisk_Func");
    TriggerAddEventPlayerEffectUsed(lib7A9A9B22_gt_DehakaGenePrimalMutalisk, c_playerAny, "DehakaGenePrimalMutalisk");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dehaka Gene Primal Guardian
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_gt_DehakaGenePrimalGuardian_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib7A9A9B22_gf_Dehaka3Genes(EventPlayerEffectUsedUnit(c_effectUnitTarget), "DehakaPrimalGuardianPlace", "DehakaPrimalGuardianPlaceEvolvedCarapace", "DehakaPrimalGuardianPlaceEvolvedAdrenalGlands", "DehakaPrimalGuardianPlaceEvolvedLeeching");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7A9A9B22_gt_DehakaGenePrimalGuardian_Init () {
    lib7A9A9B22_gt_DehakaGenePrimalGuardian = TriggerCreate("lib7A9A9B22_gt_DehakaGenePrimalGuardian_Func");
    TriggerAddEventPlayerEffectUsed(lib7A9A9B22_gt_DehakaGenePrimalGuardian, c_playerAny, "DehakaGenePrimalGuardian");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dehaka Gene Impaler
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_gt_DehakaGeneImpaler_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib7A9A9B22_gf_Dehaka3Genes(EventPlayerEffectUsedUnit(c_effectUnitTarget), "DehakaImpalerPlace", "DehakaImpalerPlaceEvolvedCarapace", "DehakaImpalerPlaceEvolvedAdrenalGlands", "DehakaImpalerPlaceEvolvedLeeching");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7A9A9B22_gt_DehakaGeneImpaler_Init () {
    lib7A9A9B22_gt_DehakaGeneImpaler = TriggerCreate("lib7A9A9B22_gt_DehakaGeneImpaler_Func");
    TriggerAddEventPlayerEffectUsed(lib7A9A9B22_gt_DehakaGeneImpaler, c_playerAny, "DehakaGeneImpaler");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dehaka Gene Tyrannozor
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_gt_DehakaGeneTyrannozor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib7A9A9B22_gf_Dehaka4Genes(EventPlayerEffectUsedUnit(c_effectUnitTarget), "DehakaTyrannozorPlace", "DehakaTyrannozorPlaceEvolvedCarapace", "DehakaTyrannozorPlaceEvolvedAdrenalGlands", "DehakaTyrannozorPlaceEvolvedLeeching", "DehakaTyrannozorPlaceSpikedHide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7A9A9B22_gt_DehakaGeneTyrannozor_Init () {
    lib7A9A9B22_gt_DehakaGeneTyrannozor = TriggerCreate("lib7A9A9B22_gt_DehakaGeneTyrannozor_Func");
    TriggerAddEventPlayerEffectUsed(lib7A9A9B22_gt_DehakaGeneTyrannozor, c_playerAny, "DehakaGeneTyrannozor");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Stun
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_gt_UnitStun_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libDDE92A83_gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(lib7A9A9B22_gv_waypointGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib7A9A9B22_gf_WaypointRefreshOrder(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7A9A9B22_gt_UnitStun_Init () {
    lib7A9A9B22_gt_UnitStun = TriggerCreate("lib7A9A9B22_gt_UnitStun_Func");
    TriggerEnable(lib7A9A9B22_gt_UnitStun, false);
    TriggerAddEventUnitBehaviorChange(lib7A9A9B22_gt_UnitStun, null, "GravitonBeam", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib7A9A9B22_gt_UnitStun, null, "FungalGrowthMovement", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib7A9A9B22_gt_UnitStun, null, "OracleStasisTrapTarget", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib7A9A9B22_gt_UnitStun, null, "Stun", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib7A9A9B22_gt_UnitStun, null, "RavenScramblerMissile", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib7A9A9B22_gt_UnitStun, null, "InfestedDiamondbackStarlightSnare", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib7A9A9B22_gt_UnitStun, null, "ApocaliskChargeEnd", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib7A9A9B22_gt_UnitStun, null, "TorrasqueBurrowChargeActive", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib7A9A9B22_gt_UnitStun, null, "RavenScramblerMissile", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib7A9A9B22_gt_UnitStun, null, "BroodQueenFungalGrowthMovement", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib7A9A9B22_gt_UnitStun, null, "Yoink", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib7A9A9B22_gt_UnitStun, null, "DarkArchonStarlightConfusionFinal", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Idle
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_gt_UnitIdle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto77F86C21_g;
    int auto77F86C21_u;
    unit auto77F86C21_var;
    unitgroup auto832B1061_g;
    int auto832B1061_u;
    unit auto832B1061_var;

    // Conditions
    if (testConds) {
        if (!((libDDE92A83_gv_gameOver == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(lib7A9A9B22_gv_waypointGroup, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(lib7A9A9B22_gv_spawnsFinalWaypoint, EventUnit()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), Point(UnitGetCustomValue(EventUnit(), (lib7A9A9B22_gv_customValueWaypoint1X + (FixedToInt(UnitGetCustomValue(EventUnit(), lib7A9A9B22_gv_customValueOrderCurrent)) * 2))), UnitGetCustomValue(EventUnit(), (lib7A9A9B22_gv_customValueWaypoint1Y + (FixedToInt(UnitGetCustomValue(EventUnit(), lib7A9A9B22_gv_customValueOrderCurrent)) * 2))))) < 1.0)) {
        if ((UnitGetCustomValue(EventUnit(), lib7A9A9B22_gv_customValueOrderCurrent) < UnitGetCustomValue(EventUnit(), lib7A9A9B22_gv_customValueOrderMax))) {
            UnitSetCustomValue(EventUnit(), lib7A9A9B22_gv_customValueOrderCurrent, IntToFixed(libNtve_gf_ArithmeticIntClamp((FixedToInt(UnitGetCustomValue(EventUnit(), lib7A9A9B22_gv_customValueOrderCurrent)) + 1), 0, lib7A9A9B22_gv_waypointMax)));
            auto832B1061_g = UnitGroup(null, UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(EventUnit()), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto832B1061_u = UnitGroupCount(auto832B1061_g, c_unitCountAll);
            for (;; auto832B1061_u -= 1) {
                auto832B1061_var = UnitGroupUnitFromEnd(auto832B1061_g, auto832B1061_u);
                if (auto832B1061_var == null) { break; }
                if ((UnitGetCustomValue(auto832B1061_var, lib7A9A9B22_gv_customValueOrderCurrent) == (UnitGetCustomValue(EventUnit(), lib7A9A9B22_gv_customValueOrderCurrent) - 1.0)) && (UnitGroupHasUnit(lib7A9A9B22_gv_waypointGroup, auto832B1061_var) == true) && (UnitGroupHasUnit(lib7A9A9B22_gv_spawnsFinalWaypoint, auto832B1061_var) == false) && (auto832B1061_var != EventUnit())) {
                    UnitSetCustomValue(auto832B1061_var, lib7A9A9B22_gv_customValueOrderCurrent, UnitGetCustomValue(EventUnit(), lib7A9A9B22_gv_customValueOrderCurrent));
                    lib7A9A9B22_gf_WaypointRefreshOrder(auto832B1061_var);
                }

            }
        }
        else {
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("AttackWarpPrism", 0), Point(UnitGetCustomValue(EventUnit(), lib7A9A9B22_gv_customValueWaypointFinalX), UnitGetCustomValue(EventUnit(), lib7A9A9B22_gv_customValueWaypointFinalY))), c_orderQueueReplace);
            UnitGroupAdd(lib7A9A9B22_gv_spawnsFinalWaypoint, EventUnit());
            auto77F86C21_g = UnitGroup(null, UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(EventUnit()), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto77F86C21_u = UnitGroupCount(auto77F86C21_g, c_unitCountAll);
            for (;; auto77F86C21_u -= 1) {
                auto77F86C21_var = UnitGroupUnitFromEnd(auto77F86C21_g, auto77F86C21_u);
                if (auto77F86C21_var == null) { break; }
                if ((UnitGetCustomValue(auto77F86C21_var, lib7A9A9B22_gv_customValueOrderCurrent) == (UnitGetCustomValue(EventUnit(), lib7A9A9B22_gv_customValueOrderCurrent) - 0.0)) && (UnitGroupHasUnit(lib7A9A9B22_gv_waypointGroup, auto77F86C21_var) == true) && (UnitGroupHasUnit(lib7A9A9B22_gv_spawnsFinalWaypoint, auto77F86C21_var) == false)) {
                    UnitGroupAdd(lib7A9A9B22_gv_spawnsFinalWaypoint, auto77F86C21_var);
                    UnitIssueOrder(auto77F86C21_var, OrderTargetingPoint(AbilityCommand("AttackWarpPrism", 0), Point(UnitGetCustomValue(auto77F86C21_var, lib7A9A9B22_gv_customValueWaypointFinalX), UnitGetCustomValue(auto77F86C21_var, lib7A9A9B22_gv_customValueWaypointFinalY))), c_orderQueueReplace);
                }

            }
        }
    }

    lib7A9A9B22_gf_WaypointRefreshOrder(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7A9A9B22_gt_UnitIdle_Init () {
    lib7A9A9B22_gt_UnitIdle = TriggerCreate("lib7A9A9B22_gt_UnitIdle_Func");
    TriggerEnable(lib7A9A9B22_gt_UnitIdle, false);
    TriggerAddEventUnitBecomesIdle(lib7A9A9B22_gt_UnitIdle, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawns Final Waypoint Refresh
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_gt_SpawnsFinalWaypointRefresh_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib7A9A9B22_gf_SpawnsFinalWaypointRefresh();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7A9A9B22_gt_SpawnsFinalWaypointRefresh_Init () {
    lib7A9A9B22_gt_SpawnsFinalWaypointRefresh = TriggerCreate("lib7A9A9B22_gt_SpawnsFinalWaypointRefresh_Func");
    TriggerEnable(lib7A9A9B22_gt_SpawnsFinalWaypointRefresh, false);
    TriggerAddEventTimePeriodic(lib7A9A9B22_gt_SpawnsFinalWaypointRefresh, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Idle Check
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_gt_UnitIdleCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libDDE92A83_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(lib7A9A9B22_gv_waypointGroup, EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true)) {
        if ((UnitGroupHasUnit(lib7A9A9B22_gv_spawnsFinalWaypoint, EventPlayerEffectUsedUnit(c_effectUnitCaster)) == false)) {
            lib7A9A9B22_gf_WaypointRefreshOrder(EventPlayerEffectUsedUnit(c_effectUnitCaster));
        }

    }
    else {
        UnitAbilityEnable(EventPlayerEffectUsedUnit(c_effectUnitCaster), "IdleCheck", false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7A9A9B22_gt_UnitIdleCheck_Init () {
    lib7A9A9B22_gt_UnitIdleCheck = TriggerCreate("lib7A9A9B22_gt_UnitIdleCheck_Func");
    TriggerEnable(lib7A9A9B22_gt_UnitIdleCheck, false);
    TriggerAddEventPlayerEffectUsed(lib7A9A9B22_gt_UnitIdleCheck, c_playerAny, "IdleCheck");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Morph
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_gt_UnitMorph_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libDDE92A83_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib7A9A9B22_gf_WaypointRefreshOrder(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7A9A9B22_gt_UnitMorph_Init () {
    lib7A9A9B22_gt_UnitMorph = TriggerCreate("lib7A9A9B22_gt_UnitMorph_Func");
    TriggerEnable(lib7A9A9B22_gt_UnitMorph, false);
    TriggerAddEventUnitAbility(lib7A9A9B22_gt_UnitMorph, null, AbilityCommand("Unsiege", 0), c_abilMorphStageMoverEnd, false);
    TriggerAddEventUnitAbility(lib7A9A9B22_gt_UnitMorph, null, AbilityCommand("WidowMineBurrow", 0), c_abilMorphStageMoverEnd, false);
    TriggerAddEventUnitAbility(lib7A9A9B22_gt_UnitMorph, null, AbilityCommand("WidowMineUnburrow", 0), c_abilMorphStageMoverEnd, false);
    TriggerAddEventUnitAbility(lib7A9A9B22_gt_UnitMorph, null, AbilityCommand("MorphToInfestedTerran", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib7A9A9B22_gt_UnitMorph, null, AbilityCommand("MorphToSwarmHostMP", 0), c_abilMorphStageMoverEnd, false);
    TriggerAddEventUnitAbility(lib7A9A9B22_gt_UnitMorph, null, AbilityCommand("BurrowLurkerMPUp", 0), c_abilMorphStageMoverEnd, false);
    TriggerAddEventUnitAbility(lib7A9A9B22_gt_UnitMorph, null, AbilityCommand("AssaultMode", 0), c_abilMorphStageMoverEnd, false);
    TriggerAddEventUnitAbility(lib7A9A9B22_gt_UnitMorph, null, AbilityCommand("FighterMode", 0), c_abilMorphStageMoverEnd, false);
    TriggerAddEventUnitAbility(lib7A9A9B22_gt_UnitMorph, null, AbilityCommand("LiberatorMorphtoAA", 0), c_abilMorphStageMoverEnd, false);
    TriggerAddEventUnitAbility(lib7A9A9B22_gt_UnitMorph, null, AbilityCommand("RaidLiberatorUnsiege", 0), c_abilMorphStageMoverEnd, false);
    TriggerAddEventUnitAbility(lib7A9A9B22_gt_UnitMorph, null, AbilityCommand("HeavySiegeTankUnsiege", 0), c_abilMorphStageMoverEnd, false);
    TriggerAddEventUnitAbility(lib7A9A9B22_gt_UnitMorph, null, AbilityCommand("InfestedBansheeStarlightBurrowUp", 0), c_abilMorphStageMoverEnd, false);
    TriggerAddEventUnitAbility(lib7A9A9B22_gt_UnitMorph, null, AbilityCommand("InfestedSiegeTankStarlightUproot", 0), c_abilMorphStageMoverEnd, false);
    TriggerAddEventUnitAbility(lib7A9A9B22_gt_UnitMorph, null, AbilityCommand("TorrasqueRebirth", 0), c_abilMorphStageMoverEnd, false);
    TriggerAddEventUnitAbility(lib7A9A9B22_gt_UnitMorph, null, AbilityCommand("DehakaImpalerUnburrow", 0), c_abilMorphStageMoverEnd, false);
    TriggerAddEventUnitAbility(lib7A9A9B22_gt_UnitMorph, null, AbilityCommand("DehakaPrimalHostUnburrow", 0), c_abilMorphStageMoverEnd, false);
    TriggerAddEventUnitAbility(lib7A9A9B22_gt_UnitMorph, null, AbilityCommand("DehakaCreeperHostUnburrow", 0), c_abilMorphStageMoverEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Summon
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_gt_UnitSummon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libDDE92A83_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(EventUnitCreatedUnit(), lib7A9A9B22_gv_customValueWaypoint1X, UnitGetCustomValue(EventUnit(), lib7A9A9B22_gv_customValueWaypoint1X));
    UnitSetCustomValue(EventUnitCreatedUnit(), lib7A9A9B22_gv_customValueWaypoint1Y, UnitGetCustomValue(EventUnit(), lib7A9A9B22_gv_customValueWaypoint1Y));
    UnitSetCustomValue(EventUnitCreatedUnit(), lib7A9A9B22_gv_customValueWaypointFinalX, UnitGetCustomValue(EventUnit(), lib7A9A9B22_gv_customValueWaypointFinalX));
    UnitSetCustomValue(EventUnitCreatedUnit(), lib7A9A9B22_gv_customValueWaypointFinalY, UnitGetCustomValue(EventUnit(), lib7A9A9B22_gv_customValueWaypointFinalY));
    UnitGroupAdd(lib7A9A9B22_gv_waypointGroup, EventUnitCreatedUnit());
    lib7A9A9B22_gf_WaypointRefreshOrder(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7A9A9B22_gt_UnitSummon_Init () {
    lib7A9A9B22_gt_UnitSummon = TriggerCreate("lib7A9A9B22_gt_UnitSummon_Func");
    TriggerEnable(lib7A9A9B22_gt_UnitSummon, false);
    TriggerAddEventUnitCreated(lib7A9A9B22_gt_UnitSummon, null, "HallucinationArchon", null);
    TriggerAddEventUnitCreated(lib7A9A9B22_gt_UnitSummon, null, "HallucinationColossus", null);
    TriggerAddEventUnitCreated(lib7A9A9B22_gt_UnitSummon, null, "HallucinationHighTemplar", null);
    TriggerAddEventUnitCreated(lib7A9A9B22_gt_UnitSummon, null, "HallucinationImmortal", null);
    TriggerAddEventUnitCreated(lib7A9A9B22_gt_UnitSummon, null, "HallucinationPhoenix", null);
    TriggerAddEventUnitCreated(lib7A9A9B22_gt_UnitSummon, null, "HallucinationProbe", null);
    TriggerAddEventUnitCreated(lib7A9A9B22_gt_UnitSummon, null, "HallucinationStalker", null);
    TriggerAddEventUnitCreated(lib7A9A9B22_gt_UnitSummon, null, "HallucinationVoidRay", null);
    TriggerAddEventUnitCreated(lib7A9A9B22_gt_UnitSummon, null, "HallucinationWarpPrism", null);
    TriggerAddEventUnitCreated(lib7A9A9B22_gt_UnitSummon, null, "HallucinationZealot", null);
    TriggerAddEventUnitCreated(lib7A9A9B22_gt_UnitSummon, null, "HallucinationAdept", null);
    TriggerAddEventUnitCreated(lib7A9A9B22_gt_UnitSummon, null, "HallucinationDisruptor", null);
    TriggerAddEventUnitCreated(lib7A9A9B22_gt_UnitSummon, null, "HallucinationOracle", null);
    TriggerAddEventUnitCreated(lib7A9A9B22_gt_UnitSummon, null, "InfestedTerrans", null);
    TriggerAddEventUnitCreated(lib7A9A9B22_gt_UnitSummon, null, "SwarmHostSpawnLocusts", null);
    TriggerAddEventUnitCreated(lib7A9A9B22_gt_UnitSummon, null, "SpawnLocustsTargeted", null);
    TriggerAddEventUnitCreated(lib7A9A9B22_gt_UnitSummon, null, "DehakaCreeperHostSpawn", null);
    TriggerAddEventUnitCreated(lib7A9A9B22_gt_UnitSummon, null, "DehakaPrimalHostSpawn", null);
    TriggerAddEventUnitCreated(lib7A9A9B22_gt_UnitSummon, null, "PurificationNova", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Summon Effect
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_gt_UnitSummonEffect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libDDE92A83_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitTarget), "RecentlyMindControlled") == true)) {
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "NeuralParasiteAttack", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    }
    else {
        UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), lib7A9A9B22_gv_customValueWaypoint1X, UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitSource), lib7A9A9B22_gv_customValueWaypoint1X));
        UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), lib7A9A9B22_gv_customValueWaypoint1Y, UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitSource), lib7A9A9B22_gv_customValueWaypoint1Y));
        UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), lib7A9A9B22_gv_customValueWaypointFinalX, UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitSource), lib7A9A9B22_gv_customValueWaypointFinalX));
        UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), lib7A9A9B22_gv_customValueWaypointFinalY, UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitSource), lib7A9A9B22_gv_customValueWaypointFinalY));
        UnitGroupAdd(lib7A9A9B22_gv_waypointGroup, EventPlayerEffectUsedUnit(c_effectUnitTarget));
        if ((UnitGroupHasUnit(lib7A9A9B22_gv_stagingAreaTeamSpawns[0], EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true)) {
            UnitGroupAdd(lib7A9A9B22_gv_stagingAreaTeamSpawns[0], EventPlayerEffectUsedUnit(c_effectUnitTarget));
        }
        else {
            if ((UnitGroupHasUnit(lib7A9A9B22_gv_stagingAreaTeamSpawns[1], EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true)) {
                UnitGroupAdd(lib7A9A9B22_gv_stagingAreaTeamSpawns[1], EventPlayerEffectUsedUnit(c_effectUnitTarget));
            }

        }
        lib7A9A9B22_gf_WaypointRefreshOrder(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7A9A9B22_gt_UnitSummonEffect_Init () {
    lib7A9A9B22_gt_UnitSummonEffect = TriggerCreate("lib7A9A9B22_gt_UnitSummonEffect_Func");
    TriggerEnable(lib7A9A9B22_gt_UnitSummonEffect, false);
    TriggerAddEventPlayerEffectUsed(lib7A9A9B22_gt_UnitSummonEffect, c_playerAny, "ZagaraCorruptorIncubationSet");
    TriggerAddEventPlayerEffectUsed(lib7A9A9B22_gt_UnitSummonEffect, c_playerAny, "ZagaraAberrationIncubationSet");
    TriggerAddEventPlayerEffectUsed(lib7A9A9B22_gt_UnitSummonEffect, c_playerAny, "TychusVegaDominate");
    TriggerAddEventPlayerEffectUsed(lib7A9A9B22_gt_UnitSummonEffect, c_playerAny, "UnitSummonInheritOrdersTrigger");
    TriggerAddEventPlayerEffectUsed(lib7A9A9B22_gt_UnitSummonEffect, c_playerAny, "MedivacMengskUnloadSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Summon No Inherit
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_gt_UnitSummonNoInherit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libDDE92A83_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(lib7A9A9B22_gv_stagingAreaTeamInternal[0], EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == true)) {
        UnitGroupAdd(lib7A9A9B22_gv_stagingAreaTeamSpawns[0], EventPlayerEffectUsedUnit(c_effectUnitTarget));
    }
    else {
        UnitGroupAdd(lib7A9A9B22_gv_stagingAreaTeamSpawns[1], EventPlayerEffectUsedUnit(c_effectUnitTarget));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7A9A9B22_gt_UnitSummonNoInherit_Init () {
    lib7A9A9B22_gt_UnitSummonNoInherit = TriggerCreate("lib7A9A9B22_gt_UnitSummonNoInherit_Func");
    TriggerEnable(lib7A9A9B22_gt_UnitSummonNoInherit, false);
    TriggerAddEventPlayerEffectUsed(lib7A9A9B22_gt_UnitSummonNoInherit, c_playerAny, "UnitSummonNoInherit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Neural Parasite On
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_gt_NeuralParasiteOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoBE1FDC3B_val;

    // Conditions
    if (testConds) {
        if (!((libDDE92A83_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBE1FDC3B_val = EventUnitBehavior();
    if (autoBE1FDC3B_val == "NeuralParasite") {
        UnitBehaviorAdd(EventUnit(), "NeuralParasiteAttack", UnitBehaviorEffectUnit(EventUnit(), "NeuralParasite", c_effectUnitCaster, 0), 1);
    }
    else if (autoBE1FDC3B_val == "DarkArchonStarlightMindControl") {
        UnitBehaviorAdd(EventUnit(), "NeuralParasiteAttack", UnitBehaviorEffectUnit(EventUnit(), "DarkArchonStarlightMindControl", c_effectUnitCaster, 0), 1);
    }
    else if (autoBE1FDC3B_val == "DarkArchonStarlightConfusion") {
        UnitBehaviorAdd(EventUnit(), "NeuralParasiteAttack", UnitBehaviorEffectUnit(EventUnit(), "DarkArchonStarlightMindControl", c_effectUnitCaster, 0), 1);
    }
    else if (autoBE1FDC3B_val == "EnergizerReclamation") {
        UnitBehaviorAdd(EventUnit(), "NeuralParasiteAttack", UnitBehaviorEffectUnit(EventUnit(), "EnergizerReclamation", c_effectUnitCaster, 0), 1);
    }
    else if (autoBE1FDC3B_val == "TychusVegaDominate") {
        UnitBehaviorAdd(EventUnit(), "NeuralParasiteAttack", UnitBehaviorEffectUnit(EventUnit(), "TychusVegaDominate", c_effectUnitCaster, 0), 1);
    }
    else if (autoBE1FDC3B_val == "TychusVegaDominateType88Persuader") {
        UnitBehaviorAdd(EventUnit(), "NeuralParasiteAttack", UnitBehaviorEffectUnit(EventUnit(), "TychusVegaDominateType88Persuader", c_effectUnitCaster, 0), 1);
    }
    else {
        UnitBehaviorAdd(EventUnit(), "NeuralParasiteAttack", UnitBehaviorEffectUnit(EventUnit(), EventUnitBehavior(), c_effectUnitCaster, 0), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7A9A9B22_gt_NeuralParasiteOn_Init () {
    lib7A9A9B22_gt_NeuralParasiteOn = TriggerCreate("lib7A9A9B22_gt_NeuralParasiteOn_Func");
    TriggerEnable(lib7A9A9B22_gt_NeuralParasiteOn, false);
    TriggerAddEventUnitBehaviorChange(lib7A9A9B22_gt_NeuralParasiteOn, null, "NeuralParasite", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib7A9A9B22_gt_NeuralParasiteOn, null, "DarkArchonStarlightMindControl", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib7A9A9B22_gt_NeuralParasiteOn, null, "DarkArchonStarlightConfusion", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib7A9A9B22_gt_NeuralParasiteOn, null, "EnergizerReclamation", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib7A9A9B22_gt_NeuralParasiteOn, null, "TychusVegaDominate", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib7A9A9B22_gt_NeuralParasiteOn, null, "TychusVegaDominateType88Persuader", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib7A9A9B22_gt_NeuralParasiteOn, null, "Domination", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Neural Parasite Off
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_gt_NeuralParasiteOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((libDDE92A83_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "NeuralParasiteAttack", 1);
    UnitBehaviorRemove(EventUnit(), "DarkArchonStarlightMindControl", 1);
    UnitBehaviorRemove(EventUnit(), "DarkArchonStarlightConfusion", 1);
    UnitBehaviorRemove(EventUnit(), "EnergizerReclamation", 1);
    UnitBehaviorRemove(EventUnit(), "TychusVegaDominate", 1);
    UnitBehaviorRemove(EventUnit(), "TychusVegaDominateType88Persuader", 1);
    UnitBehaviorRemove(EventUnit(), "Domination", 1);
    if ((UnitGroupHasUnit(lib7A9A9B22_gv_waypointGroup, EventUnit()) == true)) {
        lib7A9A9B22_gf_WaypointRefreshOrder(EventUnit());
    }
    else {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("AttackWarpPrism", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7A9A9B22_gt_NeuralParasiteOff_Init () {
    lib7A9A9B22_gt_NeuralParasiteOff = TriggerCreate("lib7A9A9B22_gt_NeuralParasiteOff_Func");
    TriggerEnable(lib7A9A9B22_gt_NeuralParasiteOff, false);
    TriggerAddEventUnitBehaviorChange(lib7A9A9B22_gt_NeuralParasiteOff, null, "NeuralParasite", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib7A9A9B22_gt_NeuralParasiteOff, null, "DarkArchonStarlightMindControl", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib7A9A9B22_gt_NeuralParasiteOff, null, "DarkArchonStarlightConfusion", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib7A9A9B22_gt_NeuralParasiteOff, null, "EnergizerReclamation", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib7A9A9B22_gt_NeuralParasiteOff, null, "TychusVegaDominate", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib7A9A9B22_gt_NeuralParasiteOff, null, "TychusVegaDominateType88Persuader", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib7A9A9B22_gt_NeuralParasiteOff, null, "Domination", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Equipment Shop Birth
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_gt_EquipmentShopBirth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropEnergyMax, UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitPropEnergyMax, c_unitPropCurrent));
    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropEnergy, UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitPropEnergy, c_unitPropCurrent));
    UnitGroupAdd(lib7A9A9B22_gv_equipmentShop, EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7A9A9B22_gt_EquipmentShopBirth_Init () {
    lib7A9A9B22_gt_EquipmentShopBirth = TriggerCreate("lib7A9A9B22_gt_EquipmentShopBirth_Func");
    TriggerAddEventPlayerEffectUsed(lib7A9A9B22_gt_EquipmentShopBirth, c_playerAny, "EquipmentShopTrainSetComplete");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Mine Built
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_gt_MineralMineBuilt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libDDE92A83_gv_gameOver == false))) {
            return false;
        }

        if (!((PlayerType(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)) != c_playerTypeNeutral))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), "SpookySkeletonNerf", -1);
    PlayerScoreValueSetFromInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), "MineralMineCount", (PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), "MineralMineCount") + 1));
    PlayerScoreValueSetFromInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), "MineralMineSpending", (PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), "MineralMineSpending") + (CatalogFieldValueGetAsInt(c_gameCatalogAbil, "RefineryMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) - 75)));
    UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 0, GameGetMissionTime());
    UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 1, (CatalogFieldValueGetAsInt(c_gameCatalogAbil, "RefineryMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) - 75));
    UnitGroupAdd(lib7A9A9B22_gv_mineralMines, EventPlayerEffectUsedUnit(c_effectUnitTarget));
    lib29554E00_gf_AFKTimerRefresh(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)));
    lib7A9A9B22_gf_MineralIncomeUpdate(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget));
    lib1DE23868_gf_DehakaUpdateXP(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget));
    lib7A9A9B22_gf_UpdateAllMines();
    libDDE92A83_gf_PlayerAttributesUpdate(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7A9A9B22_gt_MineralMineBuilt_Init () {
    lib7A9A9B22_gt_MineralMineBuilt = TriggerCreate("lib7A9A9B22_gt_MineralMineBuilt_Func");
    TriggerAddEventPlayerEffectUsed(lib7A9A9B22_gt_MineralMineBuilt, c_playerAny, "MineralMineBuiltTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave Unit Death - Normal
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_gt_WaveUnitDeathNormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libDDE92A83_gv_gameOver == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(lib7A9A9B22_gv_stagingAreaPlayers, EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)) < 12))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib7A9A9B22_gf_WaveUnitDeath(EventPlayerEffectUsedUnit(c_effectUnitTarget), EventPlayerEffectUsedUnit(c_effectUnitSource));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7A9A9B22_gt_WaveUnitDeathNormal_Init () {
    lib7A9A9B22_gt_WaveUnitDeathNormal = TriggerCreate("lib7A9A9B22_gt_WaveUnitDeathNormal_Func");
    TriggerEnable(lib7A9A9B22_gt_WaveUnitDeathNormal, false);
    TriggerAddEventPlayerEffectUsed(lib7A9A9B22_gt_WaveUnitDeathNormal, c_playerAny, "WaveUnitDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave Unit Death - Special
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_gt_WaveUnitDeathSpecial_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libDDE92A83_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib7A9A9B22_gf_WaveUnitDeath(EventPlayerEffectUsedUnit(c_effectUnitCaster), EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7A9A9B22_gt_WaveUnitDeathSpecial_Init () {
    lib7A9A9B22_gt_WaveUnitDeathSpecial = TriggerCreate("lib7A9A9B22_gt_WaveUnitDeathSpecial_Func");
    TriggerEnable(lib7A9A9B22_gt_WaveUnitDeathSpecial, false);
    TriggerAddEventPlayerEffectUsed(lib7A9A9B22_gt_WaveUnitDeathSpecial, c_playerAny, "DehakaEatSetRetract");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Spawner Birth
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_gt_UnitSpawnerBirth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto8AE5D571_val;
    string autoAE252706_val;

    // Conditions
    if (testConds) {
        if (!((libDDE92A83_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityShow(EventPlayerEffectUsedUnit(c_effectUnitTarget), "attack", false);
    UnitAbilityShow(EventPlayerEffectUsedUnit(c_effectUnitTarget), "move", false);
    UnitAbilityShow(EventPlayerEffectUsedUnit(c_effectUnitTarget), "stop", false);
    UnitAbilityShow(EventPlayerEffectUsedUnit(c_effectUnitTarget), "AssaultMode", false);
    UnitAbilityShow(EventPlayerEffectUsedUnit(c_effectUnitTarget), "FighterMode", false);
    UnitAbilityShow(EventPlayerEffectUsedUnit(c_effectUnitTarget), "WreckingCrewAssaultMode", false);
    UnitAbilityShow(EventPlayerEffectUsedUnit(c_effectUnitTarget), "WreckingCrewFighterMode", false);
    UnitSetFacing(EventPlayerEffectUsedUnit(c_effectUnitTarget), UnitGetCustomValue(UnitGroupClosestToPoint(lib7A9A9B22_gf_StagingAreas(), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget))), 20), 0.0);
    UnitGroupAdd(lib7A9A9B22_gv_stagingAreaSpawners, EventPlayerEffectUsedUnit(c_effectUnitTarget));
    libDDE92A83_gf_PlayerAttributesUpdate(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)));
    lib29554E00_gf_AFKTimerRefresh(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)));
    lib7A9A9B22_gf_MengskRoyalGuardXPBank(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    auto8AE5D571_val = EventPlayerEffectUsedUnitType(c_effectUnitTarget);
    if (auto8AE5D571_val == "FenixFlyer") {
        if ((TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "FenixExperienceAwarded", c_techCountCompleteOnly) == 0)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "FenixExperienceAwarded", 1);
            lib39886FE6_gf_MasteryBarAwardExperience(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)), CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "CostResource[" + IntToString(0) + "]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))), true, false);
        }

    }
    else if (auto8AE5D571_val == "FenixWalker") {
        if ((TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "FenixExperienceAwarded", c_techCountCompleteOnly) == 0)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "FenixExperienceAwarded", 1);
            lib39886FE6_gf_MasteryBarAwardExperience(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)), CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "CostResource[" + IntToString(0) + "]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))), true, false);
        }

    }
    else if (auto8AE5D571_val == "FenixPraetor") {
        if ((TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "FenixExperienceAwarded", c_techCountCompleteOnly) == 0)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "FenixExperienceAwarded", 1);
            lib39886FE6_gf_MasteryBarAwardExperience(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)), CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "CostResource[" + IntToString(0) + "]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))), true, false);
        }

    }
    else {
        lib39886FE6_gf_MasteryBarAwardExperience(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)), CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "CostResource[" + IntToString(0) + "]", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))), true, false);
    }
    autoAE252706_val = EventPlayerEffectUsedUnitType(c_effectUnitTarget);
    if (autoAE252706_val == "LurkerMP") {
        if ((UnitGetType(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), 1)) == "WorkerKerrigan")) {
            UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "KerriganMalignantCreepBonus", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
        }

    }
    else {
    }
    if ((TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "MutationUnstoppable", c_techCountCompleteOnly) == 1)) {
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "Unstoppable", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    }

    lib7A9A9B22_gf_RaynorSupplyDropRework(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), EventPlayerEffectUsedUnit(c_effectUnitTarget));
    lib7A9A9B22_gf_CheckUnitSpawnersHavePower(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget));
    lib29554E00_gf_UnitSpawnerSellAbuse(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)));
    lib1DE23868_gf_DehakaUpdateXP(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)));
    lib479C7CBB_gf_LiveScoreboardUpdatePlayer(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)));
    libDDE92A83_gf_SandboxModeInfiniteMinerals();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7A9A9B22_gt_UnitSpawnerBirth_Init () {
    lib7A9A9B22_gt_UnitSpawnerBirth = TriggerCreate("lib7A9A9B22_gt_UnitSpawnerBirth_Func");
    TriggerEnable(lib7A9A9B22_gt_UnitSpawnerBirth, false);
    TriggerAddEventPlayerEffectUsed(lib7A9A9B22_gt_UnitSpawnerBirth, c_playerAny, "UnitSpawner");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Spawner Sell
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_gt_UnitSpawnerSell_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_mineralRefund;
    int lv_mengskXPRefund;

    // Automatic Variable Declarations
    unitgroup auto5180050D_g;
    int auto5180050D_u;
    unit auto5180050D_var;
    abilcmd auto74DDD194_val;
    string autoAEEB80A5_val;
    string auto4FFFBCA5_val;
    abilcmd autoC9F48D66_val;
    string auto410A5921_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libDDE92A83_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(lib7A9A9B22_gv_stagingAreaSpawners, EventUnit());
    libDDE92A83_gf_PlayerAttributesUpdate(UnitGetOwner(EventUnit()));
    lib29554E00_gf_AFKTimerRefresh(UnitGetOwner(EventUnit()));
    lib1DE23868_gf_FenixHeroBonuses(UnitGetOwner(EventUnit()));
    if ((UnitGroupCount(UnitInventoryGroup(EventUnit()), c_unitCountAlive) > 0)) {
        auto5180050D_g = UnitInventoryGroup(EventUnit());
        auto5180050D_u = UnitGroupCount(auto5180050D_g, c_unitCountAll);
        for (;; auto5180050D_u -= 1) {
            auto5180050D_var = UnitGroupUnitFromEnd(auto5180050D_g, auto5180050D_u);
            if (auto5180050D_var == null) { break; }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(auto5180050D_var), 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
            UnitRemove(auto5180050D_var);
        }
    }

    if ((UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostMinerals) > 0)) {
        lv_mineralRefund = CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "CostResource[" + IntToString(0) + "]", UnitGetOwner(EventUnit()));
        auto74DDD194_val = EventUnitAbility();
        if (auto74DDD194_val == AbilityCommand("Sell70", 0)) {
            lv_mineralRefund = ((lv_mineralRefund * 700) / 1000);
        }
        else if (auto74DDD194_val == AbilityCommand("Sell60", 0)) {
            lv_mineralRefund = ((lv_mineralRefund * 600) / 1000);
        }
        else if (auto74DDD194_val == AbilityCommand("Sell50", 0)) {
            lv_mineralRefund = ((lv_mineralRefund * 500) / 1000);
        }
        else {
        }
        if ((UnitHasBehavior2(EventUnit(), "RaynorCostReducedApplied") == true)) {
            lv_mineralRefund -= (UnitBehaviorCount(EventUnit(), "RaynorCostReducedApplied") * 5);
            autoAEEB80A5_val = UnitGetType(EventUnit());
            if (autoAEEB80A5_val == "Banshee") {
                libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "RaynorCostReducedBanshee", libNtve_gf_ArithmeticIntClamp((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "RaynorCostReducedBanshee", c_techCountCompleteOnly) + UnitBehaviorCount(EventUnit(), "RaynorCostReducedApplied")), 0, FixedToInt((IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogAbil, "BansheePlace", "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", 0)) / 5.0))));
            }
            else {
            }
        }

        auto4FFFBCA5_val = UnitGetType(EventUnitTargetUnit());
        if (auto4FFFBCA5_val == "Mothership") {
            PlayerAddChargeUsed(UnitGetOwner(EventUnit()), "Abil/Mothership", -1.0);
            PlayerAddChargeUsed(UnitGetOwner(EventUnit()), "Abil/MothershipCore", -1.0);
        }
        else if (auto4FFFBCA5_val == "MothershipCore") {
            PlayerAddChargeUsed(UnitGetOwner(EventUnit()), "Abil/MothershipCore", -1.0);
        }
        else if (auto4FFFBCA5_val == "DuskWing") {
            PlayerAddChargeUsed(UnitGetOwner(EventUnit()), "Abil/DuskWingsPlace", -1.0);
        }
        else if (auto4FFFBCA5_val == "RaynorHyperion") {
            PlayerAddChargeUsed(UnitGetOwner(EventUnit()), "Abil/RaynorHyperionPlace", -1.0);
        }
        else if (auto4FFFBCA5_val == "ShadowGuard") {
            PlayerAddChargeUsed(UnitGetOwner(EventUnit()), "Abil/ShadowGuardPlace", -1.0);
        }
        else if (auto4FFFBCA5_val == "StukovAleksander") {
            PlayerAddChargeUsed(UnitGetOwner(EventUnit()), "Abil/StukovAleksanderPlace", -1.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, IntToText(0));
        }
        else {
        }
        libDDE92A83_gf_KickerMinerals(lv_mineralRefund, UnitGetPosition(EventUnitTargetUnit()), UnitGetOwner(EventUnit()), (1.0 + UnitGetHeight(EventUnit())), true);
        lib39886FE6_gf_MasteryBarAwardExperience(UnitGetOwner(EventUnit()), (0 - lv_mineralRefund), true, false);
        SoundPlay(SoundLink("UI_TerranNewUnitAcquired", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
        PlayerScoreValueSetFromInt(UnitGetOwner(EventUnit()), "UnitsTotalValue", (PlayerScoreValueGetAsInt(UnitGetOwner(EventUnit()), "UnitsTotalValue") - CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnitTargetUnit()), "ScoreMake", UnitGetOwner(EventUnit()))));
        PlayerScoreValueSetFromInt(UnitGetOwner(EventUnit()), "MineralsSpent", (PlayerScoreValueGetAsInt(UnitGetOwner(EventUnit()), "MineralsSpent") - lv_mineralRefund));
        PlayerScoreValueSetFromInt(UnitGetOwner(EventUnit()), "MineralsCollected", (PlayerScoreValueGetAsInt(UnitGetOwner(EventUnit()), "MineralsCollected") - lv_mineralRefund));
        PlayerScoreValueSetFromInt(UnitGetOwner(EventUnit()), "MineralsUsedTotalArmy", (PlayerScoreValueGetAsInt(UnitGetOwner(EventUnit()), "MineralsUsedTotalArmy") - UnitTypeGetCost(UnitGetType(EventUnitTargetUnit()), c_unitCostMinerals)));
        PlayerScoreValueSetFromInt(UnitGetOwner(EventUnit()), "MineralsUsedTotalArmy", (PlayerScoreValueGetAsInt(UnitGetOwner(EventUnit()), "MineralsUsedTotalArmy") - UnitTypeGetCost(UnitGetType(EventUnitTargetUnit()), c_unitCostMinerals)));
        PlayerScoreValueSetFromInt(UnitGetOwner(EventUnit()), "UnitsTotalCount", (PlayerScoreValueGetAsInt(UnitGetOwner(EventUnit()), "UnitsTotalCount") - 1));
        PlayerScoreValueSetFromInt(UnitGetOwner(EventUnit()), "MineralsLosttoSelling", (PlayerScoreValueGetAsInt(UnitGetOwner(EventUnit()), "MineralsLosttoSelling") + (CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "CostResource[" + IntToString(0) + "]", UnitGetOwner(EventUnit())) - lv_mineralRefund)));
        lib29554E00_gf_UnitSpawnerSellAbuse(UnitGetOwner(EventUnit()));
    }

    if ((UnitXPTotal(EventUnit()) > 0.0) && (TechTreeUpgradeCount(EventPlayer(), "MengskRoyalGuardXP", c_techCountCompleteOnly) >= 1)) {
        UnitBehaviorRemove(EventUnit(), "MengskVeterancyPassive", 1);
        autoC9F48D66_val = EventUnitAbility();
        if (autoC9F48D66_val == AbilityCommand("SellFull", 0)) {
            lv_mengskXPRefund = FixedToInt(FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropXP, c_unitPropCurrent)));
        }
        else if (autoC9F48D66_val == AbilityCommand("Sell70", 0)) {
            lv_mengskXPRefund = ((FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropXP, c_unitPropCurrent)) * 700) / 1000);
        }
        else if (autoC9F48D66_val == AbilityCommand("Sell60", 0)) {
            lv_mengskXPRefund = ((FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropXP, c_unitPropCurrent)) * 600) / 1000);
        }
        else if (autoC9F48D66_val == AbilityCommand("Sell50", 0)) {
            lv_mengskXPRefund = ((FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropXP, c_unitPropCurrent)) * 500) / 1000);
        }
        else {
        }
        PlayerScoreValueSetFromInt(EventPlayer(), "MengskXPLostToSelling", (PlayerScoreValueGetAsInt(EventPlayer(), "MengskXPLostToSelling") + (FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropXP, c_unitPropCurrent)) - lv_mengskXPRefund)));
        lib1DE23868_gf_MengskAwardExperienceSplit(EventPlayer(), lv_mengskXPRefund);
        UnitSetPropertyFixed(EventUnit(), c_unitPropXP, 0.0);
    }

    auto410A5921_val = UnitGetType(EventUnitTargetUnit());
    if (auto410A5921_val == "DehakaCreeperHost") {
        lib7A9A9B22_gf_Dehaka2GenesUpdate(UnitGetOwner(EventUnit()), "DehakaCreeperHost", "DehakaCreeperHostPlace", "DehakaCreeperHostPlaceEvolvedCarapace", "DehakaCreeperHostPlaceEvolvedIncubationSacs");
    }
    else if (auto410A5921_val == "DehakaPrimalRavasaur") {
        lib7A9A9B22_gf_Dehaka3GenesUpdate(UnitGetOwner(EventUnit()), "DehakaPrimalRavasaur", "DehakaRavasaurPlace", "DehakaRavasaurPlaceEvolvedCarapace", "DehakaRavasaurPlaceEvolvedAdrenalGlands", "DehakaRavasaurPlaceEvolvedLeeching");
    }
    else if (auto410A5921_val == "DehakaPrimalIgniter") {
        lib7A9A9B22_gf_Dehaka3GenesUpdate(UnitGetOwner(EventUnit()), "DehakaPrimalIgniter", "DehakaPrimalIgniterPlace", "DehakaPrimalIgniterPlaceEvolvedCarapace", "DehakaPrimalIgniterPlaceEvolvedAdrenalGlands", "DehakaPrimalIgniterPlaceEvolvedLeeching");
    }
    else if (auto410A5921_val == "DehakaPrimalMutalisk") {
        lib7A9A9B22_gf_Dehaka3GenesUpdate(UnitGetOwner(EventUnit()), "DehakaPrimalMutalisk", "DehakaPrimalMutaliskPlace", "DehakaPrimalMutaliskPlaceEvolvedCarapace", "DehakaPrimalMutaliskPlaceEvolvedAdrenalGlands", "DehakaPrimalMutaliskPlaceEvolvedLeeching");
    }
    else if (auto410A5921_val == "DehakaPrimalGuardian") {
        lib7A9A9B22_gf_Dehaka3GenesUpdate(UnitGetOwner(EventUnit()), "DehakaPrimalGuardian", "DehakaPrimalGuardianPlace", "DehakaPrimalGuardianPlaceEvolvedCarapace", "DehakaPrimalGuardianPlaceEvolvedAdrenalGlands", "DehakaPrimalGuardianPlaceEvolvedLeeching");
    }
    else if (auto410A5921_val == "DehakaImpaler") {
        lib7A9A9B22_gf_Dehaka3GenesUpdate(UnitGetOwner(EventUnit()), "DehakaImpaler", "DehakaImpalerPlace", "DehakaImpalerPlaceEvolvedCarapace", "DehakaImpalerPlaceEvolvedAdrenalGlands", "DehakaImpalerPlaceEvolvedLeeching");
    }
    else if (auto410A5921_val == "DehakaTyrannozor") {
        lib7A9A9B22_gf_Dehaka4GenesUpdate(UnitGetOwner(EventUnit()), "DehakaTyrannozor", "DehakaTyrannozorPlace", "DehakaTyrannozorPlaceEvolvedCarapace", "DehakaTyrannozorPlaceEvolvedAdrenalGlands", "DehakaTyrannozorPlaceEvolvedLeeching", "DehakaTyrannozorPlaceSpikedHide");
    }
    else {
    }
    libDDE92A83_gf_SandboxModeInfiniteMinerals();
    UnitCreateEffectUnit(EventUnit(), "SuicideBlast", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7A9A9B22_gt_UnitSpawnerSell_Init () {
    lib7A9A9B22_gt_UnitSpawnerSell = TriggerCreate("lib7A9A9B22_gt_UnitSpawnerSell_Func");
    TriggerEnable(lib7A9A9B22_gt_UnitSpawnerSell, false);
    TriggerAddEventUnitAbility(lib7A9A9B22_gt_UnitSpawnerSell, null, AbilityCommand("SellFull", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(lib7A9A9B22_gt_UnitSpawnerSell, null, AbilityCommand("Sell70", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(lib7A9A9B22_gt_UnitSpawnerSell, null, AbilityCommand("Sell60", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(lib7A9A9B22_gt_UnitSpawnerSell, null, AbilityCommand("Sell50", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(lib7A9A9B22_gt_UnitSpawnerSell, null, AbilityCommand("HornerSell", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Spawner Reposition
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_gt_UnitSpawnerReposition_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoCC260960_g;
    int autoCC260960_var;

    // Conditions
    if (testConds) {
        if (!((libDDE92A83_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitFilterMatch(EventPlayerEffectUsedUnit(c_effectUnitCaster), 0, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHover) | (1 << c_targetFilterItem), 0)) == true)) {
        UnitSetFacing(EventPlayerEffectUsedUnit(c_effectUnitCaster), UnitGetCustomValue(UnitGroupClosestToPoint(lib7A9A9B22_gf_StagingAreas(), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster))), 20), 0.0);
    }

    if ((TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "GameModeTutorial", c_techCountCompleteOnly) == 0)) {
        UnitSelect(EventPlayerEffectUsedUnit(c_effectUnitCaster), EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), false);
    }
    else {
        autoCC260960_g = PlayerGroupActive();
        autoCC260960_var = -1;
        while (true) {
            autoCC260960_var = PlayerGroupNextPlayer(autoCC260960_g, autoCC260960_var);
            if (autoCC260960_var < 0) { break; }
            UnitSelect(EventPlayerEffectUsedUnit(c_effectUnitCaster), autoCC260960_var, false);
        }
    }
    lib29554E00_gf_AFKTimerRefresh(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    lib7A9A9B22_gf_CheckUnitSpawnersHavePower(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    if (((ModF(PointGetX(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster))), 0.5) != 0.0) || (ModF(PointGetY(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster))), 0.5) != 0.0))) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_messageAreaChat, StringToText(("[" + FixedToString(GameGetMissionTime(), 2) + "]: " + "Hmm")));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7A9A9B22_gt_UnitSpawnerReposition_Init () {
    lib7A9A9B22_gt_UnitSpawnerReposition = TriggerCreate("lib7A9A9B22_gt_UnitSpawnerReposition_Func");
    TriggerEnable(lib7A9A9B22_gt_UnitSpawnerReposition, false);
    TriggerAddEventPlayerEffectUsed(lib7A9A9B22_gt_UnitSpawnerReposition, c_playerAny, "RepositionTeleport");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Spawner Build Switch
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_gt_UnitSpawnerBuildSwitch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    abilcmd auto546643DF_val;

    // Conditions
    if (testConds) {
        if (!((libDDE92A83_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderSetAutoCast(EventUnitAbility(), false), c_orderQueueReplace);
    TechTreeAbilityAllow(UnitGetOwner(EventUnit()), EventUnitAbility(), false);
    auto546643DF_val = EventUnitAbility();
    if (auto546643DF_val == AbilityCommand("HellionPlace", 0)) {
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("HellbatPlace", 0), true);
    }
    else if (auto546643DF_val == AbilityCommand("HellbatPlace", 0)) {
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("HellionPlace", 0), true);
    }
    else if (auto546643DF_val == AbilityCommand("VikingFighterPlace", 0)) {
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("VikingAssaultPlace", 0), true);
    }
    else if (auto546643DF_val == AbilityCommand("VikingAssaultPlace", 0)) {
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("VikingFighterPlace", 0), true);
    }
    else if (auto546643DF_val == AbilityCommand("HornerDeimosVikingFighterPlace", 0)) {
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("HornerDeimosVikingAssaultPlace", 0), true);
    }
    else if (auto546643DF_val == AbilityCommand("HornerDeimosVikingAssaultPlace", 0)) {
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("HornerDeimosVikingFighterPlace", 0), true);
    }
    else if (auto546643DF_val == AbilityCommand("VikingMengskFighterPlace", 0)) {
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("VikingMengskAssaultPlace", 0), true);
    }
    else if (auto546643DF_val == AbilityCommand("VikingMengskAssaultPlace", 0)) {
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("VikingMengskFighterPlace", 0), true);
    }
    else if (auto546643DF_val == AbilityCommand("ThorPlace", 0)) {
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("ThorSiegePlace", 0), true);
    }
    else if (auto546643DF_val == AbilityCommand("ThorSiegePlace", 0)) {
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("ThorPlace", 0), true);
    }
    else if (auto546643DF_val == AbilityCommand("ObserverPlace", 0)) {
        if ((UnitAbilityExists(EventUnit(), "OraclePlace") == true)) {
            TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("OraclePlace", 0), true);
        }
        else {
            TechTreeAbilityAllow(UnitGetOwner(EventUnit()), EventUnitAbility(), true);
        }
    }
    else if (auto546643DF_val == AbilityCommand("OraclePlace", 0)) {
        if ((UnitAbilityExists(EventUnit(), "ObserverPlace") == true)) {
            TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("ObserverPlace", 0), true);
        }
        else {
            TechTreeAbilityAllow(UnitGetOwner(EventUnit()), EventUnitAbility(), true);
        }
    }
    else if (auto546643DF_val == AbilityCommand("RoachPlace", 0)) {
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("RavagerPlace", 0), true);
    }
    else if (auto546643DF_val == AbilityCommand("RavagerPlace", 0)) {
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("RoachPlace", 0), true);
    }
    else if (auto546643DF_val == AbilityCommand("HydraliskPlace", 0)) {
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("LurkerPlace", 0), true);
    }
    else if (auto546643DF_val == AbilityCommand("HydraliskKerriganPlace", 0)) {
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("LurkerPlace", 0), true);
    }
    else if (auto546643DF_val == AbilityCommand("LurkerPlace", 0)) {
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("HydraliskPlace", 0), true);
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("HydraliskKerriganPlace", 0), true);
    }
    else if (auto546643DF_val == AbilityCommand("HighTemplarPlace", 0)) {
        if ((UnitAbilityExists(EventUnit(), "ArchonPlace") == true)) {
            TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("ArchonPlace", 0), true);
        }
        else {
            TechTreeAbilityAllow(UnitGetOwner(EventUnit()), EventUnitAbility(), true);
        }
    }
    else if (auto546643DF_val == AbilityCommand("ArchonPlace", 0)) {
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("HighTemplarPlace", 0), true);
    }
    else if (auto546643DF_val == AbilityCommand("CyclonePlace", 0)) {
        if ((UnitAbilityExists(EventUnit(), "WidowMinePlace") == true)) {
            TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("WidowMinePlace", 0), true);
        }
        else {
            TechTreeAbilityAllow(UnitGetOwner(EventUnit()), EventUnitAbility(), true);
        }
    }
    else if (auto546643DF_val == AbilityCommand("WidowMinePlace", 0)) {
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("CyclonePlace", 0), true);
    }
    else if (auto546643DF_val == AbilityCommand("ThorPlace", 0)) {
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("ThorSiegePlace", 0), true);
    }
    else if (auto546643DF_val == AbilityCommand("ThorSiegePlace", 0)) {
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("ThorPlace", 0), true);
    }
    else {
    }
    if ((TechTreeUpgradeCount(EventPlayer(), "HighTemplarBanned", c_techCountCompleteOnly) == 1)) {
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("HighTemplarPlace", 0), false);
        if ((TechTreeUpgradeCount(EventPlayer(), "ArchonBanned", c_techCountCompleteOnly) == 0)) {
            TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("ArchonPlace", 0), true);
        }

    }

    if ((TechTreeUpgradeCount(EventPlayer(), "ArchonBanned", c_techCountCompleteOnly) == 1)) {
        TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("ArchonPlace", 0), false);
        if ((TechTreeUpgradeCount(EventPlayer(), "HighTemplarBanned", c_techCountCompleteOnly) == 0)) {
            TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("HighTemplarPlace", 0), true);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7A9A9B22_gt_UnitSpawnerBuildSwitch_Init () {
    lib7A9A9B22_gt_UnitSpawnerBuildSwitch = TriggerCreate("lib7A9A9B22_gt_UnitSpawnerBuildSwitch_Func");
    TriggerEnable(lib7A9A9B22_gt_UnitSpawnerBuildSwitch, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib7A9A9B22_gt_UnitSpawnerBuildSwitch, null, AbilityCommand("HellionPlace", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib7A9A9B22_gt_UnitSpawnerBuildSwitch, null, AbilityCommand("HellbatPlace", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib7A9A9B22_gt_UnitSpawnerBuildSwitch, null, AbilityCommand("VikingFighterPlace", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib7A9A9B22_gt_UnitSpawnerBuildSwitch, null, AbilityCommand("VikingAssaultPlace", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib7A9A9B22_gt_UnitSpawnerBuildSwitch, null, AbilityCommand("HornerDeimosVikingAssaultPlace", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib7A9A9B22_gt_UnitSpawnerBuildSwitch, null, AbilityCommand("HornerDeimosVikingFighterPlace", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib7A9A9B22_gt_UnitSpawnerBuildSwitch, null, AbilityCommand("VikingMengskAssaultPlace", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib7A9A9B22_gt_UnitSpawnerBuildSwitch, null, AbilityCommand("VikingMengskFighterPlace", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib7A9A9B22_gt_UnitSpawnerBuildSwitch, null, AbilityCommand("ObserverPlace", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib7A9A9B22_gt_UnitSpawnerBuildSwitch, null, AbilityCommand("OraclePlace", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib7A9A9B22_gt_UnitSpawnerBuildSwitch, null, AbilityCommand("RoachPlace", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib7A9A9B22_gt_UnitSpawnerBuildSwitch, null, AbilityCommand("RavagerPlace", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib7A9A9B22_gt_UnitSpawnerBuildSwitch, null, AbilityCommand("HydraliskPlace", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib7A9A9B22_gt_UnitSpawnerBuildSwitch, null, AbilityCommand("LurkerPlace", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib7A9A9B22_gt_UnitSpawnerBuildSwitch, null, AbilityCommand("HydraliskKerriganPlace", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib7A9A9B22_gt_UnitSpawnerBuildSwitch, null, AbilityCommand("HighTemplarPlace", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib7A9A9B22_gt_UnitSpawnerBuildSwitch, null, AbilityCommand("ArchonPlace", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib7A9A9B22_gt_UnitSpawnerBuildSwitch, null, AbilityCommand("CyclonePlace", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib7A9A9B22_gt_UnitSpawnerBuildSwitch, null, AbilityCommand("WidowMinePlace", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib7A9A9B22_gt_UnitSpawnerBuildSwitch, null, AbilityCommand("ThorPlace", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib7A9A9B22_gt_UnitSpawnerBuildSwitch, null, AbilityCommand("ThorSiegePlace", 0), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZeratulArtifactSearchOn
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_gt_ZeratulArtifactSearchOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(lib7A9A9B22_gv_stagingAreaSpawners, EventPlayerEffectUsedUnit(c_effectUnitCaster));
    UnitGroupAdd(lib7A9A9B22_gv_zeratulArtifactSearchGroup, EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7A9A9B22_gt_ZeratulArtifactSearchOn_Init () {
    lib7A9A9B22_gt_ZeratulArtifactSearchOn = TriggerCreate("lib7A9A9B22_gt_ZeratulArtifactSearchOn_Func");
    TriggerEnable(lib7A9A9B22_gt_ZeratulArtifactSearchOn, false);
    TriggerAddEventPlayerEffectUsed(lib7A9A9B22_gt_ZeratulArtifactSearchOn, c_playerAny, "ZeratulArtifactSearchActive");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZeratulArtifactSearchOff
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_gt_ZeratulArtifactSearchOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lib7A9A9B22_gv_stagingAreaSpawners, EventPlayerEffectUsedUnit(c_effectUnitCaster));
    UnitGroupRemove(lib7A9A9B22_gv_zeratulArtifactSearchGroup, EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7A9A9B22_gt_ZeratulArtifactSearchOff_Init () {
    lib7A9A9B22_gt_ZeratulArtifactSearchOff = TriggerCreate("lib7A9A9B22_gt_ZeratulArtifactSearchOff_Func");
    TriggerEnable(lib7A9A9B22_gt_ZeratulArtifactSearchOff, false);
    TriggerAddEventPlayerEffectUsed(lib7A9A9B22_gt_ZeratulArtifactSearchOff, c_playerAny, "ZeratulArtifactSearchReturn");
}

void lib7A9A9B22_InitTriggers () {
    lib7A9A9B22_gt_DehakaGeneCreeperHost_Init();
    lib7A9A9B22_gt_DehakaGeneRavasaur_Init();
    lib7A9A9B22_gt_DehakaGenePrimalIgniter_Init();
    lib7A9A9B22_gt_DehakaGenePrimalMutalisk_Init();
    lib7A9A9B22_gt_DehakaGenePrimalGuardian_Init();
    lib7A9A9B22_gt_DehakaGeneImpaler_Init();
    lib7A9A9B22_gt_DehakaGeneTyrannozor_Init();
    lib7A9A9B22_gt_UnitStun_Init();
    lib7A9A9B22_gt_UnitIdle_Init();
    lib7A9A9B22_gt_SpawnsFinalWaypointRefresh_Init();
    lib7A9A9B22_gt_UnitIdleCheck_Init();
    lib7A9A9B22_gt_UnitMorph_Init();
    lib7A9A9B22_gt_UnitSummon_Init();
    lib7A9A9B22_gt_UnitSummonEffect_Init();
    lib7A9A9B22_gt_UnitSummonNoInherit_Init();
    lib7A9A9B22_gt_NeuralParasiteOn_Init();
    lib7A9A9B22_gt_NeuralParasiteOff_Init();
    lib7A9A9B22_gt_EquipmentShopBirth_Init();
    lib7A9A9B22_gt_MineralMineBuilt_Init();
    lib7A9A9B22_gt_WaveUnitDeathNormal_Init();
    lib7A9A9B22_gt_WaveUnitDeathSpecial_Init();
    lib7A9A9B22_gt_UnitSpawnerBirth_Init();
    lib7A9A9B22_gt_UnitSpawnerSell_Init();
    lib7A9A9B22_gt_UnitSpawnerReposition_Init();
    lib7A9A9B22_gt_UnitSpawnerBuildSwitch_Init();
    lib7A9A9B22_gt_ZeratulArtifactSearchOn_Init();
    lib7A9A9B22_gt_ZeratulArtifactSearchOff_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib7A9A9B22_InitLib_completed = false;

void lib7A9A9B22_InitLib () {
    if (lib7A9A9B22_InitLib_completed) {
        return;
    }

    lib7A9A9B22_InitLib_completed = true;

    lib7A9A9B22_InitLibraries();
    lib7A9A9B22_InitVariables();
    lib7A9A9B22_InitTriggers();
}

include "LibDDE92A83"
include "Lib1DE23868"
include "Lib29554E00"
include "LibCA960273"
include "Lib479C7CBB"
include "Lib39886FE6"
include "Lib7550A90B"

