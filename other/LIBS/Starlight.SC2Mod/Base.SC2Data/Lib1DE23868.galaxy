include "TriggerLibs/NativeLib"
include "LibDDE92A83_h"
include "Lib29554E00_h"
include "LibDBB0BE4A_h"
include "LibFD391A9C_h"
include "Lib948F000A_h"
include "Lib7A9A9B22_h"
include "Lib479C7CBB_h"
include "Lib39886FE6_h"

include "Lib1DE23868_h"

//--------------------------------------------------------------------------------------------------
// Library: Independent Triggers
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib1DE23868_InitLibraries () {
    libNtve_InitVariables();
    libDDE92A83_InitVariables();
    lib29554E00_InitVariables();
    libDBB0BE4A_InitVariables();
    libFD391A9C_InitVariables();
    lib948F000A_InitVariables();
    lib7A9A9B22_InitVariables();
    lib479C7CBB_InitVariables();
    lib39886FE6_InitVariables();
}

// Variable Initialization
bool lib1DE23868_InitVariables_completed = false;

void lib1DE23868_InitVariables () {
    int init_i;

    if (lib1DE23868_InitVariables_completed) {
        return;
    }

    lib1DE23868_InitVariables_completed = true;

    for (init_i = 0; init_i <= 15; init_i += 1) {
        lib1DE23868_gv_mineralFieldAutoGroup[init_i] = UnitGroupEmpty();
    }
}

// Functions
void lib1DE23868_gf_MineralFieldAutoEnable () {
    // Automatic Variable Declarations
    playergroup autoBF6D02FB_g;
    int autoBF6D02FB_var;

    // Implementation
    autoBF6D02FB_g = PlayerGroupAll();
    autoBF6D02FB_var = -1;
    while (true) {
        autoBF6D02FB_var = PlayerGroupNextPlayer(autoBF6D02FB_g, autoBF6D02FB_var);
        if (autoBF6D02FB_var < 0) { break; }
        lib7A9A9B22_gf_StagingAreaRemoveMines();
        libNtve_gf_SetUpgradeLevelForPlayer(autoBF6D02FB_var, "AutoMineralFieldsActive", 1);
    }
}

void lib1DE23868_gf_MineralFieldAutoArc (int lp_player, int lp_resourceTotal, int lp_resourceCount, point lp_point, fixed lp_angle) {
    // Variable Declarations
    point[5] lv_point;
    int[5] lv_resourceAmount;
    int lv_i;

    // Automatic Variable Declarations
    int auto0348BDFF_val;
    int auto49A67C36_ae;
    const int auto49A67C36_ai = 1;

    // Variable Initialization

    // Implementation
    lv_point[0] = PointWithOffsetPolar(lp_point, 4.0, (-60.0 + (lp_angle + 180.0)));
    lv_point[1] = PointWithOffsetPolar(lp_point, 5.0, (-30.0 + (lp_angle + 180.0)));
    lv_point[2] = PointWithOffsetPolar(lp_point, 4.0, (0.0 + (lp_angle + 180.0)));
    lv_point[3] = PointWithOffsetPolar(lp_point, 5.0, (30.0 + (lp_angle + 180.0)));
    lv_point[4] = PointWithOffsetPolar(lp_point, 4.0, (60.0 + (lp_angle + 180.0)));
    auto0348BDFF_val = lp_resourceCount;
    if (auto0348BDFF_val == 3) {
        lv_resourceAmount[0] = FixedToInt((lp_resourceTotal * 0.5));
        lv_resourceAmount[1] = FixedToInt((lp_resourceTotal * 0.35));
        lv_resourceAmount[2] = FixedToInt((lp_resourceTotal * 0.15));
    }
    else if (auto0348BDFF_val == 4) {
        lv_resourceAmount[0] = FixedToInt((lp_resourceTotal * 0.4));
        lv_resourceAmount[1] = FixedToInt((lp_resourceTotal * 0.3));
        lv_resourceAmount[2] = FixedToInt((lp_resourceTotal * 0.2));
        lv_resourceAmount[3] = FixedToInt((lp_resourceTotal * 0.1));
    }
    else if (auto0348BDFF_val == 5) {
        lv_resourceAmount[0] = FixedToInt((lp_resourceTotal * 0.3));
        lv_resourceAmount[1] = FixedToInt((lp_resourceTotal * 0.25));
        lv_resourceAmount[2] = FixedToInt((lp_resourceTotal * 0.2));
        lv_resourceAmount[3] = FixedToInt((lp_resourceTotal * 0.15));
        lv_resourceAmount[4] = FixedToInt((lp_resourceTotal * 0.1));
    }
    else {
    }
    lv_resourceAmount[0] += (lp_resourceTotal - (lv_resourceAmount[0] + lv_resourceAmount[1] + lv_resourceAmount[2] + lv_resourceAmount[3] + lv_resourceAmount[4]));
    auto49A67C36_ae = (lp_resourceCount - 1);
    lv_i = 0;
    for ( ; ( (auto49A67C36_ai >= 0 && lv_i <= auto49A67C36_ae) || (auto49A67C36_ai < 0 && lv_i >= auto49A67C36_ae) ) ; lv_i += auto49A67C36_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "MineralFieldAuto", 0, lp_player, lv_point[lv_i], PointWithOffsetPolar(lp_point, 4.0, lp_angle));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropResources, lv_resourceAmount[lv_i]);
        UnitGroupAdd(lib1DE23868_gv_mineralFieldAutoGroup[lp_player], UnitLastCreated());
    }
    lib1DE23868_gf_MineralFieldAutoUpdate(lp_player);
}

void lib1DE23868_gf_MineralFieldAutoDefault (int lp_player, point lp_point, fixed lp_angle) {
    // Variable Declarations
    point[5] lv_point;
    int[5] lv_resourceAmount;
    unit[5] lv_resource;
    int lv_i;

    // Automatic Variable Declarations
    const int autoF030D6BD_ae = 4;
    const int autoF030D6BD_ai = 1;

    // Variable Initialization

    // Implementation
    lv_point[0] = PointWithOffsetPolar(PointWithOffsetPolar(lp_point, (0.0 + ((SquareRoot(2.0) / 2.0) * IntToFixed(8))), ((lp_angle + 180.0) + 90.0)), (0.0 + ((SquareRoot(2.0) / 2.0) * IntToFixed(15))), (lp_angle + 180.0));
    lv_point[1] = PointWithOffsetPolar(PointWithOffsetPolar(lp_point, (0.0 + ((SquareRoot(2.0) / 2.0) * IntToFixed(4))), ((lp_angle + 180.0) + 90.0)), (0.0 + ((SquareRoot(2.0) / 2.0) * IntToFixed(15))), (lp_angle + 180.0));
    lv_point[2] = PointWithOffsetPolar(PointWithOffsetPolar(lp_point, (0.0 + ((SquareRoot(2.0) / 2.0) * IntToFixed(0))), ((lp_angle + 180.0) + 90.0)), (0.0 + ((SquareRoot(2.0) / 2.0) * IntToFixed(15))), (lp_angle + 180.0));
    lv_point[3] = PointWithOffsetPolar(PointWithOffsetPolar(lp_point, (0.0 + ((SquareRoot(2.0) / 2.0) * IntToFixed(-4))), ((lp_angle + 180.0) + 90.0)), (0.0 + ((SquareRoot(2.0) / 2.0) * IntToFixed(15))), (lp_angle + 180.0));
    lv_point[4] = PointWithOffsetPolar(PointWithOffsetPolar(lp_point, (0.0 + ((SquareRoot(2.0) / 2.0) * IntToFixed(-8))), ((lp_angle + 180.0) + 90.0)), (0.0 + ((SquareRoot(2.0) / 2.0) * IntToFixed(15))), (lp_angle + 180.0));
    lv_resourceAmount[0] = FixedToInt(100000.0);
    lv_resourceAmount[1] = FixedToInt(2700.0);
    lv_resourceAmount[2] = FixedToInt(2250.0);
    lv_resourceAmount[3] = FixedToInt(1800.0);
    lv_resourceAmount[4] = FixedToInt(1350.0);
    lv_i = 0;
    for ( ; ( (autoF030D6BD_ai >= 0 && lv_i <= autoF030D6BD_ae) || (autoF030D6BD_ai < 0 && lv_i >= autoF030D6BD_ae) ) ; lv_i += autoF030D6BD_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "MineralFieldAuto", 0, lp_player, lv_point[lv_i], PointWithOffsetPolar(lp_point, 4.0, lp_angle));
        lv_resource[lv_i] = UnitLastCreated();
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropResources, lv_resourceAmount[lv_i]);
        UnitGroupAdd(lib1DE23868_gv_mineralFieldAutoGroup[lp_player], UnitLastCreated());
        UnitGroupAdd(lib7A9A9B22_gv_stagingAreaPeripherals, UnitLastCreated());
    }
    UnitSetInfoText2(lv_resource[0], StringToText("Remaining: <c val=\"FFFFFF\">Infinite</c>"));
    lib1DE23868_gf_MineralFieldAutoUpdate(lp_player);
}

void lib1DE23868_gf_MineralFieldAutoUpdate (int lp_player) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto1AC5E78D_g;
    int auto1AC5E78D_u;
    unit auto1AC5E78D_var;

    // Variable Initialization

    // Implementation
    auto1AC5E78D_g = lib1DE23868_gv_mineralFieldAutoGroup[lp_player];
    auto1AC5E78D_u = UnitGroupCount(auto1AC5E78D_g, c_unitCountAll);
    for (;; auto1AC5E78D_u -= 1) {
        auto1AC5E78D_var = UnitGroupUnitFromEnd(auto1AC5E78D_g, auto1AC5E78D_u);
        if (auto1AC5E78D_var == null) { break; }
        UnitBehaviorRemove(auto1AC5E78D_var, "MineralFieldAutoHarvestStagger", 1);
        UnitBehaviorRemove(auto1AC5E78D_var, "MineralFieldAutoHarvest", 1);
        UnitBehaviorAdd(auto1AC5E78D_var, "MineralFieldAutoHarvestStagger", auto1AC5E78D_var, 1);
        UnitBehaviorSetDurationRemaining(auto1AC5E78D_var, "MineralFieldAutoHarvestStagger", ((0.9333 / UnitGroupCount(lib1DE23868_gv_mineralFieldAutoGroup[lp_player], c_unitCountAlive)) * lv_i));
        lv_i += 1;
    }
}

void lib1DE23868_gf_CrystalforgeEnergyRefund (unit lp_target, unit lp_forge) {
    // Automatic Variable Declarations
    // Implementation
    libDDE92A83_gf_KickerEnergy(FixedToInt(((500.0 - IntToFixed(UnitTypeGetCost(EventPlayerEffectUsedUnitType(c_effectUnitTarget), c_unitCostMinerals))) / 5.0)), lp_forge, (1.0 + UnitGetHeight(lp_forge)), true);
    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_forge)), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_1DE23868_38F3CAD9") + TextWithColor(IntToText(FixedToInt(((500.0 - IntToFixed(UnitTypeGetCost(EventPlayerEffectUsedUnitType(c_effectUnitTarget), c_unitCostMinerals))) / 5.0))), Color(100.00, 0.00, 100.00)) + StringExternal("Param/Value/lib_1DE23868_0BE09F60")));
}

void lib1DE23868_gf_DehakaUpdateXP (int lp_player) {
    // Variable Declarations
    int lv_difference;
    int lv_xPTarget;

    // Automatic Variable Declarations
    unitgroup auto1015E729_g;
    int auto1015E729_u;
    unit auto1015E729_var;
    unitgroup auto4BA397D0_g;
    int auto4BA397D0_u;
    unit auto4BA397D0_var;

    // Variable Initialization
    lv_xPTarget = FixedToInt((PlayerScoreValueGetAsInt(lp_player, "MineralsSpent") / 5.0));

    // Implementation
    lv_difference = PlayerScoreValueGetAsInt(lp_player, "DehakaExperience");
    PlayerScoreValueSetFromInt(lp_player, "DehakaExperience", libNtve_gf_ArithmeticIntClamp(lv_xPTarget, PlayerScoreValueGetAsInt(lp_player, "DehakaExperience"), 500000));
    lv_difference = libNtve_gf_ArithmeticIntClamp((PlayerScoreValueGetAsInt(lp_player, "DehakaExperience") - lv_difference), 0, 500000);
    CatalogFieldValueSet(c_gameCatalogBehavior, "DehakaEssence", "MinPoints", lp_player, IntToString(PlayerScoreValueGetAsInt(lp_player, "DehakaExperience")));
    CatalogFieldValueSet(c_gameCatalogBehavior, "DehakaEssence", "MaxPoints", lp_player, IntToString(PlayerScoreValueGetAsInt(lp_player, "DehakaExperience")));
    CatalogFieldValueSet(c_gameCatalogBehavior, "DehakaEssenceController", "Modification.AttributeChangeArray[" + IntToString(0) + "].Points", lp_player, IntToString(PlayerScoreValueGetAsInt(lp_player, "DehakaExperience")));
    if ((lv_difference > 0)) {
        auto1015E729_g = UnitGroup("DehakaHero", lp_player, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto1015E729_u = UnitGroupCount(auto1015E729_g, c_unitCountAll);
        for (;; auto1015E729_u -= 1) {
            auto1015E729_var = UnitGroupUnitFromEnd(auto1015E729_g, auto1015E729_u);
            if (auto1015E729_var == null) { break; }
            if ((UnitHasBehavior2(auto1015E729_var, "HeroHasVeterancy") == true)) {
                UnitBehaviorRemove(auto1015E729_var, "DehakaEssenceController", 1);
                UnitBehaviorAdd(auto1015E729_var, "DehakaEssenceController", auto1015E729_var, 1);
                if ((UnitHasBehavior2(auto1015E729_var, "RecentlyCreated") == false)) {
                    if ((((UnitXPGetCurrentXP(auto1015E729_var, null) - UnitXPGetXPForLevel(auto1015E729_var, null, UnitXPGetCurrentLevel(auto1015E729_var, null))) + IntToFixed(lv_difference)) < (UnitXPGetXPForLevel(auto1015E729_var, null, -1) - UnitXPGetXPForLevel(auto1015E729_var, null, UnitXPGetCurrentLevel(auto1015E729_var, null))))) {
                        TextTagCreate((StringToText("<s val=\"AiurChefCenterSize24Bold\"><c val=\"FFD700\">+") + IntToText(lv_difference) + StringToText(" ") + StringExternal("Param/Value/lib_1DE23868_D0DBD9CC") + StringToText("</c> (") + FixedToText(libNtve_gf_ArithmeticRealClamp(((IntToFixed(FixedToInt(((UnitXPGetCurrentXP(auto1015E729_var, null) - UnitXPGetXPForLevel(auto1015E729_var, null, UnitXPGetCurrentLevel(auto1015E729_var, null))) + IntToFixed(lv_difference)))) / IntToFixed(FixedToInt((UnitXPGetXPForLevel(auto1015E729_var, null, -1) - UnitXPGetXPForLevel(auto1015E729_var, null, UnitXPGetCurrentLevel(auto1015E729_var, null)))))) * 100.0), 0.0, 99.0), 0) + StringToText("%)")), 32, UnitGetPosition(auto1015E729_var), 1.0, true, false, PlayerGroupSingle(UnitGetOwner(auto1015E729_var)));
                    }
                    else {
                        TextTagCreate((StringToText("<s val=\"AiurChefCenterSize24Bold\"><c val=\"FFD700\">+") + IntToText(lv_difference) + StringToText(" ") + StringExternal("Param/Value/lib_1DE23868_F46A62CC") + StringToText("</c> ") + StringExternal("UI/RewardItem/LevelUp") + StringToText("!")), 32, UnitGetPosition(auto1015E729_var), 1.0, true, false, PlayerGroupSingle(UnitGetOwner(auto1015E729_var)));
                    }
                    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
                    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.5);
                    TextTagSetGravity(TextTagLastCreated(), -0.75);
                    TextTagSetVelocity(TextTagLastCreated(), 2.5, RandomFixed(75.0, 105.0));
                }

                UnitSetPropertyFixed(auto1015E729_var, c_unitPropXP, PlayerScoreValueGetAsInt(lp_player, "DehakaExperience"));
            }

        }
    }

    if (((PlayerScoreValueGetAsInt(lp_player, "DehakaExperience") - lv_xPTarget) > 0)) {
        auto4BA397D0_g = UnitGroup("DehakaHero", lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0), 0);
        auto4BA397D0_u = UnitGroupCount(auto4BA397D0_g, c_unitCountAll);
        for (;; auto4BA397D0_u -= 1) {
            auto4BA397D0_var = UnitGroupUnitFromEnd(auto4BA397D0_g, auto4BA397D0_u);
            if (auto4BA397D0_var == null) { break; }
            if ((UnitHasBehavior2(auto4BA397D0_var, "HeroHasVeterancy") == true) && (UnitHasBehavior2(auto4BA397D0_var, "RecentlyCreated") == false)) {
                TextTagCreate((StringToText("<s val=\"AiurChefCenterSize24Bold\"><c val=\"FF2040\">") + IntToText((PlayerScoreValueGetAsInt(lp_player, "DehakaExperience") - lv_xPTarget)) + StringToText(" ") + StringExternal("Param/Value/lib_1DE23868_EB05F7BD") + StringToText(" ") + StringExternal("UI/PartyReadyPanel/Remaining")), 32, UnitGetPosition(auto4BA397D0_var), 1.0, true, false, PlayerGroupSingle(UnitGetOwner(auto4BA397D0_var)));
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.5);
                TextTagSetGravity(TextTagLastCreated(), -0.75);
                TextTagSetVelocity(TextTagLastCreated(), 2.5, RandomFixed(75.0, 105.0));
            }

        }
    }

}

void lib1DE23868_gf_RaynorVanadiumPlatingCheck (int lp_player) {
    // Variable Declarations
    int lv_vanadiumInfantry;
    int lv_vanadiumVehicles;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((TechTreeUpgradeCount(lp_player, "VanadiumPlatingController", c_techCountCompleteOnly) == 1)) {
        if ((TechTreeUpgradeCount(lp_player, "TerranInfantryArmorLevel1Starlight", c_techCountCompleteOnly) >= 1)) {
            lv_vanadiumInfantry += 1;
        }

        if ((TechTreeUpgradeCount(lp_player, "TerranInfantryArmorLevel2Starlight", c_techCountCompleteOnly) >= 1)) {
            lv_vanadiumInfantry += 1;
        }

        if ((TechTreeUpgradeCount(lp_player, "TerranInfantryArmorLevel3Starlight", c_techCountCompleteOnly) >= 1)) {
            lv_vanadiumInfantry += 1;
        }

        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "VanadiumPlatingInfantry", lv_vanadiumInfantry);
        if ((TechTreeUpgradeCount(lp_player, "TerranVehicleandShipPlatingLevel1Starlight", c_techCountCompleteOnly) >= 1)) {
            lv_vanadiumVehicles += 1;
        }

        if ((TechTreeUpgradeCount(lp_player, "TerranVehicleandShipPlatingLevel2Starlight", c_techCountCompleteOnly) >= 1)) {
            lv_vanadiumVehicles += 1;
        }

        if ((TechTreeUpgradeCount(lp_player, "TerranVehicleandShipPlatingLevel3Starlight", c_techCountCompleteOnly) >= 1)) {
            lv_vanadiumVehicles += 1;
        }

        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "VanadiumPlatingVehicles", lv_vanadiumVehicles);
    }

}

void lib1DE23868_gf_MengskAwardExperienceSplit (int lp_player, int lp_amount) {
    // Variable Declarations
    unitgroup lv_unitGroup;
    int lv_amountLocal;
    int lv_xPChange;
    int lv_xPChangeFinal;
    int lv_amountSplit;
    int lv_xPToLevel;

    // Automatic Variable Declarations
    unitgroup auto761E1AC4_g;
    int auto761E1AC4_u;
    unit auto761E1AC4_var;
    unitgroup autoFD63EDF1_g;
    int autoFD63EDF1_u;
    unit autoFD63EDF1_var;
    string auto9660AD4C_val;
    unitgroup autoDD0B4E3E_g;
    int autoDD0B4E3E_u;
    unit autoDD0B4E3E_var;
    string autoEE26BAB0_val;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();
    lv_amountLocal = lp_amount;

    // Implementation
    if ((lp_amount > 0) && (TechTreeUpgradeCount(lp_player, "MengskRoyalGuardXP", c_techCountCompleteOnly) >= 1)) {
        auto761E1AC4_g = UnitGroupFilterPlayer(lib7A9A9B22_gf_StagingAreaSpawners(), lp_player, 0);
        auto761E1AC4_u = UnitGroupCount(auto761E1AC4_g, c_unitCountAll);
        for (;; auto761E1AC4_u -= 1) {
            auto761E1AC4_var = UnitGroupUnitFromEnd(auto761E1AC4_g, auto761E1AC4_u);
            if (auto761E1AC4_var == null) { break; }
            if ((UnitHasBehavior2(auto761E1AC4_var, "MengskVeterancyPassive") == true)) {
                UnitGroupAdd(lv_unitGroup, auto761E1AC4_var);
            }

        }
        if ((UnitGroupCount(lv_unitGroup, c_unitCountAlive) >= 1)) {
            lv_amountSplit = (lv_amountLocal / UnitGroupCount(lv_unitGroup, c_unitCountAlive));
            autoFD63EDF1_g = lv_unitGroup;
            autoFD63EDF1_u = UnitGroupCount(autoFD63EDF1_g, c_unitCountAll);
            for (;; autoFD63EDF1_u -= 1) {
                autoFD63EDF1_var = UnitGroupUnitFromEnd(autoFD63EDF1_g, autoFD63EDF1_u);
                if (autoFD63EDF1_var == null) { break; }
                auto9660AD4C_val = UnitGetType(autoFD63EDF1_var);
                if (auto9660AD4C_val == "BattlecruiserMengsk") {
                    lv_xPToLevel = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MengskVeterancyBattlecruiserMengsk", "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", lp_player);
                }
                else if (auto9660AD4C_val == "GhostMengsk") {
                    lv_xPToLevel = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MengskVeterancyGhostMengsk", "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", lp_player);
                }
                else if (auto9660AD4C_val == "MarauderMengsk") {
                    lv_xPToLevel = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MengskVeterancyMarauderMengsk", "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", lp_player);
                }
                else if (auto9660AD4C_val == "SiegeTankMengsk") {
                    lv_xPToLevel = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MengskVeterancySiegeTankMengsk", "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", lp_player);
                }
                else if (auto9660AD4C_val == "SiegeTankMengskSieged") {
                    lv_xPToLevel = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MengskVeterancySiegeTankMengsk", "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", lp_player);
                }
                else if (auto9660AD4C_val == "ThorMengsk") {
                    lv_xPToLevel = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MengskVeterancyThorMengsk", "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", lp_player);
                }
                else if (auto9660AD4C_val == "ThorMengskSieged") {
                    lv_xPToLevel = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MengskVeterancyThorMengsk", "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", lp_player);
                }
                else if (auto9660AD4C_val == "VikingMengskAssault") {
                    lv_xPToLevel = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MengskVeterancyVikingMengsk", "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", lp_player);
                }
                else if (auto9660AD4C_val == "VikingMengskFighter") {
                    lv_xPToLevel = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MengskVeterancyVikingMengsk", "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", lp_player);
                }
                else {
                }
                if (((FixedToInt(UnitGetPropertyFixed(autoFD63EDF1_var, c_unitPropXP, c_unitPropCurrent)) + lv_amountSplit) >= FixedToInt((IntToFixed(lv_xPToLevel) * 3.0)))) {
                    lv_xPChange = FixedToInt((libNtve_gf_ArithmeticIntClamp((FixedToInt(UnitGetPropertyFixed(autoFD63EDF1_var, c_unitPropXP, c_unitPropCurrent)) + lp_amount), 0, (lv_xPToLevel * 3)) - FixedToInt(UnitGetPropertyFixed(autoFD63EDF1_var, c_unitPropXP, c_unitPropCurrent))));
                    UnitSetPropertyFixed(autoFD63EDF1_var, c_unitPropXP, IntToFixed(libNtve_gf_ArithmeticIntClamp((FixedToInt(UnitGetPropertyFixed(autoFD63EDF1_var, c_unitPropXP, c_unitPropCurrent)) + lv_amountSplit), 0, (lv_xPToLevel * 3))));
                    lv_amountLocal -= lv_xPChange;
                    UnitGroupRemove(lv_unitGroup, autoFD63EDF1_var);
                    if ((lv_xPChange > 0)) {
                        TextTagCreate((StringToText("<s val=\"AiurChefCenterSize24Bold\"><c val=\"FFD700\">+") + IntToText(lv_xPChange) + StringToText(" ") + StringToText("XP")), 32, UnitGetPosition(autoFD63EDF1_var), 1.0, true, false, PlayerGroupSingle(UnitGetOwner(autoFD63EDF1_var)));
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.5);
                        TextTagSetGravity(TextTagLastCreated(), -0.75);
                        TextTagSetVelocity(TextTagLastCreated(), 2.5, RandomFixed(75.0, 105.0));
                    }

                }

            }
        }

        if ((UnitGroupCount(lv_unitGroup, c_unitCountAlive) >= 1)) {
            lv_amountSplit = (lv_amountLocal / UnitGroupCount(lv_unitGroup, c_unitCountAlive));
            autoDD0B4E3E_g = lv_unitGroup;
            autoDD0B4E3E_u = UnitGroupCount(autoDD0B4E3E_g, c_unitCountAll);
            for (;; autoDD0B4E3E_u -= 1) {
                autoDD0B4E3E_var = UnitGroupUnitFromEnd(autoDD0B4E3E_g, autoDD0B4E3E_u);
                if (autoDD0B4E3E_var == null) { break; }
                autoEE26BAB0_val = UnitGetType(autoDD0B4E3E_var);
                if (autoEE26BAB0_val == "BattlecruiserMengsk") {
                    lv_xPToLevel = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MengskVeterancyBattlecruiserMengsk", "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", lp_player);
                }
                else if (autoEE26BAB0_val == "GhostMengsk") {
                    lv_xPToLevel = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MengskVeterancyGhostMengsk", "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", lp_player);
                }
                else if (autoEE26BAB0_val == "MarauderMengsk") {
                    lv_xPToLevel = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MengskVeterancyMarauderMengsk", "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", lp_player);
                }
                else if (autoEE26BAB0_val == "SiegeTankMengsk") {
                    lv_xPToLevel = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MengskVeterancySiegeTankMengsk", "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", lp_player);
                }
                else if (autoEE26BAB0_val == "SiegeTankMengskSieged") {
                    lv_xPToLevel = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MengskVeterancySiegeTankMengsk", "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", lp_player);
                }
                else if (autoEE26BAB0_val == "ThorMengsk") {
                    lv_xPToLevel = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MengskVeterancyThorMengsk", "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", lp_player);
                }
                else if (autoEE26BAB0_val == "ThorMengskSieged") {
                    lv_xPToLevel = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MengskVeterancyThorMengsk", "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", lp_player);
                }
                else if (autoEE26BAB0_val == "VikingMengskAssault") {
                    lv_xPToLevel = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MengskVeterancyVikingMengsk", "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", lp_player);
                }
                else if (autoEE26BAB0_val == "VikingMengskFighter") {
                    lv_xPToLevel = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MengskVeterancyVikingMengsk", "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", lp_player);
                }
                else {
                }
                if ((UnitGroupCount(lv_unitGroup, c_unitCountAlive) > 1)) {
                    UnitSetPropertyFixed(autoDD0B4E3E_var, c_unitPropXP, IntToFixed(libNtve_gf_ArithmeticIntClamp((FixedToInt(UnitGetPropertyFixed(autoDD0B4E3E_var, c_unitPropXP, c_unitPropCurrent)) + lv_amountSplit), 0, (lv_xPToLevel * 3))));
                    lv_amountLocal -= lv_amountSplit;
                    if ((lv_amountSplit > 0)) {
                        TextTagCreate((StringToText("<s val=\"AiurChefCenterSize24Bold\"><c val=\"FFD700\">+") + IntToText(lv_amountSplit) + StringToText(" ") + StringToText("XP")), 32, UnitGetPosition(autoDD0B4E3E_var), (UnitGetHeight(autoDD0B4E3E_var) + 1.0), true, false, PlayerGroupSingle(UnitGetOwner(autoDD0B4E3E_var)));
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.5);
                        TextTagSetGravity(TextTagLastCreated(), -0.75);
                        TextTagSetVelocity(TextTagLastCreated(), 2.5, RandomFixed(75.0, 105.0));
                    }

                    UnitGroupRemove(lv_unitGroup, autoDD0B4E3E_var);
                }
                else {
                    lv_amountSplit = libNtve_gf_ArithmeticIntClamp(lv_amountLocal, 0, ((lv_xPToLevel * 3) - FixedToInt(UnitGetPropertyFixed(autoDD0B4E3E_var, c_unitPropXP, c_unitPropCurrent))));
                    lv_amountLocal -= lv_amountSplit;
                    UnitSetPropertyFixed(autoDD0B4E3E_var, c_unitPropXP, IntToFixed(libNtve_gf_ArithmeticIntClamp((FixedToInt(UnitGetPropertyFixed(autoDD0B4E3E_var, c_unitPropXP, c_unitPropCurrent)) + lv_amountSplit), 0, (lv_xPToLevel * 3))));
                    if ((lv_amountSplit > 0)) {
                        TextTagCreate((StringToText("<s val=\"AiurChefCenterSize24Bold\"><c val=\"FFD700\">+") + IntToText(lv_amountSplit) + StringToText(" ") + StringToText("XP")), 32, UnitGetPosition(autoDD0B4E3E_var), (UnitGetHeight(autoDD0B4E3E_var) + 1.0), true, false, PlayerGroupSingle(UnitGetOwner(autoDD0B4E3E_var)));
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.5);
                        TextTagSetGravity(TextTagLastCreated(), -0.75);
                        TextTagSetVelocity(TextTagLastCreated(), 2.5, RandomFixed(75.0, 105.0));
                    }

                }
            }
        }

        if ((UnitGroupCount(UnitGroupFilter("WorkerMengsk", lp_player, libDDE92A83_gf_PlayerWorkers(lp_player), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive) >= 1)) {
            libDDE92A83_gf_KickerEnergy(lv_amountLocal, UnitGroupUnit(UnitGroupFilter("WorkerMengsk", lp_player, libDDE92A83_gf_PlayerWorkers(lp_player), UnitFilter(0, 0, 0, 0), 0), 1), (1.0 + UnitGetHeight(UnitGroupUnit(UnitGroupFilter("WorkerMengsk", lp_player, libDDE92A83_gf_PlayerWorkers(lp_player), UnitFilter(0, 0, 0, 0), 0), 1))), true);
        }

    }

}

trigger auto_lib1DE23868_gf_FenixHeroBonuses_Trigger = null;
int auto_lib1DE23868_gf_FenixHeroBonuses_lp_player;

void lib1DE23868_gf_FenixHeroBonuses (int lp_player) {
    auto_lib1DE23868_gf_FenixHeroBonuses_lp_player = lp_player;

    if (auto_lib1DE23868_gf_FenixHeroBonuses_Trigger == null) {
        auto_lib1DE23868_gf_FenixHeroBonuses_Trigger = TriggerCreate("auto_lib1DE23868_gf_FenixHeroBonuses_TriggerFunc");
    }

    TriggerExecute(auto_lib1DE23868_gf_FenixHeroBonuses_Trigger, false, false);
}

bool auto_lib1DE23868_gf_FenixHeroBonuses_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib1DE23868_gf_FenixHeroBonuses_lp_player;

    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetType(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(lp_player), 1)) == "WorkerFenix")) {
        Wait(0.0, c_timeGame);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KaldalisEmpoweredBladesBonus", ModI(UnitGroupCount(UnitGroupFilter("Legionnaire", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive), 10));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KaldalisEmpoweredBladesBonus10", ((UnitGroupCount(UnitGroupFilter("Legionnaire", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive) - ModI(UnitGroupCount(UnitGroupFilter("Legionnaire", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive), 10)) / 10));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TalisRicochetGlaiveBonus", ModI(UnitGroupCount(UnitGroupFilter("PurifierAdept", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive), 10));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TalisRicochetGlaiveBonus10", ((UnitGroupCount(UnitGroupFilter("PurifierAdept", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive) - ModI(UnitGroupCount(UnitGroupFilter("PurifierAdept", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive), 10)) / 10));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TaldarinGravimetricOverloadBonus", ModI(UnitGroupCount(UnitGroupFilter("PurifierImmortal", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive), 10));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TaldarinGravimetricOverloadBonus10", ((UnitGroupCount(UnitGroupFilter("PurifierImmortal", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive) - ModI(UnitGroupCount(UnitGroupFilter("PurifierImmortal", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive), 10)) / 10));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "MojoSuppressionProcedureBonus", ModI(UnitGroupCount(UnitGroupFilter("PurifierScout", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive), 10));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "MojoSuppressionProcedureBonus10", ((UnitGroupCount(UnitGroupFilter("PurifierScout", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive) - ModI(UnitGroupCount(UnitGroupFilter("PurifierScout", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive), 10)) / 10));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WarbringerPurificationBlastBonus", ModI(UnitGroupCount(UnitGroupFilter("PurifierColossusFenix", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive), 10));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WarbringerPurificationBlastBonus10", ((UnitGroupCount(UnitGroupFilter("PurifierColossusFenix", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive) - ModI(UnitGroupCount(UnitGroupFilter("PurifierColossusFenix", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive), 10)) / 10));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ClolarionInterdictorsBonus", ModI(UnitGroupCount(UnitGroupFilter("PurifierCarrier", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive), 10));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ClolarionInterdictorsBonus10", ((UnitGroupCount(UnitGroupFilter("PurifierCarrier", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive) - ModI(UnitGroupCount(UnitGroupFilter("PurifierCarrier", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive), 10)) / 10));
    }

    return true;
}

void lib1DE23868_gf_CM_Zeratul_PurificationNova_SpawnSmallOrb (unit lp_caster, point lp_spawnPoint, point lp_targetPoint) {
    // Variable Declarations
    point lv_point;
    unit lv_orb;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_point = lp_spawnPoint;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PurificationOrbSmall", c_unitCreateIgnorePlacement, UnitGetOwner(lp_caster), lv_point);
    lv_orb = UnitLastCreated();
    UnitIssueOrder(lv_orb, OrderTargetingPoint(AbilityCommand("move", 0), lp_targetPoint), c_orderQueueReplace);
    UnitBehaviorAdd(lv_orb, "ZeratulPurificationNovaSmallOrbSearchBuff", lp_caster, 1);
}

void lib1DE23868_gf_PassiveMetaExperience (bool lp_toggle) {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(lib1DE23868_gt_PassiveMetaExperience, lp_toggle);
}

void lib1DE23868_gf_UpdateUnitSpawnerEnergy (int lp_player) {
    // Automatic Variable Declarations
    unitgroup autoB2B2DF88_g;
    int autoB2B2DF88_u;
    unit autoB2B2DF88_var;
    unitgroup auto2CF7C467_g;
    int auto2CF7C467_u;
    unit auto2CF7C467_var;
    unitgroup autoA2F22B4A_g;
    int autoA2F22B4A_u;
    unit autoA2F22B4A_var;
    unitgroup auto52F9DAFF_g;
    int auto52F9DAFF_u;
    unit auto52F9DAFF_var;
    unitgroup auto199AACDE_g;
    int auto199AACDE_u;
    unit auto199AACDE_var;
    unitgroup auto217C257D_g;
    int auto217C257D_u;
    unit auto217C257D_var;
    unitgroup autoCAA842DB_g;
    int autoCAA842DB_u;
    unit autoCAA842DB_var;
    unitgroup autoAD11652D_g;
    int autoAD11652D_u;
    unit autoAD11652D_var;
    unitgroup auto70ACA2B9_g;
    int auto70ACA2B9_u;
    unit auto70ACA2B9_var;
    unitgroup autoA515596F_g;
    int autoA515596F_u;
    unit autoA515596F_var;

    // Implementation
    autoB2B2DF88_g = UnitGroupFilter("Medivac", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0);
    autoB2B2DF88_u = UnitGroupCount(autoB2B2DF88_g, c_unitCountAll);
    for (;; autoB2B2DF88_u -= 1) {
        autoB2B2DF88_var = UnitGroupUnitFromEnd(autoB2B2DF88_g, autoB2B2DF88_u);
        if (autoB2B2DF88_var == null) { break; }
        UnitSetPropertyFixed(autoB2B2DF88_var, c_unitPropEnergy, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(autoB2B2DF88_var), "EnergyStart", lp_player));
    }
    auto2CF7C467_g = UnitGroupFilter("Raven", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0);
    auto2CF7C467_u = UnitGroupCount(auto2CF7C467_g, c_unitCountAll);
    for (;; auto2CF7C467_u -= 1) {
        auto2CF7C467_var = UnitGroupUnitFromEnd(auto2CF7C467_g, auto2CF7C467_u);
        if (auto2CF7C467_var == null) { break; }
        UnitSetPropertyFixed(auto2CF7C467_var, c_unitPropEnergy, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(auto2CF7C467_var), "EnergyStart", lp_player));
    }
    autoA2F22B4A_g = UnitGroupFilter("Battlecruiser", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0);
    autoA2F22B4A_u = UnitGroupCount(autoA2F22B4A_g, c_unitCountAll);
    for (;; autoA2F22B4A_u -= 1) {
        autoA2F22B4A_var = UnitGroupUnitFromEnd(autoA2F22B4A_g, autoA2F22B4A_u);
        if (autoA2F22B4A_var == null) { break; }
        UnitSetPropertyFixed(autoA2F22B4A_var, c_unitPropEnergy, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(autoA2F22B4A_var), "EnergyStart", lp_player));
    }
    auto52F9DAFF_g = UnitGroupFilter("Infestor", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0);
    auto52F9DAFF_u = UnitGroupCount(auto52F9DAFF_g, c_unitCountAll);
    for (;; auto52F9DAFF_u -= 1) {
        auto52F9DAFF_var = UnitGroupUnitFromEnd(auto52F9DAFF_g, auto52F9DAFF_u);
        if (auto52F9DAFF_var == null) { break; }
        UnitSetPropertyFixed(auto52F9DAFF_var, c_unitPropEnergy, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(auto52F9DAFF_var), "EnergyStart", lp_player));
    }
    auto199AACDE_g = UnitGroupFilter("Ghost", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0);
    auto199AACDE_u = UnitGroupCount(auto199AACDE_g, c_unitCountAll);
    for (;; auto199AACDE_u -= 1) {
        auto199AACDE_var = UnitGroupUnitFromEnd(auto199AACDE_g, auto199AACDE_u);
        if (auto199AACDE_var == null) { break; }
        UnitSetPropertyFixed(auto199AACDE_var, c_unitPropEnergy, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(auto199AACDE_var), "EnergyStart", lp_player));
    }
    auto217C257D_g = UnitGroupFilter("BroodQueenStarlight", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0);
    auto217C257D_u = UnitGroupCount(auto217C257D_g, c_unitCountAll);
    for (;; auto217C257D_u -= 1) {
        auto217C257D_var = UnitGroupUnitFromEnd(auto217C257D_g, auto217C257D_u);
        if (auto217C257D_var == null) { break; }
        UnitSetPropertyFixed(auto217C257D_var, c_unitPropEnergy, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(auto217C257D_var), "EnergyStart", lp_player));
    }
    autoCAA842DB_g = UnitGroupFilter("HighTemplar", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0);
    autoCAA842DB_u = UnitGroupCount(autoCAA842DB_g, c_unitCountAll);
    for (;; autoCAA842DB_u -= 1) {
        autoCAA842DB_var = UnitGroupUnitFromEnd(autoCAA842DB_g, autoCAA842DB_u);
        if (autoCAA842DB_var == null) { break; }
        UnitSetPropertyFixed(autoCAA842DB_var, c_unitPropEnergy, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(autoCAA842DB_var), "EnergyStart", lp_player));
    }
    autoAD11652D_g = UnitGroupFilter("HighTemplarArtanis", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0);
    autoAD11652D_u = UnitGroupCount(autoAD11652D_g, c_unitCountAll);
    for (;; autoAD11652D_u -= 1) {
        autoAD11652D_var = UnitGroupUnitFromEnd(autoAD11652D_g, autoAD11652D_u);
        if (autoAD11652D_var == null) { break; }
        UnitSetPropertyFixed(autoAD11652D_var, c_unitPropEnergy, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(autoAD11652D_var), "EnergyStart", lp_player));
    }
    auto70ACA2B9_g = UnitGroupFilter("HighArchon", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0);
    auto70ACA2B9_u = UnitGroupCount(auto70ACA2B9_g, c_unitCountAll);
    for (;; auto70ACA2B9_u -= 1) {
        auto70ACA2B9_var = UnitGroupUnitFromEnd(auto70ACA2B9_g, auto70ACA2B9_u);
        if (auto70ACA2B9_var == null) { break; }
        UnitSetPropertyFixed(auto70ACA2B9_var, c_unitPropEnergy, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(auto70ACA2B9_var), "EnergyStart", lp_player));
    }
    autoA515596F_g = UnitGroupFilter("DarkArchonStarlight", lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter(0, 0, 0, 0), 0);
    autoA515596F_u = UnitGroupCount(autoA515596F_g, c_unitCountAll);
    for (;; autoA515596F_u -= 1) {
        autoA515596F_var = UnitGroupUnitFromEnd(autoA515596F_g, autoA515596F_u);
        if (autoA515596F_var == null) { break; }
        UnitSetPropertyFixed(autoA515596F_var, c_unitPropEnergy, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(autoA515596F_var), "EnergyStart", lp_player));
    }
}

int lib1DE23868_gf_UpgradeCostReturn (string lp_specializationAbility, string lp_effect) {
    // Variable Declarations
    int lv_x;
    int lv_i;

    // Automatic Variable Declarations
    const int auto0FDF4311_ae = 19;
    const int auto0FDF4311_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 0;
    for ( ; ( (auto0FDF4311_ai >= 0 && lv_i <= auto0FDF4311_ae) || (auto0FDF4311_ai < 0 && lv_i >= auto0FDF4311_ae) ) ; lv_i += auto0FDF4311_ai ) {
        if ((lp_effect == (CatalogFieldValueGet(c_gameCatalogAbil, lp_specializationAbility, "InfoArray[" + IntToString(lv_i) + "].Effect", 0)))) {
            lv_x = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lp_specializationAbility, "InfoArray[" + IntToString(lv_i) + "].Resource[" + IntToString(0) + "]", 0);
            break;
        }

    }
    return lv_x;
}

void lib1DE23868_gf_DSSpecificTriggersEnable () {
    // Variable Declarations
    bool lv_toggle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_toggle = true;

    // Implementation
    TriggerEnable(lib1DE23868_gt_WorkerSelectAbathur, lv_toggle);
    TriggerEnable(lib1DE23868_gt_WorkerSelectAlarak, lv_toggle);
    TriggerEnable(lib1DE23868_gt_WorkerSelectArtanis, lv_toggle);
    TriggerEnable(lib1DE23868_gt_WorkerSelectDehaka, lv_toggle);
    TriggerEnable(lib1DE23868_gt_WorkerSelectFenix, lv_toggle);
    TriggerEnable(lib1DE23868_gt_WorkerSelectHorner, lv_toggle);
    TriggerEnable(lib1DE23868_gt_WorkerSelectKarax, lv_toggle);
    TriggerEnable(lib1DE23868_gt_WorkerSelectKerrigan, lv_toggle);
    TriggerEnable(lib1DE23868_gt_WorkerSelectMengsk, lv_toggle);
    TriggerEnable(lib1DE23868_gt_WorkerSelectNova, lv_toggle);
    TriggerEnable(lib1DE23868_gt_WorkerSelectProtoss, lv_toggle);
    TriggerEnable(lib1DE23868_gt_WorkerSelectRandomCommander, lv_toggle);
    TriggerEnable(lib1DE23868_gt_WorkerSelectRaynor, lv_toggle);
    TriggerEnable(lib1DE23868_gt_WorkerSelectStetmann, lv_toggle);
    TriggerEnable(lib1DE23868_gt_WorkerSelectStukov, lv_toggle);
    TriggerEnable(lib1DE23868_gt_WorkerSelectSwann, lv_toggle);
    TriggerEnable(lib1DE23868_gt_WorkerSelectTerran, lv_toggle);
    TriggerEnable(lib1DE23868_gt_WorkerSelectTychus, lv_toggle);
    TriggerEnable(lib1DE23868_gt_WorkerSelectVorazun, lv_toggle);
    TriggerEnable(lib1DE23868_gt_WorkerSelectZagara, lv_toggle);
    TriggerEnable(lib1DE23868_gt_WorkerSelectZeratul, lv_toggle);
    TriggerEnable(lib1DE23868_gt_WorkerSelectZerg, lv_toggle);
    TriggerEnable(lib1DE23868_gt_TychusUpgradeTransfer, lv_toggle);
    TriggerEnable(lib1DE23868_gt_AutoControlGroupProtoss, lv_toggle);
    TriggerEnable(lib1DE23868_gt_AutoControlGroupTerran, lv_toggle);
    TriggerEnable(lib1DE23868_gt_AutoControlGroupZerg, lv_toggle);
    TriggerEnable(lib1DE23868_gt_SpecializeComplete, lv_toggle);
    TriggerEnable(lib1DE23868_gt_AbilityAutocastOn, lv_toggle);
    TriggerEnable(lib1DE23868_gt_AbilityAutocastOff, lv_toggle);
    TriggerEnable(lib1DE23868_gt_TierUpgradeCancel, lv_toggle);
    TriggerEnable(lib1DE23868_gt_NeutralScanScore, lv_toggle);
    TriggerEnable(lib1DE23868_gt_StrikeWeaponryScore, lv_toggle);
    TriggerEnable(lib1DE23868_gt_Tier2UpgradeScore, lv_toggle);
    TriggerEnable(lib1DE23868_gt_Tier3UpgradeScore, lv_toggle);
    TriggerEnable(lib1DE23868_gt_Tier4UpgradeScore, lv_toggle);
    TriggerEnable(lib1DE23868_gt_Tier4Show, lv_toggle);
    TriggerEnable(lib1DE23868_gt_UpgradeAdditions, lv_toggle);
    TriggerEnable(lib1DE23868_gt_UpgradeSpendingScore, lv_toggle);
}

void lib1DE23868_gf_AbilityAutocast (abilcmd lp_ability, bool lp_onOff) {
    // Automatic Variable Declarations
    abilcmd auto5FAD0C78_val;

    // Implementation
    auto5FAD0C78_val = lp_ability;
    if (auto5FAD0C78_val == AbilityCommand("VikingAssaultPlaceFromVikingFighter", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("AssaultMode", 0), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("VikingFighterPlaceFromVikingAssault", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("FighterMode", 0), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ProtossUpgrades", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ProtossUpgrades", 1), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ProtossUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ProtossUpgrades", 1)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ProtossUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ProtossUpgrades", 3)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ProtossUpgrades", 4), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ProtossUpgrades", 5), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ProtossUpgrades", 4)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ProtossUpgrades", 5), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ProtossUpgrades", 6)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ProtossUpgrades", 7), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ProtossUpgrades", 8), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ProtossUpgrades", 7)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ProtossUpgrades", 8), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ProtossUpgrades", 9)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ProtossUpgrades", 10), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ProtossUpgrades", 11), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ProtossUpgrades", 10)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ProtossUpgrades", 11), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ProtossUpgrades", 12)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ProtossUpgrades", 13), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ProtossUpgrades", 14), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ProtossUpgrades", 13)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ProtossUpgrades", 14), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("TerranUpgrades", 3)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TerranUpgrades", 4), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TerranUpgrades", 5), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("TerranUpgrades", 4)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TerranUpgrades", 5), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("TerranUpgrades", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TerranUpgrades", 1), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TerranUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("TerranUpgrades", 1)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TerranUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("TerranUpgrades", 9)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TerranUpgrades", 10), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TerranUpgrades", 11), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("TerranUpgrades", 10)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TerranUpgrades", 11), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("TerranUpgrades", 12)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TerranUpgrades", 13), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TerranUpgrades", 14), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("TerranUpgrades", 13)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TerranUpgrades", 14), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("TerranUpgrades", 6)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TerranUpgrades", 7), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TerranUpgrades", 8), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("TerranUpgrades", 7)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TerranUpgrades", 8), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("TerranUpgrades", 15)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TerranUpgrades", 16), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TerranUpgrades", 17), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("TerranUpgrades", 16)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TerranUpgrades", 17), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("RaynorUpgrades", 3)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("RaynorUpgrades", 4), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("RaynorUpgrades", 5), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("RaynorUpgrades", 4)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("RaynorUpgrades", 5), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("RaynorUpgrades", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("RaynorUpgrades", 1), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("RaynorUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("RaynorUpgrades", 1)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("RaynorUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("RaynorUpgrades", 9)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("RaynorUpgrades", 10), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("RaynorUpgrades", 11), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("RaynorUpgrades", 10)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("RaynorUpgrades", 11), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("RaynorUpgrades", 12)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("RaynorUpgrades", 13), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("RaynorUpgrades", 14), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("RaynorUpgrades", 13)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("RaynorUpgrades", 14), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("RaynorUpgrades", 6)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("RaynorUpgrades", 7), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("RaynorUpgrades", 8), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("RaynorUpgrades", 7)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("RaynorUpgrades", 8), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("RaynorUpgrades", 15)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("RaynorUpgrades", 16), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("RaynorUpgrades", 17), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("RaynorUpgrades", 16)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("RaynorUpgrades", 17), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("NovaUpgrades", 3)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NovaUpgrades", 4), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NovaUpgrades", 5), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("NovaUpgrades", 4)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NovaUpgrades", 5), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("NovaUpgrades", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NovaUpgrades", 1), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NovaUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("NovaUpgrades", 1)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NovaUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("NovaUpgrades", 6)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NovaUpgrades", 7), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NovaUpgrades", 8), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("NovaUpgrades", 7)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NovaUpgrades", 8), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("NovaUpgrades", 15)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NovaUpgrades", 16), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NovaUpgrades", 17), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("NovaUpgrades", 16)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NovaUpgrades", 17), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ZergUpgrades", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ZergUpgrades", 1), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ZergUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ZergUpgrades", 1)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ZergUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ZergUpgrades", 3)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ZergUpgrades", 4), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ZergUpgrades", 5), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ZergUpgrades", 4)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ZergUpgrades", 5), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ZergUpgrades", 6)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ZergUpgrades", 7), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ZergUpgrades", 8), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ZergUpgrades", 7)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ZergUpgrades", 8), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ZergUpgrades", 9)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ZergUpgrades", 10), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ZergUpgrades", 11), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ZergUpgrades", 10)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ZergUpgrades", 11), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ZergUpgrades", 12)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ZergUpgrades", 13), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ZergUpgrades", 14), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ZergUpgrades", 13)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ZergUpgrades", 14), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("DehakaUpgrades", 3)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("DehakaUpgrades", 4), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("DehakaUpgrades", 5), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("DehakaUpgrades", 4)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("DehakaUpgrades", 5), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("DehakaUpgrades", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("DehakaUpgrades", 1), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("DehakaUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("DehakaUpgrades", 1)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("DehakaUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("NeutralUpgradesAutocast", 10)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 11), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 12), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 13), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 14), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 15), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 16), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 17), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 18), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 19), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 20), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 21), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 22), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 23), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 24), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 25), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 26), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 27), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("NeutralUpgradesAutocast", 11)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 12), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 13), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 14), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 15), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 16), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 17), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 18), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 19), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 20), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 21), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 22), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 23), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 24), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 25), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 26), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 27), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("NeutralUpgradesAutocast", 12)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 13), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 14), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 15), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 16), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 17), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 18), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 19), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 20), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 21), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 22), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 23), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 24), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 25), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 26), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 27), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("NeutralUpgradesAutocast", 13)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 14), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 15), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 16), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 17), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 18), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 19), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 20), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 21), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 22), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 23), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 24), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 25), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 26), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 27), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("NeutralUpgradesAutocast", 14)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 15), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 16), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 17), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 18), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 19), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 20), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 21), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 22), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 23), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 24), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 25), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 26), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 27), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("NeutralUpgradesAutocast", 15)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 16), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 17), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 18), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 19), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 20), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 21), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 22), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 23), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 24), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 25), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 26), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 27), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("NeutralUpgradesAutocast", 16)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 17), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 18), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 19), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 20), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 21), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 22), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 23), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 24), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 25), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 26), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 27), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("NeutralUpgradesAutocast", 17)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 18), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 19), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 20), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 21), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 22), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 23), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 24), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 25), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 26), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 27), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("NeutralUpgradesAutocast", 18)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 19), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 20), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 21), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 22), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 23), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 24), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 25), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 26), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 27), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("NeutralUpgradesAutocast", 19)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 20), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 21), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 22), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 23), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 24), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 25), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 26), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 27), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("NeutralUpgradesAutocast", 20)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 21), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 22), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 23), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 24), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 25), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 26), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 27), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("NeutralUpgradesAutocast", 21)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 22), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 23), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 24), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 25), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 26), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 27), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("NeutralUpgradesAutocast", 22)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 23), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 24), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 25), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 26), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 27), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("NeutralUpgradesAutocast", 23)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 24), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 25), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 26), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 27), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("NeutralUpgradesAutocast", 24)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 25), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 26), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 27), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("NeutralUpgradesAutocast", 25)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 26), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 27), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("NeutralUpgradesAutocast", 26)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 27), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("HornerUpgrades", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("HornerUpgrades", 1), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("HornerUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("HornerUpgrades", 1)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("HornerUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("HornerUpgrades", 3)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("HornerUpgrades", 4), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("HornerUpgrades", 5), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("HornerUpgrades", 4)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("HornerUpgrades", 5), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("TychusBlazeOilSpill", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TychusBlazeOilSpillUpgraded", 0), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("TychusBlazeOilSpillUpgraded", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TychusBlazeOilSpill", 0), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("TychusNuxUltrasonicPulse", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TychusNuxUltrasonicPulseUpgraded", 0), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("TychusNuxUltrasonicPulseUpgraded", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TychusNuxUltrasonicPulse", 0), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("TychusNikaraHeal", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TychusNikaraHealUpgraded", 0), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("TychusNikaraHealUpgraded", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TychusNikaraHeal", 0), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("TychusCannonballHeavyImpact", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TychusCannonballHeavyImpactUpgraded", 0), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("TychusCannonballHeavyImpactUpgraded", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TychusCannonballHeavyImpact", 0), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("TychusUpgrades", 5)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TychusUpgrades", 6), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TychusUpgrades", 7), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("TychusUpgrades", 6)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TychusUpgrades", 7), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("TychusUpgrades", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TychusUpgrades", 1), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TychusUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("TychusUpgrades", 1)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("TychusUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("AlarakUpgrades", 3)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("AlarakUpgrades", 4), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("AlarakUpgrades", 5), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("AlarakUpgrades", 4)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("AlarakUpgrades", 5), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("AlarakUpgrades", 6)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("AlarakUpgrades", 7), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("AlarakUpgrades", 8), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("AlarakUpgrades", 7)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("AlarakUpgrades", 8), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("AlarakUpgrades", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("AlarakUpgrades", 1), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("AlarakUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("AlarakUpgrades", 1)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("AlarakUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ArtanisUpgrades", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ArtanisUpgrades", 1), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ArtanisUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ArtanisUpgrades", 1)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ArtanisUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ArtanisUpgrades", 3)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ArtanisUpgrades", 4), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ArtanisUpgrades", 5), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ArtanisUpgrades", 4)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ArtanisUpgrades", 5), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ArtanisUpgrades", 6)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ArtanisUpgrades", 7), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ArtanisUpgrades", 8), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ArtanisUpgrades", 7)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ArtanisUpgrades", 8), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ArtanisUpgrades", 9)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ArtanisUpgrades", 10), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ArtanisUpgrades", 11), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ArtanisUpgrades", 10)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ArtanisUpgrades", 11), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ArtanisUpgrades", 12)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ArtanisUpgrades", 13), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ArtanisUpgrades", 14), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ArtanisUpgrades", 13)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ArtanisUpgrades", 14), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("KaraxUpgrades", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("KaraxUpgrades", 1), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("KaraxUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("KaraxUpgrades", 1)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("KaraxUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("KaraxUpgrades", 3)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("KaraxUpgrades", 4), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("KaraxUpgrades", 5), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("KaraxUpgrades", 4)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("KaraxUpgrades", 5), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("KaraxUpgrades", 6)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("KaraxUpgrades", 7), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("KaraxUpgrades", 8), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("KaraxUpgrades", 7)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("KaraxUpgrades", 8), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("KaraxUpgrades", 9)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("KaraxUpgrades", 10), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("KaraxUpgrades", 11), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("KaraxUpgrades", 10)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("KaraxUpgrades", 11), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("KaraxUpgrades", 12)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("KaraxUpgrades", 13), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("KaraxUpgrades", 14), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("KaraxUpgrades", 13)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("KaraxUpgrades", 14), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ZagaraUpgrades", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ZagaraUpgrades", 1), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ZagaraUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ZagaraUpgrades", 1)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ZagaraUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ZagaraUpgrades", 6)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ZagaraUpgrades", 7), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ZagaraUpgrades", 8), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ZagaraUpgrades", 7)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ZagaraUpgrades", 8), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ZagaraUpgrades", 9)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ZagaraUpgrades", 10), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ZagaraUpgrades", 11), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ZagaraUpgrades", 10)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ZagaraUpgrades", 11), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ZagaraUpgrades", 12)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ZagaraUpgrades", 13), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ZagaraUpgrades", 14), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("ZagaraUpgrades", 13)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("ZagaraUpgrades", 14), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("VikingMengskAssaultPlaceFromVikingFighter", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("AssaultModeMengsk", 0), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("VikingMengskFighterPlaceFromVikingAssault", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("FighterModeMengsk", 0), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("MengskUpgrades", 3)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("MengskUpgrades", 4), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("MengskUpgrades", 5), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("MengskUpgrades", 4)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("MengskUpgrades", 5), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("MengskUpgrades", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("MengskUpgrades", 1), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("MengskUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("MengskUpgrades", 1)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("MengskUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("MedicStarlightHeal", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("MedicStarlightHealMechanical", 0), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("MedicStarlightHealMechanical", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("MedicStarlightHeal", 0), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("StukovUpgrades", 3)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("StukovUpgrades", 4), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("StukovUpgrades", 5), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("StukovUpgrades", 4)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("StukovUpgrades", 5), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("StukovUpgrades", 0)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("StukovUpgrades", 1), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("StukovUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("StukovUpgrades", 1)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("StukovUpgrades", 2), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("StukovUpgrades", 15)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("StukovUpgrades", 16), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("StukovUpgrades", 17), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("StukovUpgrades", 16)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("StukovUpgrades", 17), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("StukovUpgrades", 6)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("StukovUpgrades", 7), lp_onOff), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("StukovUpgrades", 8), lp_onOff), c_orderQueueReplace);
    }
    else if (auto5FAD0C78_val == AbilityCommand("StukovUpgrades", 7)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("StukovUpgrades", 8), lp_onOff), c_orderQueueReplace);
    }
    else {
    }
}

void lib1DE23868_gf_AutoControlGroup (string lp_unitType, string lp_race, int lp_player, int lp_controlGroup) {
    // Variable Declarations
    string lv_unitTypeFiltered;
    string[2] lv_unitTypeAlt;

    // Automatic Variable Declarations
    string auto06DB12D8_val;

    // Variable Initialization

    // Implementation
    auto06DB12D8_val = lp_unitType;
    if (auto06DB12D8_val == "GaryStetmann") {
        lv_unitTypeFiltered = "GaryStetmann";
        lv_unitTypeAlt[0] = "SuperGaryStetmann";
    }
    else if (auto06DB12D8_val == "SuperGaryStetmann") {
        lv_unitTypeFiltered = "GaryStetmann";
        lv_unitTypeAlt[0] = "SuperGaryStetmann";
    }
    else if (auto06DB12D8_val == "FenixPraetor") {
        lv_unitTypeFiltered = "FenixPraetor";
        lv_unitTypeAlt[0] = "FenixWalker";
        lv_unitTypeAlt[1] = "FenixFlyer";
    }
    else if (auto06DB12D8_val == "FenixWalker") {
        lv_unitTypeFiltered = "FenixPraetor";
        lv_unitTypeAlt[0] = "FenixWalker";
        lv_unitTypeAlt[1] = "FenixFlyer";
    }
    else if (auto06DB12D8_val == "FenixFlyer") {
        lv_unitTypeFiltered = "FenixPraetor";
        lv_unitTypeAlt[0] = "FenixWalker";
        lv_unitTypeAlt[1] = "FenixFlyer";
    }
    else {
        lv_unitTypeFiltered = lp_unitType;
    }
    if ((lp_controlGroup > 0)) {
        CatalogFieldValueSet(c_gameCatalogButton, (("AutoControlGroup_" + (lv_unitTypeFiltered))), "Icon", lp_player, ("Assets\\Textures\\btn-command-" + lp_race + "-autocontrolgroup-" + IntToString(lp_controlGroup) + ".dds"));
    }
    else {
        CatalogFieldValueSet(c_gameCatalogButton, (("AutoControlGroup_" + (lv_unitTypeFiltered))), "Icon", lp_player, CatalogFieldValueGet(c_gameCatalogButton, (("AutoControlGroup_None_" + lp_race)), "Icon", 0));
    }
    CatalogFieldValueSet(c_gameCatalogUnit, lv_unitTypeFiltered, "ReviveInfoBase.Resource[" + IntToString(0) + "]", lp_player, IntToString(lp_controlGroup));
    if ((lv_unitTypeAlt[0] != null)) {
        CatalogFieldValueSet(c_gameCatalogUnit, lv_unitTypeAlt[0], "ReviveInfoBase.Resource[" + IntToString(0) + "]", lp_player, IntToString(lp_controlGroup));
    }

    if ((lv_unitTypeAlt[1] != null)) {
        CatalogFieldValueSet(c_gameCatalogUnit, lv_unitTypeAlt[1], "ReviveInfoBase.Resource[" + IntToString(0) + "]", lp_player, IntToString(lp_controlGroup));
    }

}

void lib1DE23868_gf_RandomCommander (int lp_player) {
    // Variable Declarations
    int lv_random;
    unitgroup lv_randomGroup;
    unit lv_randomPick;
    unit lv_randomAbathur;
    unit lv_randomAlarak;
    unit lv_randomArtanis;
    unit lv_randomDehaka;
    unit lv_randomFenix;
    unit lv_randomHorner;
    unit lv_randomKarax;
    unit lv_randomKerrigan;
    unit lv_randomMengsk;
    unit lv_randomNova;
    unit lv_randomRaynor;
    unit lv_randomStetmann;
    unit lv_randomStukov;
    unit lv_randomSwann;
    unit lv_randomTychus;
    unit lv_randomVorazun;
    unit lv_randomZagara;

    // Automatic Variable Declarations
    unit autoB170C375_val;
    unitgroup autoA3314C3D_g;
    int autoA3314C3D_u;
    unit autoA3314C3D_var;

    // Variable Initialization
    lv_randomGroup = UnitGroupEmpty();

    // Implementation
    if ((TechTreeUpgradeCount(lp_player, "BlacklistAbathur", c_techCountCompleteOnly) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
        UnitGroupAdd(lv_randomGroup, UnitLastCreated());
        lv_randomAbathur = UnitLastCreated();
    }

    if ((TechTreeUpgradeCount(lp_player, "BlacklistAlarak", c_techCountCompleteOnly) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
        UnitGroupAdd(lv_randomGroup, UnitLastCreated());
        lv_randomAlarak = UnitLastCreated();
    }

    if ((TechTreeUpgradeCount(lp_player, "BlacklistArtanis", c_techCountCompleteOnly) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
        UnitGroupAdd(lv_randomGroup, UnitLastCreated());
        lv_randomArtanis = UnitLastCreated();
    }

    if ((TechTreeUpgradeCount(lp_player, "BlacklistDehaka", c_techCountCompleteOnly) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
        UnitGroupAdd(lv_randomGroup, UnitLastCreated());
        lv_randomDehaka = UnitLastCreated();
    }

    if ((TechTreeUpgradeCount(lp_player, "BlacklistFenix", c_techCountCompleteOnly) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
        UnitGroupAdd(lv_randomGroup, UnitLastCreated());
        lv_randomFenix = UnitLastCreated();
    }

    if ((TechTreeUpgradeCount(lp_player, "BlacklistHorner", c_techCountCompleteOnly) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
        UnitGroupAdd(lv_randomGroup, UnitLastCreated());
        lv_randomHorner = UnitLastCreated();
    }

    if ((TechTreeUpgradeCount(lp_player, "BlacklistKarax", c_techCountCompleteOnly) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
        UnitGroupAdd(lv_randomGroup, UnitLastCreated());
        lv_randomKarax = UnitLastCreated();
    }

    if ((TechTreeUpgradeCount(lp_player, "BlacklistKerrigan", c_techCountCompleteOnly) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
        UnitGroupAdd(lv_randomGroup, UnitLastCreated());
        lv_randomKerrigan = UnitLastCreated();
    }

    if ((TechTreeUpgradeCount(lp_player, "BlacklistNova", c_techCountCompleteOnly) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
        UnitGroupAdd(lv_randomGroup, UnitLastCreated());
        lv_randomNova = UnitLastCreated();
    }

    if ((TechTreeUpgradeCount(lp_player, "BlacklistRaynor", c_techCountCompleteOnly) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
        UnitGroupAdd(lv_randomGroup, UnitLastCreated());
        lv_randomRaynor = UnitLastCreated();
    }

    if ((TechTreeUpgradeCount(lp_player, "BlacklistStukov", c_techCountCompleteOnly) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
        UnitGroupAdd(lv_randomGroup, UnitLastCreated());
        lv_randomStukov = UnitLastCreated();
    }

    if ((TechTreeUpgradeCount(lp_player, "BlacklistSwann", c_techCountCompleteOnly) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
        UnitGroupAdd(lv_randomGroup, UnitLastCreated());
        lv_randomSwann = UnitLastCreated();
    }

    if ((TechTreeUpgradeCount(lp_player, "BlacklistTychus", c_techCountCompleteOnly) == 0) && (TechTreeUpgradeCount(lp_player, "MutationAlphaTimeline", c_techCountCompleteOnly) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
        UnitGroupAdd(lv_randomGroup, UnitLastCreated());
        lv_randomTychus = UnitLastCreated();
    }

    if ((TechTreeUpgradeCount(lp_player, "BlacklistVorazun", c_techCountCompleteOnly) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
        UnitGroupAdd(lv_randomGroup, UnitLastCreated());
        lv_randomVorazun = UnitLastCreated();
    }

    if ((TechTreeUpgradeCount(lp_player, "BlacklistZagara", c_techCountCompleteOnly) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
        UnitGroupAdd(lv_randomGroup, UnitLastCreated());
        lv_randomZagara = UnitLastCreated();
    }

    if ((TechTreeUpgradeCount(lp_player, "BlacklistStetmann", c_techCountCompleteOnly) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
        UnitGroupAdd(lv_randomGroup, UnitLastCreated());
        lv_randomStetmann = UnitLastCreated();
    }

    if ((TechTreeUpgradeCount(lp_player, "BlacklistMengsk", c_techCountCompleteOnly) == 0) && (TechTreeUpgradeCount(lp_player, "MutationAlphaTimeline", c_techCountCompleteOnly) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
        UnitGroupAdd(lv_randomGroup, UnitLastCreated());
        lv_randomMengsk = UnitLastCreated();
    }

    lv_randomPick = UnitGroupRandomUnit(lv_randomGroup, c_unitCountAlive);
    autoB170C375_val = lv_randomPick;
    if (autoB170C375_val == lv_randomAbathur) {
        lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(lp_player), 1), "WorkerAbathur");
        libFD391A9C_gf_ScoreboardSetIcon(lp_player, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-abathur.dds");
    }
    else if (autoB170C375_val == lv_randomAlarak) {
        lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(lp_player), 1), "WorkerAlarak");
        libFD391A9C_gf_ScoreboardSetIcon(lp_player, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-alarak.dds");
    }
    else if (autoB170C375_val == lv_randomArtanis) {
        lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(lp_player), 1), "WorkerArtanis");
        libFD391A9C_gf_ScoreboardSetIcon(lp_player, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-artanis.dds");
    }
    else if (autoB170C375_val == lv_randomDehaka) {
        lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(lp_player), 1), "WorkerDehaka");
        libFD391A9C_gf_ScoreboardSetIcon(lp_player, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-dehaka.dds");
    }
    else if (autoB170C375_val == lv_randomFenix) {
        lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(lp_player), 1), "WorkerFenix");
        libFD391A9C_gf_ScoreboardSetIcon(lp_player, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-fenix.dds");
    }
    else if (autoB170C375_val == lv_randomHorner) {
        lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(lp_player), 1), "WorkerHorner");
        libFD391A9C_gf_ScoreboardSetIcon(lp_player, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-horner.dds");
    }
    else if (autoB170C375_val == lv_randomKarax) {
        lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(lp_player), 1), "WorkerKarax");
        libFD391A9C_gf_ScoreboardSetIcon(lp_player, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-karax.dds");
    }
    else if (autoB170C375_val == lv_randomKerrigan) {
        lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(lp_player), 1), "WorkerKerrigan");
        libFD391A9C_gf_ScoreboardSetIcon(lp_player, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-kerrigan.dds");
    }
    else if (autoB170C375_val == lv_randomMengsk) {
        lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(lp_player), 1), "WorkerMengsk");
        libFD391A9C_gf_ScoreboardSetIcon(lp_player, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-mengsk.dds");
    }
    else if (autoB170C375_val == lv_randomNova) {
        lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(lp_player), 1), "WorkerNova");
        libFD391A9C_gf_ScoreboardSetIcon(lp_player, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-nova.dds");
    }
    else if (autoB170C375_val == lv_randomRaynor) {
        lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(lp_player), 1), "WorkerRaynor");
        libFD391A9C_gf_ScoreboardSetIcon(lp_player, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-raynor.dds");
    }
    else if (autoB170C375_val == lv_randomStetmann) {
        lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(lp_player), 1), "WorkerStetmann");
        libFD391A9C_gf_ScoreboardSetIcon(lp_player, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-stetmann.dds");
    }
    else if (autoB170C375_val == lv_randomStukov) {
        lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(lp_player), 1), "WorkerStukov");
        libFD391A9C_gf_ScoreboardSetIcon(lp_player, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-stukov.dds");
    }
    else if (autoB170C375_val == lv_randomSwann) {
        lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(lp_player), 1), "WorkerSwann");
        libFD391A9C_gf_ScoreboardSetIcon(lp_player, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-swann.dds");
    }
    else if (autoB170C375_val == lv_randomTychus) {
        lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(lp_player), 1), "WorkerTychus");
        libFD391A9C_gf_ScoreboardSetIcon(lp_player, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-tychus.dds");
    }
    else if (autoB170C375_val == lv_randomVorazun) {
        lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(lp_player), 1), "WorkerVorazun");
        libFD391A9C_gf_ScoreboardSetIcon(lp_player, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-vorazun.dds");
    }
    else if (autoB170C375_val == lv_randomZagara) {
        lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(lp_player), 1), "WorkerZagara");
        libFD391A9C_gf_ScoreboardSetIcon(lp_player, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-zagara.dds");
    }
    else {
    }
    autoA3314C3D_g = lv_randomGroup;
    autoA3314C3D_u = UnitGroupCount(autoA3314C3D_g, c_unitCountAll);
    for (;; autoA3314C3D_u -= 1) {
        autoA3314C3D_var = UnitGroupUnitFromEnd(autoA3314C3D_g, autoA3314C3D_u);
        if (autoA3314C3D_var == null) { break; }
        UnitRemove(autoA3314C3D_var);
    }
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "HideWorkerCommandCard", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WorkerCommanderSelect", 0);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeInventoryPanel, true);
    UISetSelectionTypeEnabled(PlayerGroupSingle(lp_player), c_localSelectionTypeUnknown, true);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Field Auto Depleted
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_MineralFieldAutoDepleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(lib1DE23868_gv_mineralFieldAutoGroup[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitSource))], EventPlayerEffectUsedUnit(c_effectUnitSource));
    lib1DE23868_gf_MineralFieldAutoUpdate(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitSource)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_MineralFieldAutoDepleted_Init () {
    lib1DE23868_gt_MineralFieldAutoDepleted = TriggerCreate("lib1DE23868_gt_MineralFieldAutoDepleted_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_MineralFieldAutoDepleted, c_playerAny, "MineralFieldAutoDepletedSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Abathur Biomass
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_AbathurBiomass_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitInventoryCreate(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassItem");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_AbathurBiomass_Init () {
    lib1DE23868_gt_AbathurBiomass = TriggerCreate("lib1DE23868_gt_AbathurBiomass_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AbathurBiomass, c_playerAny, "AbathurBiomassTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vorazun Dark Pylon
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_VorazunDarkPylon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitInventoryCreate(EventPlayerEffectUsedUnit(c_effectUnitTarget), "VorazunDarkPylon");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_VorazunDarkPylon_Init () {
    lib1DE23868_gt_VorazunDarkPylon = TriggerCreate("lib1DE23868_gt_VorazunDarkPylon_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_VorazunDarkPylon, c_playerAny, "VorazunDarkPylonTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artanis Guardian Shell
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_ArtanisGuardianShell_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitInventoryCreate(EventPlayerEffectUsedUnit(c_effectUnitTarget), "GuardianShell");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_ArtanisGuardianShell_Init () {
    lib1DE23868_gt_ArtanisGuardianShell = TriggerCreate("lib1DE23868_gt_ArtanisGuardianShell_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_ArtanisGuardianShell, c_playerAny, "ArtanisGuardianShellTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Firehawk Place
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_FirehawkPlace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitInventoryCreate(EventPlayerEffectUsedUnit(c_effectUnitTarget), "FirehawkItem");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_FirehawkPlace_Init () {
    lib1DE23868_gt_FirehawkPlace = TriggerCreate("lib1DE23868_gt_FirehawkPlace_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_FirehawkPlace, c_playerAny, "FirehawkPlaceTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mounted Railgun Place
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_MountedRailgunPlace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitInventoryCreate(EventPlayerEffectUsedUnit(c_effectUnitTarget), "MountedRailgunItem");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_MountedRailgunPlace_Init () {
    lib1DE23868_gt_MountedRailgunPlace = TriggerCreate("lib1DE23868_gt_MountedRailgunPlace_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_MountedRailgunPlace, c_playerAny, "MountedRailgunPlaceTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Trident Missiles Place
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_TridentMissilesPlace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitInventoryCreate(EventPlayerEffectUsedUnit(c_effectUnitTarget), "TridentMissilesItem");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_TridentMissilesPlace_Init () {
    lib1DE23868_gt_TridentMissilesPlace = TriggerCreate("lib1DE23868_gt_TridentMissilesPlace_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TridentMissilesPlace, c_playerAny, "TridentMissilesPlaceTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Capjack Place
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_CapjackPlace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitInventoryCreate(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CapjackItem");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_CapjackPlace_Init () {
    lib1DE23868_gt_CapjackPlace = TriggerCreate("lib1DE23868_gt_CapjackPlace_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_CapjackPlace, c_playerAny, "CapjackPlaceTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Siege Drone Place
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_SiegeDronePlace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitInventoryCreate(EventPlayerEffectUsedUnit(c_effectUnitTarget), "SiegeDroneItem");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_SiegeDronePlace_Init () {
    lib1DE23868_gt_SiegeDronePlace = TriggerCreate("lib1DE23868_gt_SiegeDronePlace_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_SiegeDronePlace, c_playerAny, "SiegeDronePlaceTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Char Agate Place
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_CharAgatePlace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitInventoryCreate(EventPlayerEffectUsedUnit(c_effectUnitTarget), "CharAgateItem");
    lib1DE23868_gf_CrystalforgeEnergyRefund(EventPlayerEffectUsedUnit(c_effectUnitTarget), EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_CharAgatePlace_Init () {
    lib1DE23868_gt_CharAgatePlace = TriggerCreate("lib1DE23868_gt_CharAgatePlace_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_CharAgatePlace, c_playerAny, "CharAgatePlaceTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerus Peridot Place
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_ZerusPeridotPlace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitInventoryCreate(EventPlayerEffectUsedUnit(c_effectUnitTarget), "ZerusPeridotItem");
    lib1DE23868_gf_CrystalforgeEnergyRefund(EventPlayerEffectUsedUnit(c_effectUnitTarget), EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_ZerusPeridotPlace_Init () {
    lib1DE23868_gt_ZerusPeridotPlace = TriggerCreate("lib1DE23868_gt_ZerusPeridotPlace_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_ZerusPeridotPlace, c_playerAny, "ZerusPeridotPlaceTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terrazine Amethyst Place
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_TerrazineAmethystPlace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitInventoryCreate(EventPlayerEffectUsedUnit(c_effectUnitTarget), "TerrazineAmethystItem");
    lib1DE23868_gf_CrystalforgeEnergyRefund(EventPlayerEffectUsedUnit(c_effectUnitTarget), EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_TerrazineAmethystPlace_Init () {
    lib1DE23868_gt_TerrazineAmethystPlace = TriggerCreate("lib1DE23868_gt_TerrazineAmethystPlace_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TerrazineAmethystPlace, c_playerAny, "TerrazineAmethystPlaceTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bel'Shir Sapphire Place
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_BelShirSapphirePlace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitInventoryCreate(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BelShirSapphireItem");
    lib1DE23868_gf_CrystalforgeEnergyRefund(EventPlayerEffectUsedUnit(c_effectUnitTarget), EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_BelShirSapphirePlace_Init () {
    lib1DE23868_gt_BelShirSapphirePlace = TriggerCreate("lib1DE23868_gt_BelShirSapphirePlace_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_BelShirSapphirePlace, c_playerAny, "BelShirSapphirePlaceTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UED Topaz Place
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_UEDTopazPlace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitInventoryCreate(EventPlayerEffectUsedUnit(c_effectUnitTarget), "UEDTopazItem");
    lib1DE23868_gf_CrystalforgeEnergyRefund(EventPlayerEffectUsedUnit(c_effectUnitTarget), EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_UEDTopazPlace_Init () {
    lib1DE23868_gt_UEDTopazPlace = TriggerCreate("lib1DE23868_gt_UEDTopazPlace_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_UEDTopazPlace, c_playerAny, "UEDTopazPlaceTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shield Overcharge
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_ShieldOvercharge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB170FB05_g;
    int autoB170FB05_u;
    unit autoB170FB05_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB170FB05_g = UnitGroupAlliance(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB170FB05_u = UnitGroupCount(autoB170FB05_g, c_unitCountAll);
    for (;; autoB170FB05_u -= 1) {
        autoB170FB05_var = UnitGroupUnitFromEnd(autoB170FB05_g, autoB170FB05_u);
        if (autoB170FB05_var == null) { break; }
        UnitCreateEffectUnit(autoB170FB05_var, "ArtanisShieldOverchargeSetImpact", autoB170FB05_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_ShieldOvercharge_Init () {
    lib1DE23868_gt_ShieldOvercharge = TriggerCreate("lib1DE23868_gt_ShieldOvercharge_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_ShieldOvercharge, c_playerAny, "ArtanisShieldOverchargeSetCast");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dehaka Update XP (Trigger)
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_DehakaUpdateXPTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1DE23868_gf_DehakaUpdateXP(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_DehakaUpdateXPTrigger_Init () {
    lib1DE23868_gt_DehakaUpdateXPTrigger = TriggerCreate("lib1DE23868_gt_DehakaUpdateXPTrigger_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_DehakaUpdateXPTrigger, c_playerAny, "DehakaUpdateXPTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dehaka Scorching Breath Start
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_DehakaScorchingBreathStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    ActorLookAtTypeStart(libNtve_gf_MainActorofUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster)), "InstantHeadOnly", libNtve_gf_MainActorofUnit(EventPlayerEffectUsedUnit(c_effectUnitSource)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_DehakaScorchingBreathStart_Init () {
    lib1DE23868_gt_DehakaScorchingBreathStart = TriggerCreate("lib1DE23868_gt_DehakaScorchingBreathStart_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_DehakaScorchingBreathStart, c_playerAny, "DehakaScorchingBreathPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dehaka Scorching Breath Stop
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_DehakaScorchingBreathStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    ActorLookAtTypeStop(libNtve_gf_MainActorofUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster)), "SlowHeadOnly");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_DehakaScorchingBreathStop_Init () {
    lib1DE23868_gt_DehakaScorchingBreathStop = TriggerCreate("lib1DE23868_gt_DehakaScorchingBreathStop_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_DehakaScorchingBreathStop, c_playerAny, "DehakaScorchingBreathPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dehaka Scan Use
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_DehakaScanUse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetChargeUsed(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "Abil/DehakaScan") == IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogAbil, "DehakaScan", "Cost[" + IntToString(0) + "].Charge.CountMax", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerAddCooldown(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "Abil/DehakaScan", (IntToFixed(PlayerGetPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), c_playerPropCustom)) * GameGetSpeed()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_DehakaScanUse_Init () {
    lib1DE23868_gt_DehakaScanUse = TriggerCreate("lib1DE23868_gt_DehakaScanUse_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_DehakaScanUse, c_playerAny, "DehakaScanCreate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dehaka Scan Build
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_DehakaScanBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayerRemoveCooldown(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "Abil/DehakaScan");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_DehakaScanBuild_Init () {
    lib1DE23868_gt_DehakaScanBuild = TriggerCreate("lib1DE23868_gt_DehakaScanBuild_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_DehakaScanBuild, c_playerAny, "DehakaPrimalWurmUpgrade");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Scan Use
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_RaynorScanUse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetChargeUsed(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "Abil/RaynorScan") == IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogAbil, "RaynorScan", "Cost[" + IntToString(0) + "].Charge.CountMax", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerAddCooldown(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "Abil/RaynorScan", (IntToFixed(PlayerGetPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), c_playerPropCustom)) * GameGetSpeed()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_RaynorScanUse_Init () {
    lib1DE23868_gt_RaynorScanUse = TriggerCreate("lib1DE23868_gt_RaynorScanUse_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_RaynorScanUse, c_playerAny, "RaynorScan");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Vanadium Plating Controller Start
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_RaynorVanadiumPlatingControllerStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1DE23868_gf_RaynorVanadiumPlatingCheck(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_RaynorVanadiumPlatingControllerStart_Init () {
    lib1DE23868_gt_RaynorVanadiumPlatingControllerStart = TriggerCreate("lib1DE23868_gt_RaynorVanadiumPlatingControllerStart_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_RaynorVanadiumPlatingControllerStart, c_playerAny, "WorkerBirthRaynorUpgrades");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Bunker Weapon Function
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_RaynorBunkerWeaponFunction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unit lv_u;

    // Automatic Variable Declarations
    string autoBAE83C72_val;
    const int auto2F71074A_ae = 10;
    const int auto2F71074A_ai = 1;
    const int auto9F75D056_ae = 10;
    const int auto9F75D056_ai = 1;
    const int auto810616B9_ae = 10;
    const int auto810616B9_ai = 1;
    const int auto3CC7A3C1_ae = 10;
    const int auto3CC7A3C1_ai = 1;
    const int auto01B15919_ae = 10;
    const int auto01B15919_ai = 1;

    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    autoBAE83C72_val = EventPlayerEffectUsed();
    if (autoBAE83C72_val == "BunkerPermanentCargoFirebat") {
        lv_i = 1;
        for ( ; ( (auto2F71074A_ai >= 0 && lv_i <= auto2F71074A_ae) || (auto2F71074A_ai < 0 && lv_i >= auto2F71074A_ae) ) ; lv_i += auto2F71074A_ai ) {
            UnitWeaponRemove(lv_u, (("BunkerFirebat" + IntToString(lv_i))));
        }
        UnitWeaponAdd(lv_u, (("BunkerFirebat" + IntToString(UnitBehaviorCount(lv_u, "BunkerPermanentCargoFirebat")))), null);
    }
    else if (autoBAE83C72_val == "BunkerPermanentCargoGhost") {
        lv_i = 1;
        for ( ; ( (auto9F75D056_ai >= 0 && lv_i <= auto9F75D056_ae) || (auto9F75D056_ai < 0 && lv_i >= auto9F75D056_ae) ) ; lv_i += auto9F75D056_ai ) {
            UnitWeaponRemove(lv_u, (("BunkerGhost" + IntToString(lv_i))));
        }
        UnitWeaponAdd(lv_u, (("BunkerGhost" + IntToString(UnitBehaviorCount(lv_u, "BunkerPermanentCargoGhost")))), null);
    }
    else if (autoBAE83C72_val == "BunkerPermanentCargoMarauder") {
        lv_i = 1;
        for ( ; ( (auto810616B9_ai >= 0 && lv_i <= auto810616B9_ae) || (auto810616B9_ai < 0 && lv_i >= auto810616B9_ae) ) ; lv_i += auto810616B9_ai ) {
            UnitWeaponRemove(lv_u, (("BunkerMarauder" + IntToString(lv_i))));
        }
        UnitWeaponAdd(lv_u, (("BunkerMarauder" + IntToString(UnitBehaviorCount(lv_u, "BunkerPermanentCargoMarauder")))), null);
    }
    else if (autoBAE83C72_val == "BunkerPermanentCargoMarine") {
        lv_i = 1;
        for ( ; ( (auto3CC7A3C1_ai >= 0 && lv_i <= auto3CC7A3C1_ae) || (auto3CC7A3C1_ai < 0 && lv_i >= auto3CC7A3C1_ae) ) ; lv_i += auto3CC7A3C1_ai ) {
            UnitWeaponRemove(lv_u, (("BunkerMarine" + IntToString(lv_i))));
        }
        UnitWeaponAdd(lv_u, (("BunkerMarine" + IntToString(UnitBehaviorCount(lv_u, "BunkerPermanentCargoMarine")))), null);
    }
    else if (autoBAE83C72_val == "BunkerPermanentCargoReaper") {
        lv_i = 1;
        for ( ; ( (auto01B15919_ai >= 0 && lv_i <= auto01B15919_ae) || (auto01B15919_ai < 0 && lv_i >= auto01B15919_ae) ) ; lv_i += auto01B15919_ai ) {
            UnitWeaponRemove(lv_u, (("BunkerReaper" + IntToString(lv_i))));
        }
        UnitWeaponAdd(lv_u, (("BunkerReaper" + IntToString(UnitBehaviorCount(lv_u, "BunkerPermanentCargoReaper")))), null);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_RaynorBunkerWeaponFunction_Init () {
    lib1DE23868_gt_RaynorBunkerWeaponFunction = TriggerCreate("lib1DE23868_gt_RaynorBunkerWeaponFunction_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_RaynorBunkerWeaponFunction, c_playerAny, "BunkerPermanentCargoMarine");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_RaynorBunkerWeaponFunction, c_playerAny, "BunkerPermanentCargoMarauder");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_RaynorBunkerWeaponFunction, c_playerAny, "BunkerPermanentCargoGhost");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_RaynorBunkerWeaponFunction, c_playerAny, "BunkerPermanentCargoFirebat");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_RaynorBunkerWeaponFunction, c_playerAny, "BunkerPermanentCargoReaper");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor Supply Drop Rework
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_RaynorSupplyDropRework_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedBanshee", libNtve_gf_ArithmeticIntClamp((TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedBanshee", c_techCountCompleteOnly) + 1), 0, FixedToInt((IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogAbil, "BansheePlace", "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", 0)) / 5.0))));
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedBansheeCooldown", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedBattlecruiser", libNtve_gf_ArithmeticIntClamp((TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedBattlecruiser", c_techCountCompleteOnly) + 1), 0, FixedToInt((IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogAbil, "BattlecruiserRaynorPlace", "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", 0)) / 5.0))));
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedBattlecruiserCooldown", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedDuskWings", libNtve_gf_ArithmeticIntClamp((TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedDuskWings", c_techCountCompleteOnly) + 1), 0, FixedToInt((IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogAbil, "DuskWingsPlace", "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", 0)) / 5.0))));
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedDuskWingsCooldown", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedFirebat", libNtve_gf_ArithmeticIntClamp((TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedFirebat", c_techCountCompleteOnly) + 1), 0, FixedToInt((IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogAbil, "FirebatPlace", "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", 0)) / 5.0))));
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedFirebatCooldown", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedHyperion", libNtve_gf_ArithmeticIntClamp((TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedHyperion", c_techCountCompleteOnly) + 1), 0, FixedToInt((IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogAbil, "RaynorHyperionPlace", "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", 0)) / 50.0))));
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedMarauder", libNtve_gf_ArithmeticIntClamp((TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedMarauder", c_techCountCompleteOnly) + 1), 0, FixedToInt((IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogAbil, "MarauderPlace", "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", 0)) / 5.0))));
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedMarauderCooldown", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedMarine", libNtve_gf_ArithmeticIntClamp((TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedMarine", c_techCountCompleteOnly) + 1), 0, FixedToInt((IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogAbil, "MarinePlace", "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", 0)) / 5.0))));
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedMarineCooldown", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedMedic", libNtve_gf_ArithmeticIntClamp((TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedMedic", c_techCountCompleteOnly) + 1), 0, FixedToInt((IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogAbil, "MedicPlace", "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", 0)) / 5.0))));
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedMedicCooldown", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedSiegeTank", libNtve_gf_ArithmeticIntClamp((TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedSiegeTank", c_techCountCompleteOnly) + 1), 0, FixedToInt((IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogAbil, "SiegeTankRaynorPlace", "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", 0)) / 5.0))));
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedSiegeTankCooldown", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedViking", libNtve_gf_ArithmeticIntClamp((TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedViking", c_techCountCompleteOnly) + 1), 0, FixedToInt((IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogAbil, "VikingFighterPlace", "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", 0)) / 5.0))));
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedVikingCooldown", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedVulture", libNtve_gf_ArithmeticIntClamp((TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedVulture", c_techCountCompleteOnly) + 1), 0, FixedToInt((IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogAbil, "VulturePlace", "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", 0)) / 5.0))));
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedVultureCooldown", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedSpectre", libNtve_gf_ArithmeticIntClamp((TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedSpectre", c_techCountCompleteOnly) + 1), 0, FixedToInt((IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogAbil, "SpectrePlace", "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", 0)) / 5.0))));
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "RaynorCostReducedSpectreCooldown", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_RaynorSupplyDropRework_Init () {
    lib1DE23868_gt_RaynorSupplyDropRework = TriggerCreate("lib1DE23868_gt_RaynorSupplyDropRework_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_RaynorSupplyDropRework, c_playerAny, "RaynorSupplyDropReworkSetCast");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Mengsk_MedivacAirlift
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_CM_Mengsk_MedivacAirlift_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medivac;
    unit lv_siegetank;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_medivac = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_siegetank = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "MedivacMengskSiegeTankAirliftLoadTrigger")) {
        UnitBehaviorAdd(lv_medivac, "MedivacMengskSiegeTankAirlift", lv_medivac, 1);
    }
    else {
        UnitBehaviorRemove(lv_medivac, "MedivacMengskSiegeTankAirlift", 1);
        UnitBehaviorRemove(lv_medivac, "MedivacMengskSiegeTankAirliftLevel", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_CM_Mengsk_MedivacAirlift_Init () {
    lib1DE23868_gt_CM_Mengsk_MedivacAirlift = TriggerCreate("lib1DE23868_gt_CM_Mengsk_MedivacAirlift_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_CM_Mengsk_MedivacAirlift, c_playerAny, "MedivacMengskSiegeTankAirliftLoadTrigger");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_CM_Mengsk_MedivacAirlift, c_playerAny, "MedivacMengskSiegeTankAirliftUnloadTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mengsk Bunker Depot Weapon
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_MengskBunkerDepotWeapon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unit lv_u;

    // Automatic Variable Declarations
    int auto9AD18BEC_val;
    int auto925547BE_val;
    int auto62A31261_val;
    int auto84311E48_val;

    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitSource);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitWeaponRemove(lv_u, "BunkerDepotMengskTrooper1");
    UnitWeaponRemove(lv_u, "BunkerDepotMengskTrooper2");
    UnitWeaponRemove(lv_u, "BunkerDepotMengskTrooper3");
    UnitWeaponRemove(lv_u, "BunkerDepotMengskTrooper4");
    UnitWeaponRemove(lv_u, "BunkerDepotMengskTrooper5");
    UnitWeaponRemove(lv_u, "BunkerDepotMengskTrooper6");
    UnitWeaponRemove(lv_u, "BunkerDepotMengskTrooperImproved1");
    UnitWeaponRemove(lv_u, "BunkerDepotMengskTrooperImproved2");
    UnitWeaponRemove(lv_u, "BunkerDepotMengskTrooperImproved3");
    UnitWeaponRemove(lv_u, "BunkerDepotMengskTrooperImproved4");
    UnitWeaponRemove(lv_u, "BunkerDepotMengskTrooperImproved5");
    UnitWeaponRemove(lv_u, "BunkerDepotMengskTrooperImproved6");
    UnitWeaponRemove(lv_u, "BunkerDepotMengskTrooperAA1");
    UnitWeaponRemove(lv_u, "BunkerDepotMengskTrooperAA2");
    UnitWeaponRemove(lv_u, "BunkerDepotMengskTrooperAA3");
    UnitWeaponRemove(lv_u, "BunkerDepotMengskTrooperAA4");
    UnitWeaponRemove(lv_u, "BunkerDepotMengskTrooperAA5");
    UnitWeaponRemove(lv_u, "BunkerDepotMengskTrooperAA6");
    UnitWeaponRemove(lv_u, "BunkerDepotMengskTrooperFlamethrower1");
    UnitWeaponRemove(lv_u, "BunkerDepotMengskTrooperFlamethrower2");
    UnitWeaponRemove(lv_u, "BunkerDepotMengskTrooperFlamethrower3");
    UnitWeaponRemove(lv_u, "BunkerDepotMengskTrooperFlamethrower4");
    UnitWeaponRemove(lv_u, "BunkerDepotMengskTrooperFlamethrower5");
    UnitWeaponRemove(lv_u, "BunkerDepotMengskTrooperFlamethrower6");
    auto9AD18BEC_val = UnitBehaviorCount(lv_u, "MengskBunkerDepotTrooperImproved");
    if (auto9AD18BEC_val == 1) {
        UnitWeaponAdd(lv_u, "BunkerDepotMengskTrooperImproved1", null);
    }
    else if (auto9AD18BEC_val == 2) {
        UnitWeaponAdd(lv_u, "BunkerDepotMengskTrooperImproved2", null);
    }
    else if (auto9AD18BEC_val == 3) {
        UnitWeaponAdd(lv_u, "BunkerDepotMengskTrooperImproved3", null);
    }
    else if (auto9AD18BEC_val == 4) {
        UnitWeaponAdd(lv_u, "BunkerDepotMengskTrooperImproved4", null);
    }
    else if (auto9AD18BEC_val == 5) {
        UnitWeaponAdd(lv_u, "BunkerDepotMengskTrooperImproved5", null);
    }
    else if (auto9AD18BEC_val == 6) {
        UnitWeaponAdd(lv_u, "BunkerDepotMengskTrooperImproved6", null);
    }
    else {
    }
    auto925547BE_val = UnitBehaviorCount(lv_u, "MengskBunkerDepotTrooperAA");
    if (auto925547BE_val == 1) {
        UnitWeaponAdd(lv_u, "BunkerDepotMengskTrooperAA1", null);
    }
    else if (auto925547BE_val == 2) {
        UnitWeaponAdd(lv_u, "BunkerDepotMengskTrooperAA2", null);
    }
    else if (auto925547BE_val == 3) {
        UnitWeaponAdd(lv_u, "BunkerDepotMengskTrooperAA3", null);
    }
    else if (auto925547BE_val == 4) {
        UnitWeaponAdd(lv_u, "BunkerDepotMengskTrooperAA4", null);
    }
    else if (auto925547BE_val == 5) {
        UnitWeaponAdd(lv_u, "BunkerDepotMengskTrooperAA5", null);
    }
    else if (auto925547BE_val == 6) {
        UnitWeaponAdd(lv_u, "BunkerDepotMengskTrooperAA6", null);
    }
    else {
    }
    auto62A31261_val = UnitBehaviorCount(lv_u, "MengskBunkerDepotTrooperFlamethrower");
    if (auto62A31261_val == 1) {
        UnitWeaponAdd(lv_u, "BunkerDepotMengskTrooperFlamethrower1", null);
    }
    else if (auto62A31261_val == 2) {
        UnitWeaponAdd(lv_u, "BunkerDepotMengskTrooperFlamethrower2", null);
    }
    else if (auto62A31261_val == 3) {
        UnitWeaponAdd(lv_u, "BunkerDepotMengskTrooperFlamethrower3", null);
    }
    else if (auto62A31261_val == 4) {
        UnitWeaponAdd(lv_u, "BunkerDepotMengskTrooperFlamethrower4", null);
    }
    else if (auto62A31261_val == 5) {
        UnitWeaponAdd(lv_u, "BunkerDepotMengskTrooperFlamethrower5", null);
    }
    else if (auto62A31261_val == 6) {
        UnitWeaponAdd(lv_u, "BunkerDepotMengskTrooperFlamethrower6", null);
    }
    else {
    }
    auto84311E48_val = (UnitBehaviorCount(lv_u, "MengskBunkerDepotTrooper") + UnitBehaviorCount(lv_u, "MengskBunkerDepotTrooperAA"));
    if (auto84311E48_val == 1) {
        UnitWeaponAdd(lv_u, "BunkerDepotMengskTrooper1", null);
    }
    else if (auto84311E48_val == 2) {
        UnitWeaponAdd(lv_u, "BunkerDepotMengskTrooper2", null);
    }
    else if (auto84311E48_val == 3) {
        UnitWeaponAdd(lv_u, "BunkerDepotMengskTrooper3", null);
    }
    else if (auto84311E48_val == 4) {
        UnitWeaponAdd(lv_u, "BunkerDepotMengskTrooper4", null);
    }
    else if (auto84311E48_val == 5) {
        UnitWeaponAdd(lv_u, "BunkerDepotMengskTrooper5", null);
    }
    else if (auto84311E48_val == 6) {
        UnitWeaponAdd(lv_u, "BunkerDepotMengskTrooper6", null);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_MengskBunkerDepotWeapon_Init () {
    lib1DE23868_gt_MengskBunkerDepotWeapon = TriggerCreate("lib1DE23868_gt_MengskBunkerDepotWeapon_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_MengskBunkerDepotWeapon, c_playerAny, "MengskBunkerDepotUpdate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mengsk Veterancy
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_MengskVeterancy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libDDE92A83_gf_PlayerAttributesUpdate(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_MengskVeterancy_Init () {
    lib1DE23868_gt_MengskVeterancy = TriggerCreate("lib1DE23868_gt_MengskVeterancy_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_MengskVeterancy, c_playerAny, "MengskVeterancyPassiveTriggerOn");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_MengskVeterancy, c_playerAny, "MengskVeterancyPassiveTriggerOff");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mengsk Veterancy Bonus
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_MengskVeterancyBonus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unitMaxXP;
    int lv_missingXP;
    int lv_workerEnergy;
    int lv_xPFinal;

    // Automatic Variable Declarations
    string autoE61853AF_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE61853AF_val = UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    if (autoE61853AF_val == "BattlecruiserMengsk") {
        lv_unitMaxXP = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MengskVeterancyBattlecruiserMengsk", "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    }
    else if (autoE61853AF_val == "GhostMengsk") {
        lv_unitMaxXP = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MengskVeterancyGhostMengsk", "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    }
    else if (autoE61853AF_val == "MarauderMengsk") {
        lv_unitMaxXP = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MengskVeterancyMarauderMengsk", "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    }
    else if (autoE61853AF_val == "SiegeTankMengsk") {
        lv_unitMaxXP = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MengskVeterancySiegeTankMengsk", "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    }
    else if (autoE61853AF_val == "SiegeTankMengskSieged") {
        lv_unitMaxXP = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MengskVeterancySiegeTankMengsk", "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    }
    else if (autoE61853AF_val == "ThorMengsk") {
        lv_unitMaxXP = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MengskVeterancyThorMengsk", "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    }
    else if (autoE61853AF_val == "ThorMengskSieged") {
        lv_unitMaxXP = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MengskVeterancyThorMengsk", "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    }
    else if (autoE61853AF_val == "VikingMengskAssault") {
        lv_unitMaxXP = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MengskVeterancyVikingMengsk", "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    }
    else if (autoE61853AF_val == "VikingMengskFighter") {
        lv_unitMaxXP = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MengskVeterancyVikingMengsk", "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    }
    else {
    }
    lv_unitMaxXP *= 3;
    lv_missingXP = (lv_unitMaxXP - FixedToInt(UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropXP, c_unitPropCurrent)));
    lv_workerEnergy = FixedToInt(UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitPropEnergy, c_unitPropCurrent));
    if ((lv_workerEnergy >= lv_missingXP)) {
        lv_xPFinal = lv_missingXP;
    }
    else {
        lv_xPFinal = lv_workerEnergy;
    }
    if ((lv_xPFinal > 0)) {
        UnitSetPropertyFixed(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)), 1), c_unitPropEnergy, (UnitGetPropertyFixed(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)), 1), c_unitPropEnergy, c_unitPropCurrent) - IntToFixed(lv_xPFinal)));
        UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropXP, (UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropXP, c_unitPropCurrent) + IntToFixed(lv_xPFinal)));
        TextTagCreate((StringToText("<s val=\"AiurChefCenterSize24Bold\"><c val=\"FFD700\">+") + IntToText(lv_xPFinal) + StringToText(" ") + StringExternal("Param/Value/lib_1DE23868_9968CB28")), 32, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), (UnitGetHeight(EventPlayerEffectUsedUnit(c_effectUnitTarget)) + 1.0), true, false, PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)));
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.5);
        TextTagSetGravity(TextTagLastCreated(), -0.75);
        TextTagSetVelocity(TextTagLastCreated(), 2.5, RandomFixed(75.0, 105.0));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_messageAreaError, StringExternal(("ERROR. Please screenshot this and send it to Tya. " + IntToString(lv_unitMaxXP) + " " + IntToString(lv_missingXP) + " " + IntToString(lv_workerEnergy) + " " + IntToString(lv_xPFinal))));
        SoundPlayForPlayer(SoundLink("UI_GenericError", -1), c_maxPlayers, PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_MengskVeterancyBonus_Init () {
    lib1DE23868_gt_MengskVeterancyBonus = TriggerCreate("lib1DE23868_gt_MengskVeterancyBonus_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_MengskVeterancyBonus, c_playerAny, "MengskVeterancyBonus");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alarak Empower Me Buff
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_AlarakEmpowerMeBuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    unitgroup autoC01966D4_g;
    int autoC01966D4_u;
    unit autoC01966D4_var;
    unitgroup auto52CA5C54_g;
    int auto52CA5C54_u;
    unit auto52CA5C54_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoC01966D4_g = UnitGroup(null, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "AlarakEmpowerMeBonusSearch", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny)), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterSummoned - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    autoC01966D4_u = UnitGroupCount(autoC01966D4_g, c_unitCountAll);
    for (;; autoC01966D4_u -= 1) {
        autoC01966D4_var = UnitGroupUnitFromEnd(autoC01966D4_g, autoC01966D4_u);
        if (autoC01966D4_var == null) { break; }
        lv_value += UnitTypeGetCost(UnitGetType(autoC01966D4_var), c_unitCostMinerals);
    }
    auto52CA5C54_g = UnitGroup(null, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "AlarakEmpowerMeBonusSearch", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny)), UnitFilter((1 << c_targetFilterMechanical), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterSummoned - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    auto52CA5C54_u = UnitGroupCount(auto52CA5C54_g, c_unitCountAll);
    for (;; auto52CA5C54_u -= 1) {
        auto52CA5C54_var = UnitGroupUnitFromEnd(auto52CA5C54_g, auto52CA5C54_u);
        if (auto52CA5C54_var == null) { break; }
        lv_value += UnitTypeGetCost(UnitGetType(auto52CA5C54_var), c_unitCostMinerals);
    }
    lv_value /= 100;
    UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitSource), "AlarakEmpowerMeBuff", -1);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitSource), "AlarakEmpowerMeBuff", EventPlayerEffectUsedUnit(c_effectUnitSource), lv_value);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_AlarakEmpowerMeBuff_Init () {
    lib1DE23868_gt_AlarakEmpowerMeBuff = TriggerCreate("lib1DE23868_gt_AlarakEmpowerMeBuff_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AlarakEmpowerMeBuff, c_playerAny, "AlarakEmpowerMeUpdateTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fenix Hero Bonuses
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_FenixHeroBonuses_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1DE23868_gf_FenixHeroBonuses(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_FenixHeroBonuses_Init () {
    lib1DE23868_gt_FenixHeroBonuses = TriggerCreate("lib1DE23868_gt_FenixHeroBonuses_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_FenixHeroBonuses, c_playerAny, "LegionnairePlace");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_FenixHeroBonuses, c_playerAny, "KaldalisPlace");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_FenixHeroBonuses, c_playerAny, "PurifierAdeptPlace");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_FenixHeroBonuses, c_playerAny, "PurifierTalisPlace");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_FenixHeroBonuses, c_playerAny, "PurifierImmortalPlace");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_FenixHeroBonuses, c_playerAny, "TaldarinPlace");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_FenixHeroBonuses, c_playerAny, "PurifierScoutPlace");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_FenixHeroBonuses, c_playerAny, "MojoPlace");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_FenixHeroBonuses, c_playerAny, "PurifierColossusFenixPlace");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_FenixHeroBonuses, c_playerAny, "WarbringerPlace");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_FenixHeroBonuses, c_playerAny, "PurifierCarrierPlace");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_FenixHeroBonuses, c_playerAny, "ClolarionPlace");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stetmann Baneling Energy Damage
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_StetmannBanelingEnergyDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_baneling;
    fixed lv_energy;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_baneling = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_energy = UnitGetPropertyFixed(lv_baneling, c_unitPropEnergy, c_unitPropCurrent);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitDamage(lv_baneling, "BanelingExplodeLargeSearchDamageStetmann", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_energy);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_StetmannBanelingEnergyDamage_Init () {
    lib1DE23868_gt_StetmannBanelingEnergyDamage = TriggerCreate("lib1DE23868_gt_StetmannBanelingEnergyDamage_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_StetmannBanelingEnergyDamage, c_playerAny, "BanelingStetmannDamageTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZeratulDisruptorTriggersEnable
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_ZeratulDisruptorTriggersEnable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto8F19F4C5_g;
    int auto8F19F4C5_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(lib1DE23868_gt_CM_Zeratul_PurificationNova_MainImpact, true);
    TriggerEnable(lib1DE23868_gt_CM_Zeratul_PurificationNova_Finale, true);
    TriggerEnable(lib1DE23868_gt_CM_Zeratul_PurificationNova_Create, true);
    TriggerEnable(lib1DE23868_gt_ZeratulDisruptorTriggersEnable, false);
    auto8F19F4C5_g = PlayerGroupAll();
    auto8F19F4C5_var = -1;
    while (true) {
        auto8F19F4C5_var = PlayerGroupNextPlayer(auto8F19F4C5_g, auto8F19F4C5_var);
        if (auto8F19F4C5_var < 0) { break; }
        CatalogFieldValueSet(c_gameCatalogEffect, "ZeratulDisruptorIsCreated", "Chance", auto8F19F4C5_var, IntToString(0));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_ZeratulDisruptorTriggersEnable_Init () {
    lib1DE23868_gt_ZeratulDisruptorTriggersEnable = TriggerCreate("lib1DE23868_gt_ZeratulDisruptorTriggersEnable_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_ZeratulDisruptorTriggersEnable, c_playerAny, "ZeratulDisruptorTriggersEnable");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_PurificationNova_Finale
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_CM_Zeratul_PurificationNova_Finale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;
    point lv_targetPoint;
    point lv_spawnPoint;
    point lv_goal;
    fixed lv_mainAngel;
    unit lv_purifier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_u) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_purifier = UnitBehaviorEffectUnit(lv_u, "ZeratulPurificationNovaCasterFinder", c_effectUnitCaster, 0);
    if ((UnitIsValid(lv_purifier) == true) && (TechTreeUpgradeCount(lv_p, "ZeratulArtifactTier3", c_techCountCompleteOnly) >= 1)) {
        lv_spawnPoint = UnitGetPosition(lv_u);
        lv_goal = UnitGetGoalPosition(lv_u);
        if ((lv_spawnPoint != lv_goal)) {
            lv_mainAngel = AngleBetweenPoints(lv_spawnPoint, lv_goal);
        }
        else {
            lv_mainAngel = AngleBetweenPoints(UnitGetPosition(lv_purifier), lv_spawnPoint);
        }
        lv_targetPoint = PointWithOffsetPolar(lv_spawnPoint, 15.0, lv_mainAngel);
        lib1DE23868_gf_CM_Zeratul_PurificationNova_SpawnSmallOrb(lv_purifier, lv_spawnPoint, lv_targetPoint);
        lv_targetPoint = PointWithOffsetPolar(lv_spawnPoint, 15.0, (lv_mainAngel + 45.0));
        lib1DE23868_gf_CM_Zeratul_PurificationNova_SpawnSmallOrb(lv_purifier, lv_spawnPoint, lv_targetPoint);
        lv_targetPoint = PointWithOffsetPolar(lv_spawnPoint, 15.0, (lv_mainAngel - 45.0));
        lib1DE23868_gf_CM_Zeratul_PurificationNova_SpawnSmallOrb(lv_purifier, lv_spawnPoint, lv_targetPoint);
    }

    UnitKill(lv_u);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_CM_Zeratul_PurificationNova_Finale_Init () {
    lib1DE23868_gt_CM_Zeratul_PurificationNova_Finale = TriggerCreate("lib1DE23868_gt_CM_Zeratul_PurificationNova_Finale_Func");
    TriggerEnable(lib1DE23868_gt_CM_Zeratul_PurificationNova_Finale, false);
    TriggerAddEventUnitBehaviorChange(lib1DE23868_gt_CM_Zeratul_PurificationNova_Finale, null, "ZeratulPurificationNovaTargettedTarget", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_PurificationNova_Create
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_CM_Zeratul_PurificationNova_Create_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;
    unit lv_purifier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_u) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_purifier = UnitBehaviorEffectUnit(lv_u, "ZeratulPurificationNovaTargettedTarget", c_effectUnitCaster, 0);
    UnitBehaviorAdd(lv_u, "ZeratulPurificationNovaCasterFinder", lv_purifier, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_CM_Zeratul_PurificationNova_Create_Init () {
    lib1DE23868_gt_CM_Zeratul_PurificationNova_Create = TriggerCreate("lib1DE23868_gt_CM_Zeratul_PurificationNova_Create_Func");
    TriggerEnable(lib1DE23868_gt_CM_Zeratul_PurificationNova_Create, false);
    TriggerAddEventUnitBehaviorChange(lib1DE23868_gt_CM_Zeratul_PurificationNova_Create, null, "ZeratulPurificationNovaTargettedTarget", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_PurificationNova_MainImpact
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_CM_Zeratul_PurificationNova_MainImpact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_target;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((lv_u != lv_target))) {
            return false;
        }

        if (!((UnitIsValid(lv_u) == true))) {
            return false;
        }

        if (!((UnitIsValid(lv_target) == true))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(lv_p, "ZeratulArtifactTier3", c_techCountCompleteOnly) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_target, "ZeratulPurificationNovaTargetedMainTargetImmunity", lv_u, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_CM_Zeratul_PurificationNova_MainImpact_Init () {
    lib1DE23868_gt_CM_Zeratul_PurificationNova_MainImpact = TriggerCreate("lib1DE23868_gt_CM_Zeratul_PurificationNova_MainImpact_Func");
    TriggerEnable(lib1DE23868_gt_CM_Zeratul_PurificationNova_MainImpact, false);
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_CM_Zeratul_PurificationNova_MainImpact, c_playerAny, "ZeratulPurificationNovaTargettedSearchSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Passive Meta Experience
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_PassiveMetaExperience_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoDC1CC748_g;
    int autoDC1CC748_var;

    // Conditions
    if (testConds) {
        if (!((libDDE92A83_gv_gameOver == false))) {
            return false;
        }

        if (!((GameIsMissionTimePaused() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDC1CC748_g = PlayerGroupActive();
    autoDC1CC748_var = -1;
    while (true) {
        autoDC1CC748_var = PlayerGroupNextPlayer(autoDC1CC748_g, autoDC1CC748_var);
        if (autoDC1CC748_var < 0) { break; }
        if ((lib29554E00_gf_PlayerIsAFK(autoDC1CC748_var) == false)) {
            lib39886FE6_gf_MasteryBarAwardExperience(autoDC1CC748_var, (TechTreeUpgradeCount(autoDC1CC748_var, "MasteryPassiveExperience", c_techCountCompleteOnly) + TechTreeUpgradeCount(autoDC1CC748_var, "MasteryPassiveExperienceExtra", c_techCountCompleteOnly) + (TechTreeUpgradeCount(autoDC1CC748_var, "MasteryPassiveExperienceSmall", c_techCountCompleteOnly) / 5) + (TechTreeUpgradeCount(autoDC1CC748_var, "MasteryPassiveExperienceSmallx10", c_techCountCompleteOnly) * 2)), false, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_PassiveMetaExperience_Init () {
    lib1DE23868_gt_PassiveMetaExperience = TriggerCreate("lib1DE23868_gt_PassiveMetaExperience_Func");
    TriggerEnable(lib1DE23868_gt_PassiveMetaExperience, false);
    TriggerAddEventTimePeriodic(lib1DE23868_gt_PassiveMetaExperience, 1.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kitchen Sink Repick
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_KitchenSinkRepick_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringToText("<c val=\"#ColorAttackInfo\">") + StringExternal("Param/Value/lib_1DE23868_820A8946") + StringToText("</c> ")));
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "IncludeStandardRacesInCommanderSelect", 1);
    libDDE92A83_gf_ResetCommander(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_KitchenSinkRepick_Init () {
    lib1DE23868_gt_KitchenSinkRepick = TriggerCreate("lib1DE23868_gt_KitchenSinkRepick_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_KitchenSinkRepick, c_playerAny, "KitchenSinkRaceSelect");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Trophy Birth
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_TrophyBirth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoA2D887F4_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA2D887F4_val = EventPlayerEffectUsed();
    if (autoA2D887F4_val == "TrophyProtossGamesUpdateTrigger") {
        if ((PlayerRace(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)) == "Prot")) {
            UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitSource), c_unitPropXP, IntToFixed(libNtve_gf_ArithmeticIntClamp((PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), "BankDesertStrikeProtossGames") - 1), 0, 500000)));
        }
        else {
            UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitSource), c_unitPropXP, IntToFixed(libNtve_gf_ArithmeticIntClamp(PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), "BankDesertStrikeProtossGames"), 0, 500000)));
        }
    }
    else if (autoA2D887F4_val == "TrophyTerranGamesUpdateTrigger") {
        if ((PlayerRace(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)) == "Terr")) {
            UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitSource), c_unitPropXP, IntToFixed(libNtve_gf_ArithmeticIntClamp((PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), "BankDesertStrikeTerranGames") - 1), 0, 500000)));
        }
        else {
            UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitSource), c_unitPropXP, IntToFixed(libNtve_gf_ArithmeticIntClamp(PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), "BankDesertStrikeTerranGames"), 0, 500000)));
        }
    }
    else if (autoA2D887F4_val == "TrophyZergGamesUpdateTrigger") {
        if ((PlayerRace(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)) == "Zerg")) {
            UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitSource), c_unitPropXP, IntToFixed(libNtve_gf_ArithmeticIntClamp((PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), "BankDesertStrikeZergGames") - 1), 0, 500000)));
        }
        else {
            UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitSource), c_unitPropXP, IntToFixed(libNtve_gf_ArithmeticIntClamp(PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), "BankDesertStrikeZergGames"), 0, 500000)));
        }
    }
    else if (autoA2D887F4_val == "TrophyProtossVictoriesUpdateTrigger") {
        UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitSource), c_unitPropXP, IntToFixed(libNtve_gf_ArithmeticIntClamp(PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), "BankDesertStrikeProtossVictories"), 0, 500000)));
    }
    else if (autoA2D887F4_val == "TrophyTerranVictoriesUpdateTrigger") {
        UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitSource), c_unitPropXP, IntToFixed(libNtve_gf_ArithmeticIntClamp(PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), "BankDesertStrikeTerranVictories"), 0, 500000)));
    }
    else if (autoA2D887F4_val == "TrophyZergVictoriesUpdateTrigger") {
        UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitSource), c_unitPropXP, IntToFixed(libNtve_gf_ArithmeticIntClamp(PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), "BankDesertStrikeZergVictories"), 0, 500000)));
    }
    else if (autoA2D887F4_val == "TrophyTotalKillsUpdateTrigger") {
        UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitSource), c_unitPropXP, IntToFixed(libNtve_gf_ArithmeticIntClamp(PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), "BankDesertStrikeTotalKills"), 0, 500000)));
    }
    else if (autoA2D887F4_val == "TrophyTotalLossesUpdateTrigger") {
        UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitSource), c_unitPropXP, IntToFixed(libNtve_gf_ArithmeticIntClamp(PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), "BankDesertStrikeTotalLosses"), 0, 500000)));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_TrophyBirth_Init () {
    lib1DE23868_gt_TrophyBirth = TriggerCreate("lib1DE23868_gt_TrophyBirth_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TrophyBirth, c_playerAny, "TrophyProtossGamesUpdateTrigger");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TrophyBirth, c_playerAny, "TrophyProtossVictoriesUpdateTrigger");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TrophyBirth, c_playerAny, "TrophyTerranGamesUpdateTrigger");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TrophyBirth, c_playerAny, "TrophyTerranVictoriesUpdateTrigger");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TrophyBirth, c_playerAny, "TrophyTotalKillsUpdateTrigger");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TrophyBirth, c_playerAny, "TrophyTotalLossesUpdateTrigger");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TrophyBirth, c_playerAny, "TrophyZergGamesUpdateTrigger");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TrophyBirth, c_playerAny, "TrophyZergVictoriesUpdateTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kicker Minerals
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_KickerMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoDB6A9442_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoDB6A9442_val = EventPlayerEffectUsed();
    if (autoDB6A9442_val == "RaynorSupplyDropModify") {
        libDDE92A83_gf_KickerMinerals(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "RaynorSupplyDropModify", "Resources[" + IntToString(0) + "]", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), (1.0 + UnitGetHeight(EventPlayerEffectUsedUnit(c_effectUnitCaster))), false);
    }
    else if (autoDB6A9442_val == "AscendantStarlightRitualofBindingSetCast") {
        libDDE92A83_gf_KickerMinerals(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "AscendantStarlightRitualofBindingRefund", "Resources[" + IntToString(0) + "]", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), EventPlayerEffectUsedPoint(c_effectLocationCasterPoint), EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), (1.0 + UnitGetHeight(EventPlayerEffectUsedUnit(c_effectUnitCaster))), false);
    }
    else {
    }
    libDDE92A83_gf_SandboxModeInfiniteMinerals();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_KickerMinerals_Init () {
    lib1DE23868_gt_KickerMinerals = TriggerCreate("lib1DE23868_gt_KickerMinerals_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_KickerMinerals, c_playerAny, "RaynorSupplyDropModify");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_KickerMinerals, c_playerAny, "AscendantStarlightRitualofBindingSetCast");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Staging Area Worker Zap
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_StagingAreaWorkerZap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "UnitDepartCrystal", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    Wait(0.5, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)), "PingObjective", libDDE92A83_gv_playerOrigin[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)], ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0, 270.0);
    UnitSetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget), libDDE92A83_gv_playerOrigin[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)], false);
    UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "UnitDepartCrystal", 1);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "UnitBirthCrystal", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_StagingAreaWorkerZap_Init () {
    lib1DE23868_gt_StagingAreaWorkerZap = TriggerCreate("lib1DE23868_gt_StagingAreaWorkerZap_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_StagingAreaWorkerZap, c_playerAny, "StagingAreaWorkerZap");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Minerals
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_ObjectiveMinerals_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_icon;
    const int lv_amount = 125;

    // Automatic Variable Declarations
    playergroup autoE0E2C035_g;
    int autoE0E2C035_var;

    // Variable Initialization
    lv_icon = (CatalogFieldValueGet(c_gameCatalogActor, StringSub(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)), "Name", c_playerAny), 11, 99), "UnitIcon", EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)));

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.75, c_timeGame);
    SoundPlayForPlayer(SoundLink("UI_Game_Ping_Golem_Captured_Ally", 0), c_maxPlayers, libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Enemy, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)), 100.0, 0.0);
    autoE0E2C035_g = libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Enemy, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource));
    autoE0E2C035_var = -1;
    while (true) {
        autoE0E2C035_var = PlayerGroupNextPlayer(autoE0E2C035_g, autoE0E2C035_var);
        if (autoE0E2C035_var < 0) { break; }
        libDDE92A83_gf_KickerMinerals(lv_amount, EventPlayerEffectUsedPoint(c_effectLocationSourcePoint), autoE0E2C035_var, (3.0 + UnitGetHeight(EventPlayerEffectUsedUnit(c_effectUnitSource))), true);
        UIAlertPoint("GenericAlert8", autoE0E2C035_var, (StringToText("<s val=\"StarlightText\"><c val=\"40FF40\">") + StringExternal("UI/Reward_Colon") + StringToText("</c> +") + IntToText(lv_amount) + StringToText(" ") + StringExternal("UI/Minerals")), lv_icon, EventPlayerEffectUsedPoint(c_effectLocationSourcePoint));
        lib1DE23868_gf_MengskAwardExperienceSplit(autoE0E2C035_var, lv_amount);
    }
    libDDE92A83_gf_SandboxModeInfiniteMinerals();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_ObjectiveMinerals_Init () {
    lib1DE23868_gt_ObjectiveMinerals = TriggerCreate("lib1DE23868_gt_ObjectiveMinerals_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_ObjectiveMinerals, c_playerAny, "ObjectiveMineralsDeathTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deselect Source
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_DeselectSource_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoAC2190AD_g;
    int autoAC2190AD_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoAC2190AD_g = PlayerGroupActive();
    autoAC2190AD_var = -1;
    while (true) {
        autoAC2190AD_var = PlayerGroupNextPlayer(autoAC2190AD_g, autoAC2190AD_var);
        if (autoAC2190AD_var < 0) { break; }
        UnitSelect(EventPlayerEffectUsedUnit(c_effectUnitSource), autoAC2190AD_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_DeselectSource_Init () {
    lib1DE23868_gt_DeselectSource = TriggerCreate("lib1DE23868_gt_DeselectSource_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_DeselectSource, c_playerAny, "DeselectSourceTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave Unit Expire
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_WaveUnitExpire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerScoreValueSetFromInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "TotalUnitsExpiredCount", (PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "TotalUnitsExpiredCount") + 1));
    PlayerScoreValueSetFromInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "TotalUnitsExpiredValue", (PlayerScoreValueGetAsInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "TotalUnitsExpiredValue") + CatalogFieldValueGetAsInt(c_gameCatalogUnit, EventPlayerEffectUsedUnitType(c_effectUnitSource), "CostResource[" + IntToString(0) + "]", EventPlayerEffectUsedUnitOwner(c_effectPlayerSource))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_WaveUnitExpire_Init () {
    lib1DE23868_gt_WaveUnitExpire = TriggerCreate("lib1DE23868_gt_WaveUnitExpire_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_WaveUnitExpire, c_playerAny, "WaveUnitTimedLifeFate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Persona non Grata
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_PersonanonGrata_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto77473D9C_g;
    int auto77473D9C_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(PlayerGroupActive()) > 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto77473D9C_g = PlayerGroupActive();
    auto77473D9C_var = -1;
    while (true) {
        auto77473D9C_var = PlayerGroupNextPlayer(auto77473D9C_g, auto77473D9C_var);
        if (auto77473D9C_var < 0) { break; }
        if ((libDDE92A83_gf_PersonanonGrata(auto77473D9C_var) == true)) {
            GameOver(auto77473D9C_var, c_gameOverDefeat, false, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_PersonanonGrata_Init () {
    lib1DE23868_gt_PersonanonGrata = TriggerCreate("lib1DE23868_gt_PersonanonGrata_Func");
    TriggerAddEventTimeElapsed(lib1DE23868_gt_PersonanonGrata, RandomFixed(300.0, 3600.0), c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect Complete
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_EffectComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libDDE92A83_gf_PlayerAttributesUpdate(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_EffectComplete_Init () {
    lib1DE23868_gt_EffectComplete = TriggerCreate("lib1DE23868_gt_EffectComplete_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_EffectComplete, c_playerAny, "HornerAssaultGalleonDroneHangarSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rescue Strike Use
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_RescueStrikeUse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityShow(EventPlayerEffectUsedUnit(c_effectUnitCaster), "RescueStrike", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_RescueStrikeUse_Init () {
    lib1DE23868_gt_RescueStrikeUse = TriggerCreate("lib1DE23868_gt_RescueStrikeUse_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_RescueStrikeUse, c_playerAny, "RescueStrikeSetCast");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker Swap Ground
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_WorkerSwapGround_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogUnit, EventPlayerEffectUsedUnitType(c_effectUnitCaster), "Mover", EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), "Ground");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_WorkerSwapGround_Init () {
    lib1DE23868_gt_WorkerSwapGround = TriggerCreate("lib1DE23868_gt_WorkerSwapGround_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_WorkerSwapGround, c_playerAny, "WorkerSwapAlertGround");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker Swap Air
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_WorkerSwapAir_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogUnit, EventPlayerEffectUsedUnitType(c_effectUnitCaster), "Mover", EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), "Fly");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_WorkerSwapAir_Init () {
    lib1DE23868_gt_WorkerSwapAir = TriggerCreate("lib1DE23868_gt_WorkerSwapAir_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_WorkerSwapAir, c_playerAny, "WorkerSwapAlertAir");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Award - Kerrigan Assimilate
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_MineralAwardKerriganAssimilate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libDDE92A83_gf_KickerMinerals(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "KerriganAssimilateModify", "Resources[" + IntToString(0) + "]", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), EventPlayerEffectUsedPoint(c_effectLocationSourcePoint), EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), (3.0 + UnitGetHeight(EventPlayerEffectUsedUnit(c_effectUnitSource))), false);
    libDDE92A83_gf_SandboxModeInfiniteMinerals();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_MineralAwardKerriganAssimilate_Init () {
    lib1DE23868_gt_MineralAwardKerriganAssimilate = TriggerCreate("lib1DE23868_gt_MineralAwardKerriganAssimilate_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_MineralAwardKerriganAssimilate, c_playerAny, "KerriganAssimilateModify");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Award - Hybrid Merc
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_MineralAwardHybridMerc_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libDDE92A83_gf_KickerMinerals(CatalogFieldValueGetAsInt(c_gameCatalogEffect, EventPlayerEffectUsed(), "Resources[" + IntToString(0) + "]", c_playerAny), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), (3.0 + UnitGetHeight(EventPlayerEffectUsedUnit(c_effectUnitTarget))), false);
    libDDE92A83_gf_SandboxModeInfiniteMinerals();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_MineralAwardHybridMerc_Init () {
    lib1DE23868_gt_MineralAwardHybridMerc = TriggerCreate("lib1DE23868_gt_MineralAwardHybridMerc_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_MineralAwardHybridMerc, c_playerAny, "HybridDestroyerPlaceModify");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_MineralAwardHybridMerc, c_playerAny, "HybridBehemothPlaceModify");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_MineralAwardHybridMerc, c_playerAny, "HybridDominatorPlaceModify");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_MineralAwardHybridMerc, c_playerAny, "HybridNemesisPlaceModify");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_MineralAwardHybridMerc, c_playerAny, "HybridReaverPlaceModify");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Alert - Minor Death
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_ObjectiveAlertMinorDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_icon;

    // Automatic Variable Declarations
    playergroup auto96E02B55_g;
    int auto96E02B55_var;
    playergroup autoFD7D35EE_g;
    int autoFD7D35EE_var;

    // Variable Initialization
    lv_icon = (CatalogFieldValueGet(c_gameCatalogActor, StringSub(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)), "Name", c_playerAny), 11, 99), "UnitIcon", EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)));

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("UI_Alert_Positive", -1), c_maxPlayers, libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Enemy, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("UI_Alert_Negative", -1), c_maxPlayers, libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Ally, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Enemy, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)), "PingBonus", EventPlayerEffectUsedPoint(c_effectLocationSourcePoint), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 6.0, 270.0);
    libNtve_gf_CreatePingFacingAngle(libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Ally, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)), "PingBonus", EventPlayerEffectUsedPoint(c_effectLocationSourcePoint), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0, 270.0);
    auto96E02B55_g = libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Enemy, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource));
    auto96E02B55_var = -1;
    while (true) {
        auto96E02B55_var = PlayerGroupNextPlayer(auto96E02B55_g, auto96E02B55_var);
        if (auto96E02B55_var < 0) { break; }
        UIAlertPoint("GenericAlert8", auto96E02B55_var, (StringToText("<s val=\"StarlightText\"><c val=\"40FF40\">") + UnitTypeGetName(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource))) + StringToText(" ") + StringExternal("UI/Razed")), lv_icon, EventPlayerEffectUsedPoint(c_effectLocationSourcePoint));
    }
    autoFD7D35EE_g = libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Ally, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource));
    autoFD7D35EE_var = -1;
    while (true) {
        autoFD7D35EE_var = PlayerGroupNextPlayer(autoFD7D35EE_g, autoFD7D35EE_var);
        if (autoFD7D35EE_var < 0) { break; }
        UIAlertPoint("GenericAlert8", autoFD7D35EE_var, (StringToText("<s val=\"StarlightText\"><c val=\"FF4040\">") + UnitTypeGetName(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource))) + StringToText(":</c> ") + StringExternal("UI/Lost")), lv_icon, EventPlayerEffectUsedPoint(c_effectLocationSourcePoint));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_ObjectiveAlertMinorDeath_Init () {
    lib1DE23868_gt_ObjectiveAlertMinorDeath = TriggerCreate("lib1DE23868_gt_ObjectiveAlertMinorDeath_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_ObjectiveAlertMinorDeath, c_playerAny, "ObjectiveAlertMinorDeathTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Alert - 75% Life
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_ObjectiveAlert75Life_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_icon;

    // Automatic Variable Declarations
    playergroup autoD44BA884_g;
    int autoD44BA884_var;
    playergroup autoC203877F_g;
    int autoC203877F_var;

    // Variable Initialization
    lv_icon = (CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)), "UnitIcon", c_playerAny));

    // Actions
    if (!runActions) {
        return true;
    }

    autoD44BA884_g = libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Enemy, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource));
    autoD44BA884_var = -1;
    while (true) {
        autoD44BA884_var = PlayerGroupNextPlayer(autoD44BA884_g, autoD44BA884_var);
        if (autoD44BA884_var < 0) { break; }
        UIAlertPoint("GenericAlert8", autoD44BA884_var, (StringToText("<s val=\"StarlightText\"><c val=\"40FF40\">") + StringExternal("UI/BattleLobbyTeamPanel/EnemyTeam") + StringToText(" ") + UnitTypeGetName(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource))) + StringToText(":</c> ") + IntToText(75) + StringToText("% ") + StringExternal("e_gameUIStringLife")), lv_icon, EventPlayerEffectUsedPoint(c_effectLocationSourcePoint));
    }
    autoC203877F_g = libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Ally, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource));
    autoC203877F_var = -1;
    while (true) {
        autoC203877F_var = PlayerGroupNextPlayer(autoC203877F_g, autoC203877F_var);
        if (autoC203877F_var < 0) { break; }
        UIAlertPoint("GenericAlert8", autoC203877F_var, (StringToText("<s val=\"StarlightText\"><c val=\"FF4040\">") + StringExternal("UI/BattleLobbyTeamPanel/YourTeam") + StringToText(" ") + UnitTypeGetName(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource))) + StringToText(":</c> ") + IntToText(75) + StringToText("% ") + StringExternal("e_gameUIStringLife")), lv_icon, EventPlayerEffectUsedPoint(c_effectLocationSourcePoint));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_ObjectiveAlert75Life_Init () {
    lib1DE23868_gt_ObjectiveAlert75Life = TriggerCreate("lib1DE23868_gt_ObjectiveAlert75Life_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_ObjectiveAlert75Life, c_playerAny, "ObjectiveAlert75LifeTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Alert - 50% Life
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_ObjectiveAlert50Life_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_icon;

    // Automatic Variable Declarations
    playergroup auto57330D3F_g;
    int auto57330D3F_var;
    playergroup auto49C406B7_g;
    int auto49C406B7_var;

    // Variable Initialization
    lv_icon = (CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)), "UnitIcon", c_playerAny));

    // Actions
    if (!runActions) {
        return true;
    }

    auto57330D3F_g = libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Enemy, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource));
    auto57330D3F_var = -1;
    while (true) {
        auto57330D3F_var = PlayerGroupNextPlayer(auto57330D3F_g, auto57330D3F_var);
        if (auto57330D3F_var < 0) { break; }
        UIAlertPoint("GenericAlert8", auto57330D3F_var, (StringToText("<s val=\"StarlightText\"><c val=\"40FF40\">") + StringExternal("UI/BattleLobbyTeamPanel/EnemyTeam") + StringToText(" ") + UnitTypeGetName(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource))) + StringToText(":</c> ") + IntToText(50) + StringToText("% ") + StringExternal("e_gameUIStringLife")), lv_icon, EventPlayerEffectUsedPoint(c_effectLocationSourcePoint));
    }
    auto49C406B7_g = libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Ally, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource));
    auto49C406B7_var = -1;
    while (true) {
        auto49C406B7_var = PlayerGroupNextPlayer(auto49C406B7_g, auto49C406B7_var);
        if (auto49C406B7_var < 0) { break; }
        UIAlertPoint("GenericAlert8", auto49C406B7_var, (StringToText("<s val=\"StarlightText\"><c val=\"FF4040\">") + StringExternal("UI/BattleLobbyTeamPanel/YourTeam") + StringToText(" ") + UnitTypeGetName(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource))) + StringToText(":</c> ") + IntToText(50) + StringToText("% ") + StringExternal("e_gameUIStringLife")), lv_icon, EventPlayerEffectUsedPoint(c_effectLocationSourcePoint));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_ObjectiveAlert50Life_Init () {
    lib1DE23868_gt_ObjectiveAlert50Life = TriggerCreate("lib1DE23868_gt_ObjectiveAlert50Life_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_ObjectiveAlert50Life, c_playerAny, "ObjectiveAlert50LifeTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Alert - 25% Life
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_ObjectiveAlert25Life_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_icon;

    // Automatic Variable Declarations
    playergroup auto76E5305F_g;
    int auto76E5305F_var;
    playergroup autoD5EF27E6_g;
    int autoD5EF27E6_var;

    // Variable Initialization
    lv_icon = (CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)), "UnitIcon", c_playerAny));

    // Actions
    if (!runActions) {
        return true;
    }

    auto76E5305F_g = libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Enemy, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource));
    auto76E5305F_var = -1;
    while (true) {
        auto76E5305F_var = PlayerGroupNextPlayer(auto76E5305F_g, auto76E5305F_var);
        if (auto76E5305F_var < 0) { break; }
        UIAlertPoint("GenericAlert8", auto76E5305F_var, (StringToText("<s val=\"StarlightText\"><c val=\"40FF40\">") + StringExternal("UI/BattleLobbyTeamPanel/EnemyTeam") + StringToText(" ") + UnitTypeGetName(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource))) + StringToText(":</c> ") + IntToText(25) + StringToText("% ") + StringExternal("e_gameUIStringLife")), lv_icon, EventPlayerEffectUsedPoint(c_effectLocationSourcePoint));
    }
    autoD5EF27E6_g = libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Ally, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource));
    autoD5EF27E6_var = -1;
    while (true) {
        autoD5EF27E6_var = PlayerGroupNextPlayer(autoD5EF27E6_g, autoD5EF27E6_var);
        if (autoD5EF27E6_var < 0) { break; }
        UIAlertPoint("GenericAlert8", autoD5EF27E6_var, (StringToText("<s val=\"StarlightText\"><c val=\"FF4040\">") + StringExternal("UI/BattleLobbyTeamPanel/YourTeam") + StringToText(" ") + UnitTypeGetName(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource))) + StringToText(":</c> ") + IntToText(25) + StringToText("% ") + StringExternal("e_gameUIStringLife")), lv_icon, EventPlayerEffectUsedPoint(c_effectLocationSourcePoint));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_ObjectiveAlert25Life_Init () {
    lib1DE23868_gt_ObjectiveAlert25Life = TriggerCreate("lib1DE23868_gt_ObjectiveAlert25Life_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_ObjectiveAlert25Life, c_playerAny, "ObjectiveAlert25LifeTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Skin Save
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_HeroSkinSave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    string autoBE31D26C_val;

    // Variable Initialization
    lv_unitType = (EventPlayerEffectUsedUnitType(c_effectUnitCaster));

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "ImportantHero") == true) && (UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "UnitSpawner") == true))) {
        autoBE31D26C_val = EventPlayerEffectUsedUnitType(c_effectUnitCaster);
        if (autoBE31D26C_val == "FenixFlyer") {
            lv_unitType = CatalogFieldValueGet(c_gameCatalogUnit, "FenixPraetor", "ReviveType", c_playerAny);
        }
        else if (autoBE31D26C_val == "FenixWalker") {
            lv_unitType = CatalogFieldValueGet(c_gameCatalogUnit, "FenixPraetor", "ReviveType", c_playerAny);
        }
        else {
            lv_unitType = (EventPlayerEffectUsedUnitType(c_effectUnitCaster));
        }
        libDBB0BE4A_gf_SettingsSaveString(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), (lv_unitType + "Skin"), libDDE92A83_gf_UnitSkin(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
        libDBB0BE4A_gf_SettingsSave(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_HeroSkinSave_Init () {
    lib1DE23868_gt_HeroSkinSave = TriggerCreate("lib1DE23868_gt_HeroSkinSave_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_HeroSkinSave, c_playerAny, "SkinBiomassSetStart");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_HeroSkinSave, c_playerAny, "SkinCybrosSetStart");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_HeroSkinSave, c_playerAny, "SkinHighlightSetStart");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_HeroSkinSave, c_playerAny, "SkinHologramSetStart");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_HeroSkinSave, c_playerAny, "SkinJadeSetStart");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_HeroSkinSave, c_playerAny, "SkinMineralSetStart");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_HeroSkinSave, c_playerAny, "SkinPsionicSetStart");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_HeroSkinSave, c_playerAny, "SkinRedstoneSetStart");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_HeroSkinSave, c_playerAny, "SkinSepiaSetStart");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_HeroSkinSave, c_playerAny, "SkinShadowSetStart");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_HeroSkinSave, c_playerAny, "SkinSnowSetStart");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_HeroSkinSave, c_playerAny, "SkinSolariteSetStart");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_HeroSkinSave, c_playerAny, "SkinVoidSetStart");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_HeroSkinSave, c_playerAny, "SkinRemoveAll");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Skin Load
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_HeroSkinLoad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    string auto841A336B_val;

    // Variable Initialization
    lv_unitType = (EventPlayerEffectUsedUnitType(c_effectUnitCaster));

    // Actions
    if (!runActions) {
        return true;
    }

    auto841A336B_val = EventPlayerEffectUsedUnitType(c_effectUnitCaster);
    if (auto841A336B_val == "FenixFlyer") {
        lv_unitType = CatalogFieldValueGet(c_gameCatalogUnit, "FenixPraetor", "ReviveType", c_playerAny);
    }
    else if (auto841A336B_val == "FenixWalker") {
        lv_unitType = CatalogFieldValueGet(c_gameCatalogUnit, "FenixPraetor", "ReviveType", c_playerAny);
    }
    else {
        lv_unitType = (EventPlayerEffectUsedUnitType(c_effectUnitCaster));
    }
    if ((StringLength(libDBB0BE4A_gf_SettingsLoadString(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), (lv_unitType + "Skin"))) > 0)) {
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), (libDBB0BE4A_gf_SettingsLoadString(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), (lv_unitType + "Skin"))), EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_HeroSkinLoad_Init () {
    lib1DE23868_gt_HeroSkinLoad = TriggerCreate("lib1DE23868_gt_HeroSkinLoad_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_HeroSkinLoad, c_playerAny, "HeroSkinLoad");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spray Created
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_SprayCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libDDE92A83_gf_SetSprayScaleSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_SprayCreated_Init () {
    lib1DE23868_gt_SprayCreated = TriggerCreate("lib1DE23868_gt_SprayCreated_Func");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_SprayCreated, c_playerAny, "SprayItem");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Specialize Complete
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_SpecializeComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libDDE92A83_gf_SandboxModeInfiniteMinerals();
    lib29554E00_gf_AFKTimerRefresh(EventPlayer());
    lib1DE23868_gf_UpdateUnitSpawnerEnergy(EventPlayer());
    lib479C7CBB_gf_LiveScoreboardUpdatePlayer(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_SpecializeComplete_Init () {
    lib1DE23868_gt_SpecializeComplete = TriggerCreate("lib1DE23868_gt_SpecializeComplete_Func");
    TriggerEnable(lib1DE23868_gt_SpecializeComplete, false);
    TriggerAddEventUnitSpecializeProgress(lib1DE23868_gt_SpecializeComplete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ability Autocast On
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_AbilityAutocastOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1DE23868_gf_AbilityAutocast(EventUnitAbility(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_AbilityAutocastOn_Init () {
    lib1DE23868_gt_AbilityAutocastOn = TriggerCreate("lib1DE23868_gt_AbilityAutocastOn_Func");
    TriggerEnable(lib1DE23868_gt_AbilityAutocastOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("VikingAssaultPlaceFromVikingFighter", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("VikingFighterPlaceFromVikingAssault", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ProtossUpgrades", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ProtossUpgrades", 1), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ProtossUpgrades", 3), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ProtossUpgrades", 4), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ProtossUpgrades", 6), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ProtossUpgrades", 7), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ProtossUpgrades", 9), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ProtossUpgrades", 10), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ProtossUpgrades", 12), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ProtossUpgrades", 13), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TerranUpgrades", 3), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TerranUpgrades", 4), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TerranUpgrades", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TerranUpgrades", 1), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TerranUpgrades", 9), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TerranUpgrades", 10), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TerranUpgrades", 12), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TerranUpgrades", 13), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TerranUpgrades", 6), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TerranUpgrades", 7), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TerranUpgrades", 15), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TerranUpgrades", 16), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("RaynorUpgrades", 3), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("RaynorUpgrades", 4), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("RaynorUpgrades", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("RaynorUpgrades", 1), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("RaynorUpgrades", 9), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("RaynorUpgrades", 10), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("RaynorUpgrades", 12), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("RaynorUpgrades", 13), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("RaynorUpgrades", 6), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("RaynorUpgrades", 7), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("RaynorUpgrades", 15), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("RaynorUpgrades", 16), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("NovaUpgrades", 3), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("NovaUpgrades", 4), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("NovaUpgrades", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("NovaUpgrades", 1), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("NovaUpgrades", 6), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("NovaUpgrades", 7), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("NovaUpgrades", 15), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("NovaUpgrades", 16), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ZergUpgrades", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ZergUpgrades", 1), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ZergUpgrades", 3), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ZergUpgrades", 4), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ZergUpgrades", 6), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ZergUpgrades", 7), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ZergUpgrades", 9), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ZergUpgrades", 10), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ZergUpgrades", 12), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ZergUpgrades", 13), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ZergUpgrades", 15), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ZergUpgrades", 16), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("DehakaUpgrades", 3), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("DehakaUpgrades", 4), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("DehakaUpgrades", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("DehakaUpgrades", 1), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("NeutralUpgradesAutocast", 10), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("NeutralUpgradesAutocast", 11), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("NeutralUpgradesAutocast", 12), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("NeutralUpgradesAutocast", 13), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("NeutralUpgradesAutocast", 14), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("NeutralUpgradesAutocast", 15), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("NeutralUpgradesAutocast", 16), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("NeutralUpgradesAutocast", 17), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("NeutralUpgradesAutocast", 18), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("NeutralUpgradesAutocast", 19), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("NeutralUpgradesAutocast", 20), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("NeutralUpgradesAutocast", 21), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("NeutralUpgradesAutocast", 22), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("NeutralUpgradesAutocast", 23), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("NeutralUpgradesAutocast", 24), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("NeutralUpgradesAutocast", 25), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("NeutralUpgradesAutocast", 26), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("NeutralUpgradesAutocast", 27), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("HornerUpgrades", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("HornerUpgrades", 1), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("HornerUpgrades", 3), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("HornerUpgrades", 4), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TychusBlazeOilSpill", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TychusBlazeOilSpillUpgraded", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TychusNuxUltrasonicPulse", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TychusNuxUltrasonicPulseUpgraded", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TychusNikaraHeal", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TychusNikaraHealUpgraded", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TychusCannonballHeavyImpact", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TychusCannonballHeavyImpactUpgraded", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TychusUpgrades", 5), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TychusUpgrades", 6), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TychusUpgrades", 7), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TychusUpgrades", 8), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TychusUpgrades", 9), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TychusUpgrades", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TychusUpgrades", 1), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TychusUpgrades", 2), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TychusUpgrades", 3), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("TychusUpgrades", 4), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("AlarakUpgrades", 3), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("AlarakUpgrades", 4), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("AlarakUpgrades", 6), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("AlarakUpgrades", 7), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("AlarakUpgrades", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("AlarakUpgrades", 1), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ArtanisUpgrades", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ArtanisUpgrades", 1), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ArtanisUpgrades", 3), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ArtanisUpgrades", 4), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ArtanisUpgrades", 6), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ArtanisUpgrades", 7), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ArtanisUpgrades", 9), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ArtanisUpgrades", 10), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ArtanisUpgrades", 12), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ArtanisUpgrades", 13), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("KaraxUpgrades", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("KaraxUpgrades", 1), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("KaraxUpgrades", 3), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("KaraxUpgrades", 4), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("KaraxUpgrades", 6), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("KaraxUpgrades", 7), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("KaraxUpgrades", 9), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("KaraxUpgrades", 10), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("KaraxUpgrades", 12), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("KaraxUpgrades", 13), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ZagaraUpgrades", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ZagaraUpgrades", 1), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ZagaraUpgrades", 6), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ZagaraUpgrades", 7), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ZagaraUpgrades", 9), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ZagaraUpgrades", 10), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ZagaraUpgrades", 12), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("ZagaraUpgrades", 13), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("VikingMengskAssaultPlaceFromVikingFighter", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("VikingMengskFighterPlaceFromVikingAssault", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("MengskUpgrades", 3), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("MengskUpgrades", 4), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("MengskUpgrades", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("MengskUpgrades", 1), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("MedicStarlightHeal", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("MedicStarlightHealMechanical", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("StukovUpgrades", 3), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("StukovUpgrades", 4), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("StukovUpgrades", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("StukovUpgrades", 1), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("StukovUpgrades", 15), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("StukovUpgrades", 16), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("StukovUpgrades", 6), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOn, null, AbilityCommand("StukovUpgrades", 7), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ability Autocast Off
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_AbilityAutocastOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1DE23868_gf_AbilityAutocast(EventUnitAbility(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_AbilityAutocastOff_Init () {
    lib1DE23868_gt_AbilityAutocastOff = TriggerCreate("lib1DE23868_gt_AbilityAutocastOff_Func");
    TriggerEnable(lib1DE23868_gt_AbilityAutocastOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("VikingAssaultPlaceFromVikingFighter", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("VikingFighterPlaceFromVikingAssault", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ProtossUpgrades", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ProtossUpgrades", 1), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ProtossUpgrades", 3), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ProtossUpgrades", 4), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ProtossUpgrades", 6), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ProtossUpgrades", 7), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ProtossUpgrades", 9), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ProtossUpgrades", 10), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ProtossUpgrades", 12), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ProtossUpgrades", 13), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TerranUpgrades", 3), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TerranUpgrades", 4), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TerranUpgrades", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TerranUpgrades", 1), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TerranUpgrades", 9), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TerranUpgrades", 10), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TerranUpgrades", 12), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TerranUpgrades", 13), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TerranUpgrades", 6), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TerranUpgrades", 7), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TerranUpgrades", 15), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TerranUpgrades", 16), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("RaynorUpgrades", 3), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("RaynorUpgrades", 4), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("RaynorUpgrades", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("RaynorUpgrades", 1), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("RaynorUpgrades", 9), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("RaynorUpgrades", 10), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("RaynorUpgrades", 12), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("RaynorUpgrades", 13), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("RaynorUpgrades", 6), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("RaynorUpgrades", 7), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("RaynorUpgrades", 15), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("RaynorUpgrades", 16), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("NovaUpgrades", 3), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("NovaUpgrades", 4), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("NovaUpgrades", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("NovaUpgrades", 1), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("NovaUpgrades", 6), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("NovaUpgrades", 7), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("NovaUpgrades", 15), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("NovaUpgrades", 16), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ZergUpgrades", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ZergUpgrades", 1), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ZergUpgrades", 3), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ZergUpgrades", 4), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ZergUpgrades", 6), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ZergUpgrades", 7), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ZergUpgrades", 9), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ZergUpgrades", 10), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ZergUpgrades", 12), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ZergUpgrades", 13), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ZergUpgrades", 15), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ZergUpgrades", 16), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("DehakaUpgrades", 3), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("DehakaUpgrades", 4), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("DehakaUpgrades", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("DehakaUpgrades", 1), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("NeutralUpgradesAutocast", 10), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("NeutralUpgradesAutocast", 11), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("NeutralUpgradesAutocast", 12), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("NeutralUpgradesAutocast", 13), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("NeutralUpgradesAutocast", 14), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("NeutralUpgradesAutocast", 15), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("NeutralUpgradesAutocast", 16), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("NeutralUpgradesAutocast", 17), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("NeutralUpgradesAutocast", 18), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("NeutralUpgradesAutocast", 19), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("NeutralUpgradesAutocast", 20), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("NeutralUpgradesAutocast", 21), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("NeutralUpgradesAutocast", 22), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("NeutralUpgradesAutocast", 23), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("NeutralUpgradesAutocast", 24), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("NeutralUpgradesAutocast", 25), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("NeutralUpgradesAutocast", 26), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("NeutralUpgradesAutocast", 27), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("HornerUpgrades", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("HornerUpgrades", 1), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("HornerUpgrades", 3), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("HornerUpgrades", 4), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TychusBlazeOilSpill", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TychusBlazeOilSpillUpgraded", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TychusNuxUltrasonicPulse", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TychusNuxUltrasonicPulseUpgraded", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TychusNikaraHeal", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TychusNikaraHealUpgraded", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TychusCannonballHeavyImpact", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TychusCannonballHeavyImpactUpgraded", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TychusUpgrades", 5), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TychusUpgrades", 6), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TychusUpgrades", 7), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TychusUpgrades", 8), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TychusUpgrades", 9), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TychusUpgrades", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TychusUpgrades", 1), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TychusUpgrades", 2), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TychusUpgrades", 3), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("TychusUpgrades", 4), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("AlarakUpgrades", 3), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("AlarakUpgrades", 4), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("AlarakUpgrades", 6), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("AlarakUpgrades", 7), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("AlarakUpgrades", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("AlarakUpgrades", 1), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ArtanisUpgrades", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ArtanisUpgrades", 1), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ArtanisUpgrades", 3), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ArtanisUpgrades", 4), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ArtanisUpgrades", 6), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ArtanisUpgrades", 7), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ArtanisUpgrades", 9), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ArtanisUpgrades", 10), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ArtanisUpgrades", 12), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ArtanisUpgrades", 13), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("KaraxUpgrades", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("KaraxUpgrades", 1), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("KaraxUpgrades", 3), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("KaraxUpgrades", 4), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("KaraxUpgrades", 6), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("KaraxUpgrades", 7), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("KaraxUpgrades", 9), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("KaraxUpgrades", 10), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("KaraxUpgrades", 12), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("KaraxUpgrades", 13), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ZagaraUpgrades", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ZagaraUpgrades", 1), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ZagaraUpgrades", 6), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ZagaraUpgrades", 7), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ZagaraUpgrades", 9), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ZagaraUpgrades", 10), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ZagaraUpgrades", 12), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("ZagaraUpgrades", 13), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("VikingMengskAssaultPlaceFromVikingFighter", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("VikingMengskFighterPlaceFromVikingAssault", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("MengskUpgrades", 3), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("MengskUpgrades", 4), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("MengskUpgrades", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("MengskUpgrades", 1), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("MedicStarlightHeal", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("MedicStarlightHealMechanical", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("StukovUpgrades", 3), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("StukovUpgrades", 4), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("StukovUpgrades", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("StukovUpgrades", 1), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("StukovUpgrades", 15), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("StukovUpgrades", 16), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("StukovUpgrades", 6), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib1DE23868_gt_AbilityAutocastOff, null, AbilityCommand("StukovUpgrades", 7), c_unitAbilAutoCastChangeOff, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tier Upgrade Cancel
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_TierUpgradeCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUnitType() == "Tier2Dummy") || (libNtve_gf_TriggeringProgressUnitType() == "Tier3Dummy") || (libNtve_gf_TriggeringProgressUnitType() == "Tier4Dummy")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDDE92A83_gf_SandboxModeInfiniteMinerals();
    UnitAbilityEnable(lv_u, "NeutralUpgradesAutocast", false);
    UnitIssueOrder(lv_u, OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 0), false), c_orderQueueReplace);
    UnitIssueOrder(lv_u, OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 1), false), c_orderQueueReplace);
    UnitIssueOrder(lv_u, OrderSetAutoCast(AbilityCommand("NeutralUpgradesAutocast", 2), false), c_orderQueueReplace);
    UnitAbilityEnable(lv_u, "NeutralUpgradesAutocast", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_TierUpgradeCancel_Init () {
    lib1DE23868_gt_TierUpgradeCancel = TriggerCreate("lib1DE23868_gt_TierUpgradeCancel_Func");
    TriggerEnable(lib1DE23868_gt_TierUpgradeCancel, false);
    TriggerAddEventUnitTrainProgress(lib1DE23868_gt_TierUpgradeCancel, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Neutral Scan Score
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_NeutralScanScore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerScoreValueSetFromInt(EventPlayer(), "ScannerSweepSpending", (PlayerScoreValueGetAsInt(EventPlayer(), "ScannerSweepSpending") + CatalogFieldValueGetAsInt(c_gameCatalogAbil, "NeutralScan", "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", EventPlayer())));
    lib29554E00_gf_AFKTimerRefresh(EventPlayer());
    libDDE92A83_gf_SandboxModeInfiniteMinerals();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_NeutralScanScore_Init () {
    lib1DE23868_gt_NeutralScanScore = TriggerCreate("lib1DE23868_gt_NeutralScanScore_Func");
    TriggerEnable(lib1DE23868_gt_NeutralScanScore, false);
    TriggerAddEventUnitAbility(lib1DE23868_gt_NeutralScanScore, null, AbilityCommand("NeutralScan", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Strike Weaponry Score
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_StrikeWeaponryScore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib29554E00_gf_AFKTimerRefresh(EventPlayer());
    PlayerScoreValueSetFromInt(EventPlayer(), "MineralsUsedTotalUpgrade", (PlayerScoreValueGetAsInt(EventPlayer(), "MineralsUsedTotalUpgrade") + CatalogFieldValueGetAsInt(c_gameCatalogAbil, "NeutralUpgradesAutocast", "InfoArray[" + IntToString(10) + "].Resource[" + IntToString(0) + "]", c_playerAny)));
    lib1DE23868_gf_DehakaUpdateXP(EventPlayer());
    lib479C7CBB_gf_LiveScoreboardUpdatePlayer(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_StrikeWeaponryScore_Init () {
    lib1DE23868_gt_StrikeWeaponryScore = TriggerCreate("lib1DE23868_gt_StrikeWeaponryScore_Func");
    TriggerEnable(lib1DE23868_gt_StrikeWeaponryScore, false);
    TriggerAddEventUnitAbility(lib1DE23868_gt_StrikeWeaponryScore, null, AbilityCommand("NeutralUpgradesAutocast", 10), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib1DE23868_gt_StrikeWeaponryScore, null, AbilityCommand("NeutralUpgradesAutocast", 11), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib1DE23868_gt_StrikeWeaponryScore, null, AbilityCommand("NeutralUpgradesAutocast", 12), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib1DE23868_gt_StrikeWeaponryScore, null, AbilityCommand("NeutralUpgradesAutocast", 13), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib1DE23868_gt_StrikeWeaponryScore, null, AbilityCommand("NeutralUpgradesAutocast", 14), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib1DE23868_gt_StrikeWeaponryScore, null, AbilityCommand("NeutralUpgradesAutocast", 15), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib1DE23868_gt_StrikeWeaponryScore, null, AbilityCommand("NeutralUpgradesAutocast", 16), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib1DE23868_gt_StrikeWeaponryScore, null, AbilityCommand("NeutralUpgradesAutocast", 17), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib1DE23868_gt_StrikeWeaponryScore, null, AbilityCommand("NeutralUpgradesAutocast", 18), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib1DE23868_gt_StrikeWeaponryScore, null, AbilityCommand("NeutralUpgradesAutocast", 19), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib1DE23868_gt_StrikeWeaponryScore, null, AbilityCommand("NeutralUpgradesAutocast", 20), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib1DE23868_gt_StrikeWeaponryScore, null, AbilityCommand("NeutralUpgradesAutocast", 21), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib1DE23868_gt_StrikeWeaponryScore, null, AbilityCommand("NeutralUpgradesAutocast", 22), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib1DE23868_gt_StrikeWeaponryScore, null, AbilityCommand("NeutralUpgradesAutocast", 23), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib1DE23868_gt_StrikeWeaponryScore, null, AbilityCommand("NeutralUpgradesAutocast", 24), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib1DE23868_gt_StrikeWeaponryScore, null, AbilityCommand("NeutralUpgradesAutocast", 25), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib1DE23868_gt_StrikeWeaponryScore, null, AbilityCommand("NeutralUpgradesAutocast", 26), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib1DE23868_gt_StrikeWeaponryScore, null, AbilityCommand("NeutralUpgradesAutocast", 27), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tier 2 Upgrade Score
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_Tier2UpgradeScore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib29554E00_gf_AFKTimerRefresh(EventPlayer());
    PlayerScoreValueSetFromInt(EventPlayer(), "MineralsUsedTotalUpgrade", (PlayerScoreValueGetAsInt(EventPlayer(), "MineralsUsedTotalUpgrade") + CatalogFieldValueGetAsInt(c_gameCatalogAbil, "NeutralUpgradesAutocast", "InfoArray[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", c_playerAny)));
    lib1DE23868_gf_DehakaUpdateXP(EventPlayer());
    lib479C7CBB_gf_LiveScoreboardUpdatePlayer(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_Tier2UpgradeScore_Init () {
    lib1DE23868_gt_Tier2UpgradeScore = TriggerCreate("lib1DE23868_gt_Tier2UpgradeScore_Func");
    TriggerEnable(lib1DE23868_gt_Tier2UpgradeScore, false);
    TriggerAddEventUnitAbility(lib1DE23868_gt_Tier2UpgradeScore, null, AbilityCommand("NeutralUpgradesAutocast", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tier 3 Upgrade Score
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_Tier3UpgradeScore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib29554E00_gf_AFKTimerRefresh(EventPlayer());
    PlayerScoreValueSetFromInt(EventPlayer(), "MineralsUsedTotalUpgrade", (PlayerScoreValueGetAsInt(EventPlayer(), "MineralsUsedTotalUpgrade") + CatalogFieldValueGetAsInt(c_gameCatalogAbil, "NeutralUpgradesAutocast", "InfoArray[" + IntToString(1) + "].Resource[" + IntToString(0) + "]", c_playerAny)));
    lib1DE23868_gf_DehakaUpdateXP(EventPlayer());
    lib479C7CBB_gf_LiveScoreboardUpdatePlayer(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_Tier3UpgradeScore_Init () {
    lib1DE23868_gt_Tier3UpgradeScore = TriggerCreate("lib1DE23868_gt_Tier3UpgradeScore_Func");
    TriggerEnable(lib1DE23868_gt_Tier3UpgradeScore, false);
    TriggerAddEventUnitAbility(lib1DE23868_gt_Tier3UpgradeScore, null, AbilityCommand("NeutralUpgradesAutocast", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tier 4 Upgrade Score
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_Tier4UpgradeScore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib29554E00_gf_AFKTimerRefresh(EventPlayer());
    PlayerScoreValueSetFromInt(EventPlayer(), "MineralsUsedTotalUpgrade", (PlayerScoreValueGetAsInt(EventPlayer(), "MineralsUsedTotalUpgrade") + CatalogFieldValueGetAsInt(c_gameCatalogAbil, "NeutralUpgradesAutocast", "InfoArray[" + IntToString(2) + "].Resource[" + IntToString(0) + "]", c_playerAny)));
    lib1DE23868_gf_DehakaUpdateXP(EventPlayer());
    lib479C7CBB_gf_LiveScoreboardUpdatePlayer(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_Tier4UpgradeScore_Init () {
    lib1DE23868_gt_Tier4UpgradeScore = TriggerCreate("lib1DE23868_gt_Tier4UpgradeScore_Func");
    TriggerEnable(lib1DE23868_gt_Tier4UpgradeScore, false);
    TriggerAddEventUnitAbility(lib1DE23868_gt_Tier4UpgradeScore, null, AbilityCommand("NeutralUpgradesAutocast", 2), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tier 4 Show
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_Tier4Show_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA39EDE80_g;
    int autoA39EDE80_var;

    // Conditions
    if (testConds) {
        if (!((libDDE92A83_gf_GameisusingAutoMineralFields() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA39EDE80_g = PlayerGroupAll();
    autoA39EDE80_var = -1;
    while (true) {
        autoA39EDE80_var = PlayerGroupNextPlayer(autoA39EDE80_g, autoA39EDE80_var);
        if (autoA39EDE80_var < 0) { break; }
        TechTreeAbilityAllow(autoA39EDE80_var, AbilityCommand("NeutralUpgradesAutocast", 2), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_Tier4Show_Init () {
    lib1DE23868_gt_Tier4Show = TriggerCreate("lib1DE23868_gt_Tier4Show_Func");
    TriggerEnable(lib1DE23868_gt_Tier4Show, false);
    TriggerAddEventTimeElapsed(lib1DE23868_gt_Tier4Show, 168.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Additions
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_UpgradeAdditions_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    string auto9E3FBD2C_val;

    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "ProtossAirArmorsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossAirArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossAirArmorsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossAirWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossAirWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossAirWeaponsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossGroundArmorsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossGroundArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossGroundArmorsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossGroundWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossGroundWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossGroundWeaponsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossShieldsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossShieldsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ProtossShieldsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranInfantryArmorsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranInfantryArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranInfantryArmorsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranInfantryWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranInfantryWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranInfantryWeaponsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranShipWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranShipWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranShipWeaponsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranVehicleAndShipArmorsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranVehicleAndShipArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranVehicleAndShipArmorsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranVehicleWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranVehicleWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "TerranVehicleWeaponsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergFlyerWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergFlyerWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergFlyerWeaponsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergFlyerArmorsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergFlyerArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergFlyerArmorsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergGroundArmorsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergGroundArmorsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergGroundArmorsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergMeleeWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergMeleeWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergMeleeWeaponsLevel3") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel3")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib29554E00_gf_AFKTimerRefresh(lv_player);
    libDDE92A83_gf_SandboxModeInfiniteMinerals();
    auto9E3FBD2C_val = libNtve_gf_TriggeringProgressUpgrade();
    if (auto9E3FBD2C_val == "ProtossAirArmorsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossAirArmorLevel1Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ProtossAirArmorsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossAirArmorLevel2Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ProtossAirArmorsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossAirArmorLevel3Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ProtossAirWeaponsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossAirWeaponsLevel1Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ProtossAirWeaponsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossAirWeaponsLevel2Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ProtossAirWeaponsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossAirWeaponsLevel3Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ProtossGroundArmorsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossGroundArmorLevel1Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ProtossGroundArmorsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossGroundArmorLevel2Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ProtossGroundArmorsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossGroundArmorLevel3Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ProtossGroundWeaponsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossGroundWeaponsLevel1Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ProtossGroundWeaponsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossGroundWeaponsLevel2Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ProtossGroundWeaponsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossGroundWeaponsLevel3Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ProtossShieldsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossShieldsLevel1Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ProtossShieldsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossShieldsLevel2Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ProtossShieldsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossShieldsLevel3Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "TerranInfantryArmorsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "TerranInfantryArmorLevel1Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "TerranInfantryArmorsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "TerranInfantryArmorLevel2Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "TerranInfantryArmorsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "TerranInfantryArmorLevel3Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "TerranInfantryWeaponsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "TerranInfantryWeaponsLevel1Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "TerranInfantryWeaponsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "TerranInfantryWeaponsLevel2Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "TerranInfantryWeaponsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "TerranInfantryWeaponsLevel3Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "TerranShipWeaponsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "TerranShipWeaponsLevel1Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "TerranShipWeaponsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "TerranShipWeaponsLevel2Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "TerranShipWeaponsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "TerranShipWeaponsLevel3Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "TerranVehicleAndShipArmorsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "TerranVehicleandShipPlatingLevel1Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "TerranVehicleAndShipArmorsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "TerranVehicleandShipPlatingLevel2Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "TerranVehicleAndShipArmorsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "TerranVehicleandShipPlatingLevel3Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ZergFlyerWeaponsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ZergFlyerAttacksLevel1Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ZergFlyerWeaponsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ZergFlyerAttacksLevel2Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ZergFlyerWeaponsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ZergFlyerAttacksLevel3Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ZergFlyerArmorsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ZergFlyerCarapaceLevel1Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ZergFlyerArmorsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ZergFlyerCarapaceLevel2Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ZergFlyerArmorsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ZergFlyerCarapaceLevel3Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ZergGroundArmorsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ZergGroundCarapaceLevel1Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ZergGroundArmorsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ZergGroundCarapaceLevel2Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ZergGroundArmorsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ZergGroundCarapaceLevel3Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ZergMeleeWeaponsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ZergMeleeAttacksLevel1Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ZergMeleeWeaponsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ZergMeleeAttacksLevel2Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ZergMeleeWeaponsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ZergMeleeAttacksLevel3Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ZergMissileWeaponsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ZergMissileAttacksLevel1Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ZergMissileWeaponsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ZergMissileAttacksLevel2Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else if (auto9E3FBD2C_val == "ZergMissileWeaponsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ZergMissileAttacksLevel3Starlight", TechTreeUpgradeCount(lv_player, libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_UpgradeAdditions_Init () {
    lib1DE23868_gt_UpgradeAdditions = TriggerCreate("lib1DE23868_gt_UpgradeAdditions_Func");
    TriggerEnable(lib1DE23868_gt_UpgradeAdditions, false);
    TriggerAddEventUnitResearchProgress(lib1DE23868_gt_UpgradeAdditions, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Spending Score
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_UpgradeSpendingScore_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_x;

    // Automatic Variable Declarations
    int auto82873E23_ae;
    const int auto82873E23_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() > 1.0))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 0, UnitFilter(0, 0, (1 << c_targetFilterHover), 0)) == true))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressEffect() != "AbathurBiomass"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressEffect() != "AbathurBiomassTrigger"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressEffect() != "HornerAssaultGalleonTrainHellbatCreate"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressEffect() != "HornerAssaultGalleonTrainHellionCreate"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressEffect() != "HornerAssaultGalleonTrainReaperCreate"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressEffect() != "HornerAssaultGalleonTrainWidowMineCreate"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressEffect() != "SkinBiomassSetStart"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressEffect() != "SkinCybrosSetStart"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressEffect() != "SkinHighlightSetStart"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressEffect() != "SkinHologramSetStart"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressEffect() != "SkinJadeSetStart"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressEffect() != "SkinMineralSetStart"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressEffect() != "SkinPsionicSetStart"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressEffect() != "SkinRedstoneSetStart"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressEffect() != "SkinSepiaSetStart"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressEffect() != "SkinShadowSetStart"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressEffect() != "SkinSnowSetStart"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressEffect() != "SkinSolariteSetStart"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressEffect() != "SkinVoidSetStart"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressEffect() != "SkinRemoveAll"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DehakaHero"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "HeroKerriganWaveUnit"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "HeroAlarakWaveUnit"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "HeroNovaWaveUnit"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "HeroZagaraWaveUnit"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "BunkerDepotMengsk"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "FenixFlyer"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "FenixPraetor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "FenixWalker"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Kaldalis"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PurifierTalis"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Taldarin"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Mojo"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Warbringer"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Clolarion"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDDE92A83_gf_SandboxModeInfiniteMinerals();
    auto82873E23_ae = UnitAbilityCount(EventUnit());
    lv_i = 1;
    for ( ; ( (auto82873E23_ai >= 0 && lv_i <= auto82873E23_ae) || (auto82873E23_ai < 0 && lv_i >= auto82873E23_ae) ) ; lv_i += auto82873E23_ai ) {
        if ((UnitAbilityGet(EventUnit(), lv_i) != "move") && (UnitAbilityGet(EventUnit(), lv_i) != "InventoryWorker") && (UnitAbilityGet(EventUnit(), lv_i) != "InventoryUnit") && (UnitAbilityGet(EventUnit(), lv_i) != "AttackWarpPrism") && (UnitAbilityGet(EventUnit(), lv_i) != "MoveWaveUnit") && (UnitAbilityGet(EventUnit(), lv_i) != "StopWaveUnit") && (UnitAbilityGet(EventUnit(), lv_i) != "MoveWorker") && (UnitAbilityGet(EventUnit(), lv_i) != "Queue5Hero") && (UnitAbilityGet(EventUnit(), lv_i) != "IdleCheck") && (UnitAbilityGet(EventUnit(), lv_i) != "SkinSpecializePremium") && ((CatalogFieldValueGet(c_gameCatalogAbil, UnitAbilityGet(EventUnit(), lv_i), "Activity", 0) == "UI/Upgrading") || (CatalogFieldValueGet(c_gameCatalogAbil, UnitAbilityGet(EventUnit(), lv_i), "Activity", 0) == "UI/Researching"))) {
            lv_x += lib1DE23868_gf_UpgradeCostReturn(UnitAbilityGet(EventUnit(), lv_i), libNtve_gf_TriggeringProgressEffect());
        }

    }
    if ((lv_x > 0)) {
        PlayerScoreValueSetFromInt(EventPlayer(), "MineralsUsedTotalUpgrade", (PlayerScoreValueGetAsInt(EventPlayer(), "MineralsUsedTotalUpgrade") + lv_x));
        lib39886FE6_gf_MasteryBarAwardExperience(EventPlayer(), lv_x, false, true);
        libDDE92A83_gf_PlayerAttributesUpdate(EventPlayer());
        lib1DE23868_gf_DehakaUpdateXP(EventPlayer());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_UpgradeSpendingScore_Init () {
    lib1DE23868_gt_UpgradeSpendingScore = TriggerCreate("lib1DE23868_gt_UpgradeSpendingScore_Func");
    TriggerEnable(lib1DE23868_gt_UpgradeSpendingScore, false);
    TriggerAddEventUnitSpecializeProgress(lib1DE23868_gt_UpgradeSpendingScore, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Control Group Protoss
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_AutoControlGroupProtoss_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() != "AutoControlGroup_None_Protoss")) {
        lib1DE23868_gf_AutoControlGroup(EventPlayerEffectUsedUnitType(c_effectUnitCaster), "Protoss", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), StringToInt(StringSub((EventPlayerEffectUsed()), 18, 18)));
    }
    else {
        lib1DE23868_gf_AutoControlGroup(EventPlayerEffectUsedUnitType(c_effectUnitCaster), "Protoss", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_AutoControlGroupProtoss_Init () {
    lib1DE23868_gt_AutoControlGroupProtoss = TriggerCreate("lib1DE23868_gt_AutoControlGroupProtoss_Func");
    TriggerEnable(lib1DE23868_gt_AutoControlGroupProtoss, false);
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupProtoss, c_playerAny, "AutoControlGroup_1_Protoss");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupProtoss, c_playerAny, "AutoControlGroup_2_Protoss");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupProtoss, c_playerAny, "AutoControlGroup_3_Protoss");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupProtoss, c_playerAny, "AutoControlGroup_4_Protoss");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupProtoss, c_playerAny, "AutoControlGroup_5_Protoss");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupProtoss, c_playerAny, "AutoControlGroup_6_Protoss");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupProtoss, c_playerAny, "AutoControlGroup_7_Protoss");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupProtoss, c_playerAny, "AutoControlGroup_8_Protoss");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupProtoss, c_playerAny, "AutoControlGroup_9_Protoss");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupProtoss, c_playerAny, "AutoControlGroup_None_Protoss");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Control Group Terran
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_AutoControlGroupTerran_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() != "AutoControlGroup_None_Terran")) {
        lib1DE23868_gf_AutoControlGroup(EventPlayerEffectUsedUnitType(c_effectUnitCaster), "Terran", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), StringToInt(StringSub((EventPlayerEffectUsed()), 18, 18)));
    }
    else {
        lib1DE23868_gf_AutoControlGroup(EventPlayerEffectUsedUnitType(c_effectUnitCaster), "Terran", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_AutoControlGroupTerran_Init () {
    lib1DE23868_gt_AutoControlGroupTerran = TriggerCreate("lib1DE23868_gt_AutoControlGroupTerran_Func");
    TriggerEnable(lib1DE23868_gt_AutoControlGroupTerran, false);
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupTerran, c_playerAny, "AutoControlGroup_1_Terran");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupTerran, c_playerAny, "AutoControlGroup_2_Terran");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupTerran, c_playerAny, "AutoControlGroup_3_Terran");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupTerran, c_playerAny, "AutoControlGroup_4_Terran");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupTerran, c_playerAny, "AutoControlGroup_5_Terran");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupTerran, c_playerAny, "AutoControlGroup_6_Terran");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupTerran, c_playerAny, "AutoControlGroup_7_Terran");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupTerran, c_playerAny, "AutoControlGroup_8_Terran");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupTerran, c_playerAny, "AutoControlGroup_9_Terran");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupTerran, c_playerAny, "AutoControlGroup_None_Terran");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Control Group Zerg
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_AutoControlGroupZerg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() != "AutoControlGroup_None_Zerg")) {
        lib1DE23868_gf_AutoControlGroup(EventPlayerEffectUsedUnitType(c_effectUnitCaster), "Zerg", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), StringToInt(StringSub((EventPlayerEffectUsed()), 18, 18)));
    }
    else {
        lib1DE23868_gf_AutoControlGroup(EventPlayerEffectUsedUnitType(c_effectUnitCaster), "Zerg", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_AutoControlGroupZerg_Init () {
    lib1DE23868_gt_AutoControlGroupZerg = TriggerCreate("lib1DE23868_gt_AutoControlGroupZerg_Func");
    TriggerEnable(lib1DE23868_gt_AutoControlGroupZerg, false);
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupZerg, c_playerAny, "AutoControlGroup_1_Zerg");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupZerg, c_playerAny, "AutoControlGroup_2_Zerg");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupZerg, c_playerAny, "AutoControlGroup_3_Zerg");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupZerg, c_playerAny, "AutoControlGroup_4_Zerg");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupZerg, c_playerAny, "AutoControlGroup_5_Zerg");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupZerg, c_playerAny, "AutoControlGroup_6_Zerg");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupZerg, c_playerAny, "AutoControlGroup_7_Zerg");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupZerg, c_playerAny, "AutoControlGroup_8_Zerg");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupZerg, c_playerAny, "AutoControlGroup_9_Zerg");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_AutoControlGroupZerg, c_playerAny, "AutoControlGroup_None_Zerg");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker Select Protoss
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_WorkerSelectProtoss_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libDDE92A83_gf_GameIsTutorial() == true) || (PlayerStatus(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == c_playerStatusActive)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), 1), "WorkerProtoss");
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "HideWorkerCommandCard", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "WorkerCommanderSelect", 0);
    TechTreeAbilityAllow(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), AbilityCommand("WorkerSelect", 22), true);
    UISetFrameVisible(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_syncFrameTypeInventoryPanel, true);
    UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_localSelectionTypeUnknown, true);
    libFD391A9C_gf_ScoreboardSetIcon(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), Color(100,100,100), "Assets\\Textures\\btn-ability-neutral-terran.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_WorkerSelectProtoss_Init () {
    lib1DE23868_gt_WorkerSelectProtoss = TriggerCreate("lib1DE23868_gt_WorkerSelectProtoss_Func");
    TriggerEnable(lib1DE23868_gt_WorkerSelectProtoss, false);
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_WorkerSelectProtoss, c_playerAny, "WorkerSelectProtossTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker Select Terran
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_WorkerSelectTerran_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libDDE92A83_gf_GameIsTutorial() == true) || (PlayerStatus(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == c_playerStatusActive)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), 1), "WorkerTerran");
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "HideWorkerCommandCard", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "WorkerCommanderSelect", 0);
    TechTreeAbilityAllow(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), AbilityCommand("WorkerSelect", 22), true);
    UISetFrameVisible(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_syncFrameTypeInventoryPanel, true);
    UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_localSelectionTypeUnknown, true);
    libFD391A9C_gf_ScoreboardSetIcon(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), Color(100,100,100), "Assets\\Textures\\btn-ability-neutral-terran.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_WorkerSelectTerran_Init () {
    lib1DE23868_gt_WorkerSelectTerran = TriggerCreate("lib1DE23868_gt_WorkerSelectTerran_Func");
    TriggerEnable(lib1DE23868_gt_WorkerSelectTerran, false);
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_WorkerSelectTerran, c_playerAny, "WorkerSelectTerranTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker Select Zerg
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_WorkerSelectZerg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libDDE92A83_gf_GameIsTutorial() == true) || (PlayerStatus(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == c_playerStatusActive)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), 1), "WorkerZerg");
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "HideWorkerCommandCard", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "WorkerCommanderSelect", 0);
    TechTreeAbilityAllow(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), AbilityCommand("WorkerSelect", 22), true);
    UISetFrameVisible(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_syncFrameTypeInventoryPanel, true);
    UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_localSelectionTypeUnknown, true);
    libFD391A9C_gf_ScoreboardSetIcon(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), Color(100,100,100), "Assets\\Textures\\btn-ability-neutral-zerg.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_WorkerSelectZerg_Init () {
    lib1DE23868_gt_WorkerSelectZerg = TriggerCreate("lib1DE23868_gt_WorkerSelectZerg_Func");
    TriggerEnable(lib1DE23868_gt_WorkerSelectZerg, false);
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_WorkerSelectZerg, c_playerAny, "WorkerSelectZergTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker Select Random Commander
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_WorkerSelectRandomCommander_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libDDE92A83_gf_GameIsTutorial() == true) || (PlayerStatus(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == c_playerStatusActive)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1DE23868_gf_RandomCommander(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_WorkerSelectRandomCommander_Init () {
    lib1DE23868_gt_WorkerSelectRandomCommander = TriggerCreate("lib1DE23868_gt_WorkerSelectRandomCommander_Func");
    TriggerEnable(lib1DE23868_gt_WorkerSelectRandomCommander, false);
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_WorkerSelectRandomCommander, c_playerAny, "WorkerSelectRandomCommanderTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker Select Artanis
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_WorkerSelectArtanis_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libDDE92A83_gf_GameIsTutorial() == true) || (PlayerStatus(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == c_playerStatusActive)))) {
            return false;
        }

        if (!((UnitGroupCount(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), 1), "WorkerArtanis");
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "HideWorkerCommandCard", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "WorkerCommanderSelect", 0);
    TechTreeAbilityAllow(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), AbilityCommand("WorkerSelect", 22), true);
    UISetFrameVisible(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_syncFrameTypeInventoryPanel, true);
    UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_localSelectionTypeUnknown, true);
    libFD391A9C_gf_ScoreboardSetIcon(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), Color(100,100,100), "Assets\\Textures\\btn-unit-hero-artanis.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_WorkerSelectArtanis_Init () {
    lib1DE23868_gt_WorkerSelectArtanis = TriggerCreate("lib1DE23868_gt_WorkerSelectArtanis_Func");
    TriggerEnable(lib1DE23868_gt_WorkerSelectArtanis, false);
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_WorkerSelectArtanis, c_playerAny, "WorkerSelectArtanisTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker Select Vorazun
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_WorkerSelectVorazun_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libDDE92A83_gf_GameIsTutorial() == true) || (PlayerStatus(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == c_playerStatusActive)))) {
            return false;
        }

        if (!((UnitGroupCount(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), 1), "WorkerVorazun");
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "HideWorkerCommandCard", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "WorkerCommanderSelect", 0);
    TechTreeAbilityAllow(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), AbilityCommand("WorkerSelect", 22), true);
    UISetFrameVisible(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_syncFrameTypeInventoryPanel, true);
    UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_localSelectionTypeUnknown, true);
    libFD391A9C_gf_ScoreboardSetIcon(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), Color(100,100,100), "Assets\\Textures\\btn-unit-hero-vorazun.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_WorkerSelectVorazun_Init () {
    lib1DE23868_gt_WorkerSelectVorazun = TriggerCreate("lib1DE23868_gt_WorkerSelectVorazun_Func");
    TriggerEnable(lib1DE23868_gt_WorkerSelectVorazun, false);
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_WorkerSelectVorazun, c_playerAny, "WorkerSelectVorazunTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker Select Karax
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_WorkerSelectKarax_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libDDE92A83_gf_GameIsTutorial() == true) || (PlayerStatus(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == c_playerStatusActive)))) {
            return false;
        }

        if (!((UnitGroupCount(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), 1), "WorkerKarax");
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "HideWorkerCommandCard", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "WorkerCommanderSelect", 0);
    TechTreeAbilityAllow(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), AbilityCommand("WorkerSelect", 22), true);
    UISetFrameVisible(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_syncFrameTypeInventoryPanel, true);
    UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_localSelectionTypeUnknown, true);
    libFD391A9C_gf_ScoreboardSetIcon(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), Color(100,100,100), "Assets\\Textures\\btn-unit-hero-karax.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_WorkerSelectKarax_Init () {
    lib1DE23868_gt_WorkerSelectKarax = TriggerCreate("lib1DE23868_gt_WorkerSelectKarax_Func");
    TriggerEnable(lib1DE23868_gt_WorkerSelectKarax, false);
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_WorkerSelectKarax, c_playerAny, "WorkerSelectKaraxTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker Select Alarak
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_WorkerSelectAlarak_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libDDE92A83_gf_GameIsTutorial() == true) || (PlayerStatus(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == c_playerStatusActive)))) {
            return false;
        }

        if (!((UnitGroupCount(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), 1), "WorkerAlarak");
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "HideWorkerCommandCard", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "WorkerCommanderSelect", 0);
    TechTreeAbilityAllow(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), AbilityCommand("WorkerSelect", 22), true);
    UISetFrameVisible(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_syncFrameTypeInventoryPanel, true);
    UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_localSelectionTypeUnknown, true);
    libFD391A9C_gf_ScoreboardSetIcon(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), Color(100,100,100), "Assets\\Textures\\btn-unit-hero-alarak.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_WorkerSelectAlarak_Init () {
    lib1DE23868_gt_WorkerSelectAlarak = TriggerCreate("lib1DE23868_gt_WorkerSelectAlarak_Func");
    TriggerEnable(lib1DE23868_gt_WorkerSelectAlarak, false);
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_WorkerSelectAlarak, c_playerAny, "WorkerSelectAlarakTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker Select Fenix
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_WorkerSelectFenix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libDDE92A83_gf_GameIsTutorial() == true) || (PlayerStatus(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == c_playerStatusActive)))) {
            return false;
        }

        if (!((UnitGroupCount(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), 1), "WorkerFenix");
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "HideWorkerCommandCard", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "WorkerCommanderSelect", 0);
    TechTreeAbilityAllow(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), AbilityCommand("WorkerSelect", 22), true);
    UISetFrameVisible(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_syncFrameTypeInventoryPanel, true);
    UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_localSelectionTypeUnknown, true);
    libFD391A9C_gf_ScoreboardSetIcon(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), Color(100,100,100), "Assets\\Textures\\btn-unit-hero-fenix.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_WorkerSelectFenix_Init () {
    lib1DE23868_gt_WorkerSelectFenix = TriggerCreate("lib1DE23868_gt_WorkerSelectFenix_Func");
    TriggerEnable(lib1DE23868_gt_WorkerSelectFenix, false);
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_WorkerSelectFenix, c_playerAny, "WorkerSelectFenixTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker Select Zeratul
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_WorkerSelectZeratul_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libDDE92A83_gf_GameIsTutorial() == true) || (PlayerStatus(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == c_playerStatusActive)))) {
            return false;
        }

        if (!((UnitGroupCount(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), 1), "WorkerZeratul");
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "HideWorkerCommandCard", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "WorkerCommanderSelect", 0);
    TechTreeAbilityAllow(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), AbilityCommand("WorkerSelect", 22), true);
    UISetFrameVisible(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_syncFrameTypeInventoryPanel, true);
    UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_localSelectionTypeUnknown, true);
    libFD391A9C_gf_ScoreboardSetIcon(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), Color(100,100,100), "Assets\\Textures\\btn-unit-hero-zeratul.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_WorkerSelectZeratul_Init () {
    lib1DE23868_gt_WorkerSelectZeratul = TriggerCreate("lib1DE23868_gt_WorkerSelectZeratul_Func");
    TriggerEnable(lib1DE23868_gt_WorkerSelectZeratul, false);
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_WorkerSelectZeratul, c_playerAny, "WorkerSelectZeratulTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker Select Raynor
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_WorkerSelectRaynor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libDDE92A83_gf_GameIsTutorial() == true) || (PlayerStatus(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == c_playerStatusActive)))) {
            return false;
        }

        if (!((UnitGroupCount(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), 1), "WorkerRaynor");
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "HideWorkerCommandCard", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "WorkerCommanderSelect", 0);
    TechTreeAbilityAllow(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), AbilityCommand("WorkerSelect", 22), true);
    UISetFrameVisible(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_syncFrameTypeInventoryPanel, true);
    UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_localSelectionTypeUnknown, true);
    libFD391A9C_gf_ScoreboardSetIcon(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), Color(100,100,100), "Assets\\Textures\\btn-unit-hero-raynor.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_WorkerSelectRaynor_Init () {
    lib1DE23868_gt_WorkerSelectRaynor = TriggerCreate("lib1DE23868_gt_WorkerSelectRaynor_Func");
    TriggerEnable(lib1DE23868_gt_WorkerSelectRaynor, false);
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_WorkerSelectRaynor, c_playerAny, "WorkerSelectRaynorTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker Select Swann
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_WorkerSelectSwann_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libDDE92A83_gf_GameIsTutorial() == true) || (PlayerStatus(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == c_playerStatusActive)))) {
            return false;
        }

        if (!((UnitGroupCount(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), 1), "WorkerSwann");
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "HideWorkerCommandCard", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "WorkerCommanderSelect", 0);
    TechTreeAbilityAllow(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), AbilityCommand("WorkerSelect", 22), true);
    UISetFrameVisible(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_syncFrameTypeInventoryPanel, true);
    UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_localSelectionTypeUnknown, true);
    libFD391A9C_gf_ScoreboardSetIcon(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), Color(100,100,100), "Assets\\Textures\\btn-unit-hero-swann.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_WorkerSelectSwann_Init () {
    lib1DE23868_gt_WorkerSelectSwann = TriggerCreate("lib1DE23868_gt_WorkerSelectSwann_Func");
    TriggerEnable(lib1DE23868_gt_WorkerSelectSwann, false);
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_WorkerSelectSwann, c_playerAny, "WorkerSelectSwannTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker Select Nova
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_WorkerSelectNova_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libDDE92A83_gf_GameIsTutorial() == true) || (PlayerStatus(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == c_playerStatusActive)))) {
            return false;
        }

        if (!((UnitGroupCount(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), 1), "WorkerNova");
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "HideWorkerCommandCard", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "WorkerCommanderSelect", 0);
    TechTreeAbilityAllow(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), AbilityCommand("WorkerSelect", 22), true);
    UISetFrameVisible(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_syncFrameTypeInventoryPanel, true);
    UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_localSelectionTypeUnknown, true);
    libFD391A9C_gf_ScoreboardSetIcon(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), Color(100,100,100), "Assets\\Textures\\btn-unit-hero-nova.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_WorkerSelectNova_Init () {
    lib1DE23868_gt_WorkerSelectNova = TriggerCreate("lib1DE23868_gt_WorkerSelectNova_Func");
    TriggerEnable(lib1DE23868_gt_WorkerSelectNova, false);
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_WorkerSelectNova, c_playerAny, "WorkerSelectNovaTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker Select Horner
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_WorkerSelectHorner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libDDE92A83_gf_GameIsTutorial() == true) || (PlayerStatus(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == c_playerStatusActive)))) {
            return false;
        }

        if (!((UnitGroupCount(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), 1), "WorkerHorner");
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "HideWorkerCommandCard", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "WorkerCommanderSelect", 0);
    TechTreeAbilityAllow(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), AbilityCommand("WorkerSelect", 22), true);
    UISetFrameVisible(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_syncFrameTypeInventoryPanel, true);
    UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_localSelectionTypeUnknown, true);
    libFD391A9C_gf_ScoreboardSetIcon(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), Color(100,100,100), "Assets\\Textures\\btn-unit-hero-horner.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_WorkerSelectHorner_Init () {
    lib1DE23868_gt_WorkerSelectHorner = TriggerCreate("lib1DE23868_gt_WorkerSelectHorner_Func");
    TriggerEnable(lib1DE23868_gt_WorkerSelectHorner, false);
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_WorkerSelectHorner, c_playerAny, "WorkerSelectHornerTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker Select Tychus
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_WorkerSelectTychus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libDDE92A83_gf_GameIsTutorial() == true) || (PlayerStatus(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == c_playerStatusActive)))) {
            return false;
        }

        if (!((UnitGroupCount(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), 1), "WorkerTychus");
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "HideWorkerCommandCard", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "WorkerCommanderSelect", 0);
    TechTreeAbilityAllow(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), AbilityCommand("WorkerSelect", 22), true);
    UISetFrameVisible(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_syncFrameTypeInventoryPanel, true);
    UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_localSelectionTypeUnknown, true);
    libFD391A9C_gf_ScoreboardSetIcon(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), Color(100,100,100), "Assets\\Textures\\btn-unit-hero-tychus.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_WorkerSelectTychus_Init () {
    lib1DE23868_gt_WorkerSelectTychus = TriggerCreate("lib1DE23868_gt_WorkerSelectTychus_Func");
    TriggerEnable(lib1DE23868_gt_WorkerSelectTychus, false);
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_WorkerSelectTychus, c_playerAny, "WorkerSelectTychusTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker Select Mengsk
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_WorkerSelectMengsk_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libDDE92A83_gf_GameIsTutorial() == true) || (PlayerStatus(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == c_playerStatusActive)))) {
            return false;
        }

        if (!((UnitGroupCount(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), 1), "WorkerMengsk");
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "HideWorkerCommandCard", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "WorkerCommanderSelect", 0);
    TechTreeAbilityAllow(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), AbilityCommand("WorkerSelect", 22), true);
    UISetFrameVisible(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_syncFrameTypeInventoryPanel, true);
    UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_localSelectionTypeUnknown, true);
    libFD391A9C_gf_ScoreboardSetIcon(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), Color(100,100,100), "Assets\\Textures\\btn-unit-hero-mengsk.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_WorkerSelectMengsk_Init () {
    lib1DE23868_gt_WorkerSelectMengsk = TriggerCreate("lib1DE23868_gt_WorkerSelectMengsk_Func");
    TriggerEnable(lib1DE23868_gt_WorkerSelectMengsk, false);
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_WorkerSelectMengsk, c_playerAny, "WorkerSelectMengskTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker Select Kerrigan
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_WorkerSelectKerrigan_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libDDE92A83_gf_GameIsTutorial() == true) || (PlayerStatus(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == c_playerStatusActive)))) {
            return false;
        }

        if (!((UnitGroupCount(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), 1), "WorkerKerrigan");
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "HideWorkerCommandCard", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "WorkerCommanderSelect", 0);
    TechTreeAbilityAllow(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), AbilityCommand("WorkerSelect", 22), true);
    UISetFrameVisible(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_syncFrameTypeInventoryPanel, true);
    UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_localSelectionTypeUnknown, true);
    libFD391A9C_gf_ScoreboardSetIcon(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), Color(100,100,100), "Assets\\Textures\\btn-unit-hero-kerrigan.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_WorkerSelectKerrigan_Init () {
    lib1DE23868_gt_WorkerSelectKerrigan = TriggerCreate("lib1DE23868_gt_WorkerSelectKerrigan_Func");
    TriggerEnable(lib1DE23868_gt_WorkerSelectKerrigan, false);
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_WorkerSelectKerrigan, c_playerAny, "WorkerSelectKerriganTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker Select Zagara
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_WorkerSelectZagara_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libDDE92A83_gf_GameIsTutorial() == true) || (PlayerStatus(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == c_playerStatusActive)))) {
            return false;
        }

        if (!((UnitGroupCount(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), 1), "WorkerZagara");
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "HideWorkerCommandCard", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "WorkerCommanderSelect", 0);
    TechTreeAbilityAllow(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), AbilityCommand("WorkerSelect", 22), true);
    UISetFrameVisible(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_syncFrameTypeInventoryPanel, true);
    UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_localSelectionTypeUnknown, true);
    libFD391A9C_gf_ScoreboardSetIcon(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), Color(100,100,100), "Assets\\Textures\\btn-unit-hero-zagara.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_WorkerSelectZagara_Init () {
    lib1DE23868_gt_WorkerSelectZagara = TriggerCreate("lib1DE23868_gt_WorkerSelectZagara_Func");
    TriggerEnable(lib1DE23868_gt_WorkerSelectZagara, false);
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_WorkerSelectZagara, c_playerAny, "WorkerSelectZagaraTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker Select Stukov
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_WorkerSelectStukov_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libDDE92A83_gf_GameIsTutorial() == true) || (PlayerStatus(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == c_playerStatusActive)))) {
            return false;
        }

        if (!((UnitGroupCount(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), 1), "WorkerStukov");
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "HideWorkerCommandCard", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "WorkerCommanderSelect", 0);
    TechTreeAbilityAllow(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), AbilityCommand("WorkerSelect", 22), true);
    UISetFrameVisible(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_syncFrameTypeInventoryPanel, true);
    UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_localSelectionTypeUnknown, true);
    libFD391A9C_gf_ScoreboardSetIcon(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), Color(100,100,100), "Assets\\Textures\\btn-unit-hero-stukov.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_WorkerSelectStukov_Init () {
    lib1DE23868_gt_WorkerSelectStukov = TriggerCreate("lib1DE23868_gt_WorkerSelectStukov_Func");
    TriggerEnable(lib1DE23868_gt_WorkerSelectStukov, false);
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_WorkerSelectStukov, c_playerAny, "WorkerSelectStukovTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker Select Abathur
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_WorkerSelectAbathur_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libDDE92A83_gf_GameIsTutorial() == true) || (PlayerStatus(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == c_playerStatusActive)))) {
            return false;
        }

        if (!((UnitGroupCount(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), 1), "WorkerAbathur");
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "HideWorkerCommandCard", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "WorkerCommanderSelect", 0);
    TechTreeAbilityAllow(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), AbilityCommand("WorkerSelect", 22), true);
    UISetFrameVisible(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_syncFrameTypeInventoryPanel, true);
    UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_localSelectionTypeUnknown, true);
    libFD391A9C_gf_ScoreboardSetIcon(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), Color(100,100,100), "Assets\\Textures\\btn-unit-hero-abathur.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_WorkerSelectAbathur_Init () {
    lib1DE23868_gt_WorkerSelectAbathur = TriggerCreate("lib1DE23868_gt_WorkerSelectAbathur_Func");
    TriggerEnable(lib1DE23868_gt_WorkerSelectAbathur, false);
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_WorkerSelectAbathur, c_playerAny, "WorkerSelectAbathurTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker Select Dehaka
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_WorkerSelectDehaka_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libDDE92A83_gf_GameIsTutorial() == true) || (PlayerStatus(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == c_playerStatusActive)))) {
            return false;
        }

        if (!((UnitGroupCount(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), 1), "WorkerDehaka");
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "HideWorkerCommandCard", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "WorkerCommanderSelect", 0);
    TechTreeAbilityAllow(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), AbilityCommand("WorkerSelect", 22), true);
    UISetFrameVisible(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_syncFrameTypeInventoryPanel, true);
    UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_localSelectionTypeUnknown, true);
    libFD391A9C_gf_ScoreboardSetIcon(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), Color(100,100,100), "Assets\\Textures\\btn-unit-hero-dehaka.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_WorkerSelectDehaka_Init () {
    lib1DE23868_gt_WorkerSelectDehaka = TriggerCreate("lib1DE23868_gt_WorkerSelectDehaka_Func");
    TriggerEnable(lib1DE23868_gt_WorkerSelectDehaka, false);
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_WorkerSelectDehaka, c_playerAny, "WorkerSelectDehakaTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker Select Stetmann
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_WorkerSelectStetmann_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libDDE92A83_gf_GameIsTutorial() == true) || (PlayerStatus(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == c_playerStatusActive)))) {
            return false;
        }

        if (!((UnitGroupCount(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib948F000A_gf_ReplaceWorker(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), 1), "WorkerStetmann");
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "HideWorkerCommandCard", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "WorkerCommanderSelect", 0);
    TechTreeAbilityAllow(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), AbilityCommand("WorkerSelect", 22), true);
    UISetFrameVisible(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_syncFrameTypeInventoryPanel, true);
    UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), c_localSelectionTypeUnknown, true);
    libFD391A9C_gf_ScoreboardSetIcon(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), Color(100,100,100), "Assets\\Textures\\btn-unit-hero-stetmann.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_WorkerSelectStetmann_Init () {
    lib1DE23868_gt_WorkerSelectStetmann = TriggerCreate("lib1DE23868_gt_WorkerSelectStetmann_Func");
    TriggerEnable(lib1DE23868_gt_WorkerSelectStetmann, false);
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_WorkerSelectStetmann, c_playerAny, "WorkerSelectStetmannTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tychus Upgrade Transfer
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_gt_TychusUpgradeTransfer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto76A19735_g;
    int auto76A19735_u;
    unit auto76A19735_var;

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib7A9A9B22_gf_StagingAreaSpawners(), EventPlayerEffectUsedUnit(c_effectUnitSource)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto76A19735_g = lib7A9A9B22_gf_StagingAreaSpawns();
    auto76A19735_u = UnitGroupCount(auto76A19735_g, c_unitCountAll);
    for (;; auto76A19735_u -= 1) {
        auto76A19735_var = UnitGroupUnitFromEnd(auto76A19735_g, auto76A19735_u);
        if (auto76A19735_var == null) { break; }
        if ((UnitBehaviorEffectUnit(auto76A19735_var, "UnitSpawnerCasterTrigger", c_effectUnitCaster, 0) == EventPlayerEffectUsedUnit(c_effectUnitCaster))) {
            UnitCreateEffectUnit(auto76A19735_var, EventPlayerEffectUsed(), auto76A19735_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1DE23868_gt_TychusUpgradeTransfer_Init () {
    lib1DE23868_gt_TychusUpgradeTransfer = TriggerCreate("lib1DE23868_gt_TychusUpgradeTransfer_Func");
    TriggerEnable(lib1DE23868_gt_TychusUpgradeTransfer, false);
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusTychusKD9aImplosionCore");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusTychusVanadiumShell");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusTychusKelMorianRipperRounds");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusTychusSureShotNetworkedHelmet");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusSamLarsCorpG7Charges");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusSamMoebiusRestraintMatrix");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusSamProcyonShadeSuit");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusSamEnhancedHostilitiesKit");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusSiriusSA55ThunderboltMissiles");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusSiriusMoebiusM34TerrorRounds");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusSiriusD99Detonator");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusSiriusUmojanTurretFrame");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusBlazeHighCapacityContainers");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusBlazeHadesOil");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusBlazeWildflameFuelAdditives");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusBlazeXCMC670");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusCannonballX71ImpactBoots");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusCannonballCriticalResponseSystem");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusCannonballRedlinePowerCells");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusCannonballMALICEAmmunition");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusRattlesnakeUmojanSignalModulator");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusRattlesnakeMoebiusAggressionBlend");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusRattlesnakeSecretStashStimpack");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusRattlesnakeHammerMunitions");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusVegaPsionicMotivator");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusVegaNeuralDisruptionDevice");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusVegaPsiProjector");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusVegaType88Persuader");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusNuxT4CloudburstShells");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusNuxUltrasonicBooster");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusNuxCrystallineAmplifiers");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusNuxN3Networking");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusNikaraUmojanRepairNanites");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusNikaraProcyonSerum");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusNikaraProcyonTwinHealBeamGauntlet");
    TriggerAddEventPlayerEffectUsed(lib1DE23868_gt_TychusUpgradeTransfer, c_playerAny, "TychusNikaraXM77MatrixGenerator");
}

void lib1DE23868_InitTriggers () {
    lib1DE23868_gt_MineralFieldAutoDepleted_Init();
    lib1DE23868_gt_AbathurBiomass_Init();
    lib1DE23868_gt_VorazunDarkPylon_Init();
    lib1DE23868_gt_ArtanisGuardianShell_Init();
    lib1DE23868_gt_FirehawkPlace_Init();
    lib1DE23868_gt_MountedRailgunPlace_Init();
    lib1DE23868_gt_TridentMissilesPlace_Init();
    lib1DE23868_gt_CapjackPlace_Init();
    lib1DE23868_gt_SiegeDronePlace_Init();
    lib1DE23868_gt_CharAgatePlace_Init();
    lib1DE23868_gt_ZerusPeridotPlace_Init();
    lib1DE23868_gt_TerrazineAmethystPlace_Init();
    lib1DE23868_gt_BelShirSapphirePlace_Init();
    lib1DE23868_gt_UEDTopazPlace_Init();
    lib1DE23868_gt_ShieldOvercharge_Init();
    lib1DE23868_gt_DehakaUpdateXPTrigger_Init();
    lib1DE23868_gt_DehakaScorchingBreathStart_Init();
    lib1DE23868_gt_DehakaScorchingBreathStop_Init();
    lib1DE23868_gt_DehakaScanUse_Init();
    lib1DE23868_gt_DehakaScanBuild_Init();
    lib1DE23868_gt_RaynorScanUse_Init();
    lib1DE23868_gt_RaynorVanadiumPlatingControllerStart_Init();
    lib1DE23868_gt_RaynorBunkerWeaponFunction_Init();
    lib1DE23868_gt_RaynorSupplyDropRework_Init();
    lib1DE23868_gt_CM_Mengsk_MedivacAirlift_Init();
    lib1DE23868_gt_MengskBunkerDepotWeapon_Init();
    lib1DE23868_gt_MengskVeterancy_Init();
    lib1DE23868_gt_MengskVeterancyBonus_Init();
    lib1DE23868_gt_AlarakEmpowerMeBuff_Init();
    lib1DE23868_gt_FenixHeroBonuses_Init();
    lib1DE23868_gt_StetmannBanelingEnergyDamage_Init();
    lib1DE23868_gt_ZeratulDisruptorTriggersEnable_Init();
    lib1DE23868_gt_CM_Zeratul_PurificationNova_Finale_Init();
    lib1DE23868_gt_CM_Zeratul_PurificationNova_Create_Init();
    lib1DE23868_gt_CM_Zeratul_PurificationNova_MainImpact_Init();
    lib1DE23868_gt_PassiveMetaExperience_Init();
    lib1DE23868_gt_KitchenSinkRepick_Init();
    lib1DE23868_gt_TrophyBirth_Init();
    lib1DE23868_gt_KickerMinerals_Init();
    lib1DE23868_gt_StagingAreaWorkerZap_Init();
    lib1DE23868_gt_ObjectiveMinerals_Init();
    lib1DE23868_gt_DeselectSource_Init();
    lib1DE23868_gt_WaveUnitExpire_Init();
    lib1DE23868_gt_PersonanonGrata_Init();
    lib1DE23868_gt_EffectComplete_Init();
    lib1DE23868_gt_RescueStrikeUse_Init();
    lib1DE23868_gt_WorkerSwapGround_Init();
    lib1DE23868_gt_WorkerSwapAir_Init();
    lib1DE23868_gt_MineralAwardKerriganAssimilate_Init();
    lib1DE23868_gt_MineralAwardHybridMerc_Init();
    lib1DE23868_gt_ObjectiveAlertMinorDeath_Init();
    lib1DE23868_gt_ObjectiveAlert75Life_Init();
    lib1DE23868_gt_ObjectiveAlert50Life_Init();
    lib1DE23868_gt_ObjectiveAlert25Life_Init();
    lib1DE23868_gt_HeroSkinSave_Init();
    lib1DE23868_gt_HeroSkinLoad_Init();
    lib1DE23868_gt_SprayCreated_Init();
    lib1DE23868_gt_SpecializeComplete_Init();
    lib1DE23868_gt_AbilityAutocastOn_Init();
    lib1DE23868_gt_AbilityAutocastOff_Init();
    lib1DE23868_gt_TierUpgradeCancel_Init();
    lib1DE23868_gt_NeutralScanScore_Init();
    lib1DE23868_gt_StrikeWeaponryScore_Init();
    lib1DE23868_gt_Tier2UpgradeScore_Init();
    lib1DE23868_gt_Tier3UpgradeScore_Init();
    lib1DE23868_gt_Tier4UpgradeScore_Init();
    lib1DE23868_gt_Tier4Show_Init();
    lib1DE23868_gt_UpgradeAdditions_Init();
    lib1DE23868_gt_UpgradeSpendingScore_Init();
    lib1DE23868_gt_AutoControlGroupProtoss_Init();
    lib1DE23868_gt_AutoControlGroupTerran_Init();
    lib1DE23868_gt_AutoControlGroupZerg_Init();
    lib1DE23868_gt_WorkerSelectProtoss_Init();
    lib1DE23868_gt_WorkerSelectTerran_Init();
    lib1DE23868_gt_WorkerSelectZerg_Init();
    lib1DE23868_gt_WorkerSelectRandomCommander_Init();
    lib1DE23868_gt_WorkerSelectArtanis_Init();
    lib1DE23868_gt_WorkerSelectVorazun_Init();
    lib1DE23868_gt_WorkerSelectKarax_Init();
    lib1DE23868_gt_WorkerSelectAlarak_Init();
    lib1DE23868_gt_WorkerSelectFenix_Init();
    lib1DE23868_gt_WorkerSelectZeratul_Init();
    lib1DE23868_gt_WorkerSelectRaynor_Init();
    lib1DE23868_gt_WorkerSelectSwann_Init();
    lib1DE23868_gt_WorkerSelectNova_Init();
    lib1DE23868_gt_WorkerSelectHorner_Init();
    lib1DE23868_gt_WorkerSelectTychus_Init();
    lib1DE23868_gt_WorkerSelectMengsk_Init();
    lib1DE23868_gt_WorkerSelectKerrigan_Init();
    lib1DE23868_gt_WorkerSelectZagara_Init();
    lib1DE23868_gt_WorkerSelectStukov_Init();
    lib1DE23868_gt_WorkerSelectAbathur_Init();
    lib1DE23868_gt_WorkerSelectDehaka_Init();
    lib1DE23868_gt_WorkerSelectStetmann_Init();
    lib1DE23868_gt_TychusUpgradeTransfer_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1DE23868_InitLib_completed = false;

void lib1DE23868_InitLib () {
    if (lib1DE23868_InitLib_completed) {
        return;
    }

    lib1DE23868_InitLib_completed = true;

    lib1DE23868_InitLibraries();
    lib1DE23868_InitVariables();
    lib1DE23868_InitTriggers();
}

include "LibDDE92A83"
include "Lib29554E00"
include "LibDBB0BE4A"
include "LibFD391A9C"
include "Lib948F000A"
include "Lib7A9A9B22"
include "Lib479C7CBB"
include "Lib39886FE6"

