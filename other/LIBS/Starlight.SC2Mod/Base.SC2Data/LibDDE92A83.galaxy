include "TriggerLibs/NativeLib"
include "Lib29554E00_h"
include "LibFD391A9C_h"
include "Lib948F000A_h"
include "Lib57FF8648_h"
include "Lib7A9A9B22_h"
include "Lib39886FE6_h"
include "Lib64DC5B97_h"

include "LibDDE92A83_h"

//--------------------------------------------------------------------------------------------------
// Library: Starlight Basics
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libDDE92A83_InitLibraries () {
    libNtve_InitVariables();
    lib29554E00_InitVariables();
    libFD391A9C_InitVariables();
    lib948F000A_InitVariables();
    lib57FF8648_InitVariables();
    lib7A9A9B22_InitVariables();
    lib39886FE6_InitVariables();
    lib64DC5B97_InitVariables();
}

// Variable Initialization
bool libDDE92A83_InitVariables_completed = false;

void libDDE92A83_InitVariables () {
    int init_i;

    if (libDDE92A83_InitVariables_completed) {
        return;
    }

    libDDE92A83_InitVariables_completed = true;

    for (init_i = 0; init_i <= 15; init_i += 1) {
        libDDE92A83_gv_playerOrigin[init_i] = RegionGetCenter(RegionPlayableMap());
    }
    libDDE92A83_gv_preparationAttackSoundGroup = PlayerGroupEmpty();
    libDDE92A83_gv_preparationDefendSoundGroup = PlayerGroupEmpty();
    libDDE92A83_gv_preparationDialog = c_invalidDialogId;
    libDDE92A83_gv_preparationTimer = c_invalidDialogControlId;
    libDDE92A83_gv_preparationText = c_invalidDialogControlId;
    libDDE92A83_gv_fullscreenBorderDialog = c_invalidDialogId;
    libDDE92A83_gv_fullscreenBorderGlow = c_invalidDialogControlId;
    libDDE92A83_gv_fullscreenBorderModel = c_invalidDialogControlId;
    libDDE92A83_gv_fullscreenBorderGroup = PlayerGroupEmpty();
    libDDE92A83_gv_waveTimers = UnitGroupEmpty();
    libDDE92A83_gv_originalPlayers = PlayerGroupEmpty();
    libDDE92A83_gv_uIFrameChatBar = c_invalidDialogControlId;
    libDDE92A83_gv_uIFrameChatDisplay = c_invalidDialogControlId;
    libDDE92A83_gv_permanentStructures = UnitGroupEmpty();
    libDDE92A83_gv_allUnitTypesCurrent = -1;
    libDDE92A83_gv_listAllUnits = c_invalidDialogId;
    libDDE92A83_gv_changeUnitCostsAmount = 1.0;
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: Includes
//--------------------------------------------------------------------------------------------------
include "TriggerLibs/VoidMultiLib"
include "TriggerLibs/LibertyLib"

void libDDE92A83_InitCustomScript () {
}

// Functions
void libDDE92A83_gf_StarlightPreparationTime (text lp_text, fixed lp_duration, playergroup lp_attackSoundGroup, playergroup lp_defendSoundGroup, int lp_offsetX, int lp_offsetY) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_attackSoundGroup != PlayerGroupEmpty())) {
        libDDE92A83_gv_preparationAttackSoundGroup = lp_attackSoundGroup;
    }

    if ((lp_defendSoundGroup != PlayerGroupEmpty())) {
        libDDE92A83_gv_preparationDefendSoundGroup = lp_defendSoundGroup;
    }

    libDDE92A83_gv_preparationTime = FixedToInt(lp_duration);
    DialogCreate(2150, 1000, c_anchorCenter, lp_offsetX, lp_offsetY, true);
    libDDE92A83_gv_preparationDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    SoundPlayForPlayer(SoundLink("Athena_PrepareToAttack", -1), c_maxPlayers, libDDE92A83_gv_preparationAttackSoundGroup, 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Athena_PrepareYourDefenses", -1), c_maxPlayers, libDDE92A83_gv_preparationDefendSoundGroup, 100.0, 0.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1600, 100, c_anchorCenter, 0, 0, (StringExternal("Param/Value/lib_DDE92A83_8D8B8FAC") + lp_text), ColorWithAlpha(0,0,0,0), false, 2.0);
    libDDE92A83_gv_preparationText = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 600, PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 100, c_anchorCenter, 0, 50, (StringExternal("Param/Value/lib_DDE92A83_A1B59A65") + IntToText(libDDE92A83_gv_preparationTime)), ColorWithAlpha(0,0,0,0), false, 2.0);
    libDDE92A83_gv_preparationTimer = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 600, PlayerGroupAll());
    TriggerEnable(libDDE92A83_gt_PreparationTimeCountdown, true);
}

void libDDE92A83_gf_StarlightPreparationTimeSetText (playergroup lp_playerGroup, text lp_text) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libDDE92A83_gv_preparationText, (StringExternal("Param/Value/lib_DDE92A83_469D0997") + lp_text), lp_playerGroup);
}

void libDDE92A83_gf_StarlightPreparationTimeEnd () {
    // Variable Declarations
    const fixed lv_fadeTime = 0.5;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogControlFadeTransparency(libDDE92A83_gv_preparationText, PlayerGroupAll(), lv_fadeTime, 100.0);
    DialogControlFadeTransparency(libDDE92A83_gv_preparationTimer, PlayerGroupAll(), lv_fadeTime, 100.0);
    TriggerStop(libDDE92A83_gt_PreparationTimeCountdown);
    TriggerEnable(libDDE92A83_gt_PreparationTimeCountdown, false);
    TriggerExecute(libDDE92A83_gt_PreparationTimeEnd, true, false);
}

trigger auto_libDDE92A83_gf_StarlightFullscreenBorderStart_Trigger = null;

void libDDE92A83_gf_StarlightFullscreenBorderStart () {
    if (auto_libDDE92A83_gf_StarlightFullscreenBorderStart_Trigger == null) {
        auto_libDDE92A83_gf_StarlightFullscreenBorderStart_Trigger = TriggerCreate("auto_libDDE92A83_gf_StarlightFullscreenBorderStart_TriggerFunc");
    }

    TriggerExecute(auto_libDDE92A83_gf_StarlightFullscreenBorderStart_Trigger, false, false);
}

bool auto_libDDE92A83_gf_StarlightFullscreenBorderStart_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    libDDE92A83_gv_fullscreenBorderCreated = true;
    DialogCreate(2150, 1200, c_anchorCenter, 0, 0, true);
    libDDE92A83_gv_fullscreenBorderDialog = DialogLastCreated();
    DialogSetRenderPriority(DialogLastCreated(), 400);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_heroselect_border.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libDDE92A83_gv_fullscreenBorderGlow = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePortrait);
    libDDE92A83_gv_fullscreenBorderModel = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()));
    libNtve_gf_SetDialogItemBorderVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    libNtve_gf_SetDialogItemTransitionModel(DialogControlLastCreated(), "Invisible", PlayerGroupAll());
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
    libNtve_gf_SetDialogItemUseTransition(DialogControlLastCreated(), false, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderType(DialogControlLastCreated(), c_triggerRenderTypeLDR, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 375, PlayerGroupAll());
    libNtve_gf_SetDialogItemModel(libDDE92A83_gv_fullscreenBorderModel, "StarlightBorder", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetSize(libDDE92A83_gv_fullscreenBorderModel, PlayerGroupAll(), 100, 100);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    return true;
}

trigger auto_libDDE92A83_gf_StarlightFullscreenBorder_Trigger = null;
bool auto_libDDE92A83_gf_StarlightFullscreenBorder_lp_birth;
bool auto_libDDE92A83_gf_StarlightFullscreenBorder_lp_fade;
playergroup auto_libDDE92A83_gf_StarlightFullscreenBorder_lp_playerGroup;

void libDDE92A83_gf_StarlightFullscreenBorder (bool lp_birth, bool lp_fade, playergroup lp_playerGroup) {
    auto_libDDE92A83_gf_StarlightFullscreenBorder_lp_birth = lp_birth;
    auto_libDDE92A83_gf_StarlightFullscreenBorder_lp_fade = lp_fade;
    auto_libDDE92A83_gf_StarlightFullscreenBorder_lp_playerGroup = lp_playerGroup;

    if (auto_libDDE92A83_gf_StarlightFullscreenBorder_Trigger == null) {
        auto_libDDE92A83_gf_StarlightFullscreenBorder_Trigger = TriggerCreate("auto_libDDE92A83_gf_StarlightFullscreenBorder_TriggerFunc");
    }

    TriggerExecute(auto_libDDE92A83_gf_StarlightFullscreenBorder_Trigger, false, false);
}

bool auto_libDDE92A83_gf_StarlightFullscreenBorder_TriggerFunc (bool testConds, bool runActions) {
    bool lp_birth = auto_libDDE92A83_gf_StarlightFullscreenBorder_lp_birth;
    bool lp_fade = auto_libDDE92A83_gf_StarlightFullscreenBorder_lp_fade;
    playergroup lp_playerGroup = auto_libDDE92A83_gf_StarlightFullscreenBorder_lp_playerGroup;

    // Variable Declarations
    const fixed lv_fadeTime = 1.0;

    // Automatic Variable Declarations
    bool auto729CC4C8_val;

    // Variable Initialization

    // Implementation
    if ((libDDE92A83_gv_fullscreenBorderCreated == false)) {
        libDDE92A83_gf_StarlightFullscreenBorderStart();
    }

    auto729CC4C8_val = lp_fade;
    if (auto729CC4C8_val == true) {
        DialogControlSetSize(libDDE92A83_gv_fullscreenBorderModel, PlayerGroupAll(), DialogGetWidth(libDDE92A83_gv_fullscreenBorderDialog), DialogGetHeight(libDDE92A83_gv_fullscreenBorderDialog));
        libDDE92A83_gv_fullscreenBorderGroup = lp_playerGroup;
        libDDE92A83_gv_fullscreenBorderBirth = lp_birth;
        TriggerExecute(libDDE92A83_gt_FullscreenBorderFadeDelay, true, false);
    }
    else if (auto729CC4C8_val == false) {
        DialogControlSetSize(libDDE92A83_gv_fullscreenBorderModel, PlayerGroupAll(), DialogGetWidth(libDDE92A83_gv_fullscreenBorderDialog), DialogGetHeight(libDDE92A83_gv_fullscreenBorderDialog));
        DialogControlFadeTransparency(libDDE92A83_gv_fullscreenBorderModel, lp_playerGroup, lv_fadeTime, 100.0);
        DialogControlFadeTransparency(libDDE92A83_gv_fullscreenBorderGlow, lp_playerGroup, lv_fadeTime, 100.0);
    }
    else {
    }
    TriggerExecute(libDDE92A83_gt_FullscreenBorderSizeCheck, true, false);
    return true;
}

playergroup libDDE92A83_gf_OriginalPlayers () {
    // Automatic Variable Declarations
    // Implementation
    return libDDE92A83_gv_originalPlayers;
}

unitgroup libDDE92A83_gf_PlayerWorkers (int lp_player) {
    // Variable Declarations
    unitgroup lv_workerGroup;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto028D8271_g;
    int auto028D8271_u;

    // Variable Initialization
    lv_workerGroup = UnitGroupEmpty();

    // Implementation
    auto028D8271_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterStructure), 0), 0);
    auto028D8271_u = UnitGroupCount(auto028D8271_g, c_unitCountAll);
    for (;; auto028D8271_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto028D8271_g, auto028D8271_u);
        if (lv_unit == null) { break; }
        if ((UnitHasBehavior2(lv_unit, "WorkerSwappable") == true)) {
            UnitGroupAdd(lv_workerGroup, lv_unit);
        }

    }
    return lv_workerGroup;
}

unit libDDE92A83_gf_PlayerWaveTimer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupUnit(UnitGroupFilterPlayer(libDDE92A83_gv_waveTimers, lp_player, 0), 1);
}

bool libDDE92A83_gf_GameIsTutorial () {
    // Automatic Variable Declarations
    // Implementation
    return libDDE92A83_gv_tutorialMode;
}

bool libDDE92A83_gf_GameIsSandbox () {
    // Automatic Variable Declarations
    // Implementation
    return libDDE92A83_gv_sandboxMode;
}

bool libDDE92A83_gf_GameIsUnityMutation () {
    // Automatic Variable Declarations
    // Implementation
    if ((TechTreeUpgradeCount(0, "MutationUnity", c_techCountCompleteOnly) == 1)) {
        return true;
    }
    else {
        return false;
    }
}

bool libDDE92A83_gf_GameisusingAutoMineralFields () {
    // Automatic Variable Declarations
    // Implementation
    if ((TechTreeUpgradeCount(0, "AutoMineralFieldsActive", c_techCountCompleteOnly) == 1)) {
        return true;
    }
    else {
        return false;
    }
}

bool libDDE92A83_gf_PlayerIsTester (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerType(lp_player) == c_playerTypeUser)) {
        if (((PlayerHandle(lp_player) == "1-S2-1-4337146") || (PlayerHandle(lp_player) == "2-S2-1-282190") || (PlayerHandle(lp_player) == "3-S2-1-4278061") || (PlayerHandle(lp_player) == "2-S2-1-3746166") || (PlayerHandle(lp_player) == "2-S2-1-3632637") || (PlayerHandle(lp_player) == "1-S2-1-382411") || (PlayerHandle(lp_player) == "2-S2-1-1488340"))) {
            return true;
        }
        else {
            return false;
        }
    }
    else {
        return false;
    }
}

bool libDDE92A83_gf_PlayerIsMuted (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerType(lp_player) == c_playerTypeUser)) {
        if (((PlayerHandle(lp_player) == "1-S2-1-7659455") || (PlayerHandle(lp_player) == "2-S2-1-3043688") || (PlayerHandle(lp_player) == "2-S2-1-7722915"))) {
            return true;
        }
        else {
            return false;
        }
    }
    else {
        return false;
    }
}

bool libDDE92A83_gf_GameisEU () {
    // Automatic Variable Declarations
    // Implementation
    if ((GameIsTestMap(false) == false) && (StringSub(PlayerHandle(PlayerGroupPlayer(PlayerGroupActive(), 1)), 1, 1) == "2")) {
        return true;
    }
    else {
        return false;
    }
}

bool libDDE92A83_gf_GameisUS () {
    // Automatic Variable Declarations
    // Implementation
    if ((GameIsTestMap(false) == false) && (StringSub(PlayerHandle(PlayerGroupPlayer(PlayerGroupActive(), 1)), 1, 1) == "1")) {
        return true;
    }
    else {
        return false;
    }
}

bool libDDE92A83_gf_GameisKR () {
    // Automatic Variable Declarations
    // Implementation
    if ((GameIsTestMap(false) == false) && (StringSub(PlayerHandle(PlayerGroupPlayer(PlayerGroupActive(), 1)), 1, 1) == "3")) {
        return true;
    }
    else {
        return false;
    }
}

string libDDE92A83_gf_UnitSkin (unit lp_decoration) {
    // Variable Declarations
    string lv_behavior;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((UnitHasBehavior2(lp_decoration, "SkinBiomass") == true) || (UnitHasBehavior2(lp_decoration, "SkinBiomassPrecursor") == true))) {
        lv_behavior = "SkinBiomass";
    }

    if (((UnitHasBehavior2(lp_decoration, "SkinCybros") == true) || (UnitHasBehavior2(lp_decoration, "SkinCybrosPrecursor") == true))) {
        lv_behavior = "SkinCybros";
    }

    if (((UnitHasBehavior2(lp_decoration, "SkinHighlight") == true) || (UnitHasBehavior2(lp_decoration, "SkinHighlightPrecursor") == true))) {
        lv_behavior = "SkinHighlight";
    }

    if (((UnitHasBehavior2(lp_decoration, "SkinHologram") == true) || (UnitHasBehavior2(lp_decoration, "SkinHologramPrecursor") == true))) {
        lv_behavior = "SkinHologram";
    }

    if (((UnitHasBehavior2(lp_decoration, "SkinJade") == true) || (UnitHasBehavior2(lp_decoration, "SkinJadePrecursor") == true))) {
        lv_behavior = "SkinJade";
    }

    if (((UnitHasBehavior2(lp_decoration, "SkinMineral") == true) || (UnitHasBehavior2(lp_decoration, "SkinMineralPrecursor") == true))) {
        lv_behavior = "SkinMineral";
    }

    if (((UnitHasBehavior2(lp_decoration, "SkinPsionic") == true) || (UnitHasBehavior2(lp_decoration, "SkinPsionicPrecursor") == true))) {
        lv_behavior = "SkinPsionic";
    }

    if (((UnitHasBehavior2(lp_decoration, "SkinRedstone") == true) || (UnitHasBehavior2(lp_decoration, "SkinRedstonePrecursor") == true))) {
        lv_behavior = "SkinRedstone";
    }

    if (((UnitHasBehavior2(lp_decoration, "SkinSepia") == true) || (UnitHasBehavior2(lp_decoration, "SkinSepiaPrecursor") == true))) {
        lv_behavior = "SkinSepia";
    }

    if (((UnitHasBehavior2(lp_decoration, "SkinShadow") == true) || (UnitHasBehavior2(lp_decoration, "SkinShadowPrecursor") == true))) {
        lv_behavior = "SkinShadow";
    }

    if (((UnitHasBehavior2(lp_decoration, "SkinSnow") == true) || (UnitHasBehavior2(lp_decoration, "SkinSnowPrecursor") == true))) {
        lv_behavior = "SkinSnow";
    }

    if (((UnitHasBehavior2(lp_decoration, "SkinSolarite") == true) || (UnitHasBehavior2(lp_decoration, "SkinSolaritePrecursor") == true))) {
        lv_behavior = "SkinSolarite";
    }

    if (((UnitHasBehavior2(lp_decoration, "SkinVoid") == true) || (UnitHasBehavior2(lp_decoration, "SkinVoidPrecursor") == true))) {
        lv_behavior = "SkinVoid";
    }

    if ((lv_behavior != null)) {
        return (lv_behavior);
    }
    else {
        return "None";
    }
}

bool libDDE92A83_gf_PersonanonGrata (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerType(lp_player) == c_playerTypeUser)) {
        if (((PlayerHandle(lp_player) == "1-S2-1-11313397"))) {
            return true;
        }
        else {
            return false;
        }
    }
    else {
        return false;
    }
}

void libDDE92A83_gf_DiscordMod () {
    // Automatic Variable Declarations
    playergroup auto1E517F16_g;
    int auto1E517F16_var;

    // Implementation
    auto1E517F16_g = PlayerGroupActive();
    auto1E517F16_var = -1;
    while (true) {
        auto1E517F16_var = PlayerGroupNextPlayer(auto1E517F16_g, auto1E517F16_var);
        if (auto1E517F16_var < 0) { break; }
        if ((PlayerType(auto1E517F16_var) == c_playerTypeUser) && ((PlayerHandle(auto1E517F16_var) == "2-S2-1-1488340") || (PlayerHandle(auto1E517F16_var) == "1-S2-1-6144229") || (PlayerHandle(auto1E517F16_var) == "1-S2-1-9748932") || (PlayerHandle(auto1E517F16_var) == "2-S2-1-7544662") || (PlayerHandle(auto1E517F16_var) == "1-S2-1-8455707"))) {
            libNtve_gf_SetUpgradeLevelForPlayer(auto1E517F16_var, "ModeratorReward", 1);
        }

    }
}

void libDDE92A83_gf_ResetCommander (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((TechTreeUpgradeCount(lp_player, "WorkerCommanderSelect", c_techCountCompleteOnly) == 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ArtanisHighTemplarModification", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ArtanisImmortalModification", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ArtanisPhoenixModification", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "VorazunStalkerModification", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorBansheeModification", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorBattlecruiserModification", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorMarauderModification", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorSiegeTankModification", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorVikingModification", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SwannHellbatModification", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SwannSiegeTankModification", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganBroodLordModification", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganHydraliskModification", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganQueenModification", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZagaraQueenModification", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AbathurQueenModification", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AbathurSwarmHostModification", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AbathurViperModification", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WorkerOverrideAbathur", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WorkerOverrideAlarak", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WorkerOverrideArtanis", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WorkerOverrideDehaka", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WorkerOverrideFenix", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WorkerOverrideHorner", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WorkerOverrideKarax", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WorkerOverrideKerrigan", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WorkerOverrideMengsk", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WorkerOverrideNova", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WorkerOverrideRandomCommander", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WorkerOverrideRaynor", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WorkerOverrideStetmann", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WorkerOverrideStukov", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WorkerOverrideSwann", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WorkerOverrideTest", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WorkerOverrideTychus", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WorkerOverrideVorazun", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WorkerOverrideZagara", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WorkerOverrideZeratul", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WorkerCommanderSelect", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "HideWorkerCommandCard", 1);
        lib64DC5B97_gf_SkinSystemClose(lp_player);
        UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeInventoryPanel, false);
        CatalogFieldValueSet(c_gameCatalogBehavior, "WorkerCommanderSelectTimerPrecursor", "Duration", lp_player, IntToString(999999));
        UnitClearSelection(lp_player);
        UnitSelect(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(lp_player), 1), lp_player, true);
        UISetSelectionTypeEnabled(PlayerGroupSingle(lp_player), c_localSelectionTypeUnknown, false);
    }

}

void libDDE92A83_gf_SandboxModeInfiniteMinerals () {
    // Automatic Variable Declarations
    playergroup autoD817359C_g;
    int autoD817359C_var;

    // Implementation
    if ((TechTreeUpgradeCount(0, "SandboxModeInfiniteMinerals", c_techCountCompleteOnly) >= 1)) {
        autoD817359C_g = PlayerGroupAll();
        autoD817359C_var = -1;
        while (true) {
            autoD817359C_var = PlayerGroupNextPlayer(autoD817359C_g, autoD817359C_var);
            if (autoD817359C_var < 0) { break; }
            PlayerModifyPropertyInt(autoD817359C_var, c_playerPropMinerals, c_playerPropOperSetTo, 9999);
        }
    }

}

trigger auto_libDDE92A83_gf_StarlightAnimation_Trigger = null;
playergroup auto_libDDE92A83_gf_StarlightAnimation_lp_playerGroup;
int auto_libDDE92A83_gf_StarlightAnimation_lp_dialog;
int auto_libDDE92A83_gf_StarlightAnimation_lp_dialogItem;
fixed auto_libDDE92A83_gf_StarlightAnimation_lp_duration;
int auto_libDDE92A83_gf_StarlightAnimation_lp_renderPriority;
int auto_libDDE92A83_gf_StarlightAnimation_lp_size;
string auto_libDDE92A83_gf_StarlightAnimation_lp_model;
int auto_libDDE92A83_gf_StarlightAnimation_lp_repeat;

void libDDE92A83_gf_StarlightAnimation (playergroup lp_playerGroup, int lp_dialog, int lp_dialogItem, fixed lp_duration, int lp_renderPriority, int lp_size, string lp_model, int lp_repeat) {
    auto_libDDE92A83_gf_StarlightAnimation_lp_playerGroup = lp_playerGroup;
    auto_libDDE92A83_gf_StarlightAnimation_lp_dialog = lp_dialog;
    auto_libDDE92A83_gf_StarlightAnimation_lp_dialogItem = lp_dialogItem;
    auto_libDDE92A83_gf_StarlightAnimation_lp_duration = lp_duration;
    auto_libDDE92A83_gf_StarlightAnimation_lp_renderPriority = lp_renderPriority;
    auto_libDDE92A83_gf_StarlightAnimation_lp_size = lp_size;
    auto_libDDE92A83_gf_StarlightAnimation_lp_model = lp_model;
    auto_libDDE92A83_gf_StarlightAnimation_lp_repeat = lp_repeat;

    if (auto_libDDE92A83_gf_StarlightAnimation_Trigger == null) {
        auto_libDDE92A83_gf_StarlightAnimation_Trigger = TriggerCreate("auto_libDDE92A83_gf_StarlightAnimation_TriggerFunc");
    }

    TriggerExecute(auto_libDDE92A83_gf_StarlightAnimation_Trigger, false, false);
}

bool auto_libDDE92A83_gf_StarlightAnimation_TriggerFunc (bool testConds, bool runActions) {
    playergroup lp_playerGroup = auto_libDDE92A83_gf_StarlightAnimation_lp_playerGroup;
    int lp_dialog = auto_libDDE92A83_gf_StarlightAnimation_lp_dialog;
    int lp_dialogItem = auto_libDDE92A83_gf_StarlightAnimation_lp_dialogItem;
    fixed lp_duration = auto_libDDE92A83_gf_StarlightAnimation_lp_duration;
    int lp_renderPriority = auto_libDDE92A83_gf_StarlightAnimation_lp_renderPriority;
    int lp_size = auto_libDDE92A83_gf_StarlightAnimation_lp_size;
    string lp_model = auto_libDDE92A83_gf_StarlightAnimation_lp_model;
    int lp_repeat = auto_libDDE92A83_gf_StarlightAnimation_lp_repeat;

    int init_i;

    // Variable Declarations
    int[6] lv_dialogItem;
    int lv_i;

    // Automatic Variable Declarations
    int autoF66D46AB_ae;
    const int autoF66D46AB_ai = 1;
    int autoAABDD09A_ae;
    const int autoAABDD09A_ai = 1;
    int auto7A9365F3_ae;
    const int auto7A9365F3_ai = 1;
    int autoA2977D0C_ae;
    const int autoA2977D0C_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_dialogItem[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    autoF66D46AB_ae = (lp_repeat - 1);
    lv_i = 0;
    for ( ; ( (autoF66D46AB_ai >= 0 && lv_i <= autoF66D46AB_ae) || (autoF66D46AB_ai < 0 && lv_i >= autoF66D46AB_ae) ) ; lv_i += autoF66D46AB_ai ) {
        DialogControlCreate(lp_dialog, c_triggerControlTypePortrait);
        lv_dialogItem[lv_i] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), lp_playerGroup, true);
        DialogControlSetPositionRelative(DialogControlLastCreated(), lp_playerGroup, c_anchorCenter, lp_dialogItem, c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemRenderType(DialogControlLastCreated(), c_triggerRenderTypeLDR, lp_playerGroup);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), lp_renderPriority, lp_playerGroup);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lp_size, lp_size);
        libNtve_gf_SetDialogItemModel(DialogControlLastCreated(), lp_model, lp_playerGroup);
        libNtve_gf_SetDialogItemAnimation(DialogControlLastCreated(), "Birth", lp_playerGroup);
        libNtve_gf_SetDialogItemBorderVisible(DialogControlLastCreated(), false, lp_playerGroup);
        libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, lp_playerGroup);
        libNtve_gf_SetDialogItemUseTransition(DialogControlLastCreated(), false, lp_playerGroup);
        libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, lp_playerGroup);
    }
    Wait(0.5, c_timeGame);
    autoAABDD09A_ae = (lp_repeat - 1);
    lv_i = 0;
    for ( ; ( (autoAABDD09A_ai >= 0 && lv_i <= autoAABDD09A_ae) || (autoAABDD09A_ai < 0 && lv_i >= autoAABDD09A_ae) ) ; lv_i += autoAABDD09A_ai ) {
        libNtve_gf_SetDialogItemAnimation(lv_dialogItem[lv_i], "Stand", lp_playerGroup);
    }
    Wait(lp_duration, c_timeGame);
    auto7A9365F3_ae = (lp_repeat - 1);
    lv_i = 0;
    for ( ; ( (auto7A9365F3_ai >= 0 && lv_i <= auto7A9365F3_ae) || (auto7A9365F3_ai < 0 && lv_i >= auto7A9365F3_ae) ) ; lv_i += auto7A9365F3_ai ) {
        libNtve_gf_SetDialogItemAnimation(lv_dialogItem[lv_i], "Death", lp_playerGroup);
        DialogControlFadeTransparency(lv_dialogItem[lv_i], lp_playerGroup, 1.0, 100.0);
    }
    Wait(2.0, c_timeGame);
    autoA2977D0C_ae = (lp_repeat - 1);
    lv_i = 0;
    for ( ; ( (autoA2977D0C_ai >= 0 && lv_i <= autoA2977D0C_ae) || (autoA2977D0C_ai < 0 && lv_i >= autoA2977D0C_ae) ) ; lv_i += autoA2977D0C_ai ) {
        DialogControlDestroy(lv_dialogItem[lv_i]);
    }
    return true;
}

void libDDE92A83_gf_RemoveAllUnitsOfUnitType (string lp_unitType) {
    // Automatic Variable Declarations
    unitgroup auto971E33E2_g;
    int auto971E33E2_u;
    unit auto971E33E2_var;

    // Implementation
    auto971E33E2_g = UnitGroup(lp_unitType, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto971E33E2_u = UnitGroupCount(auto971E33E2_g, c_unitCountAll);
    for (;; auto971E33E2_u -= 1) {
        auto971E33E2_var = UnitGroupUnitFromEnd(auto971E33E2_g, auto971E33E2_u);
        if (auto971E33E2_var == null) { break; }
        UnitRemove(auto971E33E2_var);
    }
}

void libDDE92A83_gf_CreateDefensiveArea (playergroup lp_playerGroup, point lp_point) {
    // Automatic Variable Declarations
    playergroup autoF1331BCC_g;
    int autoF1331BCC_var;

    // Implementation
    autoF1331BCC_g = lp_playerGroup;
    autoF1331BCC_var = -1;
    while (true) {
        autoF1331BCC_var = PlayerGroupNextPlayer(autoF1331BCC_g, autoF1331BCC_var);
        if (autoF1331BCC_var < 0) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DefensiveArea", c_unitCreateIgnorePlacement, autoF1331BCC_var, lp_point);
    }
}

void libDDE92A83_gf_SetWorkerAttributes (int lp_player) {
    // Variable Declarations
    fixed lv_workerScale;
    fixed lv_sprayCooldownSpeed;
    fixed lv_emoteCooldownSpeed;
    fixed lv_emoteDuration;

    // Automatic Variable Declarations
    unitgroup auto64061929_g;
    int auto64061929_u;
    unit auto64061929_var;

    // Variable Initialization
    lv_workerScale = (1.0 + (IntToFixed((TechTreeUpgradeCount(lp_player, "MasteryWorkerSize", c_techCountCompleteOnly) + TechTreeUpgradeCount(lp_player, "MasteryWorkerSizeExtra", c_techCountCompleteOnly))) * 0.0025) + (IntToFixed(TechTreeUpgradeCount(lp_player, "MasteryWorkerSizeSmall", c_techCountCompleteOnly)) * 0.0005) + (IntToFixed(TechTreeUpgradeCount(lp_player, "MasteryWorkerSizeSmallx10", c_techCountCompleteOnly)) * 0.005));
    lv_sprayCooldownSpeed = ((IntToFixed((TechTreeUpgradeCount(lp_player, "MasterySprayCooldown", c_techCountCompleteOnly) + TechTreeUpgradeCount(lp_player, "MasterySprayCooldownExtra", c_techCountCompleteOnly))) * 0.01) + (IntToFixed(TechTreeUpgradeCount(lp_player, "MasterySprayCooldownSmall", c_techCountCompleteOnly)) * 0.002) + (IntToFixed(TechTreeUpgradeCount(lp_player, "MasterySprayCooldownSmallx10", c_techCountCompleteOnly)) * 0.02));
    lv_emoteCooldownSpeed = ((IntToFixed((TechTreeUpgradeCount(lp_player, "MasteryEmoteCooldown", c_techCountCompleteOnly) + TechTreeUpgradeCount(lp_player, "MasteryEmoteCooldownExtra", c_techCountCompleteOnly))) * 0.01) + (IntToFixed(TechTreeUpgradeCount(lp_player, "MasteryEmoteCooldownSmall", c_techCountCompleteOnly)) * 0.002) + (IntToFixed(TechTreeUpgradeCount(lp_player, "MasteryEmoteCooldownSmallx10", c_techCountCompleteOnly)) * 0.02));
    lv_emoteDuration = ((IntToFixed((TechTreeUpgradeCount(lp_player, "MasteryEmoteDuration", c_techCountCompleteOnly) + TechTreeUpgradeCount(lp_player, "MasteryEmoteDurationExtra", c_techCountCompleteOnly))) * 0.05) + (IntToFixed(TechTreeUpgradeCount(lp_player, "MasteryEmoteDurationSmall", c_techCountCompleteOnly)) * 0.01) + (IntToFixed(TechTreeUpgradeCount(lp_player, "MasteryEmoteDurationSmallx10", c_techCountCompleteOnly)) * 0.1));

    // Implementation
    auto64061929_g = libDDE92A83_gf_PlayerWorkers(lp_player);
    auto64061929_u = UnitGroupCount(auto64061929_g, c_unitCountAll);
    for (;; auto64061929_u -= 1) {
        auto64061929_var = UnitGroupUnitFromEnd(auto64061929_g, auto64061929_u);
        if (auto64061929_var == null) { break; }
        UnitSetScale(auto64061929_var, (lv_workerScale * 100.0), (lv_workerScale * 100.0), (lv_workerScale * 100.0));
    }
    CatalogFieldValueSet(c_gameCatalogAbil, "SprayItem", "Cost[" + IntToString(0) + "].Charge.TimeUse", lp_player, FixedToString((280.0 / (1.0 + lv_sprayCooldownSpeed)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "SprayItem", "Cost[" + IntToString(0) + "].Charge.TimeStart", lp_player, FixedToString((280.0 / (1.0 + lv_sprayCooldownSpeed)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "EmoteItem", "Cost[" + IntToString(0) + "].Charge.TimeUse", lp_player, FixedToString((140.0 / (1.0 + lv_emoteCooldownSpeed)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "EmoteItem", "Cost[" + IntToString(0) + "].Charge.TimeStart", lp_player, FixedToString((140.0 / (1.0 + lv_emoteCooldownSpeed)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "EmoteVictoryBluePersistent", "PeriodCount", lp_player, IntToString(FixedToInt((10.0 * (1.0 + lv_emoteDuration)))));
    CatalogFieldValueSet(c_gameCatalogEffect, "EmoteVictoryConfettiPersistent", "PeriodCount", lp_player, IntToString(FixedToInt((10.0 * (1.0 + lv_emoteDuration)))));
    CatalogFieldValueSet(c_gameCatalogEffect, "EmoteVictoryRedPersistent", "PeriodCount", lp_player, IntToString(FixedToInt((10.0 * (1.0 + lv_emoteDuration)))));
    CatalogFieldValueSet(c_gameCatalogEffect, "EmoteVictoryYellowPersistent", "PeriodCount", lp_player, IntToString(FixedToInt((10.0 * (1.0 + lv_emoteDuration)))));
    lib7A9A9B22_gf_SetRefineryScale(lp_player);
    libDDE92A83_gf_SetSprayScale(lp_player);
}

void libDDE92A83_gf_SetSprayScale (int lp_player) {
    // Variable Declarations
    fixed lv_size;

    // Automatic Variable Declarations
    unitgroup auto1B5690CD_g;
    int auto1B5690CD_u;
    unit auto1B5690CD_var;

    // Variable Initialization
    lv_size = (100.0 + (IntToFixed(TechTreeUpgradeCount(lp_player, "MasterySpraySize", c_techCountCompleteOnly)) * 0.5) + (IntToFixed(TechTreeUpgradeCount(lp_player, "MasterySpraySizeExtra", c_techCountCompleteOnly)) * 0.5) + (IntToFixed(TechTreeUpgradeCount(lp_player, "MasterySpraySizeSmall", c_techCountCompleteOnly)) * 0.05) + (IntToFixed(TechTreeUpgradeCount(lp_player, "MasterySpraySizeSmallx10", c_techCountCompleteOnly)) * 0.5));

    // Implementation
    if ((libDDE92A83_gv_previousSprayScale[lp_player] != lv_size)) {
        libDDE92A83_gv_previousSprayScale[lp_player] = lv_size;
        auto1B5690CD_g = UnitGroup("SprayDecal", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto1B5690CD_u = UnitGroupCount(auto1B5690CD_g, c_unitCountAll);
        for (;; auto1B5690CD_u -= 1) {
            auto1B5690CD_var = UnitGroupUnitFromEnd(auto1B5690CD_g, auto1B5690CD_u);
            if (auto1B5690CD_var == null) { break; }
            UnitSetScale(auto1B5690CD_var, lv_size, lv_size, lv_size);
            UnitCreateEffectUnit(auto1B5690CD_var, "SprayDecalRefresh", auto1B5690CD_var);
        }
    }

}

void libDDE92A83_gf_SetSprayScaleSingle (int lp_player, unit lp_spray) {
    // Variable Declarations
    fixed lv_size;

    // Automatic Variable Declarations
    unitgroup auto1DA243A8_g;
    int auto1DA243A8_u;
    unit auto1DA243A8_var;

    // Variable Initialization
    lv_size = (100.0 + (IntToFixed(TechTreeUpgradeCount(lp_player, "MasterySpraySize", c_techCountCompleteOnly)) * 0.5) + (IntToFixed(TechTreeUpgradeCount(lp_player, "MasterySpraySizeExtra", c_techCountCompleteOnly)) * 0.5) + (IntToFixed(TechTreeUpgradeCount(lp_player, "MasterySpraySizeSmall", c_techCountCompleteOnly)) * 0.05) + (IntToFixed(TechTreeUpgradeCount(lp_player, "MasterySpraySizeSmallx10", c_techCountCompleteOnly)) * 0.5));

    // Implementation
    auto1DA243A8_g = UnitGroup("SprayDecal", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto1DA243A8_u = UnitGroupCount(auto1DA243A8_g, c_unitCountAll);
    for (;; auto1DA243A8_u -= 1) {
        auto1DA243A8_var = UnitGroupUnitFromEnd(auto1DA243A8_g, auto1DA243A8_u);
        if (auto1DA243A8_var == null) { break; }
        UnitSetScale(auto1DA243A8_var, lv_size, lv_size, lv_size);
        UnitCreateEffectUnit(auto1DA243A8_var, "SprayDecalRefresh", auto1DA243A8_var);
    }
}

void libDDE92A83_gf_AbilityUsageLimitRange (bool lp_toggle, playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    bool autoFA9F57B0_val;
    playergroup autoE22651A3_g;
    int autoE22651A3_var;
    playergroup autoCEE0BFAD_g;
    int autoCEE0BFAD_var;

    // Implementation
    autoFA9F57B0_val = lp_toggle;
    if (autoFA9F57B0_val == true) {
        autoE22651A3_g = lp_playerGroup;
        autoE22651A3_var = -1;
        while (true) {
            autoE22651A3_var = PlayerGroupNextPlayer(autoE22651A3_g, autoE22651A3_var);
            if (autoE22651A3_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(autoE22651A3_var, "AbilityUsageRangeLimit", 1);
        }
    }
    else if (autoFA9F57B0_val == false) {
        autoCEE0BFAD_g = lp_playerGroup;
        autoCEE0BFAD_var = -1;
        while (true) {
            autoCEE0BFAD_var = PlayerGroupNextPlayer(autoCEE0BFAD_g, autoCEE0BFAD_var);
            if (autoCEE0BFAD_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(autoCEE0BFAD_var, "AbilityUsageRangeLimit", 0);
        }
    }
    else {
    }
}

void libDDE92A83_gf_ScreenShakeGlobal () {
    // Automatic Variable Declarations
    playergroup auto988221EC_g;
    int auto988221EC_var;

    // Implementation
    auto988221EC_g = PlayerGroupActive();
    auto988221EC_var = -1;
    while (true) {
        auto988221EC_var = PlayerGroupNextPlayer(auto988221EC_g, auto988221EC_var);
        if (auto988221EC_var < 0) { break; }
        CameraShakeStart(auto988221EC_var, c_cameraPositionTarget, c_cameraDirectionZ, 0.6, 2.0, 100.0, 0.75);
    }
}

void libDDE92A83_gf_CreateWaveTimers () {
    // Automatic Variable Declarations
    playergroup auto313EB3B4_g;
    int auto313EB3B4_var;

    // Implementation
    auto313EB3B4_g = PlayerGroupActive();
    auto313EB3B4_var = -1;
    while (true) {
        auto313EB3B4_var = PlayerGroupNextPlayer(auto313EB3B4_g, auto313EB3B4_var);
        if (auto313EB3B4_var < 0) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "WaveTimer", c_unitCreateIgnorePlacement, auto313EB3B4_var, Point(1.0, 1.0));
        UnitGroupAdd(libDDE92A83_gv_waveTimers, UnitLastCreated());
    }
}

void libDDE92A83_gf_PauseUnpauseWaveTimers (bool lp_pause) {
    // Automatic Variable Declarations
    unitgroup auto13C1894F_g;
    int auto13C1894F_u;
    unit auto13C1894F_var;

    // Implementation
    auto13C1894F_g = libDDE92A83_gv_waveTimers;
    auto13C1894F_u = UnitGroupCount(auto13C1894F_g, c_unitCountAll);
    for (;; auto13C1894F_u -= 1) {
        auto13C1894F_var = UnitGroupUnitFromEnd(auto13C1894F_g, auto13C1894F_u);
        if (auto13C1894F_var == null) { break; }
        libNtve_gf_PauseUnit(auto13C1894F_var, lp_pause);
    }
}

void libDDE92A83_gf_FadeSounds (bool lp_fade, bool lp_fadeMusic, playergroup lp_playerGroup, fixed lp_fadedVolume, fixed lp_fadeDuration) {
    // Automatic Variable Declarations
    bool auto429CC4B4_val;
    bool autoB835A524_val;

    // Implementation
    auto429CC4B4_val = lp_fade;
    if (auto429CC4B4_val == true) {
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryCombat, lp_fadedVolume, lp_fadeDuration);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAmbient, lp_fadedVolume, lp_fadeDuration);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySpell, lp_fadedVolume, lp_fadeDuration);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySpellOneshotImpact, lp_fadedVolume, lp_fadeDuration);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySpellOneshotLaunch, lp_fadedVolume, lp_fadeDuration);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDoodad, lp_fadedVolume, lp_fadeDuration);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFlames, lp_fadedVolume, lp_fadeDuration);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDeath, lp_fadedVolume, lp_fadeDuration);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, lp_fadedVolume, lp_fadeDuration);
    }
    else if (auto429CC4B4_val == false) {
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryCombat, 100.0, lp_fadeDuration);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAmbient, 100.0, lp_fadeDuration);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySpell, 100.0, lp_fadeDuration);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySpellOneshotImpact, 100.0, lp_fadeDuration);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySpellOneshotLaunch, 100.0, lp_fadeDuration);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDoodad, 100.0, lp_fadeDuration);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFlames, 100.0, lp_fadeDuration);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDeath, 100.0, lp_fadeDuration);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 100.0, lp_fadeDuration);
    }
    else {
    }
    autoB835A524_val = lp_fadeMusic;
    if (autoB835A524_val == true) {
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMusic, lp_fadedVolume, lp_fadeDuration);
    }
    else if (autoB835A524_val == false) {
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMusic, 100.0, lp_fadeDuration);
    }
    else {
    }
}

void libDDE92A83_gf_SetOriginPoints (playergroup lp_playerGroup, point lp_point1, point lp_point2, point lp_point3, point lp_point4, point lp_point5, point lp_point6, point lp_point7, point lp_point8, point lp_point9, point lp_point10, point lp_point11, point lp_point12, point lp_point13, point lp_point14) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupCount(lp_playerGroup) >= 1) && (lp_point1 != null)) {
        libDDE92A83_gv_playerOrigin[PlayerGroupPlayer(lp_playerGroup, 1)] = lp_point1;
        if ((PlayerGroupCount(lp_playerGroup) >= 2) && (lp_point2 != null)) {
            libDDE92A83_gv_playerOrigin[PlayerGroupPlayer(lp_playerGroup, 2)] = lp_point2;
            if ((PlayerGroupCount(lp_playerGroup) >= 3) && (lp_point3 != null)) {
                libDDE92A83_gv_playerOrigin[PlayerGroupPlayer(lp_playerGroup, 3)] = lp_point3;
                if ((PlayerGroupCount(lp_playerGroup) >= 4) && (lp_point4 != null)) {
                    libDDE92A83_gv_playerOrigin[PlayerGroupPlayer(lp_playerGroup, 4)] = lp_point4;
                    if ((PlayerGroupCount(lp_playerGroup) >= 5) && (lp_point5 != null)) {
                        libDDE92A83_gv_playerOrigin[PlayerGroupPlayer(lp_playerGroup, 5)] = lp_point5;
                        if ((PlayerGroupCount(lp_playerGroup) >= 6) && (lp_point6 != null)) {
                            libDDE92A83_gv_playerOrigin[PlayerGroupPlayer(lp_playerGroup, 6)] = lp_point6;
                            if ((PlayerGroupCount(lp_playerGroup) >= 7) && (lp_point7 != null)) {
                                libDDE92A83_gv_playerOrigin[PlayerGroupPlayer(lp_playerGroup, 7)] = lp_point7;
                                if ((PlayerGroupCount(lp_playerGroup) >= 8) && (lp_point8 != null)) {
                                    libDDE92A83_gv_playerOrigin[PlayerGroupPlayer(lp_playerGroup, 8)] = lp_point8;
                                    if ((PlayerGroupCount(lp_playerGroup) >= 9) && (lp_point9 != null)) {
                                        libDDE92A83_gv_playerOrigin[PlayerGroupPlayer(lp_playerGroup, 9)] = lp_point9;
                                        if ((PlayerGroupCount(lp_playerGroup) >= 10) && (lp_point10 != null)) {
                                            libDDE92A83_gv_playerOrigin[PlayerGroupPlayer(lp_playerGroup, 10)] = lp_point10;
                                            if ((PlayerGroupCount(lp_playerGroup) >= 11) && (lp_point11 != null)) {
                                                libDDE92A83_gv_playerOrigin[PlayerGroupPlayer(lp_playerGroup, 11)] = lp_point11;
                                                if ((PlayerGroupCount(lp_playerGroup) >= 12) && (lp_point12 != null)) {
                                                    libDDE92A83_gv_playerOrigin[PlayerGroupPlayer(lp_playerGroup, 12)] = lp_point12;
                                                    if ((PlayerGroupCount(lp_playerGroup) >= 13) && (lp_point13 != null)) {
                                                        libDDE92A83_gv_playerOrigin[PlayerGroupPlayer(lp_playerGroup, 13)] = lp_point13;
                                                        if ((PlayerGroupCount(lp_playerGroup) >= 14) && (lp_point14 != null)) {
                                                            libDDE92A83_gv_playerOrigin[PlayerGroupPlayer(lp_playerGroup, 14)] = lp_point14;
                                                        }

                                                    }

                                                }

                                            }

                                        }

                                    }

                                }

                            }

                        }

                    }

                }

            }

        }

    }

}

void libDDE92A83_gf_RebuildPermanentStructures (int lp_player) {
    // Automatic Variable Declarations
    unitgroup autoEE973112_g;
    int autoEE973112_u;
    unit autoEE973112_var;
    unitgroup autoE93903D9_g;
    int autoE93903D9_u;
    unit autoE93903D9_var;

    // Implementation
    if ((libDDE92A83_gv_gameOver == false)) {
        autoEE973112_g = UnitGroupFilter(null, lp_player, libDDE92A83_gv_permanentStructures, UnitFilter(0, (1 << (c_targetFilterDead - 32)), 0, (1 << (c_targetFilterSummoned - 32))), 0);
        autoEE973112_u = UnitGroupCount(autoEE973112_g, c_unitCountAll);
        for (;; autoEE973112_u -= 1) {
            autoEE973112_var = UnitGroupUnitFromEnd(autoEE973112_g, autoEE973112_u);
            if (autoEE973112_var == null) { break; }
            if ((UnitHasBehavior2(autoEE973112_var, "PermanentStructure") == true)) {
                UnitSetPropertyFixed(autoEE973112_var, c_unitPropLifePercent, 100.0);
                UnitSetPropertyFixed(autoEE973112_var, c_unitPropShieldsPercent, 100.0);
            }

        }
        autoE93903D9_g = UnitGroupFilter(null, lp_player, libDDE92A83_gv_permanentStructures, UnitFilter(0, (1 << (c_targetFilterDead - 32)), 0, (1 << (c_targetFilterSummoned - 32))), 0);
        autoE93903D9_u = UnitGroupCount(autoE93903D9_g, c_unitCountAll);
        for (;; autoE93903D9_u -= 1) {
            autoE93903D9_var = UnitGroupUnitFromEnd(autoE93903D9_g, autoE93903D9_u);
            if (autoE93903D9_var == null) { break; }
            if ((UnitHasBehavior2(autoE93903D9_var, "PermanentStructure") == true)) {
                libNtve_gf_SendActorMessageToUnit(autoE93903D9_var, "Destroy Immediate");
                UnitRevive(autoE93903D9_var);
                UnitBehaviorRemoveCategory(autoE93903D9_var, c_unitBehaviorFlagStun);
                UnitBehaviorRemoveCategory(autoE93903D9_var, c_unitBehaviorFlagTemporary);
                UnitSetPropertyFixed(autoE93903D9_var, c_unitPropLifePercent, 100.0);
                UnitSetPropertyFixed(autoE93903D9_var, c_unitPropShieldsPercent, 100.0);
                UnitSetPropertyFixed(autoE93903D9_var, c_unitPropEnergy, UnitTypeGetProperty(UnitGetType(autoE93903D9_var), c_unitPropEnergy));
            }

        }
    }

}

void libDDE92A83_gf_RemovePermanentStructures (int lp_player) {
    // Automatic Variable Declarations
    unitgroup auto99B398E2_g;
    int auto99B398E2_u;
    unit auto99B398E2_var;
    unitgroup auto02218992_g;
    int auto02218992_u;
    unit auto02218992_var;

    // Implementation
    auto99B398E2_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), (1 << (c_targetFilterDead - 32)), 0, (1 << (c_targetFilterSummoned - 32))), 0);
    auto99B398E2_u = UnitGroupCount(auto99B398E2_g, c_unitCountAll);
    for (;; auto99B398E2_u -= 1) {
        auto99B398E2_var = UnitGroupUnitFromEnd(auto99B398E2_g, auto99B398E2_u);
        if (auto99B398E2_var == null) { break; }
        if ((UnitHasBehavior2(auto99B398E2_var, "PermanentStructure") == true)) {
            UnitBehaviorRemove(auto99B398E2_var, "PermanentStructure", 1);
            UnitRemove(auto99B398E2_var);
        }

    }
    auto02218992_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, (1 << (c_targetFilterSummoned - 32))), 0);
    auto02218992_u = UnitGroupCount(auto02218992_g, c_unitCountAll);
    for (;; auto02218992_u -= 1) {
        auto02218992_var = UnitGroupUnitFromEnd(auto02218992_g, auto02218992_u);
        if (auto02218992_var == null) { break; }
        if ((UnitHasBehavior2(auto02218992_var, "PermanentStructure") == true)) {
            UnitBehaviorRemove(auto02218992_var, "PermanentStructure", 1);
            UnitBehaviorAdd(auto02218992_var, "UnitSuicideCrystal", auto02218992_var, 1);
        }

    }
}

void libDDE92A83_gf_AddMidControlScore (playergroup lp_playerGroup, fixed lp_time) {
    // Automatic Variable Declarations
    playergroup auto861C0B64_g;
    int auto861C0B64_var;

    // Implementation
    auto861C0B64_g = lp_playerGroup;
    auto861C0B64_var = -1;
    while (true) {
        auto861C0B64_var = PlayerGroupNextPlayer(auto861C0B64_g, auto861C0B64_var);
        if (auto861C0B64_var < 0) { break; }
        PlayerScoreValueSetFromFixed(auto861C0B64_var, "SecondsOwnedMid", (PlayerScoreValueGetAsFixed(auto861C0B64_var, "SecondsOwnedMid") + lp_time));
    }
}

void libDDE92A83_gf_ToggleUpgradesSC2Multi (playergroup lp_players, int lp_level) {
    // Automatic Variable Declarations
    playergroup auto492FF311_g;
    int auto492FF311_var;

    // Implementation
    auto492FF311_g = lp_players;
    auto492FF311_var = -1;
    while (true) {
        auto492FF311_var = PlayerGroupNextPlayer(auto492FF311_g, auto492FF311_var);
        if (auto492FF311_var < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "Charge", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "BlinkTech", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "ObserverGraviticBooster", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "PhoenixRangeUpgrade", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "PsiStormTech", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "ExtendedThermalLance", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "CarrierLaunchSpeedUpgrade", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "AdeptPiercingAttack", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "DarkTemplarBlinkUpgrade", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "VoidRaySpeedUpgrade", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "ShieldWall", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "PunisherGrenades", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "HighCapacityBarrels", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "MedivacCaduceusReactor", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "DrillClaws", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "RavenCorvidReactor", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "TerranBuildingArmor", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "HiSecAutoTracking", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "BattlecruiserBehemothReactor", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "Stimpack", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "GhostMoebiusReactor", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "EnhancedShockwaves", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "BansheeCloak", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "BattlecruiserEnableSpecializations", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "CycloneRapidFireLaunchers", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "RavenEnhancedMunitions", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "BansheeSpeed", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "LiberatorAGRangeUpgrade", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "NeosteelFrame", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "MedivacIncreaseSpeedBoost", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "PersonalCloaking", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "zerglingmovementspeed", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "zerglingattackspeed", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "CentrificalHooks", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "GlialReconstitution", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "TunnelingClaws", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "EvolveMuscularAugments", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "InfestorEnergyUpgrade", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "NeuralParasite", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "overlordspeed", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "LocustLifetimeIncrease", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "ChitinousPlating", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "AnabolicSynthesis", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "EvolveGroovedSpines", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "DiggingClaws", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto492FF311_var, "LurkerRange", lp_level);
    }
}

void libDDE92A83_gf_ToggleUpgradesSC2Coop (playergroup lp_players, int lp_level) {
    // Automatic Variable Declarations
    playergroup auto5797AFE2_g;
    int auto5797AFE2_var;

    // Implementation
    auto5797AFE2_g = lp_players;
    auto5797AFE2_var = -1;
    while (true) {
        auto5797AFE2_var = PlayerGroupNextPlayer(auto5797AFE2_g, auto5797AFE2_var);
        if (auto5797AFE2_var < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "AlarakImposingPresence", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "AlarakTelekinesis", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HavocBloodshardResonance", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HavocCloakingModule", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "VanguardFusionMortars", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "VanguardMatterDispersion", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "WrathwalkerAerialTracking", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "WrathwalkerPowerCycling", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "AscendantMindBlast", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "AscendantChaoticAttunement", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "SupplicantBloodShields", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "SupplicantSoulAugmentation", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "SupplicantStarlightAirAttack", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "SlayerPhasingArmor", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "AscendantPowerOverwhelming", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HavocDetectWeakness", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "GlialReconstitution", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "overlordspeed", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "VileRoachHydriodicBile", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "VileRoachAdaptivePlating", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "SwarmQueenBioMechanicalTransfusion", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "RavagerBloatedBileDucts", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "RavagerBloatedBileDucts", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "RavagerPotentBile", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "DevourerCorrosiveSpray", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "SwarmHostPressurizedGlands", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "ViperVirulentMicrobes", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "GuardianProlongedDispersion", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "BroodMutaliskSunderingGlave", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "ZealotWhirlwind", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "DragoonTrillicCompressionMesh", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "DragoonSingularityCharge", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "PhoenixDoubleGravitonBeam", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HighTemplarPlasmaSurge", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HighTemplarKhaydarinAmulet", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "ImmortalImprovedBarrier", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "ReaverScarabHousing", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "ReaverSolaritePayload", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "PurifierTempestDisintegration", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "ScoutCombatSensorArray", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "FenixObservationProtocol", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "FenixPurifierArmaments", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "LegionnaireCharge", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "KaldalisEmpoweredBlades", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "AdeptPsionicProjection", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "TalisDebilitationSystem", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "TaldarinGravimetricOverload", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "WarbringerPurificationBlast", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "ClolarionInterdictors", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "MojoSuppressionProcedure", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "ConservatorOptimizedEmitters", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "DisruptorCloakingModule", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "DisruptorPurificationEcho", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "FenixExtendedThermalLance", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "MiragePhasingArmor", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "AdvancedRepairSystems", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "SentinelReconstruction", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "EnergizerRapidRecharging", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "EnergizerReclamationStarlight", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "ImmortalShadowCannon", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "AiurCarrierRepairDrones", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "FortificationBarrier", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "OptimizedOrdnance", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "PurifierColossusFireBeam", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "EnhancedTargeting", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "AiurCarrierLaunchSpeedUpgrade", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "ZerglingHardenedCarapace", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "ZerglingShreddingClaws", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "MutaliskRapidRegeneration", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "MuscularAugmentsKerrigan", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HydraliskFrenzyKerrigan", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HydraliskAncillaryCarapace", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "BroodMutaliskViciousGlave", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "BroodMutaliskSeveringGlave", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "LurkerSeismicSpines", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "UltraliskBurrowCharge", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "BroodLordPorousCartilage", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "UltraliskTissueAssimilation", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "KerriganHeroicFortitude", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "KerriganFury", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "KerriganChainReaction", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "KerriganAbilityEfficiency", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "EliteMarineSuperStimpack", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "EliteMarineLaserTargetingSystem", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "MarauderCommandoSuppressionShells", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HellbatRangerJumpJetAssault", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HellbatRangerInfernalPreIgniter", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "SpecOpsGhostEMPRound", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "SpecOpsGhostTripleTap", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "StrikeGoliathAresClassTargetingSystem", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "StrikeGoliathLockdownMissiles", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HeavySiegeTankGraduatingRange", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "RaidLiberatorSmartServos", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "CovertBansheeAdvancedCloakingField", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "MarauderCommandoMagrailMunitions", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "NovaCaduceusReactor", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "NovaGhostVisor", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "NovaCovertTriage", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "Stimpack", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "BattlecruiserEnableSpecializations", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "VanadiumPlatingController", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "VanadiumPlatingInfantry", 3);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "VanadiumPlatingVehicles", 3);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "VikingPhobosWeaponsSystem", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "VikingRipwaveMissiles", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "BansheeShockwaveMissileBattery", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "RaynorAfterburners", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "VehicleAdvancedOptics", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "MedicStabilizerMedpacks", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "SiegeTankAdvancedSiegeTech", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "VultureReplenishableMagazine", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "VultureCerberusMine", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "FirebatIncineratorGauntlets", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "FirebatJuggernautPlatingStarlight", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "InfestedCivilianAnaerobicEnhancement", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "InfestedCivilianBroodlingGestation", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "InfestedMarinePlaguedMunitions", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "InfestedMarineRetinalAugmentation", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "InfestedDiamondbackSaturatedCultures", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "InfestedSiegeTankAcidicEnzymes", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "InfestedBansheeRapidHibernation", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "InfestedBansheeBracedExoskeleton", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "InfestedLiberatorViralContamination", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "BroodQueenEnhancedMitochondria", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "InfestStructureAggressiveIncubation", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "InfestedBunkerCalcifiedArmor", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "StukovAleksanderCrash", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "WraithPulseAmplifier", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "CloakDistortionField", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HellbatInfernalPlating", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "AresClassWeaponsSystem", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "MultilockTargetingSystems", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "SwannRegenerativeBioSteel", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "MaelstromRounds", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "CycloneLockOnRangeUpgrade", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "CycloneLockOnDamageUpgrade", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "ScienceVesselImprovedNanoRepair", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "ScienceVesselDefensiveMatrix", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "Thor330mmBarrageCannon", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "SwannCycloneTargetingOptics", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "SwannCycloneMagFieldAccelerator", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "StalkerPhaseReactor", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "CenturionShadowCharge", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "CenturionDarkcoil", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "DarkTemplarShadowFury", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "DarkTemplarVoidStasis", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "OracleStasisCalibration", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "CorsairDisruptionWebStarlight", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "CorsairStealthDrive", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "VoidRayPrismaticRangeStarlight", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "DarkArchonMindControlStarlight", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "DarkArchonArgusCrystal", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "ZagaraHeroicFortitude", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "ZagaraQueenModification", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "SplitterlingCorrosiveAcid", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "SplitterlingRupture", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "AberrationProtectiveCover", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "ScourgeVirulentSpores", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "BileLauncherArtilleryDucts", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "ZagaraMedusaBlades", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "DehakaCreeperHostAerialBurstSacs", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "DehakaImpalerTenderizeStarlight", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "DehakaPrimalGuardianExplosiveSpores", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "DehakaPrimalGuardianPrimordialFury", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "DehakaPrimalHydraliskMuscularAugments", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "DehakaPrimalIgniterConcentratedFire", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "DehakaPrimalMutaliskPrimalReconstitution", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "DehakaPrimalMutaliskShiftingCarapace", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "DehakaPrimalMutaliskSlicingGlave", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "DehakaPrimalRavasaurDissolvingAcid", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "DehakaPrimalRavasaurEnlargedParotidGlands", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "DehakaPrimalRoachGlialReconstitution", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "DehakaPrimalUltraliskBrutalCharge", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "DehakaPrimalUltraliskHealingAdaptation", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "DehakaPrimalUltraliskImpalingStrike", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "DehakaTyrannozorBarrageofSpikes", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "DehakaTyrannozorTyrantsProtection", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HornerAsteriaWraithTriggerOverride", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HornerAsteriaWraithUnregisteredCloakingSystem", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HornerDeimosVikingShredderRounds", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HornerDeimosVikingWILDMissiles", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HornerHellbatImmolationFluid", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HornerHellbatWildfireExplosives", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HornerHellionAerosolStimEmitters", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HornerHellionTarBombs", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HornerReaperJetPackOverdrive", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HornerReaperLD9ClusterCharges", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HornerSovereignBattlecruiserOverchargedReactor", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HornerTacticalJump", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HornerTheiaRavenMultiThreadedSensors", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HornerWidowMineBlackMarketLaunchers", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HornerWidowMineExecutionerMissiles", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HornerStrikeFighterNapalmPayload", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "ZerglingStetmannMovementSpeed", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "ZerglingStetmannHardenedShield", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "ZerglingStetmannAttackSpeed", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "BanelingStetmannMovementSpeed", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "BanelingStetmannManaShieldBonus", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "BanelingStetmannExtraDamage", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HydraliskStetmannMovementSpeed", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HydraliskStetmannDamage", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "HydraliskStetmannRange", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "LurkerStetmannTunnelingBurstRange", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "LurkerStetmannChannelingSpines", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "InfestorStetmannRecharge", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "InfestorStetmannBonusRavager", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "CorruptorStetmannBiggerAoE", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "CorruptorStetmannCausticSpray", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "UltraliskBurrowChargeMechanicalStun", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "UltraliskStetmannMechanicalLifeLeech", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "UltraliskStetmannArmor", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "BroodLordStetmannBombers", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "BroodLordStetmannYamato", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "MarauderMengskSlow", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "MengskStructureArmor", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "BunkerDepotMengskRange", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "MedivacMengskDoubleHealBeam", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "MedivacMengskPermanentCloak", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "MedivacMengskSiegeTankAirlift", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "MechTransformationSpeedMengsk", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "VikingMengskSpeed", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "ThorMengskArmorAura", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "BattlecruiserMengskRangeAura", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "ArtilleryMengskRange", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "ArtilleryMengskGarrison1", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "ArtilleryMengskGarrison2", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(auto5797AFE2_var, "ArtilleryMengskGarrison3", lp_level);
    }
}

void libDDE92A83_gf_ToggleUpgradesSC2CoopNoAffectingMelee (playergroup lp_players, int lp_level) {
    // Automatic Variable Declarations
    playergroup autoFFA57C4F_g;
    int autoFFA57C4F_var;

    // Implementation
    autoFFA57C4F_g = lp_players;
    autoFFA57C4F_var = -1;
    while (true) {
        autoFFA57C4F_var = PlayerGroupNextPlayer(autoFFA57C4F_g, autoFFA57C4F_var);
        if (autoFFA57C4F_var < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "AlarakImposingPresence", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "AlarakTelekinesis", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "HavocBloodshardResonance", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "HavocCloakingModule", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "VanguardFusionMortars", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "VanguardMatterDispersion", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "WrathwalkerAerialTracking", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "WrathwalkerPowerCycling", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "AscendantMindBlast", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "AscendantChaoticAttunement", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "SupplicantBloodShields", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "SupplicantSoulAugmentation", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "SupplicantStarlightAirAttack", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "SlayerPhasingArmor", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "AscendantPowerOverwhelming", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "HavocDetectWeakness", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "GlialReconstitution", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "overlordspeed", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "VileRoachHydriodicBile", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "VileRoachAdaptivePlating", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "SwarmQueenBioMechanicalTransfusion", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "DevourerCorrosiveSpray", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "GuardianProlongedDispersion", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "ZealotWhirlwind", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "DragoonTrillicCompressionMesh", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "DragoonSingularityCharge", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "ReaverScarabHousing", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "ReaverSolaritePayload", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "PurifierTempestDisintegration", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "ScoutCombatSensorArray", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "FenixObservationProtocol", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "FenixPurifierArmaments", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "LegionnaireCharge", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "KaldalisEmpoweredBlades", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "AdeptPsionicProjection", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "TalisDebilitationSystem", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "TaldarinGravimetricOverload", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "WarbringerPurificationBlast", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "ClolarionInterdictors", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "MojoSuppressionProcedure", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "ConservatorOptimizedEmitters", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "DisruptorCloakingModule", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "DisruptorPurificationEcho", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "FenixExtendedThermalLance", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "MiragePhasingArmor", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "AdvancedRepairSystems", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "SentinelReconstruction", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "EnergizerRapidRecharging", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "EnergizerReclamationStarlight", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "ImmortalShadowCannon", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "AiurCarrierRepairDrones", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "FortificationBarrier", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "PurifierColossusFireBeam", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "KerriganHeroicFortitude", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "KerriganFury", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "KerriganChainReaction", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "KerriganAbilityEfficiency", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "EliteMarineSuperStimpack", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "EliteMarineLaserTargetingSystem", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "MarauderCommandoSuppressionShells", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "HellbatRangerJumpJetAssault", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "HellbatRangerInfernalPreIgniter", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "SpecOpsGhostEMPRound", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "SpecOpsGhostTripleTap", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "StrikeGoliathAresClassTargetingSystem", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "StrikeGoliathLockdownMissiles", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "HeavySiegeTankGraduatingRange", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "RaidLiberatorSmartServos", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "CovertBansheeAdvancedCloakingField", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "MarauderCommandoMagrailMunitions", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "NovaCaduceusReactor", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "NovaGhostVisor", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "NovaCovertTriage", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "InfestedCivilianAnaerobicEnhancement", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "InfestedCivilianBroodlingGestation", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "InfestedMarinePlaguedMunitions", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "InfestedMarineRetinalAugmentation", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "InfestedDiamondbackSaturatedCultures", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "InfestedSiegeTankAcidicEnzymes", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "InfestedBansheeRapidHibernation", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "InfestedBansheeBracedExoskeleton", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "InfestedLiberatorViralContamination", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "BroodQueenEnhancedMitochondria", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "InfestStructureAggressiveIncubation", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "InfestedBunkerCalcifiedArmor", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "StukovAleksanderCrash", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "CenturionShadowCharge", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "CenturionDarkcoil", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "DarkTemplarShadowFury", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "DarkTemplarVoidStasis", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "CorsairDisruptionWebStarlight", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "CorsairStealthDrive", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "DarkArchonMindControlStarlight", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "DarkArchonArgusCrystal", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "ZagaraHeroicFortitude", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "ZagaraQueenModification", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "SplitterlingCorrosiveAcid", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "SplitterlingRupture", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "AberrationProtectiveCover", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "ScourgeVirulentSpores", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "BileLauncherArtilleryDucts", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "ZagaraMedusaBlades", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "DehakaCreeperHostAerialBurstSacs", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "DehakaImpalerTenderizeStarlight", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "DehakaPrimalGuardianExplosiveSpores", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "DehakaPrimalGuardianPrimordialFury", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "DehakaPrimalHydraliskMuscularAugments", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "DehakaPrimalIgniterConcentratedFire", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "DehakaPrimalMutaliskPrimalReconstitution", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "DehakaPrimalMutaliskShiftingCarapace", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "DehakaPrimalMutaliskSlicingGlave", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "DehakaPrimalRavasaurDissolvingAcid", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "DehakaPrimalRavasaurEnlargedParotidGlands", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "DehakaPrimalRoachGlialReconstitution", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "DehakaPrimalUltraliskBrutalCharge", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "DehakaPrimalUltraliskHealingAdaptation", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "DehakaPrimalUltraliskImpalingStrike", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "DehakaTyrannozorBarrageofSpikes", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "DehakaTyrannozorTyrantsProtection", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "HornerAsteriaWraithTriggerOverride", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "HornerAsteriaWraithUnregisteredCloakingSystem", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "HornerDeimosVikingShredderRounds", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "HornerDeimosVikingWILDMissiles", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "HornerHellbatImmolationFluid", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "HornerHellbatWildfireExplosives", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "HornerHellionAerosolStimEmitters", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "HornerHellionTarBombs", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "HornerReaperJetPackOverdrive", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "HornerReaperLD9ClusterCharges", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "HornerSovereignBattlecruiserOverchargedReactor", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "HornerTacticalJump", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "HornerTheiaRavenMultiThreadedSensors", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "HornerWidowMineBlackMarketLaunchers", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "HornerWidowMineExecutionerMissiles", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "HornerStrikeFighterNapalmPayload", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "ZerglingStetmannMovementSpeed", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "ZerglingStetmannHardenedShield", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "ZerglingStetmannAttackSpeed", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "BanelingStetmannMovementSpeed", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "BanelingStetmannManaShieldBonus", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "BanelingStetmannExtraDamage", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "HydraliskStetmannMovementSpeed", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "HydraliskStetmannDamage", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "HydraliskStetmannRange", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "LurkerStetmannTunnelingBurstRange", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "LurkerStetmannChannelingSpines", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "InfestorStetmannRecharge", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "InfestorStetmannBonusRavager", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "CorruptorStetmannBiggerAoE", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "CorruptorStetmannCausticSpray", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "UltraliskBurrowChargeMechanicalStun", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "UltraliskStetmannMechanicalLifeLeech", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "UltraliskStetmannArmor", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "BroodLordStetmannBombers", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "BroodLordStetmannYamato", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "MarauderMengskSlow", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "MengskStructureArmor", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "BunkerDepotMengskRange", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "MedivacMengskDoubleHealBeam", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "MedivacMengskPermanentCloak", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "MedivacMengskSiegeTankAirlift", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "MechTransformationSpeedMengsk", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "VikingMengskSpeed", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "ThorMengskArmorAura", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "BattlecruiserMengskRangeAura", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "ArtilleryMengskRange", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "ArtilleryMengskGarrison1", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "ArtilleryMengskGarrison2", lp_level);
        libNtve_gf_SetUpgradeLevelForPlayer(autoFFA57C4F_var, "ArtilleryMengskGarrison3", lp_level);
    }
}

trigger auto_libDDE92A83_gf_SkinStore_Trigger = null;
unit auto_libDDE92A83_gf_SkinStore_lp_unit;

void libDDE92A83_gf_SkinStore (unit lp_unit) {
    auto_libDDE92A83_gf_SkinStore_lp_unit = lp_unit;

    if (auto_libDDE92A83_gf_SkinStore_Trigger == null) {
        auto_libDDE92A83_gf_SkinStore_Trigger = TriggerCreate("auto_libDDE92A83_gf_SkinStore_TriggerFunc");
    }

    TriggerExecute(auto_libDDE92A83_gf_SkinStore_Trigger, false, false);
}

bool auto_libDDE92A83_gf_SkinStore_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libDDE92A83_gf_SkinStore_lp_unit;

    // Automatic Variable Declarations
    // Implementation
    libDDE92A83_gv_skin = null;
    if (((UnitHasBehavior2(lp_unit, "SkinBiomass") == true) || (UnitHasBehavior2(lp_unit, "SkinBiomassPrecursor") == true))) {
        libDDE92A83_gv_skin = "SkinBiomassPrecursor";
    }

    if (((UnitHasBehavior2(lp_unit, "SkinCybros") == true) || (UnitHasBehavior2(lp_unit, "SkinCybrosPrecursor") == true))) {
        libDDE92A83_gv_skin = "SkinCybrosPrecursor";
    }

    if (((UnitHasBehavior2(lp_unit, "SkinHighlight") == true) || (UnitHasBehavior2(lp_unit, "SkinHighlightPrecursor") == true))) {
        libDDE92A83_gv_skin = "SkinHighlightPrecursor";
    }

    if (((UnitHasBehavior2(lp_unit, "SkinHologram") == true) || (UnitHasBehavior2(lp_unit, "SkinHologramPrecursor") == true))) {
        libDDE92A83_gv_skin = "SkinHologramPrecursor";
    }

    if (((UnitHasBehavior2(lp_unit, "SkinJade") == true) || (UnitHasBehavior2(lp_unit, "SkinJadePrecursor") == true))) {
        libDDE92A83_gv_skin = "SkinJadePrecursor";
    }

    if (((UnitHasBehavior2(lp_unit, "SkinMineral") == true) || (UnitHasBehavior2(lp_unit, "SkinMineralPrecursor") == true))) {
        libDDE92A83_gv_skin = "SkinMineralPrecursor";
    }

    if (((UnitHasBehavior2(lp_unit, "SkinPsionic") == true) || (UnitHasBehavior2(lp_unit, "SkinPsionicPrecursor") == true))) {
        libDDE92A83_gv_skin = "SkinPsionicPrecursor";
    }

    if (((UnitHasBehavior2(lp_unit, "SkinRedstone") == true) || (UnitHasBehavior2(lp_unit, "SkinRedstonePrecursor") == true))) {
        libDDE92A83_gv_skin = "SkinRedstonePrecursor";
    }

    if (((UnitHasBehavior2(lp_unit, "SkinSepia") == true) || (UnitHasBehavior2(lp_unit, "SkinSepiaPrecursor") == true))) {
        libDDE92A83_gv_skin = "SkinSepiaPrecursor";
    }

    if (((UnitHasBehavior2(lp_unit, "SkinShadow") == true) || (UnitHasBehavior2(lp_unit, "SkinShadowPrecursor") == true))) {
        libDDE92A83_gv_skin = "SkinShadowPrecursor";
    }

    if (((UnitHasBehavior2(lp_unit, "SkinSnow") == true) || (UnitHasBehavior2(lp_unit, "SkinSnowPrecursor") == true))) {
        libDDE92A83_gv_skin = "SkinSnowPrecursor";
    }

    if (((UnitHasBehavior2(lp_unit, "SkinSolarite") == true) || (UnitHasBehavior2(lp_unit, "SkinSolaritePrecursor") == true))) {
        libDDE92A83_gv_skin = "SkinSolaritePrecursor";
    }

    if (((UnitHasBehavior2(lp_unit, "SkinVoid") == true) || (UnitHasBehavior2(lp_unit, "SkinVoidPrecursor") == true))) {
        libDDE92A83_gv_skin = "SkinVoidPrecursor";
    }

    return true;
}

void libDDE92A83_gf_SkinRestore (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((libDDE92A83_gv_skin != null)) {
        UnitBehaviorAdd(lp_unit, libDDE92A83_gv_skin, lp_unit, 1);
    }

}

void libDDE92A83_gf_KickerMinerals (int lp_value, point lp_point, int lp_player, fixed lp_offset, bool lp_modifyMinerals) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value > 0)) {
        libDDE92A83_gf_CreateKicker((StringExternal("Param/Value/lib_DDE92A83_BF126760") + StringExternal("Param/Value/lib_DDE92A83_5A949643") + IntToText(lp_value)), lp_point, lp_player, lp_offset, 1.25, 1.75, 0.25, 10.0);
        if ((lp_modifyMinerals == true)) {
            PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperAdd, lp_value);
            PlayerModifyPropertyInt(lp_player, c_playerPropMineralsCollected, c_playerPropOperAdd, lp_value);
        }

    }

}

void libDDE92A83_gf_KickerEnergy (int lp_value, unit lp_unit, fixed lp_offset, bool lp_modifyEnergy) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value > 0)) {
        libDDE92A83_gf_CreateKicker((StringToText("<s val=\"KickerEnergy_StarCraft\">") + StringToText("+") + IntToText(lp_value)), UnitGetPosition(lp_unit), UnitGetOwner(lp_unit), lp_offset, 1.25, 1.75, 0.25, 10.0);
        if ((lp_modifyEnergy == true)) {
            UnitSetPropertyFixed(lp_unit, c_unitPropEnergy, (UnitGetPropertyFixed(lp_unit, c_unitPropEnergy, c_unitPropCurrent) + IntToFixed(lp_value)));
        }

    }

}

void libDDE92A83_gf_CreateKicker (text lp_text, point lp_point, int lp_player, fixed lp_offset, fixed lp_velocity, fixed lp_duration, fixed lp_gravity, fixed lp_angleVariance) {
    // Automatic Variable Declarations
    // Implementation
    TextTagCreate(lp_text, 32, lp_point, lp_offset, true, false, PlayerGroupSingle(lp_player));
    TextTagSetVelocity(TextTagLastCreated(), lp_velocity, RandomFixed((90.0 - lp_angleVariance), (90.0 + lp_angleVariance)));
    TextTagSetGravity(TextTagLastCreated(), (0.0 - lp_gravity));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, lp_duration);
}

void libDDE92A83_gf_SetGlobalTimeScale (fixed lp_scale) {
    // Automatic Variable Declarations
    playergroup auto99C180E1_g;
    int auto99C180E1_var;

    // Implementation
    if (((GameIsTestMap(false) == true) || (libDDE92A83_gf_GameIsTutorial() == true))) {
        GameSetGlobalTimeScale(lp_scale);
        auto99C180E1_g = PlayerGroupAll();
        auto99C180E1_var = -1;
        while (true) {
            auto99C180E1_var = PlayerGroupNextPlayer(auto99C180E1_g, auto99C180E1_var);
            if (auto99C180E1_var < 0) { break; }
            CatalogFieldValueSet(c_gameCatalogBehavior, "SpeedLimit", "Modification.MoveSpeedMaximum", auto99C180E1_var, FixedToString(libNtve_gf_ArithmeticRealClamp((2.25 * lp_scale), 1.0, 15.0), c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogBehavior, "SpeedLimit", "Modification.MoveSpeedMinimum", auto99C180E1_var, FixedToString(libNtve_gf_ArithmeticRealClamp((2.25 * lp_scale), 1.0, 15.0), c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogBehavior, "SpeedLimitPrecursor", "Modification.MoveSpeedMaximum", auto99C180E1_var, FixedToString(libNtve_gf_ArithmeticRealClamp((2.25 * lp_scale), 1.0, 15.0), c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogBehavior, "SpeedLimitPrecursor", "Modification.MoveSpeedMinimum", auto99C180E1_var, FixedToString(libNtve_gf_ArithmeticRealClamp((2.25 * lp_scale), 1.0, 15.0), c_fixedPrecisionAny));
        }
    }

}

void libDDE92A83_gf_SetTutorialMode (bool lp_tutorialMode) {
    // Automatic Variable Declarations
    // Implementation
    libDDE92A83_gv_tutorialMode = lp_tutorialMode;
}

void libDDE92A83_gf_SetSandboxMode (bool lp_sandboxMode) {
    // Automatic Variable Declarations
    // Implementation
    libDDE92A83_gv_sandboxMode = lp_sandboxMode;
}

void libDDE92A83_gf_DeafenPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlFadeTransparency(libDDE92A83_gv_uIFrameChatDisplay, PlayerGroupSingle(lp_player), 0.0, 100.0);
    DialogControlSetVisible(libDDE92A83_gv_uIFrameChatDisplay, PlayerGroupSingle(lp_player), false);
}

void libDDE92A83_gf_MutePlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetEnabled(libDDE92A83_gv_uIFrameChatBar, PlayerGroupSingle(lp_player), false);
    libNtve_gf_SetDialogItemAcceptMouse(libDDE92A83_gv_uIFrameChatBar, false, PlayerGroupSingle(lp_player));
    DialogControlSetVisible(libDDE92A83_gv_uIFrameChatBar, PlayerGroupSingle(lp_player), false);
    DialogControlFadeTransparency(libDDE92A83_gv_uIFrameChatBar, PlayerGroupSingle(lp_player), 0.0, 100.0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AFKTimerMutedAccelerator", 1);
}

void libDDE92A83_gf_MuteList () {
    // Automatic Variable Declarations
    playergroup autoE001041E_g;
    int autoE001041E_var;

    // Implementation
    autoE001041E_g = PlayerGroupActive();
    autoE001041E_var = -1;
    while (true) {
        autoE001041E_var = PlayerGroupNextPlayer(autoE001041E_g, autoE001041E_var);
        if (autoE001041E_var < 0) { break; }
        if ((libDDE92A83_gf_PlayerIsMuted(autoE001041E_var) == true)) {
            libDDE92A83_gf_MutePlayer(autoE001041E_var);
        }

    }
}

void libDDE92A83_gf_CreateWorkers (bool lp_select, int lp_controlGroup, playergroup lp_players, bool lp_workerSelect, bool lp_showBlacklist) {
    // Variable Declarations
    bool lv_workerOverride;
    int lv_random;
    unitgroup lv_randomGroup;
    unit lv_randomPick;
    unit lv_randomAbathur;
    unit lv_randomAlarak;
    unit lv_randomArtanis;
    unit lv_randomDehaka;
    unit lv_randomFenix;
    unit lv_randomHorner;
    unit lv_randomKarax;
    unit lv_randomKerrigan;
    unit lv_randomMengsk;
    unit lv_randomNova;
    unit lv_randomRaynor;
    unit lv_randomStetmann;
    unit lv_randomStukov;
    unit lv_randomSwann;
    unit lv_randomTychus;
    unit lv_randomVorazun;
    unit lv_randomZagara;

    // Automatic Variable Declarations
    playergroup auto2A2F389B_g;
    int auto2A2F389B_var;
    unit autoD6389EBD_val;
    unitgroup autoC3A4F820_g;
    int autoC3A4F820_u;
    unit autoC3A4F820_var;
    string auto55F86E24_val;
    string auto3859C96E_val;

    // Variable Initialization
    lv_randomGroup = UnitGroupEmpty();

    // Implementation
    lib57FF8648_gf_BlacklistCreate(lp_showBlacklist);
    auto2A2F389B_g = lp_players;
    auto2A2F389B_var = -1;
    while (true) {
        auto2A2F389B_var = PlayerGroupNextPlayer(auto2A2F389B_g, auto2A2F389B_var);
        if (auto2A2F389B_var < 0) { break; }
        UnitGroupClear(lv_randomGroup);
        lv_randomAbathur = null;
        lv_randomAlarak = null;
        lv_randomArtanis = null;
        lv_randomDehaka = null;
        lv_randomFenix = null;
        lv_randomHorner = null;
        lv_randomKarax = null;
        lv_randomKerrigan = null;
        lv_randomMengsk = null;
        lv_randomNova = null;
        lv_randomRaynor = null;
        lv_randomStetmann = null;
        lv_randomStukov = null;
        lv_randomSwann = null;
        lv_randomTychus = null;
        lv_randomVorazun = null;
        lv_randomZagara = null;
        lv_workerOverride = false;
        if ((UnitGroupCount(libDDE92A83_gf_PlayerWorkers(auto2A2F389B_var), c_unitCountAlive) == 0)) {
            if ((lv_workerOverride == false) && (TechTreeUpgradeCount(auto2A2F389B_var, "WorkerOverrideTest", c_techCountCompleteOnly) == 1)) {
                lv_workerOverride = true;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerTest", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto2A2F389B_var, false)), "Assets\\Textures\\btn-ability-zerg-raceicon.dds");
            }

            if ((lv_workerOverride == false) && (TechTreeUpgradeCount(auto2A2F389B_var, "WorkerOverrideArtanis", c_techCountCompleteOnly) == 1)) {
                lv_workerOverride = true;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerArtanis", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-artanis.dds");
                PlayerSetRace(auto2A2F389B_var, "Prot");
            }

            if ((lv_workerOverride == false) && (TechTreeUpgradeCount(auto2A2F389B_var, "WorkerOverrideVorazun", c_techCountCompleteOnly) == 1)) {
                lv_workerOverride = true;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerVorazun", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-vorazun.dds");
                PlayerSetRace(auto2A2F389B_var, "Prot");
            }

            if ((lv_workerOverride == false) && (TechTreeUpgradeCount(auto2A2F389B_var, "WorkerOverrideKarax", c_techCountCompleteOnly) == 1)) {
                lv_workerOverride = true;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerKarax", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-karax.dds");
                PlayerSetRace(auto2A2F389B_var, "Prot");
            }

            if ((lv_workerOverride == false) && (TechTreeUpgradeCount(auto2A2F389B_var, "WorkerOverrideAlarak", c_techCountCompleteOnly) == 1)) {
                lv_workerOverride = true;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerAlarak", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-alarak.dds");
                PlayerSetRace(auto2A2F389B_var, "Prot");
            }

            if ((lv_workerOverride == false) && (TechTreeUpgradeCount(auto2A2F389B_var, "WorkerOverrideFenix", c_techCountCompleteOnly) == 1)) {
                lv_workerOverride = true;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerFenix", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-fenix.dds");
                PlayerSetRace(auto2A2F389B_var, "Prot");
            }

            if ((lv_workerOverride == false) && (TechTreeUpgradeCount(auto2A2F389B_var, "WorkerOverrideZeratul", c_techCountCompleteOnly) == 1)) {
                lv_workerOverride = true;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerZeratul", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-zeratul.dds");
                PlayerSetRace(auto2A2F389B_var, "Prot");
            }

            if ((lv_workerOverride == false) && (TechTreeUpgradeCount(auto2A2F389B_var, "WorkerOverrideRaynor", c_techCountCompleteOnly) == 1)) {
                lv_workerOverride = true;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerRaynor", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-raynor.dds");
                PlayerSetRace(auto2A2F389B_var, "Terr");
            }

            if ((lv_workerOverride == false) && (TechTreeUpgradeCount(auto2A2F389B_var, "WorkerOverrideSwann", c_techCountCompleteOnly) == 1)) {
                lv_workerOverride = true;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerSwann", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-swann.dds");
                PlayerSetRace(auto2A2F389B_var, "Terr");
            }

            if ((lv_workerOverride == false) && (TechTreeUpgradeCount(auto2A2F389B_var, "WorkerOverrideNova", c_techCountCompleteOnly) == 1)) {
                lv_workerOverride = true;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerNova", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-nova.dds");
                PlayerSetRace(auto2A2F389B_var, "Terr");
            }

            if ((lv_workerOverride == false) && (TechTreeUpgradeCount(auto2A2F389B_var, "WorkerOverrideHorner", c_techCountCompleteOnly) == 1)) {
                lv_workerOverride = true;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerHorner", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-horner.dds");
                PlayerSetRace(auto2A2F389B_var, "Terr");
            }

            if ((lv_workerOverride == false) && (TechTreeUpgradeCount(auto2A2F389B_var, "WorkerOverrideTychus", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(auto2A2F389B_var, "MutationAlphaTimeline", c_techCountCompleteOnly) == 0)) {
                lv_workerOverride = true;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerTychus", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-tychus.dds");
                PlayerSetRace(auto2A2F389B_var, "Terr");
            }

            if ((lv_workerOverride == false) && (TechTreeUpgradeCount(auto2A2F389B_var, "WorkerOverrideMengsk", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(auto2A2F389B_var, "MutationAlphaTimeline", c_techCountCompleteOnly) == 0)) {
                lv_workerOverride = true;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerMengsk", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-mengsk.dds");
                PlayerSetRace(auto2A2F389B_var, "Terr");
            }

            if ((lv_workerOverride == false) && (TechTreeUpgradeCount(auto2A2F389B_var, "WorkerOverrideKerrigan", c_techCountCompleteOnly) == 1)) {
                lv_workerOverride = true;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerKerrigan", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-kerrigan.dds");
                PlayerSetRace(auto2A2F389B_var, "Zerg");
            }

            if ((lv_workerOverride == false) && (TechTreeUpgradeCount(auto2A2F389B_var, "WorkerOverrideZagara", c_techCountCompleteOnly) == 1)) {
                lv_workerOverride = true;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerZagara", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-zagara.dds");
                PlayerSetRace(auto2A2F389B_var, "Zerg");
            }

            if ((lv_workerOverride == false) && (TechTreeUpgradeCount(auto2A2F389B_var, "WorkerOverrideAbathur", c_techCountCompleteOnly) == 1)) {
                lv_workerOverride = true;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerAbathur", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-abathur.dds");
                PlayerSetRace(auto2A2F389B_var, "Zerg");
            }

            if ((lv_workerOverride == false) && (TechTreeUpgradeCount(auto2A2F389B_var, "WorkerOverrideStukov", c_techCountCompleteOnly) == 1)) {
                lv_workerOverride = true;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerStukov", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-stukov.dds");
                PlayerSetRace(auto2A2F389B_var, "Zerg");
            }

            if ((lv_workerOverride == false) && (TechTreeUpgradeCount(auto2A2F389B_var, "WorkerOverrideDehaka", c_techCountCompleteOnly) == 1)) {
                lv_workerOverride = true;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerDehaka", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-dehaka.dds");
                PlayerSetRace(auto2A2F389B_var, "Zerg");
            }

            if ((lv_workerOverride == false) && (TechTreeUpgradeCount(auto2A2F389B_var, "WorkerOverrideStetmann", c_techCountCompleteOnly) == 1)) {
                lv_workerOverride = true;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerStetmann", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-stetmann.dds");
                PlayerSetRace(auto2A2F389B_var, "Terr");
            }

            if ((lv_workerOverride == false) && (TechTreeUpgradeCount(auto2A2F389B_var, "WorkerOverrideRandomCommander", c_techCountCompleteOnly) == 1)) {
                lv_workerOverride = true;
                if ((TechTreeUpgradeCount(auto2A2F389B_var, "BlacklistAbathur", c_techCountCompleteOnly) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
                    UnitGroupAdd(lv_randomGroup, UnitLastCreated());
                    lv_randomAbathur = UnitLastCreated();
                }

                if ((TechTreeUpgradeCount(auto2A2F389B_var, "BlacklistAlarak", c_techCountCompleteOnly) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
                    UnitGroupAdd(lv_randomGroup, UnitLastCreated());
                    lv_randomAlarak = UnitLastCreated();
                }

                if ((TechTreeUpgradeCount(auto2A2F389B_var, "BlacklistArtanis", c_techCountCompleteOnly) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
                    UnitGroupAdd(lv_randomGroup, UnitLastCreated());
                    lv_randomArtanis = UnitLastCreated();
                }

                if ((TechTreeUpgradeCount(auto2A2F389B_var, "BlacklistDehaka", c_techCountCompleteOnly) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
                    UnitGroupAdd(lv_randomGroup, UnitLastCreated());
                    lv_randomDehaka = UnitLastCreated();
                }

                if ((TechTreeUpgradeCount(auto2A2F389B_var, "BlacklistFenix", c_techCountCompleteOnly) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
                    UnitGroupAdd(lv_randomGroup, UnitLastCreated());
                    lv_randomFenix = UnitLastCreated();
                }

                if ((TechTreeUpgradeCount(auto2A2F389B_var, "BlacklistHorner", c_techCountCompleteOnly) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
                    UnitGroupAdd(lv_randomGroup, UnitLastCreated());
                    lv_randomHorner = UnitLastCreated();
                }

                if ((TechTreeUpgradeCount(auto2A2F389B_var, "BlacklistKarax", c_techCountCompleteOnly) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
                    UnitGroupAdd(lv_randomGroup, UnitLastCreated());
                    lv_randomKarax = UnitLastCreated();
                }

                if ((TechTreeUpgradeCount(auto2A2F389B_var, "BlacklistKerrigan", c_techCountCompleteOnly) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
                    UnitGroupAdd(lv_randomGroup, UnitLastCreated());
                    lv_randomKerrigan = UnitLastCreated();
                }

                if ((TechTreeUpgradeCount(auto2A2F389B_var, "BlacklistNova", c_techCountCompleteOnly) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
                    UnitGroupAdd(lv_randomGroup, UnitLastCreated());
                    lv_randomNova = UnitLastCreated();
                }

                if ((TechTreeUpgradeCount(auto2A2F389B_var, "BlacklistRaynor", c_techCountCompleteOnly) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
                    UnitGroupAdd(lv_randomGroup, UnitLastCreated());
                    lv_randomRaynor = UnitLastCreated();
                }

                if ((TechTreeUpgradeCount(auto2A2F389B_var, "BlacklistStukov", c_techCountCompleteOnly) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
                    UnitGroupAdd(lv_randomGroup, UnitLastCreated());
                    lv_randomStukov = UnitLastCreated();
                }

                if ((TechTreeUpgradeCount(auto2A2F389B_var, "BlacklistSwann", c_techCountCompleteOnly) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
                    UnitGroupAdd(lv_randomGroup, UnitLastCreated());
                    lv_randomSwann = UnitLastCreated();
                }

                if ((TechTreeUpgradeCount(auto2A2F389B_var, "BlacklistTychus", c_techCountCompleteOnly) == 0) && (TechTreeUpgradeCount(auto2A2F389B_var, "MutationAlphaTimeline", c_techCountCompleteOnly) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
                    UnitGroupAdd(lv_randomGroup, UnitLastCreated());
                    lv_randomTychus = UnitLastCreated();
                }

                if ((TechTreeUpgradeCount(auto2A2F389B_var, "BlacklistVorazun", c_techCountCompleteOnly) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
                    UnitGroupAdd(lv_randomGroup, UnitLastCreated());
                    lv_randomVorazun = UnitLastCreated();
                }

                if ((TechTreeUpgradeCount(auto2A2F389B_var, "BlacklistZagara", c_techCountCompleteOnly) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
                    UnitGroupAdd(lv_randomGroup, UnitLastCreated());
                    lv_randomZagara = UnitLastCreated();
                }

                if ((TechTreeUpgradeCount(auto2A2F389B_var, "BlacklistStetmann", c_techCountCompleteOnly) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
                    UnitGroupAdd(lv_randomGroup, UnitLastCreated());
                    lv_randomStetmann = UnitLastCreated();
                }

                if ((TechTreeUpgradeCount(auto2A2F389B_var, "BlacklistMengsk", c_techCountCompleteOnly) == 0) && (TechTreeUpgradeCount(auto2A2F389B_var, "MutationAlphaTimeline", c_techCountCompleteOnly) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrainDummy", 0, 0, Point(0.0, 0.0));
                    UnitGroupAdd(lv_randomGroup, UnitLastCreated());
                    lv_randomMengsk = UnitLastCreated();
                }

                lv_randomPick = UnitGroupRandomUnit(lv_randomGroup, c_unitCountAlive);
                autoD6389EBD_val = lv_randomPick;
                if (autoD6389EBD_val == lv_randomArtanis) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerArtanis", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                    libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-artanis.dds");
                    PlayerSetRace(auto2A2F389B_var, "Prot");
                }
                else if (autoD6389EBD_val == lv_randomAlarak) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerAlarak", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                    libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-alarak.dds");
                    PlayerSetRace(auto2A2F389B_var, "Prot");
                }
                else if (autoD6389EBD_val == lv_randomVorazun) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerVorazun", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                    libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-vorazun.dds");
                    PlayerSetRace(auto2A2F389B_var, "Prot");
                }
                else if (autoD6389EBD_val == lv_randomFenix) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerFenix", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                    libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-fenix.dds");
                    PlayerSetRace(auto2A2F389B_var, "Prot");
                }
                else if (autoD6389EBD_val == lv_randomKarax) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerKarax", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                    libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-karax.dds");
                    PlayerSetRace(auto2A2F389B_var, "Prot");
                }
                else if (autoD6389EBD_val == lv_randomRaynor) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerRaynor", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                    libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-raynor.dds");
                    PlayerSetRace(auto2A2F389B_var, "Terr");
                }
                else if (autoD6389EBD_val == lv_randomSwann) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerSwann", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                    libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-swann.dds");
                    PlayerSetRace(auto2A2F389B_var, "Terr");
                }
                else if (autoD6389EBD_val == lv_randomNova) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerNova", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                    libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-nova.dds");
                    PlayerSetRace(auto2A2F389B_var, "Terr");
                }
                else if (autoD6389EBD_val == lv_randomKerrigan) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerKerrigan", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                    libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-kerrigan.dds");
                    PlayerSetRace(auto2A2F389B_var, "Zerg");
                }
                else if (autoD6389EBD_val == lv_randomZagara) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerZagara", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                    libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-zagara.dds");
                    PlayerSetRace(auto2A2F389B_var, "Zerg");
                }
                else if (autoD6389EBD_val == lv_randomAbathur) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerAbathur", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                    libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-abathur.dds");
                    PlayerSetRace(auto2A2F389B_var, "Zerg");
                }
                else if (autoD6389EBD_val == lv_randomStukov) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerStukov", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                    libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-stukov.dds");
                    PlayerSetRace(auto2A2F389B_var, "Zerg");
                }
                else if (autoD6389EBD_val == lv_randomDehaka) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerDehaka", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                    libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-dehaka.dds");
                    PlayerSetRace(auto2A2F389B_var, "Zerg");
                }
                else if (autoD6389EBD_val == lv_randomHorner) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerHorner", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                    libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-horner.dds");
                    PlayerSetRace(auto2A2F389B_var, "Terr");
                }
                else if (autoD6389EBD_val == lv_randomTychus) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerTychus", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                    libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-tychus.dds");
                    PlayerSetRace(auto2A2F389B_var, "Terr");
                }
                else if (autoD6389EBD_val == lv_randomStetmann) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerStetmann", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                    libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-stetmann.dds");
                    PlayerSetRace(auto2A2F389B_var, "Terr");
                }
                else if (autoD6389EBD_val == lv_randomMengsk) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerMengsk", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                    libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-mengsk.dds");
                    PlayerSetRace(auto2A2F389B_var, "Terr");
                }
                else {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerArtanis", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                    libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, Color(100,100,100), "Assets\\Textures\\btn-unit-hero-artanis.dds");
                    PlayerSetRace(auto2A2F389B_var, "Prot");
                }
                autoC3A4F820_g = lv_randomGroup;
                autoC3A4F820_u = UnitGroupCount(autoC3A4F820_g, c_unitCountAll);
                for (;; autoC3A4F820_u -= 1) {
                    autoC3A4F820_var = UnitGroupUnitFromEnd(autoC3A4F820_g, autoC3A4F820_u);
                    if (autoC3A4F820_var == null) { break; }
                    UnitRemove(autoC3A4F820_var);
                }
            }

            if ((lv_workerOverride == false)) {
                auto55F86E24_val = PlayerRace(auto2A2F389B_var);
                if (auto55F86E24_val == "Terr") {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerTerran", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                    libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto2A2F389B_var, false)), "Assets\\Textures\\btn-ability-terran-raceicon.dds");
                }
                else if (auto55F86E24_val == "Zerg") {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerZerg", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                    libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto2A2F389B_var, false)), "Assets\\Textures\\btn-ability-zerg-raceicon.dds");
                }
                else {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WorkerProtoss", 0, auto2A2F389B_var, libDDE92A83_gv_playerOrigin[auto2A2F389B_var]);
                    libFD391A9C_gf_ScoreboardSetIcon(auto2A2F389B_var, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto2A2F389B_var, false)), "Assets\\Textures\\btn-ability-protoss-raceicon.dds");
                }
            }

            if ((lv_workerOverride == true)) {
                libNtve_gf_SetUpgradeLevelForPlayer(auto2A2F389B_var, "WorkerOverride", 1);
                libNtve_gf_SetUpgradeLevelForPlayer(auto2A2F389B_var, "HideWorkerCommandCard", 0);
                libNtve_gf_SetUpgradeLevelForPlayer(auto2A2F389B_var, "WorkerCommanderSelect", 0);
            }

            lib64DC5B97_gf_SkinSystemSetRace(auto2A2F389B_var);
            if ((TechTreeUpgradeCount(auto2A2F389B_var, "WorkerCommanderSelect", c_techCountQueuedOrBetter) == 1)) {
                UISetFrameVisible(PlayerGroupSingle(auto2A2F389B_var), c_syncFrameTypeInventoryPanel, false);
            }

            UnitSelect(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(auto2A2F389B_var), 1), auto2A2F389B_var, lp_select);
            UnitControlGroupAddUnit(auto2A2F389B_var, lp_controlGroup, UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(auto2A2F389B_var), 1));
            auto3859C96E_val = PlayerRace(auto2A2F389B_var);
            if (auto3859C96E_val == "Terr") {
                CatalogFieldValueSet(c_gameCatalogButton, "DecorationsContainer", "Icon", auto2A2F389B_var, ("Assets\\Textures\\btn-command-terran-buildstructure.dds"));
            }
            else if (auto3859C96E_val == "Zerg") {
                CatalogFieldValueSet(c_gameCatalogButton, "DecorationsContainer", "Icon", auto2A2F389B_var, ("Assets\\Textures\\btn-ability-zerg-basicmutation.dds"));
            }
            else {
                CatalogFieldValueSet(c_gameCatalogButton, "DecorationsContainer", "Icon", auto2A2F389B_var, ("Assets\\Textures\\btn-command-protoss-buildstructure.dds"));
            }
        }

    }
    if ((lp_workerSelect == true)) {
        lib948F000A_gf_WorkerSelectCreate();
    }

}

void libDDE92A83_gf_PlayerAttributesUpdate (int lp_player) {
    // Variable Declarations
    const int lv_maxValue = 500000;
    int lv_value;
    text lv_counterDivider;
    text lv_killCounter;
    text lv_upgradeSpendingCounter;

    // Automatic Variable Declarations
    unitgroup auto47142545_g;
    int auto47142545_u;
    unit auto47142545_var;
    unitgroup auto79FDB6DB_g;
    int auto79FDB6DB_u;
    unit auto79FDB6DB_var;

    // Variable Initialization

    // Implementation
    libDDE92A83_gf_SetWorkerAttributes(lp_player);
    CatalogFieldValueSet(c_gameCatalogEffect, "PlayerAttributeUnitSpawnersTotal", "Amount", lp_player, IntToString(libNtve_gf_ArithmeticIntClamp(UnitGroupCount(UnitGroupFilterPlayer(lib7A9A9B22_gf_StagingAreaSpawners(), lp_player, 0), c_unitCountAlive), 0, lv_maxValue)));
    lv_value = 0;
    auto47142545_g = UnitGroupFilterPlayer(lib7A9A9B22_gf_StagingAreaSpawners(), lp_player, 0);
    auto47142545_u = UnitGroupCount(auto47142545_g, c_unitCountAll);
    for (;; auto47142545_u -= 1) {
        auto47142545_var = UnitGroupUnitFromEnd(auto47142545_g, auto47142545_u);
        if (auto47142545_var == null) { break; }
        lv_value += CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(auto47142545_var), "CostResource[" + IntToString(0) + "]", lp_player);
    }
    CatalogFieldValueSet(c_gameCatalogEffect, "PlayerAttributeUnitSpawnersValue", "Amount", lp_player, IntToString(libNtve_gf_ArithmeticIntClamp(lv_value, 0, lv_maxValue)));
    PlayerScoreValueSetFromInt(lp_player, "UnitSpawnersValue", lv_value);
    lv_value = 0;
    auto79FDB6DB_g = UnitGroupFilter(null, lp_player, lib7A9A9B22_gf_StagingAreaSpawners(), UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterGround), 0), 0);
    auto79FDB6DB_u = UnitGroupCount(auto79FDB6DB_g, c_unitCountAll);
    for (;; auto79FDB6DB_u -= 1) {
        auto79FDB6DB_var = UnitGroupUnitFromEnd(auto79FDB6DB_g, auto79FDB6DB_u);
        if (auto79FDB6DB_var == null) { break; }
        lv_value += CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(auto79FDB6DB_var), "CostResource[" + IntToString(0) + "]", lp_player);
    }
    PlayerScoreValueSetFromInt(lp_player, "UnitSpawnersValueAirOnly", lv_value);
    CatalogFieldValueSet(c_gameCatalogEffect, "PlayerAttributeUnitKills", "Amount", lp_player, IntToString(libNtve_gf_ArithmeticIntClamp(PlayerScoreValueGetAsInt(lp_player, "UnitsKilledCount"), 0, lv_maxValue)));
    if ((TechTreeUpgradeCount(lp_player, "DecorationPassiveUnitKillCounter", c_techCountCompleteOnly) >= 1)) {
        lv_counterDivider = StringToText("</n>");
        lv_killCounter = StringExternal("Param/Value/lib_DDE92A83_98DC064D");
    }

    CatalogFieldValueSet(c_gameCatalogEffect, "PlayerAttributeUpgradeSpending", "Amount", lp_player, IntToString(libNtve_gf_ArithmeticIntClamp(PlayerScoreValueGetAsInt(lp_player, "MineralsUsedTotalUpgrade"), 0, lv_maxValue)));
    if ((TechTreeUpgradeCount(lp_player, "DecorationPassiveUpgradeSpendingCounter", c_techCountCompleteOnly) >= 1)) {
        lv_counterDivider = StringToText("</n>");
        lv_upgradeSpendingCounter = StringExternal("Param/Value/lib_DDE92A83_30854C1B");
    }

    UnitSetInfoText2(UnitGroupUnit(libDDE92A83_gf_PlayerWorkers(lp_player), 1), (StringExternal("Param/Value/lib_DDE92A83_3C698EF3") + lv_counterDivider + lv_killCounter + lv_upgradeSpendingCounter));
    CatalogFieldValueSet(c_gameCatalogBehavior, "ProbiusBravery", "Modification.DamageDealtScaled[" + IntToString(1) + "]", lp_player, IntToString(FixedToInt((IntToFixed(libNtve_gf_ArithmeticIntClamp(TechTreeBehaviorCount(lp_player, "UnitSpawner", c_techCountCompleteOnly), 0, lv_maxValue)) * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "ProbiusWeaponDamageBonus", "Amount", lp_player)))));
    libDDE92A83_gf_DebugSpending(lp_player);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "HornerMySignificantOtherBuffHan", libNtve_gf_ArithmeticIntClamp(((TechTreeBehaviorCount(lp_player, "HornerMySignificantOtherBuffHan15", c_techCountCompleteOnly) * 15) + (TechTreeBehaviorCount(lp_player, "HornerMySignificantOtherBuffHan10", c_techCountCompleteOnly) * 10) + (TechTreeBehaviorCount(lp_player, "HornerMySignificantOtherBuffHan2", c_techCountCompleteOnly) * 2) + (TechTreeBehaviorCount(lp_player, "HornerMySignificantOtherBuffHan4", c_techCountCompleteOnly) * 4)), 0, 100));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "HornerMySignificantOtherBuffHorner", libNtve_gf_ArithmeticIntClamp(((TechTreeBehaviorCount(lp_player, "HornerMySignificantOtherBuffHorner1", c_techCountCompleteOnly) * 1) + (TechTreeBehaviorCount(lp_player, "HornerMySignificantOtherBuffHorner2", c_techCountCompleteOnly) * 2) + (TechTreeBehaviorCount(lp_player, "HornerMySignificantOtherBuffHorner3", c_techCountCompleteOnly) * 3) + (TechTreeBehaviorCount(lp_player, "HornerMySignificantOtherBuffHorner6", c_techCountCompleteOnly) * 6) + (TechTreeBehaviorCount(lp_player, "HornerMySignificantOtherBuffHorner8", c_techCountCompleteOnly) * 8)), 0, 100));
    CatalogFieldValueSet(c_gameCatalogEffect, "MengskVeterancyDummyActive", "Amount", lp_player, IntToString(TechTreeBehaviorCount(lp_player, "MengskVeterancyPassive", c_techCountCompleteOnly)));
    CatalogFieldValueSet(c_gameCatalogAbil, "MengskVeterancyPassive", "Cost[" + IntToString(0) + "].Charge.CountStart", lp_player, IntToString(TechTreeBehaviorCount(lp_player, "MengskVeterancyPassive", c_techCountCompleteOnly)));
    CatalogFieldValueSet(c_gameCatalogAbil, "MengskVeterancyPassive", "Cost[" + IntToString(0) + "].Charge.CountMax", lp_player, IntToString(TechTreeBehaviorCount(lp_player, "MengskVeterancyPassive", c_techCountCompleteOnly)));
    if ((TechTreeUpgradeCount(lp_player, "MineralIncomeBonus", c_techCountCompleteOnly) == 1)) {
        CatalogFieldValueSet(c_gameCatalogEffect, "MengskVeterancyDummyXPGain", "Amount", lp_player, FixedToString(((lib7A9A9B22_gv_mineralIncomeBase + lib7A9A9B22_gv_mineralIncomeBonus) + (lib7A9A9B22_gv_mineralIncomeIncrement * IntToFixed(TechTreeUpgradeCount(lp_player, "MineralIncome", c_techCountCompleteOnly)))), 6));
        CatalogFieldValueSet(c_gameCatalogBehavior, "MengskVeterancyPassiveWorker", "Modification.VitalRegenArray[" + IntToString(2) + "]", lp_player, FixedToString((((lib7A9A9B22_gv_mineralIncomeBase + lib7A9A9B22_gv_mineralIncomeBonus) + (lib7A9A9B22_gv_mineralIncomeIncrement * IntToFixed(TechTreeUpgradeCount(lp_player, "MineralIncome", c_techCountCompleteOnly)))) / 1.4), 6));
    }
    else {
        CatalogFieldValueSet(c_gameCatalogEffect, "MengskVeterancyDummyXPGain", "Amount", lp_player, FixedToString((lib7A9A9B22_gv_mineralIncomeBase + (lib7A9A9B22_gv_mineralIncomeIncrement * IntToFixed(TechTreeUpgradeCount(lp_player, "MineralIncome", c_techCountCompleteOnly)))), 6));
        CatalogFieldValueSet(c_gameCatalogBehavior, "MengskVeterancyPassiveWorker", "Modification.VitalRegenArray[" + IntToString(2) + "]", lp_player, FixedToString(((lib7A9A9B22_gv_mineralIncomeBase + (lib7A9A9B22_gv_mineralIncomeIncrement * IntToFixed(TechTreeUpgradeCount(lp_player, "MineralIncome", c_techCountCompleteOnly)))) / 1.4), 6));
    }
    if ((TechTreeBehaviorCount(lp_player, "MengskVeterancyPassive", c_techCountCompleteOnly) >= 1)) {
        CatalogFieldValueSet(c_gameCatalogBehavior, "MengskVeterancyPassive", "Period", lp_player, FixedToString((1.0 / ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MengskVeterancyDummyXPGain", "Amount", lp_player) / IntToFixed(TechTreeBehaviorCount(lp_player, "MengskVeterancyPassive", c_techCountCompleteOnly))) / 1.4)), c_fixedPrecisionAny));
    }
    else {
        CatalogFieldValueSet(c_gameCatalogBehavior, "MengskVeterancyPassive", "Period", lp_player, FixedToString((1.0 / ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MengskVeterancyDummyXPGain", "Amount", lp_player) / IntToFixed(1)) / 1.4)), c_fixedPrecisionAny));
    }
}

void libDDE92A83_gf_AddAllUnitTypes (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libDDE92A83_gf_AddUnitType("Zealot");
    libDDE92A83_gf_AddUnitType("Stalker");
    libDDE92A83_gf_AddUnitType("Sentry");
    libDDE92A83_gf_AddUnitType("Adept");
    libDDE92A83_gf_AddUnitType("Observer");
    libDDE92A83_gf_AddUnitType("Oracle");
    libDDE92A83_gf_AddUnitType("DarkTemplar");
    libDDE92A83_gf_AddUnitType("Disruptor");
    libDDE92A83_gf_AddUnitType("Phoenix");
    libDDE92A83_gf_AddUnitType("HighTemplar");
    libDDE92A83_gf_AddUnitType("Archon");
    libDDE92A83_gf_AddUnitType("Immortal");
    libDDE92A83_gf_AddUnitType("VoidRay");
    libDDE92A83_gf_AddUnitType("Colossus");
    libDDE92A83_gf_AddUnitType("Tempest");
    libDDE92A83_gf_AddUnitType("Carrier");
    libDDE92A83_gf_AddUnitType("Marine");
    libDDE92A83_gf_AddUnitType("Marauder");
    libDDE92A83_gf_AddUnitType("Reaper");
    libDDE92A83_gf_AddUnitType("Ghost");
    libDDE92A83_gf_AddUnitType("GhostAlternate");
    libDDE92A83_gf_AddUnitType("GhostNova");
    libDDE92A83_gf_AddUnitType("Hellion");
    libDDE92A83_gf_AddUnitType("HellionTank");
    libDDE92A83_gf_AddUnitType("Medivac");
    libDDE92A83_gf_AddUnitType("Banshee");
    libDDE92A83_gf_AddUnitType("VikingFighter");
    libDDE92A83_gf_AddUnitType("VikingAssault");
    libDDE92A83_gf_AddUnitType("Raven");
    libDDE92A83_gf_AddUnitType("SiegeTankSieged");
    libDDE92A83_gf_AddUnitType("SiegeTank");
    libDDE92A83_gf_AddUnitType("Cyclone");
    libDDE92A83_gf_AddUnitType("WidowMine");
    libDDE92A83_gf_AddUnitType("WidowMineBurrowed");
    libDDE92A83_gf_AddUnitType("Liberator");
    libDDE92A83_gf_AddUnitType("LiberatorAG");
    libDDE92A83_gf_AddUnitType("ThorAP");
    libDDE92A83_gf_AddUnitType("Thor");
    libDDE92A83_gf_AddUnitType("Battlecruiser");
    libDDE92A83_gf_AddUnitType("AutoTurret");
    libDDE92A83_gf_AddUnitType("Zergling");
    libDDE92A83_gf_AddUnitType("ZerglingLightweight");
    libDDE92A83_gf_AddUnitType("Baneling");
    libDDE92A83_gf_AddUnitType("Roach");
    libDDE92A83_gf_AddUnitType("RoachBurrowed");
    libDDE92A83_gf_AddUnitType("Queen");
    libDDE92A83_gf_AddUnitType("Overseer");
    libDDE92A83_gf_AddUnitType("Hydralisk");
    libDDE92A83_gf_AddUnitType("Mutalisk");
    libDDE92A83_gf_AddUnitType("Corruptor");
    libDDE92A83_gf_AddUnitType("Infestor");
    libDDE92A83_gf_AddUnitType("SwarmHostMP");
    libDDE92A83_gf_AddUnitType("SwarmHostBurrowedMP");
    libDDE92A83_gf_AddUnitType("Viper");
    libDDE92A83_gf_AddUnitType("Ultralisk");
    libDDE92A83_gf_AddUnitType("BroodLord");
    libDDE92A83_gf_AddUnitType("SpineCrawlerPermanent");
    libDDE92A83_gf_AddUnitType("SporeCrawlerPermanent");
    libDDE92A83_gf_AddUnitType("PhotonCannonPermanent");
    libDDE92A83_gf_AddUnitType("PhotonCannonPermanentPurifier");
    libDDE92A83_gf_AddUnitType("PhotonCannonPermanentTaldarim");
    libDDE92A83_gf_AddUnitType("DehakaPrimalWurm");
    libDDE92A83_gf_AddUnitType("DehakaGreaterPrimalWurm");
    libDDE92A83_gf_AddUnitType("MissileTurretHorner");
    libDDE92A83_gf_AddUnitType("MissileTurretNova");
    libDDE92A83_gf_AddUnitType("MissileTurretPermanent");
    libDDE92A83_gf_AddUnitType("MissileTurretStukov");
    libDDE92A83_gf_AddUnitType("ShieldBatteryKarax");
    libDDE92A83_gf_AddUnitType("KhaydarinMonolithKarax");
    libDDE92A83_gf_AddUnitType("RailgunTurretPermanent");
    libDDE92A83_gf_AddUnitType("BunkerPermanent");
    libDDE92A83_gf_AddUnitType("SwannDrakkenLaserDrill");
    libDDE92A83_gf_AddUnitType("DevastationTurret");
    libDDE92A83_gf_AddUnitType("TychusAutoTurret");
    libDDE92A83_gf_AddUnitType("BileLauncher");
    libDDE92A83_gf_AddUnitType("VileRoach");
    libDDE92A83_gf_AddUnitType("VileRoachBurrowed");
    libDDE92A83_gf_AddUnitType("SwarmQueenStarlight");
    libDDE92A83_gf_AddUnitType("AbathurMutalisk");
    libDDE92A83_gf_AddUnitType("Ravager");
    libDDE92A83_gf_AddUnitType("DevourerStarlight");
    libDDE92A83_gf_AddUnitType("GuardianStarlight");
    libDDE92A83_gf_AddUnitType("Brutalisk");
    libDDE92A83_gf_AddUnitType("LeviathanStarlight");
    libDDE92A83_gf_AddUnitType("SupplicantStarlight");
    libDDE92A83_gf_AddUnitType("Slayer");
    libDDE92A83_gf_AddUnitType("HavocStarlight");
    libDDE92A83_gf_AddUnitType("HeroAlarakWaveUnit");
    libDDE92A83_gf_AddUnitType("Vanguard");
    libDDE92A83_gf_AddUnitType("AscendantStarlight");
    libDDE92A83_gf_AddUnitType("Destroyer");
    libDDE92A83_gf_AddUnitType("WarPrism");
    libDDE92A83_gf_AddUnitType("Wrathwalker");
    libDDE92A83_gf_AddUnitType("MothershipTaldarim");
    libDDE92A83_gf_AddUnitType("HonorGuard");
    libDDE92A83_gf_AddUnitType("DragoonStarlight");
    libDDE92A83_gf_AddUnitType("HighArchon");
    libDDE92A83_gf_AddUnitType("ReaverStarlight");
    libDDE92A83_gf_AddUnitType("PurifierTempest");
    libDDE92A83_gf_AddUnitType("DehakaCreeperHost");
    libDDE92A83_gf_AddUnitType("DehakaCreeperHostBurrowed");
    libDDE92A83_gf_AddUnitType("DehakaCreeperHostExplosiveCreeper");
    libDDE92A83_gf_AddUnitType("DehakaImpaler");
    libDDE92A83_gf_AddUnitType("DehakaImpalerBurrowed");
    libDDE92A83_gf_AddUnitType("DehakaPrimalGuardian");
    libDDE92A83_gf_AddUnitType("DehakaPrimalHost");
    libDDE92A83_gf_AddUnitType("DehakaPrimalHostBurrowed");
    libDDE92A83_gf_AddUnitType("DehakaPrimalHydralisk");
    libDDE92A83_gf_AddUnitType("DehakaPrimalIgniter");
    libDDE92A83_gf_AddUnitType("DehakaPrimalHostLocust");
    libDDE92A83_gf_AddUnitType("DehakaPrimalHostLocustFlying");
    libDDE92A83_gf_AddUnitType("DehakaPrimalMutalisk");
    libDDE92A83_gf_AddUnitType("DehakaPrimalRoach");
    libDDE92A83_gf_AddUnitType("DehakaPrimalUltralisk");
    libDDE92A83_gf_AddUnitType("DehakaPrimalZergling");
    libDDE92A83_gf_AddUnitType("DehakaPrimalRavasaur");
    libDDE92A83_gf_AddUnitType("DehakaTyrannozor");
    libDDE92A83_gf_AddUnitType("DehakaHero");
    libDDE92A83_gf_AddUnitType("Legionnaire");
    libDDE92A83_gf_AddUnitType("PurifierAdept");
    libDDE92A83_gf_AddUnitType("Conservator");
    libDDE92A83_gf_AddUnitType("PurifierImmortal");
    libDDE92A83_gf_AddUnitType("PurifierScout");
    libDDE92A83_gf_AddUnitType("PurifierDisruptor");
    libDDE92A83_gf_AddUnitType("PurifierObserver");
    libDDE92A83_gf_AddUnitType("PurifierColossusFenix");
    libDDE92A83_gf_AddUnitType("PurifierCarrier");
    libDDE92A83_gf_AddUnitType("FenixFlyer");
    libDDE92A83_gf_AddUnitType("FenixPraetor");
    libDDE92A83_gf_AddUnitType("FenixWalker");
    libDDE92A83_gf_AddUnitType("Kaldalis");
    libDDE92A83_gf_AddUnitType("PurifierTalis");
    libDDE92A83_gf_AddUnitType("Taldarin");
    libDDE92A83_gf_AddUnitType("Warbringer");
    libDDE92A83_gf_AddUnitType("Mojo");
    libDDE92A83_gf_AddUnitType("Clolarion");
    libDDE92A83_gf_AddUnitType("HornerAssaultGalleon");
    libDDE92A83_gf_AddUnitType("HornerAssaultGalleonUpgraded");
    libDDE92A83_gf_AddUnitType("HornerAsteriaWraith");
    libDDE92A83_gf_AddUnitType("HornerDeimosVikingAssault");
    libDDE92A83_gf_AddUnitType("HornerDeimosVikingFighter");
    libDDE92A83_gf_AddUnitType("HornerHellbat");
    libDDE92A83_gf_AddUnitType("HornerHellion");
    libDDE92A83_gf_AddUnitType("HornerReaper");
    libDDE92A83_gf_AddUnitType("HornerReaperAir");
    libDDE92A83_gf_AddUnitType("HornerSovereignBattlecruiser");
    libDDE92A83_gf_AddUnitType("HornerStrikeFighter");
    libDDE92A83_gf_AddUnitType("HornerTheiaRaven");
    libDDE92A83_gf_AddUnitType("HornerWidowMine");
    libDDE92A83_gf_AddUnitType("HornerWidowMineBurrowed");
    libDDE92A83_gf_AddUnitType("SentinelStarlight");
    libDDE92A83_gf_AddUnitType("SentinelWreckage");
    libDDE92A83_gf_AddUnitType("Annihilator");
    libDDE92A83_gf_AddUnitType("Mirage");
    libDDE92A83_gf_AddUnitType("PurifierColossus");
    libDDE92A83_gf_AddUnitType("AiurCarrier");
    libDDE92A83_gf_AddUnitType("Raptorling");
    libDDE92A83_gf_AddUnitType("RaptorlingLightweight");
    libDDE92A83_gf_AddUnitType("KerriganQueen");
    libDDE92A83_gf_AddUnitType("HeroKerriganWaveUnit");
    libDDE92A83_gf_AddUnitType("BroodMutalisk");
    libDDE92A83_gf_AddUnitType("Torrasque");
    libDDE92A83_gf_AddUnitType("EliteMarine");
    libDDE92A83_gf_AddUnitType("MarauderCommando");
    libDDE92A83_gf_AddUnitType("HellbatRanger");
    libDDE92A83_gf_AddUnitType("HeroNovaWaveUnit");
    libDDE92A83_gf_AddUnitType("SpecOpsGhost");
    libDDE92A83_gf_AddUnitType("CovertBanshee");
    libDDE92A83_gf_AddUnitType("StrikeGoliath");
    libDDE92A83_gf_AddUnitType("HeavySiegeTank");
    libDDE92A83_gf_AddUnitType("HeavySiegeTankSieged");
    libDDE92A83_gf_AddUnitType("RaidLiberator");
    libDDE92A83_gf_AddUnitType("RaidLiberatorSieged");
    libDDE92A83_gf_AddUnitType("RavenTypeII");
    libDDE92A83_gf_AddUnitType("HoloDecoy");
    libDDE92A83_gf_AddUnitType("FirebatStarlight");
    libDDE92A83_gf_AddUnitType("MedicStarlight");
    libDDE92A83_gf_AddUnitType("VultureStarlight");
    libDDE92A83_gf_AddUnitType("DuskWing");
    libDDE92A83_gf_AddUnitType("RaynorHyperion");
    libDDE92A83_gf_AddUnitType("InfestedCivilianStarlight");
    libDDE92A83_gf_AddUnitType("InfestedCivilianLightweight");
    libDDE92A83_gf_AddUnitType("VolatileInfestedStarlight");
    libDDE92A83_gf_AddUnitType("InfestedMarineStarlight");
    libDDE92A83_gf_AddUnitType("StukovInfestedBunker");
    libDDE92A83_gf_AddUnitType("InfestedDiamondbackStarlight");
    libDDE92A83_gf_AddUnitType("InfestedBansheeStarlight");
    libDDE92A83_gf_AddUnitType("InfestedBansheeStarlightBurrowed");
    libDDE92A83_gf_AddUnitType("InfestedLiberatorStarlight");
    libDDE92A83_gf_AddUnitType("InfestedSiegeTankStarlight");
    libDDE92A83_gf_AddUnitType("InfestedSiegeTankStarlightSieged");
    libDDE92A83_gf_AddUnitType("BroodQueenStarlight");
    libDDE92A83_gf_AddUnitType("ApocaliskStarlight");
    libDDE92A83_gf_AddUnitType("GoliathStarlight");
    libDDE92A83_gf_AddUnitType("SwannCyclone");
    libDDE92A83_gf_AddUnitType("WraithStarlight");
    libDDE92A83_gf_AddUnitType("ScienceVesselStarlight");
    libDDE92A83_gf_AddUnitType("SwannThor");
    libDDE92A83_gf_AddUnitType("ARES");
    libDDE92A83_gf_AddUnitType("TychusSam");
    libDDE92A83_gf_AddUnitType("TychusSirius");
    libDDE92A83_gf_AddUnitType("TychusRattlesnake");
    libDDE92A83_gf_AddUnitType("TychusNikara");
    libDDE92A83_gf_AddUnitType("TychusBlaze");
    libDDE92A83_gf_AddUnitType("TychusNux");
    libDDE92A83_gf_AddUnitType("TychusCannonball");
    libDDE92A83_gf_AddUnitType("TychusTychus");
    libDDE92A83_gf_AddUnitType("TychusVega");
    libDDE92A83_gf_AddUnitType("Centurion");
    libDDE92A83_gf_AddUnitType("DarkTemplarVorazun");
    libDDE92A83_gf_AddUnitType("Corsair");
    libDDE92A83_gf_AddUnitType("VorazunOracle");
    libDDE92A83_gf_AddUnitType("DarkArchonStarlight");
    libDDE92A83_gf_AddUnitType("VoidRayVorazun");
    libDDE92A83_gf_AddUnitType("SwarmlingStarlight");
    libDDE92A83_gf_AddUnitType("SwarmlingLightweight");
    libDDE92A83_gf_AddUnitType("Splitterling");
    libDDE92A83_gf_AddUnitType("ZagaraQueen");
    libDDE92A83_gf_AddUnitType("Scourge");
    libDDE92A83_gf_AddUnitType("OverseerZagara");
    libDDE92A83_gf_AddUnitType("HeroZagaraWaveUnit");
    libDDE92A83_gf_AddUnitType("CorruptorZagara");
    libDDE92A83_gf_AddUnitType("InfestedAbomination");
    libDDE92A83_gf_AddUnitType("HunterKillerZagara");
}

void libDDE92A83_gf_CreateAllUnits () {
    // Variable Declarations
    int lv_i;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    int auto58F7FEE0_ae;
    const int auto58F7FEE0_ai = 1;

    // Variable Initialization
    lv_x = 20;
    lv_y = 120;

    // Implementation
    auto58F7FEE0_ae = libDDE92A83_gv_allUnitTypesCurrent;
    lv_i = 0;
    for ( ; ( (auto58F7FEE0_ai >= 0 && lv_i <= auto58F7FEE0_ae) || (auto58F7FEE0_ai < 0 && lv_i >= auto58F7FEE0_ae) ) ; lv_i += auto58F7FEE0_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, libDDE92A83_gv_allUnitTypes[lv_i], 0, 1, Point(lv_x, lv_y));
        lv_x += 4;
        if ((lv_x > 120)) {
            lv_x = 20;
            lv_y -= 4;
        }

    }
}

void libDDE92A83_gf_AddUnitType (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    libDDE92A83_gv_allUnitTypesCurrent += 1;
    libDDE92A83_gv_allUnitTypes[libDDE92A83_gv_allUnitTypesCurrent] = lp_unitType;
}

void libDDE92A83_gf_ListAllUnits () {
    // Variable Declarations
    int lv_i;
    unitgroup lv_uniqueUnits;
    int lv_behaviors;

    // Automatic Variable Declarations
    unitgroup auto55CCB1B3_g;
    int auto55CCB1B3_u;
    unit auto55CCB1B3_var;
    unitgroup autoDDB7FCA3_g;
    int autoDDB7FCA3_u;
    unit autoDDB7FCA3_var;

    // Variable Initialization
    lv_uniqueUnits = UnitGroupEmpty();

    // Implementation
    if ((libDDE92A83_gv_listAllUnits == c_invalidDialogId)) {
        DialogCreate(500, 1200, c_anchorTop, 0, 0, true);
        libDDE92A83_gv_listAllUnits = DialogLastCreated();
        while ((libDDE92A83_gv_listAllUnits != c_invalidDialogId)) {
            lv_i = 0;
            lv_behaviors = 0;
            DialogDestroy(libDDE92A83_gv_listAllUnits);
            auto55CCB1B3_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
            auto55CCB1B3_u = UnitGroupCount(auto55CCB1B3_g, c_unitCountAll);
            for (;; auto55CCB1B3_u -= 1) {
                auto55CCB1B3_var = UnitGroupUnitFromEnd(auto55CCB1B3_g, auto55CCB1B3_u);
                if (auto55CCB1B3_var == null) { break; }
                lv_behaviors += UnitBehaviorCountAll(auto55CCB1B3_var);
                if ((UnitGroupCount(UnitGroupFilter(UnitGetType(auto55CCB1B3_var), c_playerAny, lv_uniqueUnits, UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive) == 0)) {
                    UnitGroupAdd(lv_uniqueUnits, auto55CCB1B3_var);
                }

            }
            DialogCreate(500, 1200, c_anchorTop, 0, 0, true);
            libDDE92A83_gv_listAllUnits = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
            autoDDB7FCA3_g = lv_uniqueUnits;
            autoDDB7FCA3_u = UnitGroupCount(autoDDB7FCA3_g, c_unitCountAll);
            for (;; autoDDB7FCA3_u -= 1) {
                autoDDB7FCA3_var = UnitGroupUnitFromEnd(autoDDB7FCA3_g, autoDDB7FCA3_u);
                if (autoDDB7FCA3_var == null) { break; }
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1000, 50, c_anchorTopLeft, 50, ((lv_i * 22) + 50), (StringToText("<s val=\"InfoPaneUnitSubtitle\"></c>") + IntToText(UnitGroupCount(UnitGroupFilter(UnitGetType(autoDDB7FCA3_var), c_playerAny, UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive)) + StringToText(" (") + IntToText(UnitBehaviorCountAll(autoDDB7FCA3_var)) + StringToText(") ") + StringToText(" ") + StringToText((UnitGetType(autoDDB7FCA3_var)))), ColorWithAlpha(0,0,0,0), false, 2.0);
                lv_i += 1;
            }
            lv_i += 1;
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1000, 50, c_anchorTopLeft, 50, ((lv_i * 22) + 50), (StringToText("<s val=\"InfoPaneUnitSubtitle\"></c>") + IntToText(lv_behaviors) + StringToText(" Behaviors")), ColorWithAlpha(0,0,0,0), false, 2.0);
            Wait(0.0625, c_timeGame);
        }
    }
    else {
        TriggerStop(TriggerGetCurrent());
        DialogDestroy(libDDE92A83_gv_listAllUnits);
        libDDE92A83_gv_listAllUnits = c_invalidDialogId;
    }
}

void libDDE92A83_gf_DebugUnitCosts (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ZealotPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "StalkerPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "SentryPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "AdeptPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ObserverPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "OraclePlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "DarkTemplarPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "DisruptorPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ArchonPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "PhoenixPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "HighTemplarPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ImmortalPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "VoidRayPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ColossusPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "TempestPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "CarrierPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "MothershipPlace");
    libDDE92A83_gf_DebugUnitCostMorph(lp_player, "ArchonPlaceFromDT", "DarkTemplar");
    libDDE92A83_gf_DebugUnitCostMorph(lp_player, "ArchonPlaceFromHT", "HighTemplar");
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SwannHellbatModification", 0);
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "MarinePlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "MarauderPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ReaperPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "GhostPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "HellbatPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "HellionPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "MedivacPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "BansheePlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "VikingFighterPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "VikingAssaultPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "RavenPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "SiegeTankPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "CyclonePlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "WidowMinePlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "LiberatorPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ThorPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ThorSiegePlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "BattlecruiserPlace");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "Hellion", "HellionTank");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "VikingAssault", "VikingFighter");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "Liberator", "LiberatorAG");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "SiegeTankSieged", "SiegeTank");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "ThorAP", "Thor");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "WidowMine", "WidowMineBurrowed");
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganBroodLordModification", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganHydraliskModification", 0);
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ZerglingPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "BanelingPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "RoachPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "QueenPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "OverseerPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "HydraliskPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "MutaliskPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "CorruptorPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "InfestorPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "SwarmHostPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ViperPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "UltraliskPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "BroodLordPlace");
    libDDE92A83_gf_DebugUnitCostMorph(lp_player, "LurkerPlaceFromHydralisk", "Hydralisk");
    libDDE92A83_gf_DebugUnitCostMorph(lp_player, "BroodLordPlaceFromCorruptor", "Corruptor");
    libDDE92A83_gf_DebugUnitCostMorph(lp_player, "RavagerPlaceFromRoach", "Roach");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "Roach", "RoachBurrowed");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "SwarmHostMP", "SwarmHostBurrowedMP");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "Zergling", "ZerglingLightweight");
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ArtanisHighTemplarModification", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ArtanisImmortalModification", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ArtanisPhoenixModification", 1);
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "HonorGuardPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "DragoonPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "HighTemplarArtanisPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "HighArchonPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "PhoenixArtanisPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ImmortalArtanisPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ReaverPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "PurifierTempestPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ArtanisObserverPlace");
    libDDE92A83_gf_DebugUnitCostGS(lp_player, "DragoonStarlight", "ArtanisGuardianShellDragoon");
    libDDE92A83_gf_DebugUnitCostGS(lp_player, "HighArchon", "ArtanisGuardianShellHighArchon");
    libDDE92A83_gf_DebugUnitCostGS(lp_player, "HighTemplarArtanis", "ArtanisGuardianShellHighTemplar");
    libDDE92A83_gf_DebugUnitCostGS(lp_player, "HonorGuard", "ArtanisGuardianShellHonorGuard");
    libDDE92A83_gf_DebugUnitCostGS(lp_player, "ImmortalArtanis", "ArtanisGuardianShellImmortal");
    libDDE92A83_gf_DebugUnitCostGS(lp_player, "ArtanisObserver", "ArtanisGuardianShellObserver");
    libDDE92A83_gf_DebugUnitCostGS(lp_player, "PhoenixArtanis", "ArtanisGuardianShellPhoenix");
    libDDE92A83_gf_DebugUnitCostGS(lp_player, "PurifierTempest", "ArtanisGuardianShellPurifierTempest");
    libDDE92A83_gf_DebugUnitCostGS(lp_player, "ReaverStarlight", "ArtanisGuardianShellReaver");
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ArtanisHighTemplarModification", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ArtanisImmortalModification", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ArtanisPhoenixModification", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "VorazunStalkerModification", 1);
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "CenturionPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "StalkerVorazunPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "DarkTemplarPlaceVorazun");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "DarkArchonPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "CorsairPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "VorazunOraclePlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "VoidRayVorazunPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ShadowGuardPlace");
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "VorazunStalkerModification", 0);
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "SentinelPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "EnergizerPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "AnnihilatorPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "KaraxObserverPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "MiragePlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "PurifierColossusPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "AiurCarrierPlace");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "SentinelStarlight", "SentinelWreckage");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "SupplicantPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "SlayerPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "HavocPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "AlarakPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "VanguardPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "AscendantPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "DestroyerPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "WarPrismPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "WrathwalkerPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "TaldarimMothershipPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "LegionnairePlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "PurifierAdeptPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ConservatorPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "PurifierImmortalPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "PurifierScoutPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "PurifierDisruptorPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "PurifierObserverPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "PurifierColossusFenixPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "PurifierCarrierPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "KaldalisPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "PurifierTalisPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "TaldarinPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "WarbringerPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "MojoPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ClolarionPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "FenixPraetorPlaceUnlock");
    libDDE92A83_gf_DebugUnitCostMorph(lp_player, "KaldalisPlaceMorph", "Legionnaire");
    libDDE92A83_gf_DebugUnitCostMorph(lp_player, "PurifierTalisPlaceMorph", "PurifierAdept");
    libDDE92A83_gf_DebugUnitCostMorph(lp_player, "TaldarinPlaceMorph", "PurifierImmortal");
    libDDE92A83_gf_DebugUnitCostMorph(lp_player, "WarbringerPlaceMorph", "PurifierColossusFenix");
    libDDE92A83_gf_DebugUnitCostMorph(lp_player, "MojoPlaceMorph", "PurifierScout");
    libDDE92A83_gf_DebugUnitCostMorph(lp_player, "ClolarionPlaceMorph", "PurifierCarrier");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "FenixFlyer", "FenixPraetor");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "FenixPraetor", "FenixWalker");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "FenixWalker", "FenixFlyer");
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorBansheeModification", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorBattlecruiserModification", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorMarauderModification", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorSiegeTankModification", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorVikingModification", 1);
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "MarinePlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "MarauderPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "FirebatPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "MedicPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "VulturePlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "DuskWingsPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "BansheePlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "VikingFighterPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "VikingAssaultPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "SiegeTankRaynorPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "BattlecruiserRaynorPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "SpectrePlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "RaynorHyperionPlace");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "VikingAssault", "VikingFighter");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "SiegeTankSieged", "SiegeTank");
    libDDE92A83_gf_DebugUnitCostMorph(lp_player, "RaynorHyperionPlaceFromBattlecruiser", "BattlecruiserRaynor");
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorBansheeModification", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorBattlecruiserModification", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorMarauderModification", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorSiegeTankModification", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RaynorVikingModification", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SwannHellbatModification", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SwannSiegeTankModification", 1);
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "HellbatPlaceSwann");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "GoliathPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "DrakkenLaserDrillPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "SwannCyclonePlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "WraithPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ScienceVesselPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "SiegeTankSwannPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ThorPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "SwannAresPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "SwannThorPlace");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "SiegeTankSieged", "SiegeTank");
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SwannHellbatModification", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SwannSiegeTankModification", 0);
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "EliteMarinePlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "MarauderCommandoPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "NovaPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "SpecOpsGhostPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "CovertBansheePlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "StrikeGoliathPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "HellbatRangerPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "HeavySiegeTankPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "RaidLiberatorPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "RavenTypeIIPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "HoloDecoyPlace");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "HeavySiegeTank", "HeavySiegeTankSieged");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "RaidLiberator", "RaidLiberatorSieged");
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganBroodLordModification", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganHydraliskModification", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganQueenModification", 1);
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "RaptorlingPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "KerriganQueenPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "KerriganPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "HydraliskKerriganPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "LurkerPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "BroodMutaliskPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "OverseerPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "TorrasquePlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "BroodLordKerriganPlace");
    libDDE92A83_gf_DebugUnitCostMorph(lp_player, "LurkerPlaceFromHydraliskKerrigan", "HydraliskKerrigan");
    libDDE92A83_gf_DebugUnitCostMorph(lp_player, "BroodLordPlaceFromBroodMutalisk", "BroodMutalisk");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "Torrasque", "TorrasqueEgg");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "Raptorling", "RaptorlingLightweight");
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganBroodLordModification", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganHydraliskModification", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "KerriganQueenModification", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZagaraQueenModification", 1);
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "SwarmlingPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "SplitterlingPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ZagaraQueenPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ScourgePlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "CorruptorPlaceZagara");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "OverseerZagaraPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ZagaraPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "AberrationPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "HunterKillerPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "OverseerZagaraPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ZagaraRoachPlace");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "SwarmlingStarlight", "SwarmlingLightweight");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "ZagaraRoach", "ZagaraRoachBurrowed");
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZagaraQueenModification", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AbathurQueenModification", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AbathurSwarmHostModification", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AbathurViperModification", 1);
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "VileRoachPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "SwarmQueenPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "AbathurMutaliskPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "RavagerPlaceAbathur");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "DevourerPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "OverseerPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ViperAbathurPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "GuardianPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "BrutaliskPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "LeviathanPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "SwarmHostAbathurPlace");
    libDDE92A83_gf_DebugUnitCostMorph(lp_player, "LeviathanPlaceFromGuardian", "GuardianStarlight");
    libDDE92A83_gf_DebugUnitCostMorph(lp_player, "LeviathanPlaceFromViper", "ViperAbathur");
    libDDE92A83_gf_DebugUnitCostMorph(lp_player, "LeviathanPlaceFromDevourer", "DevourerStarlight");
    libDDE92A83_gf_DebugUnitCostMorph(lp_player, "LeviathanPlaceFromMutalisk", "AbathurMutalisk");
    libDDE92A83_gf_DebugUnitCostMorph(lp_player, "GuardianPlaceFromMutalisk", "AbathurMutalisk");
    libDDE92A83_gf_DebugUnitCostMorph(lp_player, "DevourerPlaceFromMutalisk", "AbathurMutalisk");
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AbathurQueenModification", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AbathurSwarmHostModification", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AbathurViperModification", 0);
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "InfestedCivilianPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "VolatileInfestedPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "InfestedMarinePlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "StukovInfestedBunkerPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "InfestedDiamondbackPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "InfestedBansheePlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "InfestedLiberatorPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "OverseerPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "InfestedSiegeTankPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "BroodQueenPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ApocaliskPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "StukovAleksanderPlace");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "InfestedCivilianStarlight", "InfestedCivilianLightweight");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "InfestedBansheeStarlight", "InfestedBansheeStarlightBurrowed");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "InfestedSiegeTankStarlight", "InfestedSiegeTankStarlightSieged");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "StukovAleksander", "StukovAleksanderCrashed");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "DehakaPrimalZerglingPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "DehakaRavasaurPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "DehakaPrimalRoachPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "DehakaPrimalHydraliskPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "DehakaPrimalIgniterPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "DehakaPrimalMutaliskPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "DehakaImpalerPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "DehakaPrimalHostPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "DehakaPrimalUltraliskPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "DehakaPrimalGuardianPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "DehakaTyrannozorPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "DehakaCreeperHostPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "DehakaHeroPlace");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "DehakaPrimalMutalisk", "DehakaPrimalMutaliskEgg");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "DehakaPrimalHost", "DehakaPrimalHostBurrowed");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "DehakaCreeperHost", "DehakaCreeperHostBurrowed");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "DehakaImpaler", "DehakaImpalerBurrowed");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "DehakaDakrun", "DehakaDakrun");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "HornerReaperPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "HornerHellbatPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "HornerHellionPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "HornerWidowMinePlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "HornerAssaultGalleonPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "HornerAsteriaWraithPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "HornerDeimosVikingFighterPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "HornerDeimosVikingAssaultPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "HornerTheiaRavenPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "HornerSovereignBattlecruiserPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "HornerStrikeFighterPlace");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "HornerReaper", "HornerReaperAir");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "HornerWidowMine", "HornerWidowMineBurrowed");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "HornerDeimosVikingAssault", "HornerDeimosVikingFighter");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "TychusBlazePlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "TychusCannonballPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "TychusNikaraPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "TychusNuxPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "TychusRattlesnakePlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "TychusSamPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "TychusSiriusPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "TychusTychusPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "TychusVegaPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ZerglingStetmannPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "BanelingStetmannPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "HydraliskStetmannPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "GaryStetmannPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "CorruptorStetmannPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "LurkerStetmannPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "InfestorStetmannPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "OverseerStetmannPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "BroodLordStetmannPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "UltraliskStetmannPlace");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "LurkerStetmann", "LurkerStetmannBurrowed");
    libDDE92A83_gf_DebugUnitCostMorph(lp_player, "BroodLordStetmannPlaceFromCorruptorStetmann", "CorruptorStetmann");
    libDDE92A83_gf_DebugUnitCostMorph(lp_player, "LurkerStetmannPlaceFromHydralisk", "HydraliskStetmann");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "BattlecruiserMengskPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "GhostMengskPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "MarauderMengskPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "MedivacMengskPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "RavenMengskPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "SiegeTankMengskPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ThorMengskPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "TrooperMengskAAPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "TrooperMengskFlamethrowerPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "TrooperMengskImprovedPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "TrooperMengskPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "VikingMengskAssaultPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "VikingMengskFighterPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "HydraliskMengskPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ZerglingMengskPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "UltraliskMengskPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "MutaliskMengskPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "WarhoundPlace");
    libDDE92A83_gf_DebugUnitCostMorph(lp_player, "WarhoundPlaceFromTrooper", "TrooperMengsk");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "VikingMengskAssault", "VikingMengskFighter");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "ThorMengsk", "ThorMengskSieged");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "SiegeTankMengsk", "SiegeTankMengskSieged");
    libDDE92A83_gf_DebugUnitCostSimilar(lp_player, "RavenMengsk", "RavenMengskSieged");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ZeratulPlace");
    libDDE92A83_gf_DebugUnitCostPlace(lp_player, "ZeratulStalkerPlace");
}

void libDDE92A83_gf_DebugSpending (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
}

void libDDE92A83_gf_DebugUnitCostPlace (int lp_player, string lp_ability) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player), "CostResource[" + IntToString(0) + "]", lp_player) != CatalogFieldValueGetAsInt(c_gameCatalogAbil, lp_ability, "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", lp_player))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText(((lp_ability) + ": " + "Ability cost should be " + IntToString(CatalogFieldValueGetAsInt(c_gameCatalogUnit, CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player), "CostResource[" + IntToString(0) + "]", lp_player)))));
    }

    if ((CatalogFieldValueGet(c_gameCatalogUnit, CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player), "CostCategory", c_playerAny) != "Army") && (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player) != ("SwannDrakkenLaserDrill"))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText(((CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player)) + ": " + "Cost Category is not set to \"Army\"")));
    }

    if ((CatalogFieldValueGet(c_gameCatalogUnit, CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player), "Food", c_playerAny) == "0") && (CatalogFieldValueGet(c_gameCatalogUnit, CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player), "Attributes[" + IntToString(9) + "]", c_playerAny) != "1") && (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player) != ("SwannDrakkenLaserDrill")) && (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player) != ("HornerAssaultGalleon")) && (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player) != ("HornerAssaultGalleonUpgraded"))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText(((CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player)) + ": " + "Food not set.")));
    }

    if ((StringSub(CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PlaceUnit", 0), 1, 3) != StringSub(CatalogFieldValueGet(c_gameCatalogUnit, CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player), "PlacementFootprint", 0), 1, 3)) && (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player) != ("ThorAP")) && (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player) != ("Thor"))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText(((CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player)) + ": " + "Pathing Footprint should be " + StringSub(CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PlaceUnit", 0), 1, 3))));
    }

    if ((CatalogFieldValueGet(c_gameCatalogUnit, CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player), "LeaderAlias", c_playerAny) != (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player))) && (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player) != ("TrooperMengsk")) && (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player) != ("TrooperMengskAA")) && (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player) != ("TrooperMengskFlamethrower")) && (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player) != ("TrooperMengskImproved")) && (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player) != ("VikingMengskAssault")) && (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player) != ("VikingAssault")) && (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player) != ("ThorAP"))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText(((CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player)) + ": " + "Wrong leader alias")));
    }

}

void libDDE92A83_gf_DebugUnitCostSimilar (int lp_player, string lp_baseUnit, string lp_alternateUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_baseUnit, "CostResource[" + IntToString(0) + "]", lp_player) != CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_alternateUnit, "CostResource[" + IntToString(0) + "]", lp_player))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText(((lp_baseUnit) + " (" + IntToString(CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_baseUnit, "CostResource[" + IntToString(0) + "]", lp_player)) + ") /" + (lp_alternateUnit) + " (" + IntToString(CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_baseUnit, "CostResource[" + IntToString(0) + "]", lp_player)) + ")")));
    }

}

void libDDE92A83_gf_DebugUnitCostSimilar2 (int lp_player, string lp_baseUnit, string lp_alternateUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_baseUnit, "CostResource[" + IntToString(0) + "]", lp_player) != CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lp_alternateUnit, "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", lp_player))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText(((lp_baseUnit) + " (" + IntToString(CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_baseUnit, "CostResource[" + IntToString(0) + "]", lp_player)) + ") (1) / " + (lp_alternateUnit) + " (" + IntToString(CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lp_alternateUnit, "VeterancyLevelArray[" + IntToString(1) + "].MinVeterancyXP", lp_player)) + ")")));
    }

    if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_baseUnit, "CostResource[" + IntToString(0) + "]", lp_player) != CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lp_alternateUnit, "VeterancyLevelArray[" + IntToString(2) + "].MinVeterancyXP", lp_player))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText(((lp_baseUnit) + " (" + IntToString(CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_baseUnit, "CostResource[" + IntToString(0) + "]", lp_player)) + ") (2) / " + (lp_alternateUnit) + " (" + IntToString(CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lp_alternateUnit, "VeterancyLevelArray[" + IntToString(2) + "].MinVeterancyXP", lp_player)) + ")")));
    }

    if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_baseUnit, "CostResource[" + IntToString(0) + "]", lp_player) != CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lp_alternateUnit, "VeterancyLevelArray[" + IntToString(3) + "].MinVeterancyXP", lp_player))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText(((lp_baseUnit) + " (" + IntToString(CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_baseUnit, "CostResource[" + IntToString(0) + "]", lp_player)) + ") (3) / " + (lp_alternateUnit) + " (" + IntToString(CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lp_alternateUnit, "VeterancyLevelArray[" + IntToString(3) + "].MinVeterancyXP", lp_player)) + ")")));
    }

}

void libDDE92A83_gf_DebugUnitCostGS (int lp_player, string lp_baseUnit, string lp_guardianShell) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_baseUnit, "CostResource[" + IntToString(0) + "]", lp_player) != CatalogFieldValueGetAsInt(c_gameCatalogAbil, lp_guardianShell, "Cost[" + IntToString(0) + "].Charge.CountUse", lp_player))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText(((lp_guardianShell) + " should cost " + IntToString(CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_baseUnit, "CostResource[" + IntToString(0) + "]", lp_player)))));
    }

}

void libDDE92A83_gf_DebugUnitCostMorph (int lp_player, string lp_ability, string lp_baseUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((CatalogFieldValueGetAsInt(c_gameCatalogUnit, CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player), "CostResource[" + IntToString(0) + "]", lp_player) - CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_baseUnit, "CostResource[" + IntToString(0) + "]", lp_player)) != CatalogFieldValueGetAsInt(c_gameCatalogAbil, lp_ability, "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", lp_player))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText(((lp_ability) + ": " + "Ability should cost " + IntToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player), "CostResource[" + IntToString(0) + "]", lp_player) - CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_baseUnit, "CostResource[" + IntToString(0) + "]", lp_player))))));
    }

}

void libDDE92A83_gf_ChangeUnitCosts (int lp_player, fixed lp_amount, fixed lp_variance) {
    // Automatic Variable Declarations
    // Implementation
    libDDE92A83_gv_changeUnitCostsAmount = lp_amount;
    libDDE92A83_gv_changeUnitCostsAmountVariance = lp_variance;
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "ObserverPlace");
    libDDE92A83_gf_ChangeUnitCostSimilar2(lp_player, "ObserverPlace", "ObserverPlaceNoAutocast");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "OverseerPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "BansheePlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "VikingFighterPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "VikingAssaultPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "ThorPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "MarauderPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "MarinePlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "LurkerPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "ZealotPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "StalkerPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "SentryPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "AdeptPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "OraclePlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "DarkTemplarPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "DisruptorPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "ArchonPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "PhoenixPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "HighTemplarPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "ImmortalPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "VoidRayPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "ColossusPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "TempestPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "CarrierPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "MothershipPlace");
    libDDE92A83_gf_ChangeUnitCostMorph(lp_player, "ArchonPlaceFromDT", "DarkTemplar");
    libDDE92A83_gf_ChangeUnitCostMorph(lp_player, "ArchonPlaceFromHT", "HighTemplar");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "ReaperPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "GhostPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "HellbatPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "HellionPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "MedivacPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "RavenPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "SiegeTankPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "CyclonePlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "WidowMinePlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "LiberatorPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "ThorSiegePlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "BattlecruiserPlace");
    libDDE92A83_gf_ChangeUnitCostSimilar2(lp_player, "HellbatPlace", "HellionPlace");
    libDDE92A83_gf_ChangeUnitCostSimilar2(lp_player, "VikingFighterPlace", "VikingAssaultPlace");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "Liberator", "LiberatorAG");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "SiegeTank", "SiegeTankSieged");
    libDDE92A83_gf_ChangeUnitCostSimilar2(lp_player, "ThorPlace", "ThorSiegePlace");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "WidowMine", "WidowMineBurrowed");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "ZerglingPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "BanelingPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "RoachPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "QueenPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "HydraliskPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "MutaliskPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "CorruptorPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "InfestorPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "SwarmHostPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "ViperPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "UltraliskPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "BroodLordPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "RavagerPlace");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "Roach", "RoachBurrowed");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "SwarmHostMP", "SwarmHostBurrowedMP");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "Zergling", "ZerglingLightweight");
    libDDE92A83_gf_ChangeUnitCostMorph(lp_player, "LurkerPlaceFromHydralisk", "Hydralisk");
    libDDE92A83_gf_ChangeUnitCostMorph(lp_player, "BroodLordPlaceFromCorruptor", "Corruptor");
    libDDE92A83_gf_ChangeUnitCostMorph(lp_player, "RavagerPlaceFromRoach", "Roach");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "HonorGuardPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "DragoonPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "HighTemplarArtanisPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "HighArchonPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "PhoenixArtanisPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "ImmortalArtanisPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "ReaverPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "PurifierTempestPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "CenturionPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "StalkerVorazunPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "DarkTemplarPlaceVorazun");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "DarkArchonPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "CorsairPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "VorazunOraclePlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "VoidRayVorazunPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "ShadowGuardPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "SentinelPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "EnergizerPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "AnnihilatorPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "MiragePlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "PurifierColossusPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "AiurCarrierPlace");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "SentinelStarlight", "SentinelWreckage");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "SupplicantPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "SlayerPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "HavocPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "AlarakPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "VanguardPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "AscendantPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "DestroyerPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "WarPrismPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "WrathwalkerPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "TaldarimMothershipPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "LegionnairePlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "PurifierAdeptPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "ConservatorPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "PurifierImmortalPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "PurifierScoutPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "PurifierDisruptorPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "PurifierObserverPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "PurifierColossusFenixPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "PurifierCarrierPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "KaldalisPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "PurifierTalisPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "TaldarinPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "WarbringerPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "MojoPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "ClolarionPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "FenixPraetorPlaceUnlock");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "FenixPraetor", "FenixFlyer");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "FenixPraetor", "FenixWalker");
    libDDE92A83_gf_ChangeUnitCostMorph(lp_player, "KaldalisPlaceMorph", "Legionnaire");
    libDDE92A83_gf_ChangeUnitCostMorph(lp_player, "PurifierTalisPlaceMorph", "PurifierAdept");
    libDDE92A83_gf_ChangeUnitCostMorph(lp_player, "TaldarinPlaceMorph", "PurifierImmortal");
    libDDE92A83_gf_ChangeUnitCostMorph(lp_player, "WarbringerPlaceMorph", "PurifierColossusFenix");
    libDDE92A83_gf_ChangeUnitCostMorph(lp_player, "MojoPlaceMorph", "PurifierScout");
    libDDE92A83_gf_ChangeUnitCostMorph(lp_player, "ClolarionPlaceMorph", "PurifierCarrier");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "FirebatPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "MedicPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "VulturePlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "DuskWingsPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "SiegeTankRaynorPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "BattlecruiserRaynorPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "RaynorHyperionPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "SpectrePlace");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "VikingAssault", "VikingFighter");
    libDDE92A83_gf_ChangeUnitCostMorph(lp_player, "RaynorHyperionPlaceFromBattlecruiser", "BattlecruiserRaynor");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "HellbatPlaceSwann");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "GoliathPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "DrakkenLaserDrillPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "SwannCyclonePlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "WraithPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "ScienceVesselPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "SiegeTankSwannPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "SwannAresPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "SwannThorPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "EliteMarinePlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "MarauderCommandoPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "NovaPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "SpecOpsGhostPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "CovertBansheePlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "StrikeGoliathPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "HellbatRangerPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "HeavySiegeTankPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "RaidLiberatorPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "RavenTypeIIPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "HoloDecoyPlace");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "HeavySiegeTank", "HeavySiegeTankSieged");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "RaidLiberator", "RaidLiberatorSieged");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "RaptorlingPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "KerriganQueenPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "KerriganPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "HydraliskKerriganPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "BroodMutaliskPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "TorrasquePlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "BroodLordKerriganPlace");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "Torrasque", "TorrasqueEgg");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "Raptorling", "RaptorlingLightweight");
    libDDE92A83_gf_ChangeUnitCostMorph(lp_player, "LurkerPlaceFromHydraliskKerrigan", "HydraliskKerrigan");
    libDDE92A83_gf_ChangeUnitCostMorph(lp_player, "BroodLordPlaceFromBroodMutalisk", "BroodMutalisk");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "SwarmlingPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "SplitterlingPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "ZagaraQueenPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "ScourgePlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "CorruptorPlaceZagara");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "ZagaraPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "AberrationPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "HunterKillerPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "OverseerZagaraPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "ZagaraRoachPlace");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "SwarmlingStarlight", "SwarmlingLightweight");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "ZagaraRoach", "ZagaraRoachBurrowed");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "VileRoachPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "SwarmQueenPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "AbathurMutaliskPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "RavagerPlaceAbathur");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "DevourerPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "ViperAbathurPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "GuardianPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "BrutaliskPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "LeviathanPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "SwarmHostAbathurPlace");
    libDDE92A83_gf_ChangeUnitCostMorph(lp_player, "LeviathanPlaceFromGuardian", "GuardianStarlight");
    libDDE92A83_gf_ChangeUnitCostMorph(lp_player, "LeviathanPlaceFromViper", "ViperAbathur");
    libDDE92A83_gf_ChangeUnitCostMorph(lp_player, "LeviathanPlaceFromDevourer", "DevourerStarlight");
    libDDE92A83_gf_ChangeUnitCostMorph(lp_player, "LeviathanPlaceFromMutalisk", "AbathurMutalisk");
    libDDE92A83_gf_ChangeUnitCostMorph(lp_player, "GuardianPlaceFromMutalisk", "AbathurMutalisk");
    libDDE92A83_gf_ChangeUnitCostMorph(lp_player, "DevourerPlaceFromMutalisk", "AbathurMutalisk");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "InfestedCivilianPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "VolatileInfestedPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "InfestedMarinePlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "StukovInfestedBunkerPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "InfestedDiamondbackPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "InfestedBansheePlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "InfestedLiberatorPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "InfestedSiegeTankPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "BroodQueenPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "ApocaliskPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "StukovAleksanderPlace");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "InfestedCivilianStarlight", "InfestedCivilianLightweight");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "InfestedBansheeStarlight", "InfestedBansheeStarlightBurrowed");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "InfestedSiegeTankStarlight", "InfestedSiegeTankStarlightSieged");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "StukovAleksander", "StukovAleksanderCrashed");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "DehakaPrimalZerglingPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "DehakaRavasaurPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "DehakaPrimalRoachPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "DehakaPrimalHydraliskPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "DehakaPrimalIgniterPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "DehakaPrimalMutaliskPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "DehakaImpalerPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "DehakaPrimalHostPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "DehakaPrimalUltraliskPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "DehakaPrimalGuardianPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "DehakaTyrannozorPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "DehakaCreeperHostPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "DehakaHeroPlace");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "DehakaPrimalMutalisk", "DehakaPrimalMutaliskEgg");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "DehakaPrimalHost", "DehakaPrimalHostBurrowed");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "DehakaCreeperHost", "DehakaCreeperHostBurrowed");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "DehakaImpaler", "DehakaImpalerBurrowed");
    libDDE92A83_gf_ChangeUnitCost(lp_player, "HornerAssaultGalleonUpgraded");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "HornerReaperPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "HornerHellbatPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "HornerHellionPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "HornerWidowMinePlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "HornerAssaultGalleonPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "HornerAsteriaWraithPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "HornerDeimosVikingFighterPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "HornerDeimosVikingAssaultPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "HornerTheiaRavenPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "HornerSovereignBattlecruiserPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "HornerStrikeFighterPlace");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "HornerReaper", "HornerReaperAir");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "HornerWidowMine", "HornerWidowMineBurrowed");
    libDDE92A83_gf_ChangeUnitCostSimilar2(lp_player, "HornerDeimosVikingFighterPlace", "HornerDeimosVikingAssaultPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "TychusBlazePlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "TychusCannonballPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "TychusNikaraPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "TychusNuxPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "TychusRattlesnakePlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "TychusSamPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "TychusSiriusPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "TychusTychusPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "TychusVegaPlace");
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusBlazeGear", 0);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusBlazeGear", 1);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusBlazeGear", 2);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusBlazeGear", 3);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusCannonballGear", 0);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusCannonballGear", 1);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusCannonballGear", 2);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusCannonballGear", 3);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusNikaraGear", 0);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusNikaraGear", 1);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusNikaraGear", 2);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusNikaraGear", 3);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusNuxGear", 0);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusNuxGear", 1);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusNuxGear", 2);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusNuxGear", 3);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusRattlesnakeGear", 0);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusRattlesnakeGear", 1);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusRattlesnakeGear", 2);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusRattlesnakeGear", 3);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusSamGear", 0);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusSamGear", 1);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusSamGear", 2);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusSamGear", 3);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusSiriusGear", 0);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusSiriusGear", 1);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusSiriusGear", 2);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusSiriusGear", 3);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusTychusGear", 0);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusTychusGear", 1);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusTychusGear", 2);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusTychusGear", 3);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusVegaGear", 0);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusVegaGear", 1);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusVegaGear", 2);
    libDDE92A83_gf_ChangeUnitCostSpecialize(lp_player, "TychusVegaGear", 3);
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "ZerglingStetmannPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "BanelingStetmannPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "HydraliskStetmannPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "GaryStetmannPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "CorruptorStetmannPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "LurkerStetmannPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "InfestorStetmannPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "OverseerStetmannPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "BroodLordStetmannPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "UltraliskStetmannPlace");
    libDDE92A83_gf_ChangeUnitCost(lp_player, "SuperGaryStetmann");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "LurkerStetmann", "LurkerStetmannBurrowed");
    libDDE92A83_gf_ChangeUnitCostMorph(lp_player, "BroodLordStetmannPlaceFromCorruptorStetmann", "CorruptorStetmann");
    libDDE92A83_gf_ChangeUnitCostMorph(lp_player, "LurkerStetmannPlaceFromHydralisk", "HydraliskStetmann");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "BattlecruiserMengskPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "GhostMengskPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "MarauderMengskPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "MedivacMengskPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "RavenMengskPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "SiegeTankMengskPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "ThorMengskPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "TrooperMengskAAPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "TrooperMengskFlamethrowerPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "TrooperMengskImprovedPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "TrooperMengskPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "VikingMengskAssaultPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "VikingMengskFighterPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "ZerglingMengskPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "MutaliskMengskPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "UltraliskMengskPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "HydraliskMengskPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "ArtilleryMengskPlace");
    libDDE92A83_gf_ChangeUnitCostPlace(lp_player, "WarhoundPlace");
    libDDE92A83_gf_ChangeUnitCostMorph(lp_player, "WarhoundPlaceFromTrooper", "TrooperMengsk");
    libDDE92A83_gf_ChangeUnitCostSimilar2(lp_player, "VikingMengskFighterPlace", "VikingMengskAssaultPlace");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "ThorMengsk", "ThorMengskSieged");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "SiegeTankMengsk", "SiegeTankMengskSieged");
    libDDE92A83_gf_ChangeUnitCostSimilar(lp_player, "RavenMengsk", "RavenMengskSieged");
}

void libDDE92A83_gf_ChangeUnitCostMorph (int lp_player, string lp_ability, string lp_baseUnit) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueSet(c_gameCatalogAbil, lp_ability, "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player), "CostResource[" + IntToString(0) + "]", lp_player) - CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_baseUnit, "CostResource[" + IntToString(0) + "]", lp_player))));
}

void libDDE92A83_gf_ChangeUnitCostSimilar (int lp_player, string lp_baseUnit, string lp_alternateUnit) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueSet(c_gameCatalogUnit, lp_alternateUnit, "CostResource[" + IntToString(0) + "]", lp_player, IntToString(CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_baseUnit, "CostResource[" + IntToString(0) + "]", lp_player)));
}

void libDDE92A83_gf_ChangeUnitCostSimilar2 (int lp_player, string lp_baseAbility, string lp_alternateAbility) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueSet(c_gameCatalogUnit, CatalogFieldValueGet(c_gameCatalogAbil, lp_alternateAbility, "Placeholder", lp_player), "CostResource[" + IntToString(0) + "]", lp_player, IntToString(CatalogFieldValueGetAsInt(c_gameCatalogAbil, lp_baseAbility, "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", lp_player)));
    CatalogFieldValueSet(c_gameCatalogAbil, lp_alternateAbility, "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(CatalogFieldValueGetAsInt(c_gameCatalogAbil, lp_baseAbility, "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", lp_player)));
}

void libDDE92A83_gf_ChangeUnitCostPlace (int lp_player, string lp_ability) {
    // Variable Declarations
    fixed lv_x;
    int lv_c;
    int lv_m;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_x = RandomFixed((libDDE92A83_gv_changeUnitCostsAmount - libDDE92A83_gv_changeUnitCostsAmountVariance), (libDDE92A83_gv_changeUnitCostsAmount + libDDE92A83_gv_changeUnitCostsAmountVariance));
    lv_c = FixedToInt((CatalogFieldValueGetAsInt(c_gameCatalogUnit, CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player), "CostResource[" + IntToString(0) + "]", lp_player) * lv_x));
    lv_m = FixedToInt((CatalogFieldValueGetAsInt(c_gameCatalogUnit, CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player), "CostResource[" + IntToString(0) + "]", lp_player) * lv_x));

    // Implementation
    CatalogFieldValueSet(c_gameCatalogUnit, CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Placeholder", lp_player), "CostResource[" + IntToString(0) + "]", lp_player, IntToString(lv_c));
    CatalogFieldValueSet(c_gameCatalogAbil, lp_ability, "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(lv_c));
}

void libDDE92A83_gf_ChangeUnitCostSpecialize (int lp_player, string lp_ability, int lp_index) {
    // Variable Declarations
    fixed lv_x;
    int lv_c;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_x = RandomFixed((libDDE92A83_gv_changeUnitCostsAmount - libDDE92A83_gv_changeUnitCostsAmountVariance), (libDDE92A83_gv_changeUnitCostsAmount + libDDE92A83_gv_changeUnitCostsAmountVariance));
    lv_c = FixedToInt((CatalogFieldValueGetAsInt(c_gameCatalogAbil, lp_ability, "InfoArray[" + IntToString(lp_index) + "].Resource[" + IntToString(0) + "]", lp_player) * lv_x));

    // Implementation
    CatalogFieldValueSet(c_gameCatalogAbil, lp_ability, "InfoArray[" + IntToString(lp_index) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(lv_c));
}

void libDDE92A83_gf_ChangeUnitCost (int lp_player, string lp_unit) {
    // Variable Declarations
    fixed lv_x;
    int lv_c;
    int lv_m;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_x = RandomFixed((libDDE92A83_gv_changeUnitCostsAmount - libDDE92A83_gv_changeUnitCostsAmountVariance), (libDDE92A83_gv_changeUnitCostsAmount + libDDE92A83_gv_changeUnitCostsAmountVariance));
    lv_c = FixedToInt((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unit, "CostResource[" + IntToString(0) + "]", lp_player) * lv_x));
    lv_m = FixedToInt((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unit, "CostResource[" + IntToString(0) + "]", lp_player) * lv_x));

    // Implementation
    CatalogFieldValueSet(c_gameCatalogUnit, lp_unit, "CostResource[" + IntToString(0) + "]", lp_player, IntToString(lv_c));
}

string libDDE92A83_gf_ConvertIntegerToCharacter (int lp_integer) {
    // Automatic Variable Declarations
    // Implementation
    return StringSub(libDDE92A83_gv_characters, (lp_integer + 1), (lp_integer + 1));
}

string libDDE92A83_gf_ConvertCharacterToInteger (string lp_string) {
    // Automatic Variable Declarations
    // Implementation
    return IntToString((StringFind(libDDE92A83_gv_characters, lp_string, c_stringCase) - 1));
}

string libDDE92A83_gf_Convert7Integersto4Characters (int lp_integer) {
    // Variable Declarations
    int lv_stepARemainder;
    int lv_stepADivisions;
    int lv_stepBRemainder;
    int lv_stepBDivisions;
    int lv_stepCRemainder;
    int lv_stepCDivisions;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_stepARemainder = ModI(libNtve_gf_ArithmeticIntClamp(lp_integer, 0, 9999999), libDDE92A83_gv_base);
    lv_stepADivisions = ((libNtve_gf_ArithmeticIntClamp(lp_integer, 0, 9999999) - ModI(libNtve_gf_ArithmeticIntClamp(lp_integer, 0, 9999999), libDDE92A83_gv_base)) / libDDE92A83_gv_base);
    lv_stepBRemainder = ModI(lv_stepADivisions, libDDE92A83_gv_base);
    lv_stepBDivisions = ((lv_stepADivisions - ModI(lv_stepADivisions, libDDE92A83_gv_base)) / libDDE92A83_gv_base);
    lv_stepCRemainder = ModI(lv_stepBDivisions, libDDE92A83_gv_base);
    lv_stepCDivisions = ((lv_stepBDivisions - ModI(lv_stepBDivisions, libDDE92A83_gv_base)) / libDDE92A83_gv_base);

    // Implementation
    return (libDDE92A83_gf_ConvertIntegerToCharacter(libNtve_gf_ArithmeticIntClamp(lv_stepARemainder, 0, libDDE92A83_gv_base)) + libDDE92A83_gf_ConvertIntegerToCharacter(libNtve_gf_ArithmeticIntClamp(lv_stepBRemainder, 0, libDDE92A83_gv_base)) + libDDE92A83_gf_ConvertIntegerToCharacter(libNtve_gf_ArithmeticIntClamp(lv_stepCRemainder, 0, libDDE92A83_gv_base)) + libDDE92A83_gf_ConvertIntegerToCharacter(libNtve_gf_ArithmeticIntClamp(lv_stepCDivisions, 0, libDDE92A83_gv_base)));
}

string libDDE92A83_gf_Convert4Charactersto7Integers (string lp_string) {
    // Variable Declarations
    string lv_return;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_return = IntToString(((((((StringToInt(libDDE92A83_gf_ConvertCharacterToInteger(StringSub(lp_string, 4, 4))) * libDDE92A83_gv_base) + StringToInt(libDDE92A83_gf_ConvertCharacterToInteger(StringSub(lp_string, 3, 3)))) * libDDE92A83_gv_base) + StringToInt(libDDE92A83_gf_ConvertCharacterToInteger(StringSub(lp_string, 2, 2)))) * libDDE92A83_gv_base) + StringToInt(libDDE92A83_gf_ConvertCharacterToInteger(StringSub(lp_string, 1, 1)))));

    // Implementation
    while ((StringLength(lv_return) < 7)) {
        lv_return = (IntToString(0) + lv_return);
    }
    return lv_return;
}

trigger auto_libDDE92A83_gf_PlayerStatsDialog_Trigger = null;

void libDDE92A83_gf_PlayerStatsDialog () {
    if (auto_libDDE92A83_gf_PlayerStatsDialog_Trigger == null) {
        auto_libDDE92A83_gf_PlayerStatsDialog_Trigger = TriggerCreate("auto_libDDE92A83_gf_PlayerStatsDialog_TriggerFunc");
    }

    TriggerExecute(auto_libDDE92A83_gf_PlayerStatsDialog_Trigger, false, false);
}

bool auto_libDDE92A83_gf_PlayerStatsDialog_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerHandleDialog;
    int lv_playerHandleDialogItem;
    string lv_handle;
    text lv_xP;

    // Automatic Variable Declarations
    const int auto9036D871_n = 10;
    int auto9036D871_i;
    playergroup autoD8281325_g;
    int autoD8281325_var;

    // Variable Initialization
    lv_playerHandleDialog = c_invalidDialogId;
    lv_playerHandleDialogItem = c_invalidDialogControlId;
    lv_handle = "";

    // Implementation
    DialogCreate(200, 200, c_anchorBottomLeft, -53, 240, true);
    DialogSetRenderPriority(DialogLastCreated(), 500);
    lv_playerHandleDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupActive(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 32, 32, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_playerHandleDialogItem = DialogControlLastCreated();
    for (auto9036D871_i = 1; auto9036D871_i <= auto9036D871_n; auto9036D871_i += 1) {
        autoD8281325_g = PlayerGroupActive();
        autoD8281325_var = -1;
        while (true) {
            autoD8281325_var = PlayerGroupNextPlayer(autoD8281325_g, autoD8281325_var);
            if (autoD8281325_var < 0) { break; }
            if ((PlayerType(autoD8281325_var) == c_playerTypeUser)) {
                lv_handle = ("<s val=\"StandardTooltipHeader\"></c>Player Handle ID</s></n></n><s val=\"ItemStats\"></c>" + (("<c val=\"FFFFFF\">" + StringSub(PlayerHandle(autoD8281325_var), 1, 1) + "</c>") + StringSub(PlayerHandle(autoD8281325_var), 2, 2) + ("<c val=\"FFFFFF\">" + StringSub(PlayerHandle(autoD8281325_var), 3, 4) + "</c>") + StringSub(PlayerHandle(autoD8281325_var), 5, 5) + ("<c val=\"FFFFFF\">" + StringSub(PlayerHandle(autoD8281325_var), 6, 6) + "</c>") + StringSub(PlayerHandle(autoD8281325_var), 7, 7) + ("[<c val=\"FFFFFF\">" + StringSub(PlayerHandle(autoD8281325_var), 8, 10) + " " + StringSub(PlayerHandle(autoD8281325_var), 11, 13) + " " + StringSub(PlayerHandle(autoD8281325_var), 14, 99) + "</c>]")) + "</n>" + PlayerHandle(autoD8281325_var));
                lv_xP = (StringToText("</n>XP: ") + FormatNumber(lib39886FE6_gf_MasteryBarPlayerXP(autoD8281325_var)));
                libNtve_gf_SetDialogItemTooltip(lv_playerHandleDialogItem, (StringToText(lv_handle) + lv_xP), PlayerGroupSingle(autoD8281325_var));
            }

        }
        Wait(0.1, c_timeReal);
    }
    DialogDestroy(lv_playerHandleDialog);
    return true;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Preparation Time Countdown
//--------------------------------------------------------------------------------------------------
bool libDDE92A83_gt_PreparationTimeCountdown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libDDE92A83_gv_preparationTime > 0)) {
        libDDE92A83_gv_preparationTime -= 1;
    }

    libNtve_gf_SetDialogItemText(libDDE92A83_gv_preparationTimer, (StringExternal("Param/Value/lib_DDE92A83_6306CDB8") + IntToText(libDDE92A83_gv_preparationTime)), PlayerGroupAll());
    if ((libDDE92A83_gv_preparationTime == 32) && ((PlayerGroupCount(libDDE92A83_gv_preparationDefendSoundGroup) > 0) || (PlayerGroupCount(libDDE92A83_gv_preparationAttackSoundGroup) > 0))) {
        TriggerSendEvent("AnnouncerSoundStart");
        libDDE92A83_gf_FadeSounds(true, true, PlayerGroupAll(), 33.0, 0.5);
        Wait(0.5, c_timeGame);
        SoundPlayForPlayer(SoundLink("Athena_AttackCommences30", -1), c_maxPlayers, libDDE92A83_gv_preparationAttackSoundGroup, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("Athena_AttackersIncoming30", -1), c_maxPlayers, libDDE92A83_gv_preparationDefendSoundGroup, 100.0, 0.0);
        Wait(3.0, c_timeReal);
        libDDE92A83_gf_FadeSounds(false, true, PlayerGroupAll(), 33.0, 0.5);
        TriggerSendEvent("AnnouncerSoundStop");
    }

    if ((libDDE92A83_gv_preparationTime == 12) && ((PlayerGroupCount(libDDE92A83_gv_preparationDefendSoundGroup) > 0) || (PlayerGroupCount(libDDE92A83_gv_preparationAttackSoundGroup) > 0))) {
        TriggerSendEvent("AnnouncerSoundStart");
        libDDE92A83_gf_FadeSounds(true, true, PlayerGroupAll(), 33.0, 0.5);
        Wait(0.5, c_timeGame);
        SoundPlayForPlayer(SoundLink("Athena_AttackCommences10", -1), c_maxPlayers, libDDE92A83_gv_preparationAttackSoundGroup, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("Athena_AttackersIncoming10", -1), c_maxPlayers, libDDE92A83_gv_preparationDefendSoundGroup, 100.0, 0.0);
        Wait(3.0, c_timeReal);
        libDDE92A83_gf_FadeSounds(false, true, PlayerGroupAll(), 33.0, 0.5);
        TriggerSendEvent("AnnouncerSoundStop");
    }

    if ((libDDE92A83_gv_preparationTime == 5)) {
        TriggerSendEvent("AnnouncerSoundStart");
        libDDE92A83_gf_FadeSounds(true, true, PlayerGroupAll(), 33.0, 0.5);
        SoundPlayForPlayer(SoundLink("AC_UI_Countdown_5MxNone", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("Athena_5", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    if ((libDDE92A83_gv_preparationTime == 4)) {
        SoundPlayForPlayer(SoundLink("Athena_4", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    if ((libDDE92A83_gv_preparationTime == 3)) {
        SoundPlayForPlayer(SoundLink("Athena_3", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    if ((libDDE92A83_gv_preparationTime == 2)) {
        SoundPlayForPlayer(SoundLink("Athena_2", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    if ((libDDE92A83_gv_preparationTime == 1)) {
        SoundPlayForPlayer(SoundLink("Athena_1", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    if ((libDDE92A83_gv_preparationTime == 0)) {
        TriggerEnable(libDDE92A83_gt_PreparationTimeCountdown, false);
        DialogControlFadeTransparency(libDDE92A83_gv_preparationTimer, PlayerGroupAll(), 0.5, 100.0);
        DialogControlFadeTransparency(libDDE92A83_gv_preparationText, PlayerGroupAll(), 0.5, 100.0);
        SoundPlayForPlayer(SoundLink("Athena_AttackersIncoming", -1), c_maxPlayers, libDDE92A83_gv_preparationAttackSoundGroup, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("Athena_AttackersIncoming", -1), c_maxPlayers, libDDE92A83_gv_preparationDefendSoundGroup, 100.0, 0.0);
        TriggerSendEvent("StarlightPreparationTimeComplete");
        Wait(2.5, c_timeReal);
        libDDE92A83_gf_FadeSounds(false, true, PlayerGroupAll(), 33.0, 0.5);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ProtossMissionMusic", c_soundtrackCueAny, c_soundtrackIndexAny, true);
        TriggerSendEvent("AnnouncerSoundStop");
        Wait(1.0, c_timeReal);
        DialogDestroy(libDDE92A83_gv_preparationDialog);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libDDE92A83_gt_PreparationTimeCountdown_Init () {
    libDDE92A83_gt_PreparationTimeCountdown = TriggerCreate("libDDE92A83_gt_PreparationTimeCountdown_Func");
    TriggerEnable(libDDE92A83_gt_PreparationTimeCountdown, false);
    TriggerAddEventTimePeriodic(libDDE92A83_gt_PreparationTimeCountdown, 1.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Preparation Time End
//--------------------------------------------------------------------------------------------------
bool libDDE92A83_gt_PreparationTimeEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    DialogDestroy(libDDE92A83_gv_preparationDialog);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDDE92A83_gt_PreparationTimeEnd_Init () {
    libDDE92A83_gt_PreparationTimeEnd = TriggerCreate("libDDE92A83_gt_PreparationTimeEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fullscreen Border Size Check
//--------------------------------------------------------------------------------------------------
bool libDDE92A83_gt_FullscreenBorderSizeCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    DialogControlSetSize(libDDE92A83_gv_fullscreenBorderModel, PlayerGroupAll(), DialogGetWidth(libDDE92A83_gv_fullscreenBorderDialog), DialogGetHeight(libDDE92A83_gv_fullscreenBorderDialog));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDDE92A83_gt_FullscreenBorderSizeCheck_Init () {
    libDDE92A83_gt_FullscreenBorderSizeCheck = TriggerCreate("libDDE92A83_gt_FullscreenBorderSizeCheck_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fullscreen Border Fade Delay
//--------------------------------------------------------------------------------------------------
bool libDDE92A83_gt_FullscreenBorderFadeDelay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const fixed lv_fadeTime = 1.0;
    playergroup lv_borderGroup;
    bool lv_borderBirth;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_borderGroup = libDDE92A83_gv_fullscreenBorderGroup;
    lv_borderBirth = libDDE92A83_gv_fullscreenBorderBirth;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameGetMissionTime() < 1.0)) {
        Wait(0.0, c_timeGame);
    }

    DialogControlFadeTransparency(libDDE92A83_gv_fullscreenBorderGlow, lv_borderGroup, 0.0, 100.0);
    DialogControlFadeTransparency(libDDE92A83_gv_fullscreenBorderGlow, lv_borderGroup, lv_fadeTime, 0.0);
    if ((lv_borderBirth == true)) {
        DialogControlFadeTransparency(libDDE92A83_gv_fullscreenBorderModel, lv_borderGroup, 0.0, 0.0);
        libNtve_gf_SetDialogItemAnimation(libDDE92A83_gv_fullscreenBorderModel, "Birth", lv_borderGroup);
        SoundPlayForPlayer(SoundLink("Starlight_Border_Birth", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else {
        DialogControlFadeTransparency(libDDE92A83_gv_fullscreenBorderModel, lv_borderGroup, 0.0, 100.0);
        DialogControlFadeTransparency(libDDE92A83_gv_fullscreenBorderModel, lv_borderGroup, lv_fadeTime, 0.0);
        SoundPlayForPlayer(SoundLink("UI_FullscreenBorder_FadeIn", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDDE92A83_gt_FullscreenBorderFadeDelay_Init () {
    libDDE92A83_gt_FullscreenBorderFadeDelay = TriggerCreate("libDDE92A83_gt_FullscreenBorderFadeDelay_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Permanent Structure Birth
//--------------------------------------------------------------------------------------------------
bool libDDE92A83_gt_PermanentStructureBirth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libDDE92A83_gv_permanentStructures, EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDDE92A83_gt_PermanentStructureBirth_Init () {
    libDDE92A83_gt_PermanentStructureBirth = TriggerCreate("libDDE92A83_gt_PermanentStructureBirth_Func");
    TriggerAddEventPlayerEffectUsed(libDDE92A83_gt_PermanentStructureBirth, c_playerAny, "PermanentStructurePlaceSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Starlight Leaver
//--------------------------------------------------------------------------------------------------
bool libDDE92A83_gt_StarlightLeaver_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto0468D396_g;
    int auto0468D396_var;

    // Conditions
    if (testConds) {
        if (!((libDDE92A83_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDDE92A83_gf_RemovePermanentStructures(EventPlayer());
    libDDE92A83_gf_PlayerAttributesUpdate(EventPlayer());
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
    UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeResourcePanel, false);
    auto0468D396_g = PlayerGroupAlliance(c_playerGroupAlly, EventPlayer());
    auto0468D396_var = -1;
    while (true) {
        auto0468D396_var = PlayerGroupNextPlayer(auto0468D396_g, auto0468D396_var);
        if (auto0468D396_var < 0) { break; }
        libNtve_gf_SetAlliance(EventPlayer(), auto0468D396_var, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDDE92A83_gt_StarlightLeaver_Init () {
    libDDE92A83_gt_StarlightLeaver = TriggerCreate("libDDE92A83_gt_StarlightLeaver_Func");
    TriggerAddEventPlayerLeft(libDDE92A83_gt_StarlightLeaver, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Starlight Basics
//--------------------------------------------------------------------------------------------------
bool libDDE92A83_gt_StarlightBasics_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerHandleDialog;

    // Automatic Variable Declarations
    playergroup autoCFCB143E_g;
    int autoCFCB143E_var;
    playergroup auto353EBF5D_g;
    int auto353EBF5D_var;
    unitgroup autoF22D968D_g;
    int autoF22D968D_u;
    unit autoF22D968D_var;
    playergroup auto6C7FBBE9_g;
    int auto6C7FBBE9_var;
    playergroup auto7EAA9ABE_g;
    int auto7EAA9ABE_var;

    // Variable Initialization
    lv_playerHandleDialog = c_invalidDialogId;

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetSpeedValue(c_gameSpeedFaster);
    GameSetSpeedLocked(true);
    libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupActive(), libDDE92A83_gv_originalPlayers);
    libNtve_gf_CreateActorAtPoint("SceneActorHaloSettings", Point(1.0, 1.0));
    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeCustom, true);
    UISetResourceTradeCountdownTime(0);
    UISetResourceTradingAllowed(c_resourceTypeMinerals, false);
    UISetResourceTradingAllowed(c_resourceTypeVespene, false);
    UISetResourceTradingAllowed(c_resourceTypeCustom, false);
    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeVespene, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    HelpPanelEnableTechGlossaryButton(PlayerGroupAll(), true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Zerg", false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogLoadButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogSaveButton, false);
    TriggerEnable(libVdMp_gt_BattlecruiserAttack, false);
    TriggerEnable(libVdMp_gt_BattlecruiserAttackStop, false);
    TriggerEnable(libVdMp_gt_BattlecruiserAttackScan, false);
    TriggerEnable(libVdMp_gt_BattlecruiserAttackRepeat, false);
    TriggerEnable(libVdMp_gt_BattlecruiserAttackChaseInterrupted, false);
    TriggerEnable(libVdMp_gt_BattlecruiserAttackAbilityUsed, false);
    TriggerEnable(libLbty_gt_StarCraftEvents, false);
    TriggerEnable(libLbty_gt_MeleeSurrender_Surrender, false);
    TriggerEnable(libLbty_gt_MeleeSurrender_SurrenderClickedButton, false);
    TriggerEnable(libLbty_gt_MeleeSurrender_FlashDialog, false);
    libDDE92A83_gf_AddAllUnitTypes(1);
    autoCFCB143E_g = PlayerGroupAll();
    autoCFCB143E_var = -1;
    while (true) {
        autoCFCB143E_var = PlayerGroupNextPlayer(autoCFCB143E_g, autoCFCB143E_var);
        if (autoCFCB143E_var < 0) { break; }
        if ((GameIsTestMap(false) == false) && (PlayerHasLicense(autoCFCB143E_var, c_playerLicenseArcadeDesertStrike) == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(autoCFCB143E_var, "PremiumReward", 1);
            lib29554E00_gf_AFKTimerPremiumBonus(autoCFCB143E_var);
        }

    }
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ChatDisplay");
    libDDE92A83_gv_uIFrameChatDisplay = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ChatBar");
    libDDE92A83_gv_uIFrameChatBar = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeCommandPanel, "UIContainer/FullscreenUpperContainer/UpgradePanel/CommandButtons");
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CommandCardDummy", c_unitCreateIgnorePlacement, 0, Point(0.0, 0.0));
    libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupAll());
    auto353EBF5D_g = PlayerGroupActive();
    auto353EBF5D_var = -1;
    while (true) {
        auto353EBF5D_var = PlayerGroupNextPlayer(auto353EBF5D_g, auto353EBF5D_var);
        if (auto353EBF5D_var < 0) { break; }
        autoF22D968D_g = UnitGroup("CommandCardTopRight", auto353EBF5D_var, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        autoF22D968D_u = UnitGroupCount(autoF22D968D_g, c_unitCountAll);
        for (;; autoF22D968D_u -= 1) {
            autoF22D968D_var = UnitGroupUnitFromEnd(autoF22D968D_g, autoF22D968D_u);
            if (autoF22D968D_var == null) { break; }
            UnitRemove(autoF22D968D_var);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CommandCardTopRight", c_unitCreateIgnorePlacement, auto353EBF5D_var, RegionGetCenter(RegionPlayableMap()));
        libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupSingle(auto353EBF5D_var));
    }
    libDDE92A83_gf_MuteList();
    auto6C7FBBE9_g = PlayerGroupAll();
    auto6C7FBBE9_var = -1;
    while (true) {
        auto6C7FBBE9_var = PlayerGroupNextPlayer(auto6C7FBBE9_g, auto6C7FBBE9_var);
        if (auto6C7FBBE9_var < 0) { break; }
        PlayerOptionOverride(auto6C7FBBE9_var, "simplecommandcard", "0");
        PlayerOptionOverride(auto6C7FBBE9_var, "selectuncontrolable", "1");
        PlayerOptionOverride(auto6C7FBBE9_var, "buildgridhint", "1");
        PlayerOptionOverride(auto6C7FBBE9_var, "showalerts", "1");
        PlayerOptionOverride(auto6C7FBBE9_var, "controlgroupmode", "0");
        TechTreeAbilityAllow(auto6C7FBBE9_var, AbilityCommand("TacNukeStrike", 0), false);
        TechTreeAbilityAllow(auto6C7FBBE9_var, AbilityCommand("TacNukeStrike", 1), false);
        TechTreeAbilityAllow(auto6C7FBBE9_var, AbilityCommand("NeutralUpgradesAutocast", 2), false);
    }
    libDDE92A83_gf_PlayerStatsDialog();
    if ((GameIsTestMap(false) == false)) {
        auto7EAA9ABE_g = PlayerGroupAll();
        auto7EAA9ABE_var = -1;
        while (true) {
            auto7EAA9ABE_var = PlayerGroupNextPlayer(auto7EAA9ABE_g, auto7EAA9ABE_var);
            if (auto7EAA9ABE_var < 0) { break; }
            TechTreeAbilityAllow(auto7EAA9ABE_var, AbilityCommand("TestKillTarget", 0), false);
            TechTreeAbilityAllow(auto7EAA9ABE_var, AbilityCommand("AssimilatorMineralsReposition", 0), false);
            TechTreeAbilityAllow(auto7EAA9ABE_var, AbilityCommand("AssimilatorMineralsPurifierReposition", 0), false);
            TechTreeAbilityAllow(auto7EAA9ABE_var, AbilityCommand("AssimilatorMineralsTaldarimReposition", 0), false);
            TechTreeAbilityAllow(auto7EAA9ABE_var, AbilityCommand("RefineryMineralsReposition", 0), false);
            TechTreeAbilityAllow(auto7EAA9ABE_var, AbilityCommand("RefineryMineralsHornerReposition", 0), false);
            TechTreeAbilityAllow(auto7EAA9ABE_var, AbilityCommand("RefineryMineralsBlackOpsReposition", 0), false);
            TechTreeAbilityAllow(auto7EAA9ABE_var, AbilityCommand("RefineryMineralsTychusReposition", 0), false);
            TechTreeAbilityAllow(auto7EAA9ABE_var, AbilityCommand("RefineryMineralsInfestedReposition", 0), false);
            TechTreeAbilityAllow(auto7EAA9ABE_var, AbilityCommand("ExtractorMineralsReposition", 0), false);
            TechTreeAbilityAllow(auto7EAA9ABE_var, AbilityCommand("ExtractorMineralsPrimalReposition", 0), false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libDDE92A83_gt_StarlightBasics_Init () {
    libDDE92A83_gt_StarlightBasics = TriggerCreate("libDDE92A83_gt_StarlightBasics_Func");
    TriggerAddEventMapInit(libDDE92A83_gt_StarlightBasics);
}

void libDDE92A83_InitTriggers () {
    libDDE92A83_gt_PreparationTimeCountdown_Init();
    libDDE92A83_gt_PreparationTimeEnd_Init();
    libDDE92A83_gt_FullscreenBorderSizeCheck_Init();
    libDDE92A83_gt_FullscreenBorderFadeDelay_Init();
    libDDE92A83_gt_PermanentStructureBirth_Init();
    libDDE92A83_gt_StarlightLeaver_Init();
    libDDE92A83_gt_StarlightBasics_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libDDE92A83_InitLib_completed = false;

void libDDE92A83_InitLib () {
    if (libDDE92A83_InitLib_completed) {
        return;
    }

    libDDE92A83_InitLib_completed = true;

    libDDE92A83_InitLibraries();
    libDDE92A83_InitVariables();
    libDDE92A83_InitCustomScript();
    libDDE92A83_InitTriggers();
}

include "Lib29554E00"
include "LibFD391A9C"
include "Lib948F000A"
include "Lib57FF8648"
include "Lib7A9A9B22"
include "Lib39886FE6"
include "Lib64DC5B97"

