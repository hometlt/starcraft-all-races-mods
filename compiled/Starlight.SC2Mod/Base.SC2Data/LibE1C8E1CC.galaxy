include "TriggerLibs/NativeLib"
include "LibDDE92A83_h"

include "LibE1C8E1CC_h"

//--------------------------------------------------------------------------------------------------
// Library: Ban Menu
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libE1C8E1CC_InitLibraries () {
    libNtve_InitVariables();
    libDDE92A83_InitVariables();
}

// Variable Initialization
bool libE1C8E1CC_InitVariables_completed = false;

void libE1C8E1CC_InitVariables () {
    int init_i;
    int init_j;

    if (libE1C8E1CC_InitVariables_completed) {
        return;
    }

    libE1C8E1CC_InitVariables_completed = true;

    for (init_i = 0; init_i <= 11; init_i += 1) {
        libE1C8E1CC_gv_uIFrameType[init_i] = c_syncFrameTypeMenuBar;
    }
    for (init_i = 0; init_i <= 31; init_i += 1) {
        libE1C8E1CC_gv_banMenuDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= libE1C8E1CC_gv_unit; init_i += 1) {
        libE1C8E1CC_gv_banMenuImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libE1C8E1CC_gv_unit; init_i += 1) {
        libE1C8E1CC_gv_banMenuButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libE1C8E1CC_gv_unit; init_i += 1) {
        libE1C8E1CC_gv_banMenuButtonBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libE1C8E1CC_gv_unit; init_i += 1) {
        libE1C8E1CC_gv_banMenuCancelIcon[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libE1C8E1CC_gv_unit; init_i += 1) {
        for (init_j = 0; init_j <= 1; init_j += 1) {
            libE1C8E1CC_gv_banUnit[init_i][init_j] = "Artosilope";
        }
    }
    for (init_i = 0; init_i <= libE1C8E1CC_gv_unit; init_i += 1) {
        libE1C8E1CC_gv_banSound[init_i] = SoundLink("EditorDefaultSound", -1);
    }
    for (init_i = 0; init_i <= 31; init_i += 1) {
        libE1C8E1CC_gv_raceImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        libE1C8E1CC_gv_banTeam[init_i] = PlayerGroupEmpty();
    }
    libE1C8E1CC_gv_playersUnselected = PlayerGroupEmpty();
    libE1C8E1CC_gv_x = 1;
    libE1C8E1CC_gv_y = 1;
}

// Functions
void libE1C8E1CC_gf_ModeSelectUIActivate () {
    // Automatic Variable Declarations
    playergroup auto09D1C41F_g;
    int auto09D1C41F_var;

    // Implementation
    libE1C8E1CC_gv_uIFrameCurrent = 0;
    UnitPauseAll(true);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    auto09D1C41F_g = PlayerGroupAll();
    auto09D1C41F_var = -1;
    while (true) {
        auto09D1C41F_var = PlayerGroupNextPlayer(auto09D1C41F_g, auto09D1C41F_var);
        if (auto09D1C41F_var < 0) { break; }
        CameraLockInput(auto09D1C41F_var, true);
    }
    libE1C8E1CC_gf_UIToggle(c_syncFrameTypeIdleWorkerButton);
    libE1C8E1CC_gf_UIToggle(c_syncFrameTypeArmyButton);
    libE1C8E1CC_gf_UIToggle(c_syncFrameTypeSupply);
    libE1C8E1CC_gf_UIToggle(c_syncFrameTypeTeamResourceButton);
    libE1C8E1CC_gf_UIToggle(c_syncFrameTypeAllianceButton);
    libE1C8E1CC_gf_UIToggle(c_syncFrameTypeMinimapPanel);
    libE1C8E1CC_gf_UIToggle(c_syncFrameTypeResourcePanel);
    libE1C8E1CC_gf_UIToggle(c_syncFrameTypeInfoPanel);
    libE1C8E1CC_gf_UIToggle(c_syncFrameTypeCommandPanel);
    libE1C8E1CC_gf_UIToggle(c_syncFrameTypeControlGroupPanel);
    libE1C8E1CC_gf_UIToggle(c_syncFrameTypeInventoryPanel);
    libE1C8E1CC_gf_UIToggle(c_syncFrameTypeMissionTimePanel);
}

void libE1C8E1CC_gf_ModeSelectUIDeactivate () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    playergroup auto23787E33_g;
    int auto23787E33_var;
    int auto7145962A_ae;
    const int auto7145962A_ai = 1;

    // Variable Initialization

    // Implementation
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, true);
    UnitPauseAll(false);
    auto23787E33_g = PlayerGroupAll();
    auto23787E33_var = -1;
    while (true) {
        auto23787E33_var = PlayerGroupNextPlayer(auto23787E33_g, auto23787E33_var);
        if (auto23787E33_var < 0) { break; }
        CameraLockInput(auto23787E33_var, false);
    }
    auto7145962A_ae = (libE1C8E1CC_gv_uIFrameCurrent - 1);
    lv_i = 0;
    for ( ; ( (auto7145962A_ai >= 0 && lv_i <= auto7145962A_ae) || (auto7145962A_ai < 0 && lv_i >= auto7145962A_ae) ) ; lv_i += auto7145962A_ai ) {
        if ((UIFrameVisible(0, libE1C8E1CC_gv_uIFrameType[lv_i]) == false)) {
            UISetFrameVisible(PlayerGroupAll(), libE1C8E1CC_gv_uIFrameType[lv_i], true);
        }

    }
}

void libE1C8E1CC_gf_UIToggle (int lp_uIFrame) {
    // Automatic Variable Declarations
    // Implementation
    if ((UIFrameVisible(0, lp_uIFrame) == true)) {
        UISetFrameVisible(PlayerGroupAll(), lp_uIFrame, false);
        libE1C8E1CC_gv_uIFrameType[libE1C8E1CC_gv_uIFrameCurrent] = lp_uIFrame;
        libE1C8E1CC_gv_uIFrameCurrent += 1;
    }

}

trigger auto_libE1C8E1CC_gf_BanMenuSC2Multi_Trigger = null;
playergroup auto_libE1C8E1CC_gf_BanMenuSC2Multi_lp_team1;
playergroup auto_libE1C8E1CC_gf_BanMenuSC2Multi_lp_team2;

void libE1C8E1CC_gf_BanMenuSC2Multi (playergroup lp_team1, playergroup lp_team2) {
    auto_libE1C8E1CC_gf_BanMenuSC2Multi_lp_team1 = lp_team1;
    auto_libE1C8E1CC_gf_BanMenuSC2Multi_lp_team2 = lp_team2;

    if (auto_libE1C8E1CC_gf_BanMenuSC2Multi_Trigger == null) {
        auto_libE1C8E1CC_gf_BanMenuSC2Multi_Trigger = TriggerCreate("auto_libE1C8E1CC_gf_BanMenuSC2Multi_TriggerFunc");
    }

    TriggerExecute(auto_libE1C8E1CC_gf_BanMenuSC2Multi_Trigger, false, false);
}

bool auto_libE1C8E1CC_gf_BanMenuSC2Multi_TriggerFunc (bool testConds, bool runActions) {
    playergroup lp_team1 = auto_libE1C8E1CC_gf_BanMenuSC2Multi_lp_team1;
    playergroup lp_team2 = auto_libE1C8E1CC_gf_BanMenuSC2Multi_lp_team2;

    // Variable Declarations
    int lv_y;

    // Automatic Variable Declarations
    playergroup auto96379ED6_g;
    int auto96379ED6_var;

    // Variable Initialization
    lv_y = 325;

    // Implementation
    TriggerSendEvent("Cinematic_Start");
    libE1C8E1CC_gf_ModeSelectUIActivate();
    libNtve_gf_AddPlayerGroupToPlayerGroup(lp_team1, libE1C8E1CC_gv_banTeam[0]);
    libNtve_gf_AddPlayerGroupToPlayerGroup(lp_team2, libE1C8E1CC_gv_banTeam[1]);
    auto96379ED6_g = PlayerGroupActive();
    auto96379ED6_var = -1;
    while (true) {
        auto96379ED6_var = PlayerGroupNextPlayer(auto96379ED6_g, auto96379ED6_var);
        if (auto96379ED6_var < 0) { break; }
        if ((PlayerType(auto96379ED6_var) == c_playerTypeUser) && (PlayerStatus(auto96379ED6_var) == c_playerStatusActive)) {
            PlayerGroupAdd(libE1C8E1CC_gv_playersUnselected, auto96379ED6_var);
        }

    }
    Wait(0.0625, c_timeGame);
    libE1C8E1CC_gf_BanTeamDialog();
    DialogCreate(((78 * 7) - 2), 400, c_anchorCenter, (0 - (78 * 6)), lv_y, true);
    libE1C8E1CC_gv_banMenuDialog[0] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    Wait(0.0625, c_timeGame);
    libE1C8E1CC_gf_BanUnit("Zealot", SoundLink("Zealot_Attack", -1));
    libE1C8E1CC_gf_BanUnit("Stalker", SoundLink("Stalker_Attack", -1));
    libE1C8E1CC_gf_BanUnit("Sentry", SoundLink("Sentry_Yes", -1));
    libE1C8E1CC_gf_BanUnit("Adept", SoundLink("Adept_Attack", -1));
    libE1C8E1CC_gf_BanUnit("DarkTemplar", SoundLink("DarkTemplar_Attack", -1));
    libE1C8E1CC_gf_BanUnit("Disruptor", SoundLink("Pusher_Attack", -1));
    libE1C8E1CC_gf_BanUnit("Immortal", SoundLink("Immortal_Attack", -1));
    libE1C8E1CC_gf_BanUnit("HighTemplar", SoundLink("HighTemplar_Attack", -1));
    libE1C8E1CC_gf_BanUnit("Archon", SoundLink("Archon_Attack", -1));
    libE1C8E1CC_gf_BanUnit("VoidRay", SoundLink("VoidRay_Attack", -1));
    libE1C8E1CC_gf_BanUnit("Colossus", SoundLink("Colossus_Yes", -1));
    libE1C8E1CC_gf_BanUnit("Tempest", SoundLink("Tempest_Attack", -1));
    libE1C8E1CC_gf_BanUnit("Carrier", SoundLink("Carrier_Attack", -1));
    libE1C8E1CC_gf_BanUnitDouble("Mothership", "MothershipCore", SoundLink("Mothership_Attack", -1));
    libE1C8E1CC_gv_r += 1;
    libE1C8E1CC_gv_x = 1;
    libE1C8E1CC_gv_y = 1;
    DialogCreate(((78 * 7) - 2), 400, c_anchorCenter, 0, lv_y, true);
    libE1C8E1CC_gv_banMenuDialog[1] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    Wait(0.0625, c_timeGame);
    libE1C8E1CC_gf_BanUnit("Marine", SoundLink("Marine_Attack", -1));
    libE1C8E1CC_gf_BanUnit("Marauder", SoundLink("Marauder_Attack", -1));
    libE1C8E1CC_gf_BanUnit("Reaper", SoundLink("Reaper_Attack", -1));
    libE1C8E1CC_gf_BanUnit("Ghost", SoundLink("Ghost_Attack", -1));
    libE1C8E1CC_gf_BanUnitDouble("Hellion", "HellionTank", SoundLink("Hellion_Attack", -1));
    libE1C8E1CC_gf_BanUnit("Medivac", SoundLink("Medivac_Attack", -1));
    libE1C8E1CC_gf_BanUnit("Banshee", SoundLink("Banshee_Attack", -1));
    libE1C8E1CC_gf_BanUnit("SiegeTank", SoundLink("SiegeTank_Attack", -1));
    libE1C8E1CC_gf_BanUnit("Cyclone", SoundLink("Cyclone_Attack", -1));
    libE1C8E1CC_gf_BanUnit("WidowMine", SoundLink("WidowMine_Yes", -1));
    libE1C8E1CC_gf_BanUnit("Liberator", SoundLink("TerranFlyer_Attack", -1));
    libE1C8E1CC_gf_BanUnitDouble("Thor", "ThorAP", SoundLink("Thor_Attack", -1));
    libE1C8E1CC_gf_BanUnit("Battlecruiser", SoundLink("Battlecruiser_Attack", -1));
    libE1C8E1CC_gv_r += 1;
    libE1C8E1CC_gv_x = 1;
    libE1C8E1CC_gv_y = 1;
    DialogCreate(((78 * 7) - 2), 400, c_anchorCenter, (0 + (78 * 6)), lv_y, true);
    libE1C8E1CC_gv_banMenuDialog[2] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libE1C8E1CC_gf_BanUnit("Zergling", SoundLink("Zergling_Attack", -1));
    libE1C8E1CC_gf_BanUnit("Baneling", SoundLink("Baneling_Attack", -1));
    libE1C8E1CC_gf_BanUnitDouble("Roach", "Ravager", SoundLink("Roach_Attack", -1));
    libE1C8E1CC_gf_BanUnit("Queen", SoundLink("Queen_Attack", -1));
    libE1C8E1CC_gf_BanUnitDouble("Hydralisk", "LurkerMP", SoundLink("Hydralisk_Attack", -1));
    libE1C8E1CC_gf_BanUnit("Mutalisk", SoundLink("Mutalisk_Attack", -1));
    libE1C8E1CC_gf_BanUnit("Infestor", SoundLink("Infestor_Yes", -1));
    libE1C8E1CC_gf_BanUnit("SwarmHostMP", SoundLink("SwarmHost_Attack", -1));
    libE1C8E1CC_gf_BanUnit("Viper", SoundLink("LairViper_Attack", -1));
    libE1C8E1CC_gf_BanUnit("Ultralisk", SoundLink("Ultralisk_Attack", -1));
    libE1C8E1CC_gf_BanUnit("BroodLord", SoundLink("BroodLord_Attack", -1));
    TriggerEnable(libE1C8E1CC_gt_BanUsed, true);
    TriggerEnable(libE1C8E1CC_gt_Timer, true);
    Wait(0.0625, c_timeGame);
    libDDE92A83_gf_StarlightPreparationTime(StringExternal("Param/Value/lib_E1C8E1CC_6C846896"), 30.0, PlayerGroupEmpty(), PlayerGroupEmpty(), 0, 100);
    TriggerExecute(libE1C8E1CC_gt_Wait, true, true);
    return true;
}

void libE1C8E1CC_gf_BanMenuEnd () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto090549CF_ae;
    const int auto090549CF_ai = 1;
    int auto7B226C4F_ae;
    const int auto7B226C4F_ai = 1;
    int auto3A570F18_ae;
    const int auto3A570F18_ai = 1;
    int auto25B3862D_ae;
    const int auto25B3862D_ai = 1;
    int autoFD8F3C7A_ae;
    const int autoFD8F3C7A_ai = 1;
    const int autoCC1A3BF4_ae = 6;
    const int autoCC1A3BF4_ai = 1;

    // Variable Initialization

    // Implementation
    TriggerEnable(libE1C8E1CC_gt_BanUsed, false);
    TriggerEnable(libE1C8E1CC_gt_Timer, false);
    auto090549CF_ae = (libE1C8E1CC_gv_raceImageCurrent - 1);
    lv_i = 0;
    for ( ; ( (auto090549CF_ai >= 0 && lv_i <= auto090549CF_ae) || (auto090549CF_ai < 0 && lv_i >= auto090549CF_ae) ) ; lv_i += auto090549CF_ai ) {
        DialogControlFadeTransparency(libE1C8E1CC_gv_raceImage[lv_i], PlayerGroupAll(), 0.5, 100.0);
        DialogControlFadeTransparency(libE1C8E1CC_gv_raceImage[lv_i], PlayerGroupAll(), 0.5, 100.0);
    }
    auto7B226C4F_ae = (libE1C8E1CC_gv_banCurrent - 1);
    lv_i = 0;
    for ( ; ( (auto7B226C4F_ai >= 0 && lv_i <= auto7B226C4F_ae) || (auto7B226C4F_ai < 0 && lv_i >= auto7B226C4F_ae) ) ; lv_i += auto7B226C4F_ai ) {
        libNtve_gf_SetDialogItemAcceptMouse(libE1C8E1CC_gv_banMenuButton[lv_i], false, PlayerGroupAll());
    }
    Wait(0.0625, c_timeGame);
    auto3A570F18_ae = (libE1C8E1CC_gv_banCurrent - 1);
    lv_i = 0;
    for ( ; ( (auto3A570F18_ai >= 0 && lv_i <= auto3A570F18_ae) || (auto3A570F18_ai < 0 && lv_i >= auto3A570F18_ae) ) ; lv_i += auto3A570F18_ai ) {
        if ((libE1C8E1CC_gv_banActive[lv_i] == false)) {
            DialogControlFadeTransparency(libE1C8E1CC_gv_banMenuImage[lv_i], PlayerGroupAll(), 0.5, 100.0);
            DialogControlFadeTransparency(libE1C8E1CC_gv_banMenuButton[lv_i], PlayerGroupAll(), 0.5, 100.0);
            DialogControlFadeTransparency(libE1C8E1CC_gv_banMenuButtonBackground[lv_i], PlayerGroupAll(), 0.5, 100.0);
        }
        else {
            DialogControlFadeTransparency(libE1C8E1CC_gv_banMenuButton[lv_i], PlayerGroupAll(), 0.5, 100.0);
        }
    }
    Wait(1.0, c_timeReal);
    TriggerSendEvent("Cinematic_End");
    libE1C8E1CC_gf_ModeSelectUIDeactivate();
    Wait(1.5, c_timeReal);
    TriggerStop(libE1C8E1CC_gt_Wait);
    auto25B3862D_ae = (libE1C8E1CC_gv_banIconCurrent - 1);
    lv_i = 0;
    for ( ; ( (auto25B3862D_ai >= 0 && lv_i <= auto25B3862D_ae) || (auto25B3862D_ai < 0 && lv_i >= auto25B3862D_ae) ) ; lv_i += auto25B3862D_ai ) {
        DialogControlFadeTransparency(libE1C8E1CC_gv_banMenuCancelIcon[lv_i], PlayerGroupAll(), 0.5, 100.0);
    }
    autoFD8F3C7A_ae = (libE1C8E1CC_gv_banCurrent - 1);
    lv_i = 0;
    for ( ; ( (autoFD8F3C7A_ai >= 0 && lv_i <= autoFD8F3C7A_ae) || (autoFD8F3C7A_ai < 0 && lv_i >= autoFD8F3C7A_ae) ) ; lv_i += autoFD8F3C7A_ai ) {
        DialogControlFadeTransparency(libE1C8E1CC_gv_banMenuImage[lv_i], PlayerGroupAll(), 0.5, 100.0);
        DialogControlFadeTransparency(libE1C8E1CC_gv_banMenuButton[lv_i], PlayerGroupAll(), 0.5, 100.0);
        DialogControlFadeTransparency(libE1C8E1CC_gv_banMenuButtonBackground[lv_i], PlayerGroupAll(), 0.5, 100.0);
    }
    Wait(1.0, c_timeGame);
    lv_i = 0;
    for ( ; ( (autoCC1A3BF4_ai >= 0 && lv_i <= autoCC1A3BF4_ae) || (autoCC1A3BF4_ai < 0 && lv_i >= autoCC1A3BF4_ae) ) ; lv_i += autoCC1A3BF4_ai ) {
        DialogDestroy(libE1C8E1CC_gv_banMenuDialog[lv_i]);
    }
}

void libE1C8E1CC_gf_BanUnit (string lp_unit1, soundlink lp_unitSound) {
    // Variable Declarations
    text lv_tooltipShields;
    text lv_tooltipEnergy;
    string lv_icon;

    // Automatic Variable Declarations
    int auto20A95609_val;

    // Variable Initialization
    lv_icon = (CatalogFieldValueGet(c_gameCatalogActor, StringSub(CatalogFieldValueGet(c_gameCatalogUnit, lp_unit1, "Name", c_playerAny), 11, 99), "UnitIcon", c_playerAny));

    // Implementation
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, (libE1C8E1CC_gv_x * 78), (libE1C8E1CC_gv_y * 78), (StringToText("<s val=\"StandardTooltipHeader\"></c>") + UnitTypeGetName(lp_unit1)), StringToText(""), "");
    libE1C8E1CC_gv_banMenuButton[libE1C8E1CC_gv_banCurrent] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 700, PlayerGroupAll());
    auto20A95609_val = libE1C8E1CC_gv_r;
    if (auto20A95609_val == 0) {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_racebutton_protoss_normalpressed.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_racebutton_protoss_normaloverpressedover.dds", PlayerGroupAll());
    }
    else if (auto20A95609_val == 1) {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_racebutton_terran_normalpressed.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_racebutton_terran_normaloverpressedover.dds", PlayerGroupAll());
    }
    else if (auto20A95609_val == 2) {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_racebutton_zerg_normalpressed.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_racebutton_zerg_normaloverpressedover.dds", PlayerGroupAll());
    }
    else {
    }
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), "BanMenu", PlayerGroupSingle(0));
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 100, 100, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_abilitycontrol_background.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libE1C8E1CC_gv_banMenuButtonBackground[libE1C8E1CC_gv_banCurrent] = DialogControlLastCreated();
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, libE1C8E1CC_gv_banMenuButton[libE1C8E1CC_gv_banCurrent], c_anchorCenter, 0, 0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 690, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, (libE1C8E1CC_gv_x * 78), (libE1C8E1CC_gv_y * 78), StringToText(""), lv_icon, c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libE1C8E1CC_gv_banMenuImage[libE1C8E1CC_gv_banCurrent] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 710, PlayerGroupAll());
    libE1C8E1CC_gv_banSound[libE1C8E1CC_gv_banCurrent] = lp_unitSound;
    libE1C8E1CC_gv_banUnit[libE1C8E1CC_gv_banCurrent][0] = lp_unit1;
    libE1C8E1CC_gv_x += 1;
    libE1C8E1CC_gv_banCurrent += 1;
    if ((libE1C8E1CC_gv_x >= 6)) {
        libE1C8E1CC_gv_x = 1;
        libE1C8E1CC_gv_y += 1;
    }

}

void libE1C8E1CC_gf_BanUnitDouble (string lp_unit1, string lp_unit2, soundlink lp_unitSound) {
    // Variable Declarations
    string lv_icon;

    // Automatic Variable Declarations
    int auto5B1D69C2_val;

    // Variable Initialization
    lv_icon = (CatalogFieldValueGet(c_gameCatalogActor, StringSub(CatalogFieldValueGet(c_gameCatalogUnit, lp_unit1, "Name", c_playerAny), 11, 99), "UnitIcon", c_playerAny));

    // Implementation
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, (libE1C8E1CC_gv_x * 78), (libE1C8E1CC_gv_y * 78), (StringToText("<s val=\"StandardTooltipHeader\"></c>") + UnitTypeGetName(lp_unit1)), StringToText(""), "");
    libE1C8E1CC_gv_banMenuButton[libE1C8E1CC_gv_banCurrent] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 700, PlayerGroupAll());
    auto5B1D69C2_val = libE1C8E1CC_gv_r;
    if (auto5B1D69C2_val == 0) {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_racebutton_protoss_normalpressed.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_racebutton_protoss_normaloverpressedover.dds", PlayerGroupAll());
    }
    else if (auto5B1D69C2_val == 1) {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_racebutton_terran_normalpressed.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_racebutton_terran_normaloverpressedover.dds", PlayerGroupAll());
    }
    else if (auto5B1D69C2_val == 2) {
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_racebutton_zerg_normalpressed.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_racebutton_zerg_normaloverpressedover.dds", PlayerGroupAll());
    }
    else {
    }
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), "BanMenu", PlayerGroupSingle(0));
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 100, 100, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_abilitycontrol_background.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libE1C8E1CC_gv_banMenuButtonBackground[libE1C8E1CC_gv_banCurrent] = DialogControlLastCreated();
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, libE1C8E1CC_gv_banMenuButton[libE1C8E1CC_gv_banCurrent], c_anchorCenter, 0, 0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 690, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, (libE1C8E1CC_gv_x * 78), (libE1C8E1CC_gv_y * 78), StringToText(""), lv_icon, c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libE1C8E1CC_gv_banMenuImage[libE1C8E1CC_gv_banCurrent] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 710, PlayerGroupAll());
    libE1C8E1CC_gv_banSound[libE1C8E1CC_gv_banCurrent] = lp_unitSound;
    libE1C8E1CC_gv_banUnit[libE1C8E1CC_gv_banCurrent][0] = lp_unit1;
    libE1C8E1CC_gv_banUnit[libE1C8E1CC_gv_banCurrent][1] = lp_unit2;
    libE1C8E1CC_gv_x += 1;
    libE1C8E1CC_gv_banCurrent += 1;
    if ((libE1C8E1CC_gv_x >= 6)) {
        libE1C8E1CC_gv_x = 1;
        libE1C8E1CC_gv_y += 1;
    }

    Wait(0.0, c_timeGame);
}

void libE1C8E1CC_gf_BanTeamDialog () {
    // Variable Declarations
    color lv_allyColor;
    color lv_enemyColor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_allyColor = Color(100.00, 100.00, 0.00);
    lv_enemyColor = Color(100.00, 0.00, 0.00);

    // Implementation
    DialogCreate(200, 600, c_anchorLeft, 0, 0, true);
    libE1C8E1CC_gv_banMenuDialog[3] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    if ((PlayerGroupCount(libE1C8E1CC_gv_banTeam[0]) > 0)) {
        DialogSetVisible(DialogLastCreated(), libE1C8E1CC_gv_banTeam[0], true);
    }

    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 60, c_anchorTop, 0, 0, (StringToText("<s val=\"BanMenuAllies\">") + StringExternal("UI/SocialManagementPanelAlliesListTitle")), ColorWithAlpha(0,0,0,0), false, 2.0);
    libE1C8E1CC_gv_raceImage[libE1C8E1CC_gv_raceImageCurrent] = DialogControlLastCreated();
    libE1C8E1CC_gv_raceImageCurrent += 1;
    libE1C8E1CC_gf_RaceIcons(0, 1, 0, 50, lv_allyColor);
    libE1C8E1CC_gf_RaceIcons(0, 2, 0, 200, lv_allyColor);
    libE1C8E1CC_gf_RaceIcons(0, 3, 0, 350, lv_allyColor);
    DialogCreate(200, 600, c_anchorRight, 0, 0, true);
    libE1C8E1CC_gv_banMenuDialog[4] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    if ((PlayerGroupCount(libE1C8E1CC_gv_banTeam[1]) > 0)) {
        DialogSetVisible(DialogLastCreated(), libE1C8E1CC_gv_banTeam[0], true);
    }

    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 60, c_anchorTop, 0, 0, (StringToText("<s val=\"BanMenuEnemies\">") + StringExternal("UI/Enemies")), ColorWithAlpha(0,0,0,0), false, 2.0);
    libE1C8E1CC_gv_raceImage[libE1C8E1CC_gv_raceImageCurrent] = DialogControlLastCreated();
    libE1C8E1CC_gv_raceImageCurrent += 1;
    libE1C8E1CC_gf_RaceIcons(1, 1, 0, 50, lv_enemyColor);
    libE1C8E1CC_gf_RaceIcons(1, 2, 0, 200, lv_enemyColor);
    libE1C8E1CC_gf_RaceIcons(1, 3, 0, 350, lv_enemyColor);
    DialogCreate(200, 600, c_anchorLeft, 0, 0, true);
    libE1C8E1CC_gv_banMenuDialog[5] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    if ((PlayerGroupCount(libE1C8E1CC_gv_banTeam[1]) > 0)) {
        DialogSetVisible(DialogLastCreated(), libE1C8E1CC_gv_banTeam[1], true);
    }

    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 0, 0, (StringToText("<s val=\"BanMenuAllies\">") + StringExternal("UI/SocialManagementPanelAlliesListTitle")), ColorWithAlpha(0,0,0,0), false, 2.0);
    libE1C8E1CC_gv_raceImage[libE1C8E1CC_gv_raceImageCurrent] = DialogControlLastCreated();
    libE1C8E1CC_gv_raceImageCurrent += 1;
    libE1C8E1CC_gf_RaceIcons(1, 1, 0, 50, lv_allyColor);
    libE1C8E1CC_gf_RaceIcons(1, 2, 0, 200, lv_allyColor);
    libE1C8E1CC_gf_RaceIcons(1, 3, 0, 350, lv_allyColor);
    DialogCreate(200, 600, c_anchorRight, 0, 0, true);
    libE1C8E1CC_gv_banMenuDialog[6] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    if ((PlayerGroupCount(libE1C8E1CC_gv_banTeam[0]) > 0)) {
        DialogSetVisible(DialogLastCreated(), libE1C8E1CC_gv_banTeam[1], true);
    }

    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 0, 0, (StringToText("<s val=\"BanMenuEnemies\">") + StringExternal("UI/Enemies")), ColorWithAlpha(0,0,0,0), false, 2.0);
    libE1C8E1CC_gv_raceImage[libE1C8E1CC_gv_raceImageCurrent] = DialogControlLastCreated();
    libE1C8E1CC_gv_raceImageCurrent += 1;
    libE1C8E1CC_gf_RaceIcons(0, 1, 0, 50, lv_enemyColor);
    libE1C8E1CC_gf_RaceIcons(0, 2, 0, 200, lv_enemyColor);
    libE1C8E1CC_gf_RaceIcons(0, 3, 0, 350, lv_enemyColor);
}

void libE1C8E1CC_gf_RaceIcons (int lp_team, int lp_index, int lp_x, int lp_y, color lp_color) {
    // Variable Declarations
    const int lv_imageSize = 140;
    int lv_i;

    // Automatic Variable Declarations
    string autoC35AF765_val;
    int autoFF99C2AD_val;
    string autoA46B9E08_val;
    int autoBCA75B15_val;

    // Variable Initialization

    // Implementation
    if ((PlayerGroupCount(libE1C8E1CC_gv_banTeam[lp_team]) >= lp_index)) {
        autoC35AF765_val = PlayerRace(PlayerGroupPlayer(libE1C8E1CC_gv_banTeam[lp_team], lp_index));
        if (autoC35AF765_val == "Prot") {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_imageSize, lv_imageSize, c_anchorTop, lp_x, lp_y, StringToText(""), "Assets\\Textures\\wireframe-protoss-desaturated.dds", c_triggerImageTypeNormal, false, Color(0.39, 0.39, 0.39), c_triggerBlendModeNormal);
        }
        else if (autoC35AF765_val == "Terr") {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_imageSize, lv_imageSize, c_anchorTop, lp_x, lp_y, StringToText(""), "Assets\\Textures\\wireframe-terran-desaturated.dds", c_triggerImageTypeNormal, false, Color(0.39, 0.39, 0.39), c_triggerBlendModeNormal);
        }
        else if (autoC35AF765_val == "Zerg") {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_imageSize, lv_imageSize, c_anchorTop, lp_x, lp_y, StringToText(""), "Assets\\Textures\\wireframe-zerg-desaturated.dds", c_triggerImageTypeNormal, false, Color(0.39, 0.39, 0.39), c_triggerBlendModeNormal);
        }
        else {
            lv_i = RandomInt(0, 2);
            autoFF99C2AD_val = lv_i;
            if (autoFF99C2AD_val == 1) {
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_imageSize, lv_imageSize, c_anchorTop, lp_x, lp_y, StringToText(""), "Assets\\Textures\\wireframe-terran-desaturated.dds", c_triggerImageTypeNormal, false, Color(0.39, 0.39, 0.39), c_triggerBlendModeNormal);
            }
            else if (autoFF99C2AD_val == 2) {
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_imageSize, lv_imageSize, c_anchorTop, lp_x, lp_y, StringToText(""), "Assets\\Textures\\wireframe-zerg-desaturated.dds", c_triggerImageTypeNormal, false, Color(0.39, 0.39, 0.39), c_triggerBlendModeNormal);
            }
            else {
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_imageSize, lv_imageSize, c_anchorTop, lp_x, lp_y, StringToText(""), "Assets\\Textures\\wireframe-protoss-desaturated.dds", c_triggerImageTypeNormal, false, Color(0.39, 0.39, 0.39), c_triggerBlendModeNormal);
            }
        }
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
        libE1C8E1CC_gv_raceImage[libE1C8E1CC_gv_raceImageCurrent] = DialogControlLastCreated();
        libE1C8E1CC_gv_raceImageCurrent += 1;
        autoA46B9E08_val = PlayerRace(PlayerGroupPlayer(libE1C8E1CC_gv_banTeam[lp_team], lp_index));
        if (autoA46B9E08_val == "Prot") {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_imageSize, lv_imageSize, c_anchorTop, lp_x, lp_y, StringToText(""), "Assets\\Textures\\wireframe-protoss-desaturated.dds", c_triggerImageTypeNormal, false, lp_color, c_triggerBlendModeNormal);
        }
        else if (autoA46B9E08_val == "Terr") {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_imageSize, lv_imageSize, c_anchorTop, lp_x, lp_y, StringToText(""), "Assets\\Textures\\wireframe-terran-desaturated.dds", c_triggerImageTypeNormal, false, lp_color, c_triggerBlendModeNormal);
        }
        else if (autoA46B9E08_val == "Zerg") {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_imageSize, lv_imageSize, c_anchorTop, lp_x, lp_y, StringToText(""), "Assets\\Textures\\wireframe-zerg-desaturated.dds", c_triggerImageTypeNormal, false, lp_color, c_triggerBlendModeNormal);
        }
        else {
            autoBCA75B15_val = lv_i;
            if (autoBCA75B15_val == 1) {
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_imageSize, lv_imageSize, c_anchorTop, lp_x, lp_y, StringToText(""), "Assets\\Textures\\wireframe-terran-desaturated.dds", c_triggerImageTypeNormal, false, lp_color, c_triggerBlendModeNormal);
            }
            else if (autoBCA75B15_val == 2) {
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_imageSize, lv_imageSize, c_anchorTop, lp_x, lp_y, StringToText(""), "Assets\\Textures\\wireframe-zerg-desaturated.dds", c_triggerImageTypeNormal, false, lp_color, c_triggerBlendModeNormal);
            }
            else {
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_imageSize, lv_imageSize, c_anchorTop, lp_x, lp_y, StringToText(""), "Assets\\Textures\\wireframe-protoss-desaturated.dds", c_triggerImageTypeNormal, false, lp_color, c_triggerBlendModeNormal);
            }
        }
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
        libE1C8E1CC_gv_raceImage[libE1C8E1CC_gv_raceImageCurrent] = DialogControlLastCreated();
        libE1C8E1CC_gv_raceImageCurrent += 1;
    }

}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Timer
//--------------------------------------------------------------------------------------------------
bool libE1C8E1CC_gt_Timer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libE1C8E1CC_gf_BanMenuEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libE1C8E1CC_gt_Timer_Init () {
    libE1C8E1CC_gt_Timer = TriggerCreate("libE1C8E1CC_gt_Timer_Func");
    TriggerEnable(libE1C8E1CC_gt_Timer, false);
    TriggerAddEventGeneric(libE1C8E1CC_gt_Timer, "StarlightPreparationTimeComplete");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wait
//--------------------------------------------------------------------------------------------------
bool libE1C8E1CC_gt_Wait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(60.0, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libE1C8E1CC_gt_Wait_Init () {
    libE1C8E1CC_gt_Wait = TriggerCreate("libE1C8E1CC_gt_Wait_Func");
    TriggerEnable(libE1C8E1CC_gt_Wait, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ban Used
//--------------------------------------------------------------------------------------------------
bool libE1C8E1CC_gt_BanUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_x;

    // Automatic Variable Declarations
    int auto30C2576C_ae;
    const int auto30C2576C_ai = 1;
    int auto78EBE89C_ae;
    const int auto78EBE89C_ai = 1;
    playergroup autoD5DC9864_g;
    int autoD5DC9864_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_DialogItemEditValue(EventDialogControl(), 0) == "BanMenu"))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libE1C8E1CC_gv_playersUnselected, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto30C2576C_ae = libE1C8E1CC_gv_banCurrent;
    lv_i = 0;
    for ( ; ( (auto30C2576C_ai >= 0 && lv_i <= auto30C2576C_ae) || (auto30C2576C_ai < 0 && lv_i >= auto30C2576C_ae) ) ; lv_i += auto30C2576C_ai ) {
        if ((EventDialogControl() == libE1C8E1CC_gv_banMenuButton[lv_i])) {
            break;
        }

    }
    if ((libE1C8E1CC_gv_banActive[lv_i] == false)) {
        PlayerGroupRemove(libE1C8E1CC_gv_playersUnselected, EventPlayer());
        if ((PlayerGroupCount(libE1C8E1CC_gv_playersUnselected) > 0)) {
            libDDE92A83_gf_StarlightPreparationTimeSetText(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/lib_E1C8E1CC_C5CEA0CB"));
        }

        auto78EBE89C_ae = (libE1C8E1CC_gv_banCurrent - 1);
        lv_x = 0;
        for ( ; ( (auto78EBE89C_ai >= 0 && lv_x <= auto78EBE89C_ae) || (auto78EBE89C_ai < 0 && lv_x >= auto78EBE89C_ae) ) ; lv_x += auto78EBE89C_ai ) {
            libNtve_gf_SetDialogItemAcceptMouse(libE1C8E1CC_gv_banMenuButton[lv_x], false, PlayerGroupSingle(EventPlayer()));
        }
        libE1C8E1CC_gv_banActive[lv_i] = true;
        DialogControlSetEnabled(libE1C8E1CC_gv_banMenuButton[lv_i], PlayerGroupAll(), false);
        SoundStop(libE1C8E1CC_gv_banSoundInProgress, true);
        SoundPlayForPlayer(libE1C8E1CC_gv_banSound[lv_i], c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libE1C8E1CC_gv_banSoundInProgress = SoundLastPlayed();
        libNtve_gf_CreateDialogItemImage(DialogControlGetDialog(EventDialogControl()), 76, 76, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\btn-command-cancel.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        libE1C8E1CC_gv_banMenuCancelIcon[libE1C8E1CC_gv_banIconCurrent] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false)), PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, EventDialogControl(), c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 720, PlayerGroupAll());
        libE1C8E1CC_gv_banIconCurrent += 1;
        autoD5DC9864_g = PlayerGroupAll();
        autoD5DC9864_var = -1;
        while (true) {
            autoD5DC9864_var = PlayerGroupNextPlayer(autoD5DC9864_g, autoD5DC9864_var);
            if (autoD5DC9864_var < 0) { break; }
            TechTreeUnitAllow(autoD5DC9864_var, libE1C8E1CC_gv_banUnit[lv_i][0], false);
            TechTreeUnitAllow(autoD5DC9864_var, libE1C8E1CC_gv_banUnit[lv_i][1], false);
            if ((libE1C8E1CC_gv_banUnit[lv_i][0] == "MothershipCore")) {
                TechTreeAbilityAllow(autoD5DC9864_var, AbilityCommand("MothershipShortcut", 0), false);
            }

            if ((libE1C8E1CC_gv_banUnit[lv_i][0] == "HighTemplar")) {
                libNtve_gf_SetUpgradeLevelForPlayer(autoD5DC9864_var, "HighTemplarBanned", 1);
            }

            if ((libE1C8E1CC_gv_banUnit[lv_i][0] == "Baneling")) {
                TechTreeAbilityAllow(autoD5DC9864_var, AbilityCommand("UpgradeToBaneling", 0), false);
            }

            if ((libE1C8E1CC_gv_banUnit[lv_i][0] == "Archon")) {
                TechTreeAbilityAllow(autoD5DC9864_var, AbilityCommand("ArchonPlaceFromDT", 0), false);
                TechTreeAbilityAllow(autoD5DC9864_var, AbilityCommand("ArchonPlaceFromHT", 0), false);
                libNtve_gf_SetUpgradeLevelForPlayer(autoD5DC9864_var, "ArchonBanned", 1);
            }

        }
    }

    if ((PlayerGroupCount(libE1C8E1CC_gv_playersUnselected) == 0)) {
        libDDE92A83_gf_StarlightPreparationTimeEnd();
        libE1C8E1CC_gf_BanMenuEnd();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libE1C8E1CC_gt_BanUsed_Init () {
    libE1C8E1CC_gt_BanUsed = TriggerCreate("libE1C8E1CC_gt_BanUsed_Func");
    TriggerEnable(libE1C8E1CC_gt_BanUsed, false);
    TriggerAddEventDialogControl(libE1C8E1CC_gt_BanUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

void libE1C8E1CC_InitTriggers () {
    libE1C8E1CC_gt_Timer_Init();
    libE1C8E1CC_gt_Wait_Init();
    libE1C8E1CC_gt_BanUsed_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libE1C8E1CC_InitLib_completed = false;

void libE1C8E1CC_InitLib () {
    if (libE1C8E1CC_InitLib_completed) {
        return;
    }

    libE1C8E1CC_InitLib_completed = true;

    libE1C8E1CC_InitLibraries();
    libE1C8E1CC_InitVariables();
    libE1C8E1CC_InitTriggers();
}

include "LibDDE92A83"

