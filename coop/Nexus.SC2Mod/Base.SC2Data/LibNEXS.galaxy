include "TriggerLibs/NativeLib"
include "LibARRA"
include "LibCOMI"
include "LibCOMU"

include "LibNEXS_h"

//--------------------------------------------------------------------------------------------------
// Library: COMMANDERS - NEXUS
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libNEXS_InitLibraries () {
    libNtve_InitVariables();
    libARRA_InitVariables();
    libCOMI_InitVariables();
    libCOMU_InitVariables();
}

// Variable Initialization
bool libNEXS_InitVariables_completed = false;

void libNEXS_InitVariables () {
    int init_i;
    int init_j;

    if (libNEXS_InitVariables_completed) {
        return;
    }

    libNEXS_InitVariables_completed = true;

    libNEXS_gv_zeratulX = 1;
    libNEXS_gv_stetmanX = 1;
    libNEXS_gv_toshX = 1;
    libNEXS_gv_cU_HeroCooldownTime = 60.0;
    for (init_i = 0; init_i <= libNEXS_gv_cUC_HeroMaxCount; init_i += 1) {
        libNEXS_gv_cU_HeroPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNEXS_gv_cUC_HeroMaxCount; init_i += 1) {
        libNEXS_gv_cU_HeroDialogBorderImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNEXS_gv_cUC_HeroMaxCount; init_i += 1) {
        libNEXS_gv_cU_HeroDialogBorderImageNoEnergy[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNEXS_gv_cUC_HeroMaxCount; init_i += 1) {
        libNEXS_gv_cU_HeroDialogBorderImageAll[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNEXS_gv_cUC_HeroMaxCount; init_i += 1) {
        libNEXS_gv_cU_HeroDialogIconImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNEXS_gv_cUC_HeroMaxCount; init_i += 1) {
        libNEXS_gv_cU_HeroDialogCooldownImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNEXS_gv_cUC_HeroMaxCount; init_i += 1) {
        libNEXS_gv_cU_HeroDialogDamageTakenImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNEXS_gv_cUC_HeroMaxCount; init_i += 1) {
        libNEXS_gv_cU_HeroDialogDamageTakenLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNEXS_gv_cUC_HeroMaxCount; init_i += 1) {
        libNEXS_gv_cU_HeroDialogNameLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNEXS_gv_cUC_HeroMaxCount; init_i += 1) {
        libNEXS_gv_cU_HeroDialogLevelLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNEXS_gv_cUC_HeroMaxCount; init_i += 1) {
        libNEXS_gv_cU_HeroDialogHealthBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNEXS_gv_cUC_HeroMaxCount; init_i += 1) {
        libNEXS_gv_cU_HeroDialogHealthBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNEXS_gv_cUC_HeroMaxCount; init_i += 1) {
        libNEXS_gv_cU_HeroDialogShieldBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNEXS_gv_cUC_HeroMaxCount; init_i += 1) {
        libNEXS_gv_cU_HeroDialogShieldBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNEXS_gv_cUC_HeroMaxCount; init_i += 1) {
        libNEXS_gv_cU_HeroDialogEnergyBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNEXS_gv_cUC_HeroMaxCount; init_i += 1) {
        libNEXS_gv_cU_HeroDialogEnergyBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNEXS_gv_cUC_HeroMaxCount; init_i += 1) {
        libNEXS_gv_cU_HeroDialogHealthLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNEXS_gv_cUC_HeroMaxCount; init_i += 1) {
        libNEXS_gv_cU_HeroDialogEnergyLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNEXS_gv_cUC_HeroMaxCount; init_i += 1) {
        libNEXS_gv_cU_HeroDialogShieldLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNEXS_gv_cUC_HeroMaxCount; init_i += 1) {
        libNEXS_gv_cU_HeroDialogButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libNEXS_gv_cUC_HeroMaxCount; init_i += 1) {
        libNEXS_gv_cU_HeroDialogLevelBox[init_i] = c_invalidDialogControlId;
    }
    libNEXS_gv_cU_HeroAutomaticIndex = 1;
    libNEXS_gv_e79B97E5AE9DE59CB0E7B2BEE8A2ABE694BBE587BBE8AEA1E697B6 = TimerCreate();
    libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID3 = -1;
    libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID6 = -1;
    libNEXS_gv_xelnagaArtifactUpgradeMax = 46;
    libNEXS_gv_e4B880E6ACA1E588B7E696B0E7A59EE599A8E695B0E9878F = 1;
    libNEXS_gv_e7A59EE599A8E588B7E696B0E88C83E59BB4 = 30.0;
    libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7 = -1;
    libNEXS_gv_e697B6E7A9BAE4B98BE997A8E586B7E58DB4X = 30;
    libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12 = -1;
    libNEXS_gv_ulrezajUnitsAdoreEnergyMax = 500;
    libNEXS_gv_ulrezajUnitsGroup = UnitGroupEmpty();
    libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14 = -1;
    libNEXS_gv_selendisGlobalPowerAbilityInvisibleGroup = UnitGroupEmpty();
    libNEXS_gv_selendisGlobalPowerCasterGroup = UnitGroupEmpty();
    for (init_i = 0; init_i <= 1; init_i += 1) {
        libNEXS_gv_selendisGlobalPowerFrame[init_i] = c_invalidDialogId;
    }
    libNEXS_gv_selendisGlobalPowerCommandPanel = c_invalidDialogControlId;
    libNEXS_gv_selendisGlobalPowerMainPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 1; init_i += 1) {
        libNEXS_gv_selendisGlobalPowerPanelModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        libNEXS_gv_selendisGlobalPowerButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        libNEXS_gv_selendisGlobalPowerText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        libNEXS_gv_selendisGlobalPowerAdapterPanel[init_i] = c_invalidDialogControlId;
    }
    libNEXS_gv_selendisGlobalPowerCarrierGroup = UnitGroupEmpty();
    libNEXS_gv_selendisGlobalPowerInterceptorGroup = UnitGroupEmpty();
    libNEXS_gv_selendisGlobalPowerColossusGroup = UnitGroupEmpty();
    libNEXS_gv_selendisGlobalCasterUnitGroup = UnitGroupEmpty();
    for (init_i = 0; init_i <= 8; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            libNEXS_gv_selendisPsiSpireGroup[init_i][init_j] = UnitGroupEmpty();
        }
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        libNEXS_gv_selendisUnitGroup[init_i] = UnitGroupEmpty();
    }
    libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11 = -1;
    libNEXS_gv_e5BCB9E88DAFE5BA93E58D95E4BD8DE7BB84 = UnitGroupEmpty();
    libNEXS_gv_equipmentAllow3 = 1;
    libNEXS_gv_equipmentADMax3 = 6;
    libNEXS_gv_equipmentADMin3 = 1;
    libNEXS_gv_equipmentDropChance3 = 0.01;
    libNEXS_gv_supplyMultiplyingPower3 = 1.0;
    libNEXS_gv_ryMainWeapon3 = 1;
    libNEXS_gv_rySubWeapon3 = 1;
    libNEXS_gv_ryAuxiliaryEquipment3 = 1;
    libNEXS_gv_raynorArmory3 = UnitGroupEmpty();
    libNEXS_gv_raynorHERC = UnitGroupEmpty();
    libNEXS_gv_raynorDOOM = UnitGroupEmpty();
    libNEXS_gv_raynorIRON = UnitGroupEmpty();
    libNEXS_gv_e8A385E794B2E58D95E4BD8DE7BB84 = UnitGroupEmpty();
    libNEXS_gv_equipmentAllow = 1;
    libNEXS_gv_equipmentADMax = 9;
    libNEXS_gv_equipmentADMin = 1;
    libNEXS_gv_equipmentDropChance = 0.01;
    libNEXS_gv_supplyMultiplyingPower = 1.0;
    libNEXS_gv_ryMainWeapon = 1;
    libNEXS_gv_rySubWeapon = 1;
    libNEXS_gv_ryAuxiliaryEquipment = 1;
    libNEXS_gv_raynorHERO = UnitGroupEmpty();
    libNEXS_gv_raynorArmory = UnitGroupEmpty();
    libNEXS_gv_raynorKerrigan = UnitGroupEmpty();
    libNEXS_gv_e4BDBFE794A8UEDE68C87E68CA5E5AE98E79A84E78EA9E5AEB6 = -1;
    libNEXS_gv_uEDE68898E58897E7AD89E7BAA7 = 1.0;
    libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID2 = -1;
    libNEXS_gv_e78684E781AFE5BDB1E5938DE7BB84 = UnitGroupEmpty();
    libNEXS_gv_e59CB0E597AAE78B82E783AD = UnitGroupEmpty();
    libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13 = -1;
    for (init_i = 0; init_i <= libNEXS_gv_zeroTeamMax; init_i += 1) {
        libNEXS_gv_zeroTeam[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libNEXS_gv_platformMaxCount; init_i += 1) {
        libNEXS_gv_bomberPFUnitsGroup[init_i] = UnitGroupEmpty();
    }
    libNEXS_gv_bomberPlatformTempGroup = UnitGroupEmpty();
    libNEXS_gv_bomberFighterDebugGroup = UnitGroupEmpty();
    libNEXS_gv_bomberFighterTempGroup = UnitGroupEmpty();
    libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5 = -1;
    libNEXS_gv_valerianGlobalText = c_invalidDialogControlId;
    libNEXS_gv_valerianGlobalTextPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 1; init_i += 1) {
        libNEXS_gv_valerianGlobalTextFrame[init_i] = c_invalidDialogId;
    }
    libNEXS_gv_valerianCaster = UnitGroupEmpty();
    libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID4 = -1;
    libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8 = -1;
    libNEXS_gv_e4BDBFE794A8E696AFE58FB0E789B9E69BBCE79A84E78EA9E5AEB6EFBC88E78EA9E5AEB6E7BB84EFBC89 = PlayerGroupEmpty();
    libNEXS_gv_mechaNameNumber = 1;
    libNEXS_gv_mechaNumber1 = StringExternal("Param/Value/lib_NEXS_61E16011");
    libNEXS_gv_mechaNumber2 = StringExternal("Param/Value/lib_NEXS_D25354A5");
    libNEXS_gv_mechaNumber3 = StringExternal("Param/Value/lib_NEXS_348A954E");
    libNEXS_gv_mechaNumber4 = StringExternal("Param/Value/lib_NEXS_222CE85B");
    libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10 = -1;
    libNEXS_gv_e588B7E696B0E8AEA1E697B6E599A8 = TimerCreate();
    libNEXS_gv_rCZLocustNest = UnitGroupEmpty();
    libNEXS_gv_rCZLocustNestControlApplied = UnitGroupEmpty();
    libNEXS_gv_e89D97E899ABE68A80E883BDE586B7E58DB4 = 6.0;
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libNEXS_gv_rCZUnitConnectionGroup[init_i] = UnitGroupEmpty();
    }
    libNEXS_gv_rCZNetwork = UnitGroupEmpty();
    libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9 = -1;
    libNEXS_gv_e98197E4B896E79FB3E7A291EFBC9AE58DA1E68B89E58D95E4BD8DE7BB84 = UnitGroupEmpty();
    libNEXS_gv_e98197E4B896E79FB3E7A291EFBC9AE58780E58C96E58D95E4BD8DE7BB84 = UnitGroupEmpty();
    libNEXS_gv_e98197E4B896E79FB3E7A291EFBC9AE8999AE7A9BAE58D95E4BD8DE7BB84 = UnitGroupEmpty();
    libNEXS_gv_e98197E4B896E79FB3E7A291EFBC9AE7A7A9E5BA8FE58D95E4BD8DE7BB84 = UnitGroupEmpty();
    libNEXS_gv_karassPylonGroup = UnitGroupEmpty();
    libNEXS_gv_karassGroup = UnitGroupEmpty();
    libNEXS_gv_e58DA1E68B89E696AFE79FB3E7A291E8AEA1E697B6E599A8 = TimerCreate();
    libNEXS_gv_karassE9A38EE69AB4E5889BE5BBBAE58D95E4BD8D = UnitGroupEmpty();
    libNEXS_gv_karassE9A38EE69AB4E5AEA3E8A880 = UnitGroupEmpty();
    libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID = -1;
    libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15 = -1;
    libNEXS_gv_deceleration = 2;
    libNEXS_gv_weaponCycleSupplicant = 1.65;
    libNEXS_gv_weaponCycleSlayer = 1.44;
    libNEXS_gv_weaponCycleDarkTemplar = 1.0;
    libNEXS_gv_weaponCycleColossus = 3.0;
    libNEXS_gv_extraUnits = UnitGroupEmpty();
    libNEXS_gv_jinaraBloodSoulUnitsGroup = UnitGroupEmpty();
    libNEXS_gv_jinaraScarletHeroBirthFirst = 1;
    libNEXS_gv_jinaraScarletWeaponDamage = 60.0;
    libNEXS_gv_jinaraScarletDestructionWave = 50.0;
    libNEXS_gv_jinaraScarletDeadlyCharge = 200.0;
    libNEXS_gv_deathFleetHasVoidRay = true;
    libNEXS_gv_deathFleetHasCarrier = true;
    libNEXS_gv_deathFleetHasMotherShip = true;
    for (init_i = 0; init_i <= 0; init_i += 1) {
        libNEXS_gv_jinaraScarlet_EmpowerSlaves[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 0; init_i += 1) {
        libNEXS_gv_jinaraScarlet_EmpowerWorshipers[init_i] = UnitGroupEmpty();
    }
    libNEXS_gv_supplicantWarpTrainActualUnitCost = UnitTypeGetCost("JinaraSupplicant", c_unitCostMinerals);
    libNEXS_gv_supplicantWarpTrainActualCommand = AbilityCommand("JinaraWarpGateTrainSupplicantTrue", 11);
    for (init_i = 0; init_i <= 0; init_i += 1) {
        libNEXS_gv_jinaraSacrificeBuffTargetingGroup[init_i] = UnitGroupEmpty();
    }
    libNEXS_gv_jinaraSacrificeScarletExtraEnergy = 1;
    libNEXS_gv_jinaraScarletStatus = libNEXS_ge_JinaraScarletStatus_NotStart;
    libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16 = -1;
    libNEXS_gv_niadraE4BDBFE794A8E78EA9E5AEB6 = 1;
    libNEXS_gv_niadraUpdateUI = c_invalidDialogId;
    libNEXS_gv_niadra_A_Frame = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 7; init_i += 1) {
        libNEXS_gv_niadra_A_Icon[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        libNEXS_gv_niadra_A_Label[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        libNEXS_gv_niadra_A_Button[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        libNEXS_gv_niadra_A_CheckMark[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        libNEXS_gv_niadra_A_Button_Frame[init_i] = c_invalidDialogControlId;
    }
    libNEXS_gv_niadra_A_ExitButton = c_invalidDialogControlId;
    libNEXS_gv_niadra_B_Frame = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libNEXS_gv_niadra_B_Icon[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libNEXS_gv_niadra_B_Label[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libNEXS_gv_niadra_B_Button[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libNEXS_gv_niadra_B_CheckMark[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libNEXS_gv_niadra_B_Button_Frame[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libNEXS_gv_niadra_B_Icon2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libNEXS_gv_niadra_B_Label2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libNEXS_gv_niadra_B_Button2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libNEXS_gv_niadra_B_CheckMark2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libNEXS_gv_niadra_B_Button_Frame2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libNEXS_gv_niadra_B_Icon3[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libNEXS_gv_niadra_B_Label3[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libNEXS_gv_niadra_B_Button3[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libNEXS_gv_niadra_B_CheckMark3[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libNEXS_gv_niadra_B_Button_Frame3[init_i] = c_invalidDialogControlId;
    }
    libNEXS_gv_niadra_B_ExitButton = c_invalidDialogControlId;
    libNEXS_gv_niadra_C_Frame = c_invalidDialogControlId;
    libNEXS_gv_niadra_C_Icon = c_invalidDialogControlId;
    libNEXS_gv_niadra_C_Label = c_invalidDialogControlId;
    libNEXS_gv_niadra_C_Button = c_invalidDialogControlId;
    libNEXS_gv_niadra_C_CheckMark = c_invalidDialogControlId;
    libNEXS_gv_niadra_C_Button_Frame = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libNEXS_gv_niadra_C_Icon2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libNEXS_gv_niadra_C_Label2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libNEXS_gv_niadra_C_Button2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libNEXS_gv_niadra_C_CheckMark2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libNEXS_gv_niadra_C_Button_Frame2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libNEXS_gv_niadra_C_Icon3[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libNEXS_gv_niadra_C_Label3[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libNEXS_gv_niadra_C_Button3[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libNEXS_gv_niadra_C_CheckMark3[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libNEXS_gv_niadra_C_Button_Frame3[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libNEXS_gv_niadra_C_Icon4[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libNEXS_gv_niadra_C_Label4[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libNEXS_gv_niadra_C_Button4[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libNEXS_gv_niadra_C_CheckMark4[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libNEXS_gv_niadra_C_Button_Frame4[init_i] = c_invalidDialogControlId;
    }
    libNEXS_gv_niadra_C_ExitButton = c_invalidDialogControlId;
    libNEXS_gv_niadra_Tooltip = c_invalidDialogControlId;
    libNEXS_gv_niadra_Tooltip_Label = c_invalidDialogControlId;
    libNEXS_gv_niadraFreeProbe = UnitGroupEmpty();
    libNEXS_gv_probeAmount = 6;
    libNEXS_gv_niadraUradsonLifeInitial = 3000;
    libNEXS_gv_covertOpsTankRange = 13;
    libNEXS_gv_covertOps5minTimer = TimerCreate();
    libNEXS_gv_covertOps10minTimer = TimerCreate();
    libNEXS_gv_covertOps15minTimer = TimerCreate();
    libNEXS_gv_covertOps20minTimer = TimerCreate();
    libNEXS_gv_covertOpsA8minTimer = TimerCreate();
    libNEXS_gv_covertOpsA10minTimer = TimerCreate();
    libNEXS_gv_covertOpsA15minTimer = TimerCreate();
    libNEXS_gv_covertOpsB8minTimer = TimerCreate();
    libNEXS_gv_covertOpsB10minTimer = TimerCreate();
    libNEXS_gv_covertOpsB15minTimer = TimerCreate();
    libNEXS_gv_mobius5minTimer = TimerCreate();
    libNEXS_gv_mobius10minTimer = TimerCreate();
    libNEXS_gv_mobius15minTimer = TimerCreate();
    libNEXS_gv_mobius20minTimer = TimerCreate();
    libNEXS_gv_mobiusA8minTimer = TimerCreate();
    libNEXS_gv_mobiusA10minTimer = TimerCreate();
    libNEXS_gv_mobiusB8minTimer = TimerCreate();
    libNEXS_gv_mobiusB10minTimer = TimerCreate();
    libNEXS_gv_nerazim5minTimer = TimerCreate();
    libNEXS_gv_nerazim10minTimer = TimerCreate();
    libNEXS_gv_nerazim15minTimer = TimerCreate();
    libNEXS_gv_nerazim20minTimer = TimerCreate();
    libNEXS_gv_nerazimA8minTimer = TimerCreate();
    libNEXS_gv_nerazimA10minTimer = TimerCreate();
    libNEXS_gv_nerazimA15minTimer = TimerCreate();
    libNEXS_gv_nerazimB8minTimer = TimerCreate();
    libNEXS_gv_nerazimB10minTimer = TimerCreate();
    libNEXS_gv_nerazimB15minTimer = TimerCreate();
    libNEXS_gv_nerazimC8minTimer = TimerCreate();
    libNEXS_gv_nerazimC10minTimer = TimerCreate();
    libNEXS_gv_nerazimC15minTimer = TimerCreate();
    libNEXS_gv_nest5minTimer = TimerCreate();
    libNEXS_gv_nest10minTimer = TimerCreate();
    libNEXS_gv_nest15minTimer = TimerCreate();
    libNEXS_gv_nest20minTimer = TimerCreate();
    libNEXS_gv_nestA8minTimer = TimerCreate();
    libNEXS_gv_nestA10minTimer = TimerCreate();
    libNEXS_gv_nestA15minTimer = TimerCreate();
    libNEXS_gv_nestLurkerSearchArea = 7;
    libNEXS_gv_nestB10minTimer = TimerCreate();
    libNEXS_gv_nestB15minTimer = TimerCreate();
    libNEXS_gv_taldarim5minTimer = TimerCreate();
    libNEXS_gv_taldarim10minTimer = TimerCreate();
    libNEXS_gv_taldarim15minTimer = TimerCreate();
    libNEXS_gv_taldarim20minTimer = TimerCreate();
    libNEXS_gv_taldarimA8minTimer = TimerCreate();
    libNEXS_gv_taldarimA15minTimer = TimerCreate();
    libNEXS_gv_taldarimB8minTimer = TimerCreate();
    libNEXS_gv_taldarimB10minTimer = TimerCreate();
    libNEXS_gv_taldarimB15minTimer = TimerCreate();
    libNEXS_gv_taldarimB20minTimer = TimerCreate();
    libNEXS_gv_taldarimB25minTimer = TimerCreate();
    libNEXS_gv_taldarimB30minTimer = TimerCreate();
    libNEXS_gv_taldarimB35minTimer = TimerCreate();
    libNEXS_gv_kelMorian5minTimer = TimerCreate();
    libNEXS_gv_kelMorian10minTimer = TimerCreate();
    libNEXS_gv_kelMorian15minTimer = TimerCreate();
    libNEXS_gv_kelMorian20minTimer = TimerCreate();
    libNEXS_gv_kelMorianA12minTimer = TimerCreate();
    libNEXS_gv_kelMorianA20minTimer = TimerCreate();
    libNEXS_gv_mecha5minTimer = TimerCreate();
    libNEXS_gv_mecha10minTimer = TimerCreate();
    libNEXS_gv_mecha15minTimer = TimerCreate();
    libNEXS_gv_mecha20minTimer = TimerCreate();
    libNEXS_gv_mechaA8minTimer = TimerCreate();
    libNEXS_gv_mechaA10minTimer = TimerCreate();
    libNEXS_gv_golden5minTimer = TimerCreate();
    libNEXS_gv_golden10minTimer = TimerCreate();
    libNEXS_gv_golden15minTimer = TimerCreate();
    libNEXS_gv_golden20minTimer = TimerCreate();
    libNEXS_gv_goldenA8minTimer = TimerCreate();
    libNEXS_gv_goldenA15minTimer = TimerCreate();
}

// Presets
// Functions
void libNEXS_gf_E5889DE5A78BE58C96EFBC9AAIE8A18CE4B8BAE980BBE8BE91Init03 () {
    // Automatic Variable Declarations
    // Implementation
    if (true) {
        TriggerExecute(libNEXS_gt_MobiusA, false, false);
    }

    if (true) {
        TriggerExecute(libNEXS_gt_MobiusB, false, false);
    }

    if (true) {
        TriggerExecute(libNEXS_gt_NerazimA, false, false);
    }

    if (true) {
        TriggerExecute(libNEXS_gt_NerazimB, false, false);
    }

    if (true) {
        TriggerExecute(libNEXS_gt_NerazimC, false, false);
    }

    if (true) {
        TriggerExecute(libNEXS_gt_NestA, false, false);
    }

    if (true) {
        TriggerExecute(libNEXS_gt_NestB, false, false);
    }

    if (true) {
        TriggerExecute(libNEXS_gt_CovertOpsA, false, false);
    }

    if (true) {
        TriggerExecute(libNEXS_gt_CovertOpsB, false, false);
    }

    if (true) {
        TriggerExecute(libNEXS_gt_TaldarimA, false, false);
    }

    if (true) {
        TriggerExecute(libNEXS_gt_TaldarimB, false, false);
    }

    if (true) {
        TriggerExecute(libNEXS_gt_KelMorianA, false, false);
    }

    if (true) {
        TriggerExecute(libNEXS_gt_MechaA, false, false);
    }

    if (true) {
        TriggerExecute(libNEXS_gt_GoldenA, false, false);
    }

}

void libNEXS_gf_SetHeroPanelUnit (int lp_index, unit lp_heroUnit, int lp_player) {
    // Variable Declarations
    int lv_indexHero;
    bool lv_noValidHeroes;
    int lv_heroHotkey;
    playergroup lv_heroGroup;

    // Automatic Variable Declarations
    int autoD962280D_val;
    const int autoDC39ECA7_ae = libNEXS_gv_cUC_HeroMaxCount;
    const int autoDC39ECA7_ai = 1;
    unit auto9DD8EDF4_val;
    int autoA644B8ED_val;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();

    // Implementation
    lv_heroGroup = PlayerGroupSingle(lp_player);
    libNEXS_gv_cU_HeroUnit[lp_index][lp_player] = lp_heroUnit;
    libNEXS_gv_cU_HeroType[lp_index][lp_player] = libNEXS_gf_CU_HeroTypeFromUnitType(UnitGetType(lp_heroUnit));
    autoD962280D_val = libNEXS_gv_cU_HeroType[lp_index][lp_player];
    {
        libNEXS_gv_cU_HeroShowLevel[lp_index][lp_player] = true;
    }
    libNEXS_gf_CU_UpdateHeroPanel(lp_index, lp_player);
    if ((PlayerRace(lp_player) == "Zerg")) {
        DialogControlSendAnimationEvent(libNEXS_gv_cU_HeroPanel[lp_index], PlayerGroupSingle(lp_player), "SwitchZerg");
    }
    else if ((PlayerRace(lp_player) == "Terr")) {
        DialogControlSendAnimationEvent(libNEXS_gv_cU_HeroPanel[lp_index], PlayerGroupSingle(lp_player), "SwitchTerran");
    }
    libNEXS_gv_cU_HeroExists[lp_player] = true;
    if ((libNEXS_gv_cU_HeroUnit[lp_index][lp_player] == null)) {
        lv_indexHero = 1;
        for ( ; ( (autoDC39ECA7_ai >= 0 && lv_indexHero <= autoDC39ECA7_ae) || (autoDC39ECA7_ai < 0 && lv_indexHero >= autoDC39ECA7_ae) ) ; lv_indexHero += autoDC39ECA7_ai ) {
            if ((libNEXS_gv_cU_HeroUnit[lv_indexHero][lp_player] == null)) {
            }
            else {
                libNEXS_gv_cU_HeroExists[lp_player] = false;
                break;
            }
        }
    }
    else {
        TriggerEnable(libNEXS_gt_CU_HeroPanelUpdate, true);
        TriggerEnable(libNEXS_gt_CU_HeroUnitDamaged, true);
        TriggerEnable(libNEXS_gt_CU_HeroMouseHoverText, true);
        TriggerEnable(libNEXS_gt_CU_HeroUnitVitalChange, true);
        auto9DD8EDF4_val = lp_heroUnit;
        {
            libNtve_gf_SetDialogItemAnimationDuration(libNEXS_gv_cU_HeroDialogCooldownImage[lp_index], 60.0, lv_heroGroup);
        }
        autoA644B8ED_val = lp_index;
        if (autoA644B8ED_val == 1) {
            lv_heroHotkey = c_hotkeyHeroSelect0;
        }
        else if (autoA644B8ED_val == 2) {
            lv_heroHotkey = c_hotkeyHeroSelect1;
        }
        else {
        }
        if ((lp_index <= libNEXS_gv_cUC_HeroMaxCount)) {
            libNtve_gf_SetDialogItemHotkey(libNEXS_gv_cU_HeroDialogButton[lp_index], lv_heroHotkey, lv_heroGroup);
        }

    }
}

void libNEXS_gf_CU_ShowHideHeroPanel (bool lp_showHide) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto05E9DD2C_ae = libNEXS_gv_cUC_HeroMaxCount;
    const int auto05E9DD2C_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto05E9DD2C_ai >= 0 && lv_index <= auto05E9DD2C_ae) || (auto05E9DD2C_ai < 0 && lv_index >= auto05E9DD2C_ae) ) ; lv_index += auto05E9DD2C_ai ) {
        if ((libNEXS_gv_cU_HeroPanel[lv_index] != c_invalidDialogControlId)) {
            DialogControlSetVisible(libNEXS_gv_cU_HeroPanel[lv_index], PlayerGroupAll(), lp_showHide);
        }

    }
}

void libNEXS_gf_CU_CreateHeroPanel (int lp_index) {
    // Automatic Variable Declarations
    int autoE2D4157C_val;

    // Implementation
    if ((lp_index == 1)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/VoidHeroUnitFrame");
    }
    else {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/SecondaryVoidHeroUnitFrame");
    }
    libNEXS_gv_cU_HeroPanel[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libNEXS_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BorderImage");
    libNEXS_gv_cU_HeroDialogBorderImage[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(libNEXS_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BorderNoEnergyImage");
    libNEXS_gv_cU_HeroDialogBorderImageNoEnergy[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(libNEXS_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BorderImageAll");
    libNEXS_gv_cU_HeroDialogBorderImageAll[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(libNEXS_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "LevelBox");
    libNEXS_gv_cU_HeroDialogLevelBox[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(libNEXS_gv_cU_HeroDialogLevelBox[lp_index], PlayerGroupAll(), false);
    DialogControlHookup(libNEXS_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "LevelLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libNEXS_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "CooldownImage");
    libNEXS_gv_cU_HeroDialogCooldownImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libNEXS_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "DamageTakenImage");
    libNEXS_gv_cU_HeroDialogDamageTakenImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libNEXS_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "EnergyBarImage");
    libNEXS_gv_cU_HeroDialogEnergyBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libNEXS_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "EnergyBarBackground");
    libNEXS_gv_cU_HeroDialogEnergyBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libNEXS_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "HealthBarImage");
    libNEXS_gv_cU_HeroDialogHealthBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libNEXS_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BarBackground");
    libNEXS_gv_cU_HeroDialogHealthBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libNEXS_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "ShieldBarImage");
    libNEXS_gv_cU_HeroDialogShieldBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libNEXS_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "ShieldBarBackground");
    libNEXS_gv_cU_HeroDialogShieldBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libNEXS_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "IconImage");
    libNEXS_gv_cU_HeroDialogIconImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libNEXS_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "DamageTakenLabel");
    libNEXS_gv_cU_HeroDialogDamageTakenLabel[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(libNEXS_gv_cU_HeroDialogDamageTakenLabel[lp_index], StringToText(""), PlayerGroupAll());
    DialogControlHookup(libNEXS_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "EnergyLabel");
    libNEXS_gv_cU_HeroDialogEnergyLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libNEXS_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "HealthLabel");
    libNEXS_gv_cU_HeroDialogHealthLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libNEXS_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "ShieldLabel");
    libNEXS_gv_cU_HeroDialogShieldLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libNEXS_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "LevelLabel");
    libNEXS_gv_cU_HeroDialogLevelLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libNEXS_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "NameLabel");
    libNEXS_gv_cU_HeroDialogNameLabel[lp_index] = DialogControlLastCreated();
    autoE2D4157C_val = lp_index;
    if (autoE2D4157C_val == 1) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/VoidHeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect0, PlayerGroupAll());
    }
    else if (autoE2D4157C_val == 2) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/SecondaryVoidHeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect1, PlayerGroupAll());
    }
    else {
    }
    libNEXS_gv_cU_HeroDialogButton[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(libNEXS_gv_cU_HeroDialogDamageTakenImage[lp_index], PlayerGroupAll(), false);
    DialogControlSetVisible(libNEXS_gv_cU_HeroDialogCooldownImage[lp_index], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemRenderPriority(libNEXS_gv_cU_HeroDialogEnergyBarBackground[lp_index], 505, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(libNEXS_gv_cU_HeroDialogHealthBarBackground[lp_index], 505, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(libNEXS_gv_cU_HeroDialogShieldBarImage[lp_index], 511, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(libNEXS_gv_cU_HeroDialogShieldBarBackground[lp_index], 510, PlayerGroupAll());
}

void libNEXS_gf_CU_UpdateHeroPanel (int lp_index, int lp_player) {
    // Variable Declarations
    text lv_hotkey;
    int lv_life;
    int lv_shields;
    int lv_energy;
    playergroup lv_updateGroup;

    // Automatic Variable Declarations
    int auto746FAA72_val;

    // Variable Initialization
    lv_updateGroup = PlayerGroupEmpty();

    // Implementation
    lv_updateGroup = PlayerGroupSingle(lp_player);
    if ((libNEXS_gv_cU_HeroUnit[lp_index][lp_player] == null)) {
        if ((libNEXS_gv_cU_HeroPanel[lp_index] != c_invalidDialogControlId)) {
            DialogControlSetVisible(libNEXS_gv_cU_HeroPanel[lp_index], lv_updateGroup, false);
        }

        return ;
    }

    if ((libNEXS_gv_cU_HeroPanel[lp_index] == c_invalidDialogControlId)) {
        libNEXS_gf_CU_CreateHeroPanel(lp_index);
    }

    DialogControlSetVisible(libNEXS_gv_cU_HeroPanel[lp_index], lv_updateGroup, true);
    auto746FAA72_val = lp_index;
    if (auto746FAA72_val == 1) {
        lv_hotkey = StringExternal("Param/Value/lib_NEXS_75D0705D");
    }
    else if (auto746FAA72_val == 2) {
        lv_hotkey = StringExternal("Param/Value/lib_NEXS_3027EB66");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_NEXS_BD563826", "A", UnitGetName(libNEXS_gv_cU_HeroUnit[lp_index][lp_player]));
    TextExpressionSetToken("Param/Expression/lib_NEXS_BD563826", "B", lv_hotkey);
    libNtve_gf_SetDialogItemText(libNEXS_gv_cU_HeroDialogNameLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_NEXS_BD563826"), lv_updateGroup);
    libNtve_gf_SetDialogItemImage(libNEXS_gv_cU_HeroDialogIconImage[lp_index], libNEXS_gf_CU_HeroIcon(libNEXS_gv_cU_HeroType[lp_index][lp_player], libNEXS_gv_cU_HeroUnit[lp_index][lp_player]), lv_updateGroup);
    TextExpressionSetToken("Param/Expression/lib_NEXS_D0E8CC85", "CurrentLife", FixedToText(UnitGetPropertyFixed(libNEXS_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropLife, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_NEXS_D0E8CC85", "MaxLife", FixedToText(UnitGetPropertyFixed(libNEXS_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropLifeMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(libNEXS_gv_cU_HeroDialogHealthLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_NEXS_D0E8CC85"), lv_updateGroup);
    lv_life = FixedToInt((UnitGetPropertyFixed(libNEXS_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropLifePercent, c_unitPropCurrent) * (IntToFixed(libNEXS_gv_cUC_HEROUIBARWIDTH) / 100.0)));
    if ((lv_life > 0)) {
        DialogControlSetSize(libNEXS_gv_cU_HeroDialogHealthBarImage[lp_index], lv_updateGroup, lv_life, libNEXS_gv_cUC_HEROUILIFEBARHEIGHT);
        DialogControlSetVisible(libNEXS_gv_cU_HeroDialogHealthBarImage[lp_index], lv_updateGroup, true);
    }
    else {
        DialogControlSetVisible(libNEXS_gv_cU_HeroDialogHealthBarImage[lp_index], lv_updateGroup, false);
    }
    if ((UnitGetPropertyFixed(libNEXS_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropShieldsMax, c_unitPropCurrent) > 0)) {
        DialogControlSetVisible(libNEXS_gv_cU_HeroDialogShieldBarBackground[lp_index], lv_updateGroup, true);
        TextExpressionSetToken("Param/Expression/lib_NEXS_74FE9F78", "CurrentLife", FixedToText(UnitGetPropertyFixed(libNEXS_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropShields, c_unitPropCurrent), 0));
        TextExpressionSetToken("Param/Expression/lib_NEXS_74FE9F78", "MaxLife", FixedToText(UnitGetPropertyFixed(libNEXS_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropShieldsMax, c_unitPropCurrent), 0));
        libNtve_gf_SetDialogItemText(libNEXS_gv_cU_HeroDialogShieldLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_NEXS_74FE9F78"), lv_updateGroup);
        lv_shields = FixedToInt((UnitGetPropertyFixed(libNEXS_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropShieldsPercent, c_unitPropCurrent) * (IntToFixed(libNEXS_gv_cUC_HEROUIBARWIDTH) / 100.0)));
        if ((lv_shields > 0)) {
            DialogControlSetSize(libNEXS_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, lv_shields, libNEXS_gv_cUC_HEROUISHIELDBARHEIGHT);
            DialogControlSetVisible(libNEXS_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, true);
        }
        else {
            DialogControlSetSize(libNEXS_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, 1, libNEXS_gv_cUC_HEROUISHIELDBARHEIGHT);
            DialogControlSetVisible(libNEXS_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, false);
        }
    }
    else {
        DialogControlSetVisible(libNEXS_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, false);
        DialogControlSetVisible(libNEXS_gv_cU_HeroDialogShieldBarBackground[lp_index], lv_updateGroup, false);
    }
    TextExpressionSetToken("Param/Expression/lib_NEXS_B2EF3A92", "CurrentEnergy", FixedToText(UnitGetPropertyFixed(libNEXS_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropEnergy, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_NEXS_B2EF3A92", "MaxEnergy", FixedToText(UnitGetPropertyFixed(libNEXS_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropEnergyMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(libNEXS_gv_cU_HeroDialogEnergyLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_NEXS_B2EF3A92"), lv_updateGroup);
    if ((UnitGetPropertyFixed(libNEXS_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropEnergyMax, c_unitPropCurrent) == 0)) {
        lv_energy = 0;
        DialogControlSetVisible(libNEXS_gv_cU_HeroDialogBorderImageNoEnergy[lp_index], lv_updateGroup, true);
        DialogControlSetVisible(libNEXS_gv_cU_HeroDialogBorderImage[lp_index], lv_updateGroup, false);
        DialogControlSetVisible(libNEXS_gv_cU_HeroDialogBorderImageAll[lp_index], lv_updateGroup, false);
        DialogControlSetVisible(libNEXS_gv_cU_HeroDialogEnergyBarBackground[lp_index], lv_updateGroup, false);
    }
    else {
        lv_energy = FixedToInt((UnitGetPropertyFixed(libNEXS_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropEnergyPercent, c_unitPropCurrent) * (IntToFixed(libNEXS_gv_cUC_HEROUIBARWIDTH) / 100.0)));
        if ((libNEXS_gf_CU_ChampionHasShields(libNEXS_gv_cU_HeroType[lp_index][lp_player]) == true)) {
            DialogControlSetVisible(libNEXS_gv_cU_HeroDialogBorderImageAll[lp_index], lv_updateGroup, true);
            DialogControlSetVisible(libNEXS_gv_cU_HeroDialogBorderImageNoEnergy[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libNEXS_gv_cU_HeroDialogBorderImage[lp_index], lv_updateGroup, false);
        }
        else {
            DialogControlSetVisible(libNEXS_gv_cU_HeroDialogBorderImageAll[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libNEXS_gv_cU_HeroDialogBorderImageNoEnergy[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libNEXS_gv_cU_HeroDialogBorderImage[lp_index], lv_updateGroup, true);
        }
        DialogControlSetVisible(libNEXS_gv_cU_HeroDialogEnergyBarBackground[lp_index], lv_updateGroup, true);
    }
    if ((lv_energy > 0)) {
        DialogControlSetSize(libNEXS_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, lv_energy, libNEXS_gv_cUC_HEROUIENERGYBARHEIGHT);
        DialogControlSetVisible(libNEXS_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, true);
    }
    else {
        DialogControlSetVisible(libNEXS_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, false);
    }
    if ((libNEXS_gv_cU_VoidHeroUIDamageTimer[lp_index][lp_player] > 0.0)) {
        libNEXS_gv_cU_VoidHeroUIDamageTimer[lp_index][lp_player] -= libNEXS_gv_cUC_HeroUpdateFrequency;
        if ((libNEXS_gv_cU_VoidHeroUIDamageTimer[lp_index][lp_player] <= 0.0)) {
            DialogControlSetVisible(libNEXS_gv_cU_HeroDialogDamageTakenLabel[lp_index], lv_updateGroup, false);
            DialogControlFadeTransparency(libNEXS_gv_cU_HeroDialogDamageTakenImage[lp_index], lv_updateGroup, 1.0, 100.0);
        }

    }

    if ((UnitIsAlive(libNEXS_gv_cU_HeroUnit[lp_index][lp_player]) == false)) {
        if ((libNEXS_gv_cU_VoidHeroUIRevivable[lp_index][lp_player] == true)) {
            DialogControlSetVisible(libNEXS_gv_cU_HeroDialogCooldownImage[lp_index], lv_updateGroup, true);
        }
        else if (true) {
            DialogControlSetVisible(libNEXS_gv_cU_HeroDialogCooldownImage[lp_index], lv_updateGroup, false);
        }
        if ((UnitGetPropertyFixed(libNEXS_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libNEXS_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, false);
        }

    }
    else {
        DialogControlSetVisible(libNEXS_gv_cU_HeroDialogCooldownImage[lp_index], lv_updateGroup, false);
    }
    libNtve_gf_SetDialogItemUnit(libNEXS_gv_cU_HeroDialogButton[lp_index], libNEXS_gv_cU_HeroUnit[lp_index][lp_player], lv_updateGroup);
}

string libNEXS_gf_CU_PresetToHeroGameLink (int lp_championPreset) {
    // Automatic Variable Declarations
    int autoB57CB475_val;

    // Implementation
    autoB57CB475_val = lp_championPreset;
    {
        return null;
    }
}

int libNEXS_gf_CU_HeroTypeFromUnitType (string lp_unitType) {
    // Automatic Variable Declarations
    string auto5C14FAB4_val;

    // Implementation
    auto5C14FAB4_val = lp_unitType;
    if (auto5C14FAB4_val == "MothershipCore") {
        return libNEXS_ge_CampaignHeroes_Tassadar;
    }
    else if (auto5C14FAB4_val == "PlanetCrackerPurifierUnit2") {
        return libNEXS_ge_CampaignHeroes_Tassadar;
    }
    else if (auto5C14FAB4_val == "PlanetCrackerPurifierUnit") {
        return libNEXS_ge_CampaignHeroes_Tassadar;
    }
    else if (auto5C14FAB4_val == "Mothership2") {
        return libNEXS_ge_CampaignHeroes_Tassadar;
    }
    else if (auto5C14FAB4_val == "MutatorAmonZeratul") {
        return libNEXS_ge_CampaignHeroes_Zeratul;
    }
    else if (auto5C14FAB4_val == "Tosh") {
        return libNEXS_ge_CampaignHeroes_Tosh;
    }
    else if (auto5C14FAB4_val == "ValerianZeus") {
        return libNEXS_ge_CampaignHeroes_Mengsk;
    }
    else if (auto5C14FAB4_val == "Henius") {
        return libNEXS_ge_CampaignHeroes_Stetmann;
    }
    else if (auto5C14FAB4_val == "KarassReviveBeacon") {
        return libNEXS_ge_CampaignHeroes_Karass;
    }
    else if (auto5C14FAB4_val == "TychusCommando2") {
        return libNEXS_ge_CampaignHeroes_Raynor;
    }
    else if (auto5C14FAB4_val == "RaynorCommando22") {
        return libNEXS_ge_CampaignHeroes_Raynor;
    }
    else if (auto5C14FAB4_val == "RaynorCommando2") {
        return libNEXS_ge_CampaignHeroes_Raynor;
    }
    else if (auto5C14FAB4_val == "UlrezajHero") {
        return libNEXS_ge_CampaignHeroes_Ulrezaj;
    }
    else if (auto5C14FAB4_val == "SelendisAdeptHero") {
        return libNEXS_ge_CampaignHeroes_Selendis;
    }
    else if (auto5C14FAB4_val == "SelendisMothershipHero") {
        return libNEXS_ge_CampaignHeroes_Selendis;
    }
    else if (auto5C14FAB4_val == "SelendisZealotHero") {
        return libNEXS_ge_CampaignHeroes_Selendis;
    }
    else if (auto5C14FAB4_val == "GestaltZero") {
        return libNEXS_ge_CampaignHeroes_Gestalt;
    }
    else {
    }
    return libNEXS_ge_CampaignHeroes_None;
}

string libNEXS_gf_CU_HeroIcon (int lp_heroType, unit lp_heroUnit) {
    // Automatic Variable Declarations
    int auto5CE0CD17_val;

    // Implementation
    auto5CE0CD17_val = lp_heroType;
    if (auto5CE0CD17_val == libNEXS_ge_CampaignHeroes_Zeratul) {
        if ((UnitIsAlive(lp_heroUnit) == true)) {
            return "Assets\\Textures\\ui_commanderportrait_zeratul.dds";
        }
        else {
            return "Assets\\Textures\\hud_bar_deathstun_icon.dds";
        }
    }
    else if (auto5CE0CD17_val == libNEXS_ge_CampaignHeroes_Raynor) {
        if ((UnitIsAlive(lp_heroUnit) == true)) {
            return "Assets\\Textures\\ui_commanderportrait_raynor.dds";
        }
        else {
            return "Assets\\Textures\\hud_bar_deathstun_icon.dds";
        }
    }
    else if (auto5CE0CD17_val == libNEXS_ge_CampaignHeroes_Stetmann) {
        if ((UnitIsAlive(lp_heroUnit) == true)) {
            return "Assets\\Textures\\ui_commanderportrait_stetmann.dds";
        }
        else {
            return "Assets\\Textures\\hud_bar_deathstun_icon.dds";
        }
    }
    else if (auto5CE0CD17_val == libNEXS_ge_CampaignHeroes_Tosh) {
        if ((UnitIsAlive(lp_heroUnit) == true)) {
            return "New Icons\\btn-ability-terran-tosh-consumption-color.dds";
        }
        else {
            return "Assets\\Textures\\hud_bar_deathstun_icon.dds";
        }
    }
    else if (auto5CE0CD17_val == libNEXS_ge_CampaignHeroes_Ulrezaj) {
        if ((UnitIsAlive(lp_heroUnit) == true)) {
            return "Talon\\Icons\\btn-ability-Ulrezaj-TopBar4.dds";
        }
        else {
            return "Talon\\Icons\\btn-ability-protoss-talon-hero-darkmind.dds";
        }
    }
    else if (auto5CE0CD17_val == libNEXS_ge_CampaignHeroes_Karass) {
        if ((UnitIsAlive(lp_heroUnit) == true)) {
            if ((UnitGetType(lp_heroUnit) == "KarassReviveBeacon")) {
                return "Assets\\Textures\\btn-unit-KarassBeacon.dds";
            }
            else {
                if ((UnitHasBehavior2(lp_heroUnit, "UnknownBehavior77") == false)) {
                    return "Assets\\Textures\\btn-unit-protoss-karass.dds";
                }
                else {
                    return "Assets\\Textures\\btn-ability-Karass-seaoflosttico.dds";
                }
            }
        }
        else {
            return "Assets\\Textures\\hud_bar_deathstun_icon.dds";
        }
    }
    else if (auto5CE0CD17_val == libNEXS_ge_CampaignHeroes_Mengsk) {
        if ((UnitIsAlive(lp_heroUnit) == true)) {
            if ((UnitGetType(lp_heroUnit) == "ValerianZeus")) {
                return "New Icons\\btn-custom-terran-odin.dds";
            }
            else {
                return "New Icons\\btn-ability-terran-repair-color.dds";
            }
        }
        else {
            return "Assets\\Textures\\hud_bar_deathstun_icon.dds";
        }
    }
    else if (auto5CE0CD17_val == libNEXS_ge_CampaignHeroes_Tassadar) {
        if ((UnitIsAlive(lp_heroUnit) == true)) {
            if ((UnitGetType(lp_heroUnit) == "MothershipCore")) {
                return "Assets\\Textures\\btn-unit-collection-taldarim-mothershipcore.dds";
            }
            else {
                return "New Icons\\btn-custom-protoss-mothership.dds";
            }
        }
        else {
            return "Assets\\Textures\\hud_bar_deathstun_icon.dds";
        }
    }
    else if (auto5CE0CD17_val == libNEXS_ge_CampaignHeroes_Selendis) {
        if ((UnitIsAlive(lp_heroUnit) == true)) {
            return "Assets\\UI-Icon-NexusHero-Selendis.dds";
        }
        else {
            return "Assets\\Textures\\hud_bar_deathstun_icon.dds";
        }
    }
    else if (auto5CE0CD17_val == libNEXS_ge_CampaignHeroes_Gestalt) {
        if ((UnitIsAlive(lp_heroUnit) == true)) {
            return "New Icons\\btn-ability-gestalt-Porjectgestalt.dds";
        }
        else {
            return "Assets\\Textures\\hud_bar_deathstun_icon.dds";
        }
    }
    else {
        return "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds";
    }
}

bool libNEXS_gf_CU_ChampionHasShields (int lp_heroType) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_heroType == libNEXS_ge_CampaignHeroes_Zeratul) || (lp_heroType == libNEXS_ge_CampaignHeroes_Tassadar) || (lp_heroType == libNEXS_ge_CampaignHeroes_Karass) || (lp_heroType == libNEXS_ge_CampaignHeroes_Ulrezaj) || (lp_heroType == libNEXS_ge_CampaignHeroes_Selendis) || (lp_heroType == libNEXS_ge_CampaignHeroes_Gestalt))) {
        return true;
    }
    else {
        return false;
    }
}

void libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C001 () {
    // Variable Declarations
    int lv_e5A194E890A8E8BEBEE68EA2E69CBAE695B0E9878F;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libNtve_gf_TriggeringProgressUpgrade() == "UnknownUpgrade177")) {
        libNEXS_gv_e697A0E6A087E9A298E79A84E58F98E9878F001 = true;
        lv_e5A194E890A8E8BEBEE68EA2E69CBAE695B0E9878F = UnitGroupCount(UnitGroup("TassadarProbe", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID3, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID3, "UnknownUpgrade178", (lv_e5A194E890A8E8BEBEE68EA2E69CBAE695B0E9878F / 3));
        TriggerEnable(libNEXS_gt_TassadarE5BEAAE78EAFE58AA8E4BD9C05S, true);
    }

}

void libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C002 () {
    // Automatic Variable Declarations
    // Implementation
    if ((libNtve_gf_TriggeringProgressUpgrade() == "UnknownUpgrade182")) {
        libNEXS_gv_e697A0E6A087E9A298E79A84E58F98E9878F002 = true;
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID3, "UnknownUpgrade186", 1);
        PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID3, c_playerPropSuppliesLimit, c_playerPropOperSubtract, 50);
    }

}

void libNEXS_gf_E6B3BDE68B89E59BBEE7A59EE599A8E588B7E696B0 () {
    // Variable Declarations
    fixed lv_maxDistance;
    int lv_spawnAttempt;
    point lv_riftLocation;

    // Automatic Variable Declarations
    const int autoBF811587_ae = 1000;
    const int autoBF811587_ai = 1;
    int auto3ECB4485_val;

    // Variable Initialization

    // Implementation
    lv_spawnAttempt = 1;
    for ( ; ( (autoBF811587_ai >= 0 && lv_spawnAttempt <= autoBF811587_ae) || (autoBF811587_ai < 0 && lv_spawnAttempt >= autoBF811587_ae) ) ; lv_spawnAttempt += autoBF811587_ai ) {
        if ((GameGetMissionTime() < 480.0)) {
            lv_maxDistance = 50.0;
        }
        else if (true) {
            lv_maxDistance = 100.0;
        }
        lv_riftLocation = RegionRandomPoint(RegionPlayableMap());
        if (((DistanceBetweenPoints(lv_riftLocation, MidPoint(PlayerStartLocation(1), PlayerStartLocation(2))) > lv_maxDistance) || (DistanceBetweenPoints(lv_riftLocation, PlayerStartLocation(1)) <= 30.0) || (DistanceBetweenPoints(lv_riftLocation, PlayerStartLocation(2)) <= 30.0) || (UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(lv_riftLocation, 20.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (PointPathingIsConnected(lv_riftLocation, PlayerStartLocation(1)) == false) || (UnitGroupCount(UnitGroup("WarpPrismPhasing22", c_playerAny, RegionCircle(lv_riftLocation, 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            lv_riftLocation = null;
            continue;
        }
        else {
            break;
        }
    }
    if ((lv_riftLocation == null)) {
    }
    else {
        libNEXS_gv_e7A59EE599A8E99A8FE69CBAE695B0 = RandomInt(1, 3);
        auto3ECB4485_val = libNEXS_gv_e7A59EE599A8E99A8FE69CBAE695B0;
        if (auto3ECB4485_val == 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArtifactPiece1", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID6, lv_riftLocation);
            MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 5.0, Color(0.00, 100.00, 25.10));
        }
        else if (auto3ECB4485_val == 2) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArtifactPiece2", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID6, lv_riftLocation);
            MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 5.0, Color(0.00, 100.00, 25.10));
        }
        else if (auto3ECB4485_val == 3) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArtifactPiece3", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID6, lv_riftLocation);
            MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 5.0, Color(0.00, 100.00, 25.10));
        }
        else {
        }
    }
}

void libNEXS_gf_E998BFE5A194E5B0BCE696AFE6ADBBE4BAA1 () {
    // Automatic Variable Declarations
    unitgroup auto2B280626_g;
    int auto2B280626_u;
    unit auto2B280626_var;

    // Implementation
    if ((UnitGetType(EventUnit()) == "ArtanisVoid")) {
        auto2B280626_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto2B280626_u = UnitGroupCount(auto2B280626_g, c_unitCountAll);
        for (;; auto2B280626_u -= 1) {
            auto2B280626_var = UnitGroupUnitFromEnd(auto2B280626_g, auto2B280626_u);
            if (auto2B280626_var == null) { break; }
            UnitBehaviorAddPlayer(auto2B280626_var, "UnknownBehavior27", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, 1);
            TriggerEnable(libNEXS_gt_E998BFE5A194E5B0BCE696AFE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98, true);
        }
    }

}

void libNEXS_gf_E998BFE5A194E5B0BCE696AFE6ADBBE4BAA12 () {
    // Automatic Variable Declarations
    unitgroup autoFA7006B4_g;
    int autoFA7006B4_u;
    unit autoFA7006B4_var;

    // Implementation
    if ((UnitGetType(EventUnit()) == "FenixCoop")) {
        autoFA7006B4_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoFA7006B4_u = UnitGroupCount(autoFA7006B4_g, c_unitCountAll);
        for (;; autoFA7006B4_u -= 1) {
            autoFA7006B4_var = UnitGroupUnitFromEnd(autoFA7006B4_g, autoFA7006B4_u);
            if (autoFA7006B4_var == null) { break; }
            UnitBehaviorAddPlayer(autoFA7006B4_var, "UnknownBehavior2722", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, 1);
        }
        TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98, true);
    }

}

void libNEXS_gf_E998BFE5A194E5B0BCE696AFE6ADBBE4BAA13 () {
    // Automatic Variable Declarations
    unitgroup autoB06A529F_g;
    int autoB06A529F_u;
    unit autoB06A529F_var;

    // Implementation
    if ((UnitGetType(EventUnit()) == "VorazunChampion")) {
        autoB06A529F_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB06A529F_u = UnitGroupCount(autoB06A529F_g, c_unitCountAll);
        for (;; autoB06A529F_u -= 1) {
            autoB06A529F_var = UnitGroupUnitFromEnd(autoB06A529F_g, autoB06A529F_u);
            if (autoB06A529F_var == null) { break; }
            UnitBehaviorAddPlayer(autoB06A529F_var, "UnknownBehavior27222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, 1);
        }
        TriggerEnable(libNEXS_gt_E6B283E68B89E5B08AE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98, true);
    }

}

void libNEXS_gf_E998BFE5A194E5B0BCE696AFE6ADBBE4BAA14 () {
    // Automatic Variable Declarations
    unitgroup auto8E8D48BF_g;
    int auto8E8D48BF_u;
    unit auto8E8D48BF_var;

    // Implementation
    if ((UnitGetType(EventUnit()) == "KaraxChampion")) {
        auto8E8D48BF_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto8E8D48BF_u = UnitGroupCount(auto8E8D48BF_g, c_unitCountAll);
        for (;; auto8E8D48BF_u -= 1) {
            auto8E8D48BF_var = UnitGroupUnitFromEnd(auto8E8D48BF_g, auto8E8D48BF_u);
            if (auto8E8D48BF_var == null) { break; }
            UnitBehaviorAddPlayer(auto8E8D48BF_var, "UnknownBehavior272222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, 1);
        }
        TriggerEnable(libNEXS_gt_E587AFE68B89E5858BE696AFE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98, true);
    }

}

void libNEXS_gf_E998BFE5A194E5B0BCE696AFE6ADBBE4BAA15 () {
    // Automatic Variable Declarations
    unitgroup auto8E5289B8_g;
    int auto8E5289B8_u;
    unit auto8E5289B8_var;

    // Implementation
    if ((UnitGetType(EventUnit()) == "VorazunChampion2")) {
        auto8E5289B8_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto8E5289B8_u = UnitGroupCount(auto8E5289B8_g, c_unitCountAll);
        for (;; auto8E5289B8_u -= 1) {
            auto8E5289B8_var = UnitGroupUnitFromEnd(auto8E5289B8_g, auto8E5289B8_u);
            if (auto8E5289B8_var == null) { break; }
            UnitBehaviorAddPlayer(auto8E5289B8_var, "UnknownBehavior2722222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, 1);
        }
        TriggerEnable(libNEXS_gt_E6B49BE59388E5A89CE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98, true);
    }

}

void libNEXS_gf_E998BFE5A194E5B0BCE696AFE6ADBBE4BAA16 () {
    // Automatic Variable Declarations
    unitgroup auto921B4E48_g;
    int auto921B4E48_u;
    unit auto921B4E48_var;

    // Implementation
    if ((UnitGetType(EventUnit()) == "AlarakChampion")) {
        auto921B4E48_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto921B4E48_u = UnitGroupCount(auto921B4E48_g, c_unitCountAll);
        for (;; auto921B4E48_u -= 1) {
            auto921B4E48_var = UnitGroupUnitFromEnd(auto921B4E48_g, auto921B4E48_u);
            if (auto921B4E48_var == null) { break; }
            UnitBehaviorAddPlayer(auto921B4E48_var, "UnknownBehavior272", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, 1);
        }
        TriggerEnable(libNEXS_gt_E998BFE68B89E7BAB3E5858BE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98, true);
    }

}

void libNEXS_gf_E998BFE5A194E5B0BCE696AFE5A48DE6B4BB () {
    // Automatic Variable Declarations
    unitgroup auto911E0493_g;
    int auto911E0493_u;
    unit auto911E0493_var;

    // Implementation
    if (((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7) && (EventUnitAbility() == AbilityCommand("SOAPurifierBeam82", 0)) && (EventUnitAbilityStage() == c_unitAbilStageComplete))) {
        auto911E0493_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto911E0493_u = UnitGroupCount(auto911E0493_g, c_unitCountAll);
        for (;; auto911E0493_u -= 1) {
            auto911E0493_var = UnitGroupUnitFromEnd(auto911E0493_g, auto911E0493_u);
            if (auto911E0493_var == null) { break; }
            UnitBehaviorRemove(auto911E0493_var, "UnknownBehavior27", 1);
        }
        TriggerEnable(libNEXS_gt_E998BFE5A194E5B0BCE696AFE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98, false);
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_18FC2854"));
    }

}

void libNEXS_gf_E998BFE5A194E5B0BCE696AFE5A48DE6B4BB2 () {
    // Automatic Variable Declarations
    unitgroup auto19F112D4_g;
    int auto19F112D4_u;
    unit auto19F112D4_var;

    // Implementation
    if (((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7) && (EventUnitAbility() == AbilityCommand("SOAPurifierBeam8222", 0)) && (EventUnitAbilityStage() == c_unitAbilStageComplete))) {
        auto19F112D4_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto19F112D4_u = UnitGroupCount(auto19F112D4_g, c_unitCountAll);
        for (;; auto19F112D4_u -= 1) {
            auto19F112D4_var = UnitGroupUnitFromEnd(auto19F112D4_g, auto19F112D4_u);
            if (auto19F112D4_var == null) { break; }
            UnitBehaviorRemove(auto19F112D4_var, "UnknownBehavior2722", 1);
        }
        TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98, false);
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_B1C568F9"));
    }

}

void libNEXS_gf_E998BFE5A194E5B0BCE696AFE5A48DE6B4BB3 () {
    // Automatic Variable Declarations
    unitgroup autoA9856FFA_g;
    int autoA9856FFA_u;
    unit autoA9856FFA_var;

    // Implementation
    if (((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7) && (EventUnitAbility() == AbilityCommand("SOAPurifierBeam82222", 0)) && (EventUnitAbilityStage() == c_unitAbilStageComplete))) {
        autoA9856FFA_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA9856FFA_u = UnitGroupCount(autoA9856FFA_g, c_unitCountAll);
        for (;; autoA9856FFA_u -= 1) {
            autoA9856FFA_var = UnitGroupUnitFromEnd(autoA9856FFA_g, autoA9856FFA_u);
            if (autoA9856FFA_var == null) { break; }
            UnitBehaviorRemove(autoA9856FFA_var, "UnknownBehavior27222", 1);
        }
        TriggerEnable(libNEXS_gt_E6B283E68B89E5B08AE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98, false);
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_9B101DC5"));
    }

}

void libNEXS_gf_E998BFE5A194E5B0BCE696AFE5A48DE6B4BB4 () {
    // Automatic Variable Declarations
    unitgroup auto494977EE_g;
    int auto494977EE_u;
    unit auto494977EE_var;

    // Implementation
    if (((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7) && (EventUnitAbility() == AbilityCommand("SOAPurifierBeam822222", 0)) && (EventUnitAbilityStage() == c_unitAbilStageComplete))) {
        auto494977EE_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto494977EE_u = UnitGroupCount(auto494977EE_g, c_unitCountAll);
        for (;; auto494977EE_u -= 1) {
            auto494977EE_var = UnitGroupUnitFromEnd(auto494977EE_g, auto494977EE_u);
            if (auto494977EE_var == null) { break; }
            UnitBehaviorRemove(auto494977EE_var, "UnknownBehavior272222", 1);
        }
        TriggerEnable(libNEXS_gt_E587AFE68B89E5858BE696AFE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98, false);
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_1DEE46D5"));
    }

}

void libNEXS_gf_E998BFE5A194E5B0BCE696AFE5A48DE6B4BB5 () {
    // Automatic Variable Declarations
    unitgroup auto05164178_g;
    int auto05164178_u;
    unit auto05164178_var;

    // Implementation
    if (((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7) && (EventUnitAbility() == AbilityCommand("SOAPurifierBeam8222222", 0)) && (EventUnitAbilityStage() == c_unitAbilStageComplete))) {
        auto05164178_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto05164178_u = UnitGroupCount(auto05164178_g, c_unitCountAll);
        for (;; auto05164178_u -= 1) {
            auto05164178_var = UnitGroupUnitFromEnd(auto05164178_g, auto05164178_u);
            if (auto05164178_var == null) { break; }
            UnitBehaviorRemove(auto05164178_var, "UnknownBehavior2722222", 1);
        }
        TriggerEnable(libNEXS_gt_E6B49BE59388E5A89CE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98, false);
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_819CC54F"));
    }

}

void libNEXS_gf_E998BFE5A194E5B0BCE696AFE5A48DE6B4BB6 () {
    // Automatic Variable Declarations
    unitgroup auto05CB9C06_g;
    int auto05CB9C06_u;
    unit auto05CB9C06_var;

    // Implementation
    if (((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7) && (EventUnitAbility() == AbilityCommand("SOAPurifierBeam822", 0)) && (EventUnitAbilityStage() == c_unitAbilStageComplete))) {
        auto05CB9C06_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto05CB9C06_u = UnitGroupCount(auto05CB9C06_g, c_unitCountAll);
        for (;; auto05CB9C06_u -= 1) {
            auto05CB9C06_var = UnitGroupUnitFromEnd(auto05CB9C06_g, auto05CB9C06_u);
            if (auto05CB9C06_var == null) { break; }
            UnitBehaviorRemove(auto05CB9C06_var, "UnknownBehavior272", 1);
        }
        TriggerEnable(libNEXS_gt_E998BFE68B89E7BAB3E5858BE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98, false);
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_FC3D321B"));
    }

}

void libNEXS_gf_E697B6E7A9BAE8A382E99A99E6A380E6B58BE58AA8E4BD9C (int lp_player) {
    // Variable Declarations
    fixed lv_e69C80E5A4A7E586B7E58DB4E697B6E997B4;
    int lv_e697B6E7A9BAE4B98BE997A8E8A18CE4B8BAE8AEA1E695B0;

    // Automatic Variable Declarations
    unitgroup auto7988C4A5_g;
    int auto7988C4A5_u;
    unit auto7988C4A5_var;

    // Variable Initialization
    lv_e69C80E5A4A7E586B7E58DB4E697B6E997B4 = -30.0;

    // Implementation
    auto7988C4A5_g = libNEXS_gv_e697B6E7A9BAE4B98BE997A8[lp_player];
    auto7988C4A5_u = UnitGroupCount(auto7988C4A5_g, c_unitCountAll);
    for (;; auto7988C4A5_u -= 1) {
        auto7988C4A5_var = UnitGroupUnitFromEnd(auto7988C4A5_g, auto7988C4A5_u);
        if (auto7988C4A5_var == null) { break; }
        if ((UnitIsAlive(auto7988C4A5_var) == true)) {
            if ((UnitHasBehavior2(auto7988C4A5_var, "HHBomberDockCooldown") == true)) {
                lv_e697B6E7A9BAE4B98BE997A8E8A18CE4B8BAE8AEA1E695B0 += 1;
                if ((UnitBehaviorDuration(auto7988C4A5_var, "HHBomberDockCooldown") < lv_e69C80E5A4A7E586B7E58DB4E697B6E997B4)) {
                    lv_e69C80E5A4A7E586B7E58DB4E697B6E997B4 = UnitBehaviorDuration(auto7988C4A5_var, "HHBomberDockCooldown");
                }

            }

            if (((UnitHasBehavior2(auto7988C4A5_var, "HHBomberDockCooldown") == false))) {
                UnitGroupAdd(libNEXS_gv_e5B7B2E5B0B1E7BBAAE79A84E697B6E7A9BAE4B98BE997A8[lp_player], auto7988C4A5_var);
            }
            else {
                UnitGroupRemove(libNEXS_gv_e5B7B2E5B0B1E7BBAAE79A84E697B6E7A9BAE4B98BE997A8[lp_player], auto7988C4A5_var);
            }
        }
        else {
            UnitGroupRemove(libNEXS_gv_e697B6E7A9BAE4B98BE997A8[lp_player], auto7988C4A5_var);
            UnitGroupRemove(libNEXS_gv_e5B7B2E5B0B1E7BBAAE79A84E697B6E7A9BAE4B98BE997A8[lp_player], auto7988C4A5_var);
        }
    }
    libNEXS_gv_e5B7B2E5B0B1E7BBAAE79A84E697B6E7A9BAE4B98BE997A8E8AEA1E695B0[lp_player] = UnitGroupCount(libNEXS_gv_e5B7B2E5B0B1E7BBAAE79A84E697B6E7A9BAE4B98BE997A8[lp_player], c_unitCountAlive);
    if (((libNEXS_gv_e5B7B2E5B0B1E7BBAAE79A84E697B6E7A9BAE4B98BE997A8E8AEA1E695B0[lp_player] == 0) && (lv_e69C80E5A4A7E586B7E58DB4E697B6E997B4 > 0.0) && (lv_e697B6E7A9BAE4B98BE997A8E8A18CE4B8BAE8AEA1E695B0 > 0))) {
    }

}

void libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C009 () {
    // Automatic Variable Declarations
    unitgroup autoFE1A402F_g;
    int autoFE1A402F_u;
    unit autoFE1A402F_var;
    unitgroup auto4461B81F_g;
    int auto4461B81F_u;
    unit auto4461B81F_var;

    // Implementation
    if (((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7) && (EventUnitAbility() == AbilityCommand("VoodooShield2244", 0)) && (EventUnitAbilityStage() == c_abilEffectStagePrep))) {
        libNEXS_gv_e697B6E7A9BAE4B98BE997A8E586B7E58DB4X = (libNEXS_gv_e697B6E7A9BAE4B98BE997A8E586B7E58DB4X + 5);
        autoFE1A402F_g = UnitGroup("ArtanisGateway", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoFE1A402F_u = UnitGroupCount(autoFE1A402F_g, c_unitCountAll);
        for (;; autoFE1A402F_u -= 1) {
            autoFE1A402F_var = UnitGroupUnitFromEnd(autoFE1A402F_g, autoFE1A402F_u);
            if (autoFE1A402F_var == null) { break; }
            UnitBehaviorAddPlayer(autoFE1A402F_var, "WarpPermission", 1, 1);
        }
        auto4461B81F_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto4461B81F_u = UnitGroupCount(auto4461B81F_g, c_unitCountAll);
        for (;; auto4461B81F_u -= 1) {
            auto4461B81F_var = UnitGroupUnitFromEnd(auto4461B81F_g, auto4461B81F_u);
            if (auto4461B81F_var == null) { break; }
            UnitBehaviorAddPlayer(auto4461B81F_var, "WarpPermission", 1, 1);
        }
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnitPOOIPO", 1);
    }

}

void libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C012 () {
    // Automatic Variable Declarations
    unitgroup auto447BE8DA_g;
    int auto447BE8DA_u;
    unit auto447BE8DA_var;
    unitgroup autoC7D98306_g;
    int autoC7D98306_u;
    unit autoC7D98306_var;

    // Implementation
    if (((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7) && (EventUnitAbility() == AbilityCommand("VoodooShield22423", 0)) && (EventUnitAbilityStage() == c_abilEffectStagePrep))) {
        libNEXS_gv_e697B6E7A9BAE4B98BE997A8E586B7E58DB4X = (libNEXS_gv_e697B6E7A9BAE4B98BE997A8E586B7E58DB4X + 5);
        auto447BE8DA_g = UnitGroup("ArtanisGateway", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto447BE8DA_u = UnitGroupCount(auto447BE8DA_g, c_unitCountAll);
        for (;; auto447BE8DA_u -= 1) {
            auto447BE8DA_var = UnitGroupUnitFromEnd(auto447BE8DA_g, auto447BE8DA_u);
            if (auto447BE8DA_var == null) { break; }
            UnitBehaviorAddPlayer(auto447BE8DA_var, "WarpPermission2", 1, 1);
        }
        autoC7D98306_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoC7D98306_u = UnitGroupCount(autoC7D98306_g, c_unitCountAll);
        for (;; autoC7D98306_u -= 1) {
            autoC7D98306_var = UnitGroupUnitFromEnd(autoC7D98306_g, autoC7D98306_u);
            if (autoC7D98306_var == null) { break; }
            UnitBehaviorAddPlayer(autoC7D98306_var, "WarpPermission2", 1, 1);
        }
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnitPOOIPO3", 1);
    }

}

void libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C011 () {
    // Automatic Variable Declarations
    unitgroup autoEA3CE4B4_g;
    int autoEA3CE4B4_u;
    unit autoEA3CE4B4_var;
    unitgroup auto160356E7_g;
    int auto160356E7_u;
    unit auto160356E7_var;

    // Implementation
    if (((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7) && (EventUnitAbility() == AbilityCommand("VoodooShield2243", 0)) && (EventUnitAbilityStage() == c_abilEffectStagePrep))) {
        libNEXS_gv_e697B6E7A9BAE4B98BE997A8E586B7E58DB4X = (libNEXS_gv_e697B6E7A9BAE4B98BE997A8E586B7E58DB4X + 5);
        autoEA3CE4B4_g = UnitGroup("ArtanisGateway", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoEA3CE4B4_u = UnitGroupCount(autoEA3CE4B4_g, c_unitCountAll);
        for (;; autoEA3CE4B4_u -= 1) {
            autoEA3CE4B4_var = UnitGroupUnitFromEnd(autoEA3CE4B4_g, autoEA3CE4B4_u);
            if (autoEA3CE4B4_var == null) { break; }
            UnitBehaviorAddPlayer(autoEA3CE4B4_var, "WarpPermission22", 1, 1);
        }
        auto160356E7_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto160356E7_u = UnitGroupCount(auto160356E7_g, c_unitCountAll);
        for (;; auto160356E7_u -= 1) {
            auto160356E7_var = UnitGroupUnitFromEnd(auto160356E7_g, auto160356E7_u);
            if (auto160356E7_var == null) { break; }
            UnitBehaviorAddPlayer(auto160356E7_var, "WarpPermission22", 1, 1);
        }
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnitPOOIPO33", 1);
    }

}

void libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C013 () {
    // Automatic Variable Declarations
    unitgroup auto0EFC7B16_g;
    int auto0EFC7B16_u;
    unit auto0EFC7B16_var;
    unitgroup auto4233A556_g;
    int auto4233A556_u;
    unit auto4233A556_var;

    // Implementation
    if (((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7) && (EventUnitAbility() == AbilityCommand("VoodooShield2243223", 0)) && (EventUnitAbilityStage() == c_abilEffectStagePrep))) {
        libNEXS_gv_e697B6E7A9BAE4B98BE997A8E586B7E58DB4X = (libNEXS_gv_e697B6E7A9BAE4B98BE997A8E586B7E58DB4X + 5);
        auto0EFC7B16_g = UnitGroup("ArtanisGateway", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0EFC7B16_u = UnitGroupCount(auto0EFC7B16_g, c_unitCountAll);
        for (;; auto0EFC7B16_u -= 1) {
            auto0EFC7B16_var = UnitGroupUnitFromEnd(auto0EFC7B16_g, auto0EFC7B16_u);
            if (auto0EFC7B16_var == null) { break; }
            UnitBehaviorAddPlayer(auto0EFC7B16_var, "WarpPermission222", 1, 1);
        }
        auto4233A556_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto4233A556_u = UnitGroupCount(auto4233A556_g, c_unitCountAll);
        for (;; auto4233A556_u -= 1) {
            auto4233A556_var = UnitGroupUnitFromEnd(auto4233A556_g, auto4233A556_u);
            if (auto4233A556_var == null) { break; }
            UnitBehaviorAddPlayer(auto4233A556_var, "WarpPermission222", 1, 1);
        }
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnitPOOIPO344", 1);
    }

}

void libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C014 () {
    // Automatic Variable Declarations
    unitgroup auto3245F888_g;
    int auto3245F888_u;
    unit auto3245F888_var;
    unitgroup auto49F99FAB_g;
    int auto49F99FAB_u;
    unit auto49F99FAB_var;

    // Implementation
    if (((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7) && (EventUnitAbility() == AbilityCommand("VoodooShield22422", 0)) && (EventUnitAbilityStage() == c_abilEffectStagePrep))) {
        libNEXS_gv_e697B6E7A9BAE4B98BE997A8E586B7E58DB4X = (libNEXS_gv_e697B6E7A9BAE4B98BE997A8E586B7E58DB4X + 5);
        auto3245F888_g = UnitGroup("ArtanisGateway", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3245F888_u = UnitGroupCount(auto3245F888_g, c_unitCountAll);
        for (;; auto3245F888_u -= 1) {
            auto3245F888_var = UnitGroupUnitFromEnd(auto3245F888_g, auto3245F888_u);
            if (auto3245F888_var == null) { break; }
            UnitBehaviorAddPlayer(auto3245F888_var, "WarpPermission2222", 1, 1);
        }
        auto49F99FAB_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto49F99FAB_u = UnitGroupCount(auto49F99FAB_g, c_unitCountAll);
        for (;; auto49F99FAB_u -= 1) {
            auto49F99FAB_var = UnitGroupUnitFromEnd(auto49F99FAB_g, auto49F99FAB_u);
            if (auto49F99FAB_var == null) { break; }
            UnitBehaviorAddPlayer(auto49F99FAB_var, "WarpPermission2222", 1, 1);
        }
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnitPOOIPO343", 1);
    }

}

void libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C015 () {
    // Automatic Variable Declarations
    unitgroup auto9B6CA2A0_g;
    int auto9B6CA2A0_u;
    unit auto9B6CA2A0_var;
    unitgroup auto0575DA6B_g;
    int auto0575DA6B_u;
    unit auto0575DA6B_var;

    // Implementation
    if (((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7) && (EventUnitAbility() == AbilityCommand("VoodooShield22432222", 0)) && (EventUnitAbilityStage() == c_abilEffectStagePrep))) {
        libNEXS_gv_e697B6E7A9BAE4B98BE997A8E586B7E58DB4X = (libNEXS_gv_e697B6E7A9BAE4B98BE997A8E586B7E58DB4X + 5);
        auto9B6CA2A0_g = UnitGroup("ArtanisGateway", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9B6CA2A0_u = UnitGroupCount(auto9B6CA2A0_g, c_unitCountAll);
        for (;; auto9B6CA2A0_u -= 1) {
            auto9B6CA2A0_var = UnitGroupUnitFromEnd(auto9B6CA2A0_g, auto9B6CA2A0_u);
            if (auto9B6CA2A0_var == null) { break; }
            UnitBehaviorAddPlayer(auto9B6CA2A0_var, "WarpPermission22222", 1, 1);
        }
        auto0575DA6B_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0575DA6B_u = UnitGroupCount(auto0575DA6B_g, c_unitCountAll);
        for (;; auto0575DA6B_u -= 1) {
            auto0575DA6B_var = UnitGroupUnitFromEnd(auto0575DA6B_g, auto0575DA6B_u);
            if (auto0575DA6B_var == null) { break; }
            UnitBehaviorAddPlayer(auto0575DA6B_var, "WarpPermission22222", 1, 1);
        }
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnitPOOIPO34", 1);
    }

}

void libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C010 () {
    // Automatic Variable Declarations
    unitgroup autoDD591A0F_g;
    int autoDD591A0F_u;
    unit autoDD591A0F_var;
    unitgroup autoDF2E330B_g;
    int autoDF2E330B_u;
    unit autoDF2E330B_var;

    // Implementation
    if (((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7) && (EventUnitAbility() == AbilityCommand("VoodooShield224", 0)) && (EventUnitAbilityStage() == c_abilEffectStagePrep))) {
        libNEXS_gv_e697B6E7A9BAE4B98BE997A8E586B7E58DB4X = (libNEXS_gv_e697B6E7A9BAE4B98BE997A8E586B7E58DB4X - 5);
        autoDD591A0F_g = UnitGroup("ArtanisGateway", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoDD591A0F_u = UnitGroupCount(autoDD591A0F_g, c_unitCountAll);
        for (;; autoDD591A0F_u -= 1) {
            autoDD591A0F_var = UnitGroupUnitFromEnd(autoDD591A0F_g, autoDD591A0F_u);
            if (autoDD591A0F_var == null) { break; }
            UnitBehaviorRemove(autoDD591A0F_var, "WarpPermission", 1);
        }
        autoDF2E330B_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoDF2E330B_u = UnitGroupCount(autoDF2E330B_g, c_unitCountAll);
        for (;; autoDF2E330B_u -= 1) {
            autoDF2E330B_var = UnitGroupUnitFromEnd(autoDF2E330B_g, autoDF2E330B_u);
            if (autoDF2E330B_var == null) { break; }
            UnitBehaviorRemove(autoDF2E330B_var, "WarpPermission", 1);
        }
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnitPOOIPO2", 1);
    }

}

void libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C016 () {
    // Automatic Variable Declarations
    unitgroup autoF4E13571_g;
    int autoF4E13571_u;
    unit autoF4E13571_var;
    unitgroup auto4BCF11F3_g;
    int auto4BCF11F3_u;
    unit auto4BCF11F3_var;

    // Implementation
    if (((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7) && (EventUnitAbility() == AbilityCommand("VoodooShield2242", 0)) && (EventUnitAbilityStage() == c_abilEffectStagePrep))) {
        libNEXS_gv_e697B6E7A9BAE4B98BE997A8E586B7E58DB4X = (libNEXS_gv_e697B6E7A9BAE4B98BE997A8E586B7E58DB4X - 5);
        autoF4E13571_g = UnitGroup("ArtanisGateway", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF4E13571_u = UnitGroupCount(autoF4E13571_g, c_unitCountAll);
        for (;; autoF4E13571_u -= 1) {
            autoF4E13571_var = UnitGroupUnitFromEnd(autoF4E13571_g, autoF4E13571_u);
            if (autoF4E13571_var == null) { break; }
            UnitBehaviorRemove(autoF4E13571_var, "WarpPermission2", 1);
        }
        auto4BCF11F3_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto4BCF11F3_u = UnitGroupCount(auto4BCF11F3_g, c_unitCountAll);
        for (;; auto4BCF11F3_u -= 1) {
            auto4BCF11F3_var = UnitGroupUnitFromEnd(auto4BCF11F3_g, auto4BCF11F3_u);
            if (auto4BCF11F3_var == null) { break; }
            UnitBehaviorRemove(auto4BCF11F3_var, "WarpPermission2", 1);
        }
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnitPOOIPO32", 1);
    }

}

void libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C017 () {
    // Automatic Variable Declarations
    unitgroup auto1EAE629D_g;
    int auto1EAE629D_u;
    unit auto1EAE629D_var;
    unitgroup auto2BD41732_g;
    int auto2BD41732_u;
    unit auto2BD41732_var;

    // Implementation
    if (((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7) && (EventUnitAbility() == AbilityCommand("VoodooShield22433", 0)) && (EventUnitAbilityStage() == c_abilEffectStagePrep))) {
        libNEXS_gv_e697B6E7A9BAE4B98BE997A8E586B7E58DB4X = (libNEXS_gv_e697B6E7A9BAE4B98BE997A8E586B7E58DB4X - 5);
        auto1EAE629D_g = UnitGroup("ArtanisGateway", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1EAE629D_u = UnitGroupCount(auto1EAE629D_g, c_unitCountAll);
        for (;; auto1EAE629D_u -= 1) {
            auto1EAE629D_var = UnitGroupUnitFromEnd(auto1EAE629D_g, auto1EAE629D_u);
            if (auto1EAE629D_var == null) { break; }
            UnitBehaviorRemove(auto1EAE629D_var, "WarpPermission22", 1);
        }
        auto2BD41732_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto2BD41732_u = UnitGroupCount(auto2BD41732_g, c_unitCountAll);
        for (;; auto2BD41732_u -= 1) {
            auto2BD41732_var = UnitGroupUnitFromEnd(auto2BD41732_g, auto2BD41732_u);
            if (auto2BD41732_var == null) { break; }
            UnitBehaviorRemove(auto2BD41732_var, "WarpPermission22", 1);
        }
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnitPOOIPO322", 1);
    }

}

void libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C018 () {
    // Automatic Variable Declarations
    unitgroup auto22FEF8A3_g;
    int auto22FEF8A3_u;
    unit auto22FEF8A3_var;
    unitgroup autoC068103E_g;
    int autoC068103E_u;
    unit autoC068103E_var;

    // Implementation
    if (((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7) && (EventUnitAbility() == AbilityCommand("VoodooShield224322", 0)) && (EventUnitAbilityStage() == c_abilEffectStagePrep))) {
        libNEXS_gv_e697B6E7A9BAE4B98BE997A8E586B7E58DB4X = (libNEXS_gv_e697B6E7A9BAE4B98BE997A8E586B7E58DB4X - 5);
        auto22FEF8A3_g = UnitGroup("ArtanisGateway", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto22FEF8A3_u = UnitGroupCount(auto22FEF8A3_g, c_unitCountAll);
        for (;; auto22FEF8A3_u -= 1) {
            auto22FEF8A3_var = UnitGroupUnitFromEnd(auto22FEF8A3_g, auto22FEF8A3_u);
            if (auto22FEF8A3_var == null) { break; }
            UnitBehaviorRemove(auto22FEF8A3_var, "WarpPermission222", 1);
        }
        autoC068103E_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoC068103E_u = UnitGroupCount(autoC068103E_g, c_unitCountAll);
        for (;; autoC068103E_u -= 1) {
            autoC068103E_var = UnitGroupUnitFromEnd(autoC068103E_g, autoC068103E_u);
            if (autoC068103E_var == null) { break; }
            UnitBehaviorRemove(autoC068103E_var, "WarpPermission222", 1);
        }
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnitPOOIPO3442", 1);
    }

}

void libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C019 () {
    // Automatic Variable Declarations
    unitgroup auto65C39E49_g;
    int auto65C39E49_u;
    unit auto65C39E49_var;
    unitgroup autoB6ECA2B1_g;
    int autoB6ECA2B1_u;
    unit autoB6ECA2B1_var;

    // Implementation
    if (((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7) && (EventUnitAbility() == AbilityCommand("VoodooShield224222", 0)) && (EventUnitAbilityStage() == c_abilEffectStagePrep))) {
        libNEXS_gv_e697B6E7A9BAE4B98BE997A8E586B7E58DB4X = (libNEXS_gv_e697B6E7A9BAE4B98BE997A8E586B7E58DB4X - 5);
        auto65C39E49_g = UnitGroup("ArtanisGateway", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto65C39E49_u = UnitGroupCount(auto65C39E49_g, c_unitCountAll);
        for (;; auto65C39E49_u -= 1) {
            auto65C39E49_var = UnitGroupUnitFromEnd(auto65C39E49_g, auto65C39E49_u);
            if (auto65C39E49_var == null) { break; }
            UnitBehaviorRemove(auto65C39E49_var, "WarpPermission2222", 1);
        }
        autoB6ECA2B1_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB6ECA2B1_u = UnitGroupCount(autoB6ECA2B1_g, c_unitCountAll);
        for (;; autoB6ECA2B1_u -= 1) {
            autoB6ECA2B1_var = UnitGroupUnitFromEnd(autoB6ECA2B1_g, autoB6ECA2B1_u);
            if (autoB6ECA2B1_var == null) { break; }
            UnitBehaviorRemove(autoB6ECA2B1_var, "WarpPermission2222", 1);
        }
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnitPOOIPO3422", 1);
    }

}

void libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C020 () {
    // Automatic Variable Declarations
    unitgroup auto84C0032A_g;
    int auto84C0032A_u;
    unit auto84C0032A_var;
    unitgroup autoD7A74147_g;
    int autoD7A74147_u;
    unit autoD7A74147_var;

    // Implementation
    if (((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7) && (EventUnitAbility() == AbilityCommand("VoodooShield2243222", 0)) && (EventUnitAbilityStage() == c_abilEffectStagePrep))) {
        libNEXS_gv_e697B6E7A9BAE4B98BE997A8E586B7E58DB4X = (libNEXS_gv_e697B6E7A9BAE4B98BE997A8E586B7E58DB4X - 5);
        auto84C0032A_g = UnitGroup("ArtanisGateway", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto84C0032A_u = UnitGroupCount(auto84C0032A_g, c_unitCountAll);
        for (;; auto84C0032A_u -= 1) {
            auto84C0032A_var = UnitGroupUnitFromEnd(auto84C0032A_g, auto84C0032A_u);
            if (auto84C0032A_var == null) { break; }
            UnitBehaviorRemove(auto84C0032A_var, "WarpPermission22222", 1);
        }
        autoD7A74147_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoD7A74147_u = UnitGroupCount(autoD7A74147_g, c_unitCountAll);
        for (;; autoD7A74147_u -= 1) {
            autoD7A74147_var = UnitGroupUnitFromEnd(autoD7A74147_g, autoD7A74147_u);
            if (autoD7A74147_var == null) { break; }
            UnitBehaviorRemove(autoD7A74147_var, "WarpPermission22222", 1);
        }
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnitPOOIPO342", 1);
    }

}

void libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C003 () {
    // Automatic Variable Declarations
    // Implementation
    if (((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade234", c_techCountCompleteOnly) == 1) && (UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7) && (EventUnitAbilityStage() == c_abilEffectStagePrep))) {
        if ((EventUnitAbility() == AbilityCommand("ArtanisLightningDash", 0))) {
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "Abil/SwordofAdun", -1.0);
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "Abil/SOAOrbitalStrikeKaraxExecute", -1.0);
        }

        if ((EventUnitAbility() == AbilityCommand("AlarakACDeadlyCharge", 0))) {
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "Abil/SwordofAdun2", -1.0);
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "Abil/SOAOrbitalStrikeKaraxExecute", -1.0);
        }

        if ((EventUnitAbility() == AbilityCommand("FenixThunderousChargeCoop", 0))) {
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "Abil/SwordofAdun3", -1.0);
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "Abil/SOAOrbitalStrikeKaraxExecute", -1.0);
        }

        if ((EventUnitAbility() == AbilityCommand("KarassPsiStorm2", 0))) {
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "Abil/SwordofAdun5", -1.0);
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "Abil/SOAOrbitalStrikeKaraxExecute", -1.0);
        }

        if ((EventUnitAbility() == AbilityCommand("PhaseCannon", 0))) {
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "Abil/SwordofAdun6", -1.0);
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "Abil/SOAOrbitalStrikeKaraxExecute", -1.0);
        }

        if ((EventUnitAbility() == AbilityCommand("VorazunShadowDash", 0))) {
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "Abil/SwordofAdun4", -1.0);
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "Abil/SOAOrbitalStrikeKaraxExecute", -1.0);
        }

    }

}

void libNEXS_gf_E5A48DE4BB87E88085E8A18CE4B8BAE7A7BBE999A4 () {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetType(EventUnit()) == "RohanaCaster") && (EventUnitAbilityStage() == c_unitAbilStageComplete) && (EventUnitAbility() == AbilityCommand("SOAFenixCalldown2", 0))) {
        PlayerAddChargeUsed(1, "Abil/SwordofAdun", 1.0);
        PlayerAddChargeUsed(1, "Abil/SwordofAdun6", 1.0);
        PlayerAddChargeUsed(1, "Abil/SwordofAdun5", 1.0);
        PlayerAddChargeUsed(1, "Abil/SwordofAdun4", 1.0);
        PlayerAddChargeUsed(1, "Abil/SwordofAdun2", 1.0);
        PlayerAddChargeUsed(1, "Abil/SwordofAdun3", 1.0);
    }

}

void libNEXS_gf_SelendisGlobalPowerAbilitySet (int lp_number, int lp_kind) {
    // Variable Declarations
    string lv_filters;
    fixed lv_radius;

    // Automatic Variable Declarations
    int auto6A1375E1_val;

    // Variable Initialization

    // Implementation
    auto6A1375E1_val = lp_kind;
    if (auto6A1375E1_val == 1) {
        lv_radius = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "SelendisGlobalPowerAdeptTemporalFieldSearch", "AreaArray[" + IntToString(0) + "].Radius", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14));
    }
    else if (auto6A1375E1_val == 2) {
        lv_radius = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "SelendisGlobalPowerHighTemplarShieldSearch", "AreaArray[" + IntToString(0) + "].Radius", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14));
    }
    else if (auto6A1375E1_val == 3) {
        lv_radius = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "SelendisGlobalPowerArchonOrbitalStrikeImpactSearchModel", "AreaArray[" + IntToString(0) + "].Radius", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14));
    }
    else if (auto6A1375E1_val == 4) {
        lv_radius = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "SelendisGlobalPowerColossusThermalLanceSearch", "AreaArray[" + IntToString(0) + "].Radius", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14));
    }
    else if (auto6A1375E1_val == 5) {
        lv_radius = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "SelendisGlobalPowerPhoenixSuicideSearch", "AreaArray[" + IntToString(0) + "].Radius", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14));
    }
    else if (auto6A1375E1_val == 6) {
        lv_radius = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "SelendisGlobalPowerOracleRevelationSearch", "AreaArray[" + IntToString(0) + "].Radius", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14));
    }
    else if (auto6A1375E1_val == 7) {
        lv_radius = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "SelendisGlobalPowerVoidRayLaserBeamSearch", "AreaArray[" + IntToString(0) + "].Radius", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14));
    }
    else if (auto6A1375E1_val == 8) {
        lv_radius = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "SelendisGlobalPowerCarrierAbilitySearch", "AreaArray[" + IntToString(0) + "].Radius", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14));
    }
    else {
    }
    CatalogFieldValueSet(c_gameCatalogButton, ("SelendisGlobalAbility" + IntToString((lp_number + 1))), "Icon", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, CatalogFieldValueGet(c_gameCatalogButton, ("SelendisUnitKindAbility" + IntToString(lp_kind)), "Icon", c_playerAny));
    CatalogFieldValueSet(c_gameCatalogButton, ("SelendisGlobalAbility" + IntToString((lp_number + 1))), "Name", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, CatalogFieldValueGet(c_gameCatalogButton, ("SelendisUnitKindAbility" + IntToString(lp_kind)), "Name", c_playerAny));
    CatalogFieldValueSet(c_gameCatalogButton, ("SelendisGlobalAbility" + IntToString((lp_number + 1))), "Tooltip", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, CatalogFieldValueGet(c_gameCatalogButton, ("SelendisUnitKindAbility" + IntToString(lp_kind)), "Tooltip", c_playerAny));
    CatalogFieldValueSet(c_gameCatalogEffect, ("SelendisGlobalAbilitySearch" + IntToString((lp_number + 1))), "AreaArray[" + IntToString(0) + "].Radius", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, FixedToString(lv_radius, c_fixedPrecisionAny));
}

void libNEXS_gf_SelendisGlobalPowerCall () {
    // Automatic Variable Declarations
    unitgroup autoA7B46564_g;
    int autoA7B46564_u;
    unit autoA7B46564_var;

    // Implementation
    autoA7B46564_g = UnitGroup("SoACasterTychus", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA7B46564_u = UnitGroupCount(autoA7B46564_g, c_unitCountAll);
    for (;; autoA7B46564_u -= 1) {
        autoA7B46564_var = UnitGroupUnitFromEnd(autoA7B46564_g, autoA7B46564_u);
        if (autoA7B46564_var == null) { break; }
        libNEXS_gv_selendisGlobalPowerCaster = autoA7B46564_var;
    }
    UnitGroupAdd(libNEXS_gv_selendisGlobalPowerCasterGroup, libNEXS_gv_selendisGlobalPowerCaster);
    libNEXS_gf_SelendisGlobalPowerCreate();
    libNEXS_gf_PU_GPVisibilitySet3(true);
}

void libNEXS_gf_SelendisGlobalPowerCreate () {
    // Variable Declarations
    playergroup lv_iplayer;
    fixed lv_value;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_iplayer = PlayerGroupEmpty();
    lv_value = 100.0;

    // Implementation
    lv_iplayer = PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14);
    DialogCreate(1100, 700, c_anchorTop, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), lv_iplayer, true);
    libNEXS_gv_selendisGlobalPowerFrame[1] = DialogLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeCutscene);
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 1100, 1100);
    DialogControlSetPosition(DialogControlLastCreated(), lv_iplayer, c_anchorTop, 0, 0);
    DialogControlSetVisible(DialogControlLastCreated(), lv_iplayer, true);
    libNtve_gf_SetDialogItemCutscene(DialogControlLastCreated(), "Cutscenes\\Selendis_Panel.SC2Cutscene", lv_iplayer);
    libNEXS_gv_selendisGlobalPowerPanelModel[0] = DialogControlLastCreated();
    CutscenePlay(CutsceneGetTriggerControl(libNEXS_gv_selendisGlobalPowerPanelModel[0]));
    libNEXS_gv_selendisGlobalPowerFrame[0] = DialogLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    DialogControlSetPosition(DialogControlLastCreated(), lv_iplayer, c_anchorTop, -404, 45);
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 50, 50);
    DialogControlSetVisible(DialogControlLastCreated(), lv_iplayer, false);
    libNEXS_gv_selendisGlobalPowerAdapterPanel[0] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    DialogControlSetPosition(DialogControlLastCreated(), lv_iplayer, c_anchorTop, -296, 21);
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 50, 50);
    DialogControlSetVisible(DialogControlLastCreated(), lv_iplayer, false);
    libNEXS_gv_selendisGlobalPowerAdapterPanel[1] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    DialogControlSetPosition(DialogControlLastCreated(), lv_iplayer, c_anchorTop, -226, 21);
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 50, 50);
    DialogControlSetVisible(DialogControlLastCreated(), lv_iplayer, false);
    libNEXS_gv_selendisGlobalPowerAdapterPanel[2] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 50, 50);
    DialogControlSetPosition(DialogControlLastCreated(), lv_iplayer, c_anchorTop, -156, 21);
    DialogControlSetVisible(DialogControlLastCreated(), lv_iplayer, false);
    libNEXS_gv_selendisGlobalPowerAdapterPanel[3] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 50, 50);
    DialogControlSetPosition(DialogControlLastCreated(), lv_iplayer, c_anchorTop, -86, 21);
    DialogControlSetVisible(DialogControlLastCreated(), lv_iplayer, false);
    libNEXS_gv_selendisGlobalPowerAdapterPanel[4] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 50, 50);
    DialogControlSetPosition(DialogControlLastCreated(), lv_iplayer, c_anchorTop, 86, 21);
    DialogControlSetVisible(DialogControlLastCreated(), lv_iplayer, false);
    libNEXS_gv_selendisGlobalPowerAdapterPanel[5] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 50, 50);
    DialogControlSetPosition(DialogControlLastCreated(), lv_iplayer, c_anchorTop, 156, 21);
    DialogControlSetVisible(DialogControlLastCreated(), lv_iplayer, false);
    libNEXS_gv_selendisGlobalPowerAdapterPanel[6] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 50, 50);
    DialogControlSetPosition(DialogControlLastCreated(), lv_iplayer, c_anchorTop, 226, 21);
    DialogControlSetVisible(DialogControlLastCreated(), lv_iplayer, false);
    libNEXS_gv_selendisGlobalPowerAdapterPanel[7] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 50, 50);
    DialogControlSetPosition(DialogControlLastCreated(), lv_iplayer, c_anchorTop, 296, 21);
    DialogControlSetVisible(DialogControlLastCreated(), lv_iplayer, false);
    libNEXS_gv_selendisGlobalPowerAdapterPanel[8] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 50, 50);
    DialogControlSetPosition(DialogControlLastCreated(), lv_iplayer, c_anchorTop, 404, 45);
    DialogControlSetVisible(DialogControlLastCreated(), lv_iplayer, false);
    libNEXS_gv_selendisGlobalPowerAdapterPanel[9] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 1100, 700);
    DialogControlSetPosition(DialogControlLastCreated(), lv_iplayer, c_anchorCenter, 0, 0);
    DialogControlSetVisible(DialogControlLastCreated(), lv_iplayer, true);
    libNEXS_gv_selendisGlobalPowerMainPanel = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(libNEXS_gv_selendisGlobalPowerMainPanel, c_triggerControlTypeCommandPanel, "Selendis/StarPanelTemplate");
    DialogControlSetPosition(DialogControlLastCreated(), lv_iplayer, c_anchorCenter, 0, 0);
    libNEXS_gv_selendisGlobalPowerCommandPanel = DialogControlLastCreated();
    DialogControlHookup(libNEXS_gv_selendisGlobalPowerCommandPanel, c_triggerControlTypeButton, "CommandButton00");
    libNEXS_gv_selendisGlobalPowerButton[0] = DialogControlLastCreated();
    DialogControlSetPositionRelative(libNEXS_gv_selendisGlobalPowerButton[0], lv_iplayer, c_anchorCenter, libNEXS_gv_selendisGlobalPowerAdapterPanel[0], c_anchorCenter, 0, 0);
    DialogControlHookup(libNEXS_gv_selendisGlobalPowerCommandPanel, c_triggerControlTypeButton, "CommandButton01");
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 65, 65);
    libNEXS_gv_selendisGlobalPowerButton[1] = DialogControlLastCreated();
    DialogControlSetPositionRelative(libNEXS_gv_selendisGlobalPowerButton[1], lv_iplayer, c_anchorCenter, libNEXS_gv_selendisGlobalPowerAdapterPanel[1], c_anchorCenter, 0, 0);
    DialogControlHookup(libNEXS_gv_selendisGlobalPowerCommandPanel, c_triggerControlTypeButton, "CommandButton02");
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 65, 65);
    libNEXS_gv_selendisGlobalPowerButton[2] = DialogControlLastCreated();
    DialogControlSetPositionRelative(libNEXS_gv_selendisGlobalPowerButton[2], lv_iplayer, c_anchorCenter, libNEXS_gv_selendisGlobalPowerAdapterPanel[2], c_anchorCenter, 0, 0);
    DialogControlHookup(libNEXS_gv_selendisGlobalPowerCommandPanel, c_triggerControlTypeButton, "CommandButton03");
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 65, 65);
    libNEXS_gv_selendisGlobalPowerButton[3] = DialogControlLastCreated();
    DialogControlSetPositionRelative(libNEXS_gv_selendisGlobalPowerButton[3], lv_iplayer, c_anchorCenter, libNEXS_gv_selendisGlobalPowerAdapterPanel[3], c_anchorCenter, 0, 0);
    DialogControlHookup(libNEXS_gv_selendisGlobalPowerCommandPanel, c_triggerControlTypeButton, "CommandButton04");
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 65, 65);
    libNEXS_gv_selendisGlobalPowerButton[4] = DialogControlLastCreated();
    DialogControlSetPositionRelative(libNEXS_gv_selendisGlobalPowerButton[4], lv_iplayer, c_anchorCenter, libNEXS_gv_selendisGlobalPowerAdapterPanel[4], c_anchorCenter, 0, 0);
    DialogControlHookup(libNEXS_gv_selendisGlobalPowerCommandPanel, c_triggerControlTypeButton, "CommandButton05");
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 65, 65);
    libNEXS_gv_selendisGlobalPowerButton[5] = DialogControlLastCreated();
    DialogControlSetPositionRelative(libNEXS_gv_selendisGlobalPowerButton[5], lv_iplayer, c_anchorCenter, libNEXS_gv_selendisGlobalPowerAdapterPanel[5], c_anchorCenter, 0, 0);
    DialogControlHookup(libNEXS_gv_selendisGlobalPowerCommandPanel, c_triggerControlTypeButton, "CommandButton06");
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 65, 65);
    libNEXS_gv_selendisGlobalPowerButton[6] = DialogControlLastCreated();
    DialogControlSetPositionRelative(libNEXS_gv_selendisGlobalPowerButton[6], lv_iplayer, c_anchorCenter, libNEXS_gv_selendisGlobalPowerAdapterPanel[6], c_anchorCenter, 0, 0);
    DialogControlHookup(libNEXS_gv_selendisGlobalPowerCommandPanel, c_triggerControlTypeButton, "CommandButton07");
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 65, 65);
    libNEXS_gv_selendisGlobalPowerButton[7] = DialogControlLastCreated();
    DialogControlSetPositionRelative(libNEXS_gv_selendisGlobalPowerButton[7], lv_iplayer, c_anchorCenter, libNEXS_gv_selendisGlobalPowerAdapterPanel[7], c_anchorCenter, 0, 0);
    DialogControlHookup(libNEXS_gv_selendisGlobalPowerCommandPanel, c_triggerControlTypeButton, "CommandButton08");
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 65, 65);
    libNEXS_gv_selendisGlobalPowerButton[8] = DialogControlLastCreated();
    DialogControlSetPositionRelative(libNEXS_gv_selendisGlobalPowerButton[8], lv_iplayer, c_anchorCenter, libNEXS_gv_selendisGlobalPowerAdapterPanel[8], c_anchorCenter, 0, 0);
    DialogControlHookup(libNEXS_gv_selendisGlobalPowerCommandPanel, c_triggerControlTypeButton, "CommandButton09");
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 65, 65);
    libNEXS_gv_selendisGlobalPowerButton[9] = DialogControlLastCreated();
    DialogControlSetPositionRelative(libNEXS_gv_selendisGlobalPowerButton[9], lv_iplayer, c_anchorCenter, libNEXS_gv_selendisGlobalPowerAdapterPanel[9], c_anchorCenter, 0, 0);

    DialogControlSetSize(libNEXS_gv_selendisGlobalPowerButton[0], lv_iplayer, 100, 100);
    DialogControlSetSize(libNEXS_gv_selendisGlobalPowerButton[9], lv_iplayer, 100, 100);
    libNtve_gf_SetDialogItemUnitGroup(libNEXS_gv_selendisGlobalPowerCommandPanel, libNtve_gf_ConvertUnitToUnitGroup(libNEXS_gv_selendisGlobalPowerCaster), lv_iplayer);
    DialogControlCreate(libNEXS_gv_selendisGlobalPowerFrame[1], c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 65, 30);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ClubProfileInfoEventDateTitle", lv_iplayer);
    libNEXS_gv_selendisGlobalPowerText[0] = DialogControlLastCreated();
    DialogControlSetPositionRelative(libNEXS_gv_selendisGlobalPowerText[0], lv_iplayer, c_anchorBottom, libNEXS_gv_selendisGlobalPowerAdapterPanel[1], c_anchorBottom, 0, 55);
    DialogControlCreate(libNEXS_gv_selendisGlobalPowerFrame[1], c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 65, 30);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ClubProfileInfoEventDateTitle", lv_iplayer);
    libNEXS_gv_selendisGlobalPowerText[1] = DialogControlLastCreated();
    DialogControlSetPositionRelative(libNEXS_gv_selendisGlobalPowerText[1], lv_iplayer, c_anchorBottom, libNEXS_gv_selendisGlobalPowerAdapterPanel[2], c_anchorBottom, 0, 55);
    DialogControlCreate(libNEXS_gv_selendisGlobalPowerFrame[1], c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 65, 30);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ClubProfileInfoEventDateTitle", lv_iplayer);
    libNEXS_gv_selendisGlobalPowerText[2] = DialogControlLastCreated();
    DialogControlSetPositionRelative(libNEXS_gv_selendisGlobalPowerText[2], lv_iplayer, c_anchorBottom, libNEXS_gv_selendisGlobalPowerAdapterPanel[3], c_anchorBottom, 0, 55);
    DialogControlCreate(libNEXS_gv_selendisGlobalPowerFrame[1], c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 65, 30);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ClubProfileInfoEventDateTitle", lv_iplayer);
    libNEXS_gv_selendisGlobalPowerText[3] = DialogControlLastCreated();
    DialogControlSetPositionRelative(libNEXS_gv_selendisGlobalPowerText[3], lv_iplayer, c_anchorBottom, libNEXS_gv_selendisGlobalPowerAdapterPanel[4], c_anchorBottom, 0, 55);
    DialogControlCreate(libNEXS_gv_selendisGlobalPowerFrame[1], c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 65, 30);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ClubProfileInfoEventDateTitle", lv_iplayer);
    libNEXS_gv_selendisGlobalPowerText[4] = DialogControlLastCreated();
    DialogControlSetPositionRelative(libNEXS_gv_selendisGlobalPowerText[4], lv_iplayer, c_anchorBottom, libNEXS_gv_selendisGlobalPowerAdapterPanel[5], c_anchorBottom, 0, 55);
    DialogControlCreate(libNEXS_gv_selendisGlobalPowerFrame[1], c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 65, 30);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ClubProfileInfoEventDateTitle", lv_iplayer);
    libNEXS_gv_selendisGlobalPowerText[5] = DialogControlLastCreated();
    DialogControlSetPositionRelative(libNEXS_gv_selendisGlobalPowerText[5], lv_iplayer, c_anchorBottom, libNEXS_gv_selendisGlobalPowerAdapterPanel[6], c_anchorBottom, 0, 55);
    DialogControlCreate(libNEXS_gv_selendisGlobalPowerFrame[1], c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 65, 30);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ClubProfileInfoEventDateTitle", lv_iplayer);
    libNEXS_gv_selendisGlobalPowerText[6] = DialogControlLastCreated();
    DialogControlSetPositionRelative(libNEXS_gv_selendisGlobalPowerText[6], lv_iplayer, c_anchorBottom, libNEXS_gv_selendisGlobalPowerAdapterPanel[7], c_anchorBottom, 0, 55);
    DialogControlCreate(libNEXS_gv_selendisGlobalPowerFrame[1], c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 65, 30);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ClubProfileInfoEventDateTitle", lv_iplayer);
    libNEXS_gv_selendisGlobalPowerText[7] = DialogControlLastCreated();
    DialogControlSetPositionRelative(libNEXS_gv_selendisGlobalPowerText[7], lv_iplayer, c_anchorBottom, libNEXS_gv_selendisGlobalPowerAdapterPanel[8], c_anchorBottom, 0, 55);
    DialogControlFadeTransparency(libNEXS_gv_selendisGlobalPowerText[0], lv_iplayer, 0.0, lv_value);
    DialogControlFadeTransparency(libNEXS_gv_selendisGlobalPowerText[1], lv_iplayer, 0.0, lv_value);
    DialogControlFadeTransparency(libNEXS_gv_selendisGlobalPowerText[2], lv_iplayer, 0.0, lv_value);
    DialogControlFadeTransparency(libNEXS_gv_selendisGlobalPowerText[3], lv_iplayer, 0.0, lv_value);
    DialogControlFadeTransparency(libNEXS_gv_selendisGlobalPowerText[4], lv_iplayer, 0.0, lv_value);
    DialogControlFadeTransparency(libNEXS_gv_selendisGlobalPowerText[5], lv_iplayer, 0.0, lv_value);
    DialogControlFadeTransparency(libNEXS_gv_selendisGlobalPowerText[6], lv_iplayer, 0.0, lv_value);
    DialogControlFadeTransparency(libNEXS_gv_selendisGlobalPowerText[7], lv_iplayer, 0.0, lv_value);

}

void libNEXS_gf_PU_GPVisibilitySet3 (bool lp_showHide) {
    // Variable Declarations
    fixed lv_value;
    playergroup lv_iplayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_iplayer = PlayerGroupEmpty();

    // Implementation
    lv_iplayer = PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14);
    if ((lp_showHide == true)) {
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libNEXS_gv_selendisGlobalPowerPanelModel[0]), "Birth");
        DialogControlSendAnimationEvent(libNEXS_gv_selendisGlobalPowerCommandPanel, lv_iplayer, "OnShow");
        lv_value = 0.0;
        DialogControlFadeTransparency(libNEXS_gv_selendisGlobalPowerText[0], lv_iplayer, 1.0, lv_value);
        DialogControlFadeTransparency(libNEXS_gv_selendisGlobalPowerText[1], lv_iplayer, 1.0, lv_value);
        DialogControlFadeTransparency(libNEXS_gv_selendisGlobalPowerText[2], lv_iplayer, 1.0, lv_value);
        DialogControlFadeTransparency(libNEXS_gv_selendisGlobalPowerText[3], lv_iplayer, 1.0, lv_value);
        DialogControlFadeTransparency(libNEXS_gv_selendisGlobalPowerText[4], lv_iplayer, 1.0, lv_value);
        DialogControlFadeTransparency(libNEXS_gv_selendisGlobalPowerText[5], lv_iplayer, 1.0, lv_value);
        DialogControlFadeTransparency(libNEXS_gv_selendisGlobalPowerText[6], lv_iplayer, 1.0, lv_value);
        DialogControlFadeTransparency(libNEXS_gv_selendisGlobalPowerText[7], lv_iplayer, 1.0, lv_value);
    }

    if ((lp_showHide == false)) {
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libNEXS_gv_selendisGlobalPowerPanelModel[0]), "Death");
        DialogControlSendAnimationEvent(libNEXS_gv_selendisGlobalPowerCommandPanel, lv_iplayer, "OffShow");
        lv_value = 100.0;
        DialogControlFadeTransparency(libNEXS_gv_selendisGlobalPowerText[0], lv_iplayer, 1.0, lv_value);
        DialogControlFadeTransparency(libNEXS_gv_selendisGlobalPowerText[1], lv_iplayer, 1.0, lv_value);
        DialogControlFadeTransparency(libNEXS_gv_selendisGlobalPowerText[2], lv_iplayer, 1.0, lv_value);
        DialogControlFadeTransparency(libNEXS_gv_selendisGlobalPowerText[3], lv_iplayer, 1.0, lv_value);
        DialogControlFadeTransparency(libNEXS_gv_selendisGlobalPowerText[4], lv_iplayer, 1.0, lv_value);
        DialogControlFadeTransparency(libNEXS_gv_selendisGlobalPowerText[5], lv_iplayer, 1.0, lv_value);
        DialogControlFadeTransparency(libNEXS_gv_selendisGlobalPowerText[6], lv_iplayer, 1.0, lv_value);
        DialogControlFadeTransparency(libNEXS_gv_selendisGlobalPowerText[7], lv_iplayer, 1.0, lv_value);
    }

}

void libNEXS_gf_Selendis_Platform_Adept2 (int lp_e695B0E9878F, string lp_e6BC94E7AE97E4BD93ID, int lp_e782B9E4BD8D) {
    // Variable Declarations
    int lv_e5BA8FE58897;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_e782B9E4BD8D >= 0) && (lp_e782B9E4BD8D <= 7)) {
        lv_e5BA8FE58897 = lp_e782B9E4BD8D;
    }
    else {
        return ;
    }
    if ((lp_e695B0E9878F >= 1)) {
        if ((libNEXS_gv_selendis_adept_2[1][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint[lv_e5BA8FE58897], 0.0, 0.0));
            libNEXS_gv_selendis_adept_2[1][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_2[1][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_2[1][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 2)) {
        if ((libNEXS_gv_selendis_adept_2[2][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint[lv_e5BA8FE58897], 1.25, 15.0));
            libNEXS_gv_selendis_adept_2[2][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_2[2][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_2[2][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 3)) {
        if ((libNEXS_gv_selendis_adept_2[3][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint[lv_e5BA8FE58897], 1.25, -15.0));
            libNEXS_gv_selendis_adept_2[3][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_2[3][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_2[3][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 4)) {
        if ((libNEXS_gv_selendis_adept_2[4][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint[lv_e5BA8FE58897], 2.0, 15.0));
            libNEXS_gv_selendis_adept_2[4][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_2[4][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_2[4][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 5)) {
        if ((libNEXS_gv_selendis_adept_2[5][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint[lv_e5BA8FE58897], 2.0, -15.0));
            libNEXS_gv_selendis_adept_2[5][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_2[5][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_2[5][lv_e5BA8FE58897] = null;
    }

    if ((lp_e695B0E9878F >= 6)) {
        if ((libNEXS_gv_selendis_adept_2[6][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint[lv_e5BA8FE58897], 1.25, 75.0));
            libNEXS_gv_selendis_adept_2[6][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_2[6][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_2[6][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 7)) {
        if ((libNEXS_gv_selendis_adept_2[7][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint[lv_e5BA8FE58897], 1.25, 45.0));
            libNEXS_gv_selendis_adept_2[7][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_2[7][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_2[7][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 8)) {
        if ((libNEXS_gv_selendis_adept_2[8][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint[lv_e5BA8FE58897], 2.0, 75.0));
            libNEXS_gv_selendis_adept_2[8][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_2[8][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_2[8][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 9)) {
        if ((libNEXS_gv_selendis_adept_2[9][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint[lv_e5BA8FE58897], 2.0, 45.0));
            libNEXS_gv_selendis_adept_2[9][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_2[9][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_2[9][lv_e5BA8FE58897] = null;
    }

    if ((lp_e695B0E9878F >= 10)) {
        if ((libNEXS_gv_selendis_adept_2[10][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint[lv_e5BA8FE58897], 1.25, 135.0));
            libNEXS_gv_selendis_adept_2[10][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_2[10][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_2[10][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 11)) {
        if ((libNEXS_gv_selendis_adept_2[11][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint[lv_e5BA8FE58897], 1.25, 105.0));
            libNEXS_gv_selendis_adept_2[11][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_2[11][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_2[11][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 12)) {
        if ((libNEXS_gv_selendis_adept_2[12][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint[lv_e5BA8FE58897], 2.0, 135.0));
            libNEXS_gv_selendis_adept_2[12][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_2[12][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_2[12][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 13)) {
        if ((libNEXS_gv_selendis_adept_2[13][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint[lv_e5BA8FE58897], 2.0, 105.0));
            libNEXS_gv_selendis_adept_2[13][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_2[13][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_2[13][lv_e5BA8FE58897] = null;
    }

    if ((lp_e695B0E9878F >= 14)) {
        if ((libNEXS_gv_selendis_adept_2[14][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint[lv_e5BA8FE58897], 1.25, 195.0));
            libNEXS_gv_selendis_adept_2[14][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_2[14][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_2[14][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 15)) {
        if ((libNEXS_gv_selendis_adept_2[15][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint[lv_e5BA8FE58897], 1.25, 165.0));
            libNEXS_gv_selendis_adept_2[15][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_2[15][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_2[15][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 16)) {
        if ((libNEXS_gv_selendis_adept_2[16][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint[lv_e5BA8FE58897], 2.0, 195.0));
            libNEXS_gv_selendis_adept_2[16][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_2[16][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_2[16][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 17)) {
        if ((libNEXS_gv_selendis_adept_2[17][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint[lv_e5BA8FE58897], 2.0, 165.0));
            libNEXS_gv_selendis_adept_2[17][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_2[17][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_2[17][lv_e5BA8FE58897] = null;
    }

    if ((lp_e695B0E9878F >= 18)) {
        if ((libNEXS_gv_selendis_adept_2[18][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint[lv_e5BA8FE58897], 1.25, 255.0));
            libNEXS_gv_selendis_adept_2[18][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_2[18][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_2[18][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 19)) {
        if ((libNEXS_gv_selendis_adept_2[19][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint[lv_e5BA8FE58897], 1.25, 225.0));
            libNEXS_gv_selendis_adept_2[19][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_2[19][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_2[19][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 20)) {
        if ((libNEXS_gv_selendis_adept_2[20][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint[lv_e5BA8FE58897], 2.0, 255.0));
            libNEXS_gv_selendis_adept_2[20][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_2[20][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_2[20][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 21)) {
        if ((libNEXS_gv_selendis_adept_2[21][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint[lv_e5BA8FE58897], 2.0, 225.0));
            libNEXS_gv_selendis_adept_2[21][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_2[21][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_2[21][lv_e5BA8FE58897] = null;
    }

    if ((lp_e695B0E9878F >= 22)) {
        if ((libNEXS_gv_selendis_adept_2[22][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint[lv_e5BA8FE58897], 1.25, 315.0));
            libNEXS_gv_selendis_adept_2[22][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_2[22][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_2[22][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 23)) {
        if ((libNEXS_gv_selendis_adept_2[23][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint[lv_e5BA8FE58897], 1.25, 285.0));
            libNEXS_gv_selendis_adept_2[23][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_2[23][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_2[23][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 24)) {
        if ((libNEXS_gv_selendis_adept_2[24][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint[lv_e5BA8FE58897], 2.0, 315.0));
            libNEXS_gv_selendis_adept_2[24][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_2[24][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_2[24][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 25)) {
        if ((libNEXS_gv_selendis_adept_2[25][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint[lv_e5BA8FE58897], 2.0, 285.0));
            libNEXS_gv_selendis_adept_2[25][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_2[25][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_2[25][lv_e5BA8FE58897] = null;
    }

}

void libNEXS_gf_Selendis_Platform_Adept3 (int lp_e695B0E9878F, string lp_e6BC94E7AE97E4BD93ID, int lp_e782B9E4BD8D) {
    // Variable Declarations
    int lv_e5BA8FE58897;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_e782B9E4BD8D >= 0) && (lp_e782B9E4BD8D <= 7)) {
        lv_e5BA8FE58897 = lp_e782B9E4BD8D;
    }
    else {
        return ;
    }
    if ((lp_e695B0E9878F >= 1)) {
        if ((libNEXS_gv_selendis_adept_3[1][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint2[lv_e5BA8FE58897], 0.0, 0.0));
            libNEXS_gv_selendis_adept_3[1][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_3[1][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_3[1][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 2)) {
        if ((libNEXS_gv_selendis_adept_3[2][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint2[lv_e5BA8FE58897], 1.25, 15.0));
            libNEXS_gv_selendis_adept_3[2][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_3[2][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_3[2][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 3)) {
        if ((libNEXS_gv_selendis_adept_3[3][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint2[lv_e5BA8FE58897], 1.25, -15.0));
            libNEXS_gv_selendis_adept_3[3][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_3[3][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_3[3][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 4)) {
        if ((libNEXS_gv_selendis_adept_3[4][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint2[lv_e5BA8FE58897], 2.0, 15.0));
            libNEXS_gv_selendis_adept_3[4][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_3[4][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_3[4][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 5)) {
        if ((libNEXS_gv_selendis_adept_3[5][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint2[lv_e5BA8FE58897], 2.0, -15.0));
            libNEXS_gv_selendis_adept_3[5][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_3[5][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_3[5][lv_e5BA8FE58897] = null;
    }

    if ((lp_e695B0E9878F >= 6)) {
        if ((libNEXS_gv_selendis_adept_3[6][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint2[lv_e5BA8FE58897], 1.25, 75.0));
            libNEXS_gv_selendis_adept_3[6][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_3[6][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_3[6][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 7)) {
        if ((libNEXS_gv_selendis_adept_3[7][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint2[lv_e5BA8FE58897], 1.25, 45.0));
            libNEXS_gv_selendis_adept_3[7][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_3[7][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_3[7][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 8)) {
        if ((libNEXS_gv_selendis_adept_3[8][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint2[lv_e5BA8FE58897], 2.0, 75.0));
            libNEXS_gv_selendis_adept_3[8][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_3[8][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_3[8][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 9)) {
        if ((libNEXS_gv_selendis_adept_3[9][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint2[lv_e5BA8FE58897], 2.0, 45.0));
            libNEXS_gv_selendis_adept_3[9][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_3[9][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_3[9][lv_e5BA8FE58897] = null;
    }

    if ((lp_e695B0E9878F >= 10)) {
        if ((libNEXS_gv_selendis_adept_3[10][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint2[lv_e5BA8FE58897], 1.25, 135.0));
            libNEXS_gv_selendis_adept_3[10][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_3[10][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_3[10][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 11)) {
        if ((libNEXS_gv_selendis_adept_3[11][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint2[lv_e5BA8FE58897], 1.25, 105.0));
            libNEXS_gv_selendis_adept_3[11][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_3[11][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_3[11][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 12)) {
        if ((libNEXS_gv_selendis_adept_3[12][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint2[lv_e5BA8FE58897], 2.0, 135.0));
            libNEXS_gv_selendis_adept_3[12][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_3[12][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_3[12][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 13)) {
        if ((libNEXS_gv_selendis_adept_3[13][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint2[lv_e5BA8FE58897], 2.0, 105.0));
            libNEXS_gv_selendis_adept_3[13][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_3[13][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_3[13][lv_e5BA8FE58897] = null;
    }

    if ((lp_e695B0E9878F >= 14)) {
        if ((libNEXS_gv_selendis_adept_3[14][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint2[lv_e5BA8FE58897], 1.25, 195.0));
            libNEXS_gv_selendis_adept_3[14][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_3[14][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_3[14][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 15)) {
        if ((libNEXS_gv_selendis_adept_3[15][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint2[lv_e5BA8FE58897], 1.25, 165.0));
            libNEXS_gv_selendis_adept_3[15][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_3[15][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_3[15][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 16)) {
        if ((libNEXS_gv_selendis_adept_3[16][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint2[lv_e5BA8FE58897], 2.0, 195.0));
            libNEXS_gv_selendis_adept_3[16][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_3[16][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_3[16][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 17)) {
        if ((libNEXS_gv_selendis_adept_3[17][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint2[lv_e5BA8FE58897], 2.0, 165.0));
            libNEXS_gv_selendis_adept_3[17][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_3[17][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_3[17][lv_e5BA8FE58897] = null;
    }

    if ((lp_e695B0E9878F >= 18)) {
        if ((libNEXS_gv_selendis_adept_3[18][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint2[lv_e5BA8FE58897], 1.25, 255.0));
            libNEXS_gv_selendis_adept_3[18][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_3[18][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_3[18][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 19)) {
        if ((libNEXS_gv_selendis_adept_3[19][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint2[lv_e5BA8FE58897], 1.25, 225.0));
            libNEXS_gv_selendis_adept_3[19][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_3[19][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_3[19][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 20)) {
        if ((libNEXS_gv_selendis_adept_3[20][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint2[lv_e5BA8FE58897], 2.0, 255.0));
            libNEXS_gv_selendis_adept_3[20][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_3[20][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_3[20][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 21)) {
        if ((libNEXS_gv_selendis_adept_3[21][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint2[lv_e5BA8FE58897], 2.0, 225.0));
            libNEXS_gv_selendis_adept_3[21][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_3[21][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_3[21][lv_e5BA8FE58897] = null;
    }

    if ((lp_e695B0E9878F >= 22)) {
        if ((libNEXS_gv_selendis_adept_3[22][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint2[lv_e5BA8FE58897], 1.25, 315.0));
            libNEXS_gv_selendis_adept_3[22][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_3[22][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_3[22][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 23)) {
        if ((libNEXS_gv_selendis_adept_3[23][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint2[lv_e5BA8FE58897], 1.25, 285.0));
            libNEXS_gv_selendis_adept_3[23][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_3[23][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_3[23][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 24)) {
        if ((libNEXS_gv_selendis_adept_3[24][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint2[lv_e5BA8FE58897], 2.0, 315.0));
            libNEXS_gv_selendis_adept_3[24][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_3[24][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_3[24][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 25)) {
        if ((libNEXS_gv_selendis_adept_3[25][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint2[lv_e5BA8FE58897], 2.0, 285.0));
            libNEXS_gv_selendis_adept_3[25][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_3[25][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_3[25][lv_e5BA8FE58897] = null;
    }

}

void libNEXS_gf_Selendis_Platform_Adept4 (int lp_e695B0E9878F, string lp_e6BC94E7AE97E4BD93ID, int lp_e782B9E4BD8D) {
    // Variable Declarations
    int lv_e5BA8FE58897;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_e782B9E4BD8D >= 0) && (lp_e782B9E4BD8D <= 7)) {
        lv_e5BA8FE58897 = lp_e782B9E4BD8D;
    }
    else {
        return ;
    }
    if ((lp_e695B0E9878F >= 1)) {
        if ((libNEXS_gv_selendis_adept_4[1][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint3[lv_e5BA8FE58897], 1.0, 0.0));
            libNEXS_gv_selendis_adept_4[1][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_4[1][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_4[1][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 2)) {
        if ((libNEXS_gv_selendis_adept_4[2][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint3[lv_e5BA8FE58897], 2.0, 0.0));
            libNEXS_gv_selendis_adept_4[2][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_4[2][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_4[2][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 3)) {
        if ((libNEXS_gv_selendis_adept_4[3][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint3[lv_e5BA8FE58897], 1.0, 60.0));
            libNEXS_gv_selendis_adept_4[3][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_4[3][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_4[3][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 4)) {
        if ((libNEXS_gv_selendis_adept_4[4][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint3[lv_e5BA8FE58897], 2.0, 60.0));
            libNEXS_gv_selendis_adept_4[4][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_4[4][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_4[4][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 5)) {
        if ((libNEXS_gv_selendis_adept_4[5][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint3[lv_e5BA8FE58897], 1.0, 120.0));
            libNEXS_gv_selendis_adept_4[5][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_4[5][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_4[5][lv_e5BA8FE58897] = null;
    }

    if ((lp_e695B0E9878F >= 6)) {
        if ((libNEXS_gv_selendis_adept_4[6][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint3[lv_e5BA8FE58897], 2.0, 120.0));
            libNEXS_gv_selendis_adept_4[6][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_4[6][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_4[6][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 7)) {
        if ((libNEXS_gv_selendis_adept_4[7][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint3[lv_e5BA8FE58897], 1.0, 180.0));
            libNEXS_gv_selendis_adept_4[7][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_4[7][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_4[7][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 8)) {
        if ((libNEXS_gv_selendis_adept_4[8][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint3[lv_e5BA8FE58897], 2.0, 180.0));
            libNEXS_gv_selendis_adept_4[8][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_4[8][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_4[8][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 9)) {
        if ((libNEXS_gv_selendis_adept_4[9][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint3[lv_e5BA8FE58897], 1.0, 240.0));
            libNEXS_gv_selendis_adept_4[9][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_4[9][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_4[9][lv_e5BA8FE58897] = null;
    }

    if ((lp_e695B0E9878F >= 10)) {
        if ((libNEXS_gv_selendis_adept_4[10][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint3[lv_e5BA8FE58897], 2.0, 240.0));
            libNEXS_gv_selendis_adept_4[10][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_4[10][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_4[10][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 11)) {
        if ((libNEXS_gv_selendis_adept_4[11][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint3[lv_e5BA8FE58897], 1.0, 300.0));
            libNEXS_gv_selendis_adept_4[11][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_4[11][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_4[11][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 12)) {
        if ((libNEXS_gv_selendis_adept_4[12][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint3[lv_e5BA8FE58897], 2.0, 300.0));
            libNEXS_gv_selendis_adept_4[12][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_4[12][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_4[12][lv_e5BA8FE58897] = null;
    }

}

void libNEXS_gf_Selendis_Platform_Adept5 (int lp_e695B0E9878F, string lp_e6BC94E7AE97E4BD93ID, int lp_e782B9E4BD8D) {
    // Variable Declarations
    int lv_e5BA8FE58897;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_e782B9E4BD8D >= 0) && (lp_e782B9E4BD8D <= 7)) {
        lv_e5BA8FE58897 = lp_e782B9E4BD8D;
    }
    else {
        return ;
    }
    if ((lp_e695B0E9878F >= 1)) {
        if ((libNEXS_gv_selendis_adept_5[1][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint4[lv_e5BA8FE58897], 0.0, 0.0));
            libNEXS_gv_selendis_adept_5[1][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_5[1][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_5[1][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 2)) {
        if ((libNEXS_gv_selendis_adept_5[2][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint4[lv_e5BA8FE58897], 2.0, 0.0));
            libNEXS_gv_selendis_adept_5[2][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_5[2][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_5[2][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 3)) {
        if ((libNEXS_gv_selendis_adept_5[3][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint4[lv_e5BA8FE58897], 2.0, 60.0));
            libNEXS_gv_selendis_adept_5[3][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_5[3][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_5[3][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 4)) {
        if ((libNEXS_gv_selendis_adept_5[4][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint4[lv_e5BA8FE58897], 2.0, 120.0));
            libNEXS_gv_selendis_adept_5[4][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_5[4][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_5[4][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 5)) {
        if ((libNEXS_gv_selendis_adept_5[5][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint4[lv_e5BA8FE58897], 2.0, 180.0));
            libNEXS_gv_selendis_adept_5[5][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_5[5][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_5[5][lv_e5BA8FE58897] = null;
    }

    if ((lp_e695B0E9878F >= 6)) {
        if ((libNEXS_gv_selendis_adept_5[6][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint4[lv_e5BA8FE58897], 2.0, 240.0));
            libNEXS_gv_selendis_adept_5[6][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_5[6][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_5[6][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 7)) {
        if ((libNEXS_gv_selendis_adept_5[7][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint4[lv_e5BA8FE58897], 2.0, 300.0));
            libNEXS_gv_selendis_adept_5[7][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_5[7][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_5[7][lv_e5BA8FE58897] = null;
    }

}

void libNEXS_gf_Selendis_Platform_Adept6 (int lp_e695B0E9878F, string lp_e6BC94E7AE97E4BD93ID, int lp_e782B9E4BD8D) {
    // Variable Declarations
    int lv_e5BA8FE58897;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_e782B9E4BD8D >= 0) && (lp_e782B9E4BD8D <= 7)) {
        lv_e5BA8FE58897 = lp_e782B9E4BD8D;
    }
    else {
        return ;
    }
    if ((lp_e695B0E9878F >= 1)) {
        if ((libNEXS_gv_selendis_adept_6[1][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint5[lv_e5BA8FE58897], 0.0, 0.0));
            libNEXS_gv_selendis_adept_6[1][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_6[1][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_6[1][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 2)) {
        if ((libNEXS_gv_selendis_adept_6[2][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint5[lv_e5BA8FE58897], 1.0, 0.0));
            libNEXS_gv_selendis_adept_6[2][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_6[2][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_6[2][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 3)) {
        if ((libNEXS_gv_selendis_adept_6[3][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint5[lv_e5BA8FE58897], -1.0, 0.0));
            libNEXS_gv_selendis_adept_6[3][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_6[3][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_6[3][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 4)) {
        if ((libNEXS_gv_selendis_adept_6[4][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint5[lv_e5BA8FE58897], 2.0, 0.0));
            libNEXS_gv_selendis_adept_6[4][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_6[4][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_6[4][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 5)) {
        if ((libNEXS_gv_selendis_adept_6[5][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint5[lv_e5BA8FE58897], -2.0, 0.0));
            libNEXS_gv_selendis_adept_6[5][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_6[5][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_6[5][lv_e5BA8FE58897] = null;
    }

    if ((lp_e695B0E9878F >= 6)) {
        if ((libNEXS_gv_selendis_adept_6[6][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint5[lv_e5BA8FE58897], 1.0, 90.0), 0.0, 0.0));
            libNEXS_gv_selendis_adept_6[6][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_6[6][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_6[6][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 7)) {
        if ((libNEXS_gv_selendis_adept_6[7][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint5[lv_e5BA8FE58897], 1.0, 90.0), 1.0, 0.0));
            libNEXS_gv_selendis_adept_6[7][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_6[7][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_6[7][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 8)) {
        if ((libNEXS_gv_selendis_adept_6[8][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint5[lv_e5BA8FE58897], 1.0, 90.0), -1.0, 0.0));
            libNEXS_gv_selendis_adept_6[8][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_6[8][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_6[8][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 9)) {
        if ((libNEXS_gv_selendis_adept_6[9][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint5[lv_e5BA8FE58897], 1.0, 90.0), 2.0, 0.0));
            libNEXS_gv_selendis_adept_6[9][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_6[9][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_6[9][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 10)) {
        if ((libNEXS_gv_selendis_adept_6[10][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint5[lv_e5BA8FE58897], 1.0, 90.0), -2.0, 0.0));
            libNEXS_gv_selendis_adept_6[10][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_6[10][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_6[10][lv_e5BA8FE58897] = null;
    }

    if ((lp_e695B0E9878F >= 11)) {
        if ((libNEXS_gv_selendis_adept_6[11][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint5[lv_e5BA8FE58897], -1.0, 90.0), 0.0, 0.0));
            libNEXS_gv_selendis_adept_6[11][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_6[11][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_6[11][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 12)) {
        if ((libNEXS_gv_selendis_adept_6[12][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint5[lv_e5BA8FE58897], -1.0, 90.0), 1.0, 0.0));
            libNEXS_gv_selendis_adept_6[12][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_6[12][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_6[12][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 13)) {
        if ((libNEXS_gv_selendis_adept_6[13][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint5[lv_e5BA8FE58897], -1.0, 90.0), -1.0, 0.0));
            libNEXS_gv_selendis_adept_6[13][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_6[13][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_6[13][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 14)) {
        if ((libNEXS_gv_selendis_adept_6[14][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint5[lv_e5BA8FE58897], -1.0, 90.0), 2.0, 0.0));
            libNEXS_gv_selendis_adept_6[14][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_6[14][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_6[14][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 15)) {
        if ((libNEXS_gv_selendis_adept_6[15][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint5[lv_e5BA8FE58897], -1.0, 90.0), -2.0, 0.0));
            libNEXS_gv_selendis_adept_6[15][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_6[15][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_6[15][lv_e5BA8FE58897] = null;
    }

    if ((lp_e695B0E9878F >= 16)) {
        if ((libNEXS_gv_selendis_adept_6[16][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint5[lv_e5BA8FE58897], 2.0, 90.0), 0.0, 0.0));
            libNEXS_gv_selendis_adept_6[16][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_6[16][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_6[16][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 17)) {
        if ((libNEXS_gv_selendis_adept_6[17][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint5[lv_e5BA8FE58897], 2.0, 90.0), 1.0, 0.0));
            libNEXS_gv_selendis_adept_6[17][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_6[17][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_6[17][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 18)) {
        if ((libNEXS_gv_selendis_adept_6[18][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint5[lv_e5BA8FE58897], 2.0, 90.0), -1.0, 0.0));
            libNEXS_gv_selendis_adept_6[18][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_6[18][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_6[18][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 19)) {
        if ((libNEXS_gv_selendis_adept_6[19][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint5[lv_e5BA8FE58897], 2.0, 90.0), 2.0, 0.0));
            libNEXS_gv_selendis_adept_6[19][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_6[19][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_6[19][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 20)) {
        if ((libNEXS_gv_selendis_adept_6[20][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint5[lv_e5BA8FE58897], 2.0, 90.0), -2.0, 0.0));
            libNEXS_gv_selendis_adept_6[20][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_6[20][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_6[20][lv_e5BA8FE58897] = null;
    }

    if ((lp_e695B0E9878F >= 21)) {
        if ((libNEXS_gv_selendis_adept_6[21][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint5[lv_e5BA8FE58897], -2.0, 90.0), 0.0, 0.0));
            libNEXS_gv_selendis_adept_6[21][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_6[21][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_6[21][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 22)) {
        if ((libNEXS_gv_selendis_adept_6[22][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint5[lv_e5BA8FE58897], -2.0, 90.0), 1.0, 0.0));
            libNEXS_gv_selendis_adept_6[22][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_6[22][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_6[22][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 23)) {
        if ((libNEXS_gv_selendis_adept_6[23][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint5[lv_e5BA8FE58897], -2.0, 90.0), -1.0, 0.0));
            libNEXS_gv_selendis_adept_6[23][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_6[23][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_6[23][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 24)) {
        if ((libNEXS_gv_selendis_adept_6[24][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint5[lv_e5BA8FE58897], -2.0, 90.0), 2.0, 0.0));
            libNEXS_gv_selendis_adept_6[24][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_6[24][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_6[24][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 25)) {
        if ((libNEXS_gv_selendis_adept_6[25][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint5[lv_e5BA8FE58897], -2.0, 90.0), -2.0, 0.0));
            libNEXS_gv_selendis_adept_6[25][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_6[25][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_6[25][lv_e5BA8FE58897] = null;
    }

}

void libNEXS_gf_Selendis_Platform_Adept7 (int lp_e695B0E9878F, string lp_e6BC94E7AE97E4BD93ID, int lp_e782B9E4BD8D) {
    // Variable Declarations
    int lv_e5BA8FE58897;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_e782B9E4BD8D >= 0) && (lp_e782B9E4BD8D <= 7)) {
        lv_e5BA8FE58897 = lp_e782B9E4BD8D;
    }
    else {
        return ;
    }
    if ((lp_e695B0E9878F >= 1)) {
        if ((libNEXS_gv_selendis_adept_7[1][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint6[lv_e5BA8FE58897], 0.0, 0.0));
            libNEXS_gv_selendis_adept_7[1][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_7[1][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_7[1][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 2)) {
        if ((libNEXS_gv_selendis_adept_7[2][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint6[lv_e5BA8FE58897], 1.0, 0.0));
            libNEXS_gv_selendis_adept_7[2][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_7[2][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_7[2][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 3)) {
        if ((libNEXS_gv_selendis_adept_7[3][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint6[lv_e5BA8FE58897], -1.0, 0.0));
            libNEXS_gv_selendis_adept_7[3][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_7[3][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_7[3][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 4)) {
        if ((libNEXS_gv_selendis_adept_7[4][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint6[lv_e5BA8FE58897], 2.0, 0.0));
            libNEXS_gv_selendis_adept_7[4][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_7[4][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_7[4][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 5)) {
        if ((libNEXS_gv_selendis_adept_7[5][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint6[lv_e5BA8FE58897], -2.0, 0.0));
            libNEXS_gv_selendis_adept_7[5][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_7[5][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_7[5][lv_e5BA8FE58897] = null;
    }

    if ((lp_e695B0E9878F >= 6)) {
        if ((libNEXS_gv_selendis_adept_7[6][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint6[lv_e5BA8FE58897], 1.0, 90.0), 0.0, 0.0));
            libNEXS_gv_selendis_adept_7[6][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_7[6][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_7[6][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 7)) {
        if ((libNEXS_gv_selendis_adept_7[7][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint6[lv_e5BA8FE58897], 1.0, 90.0), 1.0, 0.0));
            libNEXS_gv_selendis_adept_7[7][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_7[7][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_7[7][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 8)) {
        if ((libNEXS_gv_selendis_adept_7[8][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint6[lv_e5BA8FE58897], 1.0, 90.0), -1.0, 0.0));
            libNEXS_gv_selendis_adept_7[8][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_7[8][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_7[8][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 9)) {
        if ((libNEXS_gv_selendis_adept_7[9][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint6[lv_e5BA8FE58897], 1.0, 90.0), 2.0, 0.0));
            libNEXS_gv_selendis_adept_7[9][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_7[9][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_7[9][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 10)) {
        if ((libNEXS_gv_selendis_adept_7[10][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint6[lv_e5BA8FE58897], 1.0, 90.0), -2.0, 0.0));
            libNEXS_gv_selendis_adept_7[10][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_7[10][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_7[10][lv_e5BA8FE58897] = null;
    }

    if ((lp_e695B0E9878F >= 11)) {
        if ((libNEXS_gv_selendis_adept_7[11][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint6[lv_e5BA8FE58897], -1.0, 90.0), 0.0, 0.0));
            libNEXS_gv_selendis_adept_7[11][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_7[11][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_7[11][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 12)) {
        if ((libNEXS_gv_selendis_adept_7[12][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint6[lv_e5BA8FE58897], -1.0, 90.0), 1.0, 0.0));
            libNEXS_gv_selendis_adept_7[12][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_7[12][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_7[12][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 13)) {
        if ((libNEXS_gv_selendis_adept_7[13][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint6[lv_e5BA8FE58897], -1.0, 90.0), -1.0, 0.0));
            libNEXS_gv_selendis_adept_7[13][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_7[13][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_7[13][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 14)) {
        if ((libNEXS_gv_selendis_adept_7[14][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint6[lv_e5BA8FE58897], -1.0, 90.0), 2.0, 0.0));
            libNEXS_gv_selendis_adept_7[14][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_7[14][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_7[14][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 15)) {
        if ((libNEXS_gv_selendis_adept_7[15][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint6[lv_e5BA8FE58897], -1.0, 90.0), -2.0, 0.0));
            libNEXS_gv_selendis_adept_7[15][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_7[15][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_7[15][lv_e5BA8FE58897] = null;
    }

    if ((lp_e695B0E9878F >= 16)) {
        if ((libNEXS_gv_selendis_adept_7[16][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint6[lv_e5BA8FE58897], 2.0, 90.0), 0.0, 0.0));
            libNEXS_gv_selendis_adept_7[16][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_7[16][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_7[16][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 17)) {
        if ((libNEXS_gv_selendis_adept_7[17][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint6[lv_e5BA8FE58897], 2.0, 90.0), 1.0, 0.0));
            libNEXS_gv_selendis_adept_7[17][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_7[17][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_7[17][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 18)) {
        if ((libNEXS_gv_selendis_adept_7[18][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint6[lv_e5BA8FE58897], 2.0, 90.0), -1.0, 0.0));
            libNEXS_gv_selendis_adept_7[18][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_7[18][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_7[18][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 19)) {
        if ((libNEXS_gv_selendis_adept_7[19][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint6[lv_e5BA8FE58897], 2.0, 90.0), 2.0, 0.0));
            libNEXS_gv_selendis_adept_7[19][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_7[19][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_7[19][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 20)) {
        if ((libNEXS_gv_selendis_adept_7[20][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint6[lv_e5BA8FE58897], 2.0, 90.0), -2.0, 0.0));
            libNEXS_gv_selendis_adept_7[20][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_7[20][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_7[20][lv_e5BA8FE58897] = null;
    }

    if ((lp_e695B0E9878F >= 21)) {
        if ((libNEXS_gv_selendis_adept_7[21][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint6[lv_e5BA8FE58897], -2.0, 90.0), 0.0, 0.0));
            libNEXS_gv_selendis_adept_7[21][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_7[21][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_7[21][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 22)) {
        if ((libNEXS_gv_selendis_adept_7[22][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint6[lv_e5BA8FE58897], -2.0, 90.0), 1.0, 0.0));
            libNEXS_gv_selendis_adept_7[22][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_7[22][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_7[22][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 23)) {
        if ((libNEXS_gv_selendis_adept_7[23][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint6[lv_e5BA8FE58897], -2.0, 90.0), -1.0, 0.0));
            libNEXS_gv_selendis_adept_7[23][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_7[23][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_7[23][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 24)) {
        if ((libNEXS_gv_selendis_adept_7[24][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint6[lv_e5BA8FE58897], -2.0, 90.0), 2.0, 0.0));
            libNEXS_gv_selendis_adept_7[24][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_7[24][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_7[24][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 25)) {
        if ((libNEXS_gv_selendis_adept_7[25][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint6[lv_e5BA8FE58897], -2.0, 90.0), -2.0, 0.0));
            libNEXS_gv_selendis_adept_7[25][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_7[25][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_7[25][lv_e5BA8FE58897] = null;
    }

}

void libNEXS_gf_Selendis_Platform_Adept8 (int lp_e695B0E9878F, string lp_e6BC94E7AE97E4BD93ID, int lp_e782B9E4BD8D) {
    // Variable Declarations
    int lv_e5BA8FE58897;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_e782B9E4BD8D >= 0) && (lp_e782B9E4BD8D <= 7)) {
        lv_e5BA8FE58897 = lp_e782B9E4BD8D;
    }
    else {
        return ;
    }
    if ((lp_e695B0E9878F >= 1)) {
        if ((libNEXS_gv_selendis_adept_8[1][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint7[lv_e5BA8FE58897], 1.0, 0.0));
            libNEXS_gv_selendis_adept_8[1][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_8[1][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_8[1][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 2)) {
        if ((libNEXS_gv_selendis_adept_8[2][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint7[lv_e5BA8FE58897], 3.0, 0.0));
            libNEXS_gv_selendis_adept_8[2][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_8[2][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_8[2][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 3)) {
        if ((libNEXS_gv_selendis_adept_8[3][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint7[lv_e5BA8FE58897], -1.0, 0.0));
            libNEXS_gv_selendis_adept_8[3][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_8[3][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_8[3][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 4)) {
        if ((libNEXS_gv_selendis_adept_8[4][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint7[lv_e5BA8FE58897], -3.0, 0.0));
            libNEXS_gv_selendis_adept_8[4][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_8[4][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_8[4][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 5)) {
        if ((libNEXS_gv_selendis_adept_8[5][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint7[lv_e5BA8FE58897], 2.0, 90.0), 1.0, 0.0));
            libNEXS_gv_selendis_adept_8[5][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_8[5][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_8[5][lv_e5BA8FE58897] = null;
    }

    if ((lp_e695B0E9878F >= 6)) {
        if ((libNEXS_gv_selendis_adept_8[6][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint7[lv_e5BA8FE58897], 2.0, 90.0), -1.0, 0.0));
            libNEXS_gv_selendis_adept_8[6][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_8[6][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_8[6][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 7)) {
        if ((libNEXS_gv_selendis_adept_8[7][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint7[lv_e5BA8FE58897], 2.0, 90.0), 3.0, 0.0));
            libNEXS_gv_selendis_adept_8[7][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_8[7][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_8[7][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 8)) {
        if ((libNEXS_gv_selendis_adept_8[8][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint7[lv_e5BA8FE58897], 2.0, 90.0), -3.0, 0.0));
            libNEXS_gv_selendis_adept_8[8][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_8[8][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_8[8][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 9)) {
        if ((libNEXS_gv_selendis_adept_8[9][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint7[lv_e5BA8FE58897], -2.0, 90.0), 1.0, 0.0));
            libNEXS_gv_selendis_adept_8[9][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_8[9][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_8[9][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 10)) {
        if ((libNEXS_gv_selendis_adept_8[10][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint7[lv_e5BA8FE58897], -2.0, 90.0), -1.0, 0.0));
            libNEXS_gv_selendis_adept_8[10][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_8[10][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_8[10][lv_e5BA8FE58897] = null;
    }

    if ((lp_e695B0E9878F >= 11)) {
        if ((libNEXS_gv_selendis_adept_8[11][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint7[lv_e5BA8FE58897], -2.0, 90.0), 3.0, 0.0));
            libNEXS_gv_selendis_adept_8[11][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_8[11][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_8[11][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 12)) {
        if ((libNEXS_gv_selendis_adept_8[12][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint7[lv_e5BA8FE58897], -2.0, 90.0), -3.0, 0.0));
            libNEXS_gv_selendis_adept_8[12][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_8[12][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_8[12][lv_e5BA8FE58897] = null;
    }

}

void libNEXS_gf_Selendis_Platform_Adept9 (int lp_e695B0E9878F, string lp_e6BC94E7AE97E4BD93ID, int lp_e782B9E4BD8D) {
    // Variable Declarations
    int lv_e5BA8FE58897;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_e782B9E4BD8D >= 0) && (lp_e782B9E4BD8D <= 7)) {
        lv_e5BA8FE58897 = lp_e782B9E4BD8D;
    }
    else {
        return ;
    }
    if ((lp_e695B0E9878F >= 1)) {
        if ((libNEXS_gv_selendis_adept_9[1][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint8[lv_e5BA8FE58897], -1.0, 90.0), 0.0, 0.0));
            libNEXS_gv_selendis_adept_9[1][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_9[1][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_9[1][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 2)) {
        if ((libNEXS_gv_selendis_adept_9[2][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint8[lv_e5BA8FE58897], -1.0, 90.0), 1.5, 0.0));
            libNEXS_gv_selendis_adept_9[2][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_9[2][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_9[2][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 3)) {
        if ((libNEXS_gv_selendis_adept_9[3][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint8[lv_e5BA8FE58897], -1.0, 90.0), -1.5, 0.0));
            libNEXS_gv_selendis_adept_9[3][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_9[3][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_9[3][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 4)) {
        if ((libNEXS_gv_selendis_adept_9[4][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint8[lv_e5BA8FE58897], 1.0, 90.0), 0.75, 0.0));
            libNEXS_gv_selendis_adept_9[4][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_9[4][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_9[4][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 5)) {
        if ((libNEXS_gv_selendis_adept_9[5][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint8[lv_e5BA8FE58897], 1.0, 90.0), -0.75, 0.0));
            libNEXS_gv_selendis_adept_9[5][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_9[5][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_9[5][lv_e5BA8FE58897] = null;
    }

    if ((lp_e695B0E9878F >= 6)) {
        if ((libNEXS_gv_selendis_adept_9[6][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint8[lv_e5BA8FE58897], 1.0, 90.0), 2.25, 0.0));
            libNEXS_gv_selendis_adept_9[6][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_9[6][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_9[6][lv_e5BA8FE58897] = null;
    }
    if ((lp_e695B0E9878F >= 7)) {
        if ((libNEXS_gv_selendis_adept_9[7][lv_e5BA8FE58897] == null)) {
            libNtve_gf_CreateActorAtPoint((lp_e6BC94E7AE97E4BD93ID), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendis_AdeptPoint8[lv_e5BA8FE58897], 1.0, 90.0), -2.25, 0.0));
            libNEXS_gv_selendis_adept_9[7][lv_e5BA8FE58897] = libNtve_gf_ActorLastCreated();
        }

    }
    else {
        ActorSend(libNEXS_gv_selendis_adept_9[7][lv_e5BA8FE58897], "Destroy");
        libNEXS_gv_selendis_adept_9[7][lv_e5BA8FE58897] = null;
    }

}

trigger auto_libNEXS_gf_SelendisUnitDeploy11_Trigger = null;
int auto_libNEXS_gf_SelendisUnitDeploy11_lp_unitAmount;
int auto_libNEXS_gf_SelendisUnitDeploy11_lp_spireNumber;

void libNEXS_gf_SelendisUnitDeploy11 (int lp_unitAmount, int lp_spireNumber) {
    auto_libNEXS_gf_SelendisUnitDeploy11_lp_unitAmount = lp_unitAmount;
    auto_libNEXS_gf_SelendisUnitDeploy11_lp_spireNumber = lp_spireNumber;

    if (auto_libNEXS_gf_SelendisUnitDeploy11_Trigger == null) {
        auto_libNEXS_gf_SelendisUnitDeploy11_Trigger = TriggerCreate("auto_libNEXS_gf_SelendisUnitDeploy11_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_SelendisUnitDeploy11_Trigger, false, false);
}

bool auto_libNEXS_gf_SelendisUnitDeploy11_TriggerFunc (bool testConds, bool runActions) {
    int lp_unitAmount = auto_libNEXS_gf_SelendisUnitDeploy11_lp_unitAmount;
    int lp_spireNumber = auto_libNEXS_gf_SelendisUnitDeploy11_lp_spireNumber;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_unitAmount == 1)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 2)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 3)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 4)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 5)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 6)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 7)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 8)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 9)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 10)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 11)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 12)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    return true;
}

trigger auto_libNEXS_gf_SelendisUnitDeploy12_Trigger = null;
int auto_libNEXS_gf_SelendisUnitDeploy12_lp_unitAmount;
int auto_libNEXS_gf_SelendisUnitDeploy12_lp_spireNumber;

void libNEXS_gf_SelendisUnitDeploy12 (int lp_unitAmount, int lp_spireNumber) {
    auto_libNEXS_gf_SelendisUnitDeploy12_lp_unitAmount = lp_unitAmount;
    auto_libNEXS_gf_SelendisUnitDeploy12_lp_spireNumber = lp_spireNumber;

    if (auto_libNEXS_gf_SelendisUnitDeploy12_Trigger == null) {
        auto_libNEXS_gf_SelendisUnitDeploy12_Trigger = TriggerCreate("auto_libNEXS_gf_SelendisUnitDeploy12_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_SelendisUnitDeploy12_Trigger, false, false);
}

bool auto_libNEXS_gf_SelendisUnitDeploy12_TriggerFunc (bool testConds, bool runActions) {
    int lp_unitAmount = auto_libNEXS_gf_SelendisUnitDeploy12_lp_unitAmount;
    int lp_spireNumber = auto_libNEXS_gf_SelendisUnitDeploy12_lp_spireNumber;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_unitAmount == 1)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 2)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 3)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 4)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 5)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 6)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 7)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 8)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 9)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 10)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 11)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 12)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 13)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 14)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 15)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 16)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 17)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 18)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 19)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 20)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 21)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 22)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 23)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 24)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 25)) {
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "TunerAdept", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    return true;
}

trigger auto_libNEXS_gf_SelendisUnitDeploy21_Trigger = null;
int auto_libNEXS_gf_SelendisUnitDeploy21_lp_unitAmount;
int auto_libNEXS_gf_SelendisUnitDeploy21_lp_spireNumber;

void libNEXS_gf_SelendisUnitDeploy21 (int lp_unitAmount, int lp_spireNumber) {
    auto_libNEXS_gf_SelendisUnitDeploy21_lp_unitAmount = lp_unitAmount;
    auto_libNEXS_gf_SelendisUnitDeploy21_lp_spireNumber = lp_spireNumber;

    if (auto_libNEXS_gf_SelendisUnitDeploy21_Trigger == null) {
        auto_libNEXS_gf_SelendisUnitDeploy21_Trigger = TriggerCreate("auto_libNEXS_gf_SelendisUnitDeploy21_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_SelendisUnitDeploy21_Trigger, false, false);
}

bool auto_libNEXS_gf_SelendisUnitDeploy21_TriggerFunc (bool testConds, bool runActions) {
    int lp_unitAmount = auto_libNEXS_gf_SelendisUnitDeploy21_lp_unitAmount;
    int lp_spireNumber = auto_libNEXS_gf_SelendisUnitDeploy21_lp_spireNumber;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_unitAmount == 1)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 2)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 3)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 4)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 5)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 6)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 7)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 8)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 9)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 10)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 11)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 12)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    return true;
}

trigger auto_libNEXS_gf_SelendisUnitDeploy22_Trigger = null;
int auto_libNEXS_gf_SelendisUnitDeploy22_lp_unitAmount;
int auto_libNEXS_gf_SelendisUnitDeploy22_lp_spireNumber;

void libNEXS_gf_SelendisUnitDeploy22 (int lp_unitAmount, int lp_spireNumber) {
    auto_libNEXS_gf_SelendisUnitDeploy22_lp_unitAmount = lp_unitAmount;
    auto_libNEXS_gf_SelendisUnitDeploy22_lp_spireNumber = lp_spireNumber;

    if (auto_libNEXS_gf_SelendisUnitDeploy22_Trigger == null) {
        auto_libNEXS_gf_SelendisUnitDeploy22_Trigger = TriggerCreate("auto_libNEXS_gf_SelendisUnitDeploy22_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_SelendisUnitDeploy22_Trigger, false, false);
}

bool auto_libNEXS_gf_SelendisUnitDeploy22_TriggerFunc (bool testConds, bool runActions) {
    int lp_unitAmount = auto_libNEXS_gf_SelendisUnitDeploy22_lp_unitAmount;
    int lp_spireNumber = auto_libNEXS_gf_SelendisUnitDeploy22_lp_spireNumber;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_unitAmount == 1)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 2)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 3)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 4)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 5)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 6)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 7)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 8)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 9)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 10)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 11)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 12)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 13)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 14)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 15)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 16)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 17)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 18)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 19)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 20)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 21)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 22)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 23)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 24)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 25)) {
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 1.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "HighIntonater", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    return true;
}

trigger auto_libNEXS_gf_SelendisUnitDeploy31_Trigger = null;
int auto_libNEXS_gf_SelendisUnitDeploy31_lp_unitAmount;
int auto_libNEXS_gf_SelendisUnitDeploy31_lp_spireNumber;

void libNEXS_gf_SelendisUnitDeploy31 (int lp_unitAmount, int lp_spireNumber) {
    auto_libNEXS_gf_SelendisUnitDeploy31_lp_unitAmount = lp_unitAmount;
    auto_libNEXS_gf_SelendisUnitDeploy31_lp_spireNumber = lp_spireNumber;

    if (auto_libNEXS_gf_SelendisUnitDeploy31_Trigger == null) {
        auto_libNEXS_gf_SelendisUnitDeploy31_Trigger = TriggerCreate("auto_libNEXS_gf_SelendisUnitDeploy31_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_SelendisUnitDeploy31_Trigger, false, false);
}

bool auto_libNEXS_gf_SelendisUnitDeploy31_TriggerFunc (bool testConds, bool runActions) {
    int lp_unitAmount = auto_libNEXS_gf_SelendisUnitDeploy31_lp_unitAmount;
    int lp_spireNumber = auto_libNEXS_gf_SelendisUnitDeploy31_lp_spireNumber;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_unitAmount == 1)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 2)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 3)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 4)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 5)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 6)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    return true;
}

trigger auto_libNEXS_gf_SelendisUnitDeploy32_Trigger = null;
int auto_libNEXS_gf_SelendisUnitDeploy32_lp_unitAmount;
int auto_libNEXS_gf_SelendisUnitDeploy32_lp_spireNumber;

void libNEXS_gf_SelendisUnitDeploy32 (int lp_unitAmount, int lp_spireNumber) {
    auto_libNEXS_gf_SelendisUnitDeploy32_lp_unitAmount = lp_unitAmount;
    auto_libNEXS_gf_SelendisUnitDeploy32_lp_spireNumber = lp_spireNumber;

    if (auto_libNEXS_gf_SelendisUnitDeploy32_Trigger == null) {
        auto_libNEXS_gf_SelendisUnitDeploy32_Trigger = TriggerCreate("auto_libNEXS_gf_SelendisUnitDeploy32_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_SelendisUnitDeploy32_Trigger, false, false);
}

bool auto_libNEXS_gf_SelendisUnitDeploy32_TriggerFunc (bool testConds, bool runActions) {
    int lp_unitAmount = auto_libNEXS_gf_SelendisUnitDeploy32_lp_unitAmount;
    int lp_spireNumber = auto_libNEXS_gf_SelendisUnitDeploy32_lp_spireNumber;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_unitAmount == 1)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 2)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 3)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 4)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 5)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -6.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 6.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 6)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 7)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 8)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 9)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -6.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 6.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 10)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -6.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 6.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -6.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 6.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    return true;
}

trigger auto_libNEXS_gf_SelendisUnitDeploy33_Trigger = null;
int auto_libNEXS_gf_SelendisUnitDeploy33_lp_unitAmount;
int auto_libNEXS_gf_SelendisUnitDeploy33_lp_spireNumber;

void libNEXS_gf_SelendisUnitDeploy33 (int lp_unitAmount, int lp_spireNumber) {
    auto_libNEXS_gf_SelendisUnitDeploy33_lp_unitAmount = lp_unitAmount;
    auto_libNEXS_gf_SelendisUnitDeploy33_lp_spireNumber = lp_spireNumber;

    if (auto_libNEXS_gf_SelendisUnitDeploy33_Trigger == null) {
        auto_libNEXS_gf_SelendisUnitDeploy33_Trigger = TriggerCreate("auto_libNEXS_gf_SelendisUnitDeploy33_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_SelendisUnitDeploy33_Trigger, false, false);
}

bool auto_libNEXS_gf_SelendisUnitDeploy33_TriggerFunc (bool testConds, bool runActions) {
    int lp_unitAmount = auto_libNEXS_gf_SelendisUnitDeploy33_lp_unitAmount;
    int lp_spireNumber = auto_libNEXS_gf_SelendisUnitDeploy33_lp_spireNumber;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_unitAmount == 1)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 2)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 3)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 4)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 5)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 6)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 7)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 8)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 9)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 10)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 11)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 12)) {
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "PunishArchon", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    return true;
}

trigger auto_libNEXS_gf_SelendisUnitDeploy41_Trigger = null;
int auto_libNEXS_gf_SelendisUnitDeploy41_lp_unitAmount;
int auto_libNEXS_gf_SelendisUnitDeploy41_lp_spireNumber;

void libNEXS_gf_SelendisUnitDeploy41 (int lp_unitAmount, int lp_spireNumber) {
    auto_libNEXS_gf_SelendisUnitDeploy41_lp_unitAmount = lp_unitAmount;
    auto_libNEXS_gf_SelendisUnitDeploy41_lp_spireNumber = lp_spireNumber;

    if (auto_libNEXS_gf_SelendisUnitDeploy41_Trigger == null) {
        auto_libNEXS_gf_SelendisUnitDeploy41_Trigger = TriggerCreate("auto_libNEXS_gf_SelendisUnitDeploy41_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_SelendisUnitDeploy41_Trigger, false, false);
}

bool auto_libNEXS_gf_SelendisUnitDeploy41_TriggerFunc (bool testConds, bool runActions) {
    int lp_unitAmount = auto_libNEXS_gf_SelendisUnitDeploy41_lp_unitAmount;
    int lp_spireNumber = auto_libNEXS_gf_SelendisUnitDeploy41_lp_spireNumber;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_unitAmount == 1)) {
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 2)) {
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 3)) {
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 4)) {
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 5)) {
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 6)) {
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 7)) {
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisColossus", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    return true;
}

trigger auto_libNEXS_gf_SelendisUnitDeploy51_Trigger = null;
int auto_libNEXS_gf_SelendisUnitDeploy51_lp_unitAmount;
int auto_libNEXS_gf_SelendisUnitDeploy51_lp_spireNumber;

void libNEXS_gf_SelendisUnitDeploy51 (int lp_unitAmount, int lp_spireNumber) {
    auto_libNEXS_gf_SelendisUnitDeploy51_lp_unitAmount = lp_unitAmount;
    auto_libNEXS_gf_SelendisUnitDeploy51_lp_spireNumber = lp_spireNumber;

    if (auto_libNEXS_gf_SelendisUnitDeploy51_Trigger == null) {
        auto_libNEXS_gf_SelendisUnitDeploy51_Trigger = TriggerCreate("auto_libNEXS_gf_SelendisUnitDeploy51_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_SelendisUnitDeploy51_Trigger, false, false);
}

bool auto_libNEXS_gf_SelendisUnitDeploy51_TriggerFunc (bool testConds, bool runActions) {
    int lp_unitAmount = auto_libNEXS_gf_SelendisUnitDeploy51_lp_unitAmount;
    int lp_spireNumber = auto_libNEXS_gf_SelendisUnitDeploy51_lp_spireNumber;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_unitAmount == 1)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 2)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 3)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 4)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 5)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 6)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 7)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 8)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 9)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 10)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 11)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 12)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    return true;
}

trigger auto_libNEXS_gf_SelendisUnitDeploy52_Trigger = null;
int auto_libNEXS_gf_SelendisUnitDeploy52_lp_unitAmount;
int auto_libNEXS_gf_SelendisUnitDeploy52_lp_spireNumber;

void libNEXS_gf_SelendisUnitDeploy52 (int lp_unitAmount, int lp_spireNumber) {
    auto_libNEXS_gf_SelendisUnitDeploy52_lp_unitAmount = lp_unitAmount;
    auto_libNEXS_gf_SelendisUnitDeploy52_lp_spireNumber = lp_spireNumber;

    if (auto_libNEXS_gf_SelendisUnitDeploy52_Trigger == null) {
        auto_libNEXS_gf_SelendisUnitDeploy52_Trigger = TriggerCreate("auto_libNEXS_gf_SelendisUnitDeploy52_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_SelendisUnitDeploy52_Trigger, false, false);
}

bool auto_libNEXS_gf_SelendisUnitDeploy52_TriggerFunc (bool testConds, bool runActions) {
    int lp_unitAmount = auto_libNEXS_gf_SelendisUnitDeploy52_lp_unitAmount;
    int lp_spireNumber = auto_libNEXS_gf_SelendisUnitDeploy52_lp_spireNumber;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_unitAmount == 1)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 2)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 3)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 4)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 5)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 6)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 7)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 8)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 9)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 10)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 11)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 12)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 13)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 14)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 15)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 16)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 17)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 18)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 19)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 20)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 21)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 22)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 23)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 24)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 25)) {
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisPhoenix", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    return true;
}

trigger auto_libNEXS_gf_SelendisUnitDeploy61_Trigger = null;
int auto_libNEXS_gf_SelendisUnitDeploy61_lp_unitAmount;
int auto_libNEXS_gf_SelendisUnitDeploy61_lp_spireNumber;

void libNEXS_gf_SelendisUnitDeploy61 (int lp_unitAmount, int lp_spireNumber) {
    auto_libNEXS_gf_SelendisUnitDeploy61_lp_unitAmount = lp_unitAmount;
    auto_libNEXS_gf_SelendisUnitDeploy61_lp_spireNumber = lp_spireNumber;

    if (auto_libNEXS_gf_SelendisUnitDeploy61_Trigger == null) {
        auto_libNEXS_gf_SelendisUnitDeploy61_Trigger = TriggerCreate("auto_libNEXS_gf_SelendisUnitDeploy61_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_SelendisUnitDeploy61_Trigger, false, false);
}

bool auto_libNEXS_gf_SelendisUnitDeploy61_TriggerFunc (bool testConds, bool runActions) {
    int lp_unitAmount = auto_libNEXS_gf_SelendisUnitDeploy61_lp_unitAmount;
    int lp_spireNumber = auto_libNEXS_gf_SelendisUnitDeploy61_lp_spireNumber;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_unitAmount == 1)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 2)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 3)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 4)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 5)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 6)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 7)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 8)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 9)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 10)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 11)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 12)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    return true;
}

trigger auto_libNEXS_gf_SelendisUnitDeploy62_Trigger = null;
int auto_libNEXS_gf_SelendisUnitDeploy62_lp_unitAmount;
int auto_libNEXS_gf_SelendisUnitDeploy62_lp_spireNumber;

void libNEXS_gf_SelendisUnitDeploy62 (int lp_unitAmount, int lp_spireNumber) {
    auto_libNEXS_gf_SelendisUnitDeploy62_lp_unitAmount = lp_unitAmount;
    auto_libNEXS_gf_SelendisUnitDeploy62_lp_spireNumber = lp_spireNumber;

    if (auto_libNEXS_gf_SelendisUnitDeploy62_Trigger == null) {
        auto_libNEXS_gf_SelendisUnitDeploy62_Trigger = TriggerCreate("auto_libNEXS_gf_SelendisUnitDeploy62_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_SelendisUnitDeploy62_Trigger, false, false);
}

bool auto_libNEXS_gf_SelendisUnitDeploy62_TriggerFunc (bool testConds, bool runActions) {
    int lp_unitAmount = auto_libNEXS_gf_SelendisUnitDeploy62_lp_unitAmount;
    int lp_spireNumber = auto_libNEXS_gf_SelendisUnitDeploy62_lp_spireNumber;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_unitAmount == 1)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 2)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 3)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 4)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 5)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 6)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 7)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 8)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 9)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 10)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 11)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 12)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 13)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 14)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 15)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 16)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 17)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 18)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 19)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 20)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 21)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 22)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 23)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 24)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 25)) {
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 2.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 4.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 2.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisOracle", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 8.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    return true;
}

trigger auto_libNEXS_gf_SelendisUnitDeploy71_Trigger = null;
int auto_libNEXS_gf_SelendisUnitDeploy71_lp_unitAmount;
int auto_libNEXS_gf_SelendisUnitDeploy71_lp_spireNumber;

void libNEXS_gf_SelendisUnitDeploy71 (int lp_unitAmount, int lp_spireNumber) {
    auto_libNEXS_gf_SelendisUnitDeploy71_lp_unitAmount = lp_unitAmount;
    auto_libNEXS_gf_SelendisUnitDeploy71_lp_spireNumber = lp_spireNumber;

    if (auto_libNEXS_gf_SelendisUnitDeploy71_Trigger == null) {
        auto_libNEXS_gf_SelendisUnitDeploy71_Trigger = TriggerCreate("auto_libNEXS_gf_SelendisUnitDeploy71_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_SelendisUnitDeploy71_Trigger, false, false);
}

bool auto_libNEXS_gf_SelendisUnitDeploy71_TriggerFunc (bool testConds, bool runActions) {
    int lp_unitAmount = auto_libNEXS_gf_SelendisUnitDeploy71_lp_unitAmount;
    int lp_spireNumber = auto_libNEXS_gf_SelendisUnitDeploy71_lp_spireNumber;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_unitAmount == 1)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 2)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 3)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 4)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 5)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 6)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    return true;
}

trigger auto_libNEXS_gf_SelendisUnitDeploy72_Trigger = null;
int auto_libNEXS_gf_SelendisUnitDeploy72_lp_unitAmount;
int auto_libNEXS_gf_SelendisUnitDeploy72_lp_spireNumber;

void libNEXS_gf_SelendisUnitDeploy72 (int lp_unitAmount, int lp_spireNumber) {
    auto_libNEXS_gf_SelendisUnitDeploy72_lp_unitAmount = lp_unitAmount;
    auto_libNEXS_gf_SelendisUnitDeploy72_lp_spireNumber = lp_spireNumber;

    if (auto_libNEXS_gf_SelendisUnitDeploy72_Trigger == null) {
        auto_libNEXS_gf_SelendisUnitDeploy72_Trigger = TriggerCreate("auto_libNEXS_gf_SelendisUnitDeploy72_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_SelendisUnitDeploy72_Trigger, false, false);
}

bool auto_libNEXS_gf_SelendisUnitDeploy72_TriggerFunc (bool testConds, bool runActions) {
    int lp_unitAmount = auto_libNEXS_gf_SelendisUnitDeploy72_lp_unitAmount;
    int lp_spireNumber = auto_libNEXS_gf_SelendisUnitDeploy72_lp_spireNumber;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_unitAmount == 1)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 2)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 3)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 4)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 5)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -6.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 6.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 6)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 7)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 8)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 9)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -6.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 6.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 10)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -6.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 6.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -6.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 6.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    return true;
}

trigger auto_libNEXS_gf_SelendisUnitDeploy73_Trigger = null;
int auto_libNEXS_gf_SelendisUnitDeploy73_lp_unitAmount;
int auto_libNEXS_gf_SelendisUnitDeploy73_lp_spireNumber;

void libNEXS_gf_SelendisUnitDeploy73 (int lp_unitAmount, int lp_spireNumber) {
    auto_libNEXS_gf_SelendisUnitDeploy73_lp_unitAmount = lp_unitAmount;
    auto_libNEXS_gf_SelendisUnitDeploy73_lp_spireNumber = lp_spireNumber;

    if (auto_libNEXS_gf_SelendisUnitDeploy73_Trigger == null) {
        auto_libNEXS_gf_SelendisUnitDeploy73_Trigger = TriggerCreate("auto_libNEXS_gf_SelendisUnitDeploy73_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_SelendisUnitDeploy73_Trigger, false, false);
}

bool auto_libNEXS_gf_SelendisUnitDeploy73_TriggerFunc (bool testConds, bool runActions) {
    int lp_unitAmount = auto_libNEXS_gf_SelendisUnitDeploy73_lp_unitAmount;
    int lp_spireNumber = auto_libNEXS_gf_SelendisUnitDeploy73_lp_spireNumber;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_unitAmount == 1)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 2)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 3)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 4)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 5)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 6)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 7)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 8)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 9)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 10)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 11)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 12)) {
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisVoidRay", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 6.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    return true;
}

trigger auto_libNEXS_gf_SelendisUnitDeploy81_Trigger = null;
int auto_libNEXS_gf_SelendisUnitDeploy81_lp_unitAmount;
int auto_libNEXS_gf_SelendisUnitDeploy81_lp_spireNumber;

void libNEXS_gf_SelendisUnitDeploy81 (int lp_unitAmount, int lp_spireNumber) {
    auto_libNEXS_gf_SelendisUnitDeploy81_lp_unitAmount = lp_unitAmount;
    auto_libNEXS_gf_SelendisUnitDeploy81_lp_spireNumber = lp_spireNumber;

    if (auto_libNEXS_gf_SelendisUnitDeploy81_Trigger == null) {
        auto_libNEXS_gf_SelendisUnitDeploy81_Trigger = TriggerCreate("auto_libNEXS_gf_SelendisUnitDeploy81_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_SelendisUnitDeploy81_Trigger, false, false);
}

bool auto_libNEXS_gf_SelendisUnitDeploy81_TriggerFunc (bool testConds, bool runActions) {
    int lp_unitAmount = auto_libNEXS_gf_SelendisUnitDeploy81_lp_unitAmount;
    int lp_spireNumber = auto_libNEXS_gf_SelendisUnitDeploy81_lp_spireNumber;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_unitAmount == 1)) {
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 2)) {
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 3)) {
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 4)) {
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 5)) {
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 6)) {
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), libNEXS_gv_selendisAttackStart, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    else if ((lp_unitAmount == 7)) {
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 1.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 0.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 4.5, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 0.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), -3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
        UnitCreate(1, "SelendisCarrier", 0, EventPlayer(), PointWithOffsetPolar(PointWithOffsetPolar(libNEXS_gv_selendisAttackStart, 3.0, AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd)), 3.0, (AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd) + 90.0)), AngleBetweenPoints(libNEXS_gv_selendisAttackStart, libNEXS_gv_selendisAttackEnd));
        UnitGroupAdd(libNEXS_gv_selendisUnitGroup[lp_spireNumber], UnitLastCreated());
    }
    return true;
}

int libNEXS_gf_SelendisUnitAttackNexusSelect (unit lp_psiSpireNexusUnit) {
    // Variable Declarations
    int lv_unitType;
    int lv_value;
    int lv_platformCountMax;

    // Automatic Variable Declarations
    int autoAD683AE6_ae;
    const int autoAD683AE6_ai = 1;
    int auto5EBA5645_ae;
    const int auto5EBA5645_ai = 1;
    int auto9F5B2C38_ae;
    const int auto9F5B2C38_ai = 1;
    int auto72D74992_ae;
    const int auto72D74992_ai = 1;
    int auto713AA1BD_ae;
    const int auto713AA1BD_ai = 1;
    int auto40E6A76A_ae;
    const int auto40E6A76A_ai = 1;
    int auto66728E94_ae;
    const int auto66728E94_ai = 1;
    int autoDA791E2E_ae;
    const int autoDA791E2E_ai = 1;

    // Variable Initialization
    lv_value = 1;
    lv_platformCountMax = 8;

    // Implementation
    if ((UnitIsAlive(lp_psiSpireNexusUnit) == true)) {
        if ((UnitHasBehavior2(lp_psiSpireNexusUnit, "SelendisNexusChoiceSeriesAdept") == true)) {
            autoAD683AE6_ae = (lv_platformCountMax - 1);
            lv_value = 0;
            for ( ; ( (autoAD683AE6_ai >= 0 && lv_value <= autoAD683AE6_ae) || (autoAD683AE6_ai < 0 && lv_value >= autoAD683AE6_ae) ) ; lv_value += autoAD683AE6_ai ) {
                if ((UnitGetPosition(lp_psiSpireNexusUnit) == libNEXS_gv_selendis_AdeptPoint[lv_value])) {
                    libNEXS_gf_Selendis_Platform_Adept2(0, "SelendisPlatformImpact_Adept", lv_value);
                    lv_unitType = 0;
                    break;
                }

            }
        }
        else if ((UnitHasBehavior2(lp_psiSpireNexusUnit, "SelendisNexusChoiceSeriesHighTemplar") == true)) {
            auto5EBA5645_ae = (lv_platformCountMax - 1);
            lv_value = 0;
            for ( ; ( (auto5EBA5645_ai >= 0 && lv_value <= auto5EBA5645_ae) || (auto5EBA5645_ai < 0 && lv_value >= auto5EBA5645_ae) ) ; lv_value += auto5EBA5645_ai ) {
                if ((UnitGetPosition(lp_psiSpireNexusUnit) == libNEXS_gv_selendis_AdeptPoint2[lv_value])) {
                    libNEXS_gf_Selendis_Platform_Adept3(0, "SelendisPlatformImpact_HighTemplar", lv_value);
                    lv_unitType = 1;
                    break;
                }

            }
        }
        else if ((UnitHasBehavior2(lp_psiSpireNexusUnit, "SelendisNexusChoiceSeriesArchon") == true)) {
            auto9F5B2C38_ae = (lv_platformCountMax - 1);
            lv_value = 0;
            for ( ; ( (auto9F5B2C38_ai >= 0 && lv_value <= auto9F5B2C38_ae) || (auto9F5B2C38_ai < 0 && lv_value >= auto9F5B2C38_ae) ) ; lv_value += auto9F5B2C38_ai ) {
                if ((UnitGetPosition(lp_psiSpireNexusUnit) == libNEXS_gv_selendis_AdeptPoint3[lv_value])) {
                    libNEXS_gf_Selendis_Platform_Adept4(0, "SelendisPlatformImpact_Archon", lv_value);
                    lv_unitType = 2;
                    break;
                }

            }
        }
        else if ((UnitHasBehavior2(lp_psiSpireNexusUnit, "SelendisNexusChoiceSeriesColossus") == true)) {
            auto72D74992_ae = (lv_platformCountMax - 1);
            lv_value = 0;
            for ( ; ( (auto72D74992_ai >= 0 && lv_value <= auto72D74992_ae) || (auto72D74992_ai < 0 && lv_value >= auto72D74992_ae) ) ; lv_value += auto72D74992_ai ) {
                if ((UnitGetPosition(lp_psiSpireNexusUnit) == libNEXS_gv_selendis_AdeptPoint4[lv_value])) {
                    libNEXS_gf_Selendis_Platform_Adept5(0, "SelendisPlatformImpact_Colossus", lv_value);
                    lv_unitType = 3;
                    break;
                }

            }
        }
        else if ((UnitHasBehavior2(lp_psiSpireNexusUnit, "SelendisNexusChoiceSeriesPhoenix") == true)) {
            auto713AA1BD_ae = (lv_platformCountMax - 1);
            lv_value = 0;
            for ( ; ( (auto713AA1BD_ai >= 0 && lv_value <= auto713AA1BD_ae) || (auto713AA1BD_ai < 0 && lv_value >= auto713AA1BD_ae) ) ; lv_value += auto713AA1BD_ai ) {
                if ((UnitGetPosition(lp_psiSpireNexusUnit) == libNEXS_gv_selendis_AdeptPoint5[lv_value])) {
                    libNEXS_gf_Selendis_Platform_Adept6(0, "SelendisPlatformImpact_Phoenix", lv_value);
                    lv_unitType = 4;
                    break;
                }

            }
        }
        else if ((UnitHasBehavior2(lp_psiSpireNexusUnit, "SelendisNexusChoiceSeriesOracle") == true)) {
            auto40E6A76A_ae = (lv_platformCountMax - 1);
            lv_value = 0;
            for ( ; ( (auto40E6A76A_ai >= 0 && lv_value <= auto40E6A76A_ae) || (auto40E6A76A_ai < 0 && lv_value >= auto40E6A76A_ae) ) ; lv_value += auto40E6A76A_ai ) {
                if ((UnitGetPosition(lp_psiSpireNexusUnit) == libNEXS_gv_selendis_AdeptPoint6[lv_value])) {
                    libNEXS_gf_Selendis_Platform_Adept7(0, "SelendisPlatformImpact_Oracle", lv_value);
                    lv_unitType = 5;
                    break;
                }

            }
        }
        else if ((UnitHasBehavior2(lp_psiSpireNexusUnit, "SelendisNexusChoiceSeriesVoidRay") == true)) {
            auto66728E94_ae = (lv_platformCountMax - 1);
            lv_value = 0;
            for ( ; ( (auto66728E94_ai >= 0 && lv_value <= auto66728E94_ae) || (auto66728E94_ai < 0 && lv_value >= auto66728E94_ae) ) ; lv_value += auto66728E94_ai ) {
                if ((UnitGetPosition(lp_psiSpireNexusUnit) == libNEXS_gv_selendis_AdeptPoint7[lv_value])) {
                    libNEXS_gf_Selendis_Platform_Adept8(0, "SelendisPlatformImpact_VoidRay", lv_value);
                    lv_unitType = 6;
                    break;
                }

            }
        }
        else if ((UnitHasBehavior2(lp_psiSpireNexusUnit, "SelendisNexusChoiceSeriesCarrier") == true)) {
            autoDA791E2E_ae = (lv_platformCountMax - 1);
            lv_value = 0;
            for ( ; ( (autoDA791E2E_ai >= 0 && lv_value <= autoDA791E2E_ae) || (autoDA791E2E_ai < 0 && lv_value >= autoDA791E2E_ae) ) ; lv_value += autoDA791E2E_ai ) {
                if ((UnitGetPosition(lp_psiSpireNexusUnit) == libNEXS_gv_selendis_AdeptPoint8[lv_value])) {
                    libNEXS_gf_Selendis_Platform_Adept9(0, "SelendisPlatformImpact_Carrier", lv_value);
                    lv_unitType = 7;
                    break;
                }

            }
        }
    }

    return lv_unitType;
}

trigger auto_libNEXS_gf_SelendisRecall_Trigger = null;

void libNEXS_gf_SelendisRecall () {
    if (auto_libNEXS_gf_SelendisRecall_Trigger == null) {
        auto_libNEXS_gf_SelendisRecall_Trigger = TriggerCreate("auto_libNEXS_gf_SelendisRecall_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_SelendisRecall_Trigger, false, false);
}

bool auto_libNEXS_gf_SelendisRecall_TriggerFunc (bool testConds, bool runActions) {
    int init_i;
    int init_j;

    // Variable Declarations
    unitgroup lv_selendisUnit;
    int lv_spireNumber;
    unitgroup[9][4] lv_spireGroup;
    int lv_unitType;
    int[9] lv_unitAmount;
    int[9][4] lv_maxAmount;
    int[9][4] lv_unitAmountLevel;
    region lv_deleteArea;
    unitgroup[9] lv_unitTypeSpireGroup;

    // Automatic Variable Declarations
    const int auto653CCEAC_ae = 7;
    const int auto653CCEAC_ai = 1;
    unitgroup auto9179697F_g;
    int auto9179697F_u;
    unit auto9179697F_var;
    const int auto9F68E18B_ae = 7;
    const int auto9F68E18B_ai = 1;
    unitgroup autoEC4DC5C7_g;
    int autoEC4DC5C7_u;
    unit autoEC4DC5C7_var;
    unitgroup autoB04933BA_g;
    int autoB04933BA_u;
    unit autoB04933BA_var;
    unitgroup auto8055FB5C_g;
    int auto8055FB5C_u;
    unit auto8055FB5C_var;
    unitgroup autoB2C8F95E_g;
    int autoB2C8F95E_u;
    unit autoB2C8F95E_var;
    unitgroup auto9A95B804_g;
    int auto9A95B804_u;
    unit auto9A95B804_var;
    unitgroup autoD1B71CCE_g;
    int autoD1B71CCE_u;
    unit autoD1B71CCE_var;
    unitgroup auto8FBB2E33_g;
    int auto8FBB2E33_u;
    unit auto8FBB2E33_var;
    unitgroup autoA2CCE2BE_g;
    int autoA2CCE2BE_u;
    unit autoA2CCE2BE_var;
    unitgroup autoC6A3C6FD_g;
    int autoC6A3C6FD_u;
    unit autoC6A3C6FD_var;
    unitgroup auto3176EC52_g;
    int auto3176EC52_u;
    unit auto3176EC52_var;
    unitgroup auto64809441_g;
    int auto64809441_u;
    unit auto64809441_var;
    unitgroup auto2B37D085_g;
    int auto2B37D085_u;
    unit auto2B37D085_var;
    unitgroup auto8B2DBABB_g;
    int auto8B2DBABB_u;
    unit auto8B2DBABB_var;
    unitgroup auto70BB3355_g;
    int auto70BB3355_u;
    unit auto70BB3355_var;
    unitgroup auto305B8086_g;
    int auto305B8086_u;
    unit auto305B8086_var;
    unitgroup autoC5BE56A4_g;
    int autoC5BE56A4_u;
    unit autoC5BE56A4_var;
    unitgroup auto9FD61167_g;
    int auto9FD61167_u;
    unit auto9FD61167_var;
    unitgroup auto182885C5_g;
    int auto182885C5_u;
    unit auto182885C5_var;
    unitgroup autoD6714860_g;
    int autoD6714860_u;
    unit autoD6714860_var;
    unitgroup autoE3773DAE_g;
    int autoE3773DAE_u;
    unit autoE3773DAE_var;
    unitgroup autoE40A23EF_g;
    int autoE40A23EF_u;
    unit autoE40A23EF_var;
    unitgroup auto94088B87_g;
    int auto94088B87_u;
    unit auto94088B87_var;
    unitgroup autoDB81919C_g;
    int autoDB81919C_u;
    unit autoDB81919C_var;
    unitgroup autoABC85673_g;
    int autoABC85673_u;
    unit autoABC85673_var;
    unitgroup autoFF2B0ABC_g;
    int autoFF2B0ABC_u;
    unit autoFF2B0ABC_var;
    unitgroup auto885CBAC6_g;
    int auto885CBAC6_u;
    unit auto885CBAC6_var;
    unitgroup auto0980B2D7_g;
    int auto0980B2D7_u;
    unit auto0980B2D7_var;
    unitgroup auto9E849D8B_g;
    int auto9E849D8B_u;
    unit auto9E849D8B_var;

    // Variable Initialization
    lv_selendisUnit = UnitGroupEmpty();
    for (init_i = 0; init_i <= 8; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            lv_spireGroup[init_i][init_j] = UnitGroupEmpty();
        }
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        lv_unitTypeSpireGroup[init_i] = UnitGroupEmpty();
    }

    // Implementation
    lv_maxAmount[0][0] = 12;
    lv_maxAmount[0][1] = 20;
    lv_maxAmount[0][2] = 25;
    lv_maxAmount[1][0] = 12;
    lv_maxAmount[1][1] = 20;
    lv_maxAmount[1][2] = 25;
    lv_maxAmount[2][0] = 6;
    lv_maxAmount[2][1] = 10;
    lv_maxAmount[2][2] = 12;
    lv_maxAmount[3][0] = 3;
    lv_maxAmount[3][1] = 5;
    lv_maxAmount[3][2] = 7;
    lv_maxAmount[4][0] = 12;
    lv_maxAmount[4][1] = 20;
    lv_maxAmount[4][2] = 25;
    lv_maxAmount[5][0] = 12;
    lv_maxAmount[5][1] = 20;
    lv_maxAmount[5][2] = 25;
    lv_maxAmount[6][0] = 6;
    lv_maxAmount[6][1] = 10;
    lv_maxAmount[6][2] = 12;
    lv_maxAmount[7][0] = 3;
    lv_maxAmount[7][1] = 5;
    lv_maxAmount[7][2] = 7;
    lv_spireNumber = 0;
    for ( ; ( (auto653CCEAC_ai >= 0 && lv_spireNumber <= auto653CCEAC_ae) || (auto653CCEAC_ai < 0 && lv_spireNumber >= auto653CCEAC_ae) ) ; lv_spireNumber += auto653CCEAC_ai ) {
        UnitGroupAddUnitGroup(lv_selendisUnit, libNEXS_gv_selendisUnitGroup[lv_spireNumber]);
        if ((UnitIsAlive(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber]) == true)) {
            if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisNexusChoiceSeriesAdept") == true) && (TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarHasBegun" + IntToString((lv_spireNumber + 1)))), c_techCountQueuedOrBetter) == 1)) {
                if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisPlatformUpgradeLv2AB") == true)) {
                    if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisPlatformUpgradeLv3AB") == true)) {
                        UnitGroupAdd(lv_spireGroup[0][2], libNEXS_gv_selendis_Nexus_Group[lv_spireNumber]);
                    }
                    else {
                        UnitGroupAdd(lv_spireGroup[0][1], libNEXS_gv_selendis_Nexus_Group[lv_spireNumber]);
                    }
                }
                else {
                    UnitGroupAdd(lv_spireGroup[0][0], libNEXS_gv_selendis_Nexus_Group[lv_spireNumber]);
                }
                lv_unitAmount[0] += UnitBehaviorCount(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisPlatformUnitCreateCaster");
            }
            else if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisNexusChoiceSeriesHighTemplar") == true) && (TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarHasBegun" + IntToString((lv_spireNumber + 1)))), c_techCountQueuedOrBetter) == 1)) {
                if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisPlatformUpgradeLv2AB") == true)) {
                    if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisPlatformUpgradeLv3AB") == true)) {
                        UnitGroupAdd(lv_spireGroup[1][2], libNEXS_gv_selendis_Nexus_Group[lv_spireNumber]);
                    }
                    else {
                        UnitGroupAdd(lv_spireGroup[1][1], libNEXS_gv_selendis_Nexus_Group[lv_spireNumber]);
                    }
                }
                else {
                    UnitGroupAdd(lv_spireGroup[1][0], libNEXS_gv_selendis_Nexus_Group[lv_spireNumber]);
                }
                lv_unitAmount[1] += UnitBehaviorCount(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisPlatformUnitCreateCaster");
            }
            else if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisNexusChoiceSeriesArchon") == true) && (TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarHasBegun" + IntToString((lv_spireNumber + 1)))), c_techCountQueuedOrBetter) == 1)) {
                if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisPlatformUpgradeLv2AB") == true)) {
                    if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisPlatformUpgradeLv3AB") == true)) {
                        UnitGroupAdd(lv_spireGroup[2][2], libNEXS_gv_selendis_Nexus_Group[lv_spireNumber]);
                    }
                    else {
                        UnitGroupAdd(lv_spireGroup[2][1], libNEXS_gv_selendis_Nexus_Group[lv_spireNumber]);
                    }
                }
                else {
                    UnitGroupAdd(lv_spireGroup[2][0], libNEXS_gv_selendis_Nexus_Group[lv_spireNumber]);
                }
                lv_unitAmount[2] += UnitBehaviorCount(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisPlatformUnitCreateCaster");
            }
            else if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisNexusChoiceSeriesColossus") == true) && (TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarHasBegun" + IntToString((lv_spireNumber + 1)))), c_techCountQueuedOrBetter) == 1)) {
                if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisPlatformUpgradeLv2AB") == true)) {
                    if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisPlatformUpgradeLv3AB") == true)) {
                        UnitGroupAdd(lv_spireGroup[3][2], libNEXS_gv_selendis_Nexus_Group[lv_spireNumber]);
                    }
                    else {
                        UnitGroupAdd(lv_spireGroup[3][1], libNEXS_gv_selendis_Nexus_Group[lv_spireNumber]);
                    }
                }
                else {
                    UnitGroupAdd(lv_spireGroup[3][0], libNEXS_gv_selendis_Nexus_Group[lv_spireNumber]);
                }
                lv_unitAmount[3] += UnitBehaviorCount(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisPlatformUnitCreateCaster");
            }
            else if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisNexusChoiceSeriesPhoenix") == true) && (TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarHasBegun" + IntToString((lv_spireNumber + 1)))), c_techCountQueuedOrBetter) == 1)) {
                if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisPlatformUpgradeLv2AB") == true)) {
                    if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisPlatformUpgradeLv3AB") == true)) {
                        UnitGroupAdd(lv_spireGroup[4][2], libNEXS_gv_selendis_Nexus_Group[lv_spireNumber]);
                    }
                    else {
                        UnitGroupAdd(lv_spireGroup[4][1], libNEXS_gv_selendis_Nexus_Group[lv_spireNumber]);
                    }
                }
                else {
                    UnitGroupAdd(lv_spireGroup[4][0], libNEXS_gv_selendis_Nexus_Group[lv_spireNumber]);
                }
                lv_unitAmount[4] += UnitBehaviorCount(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisPlatformUnitCreateCaster");
            }
            else if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisNexusChoiceSeriesOracle") == true) && (TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarHasBegun" + IntToString((lv_spireNumber + 1)))), c_techCountQueuedOrBetter) == 1)) {
                if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisPlatformUpgradeLv2AB") == true)) {
                    if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisPlatformUpgradeLv3AB") == true)) {
                        UnitGroupAdd(lv_spireGroup[5][2], libNEXS_gv_selendis_Nexus_Group[lv_spireNumber]);
                    }
                    else {
                        UnitGroupAdd(lv_spireGroup[5][1], libNEXS_gv_selendis_Nexus_Group[lv_spireNumber]);
                    }
                }
                else {
                    UnitGroupAdd(lv_spireGroup[5][0], libNEXS_gv_selendis_Nexus_Group[lv_spireNumber]);
                }
                lv_unitAmount[5] += UnitBehaviorCount(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisPlatformUnitCreateCaster");
            }
            else if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisNexusChoiceSeriesVoidRay") == true) && (TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarHasBegun" + IntToString((lv_spireNumber + 1)))), c_techCountQueuedOrBetter) == 1)) {
                if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisPlatformUpgradeLv2AB") == true)) {
                    if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisPlatformUpgradeLv3AB") == true)) {
                        UnitGroupAdd(lv_spireGroup[6][2], libNEXS_gv_selendis_Nexus_Group[lv_spireNumber]);
                    }
                    else {
                        UnitGroupAdd(lv_spireGroup[6][1], libNEXS_gv_selendis_Nexus_Group[lv_spireNumber]);
                    }
                }
                else {
                    UnitGroupAdd(lv_spireGroup[6][0], libNEXS_gv_selendis_Nexus_Group[lv_spireNumber]);
                }
                lv_unitAmount[6] += UnitBehaviorCount(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisPlatformUnitCreateCaster");
            }
            else if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisNexusChoiceSeriesCarrier") == true) && (TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarHasBegun" + IntToString((lv_spireNumber + 1)))), c_techCountQueuedOrBetter) == 1)) {
                if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisPlatformUpgradeLv2AB") == true)) {
                    if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisPlatformUpgradeLv3AB") == true)) {
                        UnitGroupAdd(lv_spireGroup[7][2], libNEXS_gv_selendis_Nexus_Group[lv_spireNumber]);
                    }
                    else {
                        UnitGroupAdd(lv_spireGroup[7][1], libNEXS_gv_selendis_Nexus_Group[lv_spireNumber]);
                    }
                }
                else {
                    UnitGroupAdd(lv_spireGroup[7][0], libNEXS_gv_selendis_Nexus_Group[lv_spireNumber]);
                }
                lv_unitAmount[7] += UnitBehaviorCount(libNEXS_gv_selendis_Nexus_Group[lv_spireNumber], "SelendisPlatformUnitCreateCaster");
            }
        }

    }
    auto9179697F_g = lv_selendisUnit;
    auto9179697F_u = UnitGroupCount(auto9179697F_g, c_unitCountAll);
    for (;; auto9179697F_u -= 1) {
        auto9179697F_var = UnitGroupUnitFromEnd(auto9179697F_g, auto9179697F_u);
        if (auto9179697F_var == null) { break; }
        UnitBehaviorAddPlayer(auto9179697F_var, "SelendisUnitWarpOutCommand", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, 1);
        UnitGroupRemove(lv_selendisUnit, auto9179697F_var);
        if ((UnitGroupHasUnit(libNEXS_gv_selendisUnitGroup[0], auto9179697F_var) == true)) {
            UnitGroupRemove(libNEXS_gv_selendisUnitGroup[0], auto9179697F_var);
        }
        else if ((UnitGroupHasUnit(libNEXS_gv_selendisUnitGroup[1], auto9179697F_var) == true)) {
            UnitGroupRemove(libNEXS_gv_selendisUnitGroup[1], auto9179697F_var);
        }
        else if ((UnitGroupHasUnit(libNEXS_gv_selendisUnitGroup[2], auto9179697F_var) == true)) {
            UnitGroupRemove(libNEXS_gv_selendisUnitGroup[2], auto9179697F_var);
        }
        else if ((UnitGroupHasUnit(libNEXS_gv_selendisUnitGroup[3], auto9179697F_var) == true)) {
            UnitGroupRemove(libNEXS_gv_selendisUnitGroup[3], auto9179697F_var);
        }
        else if ((UnitGroupHasUnit(libNEXS_gv_selendisUnitGroup[4], auto9179697F_var) == true)) {
            UnitGroupRemove(libNEXS_gv_selendisUnitGroup[4], auto9179697F_var);
        }
        else if ((UnitGroupHasUnit(libNEXS_gv_selendisUnitGroup[5], auto9179697F_var) == true)) {
            UnitGroupRemove(libNEXS_gv_selendisUnitGroup[5], auto9179697F_var);
        }
        else if ((UnitGroupHasUnit(libNEXS_gv_selendisUnitGroup[6], auto9179697F_var) == true)) {
            UnitGroupRemove(libNEXS_gv_selendisUnitGroup[6], auto9179697F_var);
        }
        else if ((UnitGroupHasUnit(libNEXS_gv_selendisUnitGroup[7], auto9179697F_var) == true)) {
            UnitGroupRemove(libNEXS_gv_selendisUnitGroup[7], auto9179697F_var);
        }
    }
    lv_unitType = 0;
    for ( ; ( (auto9F68E18B_ai >= 0 && lv_unitType <= auto9F68E18B_ae) || (auto9F68E18B_ai < 0 && lv_unitType >= auto9F68E18B_ae) ) ; lv_unitType += auto9F68E18B_ai ) {
        if ((UnitGroupCount(lv_spireGroup[lv_unitType][2], c_unitCountAlive) >= 1)) {
            UnitGroupAddUnitGroup(lv_unitTypeSpireGroup[lv_unitType], lv_spireGroup[lv_unitType][2]);
            lv_unitAmountLevel[lv_unitType][2] = TruncI(((lv_unitAmount[lv_unitType] * lv_maxAmount[lv_unitType][2]) / ((UnitGroupCount(lv_spireGroup[lv_unitType][0], c_unitCountAlive) * lv_maxAmount[lv_unitType][0]) + ((UnitGroupCount(lv_spireGroup[lv_unitType][1], c_unitCountAlive) * lv_maxAmount[lv_unitType][1]) + (UnitGroupCount(lv_spireGroup[lv_unitType][2], c_unitCountAlive) * lv_maxAmount[lv_unitType][2])))));
            lv_unitAmount[lv_unitType] -= (UnitGroupCount(lv_spireGroup[lv_unitType][2], c_unitCountAlive) * lv_unitAmountLevel[lv_unitType][2]);
            autoEC4DC5C7_g = lv_spireGroup[lv_unitType][2];
            autoEC4DC5C7_u = UnitGroupCount(autoEC4DC5C7_g, c_unitCountAll);
            for (;; autoEC4DC5C7_u -= 1) {
                autoEC4DC5C7_var = UnitGroupUnitFromEnd(autoEC4DC5C7_g, autoEC4DC5C7_u);
                if (autoEC4DC5C7_var == null) { break; }
                if ((lv_unitType == 0)) {
                    lv_deleteArea = RegionCircle(UnitGetPosition(autoEC4DC5C7_var), 2.0);
                    autoB04933BA_g = UnitGroup("SelendisPlatformUnitInvisible", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_deleteArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    autoB04933BA_u = UnitGroupCount(autoB04933BA_g, c_unitCountAll);
                    for (;; autoB04933BA_u -= 1) {
                        autoB04933BA_var = UnitGroupUnitFromEnd(autoB04933BA_g, autoB04933BA_u);
                        if (autoB04933BA_var == null) { break; }
                        UnitRemove(autoB04933BA_var);
                    }
                    Wait(0.05, c_timeAI);
                    UnitMagazineArm(autoEC4DC5C7_var, AbilityCommand("SelendisPlatformUnitCreateTruly", 0), lv_unitAmountLevel[lv_unitType][2]);
                }
                else if ((lv_unitType == 1)) {
                    lv_deleteArea = RegionCircle(UnitGetPosition(autoEC4DC5C7_var), 2.0);
                    auto8055FB5C_g = UnitGroup("SelendisPlatformUnitInvisible2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_deleteArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    auto8055FB5C_u = UnitGroupCount(auto8055FB5C_g, c_unitCountAll);
                    for (;; auto8055FB5C_u -= 1) {
                        auto8055FB5C_var = UnitGroupUnitFromEnd(auto8055FB5C_g, auto8055FB5C_u);
                        if (auto8055FB5C_var == null) { break; }
                        UnitRemove(auto8055FB5C_var);
                    }
                    Wait(0.05, c_timeAI);
                    UnitMagazineArm(autoEC4DC5C7_var, AbilityCommand("SelendisPlatformUnitCreateTruly", 1), lv_unitAmountLevel[lv_unitType][2]);
                }
                else if ((lv_unitType == 2)) {
                    lv_deleteArea = RegionCircle(UnitGetPosition(autoEC4DC5C7_var), 2.0);
                    autoB2C8F95E_g = UnitGroup("SelendisPlatformUnitInvisible22", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_deleteArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    autoB2C8F95E_u = UnitGroupCount(autoB2C8F95E_g, c_unitCountAll);
                    for (;; autoB2C8F95E_u -= 1) {
                        autoB2C8F95E_var = UnitGroupUnitFromEnd(autoB2C8F95E_g, autoB2C8F95E_u);
                        if (autoB2C8F95E_var == null) { break; }
                        UnitRemove(autoB2C8F95E_var);
                    }
                    Wait(0.05, c_timeAI);
                    UnitMagazineArm(autoEC4DC5C7_var, AbilityCommand("SelendisPlatformUnitCreateTruly", 2), lv_unitAmountLevel[lv_unitType][2]);
                }
                else if ((lv_unitType == 3)) {
                    lv_deleteArea = RegionCircle(UnitGetPosition(autoEC4DC5C7_var), 2.0);
                    auto9A95B804_g = UnitGroup("SelendisPlatformUnitInvisible3", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_deleteArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    auto9A95B804_u = UnitGroupCount(auto9A95B804_g, c_unitCountAll);
                    for (;; auto9A95B804_u -= 1) {
                        auto9A95B804_var = UnitGroupUnitFromEnd(auto9A95B804_g, auto9A95B804_u);
                        if (auto9A95B804_var == null) { break; }
                        UnitRemove(auto9A95B804_var);
                    }
                    Wait(0.05, c_timeAI);
                    UnitMagazineArm(autoEC4DC5C7_var, AbilityCommand("SelendisPlatformUnitCreateTruly", 3), lv_unitAmountLevel[lv_unitType][2]);
                }
                else if ((lv_unitType == 4)) {
                    lv_deleteArea = RegionCircle(UnitGetPosition(autoEC4DC5C7_var), 2.0);
                    autoD1B71CCE_g = UnitGroup("SelendisPlatformUnitInvisible32", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_deleteArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    autoD1B71CCE_u = UnitGroupCount(autoD1B71CCE_g, c_unitCountAll);
                    for (;; autoD1B71CCE_u -= 1) {
                        autoD1B71CCE_var = UnitGroupUnitFromEnd(autoD1B71CCE_g, autoD1B71CCE_u);
                        if (autoD1B71CCE_var == null) { break; }
                        UnitRemove(autoD1B71CCE_var);
                    }
                    Wait(0.05, c_timeAI);
                    UnitMagazineArm(autoEC4DC5C7_var, AbilityCommand("SelendisPlatformUnitCreateTruly", 4), lv_unitAmountLevel[lv_unitType][2]);
                }
                else if ((lv_unitType == 5)) {
                    lv_deleteArea = RegionCircle(UnitGetPosition(autoEC4DC5C7_var), 2.0);
                    auto8FBB2E33_g = UnitGroup("SelendisPlatformUnitInvisible322", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_deleteArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    auto8FBB2E33_u = UnitGroupCount(auto8FBB2E33_g, c_unitCountAll);
                    for (;; auto8FBB2E33_u -= 1) {
                        auto8FBB2E33_var = UnitGroupUnitFromEnd(auto8FBB2E33_g, auto8FBB2E33_u);
                        if (auto8FBB2E33_var == null) { break; }
                        UnitRemove(auto8FBB2E33_var);
                    }
                    Wait(0.05, c_timeAI);
                    UnitMagazineArm(autoEC4DC5C7_var, AbilityCommand("SelendisPlatformUnitCreateTruly", 5), lv_unitAmountLevel[lv_unitType][2]);
                }
                else if ((lv_unitType == 6)) {
                    lv_deleteArea = RegionCircle(UnitGetPosition(autoEC4DC5C7_var), 2.0);
                    autoA2CCE2BE_g = UnitGroup("SelendisPlatformUnitInvisible3222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_deleteArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    autoA2CCE2BE_u = UnitGroupCount(autoA2CCE2BE_g, c_unitCountAll);
                    for (;; autoA2CCE2BE_u -= 1) {
                        autoA2CCE2BE_var = UnitGroupUnitFromEnd(autoA2CCE2BE_g, autoA2CCE2BE_u);
                        if (autoA2CCE2BE_var == null) { break; }
                        UnitRemove(autoA2CCE2BE_var);
                    }
                    Wait(0.05, c_timeAI);
                    UnitMagazineArm(autoEC4DC5C7_var, AbilityCommand("SelendisPlatformUnitCreateTruly", 6), lv_unitAmountLevel[lv_unitType][2]);
                }
                else if ((lv_unitType == 7)) {
                    lv_deleteArea = RegionCircle(UnitGetPosition(autoEC4DC5C7_var), 2.0);
                    autoC6A3C6FD_g = UnitGroup("SelendisPlatformUnitInvisible32222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_deleteArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    autoC6A3C6FD_u = UnitGroupCount(autoC6A3C6FD_g, c_unitCountAll);
                    for (;; autoC6A3C6FD_u -= 1) {
                        autoC6A3C6FD_var = UnitGroupUnitFromEnd(autoC6A3C6FD_g, autoC6A3C6FD_u);
                        if (autoC6A3C6FD_var == null) { break; }
                        UnitRemove(autoC6A3C6FD_var);
                    }
                    Wait(0.05, c_timeAI);
                    UnitMagazineArm(autoEC4DC5C7_var, AbilityCommand("SelendisPlatformUnitCreateTruly", 7), lv_unitAmountLevel[lv_unitType][2]);
                }
            }
        }

        if ((UnitGroupCount(lv_spireGroup[lv_unitType][1], c_unitCountAlive) >= 1)) {
            UnitGroupAddUnitGroup(lv_unitTypeSpireGroup[lv_unitType], lv_spireGroup[lv_unitType][1]);
            lv_unitAmountLevel[lv_unitType][1] = TruncI(((lv_unitAmount[lv_unitType] * lv_maxAmount[lv_unitType][1]) / ((UnitGroupCount(lv_spireGroup[lv_unitType][0], c_unitCountAlive) * lv_maxAmount[lv_unitType][0]) + (UnitGroupCount(lv_spireGroup[lv_unitType][1], c_unitCountAlive) * lv_maxAmount[lv_unitType][1]))));
            lv_unitAmount[lv_unitType] -= (UnitGroupCount(lv_spireGroup[lv_unitType][1], c_unitCountAlive) * lv_unitAmountLevel[lv_unitType][1]);
            auto3176EC52_g = lv_spireGroup[lv_unitType][1];
            auto3176EC52_u = UnitGroupCount(auto3176EC52_g, c_unitCountAll);
            for (;; auto3176EC52_u -= 1) {
                auto3176EC52_var = UnitGroupUnitFromEnd(auto3176EC52_g, auto3176EC52_u);
                if (auto3176EC52_var == null) { break; }
                if ((lv_unitType == 0)) {
                    lv_deleteArea = RegionCircle(UnitGetPosition(auto3176EC52_var), 2.0);
                    auto64809441_g = UnitGroup("SelendisPlatformUnitInvisible", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_deleteArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    auto64809441_u = UnitGroupCount(auto64809441_g, c_unitCountAll);
                    for (;; auto64809441_u -= 1) {
                        auto64809441_var = UnitGroupUnitFromEnd(auto64809441_g, auto64809441_u);
                        if (auto64809441_var == null) { break; }
                        UnitRemove(auto64809441_var);
                    }
                    Wait(0.05, c_timeAI);
                    UnitMagazineArm(auto3176EC52_var, AbilityCommand("SelendisPlatformUnitCreateTruly", 0), lv_unitAmountLevel[lv_unitType][1]);
                }
                else if ((lv_unitType == 1)) {
                    lv_deleteArea = RegionCircle(UnitGetPosition(auto3176EC52_var), 2.0);
                    auto2B37D085_g = UnitGroup("SelendisPlatformUnitInvisible2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_deleteArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    auto2B37D085_u = UnitGroupCount(auto2B37D085_g, c_unitCountAll);
                    for (;; auto2B37D085_u -= 1) {
                        auto2B37D085_var = UnitGroupUnitFromEnd(auto2B37D085_g, auto2B37D085_u);
                        if (auto2B37D085_var == null) { break; }
                        UnitRemove(auto2B37D085_var);
                    }
                    Wait(0.05, c_timeAI);
                    UnitMagazineArm(auto3176EC52_var, AbilityCommand("SelendisPlatformUnitCreateTruly", 1), lv_unitAmountLevel[lv_unitType][1]);
                }
                else if ((lv_unitType == 2)) {
                    lv_deleteArea = RegionCircle(UnitGetPosition(auto3176EC52_var), 2.0);
                    auto8B2DBABB_g = UnitGroup("SelendisPlatformUnitInvisible22", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_deleteArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    auto8B2DBABB_u = UnitGroupCount(auto8B2DBABB_g, c_unitCountAll);
                    for (;; auto8B2DBABB_u -= 1) {
                        auto8B2DBABB_var = UnitGroupUnitFromEnd(auto8B2DBABB_g, auto8B2DBABB_u);
                        if (auto8B2DBABB_var == null) { break; }
                        UnitRemove(auto8B2DBABB_var);
                    }
                    Wait(0.05, c_timeAI);
                    UnitMagazineArm(auto3176EC52_var, AbilityCommand("SelendisPlatformUnitCreateTruly", 2), lv_unitAmountLevel[lv_unitType][1]);
                }
                else if ((lv_unitType == 3)) {
                    lv_deleteArea = RegionCircle(UnitGetPosition(auto3176EC52_var), 2.0);
                    auto70BB3355_g = UnitGroup("SelendisPlatformUnitInvisible3", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_deleteArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    auto70BB3355_u = UnitGroupCount(auto70BB3355_g, c_unitCountAll);
                    for (;; auto70BB3355_u -= 1) {
                        auto70BB3355_var = UnitGroupUnitFromEnd(auto70BB3355_g, auto70BB3355_u);
                        if (auto70BB3355_var == null) { break; }
                        UnitRemove(auto70BB3355_var);
                    }
                    Wait(0.05, c_timeAI);
                    UnitMagazineArm(auto3176EC52_var, AbilityCommand("SelendisPlatformUnitCreateTruly", 3), lv_unitAmountLevel[lv_unitType][1]);
                }
                else if ((lv_unitType == 4)) {
                    lv_deleteArea = RegionCircle(UnitGetPosition(auto3176EC52_var), 2.0);
                    auto305B8086_g = UnitGroup("SelendisPlatformUnitInvisible32", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_deleteArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    auto305B8086_u = UnitGroupCount(auto305B8086_g, c_unitCountAll);
                    for (;; auto305B8086_u -= 1) {
                        auto305B8086_var = UnitGroupUnitFromEnd(auto305B8086_g, auto305B8086_u);
                        if (auto305B8086_var == null) { break; }
                        UnitRemove(auto305B8086_var);
                    }
                    Wait(0.05, c_timeAI);
                    UnitMagazineArm(auto3176EC52_var, AbilityCommand("SelendisPlatformUnitCreateTruly", 4), lv_unitAmountLevel[lv_unitType][1]);
                }
                else if ((lv_unitType == 5)) {
                    lv_deleteArea = RegionCircle(UnitGetPosition(auto3176EC52_var), 2.0);
                    autoC5BE56A4_g = UnitGroup("SelendisPlatformUnitInvisible322", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_deleteArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    autoC5BE56A4_u = UnitGroupCount(autoC5BE56A4_g, c_unitCountAll);
                    for (;; autoC5BE56A4_u -= 1) {
                        autoC5BE56A4_var = UnitGroupUnitFromEnd(autoC5BE56A4_g, autoC5BE56A4_u);
                        if (autoC5BE56A4_var == null) { break; }
                        UnitRemove(autoC5BE56A4_var);
                    }
                    Wait(0.05, c_timeAI);
                    UnitMagazineArm(auto3176EC52_var, AbilityCommand("SelendisPlatformUnitCreateTruly", 5), lv_unitAmountLevel[lv_unitType][1]);
                }
                else if ((lv_unitType == 6)) {
                    lv_deleteArea = RegionCircle(UnitGetPosition(auto3176EC52_var), 2.0);
                    auto9FD61167_g = UnitGroup("SelendisPlatformUnitInvisible3222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_deleteArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    auto9FD61167_u = UnitGroupCount(auto9FD61167_g, c_unitCountAll);
                    for (;; auto9FD61167_u -= 1) {
                        auto9FD61167_var = UnitGroupUnitFromEnd(auto9FD61167_g, auto9FD61167_u);
                        if (auto9FD61167_var == null) { break; }
                        UnitRemove(auto9FD61167_var);
                    }
                    Wait(0.05, c_timeAI);
                    UnitMagazineArm(auto3176EC52_var, AbilityCommand("SelendisPlatformUnitCreateTruly", 6), lv_unitAmountLevel[lv_unitType][1]);
                }
                else if ((lv_unitType == 7)) {
                    lv_deleteArea = RegionCircle(UnitGetPosition(auto3176EC52_var), 2.0);
                    auto182885C5_g = UnitGroup("SelendisPlatformUnitInvisible32222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_deleteArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    auto182885C5_u = UnitGroupCount(auto182885C5_g, c_unitCountAll);
                    for (;; auto182885C5_u -= 1) {
                        auto182885C5_var = UnitGroupUnitFromEnd(auto182885C5_g, auto182885C5_u);
                        if (auto182885C5_var == null) { break; }
                        UnitRemove(auto182885C5_var);
                    }
                    Wait(0.05, c_timeAI);
                    UnitMagazineArm(auto3176EC52_var, AbilityCommand("SelendisPlatformUnitCreateTruly", 7), lv_unitAmountLevel[lv_unitType][1]);
                }
            }
        }

        if ((UnitGroupCount(lv_spireGroup[lv_unitType][0], c_unitCountAlive) >= 1)) {
            UnitGroupAddUnitGroup(lv_unitTypeSpireGroup[lv_unitType], lv_spireGroup[lv_unitType][0]);
            lv_unitAmountLevel[lv_unitType][0] = TruncI((lv_unitAmount[lv_unitType] / UnitGroupCount(lv_spireGroup[lv_unitType][0], c_unitCountAlive)));
            lv_unitAmount[lv_unitType] -= (UnitGroupCount(lv_spireGroup[lv_unitType][0], c_unitCountAlive) * lv_unitAmountLevel[lv_unitType][0]);
            autoD6714860_g = lv_spireGroup[lv_unitType][0];
            autoD6714860_u = UnitGroupCount(autoD6714860_g, c_unitCountAll);
            for (;; autoD6714860_u -= 1) {
                autoD6714860_var = UnitGroupUnitFromEnd(autoD6714860_g, autoD6714860_u);
                if (autoD6714860_var == null) { break; }
                if ((lv_unitType == 0)) {
                    lv_deleteArea = RegionCircle(UnitGetPosition(autoD6714860_var), 2.0);
                    autoE3773DAE_g = UnitGroup("SelendisPlatformUnitInvisible", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_deleteArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    autoE3773DAE_u = UnitGroupCount(autoE3773DAE_g, c_unitCountAll);
                    for (;; autoE3773DAE_u -= 1) {
                        autoE3773DAE_var = UnitGroupUnitFromEnd(autoE3773DAE_g, autoE3773DAE_u);
                        if (autoE3773DAE_var == null) { break; }
                        UnitRemove(autoE3773DAE_var);
                    }
                    Wait(0.05, c_timeAI);
                    UnitMagazineArm(autoD6714860_var, AbilityCommand("SelendisPlatformUnitCreateTruly", 0), lv_unitAmountLevel[lv_unitType][0]);
                }
                else if ((lv_unitType == 1)) {
                    lv_deleteArea = RegionCircle(UnitGetPosition(autoD6714860_var), 2.0);
                    autoE40A23EF_g = UnitGroup("SelendisPlatformUnitInvisible2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_deleteArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    autoE40A23EF_u = UnitGroupCount(autoE40A23EF_g, c_unitCountAll);
                    for (;; autoE40A23EF_u -= 1) {
                        autoE40A23EF_var = UnitGroupUnitFromEnd(autoE40A23EF_g, autoE40A23EF_u);
                        if (autoE40A23EF_var == null) { break; }
                        UnitRemove(autoE40A23EF_var);
                    }
                    Wait(0.05, c_timeAI);
                    UnitMagazineArm(autoD6714860_var, AbilityCommand("SelendisPlatformUnitCreateTruly", 1), lv_unitAmountLevel[lv_unitType][0]);
                }
                else if ((lv_unitType == 2)) {
                    lv_deleteArea = RegionCircle(UnitGetPosition(autoD6714860_var), 2.0);
                    auto94088B87_g = UnitGroup("SelendisPlatformUnitInvisible22", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_deleteArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    auto94088B87_u = UnitGroupCount(auto94088B87_g, c_unitCountAll);
                    for (;; auto94088B87_u -= 1) {
                        auto94088B87_var = UnitGroupUnitFromEnd(auto94088B87_g, auto94088B87_u);
                        if (auto94088B87_var == null) { break; }
                        UnitRemove(auto94088B87_var);
                    }
                    Wait(0.05, c_timeAI);
                    UnitMagazineArm(autoD6714860_var, AbilityCommand("SelendisPlatformUnitCreateTruly", 2), lv_unitAmountLevel[lv_unitType][0]);
                }
                else if ((lv_unitType == 3)) {
                    lv_deleteArea = RegionCircle(UnitGetPosition(autoD6714860_var), 2.0);
                    autoDB81919C_g = UnitGroup("SelendisPlatformUnitInvisible3", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_deleteArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    autoDB81919C_u = UnitGroupCount(autoDB81919C_g, c_unitCountAll);
                    for (;; autoDB81919C_u -= 1) {
                        autoDB81919C_var = UnitGroupUnitFromEnd(autoDB81919C_g, autoDB81919C_u);
                        if (autoDB81919C_var == null) { break; }
                        UnitRemove(autoDB81919C_var);
                    }
                    Wait(0.05, c_timeAI);
                    UnitMagazineArm(autoD6714860_var, AbilityCommand("SelendisPlatformUnitCreateTruly", 3), lv_unitAmountLevel[lv_unitType][0]);
                }
                else if ((lv_unitType == 4)) {
                    lv_deleteArea = RegionCircle(UnitGetPosition(autoD6714860_var), 2.0);
                    autoABC85673_g = UnitGroup("SelendisPlatformUnitInvisible32", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_deleteArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    autoABC85673_u = UnitGroupCount(autoABC85673_g, c_unitCountAll);
                    for (;; autoABC85673_u -= 1) {
                        autoABC85673_var = UnitGroupUnitFromEnd(autoABC85673_g, autoABC85673_u);
                        if (autoABC85673_var == null) { break; }
                        UnitRemove(autoABC85673_var);
                    }
                    Wait(0.05, c_timeAI);
                    UnitMagazineArm(autoD6714860_var, AbilityCommand("SelendisPlatformUnitCreateTruly", 4), lv_unitAmountLevel[lv_unitType][0]);
                }
                else if ((lv_unitType == 5)) {
                    lv_deleteArea = RegionCircle(UnitGetPosition(autoD6714860_var), 2.0);
                    autoFF2B0ABC_g = UnitGroup("SelendisPlatformUnitInvisible322", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_deleteArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    autoFF2B0ABC_u = UnitGroupCount(autoFF2B0ABC_g, c_unitCountAll);
                    for (;; autoFF2B0ABC_u -= 1) {
                        autoFF2B0ABC_var = UnitGroupUnitFromEnd(autoFF2B0ABC_g, autoFF2B0ABC_u);
                        if (autoFF2B0ABC_var == null) { break; }
                        UnitRemove(autoFF2B0ABC_var);
                    }
                    Wait(0.05, c_timeAI);
                    UnitMagazineArm(autoD6714860_var, AbilityCommand("SelendisPlatformUnitCreateTruly", 5), lv_unitAmountLevel[lv_unitType][0]);
                }
                else if ((lv_unitType == 6)) {
                    lv_deleteArea = RegionCircle(UnitGetPosition(autoD6714860_var), 2.0);
                    auto885CBAC6_g = UnitGroup("SelendisPlatformUnitInvisible3222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_deleteArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    auto885CBAC6_u = UnitGroupCount(auto885CBAC6_g, c_unitCountAll);
                    for (;; auto885CBAC6_u -= 1) {
                        auto885CBAC6_var = UnitGroupUnitFromEnd(auto885CBAC6_g, auto885CBAC6_u);
                        if (auto885CBAC6_var == null) { break; }
                        UnitRemove(auto885CBAC6_var);
                    }
                    Wait(0.05, c_timeAI);
                    UnitMagazineArm(autoD6714860_var, AbilityCommand("SelendisPlatformUnitCreateTruly", 6), lv_unitAmountLevel[lv_unitType][0]);
                }
                else if ((lv_unitType == 7)) {
                    lv_deleteArea = RegionCircle(UnitGetPosition(autoD6714860_var), 2.0);
                    auto0980B2D7_g = UnitGroup("SelendisPlatformUnitInvisible32222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_deleteArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    auto0980B2D7_u = UnitGroupCount(auto0980B2D7_g, c_unitCountAll);
                    for (;; auto0980B2D7_u -= 1) {
                        auto0980B2D7_var = UnitGroupUnitFromEnd(auto0980B2D7_g, auto0980B2D7_u);
                        if (auto0980B2D7_var == null) { break; }
                        UnitRemove(auto0980B2D7_var);
                    }
                    Wait(0.05, c_timeAI);
                    UnitMagazineArm(autoD6714860_var, AbilityCommand("SelendisPlatformUnitCreateTruly", 7), lv_unitAmountLevel[lv_unitType][0]);
                }
            }
        }

    }
    auto9E849D8B_g = UnitGroup("SelendisNexus", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9E849D8B_u = UnitGroupCount(auto9E849D8B_g, c_unitCountAll);
    for (;; auto9E849D8B_u -= 1) {
        auto9E849D8B_var = UnitGroupUnitFromEnd(auto9E849D8B_g, auto9E849D8B_u);
        if (auto9E849D8B_var == null) { break; }
        UnitBehaviorRemove(auto9E849D8B_var, "SOAAbilityDisable2", 1);
    }
    return true;
}

void libNEXS_gf_E99BB7E8AFBAE794B5E6B1A0E588B7E696B0 () {
    // Variable Declarations
    fixed lv_maxDistance;
    int lv_spawnAttempt;
    point lv_riftLocation;

    // Automatic Variable Declarations
    const int autoB6BEBE70_ae = 1000;
    const int autoB6BEBE70_ai = 1;

    // Variable Initialization

    // Implementation
    lv_spawnAttempt = 1;
    for ( ; ( (autoB6BEBE70_ai >= 0 && lv_spawnAttempt <= autoB6BEBE70_ae) || (autoB6BEBE70_ai < 0 && lv_spawnAttempt >= autoB6BEBE70_ae) ) ; lv_spawnAttempt += autoB6BEBE70_ai ) {
        if ((GameGetMissionTime() < 480.0)) {
            lv_maxDistance = 50.0;
        }
        else if (true) {
            lv_maxDistance = 100.0;
        }
        lv_riftLocation = RegionRandomPoint(RegionPlayableMap());
        if (((DistanceBetweenPoints(lv_riftLocation, MidPoint(PlayerStartLocation(1), PlayerStartLocation(2))) > lv_maxDistance) || (DistanceBetweenPoints(lv_riftLocation, PlayerStartLocation(1)) <= 30.0) || (DistanceBetweenPoints(lv_riftLocation, PlayerStartLocation(2)) <= 30.0) || (UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(lv_riftLocation, 20.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || (PointPathingIsConnected(lv_riftLocation, PlayerStartLocation(1)) == false) || (UnitGroupCount(UnitGroup("WarpPrismPhasing22", c_playerAny, RegionCircle(lv_riftLocation, 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            lv_riftLocation = null;
            continue;
        }
        else {
            break;
        }
    }
    if ((lv_riftLocation == null)) {
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArtifactPiece12", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, lv_riftLocation);
        MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 5.0, Color(100.00, 100.00, 0.00));
    }
}

void libNEXS_gf_E587AFE7919EE79498E5BDA9E89B8BE5889DE5A78BE8A7A6E58F91 () {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorReviveKerrigan", 1);
    TransmissionSendForPlayerSelect(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), TransmissionSourceFromModel("KerriganGhostPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "KerriganGhostPortrait", "Talk", SoundLink("acAttackWave_Kerrigan_1282", -1), StringExternal("Param/Value/lib_NEXS_4EE5774B"), StringExternal("Param/Value/lib_NEXS_D5DC2DAF"), 0.0, c_transmissionDurationAdd, false, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, false);
    Wait(4.0, c_timeGame);
    TransmissionSendForPlayerSelect(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), TransmissionSourceFromModel("RaynorMarinePortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "RaynorMarinePortrait", "Talk", SoundLink("acAttackWave_Kerrigan_12822", -1), StringExternal("Param/Value/lib_NEXS_424D66B3"), StringExternal("Param/Value/lib_NEXS_43C15BB3"), 0.0, c_transmissionDurationAdd, false, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, false);
    Wait(4.0, c_timeGame);
    TransmissionSendForPlayerSelect(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), TransmissionSourceFromModel("KerriganGhostPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "KerriganGhostPortrait", "Talk", SoundLink("acAttackWave_Kerrigan_128222", -1), StringExternal("Param/Value/lib_NEXS_1150F9FF"), StringExternal("Param/Value/lib_NEXS_E3859246"), 0.0, c_transmissionDurationAdd, false, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, false);
    Wait(4.5, c_timeGame);
    TransmissionSendForPlayerSelect(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), TransmissionSourceFromModel("RaynorMarinePortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "RaynorMarinePortrait", "Talk", SoundLink("acAttackWave_Kerrigan_1282222", -1), StringExternal("Param/Value/lib_NEXS_DA7BD2B9"), StringExternal("Param/Value/lib_NEXS_531F44A9"), 0.0, c_transmissionDurationAdd, false, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, false);
}

trigger auto_libNEXS_gf_E699B6E4BD93E79FBFE98787E99B86E8A385E7BDAE_Trigger = null;
unit auto_libNEXS_gf_E699B6E4BD93E79FBFE98787E99B86E8A385E7BDAE_lp_e6A0BCE5BC8FE5A194E99BB6E8BDA8E98193E68EA7E588B6E4B8ADE5BF83;

void libNEXS_gf_E699B6E4BD93E79FBFE98787E99B86E8A385E7BDAE (unit lp_e6A0BCE5BC8FE5A194E99BB6E8BDA8E98193E68EA7E588B6E4B8ADE5BF83) {
    auto_libNEXS_gf_E699B6E4BD93E79FBFE98787E99B86E8A385E7BDAE_lp_e6A0BCE5BC8FE5A194E99BB6E8BDA8E98193E68EA7E588B6E4B8ADE5BF83 = lp_e6A0BCE5BC8FE5A194E99BB6E8BDA8E98193E68EA7E588B6E4B8ADE5BF83;

    if (auto_libNEXS_gf_E699B6E4BD93E79FBFE98787E99B86E8A385E7BDAE_Trigger == null) {
        auto_libNEXS_gf_E699B6E4BD93E79FBFE98787E99B86E8A385E7BDAE_Trigger = TriggerCreate("auto_libNEXS_gf_E699B6E4BD93E79FBFE98787E99B86E8A385E7BDAE_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_E699B6E4BD93E79FBFE98787E99B86E8A385E7BDAE_Trigger, false, false);
}

bool auto_libNEXS_gf_E699B6E4BD93E79FBFE98787E99B86E8A385E7BDAE_TriggerFunc (bool testConds, bool runActions) {
    unit lp_e6A0BCE5BC8FE5A194E99BB6E8BDA8E98193E68EA7E588B6E4B8ADE5BF83 = auto_libNEXS_gf_E699B6E4BD93E79FBFE98787E99B86E8A385E7BDAE_lp_e6A0BCE5BC8FE5A194E99BB6E8BDA8E98193E68EA7E588B6E4B8ADE5BF83;

    // Variable Declarations
    unitgroup lv_e793A6E696AFE6B094E6B389;

    // Automatic Variable Declarations
    unitgroup autoA6A389B9_g;
    int autoA6A389B9_u;
    unit autoA6A389B9_var;
    unitgroup autoEC149068_g;
    int autoEC149068_u;
    unit autoEC149068_var;
    unitgroup auto9EB8F824_g;
    int auto9EB8F824_u;
    unit auto9EB8F824_var;
    unitgroup auto3A883FAC_g;
    int auto3A883FAC_u;
    unit auto3A883FAC_var;
    unitgroup auto94DE374B_g;
    int auto94DE374B_u;
    unit auto94DE374B_var;
    unitgroup auto6D414A6B_g;
    int auto6D414A6B_u;
    unit auto6D414A6B_var;

    // Variable Initialization
    lv_e793A6E696AFE6B094E6B389 = UnitGroupEmpty();

    // Implementation
    while (((UnitFilterMatch(lp_e6A0BCE5BC8FE5A194E99BB6E8BDA8E98193E68EA7E588B6E4B8ADE5BF83, 1, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) || (UnitFilterMatch(lp_e6A0BCE5BC8FE5A194E99BB6E8BDA8E98193E68EA7E588B6E4B8ADE5BF83, 2, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
        if (true) {
            auto94DE374B_g = UnitGroup("VespeneGeyser", c_playerAny, RegionCircle(UnitGetPosition(lp_e6A0BCE5BC8FE5A194E99BB6E8BDA8E98193E68EA7E588B6E4B8ADE5BF83), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto94DE374B_u = UnitGroupCount(auto94DE374B_g, c_unitCountAll);
            for (;; auto94DE374B_u -= 1) {
                auto94DE374B_var = UnitGroupUnitFromEnd(auto94DE374B_g, auto94DE374B_u);
                if (auto94DE374B_var == null) { break; }
                if ((UnitCount("Assimilator", c_playerAny, RegionCircle(UnitGetPosition(auto94DE374B_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("ArtanisAssimilator", c_playerAny, RegionCircle(UnitGetPosition(auto94DE374B_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("Assimilator33", c_playerAny, RegionCircle(UnitGetPosition(auto94DE374B_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("TassadarAssimilator", c_playerAny, RegionCircle(UnitGetPosition(auto94DE374B_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("AlysaarAssimilator", c_playerAny, RegionCircle(UnitGetPosition(auto94DE374B_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("ZhakulAssimilator", c_playerAny, RegionCircle(UnitGetPosition(auto94DE374B_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("Refinery", c_playerAny, RegionCircle(UnitGetPosition(auto94DE374B_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("AutomatedRefinery", c_playerAny, RegionCircle(UnitGetPosition(auto94DE374B_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("GestaltAutomatedRefinery", c_playerAny, RegionCircle(UnitGetPosition(auto94DE374B_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("InfestedRefinery", c_playerAny, RegionCircle(UnitGetPosition(auto94DE374B_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("RefineryRich", c_playerAny, RegionCircle(UnitGetPosition(auto94DE374B_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("GerardRefinery", c_playerAny, RegionCircle(UnitGetPosition(auto94DE374B_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("Refinery2", c_playerAny, RegionCircle(UnitGetPosition(auto94DE374B_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("Refinery22", c_playerAny, RegionCircle(UnitGetPosition(auto94DE374B_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("Extractor", c_playerAny, RegionCircle(UnitGetPosition(auto94DE374B_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("CerberusExtractor", c_playerAny, RegionCircle(UnitGetPosition(auto94DE374B_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("AssimilatorSelendis", c_playerAny, RegionCircle(UnitGetPosition(auto94DE374B_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("DestructibleRock4x4", c_playerAny, RegionCircle(UnitGetPosition(auto94DE374B_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("DestructibleDebris4x4", c_playerAny, RegionCircle(UnitGetPosition(auto94DE374B_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("DestructibleCityDebris4x4", c_playerAny, RegionCircle(UnitGetPosition(auto94DE374B_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("DestructibleIce4x4", c_playerAny, RegionCircle(UnitGetPosition(auto94DE374B_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("DestructibleRockEx14x4", c_playerAny, RegionCircle(UnitGetPosition(auto94DE374B_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("DestructibleRock2x4Horizontal", c_playerAny, RegionCircle(UnitGetPosition(auto94DE374B_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("DestructibleRock2x4Vertical", c_playerAny, RegionCircle(UnitGetPosition(auto94DE374B_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("RefineryPipes", c_playerAny, RegionCircle(UnitGetPosition(auto94DE374B_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("ValerianAutomatedRefinery", c_playerAny, RegionCircle(UnitGetPosition(auto94DE374B_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1)) {
                    UnitGroupAdd(lv_e793A6E696AFE6B094E6B389, auto94DE374B_var);
                }

                if ((UnitGroupCount(lv_e793A6E696AFE6B094E6B389, c_unitCountAlive) > 0)) {
                    auto6D414A6B_g = lv_e793A6E696AFE6B094E6B389;
                    auto6D414A6B_u = UnitGroupCount(auto6D414A6B_g, c_unitCountAll);
                    for (;; auto6D414A6B_u -= 1) {
                        auto6D414A6B_var = UnitGroupUnitFromEnd(auto6D414A6B_g, auto6D414A6B_u);
                        if (auto6D414A6B_var == null) { break; }
                        if ((UnitHasBehavior2(auto6D414A6B_var, "GestaltMineralAdapterForGas") == false)) {
                            UnitBehaviorAdd(auto6D414A6B_var, "GestaltMineralAdapterForGas", lp_e6A0BCE5BC8FE5A194E99BB6E8BDA8E98193E68EA7E588B6E4B8ADE5BF83, 1);
                            UnitCreateEffectPoint(lp_e6A0BCE5BC8FE5A194E99BB6E8BDA8E98193E68EA7E588B6E4B8ADE5BF83, "GestaltGasAdapterCreate", UnitGetPosition(auto6D414A6B_var));
                            UnitGroupRemove(lv_e793A6E696AFE6B094E6B389, auto6D414A6B_var);
                        }

                    }
                }

            }
        }
        else {
            autoA6A389B9_g = UnitGroup("SpacePlatformGeyser", c_playerAny, RegionCircle(UnitGetPosition(lp_e6A0BCE5BC8FE5A194E99BB6E8BDA8E98193E68EA7E588B6E4B8ADE5BF83), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoA6A389B9_u = UnitGroupCount(autoA6A389B9_g, c_unitCountAll);
            for (;; autoA6A389B9_u -= 1) {
                autoA6A389B9_var = UnitGroupUnitFromEnd(autoA6A389B9_g, autoA6A389B9_u);
                if (autoA6A389B9_var == null) { break; }
                if ((UnitCount("DestructibleRock4x4", c_playerAny, RegionCircle(UnitGetPosition(autoA6A389B9_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("Assimilator", c_playerAny, RegionCircle(UnitGetPosition(autoA6A389B9_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("ArtanisAssimilator", c_playerAny, RegionCircle(UnitGetPosition(autoA6A389B9_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("Assimilator33", c_playerAny, RegionCircle(UnitGetPosition(autoA6A389B9_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("TassadarAssimilator", c_playerAny, RegionCircle(UnitGetPosition(autoA6A389B9_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("AlysaarAssimilator", c_playerAny, RegionCircle(UnitGetPosition(autoA6A389B9_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("ZhakulAssimilator", c_playerAny, RegionCircle(UnitGetPosition(autoA6A389B9_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("Refinery", c_playerAny, RegionCircle(UnitGetPosition(autoA6A389B9_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("AutomatedRefinery", c_playerAny, RegionCircle(UnitGetPosition(autoA6A389B9_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("GestaltAutomatedRefinery", c_playerAny, RegionCircle(UnitGetPosition(autoA6A389B9_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("InfestedRefinery", c_playerAny, RegionCircle(UnitGetPosition(autoA6A389B9_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("RefineryRich", c_playerAny, RegionCircle(UnitGetPosition(autoA6A389B9_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("GerardRefinery", c_playerAny, RegionCircle(UnitGetPosition(autoA6A389B9_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("Refinery2", c_playerAny, RegionCircle(UnitGetPosition(autoA6A389B9_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("Refinery22", c_playerAny, RegionCircle(UnitGetPosition(autoA6A389B9_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("Extractor", c_playerAny, RegionCircle(UnitGetPosition(autoA6A389B9_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("CerberusExtractor", c_playerAny, RegionCircle(UnitGetPosition(autoA6A389B9_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("AssimilatorSelendis", c_playerAny, RegionCircle(UnitGetPosition(autoA6A389B9_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("DestructibleRock4x4", c_playerAny, RegionCircle(UnitGetPosition(autoA6A389B9_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("DestructibleDebris4x4", c_playerAny, RegionCircle(UnitGetPosition(autoA6A389B9_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("DestructibleCityDebris4x4", c_playerAny, RegionCircle(UnitGetPosition(autoA6A389B9_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("DestructibleIce4x4", c_playerAny, RegionCircle(UnitGetPosition(autoA6A389B9_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("DestructibleRockEx14x4", c_playerAny, RegionCircle(UnitGetPosition(autoA6A389B9_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("DestructibleRock2x4Horizontal", c_playerAny, RegionCircle(UnitGetPosition(autoA6A389B9_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("DestructibleRock2x4Vertical", c_playerAny, RegionCircle(UnitGetPosition(autoA6A389B9_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("RefineryPipes", c_playerAny, RegionCircle(UnitGetPosition(autoA6A389B9_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("ValerianAutomatedRefinery", c_playerAny, RegionCircle(UnitGetPosition(autoA6A389B9_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1)) {
                    UnitGroupAdd(lv_e793A6E696AFE6B094E6B389, autoA6A389B9_var);
                }

                if ((UnitGroupCount(lv_e793A6E696AFE6B094E6B389, c_unitCountAlive) > 0)) {
                    autoEC149068_g = lv_e793A6E696AFE6B094E6B389;
                    autoEC149068_u = UnitGroupCount(autoEC149068_g, c_unitCountAll);
                    for (;; autoEC149068_u -= 1) {
                        autoEC149068_var = UnitGroupUnitFromEnd(autoEC149068_g, autoEC149068_u);
                        if (autoEC149068_var == null) { break; }
                        if ((UnitHasBehavior2(autoEC149068_var, "GestaltMineralAdapterForGas") == false)) {
                            UnitBehaviorAdd(autoEC149068_var, "GestaltMineralAdapterForGas", lp_e6A0BCE5BC8FE5A194E99BB6E8BDA8E98193E68EA7E588B6E4B8ADE5BF83, 1);
                            UnitCreateEffectPoint(lp_e6A0BCE5BC8FE5A194E99BB6E8BDA8E98193E68EA7E588B6E4B8ADE5BF83, "GestaltGasAdapterCreate", UnitGetPosition(autoEC149068_var));
                            UnitGroupRemove(lv_e793A6E696AFE6B094E6B389, autoEC149068_var);
                        }

                    }
                }

            }
            auto9EB8F824_g = UnitGroup("PurifierVespeneGeyser", c_playerAny, RegionCircle(UnitGetPosition(lp_e6A0BCE5BC8FE5A194E99BB6E8BDA8E98193E68EA7E588B6E4B8ADE5BF83), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto9EB8F824_u = UnitGroupCount(auto9EB8F824_g, c_unitCountAll);
            for (;; auto9EB8F824_u -= 1) {
                auto9EB8F824_var = UnitGroupUnitFromEnd(auto9EB8F824_g, auto9EB8F824_u);
                if (auto9EB8F824_var == null) { break; }
                if ((UnitCount("DestructibleRock4x4", c_playerAny, RegionCircle(UnitGetPosition(auto9EB8F824_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("Assimilator", c_playerAny, RegionCircle(UnitGetPosition(auto9EB8F824_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("ArtanisAssimilator", c_playerAny, RegionCircle(UnitGetPosition(auto9EB8F824_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("Assimilator33", c_playerAny, RegionCircle(UnitGetPosition(auto9EB8F824_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("TassadarAssimilator", c_playerAny, RegionCircle(UnitGetPosition(auto9EB8F824_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("AlysaarAssimilator", c_playerAny, RegionCircle(UnitGetPosition(auto9EB8F824_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("ZhakulAssimilator", c_playerAny, RegionCircle(UnitGetPosition(auto9EB8F824_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("Refinery", c_playerAny, RegionCircle(UnitGetPosition(auto9EB8F824_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("AutomatedRefinery", c_playerAny, RegionCircle(UnitGetPosition(auto9EB8F824_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("GestaltAutomatedRefinery", c_playerAny, RegionCircle(UnitGetPosition(auto9EB8F824_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("InfestedRefinery", c_playerAny, RegionCircle(UnitGetPosition(auto9EB8F824_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("RefineryRich", c_playerAny, RegionCircle(UnitGetPosition(auto9EB8F824_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("GerardRefinery", c_playerAny, RegionCircle(UnitGetPosition(auto9EB8F824_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("Refinery2", c_playerAny, RegionCircle(UnitGetPosition(auto9EB8F824_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("Refinery22", c_playerAny, RegionCircle(UnitGetPosition(auto9EB8F824_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("Extractor", c_playerAny, RegionCircle(UnitGetPosition(auto9EB8F824_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("CerberusExtractor", c_playerAny, RegionCircle(UnitGetPosition(auto9EB8F824_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("AssimilatorSelendis", c_playerAny, RegionCircle(UnitGetPosition(auto9EB8F824_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("DestructibleRock4x4", c_playerAny, RegionCircle(UnitGetPosition(auto9EB8F824_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("DestructibleDebris4x4", c_playerAny, RegionCircle(UnitGetPosition(auto9EB8F824_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("DestructibleCityDebris4x4", c_playerAny, RegionCircle(UnitGetPosition(auto9EB8F824_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("DestructibleIce4x4", c_playerAny, RegionCircle(UnitGetPosition(auto9EB8F824_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("DestructibleRockEx14x4", c_playerAny, RegionCircle(UnitGetPosition(auto9EB8F824_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("DestructibleRock2x4Horizontal", c_playerAny, RegionCircle(UnitGetPosition(auto9EB8F824_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("DestructibleRock2x4Vertical", c_playerAny, RegionCircle(UnitGetPosition(auto9EB8F824_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("RefineryPipes", c_playerAny, RegionCircle(UnitGetPosition(auto9EB8F824_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCount("ValerianAutomatedRefinery", c_playerAny, RegionCircle(UnitGetPosition(auto9EB8F824_var), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1)) {
                    UnitGroupAdd(lv_e793A6E696AFE6B094E6B389, auto9EB8F824_var);
                }

                if ((UnitGroupCount(lv_e793A6E696AFE6B094E6B389, c_unitCountAlive) > 0)) {
                    auto3A883FAC_g = lv_e793A6E696AFE6B094E6B389;
                    auto3A883FAC_u = UnitGroupCount(auto3A883FAC_g, c_unitCountAll);
                    for (;; auto3A883FAC_u -= 1) {
                        auto3A883FAC_var = UnitGroupUnitFromEnd(auto3A883FAC_g, auto3A883FAC_u);
                        if (auto3A883FAC_var == null) { break; }
                        if ((UnitHasBehavior2(auto3A883FAC_var, "GestaltMineralAdapterForGas") == false)) {
                            UnitBehaviorAdd(auto3A883FAC_var, "GestaltMineralAdapterForGas", lp_e6A0BCE5BC8FE5A194E99BB6E8BDA8E98193E68EA7E588B6E4B8ADE5BF83, 1);
                            UnitCreateEffectPoint(lp_e6A0BCE5BC8FE5A194E99BB6E8BDA8E98193E68EA7E588B6E4B8ADE5BF83, "GestaltGasAdapterCreate", UnitGetPosition(auto3A883FAC_var));
                            UnitGroupRemove(lv_e793A6E696AFE6B094E6B389, auto3A883FAC_var);
                        }

                    }
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_GestaltBomberStrikeThread_Trigger = null;
unit auto_libNEXS_gf_GestaltBomberStrikeThread_lp_unit;
region auto_libNEXS_gf_GestaltBomberStrikeThread_lp_area;
int auto_libNEXS_gf_GestaltBomberStrikeThread_lp_category;

void libNEXS_gf_GestaltBomberStrikeThread (unit lp_unit, region lp_area, int lp_category) {
    auto_libNEXS_gf_GestaltBomberStrikeThread_lp_unit = lp_unit;
    auto_libNEXS_gf_GestaltBomberStrikeThread_lp_area = lp_area;
    auto_libNEXS_gf_GestaltBomberStrikeThread_lp_category = lp_category;

    if (auto_libNEXS_gf_GestaltBomberStrikeThread_Trigger == null) {
        auto_libNEXS_gf_GestaltBomberStrikeThread_Trigger = TriggerCreate("auto_libNEXS_gf_GestaltBomberStrikeThread_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_GestaltBomberStrikeThread_Trigger, false, false);
}

bool auto_libNEXS_gf_GestaltBomberStrikeThread_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libNEXS_gf_GestaltBomberStrikeThread_lp_unit;
    region lp_area = auto_libNEXS_gf_GestaltBomberStrikeThread_lp_area;
    int lp_category = auto_libNEXS_gf_GestaltBomberStrikeThread_lp_category;

    // Variable Declarations
    unit lv_jTargetUnit;

    // Automatic Variable Declarations
    int autoFB66E20F_val;

    // Variable Initialization

    // Implementation
    autoFB66E20F_val = lp_category;
    if (autoFB66E20F_val == 1) {
        Wait(2.0, c_timeGame);
        lv_jTargetUnit = UnitGroupRandomUnit(UnitGroupAlliance(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, c_unitAllianceEnemy, lp_area, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1), c_unitCountAlive);
        UnitIssueOrder(lp_unit, OrderTargetingUnit(AbilityCommand("ZeroBomberNormalRocket", 0), lv_jTargetUnit), c_orderQueueAddToEnd);
        while (true) {
            if ((UnitIsAlive(lv_jTargetUnit) == false) && (UnitMagazineCount(lp_unit, "ZeroBomberNormalRocketHanger") > 0)) {
                lv_jTargetUnit = UnitGroupRandomUnit(UnitGroupAlliance(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, c_unitAllianceEnemy, lp_area, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1), c_unitCountAlive);
                UnitIssueOrder(lp_unit, OrderTargetingUnit(AbilityCommand("ZeroBomberNormalRocket", 0), lv_jTargetUnit), c_orderQueueAddToEnd);
            }

            if (((UnitCountAlliance(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, c_unitAllianceEnemy, lp_area, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0) == 0) || (UnitMagazineCount(lp_unit, "ZeroBomberNormalRocketHanger") == 0))) {
                break;
            }

            Wait(0.5, c_timeGame);
        }
    }
    else if (autoFB66E20F_val == 2) {
        Wait(2.0, c_timeGame);
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("ZeroBomberFireRocket", 0), RegionRandomPoint(lp_area)), c_orderQueueAddToEnd);
    }
    else if (autoFB66E20F_val == 3) {
        Wait(2.0, c_timeGame);
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("ZeroBomberSmokeRocket", 0), RegionRandomPoint(lp_area)), c_orderQueueAddToEnd);
    }
    else {
    }
    return true;
}

trigger auto_libNEXS_gf_GestaltBomberDefence_Trigger = null;
unit auto_libNEXS_gf_GestaltBomberDefence_lp_bomberPlatform;
unit auto_libNEXS_gf_GestaltBomberDefence_lp_target;

void libNEXS_gf_GestaltBomberDefence (unit lp_bomberPlatform, unit lp_target) {
    auto_libNEXS_gf_GestaltBomberDefence_lp_bomberPlatform = lp_bomberPlatform;
    auto_libNEXS_gf_GestaltBomberDefence_lp_target = lp_target;

    if (auto_libNEXS_gf_GestaltBomberDefence_Trigger == null) {
        auto_libNEXS_gf_GestaltBomberDefence_Trigger = TriggerCreate("auto_libNEXS_gf_GestaltBomberDefence_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_GestaltBomberDefence_Trigger, false, false);
}

bool auto_libNEXS_gf_GestaltBomberDefence_TriggerFunc (bool testConds, bool runActions) {
    unit lp_bomberPlatform = auto_libNEXS_gf_GestaltBomberDefence_lp_bomberPlatform;
    unit lp_target = auto_libNEXS_gf_GestaltBomberDefence_lp_target;

    // Variable Declarations
    fixed lv_platformX;
    fixed lv_platformY;
    fixed lv_mapX;
    fixed lv_mapY;
    fixed lv_cutX;
    fixed lv_cutY;
    point lv_point;
    int lv_diyInit;
    unit lv_airPlane;
    fixed lv_airStrikeAngle;
    int lv_porNNumber;
    int lv_times;
    int lv_negativeRandom;
    fixed lv_unitSpeed;
    fixed lv_temp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_platformX = PointGetX(UnitGetPosition(lp_bomberPlatform));
    lv_platformY = PointGetY(UnitGetPosition(lp_bomberPlatform));
    lv_mapX = libNtve_gf_WidthOfRegion(RegionEntireMap());
    lv_mapY = libNtve_gf_HeightOfRegion(RegionEntireMap());
    lv_cutX = ((libNtve_gf_WidthOfRegion(RegionEntireMap()) - libNtve_gf_WidthOfRegion(RegionPlayableMap())) / 2.0);
    lv_cutY = ((libNtve_gf_HeightOfRegion(RegionEntireMap()) - libNtve_gf_HeightOfRegion(RegionPlayableMap())) / 2.0);
    lv_diyInit = 1;
    lv_porNNumber = 1;
    lv_temp = 0.75;

    // Implementation
    if ((lv_platformX <= (lv_mapX / 2.0)) && (lv_platformY <= (lv_mapY / 2.0))) {
        lv_point = Point(lv_cutX, lv_cutY);
    }
    else if ((lv_platformX <= (lv_mapX / 2.0)) && (lv_platformY > (lv_mapY / 2.0))) {
        lv_point = Point(lv_cutX, (lv_mapY - lv_cutY));
    }
    else if ((lv_platformX > (lv_mapX / 2.0)) && (lv_platformY <= (lv_mapY / 2.0))) {
        lv_point = Point((lv_mapX - lv_cutX), lv_cutY);
    }
    else if ((lv_platformX > (lv_mapX / 2.0)) && (lv_platformY > (lv_mapY / 2.0))) {
        lv_point = Point((lv_mapX - lv_cutX), (lv_mapY - lv_cutY));
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "GestaltZeroBomber2", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, lv_point);
    lv_airPlane = UnitLastCreated();
    UnitIssueOrder(lv_airPlane, OrderTargetingUnit(AbilityCommand("ZeroBomberNormalRocket2", 0), lp_target), c_orderQueueReplace);
    while ((AbsI(1) == 1)) {
        if (((UnitHasBehavior2(lv_airPlane, "GestaltBomberDefenseOKAB") == true) || (UnitIsAlive(lp_target) == false))) {
            lv_unitSpeed = UnitGetPropertyFixed(lv_airPlane, c_unitPropMovementSpeed, c_unitPropCurrent);
            lv_negativeRandom = RandomInt(0, 1);
            lv_airStrikeAngle = UnitGetFacing(lv_airPlane);
            if ((lv_negativeRandom == 1)) {
                lv_porNNumber = -1;
            }

            while ((lv_times <= 2)) {
                if ((lv_times == 0)) {
                    UnitIssueOrder(lv_airPlane, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_airPlane), (lv_diyInit * (lv_temp * lv_unitSpeed)), lv_airStrikeAngle)), c_orderQueueReplace);
                    lv_airStrikeAngle += (lv_porNNumber * 112.5);
                }
                else {
                    UnitIssueOrder(lv_airPlane, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_airPlane), ((0.76 * lv_diyInit) * (lv_temp * lv_unitSpeed)), lv_airStrikeAngle)), c_orderQueueReplace);
                    lv_airStrikeAngle += (lv_porNNumber * 45.0);
                }
                Wait((lv_temp * lv_diyInit), c_timeGame);
                lv_times += 1;
            }
            UnitIssueOrder(lv_airPlane, OrderTargetingPoint(AbilityCommand("move", 0), lv_point), c_orderQueueReplace);
            break;
        }

        Wait(0.125, c_timeGame);
    }
    if ((libNtve_gf_UnitInRegion(lv_airPlane, RegionRect((((libNtve_gf_WidthOfRegion(RegionEntireMap()) - libNtve_gf_WidthOfRegion(RegionPlayableMap())) / 2.0) + 10.0), (((libNtve_gf_HeightOfRegion(RegionEntireMap()) - libNtve_gf_HeightOfRegion(RegionPlayableMap())) / 2.0) + 10.0), (((libNtve_gf_WidthOfRegion(RegionEntireMap()) + libNtve_gf_WidthOfRegion(RegionPlayableMap())) / 2.0) - 10.0), (((libNtve_gf_HeightOfRegion(RegionEntireMap()) + libNtve_gf_HeightOfRegion(RegionPlayableMap())) / 2.0) - 10.0))) == false)) {
        UnitBehaviorAdd(lv_airPlane, "HyperionVoidCoopTimedLifeExpire4", lv_airPlane, 1);
    }

    return true;
}

void libNEXS_gf_StormDropPodInitialGift () {
    // Variable Declarations
    point lv_point;
    int lv_player;

    // Automatic Variable Declarations
    int auto1DB16F96_val;
    int auto0174676F_val;
    int auto3ACC8438_val;
    int autoBB92B9CF_val;
    int auto6128119F_val;
    int auto5D15163C_val;
    int auto10B0A85B_val;
    int auto9BD82D00_val;
    int auto81AE6984_val;
    int auto8DE7D522_val;
    int autoA4D38886_val;
    int autoEDA60C91_val;
    int auto9FE82192_val;
    int autoB6597213_val;
    int autoF615AEB4_val;
    int autoA8E815AA_val;
    int auto2E95D1E5_val;

    // Variable Initialization

    // Implementation
    if ((libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13 == 1)) {
        lv_player = 1;
    }
    else {
        lv_player = 2;
    }
    if (true) {
        auto1DB16F96_val = lv_player;
        if (auto1DB16F96_val == 1) {
            lv_point = Point(184.0, 26.5);
        }
        else {
            lv_point = Point(175.5, 43.0);
        }
    }
    else if (true) {
        auto0174676F_val = lv_player;
        if (auto0174676F_val == 1) {
            lv_point = Point(83.0, 25.0);
        }
        else {
            lv_point = Point(105.0, 39.0);
        }
    }
    else if (true) {
        auto3ACC8438_val = lv_player;
        if (auto3ACC8438_val == 1) {
            lv_point = Point(34.0, 61.0);
        }
        else {
            lv_point = Point(40.0, 37.0);
        }
    }
    else if (true) {
        autoBB92B9CF_val = lv_player;
        if (autoBB92B9CF_val == 1) {
            lv_point = Point(30.0, 48.0);
        }
        else {
            lv_point = Point(64.0, 14.0);
        }
    }
    else if (true) {
        auto6128119F_val = lv_player;
        if (auto6128119F_val == 1) {
            lv_point = Point(44.0, 48.0);
        }
        else {
            lv_point = Point(66.5, 28.0);
        }
    }
    else if (true) {
        auto5D15163C_val = lv_player;
        if (auto5D15163C_val == 1) {
            lv_point = Point(35.0, 140.0);
        }
        else {
            lv_point = Point(41.0, 145.5);
        }
    }
    else if (true) {
        auto10B0A85B_val = lv_player;
        if (auto10B0A85B_val == 1) {
            lv_point = Point(54.0, 63.5);
        }
        else {
            lv_point = Point(79.0, 41.0);
        }
    }
    else if (true) {
        auto9BD82D00_val = lv_player;
        if (auto9BD82D00_val == 1) {
            lv_point = Point(70.5, 92.0);
        }
        else {
            lv_point = Point(94.0, 68.0);
        }
    }
    else if (true) {
        auto81AE6984_val = lv_player;
        if (auto81AE6984_val == 1) {
            lv_point = Point(72.4, 96.3);
        }
        else {
            lv_point = Point(78.6, 88.3);
        }
    }
    else if (true) {
        auto8DE7D522_val = lv_player;
        if (auto8DE7D522_val == 1) {
            lv_point = Point(60.5, 27.0);
        }
        else {
            lv_point = Point(75.0, 23.0);
        }
    }
    else if (true) {
        autoA4D38886_val = lv_player;
        if (autoA4D38886_val == 1) {
            lv_point = Point(117.0, 107.5);
        }
        else {
            lv_point = Point(130.0, 93.5);
        }
    }
    else if (true) {
        autoEDA60C91_val = lv_player;
        if (autoEDA60C91_val == 1) {
            lv_point = Point(24.0, 64.0);
        }
        else {
            lv_point = Point(56.0, 32.0);
        }
    }
    else if (true) {
        auto9FE82192_val = lv_player;
        if (auto9FE82192_val == 1) {
            lv_point = Point(185.0, 53.0);
        }
        else {
            lv_point = Point(180.0, 46.5);
        }
    }
    else if (true) {
        autoB6597213_val = lv_player;
        if (autoB6597213_val == 1) {
            lv_point = Point(35.0, 150.0);
        }
        else {
            lv_point = Point(41.0, 159.0);
        }
    }
    else if (true) {
        autoF615AEB4_val = lv_player;
        if (autoF615AEB4_val == 1) {
            lv_point = Point(56.0, 80.0);
        }
        else {
            lv_point = Point(80.0, 51.0);
        }
    }
    else if (true) {
        autoA8E815AA_val = lv_player;
        if (autoA8E815AA_val == 1) {
            lv_point = Point(36.5, 166.0);
        }
        else {
            lv_point = Point(44.5, 172.0);
        }
    }
    else if (true) {
        auto2E95D1E5_val = lv_player;
        if (auto2E95D1E5_val == 1) {
            lv_point = Point(138.0, 148.0);
        }
        else {
            lv_point = Point(164.0, 120.0);
        }
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "GestaltDropPod2", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, lv_point);
    Wait(1.0, c_timeGame);
    TriggerEnable(libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE4BDBFE794A8, true);
}

trigger auto_libNEXS_gf_ValerianGlobalTextPanelCreate_Trigger = null;

void libNEXS_gf_ValerianGlobalTextPanelCreate () {
    if (auto_libNEXS_gf_ValerianGlobalTextPanelCreate_Trigger == null) {
        auto_libNEXS_gf_ValerianGlobalTextPanelCreate_Trigger = TriggerCreate("auto_libNEXS_gf_ValerianGlobalTextPanelCreate_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_ValerianGlobalTextPanelCreate_Trigger, false, false);
}

bool auto_libNEXS_gf_ValerianGlobalTextPanelCreate_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_iplayer;
    int lv_random;

    // Automatic Variable Declarations
    int autoC365DE05_val;

    // Variable Initialization
    lv_iplayer = PlayerGroupEmpty();

    // Implementation
    lv_iplayer = PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5);
    DialogCreate(1100, 700, c_anchorTop, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), lv_iplayer, true);
    libNEXS_gv_valerianGlobalTextFrame[1] = DialogLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeCutscene);
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 1100, 1100);
    DialogControlSetPosition(DialogControlLastCreated(), lv_iplayer, c_anchorTop, 0, 0);
    DialogControlSetVisible(DialogControlLastCreated(), lv_iplayer, true);
    libNEXS_gv_valerianGlobalTextFrame[0] = DialogLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    DialogControlSetPosition(DialogControlLastCreated(), lv_iplayer, c_anchorTop, 0, 45);
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 50, 50);
    DialogControlSetVisible(DialogControlLastCreated(), lv_iplayer, false);
    libNEXS_gv_valerianGlobalTextPanel = DialogControlLastCreated();
    DialogControlCreate(libNEXS_gv_valerianGlobalTextFrame[0], c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), lv_iplayer, 1000, 30);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Coop_ValerianLED", lv_iplayer);
    libNEXS_gv_valerianGlobalText = DialogControlLastCreated();
    DialogControlSetPositionRelative(libNEXS_gv_valerianGlobalText, lv_iplayer, c_anchorBottom, libNEXS_gv_valerianGlobalTextPanel, c_anchorBottom, 320, 71);
    DialogControlFadeTransparency(libNEXS_gv_valerianGlobalText, lv_iplayer, 0.0625, 100.0);
    libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_AF12D0C1"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    Wait(2.0, c_timeAI);
    DialogControlFadeTransparency(libNEXS_gv_valerianGlobalText, lv_iplayer, 1.0, 0.0);
    lv_random = RandomInt(1, 3);
    autoC365DE05_val = lv_random;
    if (autoC365DE05_val == 2) {
        UIShowTextCrawl(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5), StringExternal("Param/Value/lib_NEXS_D6E8BF30"), StringExternal("Param/Value/lib_NEXS_F78745F7"), 10.0, SoundLink("UI_AC_Vorazun_Birth", -1), SoundLink("UI_AC_Vorazun_Birth", -1));
    }
    else if (autoC365DE05_val == 3) {
        UIShowTextCrawl(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5), StringExternal("Param/Value/lib_NEXS_AD042F8C"), StringExternal("Param/Value/lib_NEXS_8F2E11DE"), 10.0, SoundLink("UI_AC_Vorazun_Birth", -1), SoundLink("UI_AC_Vorazun_Birth", -1));
    }
    else {
        UIShowTextCrawl(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5), StringExternal("Param/Value/lib_NEXS_F4120B5A"), StringExternal("Param/Value/lib_NEXS_B5964B3C"), 10.0, SoundLink("UI_AC_Vorazun_Birth", -1), SoundLink("UI_AC_Vorazun_Birth", -1));
    }
    Wait(10.0, c_timeAI);
    libNEXS_gf_ValerianGlobalTextChange(0);
    UIHideTextCrawl(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    return true;
}

void libNEXS_gf_ValerianGlobalTextChange (int lp_property) {
    // Automatic Variable Declarations
    unitgroup autoB876A88A_g;
    int autoB876A88A_u;
    unit autoB876A88A_var;
    int auto8E4E5DC3_val;

    // Implementation
    if (((lp_property > 32) || ((lp_property > 0) && (lp_property < 24)))) {
        autoB876A88A_g = libNEXS_gv_valerianCaster;
        autoB876A88A_u = UnitGroupCount(autoB876A88A_g, c_unitCountAll);
        for (;; autoB876A88A_u -= 1) {
            autoB876A88A_var = UnitGroupUnitFromEnd(autoB876A88A_g, autoB876A88A_u);
            if (autoB876A88A_var == null) { break; }
            UnitBehaviorAddPlayer(autoB876A88A_var, "ValerianGlobalTextCooldown", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, 1);
        }
    }

    DialogControlFadeTransparency(libNEXS_gv_valerianGlobalText, PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5), 1.0, 100.0);
    Wait(1.5, c_timeAI);
    auto8E4E5DC3_val = lp_property;
    if (auto8E4E5DC3_val == 1) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_0371318A"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 2) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_09958ACD"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 3) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_EF9D1574"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 4) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_A504DCE0"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 5) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_460A6338"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 6) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_37B2D14D"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 7) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_774260B0"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 8) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_7252918B"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 9) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_6B93441C"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 10) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_B9437A7F"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 11) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_813B5909"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 12) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_AD18BDC4"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 13) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_412AD543"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 14) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_DD7B675B"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 15) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_E08F6ADD"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 16) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_95755867"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 17) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_3403E8E9"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 18) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_E1CFBFD8"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 19) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_94B0BB46"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 20) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_121D7B99"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 21) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_82F01ADE"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 22) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_B954C323"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 23) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_222D96D4"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 24) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_61380475"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 25) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_FCF8A42D"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 26) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_DDD2842A"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 27) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_3F45DA7E"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 28) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_FDCF3D4F"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 29) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_D9C76AA9"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 30) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_E62AF668"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 31) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_F16EB165"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 32) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_008B11E6"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else if (auto8E4E5DC3_val == 33) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_FD56BBB3"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    else {
        libNtve_gf_SetDialogItemText(libNEXS_gv_valerianGlobalText, StringExternal("Param/Value/lib_NEXS_217F2754"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5));
    }
    DialogControlFadeTransparency(libNEXS_gv_valerianGlobalText, PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5), 1.0, 0.0);
}

void libNEXS_gf_E5A4A7E4B8BBE69599E8A7A6E58F91E599A8E5889DE5A78BE58C96E58AA8E4BD9C4 () {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, "SMULOAD", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, "AresClassWeaponsSystem", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, "MultilockTargetingSystems", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, "MaelstromRounds", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, "ProjectileAccelerators", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, "TerranVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, "TerranVehicleAndShipWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, "TerranVehicleAndShipWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, "TerranVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, "TerranVehicleAndShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, "TerranVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, "TerranInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, "TerranInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, "TerranInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, "ToshMechWeaponUpgrade1", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, "ToshMechWeaponUpgrade12", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, "ToshMechWeaponUpgrade13", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, "RaynorTankUpgrade", 1);
}

int libNEXS_gf_E8BF94E59B9EE4BDBFE794A8E7BAB3E6B395E8AEB8E79A84E78EA9E5AEB6E7BC96E58FB7 () {
    // Automatic Variable Declarations
    // Implementation
    return libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10;
}

void libNEXS_gf_E89C82E5B7A2E588B7E696B0E98092E5BD92 (point lp_e587BAE7949FE782B9E4BD8DE7BDAE, point lp_e5BD93E5898DE4BD8DE7BDAE, int lp_e8BFADE4BBA3E6ACA1E695B0) {
    // Variable Declarations
    int lv_e58D95E4BD8DE7BB84E695B0E9878FE8AEA1E695B0;
    int lv_e69C80E5A4A7E8B79DE7A6BB;
    int lv_e69C80E5B08FE8B79DE7A6BB;
    fixed lv_e8B79DE7A6BBE587BAE7949FE782B9E79A84E8B79DE7A6BB;
    point lv_e4B88BE4B8AAE588B7E696B0E4BD8DE7BDAE;
    int lv_e588B7E696B0E695B0E9878F;

    // Automatic Variable Declarations
    const int autoC7C50A58_ae = 4;
    int autoC7C50A58_var;
    const int autoE0515FC3_ae = 45;
    int autoE0515FC3_var;

    // Variable Initialization
    lv_e69C80E5A4A7E8B79DE7A6BB = 24;
    lv_e69C80E5B08FE8B79DE7A6BB = 9;
    lv_e8B79DE7A6BBE587BAE7949FE782B9E79A84E8B79DE7A6BB = DistanceBetweenPoints(lp_e5BD93E5898DE4BD8DE7BDAE, lp_e587BAE7949FE782B9E4BD8DE7BDAE);

    // Implementation
    if ((lp_e8BFADE4BBA3E6ACA1E695B0 < 1)) {
        return ;
    }

    lv_e69C80E5B08FE8B79DE7A6BB = 8;
    if ((DistanceBetweenPoints(lp_e587BAE7949FE782B9E4BD8DE7BDAE, lp_e5BD93E5898DE4BD8DE7BDAE) <= 15.0)) {
        lv_e69C80E5B08FE8B79DE7A6BB = 6;
    }

    autoC7C50A58_var = 1;
    for ( ; autoC7C50A58_var <= autoC7C50A58_ae; autoC7C50A58_var += 1 ) {
        lv_e588B7E696B0E695B0E9878F = RandomInt(0, 13);
        if ((lv_e588B7E696B0E695B0E9878F < 1)) {
            lv_e588B7E696B0E695B0E9878F = 3;
        }
        else {
            if ((lv_e588B7E696B0E695B0E9878F < 4)) {
                lv_e588B7E696B0E695B0E9878F = 2;
            }
            else {
                lv_e588B7E696B0E695B0E9878F = 1;
            }
        }
        autoE0515FC3_var = 1;
        for ( ; autoE0515FC3_var <= autoE0515FC3_ae; autoE0515FC3_var += 1 ) {
            lv_e4B88BE4B8AAE588B7E696B0E4BD8DE7BDAE = PointWithOffsetPolar(lp_e5BD93E5898DE4BD8DE7BDAE, RandomFixed(lv_e69C80E5B08FE8B79DE7A6BB, lv_e69C80E5A4A7E8B79DE7A6BB), (AngleBetweenPoints(lp_e587BAE7949FE782B9E4BD8DE7BDAE, lp_e5BD93E5898DE4BD8DE7BDAE) + RandomFixed(-120.0, 120.0)));
            if ((RegionContainsPoint(RegionEntireMap(), lv_e4B88BE4B8AAE588B7E696B0E4BD8DE7BDAE) == false)) {
                break;
            }

            if ((RegionContainsPoint(RegionEntireMap(), lv_e4B88BE4B8AAE588B7E696B0E4BD8DE7BDAE) == true) && (PointPathingPassable(lv_e4B88BE4B8AAE588B7E696B0E4BD8DE7BDAE) == true) && (PathingType(lv_e4B88BE4B8AAE588B7E696B0E4BD8DE7BDAE) == c_pathingGround) && (PointPathingIsConnected(lv_e4B88BE4B8AAE588B7E696B0E4BD8DE7BDAE, lp_e587BAE7949FE782B9E4BD8DE7BDAE) == true) && (UnitGroupCount(UnitGroup("CerberusNode", c_playerAny, RegionCircle(lv_e4B88BE4B8AAE588B7E696B0E4BD8DE7BDAE, 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= lv_e588B7E696B0E695B0E9878F) && (UnitGroupCount(UnitGroup("CerberusNode", c_playerAny, RegionCircle(lv_e4B88BE4B8AAE588B7E696B0E4BD8DE7BDAE, lv_e69C80E5B08FE8B79DE7A6BB), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0) && (UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(lv_e4B88BE4B8AAE588B7E696B0E4BD8DE7BDAE, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0) && (UnitGroupCount(UnitGroup(null, 0, RegionCircle(lv_e4B88BE4B8AAE588B7E696B0E4BD8DE7BDAE, 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0) && (UnitGroupCount(UnitGroup(null, 1, RegionCircle(lv_e4B88BE4B8AAE588B7E696B0E4BD8DE7BDAE, 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0) && (UnitGroupCount(UnitGroup(null, 2, RegionCircle(lv_e4B88BE4B8AAE588B7E696B0E4BD8DE7BDAE, 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "CerberusNode", 0, 0, lv_e4B88BE4B8AAE588B7E696B0E4BD8DE7BDAE);
                if ((DistanceBetweenPoints(UnitGetPosition(UnitLastCreated()), lv_e4B88BE4B8AAE588B7E696B0E4BD8DE7BDAE) > 0.75)) {
                    UnitRemove(UnitLastCreated());
                    break;
                }

                while ((TimerGetRemaining(libNEXS_gv_e588B7E696B0E8AEA1E697B6E599A8) > 1)) {
                    Wait(0.25, c_timeGame);
                }
                TimerRestart(libNEXS_gv_e588B7E696B0E8AEA1E697B6E599A8);
                libNEXS_gf_E89C82E5B7A2E588B7E696B0E98092E5BD92(lp_e587BAE7949FE782B9E4BD8DE7BDAE, lv_e4B88BE4B8AAE588B7E696B0E4BD8DE7BDAE, (lp_e8BFADE4BBA3E6ACA1E695B0 - 1));
                break;
            }

        }
    }
}

void libNEXS_gf_JinaraInitialTriggle () {
    // Variable Declarations
    int lv_rand;

    // Automatic Variable Declarations
    unitgroup auto5F459863_g;
    int auto5F459863_u;
    unit auto5F459863_var;
    unitgroup autoC51DEBBE_g;
    int autoC51DEBBE_u;
    unit autoC51DEBBE_var;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, "UnknownUpgrade2813", 1);
    auto5F459863_g = UnitGroup("CoopCasterJinara", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto5F459863_u = UnitGroupCount(auto5F459863_g, c_unitCountAll);
    for (;; auto5F459863_u -= 1) {
        auto5F459863_var = UnitGroupUnitFromEnd(auto5F459863_g, auto5F459863_u);
        if (auto5F459863_var == null) { break; }
        libNEXS_gv_jinaraCaster = auto5F459863_var;
    }
    autoC51DEBBE_g = UnitGroup("JinaraAltar", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    autoC51DEBBE_u = UnitGroupCount(autoC51DEBBE_g, c_unitCountAll);
    for (;; autoC51DEBBE_u -= 1) {
        autoC51DEBBE_var = UnitGroupUnitFromEnd(autoC51DEBBE_g, autoC51DEBBE_u);
        if (autoC51DEBBE_var == null) { break; }
        libNEXS_gv_jinaraAltar = autoC51DEBBE_var;
    }
    TriggerEnable(libNEXS_gt_AbilityTransmissionJinaraRouteChoice, true);
    TriggerEnable(libNEXS_gt_JinaraNormalStasisSlowBuffScale, true);
    TriggerEnable(libNEXS_gt_JinaraNormalStasisBeam_FlashOn, true);
    TriggerEnable(libNEXS_gt_JinaraNormalStasisBeam_FlashOff, true);
    TriggerEnable(libNEXS_gt_JinaraRouteChoice, true);
    TriggerExecute(libNEXS_gt_JinaraRouteChoiceHighLight, true, false);
    TriggerEnable(libNEXS_gt_JinaraUnitSacrificeViscous, true);
    TriggerEnable(libNEXS_gt_JinaraUnitSacrificeInitialPointSet, true);
    TriggerEnable(libNEXS_gt_JinaraUnitSacrificeSupplicantHeal, true);
    TriggerEnable(libNEXS_gt_JinaraUnitSacrificeSlayerBuff, true);
    TriggerEnable(libNEXS_gt_JinaraUnitSacrificeMonitorSweep, true);
    TriggerEnable(libNEXS_gt_JinaraUnitSacrificeDarkTemplarImprison, true);
    TriggerEnable(libNEXS_gt_JinaraUnitSacrificeColossusDamage, true);
    TriggerEnable(libNEXS_gt_JinaraUnitSacrificIncrease_Scale, true);
    TriggerEnable(libNEXS_gt_JinaraUnitSacrificIncreaseUpgrade_Scale, true);
    TriggerEnable(libNEXS_gt_JinaraColossusLockAttackGlaze, true);
    TriggerEnable(libNEXS_gt_JinaraWarpPrismPhaseShiftRewind, true);
    TriggerEnable(libNEXS_gt_SupplicantWarpTrain, true);
    TriggerEnable(libNEXS_gt_SupplicantActualTrain, true);
    TriggerEnable(libNEXS_gt_SupplicantWarpFinish, true);
    TriggerEnable(libNEXS_gt_SupplicantWarpCancel, true);
    TriggerEnable(libNEXS_gt_JinaraSupplicantShowBladeSwords, true);
    libNEXS_gf_JinaraSoulRewardEyes();
}

void libNEXS_gf_JinaraGPUpdate (int lp_player) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int auto70B2A9C7_ae = 2;
    const int auto70B2A9C7_ai = 1;
    int autoFF7E8EF1_val;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "Coop_GlobalCastingTemplates/JinaraTrueGlobalCommandPanelTemplate");
    lv_buttonIndex = 1;
    for ( ; ( (auto70B2A9C7_ai >= 0 && lv_buttonIndex <= auto70B2A9C7_ae) || (auto70B2A9C7_ai < 0 && lv_buttonIndex >= auto70B2A9C7_ae) ) ; lv_buttonIndex += auto70B2A9C7_ai ) {
    }
    autoFF7E8EF1_val = lp_player;
    if (autoFF7E8EF1_val == 1) {
    }
    else if (autoFF7E8EF1_val == 2) {
    }
    else {
    }
    if (true) {
    }
}

void libNEXS_gf_JinaraAirRoute () {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(libNEXS_gt_JinaraMotherShipSpawn, true);
    TriggerEnable(libNEXS_gt_JinaraMotherShipDeath, true);
    TriggerEnable(libNEXS_gt_JinaraMotherShipGravityBombMark, true);
    TriggerEnable(libNEXS_gt_JinaraMotherShipGravityTeleport, true);
    TriggerEnable(libNEXS_gt_JinaraMotherShipLoadAB, true);
    TriggerEnable(libNEXS_gt_JinaraMotherShipUnloadRB, true);
    TriggerEnable(libNEXS_gt_JinaraMotherShipDyingUnLoad, true);
    TriggerEnable(libNEXS_gt_UnLoadProbe, true);
    TriggerEnable(libNEXS_gt_UnLoadSupplicant, true);
    TriggerEnable(libNEXS_gt_UnLoadMonitor, true);
    TriggerEnable(libNEXS_gt_UnLoadSlayer, true);
    TriggerEnable(libNEXS_gt_UnLoadDarkTemplar, true);
    TriggerEnable(libNEXS_gt_UnLoadColossus, true);
    TriggerEnable(libNEXS_gt_UnLoadAscendant, true);
    TriggerEnable(libNEXS_gt_UnLoadAvenger, true);
    TriggerEnable(libNEXS_gt_UnLoadExtraUnits, true);
    TriggerEnable(libNEXS_gt_UnLoadALL, true);
    TriggerEnable(libNEXS_gt_InitJinaraApocalypticBeam, true);
    TriggerEnable(libNEXS_gt_JinaraApocalypticBeamShake, true);
    TriggerEnable(libNEXS_gt_JinaraApocalypticBeamController, true);
    TriggerEnable(libNEXS_gt_SetJinaraDisplacementBeamSpeedDamage, true);
    TriggerEnable(libNEXS_gt_AbilityTransmissionJinaraNormalUnitsSacrifice, true);
}

void libNEXS_gf_JinaraNormalRoute () {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(libNEXS_gt_JinaraCallWarpPrismTrigger, true);
    TriggerEnable(libNEXS_gt_JinaraNormalStasisFieldKill, true);
    TriggerEnable(libNEXS_gt_JinaraNormalDeath, true);
    TriggerEnable(libNEXS_gt_JinaraBloodSoulSpawn, true);
    TriggerEnable(libNEXS_gt_JinaraBloodSoulDeath, true);
    TriggerEnable(libNEXS_gt_JinaraBloodSoulCopyAbilR, true);
    TriggerEnable(libNEXS_gt_JinaraBloodSoulCopyAbilQ, true);
    TriggerEnable(libNEXS_gt_JinaraBloodSoulCopyAbilE, true);
    TriggerEnable(libNEXS_gt_JinaraBloodSoulCopyAbilD, true);
    TriggerEnable(libNEXS_gt_JinaraBloodSoulDamageHeal, true);
    TriggerEnable(libNEXS_gt_JinaraBloodSoulStasisBeamKill, true);
    TriggerEnable(libNEXS_gt_AbilityTransmissionJinaraNormalCallWarpPrism, true);
    TriggerEnable(libNEXS_gt_AbilityTransmissionJinaraNormalDelayBoom, true);
    TriggerEnable(libNEXS_gt_AbilityTransmissionJinaraNormalPissed, true);
    TriggerEnable(libNEXS_gt_AbilityTransmissionJinaraNormalRevive, true);
    TriggerEnable(libNEXS_gt_AbilityTransmissionJinaraNormalSacrificeBuffUpgrade, true);
    TriggerEnable(libNEXS_gt_AbilityTransmissionJinaraNormalUnitsSacrifice, true);
}

void libNEXS_gf_JinaraScarletRoute () {
    // Automatic Variable Declarations
    // Implementation
    libNEXS_gv_jinaraSacrificeScarletExtraEnergy = 3;
    UnitBehaviorAddPlayer(libNEXS_gv_jinaraAltar, "JinaraAltarScarletRoute", 1, 1);
    TriggerEnable(libNEXS_gt_JinaraScarletLightningStrikesTrigger, true);
    TriggerEnable(libNEXS_gt_JinaraScarletStormStrikesTrigger, true);
    TriggerEnable(libNEXS_gt_JinaraScarletKillstoPower, true);
    TriggerEnable(libNEXS_gt_JinaraScarletRespawnTargetSet, true);
    TriggerEnable(libNEXS_gt_JinaraScarletAltarComplete, true);
    TriggerEnable(libNEXS_gt_JinaraScarletDeath, true);
    TriggerEnable(libNEXS_gt_JinaraScarletRevive, true);
    TriggerEnable(libNEXS_gt_JinaraScarletLethalSwipeShieldRefresh, true);
    TriggerEnable(libNEXS_gt_JinaraScarletLethalSwipeShieldTakingDamage, true);
    TriggerEnable(libNEXS_gt_JinaraScarletLethalSwipeShieldBreakdown, true);
    TriggerEnable(libNEXS_gt_JinaraScarletUnitsTeammateHealResponse, true);
    TriggerEnable(libNEXS_gt_CallVoidRay, true);
    TriggerEnable(libNEXS_gt_CallCarrier, true);
    TriggerEnable(libNEXS_gt_CarrierHaveSupplicants, true);
    TriggerEnable(libNEXS_gt_CallMotherShip, true);
    TriggerEnable(libNEXS_gt_MothershipCrashCameraShake, true);
    TriggerEnable(libNEXS_gt_JinaraScarlet_SoulAbsorption_Impact, true);
    TriggerEnable(libNEXS_gt_JinaraScarlet_SoulAbsorption_Launch, true);
    TriggerEnable(libNEXS_gt_JinaraScarlet_SoulAbsorption_ScarletUnitsBuff, true);
    TriggerEnable(libNEXS_gt_SetJinaraEmpowerMeDuration, true);
    TriggerEnable(libNEXS_gt_JinaraScarlet_EmpowerEnergyClear, true);
    TriggerEnable(libNEXS_gt_JinaraScarlet_EmpowerAdd, true);
    TriggerEnable(libNEXS_gt_JinaraScarlet_EmpowerRemove, true);
    TriggerEnable(libNEXS_gt_JinaraScarlet_EmpowerUpdate, true);
    TriggerEnable(libNEXS_gt_JinaraUnitsTurntoScarletApplySacrificeBuff, true);
    TriggerEnable(libNEXS_gt_AbilityTransmissionJinaraScarletDeathFleet, true);
    TriggerEnable(libNEXS_gt_AbilityTransmissionJinaraScarletEmpowerMe, true);
    TriggerEnable(libNEXS_gt_AbilityTransmissionJinaraScarletSacrifice, true);
    TriggerEnable(libNEXS_gt_AbilityTransmissionJinaraScarletUnitsSacrifice, true);
    TriggerEnable(libNEXS_gt_AbilityTransmissionJinaraScarletUnitsTurn, true);
}

void libNEXS_gf_JinaraCommanderVOSend (int lp_listenerPlayer, soundlink lp_vOSound, playergroup lp_targetPlayers) {
    // Automatic Variable Declarations
    // Implementation
    SoundPlayForPlayer(lp_vOSound, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, lp_targetPlayers, 100.0, 0.0);
}

point libNEXS_gf_JinaraUnloadNearbyGroundPathablePoint (point lp_initialDropPoint, fixed lp_distanceOffsetMax) {
    // Variable Declarations
    point lv_returnedDropPoint;
    point lv_testDropPoint;
    int lv_moveAttempts;

    // Automatic Variable Declarations
    const int auto07D526F2_ae = 100;
    const int auto07D526F2_ai = 1;

    // Variable Initialization

    // Implementation
    lv_returnedDropPoint = lp_initialDropPoint;
    lv_moveAttempts = 1;
    for ( ; ( (auto07D526F2_ai >= 0 && lv_moveAttempts <= auto07D526F2_ae) || (auto07D526F2_ai < 0 && lv_moveAttempts >= auto07D526F2_ae) ) ; lv_moveAttempts += auto07D526F2_ai ) {
        lv_testDropPoint = PointWithOffsetPolar(lp_initialDropPoint, RandomFixed(0.0, lp_distanceOffsetMax), libNtve_gf_RandomAngle());
        if ((PathingType(lv_testDropPoint) == c_pathingGround) && (PointPathingPassable(lv_testDropPoint) == true)) {
            lv_returnedDropPoint = lv_testDropPoint;
            break;
        }

    }
    return lv_returnedDropPoint;
}

void libNEXS_gf_SetUnitAttributePoints (string lp_attribute, unit lp_unit, int lp_points) {
    // Variable Declarations
    int lv_originalminpoints;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_originalminpoints = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lp_attribute, "MinPoints", UnitGetOwner(lp_unit));

    // Implementation
    CatalogFieldValueSet(c_gameCatalogBehavior, lp_attribute, "MinPoints", UnitGetOwner(lp_unit), IntToString(lp_points));
    UnitBehaviorRemove(lp_unit, lp_attribute, 1);
    UnitBehaviorAdd(lp_unit, lp_attribute, lp_unit, 1);
    CatalogFieldValueSet(c_gameCatalogBehavior, lp_attribute, "MinPoints", UnitGetOwner(lp_unit), IntToString(lv_originalminpoints));
}

void libNEXS_gf_JinaraScarletKillstoPower (fixed lp_souls) {
    // Variable Declarations
    fixed lv_i;
    fixed lv_j;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = UnitGetPropertyFixed(libNEXS_gv_jinaraCaster, c_unitPropEnergy, c_unitPropCurrent);

    // Implementation
    UnitSetPropertyFixed(libNEXS_gv_jinaraCaster, c_unitPropEnergy, (lv_i + lp_souls));
    if ((libNEXS_gv_jinaraScarletHasHerSoul == true)) {
        lv_j = 1.0;
    }
    else {
        lv_j = (100/(libNEXS_gv_jinaraScarletKillsSoul+100));
    }
    libNEXS_gv_jinaraScarletKillsSoul += (lp_souls * lv_j);
    CatalogFieldValueSet(c_gameCatalogEffect, "JinaraScarletAADamage", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, FixedToString((libNEXS_gv_jinaraScarletKillsSoul + libNEXS_gv_jinaraScarletWeaponDamage), 0));
    CatalogFieldValueSet(c_gameCatalogEffect, "JinaraScarletBaneBladesDamage", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, FixedToString((libNEXS_gv_jinaraScarletKillsSoul + libNEXS_gv_jinaraScarletWeaponDamage), 0));
    CatalogFieldValueSet(c_gameCatalogEffect, "JinaraScarletBaneBladesAoEDamage", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, FixedToString((libNEXS_gv_jinaraScarletKillsSoul + libNEXS_gv_jinaraScarletWeaponDamage), 0));
    CatalogFieldValueSet(c_gameCatalogEffect, "JinaraScarletLethalSwipeDamage", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, FixedToString((libNEXS_gv_jinaraScarletKillsSoul + libNEXS_gv_jinaraScarletWeaponDamage), 0));
    CatalogFieldValueSet(c_gameCatalogEffect, "JinaraDestructionWaveDamage", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, FixedToString((libNEXS_gv_jinaraScarletKillsSoul + libNEXS_gv_jinaraScarletDestructionWave), 0));
    CatalogFieldValueSet(c_gameCatalogEffect, "JinaraDestructionWaveConjoinedDamage", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, FixedToString((libNEXS_gv_jinaraScarletKillsSoul + libNEXS_gv_jinaraScarletDestructionWave), 0));
    CatalogFieldValueSet(c_gameCatalogEffect, "JinaraScarletACDeadlyChargeDamage", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, FixedToString((libNEXS_gv_jinaraScarletKillsSoul + libNEXS_gv_jinaraScarletDeadlyCharge), 0));
    CatalogFieldValueSet(c_gameCatalogAccumulator, "JinaraScarletDevourCount", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, FixedToString(libNEXS_gv_jinaraScarletKillsSoul, 1));
}

trigger auto_libNEXS_gf_JinaraDeathFleetVoidRayCrash_Trigger = null;
unitgroup auto_libNEXS_gf_JinaraDeathFleetVoidRayCrash_lp_targetCandidates;
int auto_libNEXS_gf_JinaraDeathFleetVoidRayCrash_lp_unitTargetCount;
point auto_libNEXS_gf_JinaraDeathFleetVoidRayCrash_lp_launchPoint;
point auto_libNEXS_gf_JinaraDeathFleetVoidRayCrash_lp_targetPoint;

void libNEXS_gf_JinaraDeathFleetVoidRayCrash (unitgroup lp_targetCandidates, int lp_unitTargetCount, point lp_launchPoint, point lp_targetPoint) {
    auto_libNEXS_gf_JinaraDeathFleetVoidRayCrash_lp_targetCandidates = lp_targetCandidates;
    auto_libNEXS_gf_JinaraDeathFleetVoidRayCrash_lp_unitTargetCount = lp_unitTargetCount;
    auto_libNEXS_gf_JinaraDeathFleetVoidRayCrash_lp_launchPoint = lp_launchPoint;
    auto_libNEXS_gf_JinaraDeathFleetVoidRayCrash_lp_targetPoint = lp_targetPoint;

    if (auto_libNEXS_gf_JinaraDeathFleetVoidRayCrash_Trigger == null) {
        auto_libNEXS_gf_JinaraDeathFleetVoidRayCrash_Trigger = TriggerCreate("auto_libNEXS_gf_JinaraDeathFleetVoidRayCrash_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_JinaraDeathFleetVoidRayCrash_Trigger, false, false);
}

bool auto_libNEXS_gf_JinaraDeathFleetVoidRayCrash_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_targetCandidates = auto_libNEXS_gf_JinaraDeathFleetVoidRayCrash_lp_targetCandidates;
    int lp_unitTargetCount = auto_libNEXS_gf_JinaraDeathFleetVoidRayCrash_lp_unitTargetCount;
    point lp_launchPoint = auto_libNEXS_gf_JinaraDeathFleetVoidRayCrash_lp_launchPoint;
    point lp_targetPoint = auto_libNEXS_gf_JinaraDeathFleetVoidRayCrash_lp_targetPoint;

    // Variable Declarations
    point[21] lv_targetPoints;
    point[21] lv_launchPoints;
    point lv_expectedUnitLocation;
    int lv_targetIndex;
    int lv_unitIndex;
    unit lv_targetUnit;
    int lv_totalMissiles;
    fixed lv_targetDistance;
    fixed lv_targetAngle;
    unitgroup lv_targetUnitGroup;
    point lv_point1;
    point lv_point2;
    int lv_randomBouns;

    // Automatic Variable Declarations
    int auto767F626A_ae;
    const int auto767F626A_ai = 1;
    int autoC2F79511_ae;
    const int autoC2F79511_ai = 1;
    int auto9D4EB3D2_ae;
    const int auto9D4EB3D2_ai = 1;
    int auto97B0199E_ae;
    const int auto97B0199E_ai = 1;

    // Variable Initialization
    lv_targetDistance = DistanceBetweenPoints(lp_launchPoint, lp_targetPoint);
    lv_targetAngle = AngleBetweenPoints(lp_launchPoint, lp_targetPoint);
    lv_targetUnitGroup = UnitGroupEmpty();
    lv_point1 = PointWithOffsetPolar(lp_launchPoint, 6.0, (lv_targetAngle + 90.0));
    lv_point2 = PointWithOffsetPolar(lp_launchPoint, -6.0, (lv_targetAngle + 90.0));
    lv_randomBouns = RandomInt(1, 2);

    // Implementation
    if ((lp_unitTargetCount == 0)) {
        lv_randomBouns = RandomInt(3, 4);
        auto9D4EB3D2_ae = lv_randomBouns;
        lv_targetIndex = 1;
        for ( ; ( (auto9D4EB3D2_ai >= 0 && lv_targetIndex <= auto9D4EB3D2_ae) || (auto9D4EB3D2_ai < 0 && lv_targetIndex >= auto9D4EB3D2_ae) ) ; lv_targetIndex += auto9D4EB3D2_ai ) {
            lv_launchPoints[lv_targetIndex] = PointInterpolate(lv_point1, lv_point2, RandomFixed(0.0, 1.0));
            lv_targetPoints[lv_targetIndex] = RegionRandomPoint(RegionCircle(lp_targetPoint, 6.0));
        }
    }
    else {
        auto767F626A_ae = lv_randomBouns;
        lv_targetIndex = 1;
        for ( ; ( (auto767F626A_ai >= 0 && lv_targetIndex <= auto767F626A_ae) || (auto767F626A_ai < 0 && lv_targetIndex >= auto767F626A_ae) ) ; lv_targetIndex += auto767F626A_ai ) {
            lv_launchPoints[lv_targetIndex] = PointInterpolate(lv_point1, lv_point2, RandomFixed(0.0, 1.0));
            lv_targetPoints[lv_targetIndex] = PointWithOffsetPolar(lv_launchPoints[lv_targetIndex], lv_targetDistance, lv_targetAngle);
        }
        autoC2F79511_ae = lp_unitTargetCount;
        lv_unitIndex = 1;
        for ( ; ( (autoC2F79511_ai >= 0 && lv_unitIndex <= autoC2F79511_ae) || (autoC2F79511_ai < 0 && lv_unitIndex >= autoC2F79511_ae) ) ; lv_unitIndex += autoC2F79511_ai ) {
            lv_targetIndex += 1;
            lv_targetUnit = UnitGroupRandomUnit(lp_targetCandidates, c_unitCountAlive);
            if ((UnitIsAlive(lv_targetUnit) == true)) {
                if ((UnitGetPropertyFixed(lv_targetUnit, c_unitPropMovementSpeedCurrent, c_unitPropCurrent) > 0.0)) {
                    lv_expectedUnitLocation = PointWithOffsetPolar(UnitGetPosition(lv_targetUnit), (UnitGetPropertyFixed(lv_targetUnit, c_unitPropMovementSpeedCurrent, c_unitPropCurrent)*2.0), UnitGetFacing(lv_targetUnit));
                    lv_targetPoints[lv_targetIndex] = RegionRandomPoint(RegionCircle(lv_expectedUnitLocation, 2.0));
                    lv_launchPoints[lv_targetIndex] = PointInterpolate(lv_point1, lv_point2, RandomFixed(0.0, 1.0));
                }
                else {
                    lv_expectedUnitLocation = UnitGetPosition(lv_targetUnit);
                    lv_targetPoints[lv_targetIndex] = RegionRandomPoint(RegionCircle(lv_expectedUnitLocation, 4.0));
                    lv_launchPoints[lv_targetIndex] = PointWithOffsetPolar(lv_targetPoints[lv_targetIndex], lv_targetDistance, (lv_targetAngle + RandomFixed(120.0, 240.0)));
                }
            }
            else {
                lv_expectedUnitLocation = lp_targetPoint;
                lv_targetPoints[lv_targetIndex] = RegionRandomPoint(RegionCircle(lv_expectedUnitLocation, 5.0));
                lv_launchPoints[lv_targetIndex] = PointWithOffsetPolar(lv_targetPoints[lv_targetIndex], lv_targetDistance, (lv_targetAngle + RandomFixed(150.0, 210.0)));
            }
        }
    }
    lv_totalMissiles = (lp_unitTargetCount + lv_randomBouns);
    auto97B0199E_ae = lv_totalMissiles;
    lv_targetIndex = 1;
    for ( ; ( (auto97B0199E_ai >= 0 && lv_targetIndex <= auto97B0199E_ae) || (auto97B0199E_ai < 0 && lv_targetIndex >= auto97B0199E_ae) ) ; lv_targetIndex += auto97B0199E_ai ) {
        UnitSetPosition(libNEXS_gv_jinaraDeathFleetVoidRayTargeter, lv_launchPoints[lv_targetIndex], false);
        UnitIssueOrder(libNEXS_gv_jinaraDeathFleetVoidRayTargeter, OrderTargetingPoint(AbilityCommand("JinaraDeathFleetVoidRayTarget", 0), lv_targetPoints[lv_targetIndex]), c_orderQueueAddToFront);
        Wait(RandomFixed(0.3, 0.6), c_timeGame);
    }
    return true;
}

void libNEXS_gf_JinaraScarletFindsSelf (int lp_jinaraStatus) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    int autoD7C2B18E_val;
    int auto198C02EA_val;
    int auto98723C56_val;

    // Variable Initialization

    // Implementation
    autoD7C2B18E_val = libNEXS_gv_jinaraScarletStatus;
    if (autoD7C2B18E_val == libNEXS_ge_JinaraScarletStatus_NotStart) {
        UnitBehaviorAdd(libNEXS_gv_jinara, "JinaraScarletBaneBladesStun", libNEXS_gv_jinara, 1);
        if ((RandomInt(1, 5) == 5)) {
            UnitAbilityAddCooldown(libNEXS_gv_jinaraCaster, "JinaraUnitSacrifice", "Abil/JinaraUnitSacrifice", 5.0);
            ActorScopeSend(ActorScopeFromUnit(libNEXS_gv_jinara), libNtve_gf_Signal("StartProphecy"));
            libNEXS_gf_JinaraSoulGetRewards(libNEXS_ge_JinaraScarletRewards_OpenMap);
            libNEXS_gv_jinaraScarletStatus = libNEXS_ge_JinaraScarletStatus_ReadytoStart;
        }
        else {
            UnitAbilityAddCooldown(libNEXS_gv_jinaraCaster, "JinaraUnitSacrifice", "Abil/JinaraUnitSacrifice", 3.0);
            ActorScopeSend(ActorScopeFromUnit(libNEXS_gv_jinara), libNtve_gf_Signal("NotStartProphecy"));
        }
    }
    else if (autoD7C2B18E_val == libNEXS_ge_JinaraScarletStatus_ReadytoStart) {
        if ((RandomInt(1, 3) == 3)) {
            UnitAbilityAddCooldown(libNEXS_gv_jinaraCaster, "JinaraUnitSacrifice", "Abil/JinaraUnitSacrifice", 10.0);
            libNEXS_gf_SlaynSoulPlaceCrystal(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15);
            UnitIssueOrder(libNEXS_gv_jinara, Order(AbilityCommand("JinaraScarletProphecyVision", 0)), c_orderQueueReplace);
            libNtve_gf_CreateActorAtPoint("SlaynCrystal", libNEXS_gv_slaynCrystal);
            libNEXS_gv_jinaraScarletStatus = libNEXS_ge_JinaraScarletStatus_FindingSlaynCrystal;
        }
        else {
            UnitAbilityAddCooldown(libNEXS_gv_jinaraCaster, "JinaraUnitSacrifice", "Abil/JinaraUnitSacrifice", 3.0);
            auto198C02EA_val = RandomInt(1, 5);
            if (auto198C02EA_val == 1) {
                UIAlertUnit("Transmission", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, StringExternal("Param/Value/lib_NEXS_FDEA3D3F"), "Assets\\Textures\\btn-unit-jinara-hero-master.dds", libNEXS_gv_jinara);
                UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaChat, StringExternal("Param/Value/lib_NEXS_B60A46C5"));
            }
            else if (auto198C02EA_val == 2) {
                UIAlertUnit("Transmission", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, StringExternal("Param/Value/lib_NEXS_DC67C1EE"), "Assets\\Textures\\btn-unit-jinara-hero-master.dds", libNEXS_gv_jinara);
                UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaChat, StringExternal("Param/Value/lib_NEXS_41ACE207"));
            }
            else if (auto198C02EA_val == 3) {
                UIAlertUnit("Transmission", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, StringExternal("Param/Value/lib_NEXS_F128CFA9"), "Assets\\Textures\\btn-unit-jinara-hero-master.dds", libNEXS_gv_jinara);
                UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaChat, StringExternal("Param/Value/lib_NEXS_7B4F3EFF"));
            }
            else if (auto198C02EA_val == 4) {
                UIAlertUnit("Transmission", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, StringExternal("Param/Value/lib_NEXS_D1911260"), "Assets\\Textures\\btn-unit-jinara-hero-master.dds", libNEXS_gv_jinara);
                UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaChat, StringExternal("Param/Value/lib_NEXS_CD66918E"));
            }
            else if (auto198C02EA_val == 5) {
                UIAlertUnit("Transmission", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, StringExternal("Param/Value/lib_NEXS_77F0F31B"), "Assets\\Textures\\btn-unit-jinara-hero-master.dds", libNEXS_gv_jinara);
                UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaChat, StringExternal("Param/Value/lib_NEXS_539C86BD"));
            }
            else {
            }
        }
    }
    else if (autoD7C2B18E_val == libNEXS_ge_JinaraScarletStatus_FindingSlaynCrystal) {
        UnitAbilityAddCooldown(libNEXS_gv_jinaraCaster, "JinaraUnitSacrifice", "Abil/JinaraUnitSacrifice", 10.0);
        if ((DistanceBetweenPoints(UnitGetPosition(libNEXS_gv_jinara), libNEXS_gv_slaynCrystal) <= 6.0)) {
            lv_point = PointWithOffsetPolar(UnitGetPosition(libNEXS_gv_jinara), 3.0, AngleBetweenPoints(UnitGetPosition(libNEXS_gv_jinara), libNEXS_gv_slaynCrystal));
            UnitIssueOrder(libNEXS_gv_jinara, OrderTargetingPoint(AbilityCommand("JinaraScarletFindindSoul", 0), lv_point), c_orderQueueReplace);
            libNtve_gf_UnitCreateFacingPoint(1, "JinaraBloodSoul", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, lv_point, UnitGetPosition(libNEXS_gv_jinara));
            UnitBehaviorAdd(UnitLastCreated(), "JinaraScarletBloodSoulSuicide", UnitLastCreated(), 1);
            UnitBehaviorRemove(UnitLastCreated(), "JinaraBloodSoulDying", 1);
            libNEXS_gv_jinaraScarletStatus = libNEXS_ge_JinaraScarletStatus_FindingJinaraSoul;
            libNEXS_gf_JinaraSoulGetRewards(libNEXS_ge_JinaraScarletRewards_UpgradeSacrifice);
        }
        else {
            libNtve_gf_CreateActorAtPoint("SlaynCrystal", libNEXS_gv_slaynCrystal);
            UnitIssueOrder(libNEXS_gv_jinara, Order(AbilityCommand("JinaraScarletProphecyVision", 0)), c_orderQueueReplace);
        }
    }
    else if (autoD7C2B18E_val == libNEXS_ge_JinaraScarletStatus_FindingJinaraSoul) {
        UnitAbilityAddCooldown(libNEXS_gv_jinaraCaster, "JinaraUnitSacrifice", "Abil/JinaraUnitSacrifice", 10.0);
        if ((libNEXS_gv_jinaraSoul == null)) {
            libNEXS_gv_jinaraSoul = libNEXS_gf_FindSlaynSoulPlacementPoint();
            lv_point = PointWithOffsetPolar(UnitGetPosition(libNEXS_gv_jinara), 3.0, UnitGetFacing(libNEXS_gv_jinara));
            UnitIssueOrder(libNEXS_gv_jinara, OrderTargetingPoint(AbilityCommand("JinaraScarletFindindSoul", 0), lv_point), c_orderQueueReplace);
            libNtve_gf_CreateActorAtPoint("JinaraSoul", lv_point);
            libNtve_gf_MakeModelFaceAngle(libNtve_gf_ActorLastCreated(), AngleBetweenPoints(lv_point, UnitGetPosition(libNEXS_gv_jinara)));
            ActorScopeSend(ActorScopeFromActor(libNtve_gf_ActorLastCreated()), libNtve_gf_Signal("Death"));
        }
        else {
            if ((DistanceBetweenPoints(UnitGetPosition(libNEXS_gv_jinara), libNEXS_gv_jinaraSoul) <= 6.0)) {
                if (((libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12 != -1) || (libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7 != -1))) {
                    ActorScopeSend(ActorScopeFromUnit(libNEXS_gv_jinara), libNtve_gf_Signal("StartProphecy"));
                    libNEXS_gf_JinaraSoulGetRewards(libNEXS_ge_JinaraScarletRewards_ReduceEnergyLoss);
                    UnitBehaviorAdd(libNEXS_gv_jinara, "JinaraNormalStasisFieldStasis", libNEXS_gv_jinara, 1);
                    UnitSetPosition(libNEXS_gv_prophecyCamera, UnitGetPosition(libNEXS_gv_jinara), false);
                    Wait(2.0625, c_timeGame);
                    UnitBehaviorRemove(libNEXS_gv_jinara, "JinaraNormalStasisFieldStasis", 1);
                    UnitIssueOrder(libNEXS_gv_jinara, Order(AbilityCommand("JinaraScarletProphecyVision", 0)), c_orderQueueReplace);
                    libNEXS_gv_jinaraScarletStatus = libNEXS_ge_JinaraScarletStatus_ReviveJinara;
                    libNtve_gf_SendActorMessageToUnit(libNEXS_gv_jinaraAltar, "Signal JinaraNormalRoute");
                }
                else {
                    ActorScopeSend(ActorScopeFromUnit(libNEXS_gv_jinara), libNtve_gf_Signal("StartProphecy"));
                    libNEXS_gf_JinaraSoulGetRewards(libNEXS_ge_JinaraScarletRewards_ReduceEnergyLoss);
                    UnitBehaviorAdd(libNEXS_gv_jinara, "JinaraNormalStasisFieldStasis", libNEXS_gv_jinara, 1);
                    UnitRemove(libNEXS_gv_prophecyCamera);
                    Wait(2.0625, c_timeGame);
                    UnitCreate(1, "JinaraBloodSoul", c_unitCreateIgnoreBirth, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, UnitGetPosition(libNEXS_gv_jinara), UnitGetFacing(libNEXS_gv_jinara));
                    UnitBehaviorAdd(UnitLastCreated(), "JinaraScarletBloodSoulSuicide", UnitLastCreated(), 1);
                    UnitBehaviorRemove(UnitLastCreated(), "JinaraBloodSoulDying", 1);
                    UnitKill(libNEXS_gv_jinara);
                    libNEXS_gv_jinaraScarletStatus = libNEXS_ge_JinaraScarletStatus_BadEnd;
                }
            }
            else {
                lv_point = PointWithOffsetPolar(UnitGetPosition(libNEXS_gv_jinara), 2.0, UnitGetFacing(libNEXS_gv_jinara));
                UnitIssueOrder(libNEXS_gv_jinara, OrderTargetingPoint(AbilityCommand("JinaraScarletFindindSoul", 0), lv_point), c_orderQueueReplace);
                libNtve_gf_CreateActorAtPoint("JinaraSoul", lv_point);
                libNtve_gf_MakeModelFaceAngle(libNtve_gf_ActorLastCreated(), AngleBetweenPoints(lv_point, libNEXS_gv_jinaraSoul));
                ActorScopeSend(ActorScopeFromActor(libNtve_gf_ActorLastCreated()), libNtve_gf_Signal("Guide"));
            }
        }
    }
    else if (autoD7C2B18E_val == libNEXS_ge_JinaraScarletStatus_ReviveJinara) {
        UnitAbilityAddCooldown(libNEXS_gv_jinaraCaster, "JinaraUnitSacrifice", "Abil/JinaraUnitSacrifice", 10.0);
        if ((DistanceBetweenPoints(UnitGetPosition(libNEXS_gv_jinara), UnitGetPosition(libNEXS_gv_jinaraAltar)) <= 6.0)) {
            libNEXS_gf_JinaraSoulGetRewards(libNEXS_ge_JinaraScarletRewards_RelieveLimitation);
            UIAlert("Trigger", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, StringExternal("Param/Value/lib_NEXS_E7619CFB"), "Assets\\Textures\\btn-unit-jinara-hero-master.dds");
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12), c_messageAreaChat, StringExternal("Param/Value/lib_NEXS_D75F0496"));
            UIAlert("Trigger", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, StringExternal("Param/Value/lib_NEXS_A34A2F11"), "Assets\\Textures\\btn-unit-jinara-hero-master.dds");
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7), c_messageAreaChat, StringExternal("Param/Value/lib_NEXS_E6BA8800"));
            UIAlertUnit("Transmission", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, StringExternal("Param/Value/lib_NEXS_437BFB7E"), "Assets\\Textures\\btn-unit-jinara-hero-master.dds", libNEXS_gv_jinara);
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaChat, StringExternal("Param/Value/lib_NEXS_059BEB99"));
            TriggerEnable(libNEXS_gt_UlrezajorAlarakEnterMap, true);
            libNEXS_gv_jinaraScarletStatus = libNEXS_ge_JinaraScarletStatus_TrueEnd;
        }
        else {
            if ((DistanceBetweenPoints(UnitGetPosition(libNEXS_gv_jinara), UnitGetPosition(libNEXS_gv_jinaraAltar)) > 25.0)) {
                UnitIssueOrder(libNEXS_gv_jinara, OrderTargetingUnit(AbilityCommand("JinaraAlterCall", 0), libNEXS_gv_jinaraAltar), c_orderQueueReplace);
                UnitIssueOrder(libNEXS_gv_jinaraAltar, OrderTargetingUnit(AbilityCommand("JinaraAlterCall", 0), libNEXS_gv_jinara), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(libNEXS_gv_jinara, OrderTargetingUnit(AbilityCommand("JinaraAlterCall", 0), libNEXS_gv_jinaraAltar), c_orderQueueReplace);
            }
        }
    }
    else if (autoD7C2B18E_val == libNEXS_ge_JinaraScarletStatus_BadEnd) {
        UnitAbilityAddCooldown(libNEXS_gv_jinaraCaster, "JinaraUnitSacrifice", "Abil/JinaraUnitSacrifice", 30.0);
        auto98723C56_val = RandomInt(1, 5);
        if (auto98723C56_val == 1) {
            UIAlertUnit("Transmission", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, StringExternal("Param/Value/lib_NEXS_9A843DDD"), "Assets\\Textures\\btn-unit-jinara-hero-master.dds", libNEXS_gv_jinara);
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaChat, StringExternal("Param/Value/lib_NEXS_D89DF67E"));
        }
        else if (auto98723C56_val == 2) {
            UIAlertUnit("Transmission", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, StringExternal("Param/Value/lib_NEXS_84C3DA57"), "Assets\\Textures\\btn-unit-jinara-hero-master.dds", libNEXS_gv_jinara);
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaChat, StringExternal("Param/Value/lib_NEXS_293D341B"));
        }
        else if (auto98723C56_val == 3) {
            UIAlertUnit("Transmission", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, StringExternal("Param/Value/lib_NEXS_D9EF1BDF"), "Assets\\Textures\\btn-unit-jinara-hero-master.dds", libNEXS_gv_jinara);
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaChat, StringExternal("Param/Value/lib_NEXS_06BB6D1F"));
        }
        else if (auto98723C56_val == 4) {
            UIAlertUnit("Transmission", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, StringExternal("Param/Value/lib_NEXS_379902EA"), "Assets\\Textures\\btn-unit-jinara-hero-master.dds", libNEXS_gv_jinara);
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaChat, StringExternal("Param/Value/lib_NEXS_DCBECC37"));
        }
        else if (auto98723C56_val == 5) {
            UIAlertUnit("Transmission", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, StringExternal("Param/Value/lib_NEXS_E85F9DE5"), "Assets\\Textures\\btn-unit-jinara-hero-master.dds", libNEXS_gv_jinara);
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaChat, StringExternal("Param/Value/lib_NEXS_40CBF64A"));
        }
        else {
        }
    }
    else {
        UnitAbilityAddCooldown(libNEXS_gv_jinaraCaster, "JinaraUnitSacrifice", "Abil/JinaraUnitSacrifice", 10.0);
        if ((libNEXS_gv_jinaraNormalSoul != null)) {
            UnitAbilityAddChargeUsed(libNEXS_gv_jinaraCaster, "JinaraUnitSacrifice", "JinaraUnitSacrifice", -1.0);
            UnitSetPosition(libNEXS_gv_prophecyCamera, UnitGetPosition(libNEXS_gv_jinaraNormalSoul), false);
            UnitIssueOrder(libNEXS_gv_jinaraNormalSoul, Order(AbilityCommand("stop", 3)), c_orderQueueReplace);
            UnitIssueOrder(libNEXS_gv_jinara, Order(AbilityCommand("JinaraScarletProphecyVision", 0)), c_orderQueueReplace);
            TriggerExecute(libNEXS_gt_AbilityTransmissionJinaraNormalPissed, true, false);
        }
        else {
            if ((libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12 == -1)) {
                MinimapPing(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), PlayerStartLocation(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7), 2.0, Color(100.00, 0.00, 0.00));
            }
            else {
                MinimapPing(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), PlayerStartLocation(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12), 2.0, Color(100.00, 0.00, 0.00));
            }
        }
    }
}

void libNEXS_gf_SlaynSoulPlaceCrystal (int lp_p) {
    // Variable Declarations
    int lv_i;
    int lv_randomIndex;
    int lv_poolIndex;
    int lv_minDistance;
    int lv_maxDistance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNEXS_gv_slaynCrystal = libNEXS_gf_FindSlaynSoulPlacementPoint();
    UnitCreate(1, "ProphecyCamera", 0, lp_p, libNEXS_gv_slaynCrystal, 270.0);
    libNEXS_gv_prophecyCamera = UnitLastCreated();
    libNtve_gf_ShowHideUnit(libNEXS_gv_prophecyCamera, false);
    CameraSetChannel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, libNEXS_gv_prophecyCamera, "Camera_Basic", 1, 1.0);
}

void libNEXS_gf_CM_ZeratulProphecyArtifactBadRegion_Set () {
    // Automatic Variable Declarations
    unitgroup auto6CA6AAEF_g;
    int auto6CA6AAEF_u;
    unit auto6CA6AAEF_var;

    // Implementation
    libNEXS_gv_cM_ZeratulProphecyArtifactBadRegion = null;
    auto6CA6AAEF_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), (1 << (c_targetFilterInvulnerable - 32)), 0, (1 << (c_targetFilterDead - 32))), 0);
    auto6CA6AAEF_u = UnitGroupCount(auto6CA6AAEF_g, c_unitCountAll);
    for (;; auto6CA6AAEF_u -= 1) {
        auto6CA6AAEF_var = UnitGroupUnitFromEnd(auto6CA6AAEF_g, auto6CA6AAEF_u);
        if (auto6CA6AAEF_var == null) { break; }
        if ((libNEXS_gv_cM_ZeratulProphecyArtifactBadRegion == null)) {
            libNEXS_gv_cM_ZeratulProphecyArtifactBadRegion = RegionCircle(UnitGetPosition(auto6CA6AAEF_var), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(auto6CA6AAEF_var), "Radius", UnitGetOwner(auto6CA6AAEF_var)));
        }
        else {
            RegionAddRegion(libNEXS_gv_cM_ZeratulProphecyArtifactBadRegion, RegionCircle(UnitGetPosition(auto6CA6AAEF_var), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(auto6CA6AAEF_var), "Radius", UnitGetOwner(auto6CA6AAEF_var))));
        }
    }
}

void libNEXS_gf_JinaraSoulCallDeathFleet () {
    // Variable Declarations
    fixed lv_angle;
    fixed lv_i;
    int lv_tem;
    point lv_point;

    // Automatic Variable Declarations
    const int autoEE1C404E_n = 2;
    int autoEE1C404E_i;
    const int auto6BC4073A_n = 2;
    int auto6BC4073A_i;
    const int auto6443401B_n = 2;
    int auto6443401B_i;
    const int auto889A243F_n = 2;
    int auto889A243F_i;
    const int auto6D1734EF_n = 6;
    int auto6D1734EF_i;
    const int autoF14EC5FC_n = 4;
    int autoF14EC5FC_i;

    // Variable Initialization
    lv_angle = AngleBetweenPoints(UnitGetPosition(libNEXS_gv_jinaraAltar), UnitGetPosition(libNEXS_gv_jinara));
    lv_i = 45.0;

    // Implementation
    UnitBehaviorRemove(libNEXS_gv_jinara, "JinaraDeathFleetCarrierUseable", 1);
    UnitBehaviorRemove(libNEXS_gv_jinara, "JinaraDeathFleetMotherShipUseable", 1);
    UnitBehaviorRemove(libNEXS_gv_jinara, "JinaraDeathFleetVoidRayUseable", 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "JinaraMotherShipSoul", c_unitCreateIgnoreBirth, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, UnitGetPosition(libNEXS_gv_jinaraAltar));
    Wait(0.5, c_timeGame);
    if ((libNEXS_gv_deathFleetHasCarrier == true) && (libNEXS_gv_deathFleetHasVoidRay == true)) {
        lv_point = PointWithOffsetPolar(UnitGetPosition(libNEXS_gv_jinaraAltar), 9.0, lv_angle);
        UnitCreate(1, "JinaraKirovAirship", c_unitCreateIgnoreBirth, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, lv_point, lv_angle);
        UnitBehaviorAdd(UnitLastCreated(), "JinaraSoulDeathFleetWarpin", UnitLastCreated(), 1);
        Wait(0.25, c_timeGame);
        for (auto6443401B_i = 1; auto6443401B_i <= auto6443401B_n; auto6443401B_i += 1) {
            lv_point = PointWithOffsetPolar(UnitGetPosition(libNEXS_gv_jinaraAltar), 9.0, (lv_angle + lv_i));
            UnitCreate(1, "JinaraKirovAirship", c_unitCreateIgnoreBirth, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, lv_point, lv_angle);
            UnitBehaviorAdd(UnitLastCreated(), "JinaraSoulDeathFleetWarpin", UnitLastCreated(), 1);
            lv_i *= -1;
            Wait(0.25, c_timeGame);
        }
        lv_i += 45;
        for (auto889A243F_i = 1; auto889A243F_i <= auto889A243F_n; auto889A243F_i += 1) {
            lv_point = PointWithOffsetPolar(UnitGetPosition(libNEXS_gv_jinaraAltar), 9.0, (lv_angle + lv_i));
            UnitCreate(1, "JinaraKirovAirship", c_unitCreateIgnoreBirth, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, lv_point, lv_angle);
            UnitBehaviorAdd(UnitLastCreated(), "JinaraSoulDeathFleetWarpin", UnitLastCreated(), 1);
            lv_i *= -1;
            Wait(0.25, c_timeGame);
        }
        for (auto6D1734EF_i = 1; auto6D1734EF_i <= auto6D1734EF_n; auto6D1734EF_i += 1) {
            lv_point = PointWithOffsetPolar(UnitGetPosition(libNEXS_gv_jinaraAltar), 4.0, (lv_angle + lv_i));
            UnitCreate(1, "JinaraVoidRay", c_unitCreateIgnoreBirth, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, lv_point, lv_angle);
            UnitBehaviorAdd(UnitLastCreated(), "JinaraSoulDeathFleetWarpin", UnitLastCreated(), 1);
            lv_i -= 30;
            Wait(0.125, c_timeGame);
        }
        for (autoF14EC5FC_i = 1; autoF14EC5FC_i <= autoF14EC5FC_n; autoF14EC5FC_i += 1) {
            lv_point = PointWithOffsetPolar(UnitGetPosition(libNEXS_gv_jinaraAltar), 6.0, (lv_angle + lv_i));
            UnitCreate(1, "JinaraVoidRay", c_unitCreateIgnoreBirth, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, lv_point, lv_angle);
            UnitBehaviorAdd(UnitLastCreated(), "JinaraSoulDeathFleetWarpin", UnitLastCreated(), 1);
            lv_i += 40;
            Wait(0.125, c_timeGame);
        }
    }
    else {
        if ((libNEXS_gv_deathFleetHasCarrier == true)) {
            lv_point = PointWithOffsetPolar(UnitGetPosition(libNEXS_gv_jinaraAltar), 5.0, lv_angle);
            lv_i = 72.0;
            UnitCreate(1, "JinaraKirovAirship", c_unitCreateIgnoreBirth, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, lv_point, lv_angle);
            UnitBehaviorAdd(UnitLastCreated(), "JinaraSoulDeathFleetWarpin", UnitLastCreated(), 1);
            Wait(0.25, c_timeGame);
            for (autoEE1C404E_i = 1; autoEE1C404E_i <= autoEE1C404E_n; autoEE1C404E_i += 1) {
                lv_point = PointWithOffsetPolar(UnitGetPosition(libNEXS_gv_jinaraAltar), 5.0, (lv_angle + lv_i));
                UnitCreate(1, "JinaraKirovAirship", c_unitCreateIgnoreBirth, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, lv_point, lv_angle);
                UnitBehaviorAdd(UnitLastCreated(), "JinaraSoulDeathFleetWarpin", UnitLastCreated(), 1);
                lv_i *= -1;
                Wait(0.25, c_timeGame);
            }
            lv_i += 72;
            for (auto6BC4073A_i = 1; auto6BC4073A_i <= auto6BC4073A_n; auto6BC4073A_i += 1) {
                lv_point = PointWithOffsetPolar(UnitGetPosition(libNEXS_gv_jinaraAltar), 5.0, (lv_angle + lv_i));
                UnitCreate(1, "JinaraKirovAirship", c_unitCreateIgnoreBirth, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, lv_point, lv_angle);
                UnitBehaviorAdd(UnitLastCreated(), "JinaraSoulDeathFleetWarpin", UnitLastCreated(), 1);
                lv_i *= -1;
                Wait(0.25, c_timeGame);
            }
        }

    }
    libNEXS_gv_deathFleetHasVoidRay = false;
    libNEXS_gv_deathFleetHasCarrier = false;
    libNEXS_gv_deathFleetHasMotherShip = false;
    UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_BDB36AAF"));
    MinimapPing(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), UnitGetPosition(libNEXS_gv_jinaraAltar), 5.0, Color(100.00, 50.20, 0.00));
}

trigger auto_libNEXS_gf_JinaraSoulGetRewards_Trigger = null;
int auto_libNEXS_gf_JinaraSoulGetRewards_lp_bouns;

void libNEXS_gf_JinaraSoulGetRewards (int lp_bouns) {
    auto_libNEXS_gf_JinaraSoulGetRewards_lp_bouns = lp_bouns;

    if (auto_libNEXS_gf_JinaraSoulGetRewards_Trigger == null) {
        auto_libNEXS_gf_JinaraSoulGetRewards_Trigger = TriggerCreate("auto_libNEXS_gf_JinaraSoulGetRewards_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_JinaraSoulGetRewards_Trigger, false, false);
}

bool auto_libNEXS_gf_JinaraSoulGetRewards_TriggerFunc (bool testConds, bool runActions) {
    int lp_bouns = auto_libNEXS_gf_JinaraSoulGetRewards_lp_bouns;

    // Automatic Variable Declarations
    int auto61FE0DE3_val;

    // Implementation
    auto61FE0DE3_val = lp_bouns;
    if (auto61FE0DE3_val == libNEXS_ge_JinaraScarletRewards_OpenMap) {
        VisFillArea(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, RegionEntireMap(), c_fillTypeMasked, false);
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaDirective, StringExternal("Param/Value/lib_NEXS_0235DED3"));
    }
    else if (auto61FE0DE3_val == libNEXS_ge_JinaraScarletRewards_UpgradeSacrifice) {
        libNEXS_gv_jinaraSacrificeScarletExtraEnergy = 5;
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaDirective, StringExternal("Param/Value/lib_NEXS_803094B8"));
    }
    else if (auto61FE0DE3_val == libNEXS_ge_JinaraScarletRewards_ReduceEnergyLoss) {
        CatalogFieldValueSet(c_gameCatalogUnit, "JinaraAbadon", "ShieldRegenRate", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, "-1.5");
        CatalogFieldValueSet(c_gameCatalogUnit, "JinaraAzazle", "ShieldRegenRate", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, "-1.5");
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaDirective, StringExternal("Param/Value/lib_NEXS_4A03E70B"));
    }
    else if (auto61FE0DE3_val == libNEXS_ge_JinaraScarletRewards_RelieveLimitation) {
        libNEXS_gv_jinaraScarletHasHerSoul = true;
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaDirective, StringExternal("Param/Value/lib_NEXS_0C9171D5"));
    }
    else if (auto61FE0DE3_val == libNEXS_ge_JinaraScarletRewards_TrueEndReward) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaDirective, StringExternal("Param/Value/lib_NEXS_99C39B79"));
        if ((libNEXS_gv_deathFleetHasMotherShip == true)) {
            libNEXS_gf_JinaraSoulCallDeathFleet();
            TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, "JinaraSoulDeathFleetWarpIn", 1);
        }

        libNEXS_gv_jinaraHasFoundSoul = true;
    }
    else {
    }
    Wait(8.0, c_timeGame);
    UIClearMessages(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaDirective);
    return true;
}

trigger auto_libNEXS_gf_JinaraSoulRewardEyes_Trigger = null;

void libNEXS_gf_JinaraSoulRewardEyes () {
    if (auto_libNEXS_gf_JinaraSoulRewardEyes_Trigger == null) {
        auto_libNEXS_gf_JinaraSoulRewardEyes_Trigger = TriggerCreate("auto_libNEXS_gf_JinaraSoulRewardEyes_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_JinaraSoulRewardEyes_Trigger, false, false);
}

bool auto_libNEXS_gf_JinaraSoulRewardEyes_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_spawnArea;
    point lv_point;

    // Automatic Variable Declarations
    int auto7504F7E9_n;
    int auto7504F7E9_i;

    // Variable Initialization

    // Implementation
    if ((libNEXS_gv_jinaraHasFoundSoul == true)) {
        lv_spawnArea = RegionCircle(CameraGetTarget(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), 15.0);
        while ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, "JinaraChoiceRouteAir", c_techCountCompleteOnly) == 0) && (TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, "JinaraChoiceRouteNormal", c_techCountCompleteOnly) == 0) && (TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, "JinaraChoiceRouteScarlet", c_techCountCompleteOnly) == 0)) {
            auto7504F7E9_n = RandomInt(3, 10);
            for (auto7504F7E9_i = 1; auto7504F7E9_i <= auto7504F7E9_n; auto7504F7E9_i += 1) {
                Wait(RandomFixed(0.25, 1.2), c_timeGame);
                libNtve_gf_CreateActorAtPoint("JinaraSoulRewardsModel", RegionRandomPoint(lv_spawnArea));
            }
            Wait(RandomInt(5, 10), c_timeGame);
        }
    }

    return true;
}

point libNEXS_gf_FindSlaynSoulPlacementPoint () {
    // Variable Declarations
    point lv_artifactOrigin;
    string lv_artifactPlacementData;
    fixed lv_minSearchRadius;
    fixed lv_maxSearchRadius;
    fixed lv_maxWalkingDistance;
    bool lv_checkPathing;
    point lv_pathingCheckPoint;
    fixed lv_nearbyUnitHealth;
    fixed lv_nearbyUnitHealthLimit;
    fixed lv_zeratulSearchRadius;
    bool lv_pointIsPassableAndNotNearZeratul;
    fixed lv_distanceBetweenPoints;
    fixed lv_angleDelta;
    fixed lv_angleIter;
    point lv_pointIter;
    fixed lv_radiusIter;
    int lv_validPointsCount;
    point lv_pickedPoint;
    unit lv_dEBUG_lastPicked;

    // Automatic Variable Declarations
    fixed auto1260FA7D_ae;
    fixed auto1260FA7D_ai;
    const fixed auto9C42CC1A_ae = 360.0;
    fixed auto9C42CC1A_ai;
    unitgroup auto1BE74639_g;
    int auto1BE74639_u;
    unit auto1BE74639_var;

    // Variable Initialization
    lv_artifactOrigin = UnitGetPosition(libNEXS_gv_jinaraAltar);
    lv_artifactPlacementData = libNEXS_gf_GetSlaynSoulPlacementDataInstance();
    lv_minSearchRadius = UserDataGetFixed("JinaraScarletSlaynSoulPlacement", lv_artifactPlacementData, "minSearchRadius", 1);
    lv_maxSearchRadius = UserDataGetFixed("JinaraScarletSlaynSoulPlacement", lv_artifactPlacementData, "maxSearchRadius", 1);
    lv_maxWalkingDistance = UserDataGetFixed("JinaraScarletSlaynSoulPlacement", lv_artifactPlacementData, "maxWalkingDistance", 1);
    lv_checkPathing = (UserDataGetInt("JinaraScarletSlaynSoulPlacement", lv_artifactPlacementData, "checkPathing", 1) != 0);
    lv_pathingCheckPoint = UnitTypePlacementFromPoint("JinaraScarlet", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, lv_artifactOrigin, 500.0);
    lv_nearbyUnitHealthLimit = UserDataGetFixed("JinaraScarletSlaynSoulPlacement", lv_artifactPlacementData, "maxNearbyHealth", 1);
    lv_zeratulSearchRadius = 16.0;
    lv_distanceBetweenPoints = UserDataGetFixed("JinaraScarletSlaynSoulPlacement", lv_artifactPlacementData, "distanceBetweenPoints", 1);

    // Implementation
    libNEXS_gf_CM_ZeratulProphecyArtifactBadRegion_Set();
    auto1260FA7D_ae = lv_minSearchRadius;
    auto1260FA7D_ai = (0.0 - lv_distanceBetweenPoints);
    lv_radiusIter = lv_maxSearchRadius;
    for ( ; ( (auto1260FA7D_ai >= 0 && lv_radiusIter <= auto1260FA7D_ae) || (auto1260FA7D_ai < 0 && lv_radiusIter >= auto1260FA7D_ae) ) ; lv_radiusIter += auto1260FA7D_ai ) {
        lv_angleDelta = (ASin(((lv_distanceBetweenPoints / 2.0) / lv_radiusIter)) * 2.0);
        auto9C42CC1A_ai = lv_angleDelta;
        lv_angleIter = RandomFixed(0.0, lv_angleDelta);
        for ( ; ( (auto9C42CC1A_ai >= 0 && lv_angleIter <= auto9C42CC1A_ae) || (auto9C42CC1A_ai < 0 && lv_angleIter >= auto9C42CC1A_ae) ) ; lv_angleIter += auto9C42CC1A_ai ) {
            lv_pointIter = PointWithOffsetPolar(lv_artifactOrigin, lv_radiusIter, lv_angleIter);
            lv_pointIsPassableAndNotNearZeratul = ((PointPathingPassable(lv_pointIter) == true) && (!(UnitIsAlive(libNEXS_gv_jinara)) || (DistanceBetweenPoints(UnitGetPosition(libNEXS_gv_jinara), lv_pointIter) > lv_zeratulSearchRadius)) && (RegionContainsPoint(libNEXS_gv_cM_ZeratulProphecyArtifactBadRegion, lv_pointIter) == false));
            if ((lv_pointIsPassableAndNotNearZeratul == true) && ((lv_checkPathing == false) || (PointPathingIsConnected(lv_pathingCheckPoint, lv_pointIter) == true)) && ((lv_maxWalkingDistance == 0.0) || (PointPathingCost(lv_pathingCheckPoint, lv_pointIter) <= FixedToInt(lv_maxWalkingDistance)))) {
                if ((lv_nearbyUnitHealthLimit > 0.0)) {
                    lv_nearbyUnitHealth = 0;
                    auto1BE74639_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, c_unitAllianceEnemy, RegionCircle(lv_pointIter, 10.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    auto1BE74639_u = UnitGroupCount(auto1BE74639_g, c_unitCountAll);
                    for (;; auto1BE74639_u -= 1) {
                        auto1BE74639_var = UnitGroupUnitFromEnd(auto1BE74639_g, auto1BE74639_u);
                        if (auto1BE74639_var == null) { break; }
                        if (((UnitFilterMatch(auto1BE74639_var, UnitGetOwner(auto1BE74639_var), UnitFilter(0, 0, (1 << c_targetFilterStructure), 0)) == true) || (UnitGetType(auto1BE74639_var) == "PhotonCannon") || (UnitGetType(auto1BE74639_var) == "SpineCrawler") || (UnitGetType(auto1BE74639_var) == "Bunker"))) {
                            lv_nearbyUnitHealth += UnitGetPropertyFixed(auto1BE74639_var, c_unitPropLife, c_unitPropCurrent);
                            lv_nearbyUnitHealth += UnitGetPropertyFixed(auto1BE74639_var, c_unitPropShields, c_unitPropCurrent);
                        }

                    }
                }

                if (((lv_nearbyUnitHealthLimit <= 0.0) || (lv_nearbyUnitHealth <= lv_nearbyUnitHealthLimit))) {
                    lv_validPointsCount += 1;
                    if ((RandomFixed(0.0, 1.0) <= (1.0 / lv_validPointsCount))) {
                        lv_pickedPoint = lv_pointIter;
                    }

                }

            }
        }
    }
    if ((lv_validPointsCount == 0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_NEXS_86ECB2FB"), true);
        return UnitTypePlacementFromPoint("JinaraForceField", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, lv_artifactOrigin, 500.0);
    }

    return lv_pickedPoint;
}

string libNEXS_gf_GetSlaynSoulPlacementDataInstance () {
    // Variable Declarations
    string lv_instance;

    // Automatic Variable Declarations
    string auto4DD60B6F_userType;
    int auto4DD60B6F_i;

    // Variable Initialization

    // Implementation
    auto4DD60B6F_userType = "JinaraScarletSlaynSoulPlacement";
    auto4DD60B6F_i = 1;
    for ( ; auto4DD60B6F_i <= UserDataInstanceCount(auto4DD60B6F_userType) ; auto4DD60B6F_i += 1 ) {
        lv_instance = UserDataInstance(auto4DD60B6F_userType, auto4DD60B6F_i);
        if (true) {
            return lv_instance;
        }

    }
    return "GlobalDefault";
}

void libNEXS_gf_JinaraMotherShipFireWork () {
    // Variable Declarations
    point lv_noTargetPoint;

    // Automatic Variable Declarations
    int auto26DFC1CD_n;
    int auto26DFC1CD_i;

    // Variable Initialization

    // Implementation
    ActorScopeSend(ActorScopeFromUnit(libNEXS_gv_jinara), libNtve_gf_Signal("StartFireworks"));
    auto26DFC1CD_n = RandomInt(12, 18);
    for (auto26DFC1CD_i = 1; auto26DFC1CD_i <= auto26DFC1CD_n; auto26DFC1CD_i += 1) {
        UnitBehaviorAddPlayer(libNEXS_gv_jinara, "JinaraVoidRayChargeBeamBounceTrain", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, 1);
        lv_noTargetPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(libNEXS_gv_jinara), 4.0));
        PointSetHeight(lv_noTargetPoint, RandomFixed(5.0, 15.0));
        UnitCreateEffectPoint(libNEXS_gv_jinara, "JinaraMotherShipFireworksLM", lv_noTargetPoint);
        Wait(RandomFixed(0.0, 0.3), c_timeGame);
    }
    Wait(3.0, c_timeGame);
    ActorScopeSend(ActorScopeFromUnit(libNEXS_gv_jinara), libNtve_gf_Signal("StopFireworks"));
    libNEXS_gv_jinaraMothershipFireworkColdDown = false;
}

void libNEXS_gf_JinaraSacrificedUnitSoulsWonder (string lp_unitType) {
    // Variable Declarations
    point lv_spawnLocation;
    region lv_spawnRegion;
    string lv_glacierUnit;
    int lv_glacierUnitGroupNum;
    int lv_safetyInt;
    fixed lv_waitTime;
    int lv_i;

    // Automatic Variable Declarations
    const int autoDBE6E7D9_ae = 200;
    const int autoDBE6E7D9_ai = 1;

    // Variable Initialization
    lv_spawnRegion = RegionCircle(UnitGetPosition(libNEXS_gv_jinaraAltar), 12.0);
    lv_i = 1;

    // Implementation
    lv_safetyInt = 1;
    for ( ; ( (autoDBE6E7D9_ai >= 0 && lv_safetyInt <= autoDBE6E7D9_ae) || (autoDBE6E7D9_ai < 0 && lv_safetyInt >= autoDBE6E7D9_ae) ) ; lv_safetyInt += autoDBE6E7D9_ai ) {
        lv_spawnLocation = RegionRandomPoint(lv_spawnRegion);
        if (((PathingType(lv_spawnLocation) != c_pathingGround) || (PointPathingIsConnected(lv_spawnLocation, PlayerStartLocation(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15)) == false) || (CliffLevel(lv_spawnLocation) != CliffLevel(PlayerStartLocation(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) || (UnitCountAlliance(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, c_unitAllianceAlly, RegionCircle(lv_spawnLocation, 1.5), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0) || (UnitCountAlliance(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, c_unitAllianceAlly, RegionCircle(lv_spawnLocation, 1.0), UnitFilter(0, (1 << (c_targetFilterHallucination - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0))) {
            continue;
        }
        else {
            UnitCreate(1, lp_unitType, 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, lv_spawnLocation, libNtve_gf_RandomAngle());
            UnitBehaviorAdd(UnitLastCreated(), "JinaraSacrificedUnitSoul", UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "JinaraSacrificedUnitSoulWonder", UnitLastCreated(), 1);
            break;
        }
    }
}

void libNEXS_gf_JinaraUnitSacrificeResourceReturn (string lp_sacrificedUnitType) {
    // Variable Declarations
    fixed lv_mineralResource;
    fixed lv_gasResource;
    fixed lv_upgradeCounts;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mineralResource = PlayerGetPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, c_playerPropMinerals);
    lv_gasResource = PlayerGetPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, c_playerPropVespene);
    lv_upgradeCounts = (TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, "MasteryJinaraSacrificeMoneyUpgrade", c_techCountCompleteOnly) / 50.0);

    // Implementation
    lv_mineralResource += (UnitTypeGetCost(lp_sacrificedUnitType, c_unitCostMinerals) * lv_upgradeCounts);
    lv_gasResource += (UnitTypeGetCost(lp_sacrificedUnitType, c_unitCostVespene) * lv_upgradeCounts);
    PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, c_playerPropMinerals, c_playerPropOperSetTo, FixedToInt(lv_mineralResource));
    PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, c_playerPropVespene, c_playerPropOperSetTo, FixedToInt(lv_gasResource));
    TriggerExecute(libNEXS_gt_AbilityTransmissionJinaraScarletUnitsSacrifice, true, false);
    TriggerExecute(libNEXS_gt_AbilityTransmissionJinaraNormalUnitsSacrifice, true, false);
}

trigger auto_libNEXS_gf_JinaraUnitSacrificeColossusBeamVision_Trigger = null;
int auto_libNEXS_gf_JinaraUnitSacrificeColossusBeamVision_lp_persistentTime;
unit auto_libNEXS_gf_JinaraUnitSacrificeColossusBeamVision_lp_targetUnit;

void libNEXS_gf_JinaraUnitSacrificeColossusBeamVision (int lp_persistentTime, unit lp_targetUnit) {
    auto_libNEXS_gf_JinaraUnitSacrificeColossusBeamVision_lp_persistentTime = lp_persistentTime;
    auto_libNEXS_gf_JinaraUnitSacrificeColossusBeamVision_lp_targetUnit = lp_targetUnit;

    if (auto_libNEXS_gf_JinaraUnitSacrificeColossusBeamVision_Trigger == null) {
        auto_libNEXS_gf_JinaraUnitSacrificeColossusBeamVision_Trigger = TriggerCreate("auto_libNEXS_gf_JinaraUnitSacrificeColossusBeamVision_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_JinaraUnitSacrificeColossusBeamVision_Trigger, false, false);
}

bool auto_libNEXS_gf_JinaraUnitSacrificeColossusBeamVision_TriggerFunc (bool testConds, bool runActions) {
    int lp_persistentTime = auto_libNEXS_gf_JinaraUnitSacrificeColossusBeamVision_lp_persistentTime;
    unit lp_targetUnit = auto_libNEXS_gf_JinaraUnitSacrificeColossusBeamVision_lp_targetUnit;

    // Variable Declarations
    fixed lv_persistent;
    timer lv_splashBeamTimer;
    int lv_vSpawnAttempt;
    int lv_beamAttackCounts;
    point lv_point;

    // Automatic Variable Declarations
    int auto484726D5_val;

    // Variable Initialization
    lv_persistent = (lp_persistentTime * 0.8);
    lv_splashBeamTimer = TimerCreate();

    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "JinaraUnitSacrificeColossusDamagePersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, FixedToString(lv_persistent, 2));
    PlayerCreateEffectUnit(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, "JinaraUnitSacrificeColossusDamagePersistent", lp_targetUnit);
    TimerStart(lv_splashBeamTimer, lv_persistent, false, c_timeGame);
    while ((TimerGetRemaining(lv_splashBeamTimer) >= 0.6)) {
        Wait(RandomFixed(0.6, 1.2), c_timeGame);
        lv_vSpawnAttempt = 0;
        while ((lv_vSpawnAttempt < 20)) {
            auto484726D5_val = (lv_beamAttackCounts / 5);
            if (auto484726D5_val == 0) {
                lv_point = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_targetUnit), 6.0));
            }
            else if (auto484726D5_val == 1) {
                lv_point = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_targetUnit), 8.0));
            }
            else if (auto484726D5_val == 2) {
                lv_point = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_targetUnit), 10.0));
            }
            else if (auto484726D5_val == 3) {
                lv_point = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_targetUnit), 12.0));
            }
            else {
                lv_point = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_targetUnit), 14.0));
            }
            if ((DistanceBetweenPoints(UnitGetPosition(lp_targetUnit), lv_point) >= 5.0) && (PathingType(lv_point) == c_pathingGround) && (PointPathingPassable(lv_point) == true)) {
                break;
            }
            else {
                lv_vSpawnAttempt += 1;
            }
        }
        PlayerCreateEffectPoint(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, "JinaraUnitSacrificeColossusDamage", lv_point);
        lv_beamAttackCounts += 1;
    }
    return true;
}

void libNEXS_gf_E5B0BCE99B85E5BEB7E68B89NiadraE5889DE5A78BE58C96 () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UISetResourceVisible(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16), c_resourceTypeCustom, true);
    UISetFrameVisible(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16), c_syncFrameTypePylonButton, true);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "UnknownUpgrade2813", 1);
    libNEXS_gf_NiadraUIE5889BE5BBBA();
    TriggerEnable(libNEXS_gt_NiadraArmorUpgrade, true);
    TriggerEnable(libNEXS_gt_NiadraEvolSpreadClicked, true);
    TriggerEnable(libNEXS_gt_NiadraEvolBehaviourClicked, true);
    TriggerEnable(libNEXS_gt_NiadraEvolKillClicked, true);
    TriggerEnable(libNEXS_gt_NiadraHatcheryDoomed, true);
    TriggerEnable(libNEXS_gt_NiadraHatcheryFinished, true);
    TriggerEnable(libNEXS_gt_NiadraColossusApplyTempLife, true);
    TriggerEnable(libNEXS_gt_NiadraColossusRemoveTempLife, true);
    TriggerEnable(libNEXS_gt_NiadraInfestorCorpseExplosionTrigger, true);
    TriggerEnable(libNEXS_gt_NiadraHeroCooldownReduction, true);
    TriggerEnable(libNEXS_gt_NiadraHeroSelectLarva, true);
    TriggerEnable(libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E6AF8DE888B0E5AF84E7949FE888B1E5AEA4E9A29DE5A496E88EB7E58F96, true);
    TriggerEnable(libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E7868AE9BDBFE585BDE587BAE7949F, true);
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B22, true);
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B23, true);
    libNEXS_gv_niadraUpgradeMap[lv_index][0] = "NiadraForgeGuardianShellPurchased";
    libNEXS_gv_niadraUpgradeMap[lv_index][1] = "NiadraForgeGuardianShell";
    lv_index += 1;
    libNEXS_gv_niadraUpgradeMap[lv_index][0] = "NiadraForgeChronoBoostPurchased";
    libNEXS_gv_niadraUpgradeMap[lv_index][1] = "NiadraForgeChronoBoost";
    lv_index += 1;
    libNEXS_gv_niadraUpgradeMap[lv_index][0] = "NiadraForgeGravityLiftPurchased";
    libNEXS_gv_niadraUpgradeMap[lv_index][1] = "NiadraForgeGravityLift";
    lv_index += 1;
    libNEXS_gv_niadraUpgradeMap[lv_index][0] = "NiadraForgeCloakedPurchased";
    libNEXS_gv_niadraUpgradeMap[lv_index][1] = "NiadraForgeCloaked";
    lv_index += 1;
    libNEXS_gv_niadraUpgradeMap[lv_index][0] = "NiadraForgePsiStormPurchased";
    libNEXS_gv_niadraUpgradeMap[lv_index][1] = "NiadraForgePsiStorm";
    TriggerEnable(libNEXS_gt_NiadraPickedChronoBoost, true);
    TriggerEnable(libNEXS_gt_NiadraPickedCloaked, true);
    TriggerEnable(libNEXS_gt_NiadraPickedGravityLift, true);
    TriggerEnable(libNEXS_gt_NiadraPickedGuardianShell, true);
    TriggerEnable(libNEXS_gt_NiadraPickedPsiStorm, true);
    TriggerEnable(libNEXS_gt_NiadraUpgradePurchased, true);
    TriggerEnable(libNEXS_gt_E5858DE796ABE5B4A9E6BA83E88EB7E58F96E587BBE69D80, true);
    TriggerEnable(libNEXS_gt_E8828CE4BD93E59D8FE6ADBBE4BCA4E5AEB3E58F8DE599AC, true);
    TriggerEnable(libNEXS_gt_E58D95E4BD8DE6ADBBE4BAA1E7949FE789A9E8B4A8E9A29DE5A496E88EB7E58F96, true);
    TriggerEnable(libNEXS_gt_E5AF84E7949FE58D95E4BD8DE7949FE789A9E8B4A8E88EB7E58F96, true);
    TriggerEnable(libNEXS_gt_E5AF84E7949FE58D95E4BD8DE980A0E68890E4BCA4E5AEB3E7949FE789A9E8B4A8E88EB7E58F96, true);
    TriggerEnable(libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E5909EE599ACE5AEBFE4B8BBE7949FE789A9E8B4A8E88EB7E58F96, true);
    TriggerEnable(libNEXS_gt_NiadraCellStormApply, true);
    TriggerEnable(libNEXS_gt_NiadraCarrierTargetResponse, true);
    libNEXS_gf_UpdateNiadraTopBar1Cooldown();
    libNEXS_gf_E5B0BCE99B85E5BEB7E68B89E7A094E7A9B6E6B688E88097E7B2BEE9809A(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "MasteryNiadraZergTechCostDuration", 1.0);
}

void libNEXS_gf_E5B0BCE99B85E5BEB7E68B89E99DA2E69DBFE6B688E88097E7B2BEE9809A (int lp_player) {
    // Variable Declarations
    string lv_ability;
    fixed lv_costsRedution;
    int lv_upgradeCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ability = "NiadraTopbarFrigateFalling";

    // Deprecated
    CatalogReferenceSet("Abil,NiadraTopbarFrigateFalling,Cost[0].Resource[Custom]", EventPlayer(), IntToString(FixedToInt((25.0 - lv_costsRedution))));
}

void libNEXS_gf_E5B0BCE99B85E5BEB7E68B89E7A094E7A9B6E6B688E88097E7B2BEE9809A (int lp_player, string lp_masteryUpgrade, fixed lp_percentReductionPerPoint) {
    // Variable Declarations
    string lv_ability;
    int lv_i;
    int lv_costMinerals;
    int lv_costVespene;
    int lv_costTime;
    int lv_upgradeCount;
    fixed lv_r;

    // Automatic Variable Declarations
    int auto71C57212_ae;
    int auto71C57212_ai;
    const int auto5A336BF4_ae = 29;
    const int auto5A336BF4_ai = 1;

    // Variable Initialization
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, lp_masteryUpgrade, c_techCountCompleteOnly);

    // Implementation
    auto71C57212_ae = CatalogEntryCount(c_gameCatalogAbil);
    auto71C57212_ai = 1;
    while (auto71C57212_ai <= auto71C57212_ae) {
        lv_ability = CatalogEntryGet(c_gameCatalogAbil, auto71C57212_ai);
        auto71C57212_ai = auto71C57212_ai + 1;
        if (((lv_ability == "NiadraBanelingNestResearch") || (lv_ability == "NiadraEvolutionChamberresearch") || (lv_ability == "NiadraHydraliskDenResearch") || (lv_ability == "NiadraInfestationPitResearch") || (lv_ability == "NiadraRoachWarrenResearch") || (lv_ability == "NiadraSpawningPoolResearch"))) {
            lv_i = 0;
            for ( ; ( (auto5A336BF4_ai >= 0 && lv_i <= auto5A336BF4_ae) || (auto5A336BF4_ai < 0 && lv_i >= auto5A336BF4_ae) ) ; lv_i += auto5A336BF4_ai ) {
                lv_costMinerals = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Resource[" + IntToString(0) + "]", lp_player);
                lv_costVespene = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Resource[" + IntToString(1) + "]", lp_player);
                lv_costTime = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Time", lp_player);
                if (((lv_costMinerals > 0) || (lv_costVespene > 0))) {
                    lv_r = (100.0 - (lv_upgradeCount * lp_percentReductionPerPoint));
                    lv_costMinerals = FixedToInt(RoundI(((lv_costMinerals * lv_r) / 100.0)));
                    lv_costVespene = FixedToInt(RoundI(((lv_costVespene * lv_r) / 100.0)));
                    lv_costTime = FixedToInt(RoundI(((lv_costTime * lv_r) / 100.0)));
                    CatalogFieldValueSet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(lv_costMinerals));
                    CatalogFieldValueSet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Resource[" + IntToString(1) + "]", lp_player, IntToString(lv_costVespene));
                    CatalogFieldValueSet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Time", lp_player, IntToString(lv_costTime));
                }

            }
        }

    }
}

void libNEXS_gf_NiadraTurnPsiStormOnOff (bool lp_onOff) {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(libNEXS_gt_NiadraPsiBanelings, lp_onOff);
    TriggerEnable(libNEXS_gt_NiadraPsiGeneral, lp_onOff);
    TriggerEnable(libNEXS_gt_NiadraPsiInfestorCorpse, lp_onOff);
}

void libNEXS_gf_SetNiadraUpgradeTooltip (string lp_userDataInstance) {
    // Variable Declarations
    int lv_preqCount;
    text lv_text;
    int lv_satisfiedCount;
    int lv_player;

    // Automatic Variable Declarations
    const int auto05C545CD_ae = 3;
    int auto05C545CD_var;
    int auto60538AF5_val;

    // Variable Initialization
    lv_player = libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16;

    // Implementation
    auto05C545CD_var = 1;
    for ( ; auto05C545CD_var <= auto05C545CD_ae; auto05C545CD_var += 1 ) {
        if ((UserDataGetUserInstance("NiadraEvolutions", lp_userDataInstance, "Prerequisites", auto05C545CD_var) != null)) {
            lv_preqCount += 1;
        }

    }
    auto60538AF5_val = lv_preqCount;
    if (auto60538AF5_val == 0) {
        libNEXS_gf_NiadraE68F8FE8BFB0(lv_player, 0, 0, UserDataGetInt("NiadraEvolutions", lp_userDataInstance, "Cost", 1), StringExternal(CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lp_userDataInstance, "Button", 1), "Name", lv_player)), StringExternal(CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lp_userDataInstance, "Button", 1), "Tooltip", lv_player)), null, null, null, libNEXS_ge_NiadraE68F8FE8BFB0E58D87E7BAA7E7B1BBE588AB_E58D95E58D87E7BAA7);
    }
    else if (auto60538AF5_val == 1) {
        libNEXS_gf_NiadraE68F8FE8BFB0(lv_player, 0, 0, UserDataGetInt("NiadraEvolutions", lp_userDataInstance, "Cost", 1), StringExternal(CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lp_userDataInstance, "Button", 1), "Name", lv_player)), StringExternal(CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lp_userDataInstance, "Button", 1), "Tooltip", lv_player)), UserDataGetUpgrade("NiadraEvolutions", UserDataGetUserInstance("NiadraEvolutions", lp_userDataInstance, "Prerequisites", 1), "Upgrade", 1), null, null, libNEXS_ge_NiadraE68F8FE8BFB0E58D87E7BAA7E7B1BBE588AB_E58D95E58D87E7BAA7);
    }
    else if (auto60538AF5_val == 2) {
        if ((UserDataGetInt("NiadraEvolutions", lp_userDataInstance, "Prerequisites Minimum Count", 1) == 1)) {
            libNEXS_gf_NiadraE68F8FE8BFB0(lv_player, 0, 0, UserDataGetInt("NiadraEvolutions", lp_userDataInstance, "Cost", 1), StringExternal(CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lp_userDataInstance, "Button", 1), "Name", lv_player)), StringExternal(CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lp_userDataInstance, "Button", 1), "Tooltip", lv_player)), UserDataGetUpgrade("NiadraEvolutions", UserDataGetUserInstance("NiadraEvolutions", lp_userDataInstance, "Prerequisites", 1), "Upgrade", 1), UserDataGetUpgrade("NiadraEvolutions", UserDataGetUserInstance("NiadraEvolutions", lp_userDataInstance, "Prerequisites", 2), "Upgrade", 1), null, libNEXS_ge_NiadraE68F8FE8BFB0E58D87E7BAA7E7B1BBE588AB_E58F8CE58D87E7BAA7OR);
        }
        else {
            libNEXS_gf_NiadraE68F8FE8BFB0(lv_player, 0, 0, UserDataGetInt("NiadraEvolutions", lp_userDataInstance, "Cost", 1), StringExternal(CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lp_userDataInstance, "Button", 1), "Name", lv_player)), StringExternal(CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lp_userDataInstance, "Button", 1), "Tooltip", lv_player)), UserDataGetUpgrade("NiadraEvolutions", UserDataGetUserInstance("NiadraEvolutions", lp_userDataInstance, "Prerequisites", 1), "Upgrade", 1), UserDataGetUpgrade("NiadraEvolutions", UserDataGetUserInstance("NiadraEvolutions", lp_userDataInstance, "Prerequisites", 2), "Upgrade", 1), null, libNEXS_ge_NiadraE68F8FE8BFB0E58D87E7BAA7E7B1BBE588AB_E58F8CE58D87E7BAA7);
        }
    }
    else if (auto60538AF5_val == 3) {
        if ((UserDataGetInt("NiadraEvolutions", lp_userDataInstance, "Prerequisites Minimum Count", 1) == 1)) {
            libNEXS_gf_NiadraE68F8FE8BFB0(lv_player, 0, 0, UserDataGetInt("NiadraEvolutions", lp_userDataInstance, "Cost", 1), StringExternal(CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lp_userDataInstance, "Button", 1), "Name", lv_player)), StringExternal(CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lp_userDataInstance, "Button", 1), "Tooltip", lv_player)), UserDataGetUpgrade("NiadraEvolutions", UserDataGetUserInstance("NiadraEvolutions", lp_userDataInstance, "Prerequisites", 1), "Upgrade", 1), UserDataGetUpgrade("NiadraEvolutions", UserDataGetUserInstance("NiadraEvolutions", lp_userDataInstance, "Prerequisites", 2), "Upgrade", 1), UserDataGetUpgrade("NiadraEvolutions", UserDataGetUserInstance("NiadraEvolutions", lp_userDataInstance, "Prerequisites", 3), "Upgrade", 1), libNEXS_ge_NiadraE68F8FE8BFB0E58D87E7BAA7E7B1BBE588AB_E4B889E58D87E7BAA7OR);
        }
        else {
            libNEXS_gf_NiadraE68F8FE8BFB0(lv_player, 0, 0, UserDataGetInt("NiadraEvolutions", lp_userDataInstance, "Cost", 1), StringExternal(CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lp_userDataInstance, "Button", 1), "Name", lv_player)), StringExternal(CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lp_userDataInstance, "Button", 1), "Tooltip", lv_player)), UserDataGetUpgrade("NiadraEvolutions", UserDataGetUserInstance("NiadraEvolutions", lp_userDataInstance, "Prerequisites", 1), "Upgrade", 1), UserDataGetUpgrade("NiadraEvolutions", UserDataGetUserInstance("NiadraEvolutions", lp_userDataInstance, "Prerequisites", 2), "Upgrade", 1), UserDataGetUpgrade("NiadraEvolutions", UserDataGetUserInstance("NiadraEvolutions", lp_userDataInstance, "Prerequisites", 3), "Upgrade", 1), libNEXS_ge_NiadraE68F8FE8BFB0E58D87E7BAA7E7B1BBE588AB_E4B889E58D87E7BAA7ORE99C80E8A6812);
        }
    }
    else {
    }
}

void libNEXS_gf_NiadraGrantUpgradetoPlayer (string lp_userDataInstance, int lp_uIType) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16;

    // Implementation
    if ((PlayerGetPropertyInt(lv_player, c_playerPropCustom) >= UserDataGetInt("NiadraEvolutions", lp_userDataInstance, "Cost", 1))) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, UserDataGetUpgrade("NiadraEvolutions", lp_userDataInstance, "Upgrade", 1), 1);
        PlayerModifyPropertyInt(lv_player, c_playerPropCustom, c_playerPropOperSubtract, UserDataGetInt("NiadraEvolutions", lp_userDataInstance, "Cost", 1));
        libNEXS_gf_NiadraUIUpdate(lp_uIType);
        if ((lp_userDataInstance == "Spread3-3")) {
            libNEXS_gf_ApplyNiadraParasiteTech();
        }

    }

}

trigger auto_libNEXS_gf_ApplyNiadraParasiteTech_Trigger = null;

void libNEXS_gf_ApplyNiadraParasiteTech () {
    if (auto_libNEXS_gf_ApplyNiadraParasiteTech_Trigger == null) {
        auto_libNEXS_gf_ApplyNiadraParasiteTech_Trigger = TriggerCreate("auto_libNEXS_gf_ApplyNiadraParasiteTech_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_ApplyNiadraParasiteTech_Trigger, false, false);
}

bool auto_libNEXS_gf_ApplyNiadraParasiteTech_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB73796B1_g;
    int autoB73796B1_u;
    unit autoB73796B1_var;

    // Implementation
    while (true) {
        autoB73796B1_g = UnitGroupAlliance(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB73796B1_u = UnitGroupCount(autoB73796B1_g, c_unitCountAll);
        for (;; autoB73796B1_u -= 1) {
            autoB73796B1_var = UnitGroupUnitFromEnd(autoB73796B1_g, autoB73796B1_u);
            if (autoB73796B1_var == null) { break; }
            if (((UnitBehaviorEnabled(autoB73796B1_var, "NiadraParasite") == false) && ((UnitTypeGetProperty(UnitGetType(autoB73796B1_var), c_unitPropSuppliesUsed) >= 6.0) || (UnitTypeTestAttribute(UnitGetType(autoB73796B1_var), c_unitAttributeHeroic) == true) || (UnitTypeTestAttribute(UnitGetType(autoB73796B1_var), c_unitAttributeMapBoss) == true)))) {
                UnitBehaviorAddPlayer(autoB73796B1_var, "NiadraParasite", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, 8);
                break;
            }

        }
        Wait(30.0, c_timeGame);
    }
    return true;
}

bool libNEXS_gf_NiadraPreqSatisfiedCheck (string lp_userDataInstance) {
    // Variable Declarations
    int lv_satisfiedCount;
    int lv_player;

    // Automatic Variable Declarations
    const int autoE6CB8982_ae = 3;
    int autoE6CB8982_var;

    // Variable Initialization
    lv_player = libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16;

    // Implementation
    autoE6CB8982_var = 1;
    for ( ; autoE6CB8982_var <= autoE6CB8982_ae; autoE6CB8982_var += 1 ) {
        if ((UserDataGetUserInstance("NiadraEvolutions", lp_userDataInstance, "Prerequisites", autoE6CB8982_var) != null) && (TechTreeUpgradeCount(lv_player, UserDataGetUpgrade("NiadraEvolutions", UserDataGetUserInstance("NiadraEvolutions", lp_userDataInstance, "Prerequisites", autoE6CB8982_var), "Upgrade", 1), c_techCountCompleteOnly) >= 1)) {
            lv_satisfiedCount += 1;
        }

    }
    if ((lv_satisfiedCount >= UserDataGetInt("NiadraEvolutions", lp_userDataInstance, "Prerequisites Minimum Count", 1))) {
        return true;
    }
    else {
        return false;
    }
}

void libNEXS_gf_NiadraUIE5889BE5BBBA () {
    // Variable Declarations
    int lv_dataInstanceIndex;
    int lv_index;
    string lv_instance;

    // Automatic Variable Declarations
    const int auto69A83291_ae = 7;
    const int auto69A83291_ai = 1;
    const int autoC5734BF8_ae = 3;
    const int autoC5734BF8_ai = 1;
    const int autoE5FE5381_ae = 2;
    const int autoE5FE5381_ai = 1;
    const int auto5D8450B2_ae = 2;
    const int auto5D8450B2_ai = 1;

    // Variable Initialization

    // Implementation
    DialogCreate(3000, 3000, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNEXS_gv_niadraUpdateUI = DialogLastCreated();
    DialogControlCreateFromTemplate(libNEXS_gv_niadraUpdateUI, c_triggerControlTypePanel, "NiadraInterface/NiadraUpgradeDialogA");
    libNEXS_gv_niadra_A_Frame = DialogControlLastCreated();
    DialogControlSetVisible(libNEXS_gv_niadra_A_Frame, PlayerGroupAll(), false);
    lv_index = 1;
    for ( ; ( (auto69A83291_ai >= 0 && lv_index <= auto69A83291_ae) || (auto69A83291_ai < 0 && lv_index >= auto69A83291_ae) ) ; lv_index += auto69A83291_ai ) {
        DialogControlHookup(libNEXS_gv_niadra_A_Frame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Button" + IntToString(lv_index))));
        libNEXS_gv_niadra_A_Button_Frame[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libNEXS_gv_niadra_A_Button_Frame[lv_index], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("Button"));
        libNEXS_gv_niadra_A_Button[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libNEXS_gv_niadra_A_Button_Frame[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("Label"));
        libNEXS_gv_niadra_A_Label[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libNEXS_gv_niadra_A_Button_Frame[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("Icon"));
        libNEXS_gv_niadra_A_Icon[lv_index] = DialogControlLastCreated();
        lv_dataInstanceIndex += 1;
        lv_instance = UserDataInstance("NiadraEvolutions", lv_dataInstanceIndex);
        libNEXS_gv_niadra_A_Button_Data[lv_index] = lv_instance;
        libNtve_gf_SetDialogItemImage(libNEXS_gv_niadra_A_Icon[lv_index], (CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lv_instance, "Button", 1), "Icon", c_playerAny)), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libNEXS_gv_niadra_A_Label[lv_index], StringExternal(CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lv_instance, "Button", 1), "Name", c_playerAny)), PlayerGroupAll());
        DialogControlHookup(libNEXS_gv_niadra_A_Button_Frame[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("CheckMark"));
        libNEXS_gv_niadra_A_CheckMark[lv_index] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
    DialogControlHookup(libNEXS_gv_niadra_A_Frame, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("ExitButton"));
    libNEXS_gv_niadra_A_ExitButton = DialogControlLastCreated();
    DialogControlCreateFromTemplate(libNEXS_gv_niadraUpdateUI, c_triggerControlTypePanel, "NiadraInterface/NiadraUpgradeDialogB");
    libNEXS_gv_niadra_B_Frame = DialogControlLastCreated();
    DialogControlSetVisible(libNEXS_gv_niadra_B_Frame, PlayerGroupAll(), false);
    lv_index = 1;
    for ( ; ( (autoC5734BF8_ai >= 0 && lv_index <= autoC5734BF8_ae) || (autoC5734BF8_ai < 0 && lv_index >= autoC5734BF8_ae) ) ; lv_index += autoC5734BF8_ai ) {
        DialogControlHookup(libNEXS_gv_niadra_B_Frame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("ButtonA" + IntToString(lv_index))));
        libNEXS_gv_niadra_B_Button_Frame[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libNEXS_gv_niadra_B_Button_Frame[lv_index], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("Button"));
        libNEXS_gv_niadra_B_Button[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libNEXS_gv_niadra_B_Button_Frame[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("Label"));
        libNEXS_gv_niadra_B_Label[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libNEXS_gv_niadra_B_Button_Frame[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("Icon"));
        libNEXS_gv_niadra_B_Icon[lv_index] = DialogControlLastCreated();
        lv_dataInstanceIndex += 1;
        lv_instance = UserDataInstance("NiadraEvolutions", lv_dataInstanceIndex);
        libNEXS_gv_niadra_B_Button_Data[lv_index] = lv_instance;
        libNtve_gf_SetDialogItemImage(libNEXS_gv_niadra_B_Icon[lv_index], (CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lv_instance, "Button", 1), "Icon", c_playerAny)), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libNEXS_gv_niadra_B_Label[lv_index], StringExternal(CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lv_instance, "Button", 1), "Name", c_playerAny)), PlayerGroupAll());
        DialogControlHookup(libNEXS_gv_niadra_B_Button_Frame[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("CheckMark"));
        libNEXS_gv_niadra_B_CheckMark[lv_index] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(libNEXS_gv_niadra_B_Frame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("ButtonB" + IntToString(lv_index))));
        libNEXS_gv_niadra_B_Button_Frame2[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libNEXS_gv_niadra_B_Button_Frame2[lv_index], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("Button"));
        libNEXS_gv_niadra_B_Button2[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libNEXS_gv_niadra_B_Button_Frame2[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("Label"));
        libNEXS_gv_niadra_B_Label2[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libNEXS_gv_niadra_B_Button_Frame2[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("Icon"));
        libNEXS_gv_niadra_B_Icon2[lv_index] = DialogControlLastCreated();
        lv_dataInstanceIndex += 1;
        lv_instance = UserDataInstance("NiadraEvolutions", lv_dataInstanceIndex);
        libNEXS_gv_niadra_B_Button_Data2[lv_index] = lv_instance;
        libNtve_gf_SetDialogItemImage(libNEXS_gv_niadra_B_Icon2[lv_index], (CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lv_instance, "Button", 1), "Icon", c_playerAny)), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libNEXS_gv_niadra_B_Label2[lv_index], StringExternal(CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lv_instance, "Button", 1), "Name", c_playerAny)), PlayerGroupAll());
        DialogControlHookup(libNEXS_gv_niadra_B_Button_Frame2[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("CheckMark"));
        libNEXS_gv_niadra_B_CheckMark2[lv_index] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
    lv_index = 1;
    for ( ; ( (autoE5FE5381_ai >= 0 && lv_index <= autoE5FE5381_ae) || (autoE5FE5381_ai < 0 && lv_index >= autoE5FE5381_ae) ) ; lv_index += autoE5FE5381_ai ) {
        DialogControlHookup(libNEXS_gv_niadra_B_Frame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("ButtonC" + IntToString(lv_index))));
        libNEXS_gv_niadra_B_Button_Frame3[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libNEXS_gv_niadra_B_Button_Frame3[lv_index], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("Button"));
        libNEXS_gv_niadra_B_Button3[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libNEXS_gv_niadra_B_Button_Frame3[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("Label"));
        libNEXS_gv_niadra_B_Label3[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libNEXS_gv_niadra_B_Button_Frame3[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("Icon"));
        libNEXS_gv_niadra_B_Icon3[lv_index] = DialogControlLastCreated();
        lv_dataInstanceIndex += 1;
        lv_instance = UserDataInstance("NiadraEvolutions", lv_dataInstanceIndex);
        libNEXS_gv_niadra_B_Button_Data3[lv_index] = lv_instance;
        libNtve_gf_SetDialogItemImage(libNEXS_gv_niadra_B_Icon3[lv_index], (CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lv_instance, "Button", 1), "Icon", c_playerAny)), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libNEXS_gv_niadra_B_Label3[lv_index], StringExternal(CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lv_instance, "Button", 1), "Name", c_playerAny)), PlayerGroupAll());
        DialogControlHookup(libNEXS_gv_niadra_B_Button_Frame3[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("CheckMark"));
        libNEXS_gv_niadra_B_CheckMark3[lv_index] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
    DialogControlHookup(libNEXS_gv_niadra_B_Frame, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("ExitButton"));
    libNEXS_gv_niadra_B_ExitButton = DialogControlLastCreated();
    DialogControlCreateFromTemplate(libNEXS_gv_niadraUpdateUI, c_triggerControlTypePanel, "NiadraInterface/NiadraUpgradeDialogC");
    libNEXS_gv_niadra_C_Frame = DialogControlLastCreated();
    DialogControlSetVisible(libNEXS_gv_niadra_C_Frame, PlayerGroupAll(), false);
    lv_index = 1;
    for ( ; ( (auto5D8450B2_ai >= 0 && lv_index <= auto5D8450B2_ae) || (auto5D8450B2_ai < 0 && lv_index >= auto5D8450B2_ae) ) ; lv_index += auto5D8450B2_ai ) {
        DialogControlHookup(libNEXS_gv_niadra_C_Frame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("ButtonA" + IntToString(lv_index))));
        libNEXS_gv_niadra_C_Button_Frame2[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libNEXS_gv_niadra_C_Button_Frame2[lv_index], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("Button"));
        libNEXS_gv_niadra_C_Button2[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libNEXS_gv_niadra_C_Button_Frame2[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("Label"));
        libNEXS_gv_niadra_C_Label2[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libNEXS_gv_niadra_C_Button_Frame2[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("Icon"));
        libNEXS_gv_niadra_C_Icon2[lv_index] = DialogControlLastCreated();
        lv_dataInstanceIndex += 1;
        lv_instance = UserDataInstance("NiadraEvolutions", lv_dataInstanceIndex);
        libNEXS_gv_niadra_C_Button_Data2[lv_index] = lv_instance;
        libNtve_gf_SetDialogItemImage(libNEXS_gv_niadra_C_Icon2[lv_index], (CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lv_instance, "Button", 1), "Icon", c_playerAny)), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libNEXS_gv_niadra_C_Label2[lv_index], StringExternal(CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lv_instance, "Button", 1), "Name", c_playerAny)), PlayerGroupAll());
        DialogControlHookup(libNEXS_gv_niadra_C_Button_Frame2[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("CheckMark"));
        libNEXS_gv_niadra_C_CheckMark2[lv_index] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(libNEXS_gv_niadra_C_Frame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("ButtonB" + IntToString(lv_index))));
        libNEXS_gv_niadra_C_Button_Frame3[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libNEXS_gv_niadra_C_Button_Frame3[lv_index], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("Button"));
        libNEXS_gv_niadra_C_Button3[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libNEXS_gv_niadra_C_Button_Frame3[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("Label"));
        libNEXS_gv_niadra_C_Label3[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libNEXS_gv_niadra_C_Button_Frame3[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("Icon"));
        libNEXS_gv_niadra_C_Icon3[lv_index] = DialogControlLastCreated();
        lv_dataInstanceIndex += 1;
        lv_instance = UserDataInstance("NiadraEvolutions", lv_dataInstanceIndex);
        libNEXS_gv_niadra_C_Button_Data3[lv_index] = lv_instance;
        libNtve_gf_SetDialogItemImage(libNEXS_gv_niadra_C_Icon3[lv_index], (CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lv_instance, "Button", 1), "Icon", c_playerAny)), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libNEXS_gv_niadra_C_Label3[lv_index], StringExternal(CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lv_instance, "Button", 1), "Name", c_playerAny)), PlayerGroupAll());
        DialogControlHookup(libNEXS_gv_niadra_C_Button_Frame3[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("CheckMark"));
        libNEXS_gv_niadra_C_CheckMark3[lv_index] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlHookup(libNEXS_gv_niadra_C_Frame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("ButtonC" + IntToString(lv_index))));
        libNEXS_gv_niadra_C_Button_Frame4[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libNEXS_gv_niadra_C_Button_Frame4[lv_index], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("Button"));
        libNEXS_gv_niadra_C_Button4[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libNEXS_gv_niadra_C_Button_Frame4[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("Label"));
        libNEXS_gv_niadra_C_Label4[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libNEXS_gv_niadra_C_Button_Frame4[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("Icon"));
        libNEXS_gv_niadra_C_Icon4[lv_index] = DialogControlLastCreated();
        lv_dataInstanceIndex += 1;
        lv_instance = UserDataInstance("NiadraEvolutions", lv_dataInstanceIndex);
        libNEXS_gv_niadra_C_Button_Data4[lv_index] = lv_instance;
        libNtve_gf_SetDialogItemImage(libNEXS_gv_niadra_C_Icon4[lv_index], (CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lv_instance, "Button", 1), "Icon", c_playerAny)), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libNEXS_gv_niadra_C_Label4[lv_index], StringExternal(CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lv_instance, "Button", 1), "Name", c_playerAny)), PlayerGroupAll());
        DialogControlHookup(libNEXS_gv_niadra_C_Button_Frame4[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("CheckMark"));
        libNEXS_gv_niadra_C_CheckMark4[lv_index] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
    DialogControlHookup(libNEXS_gv_niadra_C_Frame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("ButtonD" + "1")));
    libNEXS_gv_niadra_C_Button_Frame = DialogControlLastCreated();
    DialogControlHookup(libNEXS_gv_niadra_C_Button_Frame, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("Button"));
    libNEXS_gv_niadra_C_Button = DialogControlLastCreated();
    DialogControlHookup(libNEXS_gv_niadra_C_Button_Frame, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("Label"));
    libNEXS_gv_niadra_C_Label = DialogControlLastCreated();
    DialogControlHookup(libNEXS_gv_niadra_C_Button_Frame, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("Icon"));
    libNEXS_gv_niadra_C_Icon = DialogControlLastCreated();
    lv_dataInstanceIndex += 1;
    lv_instance = UserDataInstance("NiadraEvolutions", lv_dataInstanceIndex);
    libNEXS_gv_niadra_C_Button_Data = lv_instance;
    libNtve_gf_SetDialogItemImage(libNEXS_gv_niadra_C_Icon, (CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lv_instance, "Button", 1), "Icon", c_playerAny)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libNEXS_gv_niadra_C_Label, StringExternal(CatalogFieldValueGet(c_gameCatalogButton, UserDataGetGameLink("NiadraEvolutions", lv_instance, "Button", 1), "Name", c_playerAny)), PlayerGroupAll());
    DialogControlHookup(libNEXS_gv_niadra_C_Button_Frame, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("CheckMark"));
    libNEXS_gv_niadra_C_CheckMark = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libNEXS_gv_niadra_C_Frame, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("ExitButton"));
    libNEXS_gv_niadra_C_ExitButton = DialogControlLastCreated();
    DialogControlCreateFromTemplate(libNEXS_gv_niadraUpdateUI, c_triggerControlTypePanel, "NiadraInterface/NiadraTooltipPanelTopCenter");
    libNEXS_gv_niadra_Tooltip = DialogControlLastCreated();
    DialogControlSetVisible(libNEXS_gv_niadra_Tooltip, PlayerGroupAll(), false);
    DialogControlHookup(libNEXS_gv_niadra_Tooltip, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("Label"));
    libNEXS_gv_niadra_Tooltip_Label = DialogControlLastCreated();
}

void libNEXS_gf_NiadraUIUpdate (int lp_uIType) {
    // Variable Declarations
    int lv_dialogItem;
    int lv_dialogItem2;
    int lv_index;
    string lv_instance;
    int lv_player;

    // Automatic Variable Declarations
    int auto13CFCD45_val;
    const int autoB8360478_ae = 7;
    const int autoB8360478_ai = 1;
    const int auto02938BB8_ae = 3;
    const int auto02938BB8_ai = 1;
    const int auto35F24539_ae = 2;
    const int auto35F24539_ai = 1;
    const int auto75D32337_ae = 2;
    const int auto75D32337_ai = 1;

    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;
    lv_dialogItem2 = c_invalidDialogControlId;
    lv_player = libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16;

    // Implementation
    auto13CFCD45_val = lp_uIType;
    if (auto13CFCD45_val == 1) {
        lv_index = 1;
        for ( ; ( (autoB8360478_ai >= 0 && lv_index <= autoB8360478_ae) || (autoB8360478_ai < 0 && lv_index >= autoB8360478_ae) ) ; lv_index += autoB8360478_ai ) {
            lv_instance = libNEXS_gv_niadra_A_Button_Data[lv_index];
            lv_dialogItem = libNEXS_gv_niadra_A_Button[lv_index];
            lv_dialogItem2 = libNEXS_gv_niadra_A_CheckMark[lv_index];
            if (((TechTreeUpgradeCount(lv_player, UserDataGetUpgrade("NiadraEvolutions", lv_instance, "Upgrade", 1), c_techCountCompleteOnly) >= 1) || (libNEXS_gf_NiadraPreqSatisfiedCheck(lv_instance) == false))) {
                DialogControlSetEnabled(lv_dialogItem, PlayerGroupSingle(lv_player), false);
                DialogControlSetVisible(lv_dialogItem2, PlayerGroupSingle(lv_player), true);
            }
            else {
                DialogControlSetEnabled(lv_dialogItem, PlayerGroupSingle(lv_player), true);
                DialogControlSetVisible(lv_dialogItem2, PlayerGroupSingle(lv_player), false);
            }
        }
    }
    else if (auto13CFCD45_val == 2) {
        lv_index = 1;
        for ( ; ( (auto02938BB8_ai >= 0 && lv_index <= auto02938BB8_ae) || (auto02938BB8_ai < 0 && lv_index >= auto02938BB8_ae) ) ; lv_index += auto02938BB8_ai ) {
            lv_instance = libNEXS_gv_niadra_B_Button_Data[lv_index];
            lv_dialogItem = libNEXS_gv_niadra_B_Button[lv_index];
            lv_dialogItem2 = libNEXS_gv_niadra_B_CheckMark[lv_index];
            if (((TechTreeUpgradeCount(lv_player, UserDataGetUpgrade("NiadraEvolutions", lv_instance, "Upgrade", 1), c_techCountCompleteOnly) >= 1) || (libNEXS_gf_NiadraPreqSatisfiedCheck(lv_instance) == false))) {
                DialogControlSetEnabled(lv_dialogItem, PlayerGroupSingle(lv_player), false);
                DialogControlSetVisible(lv_dialogItem2, PlayerGroupSingle(lv_player), true);
            }
            else {
                DialogControlSetEnabled(lv_dialogItem, PlayerGroupSingle(lv_player), true);
                DialogControlSetVisible(lv_dialogItem2, PlayerGroupSingle(lv_player), false);
            }
            lv_instance = libNEXS_gv_niadra_B_Button_Data2[lv_index];
            lv_dialogItem = libNEXS_gv_niadra_B_Button2[lv_index];
            lv_dialogItem2 = libNEXS_gv_niadra_B_CheckMark2[lv_index];
            if (((TechTreeUpgradeCount(lv_player, UserDataGetUpgrade("NiadraEvolutions", lv_instance, "Upgrade", 1), c_techCountCompleteOnly) >= 1) || (libNEXS_gf_NiadraPreqSatisfiedCheck(lv_instance) == false))) {
                DialogControlSetEnabled(lv_dialogItem, PlayerGroupSingle(lv_player), false);
                DialogControlSetVisible(lv_dialogItem2, PlayerGroupSingle(lv_player), true);
            }
            else {
                DialogControlSetEnabled(lv_dialogItem, PlayerGroupSingle(lv_player), true);
                DialogControlSetVisible(lv_dialogItem2, PlayerGroupSingle(lv_player), false);
            }
        }
        lv_index = 1;
        for ( ; ( (auto35F24539_ai >= 0 && lv_index <= auto35F24539_ae) || (auto35F24539_ai < 0 && lv_index >= auto35F24539_ae) ) ; lv_index += auto35F24539_ai ) {
            lv_instance = libNEXS_gv_niadra_B_Button_Data3[lv_index];
            lv_dialogItem = libNEXS_gv_niadra_B_Button3[lv_index];
            lv_dialogItem2 = libNEXS_gv_niadra_B_CheckMark3[lv_index];
            if (((TechTreeUpgradeCount(lv_player, UserDataGetUpgrade("NiadraEvolutions", lv_instance, "Upgrade", 1), c_techCountCompleteOnly) >= 1) || (libNEXS_gf_NiadraPreqSatisfiedCheck(lv_instance) == false))) {
                DialogControlSetEnabled(lv_dialogItem, PlayerGroupSingle(lv_player), false);
                DialogControlSetVisible(lv_dialogItem2, PlayerGroupSingle(lv_player), true);
            }
            else {
                DialogControlSetEnabled(lv_dialogItem, PlayerGroupSingle(lv_player), true);
                DialogControlSetVisible(lv_dialogItem2, PlayerGroupSingle(lv_player), false);
            }
        }
    }
    else if (auto13CFCD45_val == 3) {
        lv_index = 1;
        for ( ; ( (auto75D32337_ai >= 0 && lv_index <= auto75D32337_ae) || (auto75D32337_ai < 0 && lv_index >= auto75D32337_ae) ) ; lv_index += auto75D32337_ai ) {
            lv_instance = libNEXS_gv_niadra_C_Button_Data2[lv_index];
            lv_dialogItem = libNEXS_gv_niadra_C_Button2[lv_index];
            lv_dialogItem2 = libNEXS_gv_niadra_C_Button_Frame2[lv_index];
            if (((TechTreeUpgradeCount(lv_player, UserDataGetUpgrade("NiadraEvolutions", lv_instance, "Upgrade", 1), c_techCountCompleteOnly) >= 1) || (libNEXS_gf_NiadraPreqSatisfiedCheck(lv_instance) == false))) {
                DialogControlSetEnabled(lv_dialogItem, PlayerGroupSingle(lv_player), false);
                DialogControlSetVisible(lv_dialogItem2, PlayerGroupSingle(lv_player), true);
            }
            else {
                DialogControlSetEnabled(lv_dialogItem, PlayerGroupSingle(lv_player), true);
                DialogControlSetVisible(lv_dialogItem2, PlayerGroupSingle(lv_player), false);
            }
            lv_instance = libNEXS_gv_niadra_C_Button_Data3[lv_index];
            lv_dialogItem = libNEXS_gv_niadra_C_Button3[lv_index];
            lv_dialogItem2 = libNEXS_gv_niadra_C_Button_Frame3[lv_index];
            if (((TechTreeUpgradeCount(lv_player, UserDataGetUpgrade("NiadraEvolutions", lv_instance, "Upgrade", 1), c_techCountCompleteOnly) >= 1) || (libNEXS_gf_NiadraPreqSatisfiedCheck(lv_instance) == false))) {
                DialogControlSetEnabled(lv_dialogItem, PlayerGroupSingle(lv_player), false);
                DialogControlSetVisible(lv_dialogItem2, PlayerGroupSingle(lv_player), true);
            }
            else {
                DialogControlSetEnabled(lv_dialogItem, PlayerGroupSingle(lv_player), true);
                DialogControlSetVisible(lv_dialogItem2, PlayerGroupSingle(lv_player), false);
            }
            lv_instance = libNEXS_gv_niadra_C_Button_Data4[lv_index];
            lv_dialogItem = libNEXS_gv_niadra_C_Button4[lv_index];
            lv_dialogItem2 = libNEXS_gv_niadra_C_Button_Frame4[lv_index];
            if (((TechTreeUpgradeCount(lv_player, UserDataGetUpgrade("NiadraEvolutions", lv_instance, "Upgrade", 1), c_techCountCompleteOnly) >= 1) || (libNEXS_gf_NiadraPreqSatisfiedCheck(lv_instance) == false))) {
                DialogControlSetEnabled(lv_dialogItem, PlayerGroupSingle(lv_player), false);
                DialogControlSetVisible(lv_dialogItem2, PlayerGroupSingle(lv_player), true);
            }
            else {
                DialogControlSetEnabled(lv_dialogItem, PlayerGroupSingle(lv_player), true);
                DialogControlSetVisible(lv_dialogItem2, PlayerGroupSingle(lv_player), false);
            }
            lv_instance = libNEXS_gv_niadra_C_Button_Data;
            lv_dialogItem = libNEXS_gv_niadra_C_Button;
            lv_dialogItem2 = libNEXS_gv_niadra_C_Button_Frame;
            if (((TechTreeUpgradeCount(lv_player, UserDataGetUpgrade("NiadraEvolutions", lv_instance, "Upgrade", 1), c_techCountCompleteOnly) >= 1) || (libNEXS_gf_NiadraPreqSatisfiedCheck(lv_instance) == false))) {
                DialogControlSetEnabled(lv_dialogItem, PlayerGroupSingle(lv_player), false);
                DialogControlSetVisible(lv_dialogItem2, PlayerGroupSingle(lv_player), true);
            }
            else {
                DialogControlSetEnabled(lv_dialogItem, PlayerGroupSingle(lv_player), true);
                DialogControlSetVisible(lv_dialogItem2, PlayerGroupSingle(lv_player), false);
            }
        }
    }
    else {
    }
}

void libNEXS_gf_NiadraE68F8FE8BFB0 (int lp_e78EA9E5AEB6, int lp_e699B6E4BD93E79FBF, int lp_e793A6E696AF, int lp_e7949FE789A9E8B4A8, text lp_e5908DE7A7B0, text lp_e68F8FE8BFB0, string lp_e68980E99C80E58D87E7BAA71, string lp_e68980E99C80E58D87E7BAA72, string lp_e68980E99C80E58D87E7BAA73, int lp_e58D87E7BAA7E7B1BBE588AB) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_e58D87E7BAA7E7B1BBE588AB == libNEXS_ge_NiadraE68F8FE8BFB0E58D87E7BAA7E7B1BBE588AB_E58D95E58D87E7BAA7)) {
        libNEXS_gf_NiadraE68F8FE8BFB0E5BEAAE78EAFE8AEBEE7BDAEE58D95E58D87E7BAA7EFBC89(lp_e78EA9E5AEB6, lp_e699B6E4BD93E79FBF, lp_e793A6E696AF, lp_e7949FE789A9E8B4A8, lp_e5908DE7A7B0, lp_e68F8FE8BFB0, lp_e68980E99C80E58D87E7BAA71);
    }
    else if ((lp_e58D87E7BAA7E7B1BBE588AB == libNEXS_ge_NiadraE68F8FE8BFB0E58D87E7BAA7E7B1BBE588AB_E58F8CE58D87E7BAA7)) {
        libNEXS_gf_NiadraE68F8FE8BFB0E5BEAAE78EAFE8AEBEE7BDAEE58F8CE58D87E7BAA7EFBC89(lp_e78EA9E5AEB6, lp_e699B6E4BD93E79FBF, lp_e793A6E696AF, lp_e7949FE789A9E8B4A8, lp_e5908DE7A7B0, lp_e68F8FE8BFB0, lp_e68980E99C80E58D87E7BAA71, lp_e68980E99C80E58D87E7BAA72);
    }
    else if ((lp_e58D87E7BAA7E7B1BBE588AB == libNEXS_ge_NiadraE68F8FE8BFB0E58D87E7BAA7E7B1BBE588AB_E58F8CE58D87E7BAA7OR)) {
        libNEXS_gf_NiadraE68F8FE8BFB0E5BEAAE78EAFE8AEBEE7BDAEE58F8CE58D87E7BAA7EFBC89OR(lp_e78EA9E5AEB6, lp_e699B6E4BD93E79FBF, lp_e793A6E696AF, lp_e7949FE789A9E8B4A8, lp_e5908DE7A7B0, lp_e68F8FE8BFB0, lp_e68980E99C80E58D87E7BAA71, lp_e68980E99C80E58D87E7BAA72);
    }
    else if ((lp_e58D87E7BAA7E7B1BBE588AB == libNEXS_ge_NiadraE68F8FE8BFB0E58D87E7BAA7E7B1BBE588AB_E4B889E58D87E7BAA7OR)) {
        libNEXS_gf_NiadraE68F8FE8BFB0E5BEAAE78EAFE8AEBEE7BDAEE4B889E58D87E7BAA7EFBC89OR(lp_e78EA9E5AEB6, lp_e699B6E4BD93E79FBF, lp_e793A6E696AF, lp_e7949FE789A9E8B4A8, lp_e5908DE7A7B0, lp_e68F8FE8BFB0, lp_e68980E99C80E58D87E7BAA71, lp_e68980E99C80E58D87E7BAA72, lp_e68980E99C80E58D87E7BAA73);
    }
    else if ((lp_e58D87E7BAA7E7B1BBE588AB == libNEXS_ge_NiadraE68F8FE8BFB0E58D87E7BAA7E7B1BBE588AB_E4B889E58D87E7BAA7ORE99C80E8A6812)) {
        libNEXS_gf_NiadraE68F8FE8BFB0E5BEAAE78EAFE8AEBEE7BDAEE4B889E58D87E7BAA7EFBC89E99C80E6B1822(lp_e78EA9E5AEB6, lp_e699B6E4BD93E79FBF, lp_e793A6E696AF, lp_e7949FE789A9E8B4A8, lp_e5908DE7A7B0, lp_e68F8FE8BFB0, lp_e68980E99C80E58D87E7BAA71, lp_e68980E99C80E58D87E7BAA72, lp_e68980E99C80E58D87E7BAA73);
    }
}

void libNEXS_gf_NiadraE68F8FE8BFB0E5BEAAE78EAFE8AEBEE7BDAEE58D95E58D87E7BAA7EFBC89 (int lp_e78EA9E5AEB6, int lp_e699B6E4BD93E79FBF, int lp_e793A6E696AF, int lp_e7949FE789A9E8B4A8, text lp_e5908DE7A7B0, text lp_e68F8FE8BFB0, string lp_e68980E99C80E58D87E7BAA7) {
    // Variable Declarations
    text lv_e68980E99C80E69DA1E4BBB6;
    text lv_e8B4B9E794A8;
    text lv_e699B6E4BD93E79FBF;
    text lv_e793A6E696AF;
    text lv_e7949FE789A9E8B4A8;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_e68980E99C80E58D87E7BAA7 == null)) {
        lv_e68980E99C80E69DA1E4BBB6 = StringToText("");
    }
    else {
        if ((TechTreeUpgradeCount(lp_e78EA9E5AEB6, lp_e68980E99C80E58D87E7BAA7, c_techCountCompleteOnly) >= 1)) {
            lv_e68980E99C80E69DA1E4BBB6 = StringToText("");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_NEXS_2C4E7EBF", "A", StringExternal("Param/Value/lib_NEXS_57128F9C"));
            TextExpressionSetToken("Param/Expression/lib_NEXS_2C4E7EBF", "B", libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE58D87E7BAA7(lp_e78EA9E5AEB6, lp_e68980E99C80E58D87E7BAA7));
            lv_e68980E99C80E69DA1E4BBB6 = TextExpressionAssemble("Param/Expression/lib_NEXS_2C4E7EBF");
        }
    }
    if ((lp_e699B6E4BD93E79FBF <= 0) && (lp_e7949FE789A9E8B4A8 <= 0) && (lp_e793A6E696AF <= 0)) {
        lv_e8B4B9E794A8 = StringToText("");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_NEXS_016F2B22", "A", libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE699B6E4BD93E79FBF(lp_e78EA9E5AEB6, lp_e699B6E4BD93E79FBF));
        TextExpressionSetToken("Param/Expression/lib_NEXS_016F2B22", "B", libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE793A6E696AF(lp_e78EA9E5AEB6, lp_e793A6E696AF));
        TextExpressionSetToken("Param/Expression/lib_NEXS_016F2B22", "C", libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE7949FE789A9E8B4A8(lp_e78EA9E5AEB6, lp_e7949FE789A9E8B4A8));
        lv_e8B4B9E794A8 = TextExpressionAssemble("Param/Expression/lib_NEXS_016F2B22");
    }
    TextExpressionSetToken("Param/Expression/lib_NEXS_F6EEF450", "A", lp_e5908DE7A7B0);
    TextExpressionSetToken("Param/Expression/lib_NEXS_F6EEF450", "D", lv_e8B4B9E794A8);
    TextExpressionSetToken("Param/Expression/lib_NEXS_F6EEF450", "B", lv_e68980E99C80E69DA1E4BBB6);
    TextExpressionSetToken("Param/Expression/lib_NEXS_F6EEF450", "C", lp_e68F8FE8BFB0);
    libNtve_gf_SetDialogItemText(libNEXS_gv_niadra_Tooltip_Label, TextExpressionAssemble("Param/Expression/lib_NEXS_F6EEF450"), PlayerGroupSingle(lp_e78EA9E5AEB6));
}

void libNEXS_gf_NiadraE68F8FE8BFB0E5BEAAE78EAFE8AEBEE7BDAEE58F8CE58D87E7BAA7EFBC89 (int lp_e78EA9E5AEB6, int lp_e699B6E4BD93E79FBF, int lp_e793A6E696AF, int lp_e7949FE789A9E8B4A8, text lp_e5908DE7A7B0, text lp_e68F8FE8BFB0, string lp_e68980E99C80E58D87E7BAA7, string lp_e68980E99C80E58D87E7BAA72) {
    // Variable Declarations
    text lv_e68980E99C80E69DA1E4BBB6;
    text lv_e8B4B9E794A8;
    text lv_e699B6E4BD93E79FBF;
    text lv_e793A6E696AF;
    text lv_e7949FE789A9E8B4A8;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_e68980E99C80E58D87E7BAA7 == null) && (lp_e68980E99C80E58D87E7BAA72 == null)) {
        lv_e68980E99C80E69DA1E4BBB6 = StringToText("");
    }
    else {
        if ((TechTreeUpgradeCount(lp_e78EA9E5AEB6, lp_e68980E99C80E58D87E7BAA7, c_techCountCompleteOnly) >= 1) && (TechTreeUpgradeCount(lp_e78EA9E5AEB6, lp_e68980E99C80E58D87E7BAA72, c_techCountCompleteOnly) >= 1)) {
            lv_e68980E99C80E69DA1E4BBB6 = StringToText("");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_NEXS_06114844", "A", StringExternal("Param/Value/lib_NEXS_068CA1FF"));
            TextExpressionSetToken("Param/Expression/lib_NEXS_06114844", "B", libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE58D87E7BAA7(lp_e78EA9E5AEB6, lp_e68980E99C80E58D87E7BAA7));
            TextExpressionSetToken("Param/Expression/lib_NEXS_06114844", "C", libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE58D87E7BAA7(lp_e78EA9E5AEB6, lp_e68980E99C80E58D87E7BAA72));
            lv_e68980E99C80E69DA1E4BBB6 = TextExpressionAssemble("Param/Expression/lib_NEXS_06114844");
        }
    }
    if ((lp_e699B6E4BD93E79FBF <= 0) && (lp_e7949FE789A9E8B4A8 <= 0) && (lp_e793A6E696AF <= 0)) {
        lv_e8B4B9E794A8 = StringToText("");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_NEXS_AF0E5171", "A", libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE699B6E4BD93E79FBF(lp_e78EA9E5AEB6, lp_e699B6E4BD93E79FBF));
        TextExpressionSetToken("Param/Expression/lib_NEXS_AF0E5171", "B", libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE793A6E696AF(lp_e78EA9E5AEB6, lp_e793A6E696AF));
        TextExpressionSetToken("Param/Expression/lib_NEXS_AF0E5171", "C", libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE7949FE789A9E8B4A8(lp_e78EA9E5AEB6, lp_e7949FE789A9E8B4A8));
        lv_e8B4B9E794A8 = TextExpressionAssemble("Param/Expression/lib_NEXS_AF0E5171");
    }
    TextExpressionSetToken("Param/Expression/lib_NEXS_C30E8223", "A", lp_e5908DE7A7B0);
    TextExpressionSetToken("Param/Expression/lib_NEXS_C30E8223", "D", lv_e8B4B9E794A8);
    TextExpressionSetToken("Param/Expression/lib_NEXS_C30E8223", "B", lv_e68980E99C80E69DA1E4BBB6);
    TextExpressionSetToken("Param/Expression/lib_NEXS_C30E8223", "C", lp_e68F8FE8BFB0);
    libNtve_gf_SetDialogItemText(libNEXS_gv_niadra_Tooltip_Label, TextExpressionAssemble("Param/Expression/lib_NEXS_C30E8223"), PlayerGroupSingle(lp_e78EA9E5AEB6));
}

void libNEXS_gf_NiadraE68F8FE8BFB0E5BEAAE78EAFE8AEBEE7BDAEE58F8CE58D87E7BAA7EFBC89OR (int lp_e78EA9E5AEB6, int lp_e699B6E4BD93E79FBF, int lp_e793A6E696AF, int lp_e7949FE789A9E8B4A8, text lp_e5908DE7A7B0, text lp_e68F8FE8BFB0, string lp_e68980E99C80E58D87E7BAA7, string lp_e68980E99C80E58D87E7BAA72) {
    // Variable Declarations
    text lv_e68980E99C80E69DA1E4BBB6;
    text lv_e8B4B9E794A8;
    text lv_e699B6E4BD93E79FBF;
    text lv_e793A6E696AF;
    text lv_e7949FE789A9E8B4A8;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_e68980E99C80E58D87E7BAA7 == null) && (lp_e68980E99C80E58D87E7BAA72 == null)) {
        lv_e68980E99C80E69DA1E4BBB6 = StringToText("");
    }
    else {
        if (((TechTreeUpgradeCount(lp_e78EA9E5AEB6, lp_e68980E99C80E58D87E7BAA7, c_techCountCompleteOnly) >= 1) || (TechTreeUpgradeCount(lp_e78EA9E5AEB6, lp_e68980E99C80E58D87E7BAA72, c_techCountCompleteOnly) >= 1))) {
            lv_e68980E99C80E69DA1E4BBB6 = StringToText("");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_NEXS_B21E0107", "A", StringExternal("Param/Value/lib_NEXS_C1413D97"));
            TextExpressionSetToken("Param/Expression/lib_NEXS_B21E0107", "B", libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE58D87E7BAA7(lp_e78EA9E5AEB6, lp_e68980E99C80E58D87E7BAA7));
            TextExpressionSetToken("Param/Expression/lib_NEXS_B21E0107", "D", StringExternal("Param/Value/lib_NEXS_973236AA"));
            TextExpressionSetToken("Param/Expression/lib_NEXS_B21E0107", "C", libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE58D87E7BAA7(lp_e78EA9E5AEB6, lp_e68980E99C80E58D87E7BAA72));
            lv_e68980E99C80E69DA1E4BBB6 = TextExpressionAssemble("Param/Expression/lib_NEXS_B21E0107");
        }
    }
    if ((lp_e699B6E4BD93E79FBF <= 0) && (lp_e7949FE789A9E8B4A8 <= 0) && (lp_e793A6E696AF <= 0)) {
        lv_e8B4B9E794A8 = StringToText("");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_NEXS_88293916", "A", libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE699B6E4BD93E79FBF(lp_e78EA9E5AEB6, lp_e699B6E4BD93E79FBF));
        TextExpressionSetToken("Param/Expression/lib_NEXS_88293916", "B", libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE793A6E696AF(lp_e78EA9E5AEB6, lp_e793A6E696AF));
        TextExpressionSetToken("Param/Expression/lib_NEXS_88293916", "C", libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE7949FE789A9E8B4A8(lp_e78EA9E5AEB6, lp_e7949FE789A9E8B4A8));
        lv_e8B4B9E794A8 = TextExpressionAssemble("Param/Expression/lib_NEXS_88293916");
    }
    TextExpressionSetToken("Param/Expression/lib_NEXS_C05ECF14", "A", lp_e5908DE7A7B0);
    TextExpressionSetToken("Param/Expression/lib_NEXS_C05ECF14", "D", lv_e8B4B9E794A8);
    TextExpressionSetToken("Param/Expression/lib_NEXS_C05ECF14", "B", lv_e68980E99C80E69DA1E4BBB6);
    TextExpressionSetToken("Param/Expression/lib_NEXS_C05ECF14", "C", lp_e68F8FE8BFB0);
    libNtve_gf_SetDialogItemText(libNEXS_gv_niadra_Tooltip_Label, TextExpressionAssemble("Param/Expression/lib_NEXS_C05ECF14"), PlayerGroupSingle(lp_e78EA9E5AEB6));
}

void libNEXS_gf_NiadraE68F8FE8BFB0E5BEAAE78EAFE8AEBEE7BDAEE4B889E58D87E7BAA7EFBC89OR (int lp_e78EA9E5AEB6, int lp_e699B6E4BD93E79FBF, int lp_e793A6E696AF, int lp_e7949FE789A9E8B4A8, text lp_e5908DE7A7B0, text lp_e68F8FE8BFB0, string lp_e68980E99C80E58D87E7BAA7, string lp_e68980E99C80E58D87E7BAA72, string lp_e68980E99C80E58D87E7BAA73) {
    // Variable Declarations
    text lv_e68980E99C80E69DA1E4BBB6;
    text lv_e8B4B9E794A8;
    text lv_e699B6E4BD93E79FBF;
    text lv_e793A6E696AF;
    text lv_e7949FE789A9E8B4A8;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_e68980E99C80E58D87E7BAA7 == null) && (lp_e68980E99C80E58D87E7BAA72 == null) && (lp_e68980E99C80E58D87E7BAA73 == null)) {
        lv_e68980E99C80E69DA1E4BBB6 = StringToText("");
    }
    else {
        if (((TechTreeUpgradeCount(lp_e78EA9E5AEB6, lp_e68980E99C80E58D87E7BAA7, c_techCountCompleteOnly) >= 1) || (TechTreeUpgradeCount(lp_e78EA9E5AEB6, lp_e68980E99C80E58D87E7BAA72, c_techCountCompleteOnly) >= 1) || (TechTreeUpgradeCount(lp_e78EA9E5AEB6, lp_e68980E99C80E58D87E7BAA73, c_techCountCompleteOnly) >= 1))) {
            lv_e68980E99C80E69DA1E4BBB6 = StringToText("");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_NEXS_8227663D", "A", StringExternal("Param/Value/lib_NEXS_777899C2"));
            TextExpressionSetToken("Param/Expression/lib_NEXS_8227663D", "B", libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE58D87E7BAA7(lp_e78EA9E5AEB6, lp_e68980E99C80E58D87E7BAA7));
            TextExpressionSetToken("Param/Expression/lib_NEXS_8227663D", "D", StringExternal("Param/Value/lib_NEXS_1CF3C382"));
            TextExpressionSetToken("Param/Expression/lib_NEXS_8227663D", "C", libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE58D87E7BAA7(lp_e78EA9E5AEB6, lp_e68980E99C80E58D87E7BAA72));
            TextExpressionSetToken("Param/Expression/lib_NEXS_8227663D", "D", StringExternal("Param/Value/lib_NEXS_1CF3C382"));
            TextExpressionSetToken("Param/Expression/lib_NEXS_8227663D", "E", libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE58D87E7BAA7(lp_e78EA9E5AEB6, lp_e68980E99C80E58D87E7BAA73));
            lv_e68980E99C80E69DA1E4BBB6 = TextExpressionAssemble("Param/Expression/lib_NEXS_8227663D");
        }
    }
    if ((lp_e699B6E4BD93E79FBF <= 0) && (lp_e7949FE789A9E8B4A8 <= 0) && (lp_e793A6E696AF <= 0)) {
        lv_e8B4B9E794A8 = StringToText("");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_NEXS_7C797DFF", "A", libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE699B6E4BD93E79FBF(lp_e78EA9E5AEB6, lp_e699B6E4BD93E79FBF));
        TextExpressionSetToken("Param/Expression/lib_NEXS_7C797DFF", "B", libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE793A6E696AF(lp_e78EA9E5AEB6, lp_e793A6E696AF));
        TextExpressionSetToken("Param/Expression/lib_NEXS_7C797DFF", "C", libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE7949FE789A9E8B4A8(lp_e78EA9E5AEB6, lp_e7949FE789A9E8B4A8));
        lv_e8B4B9E794A8 = TextExpressionAssemble("Param/Expression/lib_NEXS_7C797DFF");
    }
    TextExpressionSetToken("Param/Expression/lib_NEXS_D2B1222D", "A", lp_e5908DE7A7B0);
    TextExpressionSetToken("Param/Expression/lib_NEXS_D2B1222D", "D", lv_e8B4B9E794A8);
    TextExpressionSetToken("Param/Expression/lib_NEXS_D2B1222D", "B", lv_e68980E99C80E69DA1E4BBB6);
    TextExpressionSetToken("Param/Expression/lib_NEXS_D2B1222D", "C", lp_e68F8FE8BFB0);
    libNtve_gf_SetDialogItemText(libNEXS_gv_niadra_Tooltip_Label, TextExpressionAssemble("Param/Expression/lib_NEXS_D2B1222D"), PlayerGroupSingle(lp_e78EA9E5AEB6));
}

void libNEXS_gf_NiadraE68F8FE8BFB0E5BEAAE78EAFE8AEBEE7BDAEE4B889E58D87E7BAA7EFBC89E99C80E6B1822 (int lp_e78EA9E5AEB6, int lp_e699B6E4BD93E79FBF, int lp_e793A6E696AF, int lp_e7949FE789A9E8B4A8, text lp_e5908DE7A7B0, text lp_e68F8FE8BFB0, string lp_e68980E99C80E58D87E7BAA7, string lp_e68980E99C80E58D87E7BAA72, string lp_e68980E99C80E58D87E7BAA73) {
    // Variable Declarations
    text lv_e68980E99C80E69DA1E4BBB6;
    text lv_e8B4B9E794A8;
    text lv_e699B6E4BD93E79FBF;
    text lv_e793A6E696AF;
    text lv_e7949FE789A9E8B4A8;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_e68980E99C80E58D87E7BAA7 == null) && (lp_e68980E99C80E58D87E7BAA72 == null) && (lp_e68980E99C80E58D87E7BAA73 == null)) {
        lv_e68980E99C80E69DA1E4BBB6 = StringToText("");
    }
    else {
        if ((((TechTreeUpgradeCount(lp_e78EA9E5AEB6, lp_e68980E99C80E58D87E7BAA7, c_techCountCompleteOnly) >= 1) && (TechTreeUpgradeCount(lp_e78EA9E5AEB6, lp_e68980E99C80E58D87E7BAA72, c_techCountCompleteOnly) >= 1)) || ((TechTreeUpgradeCount(lp_e78EA9E5AEB6, lp_e68980E99C80E58D87E7BAA7, c_techCountCompleteOnly) >= 1) && (TechTreeUpgradeCount(lp_e78EA9E5AEB6, lp_e68980E99C80E58D87E7BAA73, c_techCountCompleteOnly) >= 1)) || ((TechTreeUpgradeCount(lp_e78EA9E5AEB6, lp_e68980E99C80E58D87E7BAA72, c_techCountCompleteOnly) >= 1) && (TechTreeUpgradeCount(lp_e78EA9E5AEB6, lp_e68980E99C80E58D87E7BAA73, c_techCountCompleteOnly) >= 1)))) {
            lv_e68980E99C80E69DA1E4BBB6 = StringToText("");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_NEXS_3EED7BC8", "A", StringExternal("Param/Value/lib_NEXS_CAE5B945"));
            TextExpressionSetToken("Param/Expression/lib_NEXS_3EED7BC8", "B", libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE58D87E7BAA7(lp_e78EA9E5AEB6, lp_e68980E99C80E58D87E7BAA7));
            TextExpressionSetToken("Param/Expression/lib_NEXS_3EED7BC8", "C", libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE58D87E7BAA7(lp_e78EA9E5AEB6, lp_e68980E99C80E58D87E7BAA72));
            TextExpressionSetToken("Param/Expression/lib_NEXS_3EED7BC8", "E", libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE58D87E7BAA7(lp_e78EA9E5AEB6, lp_e68980E99C80E58D87E7BAA73));
            TextExpressionSetToken("Param/Expression/lib_NEXS_3EED7BC8", "D", StringExternal("Param/Value/lib_NEXS_124984BA"));
            lv_e68980E99C80E69DA1E4BBB6 = TextExpressionAssemble("Param/Expression/lib_NEXS_3EED7BC8");
        }
    }
    if ((lp_e699B6E4BD93E79FBF <= 0) && (lp_e7949FE789A9E8B4A8 <= 0) && (lp_e793A6E696AF <= 0)) {
        lv_e8B4B9E794A8 = StringToText("");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_NEXS_074CC780", "A", libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE699B6E4BD93E79FBF(lp_e78EA9E5AEB6, lp_e699B6E4BD93E79FBF));
        TextExpressionSetToken("Param/Expression/lib_NEXS_074CC780", "B", libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE793A6E696AF(lp_e78EA9E5AEB6, lp_e793A6E696AF));
        TextExpressionSetToken("Param/Expression/lib_NEXS_074CC780", "C", libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE7949FE789A9E8B4A8(lp_e78EA9E5AEB6, lp_e7949FE789A9E8B4A8));
        lv_e8B4B9E794A8 = TextExpressionAssemble("Param/Expression/lib_NEXS_074CC780");
    }
    TextExpressionSetToken("Param/Expression/lib_NEXS_BF356CE9", "A", lp_e5908DE7A7B0);
    TextExpressionSetToken("Param/Expression/lib_NEXS_BF356CE9", "D", lv_e8B4B9E794A8);
    TextExpressionSetToken("Param/Expression/lib_NEXS_BF356CE9", "B", lv_e68980E99C80E69DA1E4BBB6);
    TextExpressionSetToken("Param/Expression/lib_NEXS_BF356CE9", "C", lp_e68F8FE8BFB0);
    libNtve_gf_SetDialogItemText(libNEXS_gv_niadra_Tooltip_Label, TextExpressionAssemble("Param/Expression/lib_NEXS_BF356CE9"), PlayerGroupSingle(lp_e78EA9E5AEB6));
}

text libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE699B6E4BD93E79FBF (int lp_e78EA9E5AEB6, int lp_e699B6E4BD93E79FBF) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_e699B6E4BD93E79FBF <= 0)) {
        return StringToText("");
    }
    else {
        if ((PlayerGetPropertyInt(lp_e78EA9E5AEB6, c_playerPropMinerals) >= lp_e699B6E4BD93E79FBF)) {
            TextExpressionSetToken("Param/Expression/lib_NEXS_C99F25A5", "A", IntToText(lp_e699B6E4BD93E79FBF));
            return (StringExternal("Param/Value/lib_NEXS_B8B6F46C") + TextExpressionAssemble("Param/Expression/lib_NEXS_C99F25A5"));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_NEXS_F2353AA4", "A", IntToText(lp_e699B6E4BD93E79FBF));
            return (StringExternal("Param/Value/lib_NEXS_E3B28B72") + TextExpressionAssemble("Param/Expression/lib_NEXS_F2353AA4"));
        }
    }
}

text libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE793A6E696AF (int lp_e78EA9E5AEB6, int lp_e793A6E696AF) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_e793A6E696AF <= 0)) {
        return StringToText("");
    }
    else {
        if ((PlayerGetPropertyInt(lp_e78EA9E5AEB6, c_playerPropVespene) >= lp_e793A6E696AF)) {
            TextExpressionSetToken("Param/Expression/lib_NEXS_D83BA3F2", "A", IntToText(lp_e793A6E696AF));
            return (StringExternal("Param/Value/lib_NEXS_AD5B2B21") + TextExpressionAssemble("Param/Expression/lib_NEXS_D83BA3F2"));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_NEXS_2C72E6DB", "A", IntToText(lp_e793A6E696AF));
            return (StringExternal("Param/Value/lib_NEXS_CBCE2B25") + TextExpressionAssemble("Param/Expression/lib_NEXS_2C72E6DB"));
        }
    }
}

text libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE7949FE789A9E8B4A8 (int lp_e78EA9E5AEB6, int lp_e7949FE789A9E8B4A8) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_e7949FE789A9E8B4A8 <= 0)) {
        return StringToText("");
    }
    else {
        if ((PlayerGetPropertyInt(lp_e78EA9E5AEB6, c_playerPropCustom) >= lp_e7949FE789A9E8B4A8)) {
            TextExpressionSetToken("Param/Expression/lib_NEXS_F4F8C5FB", "A", IntToText(lp_e7949FE789A9E8B4A8));
            return (StringExternal("Param/Value/lib_NEXS_408FD0B2") + TextExpressionAssemble("Param/Expression/lib_NEXS_F4F8C5FB"));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_NEXS_94392658", "A", IntToText(lp_e7949FE789A9E8B4A8));
            return (StringExternal("Param/Value/lib_NEXS_26EF3BEB") + TextExpressionAssemble("Param/Expression/lib_NEXS_94392658"));
        }
    }
}

text libNEXS_gf_NiadraE8B584E6BA90E8BF94E59B9EE58D87E7BAA7 (int lp_e78EA9E5AEB6, string lp_e68980E99C80E58D87E7BAA7) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_e68980E99C80E58D87E7BAA7 == null)) {
        return StringToText("");
    }
    else {
        if ((TechTreeUpgradeCount(lp_e78EA9E5AEB6, lp_e68980E99C80E58D87E7BAA7, c_techCountCompleteOnly) <= 0)) {
            TextExpressionSetToken("Param/Expression/lib_NEXS_4F7D3618", "B", StringExternal(CatalogFieldValueGet(c_gameCatalogUpgrade, lp_e68980E99C80E58D87E7BAA7, "Name", lp_e78EA9E5AEB6)));
            return TextExpressionAssemble("Param/Expression/lib_NEXS_4F7D3618");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_NEXS_010C2F67", "B", StringExternal(CatalogFieldValueGet(c_gameCatalogUpgrade, lp_e68980E99C80E58D87E7BAA7, "Name", lp_e78EA9E5AEB6)));
            return TextExpressionAssemble("Param/Expression/lib_NEXS_010C2F67");
        }
    }
}

trigger auto_libNEXS_gf_E5B0BCE99B85E5BEB7E68B89E7949FE789A9E8B4A8E8A786E8A789E58F8AE68E89E890BD_Trigger = null;
unit auto_libNEXS_gf_E5B0BCE99B85E5BEB7E68B89E7949FE789A9E8B4A8E8A786E8A789E58F8AE68E89E890BD_lp_unit;

void libNEXS_gf_E5B0BCE99B85E5BEB7E68B89E7949FE789A9E8B4A8E8A786E8A789E58F8AE68E89E890BD (unit lp_unit) {
    auto_libNEXS_gf_E5B0BCE99B85E5BEB7E68B89E7949FE789A9E8B4A8E8A786E8A789E58F8AE68E89E890BD_lp_unit = lp_unit;

    if (auto_libNEXS_gf_E5B0BCE99B85E5BEB7E68B89E7949FE789A9E8B4A8E8A786E8A789E58F8AE68E89E890BD_Trigger == null) {
        auto_libNEXS_gf_E5B0BCE99B85E5BEB7E68B89E7949FE789A9E8B4A8E8A786E8A789E58F8AE68E89E890BD_Trigger = TriggerCreate("auto_libNEXS_gf_E5B0BCE99B85E5BEB7E68B89E7949FE789A9E8B4A8E8A786E8A789E58F8AE68E89E890BD_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_E5B0BCE99B85E5BEB7E68B89E7949FE789A9E8B4A8E8A786E8A789E58F8AE68E89E890BD_Trigger, false, false);
}

bool auto_libNEXS_gf_E5B0BCE99B85E5BEB7E68B89E7949FE789A9E8B4A8E8A786E8A789E58F8AE68E89E890BD_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libNEXS_gf_E5B0BCE99B85E5BEB7E68B89E7949FE789A9E8B4A8E8A786E8A789E58F8AE68E89E890BD_lp_unit;

    // Variable Declarations
    fixed lv_supply;
    fixed lv_coefficient;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_coefficient = 1.0;

    // Implementation
    if ((UnitTypeTestAttribute(UnitGetType(lp_unit), c_unitAttributeStructure) == false) && ((UnitBehaviorEnabled(lp_unit, "ParasiticInvasion") == true) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16), UnitGetOwner(lp_unit)) == true))) {
        lv_supply = UnitTypeGetProperty(UnitGetType(lp_unit), c_unitPropSuppliesUsed);
        if (((lv_supply > 6.0) || (UnitTypeTestAttribute(UnitGetType(lp_unit), c_unitAttributeHeroic) == true) || (UnitTypeTestAttribute(UnitGetType(lp_unit), c_unitAttributeMapBoss) == true))) {
            lv_supply = 6.0;
        }

        if ((lv_supply >= 1.0)) {
            UnitCreateEffectPoint(lp_unit, (("NiadraBiomassCreateLM" + IntToString(FixedToInt(lv_supply)))), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_unit), (1.2 + (0.3 * lv_supply)))));
        }
        else {
            UnitCreateEffectPoint(lp_unit, ("NiadraBiomassCreateLM0"), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_unit), 0.75)));
            libNEXS_gv_halfSupply += 1;
        }
        Wait(0.3, c_timeAI);
        PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, c_playerPropCustom, c_playerPropOperAdd, FixedToInt((lv_coefficient * lv_supply)));
        if ((libNEXS_gv_halfSupply > 1)) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, c_playerPropCustom, c_playerPropOperAdd, (libNEXS_gv_halfSupply / 2));
            libNEXS_gv_halfSupply = ModI(libNEXS_gv_halfSupply, 2);
        }

    }

    return true;
}

void libNEXS_gf_UpdateNiadraTopBar1Cooldown () {
    // Variable Declarations
    int lv_cooldownReduction;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_cooldownReduction = MinI((UnitCount("NiadraHatchery", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) * 2), 10);
    CatalogFieldValueSet(c_gameCatalogAbil, "NiadraTopbarParasite", "Cost[" + IntToString(0) + "].Charge.TimeUse", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, IntToString((30 - lv_cooldownReduction)));
}

void libNEXS_gf_E5B0BCE99B85E5BEB7E68B89E7868AE9BDBFE585BDE5909EE599ACE58AA8E4BD9C (unit lp_targetUnit, unit lp_casterUnit) {
    // Variable Declarations
    fixed lv_supply;
    int lv_life;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitGetType(lp_casterUnit) == "NiadraUrsadon")) {
        if ((UnitTypeTestAttribute(UnitGetType(lp_targetUnit), c_unitAttributeHeroic) == false)) {
            lv_supply = UnitTypeGetProperty(UnitGetType(lp_targetUnit), c_unitPropSuppliesUsed);
        }
        else {
            lv_supply = 8.0;
        }
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "NiadraUrsadonDevourUpgrade", FixedToInt((lv_supply / 2.0)));
        lv_life = UnitGetPropertyInt(lp_targetUnit, c_unitPropLifeMax, c_unitPropNormal);
        if (((libNEXS_gv_niadraUradsonLifeInitial + lv_life) <= 7000)) {
            libNEXS_gv_niadraUradsonLifeInitial += lv_life;
        }
        else {
            libNEXS_gv_niadraUradsonLifeInitial = 7000;
        }
        libNEXS_gf_E5B0BCE99B85E5BEB7E68B89E7868AE9BDBFE585BDE695B0E580BCE8AEBEE7BDAE(1, lp_casterUnit);
    }

}

void libNEXS_gf_E5B0BCE99B85E5BEB7E68B89E7868AE9BDBFE585BDE695B0E580BCE8AEBEE7BDAE (int lp_stage, unit lp_ursadonUnit) {
    // Variable Declarations
    int lv_niadraUrsadonDevourUpgradeLevel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_niadraUrsadonDevourUpgradeLevel = TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "NiadraUrsadonDevourUpgrade", c_techCountCompleteOnly);
    if ((lp_stage == 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "NiadraUrsadonDevourUpgrade", (lv_niadraUrsadonDevourUpgradeLevel / 2));
        libNEXS_gv_niadraUradsonLifeInitial -= ((libNEXS_gv_niadraUradsonLifeInitial - 3000) / 2);
    }

    UnitSetScale(lp_ursadonUnit, (100 + (lv_niadraUrsadonDevourUpgradeLevel * 3)), (100 + (lv_niadraUrsadonDevourUpgradeLevel * 3)), (100 + (lv_niadraUrsadonDevourUpgradeLevel * 3)));
    CatalogFieldValueSet(c_gameCatalogBehavior, "NiadraTopbarUrsadonTimedLife", "Duration", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, IntToString(((60 + (4 * MinI(30, lv_niadraUrsadonDevourUpgradeLevel))) + TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "MasteryNiadraSpecialUnitTimedLifeProlong", c_techCountCompleteOnly))));
    UnitSetPropertyFixed(lp_ursadonUnit, c_unitPropLifeMax, libNEXS_gv_niadraUradsonLifeInitial);
}

trigger auto_libNEXS_gf_CovertOpsBattlecruiserAbility_Trigger = null;
unit auto_libNEXS_gf_CovertOpsBattlecruiserAbility_lp_covertOpsBattlecruiser;

void libNEXS_gf_CovertOpsBattlecruiserAbility (unit lp_covertOpsBattlecruiser) {
    auto_libNEXS_gf_CovertOpsBattlecruiserAbility_lp_covertOpsBattlecruiser = lp_covertOpsBattlecruiser;

    if (auto_libNEXS_gf_CovertOpsBattlecruiserAbility_Trigger == null) {
        auto_libNEXS_gf_CovertOpsBattlecruiserAbility_Trigger = TriggerCreate("auto_libNEXS_gf_CovertOpsBattlecruiserAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_CovertOpsBattlecruiserAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_CovertOpsBattlecruiserAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_covertOpsBattlecruiser = auto_libNEXS_gf_CovertOpsBattlecruiserAbility_lp_covertOpsBattlecruiser;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto100F0FC5_g;
    int auto100F0FC5_u;
    unit auto100F0FC5_var;
    unitgroup autoE1A14992_g;
    int autoE1A14992_u;
    unit autoE1A14992_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_covertOpsBattlecruiser) == true) && ((UnitGetOwner(lp_covertOpsBattlecruiser) == 3) || (UnitGetOwner(lp_covertOpsBattlecruiser) == 4) || (UnitGetOwner(lp_covertOpsBattlecruiser) == 5) || (UnitGetOwner(lp_covertOpsBattlecruiser) == 6) || (UnitGetOwner(lp_covertOpsBattlecruiser) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_covertOpsBattlecruiser), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_covertOpsBattlecruiser), 20.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto100F0FC5_g = lv_enemyGroup;
        auto100F0FC5_u = UnitGroupCount(auto100F0FC5_g, c_unitCountAll);
        for (;; auto100F0FC5_u -= 1) {
            auto100F0FC5_var = UnitGroupUnitFromEnd(auto100F0FC5_g, auto100F0FC5_u);
            if (auto100F0FC5_var == null) { break; }
            if ((((UnitGetPropertyFixed(auto100F0FC5_var, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(auto100F0FC5_var, c_unitPropShields, c_unitPropCurrent)) >= 200.0) || (UnitTypeTestFlag(UnitGetType(auto100F0FC5_var), c_unitFlagHero) == true) || (UnitTypeGetProperty(UnitGetType(auto100F0FC5_var), c_unitPropSuppliesUsed) >= 3.0))) {
            }
            else {
                UnitGroupRemove(lv_enemyGroup, auto100F0FC5_var);
            }
        }
        if ((UnitAbilityGetCooldown(lp_covertOpsBattlecruiser, "CovertOpsBattlecruiserYamato", "YamatoYamato2YamatoCovertOpsBattlecruiserYamato") <= 0.0)) {
            UnitIssueOrder(lp_covertOpsBattlecruiser, OrderTargetingUnit(AbilityCommand("CovertOpsBattlecruiserYamato", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_covertOpsBattlecruiser, false);
            AISetUnitSuicide(lp_covertOpsBattlecruiser, true);
        }

        lv_enemyGroup = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_covertOpsBattlecruiser), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_covertOpsBattlecruiser), 10.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoE1A14992_g = lv_enemyGroup;
        autoE1A14992_u = UnitGroupCount(autoE1A14992_g, c_unitCountAll);
        for (;; autoE1A14992_u -= 1) {
            autoE1A14992_var = UnitGroupUnitFromEnd(autoE1A14992_g, autoE1A14992_u);
            if (autoE1A14992_var == null) { break; }
            if ((UnitHasBehavior2(autoE1A14992_var, "CovertOpsBattlecruiserHyperjumpLightningStorm") == true)) {
                UnitGroupRemove(lv_enemyGroup, autoE1A14992_var);
            }

        }
        if ((UnitAbilityGetCooldown(lp_covertOpsBattlecruiser, "CovertOpsBattlecruiserHyperjump", "Abil/CovertOpsBattlecruiserHyperjump") <= 0.0) && (UnitGetPropertyFixed(lp_covertOpsBattlecruiser, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
            UnitIssueOrder(lp_covertOpsBattlecruiser, OrderTargetingPoint(AbilityCommand("CovertOpsBattlecruiserHyperjump", 0), AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 6.0, UnitGetPosition(lp_covertOpsBattlecruiser), 10.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_covertOpsBattlecruiser, false);
            AISetUnitSuicide(lp_covertOpsBattlecruiser, true);
        }
        else {
            if ((UnitAbilityGetCooldown(lp_covertOpsBattlecruiser, "CovertOpsBattlecruiserHyperjump", "Abil/CovertOpsBattlecruiserHyperjump") <= 0.0) && (UnitGetPropertyFixed(lp_covertOpsBattlecruiser, c_unitPropLifePercent, c_unitPropCurrent) >= 0.33)) {
                UnitIssueOrder(lp_covertOpsBattlecruiser, OrderTargetingPoint(AbilityCommand("CovertOpsBattlecruiserHyperjump", 0), AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 6.0, UnitGetPosition(lp_covertOpsBattlecruiser), 10.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_covertOpsBattlecruiser, false);
                AISetUnitSuicide(lp_covertOpsBattlecruiser, true);
            }
            else {
                if ((UnitAbilityGetCooldown(lp_covertOpsBattlecruiser, "CovertOpsBattlecruiserHyperjump", "Abil/CovertOpsBattlecruiserHyperjump") <= 0.0)) {
                    UnitIssueOrder(lp_covertOpsBattlecruiser, OrderTargetingPoint(AbilityCommand("CovertOpsBattlecruiserHyperjump", 0), AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 6.0, UnitGetPosition(lp_covertOpsBattlecruiser), 10.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_covertOpsBattlecruiser, false);
                    AISetUnitSuicide(lp_covertOpsBattlecruiser, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_CovertOpsGhostAbility1_Trigger = null;
unit auto_libNEXS_gf_CovertOpsGhostAbility1_lp_covertOpsGhost;

void libNEXS_gf_CovertOpsGhostAbility1 (unit lp_covertOpsGhost) {
    auto_libNEXS_gf_CovertOpsGhostAbility1_lp_covertOpsGhost = lp_covertOpsGhost;

    if (auto_libNEXS_gf_CovertOpsGhostAbility1_Trigger == null) {
        auto_libNEXS_gf_CovertOpsGhostAbility1_Trigger = TriggerCreate("auto_libNEXS_gf_CovertOpsGhostAbility1_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_CovertOpsGhostAbility1_Trigger, false, false);
}

bool auto_libNEXS_gf_CovertOpsGhostAbility1_TriggerFunc (bool testConds, bool runActions) {
    unit lp_covertOpsGhost = auto_libNEXS_gf_CovertOpsGhostAbility1_lp_covertOpsGhost;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_covertOpsGhost) == true) && ((UnitGetOwner(lp_covertOpsGhost) == 3) || (UnitGetOwner(lp_covertOpsGhost) == 4) || (UnitGetOwner(lp_covertOpsGhost) == 5) || (UnitGetOwner(lp_covertOpsGhost) == 6) || (UnitGetOwner(lp_covertOpsGhost) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_covertOpsGhost), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_covertOpsGhost), 10.0), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitAbilityGetCooldown(lp_covertOpsGhost, "CovertOpsGhostSnipe", "Abil/Snipe") <= 0.0) && (UnitGetPropertyFixed(lp_covertOpsGhost, c_unitPropEnergy, c_unitPropCurrent) >= 25.0)) {
            UnitIssueOrder(lp_covertOpsGhost, OrderTargetingUnit(AbilityCommand("CovertOpsGhostSnipe", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_covertOpsGhost, false);
            AISetUnitSuicide(lp_covertOpsGhost, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_CovertOpsGhostAbility2_Trigger = null;
unit auto_libNEXS_gf_CovertOpsGhostAbility2_lp_covertOpsGhost;

void libNEXS_gf_CovertOpsGhostAbility2 (unit lp_covertOpsGhost) {
    auto_libNEXS_gf_CovertOpsGhostAbility2_lp_covertOpsGhost = lp_covertOpsGhost;

    if (auto_libNEXS_gf_CovertOpsGhostAbility2_Trigger == null) {
        auto_libNEXS_gf_CovertOpsGhostAbility2_Trigger = TriggerCreate("auto_libNEXS_gf_CovertOpsGhostAbility2_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_CovertOpsGhostAbility2_Trigger, false, false);
}

bool auto_libNEXS_gf_CovertOpsGhostAbility2_TriggerFunc (bool testConds, bool runActions) {
    unit lp_covertOpsGhost = auto_libNEXS_gf_CovertOpsGhostAbility2_lp_covertOpsGhost;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto708033EC_g;
    int auto708033EC_u;
    unit auto708033EC_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_covertOpsGhost) == true) && ((UnitGetOwner(lp_covertOpsGhost) == 3) || (UnitGetOwner(lp_covertOpsGhost) == 4) || (UnitGetOwner(lp_covertOpsGhost) == 5) || (UnitGetOwner(lp_covertOpsGhost) == 6) || (UnitGetOwner(lp_covertOpsGhost) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_covertOpsGhost), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_covertOpsGhost), 12.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto708033EC_g = lv_enemyGroup;
        auto708033EC_u = UnitGroupCount(auto708033EC_g, c_unitCountAll);
        for (;; auto708033EC_u -= 1) {
            auto708033EC_var = UnitGroupUnitFromEnd(auto708033EC_g, auto708033EC_u);
            if (auto708033EC_var == null) { break; }
            if (((UnitGetPropertyFixed(auto708033EC_var, c_unitPropEnergy, c_unitPropCurrent) >= 25.0) || (UnitGetPropertyFixed(auto708033EC_var, c_unitPropShields, c_unitPropCurrent) >= 25.0))) {
            }
            else {
                UnitGroupRemove(lv_enemyGroup, auto708033EC_var);
            }
        }
        if ((UnitAbilityGetCooldown(lp_covertOpsGhost, "CovertOpsGhostEMP", "Abil/CovertOpsGhostEMP") <= 0.0) && (UnitGetPropertyFixed(lp_covertOpsGhost, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_covertOpsGhost, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
            UnitIssueOrder(lp_covertOpsGhost, OrderTargetingPoint(AbilityCommand("CovertOpsGhostEMP", 0), AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 2.0, UnitGetPosition(lp_covertOpsGhost), 10.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_covertOpsGhost, false);
            AISetUnitSuicide(lp_covertOpsGhost, true);
        }
        else {
            if ((UnitAbilityGetCooldown(lp_covertOpsGhost, "CovertOpsGhostEMP", "Abil/CovertOpsGhostEMP") <= 0.0) && (UnitGetPropertyFixed(lp_covertOpsGhost, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_covertOpsGhost, c_unitPropLifePercent, c_unitPropCurrent) >= 0.33)) {
                UnitIssueOrder(lp_covertOpsGhost, OrderTargetingPoint(AbilityCommand("CovertOpsGhostEMP", 0), AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 2.0, UnitGetPosition(lp_covertOpsGhost), 10.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_covertOpsGhost, false);
                AISetUnitSuicide(lp_covertOpsGhost, true);
            }
            else {
                if ((UnitAbilityGetCooldown(lp_covertOpsGhost, "CovertOpsGhostEMP", "Abil/CovertOpsGhostEMP") <= 0.0) && (UnitGetPropertyFixed(lp_covertOpsGhost, c_unitPropEnergy, c_unitPropCurrent) >= 75.0)) {
                    UnitIssueOrder(lp_covertOpsGhost, OrderTargetingPoint(AbilityCommand("CovertOpsGhostEMP", 0), AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 2.0, UnitGetPosition(lp_covertOpsGhost), 10.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_covertOpsGhost, false);
                    AISetUnitSuicide(lp_covertOpsGhost, true);
                }

            }
        }
        lv_enemyGroup = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_covertOpsGhost), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_covertOpsGhost), 10.0), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitAbilityGetCooldown(lp_covertOpsGhost, "CovertOpsGhostSnipe", "Abil/Snipe") <= 0.0) && (UnitGetPropertyFixed(lp_covertOpsGhost, c_unitPropEnergy, c_unitPropCurrent) >= 25.0)) {
            UnitIssueOrder(lp_covertOpsGhost, OrderTargetingUnit(AbilityCommand("CovertOpsGhostSnipe", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_covertOpsGhost, false);
            AISetUnitSuicide(lp_covertOpsGhost, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_CovertOpsGhostAbility3_Trigger = null;
unit auto_libNEXS_gf_CovertOpsGhostAbility3_lp_covertOpsGhost;

void libNEXS_gf_CovertOpsGhostAbility3 (unit lp_covertOpsGhost) {
    auto_libNEXS_gf_CovertOpsGhostAbility3_lp_covertOpsGhost = lp_covertOpsGhost;

    if (auto_libNEXS_gf_CovertOpsGhostAbility3_Trigger == null) {
        auto_libNEXS_gf_CovertOpsGhostAbility3_Trigger = TriggerCreate("auto_libNEXS_gf_CovertOpsGhostAbility3_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_CovertOpsGhostAbility3_Trigger, false, false);
}

bool auto_libNEXS_gf_CovertOpsGhostAbility3_TriggerFunc (bool testConds, bool runActions) {
    unit lp_covertOpsGhost = auto_libNEXS_gf_CovertOpsGhostAbility3_lp_covertOpsGhost;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup autoB96202DF_g;
    int autoB96202DF_u;
    unit autoB96202DF_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_covertOpsGhost) == true) && ((UnitGetOwner(lp_covertOpsGhost) == 3) || (UnitGetOwner(lp_covertOpsGhost) == 4) || (UnitGetOwner(lp_covertOpsGhost) == 5) || (UnitGetOwner(lp_covertOpsGhost) == 6) || (UnitGetOwner(lp_covertOpsGhost) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_covertOpsGhost), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_covertOpsGhost), 12.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoB96202DF_g = lv_enemyGroup;
        autoB96202DF_u = UnitGroupCount(autoB96202DF_g, c_unitCountAll);
        for (;; autoB96202DF_u -= 1) {
            autoB96202DF_var = UnitGroupUnitFromEnd(autoB96202DF_g, autoB96202DF_u);
            if (autoB96202DF_var == null) { break; }
            if (((UnitGetPropertyFixed(autoB96202DF_var, c_unitPropEnergy, c_unitPropCurrent) >= 25.0) || (UnitGetPropertyFixed(autoB96202DF_var, c_unitPropShields, c_unitPropCurrent) >= 25.0) || (UnitTypeTestAttribute(UnitGetType(autoB96202DF_var), c_unitAttributeMechanical) == true))) {
            }
            else {
                UnitGroupRemove(lv_enemyGroup, autoB96202DF_var);
            }
        }
        if ((UnitAbilityGetCooldown(lp_covertOpsGhost, "CovertOpsGhostEMP", "Abil/CovertOpsGhostEMP") <= 0.0) && (UnitGetPropertyFixed(lp_covertOpsGhost, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_covertOpsGhost, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
            UnitIssueOrder(lp_covertOpsGhost, OrderTargetingPoint(AbilityCommand("CovertOpsGhostEMP", 0), AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 2.0, UnitGetPosition(lp_covertOpsGhost), 10.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_covertOpsGhost, false);
            AISetUnitSuicide(lp_covertOpsGhost, true);
        }
        else {
            if ((UnitAbilityGetCooldown(lp_covertOpsGhost, "CovertOpsGhostEMP", "Abil/CovertOpsGhostEMP") <= 0.0) && (UnitGetPropertyFixed(lp_covertOpsGhost, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_covertOpsGhost, c_unitPropLifePercent, c_unitPropCurrent) >= 0.33)) {
                UnitIssueOrder(lp_covertOpsGhost, OrderTargetingPoint(AbilityCommand("CovertOpsGhostEMP", 0), AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 2.0, UnitGetPosition(lp_covertOpsGhost), 10.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_covertOpsGhost, false);
                AISetUnitSuicide(lp_covertOpsGhost, true);
            }
            else {
                if ((UnitAbilityGetCooldown(lp_covertOpsGhost, "CovertOpsGhostEMP", "Abil/CovertOpsGhostEMP") <= 0.0) && (UnitGetPropertyFixed(lp_covertOpsGhost, c_unitPropEnergy, c_unitPropCurrent) >= 75.0)) {
                    UnitIssueOrder(lp_covertOpsGhost, OrderTargetingPoint(AbilityCommand("CovertOpsGhostEMP", 0), AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 2.0, UnitGetPosition(lp_covertOpsGhost), 10.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_covertOpsGhost, false);
                    AISetUnitSuicide(lp_covertOpsGhost, true);
                }

            }
        }
        lv_enemyGroup = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_covertOpsGhost), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_covertOpsGhost), 10.0), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitAbilityGetCooldown(lp_covertOpsGhost, "CovertOpsGhostDeathSnipe", "Abil/Snipe") <= 0.0) && (UnitGetPropertyFixed(lp_covertOpsGhost, c_unitPropEnergy, c_unitPropCurrent) >= 25.0)) {
            UnitIssueOrder(lp_covertOpsGhost, OrderTargetingUnit(AbilityCommand("CovertOpsGhostDeathSnipe", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_covertOpsGhost, false);
            AISetUnitSuicide(lp_covertOpsGhost, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_CovertOpsLiberatorAbility_Trigger = null;
unit auto_libNEXS_gf_CovertOpsLiberatorAbility_lp_covertOpsLiberator;

void libNEXS_gf_CovertOpsLiberatorAbility (unit lp_covertOpsLiberator) {
    auto_libNEXS_gf_CovertOpsLiberatorAbility_lp_covertOpsLiberator = lp_covertOpsLiberator;

    if (auto_libNEXS_gf_CovertOpsLiberatorAbility_Trigger == null) {
        auto_libNEXS_gf_CovertOpsLiberatorAbility_Trigger = TriggerCreate("auto_libNEXS_gf_CovertOpsLiberatorAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_CovertOpsLiberatorAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_CovertOpsLiberatorAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_covertOpsLiberator = auto_libNEXS_gf_CovertOpsLiberatorAbility_lp_covertOpsLiberator;

    // Variable Declarations
    unitgroup lv_enemyGroundGroup;
    unitgroup lv_targetGroup;

    // Automatic Variable Declarations
    unitgroup auto95185CE4_g;
    int auto95185CE4_u;
    unit auto95185CE4_var;
    unitgroup auto38BEFC3B_g;
    int auto38BEFC3B_u;
    unit auto38BEFC3B_var;

    // Variable Initialization
    lv_enemyGroundGroup = UnitGroupEmpty();
    lv_targetGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_covertOpsLiberator) == true) && ((UnitGetOwner(lp_covertOpsLiberator) == 3) || (UnitGetOwner(lp_covertOpsLiberator) == 4) || (UnitGetOwner(lp_covertOpsLiberator) == 5) || (UnitGetOwner(lp_covertOpsLiberator) == 6) || (UnitGetOwner(lp_covertOpsLiberator) == 7))) {
        lv_enemyGroundGroup = UnitGroupAlliance(UnitGetOwner(lp_covertOpsLiberator), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_covertOpsLiberator), 13.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto95185CE4_g = lv_enemyGroundGroup;
        auto95185CE4_u = UnitGroupCount(auto95185CE4_g, c_unitCountAll);
        for (;; auto95185CE4_u -= 1) {
            auto95185CE4_var = UnitGroupUnitFromEnd(auto95185CE4_g, auto95185CE4_u);
            if (auto95185CE4_var == null) { break; }
            if ((UnitIsAlive(auto95185CE4_var) == false)) {
                UnitGroupRemove(lv_enemyGroundGroup, auto95185CE4_var);
            }

        }
        lv_targetGroup = lv_enemyGroundGroup;
        if ((UnitWeaponGet(lp_covertOpsLiberator, 1) == "CovertOpsLiberatorNemesisLaunchers") && (UnitGroupCount(lv_enemyGroundGroup, c_unitCountAlive) > 0)) {
            UnitIssueOrder(lp_covertOpsLiberator, OrderTargetingPoint(AbilityCommand("CovertOpsLiberatorAGTarget", 0), AIBestTargetPoint(lv_enemyGroundGroup, 1, 0, 0.0, 5.0, UnitGetPosition(lp_covertOpsLiberator), 9.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_covertOpsLiberator, false);
            AISetUnitSuicide(lp_covertOpsLiberator, true);
        }
        else {
            if ((UnitWeaponGet(lp_covertOpsLiberator, 1) == "CovertOpsLiberatorRailgun")) {
                auto38BEFC3B_g = lv_targetGroup;
                auto38BEFC3B_u = UnitGroupCount(auto38BEFC3B_g, c_unitCountAll);
                for (;; auto38BEFC3B_u -= 1) {
                    auto38BEFC3B_var = UnitGroupUnitFromEnd(auto38BEFC3B_g, auto38BEFC3B_u);
                    if (auto38BEFC3B_var == null) { break; }
                    if ((UnitInRangeAndAbleToAttackTarget(lp_covertOpsLiberator, auto38BEFC3B_var) == true)) {
                    }
                    else {
                        UnitGroupRemove(lv_targetGroup, auto38BEFC3B_var);
                    }
                }
                if ((UnitGroupCount(lv_targetGroup, c_unitCountAlive) == 0)) {
                    UnitIssueOrder(lp_covertOpsLiberator, Order(AbilityCommand("CovertOpsLiberatorAATarget", 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_covertOpsLiberator, false);
                    AISetUnitSuicide(lp_covertOpsLiberator, true);
                }

            }

        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_CovertOpsRavenAbility_Trigger = null;
unit auto_libNEXS_gf_CovertOpsRavenAbility_lp_covertOpsRaven;

void libNEXS_gf_CovertOpsRavenAbility (unit lp_covertOpsRaven) {
    auto_libNEXS_gf_CovertOpsRavenAbility_lp_covertOpsRaven = lp_covertOpsRaven;

    if (auto_libNEXS_gf_CovertOpsRavenAbility_Trigger == null) {
        auto_libNEXS_gf_CovertOpsRavenAbility_Trigger = TriggerCreate("auto_libNEXS_gf_CovertOpsRavenAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_CovertOpsRavenAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_CovertOpsRavenAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_covertOpsRaven = auto_libNEXS_gf_CovertOpsRavenAbility_lp_covertOpsRaven;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup autoAC23E383_g;
    int autoAC23E383_u;
    unit autoAC23E383_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_covertOpsRaven) == true) && ((UnitGetOwner(lp_covertOpsRaven) == 3) || (UnitGetOwner(lp_covertOpsRaven) == 4) || (UnitGetOwner(lp_covertOpsRaven) == 5) || (UnitGetOwner(lp_covertOpsRaven) == 6) || (UnitGetOwner(lp_covertOpsRaven) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_covertOpsRaven), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_covertOpsRaven), 12.4), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoAC23E383_g = lv_enemyGroup;
        autoAC23E383_u = UnitGroupCount(autoAC23E383_g, c_unitCountAll);
        for (;; autoAC23E383_u -= 1) {
            autoAC23E383_var = UnitGroupUnitFromEnd(autoAC23E383_g, autoAC23E383_u);
            if (autoAC23E383_var == null) { break; }
            if ((UnitHasBehavior2(autoAC23E383_var, "CovertOpsRavenNoxiousSeekerMissileImpact") == true)) {
                UnitGroupRemove(lv_enemyGroup, autoAC23E383_var);
            }

        }
        if ((UnitAbilityGetCooldown(lp_covertOpsRaven, "CovertOpsRavenNoxiousSeekerMissile", "Abil/CovertOpsRavenNoxiousSeekerMissile") <= 0.0)) {
            UnitIssueOrder(lp_covertOpsRaven, OrderTargetingUnit(AbilityCommand("CovertOpsRavenNoxiousSeekerMissile", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_covertOpsRaven, false);
            AISetUnitSuicide(lp_covertOpsRaven, true);
        }

        lv_enemyGroup = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_covertOpsRaven), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_covertOpsRaven), 11.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitAbilityGetCooldown(lp_covertOpsRaven, "CovertOpsRavenBuildAutoTurret", "RavenBuildLink\"") <= 0.0)) {
            UnitIssueOrder(lp_covertOpsRaven, OrderTargetingPoint(AbilityCommand("CovertOpsRavenBuildAutoTurret", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_covertOpsRaven), 11.0))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_covertOpsRaven, false);
            AISetUnitSuicide(lp_covertOpsRaven, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_CovertOpsTankAbility_Trigger = null;
unit auto_libNEXS_gf_CovertOpsTankAbility_lp_covertOpsTank;

void libNEXS_gf_CovertOpsTankAbility (unit lp_covertOpsTank) {
    auto_libNEXS_gf_CovertOpsTankAbility_lp_covertOpsTank = lp_covertOpsTank;

    if (auto_libNEXS_gf_CovertOpsTankAbility_Trigger == null) {
        auto_libNEXS_gf_CovertOpsTankAbility_Trigger = TriggerCreate("auto_libNEXS_gf_CovertOpsTankAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_CovertOpsTankAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_CovertOpsTankAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_covertOpsTank = auto_libNEXS_gf_CovertOpsTankAbility_lp_covertOpsTank;

    // Variable Declarations
    unitgroup lv_enemyRangedGroup;
    unitgroup lv_enemyMeleeGroup;

    // Automatic Variable Declarations
    unitgroup auto76586B6A_g;
    int auto76586B6A_u;
    unit auto76586B6A_var;

    // Variable Initialization
    lv_enemyRangedGroup = UnitGroupEmpty();
    lv_enemyMeleeGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_covertOpsTank) == true) && ((UnitGetOwner(lp_covertOpsTank) == 3) || (UnitGetOwner(lp_covertOpsTank) == 4) || (UnitGetOwner(lp_covertOpsTank) == 5) || (UnitGetOwner(lp_covertOpsTank) == 6) || (UnitGetOwner(lp_covertOpsTank) == 7))) {
        lv_enemyRangedGroup = UnitGroupAlliance(UnitGetOwner(lp_covertOpsTank), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_covertOpsTank), libNEXS_gv_covertOpsTankRange), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        lv_enemyMeleeGroup = UnitGroupAlliance(UnitGetOwner(lp_covertOpsTank), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_covertOpsTank), 2.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto76586B6A_g = lv_enemyRangedGroup;
        auto76586B6A_u = UnitGroupCount(auto76586B6A_g, c_unitCountAll);
        for (;; auto76586B6A_u -= 1) {
            auto76586B6A_var = UnitGroupUnitFromEnd(auto76586B6A_g, auto76586B6A_u);
            if (auto76586B6A_var == null) { break; }
            if ((RegionContainsPoint(RegionCircle(UnitGetPosition(lp_covertOpsTank), 2.0), UnitGetPosition(auto76586B6A_var)) == true)) {
                UnitGroupRemove(lv_enemyRangedGroup, auto76586B6A_var);
            }

        }
        if ((UnitWeaponGet(lp_covertOpsTank, 1) == "CovertOpsSiegeTank90mmCannons") && (UnitGroupCount(lv_enemyRangedGroup, c_unitCountAlive) >= 1)) {
            UnitIssueOrder(lp_covertOpsTank, Order(AbilityCommand("CovertOpsSiegeTankSiege", 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_covertOpsTank, false);
            AISetUnitSuicide(lp_covertOpsTank, true);
            UnitIssueOrder(lp_covertOpsTank, OrderTargetingPoint(AbilityCommand("CovertOpsSiegeTankSpiderMines", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_covertOpsTank), 5.5))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_covertOpsTank, false);
            AISetUnitSuicide(lp_covertOpsTank, true);
        }
        else {
            if ((UnitWeaponGet(lp_covertOpsTank, 1) == "CovertOpsSiegeTankArcliteShockCannon") && (UnitGroupCount(lv_enemyRangedGroup, c_unitCountAlive) == 0) && (UnitGroupCount(lv_enemyMeleeGroup, c_unitCountAlive) >= 1)) {
                UnitIssueOrder(lp_covertOpsTank, Order(AbilityCommand("CovertOpsSiegeTankUnsiege", 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_covertOpsTank, false);
                AISetUnitSuicide(lp_covertOpsTank, true);
                UnitIssueOrder(lp_covertOpsTank, OrderTargetingPoint(AbilityCommand("CovertOpsSiegeTankSpiderMines", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_covertOpsTank), 5.5))), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_covertOpsTank, false);
                AISetUnitSuicide(lp_covertOpsTank, true);
            }
            else {
                if (((UnitWeaponGet(lp_covertOpsTank, 1) == "CovertOpsSiegeTankArcliteShockCannon") && (UnitGroupCount(lv_enemyRangedGroup, c_unitCountAlive) == 0) && (UnitGroupCount(lv_enemyMeleeGroup, c_unitCountAlive) == 0))) {
                    UnitIssueOrder(lp_covertOpsTank, Order(AbilityCommand("CovertOpsSiegeTankUnsiege", 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_covertOpsTank, false);
                    AISetUnitSuicide(lp_covertOpsTank, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_MobiusBansheeAbility_Trigger = null;
unit auto_libNEXS_gf_MobiusBansheeAbility_lp_mobiusBanshee;

void libNEXS_gf_MobiusBansheeAbility (unit lp_mobiusBanshee) {
    auto_libNEXS_gf_MobiusBansheeAbility_lp_mobiusBanshee = lp_mobiusBanshee;

    if (auto_libNEXS_gf_MobiusBansheeAbility_Trigger == null) {
        auto_libNEXS_gf_MobiusBansheeAbility_Trigger = TriggerCreate("auto_libNEXS_gf_MobiusBansheeAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_MobiusBansheeAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_MobiusBansheeAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mobiusBanshee = auto_libNEXS_gf_MobiusBansheeAbility_lp_mobiusBanshee;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto44B8AD71_g;
    int auto44B8AD71_u;
    unit auto44B8AD71_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mobiusBanshee) == true) && ((UnitGetOwner(lp_mobiusBanshee) == 3) || (UnitGetOwner(lp_mobiusBanshee) == 4) || (UnitGetOwner(lp_mobiusBanshee) == 5) || (UnitGetOwner(lp_mobiusBanshee) == 6) || (UnitGetOwner(lp_mobiusBanshee) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusBanshee), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusBanshee), 16.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto44B8AD71_g = lv_enemyGroup;
        auto44B8AD71_u = UnitGroupCount(auto44B8AD71_g, c_unitCountAll);
        for (;; auto44B8AD71_u -= 1) {
            auto44B8AD71_var = UnitGroupUnitFromEnd(auto44B8AD71_g, auto44B8AD71_u);
            if (auto44B8AD71_var == null) { break; }
            if ((UnitInRangeAndAbleToAttackTarget(auto44B8AD71_var, lp_mobiusBanshee) == true)) {
            }
            else {
                UnitGroupRemove(lv_enemyGroup, auto44B8AD71_var);
            }
        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitHasBehavior2(lp_mobiusBanshee, "MobiusBansheeCloak") == false)) {
            UnitIssueOrder(lp_mobiusBanshee, Order(AbilityCommand("MobiusBansheeCloak", 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusBanshee, false);
            AISetUnitSuicide(lp_mobiusBanshee, true);
        }
        else {
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) == 0) && (UnitHasBehavior2(lp_mobiusBanshee, "MobiusBansheeCloak") == true) && (UnitGetPropertyFixed(lp_mobiusBanshee, c_unitPropEnergy, c_unitPropCurrent) >= 50.0)) {
                UnitIssueOrder(lp_mobiusBanshee, Order(AbilityCommand("MobiusBansheeCloak", 1)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_mobiusBanshee, false);
                AISetUnitSuicide(lp_mobiusBanshee, true);
            }

        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_MobiusBattlecruiserAbility_Trigger = null;
unit auto_libNEXS_gf_MobiusBattlecruiserAbility_lp_mobiusBattlecruiser;

void libNEXS_gf_MobiusBattlecruiserAbility (unit lp_mobiusBattlecruiser) {
    auto_libNEXS_gf_MobiusBattlecruiserAbility_lp_mobiusBattlecruiser = lp_mobiusBattlecruiser;

    if (auto_libNEXS_gf_MobiusBattlecruiserAbility_Trigger == null) {
        auto_libNEXS_gf_MobiusBattlecruiserAbility_Trigger = TriggerCreate("auto_libNEXS_gf_MobiusBattlecruiserAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_MobiusBattlecruiserAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_MobiusBattlecruiserAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mobiusBattlecruiser = auto_libNEXS_gf_MobiusBattlecruiserAbility_lp_mobiusBattlecruiser;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup autoDC91197A_g;
    int autoDC91197A_u;
    unit autoDC91197A_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mobiusBattlecruiser) == true) && ((UnitGetOwner(lp_mobiusBattlecruiser) == 3) || (UnitGetOwner(lp_mobiusBattlecruiser) == 4) || (UnitGetOwner(lp_mobiusBattlecruiser) == 5) || (UnitGetOwner(lp_mobiusBattlecruiser) == 6) || (UnitGetOwner(lp_mobiusBattlecruiser) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusBattlecruiser), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusBattlecruiser), 10.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoDC91197A_g = lv_enemyGroup;
        autoDC91197A_u = UnitGroupCount(autoDC91197A_g, c_unitCountAll);
        for (;; autoDC91197A_u -= 1) {
            autoDC91197A_var = UnitGroupUnitFromEnd(autoDC91197A_g, autoDC91197A_u);
            if (autoDC91197A_var == null) { break; }
            if ((((UnitGetPropertyFixed(autoDC91197A_var, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(autoDC91197A_var, c_unitPropShields, c_unitPropCurrent)) >= 200.0) || (UnitTypeTestFlag(UnitGetType(autoDC91197A_var), c_unitFlagHero) == true) || (UnitTypeGetProperty(UnitGetType(autoDC91197A_var), c_unitPropSuppliesUsed) >= 3.0))) {
            }
            else {
                UnitGroupRemove(lv_enemyGroup, autoDC91197A_var);
            }
        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusBattlecruiser, "MobiusBattlecruiserYamato", "(YamatoYamato2YamatoMobiusBattlecruiserYamato)") <= 0.0) && (UnitGetPropertyFixed(lp_mobiusBattlecruiser, c_unitPropEnergy, c_unitPropCurrent) >= 50.0)) {
            UnitIssueOrder(lp_mobiusBattlecruiser, OrderTargetingUnit(AbilityCommand("MobiusBattlecruiserYamato", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusBattlecruiser, false);
            AISetUnitSuicide(lp_mobiusBattlecruiser, true);
        }

        lv_enemyGroup = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusBattlecruiser), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusBattlecruiser), 10.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusBattlecruiser, "MobiusBattlecruiserHyperjump", "Abil/MobiusBattlecruiserHyperjump") <= 0.0)) {
            UnitIssueOrder(lp_mobiusBattlecruiser, OrderTargetingPoint(AbilityCommand("MobiusBattlecruiserHyperjump", 0), AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 1.5, UnitGetPosition(lp_mobiusBattlecruiser), 10.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusBattlecruiser, false);
            AISetUnitSuicide(lp_mobiusBattlecruiser, true);
        }

        lv_enemyGroup = null;
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_MobiusMarauderAbility_Trigger = null;
unit auto_libNEXS_gf_MobiusMarauderAbility_lp_mobiusMarauder;

void libNEXS_gf_MobiusMarauderAbility (unit lp_mobiusMarauder) {
    auto_libNEXS_gf_MobiusMarauderAbility_lp_mobiusMarauder = lp_mobiusMarauder;

    if (auto_libNEXS_gf_MobiusMarauderAbility_Trigger == null) {
        auto_libNEXS_gf_MobiusMarauderAbility_Trigger = TriggerCreate("auto_libNEXS_gf_MobiusMarauderAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_MobiusMarauderAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_MobiusMarauderAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mobiusMarauder = auto_libNEXS_gf_MobiusMarauderAbility_lp_mobiusMarauder;

    // Variable Declarations
    unitgroup lv_enemyGroup;
    unitgroup lv_enemyHeroGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();
    lv_enemyHeroGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mobiusMarauder) == true) && ((UnitGetOwner(lp_mobiusMarauder) == 3) || (UnitGetOwner(lp_mobiusMarauder) == 4) || (UnitGetOwner(lp_mobiusMarauder) == 5) || (UnitGetOwner(lp_mobiusMarauder) == 6) || (UnitGetOwner(lp_mobiusMarauder) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusMarauder), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusMarauder), 6.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitHasBehavior2(lp_mobiusMarauder, "MobiusMarauderStimpack") == false) && (UnitGetPropertyFixed(lp_mobiusMarauder, c_unitPropLife, c_unitPropCurrent) >= 30.0)) {
            UnitIssueOrder(lp_mobiusMarauder, Order(AbilityCommand("MobiusMarauderStimpack1", 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusMarauder, false);
            AISetUnitSuicide(lp_mobiusMarauder, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_MobiusMedicAbility_Trigger = null;
unit auto_libNEXS_gf_MobiusMedicAbility_lp_mobiusMedic;

void libNEXS_gf_MobiusMedicAbility (unit lp_mobiusMedic) {
    auto_libNEXS_gf_MobiusMedicAbility_lp_mobiusMedic = lp_mobiusMedic;

    if (auto_libNEXS_gf_MobiusMedicAbility_Trigger == null) {
        auto_libNEXS_gf_MobiusMedicAbility_Trigger = TriggerCreate("auto_libNEXS_gf_MobiusMedicAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_MobiusMedicAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_MobiusMedicAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mobiusMedic = auto_libNEXS_gf_MobiusMedicAbility_lp_mobiusMedic;

    // Variable Declarations
    unitgroup lv_enemyGroup;
    unitgroup lv_enemyHeroGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();
    lv_enemyHeroGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mobiusMedic) == true) && ((UnitGetOwner(lp_mobiusMedic) == 3) || (UnitGetOwner(lp_mobiusMedic) == 4) || (UnitGetOwner(lp_mobiusMedic) == 5) || (UnitGetOwner(lp_mobiusMedic) == 6) || (UnitGetOwner(lp_mobiusMedic) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusMedic), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusMedic), 12.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        lv_enemyHeroGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusMedic), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusMedic), 12.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if (((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 2) || (UnitGroupCount(lv_enemyHeroGroup, c_unitCountAlive) >= 1))) {
            UnitIssueOrder(lp_mobiusMedic, OrderTargetingPoint(AbilityCommand("MobiusWarpInReinforcements", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_mobiusMedic), 3.0))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusMedic, false);
            AISetUnitSuicide(lp_mobiusMedic, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_MobiusRavenAbility_Trigger = null;
unit auto_libNEXS_gf_MobiusRavenAbility_lp_mobiusRaven;

void libNEXS_gf_MobiusRavenAbility (unit lp_mobiusRaven) {
    auto_libNEXS_gf_MobiusRavenAbility_lp_mobiusRaven = lp_mobiusRaven;

    if (auto_libNEXS_gf_MobiusRavenAbility_Trigger == null) {
        auto_libNEXS_gf_MobiusRavenAbility_Trigger = TriggerCreate("auto_libNEXS_gf_MobiusRavenAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_MobiusRavenAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_MobiusRavenAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mobiusRaven = auto_libNEXS_gf_MobiusRavenAbility_lp_mobiusRaven;

    // Variable Declarations
    unitgroup lv_enemyGroup;
    unitgroup lv_alliedGroup;
    point lv_targetPoint;

    // Automatic Variable Declarations
    unitgroup autoCBB35A38_g;
    int autoCBB35A38_u;
    unit autoCBB35A38_var;
    unitgroup auto856B18FB_g;
    int auto856B18FB_u;
    unit auto856B18FB_var;
    unitgroup autoCA387599_g;
    int autoCA387599_u;
    unit autoCA387599_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();
    lv_alliedGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mobiusRaven) == true) && ((UnitGetOwner(lp_mobiusRaven) == 3) || (UnitGetOwner(lp_mobiusRaven) == 4) || (UnitGetOwner(lp_mobiusRaven) == 5) || (UnitGetOwner(lp_mobiusRaven) == 6) || (UnitGetOwner(lp_mobiusRaven) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusRaven), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusRaven), 12.4), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoCBB35A38_g = lv_enemyGroup;
        autoCBB35A38_u = UnitGroupCount(autoCBB35A38_g, c_unitCountAll);
        for (;; autoCBB35A38_u -= 1) {
            autoCBB35A38_var = UnitGroupUnitFromEnd(autoCBB35A38_g, autoCBB35A38_u);
            if (autoCBB35A38_var == null) { break; }
            if ((UnitHasBehavior2(autoCBB35A38_var, "MobiusRavenSeekerFlashTint") == true)) {
                UnitGroupRemove(lv_enemyGroup, autoCBB35A38_var);
            }

        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusRaven, "MobiusRavenSeekerFlashMissile", "Abil/HunterMobiusRavenSeekerFlashMissile") <= 0.0) && (UnitGetPropertyFixed(lp_mobiusRaven, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_mobiusRaven, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
            lv_targetPoint = AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 2.4, UnitGetPosition(lp_mobiusRaven), 10.0, 0);
            UnitIssueOrder(lp_mobiusRaven, OrderTargetingUnit(AbilityCommand("MobiusRavenSeekerFlashMissile", 0), UnitGroupClosestToPoint(lv_enemyGroup, lv_targetPoint)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusRaven, false);
            AISetUnitSuicide(lp_mobiusRaven, true);
        }
        else {
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusRaven, "MobiusRavenSeekerFlashMissile", "Abil/HunterMobiusRavenSeekerFlashMissile") <= 0.0) && (UnitGetPropertyFixed(lp_mobiusRaven, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_mobiusRaven, c_unitPropLifePercent, c_unitPropCurrent) >= 0.33)) {
                lv_targetPoint = AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 2.4, UnitGetPosition(lp_mobiusRaven), 10.0, 0);
                UnitIssueOrder(lp_mobiusRaven, OrderTargetingUnit(AbilityCommand("MobiusRavenSeekerFlashMissile", 0), UnitGroupClosestToPoint(lv_enemyGroup, lv_targetPoint)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_mobiusRaven, false);
                AISetUnitSuicide(lp_mobiusRaven, true);
            }
            else {
                if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusRaven, "MobiusRavenSeekerFlashMissile", "Abil/HunterMobiusRavenSeekerFlashMissile") <= 0.0) && (UnitGetPropertyFixed(lp_mobiusRaven, c_unitPropEnergy, c_unitPropCurrent) >= 75.0)) {
                    lv_targetPoint = AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 2.4, UnitGetPosition(lp_mobiusRaven), 10.0, 0);
                    UnitIssueOrder(lp_mobiusRaven, OrderTargetingUnit(AbilityCommand("MobiusRavenSeekerFlashMissile", 0), UnitGroupClosestToPoint(lv_enemyGroup, lv_targetPoint)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_mobiusRaven, false);
                    AISetUnitSuicide(lp_mobiusRaven, true);
                }

            }
        }
        lv_enemyGroup = null;
        lv_targetPoint = null;
        Wait(0.05, c_timeAI);
        lv_alliedGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusRaven), c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_mobiusRaven), 6.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto856B18FB_g = lv_alliedGroup;
        auto856B18FB_u = UnitGroupCount(auto856B18FB_g, c_unitCountAll);
        for (;; auto856B18FB_u -= 1) {
            auto856B18FB_var = UnitGroupUnitFromEnd(auto856B18FB_g, auto856B18FB_u);
            if (auto856B18FB_var == null) { break; }
            if (((UnitGetPropertyFixed(auto856B18FB_var, c_unitPropLifePercent, c_unitPropCurrent) >= 0.8) || (UnitBehaviorCount(auto856B18FB_var, "MobiusRavenHealField") >= 3))) {
                UnitGroupRemove(lv_alliedGroup, auto856B18FB_var);
            }

        }
        if ((UnitAbilityGetCooldown(lp_mobiusRaven, "MobiusRavenHealField", "DehakaHealDehakaHeal2DehakaHealMobiusRavenHealField") <= 0.0)) {
            UnitIssueOrder(lp_mobiusRaven, Order(AbilityCommand("MobiusRavenHealField", 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusRaven, false);
            AISetUnitSuicide(lp_mobiusRaven, true);
        }

        lv_alliedGroup = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusRaven), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusRaven), 9.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoCA387599_g = lv_enemyGroup;
        autoCA387599_u = UnitGroupCount(autoCA387599_g, c_unitCountAll);
        for (;; autoCA387599_u -= 1) {
            autoCA387599_var = UnitGroupUnitFromEnd(autoCA387599_g, autoCA387599_u);
            if (autoCA387599_var == null) { break; }
            if ((UnitHasBehavior2(autoCA387599_var, "MobiusRavenScrambler") == true)) {
                UnitGroupRemove(lv_enemyGroup, autoCA387599_var);
            }
            else {
                if (((UnitTypeGetProperty(UnitGetType(autoCA387599_var), c_unitPropEnergyMax) > 0.0) || (UnitInRangeAndAbleToAttackTarget(autoCA387599_var, lp_mobiusRaven) == true))) {
                }
                else {
                    UnitGroupRemove(lv_enemyGroup, autoCA387599_var);
                }
            }
        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusRaven, "MobiusRavenScrambler", "Abil/MobiusRavenScrambler") <= 0.0) && (UnitGetPropertyFixed(lp_mobiusRaven, c_unitPropEnergy, c_unitPropCurrent) >= 75.0)) {
            UnitIssueOrder(lp_mobiusRaven, OrderTargetingUnit(AbilityCommand("MobiusRavenScrambler", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusRaven, false);
            AISetUnitSuicide(lp_mobiusRaven, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_MobiusSpectreAbility_Trigger = null;
unit auto_libNEXS_gf_MobiusSpectreAbility_lp_mobiusSpectre;

void libNEXS_gf_MobiusSpectreAbility (unit lp_mobiusSpectre) {
    auto_libNEXS_gf_MobiusSpectreAbility_lp_mobiusSpectre = lp_mobiusSpectre;

    if (auto_libNEXS_gf_MobiusSpectreAbility_Trigger == null) {
        auto_libNEXS_gf_MobiusSpectreAbility_Trigger = TriggerCreate("auto_libNEXS_gf_MobiusSpectreAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_MobiusSpectreAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_MobiusSpectreAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mobiusSpectre = auto_libNEXS_gf_MobiusSpectreAbility_lp_mobiusSpectre;

    // Variable Declarations
    unitgroup lv_enemyGroup;
    point lv_targetPoint;

    // Automatic Variable Declarations
    unitgroup auto5E8D43E5_g;
    int auto5E8D43E5_u;
    unit auto5E8D43E5_var;
    unitgroup auto4ED41C9E_g;
    int auto4ED41C9E_u;
    unit auto4ED41C9E_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mobiusSpectre) == true) && ((UnitGetOwner(lp_mobiusSpectre) == 3) || (UnitGetOwner(lp_mobiusSpectre) == 4) || (UnitGetOwner(lp_mobiusSpectre) == 5) || (UnitGetOwner(lp_mobiusSpectre) == 6) || (UnitGetOwner(lp_mobiusSpectre) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusSpectre), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusSpectre), 10.5), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto5E8D43E5_g = lv_enemyGroup;
        auto5E8D43E5_u = UnitGroupCount(auto5E8D43E5_g, c_unitCountAll);
        for (;; auto5E8D43E5_u -= 1) {
            auto5E8D43E5_var = UnitGroupUnitFromEnd(auto5E8D43E5_g, auto5E8D43E5_u);
            if (auto5E8D43E5_var == null) { break; }
            if ((UnitHasBehavior2(auto5E8D43E5_var, "SpecterIIUltrasonicPulseTarget") == true)) {
                UnitGroupRemove(lv_enemyGroup, auto5E8D43E5_var);
            }

        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusSpectre, "SpectreIIUltrasonicPulse", "Abil/PsiStorm") <= 0.0) && (UnitGetPropertyFixed(lp_mobiusSpectre, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitGetPropertyFixed(lp_mobiusSpectre, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
            lv_targetPoint = AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 1.5, UnitGetPosition(lp_mobiusSpectre), 9.0, 0);
            UnitBehaviorAdd(RegionGetAttachUnit(RegionCircle(lv_targetPoint, 1.5)), "SpecterIIUltrasonicPulseTarget", lp_mobiusSpectre, 1);
            UnitIssueOrder(lp_mobiusSpectre, OrderTargetingPoint(AbilityCommand("SpectreIIUltrasonicPulse", 0), lv_targetPoint), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusSpectre, false);
            AISetUnitSuicide(lp_mobiusSpectre, true);
        }
        else {
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusSpectre, "SpectreIIUltrasonicPulse", "Abil/PsiStorm") <= 0.0) && (UnitGetPropertyFixed(lp_mobiusSpectre, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitGetPropertyFixed(lp_mobiusSpectre, c_unitPropLifePercent, c_unitPropCurrent) >= 0.33)) {
                lv_targetPoint = AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 1.5, UnitGetPosition(lp_mobiusSpectre), 9.0, 0);
                UnitBehaviorAdd(RegionGetAttachUnit(RegionCircle(lv_targetPoint, 1.5)), "SpecterIIUltrasonicPulseTarget", lp_mobiusSpectre, 1);
                UnitIssueOrder(lp_mobiusSpectre, OrderTargetingPoint(AbilityCommand("SpectreIIUltrasonicPulse", 0), lv_targetPoint), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_mobiusSpectre, false);
                AISetUnitSuicide(lp_mobiusSpectre, true);
            }
            else {
                if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusSpectre, "SpectreIIUltrasonicPulse", "Abil/PsiStorm") <= 0.0) && (UnitGetPropertyFixed(lp_mobiusSpectre, c_unitPropEnergy, c_unitPropCurrent) >= 50.0)) {
                    lv_targetPoint = AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 1.5, UnitGetPosition(lp_mobiusSpectre), 9.0, 0);
                    UnitBehaviorAdd(RegionGetAttachUnit(RegionCircle(lv_targetPoint, 1.5)), "SpecterIIUltrasonicPulseTarget", lp_mobiusSpectre, 1);
                    UnitIssueOrder(lp_mobiusSpectre, OrderTargetingPoint(AbilityCommand("SpectreIIUltrasonicPulse", 0), lv_targetPoint), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_mobiusSpectre, false);
                    AISetUnitSuicide(lp_mobiusSpectre, true);
                }

            }
        }
        lv_enemyGroup = null;
        lv_targetPoint = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusSpectre), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusSpectre), 8.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto4ED41C9E_g = lv_enemyGroup;
        auto4ED41C9E_u = UnitGroupCount(auto4ED41C9E_g, c_unitCountAll);
        for (;; auto4ED41C9E_u -= 1) {
            auto4ED41C9E_var = UnitGroupUnitFromEnd(auto4ED41C9E_g, auto4ED41C9E_u);
            if (auto4ED41C9E_var == null) { break; }
            if ((((UnitGetPropertyFixed(auto4ED41C9E_var, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(auto4ED41C9E_var, c_unitPropShields, c_unitPropCurrent)) >= 200.0) || (UnitTypeTestFlag(UnitGetType(auto4ED41C9E_var), c_unitFlagHero) == true) || (UnitTypeGetProperty(UnitGetType(auto4ED41C9E_var), c_unitPropSuppliesUsed) >= 3.0))) {
            }
            else {
                UnitGroupRemove(lv_enemyGroup, auto4ED41C9E_var);
            }
        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusSpectre, "MobiusSpectreObliterate", "Abil/MobiusSpectreObliterate") <= 0.0) && (UnitGetPropertyFixed(lp_mobiusSpectre, c_unitPropEnergy, c_unitPropCurrent) >= 150.0)) {
            UnitIssueOrder(lp_mobiusSpectre, OrderTargetingUnit(AbilityCommand("MobiusSpectreObliterate", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusSpectre, false);
            AISetUnitSuicide(lp_mobiusSpectre, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_MobiusSpectreIIAbility_Trigger = null;
unit auto_libNEXS_gf_MobiusSpectreIIAbility_lp_mobiusSpectreII;

void libNEXS_gf_MobiusSpectreIIAbility (unit lp_mobiusSpectreII) {
    auto_libNEXS_gf_MobiusSpectreIIAbility_lp_mobiusSpectreII = lp_mobiusSpectreII;

    if (auto_libNEXS_gf_MobiusSpectreIIAbility_Trigger == null) {
        auto_libNEXS_gf_MobiusSpectreIIAbility_Trigger = TriggerCreate("auto_libNEXS_gf_MobiusSpectreIIAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_MobiusSpectreIIAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_MobiusSpectreIIAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mobiusSpectreII = auto_libNEXS_gf_MobiusSpectreIIAbility_lp_mobiusSpectreII;

    // Variable Declarations
    unitgroup lv_enemyGroup;
    point lv_targetPoint;

    // Automatic Variable Declarations
    unitgroup auto47C86AB0_g;
    int auto47C86AB0_u;
    unit auto47C86AB0_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mobiusSpectreII) == true) && ((UnitGetOwner(lp_mobiusSpectreII) == 3) || (UnitGetOwner(lp_mobiusSpectreII) == 4) || (UnitGetOwner(lp_mobiusSpectreII) == 5) || (UnitGetOwner(lp_mobiusSpectreII) == 6) || (UnitGetOwner(lp_mobiusSpectreII) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusSpectreII), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusSpectreII), 10.5), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto47C86AB0_g = lv_enemyGroup;
        auto47C86AB0_u = UnitGroupCount(auto47C86AB0_g, c_unitCountAll);
        for (;; auto47C86AB0_u -= 1) {
            auto47C86AB0_var = UnitGroupUnitFromEnd(auto47C86AB0_g, auto47C86AB0_u);
            if (auto47C86AB0_var == null) { break; }
            if ((UnitHasBehavior2(auto47C86AB0_var, "SpecterIIUltrasonicPulseTarget") == true)) {
                UnitGroupRemove(lv_enemyGroup, auto47C86AB0_var);
            }

        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusSpectreII, "SpectreIIUltrasonicPulse", "Abil/PsiStorm") <= 0.0) && (UnitGetPropertyFixed(lp_mobiusSpectreII, c_unitPropEnergy, c_unitPropCurrent) >= 100.0) && (UnitGetPropertyFixed(lp_mobiusSpectreII, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
            lv_targetPoint = AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 1.5, UnitGetPosition(lp_mobiusSpectreII), 9.0, 0);
            UnitBehaviorAdd(RegionGetAttachUnit(RegionCircle(lv_targetPoint, 1.5)), "SpecterIIUltrasonicPulseTarget", lp_mobiusSpectreII, 1);
            UnitIssueOrder(lp_mobiusSpectreII, OrderTargetingPoint(AbilityCommand("SpectreIIUltrasonicPulse", 0), lv_targetPoint), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusSpectreII, false);
            AISetUnitSuicide(lp_mobiusSpectreII, true);
        }
        else {
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusSpectreII, "SpectreIIUltrasonicPulse", "Abil/PsiStorm") <= 0.0) && (UnitGetPropertyFixed(lp_mobiusSpectreII, c_unitPropEnergy, c_unitPropCurrent) >= 100.0) && (UnitGetPropertyFixed(lp_mobiusSpectreII, c_unitPropLifePercent, c_unitPropCurrent) >= 0.33)) {
                lv_targetPoint = AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 1.5, UnitGetPosition(lp_mobiusSpectreII), 9.0, 0);
                UnitBehaviorAdd(RegionGetAttachUnit(RegionCircle(lv_targetPoint, 1.5)), "SpecterIIUltrasonicPulseTarget", lp_mobiusSpectreII, 1);
                UnitIssueOrder(lp_mobiusSpectreII, OrderTargetingPoint(AbilityCommand("SpectreIIUltrasonicPulse", 0), lv_targetPoint), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_mobiusSpectreII, false);
                AISetUnitSuicide(lp_mobiusSpectreII, true);
            }
            else {
                if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusSpectreII, "SpectreIIUltrasonicPulse", "Abil/PsiStorm") <= 0.0) && (UnitGetPropertyFixed(lp_mobiusSpectreII, c_unitPropEnergy, c_unitPropCurrent) >= 100.0)) {
                    lv_targetPoint = AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 1.5, UnitGetPosition(lp_mobiusSpectreII), 9.0, 0);
                    UnitBehaviorAdd(RegionGetAttachUnit(RegionCircle(lv_targetPoint, 1.5)), "SpecterIIUltrasonicPulseTarget", lp_mobiusSpectreII, 1);
                    UnitIssueOrder(lp_mobiusSpectreII, OrderTargetingPoint(AbilityCommand("SpectreIIUltrasonicPulse", 0), lv_targetPoint), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_mobiusSpectreII, false);
                    AISetUnitSuicide(lp_mobiusSpectreII, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_MobiusThorAbility_Trigger = null;
unit auto_libNEXS_gf_MobiusThorAbility_lp_mobiusThor;

void libNEXS_gf_MobiusThorAbility (unit lp_mobiusThor) {
    auto_libNEXS_gf_MobiusThorAbility_lp_mobiusThor = lp_mobiusThor;

    if (auto_libNEXS_gf_MobiusThorAbility_Trigger == null) {
        auto_libNEXS_gf_MobiusThorAbility_Trigger = TriggerCreate("auto_libNEXS_gf_MobiusThorAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_MobiusThorAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_MobiusThorAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mobiusThor = auto_libNEXS_gf_MobiusThorAbility_lp_mobiusThor;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto00DD915C_g;
    int auto00DD915C_u;
    unit auto00DD915C_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mobiusThor) == true) && ((UnitGetOwner(lp_mobiusThor) == 3) || (UnitGetOwner(lp_mobiusThor) == 4) || (UnitGetOwner(lp_mobiusThor) == 5) || (UnitGetOwner(lp_mobiusThor) == 6) || (UnitGetOwner(lp_mobiusThor) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusThor), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusThor), 7.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto00DD915C_g = lv_enemyGroup;
        auto00DD915C_u = UnitGroupCount(auto00DD915C_g, c_unitCountAll);
        for (;; auto00DD915C_u -= 1) {
            auto00DD915C_var = UnitGroupUnitFromEnd(auto00DD915C_g, auto00DD915C_u);
            if (auto00DD915C_var == null) { break; }
            if ((((UnitGetPropertyFixed(auto00DD915C_var, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(auto00DD915C_var, c_unitPropShields, c_unitPropCurrent)) >= 200.0) || (UnitTypeTestFlag(UnitGetType(auto00DD915C_var), c_unitFlagHero) == true) || (UnitTypeGetProperty(UnitGetType(auto00DD915C_var), c_unitPropSuppliesUsed) >= 3.0))) {
            }
            else {
                UnitGroupRemove(lv_enemyGroup, auto00DD915C_var);
            }
        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mobiusThor, "MobiusThorStrikeCannons", "Abil/MobiusThorStrikeCannons") <= 0.0)) {
            UnitIssueOrder(lp_mobiusThor, OrderTargetingUnit(AbilityCommand("MobiusThorStrikeCannons", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusThor, false);
            AISetUnitSuicide(lp_mobiusThor, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_MobiusVikingAbility_Trigger = null;
unit auto_libNEXS_gf_MobiusVikingAbility_lp_mobiusViking;

void libNEXS_gf_MobiusVikingAbility (unit lp_mobiusViking) {
    auto_libNEXS_gf_MobiusVikingAbility_lp_mobiusViking = lp_mobiusViking;

    if (auto_libNEXS_gf_MobiusVikingAbility_Trigger == null) {
        auto_libNEXS_gf_MobiusVikingAbility_Trigger = TriggerCreate("auto_libNEXS_gf_MobiusVikingAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_MobiusVikingAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_MobiusVikingAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mobiusViking = auto_libNEXS_gf_MobiusVikingAbility_lp_mobiusViking;

    // Variable Declarations
    unitgroup lv_enemyGroup;
    unitgroup lv_enemyGroundGroup;
    unitgroup lv_enemyAirGroup;

    // Automatic Variable Declarations
    unitgroup autoA4200460_g;
    int autoA4200460_u;
    unit autoA4200460_var;
    unitgroup autoB347C498_g;
    int autoB347C498_u;
    unit autoB347C498_var;
    unitgroup auto8F1F02B1_g;
    int auto8F1F02B1_u;
    unit auto8F1F02B1_var;
    unitgroup autoDB6F8B84_g;
    int autoDB6F8B84_u;
    unit autoDB6F8B84_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();
    lv_enemyGroundGroup = UnitGroupEmpty();
    lv_enemyAirGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mobiusViking) == true) && ((UnitGetOwner(lp_mobiusViking) == 3) || (UnitGetOwner(lp_mobiusViking) == 4) || (UnitGetOwner(lp_mobiusViking) == 5) || (UnitGetOwner(lp_mobiusViking) == 6) || (UnitGetOwner(lp_mobiusViking) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusViking), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusViking), 12.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitAbilityGetCooldown(lp_mobiusViking, "MobiusVikingOverload", "Abil/MobiusVikingOverload") <= 0.0) && (UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1)) {
            UnitIssueOrder(lp_mobiusViking, Order(AbilityCommand("MobiusVikingOverload", 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusViking, false);
            AISetUnitSuicide(lp_mobiusViking, true);
        }

        lv_enemyGroup = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroundGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusViking), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusViking), 10.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        lv_enemyAirGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusViking), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusViking), 10.0), UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitGetType(lp_mobiusViking) == "MobiusVikingFighter")) {
            autoA4200460_g = lv_enemyGroundGroup;
            autoA4200460_u = UnitGroupCount(autoA4200460_g, c_unitCountAll);
            for (;; autoA4200460_u -= 1) {
                autoA4200460_var = UnitGroupUnitFromEnd(autoA4200460_g, autoA4200460_u);
                if (autoA4200460_var == null) { break; }
                if ((UnitInRangeAndAbleToAttackTarget(autoA4200460_var, lp_mobiusViking) == false)) {
                    UnitGroupRemove(lv_enemyGroundGroup, autoA4200460_var);
                }

            }
            autoB347C498_g = lv_enemyAirGroup;
            autoB347C498_u = UnitGroupCount(autoB347C498_g, c_unitCountAll);
            for (;; autoB347C498_u -= 1) {
                autoB347C498_var = UnitGroupUnitFromEnd(autoB347C498_g, autoB347C498_u);
                if (autoB347C498_var == null) { break; }
                if ((UnitInRangeAndAbleToAttackTarget(autoB347C498_var, lp_mobiusViking) == false)) {
                    UnitGroupRemove(lv_enemyAirGroup, autoB347C498_var);
                }

            }
            if ((UnitGroupCount(lv_enemyGroundGroup, c_unitCountAlive) >= 1) && (UnitGroupCount(lv_enemyAirGroup, c_unitCountAlive) == 0)) {
                UnitIssueOrder(lp_mobiusViking, Order(AbilityCommand("MobiusVikingAssaultMode", 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_mobiusViking, false);
                AISetUnitSuicide(lp_mobiusViking, true);
            }

        }
        else if ((UnitGetType(lp_mobiusViking) == "MobiusVikingAssault")) {
            auto8F1F02B1_g = lv_enemyGroundGroup;
            auto8F1F02B1_u = UnitGroupCount(auto8F1F02B1_g, c_unitCountAll);
            for (;; auto8F1F02B1_u -= 1) {
                auto8F1F02B1_var = UnitGroupUnitFromEnd(auto8F1F02B1_g, auto8F1F02B1_u);
                if (auto8F1F02B1_var == null) { break; }
                if ((UnitInRangeAndAbleToAttackTarget(auto8F1F02B1_var, lp_mobiusViking) == false)) {
                    UnitGroupRemove(lv_enemyGroundGroup, auto8F1F02B1_var);
                }

            }
            autoDB6F8B84_g = lv_enemyAirGroup;
            autoDB6F8B84_u = UnitGroupCount(autoDB6F8B84_g, c_unitCountAll);
            for (;; autoDB6F8B84_u -= 1) {
                autoDB6F8B84_var = UnitGroupUnitFromEnd(autoDB6F8B84_g, autoDB6F8B84_u);
                if (autoDB6F8B84_var == null) { break; }
                if ((UnitInRangeAndAbleToAttackTarget(autoDB6F8B84_var, lp_mobiusViking) == false)) {
                    UnitGroupRemove(lv_enemyAirGroup, autoDB6F8B84_var);
                }

            }
            if ((UnitGroupCount(lv_enemyAirGroup, c_unitCountAlive) >= 1) && (UnitGroupCount(lv_enemyGroundGroup, c_unitCountAlive) == 0)) {
                UnitIssueOrder(lp_mobiusViking, Order(AbilityCommand("MobiusVikingFighterMode", 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_mobiusViking, false);
                AISetUnitSuicide(lp_mobiusViking, true);
            }

        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_MobiusVultureAbility_Trigger = null;
unit auto_libNEXS_gf_MobiusVultureAbility_lp_mobiusVulture;

void libNEXS_gf_MobiusVultureAbility (unit lp_mobiusVulture) {
    auto_libNEXS_gf_MobiusVultureAbility_lp_mobiusVulture = lp_mobiusVulture;

    if (auto_libNEXS_gf_MobiusVultureAbility_Trigger == null) {
        auto_libNEXS_gf_MobiusVultureAbility_Trigger = TriggerCreate("auto_libNEXS_gf_MobiusVultureAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_MobiusVultureAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_MobiusVultureAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mobiusVulture = auto_libNEXS_gf_MobiusVultureAbility_lp_mobiusVulture;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mobiusVulture) == true) && ((UnitGetOwner(lp_mobiusVulture) == 3) || (UnitGetOwner(lp_mobiusVulture) == 4) || (UnitGetOwner(lp_mobiusVulture) == 5) || (UnitGetOwner(lp_mobiusVulture) == 6) || (UnitGetOwner(lp_mobiusVulture) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mobiusVulture), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mobiusVulture), 8.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitAbilityChargeInfo(lp_mobiusVulture, AbilityCommand("MobiusVultureSpiderMines", 0), c_unitAbilChargeCountUse) == 3.0) && (UnitGroupCount(lv_enemyGroup, c_unitCountAlive) == 0)) {
            UnitIssueOrder(lp_mobiusVulture, OrderTargetingPoint(AbilityCommand("MobiusVultureSpiderMines", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_mobiusVulture), 3.0))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusVulture, false);
            AISetUnitSuicide(lp_mobiusVulture, true);
        }
        else if ((UnitAbilityChargeInfo(lp_mobiusVulture, AbilityCommand("MobiusVultureSpiderMines", 0), c_unitAbilChargeCountUse) == 3.0) && (UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1)) {
            UnitIssueOrder(lp_mobiusVulture, OrderTargetingPoint(AbilityCommand("MobiusVultureSpiderMines", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_mobiusVulture), 3.0))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusVulture, false);
            AISetUnitSuicide(lp_mobiusVulture, true);
            UnitIssueOrder(lp_mobiusVulture, OrderTargetingPoint(AbilityCommand("MobiusVultureSpiderMines", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_mobiusVulture), 3.0))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusVulture, false);
            AISetUnitSuicide(lp_mobiusVulture, true);
            UnitIssueOrder(lp_mobiusVulture, OrderTargetingPoint(AbilityCommand("MobiusVultureSpiderMines", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_mobiusVulture), 3.0))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusVulture, false);
            AISetUnitSuicide(lp_mobiusVulture, true);
        }
        else if ((UnitAbilityChargeInfo(lp_mobiusVulture, AbilityCommand("MobiusVultureSpiderMines", 0), c_unitAbilChargeCountUse) == 2.0) && (UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1)) {
            UnitIssueOrder(lp_mobiusVulture, OrderTargetingPoint(AbilityCommand("MobiusVultureSpiderMines", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_mobiusVulture), 3.0))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusVulture, false);
            AISetUnitSuicide(lp_mobiusVulture, true);
            UnitIssueOrder(lp_mobiusVulture, OrderTargetingPoint(AbilityCommand("MobiusVultureSpiderMines", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_mobiusVulture), 3.0))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusVulture, false);
            AISetUnitSuicide(lp_mobiusVulture, true);
        }
        else if ((UnitAbilityChargeInfo(lp_mobiusVulture, AbilityCommand("MobiusVultureSpiderMines", 0), c_unitAbilChargeCountUse) == 1.0) && (UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1)) {
            UnitIssueOrder(lp_mobiusVulture, OrderTargetingPoint(AbilityCommand("MobiusVultureSpiderMines", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_mobiusVulture), 3.0))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mobiusVulture, false);
            AISetUnitSuicide(lp_mobiusVulture, true);
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_NerazimCorsairAbility_Trigger = null;
unit auto_libNEXS_gf_NerazimCorsairAbility_lp_nerazimCorsair;

void libNEXS_gf_NerazimCorsairAbility (unit lp_nerazimCorsair) {
    auto_libNEXS_gf_NerazimCorsairAbility_lp_nerazimCorsair = lp_nerazimCorsair;

    if (auto_libNEXS_gf_NerazimCorsairAbility_Trigger == null) {
        auto_libNEXS_gf_NerazimCorsairAbility_Trigger = TriggerCreate("auto_libNEXS_gf_NerazimCorsairAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_NerazimCorsairAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_NerazimCorsairAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_nerazimCorsair = auto_libNEXS_gf_NerazimCorsairAbility_lp_nerazimCorsair;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto82EA1D9C_g;
    int auto82EA1D9C_u;
    unit auto82EA1D9C_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_nerazimCorsair) == true) && ((UnitGetOwner(lp_nerazimCorsair) == 3) || (UnitGetOwner(lp_nerazimCorsair) == 4) || (UnitGetOwner(lp_nerazimCorsair) == 5) || (UnitGetOwner(lp_nerazimCorsair) == 6) || (UnitGetOwner(lp_nerazimCorsair) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nerazimCorsair), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nerazimCorsair), 12.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto82EA1D9C_g = lv_enemyGroup;
        auto82EA1D9C_u = UnitGroupCount(auto82EA1D9C_g, c_unitCountAll);
        for (;; auto82EA1D9C_u -= 1) {
            auto82EA1D9C_var = UnitGroupUnitFromEnd(auto82EA1D9C_g, auto82EA1D9C_u);
            if (auto82EA1D9C_var == null) { break; }
            if ((UnitHasBehavior2(auto82EA1D9C_var, "NerazimCorsairDisruptionWeb") == true)) {
                UnitGroupRemove(lv_enemyGroup, auto82EA1D9C_var);
            }

        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimCorsair, "NerazimCorsairDisruptionWeb", "Abil/NerazimCorsairDisruptionWeb") <= 0.0) && (UnitGetPropertyFixed(lp_nerazimCorsair, c_unitPropEnergy, c_unitPropCurrent) >= 125.0) && (UnitGetPropertyFixed(lp_nerazimCorsair, c_unitPropShieldsPercent, c_unitPropCurrent) >= 0.32)) {
            UnitIssueOrder(lp_nerazimCorsair, OrderTargetingPoint(AbilityCommand("NerazimCorsairDisruptionWeb", 0), AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 3.0, UnitGetPosition(lp_nerazimCorsair), 9.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nerazimCorsair, false);
            AISetUnitSuicide(lp_nerazimCorsair, true);
        }
        else {
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimCorsair, "NerazimCorsairDisruptionWeb", "Abil/NerazimCorsairDisruptionWeb") <= 0.0) && (UnitGetPropertyFixed(lp_nerazimCorsair, c_unitPropEnergy, c_unitPropCurrent) >= 125.0) && (UnitGetPropertyFixed(lp_nerazimCorsair, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
                UnitIssueOrder(lp_nerazimCorsair, OrderTargetingPoint(AbilityCommand("NerazimCorsairDisruptionWeb", 0), AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 3.0, UnitGetPosition(lp_nerazimCorsair), 9.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_nerazimCorsair, false);
                AISetUnitSuicide(lp_nerazimCorsair, true);
            }
            else {
                if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimCorsair, "NerazimCorsairDisruptionWeb", "Abil/NerazimCorsairDisruptionWeb") <= 0.0) && (UnitGetPropertyFixed(lp_nerazimCorsair, c_unitPropEnergy, c_unitPropCurrent) >= 125.0)) {
                    UnitIssueOrder(lp_nerazimCorsair, OrderTargetingPoint(AbilityCommand("NerazimCorsairDisruptionWeb", 0), AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 3.0, UnitGetPosition(lp_nerazimCorsair), 9.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_nerazimCorsair, false);
                    AISetUnitSuicide(lp_nerazimCorsair, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_NerazimDarkArchonAbility1_Trigger = null;
unit auto_libNEXS_gf_NerazimDarkArchonAbility1_lp_nerazimDarkArchon;

void libNEXS_gf_NerazimDarkArchonAbility1 (unit lp_nerazimDarkArchon) {
    auto_libNEXS_gf_NerazimDarkArchonAbility1_lp_nerazimDarkArchon = lp_nerazimDarkArchon;

    if (auto_libNEXS_gf_NerazimDarkArchonAbility1_Trigger == null) {
        auto_libNEXS_gf_NerazimDarkArchonAbility1_Trigger = TriggerCreate("auto_libNEXS_gf_NerazimDarkArchonAbility1_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_NerazimDarkArchonAbility1_Trigger, false, false);
}

bool auto_libNEXS_gf_NerazimDarkArchonAbility1_TriggerFunc (bool testConds, bool runActions) {
    unit lp_nerazimDarkArchon = auto_libNEXS_gf_NerazimDarkArchonAbility1_lp_nerazimDarkArchon;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto12520106_g;
    int auto12520106_u;
    unit auto12520106_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_nerazimDarkArchon) == true) && ((UnitGetOwner(lp_nerazimDarkArchon) == 3) || (UnitGetOwner(lp_nerazimDarkArchon) == 4) || (UnitGetOwner(lp_nerazimDarkArchon) == 5) || (UnitGetOwner(lp_nerazimDarkArchon) == 6) || (UnitGetOwner(lp_nerazimDarkArchon) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nerazimDarkArchon), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nerazimDarkArchon), 7.75), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto12520106_g = lv_enemyGroup;
        auto12520106_u = UnitGroupCount(auto12520106_g, c_unitCountAll);
        for (;; auto12520106_u -= 1) {
            auto12520106_var = UnitGroupUnitFromEnd(auto12520106_g, auto12520106_u);
            if (auto12520106_var == null) { break; }
            if (((UnitHasBehavior2(auto12520106_var, "NerazimDarkArchonPsimaelStun") == true) || (UnitHasBehavior2(auto12520106_var, "NerazimDarkArchonPsimaelStunHero") == true))) {
                UnitGroupRemove(lv_enemyGroup, auto12520106_var);
            }

        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitGetPropertyFixed(lp_nerazimDarkArchon, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitAbilityGetCooldown(lp_nerazimDarkArchon, "NerazimDarkArchonPsiMael", "Abil/NerazimDarkArchonPsiMael") <= 0.0) && (UnitGetPropertyFixed(lp_nerazimDarkArchon, c_unitPropShieldsPercent, c_unitPropCurrent) >= 0.66)) {
            UnitIssueOrder(lp_nerazimDarkArchon, OrderTargetingPoint(AbilityCommand("NerazimDarkArchonPsiMael", 0), AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 1.75, UnitGetPosition(lp_nerazimDarkArchon), 6.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nerazimDarkArchon, false);
            AISetUnitSuicide(lp_nerazimDarkArchon, true);
        }
        else {
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitGetPropertyFixed(lp_nerazimDarkArchon, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitAbilityGetCooldown(lp_nerazimDarkArchon, "NerazimDarkArchonPsiMael", "Abil/NerazimDarkArchonPsiMael") <= 0.0) && (UnitGetPropertyFixed(lp_nerazimDarkArchon, c_unitPropShieldsPercent, c_unitPropCurrent) >= 0.33)) {
                UnitIssueOrder(lp_nerazimDarkArchon, OrderTargetingPoint(AbilityCommand("NerazimDarkArchonPsiMael", 0), AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 1.75, UnitGetPosition(lp_nerazimDarkArchon), 6.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_nerazimDarkArchon, false);
                AISetUnitSuicide(lp_nerazimDarkArchon, true);
            }
            else {
                if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitGetPropertyFixed(lp_nerazimDarkArchon, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitAbilityGetCooldown(lp_nerazimDarkArchon, "NerazimDarkArchonPsiMael", "Abil/NerazimDarkArchonPsiMael") <= 0.0)) {
                    UnitIssueOrder(lp_nerazimDarkArchon, OrderTargetingPoint(AbilityCommand("NerazimDarkArchonPsiMael", 0), AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 1.75, UnitGetPosition(lp_nerazimDarkArchon), 6.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_nerazimDarkArchon, false);
                    AISetUnitSuicide(lp_nerazimDarkArchon, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_NerazimDarkArchonAbility2_Trigger = null;
unit auto_libNEXS_gf_NerazimDarkArchonAbility2_lp_nerazimDarkArchon;

void libNEXS_gf_NerazimDarkArchonAbility2 (unit lp_nerazimDarkArchon) {
    auto_libNEXS_gf_NerazimDarkArchonAbility2_lp_nerazimDarkArchon = lp_nerazimDarkArchon;

    if (auto_libNEXS_gf_NerazimDarkArchonAbility2_Trigger == null) {
        auto_libNEXS_gf_NerazimDarkArchonAbility2_Trigger = TriggerCreate("auto_libNEXS_gf_NerazimDarkArchonAbility2_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_NerazimDarkArchonAbility2_Trigger, false, false);
}

bool auto_libNEXS_gf_NerazimDarkArchonAbility2_TriggerFunc (bool testConds, bool runActions) {
    unit lp_nerazimDarkArchon = auto_libNEXS_gf_NerazimDarkArchonAbility2_lp_nerazimDarkArchon;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto4CD13449_g;
    int auto4CD13449_u;
    unit auto4CD13449_var;
    unitgroup autoDFB6EC99_g;
    int autoDFB6EC99_u;
    unit autoDFB6EC99_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_nerazimDarkArchon) == true) && ((UnitGetOwner(lp_nerazimDarkArchon) == 3) || (UnitGetOwner(lp_nerazimDarkArchon) == 4) || (UnitGetOwner(lp_nerazimDarkArchon) == 5) || (UnitGetOwner(lp_nerazimDarkArchon) == 6) || (UnitGetOwner(lp_nerazimDarkArchon) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nerazimDarkArchon), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nerazimDarkArchon), 7.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32)) | (1 << (c_targetFilterHeroUnit - 32))), 0);
        auto4CD13449_g = lv_enemyGroup;
        auto4CD13449_u = UnitGroupCount(auto4CD13449_g, c_unitCountAll);
        for (;; auto4CD13449_u -= 1) {
            auto4CD13449_var = UnitGroupUnitFromEnd(auto4CD13449_g, auto4CD13449_u);
            if (auto4CD13449_var == null) { break; }
            if ((((UnitGetPropertyFixed(auto4CD13449_var, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(auto4CD13449_var, c_unitPropShields, c_unitPropCurrent)) >= 200.0) || (UnitTypeGetProperty(UnitGetType(auto4CD13449_var), c_unitPropSuppliesUsed) >= 3.0))) {
            }
            else {
                UnitGroupRemove(lv_enemyGroup, auto4CD13449_var);
            }
        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimDarkArchon, "NerazimDarkArchonMindControl", "Abil/NerazimDarkArchonMindControl") <= 0.0) && (UnitGetPropertyFixed(lp_nerazimDarkArchon, c_unitPropEnergy, c_unitPropCurrent) >= 100.0)) {
            UnitIssueOrder(lp_nerazimDarkArchon, OrderTargetingUnit(AbilityCommand("NerazimDarkArchonMindControl", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nerazimDarkArchon, false);
            AISetUnitSuicide(lp_nerazimDarkArchon, true);
        }

        lv_enemyGroup = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nerazimDarkArchon), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nerazimDarkArchon), 7.75), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoDFB6EC99_g = lv_enemyGroup;
        autoDFB6EC99_u = UnitGroupCount(autoDFB6EC99_g, c_unitCountAll);
        for (;; autoDFB6EC99_u -= 1) {
            autoDFB6EC99_var = UnitGroupUnitFromEnd(autoDFB6EC99_g, autoDFB6EC99_u);
            if (autoDFB6EC99_var == null) { break; }
            if (((UnitHasBehavior2(autoDFB6EC99_var, "NerazimDarkArchonPsimaelStun") == true) || (UnitHasBehavior2(autoDFB6EC99_var, "NerazimDarkArchonPsimaelStunHero") == true))) {
                UnitGroupRemove(lv_enemyGroup, autoDFB6EC99_var);
            }

        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimDarkArchon, "NerazimDarkArchonPsiMael", "Abil/NerazimDarkArchonPsiMael") <= 0.0) && (UnitGetPropertyFixed(lp_nerazimDarkArchon, c_unitPropEnergy, c_unitPropCurrent) >= 150.0) && (UnitGetPropertyFixed(lp_nerazimDarkArchon, c_unitPropShieldsPercent, c_unitPropCurrent) >= 0.66)) {
            UnitIssueOrder(lp_nerazimDarkArchon, OrderTargetingPoint(AbilityCommand("NerazimDarkArchonPsiMael", 0), AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 1.75, UnitGetPosition(lp_nerazimDarkArchon), 6.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nerazimDarkArchon, false);
            AISetUnitSuicide(lp_nerazimDarkArchon, true);
        }
        else {
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimDarkArchon, "NerazimDarkArchonPsiMael", "Abil/NerazimDarkArchonPsiMael") <= 0.0) && (UnitGetPropertyFixed(lp_nerazimDarkArchon, c_unitPropEnergy, c_unitPropCurrent) >= 150.0) && (UnitGetPropertyFixed(lp_nerazimDarkArchon, c_unitPropShieldsPercent, c_unitPropCurrent) >= 0.33)) {
                UnitIssueOrder(lp_nerazimDarkArchon, OrderTargetingPoint(AbilityCommand("NerazimDarkArchonPsiMael", 0), AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 1.75, UnitGetPosition(lp_nerazimDarkArchon), 6.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_nerazimDarkArchon, false);
                AISetUnitSuicide(lp_nerazimDarkArchon, true);
            }
            else {
                if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimDarkArchon, "NerazimDarkArchonPsiMael", "Abil/NerazimDarkArchonPsiMael") <= 0.0) && (UnitGetPropertyFixed(lp_nerazimDarkArchon, c_unitPropEnergy, c_unitPropCurrent) >= 150.0)) {
                    UnitIssueOrder(lp_nerazimDarkArchon, OrderTargetingPoint(AbilityCommand("NerazimDarkArchonPsiMael", 0), AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 1.75, UnitGetPosition(lp_nerazimDarkArchon), 6.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_nerazimDarkArchon, false);
                    AISetUnitSuicide(lp_nerazimDarkArchon, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_NerazimDTAbility_Trigger = null;
unit auto_libNEXS_gf_NerazimDTAbility_lp_nerazimDT;

void libNEXS_gf_NerazimDTAbility (unit lp_nerazimDT) {
    auto_libNEXS_gf_NerazimDTAbility_lp_nerazimDT = lp_nerazimDT;

    if (auto_libNEXS_gf_NerazimDTAbility_Trigger == null) {
        auto_libNEXS_gf_NerazimDTAbility_Trigger = TriggerCreate("auto_libNEXS_gf_NerazimDTAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_NerazimDTAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_NerazimDTAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_nerazimDT = auto_libNEXS_gf_NerazimDTAbility_lp_nerazimDT;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto2D6B57FF_g;
    int auto2D6B57FF_u;
    unit auto2D6B57FF_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_nerazimDT) == true) && ((UnitGetOwner(lp_nerazimDT) == 3) || (UnitGetOwner(lp_nerazimDT) == 4) || (UnitGetOwner(lp_nerazimDT) == 5) || (UnitGetOwner(lp_nerazimDT) == 6) || (UnitGetOwner(lp_nerazimDT) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nerazimDT), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nerazimDT), 8.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto2D6B57FF_g = lv_enemyGroup;
        auto2D6B57FF_u = UnitGroupCount(auto2D6B57FF_g, c_unitCountAll);
        for (;; auto2D6B57FF_u -= 1) {
            auto2D6B57FF_var = UnitGroupUnitFromEnd(auto2D6B57FF_g, auto2D6B57FF_u);
            if (auto2D6B57FF_var == null) { break; }
            if ((DistanceBetweenPoints(UnitGetPosition(auto2D6B57FF_var), UnitGetPosition(lp_nerazimDT)) <= 1.5)) {
                UnitGroupRemove(lv_enemyGroup, auto2D6B57FF_var);
            }

        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimDT, "NerazimShadowTemplarBlink", "Abil/NerazimShadowTemplarBlink") <= 0.0)) {
            UnitIssueOrder(lp_nerazimDT, OrderTargetingPoint(AbilityCommand("NerazimShadowTemplarBlink", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_enemyGroup, UnitGetPosition(lp_nerazimDT)))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nerazimDT, false);
            AISetUnitSuicide(lp_nerazimDT, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_NerazimHTAbility_Trigger = null;
unit auto_libNEXS_gf_NerazimHTAbility_lp_nerazimHT;

void libNEXS_gf_NerazimHTAbility (unit lp_nerazimHT) {
    auto_libNEXS_gf_NerazimHTAbility_lp_nerazimHT = lp_nerazimHT;

    if (auto_libNEXS_gf_NerazimHTAbility_Trigger == null) {
        auto_libNEXS_gf_NerazimHTAbility_Trigger = TriggerCreate("auto_libNEXS_gf_NerazimHTAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_NerazimHTAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_NerazimHTAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_nerazimHT = auto_libNEXS_gf_NerazimHTAbility_lp_nerazimHT;

    // Variable Declarations
    unitgroup lv_enemyGroup;
    unitgroup lv_alliedGroup;

    // Automatic Variable Declarations
    unitgroup auto2FC2AD5D_g;
    int auto2FC2AD5D_u;
    unit auto2FC2AD5D_var;
    unitgroup auto0A8C8DE0_g;
    int auto0A8C8DE0_u;
    unit auto0A8C8DE0_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();
    lv_alliedGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_nerazimHT) == true) && ((UnitGetOwner(lp_nerazimHT) == 3) || (UnitGetOwner(lp_nerazimHT) == 4) || (UnitGetOwner(lp_nerazimHT) == 5) || (UnitGetOwner(lp_nerazimHT) == 6) || (UnitGetOwner(lp_nerazimHT) == 7))) {
        lv_alliedGroup = UnitGroupAlliance(UnitGetOwner(lp_nerazimHT), c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_nerazimHT), 4.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto2FC2AD5D_g = lv_alliedGroup;
        auto2FC2AD5D_u = UnitGroupCount(auto2FC2AD5D_g, c_unitCountAll);
        for (;; auto2FC2AD5D_u -= 1) {
            auto2FC2AD5D_var = UnitGroupUnitFromEnd(auto2FC2AD5D_g, auto2FC2AD5D_u);
            if (auto2FC2AD5D_var == null) { break; }
            if ((UnitHasBehavior2(auto2FC2AD5D_var, "NerazimHighTemplarPurdahSource") == true)) {
                UnitGroupRemove(lv_alliedGroup, auto2FC2AD5D_var);
            }

        }
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nerazimHT), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nerazimHT), 14.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimHT, "NerazimHighTemplarPurdah", "GuardianShieldGuardianShield2GuardianShieldNerazimHighTemplarPurdah") <= 0.0) && (UnitGetPropertyFixed(lp_nerazimHT, c_unitPropEnergy, c_unitPropCurrent) >= 75.0)) {
            UnitIssueOrder(lp_nerazimHT, Order(AbilityCommand("NerazimHighTemplarPurdah", 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nerazimHT, false);
            AISetUnitSuicide(lp_nerazimHT, true);
        }

        lv_alliedGroup = null;
        lv_enemyGroup = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nerazimHT), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nerazimHT), 8.75), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto0A8C8DE0_g = lv_enemyGroup;
        auto0A8C8DE0_u = UnitGroupCount(auto0A8C8DE0_g, c_unitCountAll);
        for (;; auto0A8C8DE0_u -= 1) {
            auto0A8C8DE0_var = UnitGroupUnitFromEnd(auto0A8C8DE0_g, auto0A8C8DE0_u);
            if (auto0A8C8DE0_var == null) { break; }
            if ((UnitHasBehavior2(auto0A8C8DE0_var, "NerazimHighTemplarCurse") == true)) {
                UnitGroupRemove(lv_enemyGroup, auto0A8C8DE0_var);
            }

        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimHT, "NerazimHighTemplarCurse", "Abil/NerazimHighTemplarCurse") <= 0.0) && (UnitGetPropertyFixed(lp_nerazimHT, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_nerazimHT, c_unitPropShieldsPercent, c_unitPropCurrent) >= 0.32)) {
            UnitIssueOrder(lp_nerazimHT, OrderTargetingPoint(AbilityCommand("NerazimHighTemplarCurse", 0), AIBestTargetPoint(lv_enemyGroup, 3, 120, 1.5, 3.0, UnitGetPosition(lp_nerazimHT), 7.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nerazimHT, false);
            AISetUnitSuicide(lp_nerazimHT, true);
        }
        else {
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimHT, "NerazimHighTemplarCurse", "Abil/NerazimHighTemplarCurse") <= 0.0) && (UnitGetPropertyFixed(lp_nerazimHT, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_nerazimHT, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
                UnitIssueOrder(lp_nerazimHT, OrderTargetingPoint(AbilityCommand("NerazimHighTemplarCurse", 0), AIBestTargetPoint(lv_enemyGroup, 2, 80, 1.0, 3.0, UnitGetPosition(lp_nerazimHT), 7.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_nerazimHT, false);
                AISetUnitSuicide(lp_nerazimHT, true);
            }
            else {
                if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimHT, "NerazimHighTemplarCurse", "Abil/NerazimHighTemplarCurse") <= 0.0) && (UnitGetPropertyFixed(lp_nerazimHT, c_unitPropEnergy, c_unitPropCurrent) >= 75.0)) {
                    UnitIssueOrder(lp_nerazimHT, OrderTargetingPoint(AbilityCommand("NerazimHighTemplarCurse", 0), AIBestTargetPoint(lv_enemyGroup, 1, 40, 0.5, 3.0, UnitGetPosition(lp_nerazimHT), 7.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_nerazimHT, false);
                    AISetUnitSuicide(lp_nerazimHT, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_NerazimImmortalAbility_Trigger = null;
unit auto_libNEXS_gf_NerazimImmortalAbility_lp_nerazimImmortal;

void libNEXS_gf_NerazimImmortalAbility (unit lp_nerazimImmortal) {
    auto_libNEXS_gf_NerazimImmortalAbility_lp_nerazimImmortal = lp_nerazimImmortal;

    if (auto_libNEXS_gf_NerazimImmortalAbility_Trigger == null) {
        auto_libNEXS_gf_NerazimImmortalAbility_Trigger = TriggerCreate("auto_libNEXS_gf_NerazimImmortalAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_NerazimImmortalAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_NerazimImmortalAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_nerazimImmortal = auto_libNEXS_gf_NerazimImmortalAbility_lp_nerazimImmortal;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto80BB129F_g;
    int auto80BB129F_u;
    unit auto80BB129F_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_nerazimImmortal) == true) && ((UnitGetOwner(lp_nerazimImmortal) == 3) || (UnitGetOwner(lp_nerazimImmortal) == 4) || (UnitGetOwner(lp_nerazimImmortal) == 5) || (UnitGetOwner(lp_nerazimImmortal) == 6) || (UnitGetOwner(lp_nerazimImmortal) == 7))) {
        if (((UnitGetPropertyFixed(lp_nerazimImmortal, c_unitPropShieldsPercent, c_unitPropCurrent) <= 0.5) || ((UnitGetPropertyFixed(lp_nerazimImmortal, c_unitPropShieldsPercent, c_unitPropCurrent) <= 0.8) && (UnitGetPropertyFixed(lp_nerazimImmortal, c_unitPropLifePercent, c_unitPropCurrent) <= 0.5)))) {
            lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nerazimImmortal), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nerazimImmortal), 16.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
            auto80BB129F_g = lv_enemyGroup;
            auto80BB129F_u = UnitGroupCount(auto80BB129F_g, c_unitCountAll);
            for (;; auto80BB129F_u -= 1) {
                auto80BB129F_var = UnitGroupUnitFromEnd(auto80BB129F_g, auto80BB129F_u);
                if (auto80BB129F_var == null) { break; }
                if ((UnitInRangeAndAbleToAttackTarget(auto80BB129F_var, lp_nerazimImmortal) == true)) {
                }
                else {
                    UnitGroupRemove(lv_enemyGroup, auto80BB129F_var);
                }
            }
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimImmortal, "NerazimImmortalBlink", "Abil/NerazimImmortalBlink") <= 0.0)) {
                UnitIssueOrder(lp_nerazimImmortal, OrderTargetingPoint(AbilityCommand("NerazimImmortalBlink", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_nerazimImmortal), -8.0, UnitGetPosition(UnitGroupClosestToPoint(lv_enemyGroup, UnitGetPosition(lp_nerazimImmortal))))), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_nerazimImmortal, false);
                AISetUnitSuicide(lp_nerazimImmortal, true);
            }

        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_NerazimStalkerAbility_Trigger = null;
unit auto_libNEXS_gf_NerazimStalkerAbility_lp_nerazimStalker;

void libNEXS_gf_NerazimStalkerAbility (unit lp_nerazimStalker) {
    auto_libNEXS_gf_NerazimStalkerAbility_lp_nerazimStalker = lp_nerazimStalker;

    if (auto_libNEXS_gf_NerazimStalkerAbility_Trigger == null) {
        auto_libNEXS_gf_NerazimStalkerAbility_Trigger = TriggerCreate("auto_libNEXS_gf_NerazimStalkerAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_NerazimStalkerAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_NerazimStalkerAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_nerazimStalker = auto_libNEXS_gf_NerazimStalkerAbility_lp_nerazimStalker;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto98A526E2_g;
    int auto98A526E2_u;
    unit auto98A526E2_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_nerazimStalker) == true) && ((UnitGetOwner(lp_nerazimStalker) == 3) || (UnitGetOwner(lp_nerazimStalker) == 4) || (UnitGetOwner(lp_nerazimStalker) == 5) || (UnitGetOwner(lp_nerazimStalker) == 6) || (UnitGetOwner(lp_nerazimStalker) == 7))) {
        if (((UnitGetPropertyFixed(lp_nerazimStalker, c_unitPropShieldsPercent, c_unitPropCurrent) <= 0.5) || ((UnitGetPropertyFixed(lp_nerazimStalker, c_unitPropShieldsPercent, c_unitPropCurrent) <= 0.8) && (UnitGetPropertyFixed(lp_nerazimStalker, c_unitPropLifePercent, c_unitPropCurrent) <= 0.5)))) {
            lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nerazimStalker), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nerazimStalker), 16.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
            auto98A526E2_g = lv_enemyGroup;
            auto98A526E2_u = UnitGroupCount(auto98A526E2_g, c_unitCountAll);
            for (;; auto98A526E2_u -= 1) {
                auto98A526E2_var = UnitGroupUnitFromEnd(auto98A526E2_g, auto98A526E2_u);
                if (auto98A526E2_var == null) { break; }
                if ((UnitInRangeAndAbleToAttackTarget(auto98A526E2_var, lp_nerazimStalker) == true)) {
                }
                else {
                    UnitGroupRemove(lv_enemyGroup, auto98A526E2_var);
                }
            }
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nerazimStalker, "NerazimStalkerBlink", "BlinkBlink2BlinkStalkerNerazimBlinkBlinkBlink2BlinkNerazimStalkerBlink") <= 0.0)) {
                UnitIssueOrder(lp_nerazimStalker, OrderTargetingPoint(AbilityCommand("NerazimStalkerBlink", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_nerazimStalker), -8.0, UnitGetPosition(UnitGroupClosestToPoint(lv_enemyGroup, UnitGetPosition(lp_nerazimStalker))))), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_nerazimStalker, false);
                AISetUnitSuicide(lp_nerazimStalker, true);
            }

        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_NestDefilerAbility1_Trigger = null;
unit auto_libNEXS_gf_NestDefilerAbility1_lp_nestDefiler;

void libNEXS_gf_NestDefilerAbility1 (unit lp_nestDefiler) {
    auto_libNEXS_gf_NestDefilerAbility1_lp_nestDefiler = lp_nestDefiler;

    if (auto_libNEXS_gf_NestDefilerAbility1_Trigger == null) {
        auto_libNEXS_gf_NestDefilerAbility1_Trigger = TriggerCreate("auto_libNEXS_gf_NestDefilerAbility1_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_NestDefilerAbility1_Trigger, false, false);
}

bool auto_libNEXS_gf_NestDefilerAbility1_TriggerFunc (bool testConds, bool runActions) {
    unit lp_nestDefiler = auto_libNEXS_gf_NestDefilerAbility1_lp_nestDefiler;

    // Variable Declarations
    unitgroup lv_alliedGroup;
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto10FFFA2B_g;
    int auto10FFFA2B_u;
    unit auto10FFFA2B_var;

    // Variable Initialization
    lv_alliedGroup = UnitGroupEmpty();
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_nestDefiler) == true) && ((UnitGetOwner(lp_nestDefiler) == 3) || (UnitGetOwner(lp_nestDefiler) == 4) || (UnitGetOwner(lp_nestDefiler) == 5) || (UnitGetOwner(lp_nestDefiler) == 6) || (UnitGetOwner(lp_nestDefiler) == 7))) {
        lv_alliedGroup = UnitGroupAlliance(UnitGetOwner(lp_nestDefiler), c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_nestDefiler), 13.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto10FFFA2B_g = lv_alliedGroup;
        auto10FFFA2B_u = UnitGroupCount(auto10FFFA2B_g, c_unitCountAll);
        for (;; auto10FFFA2B_u -= 1) {
            auto10FFFA2B_var = UnitGroupUnitFromEnd(auto10FFFA2B_g, auto10FFFA2B_u);
            if (auto10FFFA2B_var == null) { break; }
            if ((UnitHasBehavior2(auto10FFFA2B_var, "DarkSwarm") == true)) {
                UnitGroupRemove(lv_alliedGroup, auto10FFFA2B_var);
            }

        }
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nestDefiler), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nestDefiler), 23.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nestDefiler, "NestDefilerDarkSwarm", "Abil/NestDefilerDarkSwarm") <= 0.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
            UnitIssueOrder(lp_nestDefiler, OrderTargetingPoint(AbilityCommand("NestDefilerDarkSwarm", 0), AIBestTargetPoint(lv_alliedGroup, 3, 0, 0.0, 4.0, UnitGetPosition(lp_nestDefiler), 9.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nestDefiler, false);
            AISetUnitSuicide(lp_nestDefiler, true);
        }
        else {
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nestDefiler, "NestDefilerDarkSwarm", "Abil/NestDefilerDarkSwarm") <= 0.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropLifePercent, c_unitPropCurrent) >= 0.33)) {
                UnitIssueOrder(lp_nestDefiler, OrderTargetingPoint(AbilityCommand("NestDefilerDarkSwarm", 0), AIBestTargetPoint(lv_alliedGroup, 2, 0, 0.0, 4.0, UnitGetPosition(lp_nestDefiler), 9.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_nestDefiler, false);
                AISetUnitSuicide(lp_nestDefiler, true);
            }
            else {
                if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nestDefiler, "NestDefilerDarkSwarm", "Abil/NestDefilerDarkSwarm") <= 0.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropEnergy, c_unitPropCurrent) >= 50.0)) {
                    UnitIssueOrder(lp_nestDefiler, OrderTargetingPoint(AbilityCommand("NestDefilerDarkSwarm", 0), AIBestTargetPoint(lv_alliedGroup, 1, 0, 0.0, 4.0, UnitGetPosition(lp_nestDefiler), 9.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_nestDefiler, false);
                    AISetUnitSuicide(lp_nestDefiler, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_NestDefilerAbility2_Trigger = null;
unit auto_libNEXS_gf_NestDefilerAbility2_lp_nestDefiler;

void libNEXS_gf_NestDefilerAbility2 (unit lp_nestDefiler) {
    auto_libNEXS_gf_NestDefilerAbility2_lp_nestDefiler = lp_nestDefiler;

    if (auto_libNEXS_gf_NestDefilerAbility2_Trigger == null) {
        auto_libNEXS_gf_NestDefilerAbility2_Trigger = TriggerCreate("auto_libNEXS_gf_NestDefilerAbility2_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_NestDefilerAbility2_Trigger, false, false);
}

bool auto_libNEXS_gf_NestDefilerAbility2_TriggerFunc (bool testConds, bool runActions) {
    unit lp_nestDefiler = auto_libNEXS_gf_NestDefilerAbility2_lp_nestDefiler;

    // Variable Declarations
    unitgroup lv_alliedGroup;
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto64FCC56C_g;
    int auto64FCC56C_u;
    unit auto64FCC56C_var;
    unitgroup auto07B24066_g;
    int auto07B24066_u;
    unit auto07B24066_var;

    // Variable Initialization
    lv_alliedGroup = UnitGroupEmpty();
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_nestDefiler) == true) && ((UnitGetOwner(lp_nestDefiler) == 3) || (UnitGetOwner(lp_nestDefiler) == 4) || (UnitGetOwner(lp_nestDefiler) == 5) || (UnitGetOwner(lp_nestDefiler) == 6) || (UnitGetOwner(lp_nestDefiler) == 7))) {
        lv_alliedGroup = UnitGroupAlliance(UnitGetOwner(lp_nestDefiler), c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_nestDefiler), 13.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto64FCC56C_g = lv_alliedGroup;
        auto64FCC56C_u = UnitGroupCount(auto64FCC56C_g, c_unitCountAll);
        for (;; auto64FCC56C_u -= 1) {
            auto64FCC56C_var = UnitGroupUnitFromEnd(auto64FCC56C_g, auto64FCC56C_u);
            if (auto64FCC56C_var == null) { break; }
            if ((UnitHasBehavior2(auto64FCC56C_var, "DarkSwarm") == true)) {
                UnitGroupRemove(lv_alliedGroup, auto64FCC56C_var);
            }

        }
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nestDefiler), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nestDefiler), 23.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nestDefiler, "NestDefilerDarkSwarm", "Abil/NestDefilerDarkSwarm") <= 0.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
            UnitIssueOrder(lp_nestDefiler, OrderTargetingPoint(AbilityCommand("NestDefilerDarkSwarm", 0), AIBestTargetPoint(lv_alliedGroup, 3, 0, 0.0, 4.0, UnitGetPosition(lp_nestDefiler), 9.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nestDefiler, false);
            AISetUnitSuicide(lp_nestDefiler, true);
        }
        else {
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nestDefiler, "NestDefilerDarkSwarm", "Abil/NestDefilerDarkSwarm") <= 0.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropLifePercent, c_unitPropCurrent) >= 0.33)) {
                UnitIssueOrder(lp_nestDefiler, OrderTargetingPoint(AbilityCommand("NestDefilerDarkSwarm", 0), AIBestTargetPoint(lv_alliedGroup, 2, 0, 0.0, 4.0, UnitGetPosition(lp_nestDefiler), 9.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_nestDefiler, false);
                AISetUnitSuicide(lp_nestDefiler, true);
            }
            else {
                if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_nestDefiler, "NestDefilerDarkSwarm", "Abil/NestDefilerDarkSwarm") <= 0.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropEnergy, c_unitPropCurrent) >= 50.0)) {
                    UnitIssueOrder(lp_nestDefiler, OrderTargetingPoint(AbilityCommand("NestDefilerDarkSwarm", 0), AIBestTargetPoint(lv_alliedGroup, 1, 0, 0.0, 4.0, UnitGetPosition(lp_nestDefiler), 9.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_nestDefiler, false);
                    AISetUnitSuicide(lp_nestDefiler, true);
                }

            }
        }
        Wait(0.05, c_timeAI);
        lv_enemyGroup = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nestDefiler), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nestDefiler), 9.5), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto07B24066_g = lv_enemyGroup;
        auto07B24066_u = UnitGroupCount(auto07B24066_g, c_unitCountAll);
        for (;; auto07B24066_u -= 1) {
            auto07B24066_var = UnitGroupUnitFromEnd(auto07B24066_g, auto07B24066_u);
            if (auto07B24066_var == null) { break; }
            if ((UnitHasBehavior2(auto07B24066_var, "NestDefilerPlague") == true)) {
                UnitGroupRemove(lv_enemyGroup, auto07B24066_var);
            }

        }
        if ((UnitAbilityGetCooldown(lp_nestDefiler, "NestDefilerPlague", "Abil/NestDefilerPlague") <= 0.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropEnergy, c_unitPropCurrent) >= 150.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
            UnitIssueOrder(lp_nestDefiler, OrderTargetingPoint(AbilityCommand("NestDefilerPlague", 0), AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 1.5, UnitGetPosition(lp_nestDefiler), 8.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nestDefiler, false);
            AISetUnitSuicide(lp_nestDefiler, true);
        }
        else {
            if ((UnitAbilityGetCooldown(lp_nestDefiler, "NestDefilerPlague", "Abil/NestDefilerPlague") <= 0.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropEnergy, c_unitPropCurrent) >= 150.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropLifePercent, c_unitPropCurrent) >= 0.33)) {
                UnitIssueOrder(lp_nestDefiler, OrderTargetingPoint(AbilityCommand("NestDefilerPlague", 0), AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 1.5, UnitGetPosition(lp_nestDefiler), 8.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_nestDefiler, false);
                AISetUnitSuicide(lp_nestDefiler, true);
            }
            else {
                if ((UnitAbilityGetCooldown(lp_nestDefiler, "NestDefilerPlague", "Abil/NestDefilerPlague") <= 0.0) && (UnitGetPropertyFixed(lp_nestDefiler, c_unitPropEnergy, c_unitPropCurrent) >= 150.0)) {
                    UnitIssueOrder(lp_nestDefiler, OrderTargetingPoint(AbilityCommand("NestDefilerPlague", 0), AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 1.5, UnitGetPosition(lp_nestDefiler), 8.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_nestDefiler, false);
                    AISetUnitSuicide(lp_nestDefiler, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_NestLurkerAbility_Trigger = null;
unit auto_libNEXS_gf_NestLurkerAbility_lp_nestLurker;

void libNEXS_gf_NestLurkerAbility (unit lp_nestLurker) {
    auto_libNEXS_gf_NestLurkerAbility_lp_nestLurker = lp_nestLurker;

    if (auto_libNEXS_gf_NestLurkerAbility_Trigger == null) {
        auto_libNEXS_gf_NestLurkerAbility_Trigger = TriggerCreate("auto_libNEXS_gf_NestLurkerAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_NestLurkerAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_NestLurkerAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_nestLurker = auto_libNEXS_gf_NestLurkerAbility_lp_nestLurker;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_nestLurker) == true) && ((UnitGetOwner(lp_nestLurker) == 3) || (UnitGetOwner(lp_nestLurker) == 4) || (UnitGetOwner(lp_nestLurker) == 5) || (UnitGetOwner(lp_nestLurker) == 6) || (UnitGetOwner(lp_nestLurker) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nestLurker), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nestLurker), libNEXS_gv_nestLurkerSearchArea), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitHasBehavior2(EventUnit(), "NestLurkerWeaponDisabled") == true)) {
            UnitIssueOrder(lp_nestLurker, Order(AbilityCommand("NestLurkerBurrowDown", 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nestLurker, false);
            AISetUnitSuicide(lp_nestLurker, true);
        }
        else {
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) == 0) && (UnitHasBehavior2(EventUnit(), "NestLurkerWeaponDisabled") == false)) {
                UnitIssueOrder(lp_nestLurker, Order(AbilityCommand("NestLurkerBurrowUp", 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_nestLurker, false);
                AISetUnitSuicide(lp_nestLurker, true);
            }

        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_NestQueenAbility1_Trigger = null;
unit auto_libNEXS_gf_NestQueenAbility1_lp_nestQueen;

void libNEXS_gf_NestQueenAbility1 (unit lp_nestQueen) {
    auto_libNEXS_gf_NestQueenAbility1_lp_nestQueen = lp_nestQueen;

    if (auto_libNEXS_gf_NestQueenAbility1_Trigger == null) {
        auto_libNEXS_gf_NestQueenAbility1_Trigger = TriggerCreate("auto_libNEXS_gf_NestQueenAbility1_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_NestQueenAbility1_Trigger, false, false);
}

bool auto_libNEXS_gf_NestQueenAbility1_TriggerFunc (bool testConds, bool runActions) {
    unit lp_nestQueen = auto_libNEXS_gf_NestQueenAbility1_lp_nestQueen;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto9DEBF66F_g;
    int auto9DEBF66F_u;
    unit auto9DEBF66F_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_nestQueen) == true) && ((UnitGetOwner(lp_nestQueen) == 3) || (UnitGetOwner(lp_nestQueen) == 4) || (UnitGetOwner(lp_nestQueen) == 5) || (UnitGetOwner(lp_nestQueen) == 6) || (UnitGetOwner(lp_nestQueen) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nestQueen), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nestQueen), 14.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto9DEBF66F_g = lv_enemyGroup;
        auto9DEBF66F_u = UnitGroupCount(auto9DEBF66F_g, c_unitCountAll);
        for (;; auto9DEBF66F_u -= 1) {
            auto9DEBF66F_var = UnitGroupUnitFromEnd(auto9DEBF66F_g, auto9DEBF66F_u);
            if (auto9DEBF66F_var == null) { break; }
            if ((UnitHasBehavior2(auto9DEBF66F_var, "NestQueenFungalGrowthMovement2") == true)) {
                UnitGroupRemove(lv_enemyGroup, auto9DEBF66F_var);
            }

        }
        if ((UnitAbilityGetCooldown(lp_nestQueen, "NestQueenFungalGrowth", "Abil/NestQueenFungalGrowth") <= 0.0) && (UnitGetPropertyFixed(lp_nestQueen, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_nestQueen, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
            UnitIssueOrder(lp_nestQueen, OrderTargetingPoint(AbilityCommand("NestQueenFungalGrowth", 0), AIBestTargetPoint(lv_enemyGroup, 3, 160, 1.5, 2.0, UnitGetPosition(lp_nestQueen), 12.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nestQueen, false);
            AISetUnitSuicide(lp_nestQueen, true);
        }
        else {
            if ((UnitAbilityGetCooldown(lp_nestQueen, "NestQueenFungalGrowth", "Abil/NestQueenFungalGrowth") <= 0.0) && (UnitGetPropertyFixed(lp_nestQueen, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_nestQueen, c_unitPropLifePercent, c_unitPropCurrent) >= 0.33)) {
                UnitIssueOrder(lp_nestQueen, OrderTargetingPoint(AbilityCommand("NestQueenFungalGrowth", 0), AIBestTargetPoint(lv_enemyGroup, 2, 110, 1.0, 2.0, UnitGetPosition(lp_nestQueen), 12.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_nestQueen, false);
                AISetUnitSuicide(lp_nestQueen, true);
            }
            else {
                if ((UnitAbilityGetCooldown(lp_nestQueen, "NestQueenFungalGrowth", "Abil/NestQueenFungalGrowth") <= 0.0) && (UnitGetPropertyFixed(lp_nestQueen, c_unitPropEnergy, c_unitPropCurrent) >= 75.0)) {
                    UnitIssueOrder(lp_nestQueen, OrderTargetingPoint(AbilityCommand("NestQueenFungalGrowth", 0), AIBestTargetPoint(lv_enemyGroup, 1, 60, 0.5, 2.0, UnitGetPosition(lp_nestQueen), 12.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_nestQueen, false);
                    AISetUnitSuicide(lp_nestQueen, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_NestQueenAbility2_Trigger = null;
unit auto_libNEXS_gf_NestQueenAbility2_lp_nestQueen;

void libNEXS_gf_NestQueenAbility2 (unit lp_nestQueen) {
    auto_libNEXS_gf_NestQueenAbility2_lp_nestQueen = lp_nestQueen;

    if (auto_libNEXS_gf_NestQueenAbility2_Trigger == null) {
        auto_libNEXS_gf_NestQueenAbility2_Trigger = TriggerCreate("auto_libNEXS_gf_NestQueenAbility2_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_NestQueenAbility2_Trigger, false, false);
}

bool auto_libNEXS_gf_NestQueenAbility2_TriggerFunc (bool testConds, bool runActions) {
    unit lp_nestQueen = auto_libNEXS_gf_NestQueenAbility2_lp_nestQueen;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto40E2C939_g;
    int auto40E2C939_u;
    unit auto40E2C939_var;
    unitgroup auto7754F751_g;
    int auto7754F751_u;
    unit auto7754F751_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_nestQueen) == true) && ((UnitGetOwner(lp_nestQueen) == 3) || (UnitGetOwner(lp_nestQueen) == 4) || (UnitGetOwner(lp_nestQueen) == 5) || (UnitGetOwner(lp_nestQueen) == 6) || (UnitGetOwner(lp_nestQueen) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nestQueen), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nestQueen), 14.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto40E2C939_g = lv_enemyGroup;
        auto40E2C939_u = UnitGroupCount(auto40E2C939_g, c_unitCountAll);
        for (;; auto40E2C939_u -= 1) {
            auto40E2C939_var = UnitGroupUnitFromEnd(auto40E2C939_g, auto40E2C939_u);
            if (auto40E2C939_var == null) { break; }
            if ((UnitHasBehavior2(auto40E2C939_var, "NestQueenFungalGrowthMovement2") == true)) {
                UnitGroupRemove(lv_enemyGroup, auto40E2C939_var);
            }

        }
        if ((UnitAbilityGetCooldown(lp_nestQueen, "NestQueenFungalGrowth", "Abil/NestQueenFungalGrowth") <= 0.0) && (UnitGetPropertyFixed(lp_nestQueen, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_nestQueen, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
            UnitIssueOrder(lp_nestQueen, OrderTargetingPoint(AbilityCommand("NestQueenFungalGrowth", 0), AIBestTargetPoint(lv_enemyGroup, 3, 160, 1.5, 2.0, UnitGetPosition(lp_nestQueen), 12.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nestQueen, false);
            AISetUnitSuicide(lp_nestQueen, true);
        }
        else {
            if ((UnitAbilityGetCooldown(lp_nestQueen, "NestQueenFungalGrowth", "Abil/NestQueenFungalGrowth") <= 0.0) && (UnitGetPropertyFixed(lp_nestQueen, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_nestQueen, c_unitPropLifePercent, c_unitPropCurrent) >= 0.33)) {
                UnitIssueOrder(lp_nestQueen, OrderTargetingPoint(AbilityCommand("NestQueenFungalGrowth", 0), AIBestTargetPoint(lv_enemyGroup, 2, 110, 1.0, 2.0, UnitGetPosition(lp_nestQueen), 12.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_nestQueen, false);
                AISetUnitSuicide(lp_nestQueen, true);
            }
            else {
                if ((UnitAbilityGetCooldown(lp_nestQueen, "NestQueenFungalGrowth", "Abil/NestQueenFungalGrowth") <= 0.0) && (UnitGetPropertyFixed(lp_nestQueen, c_unitPropEnergy, c_unitPropCurrent) >= 75.0)) {
                    UnitIssueOrder(lp_nestQueen, OrderTargetingPoint(AbilityCommand("NestQueenFungalGrowth", 0), AIBestTargetPoint(lv_enemyGroup, 1, 60, 0.5, 2.0, UnitGetPosition(lp_nestQueen), 12.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_nestQueen, false);
                    AISetUnitSuicide(lp_nestQueen, true);
                }

            }
        }
        lv_enemyGroup = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_nestQueen), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_nestQueen), 11.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterHeroUnit - 32))), 0);
        auto7754F751_g = lv_enemyGroup;
        auto7754F751_u = UnitGroupCount(auto7754F751_g, c_unitCountAll);
        for (;; auto7754F751_u -= 1) {
            auto7754F751_var = UnitGroupUnitFromEnd(auto7754F751_g, auto7754F751_u);
            if (auto7754F751_var == null) { break; }
            if ((((UnitGetPropertyFixed(auto7754F751_var, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(auto7754F751_var, c_unitPropShields, c_unitPropCurrent)) >= 200.0) || (UnitTypeGetProperty(UnitGetType(auto7754F751_var), c_unitPropSuppliesUsed) >= 3.0))) {
            }
            else {
                UnitGroupRemove(lv_enemyGroup, auto7754F751_var);
            }
        }
        if ((UnitAbilityGetCooldown(lp_nestQueen, "NestQueenBlastKill", "Abil/NestQueenBlastKill") <= 0.0) && (UnitGetPropertyFixed(lp_nestQueen, c_unitPropEnergy, c_unitPropCurrent) >= 100.0)) {
            UnitIssueOrder(lp_nestQueen, OrderTargetingUnit(AbilityCommand("NestQueenBlastKill", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_nestQueen, false);
            AISetUnitSuicide(lp_nestQueen, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_TaldarimHTAbility1_Trigger = null;
unit auto_libNEXS_gf_TaldarimHTAbility1_lp_taldarimHT;

void libNEXS_gf_TaldarimHTAbility1 (unit lp_taldarimHT) {
    auto_libNEXS_gf_TaldarimHTAbility1_lp_taldarimHT = lp_taldarimHT;

    if (auto_libNEXS_gf_TaldarimHTAbility1_Trigger == null) {
        auto_libNEXS_gf_TaldarimHTAbility1_Trigger = TriggerCreate("auto_libNEXS_gf_TaldarimHTAbility1_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_TaldarimHTAbility1_Trigger, false, false);
}

bool auto_libNEXS_gf_TaldarimHTAbility1_TriggerFunc (bool testConds, bool runActions) {
    unit lp_taldarimHT = auto_libNEXS_gf_TaldarimHTAbility1_lp_taldarimHT;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_taldarimHT) == true) && ((UnitGetOwner(lp_taldarimHT) == 3) || (UnitGetOwner(lp_taldarimHT) == 4) || (UnitGetOwner(lp_taldarimHT) == 5) || (UnitGetOwner(lp_taldarimHT) == 6) || (UnitGetOwner(lp_taldarimHT) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_taldarimHT), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_taldarimHT), 13.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitAbilityGetCooldown(lp_taldarimHT, "TaldarimHighTemplarPsiOrb", "Abil/TaldarimHighTemplarPsiOrb") <= 0.0) && (UnitGetPropertyFixed(lp_taldarimHT, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_taldarimHT, c_unitPropShieldsPercent, c_unitPropCurrent) >= 0.66)) {
            UnitIssueOrder(lp_taldarimHT, OrderTargetingPoint(AbilityCommand("TaldarimHighTemplarPsiOrb", 0), AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 3.0, UnitGetPosition(lp_taldarimHT), 10.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_taldarimHT, false);
            AISetUnitSuicide(lp_taldarimHT, true);
        }
        else {
            if ((UnitAbilityGetCooldown(lp_taldarimHT, "TaldarimHighTemplarPsiOrb", "Abil/TaldarimHighTemplarPsiOrb") <= 0.0) && (UnitGetPropertyFixed(lp_taldarimHT, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_taldarimHT, c_unitPropShieldsPercent, c_unitPropCurrent) >= 0.33)) {
                UnitIssueOrder(lp_taldarimHT, OrderTargetingPoint(AbilityCommand("TaldarimHighTemplarPsiOrb", 0), AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 3.0, UnitGetPosition(lp_taldarimHT), 10.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_taldarimHT, false);
                AISetUnitSuicide(lp_taldarimHT, true);
            }
            else {
                if ((UnitAbilityGetCooldown(lp_taldarimHT, "TaldarimHighTemplarPsiOrb", "Abil/TaldarimHighTemplarPsiOrb") <= 0.0) && (UnitGetPropertyFixed(lp_taldarimHT, c_unitPropEnergy, c_unitPropCurrent) >= 75.0)) {
                    UnitIssueOrder(lp_taldarimHT, OrderTargetingPoint(AbilityCommand("TaldarimHighTemplarPsiOrb", 0), AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 3.0, UnitGetPosition(lp_taldarimHT), 10.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_taldarimHT, false);
                    AISetUnitSuicide(lp_taldarimHT, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_TaldarimHTAbility2_Trigger = null;
unit auto_libNEXS_gf_TaldarimHTAbility2_lp_taldarimHT;

void libNEXS_gf_TaldarimHTAbility2 (unit lp_taldarimHT) {
    auto_libNEXS_gf_TaldarimHTAbility2_lp_taldarimHT = lp_taldarimHT;

    if (auto_libNEXS_gf_TaldarimHTAbility2_Trigger == null) {
        auto_libNEXS_gf_TaldarimHTAbility2_Trigger = TriggerCreate("auto_libNEXS_gf_TaldarimHTAbility2_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_TaldarimHTAbility2_Trigger, false, false);
}

bool auto_libNEXS_gf_TaldarimHTAbility2_TriggerFunc (bool testConds, bool runActions) {
    unit lp_taldarimHT = auto_libNEXS_gf_TaldarimHTAbility2_lp_taldarimHT;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto52118DBB_g;
    int auto52118DBB_u;
    unit auto52118DBB_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_taldarimHT) == true) && ((UnitGetOwner(lp_taldarimHT) == 3) || (UnitGetOwner(lp_taldarimHT) == 4) || (UnitGetOwner(lp_taldarimHT) == 5) || (UnitGetOwner(lp_taldarimHT) == 6) || (UnitGetOwner(lp_taldarimHT) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_taldarimHT), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_taldarimHT), 9.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto52118DBB_g = lv_enemyGroup;
        auto52118DBB_u = UnitGroupCount(auto52118DBB_g, c_unitCountAll);
        for (;; auto52118DBB_u -= 1) {
            auto52118DBB_var = UnitGroupUnitFromEnd(auto52118DBB_g, auto52118DBB_u);
            if (auto52118DBB_var == null) { break; }
            if ((((UnitGetPropertyFixed(auto52118DBB_var, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(auto52118DBB_var, c_unitPropShields, c_unitPropCurrent)) >= 200.0) || (UnitTypeTestFlag(UnitGetType(auto52118DBB_var), c_unitFlagHero) == true) || (UnitTypeGetProperty(UnitGetType(auto52118DBB_var), c_unitPropSuppliesUsed) >= 3.0))) {
            }
            else {
                UnitGroupRemove(lv_enemyGroup, auto52118DBB_var);
            }
        }
        if ((UnitAbilityGetCooldown(lp_taldarimHT, "TaldarimHighTemplarMindBlast", "Abil/TaldarimHighTemplarMindBlast") <= 0.0) && (UnitGetPropertyFixed(lp_taldarimHT, c_unitPropEnergy, c_unitPropCurrent) >= 100.0)) {
            UnitIssueOrder(lp_taldarimHT, OrderTargetingUnit(AbilityCommand("TaldarimHighTemplarMindBlast", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_taldarimHT, false);
            AISetUnitSuicide(lp_taldarimHT, true);
        }

        lv_enemyGroup = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_taldarimHT), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_taldarimHT), 13.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitAbilityGetCooldown(lp_taldarimHT, "TaldarimHighTemplarPsiOrb", "Abil/TaldarimHighTemplarPsiOrb") <= 0.0) && (UnitGetPropertyFixed(lp_taldarimHT, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_taldarimHT, c_unitPropShieldsPercent, c_unitPropCurrent) >= 0.66)) {
            UnitIssueOrder(lp_taldarimHT, OrderTargetingPoint(AbilityCommand("TaldarimHighTemplarPsiOrb", 0), AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 3.0, UnitGetPosition(lp_taldarimHT), 10.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_taldarimHT, false);
            AISetUnitSuicide(lp_taldarimHT, true);
        }
        else {
            if ((UnitAbilityGetCooldown(lp_taldarimHT, "TaldarimHighTemplarPsiOrb", "Abil/TaldarimHighTemplarPsiOrb") <= 0.0) && (UnitGetPropertyFixed(lp_taldarimHT, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_taldarimHT, c_unitPropShieldsPercent, c_unitPropCurrent) >= 0.33)) {
                UnitIssueOrder(lp_taldarimHT, OrderTargetingPoint(AbilityCommand("TaldarimHighTemplarPsiOrb", 0), AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 3.0, UnitGetPosition(lp_taldarimHT), 10.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_taldarimHT, false);
                AISetUnitSuicide(lp_taldarimHT, true);
            }
            else {
                if ((UnitAbilityGetCooldown(lp_taldarimHT, "TaldarimHighTemplarPsiOrb", "Abil/TaldarimHighTemplarPsiOrb") <= 0.0) && (UnitGetPropertyFixed(lp_taldarimHT, c_unitPropEnergy, c_unitPropCurrent) >= 75.0)) {
                    UnitIssueOrder(lp_taldarimHT, OrderTargetingPoint(AbilityCommand("TaldarimHighTemplarPsiOrb", 0), AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 3.0, UnitGetPosition(lp_taldarimHT), 10.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_taldarimHT, false);
                    AISetUnitSuicide(lp_taldarimHT, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_TaldarimMothershipAbility_Trigger = null;
unit auto_libNEXS_gf_TaldarimMothershipAbility_lp_taldarimMothership;

void libNEXS_gf_TaldarimMothershipAbility (unit lp_taldarimMothership) {
    auto_libNEXS_gf_TaldarimMothershipAbility_lp_taldarimMothership = lp_taldarimMothership;

    if (auto_libNEXS_gf_TaldarimMothershipAbility_Trigger == null) {
        auto_libNEXS_gf_TaldarimMothershipAbility_Trigger = TriggerCreate("auto_libNEXS_gf_TaldarimMothershipAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_TaldarimMothershipAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_TaldarimMothershipAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_taldarimMothership = auto_libNEXS_gf_TaldarimMothershipAbility_lp_taldarimMothership;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_taldarimMothership) == true) && ((UnitGetOwner(lp_taldarimMothership) == 3) || (UnitGetOwner(lp_taldarimMothership) == 4) || (UnitGetOwner(lp_taldarimMothership) == 5) || (UnitGetOwner(lp_taldarimMothership) == 6) || (UnitGetOwner(lp_taldarimMothership) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_taldarimMothership), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_taldarimMothership), 6.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitAbilityGetCooldown(lp_taldarimMothership, "TaldarimMothershipGravityBomb", "Abil/TaldarimMothershipGravityBomb") <= 0.0) && (UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 3) && (UnitGetPropertyFixed(lp_taldarimMothership, c_unitPropEnergy, c_unitPropCurrent) >= 50.0)) {
            UnitIssueOrder(lp_taldarimMothership, Order(AbilityCommand("TaldarimMothershipGravityBomb", 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_taldarimMothership, false);
            AISetUnitSuicide(lp_taldarimMothership, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_TaldarimMothershipCoreAbility_Trigger = null;
unit auto_libNEXS_gf_TaldarimMothershipCoreAbility_lp_taldarimMothershipCore;

void libNEXS_gf_TaldarimMothershipCoreAbility (unit lp_taldarimMothershipCore) {
    auto_libNEXS_gf_TaldarimMothershipCoreAbility_lp_taldarimMothershipCore = lp_taldarimMothershipCore;

    if (auto_libNEXS_gf_TaldarimMothershipCoreAbility_Trigger == null) {
        auto_libNEXS_gf_TaldarimMothershipCoreAbility_Trigger = TriggerCreate("auto_libNEXS_gf_TaldarimMothershipCoreAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_TaldarimMothershipCoreAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_TaldarimMothershipCoreAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_taldarimMothershipCore = auto_libNEXS_gf_TaldarimMothershipCoreAbility_lp_taldarimMothershipCore;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup auto6C0CABDA_g;
    int auto6C0CABDA_u;
    unit auto6C0CABDA_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_taldarimMothershipCore) == true) && ((UnitGetOwner(lp_taldarimMothershipCore) == 3) || (UnitGetOwner(lp_taldarimMothershipCore) == 4) || (UnitGetOwner(lp_taldarimMothershipCore) == 5) || (UnitGetOwner(lp_taldarimMothershipCore) == 6) || (UnitGetOwner(lp_taldarimMothershipCore) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_taldarimMothershipCore), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_taldarimMothershipCore), 12.25), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto6C0CABDA_g = lv_enemyGroup;
        auto6C0CABDA_u = UnitGroupCount(auto6C0CABDA_g, c_unitCountAll);
        for (;; auto6C0CABDA_u -= 1) {
            auto6C0CABDA_var = UnitGroupUnitFromEnd(auto6C0CABDA_g, auto6C0CABDA_u);
            if (auto6C0CABDA_var == null) { break; }
            if ((UnitHasBehavior2(auto6C0CABDA_var, "TaldarimMothershipTemporalRiftUnit") == true)) {
                UnitGroupRemove(lv_enemyGroup, auto6C0CABDA_var);
            }

        }
        if ((UnitAbilityGetCooldown(lp_taldarimMothershipCore, "TaldarimMothershipCoreTemporalField", "Abil/TaldarimMothershipCoreTemporalField") <= 0.0) && (UnitGetPropertyFixed(lp_taldarimMothershipCore, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitGetPropertyFixed(lp_taldarimMothershipCore, c_unitPropShieldsPercent, c_unitPropCurrent) >= 0.32)) {
            UnitIssueOrder(lp_taldarimMothershipCore, OrderTargetingPoint(AbilityCommand("TaldarimMothershipCoreTemporalField", 0), AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 3.25, UnitGetPosition(lp_taldarimMothershipCore), 9.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_taldarimMothershipCore, false);
            AISetUnitSuicide(lp_taldarimMothershipCore, true);
        }
        else {
            if ((UnitAbilityGetCooldown(lp_taldarimMothershipCore, "TaldarimMothershipCoreTemporalField", "Abil/TaldarimMothershipCoreTemporalField") <= 0.0) && (UnitGetPropertyFixed(lp_taldarimMothershipCore, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitGetPropertyFixed(lp_taldarimMothershipCore, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
                UnitIssueOrder(lp_taldarimMothershipCore, OrderTargetingPoint(AbilityCommand("TaldarimMothershipCoreTemporalField", 0), AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 3.25, UnitGetPosition(lp_taldarimMothershipCore), 9.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_taldarimMothershipCore, false);
                AISetUnitSuicide(lp_taldarimMothershipCore, true);
            }
            else {
                if ((UnitAbilityGetCooldown(lp_taldarimMothershipCore, "TaldarimMothershipCoreTemporalField", "Abil/TaldarimMothershipCoreTemporalField") <= 0.0) && (UnitGetPropertyFixed(lp_taldarimMothershipCore, c_unitPropEnergy, c_unitPropCurrent) >= 50.0)) {
                    UnitIssueOrder(lp_taldarimMothershipCore, OrderTargetingPoint(AbilityCommand("TaldarimMothershipCoreTemporalField", 0), AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 3.25, UnitGetPosition(lp_taldarimMothershipCore), 9.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_taldarimMothershipCore, false);
                    AISetUnitSuicide(lp_taldarimMothershipCore, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_TaldarimSentryAbility_Trigger = null;
unit auto_libNEXS_gf_TaldarimSentryAbility_lp_taldarimSentry;

void libNEXS_gf_TaldarimSentryAbility (unit lp_taldarimSentry) {
    auto_libNEXS_gf_TaldarimSentryAbility_lp_taldarimSentry = lp_taldarimSentry;

    if (auto_libNEXS_gf_TaldarimSentryAbility_Trigger == null) {
        auto_libNEXS_gf_TaldarimSentryAbility_Trigger = TriggerCreate("auto_libNEXS_gf_TaldarimSentryAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_TaldarimSentryAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_TaldarimSentryAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_taldarimSentry = auto_libNEXS_gf_TaldarimSentryAbility_lp_taldarimSentry;

    // Variable Declarations
    unitgroup lv_enemyGroup;
    point lv_targetPoint;

    // Automatic Variable Declarations
    unitgroup autoD641F97A_g;
    int autoD641F97A_u;
    unit autoD641F97A_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_taldarimSentry) == true) && ((UnitGetOwner(lp_taldarimSentry) == 3) || (UnitGetOwner(lp_taldarimSentry) == 4) || (UnitGetOwner(lp_taldarimSentry) == 5) || (UnitGetOwner(lp_taldarimSentry) == 6) || (UnitGetOwner(lp_taldarimSentry) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_taldarimSentry), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_taldarimSentry), 6.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterMassive) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoD641F97A_g = lv_enemyGroup;
        autoD641F97A_u = UnitGroupCount(autoD641F97A_g, c_unitCountAll);
        for (;; autoD641F97A_u -= 1) {
            autoD641F97A_var = UnitGroupUnitFromEnd(autoD641F97A_g, autoD641F97A_u);
            if (autoD641F97A_var == null) { break; }
            if ((UnitWeaponRange(autoD641F97A_var, 1) > 5.0)) {
                UnitGroupRemove(lv_enemyGroup, autoD641F97A_var);
            }

        }
        if ((UnitAbilityGetCooldown(lp_taldarimSentry, "TaldarimSentryForceField", "Abil/TaldarimSentryForceField") <= 0.0)) {
            lv_targetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(UnitGroupClosestToPoint(lv_enemyGroup, UnitGetPosition(lp_taldarimSentry))), 1.0, UnitGetPosition(lp_taldarimSentry));
            if ((UnitCount("ForceField", c_playerAny, RegionCircle(lv_targetPoint, 1.5), UnitFilter(0, 0, 0, 0), 0) >= 1)) {
            }
            else {
                UnitIssueOrder(lp_taldarimSentry, OrderTargetingPoint(AbilityCommand("TaldarimSentryForceField", 0), lv_targetPoint), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_taldarimSentry, false);
                AISetUnitSuicide(lp_taldarimSentry, true);
            }
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_TaldarimStalkerAbility_Trigger = null;
unit auto_libNEXS_gf_TaldarimStalkerAbility_lp_taldarimStalker;

void libNEXS_gf_TaldarimStalkerAbility (unit lp_taldarimStalker) {
    auto_libNEXS_gf_TaldarimStalkerAbility_lp_taldarimStalker = lp_taldarimStalker;

    if (auto_libNEXS_gf_TaldarimStalkerAbility_Trigger == null) {
        auto_libNEXS_gf_TaldarimStalkerAbility_Trigger = TriggerCreate("auto_libNEXS_gf_TaldarimStalkerAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_TaldarimStalkerAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_TaldarimStalkerAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_taldarimStalker = auto_libNEXS_gf_TaldarimStalkerAbility_lp_taldarimStalker;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_taldarimStalker) == true) && ((UnitGetOwner(lp_taldarimStalker) == 3) || (UnitGetOwner(lp_taldarimStalker) == 4) || (UnitGetOwner(lp_taldarimStalker) == 5) || (UnitGetOwner(lp_taldarimStalker) == 6) || (UnitGetOwner(lp_taldarimStalker) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_taldarimStalker), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_taldarimStalker), 8.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_taldarimStalker, "TaldarimStalkerBlink", "Abil/TaldarimStalkerBlink") <= 0.0)) {
            UnitIssueOrder(lp_taldarimStalker, OrderTargetingPoint(AbilityCommand("TaldarimStalkerBlink", 0), UnitGetPosition(UnitGroupClosestToPoint(lv_enemyGroup, UnitGetPosition(lp_taldarimStalker)))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_taldarimStalker, false);
            AISetUnitSuicide(lp_taldarimStalker, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_TaldarimZealotAbility_Trigger = null;
unit auto_libNEXS_gf_TaldarimZealotAbility_lp_taldarimZealot;

void libNEXS_gf_TaldarimZealotAbility (unit lp_taldarimZealot) {
    auto_libNEXS_gf_TaldarimZealotAbility_lp_taldarimZealot = lp_taldarimZealot;

    if (auto_libNEXS_gf_TaldarimZealotAbility_Trigger == null) {
        auto_libNEXS_gf_TaldarimZealotAbility_Trigger = TriggerCreate("auto_libNEXS_gf_TaldarimZealotAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_TaldarimZealotAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_TaldarimZealotAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_taldarimZealot = auto_libNEXS_gf_TaldarimZealotAbility_lp_taldarimZealot;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_taldarimZealot) == true) && ((UnitGetOwner(lp_taldarimZealot) == 3) || (UnitGetOwner(lp_taldarimZealot) == 4) || (UnitGetOwner(lp_taldarimZealot) == 5) || (UnitGetOwner(lp_taldarimZealot) == 6) || (UnitGetOwner(lp_taldarimZealot) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_taldarimZealot), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_taldarimZealot), 2.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitAbilityGetCooldown(lp_taldarimZealot, "TaldarimZealotShockwave", "Abil/TaldarimZealotShockwave") <= 0.0) && (UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 2)) {
            UnitIssueOrder(lp_taldarimZealot, Order(AbilityCommand("TaldarimZealotShockwave", 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_taldarimZealot, false);
            AISetUnitSuicide(lp_taldarimZealot, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_KelMorianAPCAbility_Trigger = null;
unit auto_libNEXS_gf_KelMorianAPCAbility_lp_kelMorianAPC;

void libNEXS_gf_KelMorianAPCAbility (unit lp_kelMorianAPC) {
    auto_libNEXS_gf_KelMorianAPCAbility_lp_kelMorianAPC = lp_kelMorianAPC;

    if (auto_libNEXS_gf_KelMorianAPCAbility_Trigger == null) {
        auto_libNEXS_gf_KelMorianAPCAbility_Trigger = TriggerCreate("auto_libNEXS_gf_KelMorianAPCAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_KelMorianAPCAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_KelMorianAPCAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_kelMorianAPC = auto_libNEXS_gf_KelMorianAPCAbility_lp_kelMorianAPC;

    // Automatic Variable Declarations
    // Implementation
    Wait(5.0, c_timeAI);
    if ((UnitIsAlive(lp_kelMorianAPC) == true)) {
        UnitCargoCreate(lp_kelMorianAPC, "KelMorianMiner", 4);
        UnitCargoCreate(lp_kelMorianAPC, "KelMorianCivilianMale", 2);
        UnitCargoCreate(lp_kelMorianAPC, "KelMorianCivilianFemale", 2);
    }

    return true;
}

trigger auto_libNEXS_gf_KelMorianRavenAbility_Trigger = null;
unit auto_libNEXS_gf_KelMorianRavenAbility_lp_kelMorianRaven;

void libNEXS_gf_KelMorianRavenAbility (unit lp_kelMorianRaven) {
    auto_libNEXS_gf_KelMorianRavenAbility_lp_kelMorianRaven = lp_kelMorianRaven;

    if (auto_libNEXS_gf_KelMorianRavenAbility_Trigger == null) {
        auto_libNEXS_gf_KelMorianRavenAbility_Trigger = TriggerCreate("auto_libNEXS_gf_KelMorianRavenAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_KelMorianRavenAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_KelMorianRavenAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_kelMorianRaven = auto_libNEXS_gf_KelMorianRavenAbility_lp_kelMorianRaven;

    // Variable Declarations
    unitgroup lv_alliedGroup;

    // Automatic Variable Declarations
    unitgroup auto33F19213_g;
    int auto33F19213_u;
    unit auto33F19213_var;

    // Variable Initialization
    lv_alliedGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_kelMorianRaven) == true) && ((UnitGetOwner(lp_kelMorianRaven) == 3) || (UnitGetOwner(lp_kelMorianRaven) == 4) || (UnitGetOwner(lp_kelMorianRaven) == 5) || (UnitGetOwner(lp_kelMorianRaven) == 6) || (UnitGetOwner(lp_kelMorianRaven) == 7))) {
        lv_alliedGroup = UnitGroupAlliance(UnitGetOwner(lp_kelMorianRaven), c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_kelMorianRaven), 8.0), UnitFilter((1 << c_targetFilterMechanical), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto33F19213_g = lv_alliedGroup;
        auto33F19213_u = UnitGroupCount(auto33F19213_g, c_unitCountAll);
        for (;; auto33F19213_u -= 1) {
            auto33F19213_var = UnitGroupUnitFromEnd(auto33F19213_g, auto33F19213_u);
            if (auto33F19213_var == null) { break; }
            if ((UnitGetPropertyFixed(auto33F19213_var, c_unitPropLife, c_unitPropCurrent) > 200.0)) {
                UnitGroupRemove(lv_alliedGroup, auto33F19213_var);
            }

        }
        if ((UnitAbilityGetCooldown(lp_kelMorianRaven, "KelMorianRavenArmorRepair", "Abil/KelMorianRavenArmorRepair") <= 0.0)) {
            UnitIssueOrder(lp_kelMorianRaven, OrderTargetingUnit(AbilityCommand("KelMorianRavenArmorRepair", 0), UnitGroupRandomUnit(lv_alliedGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_kelMorianRaven, false);
            AISetUnitSuicide(lp_kelMorianRaven, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_KelMorianNukeTrackAbility_Trigger = null;
unit auto_libNEXS_gf_KelMorianNukeTrackAbility_lp_kelMorianNukeTrack;

void libNEXS_gf_KelMorianNukeTrackAbility (unit lp_kelMorianNukeTrack) {
    auto_libNEXS_gf_KelMorianNukeTrackAbility_lp_kelMorianNukeTrack = lp_kelMorianNukeTrack;

    if (auto_libNEXS_gf_KelMorianNukeTrackAbility_Trigger == null) {
        auto_libNEXS_gf_KelMorianNukeTrackAbility_Trigger = TriggerCreate("auto_libNEXS_gf_KelMorianNukeTrackAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_KelMorianNukeTrackAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_KelMorianNukeTrackAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_kelMorianNukeTrack = auto_libNEXS_gf_KelMorianNukeTrackAbility_lp_kelMorianNukeTrack;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_kelMorianNukeTrack) == true) && ((UnitGetOwner(lp_kelMorianNukeTrack) == 3) || (UnitGetOwner(lp_kelMorianNukeTrack) == 4) || (UnitGetOwner(lp_kelMorianNukeTrack) == 5) || (UnitGetOwner(lp_kelMorianNukeTrack) == 6) || (UnitGetOwner(lp_kelMorianNukeTrack) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_kelMorianNukeTrack), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_kelMorianNukeTrack), 20.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1)) {
            UnitIssueOrder(lp_kelMorianNukeTrack, OrderTargetingUnit(AbilityCommand("KelMorianTRUCKNukeCharge", 0), UnitGroupClosestToPoint(lv_enemyGroup, UnitGetPosition(lp_kelMorianNukeTrack))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_kelMorianNukeTrack, false);
            AISetUnitSuicide(lp_kelMorianNukeTrack, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_MechaBroodLordAbility_Trigger = null;
unit auto_libNEXS_gf_MechaBroodLordAbility_lp_mechaBroodLord;

void libNEXS_gf_MechaBroodLordAbility (unit lp_mechaBroodLord) {
    auto_libNEXS_gf_MechaBroodLordAbility_lp_mechaBroodLord = lp_mechaBroodLord;

    if (auto_libNEXS_gf_MechaBroodLordAbility_Trigger == null) {
        auto_libNEXS_gf_MechaBroodLordAbility_Trigger = TriggerCreate("auto_libNEXS_gf_MechaBroodLordAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_MechaBroodLordAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_MechaBroodLordAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mechaBroodLord = auto_libNEXS_gf_MechaBroodLordAbility_lp_mechaBroodLord;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mechaBroodLord) == true) && ((UnitGetOwner(lp_mechaBroodLord) == 3) || (UnitGetOwner(lp_mechaBroodLord) == 4) || (UnitGetOwner(lp_mechaBroodLord) == 5) || (UnitGetOwner(lp_mechaBroodLord) == 6) || (UnitGetOwner(lp_mechaBroodLord) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mechaBroodLord), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mechaBroodLord), 8.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mechaBroodLord, "MechaBroodLordBombingRun", "Abil/MechaBroodLordBombingRun") <= 0.0)) {
            UnitIssueOrder(lp_mechaBroodLord, OrderTargetingPoint(AbilityCommand("MechaBroodLordBombingRun", 0), AIBestTargetPoint(lv_enemyGroup, 3, 150, 0.0, 4.0, UnitGetPosition(lp_mechaBroodLord), 6.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mechaBroodLord, false);
            AISetUnitSuicide(lp_mechaBroodLord, true);
        }

        lv_enemyGroup = null;
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_MechaCorruptorAbility_Trigger = null;
unit auto_libNEXS_gf_MechaCorruptorAbility_lp_mechaCorruptor;

void libNEXS_gf_MechaCorruptorAbility (unit lp_mechaCorruptor) {
    auto_libNEXS_gf_MechaCorruptorAbility_lp_mechaCorruptor = lp_mechaCorruptor;

    if (auto_libNEXS_gf_MechaCorruptorAbility_Trigger == null) {
        auto_libNEXS_gf_MechaCorruptorAbility_Trigger = TriggerCreate("auto_libNEXS_gf_MechaCorruptorAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_MechaCorruptorAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_MechaCorruptorAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mechaCorruptor = auto_libNEXS_gf_MechaCorruptorAbility_lp_mechaCorruptor;

    // Variable Declarations
    unitgroup lv_enemyGroup;
    unitgroup lv_enemyTargetGroup;

    // Automatic Variable Declarations
    unitgroup auto2EBE71D9_g;
    int auto2EBE71D9_u;
    unit auto2EBE71D9_var;
    unitgroup auto919BEE51_g;
    int auto919BEE51_u;
    unit auto919BEE51_var;
    unitgroup auto85187AFC_g;
    int auto85187AFC_u;
    unit auto85187AFC_var;
    unitgroup autoF98DD12E_g;
    int autoF98DD12E_u;
    unit autoF98DD12E_var;
    unitgroup autoE0F6CFDF_g;
    int autoE0F6CFDF_u;
    unit autoE0F6CFDF_var;
    unitgroup auto39D09373_g;
    int auto39D09373_u;
    unit auto39D09373_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();
    lv_enemyTargetGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mechaCorruptor) == true) && ((UnitGetOwner(lp_mechaCorruptor) == 3) || (UnitGetOwner(lp_mechaCorruptor) == 4) || (UnitGetOwner(lp_mechaCorruptor) == 5) || (UnitGetOwner(lp_mechaCorruptor) == 6) || (UnitGetOwner(lp_mechaCorruptor) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mechaCorruptor), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mechaCorruptor), 3.0), UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto2EBE71D9_g = lv_enemyGroup;
        auto2EBE71D9_u = UnitGroupCount(auto2EBE71D9_g, c_unitCountAll);
        for (;; auto2EBE71D9_u -= 1) {
            auto2EBE71D9_var = UnitGroupUnitFromEnd(auto2EBE71D9_g, auto2EBE71D9_u);
            if (auto2EBE71D9_var == null) { break; }
            if ((UnitTypeTestAttribute(UnitGetType(auto2EBE71D9_var), c_unitAttributeMassive) == true)) {
                UnitGroupAdd(lv_enemyTargetGroup, auto2EBE71D9_var);
            }

        }
        if ((UnitGroupCount(lv_enemyTargetGroup, c_unitCountAlive) >= 1)) {
            UnitIssueOrder(lp_mechaCorruptor, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(lv_enemyTargetGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mechaCorruptor, false);
            AISetUnitSuicide(lp_mechaCorruptor, true);
        }
        else {
            auto919BEE51_g = lv_enemyGroup;
            auto919BEE51_u = UnitGroupCount(auto919BEE51_g, c_unitCountAll);
            for (;; auto919BEE51_u -= 1) {
                auto919BEE51_var = UnitGroupUnitFromEnd(auto919BEE51_g, auto919BEE51_u);
                if (auto919BEE51_var == null) { break; }
                if ((UnitTypeTestAttribute(UnitGetType(auto919BEE51_var), c_unitAttributeHeroic) == true)) {
                    UnitGroupAdd(lv_enemyTargetGroup, auto919BEE51_var);
                }

            }
            if ((UnitGroupCount(lv_enemyTargetGroup, c_unitCountAlive) >= 1)) {
                UnitIssueOrder(lp_mechaCorruptor, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(lv_enemyTargetGroup, c_unitCountAlive)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_mechaCorruptor, false);
                AISetUnitSuicide(lp_mechaCorruptor, true);
            }
            else {
                auto85187AFC_g = lv_enemyGroup;
                auto85187AFC_u = UnitGroupCount(auto85187AFC_g, c_unitCountAll);
                for (;; auto85187AFC_u -= 1) {
                    auto85187AFC_var = UnitGroupUnitFromEnd(auto85187AFC_g, auto85187AFC_u);
                    if (auto85187AFC_var == null) { break; }
                    if ((UnitTypeGetProperty(UnitGetType(auto85187AFC_var), c_unitPropSuppliesUsed) >= 6.0)) {
                        UnitGroupAdd(lv_enemyTargetGroup, auto85187AFC_var);
                    }

                }
                if ((UnitGroupCount(lv_enemyTargetGroup, c_unitCountAlive) >= 1)) {
                    UnitIssueOrder(lp_mechaCorruptor, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(lv_enemyTargetGroup, c_unitCountAlive)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_mechaCorruptor, false);
                    AISetUnitSuicide(lp_mechaCorruptor, true);
                }
                else {
                    autoF98DD12E_g = lv_enemyGroup;
                    autoF98DD12E_u = UnitGroupCount(autoF98DD12E_g, c_unitCountAll);
                    for (;; autoF98DD12E_u -= 1) {
                        autoF98DD12E_var = UnitGroupUnitFromEnd(autoF98DD12E_g, autoF98DD12E_u);
                        if (autoF98DD12E_var == null) { break; }
                        if ((UnitTypeGetProperty(UnitGetType(autoF98DD12E_var), c_unitPropSuppliesUsed) == 5.0)) {
                            UnitGroupAdd(lv_enemyTargetGroup, autoF98DD12E_var);
                        }

                    }
                    if ((UnitGroupCount(lv_enemyTargetGroup, c_unitCountAlive) >= 1)) {
                        UnitIssueOrder(lp_mechaCorruptor, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(lv_enemyTargetGroup, c_unitCountAlive)), c_orderQueueAddToFront);
                        Wait(0.5, c_timeAI);
                        AISetUnitScriptControlled(lp_mechaCorruptor, false);
                        AISetUnitSuicide(lp_mechaCorruptor, true);
                    }
                    else {
                        autoE0F6CFDF_g = lv_enemyGroup;
                        autoE0F6CFDF_u = UnitGroupCount(autoE0F6CFDF_g, c_unitCountAll);
                        for (;; autoE0F6CFDF_u -= 1) {
                            autoE0F6CFDF_var = UnitGroupUnitFromEnd(autoE0F6CFDF_g, autoE0F6CFDF_u);
                            if (autoE0F6CFDF_var == null) { break; }
                            if ((UnitTypeGetProperty(UnitGetType(autoE0F6CFDF_var), c_unitPropSuppliesUsed) == 4.0)) {
                                UnitGroupAdd(lv_enemyTargetGroup, autoE0F6CFDF_var);
                            }

                        }
                        if ((UnitGroupCount(lv_enemyTargetGroup, c_unitCountAlive) >= 1)) {
                            UnitIssueOrder(lp_mechaCorruptor, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(lv_enemyTargetGroup, c_unitCountAlive)), c_orderQueueAddToFront);
                            Wait(0.5, c_timeAI);
                            AISetUnitScriptControlled(lp_mechaCorruptor, false);
                            AISetUnitSuicide(lp_mechaCorruptor, true);
                        }
                        else {
                            auto39D09373_g = lv_enemyGroup;
                            auto39D09373_u = UnitGroupCount(auto39D09373_g, c_unitCountAll);
                            for (;; auto39D09373_u -= 1) {
                                auto39D09373_var = UnitGroupUnitFromEnd(auto39D09373_g, auto39D09373_u);
                                if (auto39D09373_var == null) { break; }
                                if ((UnitTypeGetProperty(UnitGetType(auto39D09373_var), c_unitPropSuppliesUsed) == 3.0)) {
                                    UnitGroupAdd(lv_enemyTargetGroup, auto39D09373_var);
                                }

                            }
                            if ((UnitGroupCount(lv_enemyTargetGroup, c_unitCountAlive) >= 1)) {
                                UnitIssueOrder(lp_mechaCorruptor, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(lv_enemyTargetGroup, c_unitCountAlive)), c_orderQueueAddToFront);
                                Wait(0.5, c_timeAI);
                                AISetUnitScriptControlled(lp_mechaCorruptor, false);
                                AISetUnitSuicide(lp_mechaCorruptor, true);
                            }

                        }
                    }
                }
            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_MechaOverlordAbility_Trigger = null;
unit auto_libNEXS_gf_MechaOverlordAbility_lp_mechaOverlord;

void libNEXS_gf_MechaOverlordAbility (unit lp_mechaOverlord) {
    auto_libNEXS_gf_MechaOverlordAbility_lp_mechaOverlord = lp_mechaOverlord;

    if (auto_libNEXS_gf_MechaOverlordAbility_Trigger == null) {
        auto_libNEXS_gf_MechaOverlordAbility_Trigger = TriggerCreate("auto_libNEXS_gf_MechaOverlordAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_MechaOverlordAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_MechaOverlordAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mechaOverlord = auto_libNEXS_gf_MechaOverlordAbility_lp_mechaOverlord;

    // Variable Declarations
    unitgroup lv_enemyGroup;
    unitgroup lv_enemyHeroGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();
    lv_enemyHeroGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mechaOverlord) == true) && ((UnitGetOwner(lp_mechaOverlord) == 3) || (UnitGetOwner(lp_mechaOverlord) == 4) || (UnitGetOwner(lp_mechaOverlord) == 5) || (UnitGetOwner(lp_mechaOverlord) == 6) || (UnitGetOwner(lp_mechaOverlord) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mechaOverlord), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mechaOverlord), 10.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        lv_enemyHeroGroup = UnitGroupAlliance(UnitGetOwner(lp_mechaOverlord), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mechaOverlord), 10.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if (((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 3) || (UnitGroupCount(lv_enemyHeroGroup, c_unitCountAlive) >= 1))) {
            UnitIssueOrder(lp_mechaOverlord, OrderTargetingPoint(AbilityCommand("MechaOverlordBuildMechaNydus", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_mechaOverlord), 3.0))), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mechaOverlord, false);
            AISetUnitSuicide(lp_mechaOverlord, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_MechaViperAbility_Trigger = null;
unit auto_libNEXS_gf_MechaViperAbility_lp_mechaViper;

void libNEXS_gf_MechaViperAbility (unit lp_mechaViper) {
    auto_libNEXS_gf_MechaViperAbility_lp_mechaViper = lp_mechaViper;

    if (auto_libNEXS_gf_MechaViperAbility_Trigger == null) {
        auto_libNEXS_gf_MechaViperAbility_Trigger = TriggerCreate("auto_libNEXS_gf_MechaViperAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_MechaViperAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_MechaViperAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mechaViper = auto_libNEXS_gf_MechaViperAbility_lp_mechaViper;

    // Variable Declarations
    unitgroup lv_alliedGroup;
    unitgroup lv_enemyGroup;
    point lv_targetPoint;

    // Automatic Variable Declarations
    unitgroup autoEC2D0B1D_g;
    int autoEC2D0B1D_u;
    unit autoEC2D0B1D_var;
    unitgroup auto61B86FFE_g;
    int auto61B86FFE_u;
    unit auto61B86FFE_var;
    unitgroup autoC32F70C9_g;
    int autoC32F70C9_u;
    unit autoC32F70C9_var;

    // Variable Initialization
    lv_alliedGroup = UnitGroupEmpty();
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_mechaViper) == true) && ((UnitGetOwner(lp_mechaViper) == 3) || (UnitGetOwner(lp_mechaViper) == 4) || (UnitGetOwner(lp_mechaViper) == 5) || (UnitGetOwner(lp_mechaViper) == 6) || (UnitGetOwner(lp_mechaViper) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mechaViper), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mechaViper), 14.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoEC2D0B1D_g = lv_enemyGroup;
        autoEC2D0B1D_u = UnitGroupCount(autoEC2D0B1D_g, c_unitCountAll);
        for (;; autoEC2D0B1D_u -= 1) {
            autoEC2D0B1D_var = UnitGroupUnitFromEnd(autoEC2D0B1D_g, autoEC2D0B1D_u);
            if (autoEC2D0B1D_var == null) { break; }
            if ((UnitHasBehavior2(autoEC2D0B1D_var, "MechaViperDisablingCloud") == true)) {
                UnitGroupRemove(lv_enemyGroup, autoEC2D0B1D_var);
            }

        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mechaViper, "MechaViperDisablingCloud", "Abil/MechaViperDisablingCloud") <= 0.0) && (UnitGetPropertyFixed(lp_mechaViper, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_mechaViper, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
            lv_targetPoint = AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 3.0, UnitGetPosition(lp_mechaViper), 11.0, 0);
            UnitIssueOrder(lp_mechaViper, OrderTargetingPoint(AbilityCommand("MechaViperDisablingCloud", 0), lv_targetPoint), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mechaViper, false);
            AISetUnitSuicide(lp_mechaViper, true);
        }
        else {
            if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mechaViper, "MechaViperDisablingCloud", "Abil/MechaViperDisablingCloud") <= 0.0) && (UnitGetPropertyFixed(lp_mechaViper, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGetPropertyFixed(lp_mechaViper, c_unitPropLifePercent, c_unitPropCurrent) >= 0.33)) {
                lv_targetPoint = AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 3.0, UnitGetPosition(lp_mechaViper), 11.0, 0);
                UnitIssueOrder(lp_mechaViper, OrderTargetingPoint(AbilityCommand("MechaViperDisablingCloud", 0), lv_targetPoint), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_mechaViper, false);
                AISetUnitSuicide(lp_mechaViper, true);
            }
            else {
                if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mechaViper, "MechaViperDisablingCloud", "Abil/MechaViperDisablingCloud") <= 0.0) && (UnitGetPropertyFixed(lp_mechaViper, c_unitPropEnergy, c_unitPropCurrent) >= 75.0)) {
                    lv_targetPoint = AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 3.0, UnitGetPosition(lp_mechaViper), 11.0, 0);
                    UnitIssueOrder(lp_mechaViper, OrderTargetingPoint(AbilityCommand("MechaViperDisablingCloud", 0), lv_targetPoint), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_mechaViper, false);
                    AISetUnitSuicide(lp_mechaViper, true);
                }

            }
        }
        lv_enemyGroup = null;
        lv_targetPoint = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mechaViper), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mechaViper), 9.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto61B86FFE_g = lv_enemyGroup;
        auto61B86FFE_u = UnitGroupCount(auto61B86FFE_g, c_unitCountAll);
        for (;; auto61B86FFE_u -= 1) {
            auto61B86FFE_var = UnitGroupUnitFromEnd(auto61B86FFE_g, auto61B86FFE_u);
            if (auto61B86FFE_var == null) { break; }
            if ((((UnitGetPropertyFixed(auto61B86FFE_var, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(auto61B86FFE_var, c_unitPropShields, c_unitPropCurrent)) >= 200.0) || (UnitTypeGetProperty(UnitGetType(auto61B86FFE_var), c_unitPropSuppliesUsed) >= 3.0))) {
            }
            else {
                UnitGroupRemove(lv_enemyGroup, auto61B86FFE_var);
            }
        }
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mechaViper, "MechaViperYoink", "Abil/MechaViperYoink") <= 0.0) && (UnitGetPropertyFixed(lp_mechaViper, c_unitPropEnergy, c_unitPropCurrent) >= 125.0)) {
            UnitIssueOrder(lp_mechaViper, OrderTargetingUnit(AbilityCommand("MechaViperYoink", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mechaViper, false);
            AISetUnitSuicide(lp_mechaViper, true);
        }

        lv_enemyGroup = null;
        lv_targetPoint = null;
        Wait(0.05, c_timeAI);
        lv_alliedGroup = UnitGroupAlliance(UnitGetOwner(lp_mechaViper), c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_mechaViper), 4.0), UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoC32F70C9_g = lv_alliedGroup;
        autoC32F70C9_u = UnitGroupCount(autoC32F70C9_g, c_unitCountAll);
        for (;; autoC32F70C9_u -= 1) {
            autoC32F70C9_var = UnitGroupUnitFromEnd(autoC32F70C9_g, autoC32F70C9_u);
            if (autoC32F70C9_var == null) { break; }
            if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) >= 75.0)) {
            }
            else {
                UnitGroupRemove(lv_alliedGroup, autoC32F70C9_var);
            }
        }
        if ((UnitGroupCount(lv_alliedGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mechaViper, "MechaViperConsumption", "Abil/MechaViperConsumption") <= 0.0) && (UnitGetPropertyFixed(lp_mechaViper, c_unitPropEnergy, c_unitPropCurrent) <= 125.0)) {
            UnitIssueOrder(lp_mechaViper, OrderTargetingUnit(AbilityCommand("MechaViperConsumption", 0), UnitGroupRandomUnit(lv_alliedGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mechaViper, false);
            AISetUnitSuicide(lp_mechaViper, true);
        }

        lv_alliedGroup = null;
        lv_targetPoint = null;
        Wait(0.05, c_timeAI);
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_mechaViper), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_mechaViper), 8.0), UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterGround) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1) && (UnitAbilityGetCooldown(lp_mechaViper, "MechaViperParasiticBomb", "Abil/MechaViperParasiticBomb") <= 0.0) && (UnitGetPropertyFixed(lp_mechaViper, c_unitPropEnergy, c_unitPropCurrent) >= 125.0)) {
            UnitIssueOrder(lp_mechaViper, OrderTargetingUnit(AbilityCommand("MechaViperParasiticBomb", 0), UnitGroupRandomUnit(lv_enemyGroup, c_unitCountAlive)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_mechaViper, false);
            AISetUnitSuicide(lp_mechaViper, true);
        }

        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_GoldenMothershipAbility_Trigger = null;
unit auto_libNEXS_gf_GoldenMothershipAbility_lp_goldenMothership;

void libNEXS_gf_GoldenMothershipAbility (unit lp_goldenMothership) {
    auto_libNEXS_gf_GoldenMothershipAbility_lp_goldenMothership = lp_goldenMothership;

    if (auto_libNEXS_gf_GoldenMothershipAbility_Trigger == null) {
        auto_libNEXS_gf_GoldenMothershipAbility_Trigger = TriggerCreate("auto_libNEXS_gf_GoldenMothershipAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_GoldenMothershipAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_GoldenMothershipAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_goldenMothership = auto_libNEXS_gf_GoldenMothershipAbility_lp_goldenMothership;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup autoA8AE6E87_g;
    int autoA8AE6E87_u;
    unit autoA8AE6E87_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_goldenMothership) == true) && ((UnitGetOwner(lp_goldenMothership) == 3) || (UnitGetOwner(lp_goldenMothership) == 4) || (UnitGetOwner(lp_goldenMothership) == 5) || (UnitGetOwner(lp_goldenMothership) == 6) || (UnitGetOwner(lp_goldenMothership) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_goldenMothership), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_goldenMothership), 12.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoA8AE6E87_g = lv_enemyGroup;
        autoA8AE6E87_u = UnitGroupCount(autoA8AE6E87_g, c_unitCountAll);
        for (;; autoA8AE6E87_u -= 1) {
            autoA8AE6E87_var = UnitGroupUnitFromEnd(autoA8AE6E87_g, autoA8AE6E87_u);
            if (autoA8AE6E87_var == null) { break; }
            if ((UnitHasBehavior2(autoA8AE6E87_var, "GoldenMothershipVortexEnemy") == true)) {
                UnitGroupRemove(lv_enemyGroup, autoA8AE6E87_var);
            }

        }
        if ((UnitAbilityGetCooldown(lp_goldenMothership, "GoldenMothershipVortex", "VortexVortex2VortexGoldenMothershipVortex") <= 0.0) && (UnitGetPropertyFixed(lp_goldenMothership, c_unitPropShieldsPercent, c_unitPropCurrent) >= 0.32)) {
            UnitIssueOrder(lp_goldenMothership, OrderTargetingPoint(AbilityCommand("GoldenMothershipVortex", 0), AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 3.0, UnitGetPosition(lp_goldenMothership), 9.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_goldenMothership, false);
            AISetUnitSuicide(lp_goldenMothership, true);
        }
        else {
            if ((UnitAbilityGetCooldown(lp_goldenMothership, "GoldenMothershipVortex", "VortexVortex2VortexGoldenMothershipVortex") <= 0.0) && (UnitGetPropertyFixed(lp_goldenMothership, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
                UnitIssueOrder(lp_goldenMothership, OrderTargetingPoint(AbilityCommand("GoldenMothershipVortex", 0), AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 3.0, UnitGetPosition(lp_goldenMothership), 9.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_goldenMothership, false);
                AISetUnitSuicide(lp_goldenMothership, true);
            }
            else {
                if ((UnitAbilityGetCooldown(lp_goldenMothership, "GoldenMothershipVortex", "VortexVortex2VortexGoldenMothershipVortex") <= 0.0)) {
                    UnitIssueOrder(lp_goldenMothership, OrderTargetingPoint(AbilityCommand("GoldenMothershipVortex", 0), AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 3.0, UnitGetPosition(lp_goldenMothership), 9.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_goldenMothership, false);
                    AISetUnitSuicide(lp_goldenMothership, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_GoldenMothershipCoreAbility_Trigger = null;
unit auto_libNEXS_gf_GoldenMothershipCoreAbility_lp_goldenMothershipCore;

void libNEXS_gf_GoldenMothershipCoreAbility (unit lp_goldenMothershipCore) {
    auto_libNEXS_gf_GoldenMothershipCoreAbility_lp_goldenMothershipCore = lp_goldenMothershipCore;

    if (auto_libNEXS_gf_GoldenMothershipCoreAbility_Trigger == null) {
        auto_libNEXS_gf_GoldenMothershipCoreAbility_Trigger = TriggerCreate("auto_libNEXS_gf_GoldenMothershipCoreAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_GoldenMothershipCoreAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_GoldenMothershipCoreAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_goldenMothershipCore = auto_libNEXS_gf_GoldenMothershipCoreAbility_lp_goldenMothershipCore;

    // Variable Declarations
    unitgroup lv_enemyGroup;

    // Automatic Variable Declarations
    unitgroup autoA2A266D6_g;
    int autoA2A266D6_u;
    unit autoA2A266D6_var;

    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_goldenMothershipCore) == true) && ((UnitGetOwner(lp_goldenMothershipCore) == 3) || (UnitGetOwner(lp_goldenMothershipCore) == 4) || (UnitGetOwner(lp_goldenMothershipCore) == 5) || (UnitGetOwner(lp_goldenMothershipCore) == 6) || (UnitGetOwner(lp_goldenMothershipCore) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_goldenMothershipCore), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_goldenMothershipCore), 12.25), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoA2A266D6_g = lv_enemyGroup;
        autoA2A266D6_u = UnitGroupCount(autoA2A266D6_g, c_unitCountAll);
        for (;; autoA2A266D6_u -= 1) {
            autoA2A266D6_var = UnitGroupUnitFromEnd(autoA2A266D6_g, autoA2A266D6_u);
            if (autoA2A266D6_var == null) { break; }
            if ((UnitHasBehavior2(autoA2A266D6_var, "GoldenMothershipCoreTemporalField") == true)) {
                UnitGroupRemove(lv_enemyGroup, autoA2A266D6_var);
            }

        }
        if ((UnitAbilityGetCooldown(lp_goldenMothershipCore, "GoldenMothershipCoreTemporalField", "Abil/GoldenMothershipCoreTemporalField") <= 0.0) && (UnitGetPropertyFixed(lp_goldenMothershipCore, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitGetPropertyFixed(lp_goldenMothershipCore, c_unitPropShieldsPercent, c_unitPropCurrent) >= 0.32)) {
            UnitIssueOrder(lp_goldenMothershipCore, OrderTargetingPoint(AbilityCommand("GoldenMothershipCoreTemporalField", 0), AIBestTargetPoint(lv_enemyGroup, 3, 0, 0.0, 3.25, UnitGetPosition(lp_goldenMothershipCore), 9.0, 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_goldenMothershipCore, false);
            AISetUnitSuicide(lp_goldenMothershipCore, true);
        }
        else {
            if ((UnitAbilityGetCooldown(lp_goldenMothershipCore, "GoldenMothershipCoreTemporalField", "Abil/GoldenMothershipCoreTemporalField") <= 0.0) && (UnitGetPropertyFixed(lp_goldenMothershipCore, c_unitPropEnergy, c_unitPropCurrent) >= 50.0) && (UnitGetPropertyFixed(lp_goldenMothershipCore, c_unitPropLifePercent, c_unitPropCurrent) >= 0.66)) {
                UnitIssueOrder(lp_goldenMothershipCore, OrderTargetingPoint(AbilityCommand("GoldenMothershipCoreTemporalField", 0), AIBestTargetPoint(lv_enemyGroup, 2, 0, 0.0, 3.25, UnitGetPosition(lp_goldenMothershipCore), 9.0, 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_goldenMothershipCore, false);
                AISetUnitSuicide(lp_goldenMothershipCore, true);
            }
            else {
                if ((UnitAbilityGetCooldown(lp_goldenMothershipCore, "GoldenMothershipCoreTemporalField", "Abil/GoldenMothershipCoreTemporalField") <= 0.0) && (UnitGetPropertyFixed(lp_goldenMothershipCore, c_unitPropEnergy, c_unitPropCurrent) >= 50.0)) {
                    UnitIssueOrder(lp_goldenMothershipCore, OrderTargetingPoint(AbilityCommand("GoldenMothershipCoreTemporalField", 0), AIBestTargetPoint(lv_enemyGroup, 1, 0, 0.0, 3.25, UnitGetPosition(lp_goldenMothershipCore), 9.0, 0)), c_orderQueueAddToFront);
                    Wait(0.5, c_timeAI);
                    AISetUnitScriptControlled(lp_goldenMothershipCore, false);
                    AISetUnitSuicide(lp_goldenMothershipCore, true);
                }

            }
        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

trigger auto_libNEXS_gf_GoldenWarpPrismAbility_Trigger = null;
unit auto_libNEXS_gf_GoldenWarpPrismAbility_lp_goldenWarpPrism;

void libNEXS_gf_GoldenWarpPrismAbility (unit lp_goldenWarpPrism) {
    auto_libNEXS_gf_GoldenWarpPrismAbility_lp_goldenWarpPrism = lp_goldenWarpPrism;

    if (auto_libNEXS_gf_GoldenWarpPrismAbility_Trigger == null) {
        auto_libNEXS_gf_GoldenWarpPrismAbility_Trigger = TriggerCreate("auto_libNEXS_gf_GoldenWarpPrismAbility_TriggerFunc");
    }

    TriggerExecute(auto_libNEXS_gf_GoldenWarpPrismAbility_Trigger, false, false);
}

bool auto_libNEXS_gf_GoldenWarpPrismAbility_TriggerFunc (bool testConds, bool runActions) {
    unit lp_goldenWarpPrism = auto_libNEXS_gf_GoldenWarpPrismAbility_lp_goldenWarpPrism;

    // Variable Declarations
    unitgroup lv_enemyGroup;
    unitgroup lv_enemyHeroGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyGroup = UnitGroupEmpty();
    lv_enemyHeroGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_goldenWarpPrism) == true) && ((UnitGetOwner(lp_goldenWarpPrism) == 3) || (UnitGetOwner(lp_goldenWarpPrism) == 4) || (UnitGetOwner(lp_goldenWarpPrism) == 5) || (UnitGetOwner(lp_goldenWarpPrism) == 6) || (UnitGetOwner(lp_goldenWarpPrism) == 7))) {
        lv_enemyGroup = UnitGroupAlliance(UnitGetOwner(lp_goldenWarpPrism), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_goldenWarpPrism), 10.0), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        lv_enemyHeroGroup = UnitGroupAlliance(UnitGetOwner(lp_goldenWarpPrism), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_goldenWarpPrism), 10.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if (((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 2) || (UnitGroupCount(lv_enemyHeroGroup, c_unitCountAlive) >= 1))) {
            UnitIssueOrder(lp_goldenWarpPrism, Order(AbilityCommand("GoldenWarpPrismPhasingMode", 0)), c_orderQueueAddToFront);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_goldenWarpPrism, false);
            AISetUnitSuicide(lp_goldenWarpPrism, true);
        }
        else {
            if (((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) == 0) || (UnitGroupCount(lv_enemyHeroGroup, c_unitCountAlive) == 0))) {
                UnitIssueOrder(lp_goldenWarpPrism, Order(AbilityCommand("GolednWarpPrismTransportMode", 0)), c_orderQueueAddToFront);
                Wait(0.5, c_timeAI);
                AISetUnitScriptControlled(lp_goldenWarpPrism, false);
                AISetUnitSuicide(lp_goldenWarpPrism, true);
            }

        }
        Wait(1.0, c_timeAI);
    }
    return true;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Extra Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_ExtraUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventTimer() == libNEXS_gv_taldarim5minTimer)) {
        TechTreeUpgradeAddLevel(3, "TaldarimExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "TaldarimExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "TaldarimExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "TaldarimExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "TaldarimExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(3, "TaldarimExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "TaldarimExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "TaldarimExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "TaldarimExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "TaldarimExtraArmorsLevel1", 1);
    }
    else if ((EventTimer() == libNEXS_gv_taldarim10minTimer)) {
        TechTreeUpgradeAddLevel(3, "TaldarimExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "TaldarimExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "TaldarimExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "TaldarimExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "TaldarimExtraWeaponsLevel2", 1);
    }
    else if ((EventTimer() == libNEXS_gv_taldarim15minTimer)) {
        TechTreeUpgradeAddLevel(3, "TaldarimExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "TaldarimExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "TaldarimExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "TaldarimExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "TaldarimExtraArmorsLevel2", 1);
    }
    else if ((EventTimer() == libNEXS_gv_taldarim20minTimer)) {
        TechTreeUpgradeAddLevel(3, "TaldarimExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "TaldarimExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "TaldarimExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "TaldarimExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "TaldarimExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(3, "TaldarimExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "TaldarimExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "TaldarimExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "TaldarimExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "TaldarimExtraArmorsLevel3", 1);
    }
    else if ((EventTimer() == libNEXS_gv_nerazim5minTimer)) {
        TechTreeUpgradeAddLevel(3, "NerazimExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "NerazimExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "NerazimExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "NerazimExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "NerazimExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(3, "NerazimExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "NerazimExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "NerazimExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "NerazimExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "NerazimExtraArmorsLevel1", 1);
    }
    else if ((EventTimer() == libNEXS_gv_nerazim10minTimer)) {
        TechTreeUpgradeAddLevel(3, "NerazimExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "NerazimExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "NerazimExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "NerazimExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "NerazimExtraWeaponsLevel2", 1);
    }
    else if ((EventTimer() == libNEXS_gv_nerazim15minTimer)) {
        TechTreeUpgradeAddLevel(3, "NerazimExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "NerazimExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "NerazimExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "NerazimExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "NerazimExtraArmorsLevel2", 1);
    }
    else if ((EventTimer() == libNEXS_gv_nerazim20minTimer)) {
        TechTreeUpgradeAddLevel(3, "NerazimExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "NerazimExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "NerazimExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "NerazimExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "NerazimExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(3, "NerazimExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "NerazimExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "NerazimExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "NerazimExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "NerazimExtraArmorsLevel3", 1);
    }
    else if ((EventTimer() == libNEXS_gv_nest5minTimer)) {
        TechTreeUpgradeAddLevel(3, "NestExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "NestExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "NestExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "NestExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "NestExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(3, "NestExtraCarapacesLevel1", 1);
        TechTreeUpgradeAddLevel(4, "NestExtraCarapacesLevel1", 1);
        TechTreeUpgradeAddLevel(5, "NestExtraCarapacesLevel1", 1);
        TechTreeUpgradeAddLevel(6, "NestExtraCarapacesLevel1", 1);
        TechTreeUpgradeAddLevel(7, "NestExtraCarapacesLevel1", 1);
    }
    else if ((EventTimer() == libNEXS_gv_nest10minTimer)) {
        TechTreeUpgradeAddLevel(3, "NestExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "NestExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "NestExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "NestExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "NestExtraWeaponsLevel2", 1);
    }
    else if ((EventTimer() == libNEXS_gv_nest15minTimer)) {
        TechTreeUpgradeAddLevel(3, "NestExtraCarapacesLevel2", 1);
        TechTreeUpgradeAddLevel(4, "NestExtraCarapacesLevel2", 1);
        TechTreeUpgradeAddLevel(5, "NestExtraCarapacesLevel2", 1);
        TechTreeUpgradeAddLevel(6, "NestExtraCarapacesLevel2", 1);
        TechTreeUpgradeAddLevel(7, "NestExtraCarapacesLevel2", 1);
    }
    else if ((EventTimer() == libNEXS_gv_nest20minTimer)) {
        TechTreeUpgradeAddLevel(3, "NestExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "NestExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "NestExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "NestExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "NestExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(3, "NestExtraCarapacesLevel3", 1);
        TechTreeUpgradeAddLevel(4, "NestExtraCarapacesLevel3", 1);
        TechTreeUpgradeAddLevel(5, "NestExtraCarapacesLevel3", 1);
        TechTreeUpgradeAddLevel(6, "NestExtraCarapacesLevel3", 1);
        TechTreeUpgradeAddLevel(7, "NestExtraCarapacesLevel3", 1);
    }
    else if ((EventTimer() == libNEXS_gv_mobius5minTimer)) {
        TechTreeUpgradeAddLevel(3, "MobiusExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "MobiusExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "MobiusExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "MobiusExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "MobiusExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(3, "MobiusExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "MobiusExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "MobiusExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "MobiusExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "MobiusExtraArmorsLevel1", 1);
    }
    else if ((EventTimer() == libNEXS_gv_mobius10minTimer)) {
        TechTreeUpgradeAddLevel(3, "MobiusExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "MobiusExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "MobiusExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "MobiusExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "MobiusExtraWeaponsLevel2", 1);
    }
    else if ((EventTimer() == libNEXS_gv_mobius15minTimer)) {
        TechTreeUpgradeAddLevel(3, "MobiusExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "MobiusExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "MobiusExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "MobiusExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "MobiusExtraArmorsLevel2", 1);
    }
    else if ((EventTimer() == libNEXS_gv_mobius20minTimer)) {
        TechTreeUpgradeAddLevel(3, "MobiusExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "MobiusExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "MobiusExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "MobiusExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "MobiusExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(3, "MobiusExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "MobiusExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "MobiusExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "MobiusExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "MobiusExtraArmorsLevel3", 1);
    }
    else if ((EventTimer() == libNEXS_gv_covertOps5minTimer)) {
        TechTreeUpgradeAddLevel(3, "CovertOpsExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "CovertOpsExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "CovertOpsExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "CovertOpsExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "CovertOpsExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(3, "CovertOpsExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "CovertOpsExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "CovertOpsExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "CovertOpsExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "CovertOpsExtraArmorsLevel1", 1);
    }
    else if ((EventTimer() == libNEXS_gv_covertOps10minTimer)) {
        TechTreeUpgradeAddLevel(3, "CovertOpsExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "CovertOpsExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "CovertOpsExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "CovertOpsExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "CovertOpsExtraWeaponsLevel2", 1);
    }
    else if ((EventTimer() == libNEXS_gv_covertOps15minTimer)) {
        TechTreeUpgradeAddLevel(3, "CovertOpsExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "CovertOpsExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "CovertOpsExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "CovertOpsExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "CovertOpsExtraArmorsLevel2", 1);
    }
    else if ((EventTimer() == libNEXS_gv_covertOps20minTimer)) {
        TechTreeUpgradeAddLevel(3, "CovertOpsExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "CovertOpsExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "CovertOpsExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "CovertOpsExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "CovertOpsExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(3, "CovertOpsExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "CovertOpsExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "CovertOpsExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "CovertOpsExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "CovertOpsExtraArmorsLevel3", 1);
    }
    else if ((EventTimer() == libNEXS_gv_kelMorian5minTimer)) {
        TechTreeUpgradeAddLevel(3, "KelMorianExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "KelMorianExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "KelMorianExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "KelMorianExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "KelMorianExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(3, "KelMorianExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "KelMorianExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "KelMorianExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "KelMorianExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "KelMorianExtraArmorsLevel1", 1);
    }
    else if ((EventTimer() == libNEXS_gv_kelMorian10minTimer)) {
        TechTreeUpgradeAddLevel(3, "KelMorianExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "KelMorianExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "KelMorianExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "KelMorianExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "KelMorianExtraWeaponsLevel2", 1);
    }
    else if ((EventTimer() == libNEXS_gv_kelMorian15minTimer)) {
        TechTreeUpgradeAddLevel(3, "KelMorianExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "KelMorianExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "KelMorianExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "KelMorianExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "KelMorianExtraArmorsLevel2", 1);
    }
    else if ((EventTimer() == libNEXS_gv_kelMorian20minTimer)) {
        TechTreeUpgradeAddLevel(3, "KelMorianExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "KelMorianExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "KelMorianExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "KelMorianExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "KelMorianExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(3, "KelMorianExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "KelMorianExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "KelMorianExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "KelMorianExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "KelMorianExtraArmorsLevel3", 1);
    }
    else if ((EventTimer() == libNEXS_gv_mecha5minTimer)) {
        TechTreeUpgradeAddLevel(3, "MechaExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "MechaExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "MechaExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "MechaExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "MechaExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(3, "MechaExtraCarapacesLevel1", 1);
        TechTreeUpgradeAddLevel(4, "MechaExtraCarapacesLevel1", 1);
        TechTreeUpgradeAddLevel(5, "MechaExtraCarapacesLevel1", 1);
        TechTreeUpgradeAddLevel(6, "MechaExtraCarapacesLevel1", 1);
        TechTreeUpgradeAddLevel(7, "MechaExtraCarapacesLevel1", 1);
    }
    else if ((EventTimer() == libNEXS_gv_mecha10minTimer)) {
        TechTreeUpgradeAddLevel(3, "MechaExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "MechaExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "MechaExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "MechaExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "MechaExtraWeaponsLevel2", 1);
    }
    else if ((EventTimer() == libNEXS_gv_mecha15minTimer)) {
        TechTreeUpgradeAddLevel(3, "MechaExtraCarapacesLevel2", 1);
        TechTreeUpgradeAddLevel(4, "MechaExtraCarapacesLevel2", 1);
        TechTreeUpgradeAddLevel(5, "MechaExtraCarapacesLevel2", 1);
        TechTreeUpgradeAddLevel(6, "MechaExtraCarapacesLevel2", 1);
        TechTreeUpgradeAddLevel(7, "MechaExtraCarapacesLevel2", 1);
    }
    else if ((EventTimer() == libNEXS_gv_mecha20minTimer)) {
        TechTreeUpgradeAddLevel(3, "MechaExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "MechaExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "MechaExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "MechaExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "MechaExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(3, "MechaExtraCarapacesLevel3", 1);
        TechTreeUpgradeAddLevel(4, "MechaExtraCarapacesLevel3", 1);
        TechTreeUpgradeAddLevel(5, "MechaExtraCarapacesLevel3", 1);
        TechTreeUpgradeAddLevel(6, "MechaExtraCarapacesLevel3", 1);
        TechTreeUpgradeAddLevel(7, "MechaExtraCarapacesLevel3", 1);
    }
    else if ((EventTimer() == libNEXS_gv_golden5minTimer)) {
        TechTreeUpgradeAddLevel(3, "GoldenExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "GoldenExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "GoldenExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "GoldenExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "GoldenExtraWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(3, "GoldenExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(4, "GoldenExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(5, "GoldenExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "GoldenExtraArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(7, "GoldenExtraArmorsLevel1", 1);
    }
    else if ((EventTimer() == libNEXS_gv_golden10minTimer)) {
        TechTreeUpgradeAddLevel(3, "GoldenExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "GoldenExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "GoldenExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "GoldenExtraWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "GoldenExtraWeaponsLevel2", 1);
    }
    else if ((EventTimer() == libNEXS_gv_golden15minTimer)) {
        TechTreeUpgradeAddLevel(3, "GoldenExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(4, "GoldenExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(5, "GoldenExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "GoldenExtraArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(7, "GoldenExtraArmorsLevel2", 1);
    }
    else if ((EventTimer() == libNEXS_gv_golden20minTimer)) {
        TechTreeUpgradeAddLevel(3, "GoldenExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "GoldenExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "GoldenExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "GoldenExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "GoldenExtraWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(3, "GoldenExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(4, "GoldenExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(5, "GoldenExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "GoldenExtraArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(7, "GoldenExtraArmorsLevel3", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_ExtraUpgrade_Init () {
    libNEXS_gt_ExtraUpgrade = TriggerCreate("libNEXS_gt_ExtraUpgrade_Func");
    TriggerEnable(libNEXS_gt_ExtraUpgrade, false);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_taldarim5minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_taldarim10minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_taldarim15minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_taldarim20minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_nerazim5minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_nerazim10minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_nerazim15minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_nerazim20minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_nest5minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_nest10minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_nest15minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_nest20minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_mobius5minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_mobius10minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_mobius15minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_mobius20minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_covertOps5minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_covertOps10minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_covertOps15minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_covertOps20minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_kelMorian5minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_kelMorian10minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_kelMorian15minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_kelMorian20minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_mecha5minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_mecha10minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_mecha15minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_mecha20minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_golden5minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_golden10minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_golden15minTimer);
    TriggerAddEventTimer(libNEXS_gt_ExtraUpgrade, libNEXS_gv_golden20minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Units Attack
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_UnitsAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "MobiusReaper") || (UnitGetType(EventUnit()) == "MechaZergling") || (UnitGetType(EventUnit()) == "MechaBaneling") || (UnitGetType(EventUnit()) == "MechaHydralisk") || (UnitGetType(EventUnit()) == "GoldenZealot") || (UnitGetType(EventUnit()) == "GoldenDragoon")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.5, c_timeAI);
    AISetUnitScriptControlled(EventUnit(), false);
    AISetUnitSuicide(EventUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_UnitsAttack_Init () {
    libNEXS_gt_UnitsAttack = TriggerCreate("libNEXS_gt_UnitsAttack_Func");
    TriggerEnable(libNEXS_gt_UnitsAttack, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_UnitsAttack, null, "NydusTransportTimedLife", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_UnitsAttack, null, "NydusTransportTimedLife", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Print Handle
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_PrintHandle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_NEXS_97165277") + (StringToText(PlayerHandle(EventPlayer())) + StringExternal("Param/Value/lib_NEXS_3CE0DBD0"))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_PrintHandle_Init () {
    libNEXS_gt_PrintHandle = TriggerCreate("libNEXS_gt_PrintHandle_Func");
    TriggerEnable(libNEXS_gt_PrintHandle, false);
    TriggerAddEventChatMessage(libNEXS_gt_PrintHandle, c_playerAny, "PrintOutHandle", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shared hero units enter the map
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Sharedherounitsenterthemap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "MutatorAmonZeratul")) {
        TriggerEnable(libNEXS_gt_ZeratulsWarpCompleteJudgment, true);
        libNEXS_gf_SetHeroPanelUnit(1, EventUnit(), libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID6);
    }

    if ((UnitGetType(EventUnit()) == "ValerianZeus")) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_395CF099"));
        libNEXS_gf_SetHeroPanelUnit(1, EventUnit(), libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5);
    }

    if ((UnitGetType(EventUnit()) == "MothershipCore")) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID3), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_85454019"));
        libNEXS_gf_SetHeroPanelUnit(1, EventUnit(), libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID3);
    }

    if (((UnitGetType(EventUnit()) == "PlanetCrackerPurifierUnit") || (UnitGetType(EventUnit()) == "PlanetCrackerPurifierUnit2") || (UnitGetType(EventUnit()) == "Mothership2"))) {
        libNEXS_gf_SetHeroPanelUnit(1, EventUnit(), libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID3);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Sharedherounitsenterthemap_Init () {
    libNEXS_gt_Sharedherounitsenterthemap = TriggerCreate("libNEXS_gt_Sharedherounitsenterthemap_Func");
    TriggerAddEventUnitRegion(libNEXS_gt_Sharedherounitsenterthemap, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shared hero units leave the map
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Sharedherounitsleavethemap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitDamageDeathCheck(c_deathTypeMorph) != true) && (EventUnitDamageDeathCheck(c_deathTypeCancel) != true) && (EventUnitDamageDeathCheck(c_deathTypeRemove) != true) && (UnitGetType(EventUnit()) == "MutatorAmonZeratul")) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID6), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_77F2C065"));
    }

    if ((EventUnitDamageDeathCheck(c_deathTypeMorph) != true) && (EventUnitDamageDeathCheck(c_deathTypeCancel) != true) && (EventUnitDamageDeathCheck(c_deathTypeRemove) != true) && (UnitGetType(EventUnit()) == "Tosh")) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID2), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_B71400C7"));
    }

    if ((EventUnitDamageDeathCheck(c_deathTypeMorph) != true) && (EventUnitDamageDeathCheck(c_deathTypeCancel) != true) && (EventUnitDamageDeathCheck(c_deathTypeRemove) != true) && (UnitGetType(EventUnit()) == "Henius")) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_C0B2389D"));
    }

    if ((EventUnitDamageDeathCheck(c_deathTypeMorph) != true) && (EventUnitDamageDeathCheck(c_deathTypeCancel) != true) && (EventUnitDamageDeathCheck(c_deathTypeRemove) != true) && (UnitGetType(EventUnit()) == "MothershipCore")) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID3), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_88E3824B"));
    }

    if ((EventUnitDamageDeathCheck(c_deathTypeMorph) != true) && (EventUnitDamageDeathCheck(c_deathTypeCancel) != true) && (EventUnitDamageDeathCheck(c_deathTypeRemove) != true) && (UnitGetType(EventUnit()) == "Mothership2") && (libNtve_gf_KillingPlayer() != libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID3)) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID3), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_96191B49"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Sharedherounitsleavethemap_Init () {
    libNEXS_gt_Sharedherounitsleavethemap = TriggerCreate("libNEXS_gt_Sharedherounitsleavethemap_Func");
    TriggerAddEventUnitDied(libNEXS_gt_Sharedherounitsleavethemap, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zeratul's Warp Complete Judgment
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_ZeratulsWarpCompleteJudgment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "MutatorAmonZeratul")) {
        if (((libNEXS_gv_zeratulX * 1) != 1)) {
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID6), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_BF4CDE5E"));
            TriggerEnable(TriggerGetCurrent(), false);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID6), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_A7E2B1AE"));
            libNEXS_gv_zeratulX = (libNEXS_gv_zeratulX * 0);
            TriggerEnable(TriggerGetCurrent(), false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_ZeratulsWarpCompleteJudgment_Init () {
    libNEXS_gt_ZeratulsWarpCompleteJudgment = TriggerCreate("libNEXS_gt_ZeratulsWarpCompleteJudgment_Func");
    TriggerEnable(libNEXS_gt_ZeratulsWarpCompleteJudgment, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_ZeratulsWarpCompleteJudgment, null, "PowerUserWarpable", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stetman's birth
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Stetmansbirth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB811B93D_g;
    int autoB811B93D_u;
    unit autoB811B93D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libNEXS_gv_stetmanX * 1) != 1)) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_2D89B148"));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_BB5D1992"));
        libNEXS_gv_stetmanX = (libNEXS_gv_stetmanX * 0);
    }
    Wait(0.0625, c_timeGame);
    autoB811B93D_g = UnitGroup("Henius", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB811B93D_u = UnitGroupCount(autoB811B93D_g, c_unitCountAll);
    for (;; autoB811B93D_u -= 1) {
        autoB811B93D_var = UnitGroupUnitFromEnd(autoB811B93D_g, autoB811B93D_u);
        if (autoB811B93D_var == null) { break; }
        libNEXS_gf_SetHeroPanelUnit(1, autoB811B93D_var, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Stetmansbirth_Init () {
    libNEXS_gt_Stetmansbirth = TriggerCreate("libNEXS_gt_Stetmansbirth_Func");
    TriggerEnable(libNEXS_gt_Stetmansbirth, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_Stetmansbirth, c_playerAny, "TossGrenadeDamage26");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tosh Airdrop Judgment
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_ToshAirdropJudgment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8AC9E77C_g;
    int auto8AC9E77C_u;
    unit auto8AC9E77C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libNEXS_gv_toshX * 1) != 1)) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID2), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_717734DD"));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID2), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_CB8C8494"));
        libNEXS_gv_toshX = (libNEXS_gv_toshX * 0);
    }
    Wait(0.0625, c_timeGame);
    auto8AC9E77C_g = UnitGroup("Tosh", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8AC9E77C_u = UnitGroupCount(auto8AC9E77C_g, c_unitCountAll);
    for (;; auto8AC9E77C_u -= 1) {
        auto8AC9E77C_var = UnitGroupUnitFromEnd(auto8AC9E77C_g, auto8AC9E77C_u);
        if (auto8AC9E77C_var == null) { break; }
        libNEXS_gf_SetHeroPanelUnit(1, auto8AC9E77C_var, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID2);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_ToshAirdropJudgment_Init () {
    libNEXS_gt_ToshAirdropJudgment = TriggerCreate("libNEXS_gt_ToshAirdropJudgment_Func");
    TriggerEnable(libNEXS_gt_ToshAirdropJudgment, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_ToshAirdropJudgment, c_playerAny, "ZagaraVoidCoopInfestedPodsImpactCU24");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroPanelUpdate
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CU_HeroPanelUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CU_HeroPanelUpdate_Init () {
    libNEXS_gt_CU_HeroPanelUpdate = TriggerCreate("libNEXS_gt_CU_HeroPanelUpdate_Func");
    TriggerEnable(libNEXS_gt_CU_HeroPanelUpdate, false);
    TriggerAddEventTimePeriodic(libNEXS_gt_CU_HeroPanelUpdate, libNEXS_gv_cUC_HeroUpdateFrequency, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroUnitDamaged
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CU_HeroUnitDamaged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_indexPlayer;
    int lv_player;
    playergroup lv_heroGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_index == 0)) {
        return true;
    }

    lv_heroGroup = PlayerGroupSingle(lv_player);
    DialogControlSetVisible(libNEXS_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, true);
    if ((libNEXS_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] <= 0.0)) {
    }
    else {
        DialogControlFadeTransparency(libNEXS_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 0.25, 0.0);
    }
    if ((EventUnitDamageAmount() < 5.0)) {
        if ((libNEXS_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] <= 0.25)) {
            libNEXS_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] = 0.26;
            DialogControlFadeTransparency(libNEXS_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 0.25, 0.0);
        }

    }
    else {
        if ((EventUnitDamageAmount() >= 5.0) && (EventUnitDamageAmount() <= 15.0)) {
            if ((libNEXS_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] <= 0.5)) {
                libNEXS_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] = 0.51;
                DialogControlFadeTransparency(libNEXS_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 0.5, 0.0);
            }

        }
        else {
            if ((libNEXS_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] <= 1.0)) {
                libNEXS_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] = 1.01;
                DialogControlFadeTransparency(libNEXS_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 1.0, 0.0);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CU_HeroUnitDamaged_Init () {
    libNEXS_gt_CU_HeroUnitDamaged = TriggerCreate("libNEXS_gt_CU_HeroUnitDamaged_Func");
    TriggerEnable(libNEXS_gt_CU_HeroUnitDamaged, false);
    TriggerAddEventUnitDamaged(libNEXS_gt_CU_HeroUnitDamaged, UnitRefFromVariable("libNEXS_gv_cU_HeroUnit[1][1]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libNEXS_gt_CU_HeroUnitDamaged, UnitRefFromVariable("libNEXS_gv_cU_HeroUnit[1][2]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libNEXS_gt_CU_HeroUnitDamaged, UnitRefFromVariable("libNEXS_gv_cU_HeroUnit[2][1]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libNEXS_gt_CU_HeroUnitDamaged, UnitRefFromVariable("libNEXS_gv_cU_HeroUnit[2][2]"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroUnitVitalChange
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CU_HeroUnitVitalChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_indexPlayer;
    int lv_player;
    playergroup lv_heroGroup;
    int lv_damageBar;
    int lv_damageBarWidth;
    int lv_damageBarHeight;

    // Automatic Variable Declarations
    int autoD7194E8D_val;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();
    lv_damageBar = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((EventUnitPropertyChangeFixed() < 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_index == 0)) {
        return true;
    }

    lv_heroGroup = PlayerGroupSingle(lv_player);
    autoD7194E8D_val = EventUnitProperty();
    if (autoD7194E8D_val == c_unitPropEnergy) {
        DialogControlCreateInPanelFromTemplate(libNEXS_gv_cU_HeroPanel[lv_index], c_triggerControlTypeImage, "HotS_GameUnitFrame/HeroEnergyBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_heroGroup, c_anchorLeft, libNEXS_gv_cU_HeroDialogEnergyBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(libNEXS_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropEnergy, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(libNEXS_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropEnergyMax, c_unitPropCurrent)) * IntToFixed(libNEXS_gv_cUC_HEROUIBARWIDTH)));
        lv_damageBarHeight = DialogControlGetHeight(libNEXS_gv_cU_HeroDialogEnergyBarImage[lv_index], lv_player);
    }
    else if (autoD7194E8D_val == c_unitPropLife) {
        DialogControlCreateInPanelFromTemplate(libNEXS_gv_cU_HeroPanel[lv_index], c_triggerControlTypeImage, "HotS_GameUnitFrame/HeroHealthBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_heroGroup, c_anchorLeft, libNEXS_gv_cU_HeroDialogHealthBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(libNEXS_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropLife, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(libNEXS_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropLifeMax, c_unitPropCurrent)) * IntToFixed(libNEXS_gv_cUC_HEROUIBARWIDTH)));
        lv_damageBarHeight = DialogControlGetHeight(libNEXS_gv_cU_HeroDialogHealthBarImage[lv_index], lv_player);
    }
    else if (autoD7194E8D_val == c_unitPropShields) {
        DialogControlCreateInPanelFromTemplate(libNEXS_gv_cU_HeroPanel[lv_index], c_triggerControlTypeImage, "HotS_GameUnitFrame/HeroHealthBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_heroGroup, c_anchorLeft, libNEXS_gv_cU_HeroDialogShieldBarImage[lv_index], c_anchorLeft, 0, 0);
        if ((UnitGetPropertyFixed(libNEXS_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropShieldsMax, c_unitPropCurrent) != 0.0)) {
            lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(libNEXS_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropShields, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(libNEXS_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropShieldsMax, c_unitPropCurrent)) * IntToFixed(libNEXS_gv_cUC_HEROUIBARWIDTH)));
        }
        else {
            lv_damageBarWidth = 0;
        }
        lv_damageBarHeight = DialogControlGetHeight(libNEXS_gv_cU_HeroDialogShieldBarImage[lv_index], lv_player);
    }
    else {
    }
    lv_damageBar = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(lv_damageBar, 506, lv_heroGroup);
    DialogControlSetVisible(lv_damageBar, PlayerGroupAll(), false);
    DialogControlSetVisible(lv_damageBar, lv_heroGroup, true);
    DialogControlSetSize(lv_damageBar, PlayerGroupAll(), MaxI(MinI(lv_damageBarWidth, 244), 1), lv_damageBarHeight);
    Wait(1.0, c_timeReal);
    DialogControlFadeTransparency(lv_damageBar, lv_heroGroup, 1.0, 100.0);
    Wait(1.1, c_timeReal);
    DialogControlDestroy(lv_damageBar);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CU_HeroUnitVitalChange_Init () {
    libNEXS_gt_CU_HeroUnitVitalChange = TriggerCreate("libNEXS_gt_CU_HeroUnitVitalChange_Func");
    TriggerEnable(libNEXS_gt_CU_HeroUnitVitalChange, false);
    TriggerAddEventUnitProperty(libNEXS_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libNEXS_gv_cU_HeroUnit[1][1]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libNEXS_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libNEXS_gv_cU_HeroUnit[2][1]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libNEXS_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libNEXS_gv_cU_HeroUnit[1][1]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(libNEXS_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libNEXS_gv_cU_HeroUnit[2][1]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(libNEXS_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libNEXS_gv_cU_HeroUnit[1][1]"), c_unitPropShields);
    TriggerAddEventUnitProperty(libNEXS_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libNEXS_gv_cU_HeroUnit[2][1]"), c_unitPropShields);
    TriggerAddEventUnitProperty(libNEXS_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libNEXS_gv_cU_HeroUnit[1][2]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libNEXS_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libNEXS_gv_cU_HeroUnit[2][2]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libNEXS_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libNEXS_gv_cU_HeroUnit[1][2]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(libNEXS_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libNEXS_gv_cU_HeroUnit[2][2]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(libNEXS_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libNEXS_gv_cU_HeroUnit[1][2]"), c_unitPropShields);
    TriggerAddEventUnitProperty(libNEXS_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libNEXS_gv_cU_HeroUnit[2][2]"), c_unitPropShields);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroMouseHoverText
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CU_HeroMouseHoverText_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    playergroup lv_heroGroup;

    // Automatic Variable Declarations
    int auto99AD5A18_val;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libNEXS_gv_cU_HeroDialogBorderImage[1]) || (EventDialogControl() == libNEXS_gv_cU_HeroDialogBorderImageNoEnergy[1]) || (EventDialogControl() == libNEXS_gv_cU_HeroDialogBorderImage[2]) || (EventDialogControl() == libNEXS_gv_cU_HeroDialogBorderImageNoEnergy[2]) || (EventDialogControl() == libNEXS_gv_cU_HeroDialogButton[1]) || (EventDialogControl() == libNEXS_gv_cU_HeroDialogButton[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroGroup = PlayerGroupSingle(EventPlayer());
    if (((EventDialogControl() == libNEXS_gv_cU_HeroDialogBorderImage[1]) || (EventDialogControl() == libNEXS_gv_cU_HeroDialogBorderImageNoEnergy[1]) || (EventDialogControl() == libNEXS_gv_cU_HeroDialogButton[1]))) {
        lv_index = 1;
    }
    else {
        if (((EventDialogControl() == libNEXS_gv_cU_HeroDialogBorderImage[2]) || (EventDialogControl() == libNEXS_gv_cU_HeroDialogBorderImageNoEnergy[2]) || (EventDialogControl() == libNEXS_gv_cU_HeroDialogButton[2]))) {
            lv_index = 2;
        }
        else {
            return true;
        }
    }
    auto99AD5A18_val = EventDialogControlEventType();
    if (auto99AD5A18_val == c_triggerControlEventTypeMouseEnter) {
        if ((UnitGetPropertyFixed(libNEXS_gv_cU_HeroUnit[lv_index][EventPlayer()], c_unitPropLifeMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libNEXS_gv_cU_HeroDialogHealthLabel[lv_index], lv_heroGroup, true);
        }

        if ((UnitGetPropertyFixed(libNEXS_gv_cU_HeroUnit[lv_index][EventPlayer()], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libNEXS_gv_cU_HeroDialogEnergyLabel[lv_index], lv_heroGroup, true);
        }

        if ((UnitGetPropertyFixed(libNEXS_gv_cU_HeroUnit[lv_index][EventPlayer()], c_unitPropShieldsMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libNEXS_gv_cU_HeroDialogShieldLabel[lv_index], lv_heroGroup, true);
        }

    }
    else if (auto99AD5A18_val == c_triggerControlEventTypeMouseExit) {
        DialogControlSetVisible(libNEXS_gv_cU_HeroDialogHealthLabel[lv_index], lv_heroGroup, false);
        DialogControlSetVisible(libNEXS_gv_cU_HeroDialogEnergyLabel[lv_index], lv_heroGroup, false);
        DialogControlSetVisible(libNEXS_gv_cU_HeroDialogShieldLabel[lv_index], lv_heroGroup, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CU_HeroMouseHoverText_Init () {
    libNEXS_gt_CU_HeroMouseHoverText = TriggerCreate("libNEXS_gt_CU_HeroMouseHoverText_Func");
    TriggerEnable(libNEXS_gt_CU_HeroMouseHoverText, false);
    TriggerAddEventDialogControl(libNEXS_gt_CU_HeroMouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
    TriggerAddEventDialogControl(libNEXS_gt_CU_HeroMouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E699AEE7BD97E7B1B3E4BFAEE696AFE789B9E6AE8AE5AD97E7ACA6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto040E9960_g;
    int auto040E9960_u;
    unit auto040E9960_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventChatMessage(false) == "DOCSTR_Promethus")) {
        auto040E9960_g = UnitGroup("Odin2", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto040E9960_u = UnitGroupCount(auto040E9960_g, c_unitCountAll);
        for (;; auto040E9960_u -= 1) {
            auto040E9960_var = UnitGroupUnitFromEnd(auto040E9960_g, auto040E9960_u);
            if (auto040E9960_var == null) { break; }
            libNtve_gf_UnitCreateFacingPoint(1, "Odin22", c_unitCreateIgnorePlacement, EventPlayer(), UnitGetPosition(auto040E9960_var), RegionRandomPoint(RegionEntireMap()));
            Wait(0.125, c_timeGame);
            UnitRemove(auto040E9960_var);
        }
    }

    if ((EventChatMessage(false) == "DOCSTR_PWeapon0")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "UnknownUpgrade2493", 1);
    }

    if ((EventChatMessage(false) == "DOCSTR_PWeapon1")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "UnknownUpgrade249", 1);
    }

    if ((EventChatMessage(false) == "DOCSTR_PWeapon2")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "UnknownUpgrade2492", 1);
    }

    if ((EventChatMessage(false) == "DOCSTR_PWeapon3")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "UnknownUpgrade24922", 1);
    }

    if ((EventChatMessage(false) == "DOCSTR_PWeapon4")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "UnknownUpgrade249222", 1);
    }

    if ((EventChatMessage(false) == "DOCSTR_PWeapon5")) {
        TriggerEnable(libNEXS_gt_E99381E5B995E68AA4E79BBEE58F8DE587BBE5AFBCE5BCB9, true);
        TechTreeUpgradeAddLevel(EventPlayer(), "UnknownUpgrade249223", 1);
    }

    if ((EventChatMessage(false) == "DOCSTR_PWeapon6")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "UnknownUpgrade2492232", 1);
    }

    if ((EventChatMessage(false) == "DOCSTR_PWeapon7")) {
        TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B2, true);
        TechTreeUpgradeAddLevel(EventPlayer(), "UnknownUpgrade24922322", 1);
    }

    if ((EventChatMessage(false) == "DOCSTR_PWeapon8")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "UnknownUpgrade249223222", 1);
    }

    if ((EventChatMessage(false) == "DOCSTR_PWeapon9")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "UnknownUpgrade2492232222", 1);
    }

    if (((TechTreeUpgradeCount(EventPlayer(), "UnknownUpgrade2492232222", c_techCountQueuedOrBetter) > 0) && (TechTreeUpgradeCount(EventPlayer(), "UnknownUpgrade2493", c_techCountQueuedOrBetter) > 0) && (TechTreeUpgradeCount(EventPlayer(), "UnknownUpgrade2492", c_techCountQueuedOrBetter) > 0) && (TechTreeUpgradeCount(EventPlayer(), "UnknownUpgrade2492232", c_techCountQueuedOrBetter) > 0) && (TechTreeUpgradeCount(EventPlayer(), "UnknownUpgrade24922322", c_techCountQueuedOrBetter) > 0) && (TechTreeUpgradeCount(EventPlayer(), "UnknownUpgrade249222", c_techCountQueuedOrBetter) > 0) && (TechTreeUpgradeCount(EventPlayer(), "UnknownUpgrade249223222", c_techCountQueuedOrBetter) > 0) && (TechTreeUpgradeCount(EventPlayer(), "UnknownUpgrade249223", c_techCountQueuedOrBetter) > 0) && (TechTreeUpgradeCount(EventPlayer(), "UnknownUpgrade24922", c_techCountQueuedOrBetter) > 0) && (TechTreeUpgradeCount(EventPlayer(), "UnknownUpgrade249", c_techCountQueuedOrBetter) > 0))) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E699AEE7BD97E7B1B3E4BFAEE696AFE789B9E6AE8AE5AD97E7ACA6_Init () {
    libNEXS_gt_E699AEE7BD97E7B1B3E4BFAEE696AFE789B9E6AE8AE5AD97E7ACA6 = TriggerCreate("libNEXS_gt_E699AEE7BD97E7B1B3E4BFAEE696AFE789B9E6AE8AE5AD97E7ACA6_Func");
    TriggerEnable(libNEXS_gt_E699AEE7BD97E7B1B3E4BFAEE696AFE789B9E6AE8AE5AD97E7ACA6, false);
    TriggerAddEventChatMessage(libNEXS_gt_E699AEE7BD97E7B1B3E4BFAEE696AFE789B9E6AE8AE5AD97E7ACA6, c_playerAny, "DOCSTR", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E699AEE7BD97E7B1B3E4BFAEE696AFE9A29CE889B2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e699AEE7BD97E7B1B3E4BFAEE696AF;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e699AEE7BD97E7B1B3E4BFAEE696AF = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_e699AEE7BD97E7B1B3E4BFAEE696AF) == "Odin22"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetTeamColorIndex(lv_e699AEE7BD97E7B1B3E4BFAEE696AF, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E699AEE7BD97E7B1B3E4BFAEE696AFE9A29CE889B2_Init () {
    libNEXS_gt_E699AEE7BD97E7B1B3E4BFAEE696AFE9A29CE889B2 = TriggerCreate("libNEXS_gt_E699AEE7BD97E7B1B3E4BFAEE696AFE9A29CE889B2_Func");
    TriggerEnable(libNEXS_gt_E699AEE7BD97E7B1B3E4BFAEE696AFE9A29CE889B2, false);
    TriggerAddEventUnitRegion(libNEXS_gt_E699AEE7BD97E7B1B3E4BFAEE696AFE9A29CE889B2, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????-????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e5BEAEE7BCA9E58D95E4BD8D;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e5BEAEE7BCA9E58D95E4BD8D = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetScale(lv_e5BEAEE7BCA9E58D95E4BD8D, 50.0, 50.0, 50.0);
    Wait(15.0, c_timeGame);
    UnitSetScale(lv_e5BEAEE7BCA9E58D95E4BD8D, 100.0, 100.0, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B2_Init () {
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B2 = TriggerCreate("libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B2_Func");
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B2, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B2, null, "RavenScramblerMissile2", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B2, null, "RavenScramblerMissile2", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????-????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99381E5B995E68AA4E79BBEE58F8DE587BBE5AFBCE5BCB9_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e699AEE7BD97E7B1B3E4BFAEE696AF;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e699AEE7BD97E7B1B3E4BFAEE696AF = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitFilterMatch(EventUnitDamageSourceUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == true) && (TechTreeUpgradeCount(EventPlayer(), "UnknownUpgrade249223", c_techCountQueuedOrBetter) > 0) && (UnitHasBehavior2(lv_e699AEE7BD97E7B1B3E4BFAEE696AF, "HornerAirFleetSearch723") == true) && (UnitGetType(lv_e699AEE7BD97E7B1B3E4BFAEE696AF) == "Odin22"))) {
        UnitCreateEffectUnit(lv_e699AEE7BD97E7B1B3E4BFAEE696AF, "ArchAngelPnPEMPLaunchMissile2", EventUnitDamageSourceUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99381E5B995E68AA4E79BBEE58F8DE587BBE5AFBCE5BCB9_Init () {
    libNEXS_gt_E99381E5B995E68AA4E79BBEE58F8DE587BBE5AFBCE5BCB9 = TriggerCreate("libNEXS_gt_E99381E5B995E68AA4E79BBEE58F8DE587BBE5AFBCE5BCB9_Func");
    TriggerEnable(libNEXS_gt_E99381E5B995E68AA4E79BBEE58F8DE587BBE5AFBCE5BCB9, false);
    TriggerAddEventUnitDamaged(libNEXS_gt_E99381E5B995E68AA4E79BBEE58F8DE587BBE5AFBCE5BCB9, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5889BE5BBBAE79B97E5AE9DE59CB0E7B2BE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_e380900EFBC8CE4BBBBE58AA1E697B6E997B4E38091E99A8FE69CBAE695B0;
    point lv_e587BAE7949FE782B9;

    // Automatic Variable Declarations
    const int auto7B46B67B_ae = 1000;
    int auto7B46B67B_var;

    // Variable Initialization
    lv_e380900EFBC8CE4BBBBE58AA1E697B6E997B4E38091E99A8FE69CBAE695B0 = RandomInt(0, FixedToInt(GameGetMissionTime()));

    // Conditions
    if (testConds) {
        if (!((lv_e380900EFBC8CE4BBBBE58AA1E697B6E997B4E38091E99A8FE69CBAE695B0 > 300))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7B46B67B_var = 0;
    for ( ; auto7B46B67B_var <= auto7B46B67B_ae; auto7B46B67B_var += 1 ) {
        lv_e587BAE7949FE782B9 = RegionRandomPoint(RegionEntireMap());
        if ((PointPathingPassable(lv_e587BAE7949FE782B9) == true) && (PointPathingIsConnected(lv_e587BAE7949FE782B9, PlayerStartLocation(1)) == true) && (UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(lv_e587BAE7949FE782B9, 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 1) && (UnitGroupCount(UnitGroupAlliance(1, c_unitAllianceAlly, RegionCircle(lv_e587BAE7949FE782B9, 36.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TreasureGoblin", 0, 3, lv_e587BAE7949FE782B9);
            libNEXS_gv_e79B97E5AE9DE59CB0E7B2BE = UnitLastCreated();
            UnitSetPropertyFixed(libNEXS_gv_e79B97E5AE9DE59CB0E7B2BE, c_unitPropLifeMax, 1500.0);
            UnitSetPropertyFixed(libNEXS_gv_e79B97E5AE9DE59CB0E7B2BE, c_unitPropLife, 1500.0);
            UnitSetPropertyFixed(libNEXS_gv_e79B97E5AE9DE59CB0E7B2BE, c_unitPropLifeRegen, 5.0);
            UnitBehaviorAdd(libNEXS_gv_e79B97E5AE9DE59CB0E7B2BE, "UnknownBehavior92", libNEXS_gv_e79B97E5AE9DE59CB0E7B2BE, 1);
            break;
        }
        else {
            lv_e587BAE7949FE782B9 = null;
        }
    }
    if ((lv_e587BAE7949FE782B9 != null)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5889BE5BBBAE79B97E5AE9DE59CB0E7B2BE_Init () {
    libNEXS_gt_E5889BE5BBBAE79B97E5AE9DE59CB0E7B2BE = TriggerCreate("libNEXS_gt_E5889BE5BBBAE79B97E5AE9DE59CB0E7B2BE_Func");
    TriggerEnable(libNEXS_gt_E5889BE5BBBAE79B97E5AE9DE59CB0E7B2BE, false);
    TriggerAddEventTimePeriodic(libNEXS_gt_E5889BE5BBBAE79B97E5AE9DE59CB0E7B2BE, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E79B97E5AE9DE59CB0E7B2BEE8A2ABE694BBE587BB_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_e58CBAE59F9FE58685E78EA9E5AEB6E58D95E4BD8DE7BB84;
    point lv_e7A7BBE58AA8E79BAEE6A087E782B9;

    // Automatic Variable Declarations
    const int auto175F867E_ae = 100;
    int auto175F867E_var;

    // Variable Initialization
    lv_e58CBAE59F9FE58685E78EA9E5AEB6E58D95E4BD8DE7BB84 = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TimerRestart(libNEXS_gv_e79B97E5AE9DE59CB0E7B2BEE8A2ABE694BBE587BBE8AEA1E697B6);
    TimerPause(libNEXS_gv_e79B97E5AE9DE59CB0E7B2BEE8A2ABE694BBE587BBE8AEA1E697B6, true);
    auto175F867E_var = 1;
    for ( ; auto175F867E_var <= auto175F867E_ae; auto175F867E_var += 1 ) {
        lv_e7A7BBE58AA8E79BAEE6A087E782B9 = PointWithOffsetPolar(UnitGetPosition(libNEXS_gv_e79B97E5AE9DE59CB0E7B2BE), RandomInt(8, 16), (AngleBetweenPoints(UnitGetPosition(EventUnitTarget()), UnitGetPosition(libNEXS_gv_e79B97E5AE9DE59CB0E7B2BE)) + RandomFixed(-30.0, 30.0)));
        if ((PointPathingPassable(lv_e7A7BBE58AA8E79BAEE6A087E782B9) == true) && (PathingType(lv_e7A7BBE58AA8E79BAEE6A087E782B9) == c_pathingGround)) {
            UnitIssueOrder(libNEXS_gv_e79B97E5AE9DE59CB0E7B2BE, OrderTargetingPoint(AbilityCommand("move", 0), lv_e7A7BBE58AA8E79BAEE6A087E782B9), c_orderQueueReplace);
            break;
        }
        else {
            lv_e7A7BBE58AA8E79BAEE6A087E782B9 = null;
        }
    }
    UnitBehaviorAdd(libNEXS_gv_e79B97E5AE9DE59CB0E7B2BE, "UnknownBehavior91", libNEXS_gv_e79B97E5AE9DE59CB0E7B2BE, 1);
    if ((UnitHasBehavior2(libNEXS_gv_e79B97E5AE9DE59CB0E7B2BE, "UnknownBehavior912") == false)) {
        UnitBehaviorAdd(libNEXS_gv_e79B97E5AE9DE59CB0E7B2BE, "UnknownBehavior912", libNEXS_gv_e79B97E5AE9DE59CB0E7B2BE, 1);
    }

    if ((lv_e7A7BBE58AA8E79BAEE6A087E782B9 == null)) {
        lv_e58CBAE59F9FE58685E78EA9E5AEB6E58D95E4BD8DE7BB84 = UnitGroup(null, 1, RegionCircle(UnitGetPosition(libNEXS_gv_e79B97E5AE9DE59CB0E7B2BE), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupAddUnitGroup(lv_e58CBAE59F9FE58685E78EA9E5AEB6E58D95E4BD8DE7BB84, UnitGroup(null, 2, RegionCircle(UnitGetPosition(libNEXS_gv_e79B97E5AE9DE59CB0E7B2BE), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitIssueOrder(libNEXS_gv_e79B97E5AE9DE59CB0E7B2BE, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGroupCenterOfGroup(lv_e58CBAE59F9FE58685E78EA9E5AEB6E58D95E4BD8DE7BB84), 45.0, AngleBetweenPoints(UnitGetPosition(libNEXS_gv_e79B97E5AE9DE59CB0E7B2BE), UnitGroupCenterOfGroup(lv_e58CBAE59F9FE58685E78EA9E5AEB6E58D95E4BD8DE7BB84)))), c_orderQueueReplace);
        Wait(6.0, c_timeGame);
    }

    TimerPause(libNEXS_gv_e79B97E5AE9DE59CB0E7B2BEE8A2ABE694BBE587BBE8AEA1E697B6, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E79B97E5AE9DE59CB0E7B2BEE8A2ABE694BBE587BB_Init () {
    libNEXS_gt_E79B97E5AE9DE59CB0E7B2BEE8A2ABE694BBE587BB = TriggerCreate("libNEXS_gt_E79B97E5AE9DE59CB0E7B2BEE8A2ABE694BBE587BB_Func");
    TriggerEnable(libNEXS_gt_E79B97E5AE9DE59CB0E7B2BEE8A2ABE694BBE587BB, false);
    TriggerAddEventUnitAttacked2(libNEXS_gt_E79B97E5AE9DE59CB0E7B2BEE8A2ABE694BBE587BB, UnitRefFromVariable("libNEXS_gv_e79B97E5AE9DE59CB0E7B2BE"), null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E79B97E5AE9DE59CB0E7B2BEE6ADBBE4BAA1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_e59CB0E7B2BEE6ADBBE4BAA1E99A8FE69CBAE695B0;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e59CB0E7B2BEE6ADBBE4BAA1E99A8FE69CBAE695B0 = RandomInt(0, 2);

    // Conditions
    if (testConds) {
        if (!((EventUnit() != libNtve_gf_KillingUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_e59CB0E7B2BEE6ADBBE4BAA1E99A8FE69CBAE695B0 == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SecretDocuments2522222222", 0, 0, UnitGetPosition(EventUnit()));
    }

    if ((lv_e59CB0E7B2BEE6ADBBE4BAA1E99A8FE69CBAE695B0 == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SecretDocuments23222322222222222", 0, 0, UnitGetPosition(EventUnit()));
    }

    if ((lv_e59CB0E7B2BEE6ADBBE4BAA1E99A8FE69CBAE695B0 == 2)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SecretDocuments252222", 0, 0, UnitGetPosition(EventUnit()));
    }

    PlayerCreateEffectPoint(0, "TreasureGoblinsMineral10Spawn2223", UnitGetPosition(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E79B97E5AE9DE59CB0E7B2BEE6ADBBE4BAA1_Init () {
    libNEXS_gt_E79B97E5AE9DE59CB0E7B2BEE6ADBBE4BAA1 = TriggerCreate("libNEXS_gt_E79B97E5AE9DE59CB0E7B2BEE6ADBBE4BAA1_Func");
    TriggerEnable(libNEXS_gt_E79B97E5AE9DE59CB0E7B2BEE6ADBBE4BAA1, false);
    TriggerAddEventUnitDied(libNEXS_gt_E79B97E5AE9DE59CB0E7B2BEE6ADBBE4BAA1, UnitRefFromVariable("libNEXS_gv_e79B97E5AE9DE59CB0E7B2BE"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_Tassadar
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_DUT_Tassadar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup autoBD6966DE_g;
    int autoBD6966DE_var;

    // Variable Initialization
    lv_players = libCOMI_gf_PlayersOfCommander("NexusTassadar");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8001, true);
    PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID3, c_playerPropMinerals, c_playerPropOperAdd, (10 * TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID3, "UnknownUpgrade214", c_techCountQueuedOrBetter)));
    PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID3, c_playerPropVespene, c_playerPropOperAdd, (7 * TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID3, "UnknownUpgrade214", c_techCountQueuedOrBetter)));
    TechTreeUpgradeAddLevel(1, "RaynorEngineerUpgrade22", 1);
    TechTreeUpgradeAddLevel(1, "RaynorEngineerUpgrade222", 1);
    TechTreeUpgradeAddLevel(2, "RaynorEngineerUpgrade22", 1);
    TechTreeUpgradeAddLevel(2, "RaynorEngineerUpgrade222", 1);
    autoBD6966DE_g = lv_players;
    autoBD6966DE_var = -1;
    while (true) {
        autoBD6966DE_var = PlayerGroupNextPlayer(autoBD6966DE_g, autoBD6966DE_var);
        if (autoBD6966DE_var < 0) { break; }
        libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID3 = autoBD6966DE_var;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_DUT_Tassadar_Init () {
    libNEXS_gt_DUT_Tassadar = TriggerCreate("libNEXS_gt_DUT_Tassadar_Func");
    TriggerAddEventGeneric(libNEXS_gt_DUT_Tassadar, libCOMI_gv_mISSIONINITIALIZED);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tassadar????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8001_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C001();
    libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C002();
    if (((libNEXS_gv_e697A0E6A087E9A298E79A84E58F98E9878F001 == true) && (libNEXS_gv_e697A0E6A087E9A298E79A84E58F98E9878F002 == true))) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8001_Init () {
    libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8001 = TriggerCreate("libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8001_Func");
    TriggerEnable(libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8001, false);
    TriggerAddEventUnitResearchProgress(libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8001, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tassadar????????????0.5S
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_TassadarE5BEAAE78EAFE58AA8E4BD9C05S_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_e5A194E890A8E8BEBEE68EA2E69CBAE695B0E9878F;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_e5A194E890A8E8BEBEE68EA2E69CBAE695B0E9878F = UnitGroupCount(UnitGroup("TassadarProbe", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID3, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID3, "UnknownUpgrade178", (lv_e5A194E890A8E8BEBEE68EA2E69CBAE695B0E9878F / 3));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_TassadarE5BEAAE78EAFE58AA8E4BD9C05S_Init () {
    libNEXS_gt_TassadarE5BEAAE78EAFE58AA8E4BD9C05S = TriggerCreate("libNEXS_gt_TassadarE5BEAAE78EAFE58AA8E4BD9C05S_Func");
    TriggerEnable(libNEXS_gt_TassadarE5BEAAE78EAFE58AA8E4BD9C05S, false);
    TriggerAddEventTimePeriodic(libNEXS_gt_TassadarE5BEAAE78EAFE58AA8E4BD9C05S, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_Zhakul
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_DUT_Zhakul_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup auto0F7021A8_g;
    int auto0F7021A8_var;

    // Variable Initialization
    lv_players = libCOMI_gf_PlayersOfCommander("NexusZhakul");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(1, "ArtanisZeratulUp", 1);
    TechTreeUpgradeAddLevel(2, "ArtanisZeratulUp", 1);
    TriggerEnable(libNEXS_gt_E889BEE5B094E694AFE68FB4E998B5E890A5E9A29CE889B2, true);
    TriggerEnable(libNEXS_gt_E889BEE5B094E694AFE68FB4E99B86E7BB93E782B9, true);
    TriggerEnable(libNEXS_gt_E889BEE5B094E694AFE68FB4E694BBE587BB, true);
    TriggerEnable(libNEXS_gt_E889BEE5B094E694AFE68FB4E6ADBBE4BAA1, true);
    TriggerEnable(libNEXS_gt_E8999AE697A0E69A97E5BDB1E696A9, true);
    auto0F7021A8_g = lv_players;
    auto0F7021A8_var = -1;
    while (true) {
        auto0F7021A8_var = PlayerGroupNextPlayer(auto0F7021A8_g, auto0F7021A8_var);
        if (auto0F7021A8_var < 0) { break; }
        libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID6 = auto0F7021A8_var;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_DUT_Zhakul_Init () {
    libNEXS_gt_DUT_Zhakul = TriggerCreate("libNEXS_gt_DUT_Zhakul_Func");
    TriggerAddEventGeneric(libNEXS_gt_DUT_Zhakul, libCOMI_gv_mISSIONINITIALIZED);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E889BEE5B094E694AFE68FB4E998B5E890A5E9A29CE889B2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_aiurE6989FE781B5;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_aiurE6989FE781B5 = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(lv_aiurE6989FE781B5) == "Phoenix2") || (UnitGetType(lv_aiurE6989FE781B5) == "Zealot2") || (UnitGetType(lv_aiurE6989FE781B5) == "Adept2") || (UnitGetType(lv_aiurE6989FE781B5) == "HighArchonTemplar") || (UnitGetType(lv_aiurE6989FE781B5) == "WarpPrismGiantPhasing") || (UnitGetType(lv_aiurE6989FE781B5) == "Talis"))) {
        UnitSetTeamColorIndex(lv_aiurE6989FE781B5, 2);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E889BEE5B094E694AFE68FB4E998B5E890A5E9A29CE889B2_Init () {
    libNEXS_gt_E889BEE5B094E694AFE68FB4E998B5E890A5E9A29CE889B2 = TriggerCreate("libNEXS_gt_E889BEE5B094E694AFE68FB4E998B5E890A5E9A29CE889B2_Func");
    TriggerEnable(libNEXS_gt_E889BEE5B094E694AFE68FB4E998B5E890A5E9A29CE889B2, false);
    TriggerAddEventUnitRegion(libNEXS_gt_E889BEE5B094E694AFE68FB4E998B5E890A5E9A29CE889B2, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E889BEE5B094E694AFE68FB4E99B86E7BB93E782B9_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto56595DF7_g;
    int auto56595DF7_u;
    unit auto56595DF7_var;
    unitgroup auto5BFDB362_g;
    int auto5BFDB362_u;
    unit auto5BFDB362_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto56595DF7_g = UnitGroup("SIStukovRallyBeaconPsiEmitterPoint2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID6, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto56595DF7_u = UnitGroupCount(auto56595DF7_g, c_unitCountAll);
    for (;; auto56595DF7_u -= 1) {
        auto56595DF7_var = UnitGroupUnitFromEnd(auto56595DF7_g, auto56595DF7_u);
        if (auto56595DF7_var == null) { break; }
        UnitKill(auto56595DF7_var);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SIStukovRallyBeaconPsiEmitterPoint2", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID6, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    auto5BFDB362_g = UnitGroup(null, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID6, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5BFDB362_u = UnitGroupCount(auto5BFDB362_g, c_unitCountAll);
    for (;; auto5BFDB362_u -= 1) {
        auto5BFDB362_var = UnitGroupUnitFromEnd(auto5BFDB362_g, auto5BFDB362_u);
        if (auto5BFDB362_var == null) { break; }
        if (((UnitHasBehavior2(auto5BFDB362_var, "SOAMothershipWarpAway1132") == true) || (UnitHasBehavior2(auto5BFDB362_var, "SOAMothershipWarpAway11322") == true))) {
            UnitIssueOrder(auto5BFDB362_var, OrderTargetingPoint(AbilityCommand("attack", 0), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)), c_orderQueueReplace);
            UnitBehaviorAddPlayer(auto5BFDB362_var, "TimeWarpProduction3", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID6, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E889BEE5B094E694AFE68FB4E99B86E7BB93E782B9_Init () {
    libNEXS_gt_E889BEE5B094E694AFE68FB4E99B86E7BB93E782B9 = TriggerCreate("libNEXS_gt_E889BEE5B094E694AFE68FB4E99B86E7BB93E782B9_Func");
    TriggerEnable(libNEXS_gt_E889BEE5B094E694AFE68FB4E99B86E7BB93E782B9, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E889BEE5B094E694AFE68FB4E99B86E7BB93E782B9, c_playerAny, "SIStukovPlaceHordeRallyCP2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E889BEE5B094E694AFE68FB4E694BBE587BB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto170B088A_g;
    int auto170B088A_u;
    unit auto170B088A_var;

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Talis") || (UnitGetType(EventUnit()) == "Phoenix2") || (UnitGetType(EventUnit()) == "Zealot2") || (UnitGetType(EventUnit()) == "Adept2") || (UnitGetType(EventUnit()) == "HighArchonTemplar")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto170B088A_g = UnitGroup("SIStukovRallyBeaconPsiEmitterPoint2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID6, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto170B088A_u = UnitGroupCount(auto170B088A_g, c_unitCountAll);
    for (;; auto170B088A_u -= 1) {
        auto170B088A_var = UnitGroupUnitFromEnd(auto170B088A_g, auto170B088A_u);
        if (auto170B088A_var == null) { break; }
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(auto170B088A_var)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E889BEE5B094E694AFE68FB4E694BBE587BB_Init () {
    libNEXS_gt_E889BEE5B094E694AFE68FB4E694BBE587BB = TriggerCreate("libNEXS_gt_E889BEE5B094E694AFE68FB4E694BBE587BB_Func");
    TriggerEnable(libNEXS_gt_E889BEE5B094E694AFE68FB4E694BBE587BB, false);
    TriggerAddEventUnitRegion(libNEXS_gt_E889BEE5B094E694AFE68FB4E694BBE587BB, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E889BEE5B094E694AFE68FB4E6ADBBE4BAA1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3737B79C_g;
    int auto3737B79C_u;
    unit auto3737B79C_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "WarpPrismGiantPhasing"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3737B79C_g = UnitGroup("SIStukovRallyBeaconPsiEmitterPoint2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID6, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3737B79C_u = UnitGroupCount(auto3737B79C_g, c_unitCountAll);
    for (;; auto3737B79C_u -= 1) {
        auto3737B79C_var = UnitGroupUnitFromEnd(auto3737B79C_g, auto3737B79C_u);
        if (auto3737B79C_var == null) { break; }
        UnitKill(auto3737B79C_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E889BEE5B094E694AFE68FB4E6ADBBE4BAA1_Init () {
    libNEXS_gt_E889BEE5B094E694AFE68FB4E6ADBBE4BAA1 = TriggerCreate("libNEXS_gt_E889BEE5B094E694AFE68FB4E6ADBBE4BAA1_Func");
    TriggerEnable(libNEXS_gt_E889BEE5B094E694AFE68FB4E6ADBBE4BAA1, false);
    TriggerAddEventUnitDied(libNEXS_gt_E889BEE5B094E694AFE68FB4E6ADBBE4BAA1, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8999AE697A0E69A97E5BDB1E696A9_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID6, "UnknownUpgrade25", c_techCountCompleteOnly) > 0))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID6, "UnknownUpgrade66", c_techCountCompleteOnly) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SnipeDamage2", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8999AE697A0E69A97E5BDB1E696A9_Init () {
    libNEXS_gt_E8999AE697A0E69A97E5BDB1E696A9 = TriggerCreate("libNEXS_gt_E8999AE697A0E69A97E5BDB1E696A9_Func");
    TriggerEnable(libNEXS_gt_E8999AE697A0E69A97E5BDB1E696A9, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E8999AE697A0E69A97E5BDB1E696A9, c_playerAny, "DarkTemplarShadowFuryDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xelnaga Artifact Upgrade Initial
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_XelnagaArtifactUpgradeInitial_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_xelnagaArtifactUpgradeGroup[0] = "UnknownUpgrade10";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[1] = "UnknownUpgrade11";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[2] = "UnknownUpgrade224";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[3] = "UnknownUpgrade2243";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[4] = "UnknownUpgrade2242";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[5] = "UnknownUpgrade224222";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[6] = "UnknownUpgrade2242222";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[7] = "UnknownUpgrade22422";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[8] = "UnknownUpgrade4";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[9] = "UnknownUpgrade2232";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[10] = "BlinkTech2";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[11] = "UnknownUpgrade5";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[12] = "UnknownUpgrade6";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[13] = "UnknownUpgrade22";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[14] = "UnknownUpgrade223";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[15] = "UnknownUpgrade222";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[16] = "UnknownUpgrade30";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[17] = "UnknownUpgrade31";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[18] = "UnknownUpgrade32";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[19] = "UnknownUpgrade33";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[20] = "UnknownUpgrade34";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[21] = "UnknownUpgrade36";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[22] = "UnknownUpgrade35";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[23] = "UnknownUpgrade12";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[24] = "UnknownUpgrade22222";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[25] = "UnknownUpgrade2222";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[26] = "UnknownUpgrade222222";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[27] = "UnknownUpgrade22223";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[28] = "UnknownUpgrade222232";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[29] = "UnknownUpgrade2222322";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[30] = "UnknownUpgrade14";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[31] = "UnknownUpgrade13";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[32] = "UnknownUpgrade15";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[33] = "UnknownUpgrade20";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[34] = "UnknownUpgrade172";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[35] = "UnknownUpgrade17";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[36] = "UnknownUpgrade16";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[37] = "UnknownUpgrade162";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[38] = "UnknownUpgrade19";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[39] = "Dblast";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[40] = "UnknownUpgrade66";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[41] = "UnknownUpgrade68";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[42] = "UnknownUpgrade67";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[43] = "UnknownUpgrade682";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[44] = "UnknownUpgrade25";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[45] = "UnknownUpgrade24";
    libNEXS_gv_xelnagaArtifactUpgradeGroup[46] = "UnknownUpgrade23";
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_XelnagaArtifactUpgradeInitial_Init () {
    libNEXS_gt_XelnagaArtifactUpgradeInitial = TriggerCreate("libNEXS_gt_XelnagaArtifactUpgradeInitial_Func");
    TriggerEnable(libNEXS_gt_XelnagaArtifactUpgradeInitial, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xelnaga Artifact Pickup
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_XelnagaArtifactPickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_default;
    int lv_randomInit;
    unit lv_invisibleUnit;

    // Automatic Variable Declarations
    int autoF45C9DB6_ae;
    const int autoF45C9DB6_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "zeratulinvisibleunit", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID6, EventPlayerEffectUsedPoint(c_effectLocationCasterUnit));
    lv_randomInit = RandomInt(0, (libNEXS_gv_xelnagaArtifactUpgradeMax - 1));
    lv_invisibleUnit = UnitLastCreated();
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID6, libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit], 1);
    if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade10")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul4", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade11")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul7", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade224")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul5", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade2243")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul8", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade2242")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul6", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade224222")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul2", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade2242222")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul1", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade22422")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul3", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade4")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul9", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade2232")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul10", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "BlinkTech2")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul15", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade5")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul14", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade6")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul13", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade22")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul11", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade223")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul12", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade222")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul16", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade30")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul17", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade31")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul19", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade32")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul18", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade33")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul20", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade34")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul22", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade36")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul23", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade35")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul21", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade12")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul24", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade22222")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul25", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade2222")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul26", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade222222")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul27", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade22223")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul30", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade222232")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul29", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade2222322")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul28", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade14")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul31", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade13")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul33", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade15")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul32", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade20")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul36", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade172")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul35", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade17")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul34", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade16")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul39", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade162")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul38", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade19")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul37", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "Dblast")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul40", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade66")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul41", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade68")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul42", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade67")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul44", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade682")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul43", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade25")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul46", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade24")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul45", "Ref_Head");
    }
    else if ((libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_randomInit] == "UnknownUpgrade23")) {
        libNtve_gf_AttachActorToUnit(lv_invisibleUnit, "RCZLocustNestDataTextZeratul47", "Ref_Head");
    }
    if ((lv_randomInit < (libNEXS_gv_xelnagaArtifactUpgradeMax - 1))) {
        autoF45C9DB6_ae = (libNEXS_gv_xelnagaArtifactUpgradeMax - 1);
        lv_default = lv_randomInit;
        for ( ; ( (autoF45C9DB6_ai >= 0 && lv_default <= autoF45C9DB6_ae) || (autoF45C9DB6_ai < 0 && lv_default >= autoF45C9DB6_ae) ) ; lv_default += autoF45C9DB6_ai ) {
            libNEXS_gv_xelnagaArtifactUpgradeGroup[lv_default] = libNEXS_gv_xelnagaArtifactUpgradeGroup[(lv_default + 1)];
        }
    }

    libNEXS_gv_xelnagaArtifactUpgradeMax -= 1;
    if ((libNEXS_gv_xelnagaArtifactUpgradeMax < 1)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B4E7A59EE599A8E588B7E696B0, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_XelnagaArtifactPickup_Init () {
    libNEXS_gt_XelnagaArtifactPickup = TriggerCreate("libNEXS_gt_XelnagaArtifactPickup_Func");
    TriggerEnable(libNEXS_gt_XelnagaArtifactPickup, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_XelnagaArtifactPickup, c_playerAny, "PickupNovaEquipmentMU22");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????1??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B1E5BC80E590AF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B4E58E9FE5A78BE58D87E7BAA7E68C89E992AEE99A90E8978F, true);
    TriggerExecute(libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B4E7A59EE599A8E588B7E696B0, false, false);
    TriggerExecute(libNEXS_gt_XelnagaArtifactUpgradeInitial, false, false);
    TriggerEnable(libNEXS_gt_XelnagaArtifactPickup, true);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID6, "UnknownUpgrade28722", 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_6B30B814"));
    libNEXS_gv_e7A791E68A80E6A087E8AEB0[0][8] = 1;
    libNEXS_gv_e7A791E68A80E6A087E8AEB0[1][8] = 1;
    libNEXS_gv_e7A791E68A80E6A087E8AEB0[2][7] = 1;
    libNEXS_gv_e7A791E68A80E6A087E8AEB0[2][8] = 1;
    libNEXS_gv_e7A791E68A80E6A087E8AEB0[3][7] = 1;
    libNEXS_gv_e7A791E68A80E6A087E8AEB0[3][8] = 1;
    libNEXS_gv_e7A791E68A80E6A087E8AEB0[4][8] = 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B1E5BC80E590AF_Init () {
    libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B1E5BC80E590AF = TriggerCreate("libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B1E5BC80E590AF_Func");
    TriggerEnable(libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B1E5BC80E590AF, false);
    TriggerAddEventChatMessage(libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B1E5BC80E590AF, c_playerAny, "-Zeratul1", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????4????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B4E7A59EE599A8E588B7E696B0_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_e7A59EE599A8E588B7E696B0E680BBE6ACA1E695B0;

    // Automatic Variable Declarations
    int auto57870E60_n;
    int auto57870E60_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((libNEXS_gv_e7A791E68A80E680BBE695B0 < 24)) {
            Wait(120.0, c_timeGame);
            auto57870E60_n = libNEXS_gv_e4B880E6ACA1E588B7E696B0E7A59EE599A8E695B0E9878F;
            for (auto57870E60_i = 1; auto57870E60_i <= auto57870E60_n; auto57870E60_i += 1) {
                libNEXS_gf_E6B3BDE68B89E59BBEE7A59EE599A8E588B7E696B0();
                lv_e7A59EE599A8E588B7E696B0E680BBE6ACA1E695B0 += 1;
                if ((lv_e7A59EE599A8E588B7E696B0E680BBE6ACA1E695B0 == 4)) {
                    libNEXS_gv_e4B880E6ACA1E588B7E696B0E7A59EE599A8E695B0E9878F += 1;
                }
                else if ((lv_e7A59EE599A8E588B7E696B0E680BBE6ACA1E695B0 == 8)) {
                    libNEXS_gv_e4B880E6ACA1E588B7E696B0E7A59EE599A8E695B0E9878F += 1;
                }
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B4E7A59EE599A8E588B7E696B0_Init () {
    libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B4E7A59EE599A8E588B7E696B0 = TriggerCreate("libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B4E7A59EE599A8E588B7E696B0_Func");
    TriggerEnable(libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B4E7A59EE599A8E588B7E696B0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????4????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B4E58E9FE5A78BE58D87E7BAA7E68C89E992AEE99A90E8978F_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUnitType() == "ZhakulCyberneticsCore") || (libNtve_gf_TriggeringProgressUnitType() == "ZhakulDarkCouncil") || (libNtve_gf_TriggeringProgressUnitType() == "ZhakulRoboticsBay") || (libNtve_gf_TriggeringProgressUnitType() == "ZhakulSignifierArchive") || (libNtve_gf_TriggeringProgressUnitType() == "ZhakulDarkShrine")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityShow(EventUnitProgressUnit(), "CyberneticsCoreResearch2", false);
    UnitAbilityShow(EventUnitProgressUnit(), "TwilightCouncilResearch2", false);
    UnitAbilityShow(EventUnitProgressUnit(), "RoboticsBayResearch2", false);
    UnitAbilityShow(EventUnitProgressUnit(), "TemplarArchivesResearch2", false);
    UnitAbilityShow(EventUnitProgressUnit(), "DarkShrineResearch2", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B4E58E9FE5A78BE58D87E7BAA7E68C89E992AEE99A90E8978F_Init () {
    libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B4E58E9FE5A78BE58D87E7BAA7E68C89E992AEE99A90E8978F = TriggerCreate("libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B4E58E9FE5A78BE58D87E7BAA7E68C89E992AEE99A90E8978F_Func");
    TriggerEnable(libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B4E58E9FE5A78BE58D87E7BAA7E68C89E992AEE99A90E8978F, false);
    TriggerAddEventUnitConstructProgress(libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B4E58E9FE5A78BE58D87E7BAA7E68C89E992AEE99A90E8978F, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????2??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B2E5BC80E590AF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID6, "UnknownUpgrade287", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID6, "UnknownUpgrade2872", 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_D2A28750"));
    TechTreeAbilityAllow(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID6, AbilityCommand("OracleRevelation23", 0), true);
    TechTreeAbilityAllow(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID6, AbilityCommand("OracleRevelation2", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B2E5BC80E590AF_Init () {
    libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B2E5BC80E590AF = TriggerCreate("libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B2E5BC80E590AF_Func");
    TriggerEnable(libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B2E5BC80E590AF, false);
    TriggerAddEventChatMessage(libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B2E5BC80E590AF, c_playerAny, "-Zeratul2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????3??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6B3BDE5A881E69C9B3E5BC80E590AF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID6, "ZeratulPrestigeHandofRaszagal", 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_516A53CD"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6B3BDE5A881E69C9B3E5BC80E590AF_Init () {
    libNEXS_gt_E6B3BDE5A881E69C9B3E5BC80E590AF = TriggerCreate("libNEXS_gt_E6B3BDE5A881E69C9B3E5BC80E590AF_Func");
    TriggerEnable(libNEXS_gt_E6B3BDE5A881E69C9B3E5BC80E590AF, false);
    TriggerAddEventChatMessage(libNEXS_gt_E6B3BDE5A881E69C9B3E5BC80E590AF, c_playerAny, "-Zeratul3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_Rohana
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_DUT_Rohana_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup auto44DBBC8D_g;
    int auto44DBBC8D_var;

    // Variable Initialization
    lv_players = libCOMI_gf_PlayersOfCommander("NexusRohana");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_E6B283E68B89E5B08AE69D80E6ADBBE58D95E4BD8D, true);
    TriggerEnable(libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8002, true);
    TriggerEnable(libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8003, true);
    TriggerEnable(libNEXS_gt_E5A4A7E4B8BBE69599E88BB1E99B84E6ADBBE4BAA1E68F90E7A4BA, true);
    TriggerEnable(libNEXS_gt_E88BB1E99B84E58D95E4BD8DE8BF9BE585A5E59CB0E59BBE, true);
    TriggerEnable(libNEXS_gt_E5A48DE4BB87E88085E99C87E68591, true);
    TriggerEnable(libNEXS_gt_E697B6E7A9BAE79FA9E998B5E7B298E6BB9EE5BA94E794A8, true);
    TriggerEnable(libNEXS_gt_E697B6E7A9BAE4B98BE997A8E8A2ABE691A7E6AF81, true);
    TriggerEnable(libNEXS_gt_E697B6E7A9BAE4B98BE997A8E586B7E58DB4E5AE8CE68890, true);
    TriggerEnable(libNEXS_gt_E697B6E7A9BAE4B98BE997A8E4BDBFE794A8E9A9ACE794B2E68A80E883BD, true);
    TriggerEnable(libNEXS_gt_E697B6E7A9BAE4B98BE997A8E5B7B2E9878AE694BE, true);
    TriggerEnable(libNEXS_gt_E697B6E7A9BAE4B98BE997A8E68A98E8B783, true);
    TriggerEnable(libNEXS_gt_E697B6E7A9BAE4B98BE997A8E4BDBFE794A8E697B6E7A9BAE8A382E99A99, true);
    TriggerEnable(libNEXS_gt_E697B6E7A9BAE79FA9E998B5E69A82E5819CE8BF90E8BE93, true);
    TriggerEnable(libNEXS_gt_E697B6E7A9BAE79FA9E998B5E697B6E99990E8BF87E69C9F, true);
    TriggerEnable(libNEXS_gt_E697B6E7A9BAE79FA9E998B5E7A9BAE4B8ADE5BA94E794A8E588A4E696AD, true);
    TriggerEnable(libNEXS_gt_E697B6E7A9BAE79FA9E998B5E59CB0E99DA2E5BA94E794A8E588A4E696AD, true);
    TriggerEnable(libNEXS_gt_E697B6E7A9BAE79FA9E998B5E8BF90E8BE93E58DB8E8BDBD, true);
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B, true);
    TriggerEnable(libNEXS_gt_E9BC93E8889EE88085E8BF9CE7A6BBE997AAE78EB0, true);
    TriggerEnable(libNEXS_gt_E587AFE68B89E5858BE696AFE78783E783A7BUGE4BFAEE5A48D, true);
    TriggerEnable(libNEXS_gt_E697B6E7A9BAE8A382E99A99E4B88EE697B6E7A9BAE4B98BE997A8E8BF9BE585A5E59CB0E59BBE, true);
    TechTreeUpgradeAddLevel(1, "SOAHeroicShield2", 1);
    TechTreeUpgradeAddLevel(2, "SOAHeroicShield2", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade235", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade237", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade236", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade239", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade240", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade238", 1);
    if (((true) || (true))) {
        TechTreeUpgradeAddLevel(1, "SelendisArtanisAllyUpgrade", 1);
        TechTreeUpgradeAddLevel(2, "SelendisArtanisAllyUpgrade", 1);
    }

    auto44DBBC8D_g = lv_players;
    auto44DBBC8D_var = -1;
    while (true) {
        auto44DBBC8D_var = PlayerGroupNextPlayer(auto44DBBC8D_g, auto44DBBC8D_var);
        if (auto44DBBC8D_var < 0) { break; }
        libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7 = auto44DBBC8D_var;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_DUT_Rohana_Init () {
    libNEXS_gt_DUT_Rohana = TriggerCreate("libNEXS_gt_DUT_Rohana_Func");
    TriggerAddEventGeneric(libNEXS_gt_DUT_Rohana, libCOMI_gv_mISSIONINITIALIZED);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8002_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_E998BFE5A194E5B0BCE696AFE5A48DE6B4BB2();
    libNEXS_gf_E998BFE5A194E5B0BCE696AFE5A48DE6B4BB6();
    libNEXS_gf_E998BFE5A194E5B0BCE696AFE5A48DE6B4BB3();
    libNEXS_gf_E998BFE5A194E5B0BCE696AFE5A48DE6B4BB5();
    libNEXS_gf_E998BFE5A194E5B0BCE696AFE5A48DE6B4BB4();
    libNEXS_gf_E998BFE5A194E5B0BCE696AFE5A48DE6B4BB();
    libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C003();
    libNEXS_gf_E5A48DE4BB87E88085E8A18CE4B8BAE7A7BBE999A4();
    libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C009();
    libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C015();
    libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C012();
    libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C013();
    libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C011();
    libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C014();
    libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C010();
    libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C016();
    libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C018();
    libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C020();
    libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C019();
    libNEXS_gf_E697A0E6A087E9A298E79A84E58AA8E4BD9C017();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8002_Init () {
    libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8002 = TriggerCreate("libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8002_Func");
    TriggerEnable(libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8002, false);
    TriggerAddEventUnitAbility(libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8002, null, null, c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8003_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_E998BFE5A194E5B0BCE696AFE6ADBBE4BAA12();
    libNEXS_gf_E998BFE5A194E5B0BCE696AFE6ADBBE4BAA16();
    libNEXS_gf_E998BFE5A194E5B0BCE696AFE6ADBBE4BAA13();
    libNEXS_gf_E998BFE5A194E5B0BCE696AFE6ADBBE4BAA15();
    libNEXS_gf_E998BFE5A194E5B0BCE696AFE6ADBBE4BAA14();
    libNEXS_gf_E998BFE5A194E5B0BCE696AFE6ADBBE4BAA1();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8003_Init () {
    libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8003 = TriggerCreate("libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8003_Func");
    TriggerEnable(libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8003, false);
    TriggerAddEventUnitDied(libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8003, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5A4A7E4B8BBE69599E88BB1E99B84E6ADBBE4BAA1E68F90E7A4BA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitDamageSourcePlayer() != libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7) && (EventUnitDamageDeathCheck(c_deathTypeMorph) != true) && (EventUnitDamageDeathCheck(c_deathTypeDisintegrate) != true) && (EventUnitDamageDeathCheck(c_deathTypeCancel) != true) && (EventUnitDamageDeathCheck(c_deathTypeRemove) != true)) {
        if ((UnitGetType(EventUnit()) == "ArtanisVoid")) {
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_EA02D73C"));
        }

        if ((UnitGetType(EventUnit()) == "FenixCoop")) {
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_DC18332A"));
        }

        if ((UnitGetType(EventUnit()) == "VorazunChampion")) {
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_ADEC7B75"));
        }

        if ((UnitGetType(EventUnit()) == "KaraxChampion")) {
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_F9C562D1"));
        }

        if ((UnitGetType(EventUnit()) == "VorazunChampion2")) {
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_BA0EF8BA"));
        }

        if ((UnitGetType(EventUnit()) == "AlarakChampion")) {
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_4FE5204E"));
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5A4A7E4B8BBE69599E88BB1E99B84E6ADBBE4BAA1E68F90E7A4BA_Init () {
    libNEXS_gt_E5A4A7E4B8BBE69599E88BB1E99B84E6ADBBE4BAA1E68F90E7A4BA = TriggerCreate("libNEXS_gt_E5A4A7E4B8BBE69599E88BB1E99B84E6ADBBE4BAA1E68F90E7A4BA_Func");
    TriggerEnable(libNEXS_gt_E5A4A7E4B8BBE69599E88BB1E99B84E6ADBBE4BAA1E68F90E7A4BA, false);
    TriggerAddEventUnitDamaged(libNEXS_gt_E5A4A7E4B8BBE69599E88BB1E99B84E6ADBBE4BAA1E68F90E7A4BA, null, c_unitDamageTypeAny, c_unitDamageFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E88BB1E99B84E58D95E4BD8DE8BF9BE585A5E59CB0E59BBE_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoCD7AFCEE_g;
    int autoCD7AFCEE_u;
    unit autoCD7AFCEE_var;
    unitgroup auto419DC123_g;
    int auto419DC123_u;
    unit auto419DC123_var;
    unitgroup auto6543D282_g;
    int auto6543D282_u;
    unit auto6543D282_var;
    unitgroup auto95582EF0_g;
    int auto95582EF0_u;
    unit auto95582EF0_var;
    unitgroup auto15429606_g;
    int auto15429606_u;
    unit auto15429606_var;
    unitgroup autoA10EC893_g;
    int autoA10EC893_u;
    unit autoA10EC893_var;
    unitgroup auto69DA4A62_g;
    int auto69DA4A62_u;
    unit auto69DA4A62_var;
    unitgroup auto1C5AAA92_g;
    int auto1C5AAA92_u;
    unit auto1C5AAA92_var;
    unitgroup auto9D7B7FE6_g;
    int auto9D7B7FE6_u;
    unit auto9D7B7FE6_var;
    unitgroup autoB29A69A3_g;
    int autoB29A69A3_u;
    unit autoB29A69A3_var;
    unitgroup auto51F9098F_g;
    int auto51F9098F_u;
    unit auto51F9098F_var;
    unitgroup auto29485774_g;
    int auto29485774_u;
    unit auto29485774_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade226", c_techCountQueuedOrBetter) == 0) && (UnitGetType(EventUnit()) == "AlarakChampion"))) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_F77BDA30"));
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade221", 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade226", 1);
        autoCD7AFCEE_g = UnitGroup("ArtanisGateway", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoCD7AFCEE_u = UnitGroupCount(autoCD7AFCEE_g, c_unitCountAll);
        for (;; autoCD7AFCEE_u -= 1) {
            autoCD7AFCEE_var = UnitGroupUnitFromEnd(autoCD7AFCEE_g, autoCD7AFCEE_u);
            if (autoCD7AFCEE_var == null) { break; }
            UnitBehaviorAddPlayer(autoCD7AFCEE_var, "WarpPermission22", 1, 1);
        }
        auto419DC123_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto419DC123_u = UnitGroupCount(auto419DC123_g, c_unitCountAll);
        for (;; auto419DC123_u -= 1) {
            auto419DC123_var = UnitGroupUnitFromEnd(auto419DC123_g, auto419DC123_u);
            if (auto419DC123_var == null) { break; }
            UnitBehaviorAddPlayer(auto419DC123_var, "WarpPermission22", 1, 1);
        }
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnitPOOIPO33", 1);
    }

    if (((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade227", c_techCountQueuedOrBetter) == 0) && (UnitGetType(EventUnit()) == "FenixCoop"))) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_9FB836FD"));
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade221", 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade227", 1);
        auto6543D282_g = UnitGroup("ArtanisGateway", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6543D282_u = UnitGroupCount(auto6543D282_g, c_unitCountAll);
        for (;; auto6543D282_u -= 1) {
            auto6543D282_var = UnitGroupUnitFromEnd(auto6543D282_g, auto6543D282_u);
            if (auto6543D282_var == null) { break; }
            UnitBehaviorAddPlayer(auto6543D282_var, "WarpPermission2", 1, 1);
        }
        auto95582EF0_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto95582EF0_u = UnitGroupCount(auto95582EF0_g, c_unitCountAll);
        for (;; auto95582EF0_u -= 1) {
            auto95582EF0_var = UnitGroupUnitFromEnd(auto95582EF0_g, auto95582EF0_u);
            if (auto95582EF0_var == null) { break; }
            UnitBehaviorAddPlayer(auto95582EF0_var, "WarpPermission2", 1, 1);
        }
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnitPOOIPO3", 1);
    }

    if (((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade229", c_techCountQueuedOrBetter) == 0) && (UnitGetType(EventUnit()) == "VorazunChampion"))) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_578E241E"));
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade221", 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade229", 1);
        auto15429606_g = UnitGroup("ArtanisGateway", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto15429606_u = UnitGroupCount(auto15429606_g, c_unitCountAll);
        for (;; auto15429606_u -= 1) {
            auto15429606_var = UnitGroupUnitFromEnd(auto15429606_g, auto15429606_u);
            if (auto15429606_var == null) { break; }
            UnitBehaviorAddPlayer(auto15429606_var, "WarpPermission222", 1, 1);
        }
        autoA10EC893_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA10EC893_u = UnitGroupCount(autoA10EC893_g, c_unitCountAll);
        for (;; autoA10EC893_u -= 1) {
            autoA10EC893_var = UnitGroupUnitFromEnd(autoA10EC893_g, autoA10EC893_u);
            if (autoA10EC893_var == null) { break; }
            UnitBehaviorAddPlayer(autoA10EC893_var, "WarpPermission222", 1, 1);
        }
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnitPOOIPO344", 1);
    }

    if (((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade228", c_techCountQueuedOrBetter) == 0) && (UnitGetType(EventUnit()) == "KaraxChampion"))) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_16ED571C"));
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade221", 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade228", 1);
        auto69DA4A62_g = UnitGroup("ArtanisGateway", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto69DA4A62_u = UnitGroupCount(auto69DA4A62_g, c_unitCountAll);
        for (;; auto69DA4A62_u -= 1) {
            auto69DA4A62_var = UnitGroupUnitFromEnd(auto69DA4A62_g, auto69DA4A62_u);
            if (auto69DA4A62_var == null) { break; }
            UnitBehaviorAddPlayer(auto69DA4A62_var, "WarpPermission2222", 1, 1);
        }
        auto1C5AAA92_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1C5AAA92_u = UnitGroupCount(auto1C5AAA92_g, c_unitCountAll);
        for (;; auto1C5AAA92_u -= 1) {
            auto1C5AAA92_var = UnitGroupUnitFromEnd(auto1C5AAA92_g, auto1C5AAA92_u);
            if (auto1C5AAA92_var == null) { break; }
            UnitBehaviorAddPlayer(auto1C5AAA92_var, "WarpPermission2222", 1, 1);
        }
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnitPOOIPO343", 1);
    }

    if (((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade230", c_techCountQueuedOrBetter) == 0) && (UnitGetType(EventUnit()) == "VorazunChampion2"))) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_2051E713"));
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade221", 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade230", 1);
        auto9D7B7FE6_g = UnitGroup("ArtanisGateway", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9D7B7FE6_u = UnitGroupCount(auto9D7B7FE6_g, c_unitCountAll);
        for (;; auto9D7B7FE6_u -= 1) {
            auto9D7B7FE6_var = UnitGroupUnitFromEnd(auto9D7B7FE6_g, auto9D7B7FE6_u);
            if (auto9D7B7FE6_var == null) { break; }
            UnitBehaviorAddPlayer(auto9D7B7FE6_var, "WarpPermission22222", 1, 1);
        }
        autoB29A69A3_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB29A69A3_u = UnitGroupCount(autoB29A69A3_g, c_unitCountAll);
        for (;; autoB29A69A3_u -= 1) {
            autoB29A69A3_var = UnitGroupUnitFromEnd(autoB29A69A3_g, autoB29A69A3_u);
            if (autoB29A69A3_var == null) { break; }
            UnitBehaviorAddPlayer(autoB29A69A3_var, "WarpPermission22222", 1, 1);
        }
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnitPOOIPO34", 1);
    }

    if (((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade225", c_techCountQueuedOrBetter) == 0) && (UnitGetType(EventUnit()) == "ArtanisVoid"))) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_41875CA2"));
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade221", 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade225", 1);
        auto51F9098F_g = UnitGroup("ArtanisGateway", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto51F9098F_u = UnitGroupCount(auto51F9098F_g, c_unitCountAll);
        for (;; auto51F9098F_u -= 1) {
            auto51F9098F_var = UnitGroupUnitFromEnd(auto51F9098F_g, auto51F9098F_u);
            if (auto51F9098F_var == null) { break; }
            UnitBehaviorAddPlayer(auto51F9098F_var, "WarpPermission", 1, 1);
        }
        auto29485774_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto29485774_u = UnitGroupCount(auto29485774_g, c_unitCountAll);
        for (;; auto29485774_u -= 1) {
            auto29485774_var = UnitGroupUnitFromEnd(auto29485774_g, auto29485774_u);
            if (auto29485774_var == null) { break; }
            UnitBehaviorAddPlayer(auto29485774_var, "WarpPermission", 1, 1);
        }
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnitPOOIPO", 1);
    }

    if (((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade230", c_techCountQueuedOrBetter) > 0) && (TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade228", c_techCountQueuedOrBetter) > 0) && (TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade229", c_techCountQueuedOrBetter) > 0) && (TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade227", c_techCountQueuedOrBetter) > 0) && (TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade226", c_techCountQueuedOrBetter) > 0) && (TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade225", c_techCountQueuedOrBetter) > 0))) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E88BB1E99B84E58D95E4BD8DE8BF9BE585A5E59CB0E59BBE_Init () {
    libNEXS_gt_E88BB1E99B84E58D95E4BD8DE8BF9BE585A5E59CB0E59BBE = TriggerCreate("libNEXS_gt_E88BB1E99B84E58D95E4BD8DE8BF9BE585A5E59CB0E59BBE_Func");
    TriggerEnable(libNEXS_gt_E88BB1E99B84E58D95E4BD8DE8BF9BE585A5E59CB0E59BBE, false);
    TriggerAddEventUnitRegion(libNEXS_gt_E88BB1E99B84E58D95E4BD8DE8BF9BE585A5E59CB0E59BBE, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????BUG??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E587AFE68B89E5858BE696AFE78783E783A7BUGE4BFAEE5A48D_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bUGE58D95E4BD8D;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bUGE58D95E4BD8D = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(lv_bUGE58D95E4BD8D) == "KaraxChampion")) {
        UnitBehaviorRemove(lv_bUGE58D95E4BD8D, "SwannCommanderMechWreckageBurning", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E587AFE68B89E5858BE696AFE78783E783A7BUGE4BFAEE5A48D_Init () {
    libNEXS_gt_E587AFE68B89E5858BE696AFE78783E783A7BUGE4BFAEE5A48D = TriggerCreate("libNEXS_gt_E587AFE68B89E5858BE696AFE78783E783A7BUGE4BFAEE5A48D_Func");
    TriggerEnable(libNEXS_gt_E587AFE68B89E5858BE696AFE78783E783A7BUGE4BFAEE5A48D, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E587AFE68B89E5858BE696AFE78783E783A7BUGE4BFAEE5A48D, null, "SwannCommanderMechWreckageBurning", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E587AFE68B89E5858BE696AFE78783E783A7BUGE4BFAEE5A48D, null, "SwannCommanderMechWreckageBurning", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E998BFE5A194E5B0BCE696AFE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_e5A48DE6B4BBE697B6E997B4;
    int lv_e6AF8FE7A792E699B6E4BD93E79FBFE5878FE88097;
    int lv_e6AF8FE7A792E9AB98E883BDE793A6E696AFE5878FE88097;
    fixed lv_e699B6E4BD93E79FBF;
    fixed lv_e793A6E696AF;

    // Automatic Variable Declarations
    unitgroup auto1703DFD1_g;
    int auto1703DFD1_u;
    unit auto1703DFD1_var;

    // Variable Initialization
    lv_e6AF8FE7A792E699B6E4BD93E79FBFE5878FE88097 = 10;
    lv_e6AF8FE7A792E9AB98E883BDE793A6E696AFE5878FE88097 = 5;

    // Actions
    if (!runActions) {
        return true;
    }

    auto1703DFD1_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1703DFD1_u = UnitGroupCount(auto1703DFD1_g, c_unitCountAll);
    for (;; auto1703DFD1_u -= 1) {
        auto1703DFD1_var = UnitGroupUnitFromEnd(auto1703DFD1_g, auto1703DFD1_u);
        if (auto1703DFD1_var == null) { break; }
        lv_e5A48DE6B4BBE697B6E997B4 = UnitBehaviorDuration(auto1703DFD1_var, "UnknownBehavior27");
    }
    lv_e699B6E4BD93E79FBF = (Round(lv_e5A48DE6B4BBE697B6E997B4) * lv_e6AF8FE7A792E699B6E4BD93E79FBFE5878FE88097);
    lv_e793A6E696AF = (Round(lv_e5A48DE6B4BBE697B6E997B4) * lv_e6AF8FE7A792E9AB98E883BDE793A6E696AFE5878FE88097);
    CatalogFieldValueSet(c_gameCatalogAbil, "SOAPurifierBeam82", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeMinerals) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, FixedToString(lv_e699B6E4BD93E79FBF, 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "SOAPurifierBeam82", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeVespene) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, FixedToString(lv_e793A6E696AF, 0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E998BFE5A194E5B0BCE696AFE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98_Init () {
    libNEXS_gt_E998BFE5A194E5B0BCE696AFE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98 = TriggerCreate("libNEXS_gt_E998BFE5A194E5B0BCE696AFE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98_Func");
    TriggerEnable(libNEXS_gt_E998BFE5A194E5B0BCE696AFE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98, false);
    TriggerAddEventTimePeriodic(libNEXS_gt_E998BFE5A194E5B0BCE696AFE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E998BFE68B89E7BAB3E5858BE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_e5A48DE6B4BBE697B6E997B4;
    int lv_e6AF8FE7A792E699B6E4BD93E79FBFE5878FE88097;
    int lv_e6AF8FE7A792E9AB98E883BDE793A6E696AFE5878FE88097;
    fixed lv_e699B6E4BD93E79FBF;
    fixed lv_e793A6E696AF;

    // Automatic Variable Declarations
    unitgroup auto1185C0B7_g;
    int auto1185C0B7_u;
    unit auto1185C0B7_var;

    // Variable Initialization
    lv_e6AF8FE7A792E699B6E4BD93E79FBFE5878FE88097 = 10;
    lv_e6AF8FE7A792E9AB98E883BDE793A6E696AFE5878FE88097 = 5;

    // Actions
    if (!runActions) {
        return true;
    }

    auto1185C0B7_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1185C0B7_u = UnitGroupCount(auto1185C0B7_g, c_unitCountAll);
    for (;; auto1185C0B7_u -= 1) {
        auto1185C0B7_var = UnitGroupUnitFromEnd(auto1185C0B7_g, auto1185C0B7_u);
        if (auto1185C0B7_var == null) { break; }
        lv_e5A48DE6B4BBE697B6E997B4 = UnitBehaviorDuration(auto1185C0B7_var, "UnknownBehavior272");
    }
    lv_e699B6E4BD93E79FBF = (Round(lv_e5A48DE6B4BBE697B6E997B4) * lv_e6AF8FE7A792E699B6E4BD93E79FBFE5878FE88097);
    lv_e793A6E696AF = (Round(lv_e5A48DE6B4BBE697B6E997B4) * lv_e6AF8FE7A792E9AB98E883BDE793A6E696AFE5878FE88097);
    CatalogFieldValueSet(c_gameCatalogAbil, "SOAPurifierBeam822", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeMinerals) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, FixedToString(lv_e699B6E4BD93E79FBF, 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "SOAPurifierBeam822", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeVespene) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, FixedToString(lv_e793A6E696AF, 0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E998BFE68B89E7BAB3E5858BE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98_Init () {
    libNEXS_gt_E998BFE68B89E7BAB3E5858BE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98 = TriggerCreate("libNEXS_gt_E998BFE68B89E7BAB3E5858BE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98_Func");
    TriggerEnable(libNEXS_gt_E998BFE68B89E7BAB3E5858BE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98, false);
    TriggerAddEventTimePeriodic(libNEXS_gt_E998BFE68B89E7BAB3E5858BE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E88FB2E5B0BCE5858BE696AFE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_e5A48DE6B4BBE697B6E997B4;
    int lv_e6AF8FE7A792E699B6E4BD93E79FBFE5878FE88097;
    int lv_e6AF8FE7A792E9AB98E883BDE793A6E696AFE5878FE88097;
    fixed lv_e699B6E4BD93E79FBF;
    fixed lv_e793A6E696AF;

    // Automatic Variable Declarations
    unitgroup auto605967CA_g;
    int auto605967CA_u;
    unit auto605967CA_var;

    // Variable Initialization
    lv_e6AF8FE7A792E699B6E4BD93E79FBFE5878FE88097 = 10;
    lv_e6AF8FE7A792E9AB98E883BDE793A6E696AFE5878FE88097 = 5;

    // Actions
    if (!runActions) {
        return true;
    }

    auto605967CA_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto605967CA_u = UnitGroupCount(auto605967CA_g, c_unitCountAll);
    for (;; auto605967CA_u -= 1) {
        auto605967CA_var = UnitGroupUnitFromEnd(auto605967CA_g, auto605967CA_u);
        if (auto605967CA_var == null) { break; }
        lv_e5A48DE6B4BBE697B6E997B4 = UnitBehaviorDuration(auto605967CA_var, "UnknownBehavior2722");
    }
    lv_e699B6E4BD93E79FBF = (Round(lv_e5A48DE6B4BBE697B6E997B4) * lv_e6AF8FE7A792E699B6E4BD93E79FBFE5878FE88097);
    lv_e793A6E696AF = (Round(lv_e5A48DE6B4BBE697B6E997B4) * lv_e6AF8FE7A792E9AB98E883BDE793A6E696AFE5878FE88097);
    CatalogFieldValueSet(c_gameCatalogAbil, "SOAPurifierBeam8222", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeMinerals) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, FixedToString(lv_e699B6E4BD93E79FBF, 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "SOAPurifierBeam8222", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeVespene) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, FixedToString(lv_e793A6E696AF, 0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E88FB2E5B0BCE5858BE696AFE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98_Init () {
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98 = TriggerCreate("libNEXS_gt_E88FB2E5B0BCE5858BE696AFE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98_Func");
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98, false);
    TriggerAddEventTimePeriodic(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6B283E68B89E5B08AE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_e5A48DE6B4BBE697B6E997B4;
    int lv_e6AF8FE7A792E699B6E4BD93E79FBFE5878FE88097;
    int lv_e6AF8FE7A792E9AB98E883BDE793A6E696AFE5878FE88097;
    fixed lv_e699B6E4BD93E79FBF;
    fixed lv_e793A6E696AF;

    // Automatic Variable Declarations
    unitgroup auto13B8504E_g;
    int auto13B8504E_u;
    unit auto13B8504E_var;

    // Variable Initialization
    lv_e6AF8FE7A792E699B6E4BD93E79FBFE5878FE88097 = 10;
    lv_e6AF8FE7A792E9AB98E883BDE793A6E696AFE5878FE88097 = 5;

    // Actions
    if (!runActions) {
        return true;
    }

    auto13B8504E_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto13B8504E_u = UnitGroupCount(auto13B8504E_g, c_unitCountAll);
    for (;; auto13B8504E_u -= 1) {
        auto13B8504E_var = UnitGroupUnitFromEnd(auto13B8504E_g, auto13B8504E_u);
        if (auto13B8504E_var == null) { break; }
        lv_e5A48DE6B4BBE697B6E997B4 = UnitBehaviorDuration(auto13B8504E_var, "UnknownBehavior27222");
    }
    lv_e699B6E4BD93E79FBF = (Round(lv_e5A48DE6B4BBE697B6E997B4) * lv_e6AF8FE7A792E699B6E4BD93E79FBFE5878FE88097);
    lv_e793A6E696AF = (Round(lv_e5A48DE6B4BBE697B6E997B4) * lv_e6AF8FE7A792E9AB98E883BDE793A6E696AFE5878FE88097);
    CatalogFieldValueSet(c_gameCatalogAbil, "SOAPurifierBeam82222", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeMinerals) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, FixedToString(lv_e699B6E4BD93E79FBF, 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "SOAPurifierBeam82222", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeVespene) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, FixedToString(lv_e793A6E696AF, 0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6B283E68B89E5B08AE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98_Init () {
    libNEXS_gt_E6B283E68B89E5B08AE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98 = TriggerCreate("libNEXS_gt_E6B283E68B89E5B08AE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98_Func");
    TriggerEnable(libNEXS_gt_E6B283E68B89E5B08AE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98, false);
    TriggerAddEventTimePeriodic(libNEXS_gt_E6B283E68B89E5B08AE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E587AFE68B89E5858BE696AFE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_e5A48DE6B4BBE697B6E997B4;
    int lv_e6AF8FE7A792E699B6E4BD93E79FBFE5878FE88097;
    int lv_e6AF8FE7A792E9AB98E883BDE793A6E696AFE5878FE88097;
    fixed lv_e699B6E4BD93E79FBF;
    fixed lv_e793A6E696AF;

    // Automatic Variable Declarations
    unitgroup autoBAE3D001_g;
    int autoBAE3D001_u;
    unit autoBAE3D001_var;

    // Variable Initialization
    lv_e6AF8FE7A792E699B6E4BD93E79FBFE5878FE88097 = 10;
    lv_e6AF8FE7A792E9AB98E883BDE793A6E696AFE5878FE88097 = 5;

    // Actions
    if (!runActions) {
        return true;
    }

    autoBAE3D001_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBAE3D001_u = UnitGroupCount(autoBAE3D001_g, c_unitCountAll);
    for (;; autoBAE3D001_u -= 1) {
        autoBAE3D001_var = UnitGroupUnitFromEnd(autoBAE3D001_g, autoBAE3D001_u);
        if (autoBAE3D001_var == null) { break; }
        lv_e5A48DE6B4BBE697B6E997B4 = UnitBehaviorDuration(autoBAE3D001_var, "UnknownBehavior272222");
    }
    lv_e699B6E4BD93E79FBF = (Round(lv_e5A48DE6B4BBE697B6E997B4) * lv_e6AF8FE7A792E699B6E4BD93E79FBFE5878FE88097);
    lv_e793A6E696AF = (Round(lv_e5A48DE6B4BBE697B6E997B4) * lv_e6AF8FE7A792E9AB98E883BDE793A6E696AFE5878FE88097);
    CatalogFieldValueSet(c_gameCatalogAbil, "SOAPurifierBeam822222", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeMinerals) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, FixedToString(lv_e699B6E4BD93E79FBF, 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "SOAPurifierBeam822222", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeVespene) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, FixedToString(lv_e793A6E696AF, 0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E587AFE68B89E5858BE696AFE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98_Init () {
    libNEXS_gt_E587AFE68B89E5858BE696AFE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98 = TriggerCreate("libNEXS_gt_E587AFE68B89E5858BE696AFE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98_Func");
    TriggerEnable(libNEXS_gt_E587AFE68B89E5858BE696AFE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98, false);
    TriggerAddEventTimePeriodic(libNEXS_gt_E587AFE68B89E5858BE696AFE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6B49BE59388E5A89CE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_e5A48DE6B4BBE697B6E997B4;
    int lv_e6AF8FE7A792E699B6E4BD93E79FBFE5878FE88097;
    int lv_e6AF8FE7A792E9AB98E883BDE793A6E696AFE5878FE88097;
    fixed lv_e699B6E4BD93E79FBF;
    fixed lv_e793A6E696AF;

    // Automatic Variable Declarations
    unitgroup auto960E1DD3_g;
    int auto960E1DD3_u;
    unit auto960E1DD3_var;

    // Variable Initialization
    lv_e6AF8FE7A792E699B6E4BD93E79FBFE5878FE88097 = 10;
    lv_e6AF8FE7A792E9AB98E883BDE793A6E696AFE5878FE88097 = 5;

    // Actions
    if (!runActions) {
        return true;
    }

    auto960E1DD3_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto960E1DD3_u = UnitGroupCount(auto960E1DD3_g, c_unitCountAll);
    for (;; auto960E1DD3_u -= 1) {
        auto960E1DD3_var = UnitGroupUnitFromEnd(auto960E1DD3_g, auto960E1DD3_u);
        if (auto960E1DD3_var == null) { break; }
        lv_e5A48DE6B4BBE697B6E997B4 = UnitBehaviorDuration(auto960E1DD3_var, "UnknownBehavior2722222");
    }
    lv_e699B6E4BD93E79FBF = (Round(lv_e5A48DE6B4BBE697B6E997B4) * lv_e6AF8FE7A792E699B6E4BD93E79FBFE5878FE88097);
    lv_e793A6E696AF = (Round(lv_e5A48DE6B4BBE697B6E997B4) * lv_e6AF8FE7A792E9AB98E883BDE793A6E696AFE5878FE88097);
    CatalogFieldValueSet(c_gameCatalogAbil, "SOAPurifierBeam8222222", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeMinerals) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, FixedToString(lv_e699B6E4BD93E79FBF, 0));
    CatalogFieldValueSet(c_gameCatalogAbil, "SOAPurifierBeam8222222", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeVespene) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, FixedToString(lv_e793A6E696AF, 0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6B49BE59388E5A89CE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98_Init () {
    libNEXS_gt_E6B49BE59388E5A89CE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98 = TriggerCreate("libNEXS_gt_E6B49BE59388E5A89CE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98_Func");
    TriggerEnable(libNEXS_gt_E6B49BE59388E5A89CE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98, false);
    TriggerAddEventTimePeriodic(libNEXS_gt_E6B49BE59388E5A89CE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E697B6E7A9BAE8A382E99A99E4B88EE697B6E7A9BAE4B98BE997A8E8BF9BE585A5E59CB0E59BBE_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto63FBF6CD_g;
    int auto63FBF6CD_u;
    unit auto63FBF6CD_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7) && ((UnitGetType(EventUnit()) == "PlaceWormholeUnit2") || (UnitGetType(EventUnit()) == "ArtanisGateway"))) {
        auto63FBF6CD_g = UnitGroup("RohanaCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto63FBF6CD_u = UnitGroupCount(auto63FBF6CD_g, c_unitCountAll);
        for (;; auto63FBF6CD_u -= 1) {
            auto63FBF6CD_var = UnitGroupUnitFromEnd(auto63FBF6CD_g, auto63FBF6CD_u);
            if (auto63FBF6CD_var == null) { break; }
            if ((UnitHasBehavior2(auto63FBF6CD_var, "WarpPermission") == true)) {
                UnitBehaviorAddPlayer(EventUnit(), "WarpPermission", 1, 1);
            }

            if ((UnitHasBehavior2(auto63FBF6CD_var, "WarpPermission22222") == true)) {
                UnitBehaviorAddPlayer(EventUnit(), "WarpPermission22222", 1, 1);
            }

            if ((UnitHasBehavior2(auto63FBF6CD_var, "WarpPermission2") == true)) {
                UnitBehaviorAddPlayer(EventUnit(), "WarpPermission2", 1, 1);
            }

            if ((UnitHasBehavior2(auto63FBF6CD_var, "WarpPermission222") == true)) {
                UnitBehaviorAddPlayer(EventUnit(), "WarpPermission222", 1, 1);
            }

            if ((UnitHasBehavior2(auto63FBF6CD_var, "WarpPermission2222") == true)) {
                UnitBehaviorAddPlayer(EventUnit(), "WarpPermission2222", 1, 1);
            }

            if ((UnitHasBehavior2(auto63FBF6CD_var, "WarpPermission22") == true)) {
                UnitBehaviorAddPlayer(EventUnit(), "WarpPermission22", 1, 1);
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E697B6E7A9BAE8A382E99A99E4B88EE697B6E7A9BAE4B98BE997A8E8BF9BE585A5E59CB0E59BBE_Init () {
    libNEXS_gt_E697B6E7A9BAE8A382E99A99E4B88EE697B6E7A9BAE4B98BE997A8E8BF9BE585A5E59CB0E59BBE = TriggerCreate("libNEXS_gt_E697B6E7A9BAE8A382E99A99E4B88EE697B6E7A9BAE4B98BE997A8E8BF9BE585A5E59CB0E59BBE_Func");
    TriggerEnable(libNEXS_gt_E697B6E7A9BAE8A382E99A99E4B88EE697B6E7A9BAE4B98BE997A8E8BF9BE585A5E59CB0E59BBE, false);
    TriggerAddEventUnitRegion(libNEXS_gt_E697B6E7A9BAE8A382E99A99E4B88EE697B6E7A9BAE4B98BE997A8E8BF9BE585A5E59CB0E59BBE, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E697B6E7A9BAE4B98BE997A8E68A98E8B783_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libNEXS_gv_e697B6E7A9BAE4B98BE997A8[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))], EventPlayerEffectUsedUnit(c_effectUnitCaster));
    libNEXS_gv_e697B6E7A9BAE4B98BE997A8E8AEA1E695B0[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))] = UnitGroupCount(libNEXS_gv_e697B6E7A9BAE4B98BE997A8[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))], c_unitCountAlive);
    Wait(0.01, c_timeGame);
    libNEXS_gf_E697B6E7A9BAE8A382E99A99E6A380E6B58BE58AA8E4BD9C(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    PlayerAddChargeUsed(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), "Abil/SOAPurifierMothership", -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E697B6E7A9BAE4B98BE997A8E68A98E8B783_Init () {
    libNEXS_gt_E697B6E7A9BAE4B98BE997A8E68A98E8B783 = TriggerCreate("libNEXS_gt_E697B6E7A9BAE4B98BE997A8E68A98E8B783_Func");
    TriggerEnable(libNEXS_gt_E697B6E7A9BAE4B98BE997A8E68A98E8B783, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E697B6E7A9BAE4B98BE997A8E68A98E8B783, c_playerAny, "HHBomberPlatformCreateDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E697B6E7A9BAE4B98BE997A8E8A2ABE691A7E6AF81_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ArtanisGateway"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(libNEXS_gv_e5B7B2E5B0B1E7BBAAE79A84E697B6E7A9BAE4B98BE997A8[EventPlayer()], EventUnit()) == true)) {
        PlayerAddChargeUsed(EventPlayer(), "Abil/SOAPurifierMothership", 1.0);
    }

    libNEXS_gf_E697B6E7A9BAE8A382E99A99E6A380E6B58BE58AA8E4BD9C(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E697B6E7A9BAE4B98BE997A8E8A2ABE691A7E6AF81_Init () {
    libNEXS_gt_E697B6E7A9BAE4B98BE997A8E8A2ABE691A7E6AF81 = TriggerCreate("libNEXS_gt_E697B6E7A9BAE4B98BE997A8E8A2ABE691A7E6AF81_Func");
    TriggerEnable(libNEXS_gt_E697B6E7A9BAE4B98BE997A8E8A2ABE691A7E6AF81, false);
    TriggerAddEventUnitDied(libNEXS_gt_E697B6E7A9BAE4B98BE997A8E8A2ABE691A7E6AF81, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E697B6E7A9BAE4B98BE997A8E4BDBFE794A8E697B6E7A9BAE8A382E99A99_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_E697B6E7A9BAE8A382E99A99E6A380E6B58BE58AA8E4BD9C(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E697B6E7A9BAE4B98BE997A8E4BDBFE794A8E697B6E7A9BAE8A382E99A99_Init () {
    libNEXS_gt_E697B6E7A9BAE4B98BE997A8E4BDBFE794A8E697B6E7A9BAE8A382E99A99 = TriggerCreate("libNEXS_gt_E697B6E7A9BAE4B98BE997A8E4BDBFE794A8E697B6E7A9BAE8A382E99A99_Func");
    TriggerEnable(libNEXS_gt_E697B6E7A9BAE4B98BE997A8E4BDBFE794A8E697B6E7A9BAE8A382E99A99, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E697B6E7A9BAE4B98BE997A8E4BDBFE794A8E697B6E7A9BAE8A382E99A99, c_playerAny, "UnknownEffect54");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E697B6E7A9BAE4B98BE997A8E586B7E58DB4E5AE8CE68890_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.01, c_timeGame);
    libNEXS_gf_E697B6E7A9BAE8A382E99A99E6A380E6B58BE58AA8E4BD9C(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin));
    PlayerAddChargeUsed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "Abil/SOAPurifierMothership", -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E697B6E7A9BAE4B98BE997A8E586B7E58DB4E5AE8CE68890_Init () {
    libNEXS_gt_E697B6E7A9BAE4B98BE997A8E586B7E58DB4E5AE8CE68890 = TriggerCreate("libNEXS_gt_E697B6E7A9BAE4B98BE997A8E586B7E58DB4E5AE8CE68890_Func");
    TriggerEnable(libNEXS_gt_E697B6E7A9BAE4B98BE997A8E586B7E58DB4E5AE8CE68890, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E697B6E7A9BAE4B98BE997A8E586B7E58DB4E5AE8CE68890, c_playerAny, "HHBomberDockCooldownDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E697B6E7A9BAE4B98BE997A8E4BDBFE794A8E9A9ACE794B2E68A80E883BD_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e697B6E7A9BAE4B98BE997A8E58E9FE58D95E4BD8D;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNEXS_gv_e5B7B2E5B0B1E7BBAAE79A84E697B6E7A9BAE4B98BE997A8E8AEA1E695B0[EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)] >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_e697B6E7A9BAE4B98BE997A8E58E9FE58D95E4BD8D = UnitGroupRandomUnit(libNEXS_gv_e5B7B2E5B0B1E7BBAAE79A84E697B6E7A9BAE4B98BE997A8[EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)], c_unitCountAlive);
    if ((EventPlayerEffectUsedUnit(c_effectUnitTarget) != null)) {
        UnitIssueOrder(lv_e697B6E7A9BAE4B98BE997A8E58E9FE58D95E4BD8D, OrderTargetingPoint(AbilityCommand("SOAPurifierMothership4", 0), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(lv_e697B6E7A9BAE4B98BE997A8E58E9FE58D95E4BD8D, OrderTargetingPoint(AbilityCommand("SOAPurifierMothership4", 0), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)), c_orderQueueReplace);
    }
    if (true) {
    }

    PlayerAddChargeUsed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "Abil/SOAPurifierMothership", -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E697B6E7A9BAE4B98BE997A8E4BDBFE794A8E9A9ACE794B2E68A80E883BD_Init () {
    libNEXS_gt_E697B6E7A9BAE4B98BE997A8E4BDBFE794A8E9A9ACE794B2E68A80E883BD = TriggerCreate("libNEXS_gt_E697B6E7A9BAE4B98BE997A8E4BDBFE794A8E9A9ACE794B2E68A80E883BD_Func");
    TriggerEnable(libNEXS_gt_E697B6E7A9BAE4B98BE997A8E4BDBFE794A8E9A9ACE794B2E68A80E883BD, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E697B6E7A9BAE4B98BE997A8E4BDBFE794A8E9A9ACE794B2E68A80E883BD, c_playerAny, "UnknownEffect322");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E697B6E7A9BAE4B98BE997A8E5B7B2E9878AE694BE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e697B6E7A9BAE4B98BE997A8;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerAddChargeUsed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "Abil/SOAPurifierMothership", 1.0);
    lv_e697B6E7A9BAE4B98BE997A8 = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    UnitBehaviorAdd(lv_e697B6E7A9BAE4B98BE997A8, "HHBomberPlatformAreaBombDisabler", lv_e697B6E7A9BAE4B98BE997A8, 1);
    libNEXS_gf_E697B6E7A9BAE8A382E99A99E6A380E6B58BE58AA8E4BD9C(0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E697B6E7A9BAE4B98BE997A8E5B7B2E9878AE694BE_Init () {
    libNEXS_gt_E697B6E7A9BAE4B98BE997A8E5B7B2E9878AE694BE = TriggerCreate("libNEXS_gt_E697B6E7A9BAE4B98BE997A8E5B7B2E9878AE694BE_Func");
    TriggerEnable(libNEXS_gt_E697B6E7A9BAE4B98BE997A8E5B7B2E9878AE694BE, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E697B6E7A9BAE4B98BE997A8E5B7B2E9878AE694BE, c_playerAny, "UnknownEffect54");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5A48DE4BB87E88085E99C87E68591_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D;
    point lv_e99A8FE69CBAE4BD8DE782B9;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_e99A8FE69CBAE4BD8DE782B9 = PointWithOffsetPolar(UnitGetPosition(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D), 1.0, libNtve_gf_RandomAngle());
    UnitIssueOrder(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D), -5.0, lv_e99A8FE69CBAE4BD8DE782B9)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    while ((UnitHasBehavior2(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D, "HHHellionTankFear4") == true) && (UnitIsAlive(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D) == true)) {
        UnitIssueOrder(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D), 3.0))), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    UnitIssueOrder(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5A48DE4BB87E88085E99C87E68591_Init () {
    libNEXS_gt_E5A48DE4BB87E88085E99C87E68591 = TriggerCreate("libNEXS_gt_E5A48DE4BB87E88085E99C87E68591_Func");
    TriggerEnable(libNEXS_gt_E5A48DE4BB87E88085E99C87E68591, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E5A48DE4BB87E88085E99C87E68591, null, "HHHellionTankFear4", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E5A48DE4BB87E88085E99C87E68591, null, "HHHellionTankFear4", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E697B6E7A9BAE79FA9E998B5E7B298E6BB9EE5BA94E794A8_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_e88BB1E99B84;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e88BB1E99B84 = UnitBehaviorEffectPlayer(EventUnit(), EventUnitBehavior(), c_effectPlayerCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    libNEXS_gv_e8A2ABE8BF90E8BDBDE79A84E58D95E4BD8D[lv_e88BB1E99B84] = EventUnit();
    libNEXS_gv_e8A2ABE8BF90E8BDBDE79A84E58D95E4BD8DE7BB84[lv_e88BB1E99B84] = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
    libNEXS_gv_e8BF90E8BE93E79BAEE6A087E782B9[lv_e88BB1E99B84] = UnitGetPosition(libNEXS_gv_e8A2ABE8BF90E8BDBDE79A84E58D95E4BD8D[lv_e88BB1E99B84]);
    UISetTargetingOrder(PlayerGroupSingle(UnitGetOwner(libNEXS_gv_e8A2ABE8BF90E8BDBDE79A84E58D95E4BD8D[lv_e88BB1E99B84])), libNEXS_gv_e8A2ABE8BF90E8BDBDE79A84E58D95E4BD8DE7BB84[lv_e88BB1E99B84], OrderTargetingPoint(AbilityCommand("NovaGriffinTransportUnloadUnits", 0), UnitGetPosition(libNEXS_gv_e8A2ABE8BF90E8BDBDE79A84E58D95E4BD8D[lv_e88BB1E99B84])), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E697B6E7A9BAE79FA9E998B5E7B298E6BB9EE5BA94E794A8_Init () {
    libNEXS_gt_E697B6E7A9BAE79FA9E998B5E7B298E6BB9EE5BA94E794A8 = TriggerCreate("libNEXS_gt_E697B6E7A9BAE79FA9E998B5E7B298E6BB9EE5BA94E794A8_Func");
    TriggerEnable(libNEXS_gt_E697B6E7A9BAE79FA9E998B5E7B298E6BB9EE5BA94E794A8, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E697B6E7A9BAE79FA9E998B5E7B298E6BB9EE5BA94E794A8, null, "NovaGriffinTransportActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E697B6E7A9BAE79FA9E998B5E69A82E5819CE8BF90E8BE93_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_artanis;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_artanis = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    if ((UnitHasBehavior2(libNEXS_gv_e8A2ABE8BF90E8BDBDE79A84E58D95E4BD8D[lv_artanis], "NovaGriffinTransportUnloadUnitsDespawnDelay") == false)) {
        UnitCreateEffectUnit(libNEXS_gv_e8A2ABE8BF90E8BDBDE79A84E58D95E4BD8D[lv_artanis], "NovaGriffinTransportCancelUnloadSet", libNEXS_gv_e8A2ABE8BF90E8BDBDE79A84E58D95E4BD8D[lv_artanis]);
    }

    UnitGroupClear(libNEXS_gv_e7A9BAE4B8ADE8BF90E8BE93E7BB84[lv_artanis]);
    UnitGroupClear(libNEXS_gv_e59CB0E99DA2E8BF90E8BE93E7BB84[lv_artanis]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E697B6E7A9BAE79FA9E998B5E69A82E5819CE8BF90E8BE93_Init () {
    libNEXS_gt_E697B6E7A9BAE79FA9E998B5E69A82E5819CE8BF90E8BE93 = TriggerCreate("libNEXS_gt_E697B6E7A9BAE79FA9E998B5E69A82E5819CE8BF90E8BE93_Func");
    TriggerEnable(libNEXS_gt_E697B6E7A9BAE79FA9E998B5E69A82E5819CE8BF90E8BE93, false);
    TriggerAddEventTargetModeUpdate(libNEXS_gt_E697B6E7A9BAE79FA9E998B5E69A82E5819CE8BF90E8BE93, c_playerAny, AbilityCommand("NovaGriffinTransportUnloadUnits", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E697B6E7A9BAE79FA9E998B5E697B6E99990E8BF87E69C9F_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupClear(libNEXS_gv_e7A9BAE4B8ADE8BF90E8BE93E7BB84[lv_p]);
    UnitGroupClear(libNEXS_gv_e59CB0E99DA2E8BF90E8BE93E7BB84[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E697B6E7A9BAE79FA9E998B5E697B6E99990E8BF87E69C9F_Init () {
    libNEXS_gt_E697B6E7A9BAE79FA9E998B5E697B6E99990E8BF87E69C9F = TriggerCreate("libNEXS_gt_E697B6E7A9BAE79FA9E998B5E697B6E99990E8BF87E69C9F_Func");
    TriggerEnable(libNEXS_gt_E697B6E7A9BAE79FA9E998B5E697B6E99990E8BF87E69C9F, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E697B6E7A9BAE79FA9E998B5E697B6E99990E8BF87E69C9F, c_playerAny, "NovaGriffinTransportUnloadUnitsDespawnDelayTimeOut");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E697B6E7A9BAE79FA9E998B5E7A9BAE4B8ADE5BA94E794A8E588A4E696AD_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitBehaviorEffectPlayer(EventUnit(), EventUnitBehavior(), c_effectPlayerCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libNEXS_gv_e7A9BAE4B8ADE8BF90E8BE93E7BB84[lv_p], EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E697B6E7A9BAE79FA9E998B5E7A9BAE4B8ADE5BA94E794A8E588A4E696AD_Init () {
    libNEXS_gt_E697B6E7A9BAE79FA9E998B5E7A9BAE4B8ADE5BA94E794A8E588A4E696AD = TriggerCreate("libNEXS_gt_E697B6E7A9BAE79FA9E998B5E7A9BAE4B8ADE5BA94E794A8E588A4E696AD_Func");
    TriggerEnable(libNEXS_gt_E697B6E7A9BAE79FA9E998B5E7A9BAE4B8ADE5BA94E794A8E588A4E696AD, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E697B6E7A9BAE79FA9E998B5E7A9BAE4B8ADE5BA94E794A8E588A4E696AD, null, "NovaGriffinTransportAirUnits", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E697B6E7A9BAE79FA9E998B5E59CB0E99DA2E5BA94E794A8E588A4E696AD_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitBehaviorEffectPlayer(EventUnit(), EventUnitBehavior(), c_effectPlayerCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libNEXS_gv_e59CB0E99DA2E8BF90E8BE93E7BB84[lv_p], EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E697B6E7A9BAE79FA9E998B5E59CB0E99DA2E5BA94E794A8E588A4E696AD_Init () {
    libNEXS_gt_E697B6E7A9BAE79FA9E998B5E59CB0E99DA2E5BA94E794A8E588A4E696AD = TriggerCreate("libNEXS_gt_E697B6E7A9BAE79FA9E998B5E59CB0E99DA2E5BA94E794A8E588A4E696AD_Func");
    TriggerEnable(libNEXS_gt_E697B6E7A9BAE79FA9E998B5E59CB0E99DA2E5BA94E794A8E588A4E696AD, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E697B6E7A9BAE79FA9E998B5E59CB0E99DA2E5BA94E794A8E588A4E696AD, null, "NovaGriffinTransportGroundUnits", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E697B6E7A9BAE79FA9E998B5E8BF90E8BE93E58DB8E8BDBD_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_unloadPoint;
    fixed lv_angle;
    fixed lv_distance;
    int lv_p;

    // Automatic Variable Declarations
    unitgroup autoD73C940E_g;
    int autoD73C940E_u;
    unit autoD73C940E_var;
    unitgroup auto87F282B7_g;
    int auto87F282B7_u;
    unit auto87F282B7_var;

    // Variable Initialization
    lv_unloadPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetUnit);
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_angle = AngleBetweenPoints(libNEXS_gv_e8BF90E8BE93E79BAEE6A087E782B9[lv_p], lv_unloadPoint);
    lv_distance = DistanceBetweenPoints(libNEXS_gv_e8BF90E8BE93E79BAEE6A087E782B9[lv_p], lv_unloadPoint);
    autoD73C940E_g = libNEXS_gv_e7A9BAE4B8ADE8BF90E8BE93E7BB84[lv_p];
    autoD73C940E_u = UnitGroupCount(autoD73C940E_g, c_unitCountAll);
    for (;; autoD73C940E_u -= 1) {
        autoD73C940E_var = UnitGroupUnitFromEnd(autoD73C940E_g, autoD73C940E_u);
        if (autoD73C940E_var == null) { break; }
        UnitSetPosition(autoD73C940E_var, PointWithOffsetPolar(UnitGetPosition(autoD73C940E_var), lv_distance, lv_angle), false);
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "NovaGriffinTransportAirUnitsRB", autoD73C940E_var);
    }
    auto87F282B7_g = libNEXS_gv_e59CB0E99DA2E8BF90E8BE93E7BB84[lv_p];
    auto87F282B7_u = UnitGroupCount(auto87F282B7_g, c_unitCountAll);
    for (;; auto87F282B7_u -= 1) {
        auto87F282B7_var = UnitGroupUnitFromEnd(auto87F282B7_g, auto87F282B7_u);
        if (auto87F282B7_var == null) { break; }
        if ((PointPathingPassable(PointWithOffsetPolar(UnitGetPosition(auto87F282B7_var), lv_distance, lv_angle)) == true)) {
            UnitSetPosition(auto87F282B7_var, PointWithOffsetPolar(UnitGetPosition(auto87F282B7_var), lv_distance, lv_angle), false);
        }
        else {
            UnitSetPosition(auto87F282B7_var, lv_unloadPoint, false);
        }
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "NovaGriffinTransportUnhideUnitsSet", auto87F282B7_var);
    }
    UnitGroupClear(libNEXS_gv_e7A9BAE4B8ADE8BF90E8BE93E7BB84[lv_p]);
    UnitGroupClear(libNEXS_gv_e59CB0E99DA2E8BF90E8BE93E7BB84[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E697B6E7A9BAE79FA9E998B5E8BF90E8BE93E58DB8E8BDBD_Init () {
    libNEXS_gt_E697B6E7A9BAE79FA9E998B5E8BF90E8BE93E58DB8E8BDBD = TriggerCreate("libNEXS_gt_E697B6E7A9BAE79FA9E998B5E8BF90E8BE93E58DB8E8BDBD_Func");
    TriggerEnable(libNEXS_gt_E697B6E7A9BAE79FA9E998B5E8BF90E8BE93E58DB8E8BDBD, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E697B6E7A9BAE79FA9E998B5E8BF90E8BE93E58DB8E8BDBD, c_playerAny, "NovaGriffinTransportUnloadUnitsCompletionSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6B283E68B89E5B08AE69D80E6ADBBE58D95E4BD8D_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e6B283E68B89E5B08A;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e6B283E68B89E5B08A = libNtve_gf_KillingUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(lv_e6B283E68B89E5B08A) == "VorazunChampion") && (TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "UnknownUpgrade213", c_techCountCompleteOnly) == 1)) {
        PlayerAddCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "Abil/VorazunShadowDash", -2.0);
    }
    else {
        PlayerAddCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "Abil/VorazunShadowDash", -0.5);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6B283E68B89E5B08AE69D80E6ADBBE58D95E4BD8D_Init () {
    libNEXS_gt_E6B283E68B89E5B08AE69D80E6ADBBE58D95E4BD8D = TriggerCreate("libNEXS_gt_E6B283E68B89E5B08AE69D80E6ADBBE58D95E4BD8D_Func");
    TriggerEnable(libNEXS_gt_E6B283E68B89E5B08AE69D80E6ADBBE58D95E4BD8D, false);
    TriggerAddEventUnitDied(libNEXS_gt_E6B283E68B89E5B08AE69D80E6ADBBE58D95E4BD8D, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E9BC93E8889EE88085E8BF9CE7A6BBE997AAE78EB0_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "StalkerPurifier")) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("BlinkMultiple", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnit()), -3.0, EventUnitDamageSourcePoint())), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E9BC93E8889EE88085E8BF9CE7A6BBE997AAE78EB0_Init () {
    libNEXS_gt_E9BC93E8889EE88085E8BF9CE7A6BBE997AAE78EB0 = TriggerCreate("libNEXS_gt_E9BC93E8889EE88085E8BF9CE7A6BBE997AAE78EB0_Func");
    TriggerEnable(libNEXS_gt_E9BC93E8889EE88085E8BF9CE7A6BBE997AAE78EB0, false);
    TriggerAddEventUnitDamaged(libNEXS_gt_E9BC93E8889EE88085E8BF9CE7A6BBE997AAE78EB0, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6B283E68B89E5B08AE694BBE587BBE58D95E4BD8D_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7))) {
        PlayerAddCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "Abil/VorazunShadowDash", -1.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6B283E68B89E5B08AE694BBE587BBE58D95E4BD8D_Init () {
    libNEXS_gt_E6B283E68B89E5B08AE694BBE587BBE58D95E4BD8D = TriggerCreate("libNEXS_gt_E6B283E68B89E5B08AE694BBE587BBE58D95E4BD8D_Func");
    TriggerEnable(libNEXS_gt_E6B283E68B89E5B08AE694BBE587BBE58D95E4BD8D, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E6B283E68B89E5B08AE694BBE587BBE58D95E4BD8D, c_playerAny, "DarkTemplarChampionSet2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D;
    point lv_e99A8FE69CBAE4BD8DE782B9;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_e99A8FE69CBAE4BD8DE782B9 = PointWithOffsetPolar(UnitGetPosition(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D), 1.0, libNtve_gf_RandomAngle());
    UnitIssueOrder(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D), -5.0, lv_e99A8FE69CBAE4BD8DE782B9)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    while ((UnitHasBehavior2(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D, "HHHellionTankFear") == true) && (UnitIsAlive(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D) == true)) {
        UnitIssueOrder(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D), 3.0))), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    UnitIssueOrder(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B_Init () {
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B = TriggerCreate("libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B_Func");
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B, null, "HHHellionTankFear", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B, null, "HHHellionTankFear", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_Ulrezaj
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_DUT_Ulrezaj_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    unitgroup auto2CDC1A97_g;
    int auto2CDC1A97_u;
    unit auto2CDC1A97_var;
    unitgroup autoDED82D02_g;
    int autoDED82D02_u;
    unit autoDED82D02_var;
    playergroup auto9933049E_g;
    int auto9933049E_var;

    // Variable Initialization
    lv_players = libCOMI_gf_PlayersOfCommander("NexusOvermind");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2CDC1A97_g = UnitGroup("UlrezajCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto2CDC1A97_u = UnitGroupCount(auto2CDC1A97_g, c_unitCountAll);
    for (;; auto2CDC1A97_u -= 1) {
        auto2CDC1A97_var = UnitGroupUnitFromEnd(auto2CDC1A97_g, auto2CDC1A97_u);
        if (auto2CDC1A97_var == null) { break; }
        UnitGroupAdd(libNEXS_gv_ulrezajUnitsGroup, auto2CDC1A97_var);
        UnitSetPropertyFixed(auto2CDC1A97_var, c_unitPropEnergyMax, libNEXS_gv_ulrezajUnitsAdoreEnergyMax);
        UnitSetPropertyFixed(auto2CDC1A97_var, c_unitPropEnergy, libNEXS_gv_ulrezajUnitsAdoreEnergyLast);
        UnitSetPropertyFixed(auto2CDC1A97_var, c_unitPropEnergyRegen, 0.0);
    }
    autoDED82D02_g = UnitGroup("AlysaarAltarofAbyss", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    autoDED82D02_u = UnitGroupCount(autoDED82D02_g, c_unitCountAll);
    for (;; autoDED82D02_u -= 1) {
        autoDED82D02_var = UnitGroupUnitFromEnd(autoDED82D02_g, autoDED82D02_u);
        if (autoDED82D02_var == null) { break; }
        libNEXS_gv_ulrezajArchive = autoDED82D02_var;
        UnitGroupAdd(libNEXS_gv_ulrezajUnitsGroup, autoDED82D02_var);
        UnitSetPropertyFixed(autoDED82D02_var, c_unitPropEnergyMax, libNEXS_gv_ulrezajUnitsAdoreEnergyMax);
        UnitSetPropertyFixed(autoDED82D02_var, c_unitPropEnergy, libNEXS_gv_ulrezajUnitsAdoreEnergyLast);
        UnitSetPropertyFixed(autoDED82D02_var, c_unitPropEnergyRegen, 0.0);
    }
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, "UlrezajResearchSeries2", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, "UlrezajImmortalUpgrade", 1);
    TriggerExecute(libNEXS_gt_E6ACA7E99BB7E58AA0E5B9BBE5BDB1E887AAE58AA8E8B5A0E4BA88, true, false);
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E4B887E781B5E5BD92E4B880E697B6E997B4E588B7E696B0, true);
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E883BDE9878FE9998DE4BD8E, true);
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E8BF9BE585A5E59CB0E59BBE, true);
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E7A6BBE5BC80E59CB0E59BBE, true);
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E68EA7E588B6E883BDE9878FE88EB7E58F96, true);
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E588BBE58DB0E883BDE9878FE88EB7E58F96, true);
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E68A80E883BDE69588E69E9CE883BDE9878FE88EB7E58F96, true);
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E68A80E883BDE586B7E58DB4E5878FE5B091, true);
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E998B2E883BDE9998DE4BD8EE5BC80E590AFE4B88EE69D80E6ADBBE5B9BBE5BDB1, true);
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E998B2E883BDE9998DE4BD8EE585B3E997AD, true);
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE6ADBBE4BAA1E8B584E6BA90E4B88EE883BDE9878FE88EB7E58F96, true);
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE58D87E6A0BCE883BDE9878FE88EB7E58F96, true);
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE587BBE69D80E883BDE9878FE88EB7E58F96, true);
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE8BF9BE585A5E59CB0E59BBE, true);
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E5AD98E6B4BBE7B2BEE9809AE883BDE9878FE8BF94E8BF98, true);
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E5B9BBE5BDB1E68A98E8B783, true);
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E5B9BBE5BDB1E5AD98E59CA8E58F8DE9A688E887B3E9A1B6E983A8E99DA2E69DBF, true);
    TriggerEnable(libNEXS_gt_E998BFE588A9E890A8E68A98E8B783E997A8E58585E883BD, true);
    TriggerEnable(libNEXS_gt_E998BFE588A9E890A8E5AE88E58DABE99D9EE79BB4E68EA5E58F91E5B084E789A9E980A0E68890E4BCA4E5AEB3, true);
    TriggerEnable(libNEXS_gt_E998BFE588A9E890A8E5AE88E58DABE58F8DE5BCB9E58F91E5B084E789A9, true);
    TriggerEnable(libNEXS_gt_E998BFE588A9E890A8E588BAE5AEA2E9878DE7BDAEE68A80E883BDE586B7E58DB4, true);
    TriggerEnable(libNEXS_gt_E998BFE588A9E890A8E588BAE5AEA2E9AB98E5BAA6E694B9E58F98Debug, true);
    TriggerEnable(libNEXS_gt_E8999AE7A9BAE8BDBDE4BD93E883BDE9878FE5878FE5B091E4B88EE5B9BBE5BDB1E7949FE68890, true);
    TriggerEnable(libNEXS_gt_E5B18FE99A9CE4BCA4E5AEB3E590B8E694B6E4B88EE883BDE9878FE88EB7E58F96, true);
    auto9933049E_g = lv_players;
    auto9933049E_var = -1;
    while (true) {
        auto9933049E_var = PlayerGroupNextPlayer(auto9933049E_g, auto9933049E_var);
        if (auto9933049E_var < 0) { break; }
        libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12 = auto9933049E_var;
        if ((TechTreeUnitIsAllowed(auto9933049E_var, "UlrezajCaster") == true)) {
            libCOMI_gf_CreateACCaster(auto9933049E_var, "UlrezajCaster");
            libCOMI_gf_CU_GPInitCommonCaster(auto9933049E_var, "UlrezajCaster", "Coop_GlobalCastingTemplates/TerranCasterPanelTemplate", "Coop_GlobalCastingTemplates/TerranGlobalCommandPanelTemplate", 4, "Cutscenes\\CommanderGlobalPower_Ulrezaj.SC2Cutscene", "FourButtons");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_DUT_Ulrezaj_Init () {
    libNEXS_gt_DUT_Ulrezaj = TriggerCreate("libNEXS_gt_DUT_Ulrezaj_Func");
    TriggerAddEventGeneric(libNEXS_gt_DUT_Ulrezaj, libCOMI_gv_mISSIONINITIALIZED);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE8BF9BE585A5E59CB0E59BBE_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "AlysaarHerald") || (UnitGetType(EventUnit()) == "AlysaarAssassin") || (UnitGetType(EventUnit()) == "AlysaarExectuor") || (UnitGetType(EventUnit()) == "AlysaarHunter") || (UnitGetType(EventUnit()) == "AlysaarVanguard") || (UnitGetType(EventUnit()) == "AlysaarGuard") || (UnitGetType(EventUnit()) == "UlrezajsAvatar")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyMax, libNEXS_gv_ulrezajUnitsAdoreEnergyMax);
    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, libNEXS_gv_ulrezajUnitsAdoreEnergyLast);
    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, 0.0);
    UnitGroupAdd(libNEXS_gv_ulrezajUnitsGroup, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE8BF9BE585A5E59CB0E59BBE_Init () {
    libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE8BF9BE585A5E59CB0E59BBE = TriggerCreate("libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE8BF9BE585A5E59CB0E59BBE_Func");
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE8BF9BE585A5E59CB0E59BBE, false);
    TriggerAddEventUnitRegion(libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE8BF9BE585A5E59CB0E59BBE, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE6ADBBE4BAA1E8B584E6BA90E4B88EE883BDE9878FE88EB7E58F96_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ulrezajUnitDeathMineralResource;

    // Automatic Variable Declarations
    unitgroup autoA3EF8EE5_g;
    int autoA3EF8EE5_u;
    unit autoA3EF8EE5_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() != EventPlayer()))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeMorph) != true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeCancel) != true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) != true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "AlysaarHerald") || (UnitGetType(EventUnit()) == "AlysaarAssassin") || (UnitGetType(EventUnit()) == "AlysaarExectuor") || (UnitGetType(EventUnit()) == "AlysaarHunter") || (UnitGetType(EventUnit()) == "AlysaarVanguard") || (UnitGetType(EventUnit()) == "AlysaarGuard")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(libNEXS_gv_ulrezajUnitsGroup, EventUnit()) == true)) {
        UnitGroupRemove(libNEXS_gv_ulrezajUnitsGroup, EventUnit());
    }

    UnitBehaviorAddPlayer(libNEXS_gv_ulrezajArchive, "UlrezajUnitEnergyGetJudge", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, 1);
    lv_ulrezajUnitDeathMineralResource = UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostMinerals);
    libNEXS_gv_ulrezajUnitsAdoreEnergyLast += (0.3 * lv_ulrezajUnitDeathMineralResource);
    if ((libNEXS_gv_ulrezajUnitsAdoreEnergyLast >= libNEXS_gv_ulrezajUnitsAdoreEnergyMax)) {
        libNEXS_gv_ulrezajUnitsAdoreEnergyLast = libNEXS_gv_ulrezajUnitsAdoreEnergyMax;
    }

    autoA3EF8EE5_g = libNEXS_gv_ulrezajUnitsGroup;
    autoA3EF8EE5_u = UnitGroupCount(autoA3EF8EE5_g, c_unitCountAll);
    for (;; autoA3EF8EE5_u -= 1) {
        autoA3EF8EE5_var = UnitGroupUnitFromEnd(autoA3EF8EE5_g, autoA3EF8EE5_u);
        if (autoA3EF8EE5_var == null) { break; }
        UnitSetPropertyFixed(autoA3EF8EE5_var, c_unitPropEnergy, libNEXS_gv_ulrezajUnitsAdoreEnergyLast);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE6ADBBE4BAA1E8B584E6BA90E4B88EE883BDE9878FE88EB7E58F96_Init () {
    libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE6ADBBE4BAA1E8B584E6BA90E4B88EE883BDE9878FE88EB7E58F96 = TriggerCreate("libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE6ADBBE4BAA1E8B584E6BA90E4B88EE883BDE9878FE88EB7E58F96_Func");
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE6ADBBE4BAA1E8B584E6BA90E4B88EE883BDE9878FE88EB7E58F96, false);
    TriggerAddEventUnitDied(libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE6ADBBE4BAA1E8B584E6BA90E4B88EE883BDE9878FE88EB7E58F96, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE587BBE69D80E883BDE9878FE88EB7E58F96_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_supply;
    unit lv_targetUnit;
    fixed lv_ulrezajUnitsAdoreEnergyIncrement;

    // Automatic Variable Declarations
    unitgroup auto4E8D83F9_g;
    int auto4E8D83F9_u;
    unit auto4E8D83F9_var;

    // Variable Initialization
    lv_targetUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 2))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12))) {
            return false;
        }

        if (!(((UnitGetType(libNtve_gf_KillingUnit()) == "AlysaarAssassin") || (UnitGetType(libNtve_gf_KillingUnit()) == "AlysaarExectuor") || (UnitGetType(libNtve_gf_KillingUnit()) == "AlysaarVanguard")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(libNEXS_gv_ulrezajArchive, "UlrezajUnitEnergyGetJudge", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, 1);
    lv_supply = UnitTypeGetProperty(UnitGetType(lv_targetUnit), c_unitPropSuppliesUsed);
    lv_ulrezajUnitsAdoreEnergyIncrement = (lv_supply * 2.0);
    lv_ulrezajUnitsAdoreEnergyIncrement *= (1.0 + (0.02 * TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, "UlrezajMasteryUpgrade2", c_techCountCompleteOnly)));
    libNEXS_gv_ulrezajUnitsAdoreEnergyLast += lv_ulrezajUnitsAdoreEnergyIncrement;
    if ((libNEXS_gv_ulrezajUnitsAdoreEnergyLast >= libNEXS_gv_ulrezajUnitsAdoreEnergyMax)) {
        libNEXS_gv_ulrezajUnitsAdoreEnergyLast = libNEXS_gv_ulrezajUnitsAdoreEnergyMax;
    }

    auto4E8D83F9_g = libNEXS_gv_ulrezajUnitsGroup;
    auto4E8D83F9_u = UnitGroupCount(auto4E8D83F9_g, c_unitCountAll);
    for (;; auto4E8D83F9_u -= 1) {
        auto4E8D83F9_var = UnitGroupUnitFromEnd(auto4E8D83F9_g, auto4E8D83F9_u);
        if (auto4E8D83F9_var == null) { break; }
        UnitSetPropertyFixed(auto4E8D83F9_var, c_unitPropEnergy, libNEXS_gv_ulrezajUnitsAdoreEnergyLast);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE587BBE69D80E883BDE9878FE88EB7E58F96_Init () {
    libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE587BBE69D80E883BDE9878FE88EB7E58F96 = TriggerCreate("libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE587BBE69D80E883BDE9878FE88EB7E58F96_Func");
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE587BBE69D80E883BDE9878FE88EB7E58F96, false);
    TriggerAddEventUnitDied(libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE587BBE69D80E883BDE9878FE88EB7E58F96, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6ACA7E99BB7E58AA0E68A80E883BDE69588E69E9CE883BDE9878FE88EB7E58F96_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_ulrezajUnitsAdoreEnergyIncrement;

    // Automatic Variable Declarations
    unitgroup auto0DF8281F_g;
    int auto0DF8281F_u;
    unit auto0DF8281F_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventPlayerEffectUsed() == "UlrezajUnitsDanceHonorSet") || (EventPlayerEffectUsed() == "UlrezajZealotReflectionImpactReal") || (EventPlayerEffectUsed() == "Blink422233") || (EventPlayerEffectUsed() == "UnitKnockbackBy12ImpactCP2") || (EventPlayerEffectUsed() == "UlrezajDarkArchonSacrificeAB2") || (EventPlayerEffectUsed() == "Blink4222332"))) {
        UnitBehaviorAddPlayer(libNEXS_gv_ulrezajArchive, "UlrezajUnitEnergyGetJudge", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, 1);
    }

    if ((EventPlayerEffectUsed() == "UlrezajUnitsDanceHonorSet")) {
        lv_ulrezajUnitsAdoreEnergyIncrement = 1.0;
    }

    if ((EventPlayerEffectUsed() == "UlrezajZealotReflectionImpactReal")) {
        lv_ulrezajUnitsAdoreEnergyIncrement = 12.0;
    }

    if ((EventPlayerEffectUsed() == "Blink422233")) {
        lv_ulrezajUnitsAdoreEnergyIncrement = 10.0;
    }

    if ((EventPlayerEffectUsed() == "UnitKnockbackBy12ImpactCP2")) {
        if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, "UlrezajResearchSeries22", c_techCountCompleteOnly) > 0)) {
            lv_ulrezajUnitsAdoreEnergyIncrement = 6.0;
        }
        else {
            lv_ulrezajUnitsAdoreEnergyIncrement = 4.0;
        }
    }

    lv_ulrezajUnitsAdoreEnergyIncrement *= (1.0 + (0.02 * TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, "UlrezajMasteryUpgrade2", c_techCountCompleteOnly)));
    if ((EventPlayerEffectUsed() == "UlrezajDarkArchonSacrificeAB2")) {
        lv_ulrezajUnitsAdoreEnergyIncrement = 20.0;
    }

    if ((EventPlayerEffectUsed() == "Blink4222332")) {
        lv_ulrezajUnitsAdoreEnergyIncrement = 10.0;
    }

    libNEXS_gv_ulrezajUnitsAdoreEnergyLast += lv_ulrezajUnitsAdoreEnergyIncrement;
    if ((libNEXS_gv_ulrezajUnitsAdoreEnergyLast >= libNEXS_gv_ulrezajUnitsAdoreEnergyMax)) {
        libNEXS_gv_ulrezajUnitsAdoreEnergyLast = libNEXS_gv_ulrezajUnitsAdoreEnergyMax;
    }

    auto0DF8281F_g = libNEXS_gv_ulrezajUnitsGroup;
    auto0DF8281F_u = UnitGroupCount(auto0DF8281F_g, c_unitCountAll);
    for (;; auto0DF8281F_u -= 1) {
        auto0DF8281F_var = UnitGroupUnitFromEnd(auto0DF8281F_g, auto0DF8281F_u);
        if (auto0DF8281F_var == null) { break; }
        UnitSetPropertyFixed(auto0DF8281F_var, c_unitPropEnergy, libNEXS_gv_ulrezajUnitsAdoreEnergyLast);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6ACA7E99BB7E58AA0E68A80E883BDE69588E69E9CE883BDE9878FE88EB7E58F96_Init () {
    libNEXS_gt_E6ACA7E99BB7E58AA0E68A80E883BDE69588E69E9CE883BDE9878FE88EB7E58F96 = TriggerCreate("libNEXS_gt_E6ACA7E99BB7E58AA0E68A80E883BDE69588E69E9CE883BDE9878FE88EB7E58F96_Func");
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E68A80E883BDE69588E69E9CE883BDE9878FE88EB7E58F96, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E6ACA7E99BB7E58AA0E68A80E883BDE69588E69E9CE883BDE9878FE88EB7E58F96, c_playerAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE58D87E6A0BCE883BDE9878FE88EB7E58F96_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD6AF5A56_g;
    int autoD6AF5A56_u;
    unit autoD6AF5A56_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(libNEXS_gv_ulrezajArchive, "UlrezajUnitEnergyGetJudge", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, 1);
    if (((UnitGetType(EventUnit()) == "AlysaarAssassin") || (UnitGetType(EventUnit()) == "AlysaarVanguard"))) {
        libNEXS_gv_ulrezajUnitsAdoreEnergyLast += 10.0;
    }

    if ((UnitGetType(EventUnit()) == "AlysaarExectuor")) {
        libNEXS_gv_ulrezajUnitsAdoreEnergyLast += 15.0;
    }

    if ((libNEXS_gv_ulrezajUnitsAdoreEnergyLast >= libNEXS_gv_ulrezajUnitsAdoreEnergyMax)) {
        libNEXS_gv_ulrezajUnitsAdoreEnergyLast = libNEXS_gv_ulrezajUnitsAdoreEnergyMax;
    }

    autoD6AF5A56_g = libNEXS_gv_ulrezajUnitsGroup;
    autoD6AF5A56_u = UnitGroupCount(autoD6AF5A56_g, c_unitCountAll);
    for (;; autoD6AF5A56_u -= 1) {
        autoD6AF5A56_var = UnitGroupUnitFromEnd(autoD6AF5A56_g, autoD6AF5A56_u);
        if (autoD6AF5A56_var == null) { break; }
        UnitSetPropertyFixed(autoD6AF5A56_var, c_unitPropEnergy, libNEXS_gv_ulrezajUnitsAdoreEnergyLast);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE58D87E6A0BCE883BDE9878FE88EB7E58F96_Init () {
    libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE58D87E6A0BCE883BDE9878FE88EB7E58F96 = TriggerCreate("libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE58D87E6A0BCE883BDE9878FE88EB7E58F96_Func");
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE58D87E6A0BCE883BDE9878FE88EB7E58F96, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE58D87E6A0BCE883BDE9878FE88EB7E58F96, null, "UlrezajUnitHonorStun", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6ACA7E99BB7E58AA0E883BDE9878FE9998DE4BD8E_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB3121339_g;
    int autoB3121339_u;
    unit autoB3121339_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(libNEXS_gv_ulrezajArchive, "UlrezajUnitEnergyGetJudge") == false) && (libNEXS_gv_ulrezajOther == null) && (libNEXS_gv_ulrezaj == null)) {
        libNEXS_gv_ulrezajUnitsAdoreEnergyLast -= ((15.0 + 0.0) - (0.3 * TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, "UlrezajMasteryUpgrade4", c_techCountCompleteOnly)));
        if ((libNEXS_gv_ulrezajUnitsAdoreEnergyLast <= 0.0)) {
            libNEXS_gv_ulrezajUnitsAdoreEnergyLast = 0.0;
        }

        autoB3121339_g = libNEXS_gv_ulrezajUnitsGroup;
        autoB3121339_u = UnitGroupCount(autoB3121339_g, c_unitCountAll);
        for (;; autoB3121339_u -= 1) {
            autoB3121339_var = UnitGroupUnitFromEnd(autoB3121339_g, autoB3121339_u);
            if (autoB3121339_var == null) { break; }
            UnitSetPropertyFixed(autoB3121339_var, c_unitPropEnergy, libNEXS_gv_ulrezajUnitsAdoreEnergyLast);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6ACA7E99BB7E58AA0E883BDE9878FE9998DE4BD8E_Init () {
    libNEXS_gt_E6ACA7E99BB7E58AA0E883BDE9878FE9998DE4BD8E = TriggerCreate("libNEXS_gt_E6ACA7E99BB7E58AA0E883BDE9878FE9998DE4BD8E_Func");
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E883BDE9878FE9998DE4BD8E, false);
    TriggerAddEventTimePeriodic(libNEXS_gt_E6ACA7E99BB7E58AA0E883BDE9878FE9998DE4BD8E, 1.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6ACA7E99BB7E58AA0E5AD98E6B4BBE7B2BEE9809AE883BDE9878FE8BF94E8BF98_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto12B3D37D_g;
    int auto12B3D37D_u;
    unit auto12B3D37D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_ulrezajUnitsAdoreEnergyLast += (TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, "UlrezajMasteryUpgrade22", c_techCountCompleteOnly) * 2.0);
    if ((libNEXS_gv_ulrezajUnitsAdoreEnergyLast >= libNEXS_gv_ulrezajUnitsAdoreEnergyMax)) {
        libNEXS_gv_ulrezajUnitsAdoreEnergyLast = libNEXS_gv_ulrezajUnitsAdoreEnergyMax;
    }

    auto12B3D37D_g = libNEXS_gv_ulrezajUnitsGroup;
    auto12B3D37D_u = UnitGroupCount(auto12B3D37D_g, c_unitCountAll);
    for (;; auto12B3D37D_u -= 1) {
        auto12B3D37D_var = UnitGroupUnitFromEnd(auto12B3D37D_g, auto12B3D37D_u);
        if (auto12B3D37D_var == null) { break; }
        UnitSetPropertyFixed(auto12B3D37D_var, c_unitPropEnergy, libNEXS_gv_ulrezajUnitsAdoreEnergyLast);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6ACA7E99BB7E58AA0E5AD98E6B4BBE7B2BEE9809AE883BDE9878FE8BF94E8BF98_Init () {
    libNEXS_gt_E6ACA7E99BB7E58AA0E5AD98E6B4BBE7B2BEE9809AE883BDE9878FE8BF94E8BF98 = TriggerCreate("libNEXS_gt_E6ACA7E99BB7E58AA0E5AD98E6B4BBE7B2BEE9809AE883BDE9878FE8BF94E8BF98_Func");
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E5AD98E6B4BBE7B2BEE9809AE883BDE9878FE8BF94E8BF98, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E6ACA7E99BB7E58AA0E5AD98E6B4BBE7B2BEE9809AE883BDE9878FE8BF94E8BF98, c_playerAny, "UlrezajReviveEnergyBack");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E998BFE588A9E890A8E68A98E8B783E997A8E58585E883BD_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_warpgateTimes;
    unitgroup lv_warpgateUnits;

    // Automatic Variable Declarations
    unitgroup autoE3348D60_g;
    int autoE3348D60_u;
    unit autoE3348D60_var;
    unitgroup autoA2AA6EA2_g;
    int autoA2AA6EA2_u;
    unit autoA2AA6EA2_var;
    int auto7F260187_n;
    int auto7F260187_i;
    unitgroup autoBA8DFF8F_g;
    int autoBA8DFF8F_u;
    unit autoBA8DFF8F_var;

    // Variable Initialization
    lv_warpgateTimes = 3;
    lv_warpgateUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, "UlrezajResearchSeries", c_techCountCompleteOnly) > 0)) {
        lv_warpgateTimes = 5;
    }

    autoE3348D60_g = UnitGroup("AlysaarWarpgate", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE3348D60_u = UnitGroupCount(autoE3348D60_g, c_unitCountAll);
    for (;; autoE3348D60_u -= 1) {
        autoE3348D60_var = UnitGroupUnitFromEnd(autoE3348D60_g, autoE3348D60_u);
        if (autoE3348D60_var == null) { break; }
        UnitGroupAdd(lv_warpgateUnits, autoE3348D60_var);
    }
    autoA2AA6EA2_g = lv_warpgateUnits;
    autoA2AA6EA2_u = UnitGroupCount(autoA2AA6EA2_g, c_unitCountAll);
    for (;; autoA2AA6EA2_u -= 1) {
        autoA2AA6EA2_var = UnitGroupUnitFromEnd(autoA2AA6EA2_g, autoA2AA6EA2_u);
        if (autoA2AA6EA2_var == null) { break; }
        Wait(0.5, c_timeGame);
        UnitBehaviorAddPlayer(autoA2AA6EA2_var, "SOASuperChrono2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, 1);
    }
    Wait(0.0625, c_timeGame);
    auto7F260187_n = lv_warpgateTimes;
    for (auto7F260187_i = 1; auto7F260187_i <= auto7F260187_n; auto7F260187_i += 1) {
        autoBA8DFF8F_g = lv_warpgateUnits;
        autoBA8DFF8F_u = UnitGroupCount(autoBA8DFF8F_g, c_unitCountAll);
        for (;; autoBA8DFF8F_u -= 1) {
            autoBA8DFF8F_var = UnitGroupUnitFromEnd(autoBA8DFF8F_g, autoBA8DFF8F_u);
            if (autoBA8DFF8F_var == null) { break; }
            UnitAbilityAddChargeUsed(autoBA8DFF8F_var, "WarpGateTrain22", "WarpGateTrain", -1.0);
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E998BFE588A9E890A8E68A98E8B783E997A8E58585E883BD_Init () {
    libNEXS_gt_E998BFE588A9E890A8E68A98E8B783E997A8E58585E883BD = TriggerCreate("libNEXS_gt_E998BFE588A9E890A8E68A98E8B783E997A8E58585E883BD_Func");
    TriggerEnable(libNEXS_gt_E998BFE588A9E890A8E68A98E8B783E997A8E58585E883BD, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E998BFE588A9E890A8E68A98E8B783E997A8E58585E883BD, c_playerAny, "UlrezajTopbarWarpgateTime");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5B18FE99A9CE4BCA4E5AEB3E590B8E694B6E4B88EE883BDE9878FE88EB7E58F96_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_ulrezajTopbarUnitBarrierDamage;

    // Automatic Variable Declarations
    unitgroup auto1F51246D_g;
    int auto1F51246D_u;
    unit auto1F51246D_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "ImmortalBarrierBase3") == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2)))) {
            return false;
        }

        if (!(((EventUnitDamageSourcePlayer() != 1) && (EventUnitDamageSourcePlayer() != 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ulrezajTopbarUnitBarrierDamage = EventUnitDamageAttempted();
    if ((lv_ulrezajTopbarUnitBarrierDamage > 0.0)) {
        UnitBehaviorAddPlayer(libNEXS_gv_ulrezajArchive, "UlrezajUnitEnergyGetJudge", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, 1);
        if ((lv_ulrezajTopbarUnitBarrierDamage > 100.0)) {
            lv_ulrezajTopbarUnitBarrierDamage = 100.0;
        }

        libNEXS_gv_ulrezajUnitsAdoreEnergyLast += (0.5 * lv_ulrezajTopbarUnitBarrierDamage);
        if ((libNEXS_gv_ulrezajUnitsAdoreEnergyLast >= libNEXS_gv_ulrezajUnitsAdoreEnergyMax)) {
            libNEXS_gv_ulrezajUnitsAdoreEnergyLast = libNEXS_gv_ulrezajUnitsAdoreEnergyMax;
        }

        auto1F51246D_g = libNEXS_gv_ulrezajUnitsGroup;
        auto1F51246D_u = UnitGroupCount(auto1F51246D_g, c_unitCountAll);
        for (;; auto1F51246D_u -= 1) {
            auto1F51246D_var = UnitGroupUnitFromEnd(auto1F51246D_g, auto1F51246D_u);
            if (auto1F51246D_var == null) { break; }
            UnitSetPropertyFixed(auto1F51246D_var, c_unitPropEnergy, libNEXS_gv_ulrezajUnitsAdoreEnergyLast);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5B18FE99A9CE4BCA4E5AEB3E590B8E694B6E4B88EE883BDE9878FE88EB7E58F96_Init () {
    libNEXS_gt_E5B18FE99A9CE4BCA4E5AEB3E590B8E694B6E4B88EE883BDE9878FE88EB7E58F96 = TriggerCreate("libNEXS_gt_E5B18FE99A9CE4BCA4E5AEB3E590B8E694B6E4B88EE883BDE9878FE88EB7E58F96_Func");
    TriggerEnable(libNEXS_gt_E5B18FE99A9CE4BCA4E5AEB3E590B8E694B6E4B88EE883BDE9878FE88EB7E58F96, false);
    TriggerAddEventUnitDamaged(libNEXS_gt_E5B18FE99A9CE4BCA4E5AEB3E590B8E694B6E4B88EE883BDE9878FE88EB7E58F96, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8999AE7A9BAE8BDBDE4BD93E883BDE9878FE5878FE5B091E4B88EE5B9BBE5BDB1E7949FE68890_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto90756232_g;
    int auto90756232_u;
    unit auto90756232_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUnitCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, "UlrezajsPhantom", c_techCountCompleteOnly) < 7) && ((libNEXS_gv_ulrezajOther != null) || (libNEXS_gv_ulrezaj != null))) {
        if ((RandomInt(1, 3) == 1)) {
            UnitCreate(1, "UlrezajsPhantom", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, RegionRandomPoint(RegionCircle(UnitGetPosition(libNEXS_gv_ulrezajArchive), 6.0)), libNtve_gf_RandomAngle());
            UnitSetHeight(UnitLastCreated(), RandomFixed(2.5, 3.25), 0.0);
            UnitCreateEffectUnit(libNEXS_gv_ulrezajArchive, "UlrezajToShadowDamage", UnitLastCreated());
        }

    }

    libNEXS_gv_ulrezajUnitsAdoreEnergyLast = 0.0;
    auto90756232_g = libNEXS_gv_ulrezajUnitsGroup;
    auto90756232_u = UnitGroupCount(auto90756232_g, c_unitCountAll);
    for (;; auto90756232_u -= 1) {
        auto90756232_var = UnitGroupUnitFromEnd(auto90756232_g, auto90756232_u);
        if (auto90756232_var == null) { break; }
        UnitSetPropertyFixed(auto90756232_var, c_unitPropEnergy, libNEXS_gv_ulrezajUnitsAdoreEnergyLast);
    }
    UnitCreate(1, "UlrezajsPhantom", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, RegionRandomPoint(RegionCircle(UnitGetPosition(libNEXS_gv_ulrezajArchive), 6.0)), libNtve_gf_RandomAngle());
    UnitSetHeight(UnitLastCreated(), RandomFixed(2.5, 3.25), 0.0);
    UnitCreateEffectUnit(libNEXS_gv_ulrezajArchive, "UlrezajToShadowDamage", UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8999AE7A9BAE8BDBDE4BD93E883BDE9878FE5878FE5B091E4B88EE5B9BBE5BDB1E7949FE68890_Init () {
    libNEXS_gt_E8999AE7A9BAE8BDBDE4BD93E883BDE9878FE5878FE5B091E4B88EE5B9BBE5BDB1E7949FE68890 = TriggerCreate("libNEXS_gt_E8999AE7A9BAE8BDBDE4BD93E883BDE9878FE5878FE5B091E4B88EE5B9BBE5BDB1E7949FE68890_Func");
    TriggerEnable(libNEXS_gt_E8999AE7A9BAE8BDBDE4BD93E883BDE9878FE5878FE5B091E4B88EE5B9BBE5BDB1E7949FE68890, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E8999AE7A9BAE8BDBDE4BD93E883BDE9878FE5878FE5B091E4B88EE5B9BBE5BDB1E7949FE68890, c_playerAny, "OtherCall");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6ACA7E99BB7E58AA0E5B9BBE5BDB1E887AAE58AA8E8B5A0E4BA88_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait((240.0 - (2.0 * TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, "UlrezajMasteryUpgrade333", c_techCountCompleteOnly))), c_timeAI);
        if ((TechTreeUnitCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, "UlrezajsPhantom", c_techCountCompleteOnly) < 7)) {
            UnitCreate(1, "UlrezajsPhantom", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, RegionRandomPoint(RegionCircle(UnitGetPosition(libNEXS_gv_ulrezajArchive), 6.0)), libNtve_gf_RandomAngle());
            UnitSetHeight(UnitLastCreated(), RandomFixed(2.5, 3.25), 0.0);
            UnitCreateEffectUnit(libNEXS_gv_ulrezajArchive, "UlrezajToShadowDamage", UnitLastCreated());
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6ACA7E99BB7E58AA0E5B9BBE5BDB1E887AAE58AA8E8B5A0E4BA88_Init () {
    libNEXS_gt_E6ACA7E99BB7E58AA0E5B9BBE5BDB1E887AAE58AA8E8B5A0E4BA88 = TriggerCreate("libNEXS_gt_E6ACA7E99BB7E58AA0E5B9BBE5BDB1E887AAE58AA8E8B5A0E4BA88_Func");
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E5B9BBE5BDB1E887AAE58AA8E8B5A0E4BA88, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6ACA7E99BB7E58AA0E5B9BBE5BDB1E68A98E8B783_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ulrezajShadow;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ulrezajShadow = UnitGroupClosestToPoint(UnitGroup("UlrezajsPhantom", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, RegionCircle(UnitGetPosition(libNEXS_gv_ulrezajArchive), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(libNEXS_gv_ulrezajArchive));
    if ((DistanceBetweenPoints(UnitGetPosition(libNEXS_gv_ulrezajArchive), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)) > 15.0)) {
        UnitBehaviorAddPlayer(lv_ulrezajShadow, "UlrezajShadowTeleportFarJudge", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, 1);
    }

    Wait(0.0625, c_timeGame);
    UnitIssueOrder(lv_ulrezajShadow, OrderTargetingPoint(AbilityCommand("UlrezajTeleport3", 0), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6ACA7E99BB7E58AA0E5B9BBE5BDB1E68A98E8B783_Init () {
    libNEXS_gt_E6ACA7E99BB7E58AA0E5B9BBE5BDB1E68A98E8B783 = TriggerCreate("libNEXS_gt_E6ACA7E99BB7E58AA0E5B9BBE5BDB1E68A98E8B783_Func");
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E5B9BBE5BDB1E68A98E8B783, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E6ACA7E99BB7E58AA0E5B9BBE5BDB1E68A98E8B783, c_playerAny, "ShadowTeleport");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6ACA7E99BB7E58AA0E5B9BBE5BDB1E5AD98E59CA8E58F8DE9A688E887B3E9A1B6E983A8E99DA2E69DBF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9FEEB5A0_g;
    int auto9FEEB5A0_u;
    unit auto9FEEB5A0_var;

    // Conditions
    if (testConds) {
        if (!((EventUnit() == libNEXS_gv_ulrezajArchive))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9FEEB5A0_g = UnitGroup("UlrezajCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto9FEEB5A0_u = UnitGroupCount(auto9FEEB5A0_g, c_unitCountAll);
    for (;; auto9FEEB5A0_u -= 1) {
        auto9FEEB5A0_var = UnitGroupUnitFromEnd(auto9FEEB5A0_g, auto9FEEB5A0_u);
        if (auto9FEEB5A0_var == null) { break; }
        UnitBehaviorAddPlayer(auto9FEEB5A0_var, "UlrezajShadowIn", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6ACA7E99BB7E58AA0E5B9BBE5BDB1E5AD98E59CA8E58F8DE9A688E887B3E9A1B6E983A8E99DA2E69DBF_Init () {
    libNEXS_gt_E6ACA7E99BB7E58AA0E5B9BBE5BDB1E5AD98E59CA8E58F8DE9A688E887B3E9A1B6E983A8E99DA2E69DBF = TriggerCreate("libNEXS_gt_E6ACA7E99BB7E58AA0E5B9BBE5BDB1E5AD98E59CA8E58F8DE9A688E887B3E9A1B6E983A8E99DA2E69DBF_Func");
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E5B9BBE5BDB1E5AD98E59CA8E58F8DE9A688E887B3E9A1B6E983A8E99DA2E69DBF, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E6ACA7E99BB7E58AA0E5B9BBE5BDB1E5AD98E59CA8E58F8DE9A688E887B3E9A1B6E983A8E99DA2E69DBF, null, "UlrezajShadowIn", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E6ACA7E99BB7E58AA0E5B9BBE5BDB1E5AD98E59CA8E58F8DE9A688E887B3E9A1B6E983A8E99DA2E69DBF, null, "UlrezajShadowIn", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6ACA7E99BB7E58AA0E8BF9BE585A5E59CB0E59BBE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_ulrezajCallDownLastTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_ulrezaj = EventUnit();
    libNEXS_gf_SetHeroPanelUnit(1, libNEXS_gv_ulrezaj, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12);
    UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_BFF86270"));
    UnitSetPropertyFixed(libNEXS_gv_ulrezaj, c_unitPropEnergyMax, libNEXS_gv_ulrezajUnitsAdoreEnergyMax);
    UnitSetPropertyFixed(libNEXS_gv_ulrezaj, c_unitPropEnergy, libNEXS_gv_ulrezajUnitsAdoreEnergyLast);
    UnitSetPropertyFixed(libNEXS_gv_ulrezaj, c_unitPropEnergyRegen, 0.0);
    UnitGroupAdd(libNEXS_gv_ulrezajUnitsGroup, libNEXS_gv_ulrezaj);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, "UlrezajRevive", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6ACA7E99BB7E58AA0E8BF9BE585A5E59CB0E59BBE_Init () {
    libNEXS_gt_E6ACA7E99BB7E58AA0E8BF9BE585A5E59CB0E59BBE = TriggerCreate("libNEXS_gt_E6ACA7E99BB7E58AA0E8BF9BE585A5E59CB0E59BBE_Func");
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E8BF9BE585A5E59CB0E59BBE, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E6ACA7E99BB7E58AA0E8BF9BE585A5E59CB0E59BBE, null, "UlrezajCallDown", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6ACA7E99BB7E58AA0E7A6BBE5BC80E59CB0E59BBE_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_ulrezaj = null;
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, "UlrezajRevive", -1);
    UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_2797FF67"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6ACA7E99BB7E58AA0E7A6BBE5BC80E59CB0E59BBE_Init () {
    libNEXS_gt_E6ACA7E99BB7E58AA0E7A6BBE5BC80E59CB0E59BBE = TriggerCreate("libNEXS_gt_E6ACA7E99BB7E58AA0E7A6BBE5BC80E59CB0E59BBE_Func");
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E7A6BBE5BC80E59CB0E59BBE, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E6ACA7E99BB7E58AA0E7A6BBE5BC80E59CB0E59BBE, null, "UlrezajCallDown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6ACA7E99BB7E58AA0E4B887E781B5E5BD92E4B880E697B6E997B4E588B7E696B0_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ulrezajFullEnergyJudge;
    fixed lv_ulrezajCallDownLastTimes;
    int lv_ulrezajCallDownAddTimes;
    int lv_ulrezajShieldHeal;
    fixed lv_ulrezajShieldLast;
    int lv_random;
    fixed lv_ulrezajUnitsAdoreEnergyLastTem;

    // Automatic Variable Declarations
    unitgroup autoE0911E59_g;
    int autoE0911E59_u;
    unit autoE0911E59_var;

    // Variable Initialization
    lv_ulrezajFullEnergyJudge = 3;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ulrezajUnitsAdoreEnergyLastTem = libNEXS_gv_ulrezajUnitsAdoreEnergyLast;
    if ((libNEXS_gv_ulrezajUnitsAdoreEnergyLast >= 500.0)) {
        lv_ulrezajFullEnergyJudge = 6;
    }

    lv_ulrezajCallDownAddTimes = FixedToInt((libNEXS_gv_ulrezajUnitsAdoreEnergyLast / 100.0));
    lv_ulrezajShieldHeal = FixedToInt((libNEXS_gv_ulrezajUnitsAdoreEnergyLast * lv_ulrezajFullEnergyJudge));
    lv_ulrezajShieldLast = UnitGetPropertyFixed(libNEXS_gv_ulrezaj, c_unitPropShields, c_unitPropCurrent);
    lv_ulrezajCallDownAddTimes *= lv_ulrezajFullEnergyJudge;
    lv_ulrezajCallDownLastTimes = UnitBehaviorDuration(libNEXS_gv_ulrezaj, "UlrezajCallDown");
    UnitBehaviorSetDuration(libNEXS_gv_ulrezaj, "UlrezajCallDown", (lv_ulrezajCallDownLastTimes + lv_ulrezajCallDownAddTimes));
    UnitSetPropertyFixed(libNEXS_gv_ulrezaj, c_unitPropShields, (lv_ulrezajShieldLast + lv_ulrezajShieldHeal));
    libNEXS_gv_ulrezajUnitsAdoreEnergyLast = 0.0;
    autoE0911E59_g = libNEXS_gv_ulrezajUnitsGroup;
    autoE0911E59_u = UnitGroupCount(autoE0911E59_g, c_unitCountAll);
    for (;; autoE0911E59_u -= 1) {
        autoE0911E59_var = UnitGroupUnitFromEnd(autoE0911E59_g, autoE0911E59_u);
        if (autoE0911E59_var == null) { break; }
        UnitSetPropertyFixed(autoE0911E59_var, c_unitPropEnergy, libNEXS_gv_ulrezajUnitsAdoreEnergyLast);
    }
    if ((TechTreeUnitCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, "UlrezajsPhantom", c_techCountCompleteOnly) < 7)) {
        if ((lv_ulrezajUnitsAdoreEnergyLastTem >= 500.0)) {
            lv_random = RandomInt(1, 1);
        }

        if ((lv_ulrezajUnitsAdoreEnergyLastTem >= 400.0) && (lv_ulrezajUnitsAdoreEnergyLastTem < 500.0)) {
            lv_random = RandomInt(1, 3);
        }

        if ((lv_ulrezajUnitsAdoreEnergyLastTem >= 300.0) && (lv_ulrezajUnitsAdoreEnergyLastTem < 400.0)) {
            lv_random = RandomInt(1, 5);
        }

        if ((lv_ulrezajUnitsAdoreEnergyLastTem >= 200.0) && (lv_ulrezajUnitsAdoreEnergyLastTem < 300.0)) {
            lv_random = RandomInt(1, 10);
        }

        if ((lv_ulrezajUnitsAdoreEnergyLastTem >= 100.0) && (lv_ulrezajUnitsAdoreEnergyLastTem < 200.0)) {
            lv_random = RandomInt(1, 20);
        }

        if ((lv_ulrezajUnitsAdoreEnergyLastTem > 10.0) && (lv_ulrezajUnitsAdoreEnergyLastTem < 100.0)) {
            lv_random = RandomInt(1, 50);
        }

        if ((lv_random == 1)) {
            UnitCreate(1, "UlrezajsPhantom", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, RegionRandomPoint(RegionCircle(UnitGetPosition(libNEXS_gv_ulrezajArchive), 6.0)), libNtve_gf_RandomAngle());
            UnitSetHeight(UnitLastCreated(), RandomFixed(2.5, 3.25), 0.0);
            UnitCreateEffectUnit(libNEXS_gv_ulrezajArchive, "UlrezajToShadowDamage", UnitLastCreated());
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6ACA7E99BB7E58AA0E4B887E781B5E5BD92E4B880E697B6E997B4E588B7E696B0_Init () {
    libNEXS_gt_E6ACA7E99BB7E58AA0E4B887E781B5E5BD92E4B880E697B6E997B4E588B7E696B0 = TriggerCreate("libNEXS_gt_E6ACA7E99BB7E58AA0E4B887E781B5E5BD92E4B880E697B6E997B4E588B7E696B0_Func");
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E4B887E781B5E5BD92E4B880E697B6E997B4E588B7E696B0, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E6ACA7E99BB7E58AA0E4B887E781B5E5BD92E4B880E697B6E997B4E588B7E696B0, c_playerAny, "UlrezajSoulUnitySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6ACA7E99BB7E58AA0E68EA7E588B6E883BDE9878FE88EB7E58F96_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_supply;
    unit lv_targetUnit;

    // Automatic Variable Declarations
    unitgroup autoA595950A_g;
    int autoA595950A_u;
    unit autoA595950A_var;

    // Variable Initialization
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(libNEXS_gv_ulrezajArchive, "UlrezajUnitEnergyGetJudge", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, 1);
    lv_supply = UnitTypeGetProperty(UnitGetType(lv_targetUnit), c_unitPropSuppliesUsed);
    libNEXS_gv_ulrezajUnitsAdoreEnergyLast += (lv_supply * (5.0 * (1.0 + (0.02 * TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, "UlrezajMasteryUpgrade2", c_techCountCompleteOnly)))));
    if ((libNEXS_gv_ulrezajUnitsAdoreEnergyLast >= libNEXS_gv_ulrezajUnitsAdoreEnergyMax)) {
        libNEXS_gv_ulrezajUnitsAdoreEnergyLast = libNEXS_gv_ulrezajUnitsAdoreEnergyMax;
    }

    autoA595950A_g = libNEXS_gv_ulrezajUnitsGroup;
    autoA595950A_u = UnitGroupCount(autoA595950A_g, c_unitCountAll);
    for (;; autoA595950A_u -= 1) {
        autoA595950A_var = UnitGroupUnitFromEnd(autoA595950A_g, autoA595950A_u);
        if (autoA595950A_var == null) { break; }
        UnitSetPropertyFixed(autoA595950A_var, c_unitPropEnergy, libNEXS_gv_ulrezajUnitsAdoreEnergyLast);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6ACA7E99BB7E58AA0E68EA7E588B6E883BDE9878FE88EB7E58F96_Init () {
    libNEXS_gt_E6ACA7E99BB7E58AA0E68EA7E588B6E883BDE9878FE88EB7E58F96 = TriggerCreate("libNEXS_gt_E6ACA7E99BB7E58AA0E68EA7E588B6E883BDE9878FE88EB7E58F96_Func");
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E68EA7E588B6E883BDE9878FE88EB7E58F96, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E6ACA7E99BB7E58AA0E68EA7E588B6E883BDE9878FE88EB7E58F96, c_playerAny, "DarkArchonMindControlApply");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6ACA7E99BB7E58AA0E68A80E883BDE586B7E58DB4E5878FE5B091_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerAddCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, "Abil/UlrezajSoulUnity", -1.5);
    PlayerAddCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, "Abil/UlrezajUniverseArea", -1.5);
    PlayerAddCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, "Abil/UlrezajTeleport", -1.5);
    PlayerAddCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, "Abil/UlrezajEnergyLightning", -1.5);
    PlayerAddCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, "Abil/UlrezajPsiExplode", -1.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6ACA7E99BB7E58AA0E68A80E883BDE586B7E58DB4E5878FE5B091_Init () {
    libNEXS_gt_E6ACA7E99BB7E58AA0E68A80E883BDE586B7E58DB4E5878FE5B091 = TriggerCreate("libNEXS_gt_E6ACA7E99BB7E58AA0E68A80E883BDE586B7E58DB4E5878FE5B091_Func");
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E68A80E883BDE586B7E58DB4E5878FE5B091, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E6ACA7E99BB7E58AA0E68A80E883BDE586B7E58DB4E5878FE5B091, c_playerAny, "DarkArchonWeaponDamage3");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6ACA7E99BB7E58AA0E588BBE58DB0E883BDE9878FE88EB7E58F96_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_ulrezajUnitsAdoreEnergyIncrement;

    // Automatic Variable Declarations
    unitgroup autoF3E78E63_g;
    int autoF3E78E63_u;
    unit autoF3E78E63_var;

    // Variable Initialization
    lv_ulrezajUnitsAdoreEnergyIncrement = 10.0;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(libNEXS_gv_ulrezajArchive, "UlrezajUnitEnergyGetJudge", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, 1);
    libNEXS_gv_ulrezajUnitsAdoreEnergyLast += lv_ulrezajUnitsAdoreEnergyIncrement;
    if ((libNEXS_gv_ulrezajUnitsAdoreEnergyLast >= libNEXS_gv_ulrezajUnitsAdoreEnergyMax)) {
        libNEXS_gv_ulrezajUnitsAdoreEnergyLast = libNEXS_gv_ulrezajUnitsAdoreEnergyMax;
    }

    autoF3E78E63_g = libNEXS_gv_ulrezajUnitsGroup;
    autoF3E78E63_u = UnitGroupCount(autoF3E78E63_g, c_unitCountAll);
    for (;; autoF3E78E63_u -= 1) {
        autoF3E78E63_var = UnitGroupUnitFromEnd(autoF3E78E63_g, autoF3E78E63_u);
        if (autoF3E78E63_var == null) { break; }
        UnitSetPropertyFixed(autoF3E78E63_var, c_unitPropEnergy, libNEXS_gv_ulrezajUnitsAdoreEnergyLast);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6ACA7E99BB7E58AA0E588BBE58DB0E883BDE9878FE88EB7E58F96_Init () {
    libNEXS_gt_E6ACA7E99BB7E58AA0E588BBE58DB0E883BDE9878FE88EB7E58F96 = TriggerCreate("libNEXS_gt_E6ACA7E99BB7E58AA0E588BBE58DB0E883BDE9878FE88EB7E58F96_Func");
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E588BBE58DB0E883BDE9878FE88EB7E58F96, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E6ACA7E99BB7E58AA0E588BBE58DB0E883BDE9878FE88EB7E58F96, c_playerAny, "UlrezajEyeDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6ACA7E99BB7E58AA0E998B2E883BDE9998DE4BD8EE5BC80E590AFE4B88EE69D80E6ADBBE5B9BBE5BDB1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8378DD43_g;
    int auto8378DD43_u;
    unit auto8378DD43_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.125, c_timeGame);
    if ((UnitGetType(EventUnit()) == "UlrezajsAvatar")) {
        if ((libNEXS_gv_ulrezajOther != null)) {
            UnitKill(libNEXS_gv_ulrezajOther);
        }

        libNEXS_gv_ulrezajOther = EventUnit();
    }
    else {
        auto8378DD43_g = UnitGroup("UlrezajsPhantom", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto8378DD43_u = UnitGroupCount(auto8378DD43_g, c_unitCountAll);
        for (;; auto8378DD43_u -= 1) {
            auto8378DD43_var = UnitGroupUnitFromEnd(auto8378DD43_g, auto8378DD43_u);
            if (auto8378DD43_var == null) { break; }
            UnitKill(auto8378DD43_var);
        }
        if ((libNEXS_gv_ulrezajOther != null)) {
            UnitKill(libNEXS_gv_ulrezajOther);
            libNEXS_gv_ulrezajOther = null;
        }

    }
    if (((libNEXS_gv_ulrezajOther != null) || (libNEXS_gv_ulrezaj != null))) {
        TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E883BDE9878FE9998DE4BD8E, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6ACA7E99BB7E58AA0E998B2E883BDE9998DE4BD8EE5BC80E590AFE4B88EE69D80E6ADBBE5B9BBE5BDB1_Init () {
    libNEXS_gt_E6ACA7E99BB7E58AA0E998B2E883BDE9998DE4BD8EE5BC80E590AFE4B88EE69D80E6ADBBE5B9BBE5BDB1 = TriggerCreate("libNEXS_gt_E6ACA7E99BB7E58AA0E998B2E883BDE9998DE4BD8EE5BC80E590AFE4B88EE69D80E6ADBBE5B9BBE5BDB1_Func");
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E998B2E883BDE9998DE4BD8EE5BC80E590AFE4B88EE69D80E6ADBBE5B9BBE5BDB1, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E6ACA7E99BB7E58AA0E998B2E883BDE9998DE4BD8EE5BC80E590AFE4B88EE69D80E6ADBBE5B9BBE5BDB1, null, "UlrezajCallDown2", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6ACA7E99BB7E58AA0E998B2E883BDE9998DE4BD8EE585B3E997AD_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.125, c_timeGame);
    if ((UnitGroupCount(UnitGroup("UlrezajsAvatar", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive) < 1)) {
        libNEXS_gv_ulrezajOther = null;
    }

    if ((libNEXS_gv_ulrezajOther == null) && (libNEXS_gv_ulrezaj == null)) {
        TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E883BDE9878FE9998DE4BD8E, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6ACA7E99BB7E58AA0E998B2E883BDE9998DE4BD8EE585B3E997AD_Init () {
    libNEXS_gt_E6ACA7E99BB7E58AA0E998B2E883BDE9998DE4BD8EE585B3E997AD = TriggerCreate("libNEXS_gt_E6ACA7E99BB7E58AA0E998B2E883BDE9998DE4BD8EE585B3E997AD_Func");
    TriggerEnable(libNEXS_gt_E6ACA7E99BB7E58AA0E998B2E883BDE9998DE4BD8EE585B3E997AD, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E6ACA7E99BB7E58AA0E998B2E883BDE9998DE4BD8EE585B3E997AD, null, "UlrezajCallDown2", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E998BFE588A9E890A8E5AE88E58DABE58F8DE5BCB9E58F91E5B084E789A9_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    fixed lv_effectCreatedThisImpactDamage;
    unit lv_protectile;
    string lv_effectCreatedThis;
    string lv_effectCreatedThisImpact;
    unit lv_unitCreatedThis;
    unit lv_enermySource;
    unit lv_caster;
    fixed lv_energyBackAmount;

    // Automatic Variable Declarations
    unitgroup autoA93CDB5B_g;
    int autoA93CDB5B_u;
    unit autoA93CDB5B_var;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_protectile = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_effectCreatedThis = UnitGetOriginalEffect(lv_protectile);
    lv_unitCreatedThis = UnitGetOriginalCaster(lv_protectile);
    lv_enermySource = lv_unitCreatedThis;
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_energyBackAmount = 1.0;

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_caster) == true))) {
            return false;
        }

        if (!((UnitGetType(lv_enermySource) != "MutatorPropagator"))) {
            return false;
        }

        if (!(((EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget) != 1) && (EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget) != 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(lv_protectile, lv_player, true);
    if ((libNtve_gf_UnitCanCreateEffectOnUnit(lv_protectile, lv_effectCreatedThis, lv_enermySource) == true)) {
        UnitCreateEffectUnit(lv_caster, lv_effectCreatedThis, lv_enermySource);
        if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, "UlrezajResearchSeries3", c_techCountCompleteOnly) > 0)) {
            UnitCreateEffectUnit(lv_caster, lv_effectCreatedThis, lv_enermySource);
            lv_energyBackAmount = 2.0;
        }

    }

    UnitRemove(lv_protectile);
    lv_effectCreatedThisImpact = (CatalogFieldValueGet(c_gameCatalogEffect, lv_effectCreatedThis, "ImpactEffect", c_playerAny));
    lv_effectCreatedThisImpactDamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, lv_effectCreatedThisImpact, "Amount", c_playerAny);
    if ((lv_effectCreatedThisImpactDamage != 0.0)) {
        UnitBehaviorAddPlayer(libNEXS_gv_ulrezajArchive, "UlrezajUnitEnergyGetJudge", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, 1);
        lv_energyBackAmount *= (1.0 + (0.02 * TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, "UlrezajMasteryUpgrade2", c_techCountCompleteOnly)));
        libNEXS_gv_ulrezajUnitsAdoreEnergyLast += (lv_energyBackAmount * lv_effectCreatedThisImpactDamage);
        if ((libNEXS_gv_ulrezajUnitsAdoreEnergyLast >= libNEXS_gv_ulrezajUnitsAdoreEnergyMax)) {
            libNEXS_gv_ulrezajUnitsAdoreEnergyLast = libNEXS_gv_ulrezajUnitsAdoreEnergyMax;
        }

        autoA93CDB5B_g = libNEXS_gv_ulrezajUnitsGroup;
        autoA93CDB5B_u = UnitGroupCount(autoA93CDB5B_g, c_unitCountAll);
        for (;; autoA93CDB5B_u -= 1) {
            autoA93CDB5B_var = UnitGroupUnitFromEnd(autoA93CDB5B_g, autoA93CDB5B_u);
            if (autoA93CDB5B_var == null) { break; }
            UnitSetPropertyFixed(autoA93CDB5B_var, c_unitPropEnergy, libNEXS_gv_ulrezajUnitsAdoreEnergyLast);
        }
    }
    else {
        UnitBehaviorAdd(lv_caster, "UlrezajZealotReflectionTargetProjectile", lv_caster, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E998BFE588A9E890A8E5AE88E58DABE58F8DE5BCB9E58F91E5B084E789A9_Init () {
    libNEXS_gt_E998BFE588A9E890A8E5AE88E58DABE58F8DE5BCB9E58F91E5B084E789A9 = TriggerCreate("libNEXS_gt_E998BFE588A9E890A8E5AE88E58DABE58F8DE5BCB9E58F91E5B084E789A9_Func");
    TriggerEnable(libNEXS_gt_E998BFE588A9E890A8E5AE88E58DABE58F8DE5BCB9E58F91E5B084E789A9, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E998BFE588A9E890A8E5AE88E58DABE58F8DE5BCB9E58F91E5B084E789A9, c_playerAny, "UlrezajZealotReflectionMU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E998BFE588A9E890A8E5AE88E58DABE99D9EE79BB4E68EA5E58F91E5B084E789A9E980A0E68890E4BCA4E5AEB3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_energyBackAmount;

    // Automatic Variable Declarations
    unitgroup auto68D68BE6_g;
    int auto68D68BE6_u;
    unit auto68D68BE6_var;

    // Variable Initialization
    lv_energyBackAmount = 1.0;

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourcePlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "AlysaarGuard"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnitDamageSourceUnit(), "UlrezajZealotReflectionTargetProjectile") == true))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "PsiBlades5"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(libNEXS_gv_ulrezajArchive, "UlrezajUnitEnergyGetJudge", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, 1);
    UnitBehaviorRemove(EventUnitDamageSourceUnit(), "UlrezajZealotReflectionTargetProjectile", 1);
    if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, "UlrezajResearchSeries3", c_techCountCompleteOnly) > 0)) {
        lv_energyBackAmount = 2.0;
    }

    lv_energyBackAmount *= (1.0 + (0.02 * TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, "UlrezajMasteryUpgrade2", c_techCountCompleteOnly)));
    libNEXS_gv_ulrezajUnitsAdoreEnergyLast += (lv_energyBackAmount * EventUnitDamageAttempted());
    if ((libNEXS_gv_ulrezajUnitsAdoreEnergyLast >= libNEXS_gv_ulrezajUnitsAdoreEnergyMax)) {
        libNEXS_gv_ulrezajUnitsAdoreEnergyLast = libNEXS_gv_ulrezajUnitsAdoreEnergyMax;
    }

    auto68D68BE6_g = libNEXS_gv_ulrezajUnitsGroup;
    auto68D68BE6_u = UnitGroupCount(auto68D68BE6_g, c_unitCountAll);
    for (;; auto68D68BE6_u -= 1) {
        auto68D68BE6_var = UnitGroupUnitFromEnd(auto68D68BE6_g, auto68D68BE6_u);
        if (auto68D68BE6_var == null) { break; }
        UnitSetPropertyFixed(auto68D68BE6_var, c_unitPropEnergy, libNEXS_gv_ulrezajUnitsAdoreEnergyLast);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E998BFE588A9E890A8E5AE88E58DABE99D9EE79BB4E68EA5E58F91E5B084E789A9E980A0E68890E4BCA4E5AEB3_Init () {
    libNEXS_gt_E998BFE588A9E890A8E5AE88E58DABE99D9EE79BB4E68EA5E58F91E5B084E789A9E980A0E68890E4BCA4E5AEB3 = TriggerCreate("libNEXS_gt_E998BFE588A9E890A8E5AE88E58DABE99D9EE79BB4E68EA5E58F91E5B084E789A9E980A0E68890E4BCA4E5AEB3_Func");
    TriggerEnable(libNEXS_gt_E998BFE588A9E890A8E5AE88E58DABE99D9EE79BB4E68EA5E58F91E5B084E789A9E980A0E68890E4BCA4E5AEB3, false);
    TriggerAddEventUnitDamaged(libNEXS_gt_E998BFE588A9E890A8E5AE88E58DABE99D9EE79BB4E68EA5E58F91E5B084E789A9E980A0E68890E4BCA4E5AEB3, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E998BFE588A9E890A8E588BAE5AEA2E9878DE7BDAEE68A80E883BDE586B7E58DB4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnitDamageSourceUnit(), "UlrezajDTShadowFuryCooldownTem", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12, 1);
    UnitAbilityReset(EventUnitDamageSourceUnit(), AbilityCommand("DarkTemplarShadowFury2", 0), c_spendLocationAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E998BFE588A9E890A8E588BAE5AEA2E9878DE7BDAEE68A80E883BDE586B7E58DB4_Init () {
    libNEXS_gt_E998BFE588A9E890A8E588BAE5AEA2E9878DE7BDAEE68A80E883BDE586B7E58DB4 = TriggerCreate("libNEXS_gt_E998BFE588A9E890A8E588BAE5AEA2E9878DE7BDAEE68A80E883BDE586B7E58DB4_Func");
    TriggerEnable(libNEXS_gt_E998BFE588A9E890A8E588BAE5AEA2E9878DE7BDAEE68A80E883BDE586B7E58DB4, false);
    TriggerAddEventUnitDamaged(libNEXS_gt_E998BFE588A9E890A8E588BAE5AEA2E9878DE7BDAEE68A80E883BDE586B7E58DB4, null, c_unitDamageTypeAny, c_unitDamageFatal, "DarkTemplarShadowFuryDamage22");
    TriggerAddEventUnitDamaged(libNEXS_gt_E998BFE588A9E890A8E588BAE5AEA2E9878DE7BDAEE68A80E883BDE586B7E58DB4, null, c_unitDamageTypeAny, c_unitDamageFatal, "DarkTemplarShadowFuryDamage2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????Debug
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E998BFE588A9E890A8E588BAE5AEA2E9AB98E5BAA6E694B9E58F98Debug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    if ((UnitGetHeight(EventPlayerEffectUsedUnit(c_effectUnitCaster)) != 0.0)) {
        UnitSetHeight(EventPlayerEffectUsedUnit(c_effectUnitCaster), 0.0, 0.0625);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E998BFE588A9E890A8E588BAE5AEA2E9AB98E5BAA6E694B9E58F98Debug_Init () {
    libNEXS_gt_E998BFE588A9E890A8E588BAE5AEA2E9AB98E5BAA6E694B9E58F98Debug = TriggerCreate("libNEXS_gt_E998BFE588A9E890A8E588BAE5AEA2E9AB98E5BAA6E694B9E58F98Debug_Func");
    TriggerEnable(libNEXS_gt_E998BFE588A9E890A8E588BAE5AEA2E9AB98E5BAA6E694B9E58F98Debug, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E998BFE588A9E890A8E588BAE5AEA2E9AB98E5BAA6E694B9E58F98Debug, c_playerAny, "UlrezajDarkTemplarShadowFuryHeightChange2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_Selendis
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_DUT_Selendis_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup autoB32D07DE_g;
    int autoB32D07DE_var;
    playergroup autoE3E797C8_g;
    int autoE3E797C8_var;

    // Variable Initialization
    lv_players = libCOMI_gf_PlayersOfCommander("NexusSelendis");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_SelendisGlobalPowerCall();
    libNtve_gf_ShowHideUnit(libNEXS_gv_selendisGlobalPowerCaster, true);
    TriggerEnable(libNEXS_gt_SelendisHeroBirth, true);
    TriggerEnable(libNEXS_gt_SelendisHeroDeath, true);
    TriggerEnable(libNEXS_gt_SelendisHeroTrans, true);
    TriggerEnable(libNEXS_gt_SelendisHeroUpgrade, true);
    TriggerEnable(libNEXS_gt_SelendisCarrierGAInterceptorGet, true);
    TriggerEnable(libNEXS_gt_SelendisCarrierGAOrbitalStrike, true);
    TriggerEnable(libNEXS_gt_SelendisCarrierGATrigger, true);
    TriggerEnable(libNEXS_gt_SelendisColossusGAInitial, true);
    TriggerEnable(libNEXS_gt_SelendisColossusGATrigger, true);
    TriggerEnable(libNEXS_gt_SelendisGlobalPowerAbilityTrigger, true);
    TriggerEnable(libNEXS_gt_SelendisPhoenixHeightChange, true);
    TriggerEnable(libNEXS_gt_SelendisColossusWeaponTargetBirth, true);
    TriggerEnable(libNEXS_gt_SelendisColossusWeaponTargetBuff, true);
    TriggerEnable(libNEXS_gt_SelendisColossusWeaponTargetMove, true);
    TriggerEnable(libNEXS_gt_Selendis_Platform_Create, true);
    TriggerEnable(libNEXS_gt_Selendis_Platform_RemakeDestroy, true);
    TriggerEnable(libNEXS_gt_Selendis_Platform_TrainChange, true);
    TriggerEnable(libNEXS_gt_Selendis_Platform_UnitDeath, true);
    TriggerEnable(libNEXS_gt_Selendis_Platform_Upgrade, true);
    TriggerEnable(libNEXS_gt_SelendisMothershipAttack, true);
    TriggerEnable(libNEXS_gt_SelendisWarBeginning, true);
    TriggerEnable(libNEXS_gt_SelendisUnitAttackCommand, true);
    TriggerEnable(libNEXS_gt_SelendisUnitCheck, true);
    TriggerEnable(libNEXS_gt_SelendisRecall, true);
    TriggerEnable(libNEXS_gt_SelendisBuildingCancel, true);
    TriggerEnable(libNEXS_gt_SelendisGlobalCasterStart1, true);
    TriggerEnable(libNEXS_gt_SelendisGlobalCasterStart2, true);
    TriggerEnable(libNEXS_gt_SelendisGlobalCasterStart3, true);
    TriggerEnable(libNEXS_gt_SelendisGlobalCasterStart4, true);
    TriggerEnable(libNEXS_gt_SelendisGlobalCasterStart5, true);
    TriggerEnable(libNEXS_gt_SelendisGlobalCasterStart6, true);
    TriggerEnable(libNEXS_gt_SelendisGlobalCasterStart7, true);
    TriggerEnable(libNEXS_gt_SelendisGlobalCasterStart8, true);
    TriggerEnable(libNEXS_gt_SelendisUnitAttack1, true);
    TriggerEnable(libNEXS_gt_SelendisUnitAttack2, true);
    TriggerEnable(libNEXS_gt_SelendisUnitAttack3, true);
    TriggerEnable(libNEXS_gt_SelendisUnitAttack4, true);
    TriggerEnable(libNEXS_gt_SelendisUnitAttack5, true);
    TriggerEnable(libNEXS_gt_SelendisUnitAttack6, true);
    TriggerEnable(libNEXS_gt_SelendisUnitAttack7, true);
    TriggerEnable(libNEXS_gt_SelendisUnitAttack8, true);
    if ((PlayerGroupCount(libCOMI_gf_PlayersOfCommanderInaTeam("NexusRohana", 1)) > 0) && (PlayerGroupCount(libCOMI_gf_PlayersOfCommanderInaTeam("NexusSelendis", 1)) > 0)) {
        autoB32D07DE_g = libCOMI_gf_GetAlliedCommandersPlayers();
        autoB32D07DE_var = -1;
        while (true) {
            autoB32D07DE_var = PlayerGroupNextPlayer(autoB32D07DE_g, autoB32D07DE_var);
            if (autoB32D07DE_var < 0) { break; }
            TechTreeUpgradeAddLevel(autoB32D07DE_var, "SelendisArtanisAllyUpgrade", 1);
        }
    }

    autoE3E797C8_g = lv_players;
    autoE3E797C8_var = -1;
    while (true) {
        autoE3E797C8_var = PlayerGroupNextPlayer(autoE3E797C8_g, autoE3E797C8_var);
        if (autoE3E797C8_var < 0) { break; }
        libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14 = autoE3E797C8_var;
        if ((TechTreeUnitIsAllowed(autoE3E797C8_var, "SelendisCaster") == true)) {
            libCOMI_gf_CreateACCaster(autoE3E797C8_var, "SelendisCaster");
            libCOMI_gf_CU_GPInitCommonCaster(autoE3E797C8_var, "SelendisCaster", "Coop_GlobalCastingTemplates/TerranCasterPanelTemplate", "Coop_GlobalCastingTemplates/TerranGlobalCommandPanelTemplate", 4, "Cutscenes\\CommanderGlobalPower_Ulrezaj.SC2Cutscene", "FourButtons");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_DUT_Selendis_Init () {
    libNEXS_gt_DUT_Selendis = TriggerCreate("libNEXS_gt_DUT_Selendis_Func");
    TriggerAddEventGeneric(libNEXS_gt_DUT_Selendis, libCOMI_gv_mISSIONINITIALIZED);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Global Power Ability Trigger
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisGlobalPowerAbilityTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_createTrue;
    int lv_platformCountMax;
    int lv_init;
    int lv_value;
    region lv_area;

    // Automatic Variable Declarations
    const int auto4B879233_ae = 8;
    const int auto4B879233_ai = 1;
    unitgroup autoF397D6FD_g;
    int autoF397D6FD_u;
    unit autoF397D6FD_var;
    int autoC96D2AA7_ae;
    const int autoC96D2AA7_ai = 1;
    unitgroup auto049B8CB6_g;
    int auto049B8CB6_u;
    unit auto049B8CB6_var;
    int auto812E05C6_ae;
    const int auto812E05C6_ai = 1;
    unitgroup auto1A4A5610_g;
    int auto1A4A5610_u;
    unit auto1A4A5610_var;
    int auto1BBFB6B4_ae;
    const int auto1BBFB6B4_ai = 1;
    unitgroup auto3C64F42A_g;
    int auto3C64F42A_u;
    unit auto3C64F42A_var;
    int auto8F99CC94_ae;
    const int auto8F99CC94_ai = 1;
    unitgroup auto4C0CCF3D_g;
    int auto4C0CCF3D_u;
    unit auto4C0CCF3D_var;
    int autoEA4F59C2_ae;
    const int autoEA4F59C2_ai = 1;
    unitgroup auto85A02E81_g;
    int auto85A02E81_u;
    unit auto85A02E81_var;
    int auto7F004288_ae;
    const int auto7F004288_ai = 1;
    unitgroup auto733FE0F0_g;
    int auto733FE0F0_u;
    unit auto733FE0F0_var;
    int auto0436E5A3_ae;
    const int auto0436E5A3_ai = 1;
    unitgroup autoFD0B02DD_g;
    int autoFD0B02DD_u;
    unit autoFD0B02DD_var;
    int autoD1050F88_val;

    // Variable Initialization
    lv_platformCountMax = 8;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_init = 1;
    for ( ; ( (auto4B879233_ai >= 0 && lv_init <= auto4B879233_ae) || (auto4B879233_ai < 0 && lv_init >= auto4B879233_ae) ) ; lv_init += auto4B879233_ai ) {
        if ((EventPlayerEffectUsed() == (("SelendisGlobalAbility" + IntToString(lv_init))))) {
            lv_value = (lv_init - 1);
            lv_area = RegionCircle(UnitGetPosition(libNEXS_gv_selendis_Nexus_Group[lv_value]), 2.0);
            break;
        }

    }
    if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisNexusChoiceSeriesAdept") == true)) {
        lv_createTrue = 1;
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SelendisGlobalPowerAdeptTemporalFieldDelay", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
        autoF397D6FD_g = UnitGroup("SelendisPlatformUnitInvisible", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_area, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
        autoF397D6FD_u = UnitGroupCount(autoF397D6FD_g, c_unitCountAll);
        for (;; autoF397D6FD_u -= 1) {
            autoF397D6FD_var = UnitGroupUnitFromEnd(autoF397D6FD_g, autoF397D6FD_u);
            if (autoF397D6FD_var == null) { break; }
            UnitRemove(autoF397D6FD_var);
        }
        autoC96D2AA7_ae = (lv_platformCountMax - 1);
        lv_init = 0;
        for ( ; ( (autoC96D2AA7_ai >= 0 && lv_init <= autoC96D2AA7_ae) || (autoC96D2AA7_ai < 0 && lv_init >= autoC96D2AA7_ae) ) ; lv_init += autoC96D2AA7_ai ) {
            if ((UnitGetPosition(libNEXS_gv_selendis_Nexus_Group[lv_value]) == libNEXS_gv_selendis_AdeptPoint[lv_init])) {
                libNEXS_gf_Selendis_Platform_Adept2(UnitBehaviorCount(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisPlatformUnitCreateCaster"), "SelendisPlatformImpact_Adept", lv_init);
                break;
            }

        }
    }
    else if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisNexusChoiceSeriesHighTemplar") == true)) {
        lv_createTrue = 2;
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SelendisGlobalPowerHighTemplarShieldCU", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
        auto049B8CB6_g = UnitGroup("SelendisPlatformUnitInvisible2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_area, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
        auto049B8CB6_u = UnitGroupCount(auto049B8CB6_g, c_unitCountAll);
        for (;; auto049B8CB6_u -= 1) {
            auto049B8CB6_var = UnitGroupUnitFromEnd(auto049B8CB6_g, auto049B8CB6_u);
            if (auto049B8CB6_var == null) { break; }
            UnitRemove(auto049B8CB6_var);
        }
        auto812E05C6_ae = (lv_platformCountMax - 1);
        lv_init = 0;
        for ( ; ( (auto812E05C6_ai >= 0 && lv_init <= auto812E05C6_ae) || (auto812E05C6_ai < 0 && lv_init >= auto812E05C6_ae) ) ; lv_init += auto812E05C6_ai ) {
            if ((UnitGetPosition(libNEXS_gv_selendis_Nexus_Group[lv_value]) == libNEXS_gv_selendis_AdeptPoint2[lv_init])) {
                libNEXS_gf_Selendis_Platform_Adept3(UnitBehaviorCount(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisPlatformUnitCreateCaster"), "SelendisPlatformImpact_HighTemplar", lv_init);
                break;
            }

        }
    }
    else if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisNexusChoiceSeriesArchon") == true)) {
        lv_createTrue = 3;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SelendisGlobalAbilityArchonCaster", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("SelendisGlobalPowerArchonOrbitalStrike", 0), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)), c_orderQueueReplace);
        auto1A4A5610_g = UnitGroup("SelendisPlatformUnitInvisible22", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_area, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
        auto1A4A5610_u = UnitGroupCount(auto1A4A5610_g, c_unitCountAll);
        for (;; auto1A4A5610_u -= 1) {
            auto1A4A5610_var = UnitGroupUnitFromEnd(auto1A4A5610_g, auto1A4A5610_u);
            if (auto1A4A5610_var == null) { break; }
            UnitRemove(auto1A4A5610_var);
        }
        auto1BBFB6B4_ae = (lv_platformCountMax - 1);
        lv_init = 0;
        for ( ; ( (auto1BBFB6B4_ai >= 0 && lv_init <= auto1BBFB6B4_ae) || (auto1BBFB6B4_ai < 0 && lv_init >= auto1BBFB6B4_ae) ) ; lv_init += auto1BBFB6B4_ai ) {
            if ((UnitGetPosition(libNEXS_gv_selendis_Nexus_Group[lv_value]) == libNEXS_gv_selendis_AdeptPoint3[lv_init])) {
                libNEXS_gf_Selendis_Platform_Adept4(UnitBehaviorCount(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisPlatformUnitCreateCaster"), "SelendisPlatformImpact_Archon", lv_init);
                break;
            }

        }
    }
    else if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisNexusChoiceSeriesColossus") == true)) {
        lv_createTrue = 4;
        libNEXS_gv_selendisGlobalPowerColossusCaster = libNEXS_gv_selendis_Nexus_Group[lv_value];
        libNEXS_gv_selendisGlobalPowerColossusValue = lv_value;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SelendisGlobalPowerColossusThermalLanceTargeter", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    }
    else if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisNexusChoiceSeriesPhoenix") == true)) {
        lv_createTrue = 5;
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SelendisGlobalPowerPhoenixSuicideCP", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
        auto3C64F42A_g = UnitGroup("SelendisPlatformUnitInvisible32", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_area, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
        auto3C64F42A_u = UnitGroupCount(auto3C64F42A_g, c_unitCountAll);
        for (;; auto3C64F42A_u -= 1) {
            auto3C64F42A_var = UnitGroupUnitFromEnd(auto3C64F42A_g, auto3C64F42A_u);
            if (auto3C64F42A_var == null) { break; }
            UnitRemove(auto3C64F42A_var);
        }
        auto8F99CC94_ae = (lv_platformCountMax - 1);
        lv_init = 0;
        for ( ; ( (auto8F99CC94_ai >= 0 && lv_init <= auto8F99CC94_ae) || (auto8F99CC94_ai < 0 && lv_init >= auto8F99CC94_ae) ) ; lv_init += auto8F99CC94_ai ) {
            if ((UnitGetPosition(libNEXS_gv_selendis_Nexus_Group[lv_value]) == libNEXS_gv_selendis_AdeptPoint5[lv_init])) {
                libNEXS_gf_Selendis_Platform_Adept6(UnitBehaviorCount(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisPlatformUnitCreateCaster"), "SelendisPlatformImpact_Phoenix", lv_init);
                break;
            }

        }
    }
    else if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisNexusChoiceSeriesOracle") == true)) {
        lv_createTrue = 6;
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SelendisGlobalPowerOracleRevelationDelay", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
        auto4C0CCF3D_g = UnitGroup("SelendisPlatformUnitInvisible322", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_area, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
        auto4C0CCF3D_u = UnitGroupCount(auto4C0CCF3D_g, c_unitCountAll);
        for (;; auto4C0CCF3D_u -= 1) {
            auto4C0CCF3D_var = UnitGroupUnitFromEnd(auto4C0CCF3D_g, auto4C0CCF3D_u);
            if (auto4C0CCF3D_var == null) { break; }
            UnitRemove(auto4C0CCF3D_var);
        }
        autoEA4F59C2_ae = (lv_platformCountMax - 1);
        lv_init = 0;
        for ( ; ( (autoEA4F59C2_ai >= 0 && lv_init <= autoEA4F59C2_ae) || (autoEA4F59C2_ai < 0 && lv_init >= autoEA4F59C2_ae) ) ; lv_init += autoEA4F59C2_ai ) {
            if ((UnitGetPosition(libNEXS_gv_selendis_Nexus_Group[lv_value]) == libNEXS_gv_selendis_AdeptPoint6[lv_init])) {
                libNEXS_gf_Selendis_Platform_Adept7(UnitBehaviorCount(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisPlatformUnitCreateCaster"), "SelendisPlatformImpact_Oracle", lv_init);
                break;
            }

        }
    }
    else if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisNexusChoiceSeriesVoidRay") == true)) {
        lv_createTrue = 7;
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SelendisGlobalPowerVoidRayLaserBeamCU", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
        auto85A02E81_g = UnitGroup("SelendisPlatformUnitInvisible3222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_area, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
        auto85A02E81_u = UnitGroupCount(auto85A02E81_g, c_unitCountAll);
        for (;; auto85A02E81_u -= 1) {
            auto85A02E81_var = UnitGroupUnitFromEnd(auto85A02E81_g, auto85A02E81_u);
            if (auto85A02E81_var == null) { break; }
            UnitRemove(auto85A02E81_var);
        }
        auto7F004288_ae = (lv_platformCountMax - 1);
        lv_init = 0;
        for ( ; ( (auto7F004288_ai >= 0 && lv_init <= auto7F004288_ae) || (auto7F004288_ai < 0 && lv_init >= auto7F004288_ae) ) ; lv_init += auto7F004288_ai ) {
            if ((UnitGetPosition(libNEXS_gv_selendis_Nexus_Group[lv_value]) == libNEXS_gv_selendis_AdeptPoint7[lv_init])) {
                libNEXS_gf_Selendis_Platform_Adept8(UnitBehaviorCount(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisPlatformUnitCreateCaster"), "SelendisPlatformImpact_VoidRay", lv_init);
                break;
            }

        }
    }
    else if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisNexusChoiceSeriesCarrier") == true)) {
        lv_createTrue = 8;
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SelendisGlobalPowerCarrierAbilitySearch", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
        auto733FE0F0_g = UnitGroup("SelendisPlatformUnitInvisible32222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_area, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
        auto733FE0F0_u = UnitGroupCount(auto733FE0F0_g, c_unitCountAll);
        for (;; auto733FE0F0_u -= 1) {
            auto733FE0F0_var = UnitGroupUnitFromEnd(auto733FE0F0_g, auto733FE0F0_u);
            if (auto733FE0F0_var == null) { break; }
            UnitRemove(auto733FE0F0_var);
        }
        auto0436E5A3_ae = (lv_platformCountMax - 1);
        lv_init = 0;
        for ( ; ( (auto0436E5A3_ai >= 0 && lv_init <= auto0436E5A3_ae) || (auto0436E5A3_ai < 0 && lv_init >= auto0436E5A3_ae) ) ; lv_init += auto0436E5A3_ai ) {
            if ((UnitGetPosition(libNEXS_gv_selendis_Nexus_Group[lv_value]) == libNEXS_gv_selendis_AdeptPoint8[lv_init])) {
                libNEXS_gf_Selendis_Platform_Adept9(UnitBehaviorCount(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisPlatformUnitCreateCaster"), "SelendisPlatformImpact_Carrier", lv_init);
                break;
            }

        }
    }
    if ((lv_createTrue != 4)) {
        libNtve_gf_SetDialogItemText(libNEXS_gv_selendisGlobalPowerText[lv_value], IntToText(UnitBehaviorCount(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisPlatformUnitCreateCaster")), PlayerGroupSingle(EventPlayer()));
    }

    autoFD0B02DD_g = libNEXS_gv_selendisGlobalPowerAbilityInvisibleGroup;
    autoFD0B02DD_u = UnitGroupCount(autoFD0B02DD_g, c_unitCountAll);
    for (;; autoFD0B02DD_u -= 1) {
        autoFD0B02DD_var = UnitGroupUnitFromEnd(autoFD0B02DD_g, autoFD0B02DD_u);
        if (autoFD0B02DD_var == null) { break; }
        UnitRemove(autoFD0B02DD_var);
    }
    UnitGroupClear(libNEXS_gv_selendisGlobalPowerAbilityInvisibleGroup);
    if ((lv_createTrue != 4)) {
        if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarHasArmy" + IntToString((lv_value + 1)))), c_techCountCompleteOnly) == 1) && (UnitBehaviorCount(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisPlatformUnitCreateCaster") > 0)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "SelendisGlobalPowerNZUnit", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, EventPlayerEffectUsedPoint(c_effectLocationCasterPoint));
            UnitGroupAdd(libNEXS_gv_selendisGlobalPowerAbilityInvisibleGroup, UnitLastCreated());
            autoD1050F88_val = (lv_value + 1);
            if (autoD1050F88_val == 1) {
                UISetTargetingOrder(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14), libNEXS_gv_selendisGlobalPowerAbilityInvisibleGroup, OrderTargetingPoint(AbilityCommand("SelendisGlobalAbility1", 0), UnitGroupCenterOfGroup(libNEXS_gv_selendisGlobalPowerAbilityInvisibleGroup)), false);
            }
            else if (autoD1050F88_val == 2) {
                UISetTargetingOrder(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14), libNEXS_gv_selendisGlobalPowerAbilityInvisibleGroup, OrderTargetingPoint(AbilityCommand("SelendisGlobalAbility2", 0), UnitGroupCenterOfGroup(libNEXS_gv_selendisGlobalPowerAbilityInvisibleGroup)), false);
            }
            else if (autoD1050F88_val == 3) {
                UISetTargetingOrder(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14), libNEXS_gv_selendisGlobalPowerAbilityInvisibleGroup, OrderTargetingPoint(AbilityCommand("SelendisGlobalAbility3", 0), UnitGroupCenterOfGroup(libNEXS_gv_selendisGlobalPowerAbilityInvisibleGroup)), false);
            }
            else if (autoD1050F88_val == 4) {
                UISetTargetingOrder(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14), libNEXS_gv_selendisGlobalPowerAbilityInvisibleGroup, OrderTargetingPoint(AbilityCommand("SelendisGlobalAbility4", 0), UnitGroupCenterOfGroup(libNEXS_gv_selendisGlobalPowerAbilityInvisibleGroup)), false);
            }
            else if (autoD1050F88_val == 5) {
                UISetTargetingOrder(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14), libNEXS_gv_selendisGlobalPowerAbilityInvisibleGroup, OrderTargetingPoint(AbilityCommand("SelendisGlobalAbility5", 0), UnitGroupCenterOfGroup(libNEXS_gv_selendisGlobalPowerAbilityInvisibleGroup)), false);
            }
            else if (autoD1050F88_val == 6) {
                UISetTargetingOrder(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14), libNEXS_gv_selendisGlobalPowerAbilityInvisibleGroup, OrderTargetingPoint(AbilityCommand("SelendisGlobalAbility6", 0), UnitGroupCenterOfGroup(libNEXS_gv_selendisGlobalPowerAbilityInvisibleGroup)), false);
            }
            else if (autoD1050F88_val == 7) {
                UISetTargetingOrder(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14), libNEXS_gv_selendisGlobalPowerAbilityInvisibleGroup, OrderTargetingPoint(AbilityCommand("SelendisGlobalAbility7", 0), UnitGroupCenterOfGroup(libNEXS_gv_selendisGlobalPowerAbilityInvisibleGroup)), false);
            }
            else if (autoD1050F88_val == 8) {
                UISetTargetingOrder(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14), libNEXS_gv_selendisGlobalPowerAbilityInvisibleGroup, OrderTargetingPoint(AbilityCommand("SelendisGlobalAbility8", 0), UnitGroupCenterOfGroup(libNEXS_gv_selendisGlobalPowerAbilityInvisibleGroup)), false);
            }
            else {
            }
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisGlobalPowerAbilityTrigger_Init () {
    libNEXS_gt_SelendisGlobalPowerAbilityTrigger = TriggerCreate("libNEXS_gt_SelendisGlobalPowerAbilityTrigger_Func");
    TriggerEnable(libNEXS_gt_SelendisGlobalPowerAbilityTrigger, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_SelendisGlobalPowerAbilityTrigger, c_playerAny, "SelendisGlobalAbility1");
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_SelendisGlobalPowerAbilityTrigger, c_playerAny, "SelendisGlobalAbility2");
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_SelendisGlobalPowerAbilityTrigger, c_playerAny, "SelendisGlobalAbility3");
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_SelendisGlobalPowerAbilityTrigger, c_playerAny, "SelendisGlobalAbility4");
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_SelendisGlobalPowerAbilityTrigger, c_playerAny, "SelendisGlobalAbility5");
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_SelendisGlobalPowerAbilityTrigger, c_playerAny, "SelendisGlobalAbility6");
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_SelendisGlobalPowerAbilityTrigger, c_playerAny, "SelendisGlobalAbility7");
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_SelendisGlobalPowerAbilityTrigger, c_playerAny, "SelendisGlobalAbility8");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis_Platform_Create
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Selendis_Platform_Create_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_value;
    int lv_platformCountMax;
    string lv_platformCreateBehaviour;
    int lv_createTrue;
    int lv_start;
    int lv_abilNeedntVision;

    // Automatic Variable Declarations
    string auto937625A4_val;
    int autoFBDE8662_ae;
    const int autoFBDE8662_ai = 1;
    int auto76A5D15C_ae;
    const int auto76A5D15C_ai = 1;
    int autoDA3637D9_ae;
    const int autoDA3637D9_ai = 1;
    int autoB9FE3D35_ae;
    const int autoB9FE3D35_ai = 1;
    int auto5B7AE6F7_ae;
    const int auto5B7AE6F7_ai = 1;
    int autoC1A381E7_ae;
    const int autoC1A381E7_ai = 1;
    int auto86724806_ae;
    const int auto86724806_ai = 1;
    int auto3D6843A2_ae;
    const int auto3D6843A2_ai = 1;
    int auto07FA4711_ae;
    const int auto07FA4711_ai = 1;
    int autoED32B4FB_val;

    // Variable Initialization
    lv_value = 1;
    lv_platformCountMax = 8;
    lv_platformCreateBehaviour = EventUnitBehavior();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto937625A4_val = lv_platformCreateBehaviour;
    if (auto937625A4_val == "SelendisNexusChoiceSeriesAdept") {
        UnitBehaviorAdd(EventUnit(), "SelendisPlatform", EventUnit(), 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisPlatformGroundMax", 1);
        UnitGroupAdd(libNEXS_gv_selendisPsiSpireGroup[0][0], EventUnit());
        lv_createTrue = 1;
        autoFBDE8662_ae = (lv_platformCountMax - 1);
        lv_value = 0;
        for ( ; ( (autoFBDE8662_ai >= 0 && lv_value <= autoFBDE8662_ae) || (autoFBDE8662_ai < 0 && lv_value >= autoFBDE8662_ae) ) ; lv_value += autoFBDE8662_ai ) {
            if ((libNEXS_gv_selendis_AdeptPoint[lv_value] == null)) {
                libNEXS_gv_selendis_AdeptPoint[lv_value] = UnitGetPosition(EventUnit());
                break;
            }

        }
    }
    else if (auto937625A4_val == "SelendisNexusChoiceSeriesHighTemplar") {
        UnitBehaviorAdd(EventUnit(), "SelendisPlatform", EventUnit(), 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisPlatformGroundMax", 1);
        UnitGroupAdd(libNEXS_gv_selendisPsiSpireGroup[1][0], EventUnit());
        lv_createTrue = 2;
        auto76A5D15C_ae = (lv_platformCountMax - 1);
        lv_value = 0;
        for ( ; ( (auto76A5D15C_ai >= 0 && lv_value <= auto76A5D15C_ae) || (auto76A5D15C_ai < 0 && lv_value >= auto76A5D15C_ae) ) ; lv_value += auto76A5D15C_ai ) {
            if ((libNEXS_gv_selendis_AdeptPoint2[lv_value] == null)) {
                libNEXS_gv_selendis_AdeptPoint2[lv_value] = UnitGetPosition(EventUnit());
                break;
            }

        }
    }
    else if (auto937625A4_val == "SelendisNexusChoiceSeriesArchon") {
        UnitBehaviorAdd(EventUnit(), "SelendisPlatform", EventUnit(), 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisPlatformGroundMax", 1);
        UnitGroupAdd(libNEXS_gv_selendisPsiSpireGroup[2][0], EventUnit());
        lv_createTrue = 3;
        autoDA3637D9_ae = (lv_platformCountMax - 1);
        lv_value = 0;
        for ( ; ( (autoDA3637D9_ai >= 0 && lv_value <= autoDA3637D9_ae) || (autoDA3637D9_ai < 0 && lv_value >= autoDA3637D9_ae) ) ; lv_value += autoDA3637D9_ai ) {
            if ((libNEXS_gv_selendis_AdeptPoint3[lv_value] == null)) {
                libNEXS_gv_selendis_AdeptPoint3[lv_value] = UnitGetPosition(EventUnit());
                break;
            }

        }
    }
    else if (auto937625A4_val == "SelendisNexusChoiceSeriesColossus") {
        UnitBehaviorAdd(EventUnit(), "SelendisPlatform", EventUnit(), 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisPlatformGroundMax", 1);
        UnitGroupAdd(libNEXS_gv_selendisPsiSpireGroup[3][0], EventUnit());
        lv_createTrue = 4;
        autoB9FE3D35_ae = (lv_platformCountMax - 1);
        lv_value = 0;
        for ( ; ( (autoB9FE3D35_ai >= 0 && lv_value <= autoB9FE3D35_ae) || (autoB9FE3D35_ai < 0 && lv_value >= autoB9FE3D35_ae) ) ; lv_value += autoB9FE3D35_ai ) {
            if ((libNEXS_gv_selendis_AdeptPoint4[lv_value] == null)) {
                libNEXS_gv_selendis_AdeptPoint4[lv_value] = UnitGetPosition(EventUnit());
                break;
            }

        }
    }
    else if (auto937625A4_val == "SelendisNexusChoiceSeriesPhoenix") {
        UnitBehaviorAdd(EventUnit(), "SelendisSkyPlatform", EventUnit(), 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisPlatformAirMax", 1);
        UnitGroupAdd(libNEXS_gv_selendisPsiSpireGroup[4][0], EventUnit());
        lv_createTrue = 5;
        auto5B7AE6F7_ae = (lv_platformCountMax - 1);
        lv_value = 0;
        for ( ; ( (auto5B7AE6F7_ai >= 0 && lv_value <= auto5B7AE6F7_ae) || (auto5B7AE6F7_ai < 0 && lv_value >= auto5B7AE6F7_ae) ) ; lv_value += auto5B7AE6F7_ai ) {
            if ((libNEXS_gv_selendis_AdeptPoint5[lv_value] == null)) {
                libNEXS_gv_selendis_AdeptPoint5[lv_value] = UnitGetPosition(EventUnit());
                break;
            }

        }
    }
    else if (auto937625A4_val == "SelendisNexusChoiceSeriesOracle") {
        UnitBehaviorAdd(EventUnit(), "SelendisSkyPlatform", EventUnit(), 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisPlatformAirMax", 1);
        UnitGroupAdd(libNEXS_gv_selendisPsiSpireGroup[5][0], EventUnit());
        lv_createTrue = 6;
        lv_abilNeedntVision = 1;
        autoC1A381E7_ae = (lv_platformCountMax - 1);
        lv_value = 0;
        for ( ; ( (autoC1A381E7_ai >= 0 && lv_value <= autoC1A381E7_ae) || (autoC1A381E7_ai < 0 && lv_value >= autoC1A381E7_ae) ) ; lv_value += autoC1A381E7_ai ) {
            if ((libNEXS_gv_selendis_AdeptPoint6[lv_value] == null)) {
                libNEXS_gv_selendis_AdeptPoint6[lv_value] = UnitGetPosition(EventUnit());
                break;
            }

        }
    }
    else if (auto937625A4_val == "SelendisNexusChoiceSeriesVoidRay") {
        UnitBehaviorAdd(EventUnit(), "SelendisSkyPlatform", EventUnit(), 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisPlatformAirMax", 1);
        UnitGroupAdd(libNEXS_gv_selendisPsiSpireGroup[6][0], EventUnit());
        lv_createTrue = 7;
        auto86724806_ae = (lv_platformCountMax - 1);
        lv_value = 0;
        for ( ; ( (auto86724806_ai >= 0 && lv_value <= auto86724806_ae) || (auto86724806_ai < 0 && lv_value >= auto86724806_ae) ) ; lv_value += auto86724806_ai ) {
            if ((libNEXS_gv_selendis_AdeptPoint7[lv_value] == null)) {
                libNEXS_gv_selendis_AdeptPoint7[lv_value] = UnitGetPosition(EventUnit());
                break;
            }

        }
    }
    else if (auto937625A4_val == "SelendisNexusChoiceSeriesCarrier") {
        UnitBehaviorAdd(EventUnit(), "SelendisSkyPlatform", EventUnit(), 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisPlatformAirMax", 1);
        UnitGroupAdd(libNEXS_gv_selendisPsiSpireGroup[7][0], EventUnit());
        lv_createTrue = 8;
        auto3D6843A2_ae = (lv_platformCountMax - 1);
        lv_value = 0;
        for ( ; ( (auto3D6843A2_ai >= 0 && lv_value <= auto3D6843A2_ae) || (auto3D6843A2_ai < 0 && lv_value >= auto3D6843A2_ae) ) ; lv_value += auto3D6843A2_ai ) {
            if ((libNEXS_gv_selendis_AdeptPoint8[lv_value] == null)) {
                libNEXS_gv_selendis_AdeptPoint8[lv_value] = UnitGetPosition(EventUnit());
                break;
            }

        }
    }
    else {
    }
    if ((lv_createTrue >= 5)) {
        lv_start = 4;
    }

    if ((lv_createTrue != 0)) {
        auto07FA4711_ae = (lv_platformCountMax - 1);
        lv_value = lv_start;
        for ( ; ( (auto07FA4711_ai >= 0 && lv_value <= auto07FA4711_ae) || (auto07FA4711_ai < 0 && lv_value >= auto07FA4711_ae) ) ; lv_value += auto07FA4711_ai ) {
            if ((libNEXS_gv_selendis_Nexus_Group[lv_value] == null)) {
                libNEXS_gv_selendis_Nexus_Group[lv_value] = EventUnit();
                if ((lv_abilNeedntVision == 1)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisAbilityNotNeedVision" + IntToString((lv_value + 1)))), 1);
                }

                libNtve_gf_SetDialogItemText(libNEXS_gv_selendisGlobalPowerText[lv_value], StringExternal("Param/Value/lib_NEXS_98FC4B2E"), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14));
                libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisGlobalPowerShow" + IntToString((lv_value + 1)))), 1);
                if ((lv_createTrue >= 1) && (lv_createTrue <= 4)) {
                    if ((libNEXS_gv_selendisWarGround == 1)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarBeginning" + IntToString((lv_value + 1)))), 1);
                    }

                }
                else {
                    if ((libNEXS_gv_selendisWarAir == 1)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarBeginning" + IntToString((lv_value + 1)))), 1);
                    }

                }
                autoED32B4FB_val = lv_createTrue;
                if (autoED32B4FB_val == 1) {
                    CatalogFieldValueSet(c_gameCatalogButton, ("SelendisWarBeginningStartDummy" + IntToString((lv_value + 1))), "Icon", EventPlayer(), "Assets\\Textures\\btn-unit-protoss-Selendis-Adept.dds");
                    CatalogFieldValueSet(c_gameCatalogButton, ("SelendisWarBeginningStartDummy" + IntToString((lv_value + 1))), "Name", EventPlayer(), CatalogFieldValueGet(c_gameCatalogButton, "SelendisPlatformUnitChoiceAdept2", "Name", c_playerAny));
                }
                else if (autoED32B4FB_val == 2) {
                    CatalogFieldValueSet(c_gameCatalogButton, ("SelendisWarBeginningStartDummy" + IntToString((lv_value + 1))), "Icon", EventPlayer(), "Assets\\Textures\\btn-unit-protoss-Selendis-HighTemplar.dds");
                    CatalogFieldValueSet(c_gameCatalogButton, ("SelendisWarBeginningStartDummy" + IntToString((lv_value + 1))), "Name", EventPlayer(), CatalogFieldValueGet(c_gameCatalogButton, "SelendisPlatformUnitChoiceHighTemplar2", "Name", c_playerAny));
                }
                else if (autoED32B4FB_val == 3) {
                    CatalogFieldValueSet(c_gameCatalogButton, ("SelendisWarBeginningStartDummy" + IntToString((lv_value + 1))), "Icon", EventPlayer(), "Assets\\Textures\\btn-unit-protoss-Selendis-Archon.dds");
                    CatalogFieldValueSet(c_gameCatalogButton, ("SelendisWarBeginningStartDummy" + IntToString((lv_value + 1))), "Name", EventPlayer(), CatalogFieldValueGet(c_gameCatalogButton, "SelendisPlatformUnitChoiceArchon2", "Name", c_playerAny));
                }
                else if (autoED32B4FB_val == 4) {
                    CatalogFieldValueSet(c_gameCatalogButton, ("SelendisWarBeginningStartDummy" + IntToString((lv_value + 1))), "Icon", EventPlayer(), "Assets\\Textures\\btn-unit-protoss-Selendis-Colossus.dds");
                    CatalogFieldValueSet(c_gameCatalogButton, ("SelendisWarBeginningStartDummy" + IntToString((lv_value + 1))), "Name", EventPlayer(), CatalogFieldValueGet(c_gameCatalogButton, "SelendisPlatformUnitChoiceColossus2", "Name", c_playerAny));
                }
                else if (autoED32B4FB_val == 5) {
                    CatalogFieldValueSet(c_gameCatalogButton, ("SelendisWarBeginningStartDummy" + IntToString((lv_value + 1))), "Icon", EventPlayer(), "Assets\\Textures\\btn-unit-protoss-Selendis-Phoenix.dds");
                    CatalogFieldValueSet(c_gameCatalogButton, ("SelendisWarBeginningStartDummy" + IntToString((lv_value + 1))), "Name", EventPlayer(), CatalogFieldValueGet(c_gameCatalogButton, "SelendisPlatformUnitChoicePhoenix2", "Name", c_playerAny));
                }
                else if (autoED32B4FB_val == 6) {
                    CatalogFieldValueSet(c_gameCatalogButton, ("SelendisWarBeginningStartDummy" + IntToString((lv_value + 1))), "Icon", EventPlayer(), "Assets\\Textures\\btn-unit-protoss-Selendis-Oracle.dds");
                    CatalogFieldValueSet(c_gameCatalogButton, ("SelendisWarBeginningStartDummy" + IntToString((lv_value + 1))), "Name", EventPlayer(), CatalogFieldValueGet(c_gameCatalogButton, "SelendisPlatformUnitChoiceOracle2", "Name", c_playerAny));
                }
                else if (autoED32B4FB_val == 7) {
                    CatalogFieldValueSet(c_gameCatalogButton, ("SelendisWarBeginningStartDummy" + IntToString((lv_value + 1))), "Icon", EventPlayer(), "Assets\\Textures\\btn-unit-protoss-Selendis-VoidRay.dds");
                    CatalogFieldValueSet(c_gameCatalogButton, ("SelendisWarBeginningStartDummy" + IntToString((lv_value + 1))), "Name", EventPlayer(), CatalogFieldValueGet(c_gameCatalogButton, "SelendisPlatformUnitChoiceVoidRay2", "Name", c_playerAny));
                }
                else if (autoED32B4FB_val == 8) {
                    CatalogFieldValueSet(c_gameCatalogButton, ("SelendisWarBeginningStartDummy" + IntToString((lv_value + 1))), "Icon", EventPlayer(), "Assets\\Textures\\btn-unit-protoss-Selendis-Carrier.dds");
                    CatalogFieldValueSet(c_gameCatalogButton, ("SelendisWarBeginningStartDummy" + IntToString((lv_value + 1))), "Name", EventPlayer(), CatalogFieldValueGet(c_gameCatalogButton, "SelendisPlatformUnitChoiceCarrier2", "Name", c_playerAny));
                }
                else {
                }
                libNEXS_gf_SelendisGlobalPowerAbilitySet(lv_value, lv_createTrue);
                break;
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Selendis_Platform_Create_Init () {
    libNEXS_gt_Selendis_Platform_Create = TriggerCreate("libNEXS_gt_Selendis_Platform_Create_Func");
    TriggerEnable(libNEXS_gt_Selendis_Platform_Create, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_Selendis_Platform_Create, null, null, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis_Platform_Train/Change
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Selendis_Platform_TrainChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_value;
    int lv_num;
    int lv_platformCountMax;

    // Automatic Variable Declarations
    int auto3F987449_ae;
    const int auto3F987449_ai = 1;
    int autoD840E62F_ae;
    const int autoD840E62F_ai = 1;
    int autoDD67F064_ae;
    const int autoDD67F064_ai = 1;
    int auto0D77A9BB_ae;
    const int auto0D77A9BB_ai = 1;
    int auto32A2BB8B_ae;
    const int auto32A2BB8B_ai = 1;
    int auto947C6E6B_ae;
    const int auto947C6E6B_ai = 1;
    int auto7FCE3D4F_ae;
    const int auto7FCE3D4F_ai = 1;
    int autoC5AB1FD9_ae;
    const int autoC5AB1FD9_ai = 1;
    int auto26B28DF1_ae;
    const int auto26B28DF1_ai = 1;

    // Variable Initialization
    lv_value = 1;
    lv_num = 1;
    lv_platformCountMax = 8;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "SelendisNexusChoice") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3F987449_ae = (lv_platformCountMax - 1);
    lv_value = 0;
    for ( ; ( (auto3F987449_ai >= 0 && lv_value <= auto3F987449_ae) || (auto3F987449_ai < 0 && lv_value >= auto3F987449_ae) ) ; lv_value += auto3F987449_ai ) {
        if ((libNEXS_gv_selendis_Nexus_Group[lv_value] == EventUnit())) {
            CatalogFieldValueSet(c_gameCatalogEffect, ("SelendisWarBeginningAmount" + IntToString((lv_value + 1))), "Amount", EventPlayer(), IntToString(UnitBehaviorCount(EventUnit(), "SelendisPlatformUnitCreateCaster")));
            libNtve_gf_SetDialogItemText(libNEXS_gv_selendisGlobalPowerText[lv_value], IntToText(UnitBehaviorCount(EventUnit(), "SelendisPlatformUnitCreateCaster")), PlayerGroupSingle(EventPlayer()));
            lv_num = lv_value;
            if ((UnitBehaviorCount(EventUnit(), "SelendisPlatformUnitCreateCaster") > 0)) {
                libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarHasArmy" + IntToString((lv_value + 1)))), 1);
            }
            else {
                libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarHasArmy" + IntToString((lv_value + 1)))), 0);
            }
        }

    }
    if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarHasBegun" + IntToString((lv_num + 1)))), c_techCountCompleteOnly) == 0)) {
        if ((UnitHasBehavior2(EventUnit(), "SelendisNexusChoiceSeriesAdept") == true)) {
            autoD840E62F_ae = (lv_platformCountMax - 1);
            lv_value = 0;
            for ( ; ( (autoD840E62F_ai >= 0 && lv_value <= autoD840E62F_ae) || (autoD840E62F_ai < 0 && lv_value >= autoD840E62F_ae) ) ; lv_value += autoD840E62F_ai ) {
                if ((UnitGetPosition(EventUnit()) == libNEXS_gv_selendis_AdeptPoint[lv_value])) {
                    libNEXS_gf_Selendis_Platform_Adept2(UnitBehaviorCount(EventUnit(), "SelendisPlatformUnitCreateCaster"), "SelendisPlatformImpact_Adept", lv_value);
                    break;
                }

            }
        }
        else if ((UnitHasBehavior2(EventUnit(), "SelendisNexusChoiceSeriesHighTemplar") == true)) {
            autoDD67F064_ae = (lv_platformCountMax - 1);
            lv_value = 0;
            for ( ; ( (autoDD67F064_ai >= 0 && lv_value <= autoDD67F064_ae) || (autoDD67F064_ai < 0 && lv_value >= autoDD67F064_ae) ) ; lv_value += autoDD67F064_ai ) {
                if ((UnitGetPosition(EventUnit()) == libNEXS_gv_selendis_AdeptPoint2[lv_value])) {
                    libNEXS_gf_Selendis_Platform_Adept3(UnitBehaviorCount(EventUnit(), "SelendisPlatformUnitCreateCaster"), "SelendisPlatformImpact_HighTemplar", lv_value);
                    break;
                }

            }
        }
        else if ((UnitHasBehavior2(EventUnit(), "SelendisNexusChoiceSeriesArchon") == true)) {
            auto0D77A9BB_ae = (lv_platformCountMax - 1);
            lv_value = 0;
            for ( ; ( (auto0D77A9BB_ai >= 0 && lv_value <= auto0D77A9BB_ae) || (auto0D77A9BB_ai < 0 && lv_value >= auto0D77A9BB_ae) ) ; lv_value += auto0D77A9BB_ai ) {
                if ((UnitGetPosition(EventUnit()) == libNEXS_gv_selendis_AdeptPoint3[lv_value])) {
                    libNEXS_gf_Selendis_Platform_Adept4(UnitBehaviorCount(EventUnit(), "SelendisPlatformUnitCreateCaster"), "SelendisPlatformImpact_Archon", lv_value);
                    break;
                }

            }
        }
        else if ((UnitHasBehavior2(EventUnit(), "SelendisNexusChoiceSeriesColossus") == true)) {
            auto32A2BB8B_ae = (lv_platformCountMax - 1);
            lv_value = 0;
            for ( ; ( (auto32A2BB8B_ai >= 0 && lv_value <= auto32A2BB8B_ae) || (auto32A2BB8B_ai < 0 && lv_value >= auto32A2BB8B_ae) ) ; lv_value += auto32A2BB8B_ai ) {
                if ((UnitGetPosition(EventUnit()) == libNEXS_gv_selendis_AdeptPoint4[lv_value])) {
                    libNEXS_gf_Selendis_Platform_Adept5(UnitBehaviorCount(EventUnit(), "SelendisPlatformUnitCreateCaster"), "SelendisPlatformImpact_Colossus", lv_value);
                    break;
                }

            }
        }
        else if ((UnitHasBehavior2(EventUnit(), "SelendisNexusChoiceSeriesPhoenix") == true)) {
            auto947C6E6B_ae = (lv_platformCountMax - 1);
            lv_value = 0;
            for ( ; ( (auto947C6E6B_ai >= 0 && lv_value <= auto947C6E6B_ae) || (auto947C6E6B_ai < 0 && lv_value >= auto947C6E6B_ae) ) ; lv_value += auto947C6E6B_ai ) {
                if ((UnitGetPosition(EventUnit()) == libNEXS_gv_selendis_AdeptPoint5[lv_value])) {
                    libNEXS_gf_Selendis_Platform_Adept6(UnitBehaviorCount(EventUnit(), "SelendisPlatformUnitCreateCaster"), "SelendisPlatformImpact_Phoenix", lv_value);
                    break;
                }

            }
        }
        else if ((UnitHasBehavior2(EventUnit(), "SelendisNexusChoiceSeriesOracle") == true)) {
            auto7FCE3D4F_ae = (lv_platformCountMax - 1);
            lv_value = 0;
            for ( ; ( (auto7FCE3D4F_ai >= 0 && lv_value <= auto7FCE3D4F_ae) || (auto7FCE3D4F_ai < 0 && lv_value >= auto7FCE3D4F_ae) ) ; lv_value += auto7FCE3D4F_ai ) {
                if ((UnitGetPosition(EventUnit()) == libNEXS_gv_selendis_AdeptPoint6[lv_value])) {
                    libNEXS_gf_Selendis_Platform_Adept7(UnitBehaviorCount(EventUnit(), "SelendisPlatformUnitCreateCaster"), "SelendisPlatformImpact_Oracle", lv_value);
                    break;
                }

            }
        }
        else if ((UnitHasBehavior2(EventUnit(), "SelendisNexusChoiceSeriesVoidRay") == true)) {
            autoC5AB1FD9_ae = (lv_platformCountMax - 1);
            lv_value = 0;
            for ( ; ( (autoC5AB1FD9_ai >= 0 && lv_value <= autoC5AB1FD9_ae) || (autoC5AB1FD9_ai < 0 && lv_value >= autoC5AB1FD9_ae) ) ; lv_value += autoC5AB1FD9_ai ) {
                if ((UnitGetPosition(EventUnit()) == libNEXS_gv_selendis_AdeptPoint7[lv_value])) {
                    libNEXS_gf_Selendis_Platform_Adept8(UnitBehaviorCount(EventUnit(), "SelendisPlatformUnitCreateCaster"), "SelendisPlatformImpact_VoidRay", lv_value);
                    break;
                }

            }
        }
        else if ((UnitHasBehavior2(EventUnit(), "SelendisNexusChoiceSeriesCarrier") == true)) {
            auto26B28DF1_ae = (lv_platformCountMax - 1);
            lv_value = 0;
            for ( ; ( (auto26B28DF1_ai >= 0 && lv_value <= auto26B28DF1_ae) || (auto26B28DF1_ai < 0 && lv_value >= auto26B28DF1_ae) ) ; lv_value += auto26B28DF1_ai ) {
                if ((UnitGetPosition(EventUnit()) == libNEXS_gv_selendis_AdeptPoint8[lv_value])) {
                    libNEXS_gf_Selendis_Platform_Adept9(UnitBehaviorCount(EventUnit(), "SelendisPlatformUnitCreateCaster"), "SelendisPlatformImpact_Carrier", lv_value);
                    break;
                }

            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Selendis_Platform_TrainChange_Init () {
    libNEXS_gt_Selendis_Platform_TrainChange = TriggerCreate("libNEXS_gt_Selendis_Platform_TrainChange_Func");
    TriggerEnable(libNEXS_gt_Selendis_Platform_TrainChange, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_Selendis_Platform_TrainChange, null, "SelendisPlatformUnitCreateCaster", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_Selendis_Platform_TrainChange, null, "SelendisPlatformUnitCreateCaster", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_Selendis_Platform_TrainChange, null, "SelendisPlatformUnitCreateCaster", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis_Platform_UnitDeath
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Selendis_Platform_UnitDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_value;
    int lv_platformCountMax;

    // Automatic Variable Declarations
    unitgroup autoEDDEF8FB_g;
    int autoEDDEF8FB_u;
    unit autoEDDEF8FB_var;
    unitgroup auto22982AD6_g;
    int auto22982AD6_u;
    unit auto22982AD6_var;
    unitgroup autoCCED2D6A_g;
    int autoCCED2D6A_u;
    unit autoCCED2D6A_var;
    unitgroup auto4056B9CB_g;
    int auto4056B9CB_u;
    unit auto4056B9CB_var;
    unitgroup autoA512189E_g;
    int autoA512189E_u;
    unit autoA512189E_var;
    unitgroup autoA21E02D4_g;
    int autoA21E02D4_u;
    unit autoA21E02D4_var;
    unitgroup auto95AC5178_g;
    int auto95AC5178_u;
    unit auto95AC5178_var;
    unitgroup autoF65BCBBA_g;
    int autoF65BCBBA_u;
    unit autoF65BCBBA_var;

    // Variable Initialization
    lv_value = 1;
    lv_platformCountMax = 8;

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageDeathCheck(c_deathTypeMorph) != true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeCancel) != true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) != true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnit()) == "TunerAdept") || (UnitGetType(EventUnit()) == "TunerZealot"))) {
        autoEDDEF8FB_g = UnitGroup("SelendisPlatformUnitInvisible", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
        autoEDDEF8FB_u = UnitGroupCount(autoEDDEF8FB_g, c_unitCountAll);
        for (;; autoEDDEF8FB_u -= 1) {
            autoEDDEF8FB_var = UnitGroupUnitFromEnd(autoEDDEF8FB_g, autoEDDEF8FB_u);
            if (autoEDDEF8FB_var == null) { break; }
            UnitRemove(autoEDDEF8FB_var);
        }
    }
    else if ((UnitGetType(EventUnit()) == "HighIntonater")) {
        auto22982AD6_g = UnitGroup("SelendisPlatformUnitInvisible2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
        auto22982AD6_u = UnitGroupCount(auto22982AD6_g, c_unitCountAll);
        for (;; auto22982AD6_u -= 1) {
            auto22982AD6_var = UnitGroupUnitFromEnd(auto22982AD6_g, auto22982AD6_u);
            if (auto22982AD6_var == null) { break; }
            UnitRemove(auto22982AD6_var);
        }
    }
    else if ((UnitGetType(EventUnit()) == "PunishArchon") && (UnitHasBehavior2(EventUnit(), "SelendisGlobalPowerArchonOrbitalStrikeUpgradeCUAB") == false)) {
        autoCCED2D6A_g = UnitGroup("SelendisPlatformUnitInvisible22", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
        autoCCED2D6A_u = UnitGroupCount(autoCCED2D6A_g, c_unitCountAll);
        for (;; autoCCED2D6A_u -= 1) {
            autoCCED2D6A_var = UnitGroupUnitFromEnd(autoCCED2D6A_g, autoCCED2D6A_u);
            if (autoCCED2D6A_var == null) { break; }
            UnitRemove(autoCCED2D6A_var);
        }
    }
    else if ((UnitGetType(EventUnit()) == "SelendisColossus")) {
        auto4056B9CB_g = UnitGroup("SelendisPlatformUnitInvisible3", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
        auto4056B9CB_u = UnitGroupCount(auto4056B9CB_g, c_unitCountAll);
        for (;; auto4056B9CB_u -= 1) {
            auto4056B9CB_var = UnitGroupUnitFromEnd(auto4056B9CB_g, auto4056B9CB_u);
            if (auto4056B9CB_var == null) { break; }
            UnitRemove(auto4056B9CB_var);
        }
    }
    else if ((UnitGetType(EventUnit()) == "SelendisPhoenix")) {
        autoA512189E_g = UnitGroup("SelendisPlatformUnitInvisible32", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
        autoA512189E_u = UnitGroupCount(autoA512189E_g, c_unitCountAll);
        for (;; autoA512189E_u -= 1) {
            autoA512189E_var = UnitGroupUnitFromEnd(autoA512189E_g, autoA512189E_u);
            if (autoA512189E_var == null) { break; }
            UnitRemove(autoA512189E_var);
        }
    }
    else if ((UnitGetType(EventUnit()) == "SelendisOracle")) {
        autoA21E02D4_g = UnitGroup("SelendisPlatformUnitInvisible322", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
        autoA21E02D4_u = UnitGroupCount(autoA21E02D4_g, c_unitCountAll);
        for (;; autoA21E02D4_u -= 1) {
            autoA21E02D4_var = UnitGroupUnitFromEnd(autoA21E02D4_g, autoA21E02D4_u);
            if (autoA21E02D4_var == null) { break; }
            UnitRemove(autoA21E02D4_var);
        }
    }
    else if ((UnitGetType(EventUnit()) == "SelendisVoidRay")) {
        auto95AC5178_g = UnitGroup("SelendisPlatformUnitInvisible3222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
        auto95AC5178_u = UnitGroupCount(auto95AC5178_g, c_unitCountAll);
        for (;; auto95AC5178_u -= 1) {
            auto95AC5178_var = UnitGroupUnitFromEnd(auto95AC5178_g, auto95AC5178_u);
            if (auto95AC5178_var == null) { break; }
            UnitRemove(auto95AC5178_var);
        }
    }
    else if ((UnitGetType(EventUnit()) == "SelendisCarrier")) {
        autoF65BCBBA_g = UnitGroup("SelendisPlatformUnitInvisible32222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
        autoF65BCBBA_u = UnitGroupCount(autoF65BCBBA_g, c_unitCountAll);
        for (;; autoF65BCBBA_u -= 1) {
            autoF65BCBBA_var = UnitGroupUnitFromEnd(autoF65BCBBA_g, autoF65BCBBA_u);
            if (autoF65BCBBA_var == null) { break; }
            UnitRemove(autoF65BCBBA_var);
        }
    }
    if ((libNtve_gf_KillingPlayer() != 1) && (libNtve_gf_KillingPlayer() != 2) && ((UnitGetType(EventUnit()) == "TunerAdept") || (UnitGetType(EventUnit()) == "TunerZealot") || (UnitGetType(EventUnit()) == "HighIntonater") || (UnitGetType(EventUnit()) == "PunishArchon") || (UnitGetType(EventUnit()) == "SelendisColossus") || (UnitGetType(EventUnit()) == "SelendisPhoenix") || (UnitGetType(EventUnit()) == "SelendisOracle") || (UnitGetType(EventUnit()) == "SelendisVoidRay") || (UnitGetType(EventUnit()) == "SelendisCarrier"))) {
        libNEXS_gv_selendis_Units_Lost += 1;
        if ((libNEXS_gv_selendis_Units_Lost >= 100) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropSuppliesUsed) <= 75)) {
            libNEXS_gv_selendis_Units_Lost = 0;
            SoundPlayForPlayer(SoundLink("Selendis_Auto_UnitsLost", -1), c_maxPlayers, PlayerGroupAll(), 120.0, 0.0);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Selendis_Platform_UnitDeath_Init () {
    libNEXS_gt_Selendis_Platform_UnitDeath = TriggerCreate("libNEXS_gt_Selendis_Platform_UnitDeath_Func");
    TriggerEnable(libNEXS_gt_Selendis_Platform_UnitDeath, false);
    TriggerAddEventUnitDied(libNEXS_gt_Selendis_Platform_UnitDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis_Platform_Remake/Destroy
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Selendis_Platform_RemakeDestroy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_area;
    int lv_value;
    int lv_platformCountMax;

    // Automatic Variable Declarations
    int autoF30E3B07_ae;
    const int autoF30E3B07_ai = 1;
    int auto5B5E63EA_ae;
    const int auto5B5E63EA_ai = 1;
    unitgroup auto052F6694_g;
    int auto052F6694_u;
    unit auto052F6694_var;
    int auto2DBB0A08_ae;
    const int auto2DBB0A08_ai = 1;
    unitgroup autoCD38B2D8_g;
    int autoCD38B2D8_u;
    unit autoCD38B2D8_var;
    int auto3A3B940F_ae;
    const int auto3A3B940F_ai = 1;
    unitgroup auto5CBFF5E9_g;
    int auto5CBFF5E9_u;
    unit auto5CBFF5E9_var;
    int autoA6310050_ae;
    const int autoA6310050_ai = 1;
    unitgroup autoC8B7AC67_g;
    int autoC8B7AC67_u;
    unit autoC8B7AC67_var;
    int autoD0985572_ae;
    const int autoD0985572_ai = 1;
    unitgroup auto8135883B_g;
    int auto8135883B_u;
    unit auto8135883B_var;
    int auto9B466378_ae;
    const int auto9B466378_ai = 1;
    unitgroup auto30334B3C_g;
    int auto30334B3C_u;
    unit auto30334B3C_var;
    int auto8532EBF9_ae;
    const int auto8532EBF9_ai = 1;
    unitgroup auto5AFE74BC_g;
    int auto5AFE74BC_u;
    unit auto5AFE74BC_var;
    int auto98F09778_ae;
    const int auto98F09778_ai = 1;
    unitgroup auto60C6FDF1_g;
    int auto60C6FDF1_u;
    unit auto60C6FDF1_var;
    int auto0D360D50_ae;
    const int auto0D360D50_ai = 1;
    const int auto1AE74453_n = 3;
    int auto1AE74453_i;
    const int auto32154916_ae = 6;
    const int auto32154916_ai = 1;

    // Variable Initialization
    lv_value = 1;
    lv_platformCountMax = 8;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(EventUnit()) == true)) {
        lv_area = RegionCircle(UnitGetPosition(EventUnit()), 2.0);
        if ((UnitHasBehavior2(EventUnit(), "SelendisNexusChoiceSeriesAdept") == true)) {
            auto5B5E63EA_ae = (lv_platformCountMax - 1);
            lv_value = 0;
            for ( ; ( (auto5B5E63EA_ai >= 0 && lv_value <= auto5B5E63EA_ae) || (auto5B5E63EA_ai < 0 && lv_value >= auto5B5E63EA_ae) ) ; lv_value += auto5B5E63EA_ai ) {
                if ((UnitGetPosition(EventUnit()) == libNEXS_gv_selendis_AdeptPoint[lv_value])) {
                    libNEXS_gf_Selendis_Platform_Adept2(0, "SelendisPlatformImpact_Adept", lv_value);
                    UnitBehaviorRemove(EventUnit(), "SelendisPlatform", 1);
                    UnitBehaviorRemove(EventUnit(), "SelendisNexusChoiceSeriesAdept", 1);
                    auto052F6694_g = UnitGroup("SelendisPlatformUnitInvisible", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_area, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    auto052F6694_u = UnitGroupCount(auto052F6694_g, c_unitCountAll);
                    for (;; auto052F6694_u -= 1) {
                        auto052F6694_var = UnitGroupUnitFromEnd(auto052F6694_g, auto052F6694_u);
                        if (auto052F6694_var == null) { break; }
                        UnitRemove(auto052F6694_var);
                    }
                    libNEXS_gv_selendis_AdeptPoint[lv_value] = null;
                    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisPlatformGroundMax", -1);
                    break;
                }

            }
        }
        else if ((UnitHasBehavior2(EventUnit(), "SelendisNexusChoiceSeriesHighTemplar") == true)) {
            auto2DBB0A08_ae = (lv_platformCountMax - 1);
            lv_value = 0;
            for ( ; ( (auto2DBB0A08_ai >= 0 && lv_value <= auto2DBB0A08_ae) || (auto2DBB0A08_ai < 0 && lv_value >= auto2DBB0A08_ae) ) ; lv_value += auto2DBB0A08_ai ) {
                if ((UnitGetPosition(EventUnit()) == libNEXS_gv_selendis_AdeptPoint2[lv_value])) {
                    libNEXS_gf_Selendis_Platform_Adept3(0, "SelendisPlatformImpact_HighTemplar", lv_value);
                    UnitBehaviorRemove(EventUnit(), "SelendisPlatform", 1);
                    UnitBehaviorRemove(EventUnit(), "SelendisNexusChoiceSeriesHighTemplar", 1);
                    autoCD38B2D8_g = UnitGroup("SelendisPlatformUnitInvisible2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_area, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    autoCD38B2D8_u = UnitGroupCount(autoCD38B2D8_g, c_unitCountAll);
                    for (;; autoCD38B2D8_u -= 1) {
                        autoCD38B2D8_var = UnitGroupUnitFromEnd(autoCD38B2D8_g, autoCD38B2D8_u);
                        if (autoCD38B2D8_var == null) { break; }
                        UnitRemove(autoCD38B2D8_var);
                    }
                    libNEXS_gv_selendis_AdeptPoint2[lv_value] = null;
                    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisPlatformGroundMax", -1);
                    break;
                }

            }
        }
        else if ((UnitHasBehavior2(EventUnit(), "SelendisNexusChoiceSeriesArchon") == true)) {
            auto3A3B940F_ae = (lv_platformCountMax - 1);
            lv_value = 0;
            for ( ; ( (auto3A3B940F_ai >= 0 && lv_value <= auto3A3B940F_ae) || (auto3A3B940F_ai < 0 && lv_value >= auto3A3B940F_ae) ) ; lv_value += auto3A3B940F_ai ) {
                if ((UnitGetPosition(EventUnit()) == libNEXS_gv_selendis_AdeptPoint3[lv_value])) {
                    libNEXS_gf_Selendis_Platform_Adept4(0, "SelendisPlatformImpact_Archon", lv_value);
                    UnitBehaviorRemove(EventUnit(), "SelendisPlatform", 1);
                    UnitBehaviorRemove(EventUnit(), "SelendisNexusChoiceSeriesArchon", 1);
                    auto5CBFF5E9_g = UnitGroup("SelendisPlatformUnitInvisible22", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_area, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    auto5CBFF5E9_u = UnitGroupCount(auto5CBFF5E9_g, c_unitCountAll);
                    for (;; auto5CBFF5E9_u -= 1) {
                        auto5CBFF5E9_var = UnitGroupUnitFromEnd(auto5CBFF5E9_g, auto5CBFF5E9_u);
                        if (auto5CBFF5E9_var == null) { break; }
                        UnitRemove(auto5CBFF5E9_var);
                    }
                    libNEXS_gv_selendis_AdeptPoint3[lv_value] = null;
                    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisPlatformGroundMax", -1);
                    break;
                }

            }
        }
        else if ((UnitHasBehavior2(EventUnit(), "SelendisNexusChoiceSeriesColossus") == true)) {
            autoA6310050_ae = (lv_platformCountMax - 1);
            lv_value = 0;
            for ( ; ( (autoA6310050_ai >= 0 && lv_value <= autoA6310050_ae) || (autoA6310050_ai < 0 && lv_value >= autoA6310050_ae) ) ; lv_value += autoA6310050_ai ) {
                if ((UnitGetPosition(EventUnit()) == libNEXS_gv_selendis_AdeptPoint4[lv_value])) {
                    libNEXS_gf_Selendis_Platform_Adept5(0, "SelendisPlatformImpact_Colossus", lv_value);
                    UnitBehaviorRemove(EventUnit(), "SelendisPlatform", 1);
                    UnitBehaviorRemove(EventUnit(), "SelendisNexusChoiceSeriesColossus", 1);
                    autoC8B7AC67_g = UnitGroup("SelendisPlatformUnitInvisible3", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_area, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    autoC8B7AC67_u = UnitGroupCount(autoC8B7AC67_g, c_unitCountAll);
                    for (;; autoC8B7AC67_u -= 1) {
                        autoC8B7AC67_var = UnitGroupUnitFromEnd(autoC8B7AC67_g, autoC8B7AC67_u);
                        if (autoC8B7AC67_var == null) { break; }
                        UnitRemove(autoC8B7AC67_var);
                    }
                    libNEXS_gv_selendis_AdeptPoint4[lv_value] = null;
                    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisPlatformGroundMax", -1);
                    break;
                }

            }
        }
        else if ((UnitHasBehavior2(EventUnit(), "SelendisNexusChoiceSeriesPhoenix") == true)) {
            autoD0985572_ae = (lv_platformCountMax - 1);
            lv_value = 0;
            for ( ; ( (autoD0985572_ai >= 0 && lv_value <= autoD0985572_ae) || (autoD0985572_ai < 0 && lv_value >= autoD0985572_ae) ) ; lv_value += autoD0985572_ai ) {
                if ((UnitGetPosition(EventUnit()) == libNEXS_gv_selendis_AdeptPoint5[lv_value])) {
                    libNEXS_gf_Selendis_Platform_Adept6(0, "SelendisPlatformImpact_Phoenix", lv_value);
                    UnitBehaviorRemove(EventUnit(), "SelendisSkyPlatform", 1);
                    UnitBehaviorRemove(EventUnit(), "SelendisNexusChoiceSeriesPhoenix", 1);
                    auto8135883B_g = UnitGroup("SelendisPlatformUnitInvisible32", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_area, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    auto8135883B_u = UnitGroupCount(auto8135883B_g, c_unitCountAll);
                    for (;; auto8135883B_u -= 1) {
                        auto8135883B_var = UnitGroupUnitFromEnd(auto8135883B_g, auto8135883B_u);
                        if (auto8135883B_var == null) { break; }
                        UnitRemove(auto8135883B_var);
                    }
                    libNEXS_gv_selendis_AdeptPoint5[lv_value] = null;
                    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisPlatformAirMax", -1);
                    break;
                }

            }
        }
        else if ((UnitHasBehavior2(EventUnit(), "SelendisNexusChoiceSeriesOracle") == true)) {
            auto9B466378_ae = (lv_platformCountMax - 1);
            lv_value = 0;
            for ( ; ( (auto9B466378_ai >= 0 && lv_value <= auto9B466378_ae) || (auto9B466378_ai < 0 && lv_value >= auto9B466378_ae) ) ; lv_value += auto9B466378_ai ) {
                if ((UnitGetPosition(EventUnit()) == libNEXS_gv_selendis_AdeptPoint6[lv_value])) {
                    libNEXS_gf_Selendis_Platform_Adept7(0, "SelendisPlatformImpact_Oracle", lv_value);
                    UnitBehaviorRemove(EventUnit(), "SelendisSkyPlatform", 1);
                    UnitBehaviorRemove(EventUnit(), "SelendisNexusChoiceSeriesOracle", 1);
                    auto30334B3C_g = UnitGroup("SelendisPlatformUnitInvisible322", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_area, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    auto30334B3C_u = UnitGroupCount(auto30334B3C_g, c_unitCountAll);
                    for (;; auto30334B3C_u -= 1) {
                        auto30334B3C_var = UnitGroupUnitFromEnd(auto30334B3C_g, auto30334B3C_u);
                        if (auto30334B3C_var == null) { break; }
                        UnitRemove(auto30334B3C_var);
                    }
                    libNEXS_gv_selendis_AdeptPoint6[lv_value] = null;
                    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisPlatformAirMax", -1);
                    break;
                }

            }
        }
        else if ((UnitHasBehavior2(EventUnit(), "SelendisNexusChoiceSeriesVoidRay") == true)) {
            auto8532EBF9_ae = (lv_platformCountMax - 1);
            lv_value = 0;
            for ( ; ( (auto8532EBF9_ai >= 0 && lv_value <= auto8532EBF9_ae) || (auto8532EBF9_ai < 0 && lv_value >= auto8532EBF9_ae) ) ; lv_value += auto8532EBF9_ai ) {
                if ((UnitGetPosition(EventUnit()) == libNEXS_gv_selendis_AdeptPoint7[lv_value])) {
                    libNEXS_gf_Selendis_Platform_Adept8(0, "SelendisPlatformImpact_VoidRay", lv_value);
                    UnitBehaviorRemove(EventUnit(), "SelendisSkyPlatform", 1);
                    UnitBehaviorRemove(EventUnit(), "SelendisNexusChoiceSeriesVoidRay", 1);
                    auto5AFE74BC_g = UnitGroup("SelendisPlatformUnitInvisible3222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_area, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    auto5AFE74BC_u = UnitGroupCount(auto5AFE74BC_g, c_unitCountAll);
                    for (;; auto5AFE74BC_u -= 1) {
                        auto5AFE74BC_var = UnitGroupUnitFromEnd(auto5AFE74BC_g, auto5AFE74BC_u);
                        if (auto5AFE74BC_var == null) { break; }
                        UnitRemove(auto5AFE74BC_var);
                    }
                    libNEXS_gv_selendis_AdeptPoint7[lv_value] = null;
                    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisPlatformAirMax", -1);
                    break;
                }

            }
        }
        else if ((UnitHasBehavior2(EventUnit(), "SelendisNexusChoiceSeriesCarrier") == true)) {
            auto98F09778_ae = (lv_platformCountMax - 1);
            lv_value = 0;
            for ( ; ( (auto98F09778_ai >= 0 && lv_value <= auto98F09778_ae) || (auto98F09778_ai < 0 && lv_value >= auto98F09778_ae) ) ; lv_value += auto98F09778_ai ) {
                if ((UnitGetPosition(EventUnit()) == libNEXS_gv_selendis_AdeptPoint8[lv_value])) {
                    libNEXS_gf_Selendis_Platform_Adept9(0, "SelendisPlatformImpact_Carrier", lv_value);
                    UnitBehaviorRemove(EventUnit(), "SelendisSkyPlatform", 1);
                    UnitBehaviorRemove(EventUnit(), "SelendisNexusChoiceSeriesCarrier", 1);
                    auto60C6FDF1_g = UnitGroup("SelendisPlatformUnitInvisible32222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, lv_area, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    auto60C6FDF1_u = UnitGroupCount(auto60C6FDF1_g, c_unitCountAll);
                    for (;; auto60C6FDF1_u -= 1) {
                        auto60C6FDF1_var = UnitGroupUnitFromEnd(auto60C6FDF1_g, auto60C6FDF1_u);
                        if (auto60C6FDF1_var == null) { break; }
                        UnitRemove(auto60C6FDF1_var);
                    }
                    libNEXS_gv_selendis_AdeptPoint8[lv_value] = null;
                    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisPlatformAirMax", -1);
                    break;
                }

            }
        }
    }
    else {
        autoF30E3B07_ae = (lv_platformCountMax - 1);
        lv_value = 0;
        for ( ; ( (autoF30E3B07_ai >= 0 && lv_value <= autoF30E3B07_ae) || (autoF30E3B07_ai < 0 && lv_value >= autoF30E3B07_ae) ) ; lv_value += autoF30E3B07_ai ) {
            if ((UnitGetPosition(EventUnit()) == libNEXS_gv_selendis_AdeptPoint[lv_value])) {
                libNEXS_gf_Selendis_Platform_Adept2(0, "SelendisPlatformImpact_Adept", lv_value);
                libNEXS_gv_selendis_AdeptPoint[lv_value] = null;
                TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisPlatformGroundMax", -1);
                break;
            }
            else if ((UnitGetPosition(EventUnit()) == libNEXS_gv_selendis_AdeptPoint2[lv_value])) {
                libNEXS_gf_Selendis_Platform_Adept3(0, "SelendisPlatformImpact_HighTemplar", lv_value);
                libNEXS_gv_selendis_AdeptPoint2[lv_value] = null;
                TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisPlatformGroundMax", -1);
                break;
            }
            else if ((UnitGetPosition(EventUnit()) == libNEXS_gv_selendis_AdeptPoint3[lv_value])) {
                libNEXS_gf_Selendis_Platform_Adept4(0, "SelendisPlatformImpact_Archon", lv_value);
                libNEXS_gv_selendis_AdeptPoint3[lv_value] = null;
                TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisPlatformGroundMax", -1);
                break;
            }
            else if ((UnitGetPosition(EventUnit()) == libNEXS_gv_selendis_AdeptPoint4[lv_value])) {
                libNEXS_gf_Selendis_Platform_Adept5(0, "SelendisPlatformImpact_Colossus", lv_value);
                libNEXS_gv_selendis_AdeptPoint4[lv_value] = null;
                TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisPlatformGroundMax", -1);
                break;
            }
            else if ((UnitGetPosition(EventUnit()) == libNEXS_gv_selendis_AdeptPoint5[lv_value])) {
                libNEXS_gf_Selendis_Platform_Adept6(0, "SelendisPlatformImpact_Phoenix", lv_value);
                libNEXS_gv_selendis_AdeptPoint5[lv_value] = null;
                TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisPlatformAirMax", -1);
                break;
            }
            else if ((UnitGetPosition(EventUnit()) == libNEXS_gv_selendis_AdeptPoint6[lv_value])) {
                libNEXS_gf_Selendis_Platform_Adept7(0, "SelendisPlatformImpact_Oracle", lv_value);
                libNEXS_gv_selendis_AdeptPoint6[lv_value] = null;
                TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisPlatformAirMax", -1);
                break;
            }
            else if ((UnitGetPosition(EventUnit()) == libNEXS_gv_selendis_AdeptPoint7[lv_value])) {
                libNEXS_gf_Selendis_Platform_Adept8(0, "SelendisPlatformImpact_VoidRay", lv_value);
                libNEXS_gv_selendis_AdeptPoint7[lv_value] = null;
                TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisPlatformAirMax", -1);
                break;
            }
            else if ((UnitGetPosition(EventUnit()) == libNEXS_gv_selendis_AdeptPoint8[lv_value])) {
                libNEXS_gf_Selendis_Platform_Adept9(0, "SelendisPlatformImpact_Carrier", lv_value);
                libNEXS_gv_selendis_AdeptPoint8[lv_value] = null;
                TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisPlatformAirMax", -1);
                break;
            }
        }
    }
    auto0D360D50_ae = (lv_platformCountMax - 1);
    lv_value = 0;
    for ( ; ( (auto0D360D50_ai >= 0 && lv_value <= auto0D360D50_ae) || (auto0D360D50_ai < 0 && lv_value >= auto0D360D50_ae) ) ; lv_value += auto0D360D50_ai ) {
        if ((libNEXS_gv_selendis_Nexus_Group[lv_value] == EventUnit())) {
            libNEXS_gv_selendis_Nexus_Group[lv_value] = null;
            libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisAbilityNotNeedVision" + IntToString((lv_value + 1)))), 0);
            libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisGlobalPowerShow" + IntToString((lv_value + 1)))), 0);
            libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarHasArmy" + IntToString((lv_value + 1)))), 0);
            libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarHasBegun" + IntToString((lv_value + 1)))), 0);
            libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarBeginning" + IntToString((lv_value + 1)))), 0);
            CatalogFieldValueSet(c_gameCatalogEffect, ("SelendisWarBeginningAmount" + IntToString((lv_value + 1))), "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, IntToString(0));
            libNtve_gf_SetDialogItemText(libNEXS_gv_selendisGlobalPowerText[lv_value], StringToText(""), PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14));
            UnitBehaviorAddPlayer(EventUnit(), "SOAAbilityDisable2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, 1);
            for (auto1AE74453_i = 1; auto1AE74453_i <= auto1AE74453_n; auto1AE74453_i += 1) {
                lv_value = 1;
                for ( ; ( (auto32154916_ai >= 0 && lv_value <= auto32154916_ae) || (auto32154916_ai < 0 && lv_value >= auto32154916_ae) ) ; lv_value += auto32154916_ai ) {
                    if ((libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(EventUnit(), lv_value, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14) != "SelendisPlatformUpgradeUnitInvisibleLv2") && (libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(EventUnit(), lv_value, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14) != "SelendisPlatformUpgradeUnitInvisibleLv3")) {
                        UnitSetProgressStage(EventUnit(), lv_value, c_unitProgressStageCancel);
                    }

                }
            }
            Wait(1.0, c_timeGame);
            UnitBehaviorRemove(EventUnit(), "SOAAbilityDisable2", 1);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Selendis_Platform_RemakeDestroy_Init () {
    libNEXS_gt_Selendis_Platform_RemakeDestroy = TriggerCreate("libNEXS_gt_Selendis_Platform_RemakeDestroy_Func");
    TriggerEnable(libNEXS_gt_Selendis_Platform_RemakeDestroy, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_Selendis_Platform_RemakeDestroy, null, "SelendisNexusChoice", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis_Platform_Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Selendis_Platform_Upgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bx;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bx = 1;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehavior() == "SelendisPlatformUpgradeLv3AB")) {
        lv_bx = 2;
    }

    if ((UnitHasBehavior2(EventUnit(), "SelendisNexusChoiceSeriesAdept") == true)) {
        UnitGroupRemove(libNEXS_gv_selendisPsiSpireGroup[0][(lv_bx - 1)], EventUnit());
        UnitGroupAdd(libNEXS_gv_selendisPsiSpireGroup[0][lv_bx], EventUnit());
    }
    else if ((UnitHasBehavior2(EventUnit(), "SelendisNexusChoiceSeriesHighTemplar") == true)) {
        UnitGroupRemove(libNEXS_gv_selendisPsiSpireGroup[1][(lv_bx - 1)], EventUnit());
        UnitGroupAdd(libNEXS_gv_selendisPsiSpireGroup[1][lv_bx], EventUnit());
    }
    else if ((UnitHasBehavior2(EventUnit(), "SelendisNexusChoiceSeriesArchon") == true)) {
        UnitGroupRemove(libNEXS_gv_selendisPsiSpireGroup[2][(lv_bx - 1)], EventUnit());
        UnitGroupAdd(libNEXS_gv_selendisPsiSpireGroup[2][lv_bx], EventUnit());
    }
    else if ((UnitHasBehavior2(EventUnit(), "SelendisNexusChoiceSeriesColossus") == true)) {
        UnitGroupRemove(libNEXS_gv_selendisPsiSpireGroup[3][(lv_bx - 1)], EventUnit());
        UnitGroupAdd(libNEXS_gv_selendisPsiSpireGroup[3][lv_bx], EventUnit());
    }
    else if ((UnitHasBehavior2(EventUnit(), "SelendisNexusChoiceSeriesPhoenix") == true)) {
        UnitGroupRemove(libNEXS_gv_selendisPsiSpireGroup[4][(lv_bx - 1)], EventUnit());
        UnitGroupAdd(libNEXS_gv_selendisPsiSpireGroup[4][lv_bx], EventUnit());
    }
    else if ((UnitHasBehavior2(EventUnit(), "SelendisNexusChoiceSeriesOracle") == true)) {
        UnitGroupRemove(libNEXS_gv_selendisPsiSpireGroup[5][(lv_bx - 1)], EventUnit());
        UnitGroupAdd(libNEXS_gv_selendisPsiSpireGroup[5][lv_bx], EventUnit());
    }
    else if ((UnitHasBehavior2(EventUnit(), "SelendisNexusChoiceSeriesVoidRay") == true)) {
        UnitGroupRemove(libNEXS_gv_selendisPsiSpireGroup[6][(lv_bx - 1)], EventUnit());
        UnitGroupAdd(libNEXS_gv_selendisPsiSpireGroup[6][lv_bx], EventUnit());
    }
    else if ((UnitHasBehavior2(EventUnit(), "SelendisNexusChoiceSeriesCarrier") == true)) {
        UnitGroupRemove(libNEXS_gv_selendisPsiSpireGroup[7][(lv_bx - 1)], EventUnit());
        UnitGroupAdd(libNEXS_gv_selendisPsiSpireGroup[7][lv_bx], EventUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Selendis_Platform_Upgrade_Init () {
    libNEXS_gt_Selendis_Platform_Upgrade = TriggerCreate("libNEXS_gt_Selendis_Platform_Upgrade_Func");
    TriggerEnable(libNEXS_gt_Selendis_Platform_Upgrade, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_Selendis_Platform_Upgrade, null, "SelendisPlatformUpgradeLv2AB", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_Selendis_Platform_Upgrade, null, "SelendisPlatformUpgradeLv3AB", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Building Cancel
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisBuildingCancel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SelendisProbe", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, UnitGetPosition(EventUnitProgressUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisBuildingCancel_Init () {
    libNEXS_gt_SelendisBuildingCancel = TriggerCreate("libNEXS_gt_SelendisBuildingCancel_Func");
    TriggerAddEventUnitConstructProgress(libNEXS_gt_SelendisBuildingCancel, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Hero Birth
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisHeroBirth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_value;
    int lv_allg;
    int lv_alla;

    // Automatic Variable Declarations
    const int auto0BB71174_ae = 7;
    const int auto0BB71174_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_value = 0;
    for ( ; ( (auto0BB71174_ai >= 0 && lv_value <= auto0BB71174_ae) || (auto0BB71174_ai < 0 && lv_value >= auto0BB71174_ae) ) ; lv_value += auto0BB71174_ai ) {
        if ((UnitIsAlive(libNEXS_gv_selendis_Nexus_Group[lv_value]) == true)) {
            if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisPlatform") == true)) {
                lv_allg += 1;
                if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisPlatformUpgradeLv2AB") == true)) {
                    lv_allg += 1;
                }

                if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisPlatformUpgradeLv3AB") == true)) {
                    lv_allg += 1;
                }

            }
            else {
                lv_alla += 1;
                if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisPlatformUpgradeLv2AB") == true)) {
                    lv_alla += 1;
                }

                if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisPlatformUpgradeLv3AB") == true)) {
                    lv_alla += 1;
                }

            }
        }

    }
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisHeroUpgradeGround", lv_allg);
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisHeroUpgradeAir", lv_alla);
    libNEXS_gv_selendisHero = EventUnit();
    UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_BBB46B60"));
    libNEXS_gf_SetHeroPanelUnit(1, EventUnit(), libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14);
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisHeroWarp", 1);
    if ((EventUnitBehavior() == "SelendisHeroWarpIn")) {
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisMJGround", 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SOAPylonPowerUnit", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, UnitGetPosition(EventUnit()));
        libNEXS_gv_selendisHeroPowerSource = UnitLastCreated();
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisMJAir", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisHeroBirth_Init () {
    libNEXS_gt_SelendisHeroBirth = TriggerCreate("libNEXS_gt_SelendisHeroBirth_Func");
    TriggerEnable(libNEXS_gt_SelendisHeroBirth, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_SelendisHeroBirth, null, "SelendisHeroWarpIn", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_SelendisHeroBirth, null, "SelendisMothershipHeroWarpIn", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Hero Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisHeroUpgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_value;
    int lv_allg;
    int lv_alla;

    // Automatic Variable Declarations
    const int auto049BA4A8_ae = 7;
    const int auto049BA4A8_ai = 1;
    const int auto6706D954_ae = 7;
    const int auto6706D954_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7 == 1) || (libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7 == 2))) {
        lv_value = 0;
        for ( ; ( (auto049BA4A8_ai >= 0 && lv_value <= auto049BA4A8_ae) || (auto049BA4A8_ai < 0 && lv_value >= auto049BA4A8_ae) ) ; lv_value += auto049BA4A8_ai ) {
            if ((UnitIsAlive(libNEXS_gv_selendis_Nexus_Group[lv_value]) == true)) {
                if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisPlatform") == true)) {
                    lv_allg += 1;
                    if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisPlatformUpgradeLv2AB") == true)) {
                        lv_allg += 1;
                    }

                    if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisPlatformUpgradeLv3AB") == true)) {
                        lv_allg += 1;
                    }

                }

            }

        }
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "SelendisHeroUpgradeForArtanis", lv_allg);
    }

    if ((libNEXS_gv_selendisHero != null)) {
        lv_value = 0;
        for ( ; ( (auto6706D954_ai >= 0 && lv_value <= auto6706D954_ae) || (auto6706D954_ai < 0 && lv_value >= auto6706D954_ae) ) ; lv_value += auto6706D954_ai ) {
            if ((UnitIsAlive(libNEXS_gv_selendis_Nexus_Group[lv_value]) == true)) {
                if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisPlatform") == true)) {
                    lv_allg += 1;
                    if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisPlatformUpgradeLv2AB") == true)) {
                        lv_allg += 1;
                    }

                    if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisPlatformUpgradeLv3AB") == true)) {
                        lv_allg += 1;
                    }

                }
                else {
                    lv_alla += 1;
                    if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisPlatformUpgradeLv2AB") == true)) {
                        lv_alla += 1;
                    }

                    if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisPlatformUpgradeLv3AB") == true)) {
                        lv_alla += 1;
                    }

                }
            }

        }
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisHeroUpgradeGround", lv_allg);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisHeroUpgradeAir", lv_alla);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisHeroUpgrade_Init () {
    libNEXS_gt_SelendisHeroUpgrade = TriggerCreate("libNEXS_gt_SelendisHeroUpgrade_Func");
    TriggerEnable(libNEXS_gt_SelendisHeroUpgrade, false);
    TriggerAddEventTimePeriodic(libNEXS_gt_SelendisHeroUpgrade, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Hero Trans
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisHeroTrans_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNEXS_gv_selendisHeroPowerSource != null)) {
        UnitRemove(libNEXS_gv_selendisHeroPowerSource);
        libNEXS_gv_selendisHeroPowerSource = null;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SOAPylonPowerUnit", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, UnitGetPosition(EventUnit()));
    libNEXS_gv_selendisHeroPowerSource = UnitLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisHeroTrans_Init () {
    libNEXS_gt_SelendisHeroTrans = TriggerCreate("libNEXS_gt_SelendisHeroTrans_Func");
    TriggerEnable(libNEXS_gt_SelendisHeroTrans, false);
    TriggerAddEventUnitOrder(libNEXS_gt_SelendisHeroTrans, null, AbilityCommand("SelendisAdeptHeroMorph", 0));
    TriggerAddEventUnitOrder(libNEXS_gt_SelendisHeroTrans, null, AbilityCommand("SelendisZealotHeroMorph", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Hero Death
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisHeroDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitDamageDeathCheck(c_deathTypeMorph) != true) && (EventUnitDamageDeathCheck(c_deathTypeCancel) != true) && (EventUnitDamageDeathCheck(c_deathTypeRemove) != true) && ((UnitGetType(EventUnit()) == "SelendisAdeptHero") || (UnitGetType(EventUnit()) == "SelendisZealotHero") || (UnitGetType(EventUnit()) == "SelendisMothershipHero"))) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_DFF8B2FD"));
        libNEXS_gv_selendisHero = null;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisHeroDeath_Init () {
    libNEXS_gt_SelendisHeroDeath = TriggerCreate("libNEXS_gt_SelendisHeroDeath_Func");
    TriggerEnable(libNEXS_gt_SelendisHeroDeath, false);
    TriggerAddEventUnitDied(libNEXS_gt_SelendisHeroDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Mothership Attack
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisMothershipAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_currentDamage;
    fixed lv_targetSupply;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "SelendisMothershipHero"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true)) {
        lv_targetSupply = 10.0;
    }
    else {
        lv_targetSupply = UnitTypeGetProperty(UnitGetType(EventUnit()), c_unitPropSuppliesUsed);
        if ((lv_targetSupply < 1)) {
            lv_targetSupply = 1.0;
        }

    }
    lv_currentDamage = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "SelendisMothershipHeroTimeLightDamage", "Amount", EventUnitDamageSourcePlayer());
    UnitDamage(EventUnitDamageSourceUnit(), "SelendisMothershipHeroTimeLightDamage", EventUnit(), (lv_currentDamage * (lv_targetSupply - 1.0)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisMothershipAttack_Init () {
    libNEXS_gt_SelendisMothershipAttack = TriggerCreate("libNEXS_gt_SelendisMothershipAttack_Func");
    TriggerEnable(libNEXS_gt_SelendisMothershipAttack, false);
    TriggerAddEventUnitDamaged(libNEXS_gt_SelendisMothershipAttack, null, c_unitDamageTypeAny, c_unitDamageEither, "SelendisMothershipHeroTimeLightDamageDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Colossus GA Trigger
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisColossusGATrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_platformCountMax;
    int lv_init;
    int lv_random;

    // Automatic Variable Declarations
    unitgroup auto8C08409B_g;
    int auto8C08409B_u;
    unit auto8C08409B_var;
    int auto288D5069_ae;
    const int auto288D5069_ai = 1;

    // Variable Initialization
    lv_platformCountMax = 8;
    lv_random = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisGlobalPowerUpgradeColossus", c_techCountCompleteOnly) > 0)) {
        lv_random = RandomInt(0, 1);
    }

    if ((lv_random == 1)) {
        auto8C08409B_g = UnitGroup("SelendisPlatformUnitInvisible3", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionCircle(UnitGetPosition(libNEXS_gv_selendisGlobalPowerColossusCaster), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 1);
        auto8C08409B_u = UnitGroupCount(auto8C08409B_g, c_unitCountAll);
        for (;; auto8C08409B_u -= 1) {
            auto8C08409B_var = UnitGroupUnitFromEnd(auto8C08409B_g, auto8C08409B_u);
            if (auto8C08409B_var == null) { break; }
            UnitRemove(auto8C08409B_var);
        }
        auto288D5069_ae = (lv_platformCountMax - 1);
        lv_init = 0;
        for ( ; ( (auto288D5069_ai >= 0 && lv_init <= auto288D5069_ae) || (auto288D5069_ai < 0 && lv_init >= auto288D5069_ae) ) ; lv_init += auto288D5069_ai ) {
            if ((UnitGetPosition(libNEXS_gv_selendisGlobalPowerColossusCaster) == libNEXS_gv_selendis_AdeptPoint4[lv_init])) {
                libNEXS_gf_Selendis_Platform_Adept5(UnitBehaviorCount(libNEXS_gv_selendisGlobalPowerColossusCaster, "SelendisPlatformUnitCreateCaster"), "SelendisPlatformImpact_Colossus", lv_init);
                break;
            }

        }
        libNtve_gf_SetDialogItemText(libNEXS_gv_selendisGlobalPowerText[libNEXS_gv_selendisGlobalPowerColossusValue], IntToText(UnitBehaviorCount(libNEXS_gv_selendisGlobalPowerColossusCaster, "SelendisPlatformUnitCreateCaster")), PlayerGroupSingle(EventPlayer()));
    }

    if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarHasArmy" + IntToString((libNEXS_gv_selendisGlobalPowerColossusValue + 1)))), c_techCountCompleteOnly) == 1) && (UnitBehaviorCount(libNEXS_gv_selendis_Nexus_Group[libNEXS_gv_selendisGlobalPowerColossusValue], "SelendisPlatformUnitCreateCaster") > 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SelendisGlobalPowerColossusThermalLanceTargeter", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisColossusGATrigger_Init () {
    libNEXS_gt_SelendisColossusGATrigger = TriggerCreate("libNEXS_gt_SelendisColossusGATrigger_Func");
    TriggerEnable(libNEXS_gt_SelendisColossusGATrigger, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_SelendisColossusGATrigger, c_playerAny, "SelendisGlobalPowerColossusThermalLanceEndPoint");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Colossus GA Initial
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisColossusGAInitial_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto85565A62_g;
    int auto85565A62_u;
    unit auto85565A62_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SelendisGlobalPowerColossusThermalLanceTargeter"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto85565A62_g = libNEXS_gv_selendisGlobalPowerColossusGroup;
    auto85565A62_u = UnitGroupCount(auto85565A62_g, c_unitCountAll);
    for (;; auto85565A62_u -= 1) {
        auto85565A62_var = UnitGroupUnitFromEnd(auto85565A62_g, auto85565A62_u);
        if (auto85565A62_var == null) { break; }
        UnitRemove(auto85565A62_var);
    }
    UnitGroupClear(libNEXS_gv_selendisGlobalPowerColossusGroup);
    UnitGroupAdd(libNEXS_gv_selendisGlobalPowerColossusGroup, EventUnit());
    UISetTargetingOrder(PlayerGroupSingle(EventPlayer()), libNEXS_gv_selendisGlobalPowerColossusGroup, OrderTargetingPoint(AbilityCommand("SelendisGlobalPowerColossusThermalLance", 0), UnitGroupCenterOfGroup(libNEXS_gv_selendisGlobalPowerColossusGroup)), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisColossusGAInitial_Init () {
    libNEXS_gt_SelendisColossusGAInitial = TriggerCreate("libNEXS_gt_SelendisColossusGAInitial_Func");
    TriggerEnable(libNEXS_gt_SelendisColossusGAInitial, false);
    TriggerAddEventUnitRegion(libNEXS_gt_SelendisColossusGAInitial, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Carrier GA Trigger
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisCarrierGATrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SelendisGPCarrierOrbitalStrikeBeamCaster", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    UnitGroupAdd(libNEXS_gv_selendisGlobalPowerCarrierGroup, UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisCarrierGATrigger_Init () {
    libNEXS_gt_SelendisCarrierGATrigger = TriggerCreate("libNEXS_gt_SelendisCarrierGATrigger_Func");
    TriggerEnable(libNEXS_gt_SelendisCarrierGATrigger, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_SelendisCarrierGATrigger, c_playerAny, "SelendisGlobalPowerCarrierAbilitySearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Carrier GA Orbital Strike
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisCarrierGAOrbitalStrike_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_tempIG;
    int lv_random;
    unit lv_tempUnit;
    point lv_abilityPoint;
    region lv_abilityArea;

    // Automatic Variable Declarations
    unitgroup auto279B0409_g;
    int auto279B0409_u;
    unit auto279B0409_var;
    unitgroup auto37E506CE_g;
    int auto37E506CE_u;
    unit auto37E506CE_var;
    unitgroup auto939261BA_g;
    int auto939261BA_u;
    unit auto939261BA_var;
    unitgroup autoE790F277_g;
    int autoE790F277_u;
    unit autoE790F277_var;
    unitgroup autoF5C91BDC_g;
    int autoF5C91BDC_u;
    unit autoF5C91BDC_var;
    unitgroup auto1098C11B_g;
    int auto1098C11B_u;
    unit auto1098C11B_var;

    // Variable Initialization
    lv_tempIG = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(libNEXS_gv_selendisGlobalPowerCarrierGroup, c_unitCountAlive) > 0)) {
        auto279B0409_g = libNEXS_gv_selendisGlobalPowerCarrierGroup;
        auto279B0409_u = UnitGroupCount(auto279B0409_g, c_unitCountAll);
        for (;; auto279B0409_u -= 1) {
            auto279B0409_var = UnitGroupUnitFromEnd(auto279B0409_g, auto279B0409_u);
            if (auto279B0409_var == null) { break; }
            if ((UnitIsAlive(auto279B0409_var) == false)) {
                UnitGroupRemove(libNEXS_gv_selendisGlobalPowerCarrierGroup, auto279B0409_var);
            }

        }
        auto37E506CE_g = libNEXS_gv_selendisGlobalPowerInterceptorGroup;
        auto37E506CE_u = UnitGroupCount(auto37E506CE_g, c_unitCountAll);
        for (;; auto37E506CE_u -= 1) {
            auto37E506CE_var = UnitGroupUnitFromEnd(auto37E506CE_g, auto37E506CE_u);
            if (auto37E506CE_var == null) { break; }
            if ((UnitIsAlive(auto37E506CE_var) == true)) {
                UnitGroupAdd(lv_tempIG, auto37E506CE_var);
            }
            else {
                UnitGroupRemove(libNEXS_gv_selendisGlobalPowerInterceptorGroup, auto37E506CE_var);
            }
        }
        auto939261BA_g = lv_tempIG;
        auto939261BA_u = UnitGroupCount(auto939261BA_g, c_unitCountAll);
        for (;; auto939261BA_u -= 1) {
            auto939261BA_var = UnitGroupUnitFromEnd(auto939261BA_g, auto939261BA_u);
            if (auto939261BA_var == null) { break; }
            lv_tempUnit = auto939261BA_var;
            lv_random = RandomInt(0, 1);
            if ((lv_random == 0)) {
                break;
            }

        }
        lv_abilityPoint = UnitGetPosition(lv_tempUnit);
        lv_abilityArea = RegionCircle(lv_abilityPoint, 12.0);
        if (((UnitCount(null, 3, RegionCircle(CameraGetTarget(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14), 10.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0) > 0) || (UnitCount(null, 4, RegionCircle(CameraGetTarget(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14), 10.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0) > 0) || (UnitCount(null, 5, RegionCircle(CameraGetTarget(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14), 10.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0) > 0) || (UnitCount(null, 6, RegionCircle(CameraGetTarget(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14), 10.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0) > 0) || (UnitCount(null, 7, RegionCircle(CameraGetTarget(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14), 10.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0) > 0) || (UnitCount(null, 8, RegionCircle(CameraGetTarget(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14), 10.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0) > 0))) {
            lv_abilityArea = RegionCircle(CameraGetTarget(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14), 10.0);
        }

        if (((UnitCount(null, 3, lv_abilityArea, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0) > 0) || (UnitCount(null, 4, lv_abilityArea, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0) > 0) || (UnitCount(null, 5, lv_abilityArea, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0) > 0) || (UnitCount(null, 6, lv_abilityArea, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0) > 0) || (UnitCount(null, 7, lv_abilityArea, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0) > 0) || (UnitCount(null, 8, lv_abilityArea, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0) > 0))) {
            autoE790F277_g = UnitGroup(null, c_playerAny, lv_abilityArea, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
            autoE790F277_u = UnitGroupCount(autoE790F277_g, c_unitCountAll);
            for (;; autoE790F277_u -= 1) {
                autoE790F277_var = UnitGroupUnitFromEnd(autoE790F277_g, autoE790F277_u);
                if (autoE790F277_var == null) { break; }
                if ((VisIsVisibleForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, UnitGetPosition(autoE790F277_var)) == true) && (UnitGetOwner(autoE790F277_var) != 0) && (UnitGetOwner(autoE790F277_var) != 1) && (UnitGetOwner(autoE790F277_var) != 2)) {
                    lv_abilityPoint = UnitGetPosition(autoE790F277_var);
                    lv_random = RandomInt(0, 1);
                    if ((lv_random == 0)) {
                        break;
                    }

                }

            }
        }
        else {
            autoF5C91BDC_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
            autoF5C91BDC_u = UnitGroupCount(autoF5C91BDC_g, c_unitCountAll);
            for (;; autoF5C91BDC_u -= 1) {
                autoF5C91BDC_var = UnitGroupUnitFromEnd(autoF5C91BDC_g, autoF5C91BDC_u);
                if (autoF5C91BDC_var == null) { break; }
                if ((VisIsVisibleForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, UnitGetPosition(autoF5C91BDC_var)) == true) && (UnitGetOwner(autoF5C91BDC_var) != 0) && (UnitGetOwner(autoF5C91BDC_var) != 1) && (UnitGetOwner(autoF5C91BDC_var) != 2)) {
                    lv_abilityPoint = UnitGetPosition(autoF5C91BDC_var);
                    break;
                }
                else {
                    lv_abilityPoint = null;
                }
            }
        }
        auto1098C11B_g = libNEXS_gv_selendisGlobalPowerCarrierGroup;
        auto1098C11B_u = UnitGroupCount(auto1098C11B_g, c_unitCountAll);
        for (;; auto1098C11B_u -= 1) {
            auto1098C11B_var = UnitGroupUnitFromEnd(auto1098C11B_g, auto1098C11B_u);
            if (auto1098C11B_var == null) { break; }
            if ((UnitIsAlive(auto1098C11B_var) == true) && (lv_abilityPoint != null)) {
                UnitIssueOrder(auto1098C11B_var, OrderTargetingPoint(AbilityCommand("SelendisGPCarrierOrbitalStrikeBeam", 0), lv_abilityPoint), c_orderQueueAddToEnd);
                Wait(0.2, c_timeGame);
            }
            else {
                UnitGroupRemove(libNEXS_gv_selendisGlobalPowerCarrierGroup, auto1098C11B_var);
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisCarrierGAOrbitalStrike_Init () {
    libNEXS_gt_SelendisCarrierGAOrbitalStrike = TriggerCreate("libNEXS_gt_SelendisCarrierGAOrbitalStrike_Func");
    TriggerEnable(libNEXS_gt_SelendisCarrierGAOrbitalStrike, false);
    TriggerAddEventTimePeriodic(libNEXS_gt_SelendisCarrierGAOrbitalStrike, 0.5, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Carrier GA Interceptor Get
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisCarrierGAInterceptorGet_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SelendisCarrierInterceptor", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, UnitGetPosition(EventUnit()));
    UnitBehaviorAddPlayer(UnitLastCreated(), "ReleaseInterceptorsWander", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, 1);
    UnitBehaviorAddPlayer(UnitLastCreated(), "ReleaseInterceptorsTimedLifeGP", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, 1);
    UnitGroupAdd(libNEXS_gv_selendisGlobalPowerInterceptorGroup, UnitLastCreated());
    if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisGlobalPowerUpgradeCarrier", c_techCountCompleteOnly) > 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SelendisCarrierInterceptor", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, UnitGetPosition(EventUnit()));
        UnitBehaviorAddPlayer(UnitLastCreated(), "ReleaseInterceptorsWander", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, 1);
        UnitBehaviorAddPlayer(UnitLastCreated(), "ReleaseInterceptorsTimedLifeGP", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, 1);
        UnitGroupAdd(libNEXS_gv_selendisGlobalPowerInterceptorGroup, UnitLastCreated());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisCarrierGAInterceptorGet_Init () {
    libNEXS_gt_SelendisCarrierGAInterceptorGet = TriggerCreate("libNEXS_gt_SelendisCarrierGAInterceptorGet_Func");
    TriggerEnable(libNEXS_gt_SelendisCarrierGAInterceptorGet, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_SelendisCarrierGAInterceptorGet, null, "SelendisGlobalPowerCarrierAbilityDummy", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Phoenix Height Change
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisPhoenixHeightChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
        UnitSetHeight(EventUnit(), 0.25, 0.5);
    }
    else {
        if ((EventUnitBehaviorChange() == c_unitBehaviorChangeDestroy)) {
            UnitSetHeight(EventUnit(), 3.75, 0.5);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisPhoenixHeightChange_Init () {
    libNEXS_gt_SelendisPhoenixHeightChange = TriggerCreate("libNEXS_gt_SelendisPhoenixHeightChange_Func");
    TriggerEnable(libNEXS_gt_SelendisPhoenixHeightChange, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_SelendisPhoenixHeightChange, null, "SelendisGlobalPowerPhoenixSuicideTargetAB", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Colossus Weapon Target Move
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisColossusWeaponTargetMove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_invisibleUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_invisibleUnit = UnitBehaviorEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SelendisColossusInvisibleProbeAB", c_effectUnitCaster, 0);
    if (((libNtve_gf_UnitInRegion(EventPlayerEffectUsedUnit(c_effectUnitTarget), RegionCircle(UnitGetPosition(lv_invisibleUnit), 10.0)) == false) || (EventPlayerEffectUsed() != "SelendisColossusWeaponTarget"))) {
        UnitSetPosition(lv_invisibleUnit, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), false);
    }

    UnitIssueOrder(lv_invisibleUnit, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget))), c_orderQueueReplace);
    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SelendisColossusWeaponTurretFace", lv_invisibleUnit);
    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SelendisColossusWeaponAB", lv_invisibleUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisColossusWeaponTargetMove_Init () {
    libNEXS_gt_SelendisColossusWeaponTargetMove = TriggerCreate("libNEXS_gt_SelendisColossusWeaponTargetMove_Func");
    TriggerEnable(libNEXS_gt_SelendisColossusWeaponTargetMove, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_SelendisColossusWeaponTargetMove, c_playerAny, "SelendisColossusWeaponInitial");
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_SelendisColossusWeaponTargetMove, c_playerAny, "SelendisColossusWeaponTarget");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Colossus Weapon Target Birth
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisColossusWeaponTargetBirth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SelendisColossusInvisibleProbeAB", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisColossusWeaponTargetBirth_Init () {
    libNEXS_gt_SelendisColossusWeaponTargetBirth = TriggerCreate("libNEXS_gt_SelendisColossusWeaponTargetBirth_Func");
    TriggerEnable(libNEXS_gt_SelendisColossusWeaponTargetBirth, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_SelendisColossusWeaponTargetBirth, c_playerAny, "SelendisColossusInvisibleProbeSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Colossus Weapon Target Buff
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisColossusWeaponTargetBuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_invisibleUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_invisibleUnit = UnitBehaviorEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SelendisColossusInvisibleProbeAB", c_effectUnitCaster, 0);
    UnitBehaviorAdd(lv_invisibleUnit, "SelendisColossusCasterBuffForIU", lv_invisibleUnit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisColossusWeaponTargetBuff_Init () {
    libNEXS_gt_SelendisColossusWeaponTargetBuff = TriggerCreate("libNEXS_gt_SelendisColossusWeaponTargetBuff_Func");
    TriggerEnable(libNEXS_gt_SelendisColossusWeaponTargetBuff, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_SelendisColossusWeaponTargetBuff, c_playerAny, "SelendisColossusCasterBuff");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Global Caster Start 1
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisGlobalCasterStart1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto987264EE_g;
    int auto987264EE_u;
    unit auto987264EE_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupClear(libNEXS_gv_selendisGlobalCasterUnitGroup);
    auto987264EE_g = UnitGroup("HornerAirFleetTargeter2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto987264EE_u = UnitGroupCount(auto987264EE_g, c_unitCountAll);
    for (;; auto987264EE_u -= 1) {
        auto987264EE_var = UnitGroupUnitFromEnd(auto987264EE_g, auto987264EE_u);
        if (auto987264EE_var == null) { break; }
        UnitRemove(auto987264EE_var);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HornerAirFleetTargeter2", 0, EventPlayer(), OrderGetTargetPoint(EventUnitOrder()));
    UnitGroupAdd(libNEXS_gv_selendisGlobalCasterUnitGroup, UnitLastCreated());
    libNEXS_gv_selendisAttackStart = OrderGetTargetPoint(EventUnitOrder());
    UISetTargetingOrder(PlayerGroupSingle(EventPlayer()), libNEXS_gv_selendisGlobalCasterUnitGroup, OrderTargetingPoint(AbilityCommand("SelendisWarBeginningForUnitExecute1", 0), UnitGroupCenterOfGroup(libNEXS_gv_selendisGlobalCasterUnitGroup)), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisGlobalCasterStart1_Init () {
    libNEXS_gt_SelendisGlobalCasterStart1 = TriggerCreate("libNEXS_gt_SelendisGlobalCasterStart1_Func");
    TriggerEnable(libNEXS_gt_SelendisGlobalCasterStart1, false);
    TriggerAddEventUnitOrder(libNEXS_gt_SelendisGlobalCasterStart1, null, AbilityCommand("SelendisWarBeginningForUnit1", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Global Caster Start 2
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisGlobalCasterStart2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoAAAF5D32_g;
    int autoAAAF5D32_u;
    unit autoAAAF5D32_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupClear(libNEXS_gv_selendisGlobalCasterUnitGroup);
    autoAAAF5D32_g = UnitGroup("HornerAirFleetTargeter2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAAAF5D32_u = UnitGroupCount(autoAAAF5D32_g, c_unitCountAll);
    for (;; autoAAAF5D32_u -= 1) {
        autoAAAF5D32_var = UnitGroupUnitFromEnd(autoAAAF5D32_g, autoAAAF5D32_u);
        if (autoAAAF5D32_var == null) { break; }
        UnitRemove(autoAAAF5D32_var);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HornerAirFleetTargeter2", 0, EventPlayer(), OrderGetTargetPoint(EventUnitOrder()));
    UnitGroupAdd(libNEXS_gv_selendisGlobalCasterUnitGroup, UnitLastCreated());
    libNEXS_gv_selendisAttackStart = OrderGetTargetPoint(EventUnitOrder());
    UISetTargetingOrder(PlayerGroupSingle(EventPlayer()), libNEXS_gv_selendisGlobalCasterUnitGroup, OrderTargetingPoint(AbilityCommand("SelendisWarBeginningForUnitExecute2", 0), UnitGroupCenterOfGroup(libNEXS_gv_selendisGlobalCasterUnitGroup)), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisGlobalCasterStart2_Init () {
    libNEXS_gt_SelendisGlobalCasterStart2 = TriggerCreate("libNEXS_gt_SelendisGlobalCasterStart2_Func");
    TriggerEnable(libNEXS_gt_SelendisGlobalCasterStart2, false);
    TriggerAddEventUnitOrder(libNEXS_gt_SelendisGlobalCasterStart2, null, AbilityCommand("SelendisWarBeginningForUnit2", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Global Caster Start 3
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisGlobalCasterStart3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto69A042D4_g;
    int auto69A042D4_u;
    unit auto69A042D4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupClear(libNEXS_gv_selendisGlobalCasterUnitGroup);
    auto69A042D4_g = UnitGroup("HornerAirFleetTargeter2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto69A042D4_u = UnitGroupCount(auto69A042D4_g, c_unitCountAll);
    for (;; auto69A042D4_u -= 1) {
        auto69A042D4_var = UnitGroupUnitFromEnd(auto69A042D4_g, auto69A042D4_u);
        if (auto69A042D4_var == null) { break; }
        UnitRemove(auto69A042D4_var);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HornerAirFleetTargeter2", 0, EventPlayer(), OrderGetTargetPoint(EventUnitOrder()));
    UnitGroupAdd(libNEXS_gv_selendisGlobalCasterUnitGroup, UnitLastCreated());
    libNEXS_gv_selendisAttackStart = OrderGetTargetPoint(EventUnitOrder());
    UISetTargetingOrder(PlayerGroupSingle(EventPlayer()), libNEXS_gv_selendisGlobalCasterUnitGroup, OrderTargetingPoint(AbilityCommand("SelendisWarBeginningForUnitExecute3", 0), UnitGroupCenterOfGroup(libNEXS_gv_selendisGlobalCasterUnitGroup)), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisGlobalCasterStart3_Init () {
    libNEXS_gt_SelendisGlobalCasterStart3 = TriggerCreate("libNEXS_gt_SelendisGlobalCasterStart3_Func");
    TriggerEnable(libNEXS_gt_SelendisGlobalCasterStart3, false);
    TriggerAddEventUnitOrder(libNEXS_gt_SelendisGlobalCasterStart3, null, AbilityCommand("SelendisWarBeginningForUnit3", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Global Caster Start 4
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisGlobalCasterStart4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto417D17FB_g;
    int auto417D17FB_u;
    unit auto417D17FB_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupClear(libNEXS_gv_selendisGlobalCasterUnitGroup);
    auto417D17FB_g = UnitGroup("HornerAirFleetTargeter2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto417D17FB_u = UnitGroupCount(auto417D17FB_g, c_unitCountAll);
    for (;; auto417D17FB_u -= 1) {
        auto417D17FB_var = UnitGroupUnitFromEnd(auto417D17FB_g, auto417D17FB_u);
        if (auto417D17FB_var == null) { break; }
        UnitRemove(auto417D17FB_var);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HornerAirFleetTargeter2", 0, EventPlayer(), OrderGetTargetPoint(EventUnitOrder()));
    UnitGroupAdd(libNEXS_gv_selendisGlobalCasterUnitGroup, UnitLastCreated());
    libNEXS_gv_selendisAttackStart = OrderGetTargetPoint(EventUnitOrder());
    UISetTargetingOrder(PlayerGroupSingle(EventPlayer()), libNEXS_gv_selendisGlobalCasterUnitGroup, OrderTargetingPoint(AbilityCommand("SelendisWarBeginningForUnitExecute4", 0), UnitGroupCenterOfGroup(libNEXS_gv_selendisGlobalCasterUnitGroup)), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisGlobalCasterStart4_Init () {
    libNEXS_gt_SelendisGlobalCasterStart4 = TriggerCreate("libNEXS_gt_SelendisGlobalCasterStart4_Func");
    TriggerEnable(libNEXS_gt_SelendisGlobalCasterStart4, false);
    TriggerAddEventUnitOrder(libNEXS_gt_SelendisGlobalCasterStart4, null, AbilityCommand("SelendisWarBeginningForUnit4", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Global Caster Start 5
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisGlobalCasterStart5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1DED3EB0_g;
    int auto1DED3EB0_u;
    unit auto1DED3EB0_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupClear(libNEXS_gv_selendisGlobalCasterUnitGroup);
    auto1DED3EB0_g = UnitGroup("HornerAirFleetTargeter2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1DED3EB0_u = UnitGroupCount(auto1DED3EB0_g, c_unitCountAll);
    for (;; auto1DED3EB0_u -= 1) {
        auto1DED3EB0_var = UnitGroupUnitFromEnd(auto1DED3EB0_g, auto1DED3EB0_u);
        if (auto1DED3EB0_var == null) { break; }
        UnitRemove(auto1DED3EB0_var);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HornerAirFleetTargeter2", 0, EventPlayer(), OrderGetTargetPoint(EventUnitOrder()));
    UnitGroupAdd(libNEXS_gv_selendisGlobalCasterUnitGroup, UnitLastCreated());
    libNEXS_gv_selendisAttackStart = OrderGetTargetPoint(EventUnitOrder());
    UISetTargetingOrder(PlayerGroupSingle(EventPlayer()), libNEXS_gv_selendisGlobalCasterUnitGroup, OrderTargetingPoint(AbilityCommand("SelendisWarBeginningForUnitExecute5", 0), UnitGroupCenterOfGroup(libNEXS_gv_selendisGlobalCasterUnitGroup)), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisGlobalCasterStart5_Init () {
    libNEXS_gt_SelendisGlobalCasterStart5 = TriggerCreate("libNEXS_gt_SelendisGlobalCasterStart5_Func");
    TriggerEnable(libNEXS_gt_SelendisGlobalCasterStart5, false);
    TriggerAddEventUnitOrder(libNEXS_gt_SelendisGlobalCasterStart5, null, AbilityCommand("SelendisWarBeginningForUnit5", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Global Caster Start 6
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisGlobalCasterStart6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoEA731AB2_g;
    int autoEA731AB2_u;
    unit autoEA731AB2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupClear(libNEXS_gv_selendisGlobalCasterUnitGroup);
    autoEA731AB2_g = UnitGroup("HornerAirFleetTargeter2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEA731AB2_u = UnitGroupCount(autoEA731AB2_g, c_unitCountAll);
    for (;; autoEA731AB2_u -= 1) {
        autoEA731AB2_var = UnitGroupUnitFromEnd(autoEA731AB2_g, autoEA731AB2_u);
        if (autoEA731AB2_var == null) { break; }
        UnitRemove(autoEA731AB2_var);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HornerAirFleetTargeter2", 0, EventPlayer(), OrderGetTargetPoint(EventUnitOrder()));
    UnitGroupAdd(libNEXS_gv_selendisGlobalCasterUnitGroup, UnitLastCreated());
    libNEXS_gv_selendisAttackStart = OrderGetTargetPoint(EventUnitOrder());
    UISetTargetingOrder(PlayerGroupSingle(EventPlayer()), libNEXS_gv_selendisGlobalCasterUnitGroup, OrderTargetingPoint(AbilityCommand("SelendisWarBeginningForUnitExecute6", 0), UnitGroupCenterOfGroup(libNEXS_gv_selendisGlobalCasterUnitGroup)), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisGlobalCasterStart6_Init () {
    libNEXS_gt_SelendisGlobalCasterStart6 = TriggerCreate("libNEXS_gt_SelendisGlobalCasterStart6_Func");
    TriggerEnable(libNEXS_gt_SelendisGlobalCasterStart6, false);
    TriggerAddEventUnitOrder(libNEXS_gt_SelendisGlobalCasterStart6, null, AbilityCommand("SelendisWarBeginningForUnit6", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Global Caster Start 7
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisGlobalCasterStart7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA07B8352_g;
    int autoA07B8352_u;
    unit autoA07B8352_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupClear(libNEXS_gv_selendisGlobalCasterUnitGroup);
    autoA07B8352_g = UnitGroup("HornerAirFleetTargeter2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA07B8352_u = UnitGroupCount(autoA07B8352_g, c_unitCountAll);
    for (;; autoA07B8352_u -= 1) {
        autoA07B8352_var = UnitGroupUnitFromEnd(autoA07B8352_g, autoA07B8352_u);
        if (autoA07B8352_var == null) { break; }
        UnitRemove(autoA07B8352_var);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HornerAirFleetTargeter2", 0, EventPlayer(), OrderGetTargetPoint(EventUnitOrder()));
    UnitGroupAdd(libNEXS_gv_selendisGlobalCasterUnitGroup, UnitLastCreated());
    libNEXS_gv_selendisAttackStart = OrderGetTargetPoint(EventUnitOrder());
    UISetTargetingOrder(PlayerGroupSingle(EventPlayer()), libNEXS_gv_selendisGlobalCasterUnitGroup, OrderTargetingPoint(AbilityCommand("SelendisWarBeginningForUnitExecute7", 0), UnitGroupCenterOfGroup(libNEXS_gv_selendisGlobalCasterUnitGroup)), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisGlobalCasterStart7_Init () {
    libNEXS_gt_SelendisGlobalCasterStart7 = TriggerCreate("libNEXS_gt_SelendisGlobalCasterStart7_Func");
    TriggerEnable(libNEXS_gt_SelendisGlobalCasterStart7, false);
    TriggerAddEventUnitOrder(libNEXS_gt_SelendisGlobalCasterStart7, null, AbilityCommand("SelendisWarBeginningForUnit7", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Global Caster Start 8
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisGlobalCasterStart8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto15D86C43_g;
    int auto15D86C43_u;
    unit auto15D86C43_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupClear(libNEXS_gv_selendisGlobalCasterUnitGroup);
    auto15D86C43_g = UnitGroup("HornerAirFleetTargeter2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto15D86C43_u = UnitGroupCount(auto15D86C43_g, c_unitCountAll);
    for (;; auto15D86C43_u -= 1) {
        auto15D86C43_var = UnitGroupUnitFromEnd(auto15D86C43_g, auto15D86C43_u);
        if (auto15D86C43_var == null) { break; }
        UnitRemove(auto15D86C43_var);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HornerAirFleetTargeter2", 0, EventPlayer(), OrderGetTargetPoint(EventUnitOrder()));
    UnitGroupAdd(libNEXS_gv_selendisGlobalCasterUnitGroup, UnitLastCreated());
    libNEXS_gv_selendisAttackStart = OrderGetTargetPoint(EventUnitOrder());
    UISetTargetingOrder(PlayerGroupSingle(EventPlayer()), libNEXS_gv_selendisGlobalCasterUnitGroup, OrderTargetingPoint(AbilityCommand("SelendisWarBeginningForUnitExecute8", 0), UnitGroupCenterOfGroup(libNEXS_gv_selendisGlobalCasterUnitGroup)), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisGlobalCasterStart8_Init () {
    libNEXS_gt_SelendisGlobalCasterStart8 = TriggerCreate("libNEXS_gt_SelendisGlobalCasterStart8_Func");
    TriggerEnable(libNEXS_gt_SelendisGlobalCasterStart8, false);
    TriggerAddEventUnitOrder(libNEXS_gt_SelendisGlobalCasterStart8, null, AbilityCommand("SelendisWarBeginningForUnit8", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Unit Attack 1
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisUnitAttack1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_psiSpireNexusUnit;
    int lv_unitType;
    int lv_spireLevel;
    int lv_unitAmount;
    int lv_value;

    // Automatic Variable Declarations
    unitgroup auto6E0B6860_g;
    int auto6E0B6860_u;
    unit auto6E0B6860_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_value = 0;
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarHasBegun" + IntToString((lv_value + 1)))), 1);
    lv_psiSpireNexusUnit = libNEXS_gv_selendis_Nexus_Group[lv_value];
    UnitBehaviorAddPlayer(lv_psiSpireNexusUnit, "SelendisWarThisBuildingIsBeginning", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, 1);
    lv_unitType = libNEXS_gf_SelendisUnitAttackNexusSelect(lv_psiSpireNexusUnit);
    if ((UnitHasBehavior2(lv_psiSpireNexusUnit, "SelendisPlatformUpgradeLv2AB") == true)) {
        if ((UnitHasBehavior2(lv_psiSpireNexusUnit, "SelendisPlatformUpgradeLv3AB") == true)) {
            lv_spireLevel = 2;
        }
        else {
            lv_spireLevel = 1;
        }
    }
    else {
        lv_spireLevel = 0;
    }
    lv_unitAmount += UnitBehaviorCount(lv_psiSpireNexusUnit, "SelendisPlatformUnitCreateCaster");
    UnitGroupRemove(libNEXS_gv_selendisGlobalCasterUnitGroup, EventUnit());
    auto6E0B6860_g = UnitGroup("HornerAirFleetTargeter2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6E0B6860_u = UnitGroupCount(auto6E0B6860_g, c_unitCountAll);
    for (;; auto6E0B6860_u -= 1) {
        auto6E0B6860_var = UnitGroupUnitFromEnd(auto6E0B6860_g, auto6E0B6860_u);
        if (auto6E0B6860_var == null) { break; }
        UnitRemove(auto6E0B6860_var);
    }
    libNEXS_gv_selendisAttackEnd = OrderGetTargetPoint(EventUnitOrder());
    if (((lv_unitType == 0) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy11(lv_unitAmount, 0);
    }
    else if (((lv_unitType == 0) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy12(lv_unitAmount, 0);
    }
    else if (((lv_unitType == 1) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy21(lv_unitAmount, 0);
    }
    else if (((lv_unitType == 1) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy22(lv_unitAmount, 0);
    }
    else if (((lv_unitType == 2) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy31(lv_unitAmount, 0);
    }
    else if (((lv_unitType == 2) && (lv_spireLevel == 1))) {
        libNEXS_gf_SelendisUnitDeploy32(lv_unitAmount, 0);
    }
    else if (((lv_unitType == 2) && (lv_spireLevel == 2))) {
        libNEXS_gf_SelendisUnitDeploy33(lv_unitAmount, 0);
    }
    else if (((lv_unitType == 3) && ((lv_spireLevel == 0) || (lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy41(lv_unitAmount, 0);
    }
    else if (((lv_unitType == 4) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy51(lv_unitAmount, 0);
    }
    else if (((lv_unitType == 4) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy52(lv_unitAmount, 0);
    }
    else if (((lv_unitType == 5) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy61(lv_unitAmount, 0);
    }
    else if (((lv_unitType == 5) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy62(lv_unitAmount, 0);
    }
    else if (((lv_unitType == 6) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy71(lv_unitAmount, 0);
    }
    else if (((lv_unitType == 6) && (lv_spireLevel == 1))) {
        libNEXS_gf_SelendisUnitDeploy72(lv_unitAmount, 0);
    }
    else if (((lv_unitType == 6) && (lv_spireLevel == 2))) {
        libNEXS_gf_SelendisUnitDeploy73(lv_unitAmount, 0);
    }
    else if (((lv_unitType == 7) && ((lv_spireLevel == 0) || (lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy81(lv_unitAmount, 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisUnitAttack1_Init () {
    libNEXS_gt_SelendisUnitAttack1 = TriggerCreate("libNEXS_gt_SelendisUnitAttack1_Func");
    TriggerEnable(libNEXS_gt_SelendisUnitAttack1, false);
    TriggerAddEventUnitOrder(libNEXS_gt_SelendisUnitAttack1, null, AbilityCommand("SelendisWarBeginningForUnitExecute1", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Unit Attack 2
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisUnitAttack2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_psiSpireNexusUnit;
    int lv_unitType;
    int lv_spireLevel;
    int lv_unitAmount;
    int lv_value;

    // Automatic Variable Declarations
    unitgroup auto3EFD10B7_g;
    int auto3EFD10B7_u;
    unit auto3EFD10B7_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_value = 1;
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarHasBegun" + IntToString((lv_value + 1)))), 1);
    lv_psiSpireNexusUnit = libNEXS_gv_selendis_Nexus_Group[lv_value];
    UnitBehaviorAddPlayer(lv_psiSpireNexusUnit, "SelendisWarThisBuildingIsBeginning", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, 1);
    lv_unitType = libNEXS_gf_SelendisUnitAttackNexusSelect(lv_psiSpireNexusUnit);
    if ((UnitHasBehavior2(lv_psiSpireNexusUnit, "SelendisPlatformUpgradeLv2AB") == true)) {
        if ((UnitHasBehavior2(lv_psiSpireNexusUnit, "SelendisPlatformUpgradeLv3AB") == true)) {
            lv_spireLevel = 2;
        }
        else {
            lv_spireLevel = 1;
        }
    }
    else {
        lv_spireLevel = 0;
    }
    lv_unitAmount += UnitBehaviorCount(lv_psiSpireNexusUnit, "SelendisPlatformUnitCreateCaster");
    UnitGroupRemove(libNEXS_gv_selendisGlobalCasterUnitGroup, EventUnit());
    auto3EFD10B7_g = UnitGroup("HornerAirFleetTargeter2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3EFD10B7_u = UnitGroupCount(auto3EFD10B7_g, c_unitCountAll);
    for (;; auto3EFD10B7_u -= 1) {
        auto3EFD10B7_var = UnitGroupUnitFromEnd(auto3EFD10B7_g, auto3EFD10B7_u);
        if (auto3EFD10B7_var == null) { break; }
        UnitRemove(auto3EFD10B7_var);
    }
    libNEXS_gv_selendisAttackEnd = OrderGetTargetPoint(EventUnitOrder());
    if (((lv_unitType == 0) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy11(lv_unitAmount, 1);
    }
    else if (((lv_unitType == 0) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy12(lv_unitAmount, 1);
    }
    else if (((lv_unitType == 1) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy21(lv_unitAmount, 1);
    }
    else if (((lv_unitType == 1) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy22(lv_unitAmount, 1);
    }
    else if (((lv_unitType == 2) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy31(lv_unitAmount, 1);
    }
    else if (((lv_unitType == 2) && (lv_spireLevel == 1))) {
        libNEXS_gf_SelendisUnitDeploy32(lv_unitAmount, 1);
    }
    else if (((lv_unitType == 2) && (lv_spireLevel == 2))) {
        libNEXS_gf_SelendisUnitDeploy33(lv_unitAmount, 1);
    }
    else if (((lv_unitType == 3) && ((lv_spireLevel == 0) || (lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy41(lv_unitAmount, 1);
    }
    else if (((lv_unitType == 4) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy51(lv_unitAmount, 1);
    }
    else if (((lv_unitType == 4) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy52(lv_unitAmount, 1);
    }
    else if (((lv_unitType == 5) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy61(lv_unitAmount, 1);
    }
    else if (((lv_unitType == 5) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy62(lv_unitAmount, 1);
    }
    else if (((lv_unitType == 6) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy71(lv_unitAmount, 1);
    }
    else if (((lv_unitType == 6) && (lv_spireLevel == 1))) {
        libNEXS_gf_SelendisUnitDeploy72(lv_unitAmount, 1);
    }
    else if (((lv_unitType == 6) && (lv_spireLevel == 2))) {
        libNEXS_gf_SelendisUnitDeploy73(lv_unitAmount, 1);
    }
    else if (((lv_unitType == 7) && ((lv_spireLevel == 0) || (lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy81(lv_unitAmount, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisUnitAttack2_Init () {
    libNEXS_gt_SelendisUnitAttack2 = TriggerCreate("libNEXS_gt_SelendisUnitAttack2_Func");
    TriggerEnable(libNEXS_gt_SelendisUnitAttack2, false);
    TriggerAddEventUnitOrder(libNEXS_gt_SelendisUnitAttack2, null, AbilityCommand("SelendisWarBeginningForUnitExecute2", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Unit Attack 3
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisUnitAttack3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_psiSpireNexusUnit;
    int lv_unitType;
    int lv_spireLevel;
    int lv_unitAmount;
    int lv_value;

    // Automatic Variable Declarations
    unitgroup auto1EACDEAD_g;
    int auto1EACDEAD_u;
    unit auto1EACDEAD_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_value = 2;
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarHasBegun" + IntToString((lv_value + 1)))), 1);
    lv_psiSpireNexusUnit = libNEXS_gv_selendis_Nexus_Group[lv_value];
    UnitBehaviorAddPlayer(lv_psiSpireNexusUnit, "SelendisWarThisBuildingIsBeginning", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, 1);
    lv_unitType = libNEXS_gf_SelendisUnitAttackNexusSelect(lv_psiSpireNexusUnit);
    if ((UnitHasBehavior2(lv_psiSpireNexusUnit, "SelendisPlatformUpgradeLv2AB") == true)) {
        if ((UnitHasBehavior2(lv_psiSpireNexusUnit, "SelendisPlatformUpgradeLv3AB") == true)) {
            lv_spireLevel = 2;
        }
        else {
            lv_spireLevel = 1;
        }
    }
    else {
        lv_spireLevel = 0;
    }
    lv_unitAmount += UnitBehaviorCount(lv_psiSpireNexusUnit, "SelendisPlatformUnitCreateCaster");
    UnitGroupRemove(libNEXS_gv_selendisGlobalCasterUnitGroup, EventUnit());
    auto1EACDEAD_g = UnitGroup("HornerAirFleetTargeter2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1EACDEAD_u = UnitGroupCount(auto1EACDEAD_g, c_unitCountAll);
    for (;; auto1EACDEAD_u -= 1) {
        auto1EACDEAD_var = UnitGroupUnitFromEnd(auto1EACDEAD_g, auto1EACDEAD_u);
        if (auto1EACDEAD_var == null) { break; }
        UnitRemove(auto1EACDEAD_var);
    }
    libNEXS_gv_selendisAttackEnd = OrderGetTargetPoint(EventUnitOrder());
    if (((lv_unitType == 0) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy11(lv_unitAmount, 2);
    }
    else if (((lv_unitType == 0) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy12(lv_unitAmount, 2);
    }
    else if (((lv_unitType == 1) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy21(lv_unitAmount, 2);
    }
    else if (((lv_unitType == 1) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy22(lv_unitAmount, 2);
    }
    else if (((lv_unitType == 2) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy31(lv_unitAmount, 2);
    }
    else if (((lv_unitType == 2) && (lv_spireLevel == 1))) {
        libNEXS_gf_SelendisUnitDeploy32(lv_unitAmount, 2);
    }
    else if (((lv_unitType == 2) && (lv_spireLevel == 2))) {
        libNEXS_gf_SelendisUnitDeploy33(lv_unitAmount, 2);
    }
    else if (((lv_unitType == 3) && ((lv_spireLevel == 0) || (lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy41(lv_unitAmount, 2);
    }
    else if (((lv_unitType == 4) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy51(lv_unitAmount, 2);
    }
    else if (((lv_unitType == 4) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy52(lv_unitAmount, 2);
    }
    else if (((lv_unitType == 5) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy61(lv_unitAmount, 2);
    }
    else if (((lv_unitType == 5) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy62(lv_unitAmount, 2);
    }
    else if (((lv_unitType == 6) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy71(lv_unitAmount, 2);
    }
    else if (((lv_unitType == 6) && (lv_spireLevel == 1))) {
        libNEXS_gf_SelendisUnitDeploy72(lv_unitAmount, 2);
    }
    else if (((lv_unitType == 6) && (lv_spireLevel == 2))) {
        libNEXS_gf_SelendisUnitDeploy73(lv_unitAmount, 2);
    }
    else if (((lv_unitType == 7) && ((lv_spireLevel == 0) || (lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy81(lv_unitAmount, 2);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisUnitAttack3_Init () {
    libNEXS_gt_SelendisUnitAttack3 = TriggerCreate("libNEXS_gt_SelendisUnitAttack3_Func");
    TriggerEnable(libNEXS_gt_SelendisUnitAttack3, false);
    TriggerAddEventUnitOrder(libNEXS_gt_SelendisUnitAttack3, null, AbilityCommand("SelendisWarBeginningForUnitExecute3", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Unit Attack 4
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisUnitAttack4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_psiSpireNexusUnit;
    int lv_unitType;
    int lv_spireLevel;
    int lv_unitAmount;
    int lv_value;

    // Automatic Variable Declarations
    unitgroup auto9A81CE70_g;
    int auto9A81CE70_u;
    unit auto9A81CE70_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_value = 3;
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarHasBegun" + IntToString((lv_value + 1)))), 1);
    lv_psiSpireNexusUnit = libNEXS_gv_selendis_Nexus_Group[lv_value];
    UnitBehaviorAddPlayer(lv_psiSpireNexusUnit, "SelendisWarThisBuildingIsBeginning", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, 1);
    lv_unitType = libNEXS_gf_SelendisUnitAttackNexusSelect(lv_psiSpireNexusUnit);
    if ((UnitHasBehavior2(lv_psiSpireNexusUnit, "SelendisPlatformUpgradeLv2AB") == true)) {
        if ((UnitHasBehavior2(lv_psiSpireNexusUnit, "SelendisPlatformUpgradeLv3AB") == true)) {
            lv_spireLevel = 2;
        }
        else {
            lv_spireLevel = 1;
        }
    }
    else {
        lv_spireLevel = 0;
    }
    lv_unitAmount += UnitBehaviorCount(lv_psiSpireNexusUnit, "SelendisPlatformUnitCreateCaster");
    UnitGroupRemove(libNEXS_gv_selendisGlobalCasterUnitGroup, EventUnit());
    auto9A81CE70_g = UnitGroup("HornerAirFleetTargeter2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9A81CE70_u = UnitGroupCount(auto9A81CE70_g, c_unitCountAll);
    for (;; auto9A81CE70_u -= 1) {
        auto9A81CE70_var = UnitGroupUnitFromEnd(auto9A81CE70_g, auto9A81CE70_u);
        if (auto9A81CE70_var == null) { break; }
        UnitRemove(auto9A81CE70_var);
    }
    libNEXS_gv_selendisAttackEnd = OrderGetTargetPoint(EventUnitOrder());
    if (((lv_unitType == 0) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy11(lv_unitAmount, 3);
    }
    else if (((lv_unitType == 0) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy12(lv_unitAmount, 3);
    }
    else if (((lv_unitType == 1) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy21(lv_unitAmount, 3);
    }
    else if (((lv_unitType == 1) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy22(lv_unitAmount, 3);
    }
    else if (((lv_unitType == 2) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy31(lv_unitAmount, 3);
    }
    else if (((lv_unitType == 2) && (lv_spireLevel == 1))) {
        libNEXS_gf_SelendisUnitDeploy32(lv_unitAmount, 3);
    }
    else if (((lv_unitType == 2) && (lv_spireLevel == 2))) {
        libNEXS_gf_SelendisUnitDeploy33(lv_unitAmount, 3);
    }
    else if (((lv_unitType == 3) && ((lv_spireLevel == 0) || (lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy41(lv_unitAmount, 3);
    }
    else if (((lv_unitType == 4) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy51(lv_unitAmount, 3);
    }
    else if (((lv_unitType == 4) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy52(lv_unitAmount, 3);
    }
    else if (((lv_unitType == 5) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy61(lv_unitAmount, 3);
    }
    else if (((lv_unitType == 5) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy62(lv_unitAmount, 3);
    }
    else if (((lv_unitType == 6) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy71(lv_unitAmount, 3);
    }
    else if (((lv_unitType == 6) && (lv_spireLevel == 1))) {
        libNEXS_gf_SelendisUnitDeploy72(lv_unitAmount, 3);
    }
    else if (((lv_unitType == 6) && (lv_spireLevel == 2))) {
        libNEXS_gf_SelendisUnitDeploy73(lv_unitAmount, 3);
    }
    else if (((lv_unitType == 7) && ((lv_spireLevel == 0) || (lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy81(lv_unitAmount, 3);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisUnitAttack4_Init () {
    libNEXS_gt_SelendisUnitAttack4 = TriggerCreate("libNEXS_gt_SelendisUnitAttack4_Func");
    TriggerEnable(libNEXS_gt_SelendisUnitAttack4, false);
    TriggerAddEventUnitOrder(libNEXS_gt_SelendisUnitAttack4, null, AbilityCommand("SelendisWarBeginningForUnitExecute4", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Unit Attack 5
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisUnitAttack5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_psiSpireNexusUnit;
    int lv_unitType;
    int lv_spireLevel;
    int lv_unitAmount;
    int lv_value;

    // Automatic Variable Declarations
    unitgroup auto446114E0_g;
    int auto446114E0_u;
    unit auto446114E0_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_value = 4;
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarHasBegun" + IntToString((lv_value + 1)))), 1);
    lv_psiSpireNexusUnit = libNEXS_gv_selendis_Nexus_Group[lv_value];
    UnitBehaviorAddPlayer(lv_psiSpireNexusUnit, "SelendisWarThisBuildingIsBeginning", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, 1);
    lv_unitType = libNEXS_gf_SelendisUnitAttackNexusSelect(lv_psiSpireNexusUnit);
    if ((UnitHasBehavior2(lv_psiSpireNexusUnit, "SelendisPlatformUpgradeLv2AB") == true)) {
        if ((UnitHasBehavior2(lv_psiSpireNexusUnit, "SelendisPlatformUpgradeLv3AB") == true)) {
            lv_spireLevel = 2;
        }
        else {
            lv_spireLevel = 1;
        }
    }
    else {
        lv_spireLevel = 0;
    }
    lv_unitAmount += UnitBehaviorCount(lv_psiSpireNexusUnit, "SelendisPlatformUnitCreateCaster");
    UnitGroupRemove(libNEXS_gv_selendisGlobalCasterUnitGroup, EventUnit());
    auto446114E0_g = UnitGroup("HornerAirFleetTargeter2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto446114E0_u = UnitGroupCount(auto446114E0_g, c_unitCountAll);
    for (;; auto446114E0_u -= 1) {
        auto446114E0_var = UnitGroupUnitFromEnd(auto446114E0_g, auto446114E0_u);
        if (auto446114E0_var == null) { break; }
        UnitRemove(auto446114E0_var);
    }
    libNEXS_gv_selendisAttackEnd = OrderGetTargetPoint(EventUnitOrder());
    if (((lv_unitType == 0) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy11(lv_unitAmount, 4);
    }
    else if (((lv_unitType == 0) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy12(lv_unitAmount, 4);
    }
    else if (((lv_unitType == 1) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy21(lv_unitAmount, 4);
    }
    else if (((lv_unitType == 1) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy22(lv_unitAmount, 4);
    }
    else if (((lv_unitType == 2) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy31(lv_unitAmount, 4);
    }
    else if (((lv_unitType == 2) && (lv_spireLevel == 1))) {
        libNEXS_gf_SelendisUnitDeploy32(lv_unitAmount, 4);
    }
    else if (((lv_unitType == 2) && (lv_spireLevel == 2))) {
        libNEXS_gf_SelendisUnitDeploy33(lv_unitAmount, 4);
    }
    else if (((lv_unitType == 3) && ((lv_spireLevel == 0) || (lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy41(lv_unitAmount, 4);
    }
    else if (((lv_unitType == 4) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy51(lv_unitAmount, 4);
    }
    else if (((lv_unitType == 4) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy52(lv_unitAmount, 4);
    }
    else if (((lv_unitType == 5) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy61(lv_unitAmount, 4);
    }
    else if (((lv_unitType == 5) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy62(lv_unitAmount, 4);
    }
    else if (((lv_unitType == 6) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy71(lv_unitAmount, 4);
    }
    else if (((lv_unitType == 6) && (lv_spireLevel == 1))) {
        libNEXS_gf_SelendisUnitDeploy72(lv_unitAmount, 4);
    }
    else if (((lv_unitType == 6) && (lv_spireLevel == 2))) {
        libNEXS_gf_SelendisUnitDeploy73(lv_unitAmount, 4);
    }
    else if (((lv_unitType == 7) && ((lv_spireLevel == 0) || (lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy81(lv_unitAmount, 4);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisUnitAttack5_Init () {
    libNEXS_gt_SelendisUnitAttack5 = TriggerCreate("libNEXS_gt_SelendisUnitAttack5_Func");
    TriggerEnable(libNEXS_gt_SelendisUnitAttack5, false);
    TriggerAddEventUnitOrder(libNEXS_gt_SelendisUnitAttack5, null, AbilityCommand("SelendisWarBeginningForUnitExecute5", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Unit Attack 6
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisUnitAttack6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_psiSpireNexusUnit;
    int lv_unitType;
    int lv_spireLevel;
    int lv_unitAmount;
    int lv_value;

    // Automatic Variable Declarations
    unitgroup auto393692D0_g;
    int auto393692D0_u;
    unit auto393692D0_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_value = 5;
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarHasBegun" + IntToString((lv_value + 1)))), 1);
    lv_psiSpireNexusUnit = libNEXS_gv_selendis_Nexus_Group[lv_value];
    UnitBehaviorAddPlayer(lv_psiSpireNexusUnit, "SelendisWarThisBuildingIsBeginning", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, 1);
    lv_unitType = libNEXS_gf_SelendisUnitAttackNexusSelect(lv_psiSpireNexusUnit);
    if ((UnitHasBehavior2(lv_psiSpireNexusUnit, "SelendisPlatformUpgradeLv2AB") == true)) {
        if ((UnitHasBehavior2(lv_psiSpireNexusUnit, "SelendisPlatformUpgradeLv3AB") == true)) {
            lv_spireLevel = 2;
        }
        else {
            lv_spireLevel = 1;
        }
    }
    else {
        lv_spireLevel = 0;
    }
    lv_unitAmount += UnitBehaviorCount(lv_psiSpireNexusUnit, "SelendisPlatformUnitCreateCaster");
    UnitGroupRemove(libNEXS_gv_selendisGlobalCasterUnitGroup, EventUnit());
    auto393692D0_g = UnitGroup("HornerAirFleetTargeter2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto393692D0_u = UnitGroupCount(auto393692D0_g, c_unitCountAll);
    for (;; auto393692D0_u -= 1) {
        auto393692D0_var = UnitGroupUnitFromEnd(auto393692D0_g, auto393692D0_u);
        if (auto393692D0_var == null) { break; }
        UnitRemove(auto393692D0_var);
    }
    libNEXS_gv_selendisAttackEnd = OrderGetTargetPoint(EventUnitOrder());
    if (((lv_unitType == 0) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy11(lv_unitAmount, 5);
    }
    else if (((lv_unitType == 0) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy12(lv_unitAmount, 5);
    }
    else if (((lv_unitType == 1) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy21(lv_unitAmount, 5);
    }
    else if (((lv_unitType == 1) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy22(lv_unitAmount, 5);
    }
    else if (((lv_unitType == 2) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy31(lv_unitAmount, 5);
    }
    else if (((lv_unitType == 2) && (lv_spireLevel == 1))) {
        libNEXS_gf_SelendisUnitDeploy32(lv_unitAmount, 5);
    }
    else if (((lv_unitType == 2) && (lv_spireLevel == 2))) {
        libNEXS_gf_SelendisUnitDeploy33(lv_unitAmount, 5);
    }
    else if (((lv_unitType == 3) && ((lv_spireLevel == 0) || (lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy41(lv_unitAmount, 5);
    }
    else if (((lv_unitType == 4) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy51(lv_unitAmount, 5);
    }
    else if (((lv_unitType == 4) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy52(lv_unitAmount, 5);
    }
    else if (((lv_unitType == 5) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy61(lv_unitAmount, 5);
    }
    else if (((lv_unitType == 5) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy62(lv_unitAmount, 5);
    }
    else if (((lv_unitType == 6) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy71(lv_unitAmount, 5);
    }
    else if (((lv_unitType == 6) && (lv_spireLevel == 1))) {
        libNEXS_gf_SelendisUnitDeploy72(lv_unitAmount, 5);
    }
    else if (((lv_unitType == 6) && (lv_spireLevel == 2))) {
        libNEXS_gf_SelendisUnitDeploy73(lv_unitAmount, 5);
    }
    else if (((lv_unitType == 7) && ((lv_spireLevel == 0) || (lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy81(lv_unitAmount, 5);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisUnitAttack6_Init () {
    libNEXS_gt_SelendisUnitAttack6 = TriggerCreate("libNEXS_gt_SelendisUnitAttack6_Func");
    TriggerEnable(libNEXS_gt_SelendisUnitAttack6, false);
    TriggerAddEventUnitOrder(libNEXS_gt_SelendisUnitAttack6, null, AbilityCommand("SelendisWarBeginningForUnitExecute6", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Unit Attack 7
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisUnitAttack7_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_psiSpireNexusUnit;
    int lv_unitType;
    int lv_spireLevel;
    int lv_unitAmount;
    int lv_value;

    // Automatic Variable Declarations
    unitgroup autoF15663CD_g;
    int autoF15663CD_u;
    unit autoF15663CD_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_value = 6;
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarHasBegun" + IntToString((lv_value + 1)))), 1);
    lv_psiSpireNexusUnit = libNEXS_gv_selendis_Nexus_Group[lv_value];
    UnitBehaviorAddPlayer(lv_psiSpireNexusUnit, "SelendisWarThisBuildingIsBeginning", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, 1);
    lv_unitType = libNEXS_gf_SelendisUnitAttackNexusSelect(lv_psiSpireNexusUnit);
    if ((UnitHasBehavior2(lv_psiSpireNexusUnit, "SelendisPlatformUpgradeLv2AB") == true)) {
        if ((UnitHasBehavior2(lv_psiSpireNexusUnit, "SelendisPlatformUpgradeLv3AB") == true)) {
            lv_spireLevel = 2;
        }
        else {
            lv_spireLevel = 1;
        }
    }
    else {
        lv_spireLevel = 0;
    }
    lv_unitAmount += UnitBehaviorCount(lv_psiSpireNexusUnit, "SelendisPlatformUnitCreateCaster");
    UnitGroupRemove(libNEXS_gv_selendisGlobalCasterUnitGroup, EventUnit());
    autoF15663CD_g = UnitGroup("HornerAirFleetTargeter2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF15663CD_u = UnitGroupCount(autoF15663CD_g, c_unitCountAll);
    for (;; autoF15663CD_u -= 1) {
        autoF15663CD_var = UnitGroupUnitFromEnd(autoF15663CD_g, autoF15663CD_u);
        if (autoF15663CD_var == null) { break; }
        UnitRemove(autoF15663CD_var);
    }
    libNEXS_gv_selendisAttackEnd = OrderGetTargetPoint(EventUnitOrder());
    if (((lv_unitType == 0) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy11(lv_unitAmount, 6);
    }
    else if (((lv_unitType == 0) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy12(lv_unitAmount, 6);
    }
    else if (((lv_unitType == 1) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy21(lv_unitAmount, 6);
    }
    else if (((lv_unitType == 1) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy22(lv_unitAmount, 6);
    }
    else if (((lv_unitType == 2) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy31(lv_unitAmount, 6);
    }
    else if (((lv_unitType == 2) && (lv_spireLevel == 1))) {
        libNEXS_gf_SelendisUnitDeploy32(lv_unitAmount, 6);
    }
    else if (((lv_unitType == 2) && (lv_spireLevel == 2))) {
        libNEXS_gf_SelendisUnitDeploy33(lv_unitAmount, 6);
    }
    else if (((lv_unitType == 3) && ((lv_spireLevel == 0) || (lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy41(lv_unitAmount, 6);
    }
    else if (((lv_unitType == 4) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy51(lv_unitAmount, 6);
    }
    else if (((lv_unitType == 4) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy52(lv_unitAmount, 6);
    }
    else if (((lv_unitType == 5) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy61(lv_unitAmount, 6);
    }
    else if (((lv_unitType == 5) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy62(lv_unitAmount, 6);
    }
    else if (((lv_unitType == 6) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy71(lv_unitAmount, 6);
    }
    else if (((lv_unitType == 6) && (lv_spireLevel == 1))) {
        libNEXS_gf_SelendisUnitDeploy72(lv_unitAmount, 6);
    }
    else if (((lv_unitType == 6) && (lv_spireLevel == 2))) {
        libNEXS_gf_SelendisUnitDeploy73(lv_unitAmount, 6);
    }
    else if (((lv_unitType == 7) && ((lv_spireLevel == 0) || (lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy81(lv_unitAmount, 6);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisUnitAttack7_Init () {
    libNEXS_gt_SelendisUnitAttack7 = TriggerCreate("libNEXS_gt_SelendisUnitAttack7_Func");
    TriggerEnable(libNEXS_gt_SelendisUnitAttack7, false);
    TriggerAddEventUnitOrder(libNEXS_gt_SelendisUnitAttack7, null, AbilityCommand("SelendisWarBeginningForUnitExecute7", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Unit Attack 8
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisUnitAttack8_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_psiSpireNexusUnit;
    int lv_unitType;
    int lv_spireLevel;
    int lv_unitAmount;
    int lv_value;

    // Automatic Variable Declarations
    unitgroup auto52AACEDB_g;
    int auto52AACEDB_u;
    unit auto52AACEDB_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_value = 7;
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarHasBegun" + IntToString((lv_value + 1)))), 1);
    lv_psiSpireNexusUnit = libNEXS_gv_selendis_Nexus_Group[lv_value];
    UnitBehaviorAddPlayer(lv_psiSpireNexusUnit, "SelendisWarThisBuildingIsBeginning", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, 1);
    lv_unitType = libNEXS_gf_SelendisUnitAttackNexusSelect(lv_psiSpireNexusUnit);
    if ((UnitHasBehavior2(lv_psiSpireNexusUnit, "SelendisPlatformUpgradeLv2AB") == true)) {
        if ((UnitHasBehavior2(lv_psiSpireNexusUnit, "SelendisPlatformUpgradeLv3AB") == true)) {
            lv_spireLevel = 2;
        }
        else {
            lv_spireLevel = 1;
        }
    }
    else {
        lv_spireLevel = 0;
    }
    lv_unitAmount += UnitBehaviorCount(lv_psiSpireNexusUnit, "SelendisPlatformUnitCreateCaster");
    UnitGroupRemove(libNEXS_gv_selendisGlobalCasterUnitGroup, EventUnit());
    auto52AACEDB_g = UnitGroup("HornerAirFleetTargeter2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto52AACEDB_u = UnitGroupCount(auto52AACEDB_g, c_unitCountAll);
    for (;; auto52AACEDB_u -= 1) {
        auto52AACEDB_var = UnitGroupUnitFromEnd(auto52AACEDB_g, auto52AACEDB_u);
        if (auto52AACEDB_var == null) { break; }
        UnitRemove(auto52AACEDB_var);
    }
    libNEXS_gv_selendisAttackEnd = OrderGetTargetPoint(EventUnitOrder());
    if (((lv_unitType == 0) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy11(lv_unitAmount, 7);
    }
    else if (((lv_unitType == 0) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy12(lv_unitAmount, 7);
    }
    else if (((lv_unitType == 1) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy21(lv_unitAmount, 7);
    }
    else if (((lv_unitType == 1) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy22(lv_unitAmount, 7);
    }
    else if (((lv_unitType == 2) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy31(lv_unitAmount, 7);
    }
    else if (((lv_unitType == 2) && (lv_spireLevel == 1))) {
        libNEXS_gf_SelendisUnitDeploy32(lv_unitAmount, 7);
    }
    else if (((lv_unitType == 2) && (lv_spireLevel == 2))) {
        libNEXS_gf_SelendisUnitDeploy33(lv_unitAmount, 7);
    }
    else if (((lv_unitType == 3) && ((lv_spireLevel == 0) || (lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy41(lv_unitAmount, 7);
    }
    else if (((lv_unitType == 4) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy51(lv_unitAmount, 7);
    }
    else if (((lv_unitType == 4) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy52(lv_unitAmount, 7);
    }
    else if (((lv_unitType == 5) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy61(lv_unitAmount, 7);
    }
    else if (((lv_unitType == 5) && ((lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy62(lv_unitAmount, 7);
    }
    else if (((lv_unitType == 6) && (lv_spireLevel == 0))) {
        libNEXS_gf_SelendisUnitDeploy71(lv_unitAmount, 7);
    }
    else if (((lv_unitType == 6) && (lv_spireLevel == 1))) {
        libNEXS_gf_SelendisUnitDeploy72(lv_unitAmount, 7);
    }
    else if (((lv_unitType == 6) && (lv_spireLevel == 2))) {
        libNEXS_gf_SelendisUnitDeploy73(lv_unitAmount, 7);
    }
    else if (((lv_unitType == 7) && ((lv_spireLevel == 0) || (lv_spireLevel == 1) || (lv_spireLevel == 2)))) {
        libNEXS_gf_SelendisUnitDeploy81(lv_unitAmount, 7);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisUnitAttack8_Init () {
    libNEXS_gt_SelendisUnitAttack8 = TriggerCreate("libNEXS_gt_SelendisUnitAttack8_Func");
    TriggerEnable(libNEXS_gt_SelendisUnitAttack8, false);
    TriggerAddEventUnitOrder(libNEXS_gt_SelendisUnitAttack8, null, AbilityCommand("SelendisWarBeginningForUnitExecute8", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis War Beginning
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisWarBeginning_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_value;
    int lv_platformCountMax;

    // Automatic Variable Declarations
    int autoA294DF71_ae;
    const int autoA294DF71_ai = 1;
    int autoF7223026_ae;
    const int autoF7223026_ai = 1;

    // Variable Initialization
    lv_value = 1;
    lv_platformCountMax = 8;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehavior() == "SelendisHeroWarpIn")) {
        libNEXS_gv_selendisWarGround = 1;
        autoF7223026_ae = (lv_platformCountMax - 1);
        lv_value = 0;
        for ( ; ( (autoF7223026_ai >= 0 && lv_value <= autoF7223026_ae) || (autoF7223026_ai < 0 && lv_value >= autoF7223026_ae) ) ; lv_value += autoF7223026_ai ) {
            if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisNexusChoice") == true)) {
                if (((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisNexusChoiceSeriesAdept") == true) || (UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisNexusChoiceSeriesHighTemplar") == true) || (UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisNexusChoiceSeriesArchon") == true) || (UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisNexusChoiceSeriesColossus") == true))) {
                    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarBeginning" + IntToString((lv_value + 1)))), 1);
                }

            }

        }
    }
    else {
        libNEXS_gv_selendisWarAir = 1;
        autoA294DF71_ae = (lv_platformCountMax - 1);
        lv_value = 0;
        for ( ; ( (autoA294DF71_ai >= 0 && lv_value <= autoA294DF71_ae) || (autoA294DF71_ai < 0 && lv_value >= autoA294DF71_ae) ) ; lv_value += autoA294DF71_ai ) {
            if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisNexusChoice") == true)) {
                if (((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisNexusChoiceSeriesPhoenix") == true) || (UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisNexusChoiceSeriesOracle") == true) || (UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisNexusChoiceSeriesVoidRay") == true) || (UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_value], "SelendisNexusChoiceSeriesCarrier") == true))) {
                    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, (("SelendisWarBeginning" + IntToString((lv_value + 1)))), 1);
                }

            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisWarBeginning_Init () {
    libNEXS_gt_SelendisWarBeginning = TriggerCreate("libNEXS_gt_SelendisWarBeginning_Func");
    TriggerEnable(libNEXS_gt_SelendisWarBeginning, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_SelendisWarBeginning, null, "SelendisHeroWarpIn", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_SelendisWarBeginning, null, "SelendisMothershipHeroWarpIn", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Unit Attack Command
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisUnitAttackCommand_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), libNEXS_gv_selendisAttackEnd), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisUnitAttackCommand_Init () {
    libNEXS_gt_SelendisUnitAttackCommand = TriggerCreate("libNEXS_gt_SelendisUnitAttackCommand_Func");
    TriggerEnable(libNEXS_gt_SelendisUnitAttackCommand, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_SelendisUnitAttackCommand, null, "SelendisUnitHasWarpIn", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Unit Check
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisUnitCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(libNEXS_gv_selendisUnitGroup[0], EventUnit()) == true)) {
        UnitGroupRemove(libNEXS_gv_selendisUnitGroup[0], EventUnit());
    }
    else if ((UnitGroupHasUnit(libNEXS_gv_selendisUnitGroup[1], EventUnit()) == true)) {
        UnitGroupRemove(libNEXS_gv_selendisUnitGroup[1], EventUnit());
    }
    else if ((UnitGroupHasUnit(libNEXS_gv_selendisUnitGroup[2], EventUnit()) == true)) {
        UnitGroupRemove(libNEXS_gv_selendisUnitGroup[2], EventUnit());
    }
    else if ((UnitGroupHasUnit(libNEXS_gv_selendisUnitGroup[3], EventUnit()) == true)) {
        UnitGroupRemove(libNEXS_gv_selendisUnitGroup[3], EventUnit());
    }
    else if ((UnitGroupHasUnit(libNEXS_gv_selendisUnitGroup[4], EventUnit()) == true)) {
        UnitGroupRemove(libNEXS_gv_selendisUnitGroup[4], EventUnit());
    }
    else if ((UnitGroupHasUnit(libNEXS_gv_selendisUnitGroup[5], EventUnit()) == true)) {
        UnitGroupRemove(libNEXS_gv_selendisUnitGroup[5], EventUnit());
    }
    else if ((UnitGroupHasUnit(libNEXS_gv_selendisUnitGroup[6], EventUnit()) == true)) {
        UnitGroupRemove(libNEXS_gv_selendisUnitGroup[6], EventUnit());
    }
    else if ((UnitGroupHasUnit(libNEXS_gv_selendisUnitGroup[7], EventUnit()) == true)) {
        UnitGroupRemove(libNEXS_gv_selendisUnitGroup[7], EventUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisUnitCheck_Init () {
    libNEXS_gt_SelendisUnitCheck = TriggerCreate("libNEXS_gt_SelendisUnitCheck_Func");
    TriggerEnable(libNEXS_gt_SelendisUnitCheck, false);
    TriggerAddEventUnitDied(libNEXS_gt_SelendisUnitCheck, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Selendis Recall
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SelendisRecall_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_value;
    int lv_a;
    int lv_platformCountMax;

    // Automatic Variable Declarations
    unitgroup auto03258F3C_g;
    int auto03258F3C_u;
    unit auto03258F3C_var;
    int auto952EF31D_ae;
    const int auto952EF31D_ai = 1;
    int auto3B347567_ae;
    const int auto3B347567_ai = 1;
    int auto749725DC_ae;
    const int auto749725DC_ai = 1;
    int auto27195084_ae;
    const int auto27195084_ai = 1;
    int auto699F51CB_ae;
    const int auto699F51CB_ai = 1;
    int auto8EE1EEC8_ae;
    const int auto8EE1EEC8_ai = 1;
    int autoDFCB172E_ae;
    const int autoDFCB172E_ai = 1;
    int auto5DA34896_ae;
    const int auto5DA34896_ai = 1;
    int auto8182A2DC_ae;
    const int auto8182A2DC_ai = 1;

    // Variable Initialization
    lv_value = 1;
    lv_a = 1;
    lv_platformCountMax = 8;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libNEXS_gv_selendisHero) == "SelendisMothershipHero")) {
        UnitBehaviorAddPlayer(libNEXS_gv_selendisHero, "SelendisMothershipHeroWarpOut", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, 1);
    }
    else {
        UnitBehaviorAddPlayer(libNEXS_gv_selendisHero, "SelendisHeroWarpOut", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, 1);
    }
    UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_74AF42C8"));
    libNEXS_gv_selendisHero = null;
    if ((libNEXS_gv_selendisHeroPowerSource != null)) {
        UnitRemove(libNEXS_gv_selendisHeroPowerSource);
        libNEXS_gv_selendisHeroPowerSource = null;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisHeroWarp", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisMJGround", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisMJAir", 0);
    auto03258F3C_g = UnitGroup("SelendisNexus", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto03258F3C_u = UnitGroupCount(auto03258F3C_g, c_unitCountAll);
    for (;; auto03258F3C_u -= 1) {
        auto03258F3C_var = UnitGroupUnitFromEnd(auto03258F3C_g, auto03258F3C_u);
        if (auto03258F3C_var == null) { break; }
        UnitBehaviorRemove(auto03258F3C_var, "SelendisWarThisBuildingIsBeginning", 1);
        UnitBehaviorAddPlayer(auto03258F3C_var, "SOAAbilityDisable2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, 1);
    }
    libNEXS_gf_SelendisRecall();
    libNEXS_gv_selendisWarGround = 0;
    libNEXS_gv_selendisWarAir = 0;
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisWarHasBegun1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisWarHasBegun2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisWarHasBegun3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisWarHasBegun4", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisWarHasBegun5", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisWarHasBegun6", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisWarHasBegun7", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisWarHasBegun8", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisWarBeginning1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisWarBeginning2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisWarBeginning3", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisWarBeginning4", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisWarBeginning5", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisWarBeginning6", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisWarBeginning7", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID14, "SelendisWarBeginning8", 0);
    auto952EF31D_ae = (lv_platformCountMax - 1);
    lv_a = 0;
    for ( ; ( (auto952EF31D_ai >= 0 && lv_a <= auto952EF31D_ae) || (auto952EF31D_ai < 0 && lv_a >= auto952EF31D_ae) ) ; lv_a += auto952EF31D_ai ) {
        if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_a], "SelendisNexusChoice") == true)) {
            if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_a], "SelendisNexusChoiceSeriesAdept") == true)) {
                auto3B347567_ae = (lv_platformCountMax - 1);
                lv_value = 0;
                for ( ; ( (auto3B347567_ai >= 0 && lv_value <= auto3B347567_ae) || (auto3B347567_ai < 0 && lv_value >= auto3B347567_ae) ) ; lv_value += auto3B347567_ai ) {
                    if ((UnitGetPosition(libNEXS_gv_selendis_Nexus_Group[lv_a]) == libNEXS_gv_selendis_AdeptPoint[lv_value])) {
                        libNEXS_gf_Selendis_Platform_Adept2(UnitBehaviorCount(libNEXS_gv_selendis_Nexus_Group[lv_a], "SelendisPlatformUnitCreateCaster"), "SelendisPlatformImpact_Adept", lv_value);
                        break;
                    }

                }
            }
            else if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_a], "SelendisNexusChoiceSeriesHighTemplar") == true)) {
                auto749725DC_ae = (lv_platformCountMax - 1);
                lv_value = 0;
                for ( ; ( (auto749725DC_ai >= 0 && lv_value <= auto749725DC_ae) || (auto749725DC_ai < 0 && lv_value >= auto749725DC_ae) ) ; lv_value += auto749725DC_ai ) {
                    if ((UnitGetPosition(libNEXS_gv_selendis_Nexus_Group[lv_a]) == libNEXS_gv_selendis_AdeptPoint2[lv_value])) {
                        libNEXS_gf_Selendis_Platform_Adept3(UnitBehaviorCount(libNEXS_gv_selendis_Nexus_Group[lv_a], "SelendisPlatformUnitCreateCaster"), "SelendisPlatformImpact_HighTemplar", lv_value);
                        break;
                    }

                }
            }
            else if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_a], "SelendisNexusChoiceSeriesArchon") == true)) {
                auto27195084_ae = (lv_platformCountMax - 1);
                lv_value = 0;
                for ( ; ( (auto27195084_ai >= 0 && lv_value <= auto27195084_ae) || (auto27195084_ai < 0 && lv_value >= auto27195084_ae) ) ; lv_value += auto27195084_ai ) {
                    if ((UnitGetPosition(libNEXS_gv_selendis_Nexus_Group[lv_a]) == libNEXS_gv_selendis_AdeptPoint3[lv_value])) {
                        libNEXS_gf_Selendis_Platform_Adept4(UnitBehaviorCount(libNEXS_gv_selendis_Nexus_Group[lv_a], "SelendisPlatformUnitCreateCaster"), "SelendisPlatformImpact_Archon", lv_value);
                        break;
                    }

                }
            }
            else if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_a], "SelendisNexusChoiceSeriesColossus") == true)) {
                auto699F51CB_ae = (lv_platformCountMax - 1);
                lv_value = 0;
                for ( ; ( (auto699F51CB_ai >= 0 && lv_value <= auto699F51CB_ae) || (auto699F51CB_ai < 0 && lv_value >= auto699F51CB_ae) ) ; lv_value += auto699F51CB_ai ) {
                    if ((UnitGetPosition(libNEXS_gv_selendis_Nexus_Group[lv_a]) == libNEXS_gv_selendis_AdeptPoint4[lv_value])) {
                        libNEXS_gf_Selendis_Platform_Adept5(UnitBehaviorCount(libNEXS_gv_selendis_Nexus_Group[lv_a], "SelendisPlatformUnitCreateCaster"), "SelendisPlatformImpact_Colossus", lv_value);
                        break;
                    }

                }
            }
            else if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_a], "SelendisNexusChoiceSeriesPhoenix") == true)) {
                auto8EE1EEC8_ae = (lv_platformCountMax - 1);
                lv_value = 0;
                for ( ; ( (auto8EE1EEC8_ai >= 0 && lv_value <= auto8EE1EEC8_ae) || (auto8EE1EEC8_ai < 0 && lv_value >= auto8EE1EEC8_ae) ) ; lv_value += auto8EE1EEC8_ai ) {
                    if ((UnitGetPosition(libNEXS_gv_selendis_Nexus_Group[lv_a]) == libNEXS_gv_selendis_AdeptPoint5[lv_value])) {
                        libNEXS_gf_Selendis_Platform_Adept6(UnitBehaviorCount(libNEXS_gv_selendis_Nexus_Group[lv_a], "SelendisPlatformUnitCreateCaster"), "SelendisPlatformImpact_Phoenix", lv_value);
                        break;
                    }

                }
            }
            else if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_a], "SelendisNexusChoiceSeriesOracle") == true)) {
                autoDFCB172E_ae = (lv_platformCountMax - 1);
                lv_value = 0;
                for ( ; ( (autoDFCB172E_ai >= 0 && lv_value <= autoDFCB172E_ae) || (autoDFCB172E_ai < 0 && lv_value >= autoDFCB172E_ae) ) ; lv_value += autoDFCB172E_ai ) {
                    if ((UnitGetPosition(libNEXS_gv_selendis_Nexus_Group[lv_a]) == libNEXS_gv_selendis_AdeptPoint6[lv_value])) {
                        libNEXS_gf_Selendis_Platform_Adept7(UnitBehaviorCount(libNEXS_gv_selendis_Nexus_Group[lv_a], "SelendisPlatformUnitCreateCaster"), "SelendisPlatformImpact_Oracle", lv_value);
                        break;
                    }

                }
            }
            else if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_a], "SelendisNexusChoiceSeriesVoidRay") == true)) {
                auto5DA34896_ae = (lv_platformCountMax - 1);
                lv_value = 0;
                for ( ; ( (auto5DA34896_ai >= 0 && lv_value <= auto5DA34896_ae) || (auto5DA34896_ai < 0 && lv_value >= auto5DA34896_ae) ) ; lv_value += auto5DA34896_ai ) {
                    if ((UnitGetPosition(libNEXS_gv_selendis_Nexus_Group[lv_a]) == libNEXS_gv_selendis_AdeptPoint7[lv_value])) {
                        libNEXS_gf_Selendis_Platform_Adept8(UnitBehaviorCount(libNEXS_gv_selendis_Nexus_Group[lv_a], "SelendisPlatformUnitCreateCaster"), "SelendisPlatformImpact_VoidRay", lv_value);
                        break;
                    }

                }
            }
            else if ((UnitHasBehavior2(libNEXS_gv_selendis_Nexus_Group[lv_a], "SelendisNexusChoiceSeriesCarrier") == true)) {
                auto8182A2DC_ae = (lv_platformCountMax - 1);
                lv_value = 0;
                for ( ; ( (auto8182A2DC_ai >= 0 && lv_value <= auto8182A2DC_ae) || (auto8182A2DC_ai < 0 && lv_value >= auto8182A2DC_ae) ) ; lv_value += auto8182A2DC_ai ) {
                    if ((UnitGetPosition(libNEXS_gv_selendis_Nexus_Group[lv_a]) == libNEXS_gv_selendis_AdeptPoint8[lv_value])) {
                        libNEXS_gf_Selendis_Platform_Adept9(UnitBehaviorCount(libNEXS_gv_selendis_Nexus_Group[lv_a], "SelendisPlatformUnitCreateCaster"), "SelendisPlatformImpact_Carrier", lv_value);
                        break;
                    }

                }
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SelendisRecall_Init () {
    libNEXS_gt_SelendisRecall = TriggerCreate("libNEXS_gt_SelendisRecall_Func");
    TriggerEnable(libNEXS_gt_SelendisRecall, false);
    TriggerAddEventUnitOrder(libNEXS_gt_SelendisRecall, null, AbilityCommand("SelendisArmyBack", 0));
    TriggerAddEventUnitOrder(libNEXS_gt_SelendisRecall, null, AbilityCommand("SelendisArmyBack2", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_Reigel
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_DUT_Reigel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup autoFA552A85_g;
    int autoFA552A85_var;

    // Variable Initialization
    lv_players = libCOMI_gf_PlayersOfCommander("NexusRaynor");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorHERCUpgrade", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorPickup", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorPickup222", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorPickup222222", 1);
    libNEXS_gv_weaponPickFullAd[0] = 1;
    libNEXS_gv_weaponPickFullAd[3] = 1;
    libNEXS_gv_weaponPickFullAd[6] = 1;
    TriggerEnable(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96, true);
    TriggerEnable(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96E588A4E696AD, true);
    TriggerEnable(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E587BBE69D80E68E89E890BD, true);
    TriggerEnable(libNEXS_gt_E5BCB9E4BB93E69C80E5A4A7E8AEA1E695B0E5A29EE58AA0, true);
    TriggerEnable(libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8006, true);
    TriggerEnable(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68E89E890BDE6A682E78E87E6B885E999A4, true);
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE4BFA1E6A087E5A48DE6B4BB, true);
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE4BCA0E98081E8A385E5A487, true);
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE38081E587AFE7919EE79498E6ADBBE4BAA1E4B88EE8A1A5E7BB99E5BA93E691A7E6AF81, true);
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE5889DE5A78BE6BC94E7AE97E4BD93E58D87E7BAA7, true);
    TriggerEnable(libNEXS_gt_E587AFE7919EE79498E5A48DE6B4BB, true);
    TriggerEnable(libNEXS_gt_E587AFE7919EE79498E59FBAE59CB0E998B2E5BEA1, true);
    TriggerEnable(libNEXS_gt_E5BCB9E88DAFE8A1A5E7BB99E5BA93E8BF9BE585A5E59CB0E59BBE, true);
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B20, true);
    TriggerEnable(libNEXS_gt_SuperIRONE992A2E99381E993A0E794B2E59B9EE5A48DE883BDE9878F, true);
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B19, true);
    TriggerEnable(libNEXS_gt_CGunE7BB88E69C89E4B880E6ADBBE78886E782B8, true);
    TriggerEnable(libNEXS_gt_CGunE7BB88E69C89E4B880E6ADBBE5BCB9E88DAFE8A385E5A1AB, true);
    TriggerEnable(libNEXS_gt_E587AFE69292E8A18CE6989FE8A681E5A19EE59DA0E890BD, true);
    TriggerEnable(libNEXS_gt_E6898BE99BB7E4BA8CE6ACA1E5BCB9E5B084, true);
    TriggerEnable(libNEXS_gt_E6898BE99BB7E4BD8DE7BDAEE7A1AEE8AEA4, true);
    TriggerEnable(libNEXS_gt_E5B084E587BBE58AA9E6898BE5A1ABE8A385, true);
    TriggerEnable(libNEXS_gt_E789B9E6AE8AE69CBAE794B2E5A1ABE8A385, true);
    TriggerEnable(libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E5A4A7E5928CE782AEE69AB4E587BB3, true);
    TriggerEnable(libNEXS_gt_E681B6E9AD94E78AACE781ABE784B0E5BCB9E58F8DE5BCB9, true);
    TriggerEnable(libNEXS_gt_E5889BE5BBBAE8BF90E8BE93E888B9E59B9EE5AEB6, true);
    TriggerEnable(libNEXS_gt_E8A2ABE6849FE69F93E79A84E6B3B0E587AFE696AFE5889BE5BBBA, true);
    TriggerEnable(libNEXS_gt_E6B8B8E9AA91E585B5E68EA7E588B6E69D83E7A7BBE4BAA4, true);
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE79A84E9A38EE69AB4E88BB1E99B84E5BDA9E89B8B, true);
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE8BF9BE585A5E59CB0E5A0A1, true);
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE7A6BBE5BC80E59CB0E5A0A1, true);
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE8A385E794B2Debug, true);
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE68EA7E588B6Debug, true);
    TriggerEnable(libNEXS_gt_E99B87E4BDA3E585B5E58585E883BDE8BF94E8BF98, true);
    autoFA552A85_g = lv_players;
    autoFA552A85_var = -1;
    while (true) {
        autoFA552A85_var = PlayerGroupNextPlayer(autoFA552A85_g, autoFA552A85_var);
        if (autoFA552A85_var < 0) { break; }
        libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11 = autoFA552A85_var;
    }
    if ((PlayerGroupCount(libCOMI_gf_PlayersOfCommanderInaTeam("NexusRaynor", 1)) > 0) && (PlayerGroupCount(libCOMI_gf_PlayersOfCommanderInaTeam("NexusZhakul", 1)) > 0)) {
        Wait(8.0, c_timeGame);
        SoundPlayForPlayer(SoundLink("acAttackWave_Kerrigan_1282222222332", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        Wait(3.6, c_timeGame);
        SoundPlayForPlayer(SoundLink("acAttackWave_Kerrigan_128222222233", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        Wait(5.5, c_timeGame);
        SoundPlayForPlayer(SoundLink("acAttackWave_Kerrigan_12822222223", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_DUT_Reigel_Init () {
    libNEXS_gt_DUT_Reigel = TriggerCreate("libNEXS_gt_DUT_Reigel_Func");
    TriggerAddEventGeneric(libNEXS_gt_DUT_Reigel, libCOMI_gv_mISSIONINITIALIZED);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????? - ???????????? 2
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5BCB9E88DAFE8A1A5E7BB99E5BA93E8BF9BE585A5E59CB0E59BBEE8BF85E69EAAE8BF9EE587BB2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8933BF57_g;
    int auto8933BF57_u;
    unit auto8933BF57_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libNEXS_gv_raynorArmory, EventUnit());
    auto8933BF57_g = libNEXS_gv_raynorArmory;
    auto8933BF57_u = UnitGroupCount(auto8933BF57_g, c_unitCountAll);
    for (;; auto8933BF57_u -= 1) {
        auto8933BF57_var = UnitGroupUnitFromEnd(auto8933BF57_g, auto8933BF57_u);
        if (auto8933BF57_var == null) { break; }
        if ((libNEXS_gv_raynorArmoryBuildTimes == 0)) {
            UnitMagazineArm(auto8933BF57_var, AbilityCommand("RaynorSHOPPING", 0), 1);
            UnitMagazineArm(auto8933BF57_var, AbilityCommand("RaynorSHOPPING222", 0), 1);
            UnitMagazineArm(auto8933BF57_var, AbilityCommand("RaynorSHOPPING2223", 0), 1);
            libNEXS_gv_raynorArmoryBuildTimes = 1;
        }

        if ((libNEXS_gv_ryMainWeapon == 1)) {
            UnitBehaviorAddPlayer(auto8933BF57_var, "RaynorWeaponAdd22223", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryMainWeapon == 2)) {
            UnitBehaviorAddPlayer(auto8933BF57_var, "RaynorWeaponAdd32", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryMainWeapon == 3)) {
            UnitBehaviorAddPlayer(auto8933BF57_var, "RaynorWeaponAdd3", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_rySubWeapon == 1)) {
            UnitBehaviorAddPlayer(auto8933BF57_var, "RaynorWeaponAdd2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_rySubWeapon == 2)) {
            UnitBehaviorAddPlayer(auto8933BF57_var, "RaynorWeaponAdd222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_rySubWeapon == 3)) {
            UnitBehaviorAddPlayer(auto8933BF57_var, "RaynorWeaponAdd22", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryAuxiliaryEquipment == 1)) {
            UnitBehaviorAddPlayer(auto8933BF57_var, "RaynorWeaponAdd2222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryAuxiliaryEquipment == 2)) {
            UnitBehaviorAddPlayer(auto8933BF57_var, "RaynorWeaponAdd22222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryAuxiliaryEquipment == 3)) {
            UnitBehaviorAddPlayer(auto8933BF57_var, "RaynorWeaponAdd222222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryArmoredCore == 1)) {
            UnitBehaviorAddPlayer(auto8933BF57_var, "RaynorWeaponAdd22222223", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryArmoredCore == 2)) {
            UnitBehaviorAddPlayer(auto8933BF57_var, "RaynorWeaponAdd22222222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryArmoredCore == 3)) {
            UnitBehaviorAddPlayer(auto8933BF57_var, "RaynorWeaponAdd2222222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5BCB9E88DAFE8A1A5E7BB99E5BA93E8BF9BE585A5E59CB0E59BBEE8BF85E69EAAE8BF9EE587BB2_Init () {
    libNEXS_gt_E5BCB9E88DAFE8A1A5E7BB99E5BA93E8BF9BE585A5E59CB0E59BBEE8BF85E69EAAE8BF9EE587BB2 = TriggerCreate("libNEXS_gt_E5BCB9E88DAFE8A1A5E7BB99E5BA93E8BF9BE585A5E59CB0E59BBEE8BF85E69EAAE8BF9EE587BB2_Func");
    TriggerEnable(libNEXS_gt_E5BCB9E88DAFE8A1A5E7BB99E5BA93E8BF9BE585A5E59CB0E59BBEE8BF85E69EAAE8BF9EE587BB2, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E5BCB9E88DAFE8A1A5E7BB99E5BA93E8BF9BE585A5E59CB0E59BBEE8BF85E69EAAE8BF9EE587BB2, null, "UnknownBehavior82", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????1??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99BB7E8AFBAE5A881E69C9B1E5BC80E590AF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_650CBD55"));
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "UnknownUpgrade298", 1);
    TriggerEnable(libNEXS_gt_E5BCB9E88DAFE8A1A5E7BB99E5BA93E8BF9BE585A5E59CB0E59BBEE8BF85E69EAAE8BF9EE587BB2, true);
    TriggerEnable(libNEXS_gt_E5BCB9E88DAFE8A1A5E7BB99E5BA93E8BF9BE585A5E59CB0E59BBE, false);
    TriggerEnable(libNEXS_gt_E5BCB9E4BB93E69C80E5A4A7E8AEA1E695B0E5A29EE58AA0, false);
    TriggerEnable(libNEXS_gt_E99B87E4BDA3E585B5E7BB99E4BA88E5BCB9E88DAF2, true);
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE5A881E69C9B2E5BC80E590AF, false);
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE5A881E69C9B3E5BC80E590AF, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99BB7E8AFBAE5A881E69C9B1E5BC80E590AF_Init () {
    libNEXS_gt_E99BB7E8AFBAE5A881E69C9B1E5BC80E590AF = TriggerCreate("libNEXS_gt_E99BB7E8AFBAE5A881E69C9B1E5BC80E590AF_Func");
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE5A881E69C9B1E5BC80E590AF, false);
    TriggerAddEventChatMessage(libNEXS_gt_E99BB7E8AFBAE5A881E69C9B1E5BC80E590AF, c_playerAny, "Raynor1", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????? 2
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99B87E4BDA3E585B5E7BB99E4BA88E5BCB9E88DAF2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto53F4C809_g;
    int auto53F4C809_u;
    unit auto53F4C809_var;

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto53F4C809_g = UnitGroup("ReigelAmmunitionDepot", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto53F4C809_u = UnitGroupCount(auto53F4C809_g, c_unitCountAll);
    for (;; auto53F4C809_u -= 1) {
        auto53F4C809_var = UnitGroupUnitFromEnd(auto53F4C809_g, auto53F4C809_u);
        if (auto53F4C809_var == null) { break; }
        if (((UnitMagazineCount(auto53F4C809_var, "RaynorSHOPPING") == 0) && ((EventUnitAbility() == AbilityCommand("SummonMercenaries", 0)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 3)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 1)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 8)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 2)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 4)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 6)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 5)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 7))))) {
            UnitMagazineArm(auto53F4C809_var, AbilityCommand("RaynorSHOPPING", 0), 1);
        }

        if (((UnitMagazineCount(auto53F4C809_var, "RaynorSHOPPING2") == 0) && ((EventUnitAbility() == AbilityCommand("SummonMercenaries", 0)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 3)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 1)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 8)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 2)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 4)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 6)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 5)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 7))))) {
            UnitMagazineArm(auto53F4C809_var, AbilityCommand("RaynorSHOPPING2", 0), 1);
        }

        if (((UnitMagazineCount(auto53F4C809_var, "RaynorSHOPPING2222") == 0) && ((EventUnitAbility() == AbilityCommand("SummonMercenaries", 0)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 3)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 1)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 8)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 2)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 4)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 6)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 5)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 7))))) {
            UnitMagazineArm(auto53F4C809_var, AbilityCommand("RaynorSHOPPING2222", 0), 1);
        }

        if (((UnitMagazineCount(auto53F4C809_var, "RaynorSHOPPING22232") == 0) && ((EventUnitAbility() == AbilityCommand("SummonMercenaries", 0)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 3)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 1)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 8)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 2)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 4)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 6)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 5)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 7))))) {
            UnitMagazineArm(auto53F4C809_var, AbilityCommand("RaynorSHOPPING22232", 0), 1);
        }

        if (((UnitMagazineCount(auto53F4C809_var, "RaynorSHOPPING22232") == 0) && ((EventUnitAbility() == AbilityCommand("SummonMercenaries", 0)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 3)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 1)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 8)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 2)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 4)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 6)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 5)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 7))))) {
            UnitMagazineArm(auto53F4C809_var, AbilityCommand("RaynorSHOPPING22232", 0), 1);
        }

        if (((UnitMagazineCount(auto53F4C809_var, "RaynorSHOPPING222") == 0) && ((EventUnitAbility() == AbilityCommand("SummonMercenaries", 0)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 3)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 1)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 8)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 2)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 4)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 6)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 5)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 7))))) {
            UnitMagazineArm(auto53F4C809_var, AbilityCommand("RaynorSHOPPING222", 0), 1);
        }

        if (((UnitMagazineCount(auto53F4C809_var, "RaynorSHOPPING2223") == 0) && ((EventUnitAbility() == AbilityCommand("SummonMercenaries", 0)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 3)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 1)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 8)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 2)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 4)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 6)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 5)) || (EventUnitAbility() == AbilityCommand("SummonMercenaries", 7))))) {
            UnitMagazineArm(auto53F4C809_var, AbilityCommand("RaynorSHOPPING2223", 0), 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99B87E4BDA3E585B5E7BB99E4BA88E5BCB9E88DAF2_Init () {
    libNEXS_gt_E99B87E4BDA3E585B5E7BB99E4BA88E5BCB9E88DAF2 = TriggerCreate("libNEXS_gt_E99B87E4BDA3E585B5E7BB99E4BA88E5BCB9E88DAF2_Func");
    TriggerEnable(libNEXS_gt_E99B87E4BDA3E585B5E7BB99E4BA88E5BCB9E88DAF2, false);
    TriggerAddEventUnitAbility(libNEXS_gt_E99B87E4BDA3E585B5E7BB99E4BA88E5BCB9E88DAF2, null, null, c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5BCB9E88DAFE588B6E980A0E7BB99E4BA88E8A18CE4B8BA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto384DF0D6_g;
    int auto384DF0D6_u;
    unit auto384DF0D6_var;
    unitgroup autoF8D65729_g;
    int autoF8D65729_u;
    unit autoF8D65729_var;
    unitgroup auto67349A2F_g;
    int auto67349A2F_u;
    unit auto67349A2F_var;
    unitgroup auto5C4D5C7A_g;
    int auto5C4D5C7A_u;
    unit auto5C4D5C7A_var;
    unitgroup autoE3EA2E3E_g;
    int autoE3EA2E3E_u;
    unit autoE3EA2E3E_var;
    unitgroup auto96536ECC_g;
    int auto96536ECC_u;
    unit auto96536ECC_var;
    unitgroup auto7E2D4E14_g;
    int auto7E2D4E14_u;
    unit auto7E2D4E14_var;
    unitgroup autoB8BE8F60_g;
    int autoB8BE8F60_u;
    unit autoB8BE8F60_var;
    unitgroup auto9CB77ECE_g;
    int auto9CB77ECE_u;
    unit auto9CB77ECE_var;

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "Raynor12CCDDY")) {
        auto384DF0D6_g = UnitGroup("ReigelAmmunitionDepot", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto384DF0D6_u = UnitGroupCount(auto384DF0D6_g, c_unitCountAll);
        for (;; auto384DF0D6_u -= 1) {
            auto384DF0D6_var = UnitGroupUnitFromEnd(auto384DF0D6_g, auto384DF0D6_u);
            if (auto384DF0D6_var == null) { break; }
            UnitBehaviorAdd(auto384DF0D6_var, "RaynorDY1", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
        }
    }

    if ((EventPlayerEffectUsed() == "RaynorGNSJDY")) {
        autoF8D65729_g = UnitGroup("ReigelAmmunitionDepot", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF8D65729_u = UnitGroupCount(autoF8D65729_g, c_unitCountAll);
        for (;; autoF8D65729_u -= 1) {
            autoF8D65729_var = UnitGroupUnitFromEnd(autoF8D65729_g, autoF8D65729_u);
            if (autoF8D65729_var == null) { break; }
            UnitBehaviorAdd(autoF8D65729_var, "RaynorDY2", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
        }
    }

    if ((EventPlayerEffectUsed() == "RaynorLMDY")) {
        auto67349A2F_g = UnitGroup("ReigelAmmunitionDepot", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto67349A2F_u = UnitGroupCount(auto67349A2F_g, c_unitCountAll);
        for (;; auto67349A2F_u -= 1) {
            auto67349A2F_var = UnitGroupUnitFromEnd(auto67349A2F_g, auto67349A2F_u);
            if (auto67349A2F_var == null) { break; }
            UnitBehaviorAdd(auto67349A2F_var, "RaynorDY8", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
        }
    }

    if ((EventPlayerEffectUsed() == "RaynorMNDBDY")) {
        auto5C4D5C7A_g = UnitGroup("ReigelAmmunitionDepot", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto5C4D5C7A_u = UnitGroupCount(auto5C4D5C7A_g, c_unitCountAll);
        for (;; auto5C4D5C7A_u -= 1) {
            auto5C4D5C7A_var = UnitGroupUnitFromEnd(auto5C4D5C7A_g, auto5C4D5C7A_u);
            if (auto5C4D5C7A_var == null) { break; }
            UnitBehaviorAdd(auto5C4D5C7A_var, "RaynorDY3", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
        }
    }

    if ((EventPlayerEffectUsed() == "RaynorSJZSDY")) {
        autoE3EA2E3E_g = UnitGroup("ReigelAmmunitionDepot", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE3EA2E3E_u = UnitGroupCount(autoE3EA2E3E_g, c_unitCountAll);
        for (;; autoE3EA2E3E_u -= 1) {
            autoE3EA2E3E_var = UnitGroupUnitFromEnd(autoE3EA2E3E_g, autoE3EA2E3E_u);
            if (autoE3EA2E3E_var == null) { break; }
            UnitBehaviorAdd(autoE3EA2E3E_var, "RaynorDY4", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
        }
    }

    if ((EventPlayerEffectUsed() == "RaynorSKSLDY")) {
        auto96536ECC_g = UnitGroup("ReigelAmmunitionDepot", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto96536ECC_u = UnitGroupCount(auto96536ECC_g, c_unitCountAll);
        for (;; auto96536ECC_u -= 1) {
            auto96536ECC_var = UnitGroupUnitFromEnd(auto96536ECC_g, auto96536ECC_u);
            if (auto96536ECC_var == null) { break; }
            UnitBehaviorAdd(auto96536ECC_var, "RaynorDY5", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
        }
    }

    if ((EventPlayerEffectUsed() == "RaynorSLDDY")) {
        auto7E2D4E14_g = UnitGroup("ReigelAmmunitionDepot", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto7E2D4E14_u = UnitGroupCount(auto7E2D4E14_g, c_unitCountAll);
        for (;; auto7E2D4E14_u -= 1) {
            auto7E2D4E14_var = UnitGroupUnitFromEnd(auto7E2D4E14_g, auto7E2D4E14_u);
            if (auto7E2D4E14_var == null) { break; }
            UnitBehaviorAdd(auto7E2D4E14_var, "RaynorDY7", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
        }
    }

    if ((EventPlayerEffectUsed() == "RaynorSXZLDY")) {
        autoB8BE8F60_g = UnitGroup("ReigelAmmunitionDepot", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB8BE8F60_u = UnitGroupCount(autoB8BE8F60_g, c_unitCountAll);
        for (;; autoB8BE8F60_u -= 1) {
            autoB8BE8F60_var = UnitGroupUnitFromEnd(autoB8BE8F60_g, autoB8BE8F60_u);
            if (autoB8BE8F60_var == null) { break; }
            UnitBehaviorAdd(autoB8BE8F60_var, "RaynorDY6", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
        }
    }

    if ((EventPlayerEffectUsed() == "RaynorYSZJDY")) {
        auto9CB77ECE_g = UnitGroup("ReigelAmmunitionDepot", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9CB77ECE_u = UnitGroupCount(auto9CB77ECE_g, c_unitCountAll);
        for (;; auto9CB77ECE_u -= 1) {
            auto9CB77ECE_var = UnitGroupUnitFromEnd(auto9CB77ECE_g, auto9CB77ECE_u);
            if (auto9CB77ECE_var == null) { break; }
            UnitBehaviorAdd(auto9CB77ECE_var, "RaynorDY9", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5BCB9E88DAFE588B6E980A0E7BB99E4BA88E8A18CE4B8BA_Init () {
    libNEXS_gt_E5BCB9E88DAFE588B6E980A0E7BB99E4BA88E8A18CE4B8BA = TriggerCreate("libNEXS_gt_E5BCB9E88DAFE588B6E980A0E7BB99E4BA88E8A18CE4B8BA_Func");
    TriggerEnable(libNEXS_gt_E5BCB9E88DAFE588B6E980A0E7BB99E4BA88E8A18CE4B8BA, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E5BCB9E88DAFE588B6E980A0E7BB99E4BA88E8A18CE4B8BA, c_playerAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5BCB9E88DAFE4BDBFE794A8E5898AE5878FE8A18CE4B8BA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5165FD7E_g;
    int auto5165FD7E_u;
    unit auto5165FD7E_var;
    unitgroup autoC74A0245_g;
    int autoC74A0245_u;
    unit autoC74A0245_var;
    unitgroup auto1BF33582_g;
    int auto1BF33582_u;
    unit auto1BF33582_var;
    unitgroup auto5A70C150_g;
    int auto5A70C150_u;
    unit auto5A70C150_var;
    unitgroup autoB09DB10A_g;
    int autoB09DB10A_u;
    unit autoB09DB10A_var;
    unitgroup autoCA8A9AD0_g;
    int autoCA8A9AD0_u;
    unit autoCA8A9AD0_var;
    unitgroup auto6607593F_g;
    int auto6607593F_u;
    unit auto6607593F_var;
    unitgroup auto34F1134C_g;
    int auto34F1134C_u;
    unit auto34F1134C_var;
    unitgroup auto1832E494_g;
    int auto1832E494_u;
    unit auto1832E494_var;

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "HeroNukeCalldown23")) {
        auto5165FD7E_g = UnitGroup("ReigelAmmunitionDepot", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto5165FD7E_u = UnitGroupCount(auto5165FD7E_g, c_unitCountAll);
        for (;; auto5165FD7E_u -= 1) {
            auto5165FD7E_var = UnitGroupUnitFromEnd(auto5165FD7E_g, auto5165FD7E_u);
            if (auto5165FD7E_var == null) { break; }
            UnitBehaviorRemove(auto5165FD7E_var, "RaynorDY1", 1);
        }
    }

    if ((EventPlayerEffectUsed() == "HeroNukeCalldown232")) {
        autoC74A0245_g = UnitGroup("ReigelAmmunitionDepot", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoC74A0245_u = UnitGroupCount(autoC74A0245_g, c_unitCountAll);
        for (;; autoC74A0245_u -= 1) {
            autoC74A0245_var = UnitGroupUnitFromEnd(autoC74A0245_g, autoC74A0245_u);
            if (autoC74A0245_var == null) { break; }
            UnitBehaviorRemove(autoC74A0245_var, "RaynorDY2", 1);
        }
    }

    if ((EventPlayerEffectUsed() == "HeroNukeCalldown2322")) {
        auto1BF33582_g = UnitGroup("ReigelAmmunitionDepot", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1BF33582_u = UnitGroupCount(auto1BF33582_g, c_unitCountAll);
        for (;; auto1BF33582_u -= 1) {
            auto1BF33582_var = UnitGroupUnitFromEnd(auto1BF33582_g, auto1BF33582_u);
            if (auto1BF33582_var == null) { break; }
            UnitBehaviorRemove(auto1BF33582_var, "RaynorDY3", 1);
        }
    }

    if ((EventPlayerEffectUsed() == "HeroNukeCalldown232222")) {
        auto5A70C150_g = UnitGroup("ReigelAmmunitionDepot", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto5A70C150_u = UnitGroupCount(auto5A70C150_g, c_unitCountAll);
        for (;; auto5A70C150_u -= 1) {
            auto5A70C150_var = UnitGroupUnitFromEnd(auto5A70C150_g, auto5A70C150_u);
            if (auto5A70C150_var == null) { break; }
            UnitBehaviorRemove(auto5A70C150_var, "RaynorDY4", 1);
        }
    }

    if ((EventPlayerEffectUsed() == "HeroNukeCalldown2322232")) {
        autoB09DB10A_g = UnitGroup("ReigelAmmunitionDepot", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB09DB10A_u = UnitGroupCount(autoB09DB10A_g, c_unitCountAll);
        for (;; autoB09DB10A_u -= 1) {
            autoB09DB10A_var = UnitGroupUnitFromEnd(autoB09DB10A_g, autoB09DB10A_u);
            if (autoB09DB10A_var == null) { break; }
            UnitBehaviorRemove(autoB09DB10A_var, "RaynorDY5", 1);
        }
    }

    if ((EventPlayerEffectUsed() == "HeroNukeCalldown2322222")) {
        autoCA8A9AD0_g = UnitGroup("ReigelAmmunitionDepot", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoCA8A9AD0_u = UnitGroupCount(autoCA8A9AD0_g, c_unitCountAll);
        for (;; autoCA8A9AD0_u -= 1) {
            autoCA8A9AD0_var = UnitGroupUnitFromEnd(autoCA8A9AD0_g, autoCA8A9AD0_u);
            if (autoCA8A9AD0_var == null) { break; }
            UnitBehaviorRemove(autoCA8A9AD0_var, "RaynorDY6", 1);
        }
    }

    if ((EventPlayerEffectUsed() == "HeroNukeCalldown23222")) {
        auto6607593F_g = UnitGroup("ReigelAmmunitionDepot", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6607593F_u = UnitGroupCount(auto6607593F_g, c_unitCountAll);
        for (;; auto6607593F_u -= 1) {
            auto6607593F_var = UnitGroupUnitFromEnd(auto6607593F_g, auto6607593F_u);
            if (auto6607593F_var == null) { break; }
            UnitBehaviorRemove(auto6607593F_var, "RaynorDY7", 1);
        }
    }

    if ((EventPlayerEffectUsed() == "HeroNukeCalldown23222322")) {
        auto34F1134C_g = UnitGroup("ReigelAmmunitionDepot", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto34F1134C_u = UnitGroupCount(auto34F1134C_g, c_unitCountAll);
        for (;; auto34F1134C_u -= 1) {
            auto34F1134C_var = UnitGroupUnitFromEnd(auto34F1134C_g, auto34F1134C_u);
            if (auto34F1134C_var == null) { break; }
            UnitBehaviorRemove(auto34F1134C_var, "RaynorDY8", 1);
        }
    }

    if ((EventPlayerEffectUsed() == "HeroNukeCalldown232223")) {
        auto1832E494_g = UnitGroup("ReigelAmmunitionDepot", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1832E494_u = UnitGroupCount(auto1832E494_g, c_unitCountAll);
        for (;; auto1832E494_u -= 1) {
            auto1832E494_var = UnitGroupUnitFromEnd(auto1832E494_g, auto1832E494_u);
            if (auto1832E494_var == null) { break; }
            UnitBehaviorRemove(auto1832E494_var, "RaynorDY9", 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5BCB9E88DAFE4BDBFE794A8E5898AE5878FE8A18CE4B8BA_Init () {
    libNEXS_gt_E5BCB9E88DAFE4BDBFE794A8E5898AE5878FE8A18CE4B8BA = TriggerCreate("libNEXS_gt_E5BCB9E88DAFE4BDBFE794A8E5898AE5878FE8A18CE4B8BA_Func");
    TriggerEnable(libNEXS_gt_E5BCB9E88DAFE4BDBFE794A8E5898AE5878FE8A18CE4B8BA, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E5BCB9E88DAFE4BDBFE794A8E5898AE5878FE8A18CE4B8BA, c_playerAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5BCB9E88DAFE5BA93E8A18CE4B8BAE7BB99E4BA88E8B584E6BA90_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoEE7EF6BF_g;
    int autoEE7EF6BF_u;
    unit autoEE7EF6BF_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoEE7EF6BF_g = UnitGroup("ReigelAmmunitionDepot", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEE7EF6BF_u = UnitGroupCount(autoEE7EF6BF_g, c_unitCountAll);
    for (;; autoEE7EF6BF_u -= 1) {
        autoEE7EF6BF_var = UnitGroupUnitFromEnd(autoEE7EF6BF_g, autoEE7EF6BF_u);
        if (autoEE7EF6BF_var == null) { break; }
        if ((UnitBehaviorCount(autoEE7EF6BF_var, "RaynorDY1") == 1)) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropMinerals, c_playerPropOperAdd, 5);
        }
        else if ((UnitBehaviorCount(autoEE7EF6BF_var, "RaynorDY1") == 2)) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropMinerals, c_playerPropOperAdd, 10);
        }
        else if ((UnitBehaviorCount(autoEE7EF6BF_var, "RaynorDY1") == 3)) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropMinerals, c_playerPropOperAdd, 15);
        }
        if ((UnitBehaviorCount(autoEE7EF6BF_var, "RaynorDY2") == 1)) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropMinerals, c_playerPropOperAdd, 5);
        }
        else if ((UnitBehaviorCount(autoEE7EF6BF_var, "RaynorDY2") == 2)) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropMinerals, c_playerPropOperAdd, 10);
        }
        else if ((UnitBehaviorCount(autoEE7EF6BF_var, "RaynorDY2") == 3)) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropMinerals, c_playerPropOperAdd, 15);
        }
        else if ((UnitBehaviorCount(autoEE7EF6BF_var, "RaynorDY2") == 4)) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropMinerals, c_playerPropOperAdd, 20);
        }
        else if ((UnitBehaviorCount(autoEE7EF6BF_var, "RaynorDY2") == 5)) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropMinerals, c_playerPropOperAdd, 25);
        }
        if ((UnitBehaviorCount(autoEE7EF6BF_var, "RaynorDY8") == 1)) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropMinerals, c_playerPropOperAdd, 5);
        }
        if ((UnitBehaviorCount(autoEE7EF6BF_var, "RaynorDY3") == 1)) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropMinerals, c_playerPropOperAdd, 5);
        }
        if ((UnitBehaviorCount(autoEE7EF6BF_var, "RaynorDY4") == 1)) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropMinerals, c_playerPropOperAdd, 5);
        }
        else if ((UnitBehaviorCount(autoEE7EF6BF_var, "RaynorDY4") == 2)) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropMinerals, c_playerPropOperAdd, 10);
        }
        if ((UnitBehaviorCount(autoEE7EF6BF_var, "RaynorDY5") == 1)) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropMinerals, c_playerPropOperAdd, 5);
        }
        else if ((UnitBehaviorCount(autoEE7EF6BF_var, "RaynorDY5") == 2)) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropMinerals, c_playerPropOperAdd, 10);
        }
        else if ((UnitBehaviorCount(autoEE7EF6BF_var, "RaynorDY5") == 3)) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropMinerals, c_playerPropOperAdd, 15);
        }
        if ((UnitBehaviorCount(autoEE7EF6BF_var, "RaynorDY7") == 1)) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropMinerals, c_playerPropOperAdd, 5);
        }
        else if ((UnitBehaviorCount(autoEE7EF6BF_var, "RaynorDY7") == 2)) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropMinerals, c_playerPropOperAdd, 10);
        }
        else if ((UnitBehaviorCount(autoEE7EF6BF_var, "RaynorDY7") == 3)) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropMinerals, c_playerPropOperAdd, 15);
        }
        else if ((UnitBehaviorCount(autoEE7EF6BF_var, "RaynorDY7") == 4)) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropMinerals, c_playerPropOperAdd, 20);
        }
        else if ((UnitBehaviorCount(autoEE7EF6BF_var, "RaynorDY7") == 5)) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropMinerals, c_playerPropOperAdd, 25);
        }
        if ((UnitBehaviorCount(autoEE7EF6BF_var, "RaynorDY6") == 1)) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropMinerals, c_playerPropOperAdd, 5);
        }
        if ((UnitBehaviorCount(autoEE7EF6BF_var, "RaynorDY6") == 2)) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropMinerals, c_playerPropOperAdd, 5);
        }
        else if ((UnitBehaviorCount(autoEE7EF6BF_var, "RaynorDY6") == 3)) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropMinerals, c_playerPropOperAdd, 10);
        }
        else if ((UnitBehaviorCount(autoEE7EF6BF_var, "RaynorDY6") == 4)) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropMinerals, c_playerPropOperAdd, 15);
        }
        else if ((UnitBehaviorCount(autoEE7EF6BF_var, "RaynorDY6") == 5)) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropMinerals, c_playerPropOperAdd, 20);
        }
        else if ((UnitBehaviorCount(autoEE7EF6BF_var, "RaynorDY6") == 1)) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropMinerals, c_playerPropOperAdd, 25);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5BCB9E88DAFE5BA93E8A18CE4B8BAE7BB99E4BA88E8B584E6BA90_Init () {
    libNEXS_gt_E5BCB9E88DAFE5BA93E8A18CE4B8BAE7BB99E4BA88E8B584E6BA90 = TriggerCreate("libNEXS_gt_E5BCB9E88DAFE5BA93E8A18CE4B8BAE7BB99E4BA88E8B584E6BA90_Func");
    TriggerEnable(libNEXS_gt_E5BCB9E88DAFE5BA93E8A18CE4B8BAE7BB99E4BA88E8B584E6BA90, false);
    TriggerAddEventTimePeriodic(libNEXS_gt_E5BCB9E88DAFE5BA93E8A18CE4B8BAE7BB99E4BA88E8B584E6BA90, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????2??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99BB7E8AFBAE5A881E69C9B2E5BC80E590AF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_A18BD37B"));
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "UnknownUpgrade297", 1);
    TriggerEnable(libNEXS_gt_E699B6E4BD93E79FBFE793A6E696AFE588A4E696AD, true);
    TriggerEnable(libNEXS_gt_E5BCB9E88DAFE588B6E980A0E7BB99E4BA88E8A18CE4B8BA, true);
    TriggerEnable(libNEXS_gt_E5BCB9E88DAFE4BDBFE794A8E5898AE5878FE8A18CE4B8BA, true);
    TriggerEnable(libNEXS_gt_E5BCB9E88DAFE5BA93E8A18CE4B8BAE7BB99E4BA88E8B584E6BA90, true);
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE5A881E69C9B1E5BC80E590AF, false);
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE5A881E69C9B3E5BC80E590AF, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99BB7E8AFBAE5A881E69C9B2E5BC80E590AF_Init () {
    libNEXS_gt_E99BB7E8AFBAE5A881E69C9B2E5BC80E590AF = TriggerCreate("libNEXS_gt_E99BB7E8AFBAE5A881E69C9B2E5BC80E590AF_Func");
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE5A881E69C9B2E5BC80E590AF, false);
    TriggerAddEventChatMessage(libNEXS_gt_E99BB7E8AFBAE5A881E69C9B2E5BC80E590AF, c_playerAny, "Raynor2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E699B6E4BD93E79FBFE793A6E696AFE588A4E696AD_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_e699B6E4BD93E79FBFE8A18CE4B8BAE5B182E695B0;
    fixed lv_e793A6E696AFE8A18CE4B8BAE5B182E695B0;
    fixed lv_e680BBE8A18CE4B8BAE5B182E695B0;
    fixed lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0;

    // Automatic Variable Declarations
    unitgroup auto9A6F1439_g;
    int auto9A6F1439_u;
    unit auto9A6F1439_var;
    unitgroup autoF63349CC_g;
    int autoF63349CC_u;
    unit autoF63349CC_var;
    unitgroup auto9A46D942_g;
    int auto9A46D942_u;
    unit auto9A46D942_var;
    unitgroup auto57A3E182_g;
    int auto57A3E182_u;
    unit auto57A3E182_var;
    unitgroup auto65E45413_g;
    int auto65E45413_u;
    unit auto65E45413_var;
    unitgroup auto8BDAAD04_g;
    int auto8BDAAD04_u;
    unit auto8BDAAD04_var;
    unitgroup auto49AF8AEF_g;
    int auto49AF8AEF_u;
    unit auto49AF8AEF_var;
    unitgroup autoA5A76B7C_g;
    int autoA5A76B7C_u;
    unit autoA5A76B7C_var;
    unitgroup autoDB2CEBC0_g;
    int autoDB2CEBC0_u;
    unit autoDB2CEBC0_var;
    unitgroup auto3C649D1F_g;
    int auto3C649D1F_u;
    unit auto3C649D1F_var;
    unitgroup auto591E496B_g;
    int auto591E496B_u;
    unit auto591E496B_var;
    unitgroup autoDB5BFD73_g;
    int autoDB5BFD73_u;
    unit autoDB5BFD73_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_e699B6E4BD93E79FBFE8A18CE4B8BAE5B182E695B0 = (PlayerGetPropertyFixed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropMinerals) / 100.0);
    lv_e793A6E696AFE8A18CE4B8BAE5B182E695B0 = (PlayerGetPropertyFixed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, c_playerPropVespene) / 50.0);
    lv_e680BBE8A18CE4B8BAE5B182E695B0 = (((lv_e699B6E4BD93E79FBFE8A18CE4B8BAE5B182E695B0 + lv_e793A6E696AFE8A18CE4B8BAE5B182E695B0) / 100.0) + 0.0);
    lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 = (lv_e699B6E4BD93E79FBFE8A18CE4B8BAE5B182E695B0 + lv_e793A6E696AFE8A18CE4B8BAE5B182E695B0);
    if ((lv_e680BBE8A18CE4B8BAE5B182E695B0 <= 0.0)) {
        lv_e680BBE8A18CE4B8BAE5B182E695B0 = 0.0;
    }

    auto9A6F1439_g = UnitGroup(null, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    auto9A6F1439_u = UnitGroupCount(auto9A6F1439_g, c_unitCountAll);
    for (;; auto9A6F1439_u -= 1) {
        auto9A6F1439_var = UnitGroupUnitFromEnd(auto9A6F1439_g, auto9A6F1439_u);
        if (auto9A6F1439_var == null) { break; }
        if ((UnitGetType(auto9A6F1439_var) == "ReigelWarPig")) {
            UnitBehaviorAddPlayer(auto9A6F1439_var, "RaynorSSCN", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

    }
    autoF63349CC_g = UnitGroup(null, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    autoF63349CC_u = UnitGroupCount(autoF63349CC_g, c_unitCountAll);
    for (;; autoF63349CC_u -= 1) {
        autoF63349CC_var = UnitGroupUnitFromEnd(autoF63349CC_g, autoF63349CC_u);
        if (autoF63349CC_var == null) { break; }
        if ((UnitGetType(autoF63349CC_var) == "ReigelHammerSecurity")) {
            UnitBehaviorAddPlayer(autoF63349CC_var, "RaynorSSCN", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

    }
    auto9A46D942_g = UnitGroup(null, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    auto9A46D942_u = UnitGroupCount(auto9A46D942_g, c_unitCountAll);
    for (;; auto9A46D942_u -= 1) {
        auto9A46D942_var = UnitGroupUnitFromEnd(auto9A46D942_g, auto9A46D942_u);
        if (auto9A46D942_var == null) { break; }
        if ((UnitGetType(auto9A46D942_var) == "ReigelDevilDog")) {
            UnitBehaviorAddPlayer(auto9A46D942_var, "RaynorSSCN", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

    }
    auto57A3E182_g = UnitGroup(null, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    auto57A3E182_u = UnitGroupCount(auto57A3E182_g, c_unitCountAll);
    for (;; auto57A3E182_u -= 1) {
        auto57A3E182_var = UnitGroupUnitFromEnd(auto57A3E182_g, auto57A3E182_u);
        if (auto57A3E182_var == null) { break; }
        if ((UnitGetType(auto57A3E182_var) == "ReigelSpartanCompany")) {
            UnitBehaviorAddPlayer(auto57A3E182_var, "RaynorSSCN", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

    }
    auto65E45413_g = UnitGroup(null, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    auto65E45413_u = UnitGroupCount(auto65E45413_g, c_unitCountAll);
    for (;; auto65E45413_u -= 1) {
        auto65E45413_var = UnitGroupUnitFromEnd(auto65E45413_g, auto65E45413_u);
        if (auto65E45413_var == null) { break; }
        if ((UnitGetType(auto65E45413_var) == "ReigelSpartanCompany")) {
            UnitBehaviorAddPlayer(auto65E45413_var, "RaynorSSCN", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

    }
    auto8BDAAD04_g = UnitGroup(null, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    auto8BDAAD04_u = UnitGroupCount(auto8BDAAD04_g, c_unitCountAll);
    for (;; auto8BDAAD04_u -= 1) {
        auto8BDAAD04_var = UnitGroupUnitFromEnd(auto8BDAAD04_g, auto8BDAAD04_u);
        if (auto8BDAAD04_var == null) { break; }
        if ((UnitGetType(auto8BDAAD04_var) == "MengskSiegeTankSieged2")) {
            UnitBehaviorAddPlayer(auto8BDAAD04_var, "RaynorSSCN", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

    }
    auto49AF8AEF_g = UnitGroup(null, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    auto49AF8AEF_u = UnitGroupCount(auto49AF8AEF_g, c_unitCountAll);
    for (;; auto49AF8AEF_u -= 1) {
        auto49AF8AEF_var = UnitGroupUnitFromEnd(auto49AF8AEF_g, auto49AF8AEF_u);
        if (auto49AF8AEF_var == null) { break; }
        if ((UnitGetType(auto49AF8AEF_var) == "ReigelSiegeBreaker")) {
            UnitBehaviorAddPlayer(auto49AF8AEF_var, "RaynorSSCN", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

    }
    autoA5A76B7C_g = UnitGroup(null, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    autoA5A76B7C_u = UnitGroupCount(autoA5A76B7C_g, c_unitCountAll);
    for (;; autoA5A76B7C_u -= 1) {
        autoA5A76B7C_var = UnitGroupUnitFromEnd(autoA5A76B7C_g, autoA5A76B7C_u);
        if (autoA5A76B7C_var == null) { break; }
        if ((UnitGetType(autoA5A76B7C_var) == "ReigelShadowBladeSpectre")) {
            UnitBehaviorAddPlayer(autoA5A76B7C_var, "RaynorSSCN", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

    }
    autoDB2CEBC0_g = UnitGroup(null, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    autoDB2CEBC0_u = UnitGroupCount(autoDB2CEBC0_g, c_unitCountAll);
    for (;; autoDB2CEBC0_u -= 1) {
        autoDB2CEBC0_var = UnitGroupUnitFromEnd(autoDB2CEBC0_g, autoDB2CEBC0_u);
        if (autoDB2CEBC0_var == null) { break; }
        if ((UnitGetType(autoDB2CEBC0_var) == "ReigelBanshee")) {
            UnitBehaviorAddPlayer(autoDB2CEBC0_var, "RaynorSSCN", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

    }
    auto3C649D1F_g = UnitGroup(null, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    auto3C649D1F_u = UnitGroupCount(auto3C649D1F_g, c_unitCountAll);
    for (;; auto3C649D1F_u -= 1) {
        auto3C649D1F_var = UnitGroupUnitFromEnd(auto3C649D1F_g, auto3C649D1F_u);
        if (auto3C649D1F_var == null) { break; }
        if ((UnitGetType(auto3C649D1F_var) == "HelsAngelAssault")) {
            UnitBehaviorAddPlayer(auto3C649D1F_var, "RaynorSSCN", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

    }
    auto591E496B_g = UnitGroup(null, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    auto591E496B_u = UnitGroupCount(auto591E496B_g, c_unitCountAll);
    for (;; auto591E496B_u -= 1) {
        auto591E496B_var = UnitGroupUnitFromEnd(auto591E496B_g, auto591E496B_u);
        if (auto591E496B_var == null) { break; }
        if ((UnitGetType(auto591E496B_var) == "HelsAngelFighter")) {
            UnitBehaviorAddPlayer(auto591E496B_var, "RaynorSSCN", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

    }
    autoDB5BFD73_g = UnitGroup(null, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    autoDB5BFD73_u = UnitGroupCount(autoDB5BFD73_g, c_unitCountAll);
    for (;; autoDB5BFD73_u -= 1) {
        autoDB5BFD73_var = UnitGroupUnitFromEnd(autoDB5BFD73_g, autoDB5BFD73_u);
        if (autoDB5BFD73_var == null) { break; }
        if ((UnitGetType(autoDB5BFD73_var) == "ReigelJacksonsRevenge")) {
            UnitBehaviorAddPlayer(autoDB5BFD73_var, "RaynorSSCN", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

    }
    CatalogFieldValueSet(c_gameCatalogBehavior, "RaynorSSCN", "Modification.VitalMaxFractionArray[" + IntToString(0) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString(lv_e680BBE8A18CE4B8BAE5B182E695B0, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogBehavior, "RaynorSSCN", "Modification.VitalMaxFractionArray[" + IntToString(3) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString(lv_e680BBE8A18CE4B8BAE5B182E695B0, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "KelmorianMinerDamage2", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 8.0) + 8.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "HammerSecurityDamage2", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 18.0) + 18.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "HammerSecurityDamage2", "AttributeBonus[" + IntToString(1) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 18.0) + 18.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "ThermalLancesFireBeamDamage42", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 11.0) + 11.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "ThermalLancesFireBeamDamage422", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 11.0) + 11.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "InfernalFlameThrower2", "AttributeBonus[" + IntToString(0) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 20.0) + 20.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "DevilDogDamage2", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 16.0) + 16.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "DevilDogDamage2", "AttributeBonus[" + IntToString(0) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 4.0) + 4.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "SpecterU", "AttributeBonus[" + IntToString(1) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 20.0) + 20.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "SpecterU", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 40.0) + 40.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "Obliterate", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 300.0) + 300.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "HHVikingRocketsDamage5", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 25.0) + 25.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "SpartanCompanyAU", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 16.0) + 16.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "SpartanCompanyG", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 21.0) + 21.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "MengskSiegeTankDamage2", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 40.0) + 40.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "HHBomberAreaBombFireDamage", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 5.0) + 5.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "HornerAirFleetYamatoU33", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 20.0) + 20.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "HornerAirFleetYamatoU3", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 40.0) + 40.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "ArcliteShockCannonBlast3", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 60.0) + 60.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "ArcliteShockCannonDirected2", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 60.0) + 60.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "NukeDamage2", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 250.0) + 250.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "Banshee_BlackOpsDamage", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 15.0) + 15.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "Banshee_BlackOpsDamage", "AttributeBonus[" + IntToString(1) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 5.0) + 5.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "WreckingCrewAssault", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 30.0) + 30.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "WreckingCrewFighterU2", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 185.0) + 185.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "ACPirateLightningStormDamage22", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 5.0) + 5.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "WreckingCrewFighterU", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 28.0) + 28.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "WreckingCrewFighterU", "AttributeBonus[" + IntToString(1) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 12.0) + 12.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "HHGriffonDamage", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 10.0) + 10.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "HurricaneMissileDamage3", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 10.0) + 10.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "HurricaneMissileDamage3", "AttributeBonus[" + IntToString(7) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 20.0) + 20.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "HyperionVoidCoopAirDamage", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 15.0) + 15.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "HyperionVoidCoopGroundDamage", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 15.0) + 15.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "YamatoU5", "AttributeBonus[" + IntToString(9) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((-4400.0 + ((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 600.0)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "YamatoU5", "AttributeBonus[" + IntToString(12) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString((-4400.0 + ((lv_e4BCA4E5AEB3E680BBE8A18CE4B8BAE5B182E695B0 / 100.0) * 600.0)), c_fixedPrecisionAny));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E699B6E4BD93E79FBFE793A6E696AFE588A4E696AD_Init () {
    libNEXS_gt_E699B6E4BD93E79FBFE793A6E696AFE588A4E696AD = TriggerCreate("libNEXS_gt_E699B6E4BD93E79FBFE793A6E696AFE588A4E696AD_Func");
    TriggerEnable(libNEXS_gt_E699B6E4BD93E79FBFE793A6E696AFE588A4E696AD, false);
    TriggerAddEventTimePeriodic(libNEXS_gt_E699B6E4BD93E79FBFE793A6E696AFE588A4E696AD, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????? - ??????3
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8A385E5A487E59BBEE7BAB8E587BBE69D80E68E89E890BDE5A881E69C9B3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3B06EEF6_g;
    int auto3B06EEF6_u;
    unit auto3B06EEF6_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNEXS_gv_equipmentMount3 < 6) && (libNEXS_gv_equipmentAllow3 == 1) && (UnitHasBehavior2(EventUnit(), "RaynorCantDropEquip") != true) && (UnitGetOwner(EventUnit()) != 1) && (UnitGetOwner(EventUnit()) != 2) && (UnitGetOwner(EventUnit()) != 0) && ((libNtve_gf_KillingPlayer() == 1) || (libNtve_gf_KillingPlayer() == 2))) {
        if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true)) {
            libNEXS_gv_mountBaseChance3 = (libNEXS_gv_mountBaseChance3 + (libNEXS_gv_supplyMultiplyingPower3 * 2.0));
        }
        else {
            libNEXS_gv_mountBaseChance3 = (libNEXS_gv_mountBaseChance3 + (libNEXS_gv_supplyMultiplyingPower3 * UnitTypeGetProperty(UnitGetType(EventUnit()), c_unitPropSuppliesUsed)));
        }
        CatalogFieldValueSet(c_gameCatalogEffect, "RaynorUnitKillEquipmentDrop", "Chance", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString(libNEXS_gv_equipmentDropChance3, 3));
        libNEXS_gv_equipmentDropChance3 = (libNEXS_gv_equipmentDropChance3 + (libNEXS_gv_mountBaseChance3 * libNEXS_gv_equipmentDropChance3));
        if ((libNEXS_gv_equipmentDropChance3 < 0.01)) {
            libNEXS_gv_equipmentDropChance3 = 0.01;
        }

        if ((libNtve_gf_KillingPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11)) {
            auto3B06EEF6_g = UnitGroup("BioDomeCommandFlying2242", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto3B06EEF6_u = UnitGroupCount(auto3B06EEF6_g, c_unitCountAll);
            for (;; auto3B06EEF6_u -= 1) {
                auto3B06EEF6_var = UnitGroupUnitFromEnd(auto3B06EEF6_g, auto3B06EEF6_u);
                if (auto3B06EEF6_var == null) { break; }
                UnitIssueOrder(auto3B06EEF6_var, OrderTargetingPoint(AbilityCommand("RaynorEquipmentBirth", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
            }
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8A385E5A487E59BBEE7BAB8E587BBE69D80E68E89E890BDE5A881E69C9B3_Init () {
    libNEXS_gt_E8A385E5A487E59BBEE7BAB8E587BBE69D80E68E89E890BDE5A881E69C9B3 = TriggerCreate("libNEXS_gt_E8A385E5A487E59BBEE7BAB8E587BBE69D80E68E89E890BDE5A881E69C9B3_Func");
    TriggerEnable(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E587BBE69D80E68E89E890BDE5A881E69C9B3, false);
    TriggerAddEventUnitDied(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E587BBE69D80E68E89E890BDE5A881E69C9B3, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????????????? - ??????3
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68E89E890BDE6A682E78E87E6B885E999A4E5A881E69C9B3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    MinimapPing(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), UnitGetPosition(EventUnit()), 5.0, Color(100.00, 100.00, 0.00));
    libNEXS_gv_equipmentAllow3 = 0;
    libNEXS_gv_equipmentMount3 = (libNEXS_gv_equipmentMount3 + 1);
    libNEXS_gv_mountBaseChance3 = (libNEXS_gv_mountBaseChance3 - 100.0);
    libNEXS_gv_equipmentDropChance3 = (libNEXS_gv_equipmentDropChance3 + (libNEXS_gv_mountBaseChance3 * libNEXS_gv_equipmentDropChance3));
    if ((libNEXS_gv_equipmentDropChance3 < 0.01)) {
        libNEXS_gv_equipmentDropChance3 = 0.01;
    }

    libNEXS_gv_equipmentAllow3 = 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68E89E890BDE6A682E78E87E6B885E999A4E5A881E69C9B3_Init () {
    libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68E89E890BDE6A682E78E87E6B885E999A4E5A881E69C9B3 = TriggerCreate("libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68E89E890BDE6A682E78E87E6B885E999A4E5A881E69C9B3_Func");
    TriggerEnable(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68E89E890BDE6A682E78E87E6B885E999A4E5A881E69C9B3, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68E89E890BDE6A682E78E87E6B885E999A4E5A881E69C9B3, null, "BiomassCreated2", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????? - ??????3
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96E588A4E696ADE5A881E69C9B3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_equipmentAD;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_equipmentAD = RandomInt(libNEXS_gv_equipmentADMin3, libNEXS_gv_equipmentADMax3);
    while ((libNEXS_gv_weaponPickFullAd3[(lv_equipmentAD - 1)] == 1)) {
        lv_equipmentAD = RandomInt(libNEXS_gv_equipmentADMin3, libNEXS_gv_equipmentADMax3);
    }
    libNEXS_gv_equipmentTypeMount3 = lv_equipmentAD;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96E588A4E696ADE5A881E69C9B3_Init () {
    libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96E588A4E696ADE5A881E69C9B3 = TriggerCreate("libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96E588A4E696ADE5A881E69C9B3_Func");
    TriggerEnable(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96E588A4E696ADE5A881E69C9B3, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????? - ??????3
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96E5A881E69C9B3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96E588A4E696ADE5A881E69C9B3, true, true);
    if ((libNEXS_gv_equipmentTypeMount3 == 1)) {
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorPickup22", 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorEngineerUpgrade232", 1);
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_DC965DAC"));
        UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), AbilityCommand("EngineeringBayResearch4", 0), true);
        libNEXS_gv_equipmentADMin3 = 1;
        libNEXS_gv_equipmentADMax3 = 6;
        libNEXS_gv_weaponPickFullAd3[(libNEXS_gv_equipmentTypeMount3 - 1)] = 1;
        libNEXS_gv_equipmentPickMount3 = (libNEXS_gv_equipmentPickMount3 + 1);
    }

    if ((libNEXS_gv_equipmentTypeMount3 == 2)) {
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorPickup2", 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorEngineerUpgrade232", 1);
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_1CFA9F33"));
        UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), AbilityCommand("EngineeringBayResearch4", 1), true);
        libNEXS_gv_equipmentADMin3 = 1;
        libNEXS_gv_equipmentADMax3 = 6;
        libNEXS_gv_weaponPickFullAd3[(libNEXS_gv_equipmentTypeMount3 - 1)] = 1;
        libNEXS_gv_equipmentPickMount3 = (libNEXS_gv_equipmentPickMount3 + 1);
    }

    if ((libNEXS_gv_equipmentTypeMount3 == 3)) {
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorPickup2222", 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorEngineerUpgrade232", 1);
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_CB65A3DD"));
        UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), AbilityCommand("EngineeringBayResearch4", 2), true);
        libNEXS_gv_equipmentADMin3 = 1;
        libNEXS_gv_equipmentADMax3 = 6;
        libNEXS_gv_weaponPickFullAd3[(libNEXS_gv_equipmentTypeMount3 - 1)] = 1;
        libNEXS_gv_equipmentPickMount3 = (libNEXS_gv_equipmentPickMount3 + 1);
    }

    if ((libNEXS_gv_equipmentTypeMount3 == 4)) {
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorPickup22222", 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorEngineerUpgrade232", 1);
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_5090A283"));
        UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), AbilityCommand("EngineeringBayResearch4", 3), true);
        libNEXS_gv_equipmentADMin3 = 1;
        libNEXS_gv_equipmentADMax3 = 6;
        libNEXS_gv_weaponPickFullAd3[(libNEXS_gv_equipmentTypeMount3 - 1)] = 1;
        libNEXS_gv_equipmentPickMount3 = (libNEXS_gv_equipmentPickMount3 + 1);
    }

    if ((libNEXS_gv_equipmentTypeMount3 == 5)) {
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorPickup2222222", 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorEngineerUpgrade232", 1);
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_7A93FEA2"));
        UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), AbilityCommand("EngineeringBayResearch4", 4), true);
        libNEXS_gv_equipmentADMin3 = 1;
        libNEXS_gv_equipmentADMax3 = 6;
        libNEXS_gv_weaponPickFullAd3[(libNEXS_gv_equipmentTypeMount3 - 1)] = 1;
        libNEXS_gv_equipmentPickMount3 = (libNEXS_gv_equipmentPickMount3 + 1);
    }

    if ((libNEXS_gv_equipmentTypeMount3 == 6)) {
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorPickup22222222", 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorEngineerUpgrade232", 1);
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_82C8100B"));
        UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), AbilityCommand("EngineeringBayResearch4", 5), true);
        libNEXS_gv_equipmentADMin3 = 1;
        libNEXS_gv_equipmentADMax3 = 6;
        libNEXS_gv_weaponPickFullAd3[(libNEXS_gv_equipmentTypeMount3 - 1)] = 1;
        libNEXS_gv_equipmentPickMount3 = (libNEXS_gv_equipmentPickMount3 + 1);
    }

    if ((libNEXS_gv_equipmentPickMount3 == 6)) {
        if ((RandomInt(1, 5) == 1)) {
            libNEXS_gf_E587AFE7919EE79498E5BDA9E89B8BE5889DE5A78BE8A7A6E58F91();
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96E5A881E69C9B3_Init () {
    libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96E5A881E69C9B3 = TriggerCreate("libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96E5A881E69C9B3_Func");
    TriggerEnable(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96E5A881E69C9B3, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96E5A881E69C9B3, c_playerAny, "PickupNovaEquipmentMU2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????? - ??????3
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99BB7E8AFBAE4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto08FFC1A6_g;
    int auto08FFC1A6_u;
    unit auto08FFC1A6_var;
    unitgroup auto0AB4C52D_g;
    int auto0AB4C52D_u;
    unit auto0AB4C52D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libNEXS_gv_raynorHERO, EventUnit());
    libNEXS_gf_SetHeroPanelUnit(1, EventUnit(), libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11);
    UnitSetHeight(EventUnit(), 2.0, 0.0);
    UnitSetHeight(EventUnit(), 0.0, 0.5);
    auto08FFC1A6_g = UnitGroup("PlaceWormholeUnit232332", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto08FFC1A6_u = UnitGroupCount(auto08FFC1A6_g, c_unitCountAll);
    for (;; auto08FFC1A6_u -= 1) {
        auto08FFC1A6_var = UnitGroupUnitFromEnd(auto08FFC1A6_g, auto08FFC1A6_u);
        if (auto08FFC1A6_var == null) { break; }
        libNEXS_gv_ryBeaconPosition = UnitGetPosition(auto08FFC1A6_var);
    }
    if ((libNEXS_gv_raynorReviveTimes == 0)) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_8C08C594"));
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorNV2", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorMasteryUpgrade22", TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorMasteryUpgrade2", c_techCountCompleteOnly));
        libNEXS_gv_raynorReviveTimes = 1;
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_E354A7CD"));
    }
    auto0AB4C52D_g = libNEXS_gv_raynorHERO;
    auto0AB4C52D_u = UnitGroupCount(auto0AB4C52D_g, c_unitCountAll);
    for (;; auto0AB4C52D_u -= 1) {
        auto0AB4C52D_var = UnitGroupUnitFromEnd(auto0AB4C52D_g, auto0AB4C52D_u);
        if (auto0AB4C52D_var == null) { break; }
        if ((libNEXS_gv_ryMainWeapon == 1)) {
            UnitBehaviorAddPlayer(auto0AB4C52D_var, "RaynorWeaponAdd22223", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryMainWeapon == 2)) {
            UnitBehaviorAddPlayer(auto0AB4C52D_var, "RaynorWeaponAdd32", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryMainWeapon == 3)) {
            UnitBehaviorAddPlayer(auto0AB4C52D_var, "RaynorWeaponAdd3", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_rySubWeapon == 1)) {
            UnitBehaviorAddPlayer(auto0AB4C52D_var, "RaynorWeaponAdd2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_rySubWeapon == 2)) {
            UnitBehaviorAddPlayer(auto0AB4C52D_var, "RaynorWeaponAdd222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_rySubWeapon == 3)) {
            UnitBehaviorAddPlayer(auto0AB4C52D_var, "RaynorWeaponAdd22", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryAuxiliaryEquipment == 1)) {
            UnitBehaviorAddPlayer(auto0AB4C52D_var, "RaynorWeaponAdd2222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryAuxiliaryEquipment == 2)) {
            UnitBehaviorAddPlayer(auto0AB4C52D_var, "RaynorWeaponAdd22222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryAuxiliaryEquipment == 3)) {
            UnitBehaviorAddPlayer(auto0AB4C52D_var, "RaynorWeaponAdd222222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99BB7E8AFBAE4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3_Init () {
    libNEXS_gt_E99BB7E8AFBAE4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3 = TriggerCreate("libNEXS_gt_E99BB7E8AFBAE4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3_Func");
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E99BB7E8AFBAE4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3, null, "UnknownBehavior253", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????????????????????????? - ??????3
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99BB7E8AFBAE38081E587AFE7919EE79498E6ADBBE4BAA1E4B88EE8A1A5E7BB99E5BA93E691A7E6AF81E5A881E69C9B3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoCCFA6483_g;
    int autoCCFA6483_u;
    unit autoCCFA6483_var;
    unitgroup auto1EAAF1DE_g;
    int auto1EAAF1DE_u;
    unit auto1EAAF1DE_var;
    unitgroup autoD5252602_g;
    int autoD5252602_u;
    unit autoD5252602_var;
    unitgroup auto2427D795_g;
    int auto2427D795_u;
    unit auto2427D795_var;
    unitgroup auto7ADA4EAC_g;
    int auto7ADA4EAC_u;
    unit auto7ADA4EAC_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitDamageDeathCheck(c_deathTypeMorph) != true) && (EventUnitDamageDeathCheck(c_deathTypeCancel) != true) && (EventUnitDamageDeathCheck(c_deathTypeRemove) != true) && ((UnitGetType(EventUnit()) == "TychusCommando2") || (UnitGetType(EventUnit()) == "RaynorCommando22") || (UnitGetType(EventUnit()) == "RaynorCommando2"))) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_3CEF8B42"));
        UnitGroupClear(libNEXS_gv_raynorHERO);
        autoCCFA6483_g = UnitGroup("ReigelArmory", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoCCFA6483_u = UnitGroupCount(autoCCFA6483_g, c_unitCountAll);
        for (;; autoCCFA6483_u -= 1) {
            autoCCFA6483_var = UnitGroupUnitFromEnd(autoCCFA6483_g, autoCCFA6483_u);
            if (autoCCFA6483_var == null) { break; }
            UnitBehaviorAddPlayer(autoCCFA6483_var, "PermanentlyUncommandable2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }
        auto1EAAF1DE_g = UnitGroup("ReigelArmory2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1EAAF1DE_u = UnitGroupCount(auto1EAAF1DE_g, c_unitCountAll);
        for (;; auto1EAAF1DE_u -= 1) {
            auto1EAAF1DE_var = UnitGroupUnitFromEnd(auto1EAAF1DE_g, auto1EAAF1DE_u);
            if (auto1EAAF1DE_var == null) { break; }
            UnitBehaviorAddPlayer(auto1EAAF1DE_var, "PermanentlyUncommandable2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }
        autoD5252602_g = UnitGroup("TychusCommando22", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoD5252602_u = UnitGroupCount(autoD5252602_g, c_unitCountAll);
        for (;; autoD5252602_u -= 1) {
            autoD5252602_var = UnitGroupUnitFromEnd(autoD5252602_g, autoD5252602_u);
            if (autoD5252602_var == null) { break; }
            UnitKill(autoD5252602_var);
        }
        auto2427D795_g = UnitGroup("HERC2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto2427D795_u = UnitGroupCount(auto2427D795_g, c_unitCountAll);
        for (;; auto2427D795_u -= 1) {
            auto2427D795_var = UnitGroupUnitFromEnd(auto2427D795_g, auto2427D795_u);
            if (auto2427D795_var == null) { break; }
            UnitKill(auto2427D795_var);
        }
        auto7ADA4EAC_g = UnitGroup("TychusCommando222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto7ADA4EAC_u = UnitGroupCount(auto7ADA4EAC_g, c_unitCountAll);
        for (;; auto7ADA4EAC_u -= 1) {
            auto7ADA4EAC_var = UnitGroupUnitFromEnd(auto7ADA4EAC_g, auto7ADA4EAC_u);
            if (auto7ADA4EAC_var == null) { break; }
            UnitKill(auto7ADA4EAC_var);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PlaceWormholeUnit23233", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, libNEXS_gv_ryBeaconPosition);
    }

    if ((UnitGetType(EventUnit()) == "ReigelAmmunitionDepot")) {
        UnitGroupClear(libNEXS_gv_raynorArmory);
    }

    if ((EventUnitDamageDeathCheck(c_deathTypeMorph) != true) && (EventUnitDamageDeathCheck(c_deathTypeCancel) != true) && (EventUnitDamageDeathCheck(c_deathTypeRemove) != true) && ((UnitGetType(EventUnit()) == "KerriganGhostLab2"))) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_95ED770B"));
        UnitGroupClear(libNEXS_gv_raynorKerrigan);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99BB7E8AFBAE38081E587AFE7919EE79498E6ADBBE4BAA1E4B88EE8A1A5E7BB99E5BA93E691A7E6AF81E5A881E69C9B3_Init () {
    libNEXS_gt_E99BB7E8AFBAE38081E587AFE7919EE79498E6ADBBE4BAA1E4B88EE8A1A5E7BB99E5BA93E691A7E6AF81E5A881E69C9B3 = TriggerCreate("libNEXS_gt_E99BB7E8AFBAE38081E587AFE7919EE79498E6ADBBE4BAA1E4B88EE8A1A5E7BB99E5BA93E691A7E6AF81E5A881E69C9B3_Func");
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE38081E587AFE7919EE79498E6ADBBE4BAA1E4B88EE8A1A5E7BB99E5BA93E691A7E6AF81E5A881E69C9B3, false);
    TriggerAddEventUnitDied(libNEXS_gt_E99BB7E8AFBAE38081E587AFE7919EE79498E6ADBBE4BAA1E4B88EE8A1A5E7BB99E5BA93E691A7E6AF81E5A881E69C9B3, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????? - ??????3
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8A385E794B2E4BCA0E98081E8A385E5A487E5A881E69C9B3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoAA0133C5_g;
    int autoAA0133C5_u;
    unit autoAA0133C5_var;
    unitgroup auto213425F8_g;
    int auto213425F8_u;
    unit auto213425F8_var;
    unitgroup auto61DE13E0_g;
    int auto61DE13E0_u;
    unit auto61DE13E0_var;
    unitgroup autoE74C4F1E_g;
    int autoE74C4F1E_u;
    unit autoE74C4F1E_var;
    unitgroup autoD96CA1BB_g;
    int autoD96CA1BB_u;
    unit autoD96CA1BB_var;
    unitgroup auto1F23B3D7_g;
    int auto1F23B3D7_u;
    unit auto1F23B3D7_var;
    unitgroup auto3EED2B0E_g;
    int auto3EED2B0E_u;
    unit auto3EED2B0E_var;
    unitgroup auto3F10FBC4_g;
    int auto3F10FBC4_u;
    unit auto3F10FBC4_var;
    unitgroup autoF4D2C4A2_g;
    int autoF4D2C4A2_u;
    unit autoF4D2C4A2_var;
    unitgroup autoB4501AAF_g;
    int autoB4501AAF_u;
    unit autoB4501AAF_var;
    unitgroup autoF5E74D94_g;
    int autoF5E74D94_u;
    unit autoF5E74D94_var;
    unitgroup autoDA8EDDAE_g;
    int autoDA8EDDAE_u;
    unit autoDA8EDDAE_var;
    unitgroup auto33A9660F_g;
    int auto33A9660F_u;
    unit auto33A9660F_var;
    unitgroup auto7FBDFC82_g;
    int auto7FBDFC82_u;
    unit auto7FBDFC82_var;
    unitgroup autoF3BA6987_g;
    int autoF3BA6987_u;
    unit autoF3BA6987_var;
    unitgroup auto6DB027AE_g;
    int auto6DB027AE_u;
    unit auto6DB027AE_var;
    unitgroup auto96BF9BE7_g;
    int auto96BF9BE7_u;
    unit auto96BF9BE7_var;
    unitgroup auto30DE5DDF_g;
    int auto30DE5DDF_u;
    unit auto30DE5DDF_var;
    unitgroup autoAB717B0A_g;
    int autoAB717B0A_u;
    unit autoAB717B0A_var;
    unitgroup auto101E8B0E_g;
    int auto101E8B0E_u;
    unit auto101E8B0E_var;
    unitgroup autoDD679B59_g;
    int autoDD679B59_u;
    unit autoDD679B59_var;
    unitgroup autoE343EB07_g;
    int autoE343EB07_u;
    unit autoE343EB07_var;
    unitgroup auto2B2C3F88_g;
    int auto2B2C3F88_u;
    unit auto2B2C3F88_var;
    unitgroup auto5BBA3849_g;
    int auto5BBA3849_u;
    unit auto5BBA3849_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "ReigelArmory")) {
        if ((EventUnitAbility() == AbilityCommand("VoodooShield4223", 0))) {
            autoAA0133C5_g = libNEXS_gv_raynorHERC;
            autoAA0133C5_u = UnitGroupCount(autoAA0133C5_g, c_unitCountAll);
            for (;; autoAA0133C5_u -= 1) {
                autoAA0133C5_var = UnitGroupUnitFromEnd(autoAA0133C5_g, autoAA0133C5_u);
                if (autoAA0133C5_var == null) { break; }
                UnitCreateEffectUnit(autoAA0133C5_var, "RaynorTeleportWeapon3", autoAA0133C5_var);
                UnitCreateEffectUnit(autoAA0133C5_var, "VoodooShieldSet42", autoAA0133C5_var);
            }
            auto213425F8_g = libNEXS_gv_raynorDOOM;
            auto213425F8_u = UnitGroupCount(auto213425F8_g, c_unitCountAll);
            for (;; auto213425F8_u -= 1) {
                auto213425F8_var = UnitGroupUnitFromEnd(auto213425F8_g, auto213425F8_u);
                if (auto213425F8_var == null) { break; }
                UnitCreateEffectUnit(auto213425F8_var, "RaynorTeleportWeapon3", auto213425F8_var);
                UnitCreateEffectUnit(auto213425F8_var, "VoodooShieldSet42", auto213425F8_var);
            }
            auto61DE13E0_g = libNEXS_gv_raynorIRON;
            auto61DE13E0_u = UnitGroupCount(auto61DE13E0_g, c_unitCountAll);
            for (;; auto61DE13E0_u -= 1) {
                auto61DE13E0_var = UnitGroupUnitFromEnd(auto61DE13E0_g, auto61DE13E0_u);
                if (auto61DE13E0_var == null) { break; }
                UnitCreateEffectUnit(auto61DE13E0_var, "RaynorTeleportWeapon3", auto61DE13E0_var);
                UnitCreateEffectUnit(auto61DE13E0_var, "VoodooShieldSet42", auto61DE13E0_var);
            }
            autoE74C4F1E_g = libNEXS_gv_raynorArmory3;
            autoE74C4F1E_u = UnitGroupCount(autoE74C4F1E_g, c_unitCountAll);
            for (;; autoE74C4F1E_u -= 1) {
                autoE74C4F1E_var = UnitGroupUnitFromEnd(autoE74C4F1E_g, autoE74C4F1E_u);
                if (autoE74C4F1E_var == null) { break; }
                UnitCreateEffectUnit(autoE74C4F1E_var, "RaynorTeleportWeapon3", autoE74C4F1E_var);
            }
            libNEXS_gv_rySubWeapon3 = 1;
        }

        if ((EventUnitAbility() == AbilityCommand("VoodooShield42232", 0))) {
            autoD96CA1BB_g = libNEXS_gv_raynorHERC;
            autoD96CA1BB_u = UnitGroupCount(autoD96CA1BB_g, c_unitCountAll);
            for (;; autoD96CA1BB_u -= 1) {
                autoD96CA1BB_var = UnitGroupUnitFromEnd(autoD96CA1BB_g, autoD96CA1BB_u);
                if (autoD96CA1BB_var == null) { break; }
                UnitCreateEffectUnit(autoD96CA1BB_var, "RaynorTeleportWeapon32", autoD96CA1BB_var);
                UnitCreateEffectUnit(autoD96CA1BB_var, "VoodooShieldSet42", autoD96CA1BB_var);
            }
            auto1F23B3D7_g = libNEXS_gv_raynorDOOM;
            auto1F23B3D7_u = UnitGroupCount(auto1F23B3D7_g, c_unitCountAll);
            for (;; auto1F23B3D7_u -= 1) {
                auto1F23B3D7_var = UnitGroupUnitFromEnd(auto1F23B3D7_g, auto1F23B3D7_u);
                if (auto1F23B3D7_var == null) { break; }
                UnitCreateEffectUnit(auto1F23B3D7_var, "RaynorTeleportWeapon32", auto1F23B3D7_var);
                UnitCreateEffectUnit(auto1F23B3D7_var, "VoodooShieldSet42", auto1F23B3D7_var);
            }
            auto3EED2B0E_g = libNEXS_gv_raynorIRON;
            auto3EED2B0E_u = UnitGroupCount(auto3EED2B0E_g, c_unitCountAll);
            for (;; auto3EED2B0E_u -= 1) {
                auto3EED2B0E_var = UnitGroupUnitFromEnd(auto3EED2B0E_g, auto3EED2B0E_u);
                if (auto3EED2B0E_var == null) { break; }
                UnitCreateEffectUnit(auto3EED2B0E_var, "RaynorTeleportWeapon32", auto3EED2B0E_var);
                UnitCreateEffectUnit(auto3EED2B0E_var, "VoodooShieldSet42", auto3EED2B0E_var);
            }
            auto3F10FBC4_g = libNEXS_gv_raynorArmory3;
            auto3F10FBC4_u = UnitGroupCount(auto3F10FBC4_g, c_unitCountAll);
            for (;; auto3F10FBC4_u -= 1) {
                auto3F10FBC4_var = UnitGroupUnitFromEnd(auto3F10FBC4_g, auto3F10FBC4_u);
                if (auto3F10FBC4_var == null) { break; }
                UnitCreateEffectUnit(auto3F10FBC4_var, "RaynorTeleportWeapon32", auto3F10FBC4_var);
            }
            libNEXS_gv_rySubWeapon3 = 2;
        }

        if ((EventUnitAbility() == AbilityCommand("VoodooShield422322", 0))) {
            autoF4D2C4A2_g = libNEXS_gv_raynorHERC;
            autoF4D2C4A2_u = UnitGroupCount(autoF4D2C4A2_g, c_unitCountAll);
            for (;; autoF4D2C4A2_u -= 1) {
                autoF4D2C4A2_var = UnitGroupUnitFromEnd(autoF4D2C4A2_g, autoF4D2C4A2_u);
                if (autoF4D2C4A2_var == null) { break; }
                UnitCreateEffectUnit(autoF4D2C4A2_var, "RaynorTeleportWeapon322", autoF4D2C4A2_var);
                UnitCreateEffectUnit(autoF4D2C4A2_var, "VoodooShieldSet42", autoF4D2C4A2_var);
            }
            autoB4501AAF_g = libNEXS_gv_raynorDOOM;
            autoB4501AAF_u = UnitGroupCount(autoB4501AAF_g, c_unitCountAll);
            for (;; autoB4501AAF_u -= 1) {
                autoB4501AAF_var = UnitGroupUnitFromEnd(autoB4501AAF_g, autoB4501AAF_u);
                if (autoB4501AAF_var == null) { break; }
                UnitCreateEffectUnit(autoB4501AAF_var, "RaynorTeleportWeapon322", autoB4501AAF_var);
                UnitCreateEffectUnit(autoB4501AAF_var, "VoodooShieldSet42", autoB4501AAF_var);
            }
            autoF5E74D94_g = libNEXS_gv_raynorIRON;
            autoF5E74D94_u = UnitGroupCount(autoF5E74D94_g, c_unitCountAll);
            for (;; autoF5E74D94_u -= 1) {
                autoF5E74D94_var = UnitGroupUnitFromEnd(autoF5E74D94_g, autoF5E74D94_u);
                if (autoF5E74D94_var == null) { break; }
                UnitCreateEffectUnit(autoF5E74D94_var, "RaynorTeleportWeapon322", autoF5E74D94_var);
                UnitCreateEffectUnit(autoF5E74D94_var, "VoodooShieldSet42", autoF5E74D94_var);
            }
            autoDA8EDDAE_g = libNEXS_gv_raynorArmory3;
            autoDA8EDDAE_u = UnitGroupCount(autoDA8EDDAE_g, c_unitCountAll);
            for (;; autoDA8EDDAE_u -= 1) {
                autoDA8EDDAE_var = UnitGroupUnitFromEnd(autoDA8EDDAE_g, autoDA8EDDAE_u);
                if (autoDA8EDDAE_var == null) { break; }
                UnitCreateEffectUnit(autoDA8EDDAE_var, "RaynorTeleportWeapon322", autoDA8EDDAE_var);
            }
            libNEXS_gv_rySubWeapon3 = 3;
        }

        if ((EventUnitAbility() == AbilityCommand("VoodooShield4223222", 0))) {
            auto33A9660F_g = libNEXS_gv_raynorHERC;
            auto33A9660F_u = UnitGroupCount(auto33A9660F_g, c_unitCountAll);
            for (;; auto33A9660F_u -= 1) {
                auto33A9660F_var = UnitGroupUnitFromEnd(auto33A9660F_g, auto33A9660F_u);
                if (auto33A9660F_var == null) { break; }
                UnitCreateEffectUnit(auto33A9660F_var, "RaynorTeleportWeapon3222", auto33A9660F_var);
                UnitCreateEffectUnit(auto33A9660F_var, "VoodooShieldSet42", auto33A9660F_var);
            }
            auto7FBDFC82_g = libNEXS_gv_raynorDOOM;
            auto7FBDFC82_u = UnitGroupCount(auto7FBDFC82_g, c_unitCountAll);
            for (;; auto7FBDFC82_u -= 1) {
                auto7FBDFC82_var = UnitGroupUnitFromEnd(auto7FBDFC82_g, auto7FBDFC82_u);
                if (auto7FBDFC82_var == null) { break; }
                UnitCreateEffectUnit(auto7FBDFC82_var, "RaynorTeleportWeapon3222", auto7FBDFC82_var);
                UnitCreateEffectUnit(auto7FBDFC82_var, "VoodooShieldSet42", auto7FBDFC82_var);
            }
            autoF3BA6987_g = libNEXS_gv_raynorIRON;
            autoF3BA6987_u = UnitGroupCount(autoF3BA6987_g, c_unitCountAll);
            for (;; autoF3BA6987_u -= 1) {
                autoF3BA6987_var = UnitGroupUnitFromEnd(autoF3BA6987_g, autoF3BA6987_u);
                if (autoF3BA6987_var == null) { break; }
                UnitCreateEffectUnit(autoF3BA6987_var, "RaynorTeleportWeapon3222", autoF3BA6987_var);
                UnitCreateEffectUnit(autoF3BA6987_var, "VoodooShieldSet42", autoF3BA6987_var);
            }
            auto6DB027AE_g = libNEXS_gv_raynorArmory3;
            auto6DB027AE_u = UnitGroupCount(auto6DB027AE_g, c_unitCountAll);
            for (;; auto6DB027AE_u -= 1) {
                auto6DB027AE_var = UnitGroupUnitFromEnd(auto6DB027AE_g, auto6DB027AE_u);
                if (auto6DB027AE_var == null) { break; }
                UnitCreateEffectUnit(auto6DB027AE_var, "RaynorTeleportWeapon3222", auto6DB027AE_var);
            }
            libNEXS_gv_ryAuxiliaryEquipment3 = 1;
        }

        if ((EventUnitAbility() == AbilityCommand("VoodooShield42232222", 0))) {
            auto96BF9BE7_g = libNEXS_gv_raynorHERC;
            auto96BF9BE7_u = UnitGroupCount(auto96BF9BE7_g, c_unitCountAll);
            for (;; auto96BF9BE7_u -= 1) {
                auto96BF9BE7_var = UnitGroupUnitFromEnd(auto96BF9BE7_g, auto96BF9BE7_u);
                if (auto96BF9BE7_var == null) { break; }
                UnitCreateEffectUnit(auto96BF9BE7_var, "RaynorTeleportWeapon32222", auto96BF9BE7_var);
                UnitCreateEffectUnit(auto96BF9BE7_var, "VoodooShieldSet42", auto96BF9BE7_var);
            }
            auto30DE5DDF_g = libNEXS_gv_raynorDOOM;
            auto30DE5DDF_u = UnitGroupCount(auto30DE5DDF_g, c_unitCountAll);
            for (;; auto30DE5DDF_u -= 1) {
                auto30DE5DDF_var = UnitGroupUnitFromEnd(auto30DE5DDF_g, auto30DE5DDF_u);
                if (auto30DE5DDF_var == null) { break; }
                UnitCreateEffectUnit(auto30DE5DDF_var, "RaynorTeleportWeapon32222", auto30DE5DDF_var);
                UnitCreateEffectUnit(auto30DE5DDF_var, "VoodooShieldSet42", auto30DE5DDF_var);
            }
            autoAB717B0A_g = libNEXS_gv_raynorIRON;
            autoAB717B0A_u = UnitGroupCount(autoAB717B0A_g, c_unitCountAll);
            for (;; autoAB717B0A_u -= 1) {
                autoAB717B0A_var = UnitGroupUnitFromEnd(autoAB717B0A_g, autoAB717B0A_u);
                if (autoAB717B0A_var == null) { break; }
                UnitCreateEffectUnit(autoAB717B0A_var, "RaynorTeleportWeapon32222", autoAB717B0A_var);
                UnitCreateEffectUnit(autoAB717B0A_var, "VoodooShieldSet42", autoAB717B0A_var);
            }
            auto101E8B0E_g = libNEXS_gv_raynorArmory3;
            auto101E8B0E_u = UnitGroupCount(auto101E8B0E_g, c_unitCountAll);
            for (;; auto101E8B0E_u -= 1) {
                auto101E8B0E_var = UnitGroupUnitFromEnd(auto101E8B0E_g, auto101E8B0E_u);
                if (auto101E8B0E_var == null) { break; }
                UnitCreateEffectUnit(auto101E8B0E_var, "RaynorTeleportWeapon32222", auto101E8B0E_var);
            }
            libNEXS_gv_ryAuxiliaryEquipment3 = 2;
        }

        if ((EventUnitAbility() == AbilityCommand("VoodooShield422322222", 0))) {
            autoDD679B59_g = libNEXS_gv_raynorHERC;
            autoDD679B59_u = UnitGroupCount(autoDD679B59_g, c_unitCountAll);
            for (;; autoDD679B59_u -= 1) {
                autoDD679B59_var = UnitGroupUnitFromEnd(autoDD679B59_g, autoDD679B59_u);
                if (autoDD679B59_var == null) { break; }
                UnitCreateEffectUnit(autoDD679B59_var, "RaynorTeleportWeapon322222", autoDD679B59_var);
                UnitCreateEffectUnit(autoDD679B59_var, "VoodooShieldSet42", autoDD679B59_var);
            }
            autoE343EB07_g = libNEXS_gv_raynorDOOM;
            autoE343EB07_u = UnitGroupCount(autoE343EB07_g, c_unitCountAll);
            for (;; autoE343EB07_u -= 1) {
                autoE343EB07_var = UnitGroupUnitFromEnd(autoE343EB07_g, autoE343EB07_u);
                if (autoE343EB07_var == null) { break; }
                UnitCreateEffectUnit(autoE343EB07_var, "RaynorTeleportWeapon322222", autoE343EB07_var);
                UnitCreateEffectUnit(autoE343EB07_var, "VoodooShieldSet42", autoE343EB07_var);
            }
            auto2B2C3F88_g = libNEXS_gv_raynorIRON;
            auto2B2C3F88_u = UnitGroupCount(auto2B2C3F88_g, c_unitCountAll);
            for (;; auto2B2C3F88_u -= 1) {
                auto2B2C3F88_var = UnitGroupUnitFromEnd(auto2B2C3F88_g, auto2B2C3F88_u);
                if (auto2B2C3F88_var == null) { break; }
                UnitCreateEffectUnit(auto2B2C3F88_var, "RaynorTeleportWeapon322222", auto2B2C3F88_var);
                UnitCreateEffectUnit(auto2B2C3F88_var, "VoodooShieldSet42", auto2B2C3F88_var);
            }
            auto5BBA3849_g = libNEXS_gv_raynorArmory3;
            auto5BBA3849_u = UnitGroupCount(auto5BBA3849_g, c_unitCountAll);
            for (;; auto5BBA3849_u -= 1) {
                auto5BBA3849_var = UnitGroupUnitFromEnd(auto5BBA3849_g, auto5BBA3849_u);
                if (auto5BBA3849_var == null) { break; }
                UnitCreateEffectUnit(auto5BBA3849_var, "RaynorTeleportWeapon322222", auto5BBA3849_var);
            }
            libNEXS_gv_ryAuxiliaryEquipment3 = 3;
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8A385E794B2E4BCA0E98081E8A385E5A487E5A881E69C9B3_Init () {
    libNEXS_gt_E8A385E794B2E4BCA0E98081E8A385E5A487E5A881E69C9B3 = TriggerCreate("libNEXS_gt_E8A385E794B2E4BCA0E98081E8A385E5A487E5A881E69C9B3_Func");
    TriggerEnable(libNEXS_gt_E8A385E794B2E4BCA0E98081E8A385E5A487E5A881E69C9B3, false);
    TriggerAddEventUnitAbility(libNEXS_gt_E8A385E794B2E4BCA0E98081E8A385E5A487E5A881E69C9B3, null, null, c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????? - ??????3
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8B685E7BAA7E8B5ABE5858BE4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6F2A37D6_g;
    int auto6F2A37D6_u;
    unit auto6F2A37D6_var;
    unitgroup autoB2AC5541_g;
    int autoB2AC5541_u;
    unit autoB2AC5541_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libNEXS_gv_raynorHERC, EventUnit());
    libNEXS_gf_SetHeroPanelUnit(1, EventUnit(), libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11);
    UnitSetHeight(EventUnit(), 2.0, 0.0);
    UnitSetHeight(EventUnit(), 0.0, 0.5);
    auto6F2A37D6_g = UnitGroup("PlaceWormholeUnitHERC", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6F2A37D6_u = UnitGroupCount(auto6F2A37D6_g, c_unitCountAll);
    for (;; auto6F2A37D6_u -= 1) {
        auto6F2A37D6_var = UnitGroupUnitFromEnd(auto6F2A37D6_g, auto6F2A37D6_u);
        if (auto6F2A37D6_var == null) { break; }
        libNEXS_gv_ryBeaconPositionHERC = UnitGetPosition(auto6F2A37D6_var);
    }
    if ((libNEXS_gv_raynorReviveTimesHERC == 0)) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_CCB735D0"));
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorNV22", 1);
        libNEXS_gv_raynorReviveTimesHERC = 1;
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_2632ECBB"));
    }
    autoB2AC5541_g = libNEXS_gv_raynorHERC;
    autoB2AC5541_u = UnitGroupCount(autoB2AC5541_g, c_unitCountAll);
    for (;; autoB2AC5541_u -= 1) {
        autoB2AC5541_var = UnitGroupUnitFromEnd(autoB2AC5541_g, autoB2AC5541_u);
        if (autoB2AC5541_var == null) { break; }
        if ((libNEXS_gv_rySubWeapon3 == 1)) {
            UnitBehaviorAddPlayer(autoB2AC5541_var, "RaynorWeaponAdd2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_rySubWeapon3 == 2)) {
            UnitBehaviorAddPlayer(autoB2AC5541_var, "RaynorWeaponAdd222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_rySubWeapon3 == 3)) {
            UnitBehaviorAddPlayer(autoB2AC5541_var, "RaynorWeaponAdd22", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryAuxiliaryEquipment3 == 1)) {
            UnitBehaviorAddPlayer(autoB2AC5541_var, "RaynorWeaponAdd2222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryAuxiliaryEquipment3 == 2)) {
            UnitBehaviorAddPlayer(autoB2AC5541_var, "RaynorWeaponAdd22222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryAuxiliaryEquipment3 == 3)) {
            UnitBehaviorAddPlayer(autoB2AC5541_var, "RaynorWeaponAdd222222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8B685E7BAA7E8B5ABE5858BE4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3_Init () {
    libNEXS_gt_E8B685E7BAA7E8B5ABE5858BE4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3 = TriggerCreate("libNEXS_gt_E8B685E7BAA7E8B5ABE5858BE4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3_Func");
    TriggerEnable(libNEXS_gt_E8B685E7BAA7E8B5ABE5858BE4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E8B685E7BAA7E8B5ABE5858BE4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3, null, "RaynorBeaconReviveBehaviorHERC", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????? - ??????3
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8B685E7BAA7E8B5ABE5858BE8A2ABE691A7E6AF81E5A881E69C9B3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitDamageDeathCheck(c_deathTypeMorph) != true) && (EventUnitDamageDeathCheck(c_deathTypeCancel) != true) && (EventUnitDamageDeathCheck(c_deathTypeRemove) != true) && ((UnitGetType(EventUnit()) == "HERC2"))) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_629FDF25"));
        UnitGroupClear(libNEXS_gv_raynorHERC);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PlaceWormholeUnitHERCM", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, libNEXS_gv_ryBeaconPositionHERC);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8B685E7BAA7E8B5ABE5858BE8A2ABE691A7E6AF81E5A881E69C9B3_Init () {
    libNEXS_gt_E8B685E7BAA7E8B5ABE5858BE8A2ABE691A7E6AF81E5A881E69C9B3 = TriggerCreate("libNEXS_gt_E8B685E7BAA7E8B5ABE5858BE8A2ABE691A7E6AF81E5A881E69C9B3_Func");
    TriggerEnable(libNEXS_gt_E8B685E7BAA7E8B5ABE5858BE8A2ABE691A7E6AF81E5A881E69C9B3, false);
    TriggerAddEventUnitDied(libNEXS_gt_E8B685E7BAA7E8B5ABE5858BE8A2ABE691A7E6AF81E5A881E69C9B3, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????? - ??????3
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6AF81E781ADE68898E5A3ABE4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9DCA32EA_g;
    int auto9DCA32EA_u;
    unit auto9DCA32EA_var;
    unitgroup auto325CE24A_g;
    int auto325CE24A_u;
    unit auto325CE24A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libNEXS_gv_raynorDOOM, EventUnit());
    libNEXS_gf_SetHeroPanelUnit(1, EventUnit(), libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11);
    UnitSetHeight(EventUnit(), 2.0, 0.0);
    UnitSetHeight(EventUnit(), 0.0, 0.5);
    auto9DCA32EA_g = UnitGroup("PlaceWormholeUnitDOOM", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9DCA32EA_u = UnitGroupCount(auto9DCA32EA_g, c_unitCountAll);
    for (;; auto9DCA32EA_u -= 1) {
        auto9DCA32EA_var = UnitGroupUnitFromEnd(auto9DCA32EA_g, auto9DCA32EA_u);
        if (auto9DCA32EA_var == null) { break; }
        libNEXS_gv_ryBeaconPositionDOOM = UnitGetPosition(auto9DCA32EA_var);
    }
    if ((libNEXS_gv_raynorReviveTimesDOOM == 0)) {
        libNEXS_gv_raynorReviveTimesDOOM = 1;
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_461ADF41"));
    }
    auto325CE24A_g = libNEXS_gv_raynorDOOM;
    auto325CE24A_u = UnitGroupCount(auto325CE24A_g, c_unitCountAll);
    for (;; auto325CE24A_u -= 1) {
        auto325CE24A_var = UnitGroupUnitFromEnd(auto325CE24A_g, auto325CE24A_u);
        if (auto325CE24A_var == null) { break; }
        if ((libNEXS_gv_rySubWeapon3 == 1)) {
            UnitBehaviorAddPlayer(auto325CE24A_var, "RaynorWeaponAdd2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_rySubWeapon3 == 2)) {
            UnitBehaviorAddPlayer(auto325CE24A_var, "RaynorWeaponAdd222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_rySubWeapon3 == 3)) {
            UnitBehaviorAddPlayer(auto325CE24A_var, "RaynorWeaponAdd22", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryAuxiliaryEquipment3 == 1)) {
            UnitBehaviorAddPlayer(auto325CE24A_var, "RaynorWeaponAdd2222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryAuxiliaryEquipment3 == 2)) {
            UnitBehaviorAddPlayer(auto325CE24A_var, "RaynorWeaponAdd22222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryAuxiliaryEquipment3 == 3)) {
            UnitBehaviorAddPlayer(auto325CE24A_var, "RaynorWeaponAdd222222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6AF81E781ADE68898E5A3ABE4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3_Init () {
    libNEXS_gt_E6AF81E781ADE68898E5A3ABE4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3 = TriggerCreate("libNEXS_gt_E6AF81E781ADE68898E5A3ABE4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3_Func");
    TriggerEnable(libNEXS_gt_E6AF81E781ADE68898E5A3ABE4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E6AF81E781ADE68898E5A3ABE4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3, null, "RaynorBeaconReviveBehaviorDOOM", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????? - ??????3
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6AF81E781ADE68898E5A3ABE8A2ABE691A7E6AF81E5A881E69C9B3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitDamageDeathCheck(c_deathTypeMorph) != true) && (EventUnitDamageDeathCheck(c_deathTypeCancel) != true) && (EventUnitDamageDeathCheck(c_deathTypeRemove) != true) && ((UnitGetType(EventUnit()) == "TychusCommando22"))) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_160E20B1"));
        UnitGroupClear(libNEXS_gv_raynorDOOM);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PlaceWormholeUnitDOOMS", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, libNEXS_gv_ryBeaconPositionDOOM);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6AF81E781ADE68898E5A3ABE8A2ABE691A7E6AF81E5A881E69C9B3_Init () {
    libNEXS_gt_E6AF81E781ADE68898E5A3ABE8A2ABE691A7E6AF81E5A881E69C9B3 = TriggerCreate("libNEXS_gt_E6AF81E781ADE68898E5A3ABE8A2ABE691A7E6AF81E5A881E69C9B3_Func");
    TriggerEnable(libNEXS_gt_E6AF81E781ADE68898E5A3ABE8A2ABE691A7E6AF81E5A881E69C9B3, false);
    TriggerAddEventUnitDied(libNEXS_gt_E6AF81E781ADE68898E5A3ABE8A2ABE691A7E6AF81E5A881E69C9B3, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????? - ??????3
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E992A2E99381E8A385E794B2E4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto532BCE58_g;
    int auto532BCE58_u;
    unit auto532BCE58_var;
    unitgroup autoC506C972_g;
    int autoC506C972_u;
    unit autoC506C972_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libNEXS_gv_raynorIRON, EventUnit());
    libNEXS_gf_SetHeroPanelUnit(1, EventUnit(), libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11);
    UnitSetHeight(EventUnit(), 2.0, 0.0);
    UnitSetHeight(EventUnit(), 0.0, 0.5);
    auto532BCE58_g = UnitGroup("PlaceWormholeUnitIRON", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto532BCE58_u = UnitGroupCount(auto532BCE58_g, c_unitCountAll);
    for (;; auto532BCE58_u -= 1) {
        auto532BCE58_var = UnitGroupUnitFromEnd(auto532BCE58_g, auto532BCE58_u);
        if (auto532BCE58_var == null) { break; }
        libNEXS_gv_ryBeaconPositionIRON = UnitGetPosition(auto532BCE58_var);
    }
    if ((libNEXS_gv_raynorReviveTimesIRON == 0)) {
        libNEXS_gv_raynorReviveTimesIRON = 1;
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_4126285D"));
    }
    autoC506C972_g = libNEXS_gv_raynorIRON;
    autoC506C972_u = UnitGroupCount(autoC506C972_g, c_unitCountAll);
    for (;; autoC506C972_u -= 1) {
        autoC506C972_var = UnitGroupUnitFromEnd(autoC506C972_g, autoC506C972_u);
        if (autoC506C972_var == null) { break; }
        if ((libNEXS_gv_rySubWeapon3 == 1)) {
            UnitBehaviorAddPlayer(autoC506C972_var, "RaynorWeaponAdd2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_rySubWeapon3 == 2)) {
            UnitBehaviorAddPlayer(autoC506C972_var, "RaynorWeaponAdd222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_rySubWeapon3 == 3)) {
            UnitBehaviorAddPlayer(autoC506C972_var, "RaynorWeaponAdd22", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryAuxiliaryEquipment3 == 1)) {
            UnitBehaviorAddPlayer(autoC506C972_var, "RaynorWeaponAdd2222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryAuxiliaryEquipment3 == 2)) {
            UnitBehaviorAddPlayer(autoC506C972_var, "RaynorWeaponAdd22222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryAuxiliaryEquipment3 == 3)) {
            UnitBehaviorAddPlayer(autoC506C972_var, "RaynorWeaponAdd222222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E992A2E99381E8A385E794B2E4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3_Init () {
    libNEXS_gt_E992A2E99381E8A385E794B2E4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3 = TriggerCreate("libNEXS_gt_E992A2E99381E8A385E794B2E4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3_Func");
    TriggerEnable(libNEXS_gt_E992A2E99381E8A385E794B2E4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E992A2E99381E8A385E794B2E4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3, null, "RaynorBeaconReviveBehaviorIRON", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????? - ??????3
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E992A2E99381E8A385E794B2E8A2ABE691A7E6AF81E5A881E69C9B3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitDamageDeathCheck(c_deathTypeMorph) != true) && (EventUnitDamageDeathCheck(c_deathTypeCancel) != true) && (EventUnitDamageDeathCheck(c_deathTypeRemove) != true) && ((UnitGetType(EventUnit()) == "TychusCommando222"))) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_4383ED7D"));
        UnitGroupClear(libNEXS_gv_raynorIRON);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PlaceWormholeUnitIRONM", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, libNEXS_gv_ryBeaconPositionIRON);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E992A2E99381E8A385E794B2E8A2ABE691A7E6AF81E5A881E69C9B3_Init () {
    libNEXS_gt_E992A2E99381E8A385E794B2E8A2ABE691A7E6AF81E5A881E69C9B3 = TriggerCreate("libNEXS_gt_E992A2E99381E8A385E794B2E8A2ABE691A7E6AF81E5A881E69C9B3_Func");
    TriggerEnable(libNEXS_gt_E992A2E99381E8A385E794B2E8A2ABE691A7E6AF81E5A881E69C9B3, false);
    TriggerAddEventUnitDied(libNEXS_gt_E992A2E99381E8A385E794B2E8A2ABE691A7E6AF81E5A881E69C9B3, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????3??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99BB7E8AFBAE5A881E69C9B3E5BC80E590AF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD2CD1126_g;
    int autoD2CD1126_u;
    unit autoD2CD1126_var;
    unitgroup auto8B67E76E_g;
    int auto8B67E76E_u;
    unit auto8B67E76E_var;
    unitgroup auto2F2EF6E1_g;
    int auto2F2EF6E1_u;
    unit auto2F2EF6E1_var;
    unitgroup auto5126426D_g;
    int auto5126426D_u;
    unit auto5126426D_var;
    unitgroup autoECCF1A76_g;
    int autoECCF1A76_u;
    unit autoECCF1A76_var;
    unitgroup auto6BB118E6_g;
    int auto6BB118E6_u;
    unit auto6BB118E6_var;
    unitgroup autoCC4542A9_g;
    int autoCC4542A9_u;
    unit autoCC4542A9_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE5A881E69C9B2E5BC80E590AF, false);
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE5A881E69C9B1E5BC80E590AF, false);
    libNEXS_gf_E99BB7E8AFBAE794B5E6B1A0E588B7E696B0();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_B5B3382F"));
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "UnknownUpgrade2982", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "UnknownUpgrade298222", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "UnknownUpgrade29822", 1);
    autoD2CD1126_g = UnitGroup("ReigelArmory", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    autoD2CD1126_u = UnitGroupCount(autoD2CD1126_g, c_unitCountAll);
    for (;; autoD2CD1126_u -= 1) {
        autoD2CD1126_var = UnitGroupUnitFromEnd(autoD2CD1126_g, autoD2CD1126_u);
        if (autoD2CD1126_var == null) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PlaceWormholeUnitDOOM", c_unitCreateIgnorePlacement, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, PointWithOffset(UnitGetPosition(autoD2CD1126_var), 0.0, -4.0));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PlaceWormholeUnitDOOMS", c_unitCreateIgnorePlacement, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, PointWithOffset(UnitGetPosition(autoD2CD1126_var), 0.0, -4.0));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PlaceWormholeUnitHERC", c_unitCreateIgnorePlacement, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, PointWithOffset(UnitGetPosition(autoD2CD1126_var), -3.0, -4.0));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PlaceWormholeUnitHERCM", c_unitCreateIgnorePlacement, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, PointWithOffset(UnitGetPosition(autoD2CD1126_var), -3.0, -4.0));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PlaceWormholeUnitIRON", c_unitCreateIgnorePlacement, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, PointWithOffset(UnitGetPosition(autoD2CD1126_var), 3.0, -4.0));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PlaceWormholeUnitIRONM", c_unitCreateIgnorePlacement, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, PointWithOffset(UnitGetPosition(autoD2CD1126_var), 3.0, -4.0));
    }
    TriggerEnable(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68E89E890BDE6A682E78E87E6B885E999A4, false);
    TriggerEnable(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E587BBE69D80E68E89E890BD, false);
    TriggerEnable(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96, false);
    TriggerEnable(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96E588A4E696AD, false);
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE4BFA1E6A087E5A48DE6B4BB, false);
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE38081E587AFE7919EE79498E6ADBBE4BAA1E4B88EE8A1A5E7BB99E5BA93E691A7E6AF81, false);
    TriggerEnable(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68E89E890BDE6A682E78E87E6B885E999A4E5A881E69C9B3, true);
    TriggerEnable(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E587BBE69D80E68E89E890BDE5A881E69C9B3, true);
    TriggerEnable(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96E5A881E69C9B3, true);
    TriggerEnable(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96E588A4E696ADE5A881E69C9B3, true);
    TriggerEnable(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96E588A4E696ADE5A881E69C9B3, true);
    TriggerEnable(libNEXS_gt_E8B685E7BAA7E8B5ABE5858BE4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3, true);
    TriggerEnable(libNEXS_gt_E8B685E7BAA7E8B5ABE5858BE8A2ABE691A7E6AF81E5A881E69C9B3, true);
    TriggerEnable(libNEXS_gt_E6AF81E781ADE68898E5A3ABE8A2ABE691A7E6AF81E5A881E69C9B3, true);
    TriggerEnable(libNEXS_gt_E6AF81E781ADE68898E5A3ABE4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3, true);
    TriggerEnable(libNEXS_gt_E992A2E99381E8A385E794B2E8A2ABE691A7E6AF81E5A881E69C9B3, true);
    TriggerEnable(libNEXS_gt_E992A2E99381E8A385E794B2E4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3, true);
    TriggerEnable(libNEXS_gt_E8A385E794B2E4BCA0E98081E8A385E5A487E5A881E69C9B3, true);
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE794B5E6B1A0E588B7E696B0, true);
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE794B5E6B1A0E588B7E696B0E7BB88E6ADA2, true);
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE794B5E6B1A0E68BBEE58F96, true);
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3, true);
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE38081E587AFE7919EE79498E6ADBBE4BAA1E4B88EE8A1A5E7BB99E5BA93E691A7E6AF81E5A881E69C9B3, true);
    Wait(2.0, c_timeGame);
    auto8B67E76E_g = UnitGroup("TychusCommando22", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8B67E76E_u = UnitGroupCount(auto8B67E76E_g, c_unitCountAll);
    for (;; auto8B67E76E_u -= 1) {
        auto8B67E76E_var = UnitGroupUnitFromEnd(auto8B67E76E_g, auto8B67E76E_u);
        if (auto8B67E76E_var == null) { break; }
        UnitBehaviorRemove(auto8B67E76E_var, "RaynorCGunTimeOut323", 1);
        UnitBehaviorAddPlayer(auto8B67E76E_var, "RaynorNYBZ", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
    }
    auto2F2EF6E1_g = UnitGroup("HERC2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2F2EF6E1_u = UnitGroupCount(auto2F2EF6E1_g, c_unitCountAll);
    for (;; auto2F2EF6E1_u -= 1) {
        auto2F2EF6E1_var = UnitGroupUnitFromEnd(auto2F2EF6E1_g, auto2F2EF6E1_u);
        if (auto2F2EF6E1_var == null) { break; }
        UnitBehaviorRemove(auto2F2EF6E1_var, "RaynorCGunTimeOut323", 1);
        UnitBehaviorAddPlayer(auto2F2EF6E1_var, "RaynorNYBZ", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
    }
    auto5126426D_g = UnitGroup("TychusCommando222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5126426D_u = UnitGroupCount(auto5126426D_g, c_unitCountAll);
    for (;; auto5126426D_u -= 1) {
        auto5126426D_var = UnitGroupUnitFromEnd(auto5126426D_g, auto5126426D_u);
        if (auto5126426D_var == null) { break; }
        UnitBehaviorRemove(auto5126426D_var, "RaynorCGunTimeOut323", 1);
        UnitBehaviorRemove(auto5126426D_var, "UnknownBehavior510", 1);
        UnitBehaviorAddPlayer(auto5126426D_var, "RaynorNYBZ", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
    }
    autoECCF1A76_g = UnitGroup("TychusCommando22", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoECCF1A76_u = UnitGroupCount(autoECCF1A76_g, c_unitCountAll);
    for (;; autoECCF1A76_u -= 1) {
        autoECCF1A76_var = UnitGroupUnitFromEnd(autoECCF1A76_g, autoECCF1A76_u);
        if (autoECCF1A76_var == null) { break; }
        UnitGroupAdd(libNEXS_gv_e8A385E794B2E58D95E4BD8DE7BB84, autoECCF1A76_var);
        libNEXS_gv_e6AF81E781ADE68898E5A3ABE8A385E794B2 = autoECCF1A76_var;
    }
    auto6BB118E6_g = UnitGroup("HERC2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6BB118E6_u = UnitGroupCount(auto6BB118E6_g, c_unitCountAll);
    for (;; auto6BB118E6_u -= 1) {
        auto6BB118E6_var = UnitGroupUnitFromEnd(auto6BB118E6_g, auto6BB118E6_u);
        if (auto6BB118E6_var == null) { break; }
        UnitGroupAdd(libNEXS_gv_e8A385E794B2E58D95E4BD8DE7BB84, auto6BB118E6_var);
        libNEXS_gv_e8B685E7BAA7E8B5ABE5858BE8A385E794B2 = auto6BB118E6_var;
    }
    autoCC4542A9_g = UnitGroup("TychusCommando222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCC4542A9_u = UnitGroupCount(autoCC4542A9_g, c_unitCountAll);
    for (;; autoCC4542A9_u -= 1) {
        autoCC4542A9_var = UnitGroupUnitFromEnd(autoCC4542A9_g, autoCC4542A9_u);
        if (autoCC4542A9_var == null) { break; }
        UnitGroupAdd(libNEXS_gv_e8A385E794B2E58D95E4BD8DE7BB84, autoCC4542A9_var);
        libNEXS_gv_e992A2E99381E4BEA0E8A385E794B2 = autoCC4542A9_var;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99BB7E8AFBAE5A881E69C9B3E5BC80E590AF_Init () {
    libNEXS_gt_E99BB7E8AFBAE5A881E69C9B3E5BC80E590AF = TriggerCreate("libNEXS_gt_E99BB7E8AFBAE5A881E69C9B3E5BC80E590AF_Func");
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE5A881E69C9B3E5BC80E590AF, false);
    TriggerAddEventChatMessage(libNEXS_gt_E99BB7E8AFBAE5A881E69C9B3E5BC80E590AF, c_playerAny, "Raynor3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99BB7E8AFBAE794B5E6B1A0E588B7E696B0_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_E99BB7E8AFBAE794B5E6B1A0E588B7E696B0();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99BB7E8AFBAE794B5E6B1A0E588B7E696B0_Init () {
    libNEXS_gt_E99BB7E8AFBAE794B5E6B1A0E588B7E696B0 = TriggerCreate("libNEXS_gt_E99BB7E8AFBAE794B5E6B1A0E588B7E696B0_Func");
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE794B5E6B1A0E588B7E696B0, false);
    TriggerAddEventTimePeriodic(libNEXS_gt_E99BB7E8AFBAE794B5E6B1A0E588B7E696B0, 180.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99BB7E8AFBAE794B5E6B1A0E588B7E696B0E7BB88E6ADA2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE794B5E6B1A0E588B7E696B0, false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99BB7E8AFBAE794B5E6B1A0E588B7E696B0E7BB88E6ADA2_Init () {
    libNEXS_gt_E99BB7E8AFBAE794B5E6B1A0E588B7E696B0E7BB88E6ADA2 = TriggerCreate("libNEXS_gt_E99BB7E8AFBAE794B5E6B1A0E588B7E696B0E7BB88E6ADA2_Func");
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE794B5E6B1A0E588B7E696B0E7BB88E6ADA2, false);
    TriggerAddEventTimeElapsed(libNEXS_gt_E99BB7E8AFBAE794B5E6B1A0E588B7E696B0E7BB88E6ADA2, 930.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99BB7E8AFBAE794B5E6B1A0E68BBEE58F96_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto585F3C1F_val;
    int auto086AEE87_val;
    unitgroup auto3CF7D1F5_g;
    int auto3CF7D1F5_u;
    unit auto3CF7D1F5_var;
    unitgroup auto1D9ABC9B_g;
    int auto1D9ABC9B_u;
    unit auto1D9ABC9B_var;
    int autoBF2D0545_val;
    unitgroup auto3E70E730_g;
    int auto3E70E730_u;
    unit auto3E70E730_var;
    unitgroup auto3B25A11C_g;
    int auto3B25A11C_u;
    unit auto3B25A11C_var;
    int auto19DE0EF1_val;
    unitgroup autoC52DBDBD_g;
    int autoC52DBDBD_u;
    unit autoC52DBDBD_var;
    unitgroup autoB4CC5AC2_g;
    int autoB4CC5AC2_u;
    unit autoB4CC5AC2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_e794B5E6B1A0E99A8FE69CBAE695B0 = RandomInt(1, 3);
    auto585F3C1F_val = libNEXS_gv_e794B5E6B1A0E99A8FE69CBAE695B0;
    if (auto585F3C1F_val == 3) {
        auto086AEE87_val = libNEXS_gv_e992A2E99381E4BEA0E8A385E794B2E8A18CE4B8BAE695B0;
        if (auto086AEE87_val == 2) {
            TriggerExecute(libNEXS_gt_E99BB7E8AFBAE794B5E6B1A0E68BBEE58F96, true, false);
        }
        else if (auto086AEE87_val == 1) {
            auto3CF7D1F5_g = UnitGroup("TychusCommando222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
            auto3CF7D1F5_u = UnitGroupCount(auto3CF7D1F5_g, c_unitCountAll);
            for (;; auto3CF7D1F5_u -= 1) {
                auto3CF7D1F5_var = UnitGroupUnitFromEnd(auto3CF7D1F5_g, auto3CF7D1F5_u);
                if (auto3CF7D1F5_var == null) { break; }
                UnitBehaviorRemove(auto3CF7D1F5_var, "RaynorNYBZ", 1);
                UnitBehaviorRemove(auto3CF7D1F5_var, "UnknownBehavior97", 1);
                UnitBehaviorAddPlayer(auto3CF7D1F5_var, "UnknownBehavior972", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
            }
            libNEXS_gv_e992A2E99381E4BEA0E8A385E794B2E8A18CE4B8BAE695B0 += 1;
        }
        else if (auto086AEE87_val == 0) {
            auto1D9ABC9B_g = UnitGroup("TychusCommando222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
            auto1D9ABC9B_u = UnitGroupCount(auto1D9ABC9B_g, c_unitCountAll);
            for (;; auto1D9ABC9B_u -= 1) {
                auto1D9ABC9B_var = UnitGroupUnitFromEnd(auto1D9ABC9B_g, auto1D9ABC9B_u);
                if (auto1D9ABC9B_var == null) { break; }
                UnitBehaviorAddPlayer(auto1D9ABC9B_var, "UnknownBehavior97", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
            }
            libNEXS_gv_e992A2E99381E4BEA0E8A385E794B2E8A18CE4B8BAE695B0 += 1;
        }
        else {
        }
    }
    else if (auto585F3C1F_val == 2) {
        autoBF2D0545_val = libNEXS_gv_e8B685E7BAA7E8B5ABE5858BE8A385E794B2E8A18CE4B8BAE695B0;
        if (autoBF2D0545_val == 2) {
            TriggerExecute(libNEXS_gt_E99BB7E8AFBAE794B5E6B1A0E68BBEE58F96, true, false);
        }
        else if (autoBF2D0545_val == 1) {
            auto3E70E730_g = UnitGroup("HERC2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
            auto3E70E730_u = UnitGroupCount(auto3E70E730_g, c_unitCountAll);
            for (;; auto3E70E730_u -= 1) {
                auto3E70E730_var = UnitGroupUnitFromEnd(auto3E70E730_g, auto3E70E730_u);
                if (auto3E70E730_var == null) { break; }
                UnitBehaviorRemove(auto3E70E730_var, "RaynorNYBZ", 1);
                UnitBehaviorRemove(auto3E70E730_var, "UnknownBehavior97", 1);
                UnitBehaviorAddPlayer(auto3E70E730_var, "UnknownBehavior972", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
            }
            libNEXS_gv_e8B685E7BAA7E8B5ABE5858BE8A385E794B2E8A18CE4B8BAE695B0 += 1;
        }
        else if (autoBF2D0545_val == 0) {
            auto3B25A11C_g = UnitGroup("HERC2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
            auto3B25A11C_u = UnitGroupCount(auto3B25A11C_g, c_unitCountAll);
            for (;; auto3B25A11C_u -= 1) {
                auto3B25A11C_var = UnitGroupUnitFromEnd(auto3B25A11C_g, auto3B25A11C_u);
                if (auto3B25A11C_var == null) { break; }
                UnitBehaviorAddPlayer(auto3B25A11C_var, "UnknownBehavior97", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
            }
            libNEXS_gv_e8B685E7BAA7E8B5ABE5858BE8A385E794B2E8A18CE4B8BAE695B0 += 1;
        }
        else {
        }
    }
    else if (auto585F3C1F_val == 1) {
        auto19DE0EF1_val = libNEXS_gv_e6AF81E781ADE68898E5A3ABE8A385E794B2E8A18CE4B8BAE695B0;
        if (auto19DE0EF1_val == 2) {
            TriggerExecute(libNEXS_gt_E99BB7E8AFBAE794B5E6B1A0E68BBEE58F96, true, false);
        }
        else if (auto19DE0EF1_val == 1) {
            autoC52DBDBD_g = UnitGroup("TychusCommando22", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
            autoC52DBDBD_u = UnitGroupCount(autoC52DBDBD_g, c_unitCountAll);
            for (;; autoC52DBDBD_u -= 1) {
                autoC52DBDBD_var = UnitGroupUnitFromEnd(autoC52DBDBD_g, autoC52DBDBD_u);
                if (autoC52DBDBD_var == null) { break; }
                UnitBehaviorRemove(autoC52DBDBD_var, "RaynorNYBZ", 1);
                UnitBehaviorRemove(autoC52DBDBD_var, "UnknownBehavior97", 1);
                UnitBehaviorAddPlayer(autoC52DBDBD_var, "UnknownBehavior972", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
            }
            libNEXS_gv_e6AF81E781ADE68898E5A3ABE8A385E794B2E8A18CE4B8BAE695B0 += 1;
        }
        else if (auto19DE0EF1_val == 0) {
            autoB4CC5AC2_g = UnitGroup("TychusCommando22", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
            autoB4CC5AC2_u = UnitGroupCount(autoB4CC5AC2_g, c_unitCountAll);
            for (;; autoB4CC5AC2_u -= 1) {
                autoB4CC5AC2_var = UnitGroupUnitFromEnd(autoB4CC5AC2_g, autoB4CC5AC2_u);
                if (autoB4CC5AC2_var == null) { break; }
                UnitBehaviorAddPlayer(autoB4CC5AC2_var, "UnknownBehavior97", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
            }
            libNEXS_gv_e6AF81E781ADE68898E5A3ABE8A385E794B2E8A18CE4B8BAE695B0 += 1;
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99BB7E8AFBAE794B5E6B1A0E68BBEE58F96_Init () {
    libNEXS_gt_E99BB7E8AFBAE794B5E6B1A0E68BBEE58F96 = TriggerCreate("libNEXS_gt_E99BB7E8AFBAE794B5E6B1A0E68BBEE58F96_Func");
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E99BB7E8AFBAE794B5E6B1A0E68BBEE58F96, c_playerAny, "PickupNovaEquipmentMU222");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8A385E5A487E59BBEE7BAB8E587BBE69D80E68E89E890BD_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto37C0E56A_g;
    int auto37C0E56A_u;
    unit auto37C0E56A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNEXS_gv_equipmentMount < 9) && (libNEXS_gv_equipmentAllow == 1) && (UnitHasBehavior2(EventUnit(), "RaynorCantDropEquip") != true) && (UnitGetOwner(EventUnit()) != 1) && (UnitGetOwner(EventUnit()) != 2) && (UnitGetOwner(EventUnit()) != 0) && ((libNtve_gf_KillingPlayer() == 1) || (libNtve_gf_KillingPlayer() == 2))) {
        if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true)) {
            libNEXS_gv_mountBaseChance = (libNEXS_gv_mountBaseChance + (libNEXS_gv_supplyMultiplyingPower * 2.0));
        }
        else {
            libNEXS_gv_mountBaseChance = (libNEXS_gv_mountBaseChance + (libNEXS_gv_supplyMultiplyingPower * UnitTypeGetProperty(UnitGetType(EventUnit()), c_unitPropSuppliesUsed)));
        }
        CatalogFieldValueSet(c_gameCatalogEffect, "RaynorUnitKillEquipmentDrop", "Chance", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, FixedToString(libNEXS_gv_equipmentDropChance, 3));
        libNEXS_gv_equipmentDropChance = (libNEXS_gv_equipmentDropChance + (libNEXS_gv_mountBaseChance * libNEXS_gv_equipmentDropChance));
        if ((libNEXS_gv_equipmentDropChance < 0.01)) {
            libNEXS_gv_equipmentDropChance = 0.01;
        }

        if ((libNtve_gf_KillingPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11)) {
            auto37C0E56A_g = UnitGroup("BioDomeCommandFlying2242", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto37C0E56A_u = UnitGroupCount(auto37C0E56A_g, c_unitCountAll);
            for (;; auto37C0E56A_u -= 1) {
                auto37C0E56A_var = UnitGroupUnitFromEnd(auto37C0E56A_g, auto37C0E56A_u);
                if (auto37C0E56A_var == null) { break; }
                UnitIssueOrder(auto37C0E56A_var, OrderTargetingPoint(AbilityCommand("RaynorEquipmentBirth", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
            }
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8A385E5A487E59BBEE7BAB8E587BBE69D80E68E89E890BD_Init () {
    libNEXS_gt_E8A385E5A487E59BBEE7BAB8E587BBE69D80E68E89E890BD = TriggerCreate("libNEXS_gt_E8A385E5A487E59BBEE7BAB8E587BBE69D80E68E89E890BD_Func");
    TriggerEnable(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E587BBE69D80E68E89E890BD, false);
    TriggerAddEventUnitDied(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E587BBE69D80E68E89E890BD, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68E89E890BDE6A682E78E87E6B885E999A4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    MinimapPing(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), UnitGetPosition(EventUnit()), 5.0, Color(100.00, 100.00, 0.00));
    libNEXS_gv_equipmentAllow = 0;
    libNEXS_gv_equipmentMount = (libNEXS_gv_equipmentMount + 1);
    libNEXS_gv_mountBaseChance = (libNEXS_gv_mountBaseChance - 100.0);
    libNEXS_gv_equipmentDropChance = (libNEXS_gv_equipmentDropChance + (libNEXS_gv_mountBaseChance * libNEXS_gv_equipmentDropChance));
    if ((libNEXS_gv_equipmentDropChance < 0.01)) {
        libNEXS_gv_equipmentDropChance = 0.01;
    }

    libNEXS_gv_equipmentAllow = 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68E89E890BDE6A682E78E87E6B885E999A4_Init () {
    libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68E89E890BDE6A682E78E87E6B885E999A4 = TriggerCreate("libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68E89E890BDE6A682E78E87E6B885E999A4_Func");
    TriggerEnable(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68E89E890BDE6A682E78E87E6B885E999A4, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68E89E890BDE6A682E78E87E6B885E999A4, null, "BiomassCreated2", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96E588A4E696AD_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_equipmentAD;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_equipmentAD = RandomInt(libNEXS_gv_equipmentADMin, libNEXS_gv_equipmentADMax);
    while ((libNEXS_gv_weaponPickFullAd[(lv_equipmentAD - 1)] == 1)) {
        lv_equipmentAD = RandomInt(libNEXS_gv_equipmentADMin, libNEXS_gv_equipmentADMax);
    }
    libNEXS_gv_equipmentTypeMount = lv_equipmentAD;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96E588A4E696AD_Init () {
    libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96E588A4E696AD = TriggerCreate("libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96E588A4E696AD_Func");
    TriggerEnable(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96E588A4E696AD, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96E588A4E696AD, true, true);
    if ((libNEXS_gv_equipmentTypeMount == 2)) {
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorPickup22", 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorEngineerUpgrade232", 1);
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_96A8336F"));
        UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), AbilityCommand("EngineeringBayResearch4", 0), true);
        libNEXS_gv_equipmentADMin = 1;
        libNEXS_gv_equipmentADMax = 12;
        libNEXS_gv_weaponPickFullAd[(libNEXS_gv_equipmentTypeMount - 1)] = 1;
        libNEXS_gv_equipmentPickMount = (libNEXS_gv_equipmentPickMount + 1);
    }

    if ((libNEXS_gv_equipmentTypeMount == 10)) {
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorPickup2", 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorEngineerUpgrade232", 1);
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_17355D9D"));
        UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), AbilityCommand("EngineeringBayResearch4", 1), true);
        libNEXS_gv_equipmentADMin = 1;
        libNEXS_gv_equipmentADMax = 12;
        libNEXS_gv_weaponPickFullAd[(libNEXS_gv_equipmentTypeMount - 1)] = 1;
        libNEXS_gv_equipmentPickMount = (libNEXS_gv_equipmentPickMount + 1);
    }

    if ((libNEXS_gv_equipmentTypeMount == 5)) {
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorPickup2222", 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorEngineerUpgrade232", 1);
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_EBF82148"));
        UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), AbilityCommand("EngineeringBayResearch4", 2), true);
        libNEXS_gv_equipmentADMin = 1;
        libNEXS_gv_equipmentADMax = 12;
        libNEXS_gv_weaponPickFullAd[(libNEXS_gv_equipmentTypeMount - 1)] = 1;
        libNEXS_gv_equipmentPickMount = (libNEXS_gv_equipmentPickMount + 1);
    }

    if ((libNEXS_gv_equipmentTypeMount == 11)) {
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorPickup22222", 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorEngineerUpgrade232", 1);
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_D8222565"));
        UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), AbilityCommand("EngineeringBayResearch4", 3), true);
        libNEXS_gv_equipmentADMin = 1;
        libNEXS_gv_equipmentADMax = 12;
        libNEXS_gv_weaponPickFullAd[(libNEXS_gv_equipmentTypeMount - 1)] = 1;
        libNEXS_gv_equipmentPickMount = (libNEXS_gv_equipmentPickMount + 1);
    }

    if ((libNEXS_gv_equipmentTypeMount == 9)) {
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorPickup2222222", 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorEngineerUpgrade232", 1);
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_991E129D"));
        UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), AbilityCommand("EngineeringBayResearch4", 4), true);
        libNEXS_gv_equipmentADMin = 1;
        libNEXS_gv_equipmentADMax = 12;
        libNEXS_gv_weaponPickFullAd[(libNEXS_gv_equipmentTypeMount - 1)] = 1;
        libNEXS_gv_equipmentPickMount = (libNEXS_gv_equipmentPickMount + 1);
    }

    if ((libNEXS_gv_equipmentTypeMount == 12)) {
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorPickup22222222", 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorEngineerUpgrade232", 1);
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_C0FE1BF4"));
        UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), AbilityCommand("EngineeringBayResearch4", 5), true);
        libNEXS_gv_equipmentADMin = 1;
        libNEXS_gv_equipmentADMax = 12;
        libNEXS_gv_weaponPickFullAd[(libNEXS_gv_equipmentTypeMount - 1)] = 1;
        libNEXS_gv_equipmentPickMount = (libNEXS_gv_equipmentPickMount + 1);
    }

    if ((libNEXS_gv_equipmentTypeMount == 6)) {
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorPickup22222222222", 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorEngineerUpgrade232", 1);
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_47A946A8"));
        UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), AbilityCommand("EngineeringBayResearch4", 6), true);
        libNEXS_gv_equipmentADMin = 1;
        libNEXS_gv_equipmentADMax = 12;
        libNEXS_gv_weaponPickFullAd[(libNEXS_gv_equipmentTypeMount - 1)] = 1;
        libNEXS_gv_equipmentPickMount = (libNEXS_gv_equipmentPickMount + 1);
    }

    if ((libNEXS_gv_equipmentTypeMount == 8)) {
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorPickup2222222222", 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorEngineerUpgrade232", 1);
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_542E23EE"));
        UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), AbilityCommand("EngineeringBayResearch4", 7), true);
        libNEXS_gv_equipmentADMin = 1;
        libNEXS_gv_equipmentADMax = 12;
        libNEXS_gv_weaponPickFullAd[(libNEXS_gv_equipmentTypeMount - 1)] = 1;
        libNEXS_gv_equipmentPickMount = (libNEXS_gv_equipmentPickMount + 1);
    }

    if ((libNEXS_gv_equipmentTypeMount == 3)) {
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorPickup222222222", 1);
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorEngineerUpgrade232", 1);
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_C61BAD0B"));
        UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), AbilityCommand("EngineeringBayResearch4", 8), true);
        libNEXS_gv_equipmentADMin = 1;
        libNEXS_gv_equipmentADMax = 12;
        libNEXS_gv_weaponPickFullAd[(libNEXS_gv_equipmentTypeMount - 1)] = 1;
        libNEXS_gv_equipmentPickMount = (libNEXS_gv_equipmentPickMount + 1);
    }

    if ((libNEXS_gv_equipmentPickMount == 9)) {
        if ((RandomInt(1, 5) == 1)) {
            libNEXS_gf_E587AFE7919EE79498E5BDA9E89B8BE5889DE5A78BE8A7A6E58F91();
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96_Init () {
    libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96 = TriggerCreate("libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96_Func");
    TriggerEnable(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96, c_playerAny, "PickupNovaEquipmentMU2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99BB7E8AFBAE5889DE5A78BE6BC94E7AE97E4BD93E58D87E7BAA7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorNV", 1);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99BB7E8AFBAE5889DE5A78BE6BC94E7AE97E4BD93E58D87E7BAA7_Init () {
    libNEXS_gt_E99BB7E8AFBAE5889DE5A78BE6BC94E7AE97E4BD93E58D87E7BAA7 = TriggerCreate("libNEXS_gt_E99BB7E8AFBAE5889DE5A78BE6BC94E7AE97E4BD93E58D87E7BAA7_Func");
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE5889DE5A78BE6BC94E7AE97E4BD93E58D87E7BAA7, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E99BB7E8AFBAE5889DE5A78BE6BC94E7AE97E4BD93E58D87E7BAA7, null, "RaynorMercVeterancyApplyDummy2", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99BB7E8AFBAE4BCA0E98081E8A385E5A487_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB83A1B22_g;
    int autoB83A1B22_u;
    unit autoB83A1B22_var;
    unitgroup autoCCC1B947_g;
    int autoCCC1B947_u;
    unit autoCCC1B947_var;
    unitgroup auto62C7B82B_g;
    int auto62C7B82B_u;
    unit auto62C7B82B_var;
    unitgroup auto1C9D84F6_g;
    int auto1C9D84F6_u;
    unit auto1C9D84F6_var;
    unitgroup autoBEE73837_g;
    int autoBEE73837_u;
    unit autoBEE73837_var;
    unitgroup auto7AE25D96_g;
    int auto7AE25D96_u;
    unit auto7AE25D96_var;
    unitgroup auto9C0D4AFB_g;
    int auto9C0D4AFB_u;
    unit auto9C0D4AFB_var;
    unitgroup auto0E4014AE_g;
    int auto0E4014AE_u;
    unit auto0E4014AE_var;
    unitgroup autoDB230A45_g;
    int autoDB230A45_u;
    unit autoDB230A45_var;
    unitgroup auto73F6BB4E_g;
    int auto73F6BB4E_u;
    unit auto73F6BB4E_var;
    unitgroup auto9CA492D4_g;
    int auto9CA492D4_u;
    unit auto9CA492D4_var;
    unitgroup auto9E0A5FB9_g;
    int auto9E0A5FB9_u;
    unit auto9E0A5FB9_var;
    unitgroup autoD5AD463A_g;
    int autoD5AD463A_u;
    unit autoD5AD463A_var;
    unitgroup auto1D5C766C_g;
    int auto1D5C766C_u;
    unit auto1D5C766C_var;
    unitgroup auto7DB2B9E3_g;
    int auto7DB2B9E3_u;
    unit auto7DB2B9E3_var;
    unitgroup autoA8A746AC_g;
    int autoA8A746AC_u;
    unit autoA8A746AC_var;
    unitgroup autoC1DF83C4_g;
    int autoC1DF83C4_u;
    unit autoC1DF83C4_var;
    unitgroup auto50C1B56F_g;
    int auto50C1B56F_u;
    unit auto50C1B56F_var;
    unitgroup auto4A80C346_g;
    int auto4A80C346_u;
    unit auto4A80C346_var;
    unitgroup autoCF210B08_g;
    int autoCF210B08_u;
    unit autoCF210B08_var;
    unitgroup auto4463A341_g;
    int auto4463A341_u;
    unit auto4463A341_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "ReigelArmory")) {
        if ((EventUnitAbility() == AbilityCommand("VoodooShield422", 0))) {
            autoB83A1B22_g = libNEXS_gv_raynorHERO;
            autoB83A1B22_u = UnitGroupCount(autoB83A1B22_g, c_unitCountAll);
            for (;; autoB83A1B22_u -= 1) {
                autoB83A1B22_var = UnitGroupUnitFromEnd(autoB83A1B22_g, autoB83A1B22_u);
                if (autoB83A1B22_var == null) { break; }
                UnitCreateEffectUnit(autoB83A1B22_var, "RaynorTeleportWeapon", autoB83A1B22_var);
                UnitCreateEffectUnit(autoB83A1B22_var, "VoodooShieldSet42", autoB83A1B22_var);
            }
            autoCCC1B947_g = libNEXS_gv_raynorArmory;
            autoCCC1B947_u = UnitGroupCount(autoCCC1B947_g, c_unitCountAll);
            for (;; autoCCC1B947_u -= 1) {
                autoCCC1B947_var = UnitGroupUnitFromEnd(autoCCC1B947_g, autoCCC1B947_u);
                if (autoCCC1B947_var == null) { break; }
                UnitCreateEffectUnit(autoCCC1B947_var, "RaynorTeleportWeapon", autoCCC1B947_var);
            }
            libNEXS_gv_ryMainWeapon = 1;
        }

        if ((EventUnitAbility() == AbilityCommand("VoodooShield42222", 0))) {
            auto62C7B82B_g = libNEXS_gv_raynorHERO;
            auto62C7B82B_u = UnitGroupCount(auto62C7B82B_g, c_unitCountAll);
            for (;; auto62C7B82B_u -= 1) {
                auto62C7B82B_var = UnitGroupUnitFromEnd(auto62C7B82B_g, auto62C7B82B_u);
                if (auto62C7B82B_var == null) { break; }
                UnitCreateEffectUnit(auto62C7B82B_var, "RaynorTeleportWeapon22", auto62C7B82B_var);
                UnitCreateEffectUnit(auto62C7B82B_var, "VoodooShieldSet42", auto62C7B82B_var);
            }
            auto1C9D84F6_g = libNEXS_gv_raynorArmory;
            auto1C9D84F6_u = UnitGroupCount(auto1C9D84F6_g, c_unitCountAll);
            for (;; auto1C9D84F6_u -= 1) {
                auto1C9D84F6_var = UnitGroupUnitFromEnd(auto1C9D84F6_g, auto1C9D84F6_u);
                if (auto1C9D84F6_var == null) { break; }
                UnitCreateEffectUnit(auto1C9D84F6_var, "RaynorTeleportWeapon22", auto1C9D84F6_var);
            }
            libNEXS_gv_ryMainWeapon = 2;
        }

        if ((EventUnitAbility() == AbilityCommand("VoodooShield4222", 0))) {
            autoBEE73837_g = libNEXS_gv_raynorHERO;
            autoBEE73837_u = UnitGroupCount(autoBEE73837_g, c_unitCountAll);
            for (;; autoBEE73837_u -= 1) {
                autoBEE73837_var = UnitGroupUnitFromEnd(autoBEE73837_g, autoBEE73837_u);
                if (autoBEE73837_var == null) { break; }
                UnitCreateEffectUnit(autoBEE73837_var, "RaynorTeleportWeapon2", autoBEE73837_var);
                UnitCreateEffectUnit(autoBEE73837_var, "VoodooShieldSet42", autoBEE73837_var);
            }
            auto7AE25D96_g = libNEXS_gv_raynorArmory;
            auto7AE25D96_u = UnitGroupCount(auto7AE25D96_g, c_unitCountAll);
            for (;; auto7AE25D96_u -= 1) {
                auto7AE25D96_var = UnitGroupUnitFromEnd(auto7AE25D96_g, auto7AE25D96_u);
                if (auto7AE25D96_var == null) { break; }
                UnitCreateEffectUnit(auto7AE25D96_var, "RaynorTeleportWeapon2", auto7AE25D96_var);
            }
            libNEXS_gv_ryMainWeapon = 3;
        }

        if ((EventUnitAbility() == AbilityCommand("VoodooShield4223", 0))) {
            auto9C0D4AFB_g = libNEXS_gv_raynorHERO;
            auto9C0D4AFB_u = UnitGroupCount(auto9C0D4AFB_g, c_unitCountAll);
            for (;; auto9C0D4AFB_u -= 1) {
                auto9C0D4AFB_var = UnitGroupUnitFromEnd(auto9C0D4AFB_g, auto9C0D4AFB_u);
                if (auto9C0D4AFB_var == null) { break; }
                UnitCreateEffectUnit(auto9C0D4AFB_var, "RaynorTeleportWeapon3", auto9C0D4AFB_var);
                UnitCreateEffectUnit(auto9C0D4AFB_var, "VoodooShieldSet42", auto9C0D4AFB_var);
            }
            auto0E4014AE_g = libNEXS_gv_raynorArmory;
            auto0E4014AE_u = UnitGroupCount(auto0E4014AE_g, c_unitCountAll);
            for (;; auto0E4014AE_u -= 1) {
                auto0E4014AE_var = UnitGroupUnitFromEnd(auto0E4014AE_g, auto0E4014AE_u);
                if (auto0E4014AE_var == null) { break; }
                UnitCreateEffectUnit(auto0E4014AE_var, "RaynorTeleportWeapon3", auto0E4014AE_var);
            }
            libNEXS_gv_rySubWeapon = 1;
        }

        if ((EventUnitAbility() == AbilityCommand("VoodooShield42232", 0))) {
            autoDB230A45_g = libNEXS_gv_raynorHERO;
            autoDB230A45_u = UnitGroupCount(autoDB230A45_g, c_unitCountAll);
            for (;; autoDB230A45_u -= 1) {
                autoDB230A45_var = UnitGroupUnitFromEnd(autoDB230A45_g, autoDB230A45_u);
                if (autoDB230A45_var == null) { break; }
                UnitCreateEffectUnit(autoDB230A45_var, "RaynorTeleportWeapon32", autoDB230A45_var);
                UnitCreateEffectUnit(autoDB230A45_var, "VoodooShieldSet42", autoDB230A45_var);
            }
            auto73F6BB4E_g = libNEXS_gv_raynorArmory;
            auto73F6BB4E_u = UnitGroupCount(auto73F6BB4E_g, c_unitCountAll);
            for (;; auto73F6BB4E_u -= 1) {
                auto73F6BB4E_var = UnitGroupUnitFromEnd(auto73F6BB4E_g, auto73F6BB4E_u);
                if (auto73F6BB4E_var == null) { break; }
                UnitCreateEffectUnit(auto73F6BB4E_var, "RaynorTeleportWeapon32", auto73F6BB4E_var);
            }
            libNEXS_gv_rySubWeapon = 2;
        }

        if ((EventUnitAbility() == AbilityCommand("VoodooShield422322", 0))) {
            auto9CA492D4_g = libNEXS_gv_raynorHERO;
            auto9CA492D4_u = UnitGroupCount(auto9CA492D4_g, c_unitCountAll);
            for (;; auto9CA492D4_u -= 1) {
                auto9CA492D4_var = UnitGroupUnitFromEnd(auto9CA492D4_g, auto9CA492D4_u);
                if (auto9CA492D4_var == null) { break; }
                UnitCreateEffectUnit(auto9CA492D4_var, "RaynorTeleportWeapon322", auto9CA492D4_var);
                UnitCreateEffectUnit(auto9CA492D4_var, "VoodooShieldSet42", auto9CA492D4_var);
            }
            auto9E0A5FB9_g = libNEXS_gv_raynorArmory;
            auto9E0A5FB9_u = UnitGroupCount(auto9E0A5FB9_g, c_unitCountAll);
            for (;; auto9E0A5FB9_u -= 1) {
                auto9E0A5FB9_var = UnitGroupUnitFromEnd(auto9E0A5FB9_g, auto9E0A5FB9_u);
                if (auto9E0A5FB9_var == null) { break; }
                UnitCreateEffectUnit(auto9E0A5FB9_var, "RaynorTeleportWeapon322", auto9E0A5FB9_var);
            }
            libNEXS_gv_rySubWeapon = 3;
        }

        if ((EventUnitAbility() == AbilityCommand("VoodooShield4223222", 0))) {
            autoD5AD463A_g = libNEXS_gv_raynorHERO;
            autoD5AD463A_u = UnitGroupCount(autoD5AD463A_g, c_unitCountAll);
            for (;; autoD5AD463A_u -= 1) {
                autoD5AD463A_var = UnitGroupUnitFromEnd(autoD5AD463A_g, autoD5AD463A_u);
                if (autoD5AD463A_var == null) { break; }
                UnitCreateEffectUnit(autoD5AD463A_var, "RaynorTeleportWeapon3222", autoD5AD463A_var);
                UnitCreateEffectUnit(autoD5AD463A_var, "VoodooShieldSet42", autoD5AD463A_var);
            }
            auto1D5C766C_g = libNEXS_gv_raynorArmory;
            auto1D5C766C_u = UnitGroupCount(auto1D5C766C_g, c_unitCountAll);
            for (;; auto1D5C766C_u -= 1) {
                auto1D5C766C_var = UnitGroupUnitFromEnd(auto1D5C766C_g, auto1D5C766C_u);
                if (auto1D5C766C_var == null) { break; }
                UnitCreateEffectUnit(auto1D5C766C_var, "RaynorTeleportWeapon3222", auto1D5C766C_var);
            }
            libNEXS_gv_ryAuxiliaryEquipment = 1;
        }

        if ((EventUnitAbility() == AbilityCommand("VoodooShield42232222", 0))) {
            auto7DB2B9E3_g = libNEXS_gv_raynorHERO;
            auto7DB2B9E3_u = UnitGroupCount(auto7DB2B9E3_g, c_unitCountAll);
            for (;; auto7DB2B9E3_u -= 1) {
                auto7DB2B9E3_var = UnitGroupUnitFromEnd(auto7DB2B9E3_g, auto7DB2B9E3_u);
                if (auto7DB2B9E3_var == null) { break; }
                UnitCreateEffectUnit(auto7DB2B9E3_var, "RaynorTeleportWeapon32222", auto7DB2B9E3_var);
                UnitCreateEffectUnit(auto7DB2B9E3_var, "VoodooShieldSet42", auto7DB2B9E3_var);
            }
            autoA8A746AC_g = libNEXS_gv_raynorArmory;
            autoA8A746AC_u = UnitGroupCount(autoA8A746AC_g, c_unitCountAll);
            for (;; autoA8A746AC_u -= 1) {
                autoA8A746AC_var = UnitGroupUnitFromEnd(autoA8A746AC_g, autoA8A746AC_u);
                if (autoA8A746AC_var == null) { break; }
                UnitCreateEffectUnit(autoA8A746AC_var, "RaynorTeleportWeapon32222", autoA8A746AC_var);
            }
            libNEXS_gv_ryAuxiliaryEquipment = 2;
        }

        if ((EventUnitAbility() == AbilityCommand("VoodooShield422322222", 0))) {
            autoC1DF83C4_g = libNEXS_gv_raynorHERO;
            autoC1DF83C4_u = UnitGroupCount(autoC1DF83C4_g, c_unitCountAll);
            for (;; autoC1DF83C4_u -= 1) {
                autoC1DF83C4_var = UnitGroupUnitFromEnd(autoC1DF83C4_g, autoC1DF83C4_u);
                if (autoC1DF83C4_var == null) { break; }
                UnitCreateEffectUnit(autoC1DF83C4_var, "RaynorTeleportWeapon322222", autoC1DF83C4_var);
                UnitCreateEffectUnit(autoC1DF83C4_var, "VoodooShieldSet42", autoC1DF83C4_var);
            }
            auto50C1B56F_g = libNEXS_gv_raynorArmory;
            auto50C1B56F_u = UnitGroupCount(auto50C1B56F_g, c_unitCountAll);
            for (;; auto50C1B56F_u -= 1) {
                auto50C1B56F_var = UnitGroupUnitFromEnd(auto50C1B56F_g, auto50C1B56F_u);
                if (auto50C1B56F_var == null) { break; }
                UnitCreateEffectUnit(auto50C1B56F_var, "RaynorTeleportWeapon322222", auto50C1B56F_var);
            }
            libNEXS_gv_ryAuxiliaryEquipment = 3;
        }

        if ((EventUnitAbility() == AbilityCommand("VoodooShield422322222222", 0))) {
            auto4A80C346_g = libNEXS_gv_raynorHERO;
            auto4A80C346_u = UnitGroupCount(auto4A80C346_g, c_unitCountAll);
            for (;; auto4A80C346_u -= 1) {
                auto4A80C346_var = UnitGroupUnitFromEnd(auto4A80C346_g, auto4A80C346_u);
                if (auto4A80C346_var == null) { break; }
                UnitCreateEffectUnit(auto4A80C346_var, "RaynorTeleportWeapon322222222", auto4A80C346_var);
                UnitCreateEffectUnit(auto4A80C346_var, "VoodooShieldSet42", auto4A80C346_var);
                libNEXS_gv_ryArmoredCore = 1;
            }
        }

        if ((EventUnitAbility() == AbilityCommand("VoodooShield42232222222", 0))) {
            autoCF210B08_g = libNEXS_gv_raynorHERO;
            autoCF210B08_u = UnitGroupCount(autoCF210B08_g, c_unitCountAll);
            for (;; autoCF210B08_u -= 1) {
                autoCF210B08_var = UnitGroupUnitFromEnd(autoCF210B08_g, autoCF210B08_u);
                if (autoCF210B08_var == null) { break; }
                UnitCreateEffectUnit(autoCF210B08_var, "RaynorTeleportWeapon32222222", autoCF210B08_var);
                UnitCreateEffectUnit(autoCF210B08_var, "VoodooShieldSet42", autoCF210B08_var);
                libNEXS_gv_ryArmoredCore = 2;
            }
        }

        if ((EventUnitAbility() == AbilityCommand("VoodooShield4223222222", 0))) {
            auto4463A341_g = libNEXS_gv_raynorHERO;
            auto4463A341_u = UnitGroupCount(auto4463A341_g, c_unitCountAll);
            for (;; auto4463A341_u -= 1) {
                auto4463A341_var = UnitGroupUnitFromEnd(auto4463A341_g, auto4463A341_u);
                if (auto4463A341_var == null) { break; }
                UnitCreateEffectUnit(auto4463A341_var, "RaynorTeleportWeapon3222222", auto4463A341_var);
                UnitCreateEffectUnit(auto4463A341_var, "VoodooShieldSet42", auto4463A341_var);
                libNEXS_gv_ryArmoredCore = 3;
            }
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99BB7E8AFBAE4BCA0E98081E8A385E5A487_Init () {
    libNEXS_gt_E99BB7E8AFBAE4BCA0E98081E8A385E5A487 = TriggerCreate("libNEXS_gt_E99BB7E8AFBAE4BCA0E98081E8A385E5A487_Func");
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE4BCA0E98081E8A385E5A487, false);
    TriggerAddEventUnitAbility(libNEXS_gt_E99BB7E8AFBAE4BCA0E98081E8A385E5A487, null, null, c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99BB7E8AFBAE4BFA1E6A087E5A48DE6B4BB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9A30EF99_g;
    int auto9A30EF99_u;
    unit auto9A30EF99_var;
    unitgroup auto7D016759_g;
    int auto7D016759_u;
    unit auto7D016759_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libNEXS_gv_raynorHERO, EventUnit());
    libNEXS_gf_SetHeroPanelUnit(1, EventUnit(), libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11);
    UnitSetHeight(EventUnit(), 2.0, 0.0);
    UnitSetHeight(EventUnit(), 0.0, 0.5);
    auto9A30EF99_g = UnitGroup("PlaceWormholeUnit232332", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9A30EF99_u = UnitGroupCount(auto9A30EF99_g, c_unitCountAll);
    for (;; auto9A30EF99_u -= 1) {
        auto9A30EF99_var = UnitGroupUnitFromEnd(auto9A30EF99_g, auto9A30EF99_u);
        if (auto9A30EF99_var == null) { break; }
        libNEXS_gv_ryBeaconPosition = UnitGetPosition(auto9A30EF99_var);
    }
    if ((libNEXS_gv_raynorReviveTimes == 0)) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_10EB9C09"));
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorNV2", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorMasteryUpgrade22", TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorMasteryUpgrade2", c_techCountCompleteOnly));
        libNEXS_gv_raynorReviveTimes = 1;
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_2E829A7E"));
    }
    auto7D016759_g = libNEXS_gv_raynorHERO;
    auto7D016759_u = UnitGroupCount(auto7D016759_g, c_unitCountAll);
    for (;; auto7D016759_u -= 1) {
        auto7D016759_var = UnitGroupUnitFromEnd(auto7D016759_g, auto7D016759_u);
        if (auto7D016759_var == null) { break; }
        if ((libNEXS_gv_ryMainWeapon == 1)) {
            UnitBehaviorAddPlayer(auto7D016759_var, "RaynorWeaponAdd22223", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryMainWeapon == 2)) {
            UnitBehaviorAddPlayer(auto7D016759_var, "RaynorWeaponAdd32", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryMainWeapon == 3)) {
            UnitBehaviorAddPlayer(auto7D016759_var, "RaynorWeaponAdd3", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_rySubWeapon == 1)) {
            UnitBehaviorAddPlayer(auto7D016759_var, "RaynorWeaponAdd2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_rySubWeapon == 2)) {
            UnitBehaviorAddPlayer(auto7D016759_var, "RaynorWeaponAdd222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_rySubWeapon == 3)) {
            UnitBehaviorAddPlayer(auto7D016759_var, "RaynorWeaponAdd22", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryAuxiliaryEquipment == 1)) {
            UnitBehaviorAddPlayer(auto7D016759_var, "RaynorWeaponAdd2222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryAuxiliaryEquipment == 2)) {
            UnitBehaviorAddPlayer(auto7D016759_var, "RaynorWeaponAdd22222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryAuxiliaryEquipment == 3)) {
            UnitBehaviorAddPlayer(auto7D016759_var, "RaynorWeaponAdd222222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryArmoredCore == 1)) {
            UnitBehaviorAddPlayer(auto7D016759_var, "RaynorWeaponAdd22222223", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryArmoredCore == 2)) {
            UnitBehaviorAddPlayer(auto7D016759_var, "RaynorWeaponAdd22222222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryArmoredCore == 3)) {
            UnitBehaviorAddPlayer(auto7D016759_var, "RaynorWeaponAdd2222222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99BB7E8AFBAE4BFA1E6A087E5A48DE6B4BB_Init () {
    libNEXS_gt_E99BB7E8AFBAE4BFA1E6A087E5A48DE6B4BB = TriggerCreate("libNEXS_gt_E99BB7E8AFBAE4BFA1E6A087E5A48DE6B4BB_Func");
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE4BFA1E6A087E5A48DE6B4BB, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E99BB7E8AFBAE4BFA1E6A087E5A48DE6B4BB, null, "UnknownBehavior253", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E587AFE7919EE79498E5A48DE6B4BB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libNEXS_gv_raynorKerrigan, EventUnit());
    if ((libNEXS_gv_kerriganReviveTimes == 0)) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_590254D8"));
        MinimapPing(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), UnitGetPosition(EventUnit()), 5.0, Color(100.00, 50.20, 0.00));
        libNEXS_gv_kerriganReviveTimes = 1;
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorReviveKerrigan2", 1);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_F8D0A539"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E587AFE7919EE79498E5A48DE6B4BB_Init () {
    libNEXS_gt_E587AFE7919EE79498E5A48DE6B4BB = TriggerCreate("libNEXS_gt_E587AFE7919EE79498E5A48DE6B4BB_Func");
    TriggerEnable(libNEXS_gt_E587AFE7919EE79498E5A48DE6B4BB, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E587AFE7919EE79498E5A48DE6B4BB, null, "RaynorCGunTimeOut3232", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E587AFE7919EE79498E59FBAE59CB0E998B2E5BEA1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8FFB3846_g;
    int auto8FFB3846_u;
    unit auto8FFB3846_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "SpotterAura72") == true)) {
        auto8FFB3846_g = libNEXS_gv_raynorKerrigan;
        auto8FFB3846_u = UnitGroupCount(auto8FFB3846_g, c_unitCountAll);
        for (;; auto8FFB3846_u -= 1) {
            auto8FFB3846_var = UnitGroupUnitFromEnd(auto8FFB3846_g, auto8FFB3846_u);
            if (auto8FFB3846_var == null) { break; }
            UnitIssueOrder(auto8FFB3846_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitDamageSourceUnit())), c_orderQueueReplace);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E587AFE7919EE79498E59FBAE59CB0E998B2E5BEA1_Init () {
    libNEXS_gt_E587AFE7919EE79498E59FBAE59CB0E998B2E5BEA1 = TriggerCreate("libNEXS_gt_E587AFE7919EE79498E59FBAE59CB0E998B2E5BEA1_Func");
    TriggerEnable(libNEXS_gt_E587AFE7919EE79498E59FBAE59CB0E998B2E5BEA1, false);
    TriggerAddEventUnitDamaged(libNEXS_gt_E587AFE7919EE79498E59FBAE59CB0E998B2E5BEA1, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5BCB9E88DAFE8A1A5E7BB99E5BA93E8BF9BE585A5E59CB0E59BBE_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto88DCB490_g;
    int auto88DCB490_u;
    unit auto88DCB490_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libNEXS_gv_raynorArmory, EventUnit());
    auto88DCB490_g = libNEXS_gv_raynorArmory;
    auto88DCB490_u = UnitGroupCount(auto88DCB490_g, c_unitCountAll);
    for (;; auto88DCB490_u -= 1) {
        auto88DCB490_var = UnitGroupUnitFromEnd(auto88DCB490_g, auto88DCB490_u);
        if (auto88DCB490_var == null) { break; }
        if ((libNEXS_gv_raynorArmoryBuildTimes == 0)) {
            UnitMagazineArm(auto88DCB490_var, AbilityCommand("RaynorSHOPPING", 0), 3);
            UnitMagazineArm(auto88DCB490_var, AbilityCommand("RaynorSHOPPING222", 0), 3);
            UnitMagazineArm(auto88DCB490_var, AbilityCommand("RaynorSHOPPING2223", 0), 3);
            libNEXS_gv_raynorArmoryBuildTimes = 1;
        }

        if ((libNEXS_gv_ryMainWeapon == 1)) {
            UnitBehaviorAddPlayer(auto88DCB490_var, "RaynorWeaponAdd22223", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryMainWeapon == 2)) {
            UnitBehaviorAddPlayer(auto88DCB490_var, "RaynorWeaponAdd32", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryMainWeapon == 3)) {
            UnitBehaviorAddPlayer(auto88DCB490_var, "RaynorWeaponAdd3", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_rySubWeapon == 1)) {
            UnitBehaviorAddPlayer(auto88DCB490_var, "RaynorWeaponAdd2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_rySubWeapon == 2)) {
            UnitBehaviorAddPlayer(auto88DCB490_var, "RaynorWeaponAdd222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_rySubWeapon == 3)) {
            UnitBehaviorAddPlayer(auto88DCB490_var, "RaynorWeaponAdd22", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryAuxiliaryEquipment == 1)) {
            UnitBehaviorAddPlayer(auto88DCB490_var, "RaynorWeaponAdd2222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryAuxiliaryEquipment == 2)) {
            UnitBehaviorAddPlayer(auto88DCB490_var, "RaynorWeaponAdd22222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryAuxiliaryEquipment == 3)) {
            UnitBehaviorAddPlayer(auto88DCB490_var, "RaynorWeaponAdd222222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryArmoredCore == 1)) {
            UnitBehaviorAddPlayer(auto88DCB490_var, "RaynorWeaponAdd22222223", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryArmoredCore == 2)) {
            UnitBehaviorAddPlayer(auto88DCB490_var, "RaynorWeaponAdd22222222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

        if ((libNEXS_gv_ryArmoredCore == 3)) {
            UnitBehaviorAddPlayer(auto88DCB490_var, "RaynorWeaponAdd2222222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5BCB9E88DAFE8A1A5E7BB99E5BA93E8BF9BE585A5E59CB0E59BBE_Init () {
    libNEXS_gt_E5BCB9E88DAFE8A1A5E7BB99E5BA93E8BF9BE585A5E59CB0E59BBE = TriggerCreate("libNEXS_gt_E5BCB9E88DAFE8A1A5E7BB99E5BA93E8BF9BE585A5E59CB0E59BBE_Func");
    TriggerEnable(libNEXS_gt_E5BCB9E88DAFE8A1A5E7BB99E5BA93E8BF9BE585A5E59CB0E59BBE, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E5BCB9E88DAFE8A1A5E7BB99E5BA93E8BF9BE585A5E59CB0E59BBE, null, "UnknownBehavior82", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8A2ABE6849FE69F93E79A84E6B3B0E587AFE696AFE5889BE5BBBA_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tychusCreateV;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) != 1) && (UnitGetOwner(EventUnit()) != 2) && (libNtve_gf_KillingPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11) && ((true))) {
        libNEXS_gv_raynorTychusKillAmount = (libNEXS_gv_raynorTychusKillAmount + 1);
        if ((libNEXS_gv_raynorTychusKillAmount == 1000)) {
            lv_tychusCreateV = RandomInt(1, 3);
            if ((lv_tychusCreateV == 2)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedTerranCampaign2", 0, 3, UnitGetPosition(EventUnit()));
                if (((true) || (true))) {
                    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, "RaynorPickup3223", 1);
                    UnitSetOwner(UnitLastCreated(), libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, true);
                }
                else {
                    TechTreeUpgradeAddLevel(3, "RaynorPickup3223", 1);
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), libNEXS_gv_ryBeaconPosition), c_orderQueueReplace);
                    AISetUnitSuicide(UnitLastCreated(), true);
                    MinimapPing(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), UnitGetPosition(EventUnit()), 5.0, Color(100.00, 0.00, 0.00));
                }
                TransmissionSendForPlayerSelect(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), TransmissionSourceFromModel("InfestedTerranPortrait2"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "InfestedTychusPortrait", "Talk", SoundLink("acAttackWave_Kerrigan_1282222222", -1), StringExternal("Param/Value/lib_NEXS_A4E9CED5"), StringExternal("Param/Value/lib_NEXS_39CFD5B1"), 0.0, c_transmissionDurationAdd, false, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, false);
                Wait(5.5, c_timeGame);
                TransmissionSendForPlayerSelect(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), TransmissionSourceFromModel("RaynorMarinePortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "RaynorMarinePortrait", "Talk", SoundLink("acAttackWave_Kerrigan_12822222222", -1), StringExternal("Param/Value/lib_NEXS_795607DE"), StringExternal("Param/Value/lib_NEXS_BAA4FF65"), 0.0, c_transmissionDurationAdd, false, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, false);
                TriggerEnable(TriggerGetCurrent(), false);
            }

        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8A2ABE6849FE69F93E79A84E6B3B0E587AFE696AFE5889BE5BBBA_Init () {
    libNEXS_gt_E8A2ABE6849FE69F93E79A84E6B3B0E587AFE696AFE5889BE5BBBA = TriggerCreate("libNEXS_gt_E8A2ABE6849FE69F93E79A84E6B3B0E587AFE696AFE5889BE5BBBA_Func");
    TriggerEnable(libNEXS_gt_E8A2ABE6849FE69F93E79A84E6B3B0E587AFE696AFE5889BE5BBBA, false);
    TriggerAddEventUnitDied(libNEXS_gt_E8A2ABE6849FE69F93E79A84E6B3B0E587AFE696AFE5889BE5BBBA, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5BCB9E4BB93E69C80E5A4A7E8AEA1E695B0E5A29EE58AA0_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoAF1A5CF4_g;
    int autoAF1A5CF4_u;
    unit autoAF1A5CF4_var;

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoAF1A5CF4_g = UnitGroup("ReigelAmmunitionDepot", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAF1A5CF4_u = UnitGroupCount(autoAF1A5CF4_g, c_unitCountAll);
    for (;; autoAF1A5CF4_u -= 1) {
        autoAF1A5CF4_var = UnitGroupUnitFromEnd(autoAF1A5CF4_g, autoAF1A5CF4_u);
        if (autoAF1A5CF4_var == null) { break; }
        if ((libNtve_gf_TriggeringProgressUpgrade() == "RaynorPickup3222")) {
            CatalogFieldValueSet(c_gameCatalogAbil, "RaynorSHOPPING2", "MaxCount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "4");
        }
        else if ((libNtve_gf_TriggeringProgressUpgrade() == "RaynorPickup32222")) {
            CatalogFieldValueSet(c_gameCatalogAbil, "RaynorSHOPPING2", "MaxCount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "5");
        }
        else if ((libNtve_gf_TriggeringProgressUpgrade() == "RaynorPickup22223222")) {
            CatalogFieldValueSet(c_gameCatalogAbil, "RaynorSHOPPING2222", "MaxCount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "2");
        }
        else if ((libNtve_gf_TriggeringProgressUpgrade() == "RaynorPickup3223")) {
            CatalogFieldValueSet(c_gameCatalogAbil, "RaynorSHOPPING222", "MaxCount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "4");
        }
        else if ((libNtve_gf_TriggeringProgressUpgrade() == "RaynorPickup32232")) {
            CatalogFieldValueSet(c_gameCatalogAbil, "RaynorSHOPPING222", "MaxCount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "5");
        }
        else if ((libNtve_gf_TriggeringProgressUpgrade() == "RaynorPickup2222322333")) {
            CatalogFieldValueSet(c_gameCatalogAbil, "RaynorSHOPPING22232", "MaxCount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "2");
        }
        else if ((libNtve_gf_TriggeringProgressUpgrade() == "RaynorPickup22223223332")) {
            CatalogFieldValueSet(c_gameCatalogAbil, "RaynorSHOPPING22232", "MaxCount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "3");
        }
        else if ((libNtve_gf_TriggeringProgressUpgrade() == "RaynorPickup222232233")) {
            CatalogFieldValueSet(c_gameCatalogAbil, "RaynorSHOPPING2223", "MaxCount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "4");
        }
        else if ((libNtve_gf_TriggeringProgressUpgrade() == "RaynorPickup2222322332")) {
            CatalogFieldValueSet(c_gameCatalogAbil, "RaynorSHOPPING2223", "MaxCount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "5");
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5BCB9E4BB93E69C80E5A4A7E8AEA1E695B0E5A29EE58AA0_Init () {
    libNEXS_gt_E5BCB9E4BB93E69C80E5A4A7E8AEA1E695B0E5A29EE58AA0 = TriggerCreate("libNEXS_gt_E5BCB9E4BB93E69C80E5A4A7E8AEA1E695B0E5A29EE58AA0_Func");
    TriggerEnable(libNEXS_gt_E5BCB9E4BB93E69C80E5A4A7E8AEA1E695B0E5A29EE58AA0, false);
    TriggerAddEventUnitResearchProgress(libNEXS_gt_E5BCB9E4BB93E69C80E5A4A7E8AEA1E695B0E5A29EE58AA0, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99BB7E8AFBAE38081E587AFE7919EE79498E6ADBBE4BAA1E4B88EE8A1A5E7BB99E5BA93E691A7E6AF81_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto35268AEB_g;
    int auto35268AEB_u;
    unit auto35268AEB_var;
    unitgroup auto85EC594B_g;
    int auto85EC594B_u;
    unit auto85EC594B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitDamageDeathCheck(c_deathTypeMorph) != true) && (EventUnitDamageDeathCheck(c_deathTypeCancel) != true) && (EventUnitDamageDeathCheck(c_deathTypeRemove) != true) && ((UnitGetType(EventUnit()) == "TychusCommando22") || (UnitGetType(EventUnit()) == "HERC2") || (UnitGetType(EventUnit()) == "TychusCommando222") || (UnitGetType(EventUnit()) == "TychusCommando2") || (UnitGetType(EventUnit()) == "RaynorCommando22") || (UnitGetType(EventUnit()) == "RaynorCommando2"))) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_5D367E69"));
        UnitGroupClear(libNEXS_gv_raynorHERO);
        auto35268AEB_g = UnitGroup("ReigelArmory", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto35268AEB_u = UnitGroupCount(auto35268AEB_g, c_unitCountAll);
        for (;; auto35268AEB_u -= 1) {
            auto35268AEB_var = UnitGroupUnitFromEnd(auto35268AEB_g, auto35268AEB_u);
            if (auto35268AEB_var == null) { break; }
            UnitBehaviorAddPlayer(auto35268AEB_var, "PermanentlyUncommandable2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }
        auto85EC594B_g = UnitGroup("ReigelArmory2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto85EC594B_u = UnitGroupCount(auto85EC594B_g, c_unitCountAll);
        for (;; auto85EC594B_u -= 1) {
            auto85EC594B_var = UnitGroupUnitFromEnd(auto85EC594B_g, auto85EC594B_u);
            if (auto85EC594B_var == null) { break; }
            UnitBehaviorAddPlayer(auto85EC594B_var, "PermanentlyUncommandable2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PlaceWormholeUnit23233", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, libNEXS_gv_ryBeaconPosition);
    }

    if ((UnitGetType(EventUnit()) == "ReigelAmmunitionDepot")) {
        UnitGroupClear(libNEXS_gv_raynorArmory);
    }

    if ((EventUnitDamageDeathCheck(c_deathTypeMorph) != true) && (EventUnitDamageDeathCheck(c_deathTypeCancel) != true) && (EventUnitDamageDeathCheck(c_deathTypeRemove) != true) && ((UnitGetType(EventUnit()) == "KerriganGhostLab2"))) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_3F822CD2"));
        UnitGroupClear(libNEXS_gv_raynorKerrigan);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99BB7E8AFBAE38081E587AFE7919EE79498E6ADBBE4BAA1E4B88EE8A1A5E7BB99E5BA93E691A7E6AF81_Init () {
    libNEXS_gt_E99BB7E8AFBAE38081E587AFE7919EE79498E6ADBBE4BAA1E4B88EE8A1A5E7BB99E5BA93E691A7E6AF81 = TriggerCreate("libNEXS_gt_E99BB7E8AFBAE38081E587AFE7919EE79498E6ADBBE4BAA1E4B88EE8A1A5E7BB99E5BA93E691A7E6AF81_Func");
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE38081E587AFE7919EE79498E6ADBBE4BAA1E4B88EE8A1A5E7BB99E5BA93E691A7E6AF81, false);
    TriggerAddEventUnitDied(libNEXS_gt_E99BB7E8AFBAE38081E587AFE7919EE79498E6ADBBE4BAA1E4B88EE8A1A5E7BB99E5BA93E691A7E6AF81, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99BB7E8AFBAE79A84E9A38EE69AB4E88BB1E99B84E5BDA9E89B8B_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitDamageDeathCheck(c_deathTypeMorph) != true) && (EventUnitDamageDeathCheck(c_deathTypeCancel) != true) && (EventUnitDamageDeathCheck(c_deathTypeRemove) != true) && (libNtve_gf_KillingPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11)) {
        if ((UnitGetType(EventUnit()) == "MutatorAmonRaynor")) {
            SoundPlayForPlayer(SoundLink("acAttackWave_Kerrigan_1282222222332242", -1), c_maxPlayers, PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), 150.0, 0.0);
        }

        if ((UnitGetType(EventUnit()) == "MutatorAmonKerrigan")) {
            SoundPlayForPlayer(SoundLink("acAttackWave_Kerrigan_128222222233224", -1), c_maxPlayers, PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), 150.0, 0.0);
        }

        if ((UnitGetType(EventUnit()) == "MutatorAmonTychus")) {
            SoundPlayForPlayer(SoundLink("acAttackWave_Kerrigan_12822222223322422", -1), c_maxPlayers, PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), 200.0, 0.0);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99BB7E8AFBAE79A84E9A38EE69AB4E88BB1E99B84E5BDA9E89B8B_Init () {
    libNEXS_gt_E99BB7E8AFBAE79A84E9A38EE69AB4E88BB1E99B84E5BDA9E89B8B = TriggerCreate("libNEXS_gt_E99BB7E8AFBAE79A84E9A38EE69AB4E88BB1E99B84E5BDA9E89B8B_Func");
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE79A84E9A38EE69AB4E88BB1E99B84E5BDA9E89B8B, false);
    TriggerAddEventUnitDied(libNEXS_gt_E99BB7E8AFBAE79A84E9A38EE69AB4E88BB1E99B84E5BDA9E89B8B, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8006_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "RaynorEngineerUpgrade23")) {
        libNEXS_gv_equipmentADMin = 12;
        libNEXS_gv_equipmentADMax = 12;
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "RaynorEngineerUpgrade23", 1);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8006_Init () {
    libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8006 = TriggerCreate("libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8006_Func");
    TriggerEnable(libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8006, false);
    TriggerAddEventUnitResearchProgress(libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8006, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????Debug
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99BB7E8AFBAE8A385E794B2Debug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    if (((UnitGetType(EventUnit()) == "TychusCommando22") || (UnitGetType(EventUnit()) == "HERC2") || (UnitGetType(EventUnit()) == "TychusCommando222"))) {
        if ((UnitHasBehavior2(EventUnit(), "RaynorCGunTimeOut2") == true)) {
            UnitBehaviorAdd(EventUnit(), "RaynorCGunTimeOut3233", EventUnit(), 1);
        }

        if ((UnitHasBehavior2(EventUnit(), "RaynorCGunTimeOut222") == true)) {
            UnitBehaviorAdd(EventUnit(), "RaynorCGunTimeOut32332", EventUnit(), 1);
        }

        if ((UnitHasBehavior2(EventUnit(), "RaynorCGunTimeOut22") == true)) {
            UnitBehaviorAdd(EventUnit(), "RaynorCGunTimeOut323322", EventUnit(), 1);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99BB7E8AFBAE8A385E794B2Debug_Init () {
    libNEXS_gt_E99BB7E8AFBAE8A385E794B2Debug = TriggerCreate("libNEXS_gt_E99BB7E8AFBAE8A385E794B2Debug_Func");
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE8A385E794B2Debug, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E99BB7E8AFBAE8A385E794B2Debug, null, "RaynorCGunTimeOut323", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????Debug
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99BB7E8AFBAE68EA7E588B6Debug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 0) || (UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "MindControl22", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99BB7E8AFBAE68EA7E588B6Debug_Init () {
    libNEXS_gt_E99BB7E8AFBAE68EA7E588B6Debug = TriggerCreate("libNEXS_gt_E99BB7E8AFBAE68EA7E588B6Debug_Func");
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE68EA7E588B6Debug, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E99BB7E8AFBAE68EA7E588B6Debug, null, "MindControl22", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Super IRON - ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SuperIRONE992A2E99381E993A0E794B2E59B9EE5A48DE883BDE9878F_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TychusCommando222"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "SymbioteCarapace2224") == true)) {
        PlayerCreateEffectUnit(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "SymbioteCarapaceAB22222", EventUnit());
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) + (EventUnitDamageAmount() * 1.0)));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SuperIRONE992A2E99381E993A0E794B2E59B9EE5A48DE883BDE9878F_Init () {
    libNEXS_gt_SuperIRONE992A2E99381E993A0E794B2E59B9EE5A48DE883BDE9878F = TriggerCreate("libNEXS_gt_SuperIRONE992A2E99381E993A0E794B2E59B9EE5A48DE883BDE9878F_Func");
    TriggerEnable(libNEXS_gt_SuperIRONE992A2E99381E993A0E794B2E59B9EE5A48DE883BDE9878F, false);
    TriggerAddEventUnitDamaged(libNEXS_gt_SuperIRONE992A2E99381E993A0E794B2E59B9EE5A48DE883BDE9878F, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Super DOOM - ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B20_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D;
    point lv_e99A8FE69CBAE4BD8DE782B9;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_e99A8FE69CBAE4BD8DE782B9 = PointWithOffsetPolar(UnitGetPosition(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D), 1.0, libNtve_gf_RandomAngle());
    UnitIssueOrder(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D), -5.0, lv_e99A8FE69CBAE4BD8DE782B9)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    while ((UnitHasBehavior2(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D, "MutatorFear33") == true) && (UnitIsAlive(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D) == true)) {
        UnitIssueOrder(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D), 3.0))), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    UnitIssueOrder(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B20_Init () {
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B20 = TriggerCreate("libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B20_Func");
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B20, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B20, null, "MutatorFear33", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B20, null, "MutatorFear33", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LandPoint - ???????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B19_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D;
    point lv_e99A8FE69CBAE4BD8DE782B9;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_e99A8FE69CBAE4BD8DE782B9 = PointWithOffsetPolar(UnitGetPosition(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D), 1.0, libNtve_gf_RandomAngle());
    UnitIssueOrder(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D), -5.0, lv_e99A8FE69CBAE4BD8DE782B9)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    while ((UnitHasBehavior2(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D, "HHHellionTankFear53") == true) && (UnitIsAlive(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D) == true)) {
        UnitIssueOrder(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D), 3.0))), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    UnitIssueOrder(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B19_Init () {
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B19 = TriggerCreate("libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B19_Func");
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B19, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B19, null, "HHHellionTankFear53", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B19, null, "HHHellionTankFear53", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CGun - ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CGunE7BB88E69C89E4B880E6ADBBE78886E782B8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventUnitDamageEffect() == "YamatoU44") || (EventUnitDamageEffect() == "Suicide153222")))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeBlast) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(libNtve_gf_KillingUnit(), "MutatorKerriganApocalypse32", UnitGetPosition(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CGunE7BB88E69C89E4B880E6ADBBE78886E782B8_Init () {
    libNEXS_gt_CGunE7BB88E69C89E4B880E6ADBBE78886E782B8 = TriggerCreate("libNEXS_gt_CGunE7BB88E69C89E4B880E6ADBBE78886E782B8_Func");
    TriggerEnable(libNEXS_gt_CGunE7BB88E69C89E4B880E6ADBBE78886E782B8, false);
    TriggerAddEventUnitDied(libNEXS_gt_CGunE7BB88E69C89E4B880E6ADBBE78886E782B8, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CGun - ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CGunE7BB88E69C89E4B880E6ADBBE5BCB9E88DAFE8A385E5A1AB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto921641E0_g;
    int auto921641E0_u;
    unit auto921641E0_var;
    unitgroup auto8D6A8385_g;
    int auto8D6A8385_u;
    unit auto8D6A8385_var;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerAddChargeUsed(EventPlayer(), "Abil/RaynorCGunShoot", -4.0);
    if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorPickup22223223", c_techCountCompleteOnly) == 0)) {
        UnitBehaviorAddPlayer(EventPlayerEffectUsedUnit(c_effectUnitCaster), "RaynorCGunTimeOut3", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 2);
    }
    else {
        if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorPickup222232232", c_techCountCompleteOnly) == 0)) {
            UnitBehaviorAddPlayer(EventPlayerEffectUsedUnit(c_effectUnitCaster), "RaynorCGunTimeOut3", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        }

    }
    if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorPickup22223223", c_techCountCompleteOnly) == 1)) {
        PlayerAddChargeUsed(EventPlayer(), "Abil/RaynorCGunShoot", -1.0);
    }

    if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorPickup222232232", c_techCountCompleteOnly) == 1)) {
        PlayerAddChargeUsed(EventPlayer(), "Abil/RaynorCGunShoot", -1.0);
    }

    Wait(0.0625, c_timeGame);
    if ((libNEXS_gv_raynorShootMengsk == 1) && (UnitGroupCount(UnitGroup("RaynorLab2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)) {
        libNEXS_gv_raynorShootMengsk = 0;
        Wait(1.0, c_timeGame);
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_36BEE90D"));
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_D5B2489A"));
        auto921641E0_g = UnitGroup("Odin2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto921641E0_u = UnitGroupCount(auto921641E0_g, c_unitCountAll);
        for (;; auto921641E0_u -= 1) {
            auto921641E0_var = UnitGroupUnitFromEnd(auto921641E0_g, auto921641E0_u);
            if (auto921641E0_var == null) { break; }
            libNtve_gf_MakeUnitFacePoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), UnitGetPosition(auto921641E0_var), 1.0);
            UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "Yamato42", auto921641E0_var);
        }
        auto8D6A8385_g = UnitGroup("OdinWreckage", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto8D6A8385_u = UnitGroupCount(auto8D6A8385_g, c_unitCountAll);
        for (;; auto8D6A8385_u -= 1) {
            auto8D6A8385_var = UnitGroupUnitFromEnd(auto8D6A8385_g, auto8D6A8385_u);
            if (auto8D6A8385_var == null) { break; }
            libNtve_gf_MakeUnitFacePoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), UnitGetPosition(auto8D6A8385_var), 1.0);
            UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "Yamato42", auto8D6A8385_var);
        }
        TransmissionSendForPlayerSelect(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), TransmissionSourceFromModel("RaynorMarinePortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "RaynorMarinePortrait", "Talk", SoundLink("acAttackWave_Kerrigan_128222222222", -1), StringExternal("Param/Value/lib_NEXS_75BED415"), StringExternal("Param/Value/lib_NEXS_0F8FA3C6"), 0.0, c_transmissionDurationAdd, false, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, false);
        TransmissionSendForPlayerSelect(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5), TransmissionSourceFromModel("RaynorMarinePortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "RaynorMarinePortrait", "Talk", SoundLink("acAttackWave_Kerrigan_128222222222", -1), StringExternal("Param/Value/lib_NEXS_3B715F86"), StringExternal("Param/Value/lib_NEXS_9F397961"), 0.0, c_transmissionDurationAdd, false, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, false);
        Wait(5.0, c_timeGame);
        TransmissionSendForPlayerSelect(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), TransmissionSourceFromModel("ArcturusPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "ActurusMengskPortrait", "Talk", SoundLink("UI_PingAdvanced_OnMyWay", -1), StringExternal("Param/Value/lib_NEXS_D3AC3605"), StringExternal("Param/Value/lib_NEXS_8612AFD2"), 0.0, c_transmissionDurationAdd, false, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, false);
        TransmissionSendForPlayerSelect(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5), TransmissionSourceFromModel("ArcturusPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "ActurusMengskPortrait", "Talk", SoundLink("UI_PingAdvanced_OnMyWay", -1), StringExternal("Param/Value/lib_NEXS_6FFEF099"), StringExternal("Param/Value/lib_NEXS_55AFDED2"), 0.0, c_transmissionDurationAdd, false, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CGunE7BB88E69C89E4B880E6ADBBE5BCB9E88DAFE8A385E5A1AB_Init () {
    libNEXS_gt_CGunE7BB88E69C89E4B880E6ADBBE5BCB9E88DAFE8A385E5A1AB = TriggerCreate("libNEXS_gt_CGunE7BB88E69C89E4B880E6ADBBE5BCB9E88DAFE8A385E5A1AB_Func");
    TriggerEnable(libNEXS_gt_CGunE7BB88E69C89E4B880E6ADBBE5BCB9E88DAFE8A385E5A1AB, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_CGunE7BB88E69C89E4B880E6ADBBE5BCB9E88DAFE8A385E5A1AB, c_playerAny, "RaynorCGUNtimeout4");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E587AFE69292E8A18CE6989FE8A681E5A19EE59DA0E890BD_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    fixed lv_distance;
    fixed[4] lv_cameraPosition;
    fixed[4] lv_effectPosition;
    int lv_player;
    point lv_effectTargetPoint;
    point lv_cameraTargetPoint;
    unit lv_scienceFalicity;

    // Automatic Variable Declarations
    playergroup autoC36CA8EE_g;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_effectTargetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_scienceFalicity = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.63, c_timeGame);
    lv_effectPosition[0] = PointGetX(lv_effectTargetPoint);
    lv_effectPosition[1] = PointGetY(lv_effectTargetPoint);
    lv_effectPosition[2] = WorldHeight(c_heightMapGround, lv_effectTargetPoint);
    autoC36CA8EE_g = PlayerGroupActive();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoC36CA8EE_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_cameraTargetPoint = CameraGetTarget(lv_player);
        lv_cameraPosition[0] = PointGetX(lv_cameraTargetPoint);
        lv_cameraPosition[1] = (PointGetY(lv_cameraTargetPoint)-(Cos(CameraGetPitch(lv_player))*CameraGetDistance(lv_player)));
        lv_cameraPosition[2] = (WorldHeight(c_heightMapGround, lv_cameraTargetPoint)+(Sin(CameraGetPitch(lv_player))*CameraGetDistance(lv_player)));
        lv_distance = SquareRoot((Pow((lv_cameraPosition[0]-lv_effectPosition[0]), 2.0) + Pow((lv_cameraPosition[1]-lv_effectPosition[1]), 2.0) + Pow((lv_cameraPosition[2]-lv_effectPosition[2]), 2.0)));
        CameraShakeStart(lv_player, c_cameraPositionTarget, c_cameraDirectionZ, MaxF((1-(lv_distance/50)), 0.0), 5.0, 100.0, 0.5);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E587AFE69292E8A18CE6989FE8A681E5A19EE59DA0E890BD_Init () {
    libNEXS_gt_E587AFE69292E8A18CE6989FE8A681E5A19EE59DA0E890BD = TriggerCreate("libNEXS_gt_E587AFE69292E8A18CE6989FE8A681E5A19EE59DA0E890BD_Func");
    TriggerEnable(libNEXS_gt_E587AFE69292E8A18CE6989FE8A681E5A19EE59DA0E890BD, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E587AFE69292E8A18CE6989FE8A681E5A19EE59DA0E890BD, c_playerAny, "SummonHyperionCreateUnit42422");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5B084E587BBE58AA9E6898BE5A1ABE8A385_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitMagazineArm(EventPlayerEffectUsedUnit(c_effectUnitCaster), AbilityCommand("MutatorAmonMakeServitors2", 0), 1);
    if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorPickup2222322", c_techCountCompleteOnly) == 1)) {
        UnitMagazineArm(EventPlayerEffectUsedUnit(c_effectUnitCaster), AbilityCommand("MutatorAmonMakeServitors2", 0), 1);
    }

    if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorPickup22223222", c_techCountCompleteOnly) == 1)) {
        UnitMagazineArm(EventPlayerEffectUsedUnit(c_effectUnitCaster), AbilityCommand("MutatorAmonMakeServitors2", 0), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5B084E587BBE58AA9E6898BE5A1ABE8A385_Init () {
    libNEXS_gt_E5B084E587BBE58AA9E6898BE5A1ABE8A385 = TriggerCreate("libNEXS_gt_E5B084E587BBE58AA9E6898BE5A1ABE8A385_Func");
    TriggerEnable(libNEXS_gt_E5B084E587BBE58AA9E6898BE5A1ABE8A385, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E5B084E587BBE58AA9E6898BE5A1ABE8A385, c_playerAny, "SymbioteCarapaceAB22223");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E789B9E6AE8AE69CBAE794B2E5A1ABE8A385_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "Abil/RaynorBFG", -2.0);
    PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "Abil/RaynorHercGrapple", -10.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E789B9E6AE8AE69CBAE794B2E5A1ABE8A385_Init () {
    libNEXS_gt_E789B9E6AE8AE69CBAE794B2E5A1ABE8A385 = TriggerCreate("libNEXS_gt_E789B9E6AE8AE69CBAE794B2E5A1ABE8A385_Func");
    TriggerEnable(libNEXS_gt_E789B9E6AE8AE69CBAE794B2E5A1ABE8A385, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E789B9E6AE8AE69CBAE794B2E5A1ABE8A385, null, "RaynorCGunTimeOut323", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6898BE99BB7E4BD8DE7BDAEE7A1AEE8AEA4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_e6898BE6A6B4E5BCB9E79A84E696BDE6B395E4BD8DE7BDAE = UnitGetPosition(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6898BE99BB7E4BD8DE7BDAEE7A1AEE8AEA4_Init () {
    libNEXS_gt_E6898BE99BB7E4BD8DE7BDAEE7A1AEE8AEA4 = TriggerCreate("libNEXS_gt_E6898BE99BB7E4BD8DE7BDAEE7A1AEE8AEA4_Func");
    TriggerEnable(libNEXS_gt_E6898BE99BB7E4BD8DE7BDAEE7A1AEE8AEA4, false);
    TriggerAddEventUnitAbility(libNEXS_gt_E6898BE99BB7E4BD8DE7BDAEE7A1AEE8AEA4, null, AbilityCommand("TychusShredderGrenade", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5889BE5BBBAE8BF90E8BE93E888B9E59B9EE5AEB6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NovaGriffinTransportUnit222232", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, UnitGetPosition(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5889BE5BBBAE8BF90E8BE93E888B9E59B9EE5AEB6_Init () {
    libNEXS_gt_E5889BE5BBBAE8BF90E8BE93E888B9E59B9EE5AEB6 = TriggerCreate("libNEXS_gt_E5889BE5BBBAE8BF90E8BE93E888B9E59B9EE5AEB6_Func");
    TriggerEnable(libNEXS_gt_E5889BE5BBBAE8BF90E8BE93E888B9E59B9EE5AEB6, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E5889BE5BBBAE8BF90E8BE93E888B9E59B9EE5AEB6, null, "Recalled3", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99BB7E8AFBAE8BF9BE585A5E59CB0E5A0A1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7EF2D5F9_g;
    int auto7EF2D5F9_u;
    unit auto7EF2D5F9_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto7EF2D5F9_g = UnitGroup("ReigelArmory", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7EF2D5F9_u = UnitGroupCount(auto7EF2D5F9_g, c_unitCountAll);
    for (;; auto7EF2D5F9_u -= 1) {
        auto7EF2D5F9_var = UnitGroupUnitFromEnd(auto7EF2D5F9_g, auto7EF2D5F9_u);
        if (auto7EF2D5F9_var == null) { break; }
        UnitBehaviorAddPlayer(auto7EF2D5F9_var, "PermanentlyUncommandable222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99BB7E8AFBAE8BF9BE585A5E59CB0E5A0A1_Init () {
    libNEXS_gt_E99BB7E8AFBAE8BF9BE585A5E59CB0E5A0A1 = TriggerCreate("libNEXS_gt_E99BB7E8AFBAE8BF9BE585A5E59CB0E5A0A1_Func");
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE8BF9BE585A5E59CB0E5A0A1, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E99BB7E8AFBAE8BF9BE585A5E59CB0E5A0A1, null, "RaynorBunkerAA", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99BB7E8AFBAE7A6BBE5BC80E59CB0E5A0A1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF54650DA_g;
    int autoF54650DA_u;
    unit autoF54650DA_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoF54650DA_g = UnitGroup("ReigelArmory", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF54650DA_u = UnitGroupCount(autoF54650DA_g, c_unitCountAll);
    for (;; autoF54650DA_u -= 1) {
        autoF54650DA_var = UnitGroupUnitFromEnd(autoF54650DA_g, autoF54650DA_u);
        if (autoF54650DA_var == null) { break; }
        UnitBehaviorRemove(autoF54650DA_var, "PermanentlyUncommandable222", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99BB7E8AFBAE7A6BBE5BC80E59CB0E5A0A1_Init () {
    libNEXS_gt_E99BB7E8AFBAE7A6BBE5BC80E59CB0E5A0A1 = TriggerCreate("libNEXS_gt_E99BB7E8AFBAE7A6BBE5BC80E59CB0E5A0A1_Func");
    TriggerEnable(libNEXS_gt_E99BB7E8AFBAE7A6BBE5BC80E59CB0E5A0A1, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E99BB7E8AFBAE7A6BBE5BC80E59CB0E5A0A1, null, "RaynorBunkerAA", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6898BE99BB7E4BA8CE6ACA1E5BCB9E5B084_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "RaynorPickup32232", c_techCountCompleteOnly) == 1) && (UnitGetType(EventUnit()) == "PlaceWormholeUnit232234")) {
        UnitCreateEffectPoint(EventUnit(), "TychusShredderGrenadeDelay2", libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnit()), -3.0, libNEXS_gv_e6898BE6A6B4E5BCB9E79A84E696BDE6B395E4BD8DE7BDAE));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6898BE99BB7E4BA8CE6ACA1E5BCB9E5B084_Init () {
    libNEXS_gt_E6898BE99BB7E4BA8CE6ACA1E5BCB9E5B084 = TriggerCreate("libNEXS_gt_E6898BE99BB7E4BA8CE6ACA1E5BCB9E5B084_Func");
    TriggerEnable(libNEXS_gt_E6898BE99BB7E4BA8CE6ACA1E5BCB9E5B084, false);
    TriggerAddEventUnitRegion(libNEXS_gt_E6898BE99BB7E4BA8CE6ACA1E5BCB9E5B084, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E5A4A7E5928CE782AEE69AB4E587BB3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_raynorCEXTextRandom;
    int lv_raynorCEXText;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_raynorCEXText = c_textTagNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_raynorCEXTextRandom = RandomInt(1, 4);
    if ((lv_raynorCEXTextRandom == 1)) {
        TextTagCreate(StringExternal("Param/Value/lib_NEXS_249B0FFC"), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 3.0, true, false, PlayerGroupAll());
    }

    if ((lv_raynorCEXTextRandom == 2)) {
        TextTagCreate(StringExternal("Param/Value/lib_NEXS_76BABCF3"), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 3.0, true, false, PlayerGroupAll());
    }

    if ((lv_raynorCEXTextRandom == 3)) {
        TextTagCreate(StringExternal("Param/Value/lib_NEXS_361BE9FA"), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 3.0, true, false, PlayerGroupAll());
    }

    if ((lv_raynorCEXTextRandom == 4)) {
        TextTagCreate(StringExternal("Param/Value/lib_NEXS_1E6AC31B"), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 3.0, true, false, PlayerGroupAll());
    }

    lv_raynorCEXText = TextTagLastCreated();
    TextTagSetColor(lv_raynorCEXText, c_textTagColorText, Color(100.00, 0.00, 0.00));
    TextTagSetVelocity(lv_raynorCEXText, 0.5, 90.0);
    Wait(1.65, c_timeGame);
    TextTagDestroy(lv_raynorCEXText);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E5A4A7E5928CE782AEE69AB4E587BB3_Init () {
    libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E5A4A7E5928CE782AEE69AB4E587BB3 = TriggerCreate("libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E5A4A7E5928CE782AEE69AB4E587BB3_Func");
    TriggerEnable(libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E5A4A7E5928CE782AEE69AB4E587BB3, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E5A4A7E5928CE782AEE69AB4E587BB3, c_playerAny, "NXTychusHERCWeaponDamageCritDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6B8B8E9AA91E585B5E68EA7E588B6E69D83E7A7BBE4BAA4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8) && ((UnitGetType(EventUnit()) == "Goliath4") || (UnitGetType(EventUnit()) == "SCV23") || (UnitGetType(EventUnit()) == "WarPig2") || (UnitGetType(EventUnit()) == "Bunker3") || (UnitGetType(EventUnit()) == "SiegeTankSieged") || (UnitGetType(EventUnit()) == "SiegeTank"))) {
        UnitBehaviorAddPlayer(EventUnit(), "RaynorSCon", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, 1);
        if ((libNEXS_gv_raynorStetmannControl == 1)) {
            libNEXS_gv_raynorStetmannControl = 0;
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_0157C439"));
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_11E9B559"));
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6B8B8E9AA91E585B5E68EA7E588B6E69D83E7A7BBE4BAA4_Init () {
    libNEXS_gt_E6B8B8E9AA91E585B5E68EA7E588B6E69D83E7A7BBE4BAA4 = TriggerCreate("libNEXS_gt_E6B8B8E9AA91E585B5E68EA7E588B6E69D83E7A7BBE4BAA4_Func");
    TriggerEnable(libNEXS_gt_E6B8B8E9AA91E585B5E68EA7E588B6E69D83E7A7BBE4BAA4, false);
    TriggerAddEventUnitRegion(libNEXS_gt_E6B8B8E9AA91E585B5E68EA7E588B6E69D83E7A7BBE4BAA4, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E681B6E9AD94E78AACE781ABE784B0E5BCB9E58F8DE5BCB9_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnitDamageSourceUnit()) != libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11) && (UnitFilterMatch(EventUnitDamageSourceUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == true) && (UnitGetType(EventUnit()) == "ReigelDevilDog")) {
        UnitCreateEffectUnit(EventUnit(), "RavagerWeaponLM33", EventUnitDamageSourceUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E681B6E9AD94E78AACE781ABE784B0E5BCB9E58F8DE5BCB9_Init () {
    libNEXS_gt_E681B6E9AD94E78AACE781ABE784B0E5BCB9E58F8DE5BCB9 = TriggerCreate("libNEXS_gt_E681B6E9AD94E78AACE781ABE784B0E5BCB9E58F8DE5BCB9_Func");
    TriggerEnable(libNEXS_gt_E681B6E9AD94E78AACE781ABE784B0E5BCB9E58F8DE5BCB9, false);
    TriggerAddEventUnitDamaged(libNEXS_gt_E681B6E9AD94E78AACE781ABE784B0E5BCB9E58F8DE5BCB9, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99B87E4BDA3E585B5E58585E883BDE8BF94E8BF98_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "ReigelWarPig")) {
        libNEXS_gv_rMMarineCB += 1;
        if ((libNEXS_gv_rMMarineCB == 4)) {
            libNEXS_gv_rMMarineCB = 0;
            Wait(2.0, c_timeGame);
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "KelMorianMercs", -1.0);
        }

    }

    if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "ReigelHammerSecurity")) {
        libNEXS_gv_rMMarauderCB += 1;
        if ((libNEXS_gv_rMMarauderCB == 2)) {
            libNEXS_gv_rMMarauderCB = 0;
            Wait(2.0, c_timeGame);
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "HammerSecurities", -1.0);
        }

    }

    if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "ReigelDevilDog")) {
        libNEXS_gv_rMFirebatCB += 1;
        if ((libNEXS_gv_rMFirebatCB == 2)) {
            libNEXS_gv_rMFirebatCB = 0;
            Wait(2.0, c_timeGame);
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "DevilDogs", -1.0);
        }

    }

    if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "ReigelSpartanCompany")) {
        libNEXS_gv_rMGoliathCB += 1;
        if ((libNEXS_gv_rMGoliathCB == 2)) {
            libNEXS_gv_rMGoliathCB = 0;
            Wait(2.0, c_timeGame);
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "SpartanCompany", -1.0);
        }

    }

    if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "ReigelBanshee")) {
        libNEXS_gv_rMBansheeCB += 1;
        if ((libNEXS_gv_rMBansheeCB == 2)) {
            libNEXS_gv_rMBansheeCB = 0;
            Wait(2.0, c_timeGame);
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "DuskWing", -1.0);
        }

    }

    if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "ReigelShadowBladeSpectre")) {
        libNEXS_gv_rMSpectreCB += 1;
        if ((libNEXS_gv_rMSpectreCB == 2)) {
            libNEXS_gv_rMSpectreCB = 0;
            Wait(2.0, c_timeGame);
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "Abil/ShadowSpectre", -1.0);
        }

    }

    if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "ReigelJacksonsRevenge")) {
        Wait(2.0, c_timeGame);
        PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "DukesRevenge", -1.0);
    }

    if (((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "ReigelSiegeBreaker") || (UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "MengskSiegeTankSieged2"))) {
        libNEXS_gv_rMTankCB += 1;
        if ((libNEXS_gv_rMTankCB == 2)) {
            libNEXS_gv_rMTankCB = 0;
            Wait(2.0, c_timeGame);
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "SiegeBreakers", -1.0);
        }

    }

    if (((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "HelsAngelFighter") || (UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "HelsAngelAssault"))) {
        libNEXS_gv_rMVikingCB += 1;
        if ((libNEXS_gv_rMVikingCB == 2)) {
            libNEXS_gv_rMVikingCB = 0;
            Wait(2.0, c_timeGame);
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "HelsAngels", -1.0);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99B87E4BDA3E585B5E58585E883BDE8BF94E8BF98_Init () {
    libNEXS_gt_E99B87E4BDA3E585B5E58585E883BDE8BF94E8BF98 = TriggerCreate("libNEXS_gt_E99B87E4BDA3E585B5E58585E883BDE8BF94E8BF98_Func");
    TriggerEnable(libNEXS_gt_E99B87E4BDA3E585B5E58585E883BDE8BF94E8BF98, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E99B87E4BDA3E585B5E58585E883BDE8BF94E8BF98, c_playerAny, "ZeratulTransportVoidSeekerCreateUnit22");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_Gerard
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_DUT_Gerard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup autoB6FB2E97_g;
    int autoB6FB2E97_var;

    // Variable Initialization
    lv_players = libCOMI_gf_PlayersOfCommander("NexusGerard");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_UEDE58D95E4BD8DE6ADBBE4BAA1, true);
    TriggerEnable(libNEXS_gt_UEDE5BC80E590AFE99DA2E69DBFE68A80E883BDE58585E883BD, true);
    TriggerEnable(libNEXS_gt_UEDE5BEAAE78EAF, true);
    TriggerEnable(libNEXS_gt_E596B7E6B094E8838CE58C85E887AAE58AA8E8B7B3E8B783, true);
    TriggerEnable(libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E5A4A7E5928CE782AEE69AB4E587BB, true);
    TriggerEnable(libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E699AEE694BBE69AB4E587BB, true);
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B3, true);
    TriggerEnable(libNEXS_gt_E8B584E6BA90E68E89E890BD, true);
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B4, true);
    TriggerEnable(libNEXS_gt_VAE5BBBAE980A0E5AE8CE68890, true);
    TriggerEnable(libNEXS_gt_VCE5BBBAE980A0E5AE8CE68890, true);
    TriggerEnable(libNEXS_gt_UEDBCE79FBFE9AAA1, true);
    TriggerEnable(libNEXS_gt_UEDE998BFE5B094E6B395E58F8DE587BBE997AAE794B5, true);
    TriggerEnable(libNEXS_gt_UEDE7A9BAE997B4E7AB99E58F98E5BC82, true);
    TriggerEnable(libNEXS_gt_UEDE5BC80E590AFE99DA2E69DBFE68A80E883BDE58585E883BD2, true);
    autoB6FB2E97_g = lv_players;
    autoB6FB2E97_var = -1;
    while (true) {
        autoB6FB2E97_var = PlayerGroupNextPlayer(autoB6FB2E97_g, autoB6FB2E97_var);
        if (autoB6FB2E97_var < 0) { break; }
        libNEXS_gv_e4BDBFE794A8UEDE68C87E68CA5E5AE98E79A84E78EA9E5AEB6 = autoB6FB2E97_var;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_DUT_Gerard_Init () {
    libNEXS_gt_DUT_Gerard = TriggerCreate("libNEXS_gt_DUT_Gerard_Func");
    TriggerAddEventGeneric(libNEXS_gt_DUT_Gerard, libCOMI_gv_mISSIONINITIALIZED);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UED????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_UEDE5BC80E590AFE99DA2E69DBFE68A80E883BDE58585E883BD_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8UEDE68C87E68CA5E5AE98E79A84E78EA9E5AEB6, "Abil/UEDMBJN", -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_UEDE5BC80E590AFE99DA2E69DBFE68A80E883BDE58585E883BD_Init () {
    libNEXS_gt_UEDE5BC80E590AFE99DA2E69DBFE68A80E883BDE58585E883BD = TriggerCreate("libNEXS_gt_UEDE5BC80E590AFE99DA2E69DBFE68A80E883BDE58585E883BD_Func");
    TriggerEnable(libNEXS_gt_UEDE5BC80E590AFE99DA2E69DBFE68A80E883BDE58585E883BD, false);
    TriggerAddEventTimePeriodic(libNEXS_gt_UEDE5BC80E590AFE99DA2E69DBFE68A80E883BDE58585E883BD, 240.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UED????????????65???
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_UEDE5BC80E590AFE99DA2E69DBFE68A80E883BDE58585E883BD2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_UEDE7A9BAE997B4E7AB99E58F98E5BC82, false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_UEDE5BC80E590AFE99DA2E69DBFE68A80E883BDE58585E883BD2_Init () {
    libNEXS_gt_UEDE5BC80E590AFE99DA2E69DBFE68A80E883BDE58585E883BD2 = TriggerCreate("libNEXS_gt_UEDE5BC80E590AFE99DA2E69DBFE68A80E883BDE58585E883BD2_Func");
    TriggerEnable(libNEXS_gt_UEDE5BC80E590AFE99DA2E69DBFE68A80E883BDE58585E883BD2, false);
    TriggerAddEventTimeElapsed(libNEXS_gt_UEDE5BC80E590AFE99DA2E69DBFE68A80E883BDE58585E883BD2, 65.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UED????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_UEDE58D95E4BD8DE6ADBBE4BAA1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDA033146_g;
    int autoDA033146_u;
    unit autoDA033146_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnit()) == "GerardGoliath") || (UnitGetType(EventUnit()) == "GerardSiegeTankSieged") || (UnitGetType(EventUnit()) == "GerardSiegeTank") || (UnitGetType(EventUnit()) == "GerardVulture") || (UnitGetType(EventUnit()) == "GerardScienceVessel") || (UnitGetType(EventUnit()) == "GerardViking") || (UnitGetType(EventUnit()) == "GerardBattlecruiser")) && (EventUnitDamageDeathCheck(c_deathTypeRemove) != true) && (UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8UEDE68C87E68CA5E5AE98E79A84E78EA9E5AEB6)) {
        libNEXS_gv_uEDE6ADBBE4BAA1E58D95E4BD8DE4BABAE58FA3E695B0 += FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropSuppliesUsed, c_unitPropCurrent));
        libNEXS_gv_uEDE6ADBBE4BAA1E58D95E4BD8DE4BABAE58FA3E695B0EFBC88XEFBC89 += FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropSuppliesUsed, c_unitPropCurrent));
    }

    if (((UnitGetType(EventUnit()) == "HybridBehemoth") || (UnitGetType(EventUnit()) == "HybridDominatorVoid"))) {
        autoDA033146_g = UnitGroup(null, libNEXS_gv_e4BDBFE794A8UEDE68C87E68CA5E5AE98E79A84E78EA9E5AEB6, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoDA033146_u = UnitGroupCount(autoDA033146_g, c_unitCountAll);
        for (;; autoDA033146_u -= 1) {
            autoDA033146_var = UnitGroupUnitFromEnd(autoDA033146_g, autoDA033146_u);
            if (autoDA033146_var == null) { break; }
            if ((UnitGetOwner(autoDA033146_var) == libNEXS_gv_e4BDBFE794A8UEDE68C87E68CA5E5AE98E79A84E78EA9E5AEB6) && ((UnitGetType(autoDA033146_var) == "GerardAdvancedTechnologyLaboratory") || (UnitGetType(autoDA033146_var) == "GerardFusionCore") || (UnitGetType(autoDA033146_var) == "GerardArmory") || (UnitGetType(autoDA033146_var) == "GerardEngineeringBay"))) {
                UnitSetProgressComplete(autoDA033146_var, 1, 100);
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_UEDE58D95E4BD8DE6ADBBE4BAA1_Init () {
    libNEXS_gt_UEDE58D95E4BD8DE6ADBBE4BAA1 = TriggerCreate("libNEXS_gt_UEDE58D95E4BD8DE6ADBBE4BAA1_Func");
    TriggerEnable(libNEXS_gt_UEDE58D95E4BD8DE6ADBBE4BAA1, false);
    TriggerAddEventUnitDied(libNEXS_gt_UEDE58D95E4BD8DE6ADBBE4BAA1, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UED??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_UEDE5BEAAE78EAF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8UEDE68C87E68CA5E5AE98E79A84E78EA9E5AEB6, "UnknownUpgrade260", (libNEXS_gv_uEDE6ADBBE4BAA1E58D95E4BD8DE4BABAE58FA3E695B0 / 10));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_UEDE5BEAAE78EAF_Init () {
    libNEXS_gt_UEDE5BEAAE78EAF = TriggerCreate("libNEXS_gt_UEDE5BEAAE78EAF_Func");
    TriggerEnable(libNEXS_gt_UEDE5BEAAE78EAF, false);
    TriggerAddEventTimePeriodic(libNEXS_gt_UEDE5BEAAE78EAF, 0.625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UED?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_UEDE998BFE5B094E6B395E58F8DE587BBE997AAE794B5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e998BFE5B094E6B395;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e998BFE5B094E6B395 = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitFilterMatch(EventUnitDamageSourceUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == true) && (UnitHasBehavior2(lv_e998BFE5B094E6B395, "HornerAirFleetSearch7232") == true) && (UnitGetType(lv_e998BFE5B094E6B395) == "GerardAlphaPrototype"))) {
        UnitCreateEffectUnit(lv_e998BFE5B094E6B395, "DefensiveMatrixTargetDroneSet2", EventUnitDamageSourceUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_UEDE998BFE5B094E6B395E58F8DE587BBE997AAE794B5_Init () {
    libNEXS_gt_UEDE998BFE5B094E6B395E58F8DE587BBE997AAE794B5 = TriggerCreate("libNEXS_gt_UEDE998BFE5B094E6B395E58F8DE587BBE997AAE794B5_Func");
    TriggerEnable(libNEXS_gt_UEDE998BFE5B094E6B395E58F8DE587BBE997AAE794B5, false);
    TriggerAddEventUnitDamaged(libNEXS_gt_UEDE998BFE5B094E6B395E58F8DE587BBE997AAE794B5, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_UEDE5BEAAE78EAF2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNEXS_gv_uEDE6ADBBE4BAA1E58D95E4BD8DE4BABAE58FA3E695B0EFBC88XEFBC89 >= 10)) {
        libNEXS_gv_uEDE68898E58897E7AD89E7BAA7 += 0.05;
        libNEXS_gv_uEDE6ADBBE4BAA1E58D95E4BD8DE4BABAE58FA3E695B0EFBC88XEFBC89 = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_UEDE5BEAAE78EAF2_Init () {
    libNEXS_gt_UEDE5BEAAE78EAF2 = TriggerCreate("libNEXS_gt_UEDE5BEAAE78EAF2_Func");
    TriggerEnable(libNEXS_gt_UEDE5BEAAE78EAF2, false);
    TriggerAddEventTimePeriodic(libNEXS_gt_UEDE5BEAAE78EAF2, 0.625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UED??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E5A4A7E5928CE782AEE69AB4E587BB_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_crittexttag;
    int lv_e6ADA6E599A8E4BCA4E5AEB3;
    int lv_e69AB4E587BBE4BCA4E5AEB3;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_crittexttag = c_textTagNone;
    lv_e6ADA6E599A8E4BCA4E5AEB3 = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "HHLaserBatteryU222", "Amount", 1);
    lv_e69AB4E587BBE4BCA4E5AEB3 = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "HHLaserBatteryU22222", "Amount", 1);

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/lib_NEXS_F5E0C906"), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 3.0, true, false, PlayerGroupAll());
    lv_crittexttag = TextTagLastCreated();
    TextTagSetColor(lv_crittexttag, c_textTagColorText, Color(100.00, 0.00, 0.00));
    TextTagSetVelocity(lv_crittexttag, 0.5, 90.0);
    Wait(1.65, c_timeGame);
    TextTagDestroy(lv_crittexttag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E5A4A7E5928CE782AEE69AB4E587BB_Init () {
    libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E5A4A7E5928CE782AEE69AB4E587BB = TriggerCreate("libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E5A4A7E5928CE782AEE69AB4E587BB_Func");
    TriggerEnable(libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E5A4A7E5928CE782AEE69AB4E587BB, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E5A4A7E5928CE782AEE69AB4E587BB, c_playerAny, "HHLaserBatteryU2222");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UED???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E699AEE694BBE69AB4E587BB_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_crittexttag;
    int lv_e6ADA6E599A8E4BCA4E5AEB3;
    int lv_e69AB4E587BBE4BCA4E5AEB3;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_crittexttag = c_textTagNone;
    lv_e6ADA6E599A8E4BCA4E5AEB3 = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "ATALaserBatteryU23", "Amount", 1);
    lv_e69AB4E587BBE4BCA4E5AEB3 = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "ATALaserBatteryU22", "Amount", 1);

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/lib_NEXS_7A2E62E7"), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 3.0, true, false, PlayerGroupAll());
    lv_crittexttag = TextTagLastCreated();
    TextTagSetColor(lv_crittexttag, c_textTagColorText, Color(100.00, 0.00, 0.00));
    TextTagSetVelocity(lv_crittexttag, 0.5, 90.0);
    Wait(1.65, c_timeGame);
    TextTagDestroy(lv_crittexttag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E699AEE694BBE69AB4E587BB_Init () {
    libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E699AEE694BBE69AB4E587BB = TriggerCreate("libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E699AEE694BBE69AB4E587BB_Func");
    TriggerEnable(libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E699AEE694BBE69AB4E587BB, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E699AEE694BBE69AB4E587BB, c_playerAny, "ATALaserBatteryU22");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UEDVA????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_VAE5BBBAE980A0E5AE8CE68890_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e5BBBAE7AD91;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e5BBBAE7AD91 = EventUnitProgressUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(lv_e5BBBAE7AD91) == "GerardArmory")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "UnknownUpgrade258", 1);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_VAE5BBBAE980A0E5AE8CE68890_Init () {
    libNEXS_gt_VAE5BBBAE980A0E5AE8CE68890 = TriggerCreate("libNEXS_gt_VAE5BBBAE980A0E5AE8CE68890_Func");
    TriggerEnable(libNEXS_gt_VAE5BBBAE980A0E5AE8CE68890, false);
    TriggerAddEventUnitConstructProgress(libNEXS_gt_VAE5BBBAE980A0E5AE8CE68890, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UEDVC????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_VCE5BBBAE980A0E5AE8CE68890_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e5BBBAE7AD91;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e5BBBAE7AD91 = EventUnitProgressUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(lv_e5BBBAE7AD91) == "GerardFusionCore")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "UnknownUpgrade259", 1);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_VCE5BBBAE980A0E5AE8CE68890_Init () {
    libNEXS_gt_VCE5BBBAE980A0E5AE8CE68890 = TriggerCreate("libNEXS_gt_VCE5BBBAE980A0E5AE8CE68890_Func");
    TriggerEnable(libNEXS_gt_VCE5BBBAE980A0E5AE8CE68890, false);
    TriggerAddEventUnitConstructProgress(libNEXS_gt_VCE5BBBAE980A0E5AE8CE68890, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UEDBC??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_UEDBCE79FBFE9AAA1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_mineralsGroup;

    // Automatic Variable Declarations
    unitgroup autoB3DD8E9B_g;
    int autoB3DD8E9B_u;
    unit autoB3DD8E9B_var;
    unitgroup auto448D5000_g;
    int auto448D5000_u;
    unit auto448D5000_var;

    // Variable Initialization
    lv_mineralsGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == libNEXS_gv_e4BDBFE794A8UEDE68C87E68CA5E5AE98E79A84E78EA9E5AEB6))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB3DD8E9B_g = UnitGroup("MineralField", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB3DD8E9B_u = UnitGroupCount(autoB3DD8E9B_g, c_unitCountAll);
    for (;; autoB3DD8E9B_u -= 1) {
        autoB3DD8E9B_var = UnitGroupUnitFromEnd(autoB3DD8E9B_g, autoB3DD8E9B_u);
        if (autoB3DD8E9B_var == null) { break; }
        UnitGroupAdd(lv_mineralsGroup, autoB3DD8E9B_var);
    }
    auto448D5000_g = UnitGroup("UmojanLabMineralField", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto448D5000_u = UnitGroupCount(auto448D5000_g, c_unitCountAll);
    for (;; auto448D5000_u -= 1) {
        auto448D5000_var = UnitGroupUnitFromEnd(auto448D5000_g, auto448D5000_u);
        if (auto448D5000_var == null) { break; }
        UnitGroupAdd(lv_mineralsGroup, auto448D5000_var);
    }
    PlayerCreateEffectUnit(libNEXS_gv_e4BDBFE794A8UEDE68C87E68CA5E5AE98E79A84E78EA9E5AEB6, "CalldownMULECreateUnit4", UnitGroupClosestToPoint(lv_mineralsGroup, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_UEDBCE79FBFE9AAA1_Init () {
    libNEXS_gt_UEDBCE79FBFE9AAA1 = TriggerCreate("libNEXS_gt_UEDBCE79FBFE9AAA1_Func");
    TriggerEnable(libNEXS_gt_UEDBCE79FBFE9AAA1, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_UEDBCE79FBFE9AAA1, c_playerAny, "CommandCenterIsMorphingRB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UED??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E596B7E6B094E8838CE58C85E887AAE58AA8E8B7B3E8B783_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "GerardSiegeTankSieged")) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("UEDSiegeTankSiegedJumpJet", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnit()), -3.95, EventUnitDamageSourcePoint())), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E596B7E6B094E8838CE58C85E887AAE58AA8E8B7B3E8B783_Init () {
    libNEXS_gt_E596B7E6B094E8838CE58C85E887AAE58AA8E8B7B3E8B783 = TriggerCreate("libNEXS_gt_E596B7E6B094E8838CE58C85E887AAE58AA8E8B7B3E8B783_Func");
    TriggerEnable(libNEXS_gt_E596B7E6B094E8838CE58C85E887AAE58AA8E8B7B3E8B783, false);
    TriggerAddEventUnitDamaged(libNEXS_gt_E596B7E6B094E8838CE58C85E887AAE58AA8E8B7B3E8B783, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UED?????????GH-1????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e587BBE98080E58D95E4BD8D;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e587BBE98080E58D95E4BD8D = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitDamageSourceUnit()) == "GerardGoliath") && (UnitHasBehavior2(lv_e587BBE98080E58D95E4BD8D, "FGoliath") == true)) {
        UnitSetPosition(lv_e587BBE98080E58D95E4BD8D, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_e587BBE98080E58D95E4BD8D), -5.0, UnitGetPosition(EventUnitDamageSourceUnit())), true);
        UnitBehaviorRemove(lv_e587BBE98080E58D95E4BD8D, "FGoliath", 1);
        UnitBehaviorAdd(lv_e587BBE98080E58D95E4BD8D, "NovaUnitLockdown32", EventUnitDamageSourceUnit(), 1);
        Wait(0.25, c_timeGame);
        UnitBehaviorRemove(lv_e587BBE98080E58D95E4BD8D, "GoliathFXNSZZ", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B4_Init () {
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B4 = TriggerCreate("libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B4_Func");
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B4, false);
    TriggerAddEventUnitDamaged(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B4, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UED??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8B584E6BA90E68E89E890BD_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_position;
    string lv_resource;
    int lv_killer;
    unit lv_units;
    int lv_itPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_killer = libNtve_gf_KillingPlayer();
    lv_units = libNtve_gf_KillingUnit();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "UEDVultureBattle") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_position = UnitGetPosition(EventUnit());
    if ((UnitHasBehavior2(EventUnit(), "SupplyLT1") == true)) {
        lv_resource = "KerriganVoidCoopEconDropLT1";
    }
    else if ((UnitHasBehavior2(EventUnit(), "HybridUnitDummy") == true)) {
        lv_resource = "KerriganVoidCoopEconDrop4";
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0) == -1)) {
        lv_resource = "KerriganVoidCoopEconDrop1";
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0) == -2)) {
        lv_resource = "KerriganVoidCoopEconDrop2";
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0) == -3)) {
        lv_resource = "KerriganVoidCoopEconDrop3";
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0) == -4)) {
        lv_resource = "KerriganVoidCoopEconDrop4";
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0) < -4)) {
        lv_resource = "KerriganVoidCoopEconDrop5";
    }
    if ((lv_resource == null)) {
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8B584E6BA90E68E89E890BD_Init () {
    libNEXS_gt_E8B584E6BA90E68E89E890BD = TriggerCreate("libNEXS_gt_E8B584E6BA90E68E89E890BD_Func");
    TriggerEnable(libNEXS_gt_E8B584E6BA90E68E89E890BD, false);
    TriggerAddEventUnitDied(libNEXS_gt_E8B584E6BA90E68E89E890BD, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UED??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_UEDE4BA9AE58E86E5B1B1E5A4A7E58D87E7BAA7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_KillingPlayer() != 1) || (libNtve_gf_KillingPlayer() != 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "GerardAleksander")) {
        TechTreeUpgradeAddLevel(1, "UnknownUpgrade261", 1);
        TechTreeUpgradeAddLevel(2, "UnknownUpgrade261", 1);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_UEDE4BA9AE58E86E5B1B1E5A4A7E58D87E7BAA7_Init () {
    libNEXS_gt_UEDE4BA9AE58E86E5B1B1E5A4A7E58D87E7BAA7 = TriggerCreate("libNEXS_gt_UEDE4BA9AE58E86E5B1B1E5A4A7E58D87E7BAA7_Func");
    TriggerEnable(libNEXS_gt_UEDE4BA9AE58E86E5B1B1E5A4A7E58D87E7BAA7, false);
    TriggerAddEventUnitDied(libNEXS_gt_UEDE4BA9AE58E86E5B1B1E5A4A7E58D87E7BAA7, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UED???????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_UEDE7A9BAE997B4E7AB99E58F98E5BC82_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA22D86FD_g;
    int autoA22D86FD_u;
    unit autoA22D86FD_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA22D86FD_g = UnitGroup("HansonScienceStationCrashed", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA22D86FD_u = UnitGroupCount(autoA22D86FD_g, c_unitCountAll);
    for (;; autoA22D86FD_u -= 1) {
        autoA22D86FD_var = UnitGroupUnitFromEnd(autoA22D86FD_g, autoA22D86FD_u);
        if (autoA22D86FD_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(autoA22D86FD_var, RegionEntireMap()) == true)) {
            TriggerEnable(libNEXS_gt_UEDE4BA9AE58E86E5B1B1E5A4A7E58D87E7BAA7, true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_UEDE7A9BAE997B4E7AB99E58F98E5BC82_Init () {
    libNEXS_gt_UEDE7A9BAE997B4E7AB99E58F98E5BC82 = TriggerCreate("libNEXS_gt_UEDE7A9BAE997B4E7AB99E58F98E5BC82_Func");
    TriggerEnable(libNEXS_gt_UEDE7A9BAE997B4E7AB99E58F98E5BC82, false);
    TriggerAddEventTimePeriodic(libNEXS_gt_UEDE7A9BAE997B4E7AB99E58F98E5BC82, 0.625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UED??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D;
    point lv_e99A8FE69CBAE4BD8DE782B9;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_e99A8FE69CBAE4BD8DE782B9 = PointWithOffsetPolar(UnitGetPosition(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D), 1.0, libNtve_gf_RandomAngle());
    UnitIssueOrder(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D), -5.0, lv_e99A8FE69CBAE4BD8DE782B9)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    while ((UnitHasBehavior2(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D, "HHHellionTankFear5") == true) && (UnitIsAlive(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D) == true)) {
        UnitIssueOrder(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D), 3.0))), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    UnitIssueOrder(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B3_Init () {
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B3 = TriggerCreate("libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B3_Func");
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B3, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B3, null, "HHHellionTankFear5", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B3, null, "HHHellionTankFear5", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_Tosh
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_DUT_Tosh_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup auto4FA050D0_g;
    int auto4FA050D0_var;

    // Variable Initialization
    lv_players = libCOMI_gf_PlayersOfCommander("NexusTosh");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_ToshAirdropJudgment, true);
    TriggerEnable(libNEXS_gt_ToshE78684E781AF, true);
    TriggerEnable(libNEXS_gt_ToshE6ADBBE4BAA1, true);
    TriggerEnable(libNEXS_gt_ToshE58D95E4BD8DE8BF94E888AA, true);
    TriggerEnable(libNEXS_gt_ToshE8BF90E8BE93E888B9E8BF94E888AA, true);
    TriggerEnable(libNEXS_gt_ToshE78684E781AFE7949FE591BDE5BA94E794A8, true);
    TechTreeUpgradeAddLevel(1, "RaynorNV3", 1);
    TechTreeUpgradeAddLevel(2, "RaynorNV3", 1);
    auto4FA050D0_g = lv_players;
    auto4FA050D0_var = -1;
    while (true) {
        auto4FA050D0_var = PlayerGroupNextPlayer(auto4FA050D0_g, auto4FA050D0_var);
        if (auto4FA050D0_var < 0) { break; }
        libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID2 = auto4FA050D0_var;
        if ((TechTreeUnitIsAllowed(auto4FA050D0_var, "CoopCasterTosh") == true)) {
            libCOMI_gf_CreateACCaster(auto4FA050D0_var, "CoopCasterTosh");
            libCOMI_gf_CU_GPInitCommonCaster(auto4FA050D0_var, "CoopCasterTosh", "Coop_GlobalCastingTemplates/TerranCasterPanelTemplate", "Coop_GlobalCastingTemplates/TerranGlobalCommandPanelTemplate", 4, "Cutscenes\\CommanderGlobalPower_Tosh.SC2Cutscene", "FourButtons");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_DUT_Tosh_Init () {
    libNEXS_gt_DUT_Tosh = TriggerCreate("libNEXS_gt_DUT_Tosh_Func");
    TriggerAddEventGeneric(libNEXS_gt_DUT_Tosh, libCOMI_gv_mISSIONINITIALIZED);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tosh??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_ToshE6ADBBE4BAA1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitDamageDeathCheck(c_deathTypeMorph) != true) && (EventUnitDamageDeathCheck(c_deathTypeCancel) != true) && (EventUnitDamageDeathCheck(c_deathTypeRemove) != true) && (UnitGetType(EventUnit()) == "Tosh")) {
        PlayerAddCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID2, "Abil/ToshBirth", 60.0);
        Wait(0.0625, c_timeGame);
        PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID2, "Abil/ToshBirth", -1.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_ToshE6ADBBE4BAA1_Init () {
    libNEXS_gt_ToshE6ADBBE4BAA1 = TriggerCreate("libNEXS_gt_ToshE6ADBBE4BAA1_Func");
    TriggerEnable(libNEXS_gt_ToshE6ADBBE4BAA1, false);
    TriggerAddEventUnitDied(libNEXS_gt_ToshE6ADBBE4BAA1, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tosh????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_ToshE58D95E4BD8DE8BF94E888AA_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_toshMC;

    // Automatic Variable Declarations
    unitgroup auto1E1D6D8B_g;
    int auto1E1D6D8B_u;
    unit auto1E1D6D8B_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto1E1D6D8B_g = UnitGroup("MercCompound2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1E1D6D8B_u = UnitGroupCount(auto1E1D6D8B_g, c_unitCountAll);
    for (;; auto1E1D6D8B_u -= 1) {
        auto1E1D6D8B_var = UnitGroupUnitFromEnd(auto1E1D6D8B_g, auto1E1D6D8B_u);
        if (auto1E1D6D8B_var == null) { break; }
        lv_toshMC = auto1E1D6D8B_var;
    }
    if ((UnitGetType(EventUnit()) == "Marine_BlackOps3")) {
        Wait(45.0, c_timeGame);
        UnitIssueOrder(lv_toshMC, Order(AbilityCommand("ArmSiloWithNuke29", 0)), c_orderQueueReplace);
    }

    if ((UnitGetType(EventUnit()) == "MercReaper")) {
        Wait(45.0, c_timeGame);
        UnitIssueOrder(lv_toshMC, Order(AbilityCommand("ArmSiloWithNuke222", 1)), c_orderQueueReplace);
    }

    if ((UnitGetType(EventUnit()) == "Spectre")) {
        Wait(45.0, c_timeGame);
        UnitIssueOrder(lv_toshMC, Order(AbilityCommand("ArmSiloWithNuke232", 2)), c_orderQueueReplace);
    }

    if ((UnitGetType(EventUnit()) == "Diamondback2")) {
        Wait(45.0, c_timeGame);
        UnitIssueOrder(lv_toshMC, Order(AbilityCommand("ArmSiloWithNuke242", 3)), c_orderQueueReplace);
    }

    if (((UnitGetType(EventUnit()) == "SiegeBreakerSieged") || (UnitGetType(EventUnit()) == "SiegeBreaker"))) {
        Wait(45.0, c_timeGame);
        UnitIssueOrder(lv_toshMC, Order(AbilityCommand("ArmSiloWithNuke252", 4)), c_orderQueueReplace);
    }

    if ((UnitGetType(EventUnit()) == "Raven_BlackOps3")) {
        Wait(45.0, c_timeGame);
        UnitIssueOrder(lv_toshMC, Order(AbilityCommand("ArmSiloWithNuke262", 5)), c_orderQueueReplace);
    }

    if ((UnitGetType(EventUnit()) == "Wraith2")) {
        Wait(45.0, c_timeGame);
        UnitIssueOrder(lv_toshMC, Order(AbilityCommand("ArmSiloWithNuke272", 6)), c_orderQueueReplace);
    }

    if ((UnitGetType(EventUnit()) == "SpecialOpsDropship2")) {
        Wait(45.0, c_timeGame);
        UnitIssueOrder(lv_toshMC, Order(AbilityCommand("ArmSiloWithNuke282", 7)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_ToshE58D95E4BD8DE8BF94E888AA_Init () {
    libNEXS_gt_ToshE58D95E4BD8DE8BF94E888AA = TriggerCreate("libNEXS_gt_ToshE58D95E4BD8DE8BF94E888AA_Func");
    TriggerEnable(libNEXS_gt_ToshE58D95E4BD8DE8BF94E888AA, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_ToshE58D95E4BD8DE8BF94E888AA, null, "ToshBack", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tosh???????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_ToshE8BF90E8BE93E888B9E8BF94E888AA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SpecialOpsDropship2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerCreateEffectUnit(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID2, "ToshShipBackCheck", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_ToshE8BF90E8BE93E888B9E8BF94E888AA_Init () {
    libNEXS_gt_ToshE8BF90E8BE93E888B9E8BF94E888AA = TriggerCreate("libNEXS_gt_ToshE8BF90E8BE93E888B9E8BF94E888AA_Func");
    TriggerEnable(libNEXS_gt_ToshE8BF90E8BE93E888B9E8BF94E888AA, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_ToshE8BF90E8BE93E888B9E8BF94E888AA, null, "ToshBack", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tosh??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_ToshE78684E781AF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto72E7310F_g;
    int auto72E7310F_u;
    unit auto72E7310F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting("AiurFlashback", 0.0);
    Wait(0.1, c_timeGame);
    TriggerEnable(libNEXS_gt_ToshE78684E781AFE8A686E58699, true);
    GameSetLighting("Tarsonis", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("Agria", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("ShakurasTemple", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("AiurFlashback", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("IceWorld", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("SMX1EggRoomSet", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("Slayn", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("AiurFlashback", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("SpearOfAdun", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("NoLight", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("Tarsonis", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("PortraitAmonDarkEX2", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("SnowRefinery", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("AiurFlashback", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("Tarsonis", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("SMHyperionCantina", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("ConsoleProt", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("AdsL800ETC", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("TheVoid", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("AgriaNight", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("MarSara", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("JinaraPortrait", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("AiurFlashback", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("Meinhoff", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("Castanar", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("ShakurasTemple", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("Tarsonis", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("Slayn", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("TheVoid", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("Tarsonis", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("Starmap", 0.0);
    Wait(0.1, c_timeGame);
    GameSetLighting("AiurFlashback", 0.75);
    Wait(18.0, c_timeGame);
    TriggerEnable(libNEXS_gt_ToshE78684E781AFE8A686E58699, false);
    auto72E7310F_g = libNEXS_gv_e78684E781AFE5BDB1E5938DE7BB84;
    auto72E7310F_u = UnitGroupCount(auto72E7310F_g, c_unitCountAll);
    for (;; auto72E7310F_u -= 1) {
        auto72E7310F_var = UnitGroupUnitFromEnd(auto72E7310F_g, auto72E7310F_u);
        if (auto72E7310F_var == null) { break; }
        UnitBehaviorRemove(auto72E7310F_var, "SOATimeFreeze2", 1);
    }
    libNEXS_gv_e78684E781AFE5BDB1E5938DE7BB84 = UnitGroupEmpty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_ToshE78684E781AF_Init () {
    libNEXS_gt_ToshE78684E781AF = TriggerCreate("libNEXS_gt_ToshE78684E781AF_Func");
    TriggerEnable(libNEXS_gt_ToshE78684E781AF, false);
    TriggerAddEventUnitAbility(libNEXS_gt_ToshE78684E781AF, null, AbilityCommand("SOATimeFreeze2", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_ogsqnldbcwiysagv_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9C69ED55_g;
    int auto9C69ED55_u;
    unit auto9C69ED55_var;

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting("CLight", 1.0);
    TriggerEnable(libNEXS_gt_ToshE78684E781AFE8A686E58699, true);
    Wait(3.0, c_timeGame);
    GameSetLighting("AiurFlashback", 0.0);
    Wait(18.0, c_timeGame);
    TriggerEnable(libNEXS_gt_ToshE78684E781AFE8A686E58699, false);
    auto9C69ED55_g = libNEXS_gv_e78684E781AFE5BDB1E5938DE7BB84;
    auto9C69ED55_u = UnitGroupCount(auto9C69ED55_g, c_unitCountAll);
    for (;; auto9C69ED55_u -= 1) {
        auto9C69ED55_var = UnitGroupUnitFromEnd(auto9C69ED55_g, auto9C69ED55_u);
        if (auto9C69ED55_var == null) { break; }
        UnitBehaviorRemove(auto9C69ED55_var, "SOATimeFreeze2", 1);
    }
    libNEXS_gv_e78684E781AFE5BDB1E5938DE7BB84 = UnitGroupEmpty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_ogsqnldbcwiysagv_Init () {
    libNEXS_gt_ogsqnldbcwiysagv = TriggerCreate("libNEXS_gt_ogsqnldbcwiysagv_Func");
    TriggerEnable(libNEXS_gt_ogsqnldbcwiysagv, false);
    TriggerAddEventUnitAbility(libNEXS_gt_ogsqnldbcwiysagv, null, AbilityCommand("SOATimeFreeze2", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tosh??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_ToshE78684E781AFE7949FE591BDE5BA94E794A8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) != "Caboose") && (UnitGetType(EventUnit()) != "FreightCar") && (UnitGetType(EventUnit()) != "TarsonisEngine") && (UnitGetType(EventUnit()) != "TarsonisEngineFast")) {
        UnitBehaviorAddPlayer(EventUnit(), "SOATimeFreeze222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID2, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_ToshE78684E781AFE7949FE591BDE5BA94E794A8_Init () {
    libNEXS_gt_ToshE78684E781AFE7949FE591BDE5BA94E794A8 = TriggerCreate("libNEXS_gt_ToshE78684E781AFE7949FE591BDE5BA94E794A8_Func");
    TriggerEnable(libNEXS_gt_ToshE78684E781AFE7949FE591BDE5BA94E794A8, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_ToshE78684E781AFE7949FE591BDE5BA94E794A8, null, "SOATimeFreeze2", c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_ToshE78684E781AFE7949FE591BDE5BA94E794A8, null, "SOATimeFreeze2", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tosh????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_ToshE78684E781AFE8A686E58699_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) != 1) && (UnitGetOwner(EventUnit()) != 2)) {
        UnitBehaviorAddPlayer(EventUnit(), "SOATimeFreeze2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID2, 1);
        UnitGroupAdd(libNEXS_gv_e78684E781AFE5BDB1E5938DE7BB84, EventUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_ToshE78684E781AFE8A686E58699_Init () {
    libNEXS_gt_ToshE78684E781AFE8A686E58699 = TriggerCreate("libNEXS_gt_ToshE78684E781AFE8A686E58699_Func");
    TriggerEnable(libNEXS_gt_ToshE78684E781AFE8A686E58699, false);
    TriggerAddEventUnitRegion(libNEXS_gt_ToshE78684E781AFE8A686E58699, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????1??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5A881E69C9B1E5BC80E590AF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_CDF12E4C"));
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID2, "UnknownUpgrade288", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID2, "UnknownUpgrade2882", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5A881E69C9B1E5BC80E590AF_Init () {
    libNEXS_gt_E5A881E69C9B1E5BC80E590AF = TriggerCreate("libNEXS_gt_E5A881E69C9B1E5BC80E590AF_Func");
    TriggerEnable(libNEXS_gt_E5A881E69C9B1E5BC80E590AF, false);
    TriggerAddEventChatMessage(libNEXS_gt_E5A881E69C9B1E5BC80E590AF, c_playerAny, "-Tosh1", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tosh????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_ToshE78684E781AFE59CB0E597AAE78B82E783ADE5BC80E590AF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto040888BF_g;
    int auto040888BF_u;
    unit auto040888BF_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    TriggerEnable(libNEXS_gt_ToshE78684E781AFbuffE5A29EE58AA0, true);
    Wait(20.0, c_timeGame);
    TriggerEnable(libNEXS_gt_ToshE78684E781AFbuffE5A29EE58AA0, false);
    auto040888BF_g = libNEXS_gv_e59CB0E597AAE78B82E783AD;
    auto040888BF_u = UnitGroupCount(auto040888BF_g, c_unitCountAll);
    for (;; auto040888BF_u -= 1) {
        auto040888BF_var = UnitGroupUnitFromEnd(auto040888BF_g, auto040888BF_u);
        if (auto040888BF_var == null) { break; }
        UnitBehaviorRemove(auto040888BF_var, "UnknownBehavior94", 1);
    }
    libNEXS_gv_e59CB0E597AAE78B82E783AD = UnitGroupEmpty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_ToshE78684E781AFE59CB0E597AAE78B82E783ADE5BC80E590AF_Init () {
    libNEXS_gt_ToshE78684E781AFE59CB0E597AAE78B82E783ADE5BC80E590AF = TriggerCreate("libNEXS_gt_ToshE78684E781AFE59CB0E597AAE78B82E783ADE5BC80E590AF_Func");
    TriggerEnable(libNEXS_gt_ToshE78684E781AFE59CB0E597AAE78B82E783ADE5BC80E590AF, false);
    TriggerAddEventUnitAbility(libNEXS_gt_ToshE78684E781AFE59CB0E597AAE78B82E783ADE5BC80E590AF, null, AbilityCommand("SOATimeFreeze2", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tosh??????buff??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_ToshE78684E781AFbuffE5A29EE58AA0_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID2)) {
        UnitBehaviorAddPlayer(EventUnit(), "UnknownBehavior94", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID2, 1);
        UnitGroupAdd(libNEXS_gv_e59CB0E597AAE78B82E783AD, EventUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_ToshE78684E781AFbuffE5A29EE58AA0_Init () {
    libNEXS_gt_ToshE78684E781AFbuffE5A29EE58AA0 = TriggerCreate("libNEXS_gt_ToshE78684E781AFbuffE5A29EE58AA0_Func");
    TriggerEnable(libNEXS_gt_ToshE78684E781AFbuffE5A29EE58AA0, false);
    TriggerAddEventUnitRegion(libNEXS_gt_ToshE78684E781AFbuffE5A29EE58AA0, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????2??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5A881E69C9B2E5BC80E590AF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_93D11440"));
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID2, "UnknownUpgrade28922", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID2, "UnknownUpgrade289", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID2, "UnknownUpgrade2892", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID2, "UnknownUpgrade28923", 1);
    TechTreeAbilityAllow(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID2, AbilityCommand("SOAPurifierBeam62", 0), false);
    TriggerEnable(libNEXS_gt_ToshE78684E781AFE59CB0E597AAE78B82E783ADE5BC80E590AF, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5A881E69C9B2E5BC80E590AF_Init () {
    libNEXS_gt_E5A881E69C9B2E5BC80E590AF = TriggerCreate("libNEXS_gt_E5A881E69C9B2E5BC80E590AF_Func");
    TriggerEnable(libNEXS_gt_E5A881E69C9B2E5BC80E590AF, false);
    TriggerAddEventChatMessage(libNEXS_gt_E5A881E69C9B2E5BC80E590AF, c_playerAny, "-Tosh2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????3??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5A881E69C9B3E5BC80E590AF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_770CFE74"));
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID2, "UnknownUpgrade296", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID2, "UnknownUpgrade2962", 1);
    TriggerEnable(libNEXS_gt_E69C89E5809FE4B88DE8BF98E888B0E9989FE586B7E58DB4E5878FE5B091, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5A881E69C9B3E5BC80E590AF_Init () {
    libNEXS_gt_E5A881E69C9B3E5BC80E590AF = TriggerCreate("libNEXS_gt_E5A881E69C9B3E5BC80E590AF_Func");
    TriggerEnable(libNEXS_gt_E5A881E69C9B3E5BC80E590AF, false);
    TriggerAddEventChatMessage(libNEXS_gt_E5A881E69C9B3E5BC80E590AF, c_playerAny, "-Tosh3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E69C89E5809FE4B88DE8BF98E888B0E9989FE586B7E58DB4E5878FE5B091_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerAddCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID2, "Abil/ToshBattleColldown", -30.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E69C89E5809FE4B88DE8BF98E888B0E9989FE586B7E58DB4E5878FE5B091_Init () {
    libNEXS_gt_E69C89E5809FE4B88DE8BF98E888B0E9989FE586B7E58DB4E5878FE5B091 = TriggerCreate("libNEXS_gt_E69C89E5809FE4B88DE8BF98E888B0E9989FE586B7E58DB4E5878FE5B091_Func");
    TriggerEnable(libNEXS_gt_E69C89E5809FE4B88DE8BF98E888B0E9989FE586B7E58DB4E5878FE5B091, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E69C89E5809FE4B88DE8BF98E888B0E9989FE586B7E58DB4E5878FE5B091, c_playerAny, "TimedLifeFate48");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_Gestalt
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_DUT_Gestalt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup autoF33F2108_g;
    int autoF33F2108_var;
    unitgroup auto4BD66BEA_g;
    int auto4BD66BEA_u;
    unit auto4BD66BEA_var;

    // Variable Initialization
    lv_players = libCOMI_gf_PlayersOfCommander("NexusGestalt");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libNEXS_gt_E9A284E8AEBEE782B9E59FBAE7AB99E588B7E696B0, true, false);
    libNEXS_gv_barracksOK = 1;
    TriggerExecute(libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE8BF90E8A18C1, true, false);
    TriggerEnable(libNEXS_gt_E59FBAE7AB99E4BF9DE68AA4E58A9BE59CBA, true);
    TriggerEnable(libNEXS_gt_E59FBAE7AB99E58DA0E9A286, true);
    TriggerEnable(libNEXS_gt_E59FBAE7AB99E8B584E6BA90E88EB7E58F96, true);
    TriggerEnable(libNEXS_gt_E699B6E4BD93E79FBFE98787E99B86E8BF87E5BAA6, true);
    TriggerEnable(libNEXS_gt_E9AB98E883BDE793A6E696AFE98787E99B86E8BDACE68DA2, true);
    TriggerEnable(libNEXS_gt_E69CBAE6A2B0E58D95E4BD8DE8B584E6BA90E8BF94E8BF98, true);
    TriggerEnable(libNEXS_gt_E585B5E890A5E5BBBAE980A0E5AE8CE68890, true);
    TriggerEnable(libNEXS_gt_E99BB6E5B08FE9989FE7AD89E7BAA7E68F90E9AB98, true);
    TriggerEnable(libNEXS_gt_E99BB6E5B08FE9989FE9989FE59198E5BCB9E4BB93E587BAE7949F, true);
    TriggerEnable(libNEXS_gt_E99BB6E5B08FE9989FE9989FE995BFE5889BE5BBBA, true);
    TriggerEnable(libNEXS_gt_E99BB6E5B08FE9989FE9989FE995BFE9878AE694BEE9809AE794A8E68A80E883BD, true);
    TriggerEnable(libNEXS_gt_E99BB6E5B08FE9989FE7BB8FE9AA8CE580BCE88EB7E58F96, true);
    TriggerEnable(libNEXS_gt_E99BB6E5B08FE9989FE8A180E9878FE68C81E7BBADE8AEA1E7AE97, true);
    TriggerEnable(libNEXS_gt_E99BB6E5B08FE9989FE8A180E9878FE58D87E7BAA7E98082E9858D, true);
    TriggerEnable(libNEXS_gt_E99BB6E5B08FE9989FE8A180E9878FE997B2E69A87E8AEA1E7AE97, true);
    TriggerEnable(libNEXS_gt_E8BDB0E782B8E69CBAE887AAE58AA8E998B2E5BEA1, true);
    TriggerEnable(libNEXS_gt_E8BDB0E782B8E69CBAE5889BE5BBBAE7BB91E5AE9A, true);
    TriggerEnable(libNEXS_gt_E8BDB0E782B8E69CBAE5BCB9E88DAFE8A385E5A1ABE5AE8CE6AF95, true);
    TriggerEnable(libNEXS_gt_E8BDB0E782B8E69CBAE5B9BFE59F9FE8BDB0E782B8, true);
    TriggerEnable(libNEXS_gt_E8BDB0E782B8E69CBAE9998DE890BD, true);
    TriggerEnable(libNEXS_gt_E8BDB0E782B8E69CBAE7B2BEE58786E8BDB0E782B8, true);
    TriggerEnable(libNEXS_gt_E8BDB0E782B8E69CBAE5B9B3E58FB0E691A7E6AF81, true);
    TriggerEnable(libNEXS_gt_E8BDB0E782B8E69CBAE6ADBBE4BAA1, true);
    TriggerEnable(libNEXS_gt_E8BDB0E782B8E69CBAE58FACE59B9EE4B88EE5B9BFE59F9FE58F96E6B688, true);
    TriggerEnable(libNEXS_gt_E8BDB0E782B8E69CBAE887AAE5AE9AE4B989E8BF94E59B9EE8BDA8E8BFB9, true);
    TriggerEnable(libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE5889DE5A78BE782B9, true);
    TriggerEnable(libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE7A6BBE5BC80E99990E588B6E58CBAE59F9F, true);
    TriggerEnable(libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE79BAEE6A087E782B9, true);
    TriggerEnable(libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE7B298E6BB9E, true);
    TriggerEnable(libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE587BAE7949F, true);
    TriggerEnable(libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE5889DE5A78BE586B7E58DB4, true);
    TriggerEnable(libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE8BF94E59B9E, true);
    TriggerEnable(libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE68C87E4BBA4, true);
    TriggerEnable(libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE5889BE5BBBA, true);
    TriggerEnable(libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E8BF9BE585A5E59CB0E59BBE, true);
    TriggerEnable(libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E5BC80E5A78BE4B88BE89B8B, true);
    TriggerEnable(libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E7B3BBE7BB9FE58D87E7BAA7, true);
    TriggerEnable(libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E587BAE7949FE5BDA9E89B8B, true);
    TriggerEnable(libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E6ADBBE4BAA1, true);
    TriggerEnable(libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E883BDE9878F, true);
    TriggerEnable(libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E9A38EE78886, true);
    libNEXS_gf_StormDropPodInitialGift();
    autoF33F2108_g = lv_players;
    autoF33F2108_var = -1;
    while (true) {
        autoF33F2108_var = PlayerGroupNextPlayer(autoF33F2108_g, autoF33F2108_var);
        if (autoF33F2108_var < 0) { break; }
        libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13 = autoF33F2108_var;
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit", 1);
        CatalogFieldValueSet(c_gameCatalogUnit, "HERCPlacement", "Food", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, IntToString(0));
        PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, c_playerPropCustom, c_playerPropOperAdd, 6);
        PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, c_playerPropMinerals, c_playerPropOperAdd, 200);
        PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, c_playerPropMinerals, c_playerPropOperAdd, (TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltlMasteryUpgradeSeries", c_techCountCompleteOnly) * 90));
        UISetResourceVisible(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13), c_resourceTypeCustom, true);
        UISetResourceVisible(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13), c_resourceTypeVespene, false);
        if ((TechTreeUnitIsAllowed(autoF33F2108_var, "GestaltOverwatcher") == true)) {
            libCOMI_gf_CreateACStructure(autoF33F2108_var, "GestaltOverwatcher");
        }

        if ((TechTreeUnitIsAllowed(autoF33F2108_var, "GestaltCaster") == true)) {
            libCOMI_gf_CreateACCaster(autoF33F2108_var, "GestaltCaster");
            libCOMI_gf_CU_GPInitCommonCaster(autoF33F2108_var, "GestaltCaster", "Coop_GlobalCastingTemplates/TerranCasterPanelTemplate", "Coop_GlobalCastingTemplates/TerranGlobalCommandPanelTemplate", 4, "Cutscenes\\CommanderGlobalPower_Zero.SC2Cutscene", "FourButtons");
        }

    }
    auto4BD66BEA_g = UnitGroup("GestaltTower", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto4BD66BEA_u = UnitGroupCount(auto4BD66BEA_g, c_unitCountAll);
    for (;; auto4BD66BEA_u -= 1) {
        auto4BD66BEA_var = UnitGroupUnitFromEnd(auto4BD66BEA_g, auto4BD66BEA_u);
        if (auto4BD66BEA_var == null) { break; }
        libNEXS_gv_gestaltTower = auto4BD66BEA_var;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_DUT_Gestalt_Init () {
    libNEXS_gt_DUT_Gestalt = TriggerCreate("libNEXS_gt_DUT_Gestalt_Func");
    TriggerAddEventGeneric(libNEXS_gt_DUT_Gestalt, libCOMI_gv_mISSIONINITIALIZED);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E587BAE7949FE5BDA9E89B8B_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltStationAmountUpgrade", c_techCountCompleteOnly) >= 10))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeMorph) != true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeCancel) != true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) != true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "GestaltZInfiltrationSquadLeader") || (UnitGetType(EventUnit()) == "GestaltZForerunnerSquadLeader") || (UnitGetType(EventUnit()) == "GestaltZRaiderSquadLeader") || (UnitGetType(EventUnit()) == "GestaltZSiegeTankSieged") || (UnitGetType(EventUnit()) == "GestaltZSiegeTank") || (UnitGetType(EventUnit()) == "GestaltZDreadnought") || (UnitGetType(EventUnit()) == "GestaltZStormCraft")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    if ((UnitCount("GestaltZInfiltrationSquadLeader", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount("GestaltZForerunnerSquadLeader", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount("GestaltZRaiderSquadLeader", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount("GestaltZSiegeTankSieged", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount("GestaltZSiegeTank", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount("GestaltZDreadnought", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount("GestaltZStormCraft", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0)) {
        if ((RandomInt(1, 5) == 1)) {
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_0959C8DA"));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "GestaltZero", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, RegionRandomPoint(RegionCircle(UnitGetPosition(libNEXS_gv_gestaltTower), 3.0)));
            libNEXS_gf_SetHeroPanelUnit(1, UnitLastCreated(), libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13);
            MinimapPing(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13), UnitGetPosition(UnitLastCreated()), 5.0, Color(7.06, 61.96, 45.49));
        }

        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E587BAE7949FE5BDA9E89B8B_Init () {
    libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E587BAE7949FE5BDA9E89B8B = TriggerCreate("libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E587BAE7949FE5BDA9E89B8B_Func");
    TriggerEnable(libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E587BAE7949FE5BDA9E89B8B, false);
    TriggerAddEventUnitDied(libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E587BAE7949FE5BDA9E89B8B, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E6ADBBE4BAA1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageDeathCheck(c_deathTypeMorph) != true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeCancel) != true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) != true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "GestaltZero"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_FD54A188"));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E6ADBBE4BAA1_Init () {
    libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E6ADBBE4BAA1 = TriggerCreate("libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E6ADBBE4BAA1_Func");
    TriggerEnable(libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E6ADBBE4BAA1, false);
    TriggerAddEventUnitDied(libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E6ADBBE4BAA1, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E883BDE9878F_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_supply;
    fixed lv_energy;
    fixed lv_shield;
    unit lv_targetUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_supply = UnitTypeGetProperty(UnitGetType(lv_targetUnit), c_unitPropSuppliesUsed);
    lv_energy = UnitGetPropertyInt(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitPropEnergy, c_unitPropCurrent);
    lv_shield = UnitGetPropertyInt(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitPropShields, c_unitPropCurrent);
    if ((lv_supply < 1)) {
        lv_supply = 1.0;
    }

    lv_supply *= 10.0;
    lv_supply *= (1.0 + ((0.2 * UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "GestaltZeroGallopWind")) + (0.3 * UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "GestaltZeroGallopWindImporved"))));
    lv_supply *= (1.0 + (UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "GestaltZeroStormShadow") * 2.0));
    lv_energy += lv_supply;
    lv_shield += lv_supply;
    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitPropEnergy, lv_energy);
    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitPropShields, lv_shield);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E883BDE9878F_Init () {
    libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E883BDE9878F = TriggerCreate("libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E883BDE9878F_Func");
    TriggerEnable(libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E883BDE9878F, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E883BDE9878F, c_playerAny, "GestaltZeroPsiBladeDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E9A38EE78886_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_energy;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_energy = UnitGetPropertyInt(EventUnit(), c_unitPropEnergy, c_unitPropCurrent);
    if ((UnitHasBehavior2(EventUnit(), "GestaltZeroBlastStormCaster") == false)) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, 0.0);
    }

    lv_energy /= 10.0;
    CatalogFieldValueSet(c_gameCatalogEffect, "GestaltZeroPsiStormMissileAOEDamage", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, FixedToString(lv_energy, c_fixedPrecisionAny));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E9A38EE78886_Init () {
    libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E9A38EE78886 = TriggerCreate("libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E9A38EE78886_Func");
    TriggerEnable(libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E9A38EE78886, false);
    TriggerAddEventUnitOrder(libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E9A38EE78886, null, AbilityCommand("GestaltZeroStormBack", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E9A284E8AEBEE782B9E59FBAE7AB99E588B7E696B0_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_countTest;
    string lv_gestaltStation;
    int lv_times;
    int lv_stageTimes;
    int lv_defaultInit;
    int lv_randomOn;
    point[11] lv_defaultPoint;
    int[4] lv_randomPointInitTemp;
    point[11][4] lv_randomPointStage;

    // Automatic Variable Declarations
    int auto00E5EB74_ae;
    const int auto00E5EB74_ai = 1;
    const int autoAAF5488C_ae = 2;
    const int autoAAF5488C_ai = 1;
    int autoAF58B129_val;
    const int auto0702478F_ae = 1;
    const int auto0702478F_ai = 1;

    // Variable Initialization
    lv_gestaltStation = "GestaltResourceDefenseStation";

    // Actions
    if (!runActions) {
        return true;
    }

    if (true) {
        lv_defaultPoint[0] = Point(144.5, 134.5);
        lv_defaultPoint[1] = Point(164.5, 176.5);
        lv_defaultPoint[2] = Point(191.5, 151.5);
        lv_defaultPoint[3] = Point(202.5, 206.5);
        lv_defaultPoint[4] = Point(161.5, 63.5);
        lv_defaultPoint[5] = Point(63.5, 113.5);
        lv_defaultPoint[6] = Point(16.5, 111.5);
        lv_defaultPoint[7] = Point(41.5, 183.5);
        lv_defaultPoint[8] = Point(92.5, 186.5);
        lv_defaultPoint[9] = Point(79.5, 222.5);
    }

    if (true) {
        lv_defaultPoint[0] = Point(61.5, 49.5);
        lv_defaultPoint[1] = Point(76.5, 87.5);
        lv_defaultPoint[2] = Point(38.5, 107.5);
        lv_defaultPoint[3] = Point(85.5, 125.5);
        lv_defaultPoint[4] = Point(89.5, 155.5);
        lv_defaultPoint[5] = Point(124.5, 129.5);
        lv_defaultPoint[6] = Point(156.5, 94.5);
        lv_defaultPoint[7] = Point(121.5, 82.5);
        lv_defaultPoint[8] = Point(131.5, 48.5);
        lv_defaultPoint[9] = Point(103.5, 60.5);
    }

    if (true) {
        lv_defaultPoint[0] = Point(89.6, 87.6);
        lv_defaultPoint[1] = Point(84.6, 112.4);
        lv_defaultPoint[2] = Point(117.4, 116.6);
        lv_defaultPoint[3] = Point(116.5, 81.5);
        lv_defaultPoint[4] = Point(51.5, 170.5);
        lv_defaultPoint[5] = Point(65.5, 155.5);
        lv_defaultPoint[6] = Point(39.5, 58.5);
        lv_defaultPoint[7] = Point(48.5, 17.5);
        lv_defaultPoint[8] = Point(141.5, 57.6);
        lv_defaultPoint[9] = Point(148.5, 23.5);
    }

    if (true) {
        lv_defaultPoint[0] = Point(69.5, 27.5);
        lv_defaultPoint[1] = Point(73.5, 96.6);
        lv_defaultPoint[2] = Point(84.5, 145.5);
        lv_defaultPoint[3] = Point(24.6, 75.6);
        lv_defaultPoint[4] = Point(20.5, 94.6);
        lv_defaultPoint[5] = Point(128.5, 67.7);
        lv_defaultPoint[6] = Point(129.5, 86.6);
        lv_defaultPoint[7] = Point(55.6, 144.7);
        lv_defaultPoint[8] = Point(72.5, 66.5);
        lv_defaultPoint[9] = Point(114.4, 128.6);
    }

    if (true) {
        lv_defaultPoint[0] = Point(38.5, 48.5);
        lv_defaultPoint[1] = Point(80.5, 74.5);
        lv_defaultPoint[2] = Point(92.5, 95.5);
        lv_defaultPoint[3] = Point(47.5, 99.5);
        lv_defaultPoint[4] = Point(108.5, 38.5);
        lv_defaultPoint[5] = Point(123.5, 73.5);
        lv_defaultPoint[6] = Point(51.5, 136.5);
        lv_defaultPoint[7] = Point(91.5, 139.5);
        lv_defaultPoint[8] = Point(127.5, 129.5);
        lv_defaultPoint[9] = Point(169.5, 110.5);
    }

    if (true) {
        lv_defaultPoint[0] = Point(77.5, 93.5);
        lv_defaultPoint[1] = Point(86.5, 117.5);
        lv_defaultPoint[2] = Point(101.5, 106.5);
        lv_defaultPoint[3] = Point(45.5, 140.5);
        lv_defaultPoint[4] = Point(45.5, 99.5);
        lv_defaultPoint[5] = Point(45.5, 26.5);
        lv_defaultPoint[6] = Point(101.5, 139.5);
        lv_defaultPoint[7] = Point(163.5, 133.5);
        lv_defaultPoint[8] = Point(149.5, 89.5);
        lv_defaultPoint[9] = Point(106.5, 71.5);
    }

    if (true) {
        lv_defaultPoint[0] = Point(181.5, 50.5);
        lv_defaultPoint[1] = Point(150.5, 43.5);
        lv_defaultPoint[2] = Point(184.5, 91.5);
        lv_defaultPoint[3] = Point(170.5, 67.5);
        lv_defaultPoint[4] = Point(146.5, 90.5);
        lv_defaultPoint[5] = Point(138.5, 129.5);
        lv_defaultPoint[6] = Point(159.5, 150.5);
        lv_defaultPoint[7] = Point(85.5, 87.5);
        lv_defaultPoint[8] = Point(56.5, 96.5);
        lv_defaultPoint[9] = Point(60.5, 149.5);
    }

    if (true) {
        lv_defaultPoint[0] = Point(171.5, 32.5);
        lv_defaultPoint[1] = Point(151.5, 45.5);
        lv_defaultPoint[2] = Point(129.5, 46.5);
        lv_defaultPoint[3] = Point(91.5, 44.5);
        lv_defaultPoint[4] = Point(65.5, 31.5);
        lv_defaultPoint[5] = Point(73.5, 88.5);
        lv_defaultPoint[6] = Point(148.5, 140.5);
        lv_defaultPoint[7] = Point(132.5, 103.5);
        lv_defaultPoint[8] = Point(146.5, 84.5);
        lv_defaultPoint[9] = Point(161.5, 92.5);
    }

    if (true) {
        lv_defaultPoint[0] = Point(73.5, 69.5);
        lv_defaultPoint[1] = Point(65.5, 117.5);
        lv_defaultPoint[2] = Point(115.5, 63.5);
        lv_defaultPoint[3] = Point(104.5, 99.5);
        lv_defaultPoint[4] = Point(74.5, 164.5);
        lv_defaultPoint[5] = Point(117.5, 164.5);
        lv_defaultPoint[6] = Point(117.5, 113.5);
        lv_defaultPoint[7] = Point(157.5, 153.5);
        lv_defaultPoint[8] = Point(149.5, 55.5);
        lv_defaultPoint[9] = Point(169.5, 107.5);
    }

    if (true) {
        lv_defaultPoint[0] = Point(37.5, 134.5);
        lv_defaultPoint[1] = Point(61.5, 155.5);
        lv_defaultPoint[2] = Point(104.5, 162.5);
        lv_defaultPoint[3] = Point(128.5, 142.5);
        lv_defaultPoint[4] = Point(36.5, 85.5);
        lv_defaultPoint[5] = Point(91.5, 89.5);
        lv_defaultPoint[6] = Point(153.5, 85.5);
        lv_defaultPoint[7] = Point(32.5, 45.5);
        lv_defaultPoint[8] = Point(54.5, 24.5);
        lv_defaultPoint[9] = Point(137.5, 34.5);
    }

    if (true) {
        lv_defaultPoint[0] = Point(44.5, 164.5);
        lv_defaultPoint[1] = Point(57.5, 116.5);
        lv_defaultPoint[2] = Point(95.5, 163.5);
        lv_defaultPoint[3] = Point(22.5, 100.5);
        lv_defaultPoint[4] = Point(139.5, 184.5);
        lv_defaultPoint[5] = Point(63.5, 64.5);
        lv_defaultPoint[6] = Point(34.5, 22.5);
        lv_defaultPoint[7] = Point(176.5, 85.5);
        lv_defaultPoint[8] = Point(146.5, 138.5);
        lv_defaultPoint[9] = Point(186.5, 25.5);
    }

    if (true) {
        lv_defaultPoint[0] = Point(124.5, 94.5);
        lv_defaultPoint[1] = Point(78.5, 136.5);
        lv_defaultPoint[2] = Point(39.5, 88.5);
        lv_randomPointStage[0][0] = Point(101.5, 103.5);
        lv_randomPointStage[1][0] = Point(143.5, 24.5);
        lv_randomPointStage[2][0] = Point(127.5, 73.6);
        lv_randomPointStage[3][0] = Point(154.6, 75.5);
        lv_randomPointStage[4][0] = Point(117.5, 130.5);
        lv_randomPointStage[0][1] = Point(69.5, 109.4);
        lv_randomPointStage[1][1] = Point(69.5, 45.6);
        lv_randomPointStage[2][1] = Point(88.5, 66.6);
        lv_randomPointStage[3][1] = Point(161.5, 55.6);
        lv_randomPointStage[4][1] = Point(161.5, 122.5);
        lv_randomPointStage[0][2] = Point(39.5, 131.5);
        lv_randomPointStage[1][2] = Point(38.5, 58.5);
        lv_randomPointStage[2][2] = Point(87.5, 32.5);
        lv_randomPointStage[3][2] = Point(175.5, 83.6);
        lv_randomPointStage[4][2] = Point(175.5, 104.6);
    }

    if (true) {
        lv_defaultPoint[0] = Point(94.5, 34.5);
        lv_defaultPoint[1] = Point(121.5, 90.5);
        lv_defaultPoint[2] = Point(69.5, 113.5);
        lv_randomPointStage[0][0] = Point(63.5, 36.5);
        lv_randomPointStage[1][0] = Point(57.5, 63.5);
        lv_randomPointStage[2][0] = Point(83.5, 59.5);
        lv_randomPointStage[3][0] = Point(103.5, 68.5);
        lv_randomPointStage[4][0] = Point(129.5, 64.5);
        lv_randomPointStage[0][1] = Point(40.5, 72.5);
        lv_randomPointStage[1][1] = Point(40.5, 100.5);
        lv_randomPointStage[2][1] = Point(15.5, 116.5);
        lv_randomPointStage[3][1] = Point(90.5, 102.5);
        lv_randomPointStage[4][1] = Point(142.5, 72.5);
        lv_randomPointStage[0][2] = Point(132.5, 113.5);
        lv_randomPointStage[1][2] = Point(150.5, 153.5);
        lv_randomPointStage[2][2] = Point(94.5, 146.5);
        lv_randomPointStage[3][2] = Point(58.5, 145.5);
        lv_randomPointStage[4][2] = Point(25.5, 155.5);
    }

    if (true) {
        lv_defaultPoint[0] = Point(40.5, 24.5);
        lv_defaultPoint[1] = Point(87.5, 97.5);
        lv_defaultPoint[2] = Point(140.5, 68.5);
        lv_randomPointStage[0][0] = Point(36.5, 95.5);
        lv_randomPointStage[1][0] = Point(66.5, 66.5);
        lv_randomPointStage[2][0] = Point(88.5, 45.5);
        lv_randomPointStage[3][0] = Point(103.5, 28.5);
        lv_randomPointStage[4][0] = Point(127.5, 32.5);
        lv_randomPointStage[0][1] = Point(71.5, 136.5);
        lv_randomPointStage[1][1] = Point(110.5, 146.5);
        lv_randomPointStage[2][1] = Point(128.5, 94.5);
        lv_randomPointStage[3][1] = Point(118.5, 56.5);
        lv_randomPointStage[4][1] = Point(156.5, 50.5);
        lv_randomPointStage[0][2] = Point(121.5, 162.5);
        lv_randomPointStage[1][2] = Point(138.5, 128.5);
        lv_randomPointStage[2][2] = Point(192.5, 110.5);
        lv_randomPointStage[3][2] = Point(184.5, 39.5);
        lv_randomPointStage[4][2] = Point(162.5, 19.5);
    }

    if (true) {
        lv_defaultPoint[0] = Point(42.5, 31.5);
        lv_defaultPoint[1] = Point(100.5, 70.5);
        lv_defaultPoint[2] = Point(150.5, 108.5);
        lv_randomPointStage[0][0] = Point(61.5, 90.5);
        lv_randomPointStage[1][0] = Point(70.5, 55.5);
        lv_randomPointStage[2][0] = Point(94.5, 40.5);
        lv_randomPointStage[3][0] = Point(118.5, 32.5);
        lv_randomPointStage[4][0] = Point(81.5, 75.5);
        lv_randomPointStage[0][1] = Point(90.5, 87.5);
        lv_randomPointStage[1][1] = Point(129.5, 90.5);
        lv_randomPointStage[2][1] = Point(157.5, 62.5);
        lv_randomPointStage[3][1] = Point(99.5, 139.5);
        lv_randomPointStage[4][1] = Point(60.5, 114.5);
        lv_randomPointStage[0][2] = Point(69.5, 157.5);
        lv_randomPointStage[1][2] = Point(124.5, 116.5);
        lv_randomPointStage[2][2] = Point(167.5, 83.5);
        lv_randomPointStage[3][2] = Point(174.5, 99.5);
        lv_randomPointStage[4][2] = Point(143.5, 42.5);
    }

    if (true) {
        lv_defaultPoint[0] = Point(46.5, 134.5);
        lv_defaultPoint[1] = Point(100.5, 77.7);
        lv_defaultPoint[2] = Point(142.5, 63.5);
        lv_randomPointStage[0][0] = Point(84.5, 127.5);
        lv_randomPointStage[1][0] = Point(90.5, 110.5);
        lv_randomPointStage[2][0] = Point(79.5, 102.5);
        lv_randomPointStage[3][0] = Point(52.5, 101.5);
        lv_randomPointStage[4][0] = Point(67.5, 93.5);
        lv_randomPointStage[0][1] = Point(28.5, 88.5);
        lv_randomPointStage[1][1] = Point(54.5, 62.5);
        lv_randomPointStage[2][1] = Point(134.5, 138.5);
        lv_randomPointStage[3][1] = Point(145.5, 115.5);
        lv_randomPointStage[4][1] = Point(123.5, 33.5);
        lv_randomPointStage[0][2] = Point(86.5, 25.5);
        lv_randomPointStage[1][2] = Point(168.5, 90.5);
        lv_randomPointStage[2][2] = Point(160.5, 41.5);
        lv_randomPointStage[3][2] = Point(176.5, 56.5);
        lv_randomPointStage[4][2] = Point(164.5, 20.5);
    }

    if (true) {
        lv_defaultPoint[0] = Point(34.5, 43.5);
        lv_defaultPoint[1] = Point(114.5, 128.5);
        lv_defaultPoint[2] = Point(108.5, 72.5);
        lv_randomPointStage[0][0] = Point(52.5, 88.5);
        lv_randomPointStage[1][0] = Point(78.5, 95.5);
        lv_randomPointStage[2][0] = Point(39.5, 106.5);
        lv_randomPointStage[3][0] = Point(29.5, 127.5);
        lv_randomPointStage[4][0] = Point(79.5, 121.5);
        lv_randomPointStage[0][1] = Point(125.5, 161.5);
        lv_randomPointStage[1][1] = Point(134.5, 139.5);
        lv_randomPointStage[2][1] = Point(147.5, 118.5);
        lv_randomPointStage[3][1] = Point(124.5, 92.5);
        lv_randomPointStage[4][1] = Point(126.5, 67.5);
        lv_randomPointStage[0][2] = Point(103.5, 31.5);
        lv_randomPointStage[1][2] = Point(139.5, 30.5);
        lv_randomPointStage[2][2] = Point(166.5, 53.5);
        lv_randomPointStage[3][2] = Point(166.5, 24.5);
        lv_randomPointStage[4][2] = Point(170.5, 79.5);
    }

    if ((true)) {
        lv_randomOn = 1;
    }

    auto00E5EB74_ae = (9 - (lv_randomOn * 7));
    lv_defaultInit = 0;
    for ( ; ( (auto00E5EB74_ai >= 0 && lv_defaultInit <= auto00E5EB74_ae) || (auto00E5EB74_ai < 0 && lv_defaultInit >= auto00E5EB74_ae) ) ; lv_defaultInit += auto00E5EB74_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_gestaltStation, 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, lv_defaultPoint[lv_defaultInit]);
        UnitBehaviorAddPlayer(UnitLastCreated(), "GestaltStationInitialControl", 0, 1);
    }
    if ((lv_randomOn == 1)) {
        lv_stageTimes = 0;
        for ( ; ( (autoAAF5488C_ai >= 0 && lv_stageTimes <= autoAAF5488C_ae) || (autoAAF5488C_ai < 0 && lv_stageTimes >= autoAAF5488C_ae) ) ; lv_stageTimes += autoAAF5488C_ai ) {
            while ((lv_times < 3)) {
                lv_randomPointInitTemp[lv_times] = RandomInt(0, 4);
                if ((lv_times > 0)) {
                    autoAF58B129_val = lv_times;
                    if (autoAF58B129_val == 1) {
                        while (((lv_randomPointInitTemp[lv_times] == lv_randomPointInitTemp[(lv_times - 1)]) || (DistanceBetweenPoints(lv_randomPointStage[lv_randomPointInitTemp[lv_times]][lv_stageTimes], lv_randomPointStage[lv_randomPointInitTemp[(lv_times - 1)]][lv_stageTimes]) <= 10.0))) {
                            lv_randomPointInitTemp[lv_times] = RandomInt(0, 4);
                        }
                    }
                    else if (autoAF58B129_val == 2) {
                        if ((lv_stageTimes == 1)) {
                            while (((lv_randomPointInitTemp[lv_times] == lv_randomPointInitTemp[(lv_times - 1)]) || (lv_randomPointInitTemp[lv_times] == lv_randomPointInitTemp[(lv_times - 2)]) || (DistanceBetweenPoints(lv_randomPointStage[lv_randomPointInitTemp[lv_times]][lv_stageTimes], lv_randomPointStage[lv_randomPointInitTemp[(lv_times - 1)]][lv_stageTimes]) <= 10.0) || (DistanceBetweenPoints(lv_randomPointStage[lv_randomPointInitTemp[lv_times]][lv_stageTimes], lv_randomPointStage[lv_randomPointInitTemp[(lv_times - 2)]][lv_stageTimes]) <= 10.0) || (DistanceBetweenPoints(lv_randomPointStage[lv_randomPointInitTemp[(lv_times - 1)]][lv_stageTimes], lv_randomPointStage[lv_randomPointInitTemp[(lv_times - 2)]][lv_stageTimes]) <= 10.0))) {
                                lv_randomPointInitTemp[lv_times] = RandomInt(0, 4);
                            }
                        }

                    }
                    else {
                    }
                }

                lv_times += 1;
            }
            lv_defaultInit = 0;
            for ( ; ( (auto0702478F_ai >= 0 && lv_defaultInit <= auto0702478F_ae) || (auto0702478F_ai < 0 && lv_defaultInit >= auto0702478F_ae) ) ; lv_defaultInit += auto0702478F_ai ) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_gestaltStation, 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, lv_randomPointStage[lv_randomPointInitTemp[lv_defaultInit]][lv_stageTimes]);
                UnitBehaviorAddPlayer(UnitLastCreated(), "GestaltStationInitialControl", 0, 1);
            }
            if ((lv_stageTimes == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_gestaltStation, 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, lv_randomPointStage[lv_randomPointInitTemp[2]][lv_stageTimes]);
                UnitBehaviorAddPlayer(UnitLastCreated(), "GestaltStationInitialControl", 0, 1);
            }

            lv_times = 0;
            lv_randomPointInitTemp[0] = 0;
            lv_randomPointInitTemp[1] = 0;
            lv_randomPointInitTemp[2] = 0;
        }
    }

    CatalogFieldValueSet(c_gameCatalogUnit, "GestaltResourceDefenseStation", "FogVisibility", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "Snapshot");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E9A284E8AEBEE782B9E59FBAE7AB99E588B7E696B0_Init () {
    libNEXS_gt_E9A284E8AEBEE782B9E59FBAE7AB99E588B7E696B0 = TriggerCreate("libNEXS_gt_E9A284E8AEBEE782B9E59FBAE7AB99E588B7E696B0_Func");
    TriggerEnable(libNEXS_gt_E9A284E8AEBEE782B9E59FBAE7AB99E588B7E696B0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E59FBAE7AB99E58DA0E9A286_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_range;
    int lv_breakTest;
    unit lv_stationUnit;
    unit lv_placeUnit;
    fixed lv_totalTime;
    timer lv_timer;
    unit lv_uIProgress;
    int lv_defaultInit;

    // Automatic Variable Declarations
    unitgroup autoC78C692C_g;
    int autoC78C692C_u;
    unit autoC78C692C_var;
    int autoE0997957_ae;
    const int autoE0997957_ai = 1;
    unitgroup auto85D80802_g;
    int auto85D80802_u;
    unit auto85D80802_var;
    unitgroup auto6B739CAA_g;
    int auto6B739CAA_u;
    unit auto6B739CAA_var;

    // Variable Initialization
    lv_range = 4.5;
    lv_breakTest = 1;
    lv_stationUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_placeUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_totalTime = 60.0;
    lv_timer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == 1) || (UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_totalTime = (lv_totalTime - TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltlMasteryUpgradeSeries2", c_techCountCompleteOnly));
    if ((UnitHasBehavior2(lv_placeUnit, "GestaltStationController") == true)) {
        UnitBehaviorAddPlayer(lv_stationUnit, "GestaltStationStarting", 0, 1);
        if ((UnitHasBehavior2(lv_placeUnit, "GestaltStationControlling") == true)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ProgressBarWideDummy", c_unitCreateIgnorePlacement, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, PointWithOffset(UnitGetPosition(lv_stationUnit), -0.8, 1.5));
            lv_uIProgress = UnitLastCreated();
            TimerStart(lv_timer, lv_totalTime, false, c_timeGame);
            while (true) {
                if ((lv_breakTest == 0)) {
                    lv_breakTest = 1;
                }

                if ((libNtve_gf_UnitInRegion(lv_placeUnit, RegionCircle(UnitGetPosition(lv_stationUnit), lv_range)) == true)) {
                    if ((TimerGetRemaining(lv_timer) <= 0.0)) {
                        UnitBehaviorRemove(lv_stationUnit, "GestaltStationInitialControl", 1);
                        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltStationAmountUpgrade", 1);
                        if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltStationAmountUpgrade", c_techCountCompleteOnly) == 4)) {
                            CatalogFieldValueSet(c_gameCatalogButton, "GestaltDropPod", "Tooltip", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "Button/Tooltip/GestaltDropPod2");
                            TriggerExecute(libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE8BF90E8A18C2, true, false);
                        }

                        if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltStationAmountUpgrade", c_techCountCompleteOnly) == 7)) {
                            CatalogFieldValueSet(c_gameCatalogButton, "GestaltDropPod", "Tooltip", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "Button/Tooltip/GestaltDropPod3");
                            TriggerExecute(libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE8BF90E8A18C3, true, false);
                        }

                        PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, c_playerPropCustom, c_playerPropOperAdd, 2);
                        PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, c_playerPropMinerals, c_playerPropOperAdd, 500);
                        UnitKill(lv_uIProgress);
                        autoE0997957_ae = (libNEXS_gv_zeroTeamMax - 1);
                        lv_defaultInit = 0;
                        for ( ; ( (autoE0997957_ai >= 0 && lv_defaultInit <= autoE0997957_ae) || (autoE0997957_ai < 0 && lv_defaultInit >= autoE0997957_ae) ) ; lv_defaultInit += autoE0997957_ai ) {
                            if ((lv_placeUnit == libNEXS_gv_zeroTeamCaptain[lv_defaultInit])) {
                                UnitXPAddXP(lv_placeUnit, "GestaltZSquadeVeterancy", 60.0);
                                auto6B739CAA_g = libNEXS_gv_zeroTeam[lv_defaultInit];
                                auto6B739CAA_u = UnitGroupCount(auto6B739CAA_g, c_unitCountAll);
                                for (;; auto6B739CAA_u -= 1) {
                                    auto6B739CAA_var = UnitGroupUnitFromEnd(auto6B739CAA_g, auto6B739CAA_u);
                                    if (auto6B739CAA_var == null) { break; }
                                    if ((auto6B739CAA_var != libNEXS_gv_zeroTeamCaptain[lv_defaultInit])) {
                                        UnitXPAddXP(auto6B739CAA_var, "GestaltZSquadeVeterancy", 60.0);
                                    }

                                }
                                break;
                            }
                            else {
                                if ((UnitGroupHasUnit(libNEXS_gv_zeroTeam[lv_defaultInit], lv_placeUnit) == true)) {
                                    auto85D80802_g = libNEXS_gv_zeroTeam[lv_defaultInit];
                                    auto85D80802_u = UnitGroupCount(auto85D80802_g, c_unitCountAll);
                                    for (;; auto85D80802_u -= 1) {
                                        auto85D80802_var = UnitGroupUnitFromEnd(auto85D80802_g, auto85D80802_u);
                                        if (auto85D80802_var == null) { break; }
                                        UnitXPAddXP(auto85D80802_var, "GestaltZSquadeVeterancy", 60.0);
                                    }
                                    break;
                                }

                            }
                        }
                        break;
                    }

                    Wait(0.5, c_timeGame);
                }
                else {
                    autoC78C692C_g = UnitGroup(null, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, RegionCircle(UnitGetPosition(lv_stationUnit), lv_range), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
                    autoC78C692C_u = UnitGroupCount(autoC78C692C_g, c_unitCountAll);
                    for (;; autoC78C692C_u -= 1) {
                        autoC78C692C_var = UnitGroupUnitFromEnd(autoC78C692C_g, autoC78C692C_u);
                        if (autoC78C692C_var == null) { break; }
                        if ((UnitIsValid(autoC78C692C_var) == true) && (UnitIsAlive(autoC78C692C_var) == true) && (UnitHasBehavior2(autoC78C692C_var, "GestaltStationController") == true)) {
                            lv_placeUnit = autoC78C692C_var;
                            UnitBehaviorAddPlayer(lv_placeUnit, "GestaltStationControlling", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, 1);
                            lv_breakTest = 0;
                            break;
                        }

                    }
                    if ((lv_breakTest == 1)) {
                        break;
                    }

                }
            }
        }

        UnitBehaviorRemove(lv_stationUnit, "GestaltStationStarting", 1);
        UnitKill(lv_uIProgress);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E59FBAE7AB99E58DA0E9A286_Init () {
    libNEXS_gt_E59FBAE7AB99E58DA0E9A286 = TriggerCreate("libNEXS_gt_E59FBAE7AB99E58DA0E9A286_Func");
    TriggerEnable(libNEXS_gt_E59FBAE7AB99E58DA0E9A286, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E59FBAE7AB99E58DA0E9A286, c_playerAny, "GestaltStationControlAB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E59FBAE7AB99E8B584E6BA90E88EB7E58F96_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "GestaltMineralAdapterHarvest35")) {
        PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, c_playerPropMinerals, c_playerPropOperAdd, 100);
    }
    else if ((EventPlayerEffectUsed() == "GestaltMineralAdapterHarvest45")) {
        PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, c_playerPropMinerals, c_playerPropOperAdd, 150);
    }
    else if ((EventPlayerEffectUsed() == "GestaltMineralAdapterHarvest55")) {
        PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, c_playerPropMinerals, c_playerPropOperAdd, 200);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E59FBAE7AB99E8B584E6BA90E88EB7E58F96_Init () {
    libNEXS_gt_E59FBAE7AB99E8B584E6BA90E88EB7E58F96 = TriggerCreate("libNEXS_gt_E59FBAE7AB99E8B584E6BA90E88EB7E58F96_Func");
    TriggerEnable(libNEXS_gt_E59FBAE7AB99E8B584E6BA90E88EB7E58F96, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E59FBAE7AB99E8B584E6BA90E88EB7E58F96, c_playerAny, "GestaltMineralAdapterHarvest35");
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E59FBAE7AB99E8B584E6BA90E88EB7E58F96, c_playerAny, "GestaltMineralAdapterHarvest45");
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E59FBAE7AB99E8B584E6BA90E88EB7E58F96, c_playerAny, "GestaltMineralAdapterHarvest55");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E59FBAE7AB99E4BF9DE68AA4E58A9BE59CBA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnitDamageSourceUnit()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) != "MutatorPurifierBeam"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) != "MutatorTornado"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) != "MutatorStormCloud"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) != "PlaceWormholeUnit3"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "GestaltResourceDefenseStation"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "GestaltStationProtectBan") == false))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltForceofMind", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnit(), "GestaltStationProtectBan", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E59FBAE7AB99E4BF9DE68AA4E58A9BE59CBA_Init () {
    libNEXS_gt_E59FBAE7AB99E4BF9DE68AA4E58A9BE59CBA = TriggerCreate("libNEXS_gt_E59FBAE7AB99E4BF9DE68AA4E58A9BE59CBA_Func");
    TriggerEnable(libNEXS_gt_E59FBAE7AB99E4BF9DE68AA4E58A9BE59CBA, false);
    TriggerAddEventUnitDamaged(libNEXS_gt_E59FBAE7AB99E4BF9DE68AA4E58A9BE59CBA, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????(????????????)
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E699B6E4BD93E79FBFE98787E99B86E8A385E7BDAEE588B7E696B0E5889DE5A78BE5BC80E590AF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6CA79839_g;
    int auto6CA79839_u;
    unit auto6CA79839_var;
    unitgroup auto47332C7C_g;
    int auto47332C7C_u;
    unit auto47332C7C_var;
    unitgroup autoF5C50C96_g;
    int autoF5C50C96_u;
    unit autoF5C50C96_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "GestaltZOrbitalCommand"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (true) {
        autoF5C50C96_g = UnitGroup("MineralField", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF5C50C96_u = UnitGroupCount(autoF5C50C96_g, c_unitCountAll);
        for (;; autoF5C50C96_u -= 1) {
            autoF5C50C96_var = UnitGroupUnitFromEnd(autoF5C50C96_g, autoF5C50C96_u);
            if (autoF5C50C96_var == null) { break; }
            if ((UnitHasBehavior2(autoF5C50C96_var, "GestaltMineralAdapterForMineral") == false) && (UnitHasBehavior2(autoF5C50C96_var, "SelendisProbeGetResouroceTargetAB") == false) && (UnitHasBehavior2(autoF5C50C96_var, "SelendisProbeGetResourocePreTargetAB") == false)) {
                UnitBehaviorAdd(autoF5C50C96_var, "GestaltMineralAdapterForMineral", EventUnit(), 1);
                UnitCreateEffectPoint(EventUnit(), "GestaltMineralAdapterCreate", UnitGetPosition(autoF5C50C96_var));
            }

        }
    }
    else {
        auto6CA79839_g = UnitGroup("UmojanLabMineralField", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6CA79839_u = UnitGroupCount(auto6CA79839_g, c_unitCountAll);
        for (;; auto6CA79839_u -= 1) {
            auto6CA79839_var = UnitGroupUnitFromEnd(auto6CA79839_g, auto6CA79839_u);
            if (auto6CA79839_var == null) { break; }
            if ((UnitHasBehavior2(auto6CA79839_var, "GestaltMineralAdapterForMineral") == false) && (UnitHasBehavior2(auto6CA79839_var, "SelendisProbeGetResouroceTargetAB") == false) && (UnitHasBehavior2(auto6CA79839_var, "SelendisProbeGetResourocePreTargetAB") == false)) {
                UnitBehaviorAdd(auto6CA79839_var, "GestaltMineralAdapterForMineral", EventUnit(), 1);
                UnitCreateEffectPoint(EventUnit(), "GestaltMineralAdapterCreate", UnitGetPosition(auto6CA79839_var));
            }

        }
        auto47332C7C_g = UnitGroup("PurifierMineralField", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto47332C7C_u = UnitGroupCount(auto47332C7C_g, c_unitCountAll);
        for (;; auto47332C7C_u -= 1) {
            auto47332C7C_var = UnitGroupUnitFromEnd(auto47332C7C_g, auto47332C7C_u);
            if (auto47332C7C_var == null) { break; }
            if ((UnitHasBehavior2(auto47332C7C_var, "GestaltMineralAdapterForMineral") == false) && (UnitHasBehavior2(auto47332C7C_var, "SelendisProbeGetResouroceTargetAB") == false) && (UnitHasBehavior2(auto47332C7C_var, "SelendisProbeGetResourocePreTargetAB") == false)) {
                UnitBehaviorAdd(auto47332C7C_var, "GestaltMineralAdapterForMineral", EventUnit(), 1);
                UnitCreateEffectPoint(EventUnit(), "GestaltMineralAdapterCreate", UnitGetPosition(auto47332C7C_var));
            }

        }
    }
    libNEXS_gf_E699B6E4BD93E79FBFE98787E99B86E8A385E7BDAE(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E699B6E4BD93E79FBFE98787E99B86E8A385E7BDAEE588B7E696B0E5889DE5A78BE5BC80E590AF_Init () {
    libNEXS_gt_E699B6E4BD93E79FBFE98787E99B86E8A385E7BDAEE588B7E696B0E5889DE5A78BE5BC80E590AF = TriggerCreate("libNEXS_gt_E699B6E4BD93E79FBFE98787E99B86E8A385E7BDAEE588B7E696B0E5889DE5A78BE5BC80E590AF_Func");
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E699B6E4BD93E79FBFE98787E99B86E8A385E7BDAEE588B7E696B0E5889DE5A78BE5BC80E590AF, null, "GestaltCommandCenterOn", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E699B6E4BD93E79FBFE98787E99B86E8A385E7BDAEE588B7E696B0E5889DE5A78BE5BC80E590AF, null, "GestaltCommandCenterOn", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E699B6E4BD93E79FBFE98787E99B86E8BF87E5BAA6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(EventUnit(), "GestaltMineralAdapterHarvest") >= 2))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "MineralFieldGZ1") == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "MineralFieldGZ2") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnit(), "GestaltMineralAdapterGZ", 0, 1);
    if (true) {
        if ((RandomInt(1, 2) == 1)) {
            UnitBehaviorAddPlayer(EventUnit(), "MineralFieldGZ1", 0, 1);
        }
        else {
            UnitBehaviorAddPlayer(EventUnit(), "MineralFieldGZ2", 0, 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E699B6E4BD93E79FBFE98787E99B86E8BF87E5BAA6_Init () {
    libNEXS_gt_E699B6E4BD93E79FBFE98787E99B86E8BF87E5BAA6 = TriggerCreate("libNEXS_gt_E699B6E4BD93E79FBFE98787E99B86E8BF87E5BAA6_Func");
    TriggerEnable(libNEXS_gt_E699B6E4BD93E79FBFE98787E99B86E8BF87E5BAA6, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E699B6E4BD93E79FBFE98787E99B86E8BF87E5BAA6, null, "GestaltMineralAdapterHarvest", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E699B6E4BD93E79FBFE98787E99B86E8BF87E5BAA6, null, "GestaltMineralAdapterHarvest", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E9AB98E883BDE793A6E696AFE98787E99B86E8BDACE68DA2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    if ((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitTarget), "GestaltMineralAdapterGZ") == true)) {
        PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, c_playerPropMinerals, c_playerPropOperAdd, 15);
        PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, c_playerPropVespene, c_playerPropOperSubtract, 15);
    }
    else {
        PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, c_playerPropMinerals, c_playerPropOperAdd, 50);
        PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, c_playerPropVespene, c_playerPropOperSubtract, 50);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E9AB98E883BDE793A6E696AFE98787E99B86E8BDACE68DA2_Init () {
    libNEXS_gt_E9AB98E883BDE793A6E696AFE98787E99B86E8BDACE68DA2 = TriggerCreate("libNEXS_gt_E9AB98E883BDE793A6E696AFE98787E99B86E8BDACE68DA2_Func");
    TriggerEnable(libNEXS_gt_E9AB98E883BDE793A6E696AFE98787E99B86E8BDACE68DA2, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E9AB98E883BDE793A6E696AFE98787E99B86E8BDACE68DA2, c_playerAny, "GestaltMineralAdapterHarvest10Set");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99BB6E5B08FE9989FE7BB8FE9AA8CE580BCE88EB7E58F96_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_defaultInit;
    fixed lv_supply;

    // Automatic Variable Declarations
    int auto2AE19F11_ae;
    const int auto2AE19F11_ai = 1;
    unitgroup auto0F7EB838_g;
    int auto0F7EB838_u;
    unit auto0F7EB838_var;
    unitgroup autoBEC58DED_g;
    int autoBEC58DED_u;
    unit autoBEC58DED_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_supply = UnitTypeGetProperty(UnitGetType(EventUnit()), c_unitPropSuppliesUsed);
    if ((lv_supply < 1)) {
        if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == false) && (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMapBoss) == false)) {
            if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false)) {
                lv_supply = 1.0;
            }
            else {
                lv_supply = 6.0;
            }
        }
        else {
            lv_supply = 12.0;
        }
    }

    auto2AE19F11_ae = (libNEXS_gv_zeroTeamMax - 1);
    lv_defaultInit = 0;
    for ( ; ( (auto2AE19F11_ai >= 0 && lv_defaultInit <= auto2AE19F11_ae) || (auto2AE19F11_ai < 0 && lv_defaultInit >= auto2AE19F11_ae) ) ; lv_defaultInit += auto2AE19F11_ai ) {
        if ((UnitGroupHasUnit(libNEXS_gv_zeroTeam[lv_defaultInit], libNtve_gf_KillingUnit()) == true)) {
            auto0F7EB838_g = libNEXS_gv_zeroTeam[lv_defaultInit];
            auto0F7EB838_u = UnitGroupCount(auto0F7EB838_g, c_unitCountAll);
            for (;; auto0F7EB838_u -= 1) {
                auto0F7EB838_var = UnitGroupUnitFromEnd(auto0F7EB838_g, auto0F7EB838_u);
                if (auto0F7EB838_var == null) { break; }
                UnitXPAddXP(auto0F7EB838_var, "GestaltZSquadeVeterancy", lv_supply);
            }
            break;
        }

    }
    autoBEC58DED_g = UnitGroup(null, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, RegionCircle(UnitGetPosition(EventUnit()), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBEC58DED_u = UnitGroupCount(autoBEC58DED_g, c_unitCountAll);
    for (;; autoBEC58DED_u -= 1) {
        autoBEC58DED_var = UnitGroupUnitFromEnd(autoBEC58DED_g, autoBEC58DED_u);
        if (autoBEC58DED_var == null) { break; }
        UnitXPAddXP(autoBEC58DED_var, "GestaltZSquadeVeterancy", lv_supply);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99BB6E5B08FE9989FE7BB8FE9AA8CE580BCE88EB7E58F96_Init () {
    libNEXS_gt_E99BB6E5B08FE9989FE7BB8FE9AA8CE580BCE88EB7E58F96 = TriggerCreate("libNEXS_gt_E99BB6E5B08FE9989FE7BB8FE9AA8CE580BCE88EB7E58F96_Func");
    TriggerEnable(libNEXS_gt_E99BB6E5B08FE9989FE7BB8FE9AA8CE580BCE88EB7E58F96, false);
    TriggerAddEventUnitDied(libNEXS_gt_E99BB6E5B08FE9989FE7BB8FE9AA8CE580BCE88EB7E58F96, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99BB6E5B08FE9989FE7AD89E7BAA7E68F90E9AB98_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rankTemplate;
    unit lv_rankUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rankTemplate = c_invalidDialogControlId;
    lv_rankUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "HealthBar", lv_rankUnit);
    lv_rankTemplate = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_rankTemplate, PlayerGroupAll(), "Rank", IntToString((UnitXPGetCurrentLevel(lv_rankUnit, "GestaltZSquadeVeterancy") + 1)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99BB6E5B08FE9989FE7AD89E7BAA7E68F90E9AB98_Init () {
    libNEXS_gt_E99BB6E5B08FE9989FE7AD89E7BAA7E68F90E9AB98 = TriggerCreate("libNEXS_gt_E99BB6E5B08FE9989FE7AD89E7BAA7E68F90E9AB98_Func");
    TriggerEnable(libNEXS_gt_E99BB6E5B08FE9989FE7AD89E7BAA7E68F90E9AB98, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E99BB6E5B08FE9989FE7AD89E7BAA7E68F90E9AB98, null, "GestaltZSquadeVeterancy1", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E99BB6E5B08FE9989FE7AD89E7BAA7E68F90E9AB98, null, "GestaltZSquadeVeterancy2", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99BB6E5B08FE9989FE9989FE995BFE5889BE5BBBA_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rankTemplate;
    unit lv_rankUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rankTemplate = c_invalidDialogControlId;
    lv_rankUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_zeroTeamCaptain[libNEXS_gv_zeroTeamTotal] = EventUnit();
    libNEXS_gv_zeroTeamTotal += 1;
    UnitBehaviorAddPlayer(EventUnit(), "ZeroTeamUnitAmountBehavior", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, 1);
    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "HealthBar", lv_rankUnit);
    lv_rankTemplate = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_rankTemplate, PlayerGroupAll(), "Rank", IntToString((UnitXPGetCurrentLevel(lv_rankUnit, "GestaltZSquadeVeterancy") + 1)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99BB6E5B08FE9989FE9989FE995BFE5889BE5BBBA_Init () {
    libNEXS_gt_E99BB6E5B08FE9989FE9989FE995BFE5889BE5BBBA = TriggerCreate("libNEXS_gt_E99BB6E5B08FE9989FE9989FE995BFE5889BE5BBBA_Func");
    TriggerEnable(libNEXS_gt_E99BB6E5B08FE9989FE9989FE995BFE5889BE5BBBA, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E99BB6E5B08FE9989FE9989FE995BFE5889BE5BBBA, null, "GestaltZeroTeamCaptainCreate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99BB6E5B08FE9989FE9989FE59198E5BCB9E4BB93E587BAE7949F_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_defaultInit;
    int lv_teamUnitBehaviourAmount;
    int lv_teamCaptainAmount;
    unit lv_teamCaptain;
    unit lv_teamMates;
    int lv_lifeDefault;

    // Automatic Variable Declarations
    int autoC106628E_ae;
    const int autoC106628E_ai = 1;
    unitgroup auto336910B3_g;
    int auto336910B3_u;
    unit auto336910B3_var;

    // Variable Initialization
    lv_teamCaptain = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_teamMates = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_lifeDefault = UnitGetPropertyInt(lv_teamMates, c_unitPropLife, c_unitPropNormal);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(lv_teamMates, RegionRandomPoint(RegionCircle(UnitGetPosition(lv_teamCaptain), 2.0)), false);
    if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltTerminatorEXO", c_techCountCompleteOnly) > 0)) {
        if ((UnitGetType(lv_teamMates) == "GestaltZForerunnerSquadMember")) {
            lv_lifeDefault += 110;
        }

        if ((UnitGetType(lv_teamMates) == "GestaltZRaiderSquadMember")) {
            lv_lifeDefault += 150;
        }

    }

    autoC106628E_ae = (libNEXS_gv_zeroTeamMax - 1);
    lv_defaultInit = 0;
    for ( ; ( (autoC106628E_ai >= 0 && lv_defaultInit <= autoC106628E_ae) || (autoC106628E_ai < 0 && lv_defaultInit >= autoC106628E_ae) ) ; lv_defaultInit += autoC106628E_ai ) {
        if ((lv_teamCaptain == libNEXS_gv_zeroTeamCaptain[lv_defaultInit])) {
            lv_teamCaptainAmount = lv_defaultInit;
            break;
        }

    }
    UnitBehaviorAddPlayer(lv_teamCaptain, "ZeroTeamUnitAmountBehavior", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, 1);
    lv_teamUnitBehaviourAmount = UnitBehaviorCount(lv_teamCaptain, "ZeroTeamUnitAmountBehavior");
    if ((UnitGroupHasUnit(libNEXS_gv_zeroTeam[lv_teamCaptainAmount], lv_teamCaptain) == false)) {
        UnitGroupAdd(libNEXS_gv_zeroTeam[lv_teamCaptainAmount], lv_teamCaptain);
        libNEXS_gv_zeroTeamLife[lv_teamCaptainAmount] += UnitGetPropertyInt(lv_teamCaptain, c_unitPropLife, c_unitPropCurrent);
        libNEXS_gv_zeroTeamLifeMax[lv_teamCaptainAmount] += lv_lifeDefault;
        if ((UnitGetType(lv_teamCaptain) == "GestaltZRaiderSquadLeader")) {
            libNEXS_gv_zeroTeamShield[lv_teamCaptainAmount] += UnitGetPropertyInt(lv_teamCaptain, c_unitPropShields, c_unitPropCurrent);
            libNEXS_gv_zeroTeamShieldMax[lv_teamCaptainAmount] += UnitGetPropertyInt(lv_teamMates, c_unitPropShields, c_unitPropNormal);
        }

    }

    UnitGroupAdd(libNEXS_gv_zeroTeam[lv_teamCaptainAmount], lv_teamMates);
    Wait(0.0625, c_timeGame);
    libNEXS_gv_zeroTeamLifeMax[lv_teamCaptainAmount] += lv_lifeDefault;
    libNEXS_gv_zeroTeamLife[lv_teamCaptainAmount] += UnitGetPropertyInt(lv_teamMates, c_unitPropLife, c_unitPropCurrent);
    if ((UnitGetType(lv_teamCaptain) == "GestaltZRaiderSquadLeader")) {
        libNEXS_gv_zeroTeamShieldMax[lv_teamCaptainAmount] += UnitGetPropertyInt(lv_teamMates, c_unitPropShields, c_unitPropNormal);
        libNEXS_gv_zeroTeamShield[lv_teamCaptainAmount] += UnitGetPropertyInt(lv_teamMates, c_unitPropShields, c_unitPropCurrent);
    }

    auto336910B3_g = libNEXS_gv_zeroTeam[lv_teamCaptainAmount];
    auto336910B3_u = UnitGroupCount(auto336910B3_g, c_unitCountAll);
    for (;; auto336910B3_u -= 1) {
        auto336910B3_var = UnitGroupUnitFromEnd(auto336910B3_g, auto336910B3_u);
        if (auto336910B3_var == null) { break; }
        UnitSetPropertyFixed(auto336910B3_var, c_unitPropLifeMax, libNEXS_gv_zeroTeamLifeMax[lv_teamCaptainAmount]);
        UnitSetPropertyFixed(auto336910B3_var, c_unitPropLife, libNEXS_gv_zeroTeamLife[lv_teamCaptainAmount]);
        if (((UnitGetType(auto336910B3_var) == "GestaltZRaiderSquadLeader") || (UnitGetType(auto336910B3_var) == "GestaltZRaiderSquadMember"))) {
            UnitSetPropertyFixed(auto336910B3_var, c_unitPropShieldsMax, libNEXS_gv_zeroTeamShieldMax[lv_teamCaptainAmount]);
            UnitSetPropertyFixed(auto336910B3_var, c_unitPropShields, libNEXS_gv_zeroTeamShield[lv_teamCaptainAmount]);
        }

        if ((UnitHasBehavior2(auto336910B3_var, "GestaltZeroTeamCaptainCreate") != true)) {
            PlayerCreateEffectUnit(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "ZeroTeamUnitAmountBehaviorRemove", auto336910B3_var);
            UnitBehaviorAddPlayer(auto336910B3_var, "ZeroTeamUnitAmountBehavior", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, lv_teamUnitBehaviourAmount);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99BB6E5B08FE9989FE9989FE59198E5BCB9E4BB93E587BAE7949F_Init () {
    libNEXS_gt_E99BB6E5B08FE9989FE9989FE59198E5BCB9E4BB93E587BAE7949F = TriggerCreate("libNEXS_gt_E99BB6E5B08FE9989FE9989FE59198E5BCB9E4BB93E587BAE7949F_Func");
    TriggerEnable(libNEXS_gt_E99BB6E5B08FE9989FE9989FE59198E5BCB9E4BB93E587BAE7949F, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E99BB6E5B08FE9989FE9989FE59198E5BCB9E4BB93E587BAE7949F, c_playerAny, "GestaltZeroTeamMateCall");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99BB6E5B08FE9989FE8A180E9878FE58D87E7BAA7E98082E9858D_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_defaultInit;

    // Automatic Variable Declarations
    int auto7E6C3B64_ae;
    const int auto7E6C3B64_ai = 1;
    unitgroup auto3B32E2A2_g;
    int auto3B32E2A2_u;
    unit auto3B32E2A2_var;
    unitgroup autoA654232C_g;
    int autoA654232C_u;
    unit autoA654232C_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUpgrade() == "GestaltTerminatorEXO"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7E6C3B64_ae = (libNEXS_gv_zeroTeamMax - 1);
    lv_defaultInit = 0;
    for ( ; ( (auto7E6C3B64_ai >= 0 && lv_defaultInit <= auto7E6C3B64_ae) || (auto7E6C3B64_ai < 0 && lv_defaultInit >= auto7E6C3B64_ae) ) ; lv_defaultInit += auto7E6C3B64_ai ) {
        auto3B32E2A2_g = libNEXS_gv_zeroTeam[lv_defaultInit];
        auto3B32E2A2_u = UnitGroupCount(auto3B32E2A2_g, c_unitCountAll);
        for (;; auto3B32E2A2_u -= 1) {
            auto3B32E2A2_var = UnitGroupUnitFromEnd(auto3B32E2A2_g, auto3B32E2A2_u);
            if (auto3B32E2A2_var == null) { break; }
            if ((UnitGetType(auto3B32E2A2_var) == "GestaltZRaiderSquadLeader")) {
                libNEXS_gv_zeroTeamLife[lv_defaultInit] += (UnitBehaviorCount(auto3B32E2A2_var, "ZeroTeamUnitAmountBehavior") * 150);
                libNEXS_gv_zeroTeamLifeMax[lv_defaultInit] += (UnitBehaviorCount(auto3B32E2A2_var, "ZeroTeamUnitAmountBehavior") * 150);
                break;
            }

            if ((UnitGetType(auto3B32E2A2_var) == "GestaltZForerunnerSquadLeader")) {
                libNEXS_gv_zeroTeamLife[lv_defaultInit] += (UnitBehaviorCount(auto3B32E2A2_var, "ZeroTeamUnitAmountBehavior") * 110);
                libNEXS_gv_zeroTeamLifeMax[lv_defaultInit] += (UnitBehaviorCount(auto3B32E2A2_var, "ZeroTeamUnitAmountBehavior") * 110);
                break;
            }

        }
        autoA654232C_g = libNEXS_gv_zeroTeam[lv_defaultInit];
        autoA654232C_u = UnitGroupCount(autoA654232C_g, c_unitCountAll);
        for (;; autoA654232C_u -= 1) {
            autoA654232C_var = UnitGroupUnitFromEnd(autoA654232C_g, autoA654232C_u);
            if (autoA654232C_var == null) { break; }
            UnitSetPropertyFixed(autoA654232C_var, c_unitPropLife, libNEXS_gv_zeroTeamLife[lv_defaultInit]);
            UnitSetPropertyFixed(autoA654232C_var, c_unitPropLifeMax, libNEXS_gv_zeroTeamLifeMax[lv_defaultInit]);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99BB6E5B08FE9989FE8A180E9878FE58D87E7BAA7E98082E9858D_Init () {
    libNEXS_gt_E99BB6E5B08FE9989FE8A180E9878FE58D87E7BAA7E98082E9858D = TriggerCreate("libNEXS_gt_E99BB6E5B08FE9989FE8A180E9878FE58D87E7BAA7E98082E9858D_Func");
    TriggerEnable(libNEXS_gt_E99BB6E5B08FE9989FE8A180E9878FE58D87E7BAA7E98082E9858D, false);
    TriggerAddEventUnitResearchProgress(libNEXS_gt_E99BB6E5B08FE9989FE8A180E9878FE58D87E7BAA7E98082E9858D, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99BB6E5B08FE9989FE8A180E9878FE68C81E7BBADE8AEA1E7AE97_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_defaultInit;
    int lv_teamUnitBehaviourAmount;
    int lv_teamUnitBelongAmount;
    int lv_lifeDefault;

    // Automatic Variable Declarations
    int auto32C899F4_ae;
    const int auto32C899F4_ai = 1;
    unitgroup auto228519D1_g;
    int auto228519D1_u;
    unit auto228519D1_var;
    unitgroup auto43AD7C19_g;
    int auto43AD7C19_u;
    unit auto43AD7C19_var;
    unitgroup autoC055F57D_g;
    int autoC055F57D_u;
    unit autoC055F57D_var;

    // Variable Initialization
    lv_lifeDefault = UnitGetPropertyInt(EventUnit(), c_unitPropLife, c_unitPropNormal);

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13))) {
            return false;
        }

        if (!((EventUnitDamageAmount() > 0.0))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "ZeroTeamUnitAmountBehavior") > 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltTerminatorEXO", c_techCountCompleteOnly) > 0)) {
        if (((UnitGetType(EventUnit()) == "GestaltZForerunnerSquadLeader") || (UnitGetType(EventUnit()) == "GestaltZForerunnerSquadMember"))) {
            lv_lifeDefault += 110;
        }

        if (((UnitGetType(EventUnit()) == "GestaltZRaiderSquadLeader") || (UnitGetType(EventUnit()) == "GestaltZRaiderSquadMember"))) {
            lv_lifeDefault += 150;
        }

    }

    auto32C899F4_ae = (libNEXS_gv_zeroTeamMax - 1);
    lv_defaultInit = 0;
    for ( ; ( (auto32C899F4_ai >= 0 && lv_defaultInit <= auto32C899F4_ae) || (auto32C899F4_ai < 0 && lv_defaultInit >= auto32C899F4_ae) ) ; lv_defaultInit += auto32C899F4_ai ) {
        if ((UnitGroupHasUnit(libNEXS_gv_zeroTeam[lv_defaultInit], EventUnit()) == true)) {
            lv_teamUnitBelongAmount = lv_defaultInit;
            break;
        }

    }
    if ((UnitGetPropertyInt(EventUnit(), c_unitPropShields, c_unitPropCurrent) <= 0)) {
        if ((UnitGetPropertyInt(EventUnit(), c_unitPropLife, c_unitPropCurrent) > (lv_lifeDefault * (UnitBehaviorCount(EventUnit(), "ZeroTeamUnitAmountBehavior") - 1)))) {
            libNEXS_gv_zeroTeamLife[lv_teamUnitBelongAmount] -= FixedToInt(EventUnitDamageAmount());
            autoC055F57D_g = libNEXS_gv_zeroTeam[lv_teamUnitBelongAmount];
            autoC055F57D_u = UnitGroupCount(autoC055F57D_g, c_unitCountAll);
            for (;; autoC055F57D_u -= 1) {
                autoC055F57D_var = UnitGroupUnitFromEnd(autoC055F57D_g, autoC055F57D_u);
                if (autoC055F57D_var == null) { break; }
                UnitSetPropertyFixed(autoC055F57D_var, c_unitPropLife, libNEXS_gv_zeroTeamLife[lv_teamUnitBelongAmount]);
            }
        }
        else {
            libNEXS_gv_zeroTeamLifeMax[lv_teamUnitBelongAmount] -= lv_lifeDefault;
            libNEXS_gv_zeroTeamShieldMax[lv_teamUnitBelongAmount] -= UnitGetPropertyInt(EventUnit(), c_unitPropShields, c_unitPropNormal);
            UnitKill(EventUnit());
            UnitBehaviorRemove(libNEXS_gv_zeroTeamCaptain[lv_teamUnitBelongAmount], "ZeroTeamUnitAmountBehavior", 1);
            lv_teamUnitBehaviourAmount = UnitBehaviorCount(libNEXS_gv_zeroTeamCaptain[lv_teamUnitBelongAmount], "ZeroTeamUnitAmountBehavior");
            libNEXS_gv_zeroTeamLife[lv_teamUnitBelongAmount] = libNEXS_gv_zeroTeamLifeMax[lv_teamUnitBelongAmount];
            libNEXS_gv_zeroTeamShield[lv_teamUnitBelongAmount] = 0;
            auto43AD7C19_g = libNEXS_gv_zeroTeam[lv_teamUnitBelongAmount];
            auto43AD7C19_u = UnitGroupCount(auto43AD7C19_g, c_unitCountAll);
            for (;; auto43AD7C19_u -= 1) {
                auto43AD7C19_var = UnitGroupUnitFromEnd(auto43AD7C19_g, auto43AD7C19_u);
                if (auto43AD7C19_var == null) { break; }
                UnitSetPropertyFixed(auto43AD7C19_var, c_unitPropLife, libNEXS_gv_zeroTeamLife[lv_teamUnitBelongAmount]);
                UnitSetPropertyFixed(auto43AD7C19_var, c_unitPropLifeMax, libNEXS_gv_zeroTeamLifeMax[lv_teamUnitBelongAmount]);
                UnitSetPropertyFixed(auto43AD7C19_var, c_unitPropShields, libNEXS_gv_zeroTeamShield[lv_teamUnitBelongAmount]);
                UnitSetPropertyFixed(auto43AD7C19_var, c_unitPropShieldsMax, libNEXS_gv_zeroTeamShieldMax[lv_teamUnitBelongAmount]);
                if ((UnitHasBehavior2(auto43AD7C19_var, "GestaltZeroTeamCaptainCreate") != true)) {
                    PlayerCreateEffectUnit(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "ZeroTeamUnitAmountBehaviorRemove", auto43AD7C19_var);
                    UnitBehaviorAddPlayer(auto43AD7C19_var, "ZeroTeamUnitAmountBehavior", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, lv_teamUnitBehaviourAmount);
                }

            }
        }
    }
    else {
        libNEXS_gv_zeroTeamShield[lv_teamUnitBelongAmount] -= FixedToInt(EventUnitDamageAmount());
        auto228519D1_g = libNEXS_gv_zeroTeam[lv_teamUnitBelongAmount];
        auto228519D1_u = UnitGroupCount(auto228519D1_g, c_unitCountAll);
        for (;; auto228519D1_u -= 1) {
            auto228519D1_var = UnitGroupUnitFromEnd(auto228519D1_g, auto228519D1_u);
            if (auto228519D1_var == null) { break; }
            UnitSetPropertyFixed(auto228519D1_var, c_unitPropShields, libNEXS_gv_zeroTeamShield[lv_teamUnitBelongAmount]);
            if (((UnitGetType(auto228519D1_var) == "GestaltZRaiderSquadLeader") || (UnitGetType(auto228519D1_var) == "GestaltZRaiderSquadMember"))) {
                UnitBehaviorAddPlayer(auto228519D1_var, "GestaltSquadBanShield", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, 1);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99BB6E5B08FE9989FE8A180E9878FE68C81E7BBADE8AEA1E7AE97_Init () {
    libNEXS_gt_E99BB6E5B08FE9989FE8A180E9878FE68C81E7BBADE8AEA1E7AE97 = TriggerCreate("libNEXS_gt_E99BB6E5B08FE9989FE8A180E9878FE68C81E7BBADE8AEA1E7AE97_Func");
    TriggerEnable(libNEXS_gt_E99BB6E5B08FE9989FE8A180E9878FE68C81E7BBADE8AEA1E7AE97, false);
    TriggerAddEventUnitDamaged(libNEXS_gt_E99BB6E5B08FE9989FE8A180E9878FE68C81E7BBADE8AEA1E7AE97, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99BB6E5B08FE9989FE8A180E9878FE997B2E69A87E8AEA1E7AE97_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_defaultInit;
    int lv_personCount;

    // Automatic Variable Declarations
    int auto445FF163_ae;
    const int auto445FF163_ai = 1;
    unitgroup autoBF45823F_g;
    int autoBF45823F_u;
    unit autoBF45823F_var;
    unitgroup autoBB33603C_g;
    int autoBB33603C_u;
    unit autoBB33603C_var;
    unitgroup autoF80ADC51_g;
    int autoF80ADC51_u;
    unit autoF80ADC51_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto445FF163_ae = (libNEXS_gv_zeroTeamMax - 1);
    lv_defaultInit = 0;
    for ( ; ( (auto445FF163_ai >= 0 && lv_defaultInit <= auto445FF163_ae) || (auto445FF163_ai < 0 && lv_defaultInit >= auto445FF163_ae) ) ; lv_defaultInit += auto445FF163_ai ) {
        autoBF45823F_g = libNEXS_gv_zeroTeam[lv_defaultInit];
        autoBF45823F_u = UnitGroupCount(autoBF45823F_g, c_unitCountAll);
        for (;; autoBF45823F_u -= 1) {
            autoBF45823F_var = UnitGroupUnitFromEnd(autoBF45823F_g, autoBF45823F_u);
            if (autoBF45823F_var == null) { break; }
            libNEXS_gv_zeroTeamLife[lv_defaultInit] = UnitGetPropertyInt(autoBF45823F_var, c_unitPropLife, c_unitPropCurrent);
            if ((UnitGetType(autoBF45823F_var) == "GestaltZRaiderSquadLeader")) {
                libNEXS_gv_zeroTeamShield[lv_defaultInit] = UnitGetPropertyInt(autoBF45823F_var, c_unitPropShields, c_unitPropCurrent);
            }

            break;
        }
        autoBB33603C_g = libNEXS_gv_zeroTeam[lv_defaultInit];
        autoBB33603C_u = UnitGroupCount(autoBB33603C_g, c_unitCountAll);
        for (;; autoBB33603C_u -= 1) {
            autoBB33603C_var = UnitGroupUnitFromEnd(autoBB33603C_g, autoBB33603C_u);
            if (autoBB33603C_var == null) { break; }
            UnitSetPropertyFixed(autoBB33603C_var, c_unitPropLife, libNEXS_gv_zeroTeamLife[lv_defaultInit]);
            UnitSetPropertyFixed(autoBB33603C_var, c_unitPropShields, libNEXS_gv_zeroTeamShield[lv_defaultInit]);
            if ((UnitIsAlive(autoBB33603C_var) == true)) {
                lv_personCount += 1;
            }

        }
        if ((lv_personCount <= 1)) {
            autoF80ADC51_g = libNEXS_gv_zeroTeam[lv_defaultInit];
            autoF80ADC51_u = UnitGroupCount(autoF80ADC51_g, c_unitCountAll);
            for (;; autoF80ADC51_u -= 1) {
                autoF80ADC51_var = UnitGroupUnitFromEnd(autoF80ADC51_g, autoF80ADC51_u);
                if (autoF80ADC51_var == null) { break; }
                PlayerCreateEffectUnit(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "ZeroTeamUnitAmountBehaviorRemove", autoF80ADC51_var);
                break;
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99BB6E5B08FE9989FE8A180E9878FE997B2E69A87E8AEA1E7AE97_Init () {
    libNEXS_gt_E99BB6E5B08FE9989FE8A180E9878FE997B2E69A87E8AEA1E7AE97 = TriggerCreate("libNEXS_gt_E99BB6E5B08FE9989FE8A180E9878FE997B2E69A87E8AEA1E7AE97_Func");
    TriggerEnable(libNEXS_gt_E99BB6E5B08FE9989FE8A180E9878FE997B2E69A87E8AEA1E7AE97, false);
    TriggerAddEventTimePeriodic(libNEXS_gt_E99BB6E5B08FE9989FE8A180E9878FE997B2E69A87E8AEA1E7AE97, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E99BB6E5B08FE9989FE9989FE995BFE9878AE694BEE9809AE794A8E68A80E883BD_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_defaultInit;
    int lv_teamUnitBelongAmount;

    // Automatic Variable Declarations
    int auto6CEEB28A_ae;
    const int auto6CEEB28A_ai = 1;
    unitgroup autoCB4E7513_g;
    int autoCB4E7513_u;
    unit autoCB4E7513_var;
    unitgroup autoA58DFE68_g;
    int autoA58DFE68_u;
    unit autoA58DFE68_var;
    unitgroup auto66B54ACF_g;
    int auto66B54ACF_u;
    unit auto66B54ACF_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "GestaltZeroTeamCaptainCreate") == true))) {
            return false;
        }

        if (!(((EventUnitAbility() == AbilityCommand("GestaltZForerunnerSquadGedgetTPA", 0)) || (EventUnitAbility() == AbilityCommand("GestaltZRaiderSquadGadgetJetpack", 0)) || (EventUnitAbility() == AbilityCommand("GestaltZInfiltrationSquadSkillCloak", 0))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6CEEB28A_ae = (libNEXS_gv_zeroTeamMax - 1);
    lv_defaultInit = 0;
    for ( ; ( (auto6CEEB28A_ai >= 0 && lv_defaultInit <= auto6CEEB28A_ae) || (auto6CEEB28A_ai < 0 && lv_defaultInit >= auto6CEEB28A_ae) ) ; lv_defaultInit += auto6CEEB28A_ai ) {
        if ((UnitGroupHasUnit(libNEXS_gv_zeroTeam[lv_defaultInit], EventUnit()) == true)) {
            lv_teamUnitBelongAmount = lv_defaultInit;
            break;
        }

    }
    if ((EventUnitAbility() == AbilityCommand("GestaltZForerunnerSquadGedgetTPA", 0))) {
        autoCB4E7513_g = libNEXS_gv_zeroTeam[lv_teamUnitBelongAmount];
        autoCB4E7513_u = UnitGroupCount(autoCB4E7513_g, c_unitCountAll);
        for (;; autoCB4E7513_u -= 1) {
            autoCB4E7513_var = UnitGroupUnitFromEnd(autoCB4E7513_g, autoCB4E7513_u);
            if (autoCB4E7513_var == null) { break; }
            UnitCreateEffectPoint(autoCB4E7513_var, "GestaltZForerunnerSquadGedgetTPASet", RegionRandomPoint(RegionCircle(EventUnitTargetPoint(), 1.5)));
        }
    }
    else if ((EventUnitAbility() == AbilityCommand("GestaltZRaiderSquadGadgetJetpack", 0))) {
        autoA58DFE68_g = libNEXS_gv_zeroTeam[lv_teamUnitBelongAmount];
        autoA58DFE68_u = UnitGroupCount(autoA58DFE68_g, c_unitCountAll);
        for (;; autoA58DFE68_u -= 1) {
            autoA58DFE68_var = UnitGroupUnitFromEnd(autoA58DFE68_g, autoA58DFE68_u);
            if (autoA58DFE68_var == null) { break; }
            UnitCreateEffectPoint(autoA58DFE68_var, "GestaltZRaiderSquadJetpackCreatePersitent", RegionRandomPoint(RegionCircle(EventUnitTargetPoint(), 1.5)));
        }
    }
    else if ((EventUnitAbility() == AbilityCommand("GestaltZInfiltrationSquadSkillCloak", 0))) {
        auto66B54ACF_g = libNEXS_gv_zeroTeam[lv_teamUnitBelongAmount];
        auto66B54ACF_u = UnitGroupCount(auto66B54ACF_g, c_unitCountAll);
        for (;; auto66B54ACF_u -= 1) {
            auto66B54ACF_var = UnitGroupUnitFromEnd(auto66B54ACF_g, auto66B54ACF_u);
            if (auto66B54ACF_var == null) { break; }
            UnitIssueOrder(auto66B54ACF_var, Order(AbilityCommand("GestaltZInfiltrationSquadSkillCloak", 0)), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E99BB6E5B08FE9989FE9989FE995BFE9878AE694BEE9809AE794A8E68A80E883BD_Init () {
    libNEXS_gt_E99BB6E5B08FE9989FE9989FE995BFE9878AE694BEE9809AE794A8E68A80E883BD = TriggerCreate("libNEXS_gt_E99BB6E5B08FE9989FE9989FE995BFE9878AE694BEE9809AE794A8E68A80E883BD_Func");
    TriggerEnable(libNEXS_gt_E99BB6E5B08FE9989FE9989FE995BFE9878AE694BEE9809AE794A8E68A80E883BD, false);
    TriggerAddEventUnitAbility(libNEXS_gt_E99BB6E5B08FE9989FE9989FE995BFE9878AE694BEE9809AE794A8E68A80E883BD, null, null, c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8BDB0E782B8E69CBAE887AAE5AE9AE4B989E8BF94E59B9EE8BDA8E8BFB9_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_defaultInt;
    int lv_diyInit;
    unit lv_airPlane;
    point lv_airStrikePoint;
    fixed lv_airStrikeAngle;
    int lv_porNNumber;
    int lv_times;
    int lv_negativeRandom;
    fixed lv_unitSpeed;
    fixed lv_temp;

    // Automatic Variable Declarations
    int auto262410C1_ae;
    const int auto262410C1_ai = 1;

    // Variable Initialization
    lv_diyInit = 1;
    lv_airPlane = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_airStrikePoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_airStrikeAngle = UnitGetFacing(lv_airPlane);
    lv_porNNumber = 1;
    lv_temp = 0.75;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unitSpeed = UnitGetPropertyFixed(lv_airPlane, c_unitPropMovementSpeed, c_unitPropCurrent);
    lv_negativeRandom = RandomInt(0, 1);
    if (((EventPlayerEffectUsed() == "ZeroBomberFireRocketLM") || (EventPlayerEffectUsed() == "ZeroBomberSmokeRocketLM"))) {
        UnitBehaviorAddPlayer(libNEXS_gv_aOEStrikeCasterTemp, "GestaltZISorRSCalldownStop", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, 1);
        libNEXS_gv_aOEStrikeCasterTemp = null;
    }

    if ((lv_negativeRandom == 1)) {
        lv_porNNumber = -1;
    }

    while ((lv_times <= 2)) {
        if ((lv_times == 0)) {
            UnitIssueOrder(lv_airPlane, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_airPlane), (lv_diyInit * (lv_temp * lv_unitSpeed)), lv_airStrikeAngle)), c_orderQueueReplace);
            lv_airStrikeAngle += (lv_porNNumber * 112.5);
        }
        else {
            UnitIssueOrder(lv_airPlane, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_airPlane), ((0.76 * lv_diyInit) * (lv_temp * lv_unitSpeed)), lv_airStrikeAngle)), c_orderQueueReplace);
            lv_airStrikeAngle += (lv_porNNumber * 45.0);
        }
        Wait((lv_temp * lv_diyInit), c_timeGame);
        lv_times += 1;
    }
    auto262410C1_ae = (libNEXS_gv_platformMaxCount - 1);
    lv_defaultInt = 0;
    for ( ; ( (auto262410C1_ai >= 0 && lv_defaultInt <= auto262410C1_ae) || (auto262410C1_ai < 0 && lv_defaultInt >= auto262410C1_ae) ) ; lv_defaultInt += auto262410C1_ai ) {
        if ((UnitGroupHasUnit(libNEXS_gv_bomberPFUnitsGroup[lv_defaultInt], lv_airPlane) == true)) {
            UnitIssueOrder(lv_airPlane, OrderTargetingPoint(AbilityCommand("GestaltTestLand", 0), UnitGetPosition(UnitGroupUnit(libNEXS_gv_bomberPFUnitsGroup[lv_defaultInt], 1))), c_orderQueueReplace);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8BDB0E782B8E69CBAE887AAE5AE9AE4B989E8BF94E59B9EE8BDA8E8BFB9_Init () {
    libNEXS_gt_E8BDB0E782B8E69CBAE887AAE5AE9AE4B989E8BF94E59B9EE8BDA8E8BFB9 = TriggerCreate("libNEXS_gt_E8BDB0E782B8E69CBAE887AAE5AE9AE4B989E8BF94E59B9EE8BDA8E8BFB9_Func");
    TriggerEnable(libNEXS_gt_E8BDB0E782B8E69CBAE887AAE5AE9AE4B989E8BF94E59B9EE8BDA8E8BFB9, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E8BDB0E782B8E69CBAE887AAE5AE9AE4B989E8BF94E59B9EE8BDA8E8BFB9, c_playerAny, "ZeroBomberNormalRocketLMPersistent");
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E8BDB0E782B8E69CBAE887AAE5AE9AE4B989E8BF94E59B9EE8BDA8E8BFB9, c_playerAny, "ZeroBomberFireRocketLM");
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E8BDB0E782B8E69CBAE887AAE5AE9AE4B989E8BF94E59B9EE8BDA8E8BFB9, c_playerAny, "ZeroBomberSmokeRocketLM");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8BDB0E782B8E69CBAE5889BE5BBBAE7BB91E5AE9A_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bomber;
    unit lv_platform;
    int lv_defaultInt;

    // Automatic Variable Declarations
    int auto93B5DF83_ae;
    const int auto93B5DF83_ai = 1;

    // Variable Initialization
    lv_bomber = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_platform = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libNEXS_gv_bomberFighterTempGroup, lv_bomber);
    if ((UnitGroupHasUnit(libNEXS_gv_bomberPlatformTempGroup, lv_platform) == false)) {
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltAirStrikeTargetSearch", 1);
        UnitGroupAdd(libNEXS_gv_bomberPlatformTempGroup, lv_platform);
        UnitGroupAdd(libNEXS_gv_bomberPFUnitsGroup[libNEXS_gv_platformNowCount], lv_platform);
        UnitGroupAdd(libNEXS_gv_bomberPFUnitsGroup[libNEXS_gv_platformNowCount], lv_bomber);
        libNEXS_gv_platformNowCount += 1;
    }
    else {
        auto93B5DF83_ae = (libNEXS_gv_platformMaxCount - 1);
        lv_defaultInt = 0;
        for ( ; ( (auto93B5DF83_ai >= 0 && lv_defaultInt <= auto93B5DF83_ae) || (auto93B5DF83_ai < 0 && lv_defaultInt >= auto93B5DF83_ae) ) ; lv_defaultInt += auto93B5DF83_ai ) {
            if ((UnitGroupHasUnit(libNEXS_gv_bomberPFUnitsGroup[lv_defaultInt], lv_platform) == true)) {
                UnitGroupClear(libNEXS_gv_bomberPFUnitsGroup[lv_defaultInt]);
                UnitGroupAdd(libNEXS_gv_bomberPFUnitsGroup[lv_defaultInt], lv_platform);
                UnitGroupAdd(libNEXS_gv_bomberPFUnitsGroup[lv_defaultInt], lv_bomber);
                break;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8BDB0E782B8E69CBAE5889BE5BBBAE7BB91E5AE9A_Init () {
    libNEXS_gt_E8BDB0E782B8E69CBAE5889BE5BBBAE7BB91E5AE9A = TriggerCreate("libNEXS_gt_E8BDB0E782B8E69CBAE5889BE5BBBAE7BB91E5AE9A_Func");
    TriggerEnable(libNEXS_gt_E8BDB0E782B8E69CBAE5889BE5BBBAE7BB91E5AE9A, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E8BDB0E782B8E69CBAE5889BE5BBBAE7BB91E5AE9A, c_playerAny, "GestaltZeroBomberCall");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8BDB0E782B8E69CBAE5BCB9E88DAFE8A385E5A1ABE5AE8CE6AF95_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_bomberUsable += 1;
    if ((libNEXS_gv_bomberUsable > 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "BomberUsable", 1);
    }
    else {
        libNEXS_gv_bomberUsable = 0;
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "BomberUsable", 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8BDB0E782B8E69CBAE5BCB9E88DAFE8A385E5A1ABE5AE8CE6AF95_Init () {
    libNEXS_gt_E8BDB0E782B8E69CBAE5BCB9E88DAFE8A385E5A1ABE5AE8CE6AF95 = TriggerCreate("libNEXS_gt_E8BDB0E782B8E69CBAE5BCB9E88DAFE8A385E5A1ABE5AE8CE6AF95_Func");
    TriggerEnable(libNEXS_gt_E8BDB0E782B8E69CBAE5BCB9E88DAFE8A385E5A1ABE5AE8CE6AF95, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E8BDB0E782B8E69CBAE5BCB9E88DAFE8A385E5A1ABE5AE8CE6AF95, c_playerAny, "ZeroBomberRocketBuild");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8BDB0E782B8E69CBAE6ADBBE4BAA1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "GestaltZeroBomber") || (UnitGetType(EventUnit()) == "GestaltZeroBomberLand")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitMagazineCount(EventUnit(), "ZeroBomberNormalRocketHanger") > 0)) {
        libNEXS_gv_bomberUsable -= 1;
        if ((libNEXS_gv_bomberUsable > 0)) {
            libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "BomberUsable", 1);
        }
        else {
            libNEXS_gv_bomberUsable = 0;
            libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "BomberUsable", 0);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8BDB0E782B8E69CBAE6ADBBE4BAA1_Init () {
    libNEXS_gt_E8BDB0E782B8E69CBAE6ADBBE4BAA1 = TriggerCreate("libNEXS_gt_E8BDB0E782B8E69CBAE6ADBBE4BAA1_Func");
    TriggerEnable(libNEXS_gt_E8BDB0E782B8E69CBAE6ADBBE4BAA1, false);
    TriggerAddEventUnitDied(libNEXS_gt_E8BDB0E782B8E69CBAE6ADBBE4BAA1, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8BDB0E782B8E69CBAE9998DE890BD_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitMagazineCount(EventPlayerEffectUsedUnit(c_effectUnitTarget), "ZeroBomberNormalRocketHanger") > 0)) {
        libNEXS_gv_bomberUsable += 1;
        if ((libNEXS_gv_bomberUsable > 0)) {
            libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "BomberUsable", 1);
        }
        else {
            libNEXS_gv_bomberUsable = 0;
            libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "BomberUsable", 0);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8BDB0E782B8E69CBAE9998DE890BD_Init () {
    libNEXS_gt_E8BDB0E782B8E69CBAE9998DE890BD = TriggerCreate("libNEXS_gt_E8BDB0E782B8E69CBAE9998DE890BD_Func");
    TriggerEnable(libNEXS_gt_E8BDB0E782B8E69CBAE9998DE890BD, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E8BDB0E782B8E69CBAE9998DE890BD, c_playerAny, "ZeroBomberMorphToLand");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8BDB0E782B8E69CBAE5B9B3E58FB0E691A7E6AF81_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_platform;
    int lv_defaultInt;
    int lv_tempInt;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_platform = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "GestaltBomberPlatform"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltAirStrikeTargetSearch", -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8BDB0E782B8E69CBAE5B9B3E58FB0E691A7E6AF81_Init () {
    libNEXS_gt_E8BDB0E782B8E69CBAE5B9B3E58FB0E691A7E6AF81 = TriggerCreate("libNEXS_gt_E8BDB0E782B8E69CBAE5B9B3E58FB0E691A7E6AF81_Func");
    TriggerEnable(libNEXS_gt_E8BDB0E782B8E69CBAE5B9B3E58FB0E691A7E6AF81, false);
    TriggerAddEventUnitDied(libNEXS_gt_E8BDB0E782B8E69CBAE5B9B3E58FB0E691A7E6AF81, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8BDB0E782B8E69CBAE7B2BEE58786E8BDB0E782B8_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_range;
    region lv_area;
    int lv_defaultInt;
    int lv_times;

    // Automatic Variable Declarations
    const int auto386396F5_n = 2;
    int auto386396F5_i;
    unitgroup auto93FD1854_g;
    int auto93FD1854_u;
    unit auto93FD1854_var;
    int autoA8E2EF1B_ae;
    const int autoA8E2EF1B_ai = 1;
    unitgroup auto384AF6B1_g;
    int auto384AF6B1_u;
    unit auto384AF6B1_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "BomberUsable", 0);
    Wait(0.0625, c_timeGame);
    lv_range = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "GestaltZForerunnerSquadCalldownSearchArea", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny));
    lv_range += (0.25 * TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltAirStrikeTargetSearch", c_techCountCompleteOnly));
    if ((lv_range > 7.0)) {
        lv_range -= 0.5;
    }

    lv_area = RegionCircle(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), lv_range);
    while (true) {
        if ((UnitCountAlliance(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, c_unitAllianceEnemy, lv_area, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0) > 0) && (UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "GestaltZForerunnerSquadCalldown") == true)) {
            auto384AF6B1_g = libNEXS_gv_bomberFighterTempGroup;
            auto384AF6B1_u = UnitGroupCount(auto384AF6B1_g, c_unitCountAll);
            for (;; auto384AF6B1_u -= 1) {
                auto384AF6B1_var = UnitGroupUnitFromEnd(auto384AF6B1_g, auto384AF6B1_u);
                if (auto384AF6B1_var == null) { break; }
                if ((UnitGetType(auto384AF6B1_var) == "GestaltZeroBomberLand") && (UnitMagazineCount(auto384AF6B1_var, "ZeroBomberNormalRocketHanger") > 0)) {
                    UnitIssueOrder(auto384AF6B1_var, Order(AbilityCommand("ZeroBomberMorphToAir", 0)), c_orderQueueReplace);
                    libNEXS_gv_bomberUsable -= 1;
                    if ((libNEXS_gv_bomberUsable > 0)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "BomberUsable", 1);
                    }
                    else {
                        libNEXS_gv_bomberUsable = 0;
                        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "BomberUsable", 0);
                    }
                    Wait(0.5, c_timeGame);
                    lv_times += 1;
                    libNEXS_gf_GestaltBomberStrikeThread(auto384AF6B1_var, lv_area, 1);
                }

            }
            Wait(0.5, c_timeGame);
            lv_times += 1;
        }
        else {
            UnitBehaviorAddPlayer(EventPlayerEffectUsedUnit(c_effectUnitCaster), "GestaltZForerunnerSquadCalldownStop", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, 1);
            for (auto386396F5_i = 1; auto386396F5_i <= auto386396F5_n; auto386396F5_i += 1) {
                auto93FD1854_g = libNEXS_gv_bomberFighterTempGroup;
                auto93FD1854_u = UnitGroupCount(auto93FD1854_g, c_unitCountAll);
                for (;; auto93FD1854_u -= 1) {
                    auto93FD1854_var = UnitGroupUnitFromEnd(auto93FD1854_g, auto93FD1854_u);
                    if (auto93FD1854_var == null) { break; }
                    if ((UnitGetType(auto93FD1854_var) == "GestaltZeroBomber")) {
                        autoA8E2EF1B_ae = (libNEXS_gv_platformMaxCount - 1);
                        lv_defaultInt = 0;
                        for ( ; ( (autoA8E2EF1B_ai >= 0 && lv_defaultInt <= autoA8E2EF1B_ae) || (autoA8E2EF1B_ai < 0 && lv_defaultInt >= autoA8E2EF1B_ae) ) ; lv_defaultInt += autoA8E2EF1B_ai ) {
                            if ((UnitGroupHasUnit(libNEXS_gv_bomberPFUnitsGroup[lv_defaultInt], auto93FD1854_var) == true)) {
                                UnitIssueOrder(auto93FD1854_var, OrderTargetingPoint(AbilityCommand("GestaltTestLand", 0), UnitGetPosition(UnitGroupUnit(libNEXS_gv_bomberPFUnitsGroup[lv_defaultInt], 1))), c_orderQueueReplace);
                                break;
                            }

                        }
                    }

                }
                Wait(2.0, c_timeGame);
            }
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8BDB0E782B8E69CBAE7B2BEE58786E8BDB0E782B8_Init () {
    libNEXS_gt_E8BDB0E782B8E69CBAE7B2BEE58786E8BDB0E782B8 = TriggerCreate("libNEXS_gt_E8BDB0E782B8E69CBAE7B2BEE58786E8BDB0E782B8_Func");
    TriggerEnable(libNEXS_gt_E8BDB0E782B8E69CBAE7B2BEE58786E8BDB0E782B8, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E8BDB0E782B8E69CBAE7B2BEE58786E8BDB0E782B8, c_playerAny, "GestaltZForerunnerSquadCalldownCreatePersitent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8BDB0E782B8E69CBAE5B9BFE59F9FE8BDB0E782B8_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_range;
    region lv_area;
    int lv_defaultInt;

    // Automatic Variable Declarations
    unitgroup auto67799ECA_g;
    int auto67799ECA_u;
    unit auto67799ECA_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "BomberUsable", 0);
    lv_range = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "GestaltZInfiltrationSquadCalldownSearchArea", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny));
    lv_range += (0.25 * TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltAirStrikeTargetSearch", c_techCountCompleteOnly));
    if ((lv_range > 7.0)) {
        lv_range -= 0.5;
    }

    lv_area = RegionCircle(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), lv_range);
    libNEXS_gv_aOEStrikeCasterTemp = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    auto67799ECA_g = libNEXS_gv_bomberFighterTempGroup;
    auto67799ECA_u = UnitGroupCount(auto67799ECA_g, c_unitCountAll);
    for (;; auto67799ECA_u -= 1) {
        auto67799ECA_var = UnitGroupUnitFromEnd(auto67799ECA_g, auto67799ECA_u);
        if (auto67799ECA_var == null) { break; }
        if ((UnitGetType(auto67799ECA_var) == "GestaltZeroBomberLand") && (UnitMagazineCount(auto67799ECA_var, "ZeroBomberNormalRocketHanger") > 0)) {
            UnitIssueOrder(auto67799ECA_var, Order(AbilityCommand("ZeroBomberMorphToAir", 0)), c_orderQueueReplace);
            libNEXS_gv_bomberUsable -= 1;
            if ((libNEXS_gv_bomberUsable > 0)) {
                libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "BomberUsable", 1);
            }
            else {
                libNEXS_gv_bomberUsable = 0;
                libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "BomberUsable", 0);
            }
            Wait(0.125, c_timeGame);
            if ((EventPlayerEffectUsed() == "GestaltZInfiltrationSquadCalldownCreatePersitent")) {
                libNEXS_gf_GestaltBomberStrikeThread(auto67799ECA_var, lv_area, 2);
            }
            else {
                libNEXS_gf_GestaltBomberStrikeThread(auto67799ECA_var, lv_area, 3);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8BDB0E782B8E69CBAE5B9BFE59F9FE8BDB0E782B8_Init () {
    libNEXS_gt_E8BDB0E782B8E69CBAE5B9BFE59F9FE8BDB0E782B8 = TriggerCreate("libNEXS_gt_E8BDB0E782B8E69CBAE5B9BFE59F9FE8BDB0E782B8_Func");
    TriggerEnable(libNEXS_gt_E8BDB0E782B8E69CBAE5B9BFE59F9FE8BDB0E782B8, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E8BDB0E782B8E69CBAE5B9BFE59F9FE8BDB0E782B8, c_playerAny, "GestaltZInfiltrationSquadCalldownCreatePersitent");
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E8BDB0E782B8E69CBAE5B9BFE59F9FE8BDB0E782B8, c_playerAny, "GestaltZRaiderSquadCalldownCreatePersitent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8BDB0E782B8E69CBAE58FACE59B9EE4B88EE5B9BFE59F9FE58F96E6B688_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_defaultInt;

    // Automatic Variable Declarations
    unitgroup autoAE59B187_g;
    int autoAE59B187_u;
    unit autoAE59B187_var;
    const int autoB71A213E_n = 2;
    int autoB71A213E_i;
    unitgroup auto8F4F97C7_g;
    int auto8F4F97C7_u;
    unit auto8F4F97C7_var;
    int autoB0D5F945_ae;
    const int autoB0D5F945_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(libNEXS_gv_aOEStrikeCasterTemp, "GestaltZISorRSCalldownStop", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, 1);
    libNEXS_gv_aOEStrikeCasterTemp = null;
    if ((EventPlayerEffectUsed() == "GestaltTowerPlaneBack")) {
        autoAE59B187_g = UnitGroup("GestaltZForerunnerSquadLeader", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoAE59B187_u = UnitGroupCount(autoAE59B187_g, c_unitCountAll);
        for (;; autoAE59B187_u -= 1) {
            autoAE59B187_var = UnitGroupUnitFromEnd(autoAE59B187_g, autoAE59B187_u);
            if (autoAE59B187_var == null) { break; }
            UnitBehaviorAddPlayer(autoAE59B187_var, "GestaltZForerunnerSquadCalldownStop", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, 1);
        }
    }

    for (autoB71A213E_i = 1; autoB71A213E_i <= autoB71A213E_n; autoB71A213E_i += 1) {
        auto8F4F97C7_g = libNEXS_gv_bomberFighterTempGroup;
        auto8F4F97C7_u = UnitGroupCount(auto8F4F97C7_g, c_unitCountAll);
        for (;; auto8F4F97C7_u -= 1) {
            auto8F4F97C7_var = UnitGroupUnitFromEnd(auto8F4F97C7_g, auto8F4F97C7_u);
            if (auto8F4F97C7_var == null) { break; }
            if ((UnitGetType(auto8F4F97C7_var) == "GestaltZeroBomber")) {
                autoB0D5F945_ae = (libNEXS_gv_platformMaxCount - 1);
                lv_defaultInt = 0;
                for ( ; ( (autoB0D5F945_ai >= 0 && lv_defaultInt <= autoB0D5F945_ae) || (autoB0D5F945_ai < 0 && lv_defaultInt >= autoB0D5F945_ae) ) ; lv_defaultInt += autoB0D5F945_ai ) {
                    if ((UnitGroupHasUnit(libNEXS_gv_bomberPFUnitsGroup[lv_defaultInt], auto8F4F97C7_var) == true)) {
                        UnitIssueOrder(auto8F4F97C7_var, OrderTargetingPoint(AbilityCommand("GestaltTestLand", 0), UnitGetPosition(UnitGroupUnit(libNEXS_gv_bomberPFUnitsGroup[lv_defaultInt], 1))), c_orderQueueReplace);
                        break;
                    }

                }
            }

        }
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8BDB0E782B8E69CBAE58FACE59B9EE4B88EE5B9BFE59F9FE58F96E6B688_Init () {
    libNEXS_gt_E8BDB0E782B8E69CBAE58FACE59B9EE4B88EE5B9BFE59F9FE58F96E6B688 = TriggerCreate("libNEXS_gt_E8BDB0E782B8E69CBAE58FACE59B9EE4B88EE5B9BFE59F9FE58F96E6B688_Func");
    TriggerEnable(libNEXS_gt_E8BDB0E782B8E69CBAE58FACE59B9EE4B88EE5B9BFE59F9FE58F96E6B688, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E8BDB0E782B8E69CBAE58FACE59B9EE4B88EE5B9BFE59F9FE58F96E6B688, c_playerAny, "GestaltZISorRSCalldownCancelAB");
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E8BDB0E782B8E69CBAE58FACE59B9EE4B88EE5B9BFE59F9FE58F96E6B688, c_playerAny, "GestaltTowerPlaneBack");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8BDB0E782B8E69CBAE887AAE58AA8E998B2E5BEA1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_GestaltBomberDefence(EventPlayerEffectUsedUnit(c_effectUnitCaster), EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8BDB0E782B8E69CBAE887AAE58AA8E998B2E5BEA1_Init () {
    libNEXS_gt_E8BDB0E782B8E69CBAE887AAE58AA8E998B2E5BEA1 = TriggerCreate("libNEXS_gt_E8BDB0E782B8E69CBAE887AAE58AA8E998B2E5BEA1_Func");
    TriggerEnable(libNEXS_gt_E8BDB0E782B8E69CBAE887AAE58AA8E998B2E5BEA1, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E8BDB0E782B8E69CBAE887AAE58AA8E998B2E5BEA1, c_playerAny, "GestaltAirportDefenseDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????? 1
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE8BF90E8A18C1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_number3;
    int lv_number2;
    int lv_number1;
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_number1 = 2;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((libNEXS_gv_barracksOK == 1)) {
            Wait((1.0 - (0.01 * TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltlMasteryUpgradeSeries22", c_techCountCompleteOnly))), c_timeAI);
            if ((libNEXS_gv_gestaltDropPodAbilOK1 == 0)) {
                if (((lv_number1 != 0) || (lv_number2 != 0) || (lv_number3 != 0))) {
                    if ((lv_number3 >= 1)) {
                        lv_number3 -= 1;
                    }
                    else {
                        if ((lv_count < 120)) {
                            lv_number3 = 9;
                        }
                        else {
                            lv_number3 = 0;
                        }
                        if ((lv_number2 >= 1)) {
                            lv_number2 -= 1;
                        }
                        else {
                            if ((lv_count < 110)) {
                                lv_number2 = 5;
                            }
                            else {
                                lv_number2 = 0;
                            }
                            if ((lv_number1 >= 1)) {
                                lv_number1 -= 1;
                            }
                            else {
                                lv_number1 = 0;
                            }
                        }
                    }
                    lv_count += 1;
                }
                else {
                    if ((libNEXS_gv_gestaltDropPodAbilOK1 == 0)) {
                        PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "Abil/GestaltDropPod", -1.0);
                        libNEXS_gv_gestaltDropPodAbilOK1 = 1;
                    }

                }
                CatalogFieldValueSet(c_gameCatalogEffect, "GestaltDropPodCountONE1", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, IntToString(lv_number1));
                CatalogFieldValueSet(c_gameCatalogEffect, "GestaltDropPodCountONE2", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, IntToString(lv_number2));
                CatalogFieldValueSet(c_gameCatalogEffect, "GestaltDropPodCountONE3", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, IntToString(lv_number3));
            }
            else {
                lv_count = 0;
                lv_number3 = 0;
                lv_number2 = 0;
                lv_number1 = 2;
            }
        }
        else {
            Wait(1.0, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE8BF90E8A18C1_Init () {
    libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE8BF90E8A18C1 = TriggerCreate("libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE8BF90E8A18C1_Func");
    TriggerEnable(libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE8BF90E8A18C1, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????? 2
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE8BF90E8A18C2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_number3;
    int lv_number2;
    int lv_number1;
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_number1 = 2;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((libNEXS_gv_barracksOK == 1)) {
            Wait((1.0 - (0.01 * TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltlMasteryUpgradeSeries22", c_techCountCompleteOnly))), c_timeAI);
            if ((libNEXS_gv_gestaltDropPodAbilOK2 == 0)) {
                if (((lv_number1 != 0) || (lv_number2 != 0) || (lv_number3 != 0))) {
                    if ((lv_number3 >= 1)) {
                        lv_number3 -= 1;
                    }
                    else {
                        if ((lv_count < 120)) {
                            lv_number3 = 9;
                        }
                        else {
                            lv_number3 = 0;
                        }
                        if ((lv_number2 >= 1)) {
                            lv_number2 -= 1;
                        }
                        else {
                            if ((lv_count < 110)) {
                                lv_number2 = 5;
                            }
                            else {
                                lv_number2 = 0;
                            }
                            if ((lv_number1 >= 1)) {
                                lv_number1 -= 1;
                            }
                            else {
                                lv_number1 = 0;
                            }
                        }
                    }
                    lv_count += 1;
                }
                else {
                    if ((libNEXS_gv_gestaltDropPodAbilOK2 == 0)) {
                        PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "Abil/GestaltDropPod", -1.0);
                        libNEXS_gv_gestaltDropPodAbilOK2 = 1;
                    }

                }
                CatalogFieldValueSet(c_gameCatalogEffect, "GestaltDropPodCountTWO1", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, IntToString(lv_number1));
                CatalogFieldValueSet(c_gameCatalogEffect, "GestaltDropPodCountTWO2", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, IntToString(lv_number2));
                CatalogFieldValueSet(c_gameCatalogEffect, "GestaltDropPodCountTWO3", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, IntToString(lv_number3));
            }
            else {
                lv_count = 0;
                lv_number3 = 0;
                lv_number2 = 0;
                lv_number1 = 2;
            }
        }
        else {
            Wait(1.0, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE8BF90E8A18C2_Init () {
    libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE8BF90E8A18C2 = TriggerCreate("libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE8BF90E8A18C2_Func");
    TriggerEnable(libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE8BF90E8A18C2, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????? 3
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE8BF90E8A18C3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_number3;
    int lv_number2;
    int lv_number1;
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_number1 = 2;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((libNEXS_gv_barracksOK == 1)) {
            Wait((1.0 - (0.01 * TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltlMasteryUpgradeSeries22", c_techCountCompleteOnly))), c_timeAI);
            if ((libNEXS_gv_gestaltDropPodAbilOK3 == 0)) {
                if (((lv_number1 != 0) || (lv_number2 != 0) || (lv_number3 != 0))) {
                    if ((lv_number3 >= 1)) {
                        lv_number3 -= 1;
                    }
                    else {
                        if ((lv_count < 120)) {
                            lv_number3 = 9;
                        }
                        else {
                            lv_number3 = 0;
                        }
                        if ((lv_number2 >= 1)) {
                            lv_number2 -= 1;
                        }
                        else {
                            if ((lv_count < 110)) {
                                lv_number2 = 5;
                            }
                            else {
                                lv_number2 = 0;
                            }
                            if ((lv_number1 >= 1)) {
                                lv_number1 -= 1;
                            }
                            else {
                                lv_number1 = 0;
                            }
                        }
                    }
                    lv_count += 1;
                }
                else {
                    if ((libNEXS_gv_gestaltDropPodAbilOK3 == 0)) {
                        PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "Abil/GestaltDropPod", -1.0);
                        libNEXS_gv_gestaltDropPodAbilOK3 = 1;
                    }

                }
                CatalogFieldValueSet(c_gameCatalogEffect, "GestaltDropPodCountTHREE1", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, IntToString(lv_number1));
                CatalogFieldValueSet(c_gameCatalogEffect, "GestaltDropPodCountTHREE2", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, IntToString(lv_number2));
                CatalogFieldValueSet(c_gameCatalogEffect, "GestaltDropPodCountTHREE3", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, IntToString(lv_number3));
            }
            else {
                lv_count = 0;
                lv_number3 = 0;
                lv_number2 = 0;
                lv_number1 = 2;
            }
        }
        else {
            Wait(1.0, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE8BF90E8A18C3_Init () {
    libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE8BF90E8A18C3 = TriggerCreate("libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE8BF90E8A18C3_Func");
    TriggerEnable(libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE8BF90E8A18C3, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE4BDBFE794A8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "GestaltDropPod2") || (UnitGetType(EventUnit()) == "GestaltDropPod22") || (UnitGetType(EventUnit()) == "GestaltDropPod2222") || (UnitGetType(EventUnit()) == "GestaltDropPod222")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNEXS_gv_gestaltDropPodAbilOK1 == 1)) {
        libNEXS_gv_gestaltDropPodAbilOK1 = 0;
    }
    else if ((libNEXS_gv_gestaltDropPodAbilOK2 == 1)) {
        libNEXS_gv_gestaltDropPodAbilOK2 = 0;
    }
    else if ((libNEXS_gv_gestaltDropPodAbilOK3 == 1)) {
        libNEXS_gv_gestaltDropPodAbilOK3 = 0;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE4BDBFE794A8_Init () {
    libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE4BDBFE794A8 = TriggerCreate("libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE4BDBFE794A8_Func");
    TriggerEnable(libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE4BDBFE794A8, false);
    TriggerAddEventUnitRegion(libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE4BDBFE794A8, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E8BF9BE585A5E59CB0E59BBE_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "GestaltDropPod"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit", c_techCountCompleteOnly) == 1)) {
        UnitBehaviorAddPlayer(EventUnit(), "GestaltDropPodUnitSquadA", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, 1);
    }
    else if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit2", c_techCountCompleteOnly) == 1)) {
        UnitBehaviorAddPlayer(EventUnit(), "GestaltDropPodUnitSquadB", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, 1);
    }
    else if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit22", c_techCountCompleteOnly) == 1)) {
        UnitBehaviorAddPlayer(EventUnit(), "GestaltDropPodUnitSquadC", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, 1);
    }
    else if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit222", c_techCountCompleteOnly) == 1)) {
        UnitBehaviorAddPlayer(EventUnit(), "GestaltDropPodUnitMechineC", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, 1);
    }
    else if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit2222", c_techCountCompleteOnly) == 1)) {
        UnitBehaviorAddPlayer(EventUnit(), "GestaltDropPodUnitMechineB", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, 1);
    }
    else if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit22222", c_techCountCompleteOnly) == 1)) {
        UnitBehaviorAddPlayer(EventUnit(), "GestaltDropPodUnitMechineA", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, 1);
    }
    else if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit24", c_techCountCompleteOnly) == 1)) {
        UnitBehaviorAddPlayer(EventUnit(), "GestaltDropPodUnitSquadC2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E8BF9BE585A5E59CB0E59BBE_Init () {
    libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E8BF9BE585A5E59CB0E59BBE = TriggerCreate("libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E8BF9BE585A5E59CB0E59BBE_Func");
    TriggerEnable(libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E8BF9BE585A5E59CB0E59BBE, false);
    TriggerAddEventUnitRegion(libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E8BF9BE585A5E59CB0E59BBE, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E5BC80E5A78BE4B88BE89B8B_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "GestaltDropPod"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehavior() == "GestaltDropPodUnitSquadA")) {
        UnitCreate(1, "GestaltZInfiltrationSquadLeader", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, UnitGetPosition(EventUnit()), 225.0);
    }
    else if ((EventUnitBehavior() == "GestaltDropPodUnitSquadB")) {
        UnitCreate(1, "GestaltZForerunnerSquadLeader", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, UnitGetPosition(EventUnit()), 225.0);
    }
    else if ((EventUnitBehavior() == "GestaltDropPodUnitSquadC")) {
        UnitCreate(1, "GestaltZRaiderSquadLeader", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, UnitGetPosition(EventUnit()), 225.0);
    }
    else if ((EventUnitBehavior() == "GestaltDropPodUnitMechineA")) {
        UnitCreate(1, "GestaltZStormCraft", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, UnitGetPosition(EventUnit()), 225.0);
        UnitSetHeight(UnitLastCreated(), 0.5, 0.0);
        UnitSetHeight(UnitLastCreated(), 3.75, 1.0);
    }
    else if ((EventUnitBehavior() == "GestaltDropPodUnitMechineB")) {
        UnitCreate(1, "GestaltZSiegeTank", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, UnitGetPosition(EventUnit()), 225.0);
    }
    else if ((EventUnitBehavior() == "GestaltDropPodUnitMechineC")) {
        UnitCreate(1, "GestaltZDreadnought", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, UnitGetPosition(EventUnit()), 225.0);
        UnitBehaviorAddPlayer(UnitLastCreated(), "GestaltDreadnoughtBirth", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E5BC80E5A78BE4B88BE89B8B_Init () {
    libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E5BC80E5A78BE4B88BE89B8B = TriggerCreate("libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E5BC80E5A78BE4B88BE89B8B_Func");
    TriggerEnable(libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E5BC80E5A78BE4B88BE89B8B, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E5BC80E5A78BE4B88BE89B8B, null, null, c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E7B3BBE7BB9FE58D87E7BAA7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "GestaltDropPodUnit3")) {
        CatalogFieldValueSet(c_gameCatalogAbil, "GestaltDropPodCU", "InfoArray[" + IntToString(0) + "].Unit", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPod2");
        CatalogFieldValueSet(c_gameCatalogUnit, "GestaltDropPod2", "Food", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, IntToString(-10));
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit2222", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit24", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit22222", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit22", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit222", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit2", 0);
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "GestaltDropPodUnit23")) {
        CatalogFieldValueSet(c_gameCatalogAbil, "GestaltDropPodCU", "InfoArray[" + IntToString(0) + "].Unit", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPod2");
        CatalogFieldValueSet(c_gameCatalogUnit, "GestaltDropPod2", "Food", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, IntToString(-10));
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit2", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit2222", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit22222", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit22", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit24", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit222", 0);
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "GestaltDropPodUnit223")) {
        CatalogFieldValueSet(c_gameCatalogAbil, "GestaltDropPodCU", "InfoArray[" + IntToString(0) + "].Unit", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPod2");
        CatalogFieldValueSet(c_gameCatalogUnit, "GestaltDropPod2", "Food", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, IntToString(-15));
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit22", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit2222", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit22222", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit2", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit222", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit24", 0);
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "GestaltDropPodUnit2223")) {
        CatalogFieldValueSet(c_gameCatalogAbil, "GestaltDropPodCU", "InfoArray[" + IntToString(0) + "].Unit", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPod222");
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit222", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit2222", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit22222", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit2", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit22", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit24", 0);
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "GestaltDropPodUnit22223")) {
        CatalogFieldValueSet(c_gameCatalogAbil, "GestaltDropPodCU", "InfoArray[" + IntToString(0) + "].Unit", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPod2222");
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit2222", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit22222", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit2", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit22", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit222", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit24", 0);
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "GestaltDropPodUnit222222")) {
        CatalogFieldValueSet(c_gameCatalogAbil, "GestaltDropPodCU", "InfoArray[" + IntToString(0) + "].Unit", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPod22");
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit22222", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit2", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit2222", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit22", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit222", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit24", 0);
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "GestaltDropPodUnit242")) {
        CatalogFieldValueSet(c_gameCatalogAbil, "GestaltDropPodCU", "InfoArray[" + IntToString(0) + "].Unit", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPod2");
        CatalogFieldValueSet(c_gameCatalogUnit, "GestaltDropPod2", "Food", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, IntToString(0));
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit24", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit22222", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit2", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit2222", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit22", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltDropPodUnit222", 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E7B3BBE7BB9FE58D87E7BAA7_Init () {
    libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E7B3BBE7BB9FE58D87E7BAA7 = TriggerCreate("libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E7B3BBE7BB9FE58D87E7BAA7_Func");
    TriggerEnable(libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E7B3BBE7BB9FE58D87E7BAA7, false);
    TriggerAddEventUnitResearchProgress(libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E7B3BBE7BB9FE58D87E7BAA7, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE7B298E6BB9E_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_caster;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = UnitBehaviorEffectPlayer(EventUnit(), EventUnitBehavior(), c_effectPlayerCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_gestaltEagleTarget[lv_caster] = EventUnit();
    libNEXS_gv_gestaltEagleTargetingGroup[lv_caster] = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
    libNEXS_gv_gestaltEagleTargetingPoint[lv_caster] = UnitGetPosition(libNEXS_gv_gestaltEagleTarget[lv_caster]);
    UISetTargetingOrder(PlayerGroupSingle(UnitGetOwner(libNEXS_gv_gestaltEagleTarget[lv_caster])), libNEXS_gv_gestaltEagleTargetingGroup[lv_caster], OrderTargetingPoint(AbilityCommand("GestaltEagleTarget", 0), UnitGetPosition(libNEXS_gv_gestaltEagleTarget[lv_caster])), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE7B298E6BB9E_Init () {
    libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE7B298E6BB9E = TriggerCreate("libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE7B298E6BB9E_Func");
    TriggerEnable(libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE7B298E6BB9E, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE7B298E6BB9E, null, "GestaltEagleTargetingAB", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE7B298E6BB9E, null, "GestaltEagleTargetingAB", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE5889DE5A78BE782B9_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_gestaltEagleTargetingDummyPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "GestaltEagleTargeter", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, libNEXS_gv_gestaltEagleTargetingDummyPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE5889DE5A78BE782B9_Init () {
    libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE5889DE5A78BE782B9 = TriggerCreate("libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE5889DE5A78BE782B9_Func");
    TriggerEnable(libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE5889DE5A78BE782B9, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE5889DE5A78BE782B9, c_playerAny, "GestaltEagleTargetingDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE79BAEE6A087E782B9_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_a;
    point lv_gestaltEagleTargetPoint;
    point lv_pOINT;
    fixed lv_x1;
    fixed lv_x2;
    fixed lv_y1;
    fixed lv_y2;
    fixed lv_k;
    fixed lv_b;
    fixed lv_mAPX;
    fixed lv_mAPY;
    fixed lv_cutX;
    fixed lv_cutY;
    fixed lv_bK;
    fixed lv_mAPYBK;
    fixed lv_kMAPXB;
    fixed lv_pOINTX;
    fixed lv_pOINTY;
    fixed lv_facingangle;
    fixed lv_interpolationperiod;
    fixed lv_interpolationdistance;
    point lv_nextinterpolatedpoint;
    int lv_aD;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_a = 0.5;
    lv_gestaltEagleTargetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_mAPX = libNtve_gf_WidthOfRegion(RegionEntireMap());
    lv_mAPY = libNtve_gf_HeightOfRegion(RegionEntireMap());
    lv_cutX = ((libNtve_gf_WidthOfRegion(RegionEntireMap()) - libNtve_gf_WidthOfRegion(RegionPlayableMap())) / 2.0);
    lv_cutY = ((libNtve_gf_HeightOfRegion(RegionEntireMap()) - libNtve_gf_HeightOfRegion(RegionPlayableMap())) / 2.0);
    lv_interpolationperiod = 0.125;
    lv_interpolationdistance = 3.0;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerCreateEffectPoint(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "GestaltEagleTargetingSearch", libNEXS_gv_gestaltEagleTargetingDummyPoint);
    lv_x1 = PointGetX(libNEXS_gv_gestaltEagleTargetingDummyPoint);
    lv_y1 = PointGetY(libNEXS_gv_gestaltEagleTargetingDummyPoint);
    lv_x2 = PointGetX(lv_gestaltEagleTargetPoint);
    lv_y2 = PointGetY(lv_gestaltEagleTargetPoint);
    if ((lv_x1 == lv_x2)) {
        if ((lv_y1 >= lv_y2)) {
            lv_pOINT = Point(lv_x1, (lv_mAPY - lv_cutY));
            lv_gestaltEagleTargetPoint = Point(lv_x2, lv_cutY);
        }
        else if ((lv_y1 < lv_y2)) {
            lv_pOINT = Point(lv_x1, lv_cutY);
            lv_gestaltEagleTargetPoint = Point(lv_x2, (lv_mAPY - lv_cutY));
        }
    }
    else {
        lv_k = ((lv_y2 - lv_y1) / (lv_x2 - lv_x1));
        lv_b = (lv_y1 - (lv_k * lv_x1));
        lv_bK = (-1.0 * (lv_b / lv_k));
        lv_mAPYBK = ((lv_mAPY - lv_b) / lv_k);
        lv_kMAPXB = ((lv_k * lv_mAPX) + lv_b);
        if ((lv_x1 < lv_x2)) {
            if ((lv_y1 <= lv_y2)) {
                if ((((lv_k * lv_cutX) + lv_b) >= lv_cutY) && (((lv_k * (lv_mAPX - lv_cutX)) + lv_b) <= (lv_mAPY - lv_cutY))) {
                    lv_pOINT = Point(lv_cutX, ((lv_k * lv_cutX) + lv_b));
                    lv_gestaltEagleTargetPoint = Point((lv_mAPX - lv_cutX), ((lv_k * (lv_mAPX - lv_cutX)) + lv_b));
                }
                else if ((((lv_k * lv_cutX) + lv_b) >= lv_cutY) && (((lv_k * (lv_mAPX - lv_cutX)) + lv_b) > (lv_mAPY - lv_cutY))) {
                    lv_pOINT = Point(lv_cutX, ((lv_k * lv_cutX) + lv_b));
                    lv_gestaltEagleTargetPoint = Point((((lv_mAPY - lv_cutY) - lv_b) / lv_k), (lv_mAPY - lv_cutY));
                }
                else if ((((lv_k * lv_cutX) + lv_b) < lv_cutY) && (((lv_k * (lv_mAPX - lv_cutX)) + lv_b) <= (lv_mAPY - lv_cutY))) {
                    lv_pOINT = Point(((lv_cutY - lv_b) / lv_k), lv_cutY);
                    lv_gestaltEagleTargetPoint = Point((lv_mAPX - lv_cutX), ((lv_k * (lv_mAPX - lv_cutX)) + lv_b));
                }
                else if ((((lv_k * lv_cutX) + lv_b) < lv_cutY) && (((lv_k * (lv_mAPX - lv_cutX)) + lv_b) > (lv_mAPY - lv_cutY))) {
                    lv_pOINT = Point(((lv_cutY - lv_b) / lv_k), lv_cutY);
                    lv_gestaltEagleTargetPoint = Point((((lv_mAPY - lv_cutY) - lv_b) / lv_k), (lv_mAPY - lv_cutY));
                }
            }
            else if ((lv_y1 > lv_y2)) {
                if ((((lv_k * lv_cutX) + lv_b) <= (lv_mAPY - lv_cutY)) && (((lv_k * (lv_mAPX - lv_cutX)) + lv_b) >= lv_cutY)) {
                    lv_pOINT = Point(lv_cutX, ((lv_k * lv_cutX) + lv_b));
                    lv_gestaltEagleTargetPoint = Point((lv_mAPX - lv_cutX), ((lv_k * (lv_mAPX - lv_cutX)) + lv_b));
                }
                else if ((((lv_k * lv_cutX) + lv_b) <= (lv_mAPY - lv_cutY)) && (((lv_k * (lv_mAPX - lv_cutX)) + lv_b) < lv_cutY)) {
                    lv_pOINT = Point(lv_cutX, ((lv_k * lv_cutX) + lv_b));
                    lv_gestaltEagleTargetPoint = Point(((lv_cutY - lv_b) / lv_k), lv_cutY);
                }
                else if ((((lv_k * lv_cutX) + lv_b) > (lv_mAPY - lv_cutY)) && (((lv_k * (lv_mAPX - lv_cutX)) + lv_b) >= lv_cutY)) {
                    lv_pOINT = Point((((lv_mAPY - lv_cutY) - lv_b) / lv_k), (lv_mAPY - lv_cutY));
                    lv_gestaltEagleTargetPoint = Point((lv_mAPX - lv_cutX), ((lv_k * (lv_mAPX - lv_cutX)) + lv_b));
                }
                else if ((((lv_k * lv_cutX) + lv_b) > (lv_mAPY - lv_cutY)) && (((lv_k * (lv_mAPX - lv_cutX)) + lv_b) < lv_cutY)) {
                    lv_pOINT = Point((((lv_mAPY - lv_cutY) - lv_b) / lv_k), (lv_mAPY - lv_cutY));
                    lv_gestaltEagleTargetPoint = Point(((lv_cutY - lv_b) / lv_k), lv_cutY);
                }
            }
        }
        else if ((lv_x1 > lv_x2)) {
            if ((lv_y1 <= lv_y2)) {
                if ((((lv_k * lv_cutX) + lv_b) <= (lv_mAPY - lv_cutY)) && (((lv_k * (lv_mAPX - lv_cutX)) + lv_b) >= lv_cutY)) {
                    lv_gestaltEagleTargetPoint = Point(lv_cutX, ((lv_k * lv_cutX) + lv_b));
                    lv_pOINT = Point((lv_mAPX - lv_cutX), ((lv_k * (lv_mAPX - lv_cutX)) + lv_b));
                }
                else if ((((lv_k * lv_cutX) + lv_b) <= (lv_mAPY - lv_cutY)) && (((lv_k * (lv_mAPX - lv_cutX)) + lv_b) < lv_cutY)) {
                    lv_gestaltEagleTargetPoint = Point(lv_cutX, ((lv_k * lv_cutX) + lv_b));
                    lv_pOINT = Point(((lv_cutY - lv_b) / lv_k), lv_cutY);
                }
                else if ((((lv_k * lv_cutX) + lv_b) > (lv_mAPY - lv_cutY)) && (((lv_k * (lv_mAPX - lv_cutX)) + lv_b) >= lv_cutY)) {
                    lv_gestaltEagleTargetPoint = Point((((lv_mAPY - lv_cutY) - lv_b) / lv_k), (lv_mAPY - lv_cutY));
                    lv_pOINT = Point((lv_mAPX - lv_cutX), ((lv_k * (lv_mAPX - lv_cutX)) + lv_b));
                }
                else if ((((lv_k * lv_cutX) + lv_b) > (lv_mAPY - lv_cutY)) && (((lv_k * (lv_mAPX - lv_cutX)) + lv_b) < lv_cutY)) {
                    lv_gestaltEagleTargetPoint = Point((((lv_mAPY - lv_cutY) - lv_b) / lv_k), (lv_mAPY - lv_cutY));
                    lv_pOINT = Point(((lv_cutY - lv_b) / lv_k), lv_cutY);
                }
            }
            else if ((lv_y1 > lv_y2)) {
                if ((((lv_k * lv_cutX) + lv_b) >= lv_cutY) && (((lv_k * (lv_mAPX - lv_cutX)) + lv_b) <= (lv_mAPY - lv_cutY))) {
                    lv_gestaltEagleTargetPoint = Point(lv_cutX, ((lv_k * lv_cutX) + lv_b));
                    lv_pOINT = Point((lv_mAPX - lv_cutX), ((lv_k * (lv_mAPX - lv_cutX)) + lv_b));
                }
                else if ((((lv_k * lv_cutX) + lv_b) >= lv_cutY) && (((lv_k * (lv_mAPX - lv_cutX)) + lv_b) > (lv_mAPY - lv_cutY))) {
                    lv_gestaltEagleTargetPoint = Point(lv_cutX, ((lv_k * lv_cutX) + lv_b));
                    lv_pOINT = Point((((lv_mAPY - lv_cutY) - lv_b) / lv_k), (lv_mAPY - lv_cutY));
                }
                else if ((((lv_k * lv_cutX) + lv_b) < lv_cutY) && (((lv_k * (lv_mAPX - lv_cutX)) + lv_b) <= (lv_mAPY - lv_cutY))) {
                    lv_gestaltEagleTargetPoint = Point(((lv_cutY - lv_b) / lv_k), lv_cutY);
                    lv_pOINT = Point((lv_mAPX - lv_cutX), ((lv_k * (lv_mAPX - lv_cutX)) + lv_b));
                }
                else if ((((lv_k * lv_cutX) + lv_b) < lv_cutY) && (((lv_k * (lv_mAPX - lv_cutX)) + lv_b) > (lv_mAPY - lv_cutY))) {
                    lv_gestaltEagleTargetPoint = Point(((lv_cutY - lv_b) / lv_k), lv_cutY);
                    lv_pOINT = Point((((lv_mAPY - lv_cutY) - lv_b) / lv_k), (lv_mAPY - lv_cutY));
                }
            }
        }
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HHBomber22", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, lv_pOINT);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_gestaltEagleTargetPoint), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE79BAEE6A087E782B9_Init () {
    libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE79BAEE6A087E782B9 = TriggerCreate("libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE79BAEE6A087E782B9_Func");
    TriggerEnable(libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE79BAEE6A087E782B9, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE79BAEE6A087E782B9, c_playerAny, "GestaltEagleTarget");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE7A6BBE5BC80E99990E588B6E58CBAE59F9F_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5EEDE51D_g;
    int auto5EEDE51D_u;
    unit auto5EEDE51D_var;

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "HHBomber22") || (UnitGetType(EventUnit()) == "GestaltZeroBomber2")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "HHBomber22")) {
        UnitBehaviorRemove(EventUnit(), "GestaltEagleMarkRealSearch", 1);
        auto5EEDE51D_g = UnitGroup("HHBomber2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, RegionCircle(UnitGetPosition(EventUnit()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto5EEDE51D_u = UnitGroupCount(auto5EEDE51D_g, c_unitCountAll);
        for (;; auto5EEDE51D_u -= 1) {
            auto5EEDE51D_var = UnitGroupUnitFromEnd(auto5EEDE51D_g, auto5EEDE51D_u);
            if (auto5EEDE51D_var == null) { break; }
            UnitBehaviorAdd(auto5EEDE51D_var, "HyperionVoidCoopTimedLifeExpire4", auto5EEDE51D_var, 1);
        }
    }
    else {
        UnitBehaviorAdd(EventUnit(), "HyperionVoidCoopTimedLifeExpire4", EventUnit(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE7A6BBE5BC80E99990E588B6E58CBAE59F9F_Init () {
    libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE7A6BBE5BC80E99990E588B6E58CBAE59F9F = TriggerCreate("libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE7A6BBE5BC80E99990E588B6E58CBAE59F9F_Func");
    TriggerEnable(libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE7A6BBE5BC80E99990E588B6E58CBAE59F9F, false);
    TriggerAddEventUnitRegion(libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE7A6BBE5BC80E99990E588B6E58CBAE59F9F, null, RegionRect((((libNtve_gf_WidthOfRegion(RegionEntireMap()) - libNtve_gf_WidthOfRegion(RegionPlayableMap())) / 2.0) + 10.0), (((libNtve_gf_HeightOfRegion(RegionEntireMap()) - libNtve_gf_HeightOfRegion(RegionPlayableMap())) / 2.0) + 10.0), (((libNtve_gf_WidthOfRegion(RegionEntireMap()) + libNtve_gf_WidthOfRegion(RegionPlayableMap())) / 2.0) - 10.0), (((libNtve_gf_HeightOfRegion(RegionEntireMap()) + libNtve_gf_HeightOfRegion(RegionPlayableMap())) / 2.0) - 10.0)), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE5889DE5A78BE586B7E58DB4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto63E11A91_g;
    int auto63E11A91_u;
    unit auto63E11A91_var;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUpgrade() == "GestaltTowerPlatformGet"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto63E11A91_g = UnitGroup("SoACasterFenix", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto63E11A91_u = UnitGroupCount(auto63E11A91_g, c_unitCountAll);
    for (;; auto63E11A91_u -= 1) {
        auto63E11A91_var = UnitGroupUnitFromEnd(auto63E11A91_g, auto63E11A91_u);
        if (auto63E11A91_var == null) { break; }
        UnitBehaviorAddPlayer(auto63E11A91_var, "GestaltNukeAbilityCooldownTemp", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE5889DE5A78BE586B7E58DB4_Init () {
    libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE5889DE5A78BE586B7E58DB4 = TriggerCreate("libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE5889DE5A78BE586B7E58DB4_Func");
    TriggerEnable(libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE5889DE5A78BE586B7E58DB4, false);
    TriggerAddEventUnitResearchProgress(libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE5889DE5A78BE586B7E58DB4, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE587BAE7949F_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_nukeBomberPoint = PointWithOffsetPolar(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 1.35, UnitGetFacing(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    UnitSetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget), libNEXS_gv_nukeBomberPoint, false);
    UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitTarget), OrderTargetingPoint(AbilityCommand("GestaltZeroNukeBomberMorphToLand", 0), libNEXS_gv_nukeBomberPoint), c_orderQueueReplace);
    libNEXS_gv_nukeBomber = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE587BAE7949F_Init () {
    libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE587BAE7949F = TriggerCreate("libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE587BAE7949F_Func");
    TriggerEnable(libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE587BAE7949F, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE587BAE7949F, c_playerAny, "GestaltNukeBomberBirth");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE5889BE5BBBA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUpgrade() == "GestaltTowerPlatformGet"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "GestaltZeroNukeBomber", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, UnitGetPosition(EventUnit()));
    UnitCreateEffectUnit(EventUnit(), "GestaltNukeBomberBirth", UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE5889BE5BBBA_Init () {
    libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE5889BE5BBBA = TriggerCreate("libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE5889BE5BBBA_Func");
    TriggerEnable(libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE5889BE5BBBA, false);
    TriggerAddEventUnitResearchProgress(libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE5889BE5BBBA, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE68C87E4BBA4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(libNEXS_gv_nukeBomber, Order(AbilityCommand("ZeroNukeBomberMorphToAir", 0)), c_orderQueueReplace);
    UnitBehaviorAddPlayer(libNEXS_gv_gestaltTower, "GestaltTowerAngry", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MonlythArtifactForceField22", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    libNEXS_gv_nukeBomberCursor = UnitLastCreated();
    Wait(2.25, c_timeGame);
    UnitIssueOrder(libNEXS_gv_nukeBomber, OrderTargetingPoint(AbilityCommand("GestaltNuke", 0), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE68C87E4BBA4_Init () {
    libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE68C87E4BBA4 = TriggerCreate("libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE68C87E4BBA4_Func");
    TriggerEnable(libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE68C87E4BBA4, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE68C87E4BBA4, c_playerAny, "GestaltNukeCall");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE8BF94E59B9E_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_defaultInt;
    int lv_diyInit;
    unit lv_airPlane;
    point lv_airStrikePoint;
    fixed lv_airStrikeAngle;
    int lv_porNNumber;
    int lv_times;
    int lv_negativeRandom;
    fixed lv_unitSpeed;
    fixed lv_temp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_diyInit = 2;
    lv_airPlane = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_airStrikePoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_airStrikeAngle = UnitGetFacing(lv_airPlane);
    lv_porNNumber = 1;
    lv_temp = 0.5;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(libNEXS_gv_nukeBomberCursor);
    libNEXS_gv_nukeBomberCursor = null;
    UnitBehaviorRemove(libNEXS_gv_gestaltTower, "GestaltTowerAngry", 1);
    lv_unitSpeed = UnitGetPropertyFixed(lv_airPlane, c_unitPropMovementSpeed, c_unitPropCurrent);
    lv_negativeRandom = RandomInt(0, 1);
    if ((lv_negativeRandom == 1)) {
        lv_porNNumber = -1;
    }

    while ((lv_times <= 4)) {
        if ((lv_times == 0)) {
            UnitIssueOrder(lv_airPlane, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_airPlane), (lv_diyInit * (lv_temp * lv_unitSpeed)), lv_airStrikeAngle)), c_orderQueueReplace);
            lv_airStrikeAngle += (lv_porNNumber * 101.25);
        }
        else {
            UnitIssueOrder(lv_airPlane, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_airPlane), ((0.76 * lv_diyInit) * (lv_temp * lv_unitSpeed)), lv_airStrikeAngle)), c_orderQueueReplace);
            lv_airStrikeAngle += (lv_porNNumber * 22.5);
        }
        Wait(lv_temp, c_timeGame);
        lv_times += 1;
    }
    UnitIssueOrder(lv_airPlane, OrderTargetingPoint(AbilityCommand("GestaltZeroNukeBomberMorphToLand", 0), libNEXS_gv_nukeBomberPoint), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE8BF94E59B9E_Init () {
    libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE8BF94E59B9E = TriggerCreate("libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE8BF94E59B9E_Func");
    TriggerEnable(libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE8BF94E59B9E, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE8BF94E59B9E, c_playerAny, "GestaltNukeLM");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E585B5E890A5E5BBBAE980A0E5AE8CE68890_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "GestaltBarracks"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_barracksOK = 1;
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, "BarracksOn", 1);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E585B5E890A5E5BBBAE980A0E5AE8CE68890_Init () {
    libNEXS_gt_E585B5E890A5E5BBBAE980A0E5AE8CE68890 = TriggerCreate("libNEXS_gt_E585B5E890A5E5BBBAE980A0E5AE8CE68890_Func");
    TriggerEnable(libNEXS_gt_E585B5E890A5E5BBBAE980A0E5AE8CE68890, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E585B5E890A5E5BBBAE980A0E5AE8CE68890, null, "NXBarrier", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E69CBAE6A2B0E58D95E4BD8DE8B584E6BA90E8BF94E8BF98_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitDamageDeathCheck(c_deathTypeMorph) != true) && (EventUnitDamageDeathCheck(c_deathTypeCancel) != true) && (EventUnitDamageDeathCheck(c_deathTypeRemove) != true) && (UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13) && ((UnitGetType(EventUnit()) == "GestaltZDreadnought") || (UnitGetType(EventUnit()) == "GestaltZStormCraft") || (UnitGetType(EventUnit()) == "GestaltZSiegeTankSieged") || (UnitGetType(EventUnit()) == "GestaltZSiegeTank"))) {
        if ((UnitGetType(EventUnit()) == "GestaltZDreadnought")) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, c_playerPropCustom, c_playerPropOperAdd, 19);
        }
        else if ((UnitGetType(EventUnit()) == "GestaltZStormCraft")) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, c_playerPropCustom, c_playerPropOperAdd, 7);
        }
        else if (((UnitGetType(EventUnit()) == "GestaltZSiegeTank") || (UnitGetType(EventUnit()) == "GestaltZSiegeTankSieged"))) {
            PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID13, c_playerPropCustom, c_playerPropOperAdd, 12);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E69CBAE6A2B0E58D95E4BD8DE8B584E6BA90E8BF94E8BF98_Init () {
    libNEXS_gt_E69CBAE6A2B0E58D95E4BD8DE8B584E6BA90E8BF94E8BF98 = TriggerCreate("libNEXS_gt_E69CBAE6A2B0E58D95E4BD8DE8B584E6BA90E8BF94E8BF98_Func");
    TriggerEnable(libNEXS_gt_E69CBAE6A2B0E58D95E4BD8DE8B584E6BA90E8BF94E8BF98, false);
    TriggerAddEventUnitDied(libNEXS_gt_E69CBAE6A2B0E58D95E4BD8DE8B584E6BA90E8BF94E8BF98, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_ Valerian
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_DUT_Valerian_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup autoCE2AA9ED_g;
    int autoCE2AA9ED_var;
    unitgroup auto18F7D31E_g;
    int auto18F7D31E_u;
    unit auto18F7D31E_var;

    // Variable Initialization
    lv_players = libCOMI_gf_PlayersOfCommander("NexusValerian");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_LOGString("VALERIAN");
    TriggerEnable(libNEXS_gt_E5AE99E696AFE983A8E7BDB2E58786E5A487E5B0B1E7BBAA, true);
    TriggerEnable(libNEXS_gt_E5AE99E696AFE4BFAEE5A48DE5AE8CE6AF95, true);
    TriggerEnable(libNEXS_gt_E5AE99E696AFE8A2ABE691A7E6AF81, true);
    TriggerEnable(libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E69CACE4BD93E68A98E8B783E4B88EE586B7E58DB4, true);
    TriggerEnable(libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E7A6BBE5BC80E697B6E7A681E794A8E68A98E8B783E68A80E883BD, true);
    TriggerEnable(libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E99DA2E69DBFE5889DE5A78BE68A98E8B783, true);
    TriggerEnable(libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E99DA2E69DBFE4BBA3E69BBFE69CACE4BD93E68A98E8B783, true);
    TriggerEnable(libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E58DABE6989FE689ABE68F8FE68C81E7BBADE697B6E997B4, true);
    TriggerEnable(libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E58DABE6989FE689ABE68F8FE4BCA4E5AEB3, true);
    TriggerEnable(libNEXS_gt_E8A18CE6989FE998B2E5BEA1E9A39EE5BCB9E7B298E6BB9E, true);
    TriggerEnable(libNEXS_gt_E5858BE68B89E882AFE58E9FE59E8BE69CBAE689A7E8A18CE5AFB9E782B9E8BDB0E782B8, true);
    TriggerEnable(libNEXS_gt_E5858BE68B89E882AFE58E9FE59E8BE69CBAE5AFB9E782B9E8BDB0E782B8E5819CE6ADA2, true);
    TriggerEnable(libNEXS_gt_ValerianGlobalTextForUnit, true);
    TriggerEnable(libNEXS_gt_ValerianGlobalTextForDeath, true);
    TriggerEnable(libNEXS_gt_ValerianGlobalTextForCooldown, true);
    TriggerEnable(libNEXS_gt_ValerianGlobalTextForBuilding, true);
    TriggerEnable(libNEXS_gt_ValerianGlobalTextForAbility, true);
    libNEXS_gf_ValerianGlobalTextPanelCreate();
    autoCE2AA9ED_g = lv_players;
    autoCE2AA9ED_var = -1;
    while (true) {
        autoCE2AA9ED_var = PlayerGroupNextPlayer(autoCE2AA9ED_g, autoCE2AA9ED_var);
        if (autoCE2AA9ED_var < 0) { break; }
        libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5 = autoCE2AA9ED_var;
        if ((TechTreeUnitIsAllowed(autoCE2AA9ED_var, "ValerianScienceFacility") == true)) {
            libCOMI_gf_CreateACStructure(autoCE2AA9ED_var, "ValerianScienceFacility");
        }

        if ((TechTreeUnitIsAllowed(autoCE2AA9ED_var, "CasterValerian") == true)) {
            libCOMI_gf_CreateACCaster(autoCE2AA9ED_var, "CasterValerian");
            libCOMI_gf_CU_GPInitCommonCaster(autoCE2AA9ED_var, "CasterValerian", "Coop_GlobalCastingTemplates/TerranCasterPanelTemplate", "Coop_GlobalCastingTemplates/TerranGlobalCommandPanelTemplate", 4, "Cutscenes\\CommanderGlobalPower_Valerian.SC2Cutscene", "FourButtons");
        }

    }
    auto18F7D31E_g = UnitGroup("CasterValerian", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto18F7D31E_u = UnitGroupCount(auto18F7D31E_g, c_unitCountAll);
    for (;; auto18F7D31E_u -= 1) {
        auto18F7D31E_var = UnitGroupUnitFromEnd(auto18F7D31E_g, auto18F7D31E_u);
        if (auto18F7D31E_var == null) { break; }
        UnitGroupAdd(libNEXS_gv_valerianCaster, auto18F7D31E_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_DUT_Valerian_Init () {
    libNEXS_gt_DUT_Valerian = TriggerCreate("libNEXS_gt_DUT_Valerian_Func");
    TriggerAddEventGeneric(libNEXS_gt_DUT_Valerian, libCOMI_gv_mISSIONINITIALIZED);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Valerian Global Text For Unit
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_ValerianGlobalTextForUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitProgressUnit()) == "ValerianSCV")) {
        libNEXS_gf_ValerianGlobalTextChange(1);
    }
    else if ((UnitGetType(EventUnitProgressUnit()) == "ValerianHound")) {
        libNEXS_gf_ValerianGlobalTextChange(2);
    }
    else if ((UnitGetType(EventUnitProgressUnit()) == "ValerianMineMotor")) {
        libNEXS_gf_ValerianGlobalTextChange(3);
    }
    else if ((UnitGetType(EventUnitProgressUnit()) == "ValerianAuroraMotor")) {
        libNEXS_gf_ValerianGlobalTextChange(4);
    }
    else if ((UnitGetType(EventUnitProgressUnit()) == "ValerianCrackenMotor")) {
        libNEXS_gf_ValerianGlobalTextChange(5);
    }
    else if ((UnitGetType(EventUnitProgressUnit()) == "ValerianThorMotor")) {
        libNEXS_gf_ValerianGlobalTextChange(6);
    }
    else if ((UnitGetType(EventUnitProgressUnit()) == "ValerianLiberatorMotor")) {
        libNEXS_gf_ValerianGlobalTextChange(7);
    }
    else if ((UnitGetType(EventUnitProgressUnit()) == "ValerianRaven")) {
        libNEXS_gf_ValerianGlobalTextChange(8);
    }
    else if ((UnitGetType(EventUnitProgressUnit()) == "ValerianBattlecruiserMotor")) {
        libNEXS_gf_ValerianGlobalTextChange(9);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_ValerianGlobalTextForUnit_Init () {
    libNEXS_gt_ValerianGlobalTextForUnit = TriggerCreate("libNEXS_gt_ValerianGlobalTextForUnit_Func");
    TriggerEnable(libNEXS_gt_ValerianGlobalTextForUnit, false);
    TriggerAddEventUnitTrainProgress(libNEXS_gt_ValerianGlobalTextForUnit, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Valerian Global Text For Building
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_ValerianGlobalTextForBuilding_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitProgressUnit()) == "ValerianPlanetaryFortress")) {
        libNEXS_gf_ValerianGlobalTextChange(10);
    }
    else if ((UnitGetType(EventUnitProgressUnit()) == "ValerianAutomatedRefinery")) {
        libNEXS_gf_ValerianGlobalTextChange(11);
    }
    else if ((UnitGetType(EventUnitProgressUnit()) == "ValerianSupplyDepot")) {
        libNEXS_gf_ValerianGlobalTextChange(12);
    }
    else if ((UnitGetType(EventUnitProgressUnit()) == "ValerianFactory")) {
        libNEXS_gf_ValerianGlobalTextChange(13);
    }
    else if ((UnitGetType(EventUnitProgressUnit()) == "ValerianStarport")) {
        libNEXS_gf_ValerianGlobalTextChange(14);
    }
    else if ((UnitGetType(EventUnitProgressUnit()) == "ValerianArmory")) {
        libNEXS_gf_ValerianGlobalTextChange(15);
    }
    else if ((UnitGetType(EventUnitProgressUnit()) == "ValerianFusionCore")) {
        libNEXS_gf_ValerianGlobalTextChange(16);
    }
    else if ((UnitGetType(EventUnitProgressUnit()) == "ValerianScienceFacility")) {
        libNEXS_gf_ValerianGlobalTextChange(17);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_ValerianGlobalTextForBuilding_Init () {
    libNEXS_gt_ValerianGlobalTextForBuilding = TriggerCreate("libNEXS_gt_ValerianGlobalTextForBuilding_Func");
    TriggerEnable(libNEXS_gt_ValerianGlobalTextForBuilding, false);
    TriggerAddEventUnitConstructProgress(libNEXS_gt_ValerianGlobalTextForBuilding, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Valerian Global Text For Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_ValerianGlobalTextForAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "ValerianTopbarMissileSwitch")) {
        libNEXS_gf_ValerianGlobalTextChange(18);
    }
    else if ((EventPlayerEffectUsed() == "ValerianSatelliteCreateUint")) {
        libNEXS_gf_ValerianGlobalTextChange(19);
    }
    else if ((EventPlayerEffectUsed() == "ValerianTopbarArquillaCreateUint")) {
        libNEXS_gf_ValerianGlobalTextChange(20);
    }
    else if ((EventPlayerEffectUsed() == "ValerianZeusCreat")) {
        libNEXS_gf_ValerianGlobalTextChange(22);
    }
    else if ((EventPlayerEffectUsed() == "ValerianTopbarHoorayChargeCreatePersitent")) {
        libNEXS_gf_ValerianGlobalTextChange(23);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_ValerianGlobalTextForAbility_Init () {
    libNEXS_gt_ValerianGlobalTextForAbility = TriggerCreate("libNEXS_gt_ValerianGlobalTextForAbility_Func");
    TriggerEnable(libNEXS_gt_ValerianGlobalTextForAbility, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_ValerianGlobalTextForAbility, c_playerAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Valerian Global Text For Cooldown
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_ValerianGlobalTextForCooldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_random;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_random = RandomInt(24, 32);
    libNEXS_gf_ValerianGlobalTextChange(lv_random);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_ValerianGlobalTextForCooldown_Init () {
    libNEXS_gt_ValerianGlobalTextForCooldown = TriggerCreate("libNEXS_gt_ValerianGlobalTextForCooldown_Func");
    TriggerEnable(libNEXS_gt_ValerianGlobalTextForCooldown, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_ValerianGlobalTextForCooldown, null, "ValerianGlobalTextCooldown", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Valerian Global Text For Death
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_ValerianGlobalTextForDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeMorph) != true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeCancel) != true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) != true))) {
            return false;
        }

        if (!((EventUnit() != libNtve_gf_KillingUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_ValerianGlobalTextChange(33);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_ValerianGlobalTextForDeath_Init () {
    libNEXS_gt_ValerianGlobalTextForDeath = TriggerCreate("libNEXS_gt_ValerianGlobalTextForDeath_Func");
    TriggerEnable(libNEXS_gt_ValerianGlobalTextForDeath, false);
    TriggerAddEventUnitDied(libNEXS_gt_ValerianGlobalTextForDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5AE99E696AFE983A8E7BDB2E58786E5A487E5B0B1E7BBAA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_0F6D6E55"));
    libNEXS_gf_ValerianGlobalTextChange(21);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5AE99E696AFE983A8E7BDB2E58786E5A487E5B0B1E7BBAA_Init () {
    libNEXS_gt_E5AE99E696AFE983A8E7BDB2E58786E5A487E5B0B1E7BBAA = TriggerCreate("libNEXS_gt_E5AE99E696AFE983A8E7BDB2E58786E5A487E5B0B1E7BBAA_Func");
    TriggerEnable(libNEXS_gt_E5AE99E696AFE983A8E7BDB2E58786E5A487E5B0B1E7BBAA, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E5AE99E696AFE983A8E7BDB2E58786E5A487E5B0B1E7BBAA, null, "ValerianZeusCooldownBehaviour", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5AE99E696AFE4BFAEE5A48DE5AE8CE6AF95_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4CFD67DB_g;
    int auto4CFD67DB_u;
    unit auto4CFD67DB_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_43F0C937"));
    auto4CFD67DB_g = UnitGroup("ValerianZeus", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4CFD67DB_u = UnitGroupCount(auto4CFD67DB_g, c_unitCountAll);
    for (;; auto4CFD67DB_u -= 1) {
        auto4CFD67DB_var = UnitGroupUnitFromEnd(auto4CFD67DB_g, auto4CFD67DB_u);
        if (auto4CFD67DB_var == null) { break; }
        UnitBehaviorRemove(auto4CFD67DB_var, "ValerianZeusBrith", 1);
    }
    libNEXS_gf_ValerianGlobalTextChange(21);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5AE99E696AFE4BFAEE5A48DE5AE8CE6AF95_Init () {
    libNEXS_gt_E5AE99E696AFE4BFAEE5A48DE5AE8CE6AF95 = TriggerCreate("libNEXS_gt_E5AE99E696AFE4BFAEE5A48DE5AE8CE6AF95_Func");
    TriggerEnable(libNEXS_gt_E5AE99E696AFE4BFAEE5A48DE5AE8CE6AF95, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E5AE99E696AFE4BFAEE5A48DE5AE8CE6AF95, c_playerAny, "ValerianZeusWreckageRebuildApplyBehavior22");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5AE99E696AFE8A2ABE691A7E6AF81_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_87FE7B43"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5AE99E696AFE8A2ABE691A7E6AF81_Init () {
    libNEXS_gt_E5AE99E696AFE8A2ABE691A7E6AF81 = TriggerCreate("libNEXS_gt_E5AE99E696AFE8A2ABE691A7E6AF81_Func");
    TriggerEnable(libNEXS_gt_E5AE99E696AFE8A2ABE691A7E6AF81, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E5AE99E696AFE8A2ABE691A7E6AF81, c_playerAny, "ValerianZeusWreckageRebuildApplyBehavior2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E99DA2E69DBFE5889DE5A78BE68A98E8B783_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto78B22FC7_g;
    int auto78B22FC7_u;
    unit auto78B22FC7_var;
    unitgroup auto88F0D3BB_g;
    int auto88F0D3BB_u;
    unit auto88F0D3BB_var;
    unitgroup autoD354EDB9_g;
    int autoD354EDB9_u;
    unit autoD354EDB9_var;
    unitgroup auto3A3A57BA_g;
    int auto3A3A57BA_u;
    unit auto3A3A57BA_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E58DABE6989FE689ABE68F8FE68C81E7BBADE697B6E997B4, true);
    libNEXS_gv_valerianTimeMax = 0;
    auto78B22FC7_g = UnitGroup("CasterValerian", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto78B22FC7_u = UnitGroupCount(auto78B22FC7_g, c_unitCountAll);
    for (;; auto78B22FC7_u -= 1) {
        auto78B22FC7_var = UnitGroupUnitFromEnd(auto78B22FC7_g, auto78B22FC7_u);
        if (auto78B22FC7_var == null) { break; }
        UnitAbilityAddCooldown(auto78B22FC7_var, "ValerianArquillaWarp2", "Abil/ValerianArquillaWarp", 4.0);
    }
    Wait(3.5, c_timeGame);
    auto88F0D3BB_g = UnitGroup("ValerianZeus", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto88F0D3BB_u = UnitGroupCount(auto88F0D3BB_g, c_unitCountAll);
    for (;; auto88F0D3BB_u -= 1) {
        auto88F0D3BB_var = UnitGroupUnitFromEnd(auto88F0D3BB_g, auto88F0D3BB_u);
        if (auto88F0D3BB_var == null) { break; }
        UnitSetPosition(auto88F0D3BB_var, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), false);
        UnitCreateEffectUnit(auto88F0D3BB_var, "ValerianZeusWreckageRebuildIssueOrder22", auto88F0D3BB_var);
        UnitIssueOrder(auto88F0D3BB_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    autoD354EDB9_g = UnitGroup("ValerianZeusWreckage", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    autoD354EDB9_u = UnitGroupCount(autoD354EDB9_g, c_unitCountAll);
    for (;; autoD354EDB9_u -= 1) {
        autoD354EDB9_var = UnitGroupUnitFromEnd(autoD354EDB9_g, autoD354EDB9_u);
        if (autoD354EDB9_var == null) { break; }
        UnitSetPosition(autoD354EDB9_var, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), false);
        UnitCreateEffectUnit(autoD354EDB9_var, "ValerianZeusWreckageRebuildIssueOrder22", autoD354EDB9_var);
        UnitCreateEffectUnit(autoD354EDB9_var, "ValerianZeusWreckageRebuildIssueOrder", autoD354EDB9_var);
    }
    Wait(4.0, c_timeGame);
    auto3A3A57BA_g = UnitGroup("ValerianArquilla", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3A3A57BA_u = UnitGroupCount(auto3A3A57BA_g, c_unitCountAll);
    for (;; auto3A3A57BA_u -= 1) {
        auto3A3A57BA_var = UnitGroupUnitFromEnd(auto3A3A57BA_g, auto3A3A57BA_u);
        if (auto3A3A57BA_var == null) { break; }
        libNEXS_gv_valerianArquiall = auto3A3A57BA_var;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E99DA2E69DBFE5889DE5A78BE68A98E8B783_Init () {
    libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E99DA2E69DBFE5889DE5A78BE68A98E8B783 = TriggerCreate("libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E99DA2E69DBFE5889DE5A78BE68A98E8B783_Func");
    TriggerEnable(libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E99DA2E69DBFE5889DE5A78BE68A98E8B783, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E99DA2E69DBFE5889DE5A78BE68A98E8B783, c_playerAny, "ValerianTopbarArquillaCreateUint");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E99DA2E69DBFE4BBA3E69BBFE69CACE4BD93E68A98E8B783_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto46C038DB_g;
    int auto46C038DB_u;
    unit auto46C038DB_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto46C038DB_g = UnitGroup("ValerianArquilla", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto46C038DB_u = UnitGroupCount(auto46C038DB_g, c_unitCountAll);
    for (;; auto46C038DB_u -= 1) {
        auto46C038DB_var = UnitGroupUnitFromEnd(auto46C038DB_g, auto46C038DB_u);
        if (auto46C038DB_var == null) { break; }
        UnitIssueOrder(auto46C038DB_var, OrderTargetingPoint(AbilityCommand("ValerianArquillaWarp", 0), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E99DA2E69DBFE4BBA3E69BBFE69CACE4BD93E68A98E8B783_Init () {
    libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E99DA2E69DBFE4BBA3E69BBFE69CACE4BD93E68A98E8B783 = TriggerCreate("libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E99DA2E69DBFE4BBA3E69BBFE69CACE4BD93E68A98E8B783_Func");
    TriggerEnable(libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E99DA2E69DBFE4BBA3E69BBFE69CACE4BD93E68A98E8B783, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E99DA2E69DBFE4BBA3E69BBFE69CACE4BD93E68A98E8B783, c_playerAny, "ValerianArquillaWarpCreateUnit2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E7A6BBE5BC80E697B6E7A681E794A8E68A98E8B783E68A80E883BD_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF5D571A5_g;
    int autoF5D571A5_u;
    unit autoF5D571A5_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoF5D571A5_g = UnitGroup("CasterValerian", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    autoF5D571A5_u = UnitGroupCount(autoF5D571A5_g, c_unitCountAll);
    for (;; autoF5D571A5_u -= 1) {
        autoF5D571A5_var = UnitGroupUnitFromEnd(autoF5D571A5_g, autoF5D571A5_u);
        if (autoF5D571A5_var == null) { break; }
        UnitAbilityEnable(autoF5D571A5_var, "ValerianArquillaWarp2", false);
        Wait(5.5, c_timeGame);
        UnitAbilityEnable(autoF5D571A5_var, "ValerianArquillaWarp2", true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E7A6BBE5BC80E697B6E7A681E794A8E68A98E8B783E68A80E883BD_Init () {
    libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E7A6BBE5BC80E697B6E7A681E794A8E68A98E8B783E68A80E883BD = TriggerCreate("libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E7A6BBE5BC80E697B6E7A681E794A8E68A98E8B783E68A80E883BD_Func");
    TriggerEnable(libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E7A6BBE5BC80E697B6E7A681E794A8E68A98E8B783E68A80E883BD, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E7A6BBE5BC80E697B6E7A681E794A8E68A98E8B783E68A80E883BD, c_playerAny, "ValerianArquillaTimedLifeApplyBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E69CACE4BD93E68A98E8B783E4B88EE586B7E58DB4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA6DB19BE_g;
    int autoA6DB19BE_u;
    unit autoA6DB19BE_var;
    unitgroup auto247912F7_g;
    int auto247912F7_u;
    unit auto247912F7_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA6DB19BE_g = UnitGroup("CasterValerian", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    autoA6DB19BE_u = UnitGroupCount(autoA6DB19BE_g, c_unitCountAll);
    for (;; autoA6DB19BE_u -= 1) {
        autoA6DB19BE_var = UnitGroupUnitFromEnd(autoA6DB19BE_g, autoA6DB19BE_u);
        if (autoA6DB19BE_var == null) { break; }
        UnitAbilitySpendExplicit(autoA6DB19BE_var, AbilityCommand("ValerianArquillaWarp2", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
    }
    Wait(0.6, c_timeGame);
    auto247912F7_g = UnitGroup("ValerianZeus", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto247912F7_u = UnitGroupCount(auto247912F7_g, c_unitCountAll);
    for (;; auto247912F7_u -= 1) {
        auto247912F7_var = UnitGroupUnitFromEnd(auto247912F7_g, auto247912F7_u);
        if (auto247912F7_var == null) { break; }
        UnitSetPosition(auto247912F7_var, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), false);
        UnitCreateEffectUnit(auto247912F7_var, "ValerianZeusWreckageRebuildIssueOrder22", auto247912F7_var);
        UnitIssueOrder(auto247912F7_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E69CACE4BD93E68A98E8B783E4B88EE586B7E58DB4_Init () {
    libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E69CACE4BD93E68A98E8B783E4B88EE586B7E58DB4 = TriggerCreate("libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E69CACE4BD93E68A98E8B783E4B88EE586B7E58DB4_Func");
    TriggerEnable(libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E69CACE4BD93E68A98E8B783E4B88EE586B7E58DB4, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E69CACE4BD93E68A98E8B783E4B88EE586B7E58DB4, c_playerAny, "ValerianArquillaWarpCreateUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E58DABE6989FE689ABE68F8FE68C81E7BBADE697B6E997B4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_e9A38EE69AB4E7A59EE9B9B0E589A9E4BD99E68C81E7BBADE697B6E997B4;
    int lv_e9A38EE69AB4E7A59EE9B9B0E5A29EE58AA0E68C81E7BBADE697B6E997B4;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingUnit() == libNEXS_gv_valerianArquiall))) {
            return false;
        }

        if (!((UnitHasBehavior2(libNtve_gf_KillingUnit(), "ValerianSatelliteScan") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNEXS_gv_valerianTimeMax >= 60)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
        lv_e9A38EE69AB4E7A59EE9B9B0E589A9E4BD99E68C81E7BBADE697B6E997B4 = UnitBehaviorDuration(libNEXS_gv_valerianArquiall, "ValerianArquillaTimedLife");
        if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false)) {
            lv_e9A38EE69AB4E7A59EE9B9B0E5A29EE58AA0E68C81E7BBADE697B6E997B4 = FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropSuppliesUsed, c_unitPropCurrent));
            libNEXS_gv_valerianTimeMax += FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropSuppliesUsed, c_unitPropCurrent));
            UnitBehaviorSetDuration(libNEXS_gv_valerianArquiall, "ValerianArquillaTimedLife", (lv_e9A38EE69AB4E7A59EE9B9B0E589A9E4BD99E68C81E7BBADE697B6E997B4 + lv_e9A38EE69AB4E7A59EE9B9B0E5A29EE58AA0E68C81E7BBADE697B6E997B4));
        }
        else {
            if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true)) {
                libNEXS_gv_valerianTimeMax += 6;
                lv_e9A38EE69AB4E7A59EE9B9B0E5A29EE58AA0E68C81E7BBADE697B6E997B4 = 6;
                UnitBehaviorSetDuration(libNEXS_gv_valerianArquiall, "ValerianArquillaTimedLife", (lv_e9A38EE69AB4E7A59EE9B9B0E589A9E4BD99E68C81E7BBADE697B6E997B4 + lv_e9A38EE69AB4E7A59EE9B9B0E5A29EE58AA0E68C81E7BBADE697B6E997B4));
            }
            else {
                libNEXS_gv_valerianTimeMax += 6;
                lv_e9A38EE69AB4E7A59EE9B9B0E5A29EE58AA0E68C81E7BBADE697B6E997B4 = 6;
                UnitBehaviorSetDuration(libNEXS_gv_valerianArquiall, "ValerianArquillaTimedLife", (lv_e9A38EE69AB4E7A59EE9B9B0E589A9E4BD99E68C81E7BBADE697B6E997B4 + lv_e9A38EE69AB4E7A59EE9B9B0E5A29EE58AA0E68C81E7BBADE697B6E997B4));
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E58DABE6989FE689ABE68F8FE68C81E7BBADE697B6E997B4_Init () {
    libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E58DABE6989FE689ABE68F8FE68C81E7BBADE697B6E997B4 = TriggerCreate("libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E58DABE6989FE689ABE68F8FE68C81E7BBADE697B6E997B4_Func");
    TriggerEnable(libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E58DABE6989FE689ABE68F8FE68C81E7BBADE697B6E997B4, false);
    TriggerAddEventUnitDied(libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E58DABE6989FE689ABE68F8FE68C81E7BBADE697B6E997B4, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E58DABE6989FE689ABE68F8FE4BCA4E5AEB3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingUnit() == libNEXS_gv_valerianArquiall))) {
            return false;
        }

        if (!((UnitHasBehavior2(libNtve_gf_KillingUnit(), "ValerianSatelliteScan") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libNEXS_gv_valerianDamageWaeponUpMax >= 150.0) || (libNEXS_gv_valerianDamageThunderUpMax >= 50.0))) {
        libNEXS_gv_valerianDamageWaeponUpMax = 150.0;
        CatalogFieldValueSet(c_gameCatalogEffect, "ValerianArquillaWeaponLaunchDamage", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, FixedToString((75.0 + libNEXS_gv_valerianDamageWaeponUpMax), c_fixedPrecisionAny));
        libNEXS_gv_valerianDamageThunderUpMax = 50.0;
        CatalogFieldValueSet(c_gameCatalogEffect, "ValerianArquillaThunderDamage", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, FixedToString((25.0 + libNEXS_gv_valerianDamageThunderUpMax), c_fixedPrecisionAny));
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropSuppliesUsed, c_unitPropCurrent) <= 1) && (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false)) {
            libNEXS_gv_valerianDamageWaeponUpMax += 0.75;
            libNEXS_gv_valerianDamageThunderUpMax += 0.25;
        }
        else if ((UnitGetPropertyFixed(EventUnit(), c_unitPropSuppliesUsed, c_unitPropCurrent) == 2.0)) {
            libNEXS_gv_valerianDamageWaeponUpMax += 1.5;
            libNEXS_gv_valerianDamageThunderUpMax += 0.5;
        }
        else if ((UnitGetPropertyFixed(EventUnit(), c_unitPropSuppliesUsed, c_unitPropCurrent) == 3.0)) {
            libNEXS_gv_valerianDamageWaeponUpMax += 2.25;
            libNEXS_gv_valerianDamageThunderUpMax += 0.75;
        }
        else if ((UnitGetPropertyFixed(EventUnit(), c_unitPropSuppliesUsed, c_unitPropCurrent) == 4.0)) {
            libNEXS_gv_valerianDamageWaeponUpMax += 3.0;
            libNEXS_gv_valerianDamageThunderUpMax += 1.0;
        }
        else if ((UnitGetPropertyFixed(EventUnit(), c_unitPropSuppliesUsed, c_unitPropCurrent) == 5.0)) {
            libNEXS_gv_valerianDamageWaeponUpMax += 3.75;
            libNEXS_gv_valerianDamageThunderUpMax += 1.25;
        }
        else if (((UnitGetPropertyFixed(EventUnit(), c_unitPropSuppliesUsed, c_unitPropCurrent) >= 6.0) || (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true) || (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            libNEXS_gv_valerianDamageWaeponUpMax += 4.5;
            libNEXS_gv_valerianDamageThunderUpMax += 1.5;
        }
        if (((libNEXS_gv_valerianDamageWaeponUpMax >= 150.0) || (libNEXS_gv_valerianDamageThunderUpMax >= 50.0))) {
            libNEXS_gv_valerianDamageWaeponUpMax = 150.0;
            libNEXS_gv_valerianDamageThunderUpMax = 50.0;
        }

        CatalogFieldValueSet(c_gameCatalogEffect, "ValerianArquillaWeaponLaunchDamage", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, FixedToString((75.0 + libNEXS_gv_valerianDamageWaeponUpMax), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogEffect, "ValerianArquillaThunderDamage", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, FixedToString((25.0 + libNEXS_gv_valerianDamageThunderUpMax), c_fixedPrecisionAny));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E58DABE6989FE689ABE68F8FE4BCA4E5AEB3_Init () {
    libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E58DABE6989FE689ABE68F8FE4BCA4E5AEB3 = TriggerCreate("libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E58DABE6989FE689ABE68F8FE4BCA4E5AEB3_Func");
    TriggerEnable(libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E58DABE6989FE689ABE68F8FE4BCA4E5AEB3, false);
    TriggerAddEventUnitDied(libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E58DABE6989FE689ABE68F8FE4BCA4E5AEB3, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8A18CE6989FE998B2E5BEA1E9A39EE5BCB9E7B298E6BB9E_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetTargetingOrder(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5), libNEXS_gv_valerianCaster, OrderTargetingPoint(AbilityCommand("ValerianTopbarMissile", 0), UnitGroupCenterOfGroup(libNEXS_gv_valerianCaster)), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8A18CE6989FE998B2E5BEA1E9A39EE5BCB9E7B298E6BB9E_Init () {
    libNEXS_gt_E8A18CE6989FE998B2E5BEA1E9A39EE5BCB9E7B298E6BB9E = TriggerCreate("libNEXS_gt_E8A18CE6989FE998B2E5BEA1E9A39EE5BCB9E7B298E6BB9E_Func");
    TriggerEnable(libNEXS_gt_E8A18CE6989FE998B2E5BEA1E9A39EE5BCB9E7B298E6BB9E, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E8A18CE6989FE998B2E5BEA1E9A39EE5BCB9E7B298E6BB9E, c_playerAny, "ValerianTopbarMissileSwitch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5858BE68B89E882AFE58E9FE59E8BE69CBAE689A7E8A18CE5AFB9E782B9E8BDB0E782B8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitCaster), OrderTargetingPoint(AbilityCommand("attack", 2), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5858BE68B89E882AFE58E9FE59E8BE69CBAE689A7E8A18CE5AFB9E782B9E8BDB0E782B8_Init () {
    libNEXS_gt_E5858BE68B89E882AFE58E9FE59E8BE69CBAE689A7E8A18CE5AFB9E782B9E8BDB0E782B8 = TriggerCreate("libNEXS_gt_E5858BE68B89E882AFE58E9FE59E8BE69CBAE689A7E8A18CE5AFB9E782B9E8BDB0E782B8_Func");
    TriggerEnable(libNEXS_gt_E5858BE68B89E882AFE58E9FE59E8BE69CBAE689A7E8A18CE5AFB9E782B9E8BDB0E782B8, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E5858BE68B89E882AFE58E9FE59E8BE69CBAE689A7E8A18CE5AFB9E782B9E8BDB0E782B8, c_playerAny, "ValerianCrackenEclipsesEnergySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5858BE68B89E882AFE58E9FE59E8BE69CBAE5AFB9E782B9E8BDB0E782B8E5819CE6ADA2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto35C12A11_g;
    int auto35C12A11_u;
    unit auto35C12A11_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto35C12A11_g = UnitGroup("ValerianCrackenSiege", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto35C12A11_u = UnitGroupCount(auto35C12A11_g, c_unitCountAll);
    for (;; auto35C12A11_u -= 1) {
        auto35C12A11_var = UnitGroupUnitFromEnd(auto35C12A11_g, auto35C12A11_u);
        if (auto35C12A11_var == null) { break; }
        UnitIssueOrder(auto35C12A11_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5858BE68B89E882AFE58E9FE59E8BE69CBAE5AFB9E782B9E8BDB0E782B8E5819CE6ADA2_Init () {
    libNEXS_gt_E5858BE68B89E882AFE58E9FE59E8BE69CBAE5AFB9E782B9E8BDB0E782B8E5819CE6ADA2 = TriggerCreate("libNEXS_gt_E5858BE68B89E882AFE58E9FE59E8BE69CBAE5AFB9E782B9E8BDB0E782B8E5819CE6ADA2_Func");
    TriggerEnable(libNEXS_gt_E5858BE68B89E882AFE58E9FE59E8BE69CBAE5AFB9E782B9E8BDB0E782B8E5819CE6ADA2, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E5858BE68B89E882AFE58E9FE59E8BE69CBAE5AFB9E782B9E8BDB0E782B8E5819CE6ADA2, c_playerAny, "ValerianTopbarHoorayChargeCreatePersitent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8A782E5AF9FE88085E68A98E8B783_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4E9F1A2F_g;
    int auto4E9F1A2F_u;
    unit auto4E9F1A2F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto4E9F1A2F_g = UnitGroup("HHRaven2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4E9F1A2F_u = UnitGroupCount(auto4E9F1A2F_g, c_unitCountAll);
    for (;; auto4E9F1A2F_u -= 1) {
        auto4E9F1A2F_var = UnitGroupUnitFromEnd(auto4E9F1A2F_g, auto4E9F1A2F_u);
        if (auto4E9F1A2F_var == null) { break; }
        UnitIssueOrder(auto4E9F1A2F_var, OrderTargetingPoint(AbilityCommand("FleetwideJump", 0), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8A782E5AF9FE88085E68A98E8B783_Init () {
    libNEXS_gt_E8A782E5AF9FE88085E68A98E8B783 = TriggerCreate("libNEXS_gt_E8A782E5AF9FE88085E68A98E8B783_Func");
    TriggerEnable(libNEXS_gt_E8A782E5AF9FE88085E68A98E8B783, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E8A782E5AF9FE88085E68A98E8B783, c_playerAny, "SIStukovPlaceHordeRallyCP23");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8A782E5AF9FE88085E5AD90E68A98E8B783_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5) && (EventUnitAbilityStage() == c_abilEffectStagePrep) && ((EventUnitAbility() == AbilityCommand("FleetwideJump", 0)) || (EventUnitAbility() == AbilityCommand("SOAPurifierBeam22", 0))))) {
        PlayerAddCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, "Abil/FleetwideJump", 45.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8A782E5AF9FE88085E5AD90E68A98E8B783_Init () {
    libNEXS_gt_E8A782E5AF9FE88085E5AD90E68A98E8B783 = TriggerCreate("libNEXS_gt_E8A782E5AF9FE88085E5AD90E68A98E8B783_Func");
    TriggerEnable(libNEXS_gt_E8A782E5AF9FE88085E5AD90E68A98E8B783, false);
    TriggerAddEventUnitAbility(libNEXS_gt_E8A782E5AF9FE88085E5AD90E68A98E8B783, null, null, c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B13_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e68190E683A7E58D95E4BD8D;
    point lv_e99A8FE69CBAE4BD8DE782B9;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e68190E683A7E58D95E4BD8D = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_e99A8FE69CBAE4BD8DE782B9 = PointWithOffsetPolar(UnitGetPosition(lv_e68190E683A7E58D95E4BD8D), 1.0, libNtve_gf_RandomAngle());
    UnitIssueOrder(lv_e68190E683A7E58D95E4BD8D, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_e68190E683A7E58D95E4BD8D), -5.0, lv_e99A8FE69CBAE4BD8DE782B9)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    while ((UnitHasBehavior2(lv_e68190E683A7E58D95E4BD8D, "MutatorFear32") == true) && (UnitIsAlive(lv_e68190E683A7E58D95E4BD8D) == true)) {
        UnitIssueOrder(lv_e68190E683A7E58D95E4BD8D, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_e68190E683A7E58D95E4BD8D), 4.0))), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    UnitIssueOrder(lv_e68190E683A7E58D95E4BD8D, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B13_Init () {
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B13 = TriggerCreate("libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B13_Func");
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B13, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B13, null, "MutatorFear32", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B13, null, "MutatorFear32", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????? Debug
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5A5A5E4B881E8A2ABE6848FE5A496E691A7E6AF81Debug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto3F1105D3_ae = 200;
    int auto3F1105D3_var;
    const int autoDD141E13_ae = 15;
    int autoDD141E13_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((GameAttributeGameValue("[bnet:Nexus Coop Data Basis/0.0/310318,file:Mods\\Nexus Coop Dependency Basis.SC2Mod]1") != "0002") && (GameIsOnline() == true)) {
        Wait(90.0, c_timeGame);
        AIMeleeStart(15);
        CatalogFieldValueSet(c_gameCatalogUnit, "MutatorPropagator", "Speed", 15, "15");
        auto3F1105D3_var = 1;
        for ( ; auto3F1105D3_var <= auto3F1105D3_ae; auto3F1105D3_var += 1 ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorPropagator", c_unitCreateIgnorePlacement, 15, RegionRandomPoint(RegionPlayableMap()));
            AISetUnitSuicide(UnitLastCreated(), true);
        }
        Wait(120.0, c_timeGame);
        autoDD141E13_var = 1;
        for ( ; autoDD141E13_var <= autoDD141E13_ae; autoDD141E13_var += 1 ) {
            GameOver(autoDD141E13_var, c_gameOverVictory, false, false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5A5A5E4B881E8A2ABE6848FE5A496E691A7E6AF81Debug_Init () {
    libNEXS_gt_E5A5A5E4B881E8A2ABE6848FE5A496E691A7E6AF81Debug = TriggerCreate("libNEXS_gt_E5A5A5E4B881E8A2ABE6848FE5A496E691A7E6AF81Debug_Func");
    TriggerAddEventUnitDied(libNEXS_gt_E5A5A5E4B881E8A2ABE6848FE5A496E691A7E6AF81Debug, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5A5A5E4B881E4BFAEE5A48DE5AE8CE6AF95_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_3138282A"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5A5A5E4B881E4BFAEE5A48DE5AE8CE6AF95_Init () {
    libNEXS_gt_E5A5A5E4B881E4BFAEE5A48DE5AE8CE6AF95 = TriggerCreate("libNEXS_gt_E5A5A5E4B881E4BFAEE5A48DE5AE8CE6AF95_Func");
    TriggerEnable(libNEXS_gt_E5A5A5E4B881E4BFAEE5A48DE5AE8CE6AF95, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E5A5A5E4B881E4BFAEE5A48DE5AE8CE6AF95, c_playerAny, "FullHeal2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5A5A5E4B881E8A2ABE691A7E6AF81_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_350459BE"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5A5A5E4B881E8A2ABE691A7E6AF81_Init () {
    libNEXS_gt_E5A5A5E4B881E8A2ABE691A7E6AF81 = TriggerCreate("libNEXS_gt_E5A5A5E4B881E8A2ABE691A7E6AF81_Func");
    TriggerEnable(libNEXS_gt_E5A5A5E4B881E8A2ABE691A7E6AF81, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E5A5A5E4B881E8A2ABE691A7E6AF81, c_playerAny, "DrakkenLaserDrillBuildAB2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????1??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E89299E696AFE5858BE5A881E69C9B1E5BC80E590AF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, "UnknownUpgrade292", 1);
    TechTreeAbilityAllow(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, AbilityCommand("MengskMercTrain", 12), false);
    TechTreeAbilityAllow(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, AbilityCommand("UpgradeToPlanetaryFortress2", 0), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_097AA842"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E89299E696AFE5858BE5A881E69C9B1E5BC80E590AF_Init () {
    libNEXS_gt_E89299E696AFE5858BE5A881E69C9B1E5BC80E590AF = TriggerCreate("libNEXS_gt_E89299E696AFE5858BE5A881E69C9B1E5BC80E590AF_Func");
    TriggerEnable(libNEXS_gt_E89299E696AFE5858BE5A881E69C9B1E5BC80E590AF, false);
    TriggerAddEventChatMessage(libNEXS_gt_E89299E696AFE5858BE5A881E69C9B1E5BC80E590AF, c_playerAny, "-Mengsk1", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????2??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E89299E696AFE5858BE5A881E69C9B2E5BC80E590AF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, "UnknownUpgrade290", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, "UnknownUpgrade291", 1);
    TechTreeAbilityAllow(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, AbilityCommand("ArmoryResearchVoidCoop2", 26), false);
    TechTreeAbilityAllow(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, AbilityCommand("ArmoryResearchVoidCoop2", 27), true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_D856C50A"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E89299E696AFE5858BE5A881E69C9B2E5BC80E590AF_Init () {
    libNEXS_gt_E89299E696AFE5858BE5A881E69C9B2E5BC80E590AF = TriggerCreate("libNEXS_gt_E89299E696AFE5858BE5A881E69C9B2E5BC80E590AF_Func");
    TriggerEnable(libNEXS_gt_E89299E696AFE5858BE5A881E69C9B2E5BC80E590AF, false);
    TriggerAddEventChatMessage(libNEXS_gt_E89299E696AFE5858BE5A881E69C9B2E5BC80E590AF, c_playerAny, "-Mengsk2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????2??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E89299E696AFE5858BE7A681E794A8E5A881E69C9B2E68A80E883BD_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeAbilityAllow(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID5, AbilityCommand("ArmoryResearchVoidCoop2", 27), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E89299E696AFE5858BE7A681E794A8E5A881E69C9B2E68A80E883BD_Init () {
    libNEXS_gt_E89299E696AFE5858BE7A681E794A8E5A881E69C9B2E68A80E883BD = TriggerCreate("libNEXS_gt_E89299E696AFE5858BE7A681E794A8E5A881E69C9B2E68A80E883BD_Func");
    TriggerEnable(libNEXS_gt_E89299E696AFE5858BE7A681E794A8E5A881E69C9B2E68A80E883BD, false);
    TriggerAddEventUnitRegion(libNEXS_gt_E89299E696AFE5858BE7A681E794A8E5A881E69C9B2E68A80E883BD, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_Overmind
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_DUT_Overmind_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup autoCCEFD1AB_g;
    int autoCCEFD1AB_var;

    // Variable Initialization
    lv_players = libCOMI_gf_PlayersOfCommander("NexusOvermind");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_OvermindE6ADBBE4BAA1, true);
    TriggerEnable(libNEXS_gt_OvermindE9A29CE889B2, true);
    autoCCEFD1AB_g = lv_players;
    autoCCEFD1AB_var = -1;
    while (true) {
        autoCCEFD1AB_var = PlayerGroupNextPlayer(autoCCEFD1AB_g, autoCCEFD1AB_var);
        if (autoCCEFD1AB_var < 0) { break; }
        libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID4 = autoCCEFD1AB_var;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_DUT_Overmind_Init () {
    libNEXS_gt_DUT_Overmind = TriggerCreate("libNEXS_gt_DUT_Overmind_Func");
    TriggerAddEventGeneric(libNEXS_gt_DUT_Overmind, libCOMI_gv_mISSIONINITIALIZED);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overmind??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_OvermindE6ADBBE4BAA1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto573403EF_g;
    int auto573403EF_u;
    unit auto573403EF_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Hive2")) {
        auto573403EF_g = UnitGroup(null, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID4, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto573403EF_u = UnitGroupCount(auto573403EF_g, c_unitCountAll);
        for (;; auto573403EF_u -= 1) {
            auto573403EF_var = UnitGroupUnitFromEnd(auto573403EF_g, auto573403EF_u);
            if (auto573403EF_var == null) { break; }
            UnitKill(auto573403EF_var);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_OvermindE6ADBBE4BAA1_Init () {
    libNEXS_gt_OvermindE6ADBBE4BAA1 = TriggerCreate("libNEXS_gt_OvermindE6ADBBE4BAA1_Func");
    TriggerEnable(libNEXS_gt_OvermindE6ADBBE4BAA1, false);
    TriggerAddEventUnitDied(libNEXS_gt_OvermindE6ADBBE4BAA1, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overmind??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_OvermindE9A29CE889B2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e7B2BEE88BB1E899ABE6978F;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e7B2BEE88BB1E899ABE6978F = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "Hatchery222") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "SporeColony") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "SunkenColony2") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "NydusCanalCreeper") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "DefilerMPBurrowed") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "DefilerMP") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "QueenClassic") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "Lurker") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "LurkerBurrowed"))) {
        UnitSetTeamColorIndex(lv_e7B2BEE88BB1E899ABE6978F, 7);
    }

    if (((UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "PrimalLocustFlying") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "HotSLeviathan2"))) {
        UnitSetTeamColorIndex(lv_e7B2BEE88BB1E899ABE6978F, 3);
    }

    if (((UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "DehakaZerglingLevel2") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "Ghost_BlackOpsSpawnerUnit2") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "Broodling2") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "BroodLordBWeapon2") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "BroodlingEscort22") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "DehakaZerglingLevel2Burrowed") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "HydraliskImpaler") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "Ghost_BlackOpsSpawnerUnit22") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "HydraliskImpalerBurrowed") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "HotSTorrasque") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "HotSTorrasqueBurrowed") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "Ghost_BlackOpsSpawnerUnit222") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "TorrasqueChrysalis") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "TorrasqueCorpse") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "MutaliskViper") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "Ghost_BlackOpsSpawnerUnit2222") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "Corruptor2") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "Ghost_BlackOpsSpawnerUnit22222") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "BroodLord2") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "Ghost_BlackOpsSpawnerUnit222222") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "Hatchery22") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "HotSHunter") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "HotSHunterBurrowed") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "Scourge22") || (UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "Scourge222"))) {
        UnitSetTeamColorIndex(lv_e7B2BEE88BB1E899ABE6978F, 8);
    }

    if ((UnitGetType(lv_e7B2BEE88BB1E899ABE6978F) == "Hatchery2")) {
        UnitSetTeamColorIndex(lv_e7B2BEE88BB1E899ABE6978F, 5);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_OvermindE9A29CE889B2_Init () {
    libNEXS_gt_OvermindE9A29CE889B2 = TriggerCreate("libNEXS_gt_OvermindE9A29CE889B2_Func");
    TriggerEnable(libNEXS_gt_OvermindE9A29CE889B2, false);
    TriggerAddEventUnitRegion(libNEXS_gt_OvermindE9A29CE889B2, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????1??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E4B8BBE5AEB0E5A881E69C9B1E5BC80E590AF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID4, "UnknownUpgrade293", 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_E20A4B4B"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E4B8BBE5AEB0E5A881E69C9B1E5BC80E590AF_Init () {
    libNEXS_gt_E4B8BBE5AEB0E5A881E69C9B1E5BC80E590AF = TriggerCreate("libNEXS_gt_E4B8BBE5AEB0E5A881E69C9B1E5BC80E590AF_Func");
    TriggerEnable(libNEXS_gt_E4B8BBE5AEB0E5A881E69C9B1E5BC80E590AF, false);
    TriggerAddEventChatMessage(libNEXS_gt_E4B8BBE5AEB0E5A881E69C9B1E5BC80E590AF, c_playerAny, "-Overmind1", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????2??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E4B8BBE5AEB0E5A881E69C9B2E5BC80E590AF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID4, "UnknownUpgrade294", 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_E8A1FA1A"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E4B8BBE5AEB0E5A881E69C9B2E5BC80E590AF_Init () {
    libNEXS_gt_E4B8BBE5AEB0E5A881E69C9B2E5BC80E590AF = TriggerCreate("libNEXS_gt_E4B8BBE5AEB0E5A881E69C9B2E5BC80E590AF_Func");
    TriggerEnable(libNEXS_gt_E4B8BBE5AEB0E5A881E69C9B2E5BC80E590AF, false);
    TriggerAddEventChatMessage(libNEXS_gt_E4B8BBE5AEB0E5A881E69C9B2E5BC80E590AF, c_playerAny, "-Overmind2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????3??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E4B8BBE5AEB0E5A881E69C9B3E5BC80E590AF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID4, "UnknownUpgrade2942", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID4, "UnknownUpgrade295", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID4, "UnknownUpgrade2953", 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_1CFF3873"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E4B8BBE5AEB0E5A881E69C9B3E5BC80E590AF_Init () {
    libNEXS_gt_E4B8BBE5AEB0E5A881E69C9B3E5BC80E590AF = TriggerCreate("libNEXS_gt_E4B8BBE5AEB0E5A881E69C9B3E5BC80E590AF_Func");
    TriggerEnable(libNEXS_gt_E4B8BBE5AEB0E5A881E69C9B3E5BC80E590AF, false);
    TriggerAddEventChatMessage(libNEXS_gt_E4B8BBE5AEB0E5A881E69C9B3E5BC80E590AF, c_playerAny, "-Overmind3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_Stetmann
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_DUT_Stetmann_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup auto12FA9E12_g;
    int auto12FA9E12_var;

    // Variable Initialization
    lv_players = libCOMI_gf_PlayersOfCommander("NexusStetmann");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(libNEXS_gv_e4BDBFE794A8E696AFE58FB0E789B9E69BBCE79A84E78EA9E5AEB6EFBC88E78EA9E5AEB6E7BB84EFBC89, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8);
    UISetResourceVisible(libNEXS_gv_e4BDBFE794A8E696AFE58FB0E789B9E69BBCE79A84E78EA9E5AEB6EFBC88E78EA9E5AEB6E7BB84EFBC89, c_resourceTypeTerrazine, true);
    libNEXS_gf_E5A4A7E4B8BBE69599E8A7A6E58F91E599A8E5889DE5A78BE58C96E58AA8E4BD9C4();
    TriggerEnable(libNEXS_gt_Stetmansbirth, true);
    TriggerEnable(libNEXS_gt_E7A59EE7BB8FE79785E5958AE58D95E4BD8DE6ADBBE4BAA1, true);
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B7, true);
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B8, true);
    TriggerEnable(libNEXS_gt_E696AFE58FB0E789B9E69BBCE58D95E4BD8DE9A29CE889B2, true);
    TriggerEnable(libNEXS_gt_E7A791E7A094E7AB99E6ADBBE4BAA1, true);
    TriggerEnable(libNEXS_gt_E5A4A7E58A9BE7A59EE5889BE5BBBA, true);
    TriggerEnable(libNEXS_gt_E696AFE58FB0E789B9E69BBCE6ADBBE4BAA1, true);
    TriggerEnable(libNEXS_gt_E5B08FE7B2BEE781B5E983A8E7BDB2E7A7BBE58AA8, true);
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B9, true);
    TriggerEnable(libNEXS_gt_E58CBBE79697E8BF90E8BE93E69CBAE7A7BBE58AA8E58DB8E8BDBD, true);
    TriggerEnable(libNEXS_gt_E98787E99B86E69CBAE599A8E4BABAE5908DE5AD97, true);
    TriggerEnable(libNEXS_gt_E7A791E7A094E7AB99E59DA0E890BDE9959CE5A4B4E69983E58AA8, true);
    TriggerEnable(libNEXS_gt_E983A8E7BDB2E69CBAE6A2B0E4BFA1E6A087E58F8AE591BDE4BBA4E694BBE587BB, true);
    TriggerEnable(libNEXS_gt_E5A194E8BEBEE69E97E6ADBBE4BAA1E888B0E9989FE58FACE594A4, true);
    TriggerEnable(libNEXS_gt_RaynorsUnit, true);
    TriggerEnable(libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E5A4A7E5928CE782AEE69AB4E587BB2, true);
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B10, true);
    TriggerEnable(libNEXS_gt_E69CBAE6A2B0E5909EE599ACE88085E58F98E5BC82E8A385E5A1ABChimz, true);
    TriggerEnable(libNEXS_gt_E69CBAE6A2B0E5909EE599ACE88085E58F98E5BC82E8A385E5A1ABHydra, true);
    TriggerEnable(libNEXS_gt_E69CBAE6A2B0E5909EE599ACE88085E68A80E883BDE8A1A5E58585E8A385E5A1AB, true);
    TriggerEnable(libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8005, true);
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B11, true);
    libNEXS_gv_raynorStetmannControl = 1;
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, "CandaUpgrade1ST22", 1);
    auto12FA9E12_g = lv_players;
    auto12FA9E12_var = -1;
    while (true) {
        auto12FA9E12_var = PlayerGroupNextPlayer(auto12FA9E12_g, auto12FA9E12_var);
        if (auto12FA9E12_var < 0) { break; }
        libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8 = auto12FA9E12_var;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_DUT_Stetmann_Init () {
    libNEXS_gt_DUT_Stetmann = TriggerCreate("libNEXS_gt_DUT_Stetmann_Func");
    TriggerAddEventGeneric(libNEXS_gt_DUT_Stetmann, libCOMI_gv_mISSIONINITIALIZED);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E7A59EE7BB8FE79785E5958AE58D95E4BD8DE6ADBBE4BAA1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitDamageDeathCheck(c_deathTypeRemove) != true) && (EventUnitDamageDeathCheck(c_deathTypeMorph) != true) && (UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8) && (libNtve_gf_KillingPlayer() != libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8)) {
        libNEXS_gv_e7A59EE7BB8FE79785E5958AE6ADBBE4BAA1E4BABAE58FA3E695B0 += FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropSuppliesUsed, c_unitPropCurrent));
        if ((libNEXS_gv_e7A59EE7BB8FE79785E5958AE6ADBBE4BAA1E4BABAE58FA3E695B0 >= 100)) {
            TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, "ScienceStationVoice2", 1);
            TriggerEnable(TriggerGetCurrent(), false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E7A59EE7BB8FE79785E5958AE58D95E4BD8DE6ADBBE4BAA1_Init () {
    libNEXS_gt_E7A59EE7BB8FE79785E5958AE58D95E4BD8DE6ADBBE4BAA1 = TriggerCreate("libNEXS_gt_E7A59EE7BB8FE79785E5958AE58D95E4BD8DE6ADBBE4BAA1_Func");
    TriggerEnable(libNEXS_gt_E7A59EE7BB8FE79785E5958AE58D95E4BD8DE6ADBBE4BAA1, false);
    TriggerAddEventUnitDied(libNEXS_gt_E7A59EE7BB8FE79785E5958AE58D95E4BD8DE6ADBBE4BAA1, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Raynor's Unit
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_RaynorsUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB8313694_g;
    int autoB8313694_u;
    unit autoB8313694_var;
    unitgroup auto53216915_g;
    int auto53216915_u;
    unit auto53216915_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Bunker3")) {
        UnitSetTeamColorIndex(EventUnit(), 2);
        UnitBehaviorAddPlayer(EventUnit(), "CantControl", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, 1);
    }

    if ((UnitGetType(EventUnit()) == "SCV23")) {
        UnitSetTeamColorIndex(EventUnit(), 2);
        UnitBehaviorAddPlayer(EventUnit(), "CantControl", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, 1);
    }

    if ((UnitGetType(EventUnit()) == "Goliath4")) {
        UnitSetTeamColorIndex(EventUnit(), 2);
        UnitBehaviorAddPlayer(EventUnit(), "CantControl", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, 1);
    }

    if ((UnitGetType(EventUnit()) == "WarPig2")) {
        UnitSetTeamColorIndex(EventUnit(), 2);
        UnitBehaviorAddPlayer(EventUnit(), "CantControl", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, 1);
        Wait(2.4, c_timeGame);
        autoB8313694_g = UnitGroup("Bunker3", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, RegionCircle(UnitGetPosition(EventUnit()), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB8313694_u = UnitGroupCount(autoB8313694_g, c_unitCountAll);
        for (;; autoB8313694_u -= 1) {
            autoB8313694_var = UnitGroupUnitFromEnd(autoB8313694_g, autoB8313694_u);
            if (autoB8313694_var == null) { break; }
            UnitIssueOrder(autoB8313694_var, OrderTargetingUnit(AbilityCommand("BunkerTransport3", 0), EventUnit()), c_orderQueueReplace);
        }
        auto53216915_g = UnitGroup("Bunker3", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID11, RegionCircle(UnitGetPosition(EventUnit()), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto53216915_u = UnitGroupCount(auto53216915_g, c_unitCountAll);
        for (;; auto53216915_u -= 1) {
            auto53216915_var = UnitGroupUnitFromEnd(auto53216915_g, auto53216915_u);
            if (auto53216915_var == null) { break; }
            UnitIssueOrder(auto53216915_var, OrderTargetingUnit(AbilityCommand("BunkerTransport3", 0), EventUnit()), c_orderQueueReplace);
        }
    }

    if (((UnitGetType(EventUnit()) == "SiegeTank") && (UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8))) {
        UnitSetTeamColorIndex(EventUnit(), 2);
        UnitBehaviorAddPlayer(EventUnit(), "CantControl", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, 1);
        Wait(2.4, c_timeGame);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("SiegeMode", 0)), c_orderQueueReplace);
    }

    if (((UnitGetType(EventUnit()) == "SiegeTankSieged") && (UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8))) {
        UnitSetTeamColorIndex(EventUnit(), 2);
        UnitBehaviorAddPlayer(EventUnit(), "CantControl", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_RaynorsUnit_Init () {
    libNEXS_gt_RaynorsUnit = TriggerCreate("libNEXS_gt_RaynorsUnit_Func");
    TriggerEnable(libNEXS_gt_RaynorsUnit, false);
    TriggerAddEventUnitRegion(libNEXS_gt_RaynorsUnit, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8005_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "MechaJHDS1222")) {
        TriggerEnable(libNEXS_gt_E58D95E4BD8DE98080E58C96E8BF94E8BF98, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8005_Init () {
    libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8005 = TriggerCreate("libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8005_Func");
    TriggerEnable(libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8005, false);
    TriggerAddEventUnitResearchProgress(libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8005, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B11_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityAddCooldown(EventUnit(), "UnknownAbil722", "Abil/SJEvolve1", 30.0);
    UnitAbilityAddCooldown(EventUnit(), "UnknownAbil72", "Abil/SJEvolve2", 30.0);
    UnitAbilityAddCooldown(EventUnit(), "UnknownAbil72232", "Abil/SJEvolve3", 30.0);
    UnitAbilityAddCooldown(EventUnit(), "UnknownAbil72223", "Abil/SJEvolve4", 30.0);
    UnitAbilityAddCooldown(EventUnit(), "UnknownAbil7222", "Abil/SJEvolve5", 30.0);
    UnitAbilityAddCooldown(EventUnit(), "UnknownAbil72222", "Abil/SJEvolve6", 30.0);
    UnitAbilityAddCooldown(EventUnit(), "UnknownAbil7223", "Abil/SJEvolve7", 30.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B11_Init () {
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B11 = TriggerCreate("libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B11_Func");
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B11, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B11, null, "Mechacocooncool", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E58D95E4BD8DE98080E58C96E8BF94E8BF98_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "StetmannVenoliskCocoon")) {
        PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, c_playerPropTerrazine, c_playerPropOperAdd, 1);
    }

    if ((UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "StetmannDestroyerCocoon")) {
        PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, c_playerPropTerrazine, c_playerPropOperAdd, 5);
    }

    if ((UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "StetmannLaserHydraliskCocoon")) {
        PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, c_playerPropTerrazine, c_playerPropOperAdd, 6);
    }

    if ((UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "StetmannBurierCocoon")) {
        PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, c_playerPropTerrazine, c_playerPropOperAdd, 12);
    }

    if ((UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "StetmannMechaUltraliskCocoon")) {
        PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, c_playerPropTerrazine, c_playerPropOperAdd, 20);
    }

    if ((UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "StetmannLaserMutaliskCocoon")) {
        PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, c_playerPropTerrazine, c_playerPropOperAdd, 6);
    }

    if ((UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "StetmannMechaDevourerCocoon")) {
        PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, c_playerPropTerrazine, c_playerPropOperAdd, 20);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E58D95E4BD8DE98080E58C96E8BF94E8BF98_Init () {
    libNEXS_gt_E58D95E4BD8DE98080E58C96E8BF94E8BF98 = TriggerCreate("libNEXS_gt_E58D95E4BD8DE98080E58C96E8BF94E8BF98_Func");
    TriggerEnable(libNEXS_gt_E58D95E4BD8DE98080E58C96E8BF94E8BF98, false);
    TriggerAddEventUnitRegion(libNEXS_gt_E58D95E4BD8DE98080E58C96E8BF94E8BF98, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E696AFE58FB0E789B9E69BBCE58D95E4BD8DE9A29CE889B2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "RoguePurifierSupportDroneA2") || (UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "DehakaMutaliskLevel3222") || (UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "Ultralisk22") || (UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "UltraliskBurrowed2"))) {
        UnitSetTeamColorIndex(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D, 0);
    }

    if (((UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "ScienceFacility2") || (UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "PrimalHydralisk22") || (UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "PrimalHydraliskBurrowed22"))) {
        UnitSetTeamColorIndex(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D, 5);
    }

    if (((UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "PrimalHydralisk23") || (UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "PrimalHydraliskBurrowed222") || (UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "Devourer222"))) {
        UnitSetTeamColorIndex(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D, 1);
    }

    if (((UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "Devourer22"))) {
        UnitSetTeamColorIndex(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D, 14);
    }

    if (((UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "DehakaMutaliskLevel322"))) {
        UnitSetTeamColorIndex(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D, 4);
    }

    if (((UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "RavagerAbathur322") || (UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "RavagerAbathurBurrowed22"))) {
        UnitSetTeamColorIndex(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D, 3);
    }

    if (((UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "RavagerAbathur3222") || (UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "RavagerAbathurBurrowed23") || (UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "StetmannRaptor") || (UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "PrimalZerglingBurrowed22"))) {
        UnitSetTeamColorIndex(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D, 6);
    }

    if (((UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "Ultralisk222") || (UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "LurkerMP222") || (UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "LurkerMPBurrowed22"))) {
        UnitSetTeamColorIndex(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D, 2);
    }

    if (((UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "LurkerMP2") || (UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "LurkerMPBurrowed2"))) {
        UnitSetTeamColorIndex(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D, 15);
    }

    if (((UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "StetmannKomodo") || (UnitGetType(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D) == "PrimalZerglingBurrowed222"))) {
        UnitSetTeamColorIndex(lv_e696AFE58FB0E789B9E69BBCE58D95E4BD8D, 7);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E696AFE58FB0E789B9E69BBCE58D95E4BD8DE9A29CE889B2_Init () {
    libNEXS_gt_E696AFE58FB0E789B9E69BBCE58D95E4BD8DE9A29CE889B2 = TriggerCreate("libNEXS_gt_E696AFE58FB0E789B9E69BBCE58D95E4BD8DE9A29CE889B2_Func");
    TriggerEnable(libNEXS_gt_E696AFE58FB0E789B9E69BBCE58D95E4BD8DE9A29CE889B2, false);
    TriggerAddEventUnitRegion(libNEXS_gt_E696AFE58FB0E789B9E69BBCE58D95E4BD8DE9A29CE889B2, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5B08FE7B2BEE781B5E983A8E7BDB2E7A7BBE58AA8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB8B6E69C_g;
    int autoB8B6E69C_u;
    unit autoB8B6E69C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB8B6E69C_g = UnitGroup("RoguePurifierSupportDroneA2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB8B6E69C_u = UnitGroupCount(autoB8B6E69C_g, c_unitCountAll);
    for (;; autoB8B6E69C_u -= 1) {
        autoB8B6E69C_var = UnitGroupUnitFromEnd(autoB8B6E69C_g, autoB8B6E69C_u);
        if (autoB8B6E69C_var == null) { break; }
        if ((UnitHasBehavior2(autoB8B6E69C_var, "CanBEHeal") != true)) {
            UnitIssueOrder(autoB8B6E69C_var, OrderTargetingUnit(AbilityCommand("Irradiate3", 0), EventUnit()), c_orderQueueReplace);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5B08FE7B2BEE781B5E983A8E7BDB2E7A7BBE58AA8_Init () {
    libNEXS_gt_E5B08FE7B2BEE781B5E983A8E7BDB2E7A7BBE58AA8 = TriggerCreate("libNEXS_gt_E5B08FE7B2BEE781B5E983A8E7BDB2E7A7BBE58AA8_Func");
    TriggerEnable(libNEXS_gt_E5B08FE7B2BEE781B5E983A8E7BDB2E7A7BBE58AA8, false);
    TriggerAddEventUnitAbility(libNEXS_gt_E5B08FE7B2BEE781B5E983A8E7BDB2E7A7BBE58AA8, null, AbilityCommand("TimeWarp3", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E7A791E7A094E7AB99E6ADBBE4BAA1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1A953723_g;
    int auto1A953723_u;
    unit auto1A953723_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "ScienceFacility2")) {
        libNEXS_gv_mechaAttackPoint = null;
        auto1A953723_g = UnitGroup("Ghost_BlackOpsSpawnerUnit222332", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1A953723_u = UnitGroupCount(auto1A953723_g, c_unitCountAll);
        for (;; auto1A953723_u -= 1) {
            auto1A953723_var = UnitGroupUnitFromEnd(auto1A953723_g, auto1A953723_u);
            if (auto1A953723_var == null) { break; }
            UnitKill(auto1A953723_var);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E7A791E7A094E7AB99E6ADBBE4BAA1_Init () {
    libNEXS_gt_E7A791E7A094E7AB99E6ADBBE4BAA1 = TriggerCreate("libNEXS_gt_E7A791E7A094E7AB99E6ADBBE4BAA1_Func");
    TriggerEnable(libNEXS_gt_E7A791E7A094E7AB99E6ADBBE4BAA1, false);
    TriggerAddEventUnitDied(libNEXS_gt_E7A791E7A094E7AB99E6ADBBE4BAA1, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E7A791E7A094E7AB99E59DA0E890BDE9959CE5A4B4E69983E58AA8_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    fixed lv_distance;
    fixed[4] lv_cameraPosition;
    fixed[4] lv_effectPosition;
    int lv_player;
    point lv_effectTargetPoint;
    point lv_cameraTargetPoint;
    unit lv_scienceFalicity;

    // Automatic Variable Declarations
    playergroup autoC976DCD5_g;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_effectTargetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_scienceFalicity = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.63, c_timeGame);
    lv_effectPosition[0] = PointGetX(lv_effectTargetPoint);
    lv_effectPosition[1] = PointGetY(lv_effectTargetPoint);
    lv_effectPosition[2] = WorldHeight(c_heightMapGround, lv_effectTargetPoint);
    autoC976DCD5_g = PlayerGroupActive();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoC976DCD5_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_cameraTargetPoint = CameraGetTarget(lv_player);
        lv_cameraPosition[0] = PointGetX(lv_cameraTargetPoint);
        lv_cameraPosition[1] = (PointGetY(lv_cameraTargetPoint)-(Cos(CameraGetPitch(lv_player))*CameraGetDistance(lv_player)));
        lv_cameraPosition[2] = (WorldHeight(c_heightMapGround, lv_cameraTargetPoint)+(Sin(CameraGetPitch(lv_player))*CameraGetDistance(lv_player)));
        lv_distance = SquareRoot((Pow((lv_cameraPosition[0]-lv_effectPosition[0]), 2.0) + Pow((lv_cameraPosition[1]-lv_effectPosition[1]), 2.0) + Pow((lv_cameraPosition[2]-lv_effectPosition[2]), 2.0)));
        CameraShakeStart(lv_player, c_cameraPositionTarget, c_cameraDirectionZ, MaxF((1-(lv_distance/50)), 0.0), 5.0, 100.0, 0.5);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E7A791E7A094E7AB99E59DA0E890BDE9959CE5A4B4E69983E58AA8_Init () {
    libNEXS_gt_E7A791E7A094E7AB99E59DA0E890BDE9959CE5A4B4E69983E58AA8 = TriggerCreate("libNEXS_gt_E7A791E7A094E7AB99E59DA0E890BDE9959CE5A4B4E69983E58AA8_Func");
    TriggerEnable(libNEXS_gt_E7A791E7A094E7AB99E59DA0E890BDE9959CE5A4B4E69983E58AA8, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E7A791E7A094E7AB99E59DA0E890BDE9959CE5A4B4E69983E58AA8, c_playerAny, "SummonHyperionCreateUnit4242");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E98787E99B86E69CBAE599A8E4BABAE5908DE5AD97_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "TerrazineHarvester23")) {
        if (((libNEXS_gv_mechaNameNumber * 1) == 1)) {
            libNEXS_gv_mechaNameNumber = (libNEXS_gv_mechaNameNumber + 1);
        }
        else {
            if (((libNEXS_gv_mechaNameNumber * 1) == 2)) {
                libNEXS_gv_mechaNameNumber = (libNEXS_gv_mechaNameNumber + 1);
            }
            else {
                if (((libNEXS_gv_mechaNameNumber * 1) == 3)) {
                    libNEXS_gv_mechaNameNumber = (libNEXS_gv_mechaNameNumber + 1);
                }
                else {
                    if (((libNEXS_gv_mechaNameNumber * 1) == 4)) {
                        UnitBehaviorAddPlayer(EventUnit(), "UnknownBehavior24", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, 1);
                        libNEXS_gv_mechaNameNumber = 1;
                    }

                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E98787E99B86E69CBAE599A8E4BABAE5908DE5AD97_Init () {
    libNEXS_gt_E98787E99B86E69CBAE599A8E4BABAE5908DE5AD97 = TriggerCreate("libNEXS_gt_E98787E99B86E69CBAE599A8E4BABAE5908DE5AD97_Func");
    TriggerEnable(libNEXS_gt_E98787E99B86E69CBAE599A8E4BABAE5908DE5AD97, false);
    TriggerAddEventUnitRegion(libNEXS_gt_E98787E99B86E69CBAE599A8E4BABAE5908DE5AD97, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E983A8E7BDB2E69CBAE6A2B0E4BFA1E6A087E58F8AE591BDE4BBA4E694BBE587BB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF20C1B22_g;
    int autoF20C1B22_u;
    unit autoF20C1B22_var;
    unitgroup auto3F17E916_g;
    int auto3F17E916_u;
    unit auto3F17E916_var;
    unitgroup auto04DCC2E5_g;
    int auto04DCC2E5_u;
    unit auto04DCC2E5_var;
    unitgroup auto83D3E80E_g;
    int auto83D3E80E_u;
    unit auto83D3E80E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnit()) == "TerrazineHarvester23") || (UnitGetType(EventUnit()) == "SentryMine22") || (UnitGetType(EventUnit()) == "SentryMine2"))) {
        autoF20C1B22_g = UnitGroup("Ghost_BlackOpsSpawnerUnit222332", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF20C1B22_u = UnitGroupCount(autoF20C1B22_g, c_unitCountAll);
        for (;; autoF20C1B22_u -= 1) {
            autoF20C1B22_var = UnitGroupUnitFromEnd(autoF20C1B22_g, autoF20C1B22_u);
            if (autoF20C1B22_var == null) { break; }
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(autoF20C1B22_var)), c_orderQueueReplace);
        }
    }

    if (((UnitGetType(EventUnit()) == "ScienceFacility2"))) {
        auto3F17E916_g = UnitGroup("Henius", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3F17E916_u = UnitGroupCount(auto3F17E916_g, c_unitCountAll);
        for (;; auto3F17E916_u -= 1) {
            auto3F17E916_var = UnitGroupUnitFromEnd(auto3F17E916_g, auto3F17E916_u);
            if (auto3F17E916_var == null) { break; }
            Wait(1.0, c_timeGame);
            UnitBehaviorAddPlayer(auto3F17E916_var, "MechaRemoveA", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, 1);
        }
    }

    if ((UnitGetType(EventUnit()) == "Ghost_BlackOpsSpawnerUnit222332")) {
        libNEXS_gv_mechaAttackPoint = UnitGetPosition(EventUnit());
        auto04DCC2E5_g = UnitGroup("Ghost_BlackOpsSpawnerUnit222332", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto04DCC2E5_u = UnitGroupCount(auto04DCC2E5_g, c_unitCountAll);
        for (;; auto04DCC2E5_u -= 1) {
            auto04DCC2E5_var = UnitGroupUnitFromEnd(auto04DCC2E5_g, auto04DCC2E5_u);
            if (auto04DCC2E5_var == null) { break; }
            if ((UnitHasBehavior2(auto04DCC2E5_var, "MechaRemoveA2") != true)) {
                UnitKill(auto04DCC2E5_var);
            }

        }
        auto83D3E80E_g = UnitGroup(null, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto83D3E80E_u = UnitGroupCount(auto83D3E80E_g, c_unitCountAll);
        for (;; auto83D3E80E_u -= 1) {
            auto83D3E80E_var = UnitGroupUnitFromEnd(auto83D3E80E_g, auto83D3E80E_u);
            if (auto83D3E80E_var == null) { break; }
            if (((UnitHasBehavior2(auto83D3E80E_var, "HHMercenarySpaceStationTimedLife46222") == true) || (UnitHasBehavior2(auto83D3E80E_var, "StukovInfestedTerranTimedLife334") == true) || (UnitHasBehavior2(auto83D3E80E_var, "StukovInfestedTerranTimedLife3342") == true))) {
                UnitIssueOrder(auto83D3E80E_var, OrderTargetingPoint(AbilityCommand("attack", 0), libNEXS_gv_mechaAttackPoint), c_orderQueueReplace);
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E983A8E7BDB2E69CBAE6A2B0E4BFA1E6A087E58F8AE591BDE4BBA4E694BBE587BB_Init () {
    libNEXS_gt_E983A8E7BDB2E69CBAE6A2B0E4BFA1E6A087E58F8AE591BDE4BBA4E694BBE587BB = TriggerCreate("libNEXS_gt_E983A8E7BDB2E69CBAE6A2B0E4BFA1E6A087E58F8AE591BDE4BBA4E694BBE587BB_Func");
    TriggerEnable(libNEXS_gt_E983A8E7BDB2E69CBAE6A2B0E4BFA1E6A087E58F8AE591BDE4BBA4E694BBE587BB, false);
    TriggerAddEventUnitRegion(libNEXS_gt_E983A8E7BDB2E69CBAE6A2B0E4BFA1E6A087E58F8AE591BDE4BBA4E694BBE587BB, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E58CBBE79697E8BF90E8BE93E69CBAE7A7BBE58AA8E58DB8E8BDBD_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medivac;
    point lv_unloadpoint;
    fixed lv_facingangle;
    fixed lv_interpolationperiod;
    fixed lv_interpolationdistance;
    point lv_nextinterpolatedpoint;

    // Automatic Variable Declarations
    unitgroup auto98EC87A4_g;
    int auto98EC87A4_u;
    unit auto98EC87A4_var;

    // Variable Initialization
    lv_medivac = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_unloadpoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_facingangle = UnitGetFacing(lv_medivac);
    lv_interpolationperiod = 0.125;
    lv_interpolationdistance = 1.0;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_medivac) == "Medivac3"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto98EC87A4_g = UnitGroup("RoguePurifierSupportDroneA2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto98EC87A4_u = UnitGroupCount(auto98EC87A4_g, c_unitCountAll);
    for (;; auto98EC87A4_u -= 1) {
        auto98EC87A4_var = UnitGroupUnitFromEnd(auto98EC87A4_g, auto98EC87A4_u);
        if (auto98EC87A4_var == null) { break; }
        UnitRemove(auto98EC87A4_var);
    }
    UnitIssueOrder(lv_medivac, OrderTargetingPoint(AbilityCommand("MedivacTransport", 2), lv_unloadpoint), c_orderQueueReplace);
    lv_interpolationdistance = (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, "Medivac3", "Speed", UnitGetOwner(lv_medivac)) * lv_interpolationperiod);
    lv_nextinterpolatedpoint = PointWithOffsetPolar(UnitGetPosition(lv_medivac), lv_interpolationdistance, lv_facingangle);
    while ((RegionContainsPoint(RegionPlayableMap(), lv_nextinterpolatedpoint) == true)) {
        lv_nextinterpolatedpoint = PointWithOffsetPolar(lv_nextinterpolatedpoint, lv_interpolationdistance, lv_facingangle);
    }
    UnitIssueOrder(lv_medivac, OrderTargetingPoint(AbilityCommand("move", 0), lv_nextinterpolatedpoint), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E58CBBE79697E8BF90E8BE93E69CBAE7A7BBE58AA8E58DB8E8BDBD_Init () {
    libNEXS_gt_E58CBBE79697E8BF90E8BE93E69CBAE7A7BBE58AA8E58DB8E8BDBD = TriggerCreate("libNEXS_gt_E58CBBE79697E8BF90E8BE93E69CBAE7A7BBE58AA8E58DB8E8BDBD_Func");
    TriggerEnable(libNEXS_gt_E58CBBE79697E8BF90E8BE93E69CBAE7A7BBE58AA8E58DB8E8BDBD, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E58CBBE79697E8BF90E8BE93E69CBAE7A7BBE58AA8E58DB8E8BDBD, c_playerAny, "VoodooShieldSet2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B9_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medivac;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_medivac = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(lv_medivac) == "Medivac3")) {
        UnitBehaviorAddPlayer(lv_medivac, "PsionicShockwaveHeightAndStun2233", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B9_Init () {
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B9 = TriggerCreate("libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B9_Func");
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B9, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B9, null, "DestroyMedivac2", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B9, null, "DestroyMedivac2", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????-??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B7_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_capsuleUnit;

    // Automatic Variable Declarations
    unitgroup auto43E63698_g;
    int auto43E63698_u;
    unit auto43E63698_var;

    // Variable Initialization
    lv_capsuleUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    auto43E63698_g = UnitGroup("BioDomeCommandFlying224", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto43E63698_u = UnitGroupCount(auto43E63698_g, c_unitCountAll);
    for (;; auto43E63698_u -= 1) {
        auto43E63698_var = UnitGroupUnitFromEnd(auto43E63698_g, auto43E63698_u);
        if (auto43E63698_var == null) { break; }
        UnitIssueOrder(auto43E63698_var, OrderTargetingUnit(AbilityCommand("VoidSeekerTransport2", 0), lv_capsuleUnit), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B7_Init () {
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B7 = TriggerCreate("libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B7_Func");
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B7, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B7, null, "MutatorBarrier223", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B7, null, "MutatorBarrier223", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????-??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto593573D5_g;
    int auto593573D5_u;
    unit auto593573D5_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Ghost_BlackOpsSpawnerUnit22233")) {
        auto593573D5_g = UnitGroup("BioDomeCommandFlying224", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto593573D5_u = UnitGroupCount(auto593573D5_g, c_unitCountAll);
        for (;; auto593573D5_u -= 1) {
            auto593573D5_var = UnitGroupUnitFromEnd(auto593573D5_g, auto593573D5_u);
            if (auto593573D5_var == null) { break; }
            UnitIssueOrder(auto593573D5_var, OrderTargetingPoint(AbilityCommand("HybridBlink2", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
            Wait(5.5, c_timeGame);
            UnitIssueOrder(auto593573D5_var, OrderTargetingPoint(AbilityCommand("VoidSeekerTransport2", 2), UnitGetPosition(EventUnit())), c_orderQueueReplace);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B8_Init () {
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B8 = TriggerCreate("libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B8_Func");
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B8, false);
    TriggerAddEventUnitRegion(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B8, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5A194E8BEBEE69E97E6ADBBE4BAA1E888B0E9989FE58FACE594A4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "RefineryRich")) {
        if ((libNtve_gf_KillingPlayer() != libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8) && (UnitGroupCount(UnitGroup("RefineryRich", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            if ((UnitGroupCount(UnitGroup("AlarakChampion", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_53F32E76"));
                PlayerCreateEffectPoint(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7, "AlarakACSummonDeathfleet5", UnitGetPosition(EventUnit()));
                TriggerEnable(TriggerGetCurrent(), false);
            }

        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5A194E8BEBEE69E97E6ADBBE4BAA1E888B0E9989FE58FACE594A4_Init () {
    libNEXS_gt_E5A194E8BEBEE69E97E6ADBBE4BAA1E888B0E9989FE58FACE594A4 = TriggerCreate("libNEXS_gt_E5A194E8BEBEE69E97E6ADBBE4BAA1E888B0E9989FE58FACE594A4_Func");
    TriggerEnable(libNEXS_gt_E5A194E8BEBEE69E97E6ADBBE4BAA1E888B0E9989FE58FACE594A4, false);
    TriggerAddEventUnitDied(libNEXS_gt_E5A194E8BEBEE69E97E6ADBBE4BAA1E888B0E9989FE58FACE594A4, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5A4A7E58A9BE7A59EE5889BE5BBBA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hercules3", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, PointWithOffset(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), -8.0, 0.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5A4A7E58A9BE7A59EE5889BE5BBBA_Init () {
    libNEXS_gt_E5A4A7E58A9BE7A59EE5889BE5BBBA = TriggerCreate("libNEXS_gt_E5A4A7E58A9BE7A59EE5889BE5BBBA_Func");
    TriggerEnable(libNEXS_gt_E5A4A7E58A9BE7A59EE5889BE5BBBA, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E5A4A7E58A9BE7A59EE5889BE5BBBA, c_playerAny, "SOAPurifierBeamCU93");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E696AFE58FB0E789B9E69BBCE6ADBBE4BAA1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitDamageDeathCheck(c_deathTypeMorph) != true) && (EventUnitDamageDeathCheck(c_deathTypeCancel) != true) && (EventUnitDamageDeathCheck(c_deathTypeRemove) != true) && (UnitGetType(EventUnit()) == "Henius")) {
        PlayerAddCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, "Abil/CallStmGift", 60.0);
        Wait(0.0625, c_timeGame);
        PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID8, "Abil/CallStmGift", -1.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E696AFE58FB0E789B9E69BBCE6ADBBE4BAA1_Init () {
    libNEXS_gt_E696AFE58FB0E789B9E69BBCE6ADBBE4BAA1 = TriggerCreate("libNEXS_gt_E696AFE58FB0E789B9E69BBCE6ADBBE4BAA1_Func");
    TriggerEnable(libNEXS_gt_E696AFE58FB0E789B9E69BBCE6ADBBE4BAA1, false);
    TriggerAddEventUnitDied(libNEXS_gt_E696AFE58FB0E789B9E69BBCE6ADBBE4BAA1, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bahamut??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B10_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e68190E683A7E58D95E4BD8D;
    point lv_e99A8FE69CBAE4BD8DE782B9;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e68190E683A7E58D95E4BD8D = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_e99A8FE69CBAE4BD8DE782B9 = PointWithOffsetPolar(UnitGetPosition(lv_e68190E683A7E58D95E4BD8D), 1.0, libNtve_gf_RandomAngle());
    UnitIssueOrder(lv_e68190E683A7E58D95E4BD8D, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_e68190E683A7E58D95E4BD8D), -5.0, lv_e99A8FE69CBAE4BD8DE782B9)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    while ((UnitHasBehavior2(lv_e68190E683A7E58D95E4BD8D, "MutatorFear3") == true) && (UnitIsAlive(lv_e68190E683A7E58D95E4BD8D) == true)) {
        UnitIssueOrder(lv_e68190E683A7E58D95E4BD8D, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_e68190E683A7E58D95E4BD8D), 3.0))), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    UnitIssueOrder(lv_e68190E683A7E58D95E4BD8D, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B10_Init () {
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B10 = TriggerCreate("libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B10_Func");
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B10, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B10, null, "MutatorFear3", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B10, null, "MutatorFear3", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BK201??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E5A4A7E5928CE782AEE69AB4E587BB2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_crittexttag;
    int lv_e6ADA6E599A8E4BCA4E5AEB3;
    int lv_e69AB4E587BBE4BCA4E5AEB3;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_crittexttag = c_textTagNone;
    lv_e6ADA6E599A8E4BCA4E5AEB3 = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "InterceptorAiurBeamDamage3", "Amount", 1);
    lv_e69AB4E587BBE4BCA4E5AEB3 = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "UnknownEffect93", "Amount", 1);

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate((FixedToText((lv_e69AB4E587BBE4BCA4E5AEB3 + lv_e6ADA6E599A8E4BCA4E5AEB3), c_fixedPrecisionAny) + StringExternal("Param/Value/lib_NEXS_99D66C2F")), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 3.0, true, false, PlayerGroupAll());
    lv_crittexttag = TextTagLastCreated();
    TextTagSetColor(lv_crittexttag, c_textTagColorText, Color(100.00, 100.00, 0.00));
    TextTagSetVelocity(lv_crittexttag, 0.5, 90.0);
    Wait(1.65, c_timeGame);
    TextTagDestroy(lv_crittexttag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E5A4A7E5928CE782AEE69AB4E587BB2_Init () {
    libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E5A4A7E5928CE782AEE69AB4E587BB2 = TriggerCreate("libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E5A4A7E5928CE782AEE69AB4E587BB2_Func");
    TriggerEnable(libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E5A4A7E5928CE782AEE69AB4E587BB2, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E5A4A7E5928CE782AEE69AB4E587BB2, c_playerAny, "UnknownEffect93");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????Hydra
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E69CBAE6A2B0E5909EE599ACE88085E58F98E5BC82E8A385E5A1ABHydra_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitMagazineArm(EventUnit(), AbilityCommand("ReaverHangar2222", 0), 15);
    UnitSetProgressStage(EventUnit(), 1, c_unitProgressStageCancel);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E69CBAE6A2B0E5909EE599ACE88085E58F98E5BC82E8A385E5A1ABHydra_Init () {
    libNEXS_gt_E69CBAE6A2B0E5909EE599ACE88085E58F98E5BC82E8A385E5A1ABHydra = TriggerCreate("libNEXS_gt_E69CBAE6A2B0E5909EE599ACE88085E58F98E5BC82E8A385E5A1ABHydra_Func");
    TriggerEnable(libNEXS_gt_E69CBAE6A2B0E5909EE599ACE88085E58F98E5BC82E8A385E5A1ABHydra, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E69CBAE6A2B0E5909EE599ACE88085E58F98E5BC82E8A385E5A1ABHydra, null, "SuccessEvoloveT8003", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????Chimz
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E69CBAE6A2B0E5909EE599ACE88085E58F98E5BC82E8A385E5A1ABChimz_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitMagazineArm(EventUnit(), AbilityCommand("ReaverHangar223", 0), 5);
    UnitSetProgressStage(EventUnit(), 1, c_unitProgressStageCancel);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E69CBAE6A2B0E5909EE599ACE88085E58F98E5BC82E8A385E5A1ABChimz_Init () {
    libNEXS_gt_E69CBAE6A2B0E5909EE599ACE88085E58F98E5BC82E8A385E5A1ABChimz = TriggerCreate("libNEXS_gt_E69CBAE6A2B0E5909EE599ACE88085E58F98E5BC82E8A385E5A1ABChimz_Func");
    TriggerEnable(libNEXS_gt_E69CBAE6A2B0E5909EE599ACE88085E58F98E5BC82E8A385E5A1ABChimz, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E69CBAE6A2B0E5909EE599ACE88085E58F98E5BC82E8A385E5A1ABChimz, null, "SuccessEvoloveT80032", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E69CBAE6A2B0E5909EE599ACE88085E68A80E883BDE8A1A5E58585E8A385E5A1AB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitMagazineCount(EventUnit(), "ReaverHangar2222") >= 10)) {
        UnitMagazineArm(EventUnit(), AbilityCommand("ReaverHangar2222", 0), (15 - UnitMagazineCount(EventUnit(), "ReaverHangar2222")));
        UnitSetProgressStage(EventUnit(), 1, c_unitProgressStageCancel);
    }
    else {
        UnitMagazineArm(EventUnit(), AbilityCommand("ReaverHangar2222", 0), 5);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E69CBAE6A2B0E5909EE599ACE88085E68A80E883BDE8A1A5E58585E8A385E5A1AB_Init () {
    libNEXS_gt_E69CBAE6A2B0E5909EE599ACE88085E68A80E883BDE8A1A5E58585E8A385E5A1AB = TriggerCreate("libNEXS_gt_E69CBAE6A2B0E5909EE599ACE88085E68A80E883BDE8A1A5E58585E8A385E5A1AB_Func");
    TriggerEnable(libNEXS_gt_E69CBAE6A2B0E5909EE599ACE88085E68A80E883BDE8A1A5E58585E8A385E5A1AB, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E69CBAE6A2B0E5909EE599ACE88085E68A80E883BDE8A1A5E58585E8A385E5A1AB, null, "X1OverBHH", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_Nafash
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_DUT_Nafash_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup auto3C021952_g;
    int auto3C021952_var;

    // Variable Initialization
    lv_players = libCOMI_gf_PlayersOfCommander("NexusNafash");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(0, "NafashMasteryUpgrade", TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "NafashMasteryUpgrade", c_techCountCompleteOnly));
    TechTreeUpgradeAddLevel(0, "NafashMasteryUpgrade2", TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "NafashMasteryUpgrade2", c_techCountCompleteOnly));
    TechTreeUpgradeAddLevel(0, "NafashMasteryUpgrade32", TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "NafashMasteryUpgrade32", c_techCountCompleteOnly));
    TechTreeUpgradeAddLevel(1, "RCZInfestedMaineUpgradeID2", 1);
    TechTreeUpgradeAddLevel(2, "RCZInfestedMaineUpgradeID2", 1);
    TriggerEnable(libNEXS_gt_E89C82E5B7A2E5B08FE59CB0E59BBEDebug, true);
    TriggerEnable(libNEXS_gt_E89C82E5B7A2E5B08FE59CB0E59BBEE68F90E7A4BADebug, true);
    TriggerEnable(libNEXS_gt_E5A19EE4BCAFE9B281E696AFE4B8BBE5B7A2E4B88EE89C82E5B7A2E695B0E9878FE698BEE7A4BADebug, true);
    TriggerEnable(libNEXS_gt_E89D97E899ABE8AEA1E695B0E4BCA0E692ADE99990E588B6, true);
    TriggerEnable(libNEXS_gt_E89C82E5B7A2E5B08FE59CB0E59BBEE4BCA0E8BE93E789B9E69588, true);
    TriggerEnable(libNEXS_gt_E89C82E5B7A2E4BBB7E6A0BCE69BB4E58F98, true);
    TriggerEnable(libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E7949FE4BAA7, true);
    TriggerEnable(libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E6ADBBE4BAA1, true);
    TriggerEnable(libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E4B88EE88A82E782B9E8BF9BE8A18CE7BB91E5AE9A, true);
    TriggerEnable(libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E7BB91E5AE9AE88A82E782B9E691A7E6AF81, true);
    TriggerEnable(libNEXS_gt_E5A19EE4BCAFE9B281E696AFE59D91E98193E899ABE8A385E5A1AB, true);
    TriggerEnable(libNEXS_gt_E5A19EE4BCAFE9B281E696AFE59D91E98193E899ABE58585E883BDE58D87E7BAA7, true);
    TriggerEnable(libNEXS_gt_E5A19EE4BCAFE9B281E696AFE59D91E98193E899ABE58585E883BDE58F96E6B688, true);
    TriggerEnable(libNEXS_gt_E5A19EE4BCAFE9B281E696AFE4BABAE5B7A5E699BAE883BDE8AF86E588AB, true);
    TriggerEnable(libNEXS_gt_E998BFE5A588E4BCBDE5BBBAE7AD91E68EA7E588B6E4BABAE58FA3E58DA0E794A8, true);
    TriggerEnable(libNEXS_gt_E998BFE5A588E4BCBDE5BBBAE7AD91E68EA7E588B6E58F96E6B688, true);
    TriggerEnable(libNEXS_gt_E998BFE5A588E4BCBDE5BBBAE7AD91E68EA7E588B6E89C82E5B7A2E6909CE7B4A2, true);
    TriggerEnable(libNEXS_gt_E6849FE69F93E88085E7989FE796ABE4BCA4E5AEB3, true);
    TriggerEnable(libNEXS_gt_E5A19EE4BCAFE9B281E696AFE695B0E68DAEE6B581E58887E68DA2, true);
    TriggerEnable(libNEXS_gt_E5A19EE4BCAFE9B281E696AFE695B0E68DAEE6B581E58585E883BD, true);
    TriggerEnable(libNEXS_gt_E5A19EE4BCAFE9B281E696AFE695B0E68DAEE6B581E58585E883BDE5878FE5B091, true);
    TriggerEnable(libNEXS_gt_E89C82E5B7A2E5889DE5A78BE58C96, true);
    TriggerEnable(libNEXS_gt_E89D97E899ABE58F91E5B084E789A9E69588E69E9CE8A2ABE4BDBFE794A8, true);
    TriggerEnable(libNEXS_gt_E696B0E89C82E5B7A2E5BC80E590AFE585A5E4BEB5, true);
    TriggerEnable(libNEXS_gt_E5BC80E590AFE887AAE58AA8E585A5E4BEB5, true);
    TriggerEnable(libNEXS_gt_E585B3E997ADE887AAE58AA8E585A5E4BEB5, true);
    TriggerEnable(libNEXS_gt_E89C82E5B7A2E68A80E883BDE8A2ABE4BDBFE794A8, true);
    TriggerEnable(libNEXS_gt_E89C82E5B7A2E68A80E883BDE58585E883BDE6ACA1E695B0E69BB4E58F98, true);
    TriggerEnable(libNEXS_gt_E7ACACE4B880E58FAAE7BAB3E6B395E8AEB8, true);
    TriggerEnable(libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8007, true);
    TriggerEnable(libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8008, true);
    auto3C021952_g = lv_players;
    auto3C021952_var = -1;
    while (true) {
        auto3C021952_var = PlayerGroupNextPlayer(auto3C021952_g, auto3C021952_var);
        if (auto3C021952_var < 0) { break; }
        libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10 = auto3C021952_var;
        if ((TechTreeUnitIsAllowed(auto3C021952_var, "CerberusCaster") == true)) {
            libCOMI_gf_CreateACCaster(auto3C021952_var, "CerberusCaster");
            libCOMI_gf_CU_GPInitCommonCaster(auto3C021952_var, "CerberusCaster", "Coop_GlobalCastingTemplates/TerranCasterPanelTemplate", "Coop_GlobalCastingTemplates/TerranGlobalCommandPanelTemplate", 4, "Cutscenes\\CommanderGlobalPower_Nafash.SC2Cutscene", "FourButtons");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_DUT_Nafash_Init () {
    libNEXS_gt_DUT_Nafash = TriggerCreate("libNEXS_gt_DUT_Nafash_Func");
    TriggerAddEventGeneric(libNEXS_gt_DUT_Nafash, libCOMI_gv_mISSIONINITIALIZED);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E89C82E5B7A2E5889DE5A78BE58C96_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_e4B88BE7BB84E588B7E696B0E58D95E4BD8DE7BB84;
    point lv_e4BDBFE794A8E7BAB3E6B395E8AEB8E78EA9E5AEB6E79A84E587BAE7949FE782B9;
    point lv_e4B88BE6ACA1E588B7E696B0E4BD8DE7BDAE;
    int lv_e98092E5BD92E6B7B1E5BAA6;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e4B88BE7BB84E588B7E696B0E58D95E4BD8DE7BB84 = UnitGroupEmpty();
    lv_e4BDBFE794A8E7BAB3E6B395E8AEB8E78EA9E5AEB6E79A84E587BAE7949FE782B9 = PlayerStartLocation(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10);
    lv_e98092E5BD92E6B7B1E5BAA6 = 27;

    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() > 0.0625))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_e4BDBFE794A8E7BAB3E6B395E8AEB8E78EA9E5AEB6E79A84E587BAE7949FE782B9 == null)) {
        lv_e4BDBFE794A8E7BAB3E6B395E8AEB8E78EA9E5AEB6E79A84E587BAE7949FE782B9 = CameraGetTarget(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10);
    }

    if ((libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10 > 0)) {
        TimerStart(libNEXS_gv_e588B7E696B0E8AEA1E697B6E599A8, 1.0625, false, c_timeGame);
        libNEXS_gf_E89C82E5B7A2E588B7E696B0E98092E5BD92(lv_e4BDBFE794A8E7BAB3E6B395E8AEB8E78EA9E5AEB6E79A84E587BAE7949FE782B9, PointWithOffset(lv_e4BDBFE794A8E7BAB3E6B395E8AEB8E78EA9E5AEB6E79A84E587BAE7949FE782B9, 1.0, -1.0), lv_e98092E5BD92E6B7B1E5BAA6);
        libNEXS_gf_E89C82E5B7A2E588B7E696B0E98092E5BD92(lv_e4BDBFE794A8E7BAB3E6B395E8AEB8E78EA9E5AEB6E79A84E587BAE7949FE782B9, PointWithOffset(lv_e4BDBFE794A8E7BAB3E6B395E8AEB8E78EA9E5AEB6E79A84E587BAE7949FE782B9, 1.0, 0.0), lv_e98092E5BD92E6B7B1E5BAA6);
        libNEXS_gf_E89C82E5B7A2E588B7E696B0E98092E5BD92(lv_e4BDBFE794A8E7BAB3E6B395E8AEB8E78EA9E5AEB6E79A84E587BAE7949FE782B9, PointWithOffset(lv_e4BDBFE794A8E7BAB3E6B395E8AEB8E78EA9E5AEB6E79A84E587BAE7949FE782B9, -1.0, 1.0), lv_e98092E5BD92E6B7B1E5BAA6);
        libNEXS_gf_E89C82E5B7A2E588B7E696B0E98092E5BD92(lv_e4BDBFE794A8E7BAB3E6B395E8AEB8E78EA9E5AEB6E79A84E587BAE7949FE782B9, PointWithOffset(lv_e4BDBFE794A8E7BAB3E6B395E8AEB8E78EA9E5AEB6E79A84E587BAE7949FE782B9, 0.0, 1.0), lv_e98092E5BD92E6B7B1E5BAA6);
        libNEXS_gf_E89C82E5B7A2E588B7E696B0E98092E5BD92(lv_e4BDBFE794A8E7BAB3E6B395E8AEB8E78EA9E5AEB6E79A84E587BAE7949FE782B9, PointWithOffset(lv_e4BDBFE794A8E7BAB3E6B395E8AEB8E78EA9E5AEB6E79A84E587BAE7949FE782B9, 1.0, -1.0), lv_e98092E5BD92E6B7B1E5BAA6);
        libNEXS_gf_E89C82E5B7A2E588B7E696B0E98092E5BD92(lv_e4BDBFE794A8E7BAB3E6B395E8AEB8E78EA9E5AEB6E79A84E587BAE7949FE782B9, PointWithOffset(lv_e4BDBFE794A8E7BAB3E6B395E8AEB8E78EA9E5AEB6E79A84E587BAE7949FE782B9, 1.0, 0.0), lv_e98092E5BD92E6B7B1E5BAA6);
        libNEXS_gf_E89C82E5B7A2E588B7E696B0E98092E5BD92(lv_e4BDBFE794A8E7BAB3E6B395E8AEB8E78EA9E5AEB6E79A84E587BAE7949FE782B9, PointWithOffset(lv_e4BDBFE794A8E7BAB3E6B395E8AEB8E78EA9E5AEB6E79A84E587BAE7949FE782B9, 1.0, 1.0), lv_e98092E5BD92E6B7B1E5BAA6);
        libNEXS_gf_E89C82E5B7A2E588B7E696B0E98092E5BD92(lv_e4BDBFE794A8E7BAB3E6B395E8AEB8E78EA9E5AEB6E79A84E587BAE7949FE782B9, PointWithOffset(lv_e4BDBFE794A8E7BAB3E6B395E8AEB8E78EA9E5AEB6E79A84E587BAE7949FE782B9, -1.0, -1.0), lv_e98092E5BD92E6B7B1E5BAA6);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E89C82E5B7A2E5889DE5A78BE58C96_Init () {
    libNEXS_gt_E89C82E5B7A2E5889DE5A78BE58C96 = TriggerCreate("libNEXS_gt_E89C82E5B7A2E5889DE5A78BE58C96_Func");
    TriggerEnable(libNEXS_gt_E89C82E5B7A2E5889DE5A78BE58C96, false);
    TriggerAddEventTimePeriodic(libNEXS_gt_E89C82E5B7A2E5889DE5A78BE58C96, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E696B0E89C82E5B7A2E5BC80E590AFE585A5E4BEB5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_e89D97E899ABE8AEA1E695B0;
    fixed lv_e5ADB5E58C96E89D97E899ABCD;
    unitgroup lv_e7BB88E7ABAFE58D95E4BD8DE7BB84;
    unitgroup lv_e4B8BBE5B7A2E58D95E4BD8DE7BB84;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e89D97E899ABE8AEA1E695B0 = UnitBehaviorCount(EventUnit(), "UnknownBehavior83");
    lv_e7BB88E7ABAFE58D95E4BD8DE7BB84 = UnitGroup("CerberusNode2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_e4B8BBE5B7A2E58D95E4BD8DE7BB84 = UnitGroup("CerberusHiveRooted", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNEXS_gv_e5BC80E590AFE887AAE58AA8 == true)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("Snipe3", 0), true), c_orderQueueAddToFront);
    }
    else {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("Snipe3", 0), false), c_orderQueueAddToFront);
    }
    if ((UnitGroupHasUnit(libNEXS_gv_rCZLocustNestControlApplied, EventUnit()) == true)) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("BansheeCloak3", 0)), c_orderQueueAddToEnd);
    }
    else {
        UnitGroupAdd(libNEXS_gv_rCZLocustNestControlApplied, EventUnit());
    }
    lv_e5ADB5E58C96E89D97E899ABCD = MaxF((2.0 / ((SquareRoot(UnitGroupCount(lv_e7BB88E7ABAFE58D95E4BD8DE7BB84, c_unitCountAlive)) / 10.0) + 1.0)), 1.0);
    libNEXS_gv_e89D97E899ABE68A80E883BDE586B7E58DB4 = lv_e5ADB5E58C96E89D97E899ABCD;
    CatalogFieldValueSet(c_gameCatalogEffect, "UnknownEffect173", "Weapon[" + IntToString(0) + "].CooldownAmount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, FixedToString((lv_e5ADB5E58C96E89D97E899ABCD * 1.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "UnknownEffect173", "Weapon[" + IntToString(0) + "].CooldownAmount", 0, FixedToString((lv_e5ADB5E58C96E89D97E899ABCD * 1.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogWeapon, "LocustLaunchCreeperPressurizedGlands22", "Period", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, FixedToString((lv_e5ADB5E58C96E89D97E899ABCD * 3.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogWeapon, "LocustLaunchCreeperPressurizedGlands22", "Period", 0, FixedToString((lv_e5ADB5E58C96E89D97E899ABCD * 3.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "SpawnLocustsTargeted2", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, FixedToString((lv_e5ADB5E58C96E89D97E899ABCD * 3.0), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogAbil, "SpawnLocustsTargeted2", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", 0, FixedToString((lv_e5ADB5E58C96E89D97E899ABCD * 3.0), c_fixedPrecisionAny));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E696B0E89C82E5B7A2E5BC80E590AFE585A5E4BEB5_Init () {
    libNEXS_gt_E696B0E89C82E5B7A2E5BC80E590AFE585A5E4BEB5 = TriggerCreate("libNEXS_gt_E696B0E89C82E5B7A2E5BC80E590AFE585A5E4BEB5_Func");
    TriggerEnable(libNEXS_gt_E696B0E89C82E5B7A2E5BC80E590AFE585A5E4BEB5, false);
    TriggerAddEventUnitAbility(libNEXS_gt_E696B0E89C82E5B7A2E5BC80E590AFE585A5E4BEB5, null, AbilityCommand("UpgradeToGreaterSpire2", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libNEXS_gt_E696B0E89C82E5B7A2E5BC80E590AFE585A5E4BEB5, null, AbilityCommand("UpgradeToGreaterSpire22", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5BC80E590AFE887AAE58AA8E585A5E4BEB5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_e7BB88E7ABAFE58D95E4BD8DE7BB84;
    unitgroup lv_e4B8BBE5B7A2E58D95E4BD8DE7BB84;

    // Automatic Variable Declarations
    unitgroup auto4A79381E_g;
    int auto4A79381E_u;
    unit auto4A79381E_var;
    unitgroup autoCE01888A_g;
    int autoCE01888A_u;
    unit autoCE01888A_var;

    // Variable Initialization
    lv_e7BB88E7ABAFE58D95E4BD8DE7BB84 = UnitGroup("CerberusNode2", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_e4B8BBE5B7A2E58D95E4BD8DE7BB84 = UnitGroup("CerberusHiveRooted", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CerberusHiveRooted"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_e5BC80E590AFE887AAE58AA8 = true;
    auto4A79381E_g = lv_e4B8BBE5B7A2E58D95E4BD8DE7BB84;
    auto4A79381E_u = UnitGroupCount(auto4A79381E_g, c_unitCountAll);
    for (;; auto4A79381E_u -= 1) {
        auto4A79381E_var = UnitGroupUnitFromEnd(auto4A79381E_g, auto4A79381E_u);
        if (auto4A79381E_var == null) { break; }
        UnitIssueOrder(auto4A79381E_var, OrderSetAutoCast(AbilityCommand("Snipe3", 0), true), c_orderQueueAddToFront);
    }
    autoCE01888A_g = lv_e7BB88E7ABAFE58D95E4BD8DE7BB84;
    autoCE01888A_u = UnitGroupCount(autoCE01888A_g, c_unitCountAll);
    for (;; autoCE01888A_u -= 1) {
        autoCE01888A_var = UnitGroupUnitFromEnd(autoCE01888A_g, autoCE01888A_u);
        if (autoCE01888A_var == null) { break; }
        UnitIssueOrder(autoCE01888A_var, OrderSetAutoCast(AbilityCommand("Snipe3", 0), true), c_orderQueueAddToFront);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5BC80E590AFE887AAE58AA8E585A5E4BEB5_Init () {
    libNEXS_gt_E5BC80E590AFE887AAE58AA8E585A5E4BEB5 = TriggerCreate("libNEXS_gt_E5BC80E590AFE887AAE58AA8E585A5E4BEB5_Func");
    TriggerEnable(libNEXS_gt_E5BC80E590AFE887AAE58AA8E585A5E4BEB5, false);
    TriggerAddEventUnitAbilityAutoCastChange(libNEXS_gt_E5BC80E590AFE887AAE58AA8E585A5E4BEB5, null, AbilityCommand("Snipe3", 0), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E585B3E997ADE887AAE58AA8E585A5E4BEB5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_e7BB88E7ABAFE58D95E4BD8DE7BB84;
    unitgroup lv_e4B8BBE5B7A2E58D95E4BD8DE7BB84;

    // Automatic Variable Declarations
    unitgroup auto721EB564_g;
    int auto721EB564_u;
    unit auto721EB564_var;
    unitgroup autoD124B7D2_g;
    int autoD124B7D2_u;
    unit autoD124B7D2_var;

    // Variable Initialization
    lv_e7BB88E7ABAFE58D95E4BD8DE7BB84 = UnitGroup("CerberusNode2", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_e4B8BBE5B7A2E58D95E4BD8DE7BB84 = UnitGroup("CerberusHiveRooted", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CerberusHiveRooted"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_e5BC80E590AFE887AAE58AA8 = false;
    auto721EB564_g = lv_e4B8BBE5B7A2E58D95E4BD8DE7BB84;
    auto721EB564_u = UnitGroupCount(auto721EB564_g, c_unitCountAll);
    for (;; auto721EB564_u -= 1) {
        auto721EB564_var = UnitGroupUnitFromEnd(auto721EB564_g, auto721EB564_u);
        if (auto721EB564_var == null) { break; }
        UnitIssueOrder(auto721EB564_var, OrderSetAutoCast(AbilityCommand("Snipe3", 0), false), c_orderQueueAddToFront);
    }
    autoD124B7D2_g = lv_e7BB88E7ABAFE58D95E4BD8DE7BB84;
    autoD124B7D2_u = UnitGroupCount(autoD124B7D2_g, c_unitCountAll);
    for (;; autoD124B7D2_u -= 1) {
        autoD124B7D2_var = UnitGroupUnitFromEnd(autoD124B7D2_g, autoD124B7D2_u);
        if (autoD124B7D2_var == null) { break; }
        UnitIssueOrder(autoD124B7D2_var, OrderSetAutoCast(AbilityCommand("Snipe3", 0), false), c_orderQueueAddToFront);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E585B3E997ADE887AAE58AA8E585A5E4BEB5_Init () {
    libNEXS_gt_E585B3E997ADE887AAE58AA8E585A5E4BEB5 = TriggerCreate("libNEXS_gt_E585B3E997ADE887AAE58AA8E585A5E4BEB5_Func");
    TriggerEnable(libNEXS_gt_E585B3E997ADE887AAE58AA8E585A5E4BEB5, false);
    TriggerAddEventUnitAbilityAutoCastChange(libNEXS_gt_E585B3E997ADE887AAE58AA8E585A5E4BEB5, null, AbilityCommand("Snipe3", 0), c_unitAbilAutoCastChangeOff, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E89D97E899ABE8AEA1E695B0E4BCA0E692ADE99990E588B6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitTechTreeBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitSource), "UnknownBehavior84", c_techCountQueuedOrBetter) > (UnitTechTreeBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitTarget), "UnknownBehavior84", c_techCountQueuedOrBetter) + 1))) {
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitSource), "UnknownEffect16932", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E89D97E899ABE8AEA1E695B0E4BCA0E692ADE99990E588B6_Init () {
    libNEXS_gt_E89D97E899ABE8AEA1E695B0E4BCA0E692ADE99990E588B6 = TriggerCreate("libNEXS_gt_E89D97E899ABE8AEA1E695B0E4BCA0E692ADE99990E588B6_Func");
    TriggerEnable(libNEXS_gt_E89D97E899ABE8AEA1E695B0E4BCA0E692ADE99990E588B6, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E89D97E899ABE8AEA1E695B0E4BCA0E692ADE99990E588B6, c_playerAny, "UnknownEffect169322");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E89D97E899ABE58F91E5B084E789A9E69588E69E9CE8A2ABE4BDBFE794A8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNEXS_gv_e585B3E997ADE89D97E899ABE58F91E5B084E789A9E6BC94E7AE97E4BD93 == false)) {
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitSource), "UnknownEffect170", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    }
    else {
        Wait((DistanceBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource))) / 4.0), c_timeGame);
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitSource), "UnknownEffect16722", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E89D97E899ABE58F91E5B084E789A9E69588E69E9CE8A2ABE4BDBFE794A8_Init () {
    libNEXS_gt_E89D97E899ABE58F91E5B084E789A9E69588E69E9CE8A2ABE4BDBFE794A8 = TriggerCreate("libNEXS_gt_E89D97E899ABE58F91E5B084E789A9E69588E69E9CE8A2ABE4BDBFE794A8_Func");
    TriggerEnable(libNEXS_gt_E89D97E899ABE58F91E5B084E789A9E69588E69E9CE8A2ABE4BDBFE794A8, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E89D97E899ABE58F91E5B084E789A9E69588E69E9CE8A2ABE4BDBFE794A8, c_playerAny, "UnknownEffect1693222");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E89C82E5B7A2E5B08FE59CB0E59BBEE4BCA0E8BE93E789B9E69588_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PingSetScale(PingLastCreated(), 0.5);
    PingSetUnit(PingLastCreated(), EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E89C82E5B7A2E5B08FE59CB0E59BBEE4BCA0E8BE93E789B9E69588_Init () {
    libNEXS_gt_E89C82E5B7A2E5B08FE59CB0E59BBEE4BCA0E8BE93E789B9E69588 = TriggerCreate("libNEXS_gt_E89C82E5B7A2E5B08FE59CB0E59BBEE4BCA0E8BE93E789B9E69588_Func");
    TriggerEnable(libNEXS_gt_E89C82E5B7A2E5B08FE59CB0E59BBEE4BCA0E8BE93E789B9E69588, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E89C82E5B7A2E5B08FE59CB0E59BBEE4BCA0E8BE93E789B9E69588, c_playerAny, "UnknownEffect170");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E89C82E5B7A2E4BBB7E6A0BCE69BB4E58F98_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_rCZLocustNestMount += 1;
    CatalogFieldValueSet(c_gameCatalogEffect, "RCZLocustNestMount", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, IntToString(libNEXS_gv_rCZLocustNestMount));
    CatalogFieldValueSet(c_gameCatalogEffect, "RCZLocustNestMount", "Amount", 0, IntToString(libNEXS_gv_rCZLocustNestMount));
    UnitGroupAdd(libNEXS_gv_rCZLocustNest, EventUnit());
    CatalogFieldValueSet(c_gameCatalogAbil, "Snipe3", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeMinerals) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, IntToString((20 + (SquareRootI(UnitGroupCount(libNEXS_gv_rCZLocustNest, c_unitCountAlive)) * 10))));
    CatalogFieldValueSet(c_gameCatalogAbil, "Snipe3", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeMinerals) + "]", 0, IntToString((20 + (SquareRootI(UnitGroupCount(libNEXS_gv_rCZLocustNest, c_unitCountAlive)) * 10))));
    CatalogFieldValueSet(c_gameCatalogValidator, "UnknownValidator41", "Value", 0, IntToString((25 + (SquareRootI(UnitGroupCount(libNEXS_gv_rCZLocustNest, c_unitCountAlive)) * 10))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E89C82E5B7A2E4BBB7E6A0BCE69BB4E58F98_Init () {
    libNEXS_gt_E89C82E5B7A2E4BBB7E6A0BCE69BB4E58F98 = TriggerCreate("libNEXS_gt_E89C82E5B7A2E4BBB7E6A0BCE69BB4E58F98_Func");
    TriggerEnable(libNEXS_gt_E89C82E5B7A2E4BBB7E6A0BCE69BB4E58F98, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E89C82E5B7A2E4BBB7E6A0BCE69BB4E58F98, null, "RCZControlNest", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E89C82E5B7A2E68A80E883BDE8A2ABE4BDBFE794A8_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_e89D97E899ABE8AEA1E695B0;
    fixed lv_e68A80E883BDE586B7E58DB4;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e89D97E899ABE8AEA1E695B0 = UnitBehaviorCount(EventUnit(), "UnknownBehavior83");

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CerberusNode2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_e68A80E883BDE586B7E58DB4 = (libNEXS_gv_e89D97E899ABE68A80E883BDE586B7E58DB4 * MinI(lv_e89D97E899ABE8AEA1E695B0, 3));
    UnitWeaponSetPeriodRemaining(EventUnit(), 1, (lv_e68A80E883BDE586B7E58DB4 * 16.0));
    UnitAbilityReset(EventUnit(), EventUnitAbility(), c_spendLocationAll);
    UnitAbilityAddCooldown(EventUnit(), "SpawnLocustsTargeted2", "Abil/SpawnLocustsTargeted2", lv_e68A80E883BDE586B7E58DB4);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E89C82E5B7A2E68A80E883BDE8A2ABE4BDBFE794A8_Init () {
    libNEXS_gt_E89C82E5B7A2E68A80E883BDE8A2ABE4BDBFE794A8 = TriggerCreate("libNEXS_gt_E89C82E5B7A2E68A80E883BDE8A2ABE4BDBFE794A8_Func");
    TriggerEnable(libNEXS_gt_E89C82E5B7A2E68A80E883BDE8A2ABE4BDBFE794A8, false);
    TriggerAddEventUnitAbility(libNEXS_gt_E89C82E5B7A2E68A80E883BDE8A2ABE4BDBFE794A8, null, AbilityCommand("SpawnLocustsTargeted2", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E89C82E5B7A2E68A80E883BDE58585E883BDE6ACA1E695B0E69BB4E58F98_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_e89C82E5B7A2;
    int lv_e89D97E899ABE8AEA1E695B0;
    fixed lv_e5ADB5E58C96E89D97E899ABCD;

    // Automatic Variable Declarations
    unitgroup autoE7AB142E_g;
    int autoE7AB142E_u;
    unit autoE7AB142E_var;

    // Variable Initialization
    lv_e89C82E5B7A2 = UnitGroup("CerberusNode2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_e89D97E899ABE8AEA1E695B0 = UnitBehaviorCount(EventUnit(), "UnknownBehavior83");

    // Actions
    if (!runActions) {
        return true;
    }

    autoE7AB142E_g = lv_e89C82E5B7A2;
    autoE7AB142E_u = UnitGroupCount(autoE7AB142E_g, c_unitCountAll);
    for (;; autoE7AB142E_u -= 1) {
        autoE7AB142E_var = UnitGroupUnitFromEnd(autoE7AB142E_g, autoE7AB142E_u);
        if (autoE7AB142E_var == null) { break; }
        libNtve_gf_UnitAbilityRemoveChargeUsed(autoE7AB142E_var, "SpawnLocustsTargeted2", "Abil/SpawnLocustsTargeted2");
        UnitAbilityAddChargeUsed(autoE7AB142E_var, "SpawnLocustsTargeted2", "Abil/SpawnLocustsTargeted2", (45 - UnitBehaviorCount(autoE7AB142E_var, "UnknownBehavior83")));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E89C82E5B7A2E68A80E883BDE58585E883BDE6ACA1E695B0E69BB4E58F98_Init () {
    libNEXS_gt_E89C82E5B7A2E68A80E883BDE58585E883BDE6ACA1E695B0E69BB4E58F98 = TriggerCreate("libNEXS_gt_E89C82E5B7A2E68A80E883BDE58585E883BDE6ACA1E695B0E69BB4E58F98_Func");
    TriggerEnable(libNEXS_gt_E89C82E5B7A2E68A80E883BDE58585E883BDE6ACA1E695B0E69BB4E58F98, false);
    TriggerAddEventTimePeriodic(libNEXS_gt_E89C82E5B7A2E68A80E883BDE58585E883BDE6ACA1E695B0E69BB4E58F98, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E4B88EE88A82E782B9E8BF9BE8A18CE7BB91E5AE9A_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rCZUnitConnectionExist;
    int lv_rCZUnitConnectionJudge;
    unitgroup lv_rCZUnitConnectionGroupTemporary;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rCZUnitConnectionGroupTemporary = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lv_rCZUnitConnectionGroupTemporary, EventPlayerEffectUsedUnit(c_effectUnitCaster));
    UnitGroupAdd(lv_rCZUnitConnectionGroupTemporary, EventPlayerEffectUsedUnit(c_effectUnitTarget));
    while ((lv_rCZUnitConnectionJudge <= libNEXS_gv_rCZUnitConnectionMount)) {
        if ((UnitGroupHasUnit(libNEXS_gv_rCZUnitConnectionGroup[lv_rCZUnitConnectionJudge], EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true)) {
            UnitGroupClear(libNEXS_gv_rCZUnitConnectionGroup[lv_rCZUnitConnectionJudge]);
            UnitGroupAddUnitGroup(libNEXS_gv_rCZUnitConnectionGroup[lv_rCZUnitConnectionJudge], lv_rCZUnitConnectionGroupTemporary);
            UnitGroupClear(lv_rCZUnitConnectionGroupTemporary);
            lv_rCZUnitConnectionExist = 1;
            break;
        }
        else {
            lv_rCZUnitConnectionJudge += 1;
        }
    }
    if ((lv_rCZUnitConnectionExist == 0)) {
        UnitGroupAddUnitGroup(libNEXS_gv_rCZUnitConnectionGroup[libNEXS_gv_rCZUnitConnectionMount], lv_rCZUnitConnectionGroupTemporary);
        UnitGroupClear(lv_rCZUnitConnectionGroupTemporary);
        libNEXS_gv_rCZUnitConnectionMount += 1;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E4B88EE88A82E782B9E8BF9BE8A18CE7BB91E5AE9A_Init () {
    libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E4B88EE88A82E782B9E8BF9BE8A18CE7BB91E5AE9A = TriggerCreate("libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E4B88EE88A82E782B9E8BF9BE8A18CE7BB91E5AE9A_Func");
    TriggerEnable(libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E4B88EE88A82E782B9E8BF9BE8A18CE7BB91E5AE9A, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E4B88EE88A82E782B9E8BF9BE8A18CE7BB91E5AE9A, c_playerAny, "TimeWarpControllerABTarget52");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E7949FE4BAA7_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rCZUnitConnectionJudge;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_rCZUnitConnectionJudge <= libNEXS_gv_rCZUnitConnectionMount)) {
        if ((UnitGroupHasUnit(libNEXS_gv_rCZUnitConnectionGroup[lv_rCZUnitConnectionJudge], EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true)) {
            UnitSetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(UnitGroupUnit(libNEXS_gv_rCZUnitConnectionGroup[lv_rCZUnitConnectionJudge], 2)), -1.5, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster))), false);
            break;
        }
        else {
            lv_rCZUnitConnectionJudge += 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E7949FE4BAA7_Init () {
    libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E7949FE4BAA7 = TriggerCreate("libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E7949FE4BAA7_Func");
    TriggerEnable(libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E7949FE4BAA7, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E7949FE4BAA7, c_playerAny, "TimeWarpControllerABTarget522");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E6ADBBE4BAA1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rCZUnitConnectionJudge;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "CerberusHiveRooted") || (UnitGetType(EventUnit()) == "CerberusHive")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_rCZHiveMount -= 1;
    CatalogFieldValueSet(c_gameCatalogEffect, "RCZHiveMount", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, IntToString(libNEXS_gv_rCZHiveMount));
    CatalogFieldValueSet(c_gameCatalogEffect, "RCZHiveMount", "Amount", 0, IntToString(libNEXS_gv_rCZHiveMount));
    while ((lv_rCZUnitConnectionJudge <= libNEXS_gv_rCZUnitConnectionMount)) {
        if ((UnitGroupHasUnit(libNEXS_gv_rCZUnitConnectionGroup[lv_rCZUnitConnectionJudge], EventUnit()) == true)) {
            UnitGroupClear(libNEXS_gv_rCZUnitConnectionGroup[lv_rCZUnitConnectionJudge]);
            break;
        }
        else {
            lv_rCZUnitConnectionJudge += 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E6ADBBE4BAA1_Init () {
    libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E6ADBBE4BAA1 = TriggerCreate("libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E6ADBBE4BAA1_Func");
    TriggerEnable(libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E6ADBBE4BAA1, false);
    TriggerAddEventUnitDied(libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E6ADBBE4BAA1, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E7BB91E5AE9AE88A82E782B9E691A7E6AF81_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rCZUnitConnectionJudge;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(libNEXS_gv_rCZLocustNest, EventPlayerEffectUsedUnit(c_effectUnitTarget));
    CatalogFieldValueSet(c_gameCatalogAbil, "Snipe3", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeMinerals) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, IntToString((20 + (SquareRootI(UnitGroupCount(libNEXS_gv_rCZLocustNest, c_unitCountAlive)) * 10))));
    CatalogFieldValueSet(c_gameCatalogAbil, "Snipe3", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeMinerals) + "]", 0, IntToString((20 + (SquareRootI(UnitGroupCount(libNEXS_gv_rCZLocustNest, c_unitCountAlive)) * 10))));
    libNEXS_gv_rCZLocustNestMount -= 1;
    CatalogFieldValueSet(c_gameCatalogEffect, "RCZLocustNestMount", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, IntToString(libNEXS_gv_rCZLocustNestMount));
    CatalogFieldValueSet(c_gameCatalogEffect, "RCZLocustNestMount", "Amount", 0, IntToString(libNEXS_gv_rCZLocustNestMount));
    while ((lv_rCZUnitConnectionJudge <= libNEXS_gv_rCZUnitConnectionMount)) {
        if ((UnitGroupHasUnit(libNEXS_gv_rCZUnitConnectionGroup[lv_rCZUnitConnectionJudge], EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true)) {
            UnitGroupClear(libNEXS_gv_rCZUnitConnectionGroup[lv_rCZUnitConnectionJudge]);
        }
        else {
            lv_rCZUnitConnectionJudge += 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E7BB91E5AE9AE88A82E782B9E691A7E6AF81_Init () {
    libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E7BB91E5AE9AE88A82E782B9E691A7E6AF81 = TriggerCreate("libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E7BB91E5AE9AE88A82E782B9E691A7E6AF81_Func");
    TriggerEnable(libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E7BB91E5AE9AE88A82E782B9E691A7E6AF81, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E7BB91E5AE9AE88A82E782B9E691A7E6AF81, c_playerAny, "SnipeDamage432");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5A19EE4BCAFE9B281E696AFE695B0E68DAEE6B581E58887E68DA2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA501156A_g;
    int autoA501156A_u;
    unit autoA501156A_var;
    unitgroup autoE7A166C1_g;
    int autoE7A166C1_u;
    unit autoE7A166C1_var;
    unitgroup auto1C300D80_g;
    int auto1C300D80_u;
    unit auto1C300D80_var;
    unitgroup auto414C3E81_g;
    int auto414C3E81_u;
    unit auto414C3E81_var;
    unitgroup autoE7FBDB1B_g;
    int autoE7FBDB1B_u;
    unit autoE7FBDB1B_var;
    unitgroup auto766733F8_g;
    int auto766733F8_u;
    unit auto766733F8_var;
    unitgroup auto2C04925D_g;
    int auto2C04925D_u;
    unit auto2C04925D_var;
    unitgroup autoB068D4B7_g;
    int autoB068D4B7_u;
    unit autoB068D4B7_var;
    unitgroup auto5FC44474_g;
    int auto5FC44474_u;
    unit auto5FC44474_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CerberusAI"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("RCZLocustGetData", 0))) {
        autoA501156A_g = UnitGroup("CerberusCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA501156A_u = UnitGroupCount(autoA501156A_g, c_unitCountAll);
        for (;; autoA501156A_u -= 1) {
            autoA501156A_var = UnitGroupUnitFromEnd(autoA501156A_g, autoA501156A_u);
            if (autoA501156A_var == null) { break; }
            UnitCreateEffectUnit(autoA501156A_var, "NafashLocustNestGetData2", autoA501156A_var);
        }
    }

    if ((EventUnitAbility() == AbilityCommand("RCZLocustGetData2", 0))) {
        autoE7A166C1_g = UnitGroup("CerberusCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE7A166C1_u = UnitGroupCount(autoE7A166C1_g, c_unitCountAll);
        for (;; autoE7A166C1_u -= 1) {
            autoE7A166C1_var = UnitGroupUnitFromEnd(autoE7A166C1_g, autoE7A166C1_u);
            if (autoE7A166C1_var == null) { break; }
            UnitCreateEffectUnit(autoE7A166C1_var, "NafashLocustNestGetData22", autoE7A166C1_var);
        }
    }

    if ((EventUnitAbility() == AbilityCommand("RCZLocustGetData22", 0))) {
        auto1C300D80_g = UnitGroup("CerberusCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1C300D80_u = UnitGroupCount(auto1C300D80_g, c_unitCountAll);
        for (;; auto1C300D80_u -= 1) {
            auto1C300D80_var = UnitGroupUnitFromEnd(auto1C300D80_g, auto1C300D80_u);
            if (auto1C300D80_var == null) { break; }
            UnitCreateEffectUnit(auto1C300D80_var, "NafashLocustNestGetData222", auto1C300D80_var);
        }
    }

    if ((EventUnitAbility() == AbilityCommand("RCZLocustGetData222", 0))) {
        auto414C3E81_g = UnitGroup("CerberusCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto414C3E81_u = UnitGroupCount(auto414C3E81_g, c_unitCountAll);
        for (;; auto414C3E81_u -= 1) {
            auto414C3E81_var = UnitGroupUnitFromEnd(auto414C3E81_g, auto414C3E81_u);
            if (auto414C3E81_var == null) { break; }
            UnitCreateEffectUnit(auto414C3E81_var, "NafashLocustNestGetData2222", auto414C3E81_var);
        }
    }

    if ((EventUnitAbility() == AbilityCommand("RCZLocustGetData2222", 0))) {
        autoE7FBDB1B_g = UnitGroup("CerberusCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE7FBDB1B_u = UnitGroupCount(autoE7FBDB1B_g, c_unitCountAll);
        for (;; autoE7FBDB1B_u -= 1) {
            autoE7FBDB1B_var = UnitGroupUnitFromEnd(autoE7FBDB1B_g, autoE7FBDB1B_u);
            if (autoE7FBDB1B_var == null) { break; }
            UnitCreateEffectUnit(autoE7FBDB1B_var, "NafashLocustNestGetData22222", autoE7FBDB1B_var);
        }
    }

    if ((EventUnitAbility() == AbilityCommand("RCZLocustGetData22222", 0))) {
        auto766733F8_g = UnitGroup("CerberusCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto766733F8_u = UnitGroupCount(auto766733F8_g, c_unitCountAll);
        for (;; auto766733F8_u -= 1) {
            auto766733F8_var = UnitGroupUnitFromEnd(auto766733F8_g, auto766733F8_u);
            if (auto766733F8_var == null) { break; }
            UnitCreateEffectUnit(auto766733F8_var, "NafashLocustNestGetData222222", auto766733F8_var);
        }
    }

    if ((EventUnitAbility() == AbilityCommand("RCZLocustGetData222222", 0))) {
        auto2C04925D_g = UnitGroup("CerberusCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto2C04925D_u = UnitGroupCount(auto2C04925D_g, c_unitCountAll);
        for (;; auto2C04925D_u -= 1) {
            auto2C04925D_var = UnitGroupUnitFromEnd(auto2C04925D_g, auto2C04925D_u);
            if (auto2C04925D_var == null) { break; }
            UnitCreateEffectUnit(auto2C04925D_var, "NafashLocustNestGetData2222222", auto2C04925D_var);
        }
    }

    if ((EventUnitAbility() == AbilityCommand("RCZLocustGetData2222222", 0))) {
        autoB068D4B7_g = UnitGroup("CerberusCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB068D4B7_u = UnitGroupCount(autoB068D4B7_g, c_unitCountAll);
        for (;; autoB068D4B7_u -= 1) {
            autoB068D4B7_var = UnitGroupUnitFromEnd(autoB068D4B7_g, autoB068D4B7_u);
            if (autoB068D4B7_var == null) { break; }
            UnitCreateEffectUnit(autoB068D4B7_var, "NafashLocustNestGetData22222222", autoB068D4B7_var);
        }
    }

    if ((EventUnitAbility() == AbilityCommand("RCZLocustGetData22222222", 0))) {
        auto5FC44474_g = UnitGroup("CerberusCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto5FC44474_u = UnitGroupCount(auto5FC44474_g, c_unitCountAll);
        for (;; auto5FC44474_u -= 1) {
            auto5FC44474_var = UnitGroupUnitFromEnd(auto5FC44474_g, auto5FC44474_u);
            if (auto5FC44474_var == null) { break; }
            UnitCreateEffectUnit(auto5FC44474_var, "NafashLocustNestGetData222222222", auto5FC44474_var);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5A19EE4BCAFE9B281E696AFE695B0E68DAEE6B581E58887E68DA2_Init () {
    libNEXS_gt_E5A19EE4BCAFE9B281E696AFE695B0E68DAEE6B581E58887E68DA2 = TriggerCreate("libNEXS_gt_E5A19EE4BCAFE9B281E696AFE695B0E68DAEE6B581E58887E68DA2_Func");
    TriggerEnable(libNEXS_gt_E5A19EE4BCAFE9B281E696AFE695B0E68DAEE6B581E58887E68DA2, false);
    TriggerAddEventUnitAbility(libNEXS_gt_E5A19EE4BCAFE9B281E696AFE695B0E68DAEE6B581E58887E68DA2, null, null, c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5A19EE4BCAFE9B281E696AFE695B0E68DAEE6B581E58585E883BD_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_nafashLocustNestRandomMount;

    // Automatic Variable Declarations
    unitgroup auto37494811_g;
    int auto37494811_u;
    unit auto37494811_var;
    unitgroup auto1E633554_g;
    int auto1E633554_u;
    unit auto1E633554_var;
    unitgroup auto9263582C_g;
    int auto9263582C_u;
    unit auto9263582C_var;
    unitgroup auto136FD5A7_g;
    int auto136FD5A7_u;
    unit auto136FD5A7_var;
    unitgroup autoFED64A5B_g;
    int autoFED64A5B_u;
    unit autoFED64A5B_var;
    unitgroup auto761C5364_g;
    int auto761C5364_u;
    unit auto761C5364_var;
    unitgroup autoEB85E3DE_g;
    int autoEB85E3DE_u;
    unit autoEB85E3DE_var;
    unitgroup autoF09A8533_g;
    int autoF09A8533_u;
    unit autoF09A8533_var;
    unitgroup autoF08B9BE1_g;
    int autoF08B9BE1_u;
    unit autoF08B9BE1_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnit(), "UnknownBehavior83", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 6);
    UnitBehaviorAddPlayer(EventUnit(), "UnknownBehavior84", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 6);
    if ((UnitHasBehavior2(EventUnit(), "CyberCSH2") == true)) {
        UnitBehaviorRemove(EventUnit(), "CyberCSH2", 1);
        lv_nafashLocustNestRandomMount = RandomInt(1, 9);
        if ((lv_nafashLocustNestRandomMount == 1)) {
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "Abil/NafashLocustNestBFX", -1.0);
            TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "RCZLocustNestMountUpgradeIncrease", 1);
            libNtve_gf_AttachActorToUnit(EventUnit(), "RCZLocustNestDataTextBFX", "Ref_Head");
            auto37494811_g = UnitGroup("CerberusAI", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto37494811_u = UnitGroupCount(auto37494811_g, c_unitCountAll);
            for (;; auto37494811_u -= 1) {
                auto37494811_var = UnitGroupUnitFromEnd(auto37494811_g, auto37494811_u);
                if (auto37494811_var == null) { break; }
                libNtve_gf_AttachActorToUnit(auto37494811_var, "RCZLocustNestDataTextBFX", "Ref_Head");
            }
        }

        if ((lv_nafashLocustNestRandomMount == 2)) {
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "Abil/NafashLocustNestWY", -1.0);
            TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "RCZLocustNestMountUpgradeIncrease2", 1);
            libNtve_gf_AttachActorToUnit(EventUnit(), "RCZLocustNestDataTextWY", "Ref_Head");
            auto1E633554_g = UnitGroup("CerberusAI", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto1E633554_u = UnitGroupCount(auto1E633554_g, c_unitCountAll);
            for (;; auto1E633554_u -= 1) {
                auto1E633554_var = UnitGroupUnitFromEnd(auto1E633554_g, auto1E633554_u);
                if (auto1E633554_var == null) { break; }
                libNtve_gf_AttachActorToUnit(auto1E633554_var, "RCZLocustNestDataTextWY", "Ref_Head");
            }
        }

        if ((lv_nafashLocustNestRandomMount == 3)) {
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "Abil/NafashLocustNestHCJS", -1.0);
            TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "RCZLocustNestMountUpgradeIncrease22", 1);
            libNtve_gf_AttachActorToUnit(EventUnit(), "RCZLocustNestDataTextHCJS", "Ref_Head");
            auto9263582C_g = UnitGroup("CerberusAI", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto9263582C_u = UnitGroupCount(auto9263582C_g, c_unitCountAll);
            for (;; auto9263582C_u -= 1) {
                auto9263582C_var = UnitGroupUnitFromEnd(auto9263582C_g, auto9263582C_u);
                if (auto9263582C_var == null) { break; }
                libNtve_gf_AttachActorToUnit(auto9263582C_var, "RCZLocustNestDataTextHCJS", "Ref_Head");
            }
        }

        if ((lv_nafashLocustNestRandomMount == 4)) {
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "Abil/NafashLocustNestBN", -1.0);
            TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "RCZLocustNestMountUpgradeIncrease222", 1);
            libNtve_gf_AttachActorToUnit(EventUnit(), "RCZLocustNestDataTextBN", "Ref_Head");
            auto136FD5A7_g = UnitGroup("CerberusAI", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto136FD5A7_u = UnitGroupCount(auto136FD5A7_g, c_unitCountAll);
            for (;; auto136FD5A7_u -= 1) {
                auto136FD5A7_var = UnitGroupUnitFromEnd(auto136FD5A7_g, auto136FD5A7_u);
                if (auto136FD5A7_var == null) { break; }
                libNtve_gf_AttachActorToUnit(auto136FD5A7_var, "RCZLocustNestDataTextBN", "Ref_Head");
            }
        }

        if ((lv_nafashLocustNestRandomMount == 5)) {
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "Abil/NafashLocustNestZZ", -1.0);
            TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "RCZLocustNestMountUpgradeIncrease2222", 1);
            libNtve_gf_AttachActorToUnit(EventUnit(), "RCZLocustNestDataTextZZ", "Ref_Head");
            autoFED64A5B_g = UnitGroup("CerberusAI", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoFED64A5B_u = UnitGroupCount(autoFED64A5B_g, c_unitCountAll);
            for (;; autoFED64A5B_u -= 1) {
                autoFED64A5B_var = UnitGroupUnitFromEnd(autoFED64A5B_g, autoFED64A5B_u);
                if (autoFED64A5B_var == null) { break; }
                libNtve_gf_AttachActorToUnit(autoFED64A5B_var, "RCZLocustNestDataTextZZ", "Ref_Head");
            }
        }

        if ((lv_nafashLocustNestRandomMount == 6)) {
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "Abil/NafashLocustNestCC", -1.0);
            TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "RCZLocustNestMountUpgradeIncrease22222", 1);
            libNtve_gf_AttachActorToUnit(EventUnit(), "RCZLocustNestDataTextCC", "Ref_Head");
            auto761C5364_g = UnitGroup("CerberusAI", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto761C5364_u = UnitGroupCount(auto761C5364_g, c_unitCountAll);
            for (;; auto761C5364_u -= 1) {
                auto761C5364_var = UnitGroupUnitFromEnd(auto761C5364_g, auto761C5364_u);
                if (auto761C5364_var == null) { break; }
                libNtve_gf_AttachActorToUnit(auto761C5364_var, "RCZLocustNestDataTextCC", "Ref_Head");
            }
        }

        if ((lv_nafashLocustNestRandomMount == 7)) {
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "Abil/NafashLocustNestXBWR", -1.0);
            TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "RCZLocustNestMountUpgradeIncrease222222", 1);
            libNtve_gf_AttachActorToUnit(EventUnit(), "RCZLocustNestDataTextXBWR", "Ref_Head");
            autoEB85E3DE_g = UnitGroup("CerberusAI", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoEB85E3DE_u = UnitGroupCount(autoEB85E3DE_g, c_unitCountAll);
            for (;; autoEB85E3DE_u -= 1) {
                autoEB85E3DE_var = UnitGroupUnitFromEnd(autoEB85E3DE_g, autoEB85E3DE_u);
                if (autoEB85E3DE_var == null) { break; }
                libNtve_gf_AttachActorToUnit(autoEB85E3DE_var, "RCZLocustNestDataTextXBWR", "Ref_Head");
            }
        }

        if ((lv_nafashLocustNestRandomMount == 8)) {
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "Abil/NafashLocustNestNMGZ", -1.0);
            TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "RCZLocustNestMountUpgradeIncrease2222222", 1);
            libNtve_gf_AttachActorToUnit(EventUnit(), "RCZLocustNestDataTextNMGZ", "Ref_Head");
            autoF09A8533_g = UnitGroup("CerberusAI", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoF09A8533_u = UnitGroupCount(autoF09A8533_g, c_unitCountAll);
            for (;; autoF09A8533_u -= 1) {
                autoF09A8533_var = UnitGroupUnitFromEnd(autoF09A8533_g, autoF09A8533_u);
                if (autoF09A8533_var == null) { break; }
                libNtve_gf_AttachActorToUnit(autoF09A8533_var, "RCZLocustNestDataTextNMGZ", "Ref_Head");
            }
        }

        if ((lv_nafashLocustNestRandomMount == 9)) {
            PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "Abil/NafashLocustNestNLGZ", -1.0);
            TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "RCZLocustNestMountUpgradeIncrease22222222", 1);
            libNtve_gf_AttachActorToUnit(EventUnit(), "RCZLocustNestDataTextNLGZ", "Ref_Head");
            autoF08B9BE1_g = UnitGroup("CerberusAI", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoF08B9BE1_u = UnitGroupCount(autoF08B9BE1_g, c_unitCountAll);
            for (;; autoF08B9BE1_u -= 1) {
                autoF08B9BE1_var = UnitGroupUnitFromEnd(autoF08B9BE1_g, autoF08B9BE1_u);
                if (autoF08B9BE1_var == null) { break; }
                libNtve_gf_AttachActorToUnit(autoF08B9BE1_var, "RCZLocustNestDataTextNLGZ", "Ref_Head");
            }
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5A19EE4BCAFE9B281E696AFE695B0E68DAEE6B581E58585E883BD_Init () {
    libNEXS_gt_E5A19EE4BCAFE9B281E696AFE695B0E68DAEE6B581E58585E883BD = TriggerCreate("libNEXS_gt_E5A19EE4BCAFE9B281E696AFE695B0E68DAEE6B581E58585E883BD_Func");
    TriggerEnable(libNEXS_gt_E5A19EE4BCAFE9B281E696AFE695B0E68DAEE6B581E58585E883BD, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E5A19EE4BCAFE9B281E696AFE695B0E68DAEE6B581E58585E883BD, null, "RCZControlNest2", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5A19EE4BCAFE9B281E696AFE695B0E68DAEE6B581E58585E883BDE5878FE5B091_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CerberusCaster"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("NafashLocustNestItemAB", 0))) {
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "RCZLocustNestMountUpgradeIncrease3", 1);
    }

    if ((EventUnitAbility() == AbilityCommand("NafashLocustNestItemAB2", 0))) {
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "RCZLocustNestMountUpgradeIncrease23", 1);
    }

    if ((EventUnitAbility() == AbilityCommand("NafashLocustNestItemAB22", 0))) {
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "RCZLocustNestMountUpgradeIncrease223", 1);
    }

    if ((EventUnitAbility() == AbilityCommand("NafashLocustNestItemAB222", 0))) {
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "RCZLocustNestMountUpgradeIncrease2223", 1);
    }

    if ((EventUnitAbility() == AbilityCommand("NafashLocustNestItemAB223", 0))) {
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "RCZLocustNestMountUpgradeIncrease22223", 1);
    }

    if ((EventUnitAbility() == AbilityCommand("NafashLocustNestItemAB2224", 0))) {
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "RCZLocustNestMountUpgradeIncrease222223", 1);
    }

    if ((EventUnitAbility() == AbilityCommand("NafashLocustNestItemAB2223", 0))) {
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "RCZLocustNestMountUpgradeIncrease2222223", 1);
    }

    if ((EventUnitAbility() == AbilityCommand("NafashLocustNestItemAB22232", 0))) {
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "RCZLocustNestMountUpgradeIncrease22222223", 1);
    }

    if ((EventUnitAbility() == AbilityCommand("NafashLocustNestItemAB2222", 0))) {
        TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "RCZLocustNestMountUpgradeIncrease222222222", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5A19EE4BCAFE9B281E696AFE695B0E68DAEE6B581E58585E883BDE5878FE5B091_Init () {
    libNEXS_gt_E5A19EE4BCAFE9B281E696AFE695B0E68DAEE6B581E58585E883BDE5878FE5B091 = TriggerCreate("libNEXS_gt_E5A19EE4BCAFE9B281E696AFE695B0E68DAEE6B581E58585E883BDE5878FE5B091_Func");
    TriggerEnable(libNEXS_gt_E5A19EE4BCAFE9B281E696AFE695B0E68DAEE6B581E58585E883BDE5878FE5B091, false);
    TriggerAddEventUnitAbility(libNEXS_gt_E5A19EE4BCAFE9B281E696AFE695B0E68DAEE6B581E58585E883BDE5878FE5B091, null, null, c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5A19EE4BCAFE9B281E696AFE4BABAE5B7A5E699BAE883BDE8AF86E588AB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (true) {
        UnitBehaviorAddPlayer(EventUnit(), "RCZHologramAI222222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    }

    if (true) {
        UnitBehaviorAddPlayer(EventUnit(), "RCZHologramAI3", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    }

    if (true) {
        UnitBehaviorAddPlayer(EventUnit(), "RCZHologramAI2222222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    }

    if (true) {
        UnitBehaviorAddPlayer(EventUnit(), "RCZHologramAI22222222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    }

    if (true) {
        UnitBehaviorAddPlayer(EventUnit(), "RCZHologramAI2222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    }

    if (true) {
        UnitBehaviorAddPlayer(EventUnit(), "RCZHologramAI22222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    }

    if (true) {
        UnitBehaviorAddPlayer(EventUnit(), "RCZHologramAI22", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    }

    if (true) {
        UnitBehaviorAddPlayer(EventUnit(), "RCZHologramAI222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    }

    if (true) {
        UnitBehaviorAddPlayer(EventUnit(), "RCZHologramAI", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    }

    if (true) {
        UnitBehaviorAddPlayer(EventUnit(), "RCZHologramAI2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    }

    if (true) {
        UnitBehaviorAddPlayer(EventUnit(), "RCZHologramAI32", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    }

    if (true) {
        UnitBehaviorAddPlayer(EventUnit(), "RCZHologramAI3222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    }

    if (true) {
        UnitBehaviorAddPlayer(EventUnit(), "RCZHologramAI322", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    }

    if (true) {
        UnitBehaviorAddPlayer(EventUnit(), "RCZHologramAINew", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    }

    if (true) {
        UnitBehaviorAddPlayer(EventUnit(), "RCZHologramAINew23", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    }

    if (true) {
        UnitBehaviorAddPlayer(EventUnit(), "RCZHologramAINew42", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    }

    if (true) {
        UnitBehaviorAddPlayer(EventUnit(), "RCZHologramAINew3", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    }

    if (true) {
        UnitBehaviorAddPlayer(EventUnit(), "RCZHologramAINew2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    }

    if (true) {
        UnitBehaviorAddPlayer(EventUnit(), "RCZHologramAINew4", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    }

    if (true) {
        UnitBehaviorAddPlayer(EventUnit(), "RCZHologramAINew5", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    }

    if (true) {
        UnitBehaviorAddPlayer(EventUnit(), "RCZHologramAINew22", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    }

    if (true) {
        UnitBehaviorAddPlayer(EventUnit(), "RCZHologramAINew222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    }

    if (true) {
        UnitBehaviorAddPlayer(EventUnit(), "RCZHologramAINew62", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    }

    if (true) {
        UnitBehaviorAddPlayer(EventUnit(), "RCZHologramAINew6", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    }

    if (true) {
        UnitBehaviorAddPlayer(EventUnit(), "RCZHologramAINew52", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    }

    if (true) {
        UnitBehaviorAddPlayer(EventUnit(), "RCZHologramAINew522", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    }

    if (true) {
        UnitBehaviorAddPlayer(EventUnit(), "RCZHologramAINew5222", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5A19EE4BCAFE9B281E696AFE4BABAE5B7A5E699BAE883BDE8AF86E588AB_Init () {
    libNEXS_gt_E5A19EE4BCAFE9B281E696AFE4BABAE5B7A5E699BAE883BDE8AF86E588AB = TriggerCreate("libNEXS_gt_E5A19EE4BCAFE9B281E696AFE4BABAE5B7A5E699BAE883BDE8AF86E588AB_Func");
    TriggerEnable(libNEXS_gt_E5A19EE4BCAFE9B281E696AFE4BABAE5B7A5E699BAE883BDE8AF86E588AB, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E5A19EE4BCAFE9B281E696AFE4BABAE5B7A5E699BAE883BDE8AF86E588AB, null, "RCZHologramOpen", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5A19EE4BCAFE9B281E696AFE59D91E98193E899ABE58585E883BDE58D87E7BAA7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "RCZNydusUpgrade", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5A19EE4BCAFE9B281E696AFE59D91E98193E899ABE58585E883BDE58D87E7BAA7_Init () {
    libNEXS_gt_E5A19EE4BCAFE9B281E696AFE59D91E98193E899ABE58585E883BDE58D87E7BAA7 = TriggerCreate("libNEXS_gt_E5A19EE4BCAFE9B281E696AFE59D91E98193E899ABE58585E883BDE58D87E7BAA7_Func");
    TriggerEnable(libNEXS_gt_E5A19EE4BCAFE9B281E696AFE59D91E98193E899ABE58585E883BDE58D87E7BAA7, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E5A19EE4BCAFE9B281E696AFE59D91E98193E899ABE58585E883BDE58D87E7BAA7, null, "UnknownBehavior8102", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5A19EE4BCAFE9B281E696AFE59D91E98193E899ABE58585E883BDE58F96E6B688_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "RCZNydusUpgrade2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5A19EE4BCAFE9B281E696AFE59D91E98193E899ABE58585E883BDE58F96E6B688_Init () {
    libNEXS_gt_E5A19EE4BCAFE9B281E696AFE59D91E98193E899ABE58585E883BDE58F96E6B688 = TriggerCreate("libNEXS_gt_E5A19EE4BCAFE9B281E696AFE59D91E98193E899ABE58585E883BDE58F96E6B688_Func");
    TriggerEnable(libNEXS_gt_E5A19EE4BCAFE9B281E696AFE59D91E98193E899ABE58585E883BDE58F96E6B688, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E5A19EE4BCAFE9B281E696AFE59D91E98193E899ABE58585E883BDE58F96E6B688, null, "UnknownBehavior8102", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5A19EE4BCAFE9B281E696AFE59D91E98193E899ABE8A385E5A1AB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CerberusNydusWorm"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCargoCreate(EventUnit(), "CerberusZergling", 18);
    UnitCargoCreate(EventUnit(), "CerberusBaneling", 12);
    UnitCargoCreate(EventUnit(), "CerberusHydralisk", 6);
    Wait(5.5, c_timeGame);
    while ((UnitIsAlive(EventUnit()) == true)) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("NydusCanalTransport3", 1)), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5A19EE4BCAFE9B281E696AFE59D91E98193E899ABE8A385E5A1AB_Init () {
    libNEXS_gt_E5A19EE4BCAFE9B281E696AFE59D91E98193E899ABE8A385E5A1AB = TriggerCreate("libNEXS_gt_E5A19EE4BCAFE9B281E696AFE59D91E98193E899ABE8A385E5A1AB_Func");
    TriggerEnable(libNEXS_gt_E5A19EE4BCAFE9B281E696AFE59D91E98193E899ABE8A385E5A1AB, false);
    TriggerAddEventUnitRegion(libNEXS_gt_E5A19EE4BCAFE9B281E696AFE59D91E98193E899ABE8A385E5A1AB, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E998BFE5A588E4BCBDE5BBBAE7AD91E68EA7E588B6E4BABAE58FA3E58DA0E794A8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, c_playerPropSuppliesUsed, c_playerPropOperAdd, 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E998BFE5A588E4BCBDE5BBBAE7AD91E68EA7E588B6E4BABAE58FA3E58DA0E794A8_Init () {
    libNEXS_gt_E998BFE5A588E4BCBDE5BBBAE7AD91E68EA7E588B6E4BABAE58FA3E58DA0E794A8 = TriggerCreate("libNEXS_gt_E998BFE5A588E4BCBDE5BBBAE7AD91E68EA7E588B6E4BABAE58FA3E58DA0E794A8_Func");
    TriggerEnable(libNEXS_gt_E998BFE5A588E4BCBDE5BBBAE7AD91E68EA7E588B6E4BABAE58FA3E58DA0E794A8, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E998BFE5A588E4BCBDE5BBBAE7AD91E68EA7E588B6E4BABAE58FA3E58DA0E794A8, null, "RCZDataCoreUG2", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E998BFE5A588E4BCBDE5BBBAE7AD91E68EA7E588B6E4BABAE58FA3E58DA0E794A8, null, "RCZDataCoreUG2", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E998BFE5A588E4BCBDE5BBBAE7AD91E68EA7E588B6E58F96E6B688_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, c_playerPropSuppliesUsed, c_playerPropOperSubtract, 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E998BFE5A588E4BCBDE5BBBAE7AD91E68EA7E588B6E58F96E6B688_Init () {
    libNEXS_gt_E998BFE5A588E4BCBDE5BBBAE7AD91E68EA7E588B6E58F96E6B688 = TriggerCreate("libNEXS_gt_E998BFE5A588E4BCBDE5BBBAE7AD91E68EA7E588B6E58F96E6B688_Func");
    TriggerEnable(libNEXS_gt_E998BFE5A588E4BCBDE5BBBAE7AD91E68EA7E588B6E58F96E6B688, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E998BFE5A588E4BCBDE5BBBAE7AD91E68EA7E588B6E58F96E6B688, null, "RCZDataCoreUG2", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E998BFE5A588E4BCBDE5BBBAE7AD91E68EA7E588B6E89C82E5B7A2E6909CE7B4A2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8966E379_g;
    int auto8966E379_u;
    unit auto8966E379_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "PrimalUltralisk2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8966E379_g = UnitGroup("CerberusNode", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8966E379_u = UnitGroupCount(auto8966E379_g, c_unitCountAll);
    for (;; auto8966E379_u -= 1) {
        auto8966E379_var = UnitGroupUnitFromEnd(auto8966E379_g, auto8966E379_u);
        if (auto8966E379_var == null) { break; }
        PlayerCreateEffectUnit(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "SnipeDamage42", auto8966E379_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E998BFE5A588E4BCBDE5BBBAE7AD91E68EA7E588B6E89C82E5B7A2E6909CE7B4A2_Init () {
    libNEXS_gt_E998BFE5A588E4BCBDE5BBBAE7AD91E68EA7E588B6E89C82E5B7A2E6909CE7B4A2 = TriggerCreate("libNEXS_gt_E998BFE5A588E4BCBDE5BBBAE7AD91E68EA7E588B6E89C82E5B7A2E6909CE7B4A2_Func");
    TriggerEnable(libNEXS_gt_E998BFE5A588E4BCBDE5BBBAE7AD91E68EA7E588B6E89C82E5B7A2E6909CE7B4A2, false);
    TriggerAddEventUnitDied(libNEXS_gt_E998BFE5A588E4BCBDE5BBBAE7AD91E68EA7E588B6E89C82E5B7A2E6909CE7B4A2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6849FE69F93E88085E7989FE796ABE4BCA4E5AEB3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLife, (UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLife, c_unitPropCurrent) - (5.0 * UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropMovementSpeedCurrent, c_unitPropCurrent))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6849FE69F93E88085E7989FE796ABE4BCA4E5AEB3_Init () {
    libNEXS_gt_E6849FE69F93E88085E7989FE796ABE4BCA4E5AEB3 = TriggerCreate("libNEXS_gt_E6849FE69F93E88085E7989FE796ABE4BCA4E5AEB3_Func");
    TriggerEnable(libNEXS_gt_E6849FE69F93E88085E7989FE796ABE4BCA4E5AEB3, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E6849FE69F93E88085E7989FE796ABE4BCA4E5AEB3, c_playerAny, "StukovInfestedDiamondSlimePuddleDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E7ACACE4B880E58FAAE7BAB3E6B395E8AEB8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CerberusQueen"))) {
            return false;
        }

        if (!((libNEXS_gv_nafashQueenAmount == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_nafashQueenAmount = 1;
    UnitSetScale(EventUnit(), 125.0, 125.0, 125.0);
    UnitSetInfoText(EventUnit(), StringExternal("Param/Value/lib_NEXS_4DFA0195"), StringExternal("Param/Value/lib_NEXS_82FE3762"), StringToText(""));
    UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, 600.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, 600.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropLifeRegen, 5.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyMax, 400.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, 200.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, 2.5);
    UnitSetPropertyFixed(EventUnit(), c_unitPropBaseMovementSpeed, 2.75);
    UnitBehaviorAddPlayer(EventUnit(), "DamageQuad", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    UnitBehaviorAddPlayer(EventUnit(), "RCZInfestorNT", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, 1);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E7ACACE4B880E58FAAE7BAB3E6B395E8AEB8_Init () {
    libNEXS_gt_E7ACACE4B880E58FAAE7BAB3E6B395E8AEB8 = TriggerCreate("libNEXS_gt_E7ACACE4B880E58FAAE7BAB3E6B395E8AEB8_Func");
    TriggerEnable(libNEXS_gt_E7ACACE4B880E58FAAE7BAB3E6B395E8AEB8, false);
    TriggerAddEventUnitRegion(libNEXS_gt_E7ACACE4B880E58FAAE7BAB3E6B395E8AEB8, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????648????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8007_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUpgrade() == "Cerberus648"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(EventUnit(), "TreasureGoblinsMineral10Spawn22222", UnitGetPosition(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8007_Init () {
    libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8007 = TriggerCreate("libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8007_Func");
    TriggerEnable(libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8007, false);
    TriggerAddEventUnitResearchProgress(libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8007, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????648??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8008_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_nafashTreasureCount;
    int lv_nafashTreasureXXX;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nafashTreasureCount = RandomInt(1, 100);
    lv_nafashTreasureXXX = RandomInt(1, 2);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_nafashTreasureCount <= 90)) {
        if ((lv_nafashTreasureXXX == 1)) {
            UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TreasureGoblinsMineral10Spawn223", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
        }
        else {
            UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TreasureGoblinsMineral10Spawn2232", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
        }
    }

    if ((lv_nafashTreasureCount == 90)) {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TreasureGoblinsMineral10Spawn22322", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    }

    if ((lv_nafashTreasureCount > 90)) {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TreasureGoblinsMineral10Spawn22323", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8008_Init () {
    libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8008 = TriggerCreate("libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8008_Func");
    TriggerEnable(libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8008, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8008, c_playerAny, "TreasureGoblinsMineral10Spawn23");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????????????????Debug
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5A19EE4BCAFE9B281E696AFE4B8BBE5B7A2E4B88EE89C82E5B7A2E695B0E9878FE698BEE7A4BADebug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_rCZHiveMount += 1;
    CatalogFieldValueSet(c_gameCatalogEffect, "RCZHiveMount", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, IntToString(libNEXS_gv_rCZHiveMount));
    CatalogFieldValueSet(c_gameCatalogEffect, "RCZHiveMount", "Amount", 0, IntToString(libNEXS_gv_rCZHiveMount));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5A19EE4BCAFE9B281E696AFE4B8BBE5B7A2E4B88EE89C82E5B7A2E695B0E9878FE698BEE7A4BADebug_Init () {
    libNEXS_gt_E5A19EE4BCAFE9B281E696AFE4B8BBE5B7A2E4B88EE89C82E5B7A2E695B0E9878FE698BEE7A4BADebug = TriggerCreate("libNEXS_gt_E5A19EE4BCAFE9B281E696AFE4B8BBE5B7A2E4B88EE89C82E5B7A2E695B0E9878FE698BEE7A4BADebug_Func");
    TriggerEnable(libNEXS_gt_E5A19EE4BCAFE9B281E696AFE4B8BBE5B7A2E4B88EE89C82E5B7A2E695B0E9878FE698BEE7A4BADebug, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E5A19EE4BCAFE9B281E696AFE4B8BBE5B7A2E4B88EE89C82E5B7A2E695B0E9878FE698BEE7A4BADebug, null, "UnknownBehavior810", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????Debug
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E89C82E5B7A2E5B08FE59CB0E59BBEDebug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_11FFCB4F"));
    libNEXS_gv_e585B3E997ADE89D97E899ABE58F91E5B084E789A9E6BC94E7AE97E4BD93 = true;
    TriggerEnable(libNEXS_gt_E89C82E5B7A2E5B08FE59CB0E59BBEE4BCA0E8BE93E789B9E69588, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E89C82E5B7A2E5B08FE59CB0E59BBEDebug_Init () {
    libNEXS_gt_E89C82E5B7A2E5B08FE59CB0E59BBEDebug = TriggerCreate("libNEXS_gt_E89C82E5B7A2E5B08FE59CB0E59BBEDebug_Func");
    TriggerEnable(libNEXS_gt_E89C82E5B7A2E5B08FE59CB0E59BBEDebug, false);
    TriggerAddEventChatMessage(libNEXS_gt_E89C82E5B7A2E5B08FE59CB0E59BBEDebug, c_playerAny, "-RemoveLE", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????Debug
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E89C82E5B7A2E5B08FE59CB0E59BBEE68F90E7A4BADebug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E89C82E5B7A2E5B08FE59CB0E59BBEE68F90E7A4BADebug_Init () {
    libNEXS_gt_E89C82E5B7A2E5B08FE59CB0E59BBEE68F90E7A4BADebug = TriggerCreate("libNEXS_gt_E89C82E5B7A2E5B08FE59CB0E59BBEE68F90E7A4BADebug_Func");
    TriggerEnable(libNEXS_gt_E89C82E5B7A2E5B08FE59CB0E59BBEE68F90E7A4BADebug, false);
    TriggerAddEventTimePeriodic(libNEXS_gt_E89C82E5B7A2E5B08FE59CB0E59BBEE68F90E7A4BADebug, 600.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????(??????)
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E586B0E59D97E5889BE5BBBAE5B8B8E9A9BB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto36BE301B_g;
    int auto36BE301B_u;
    unit auto36BE301B_var;
    unitgroup auto1B70E927_g;
    int auto1B70E927_u;
    unit auto1B70E927_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Hive3")) {
        CreepModify(UnitGetPosition(EventUnit()), 13.0, false, false);
        auto36BE301B_g = UnitGroup("MineralField", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto36BE301B_u = UnitGroupCount(auto36BE301B_g, c_unitCountAll);
        for (;; auto36BE301B_u -= 1) {
            auto36BE301B_var = UnitGroupUnitFromEnd(auto36BE301B_g, auto36BE301B_u);
            if (auto36BE301B_var == null) { break; }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DestructibleIce4x422", 0, UnitGetOwner(EventUnit()), UnitGetPosition(auto36BE301B_var));
        }
        auto1B70E927_g = UnitGroup("VespeneGeyser", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1B70E927_u = UnitGroupCount(auto1B70E927_g, c_unitCountAll);
        for (;; auto1B70E927_u -= 1) {
            auto1B70E927_var = UnitGroupUnitFromEnd(auto1B70E927_g, auto1B70E927_u);
            if (auto1B70E927_var == null) { break; }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DestructibleIce4x42", 0, UnitGetOwner(EventUnit()), UnitGetPosition(auto1B70E927_var));
        }
    }

    if ((UnitGetType(EventUnit()) == "DumpTruck2")) {
        if ((((UnitGetOwner(EventUnit()) == 1) && (PlayerType(1) != c_playerTypeUser)) || ((UnitGetOwner(EventUnit()) == 2) && (PlayerType(2) != c_playerTypeUser)))) {
            PlayerSetAlliance(1, c_allianceIdControl, 2, true);
            PlayerSetAlliance(2, c_allianceIdControl, 1, true);
        }

    }

    if ((UnitGetType(EventUnit()) == "DumpTruck2")) {
        if ((((UnitGetOwner(EventUnit()) == 1) && (PlayerType(2) != c_playerTypeUser)) || ((UnitGetOwner(EventUnit()) == 2) && (PlayerType(1) != c_playerTypeUser)))) {
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E586B0E59D97E5889BE5BBBAE5B8B8E9A9BB_Init () {
    libNEXS_gt_E586B0E59D97E5889BE5BBBAE5B8B8E9A9BB = TriggerCreate("libNEXS_gt_E586B0E59D97E5889BE5BBBAE5B8B8E9A9BB_Func");
    TriggerAddEventUnitRegion(libNEXS_gt_E586B0E59D97E5889BE5BBBAE5B8B8E9A9BB, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E89F91E89E82E694B6E8978FE5AEB6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7ABCA816_g;
    int auto7ABCA816_u;
    unit auto7ABCA816_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnit()) == "Roach") || (UnitGetType(EventUnit()) == "RoachBurrowed"))) {
        auto7ABCA816_g = UnitGroup("Hive3", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto7ABCA816_u = UnitGroupCount(auto7ABCA816_g, c_unitCountAll);
        for (;; auto7ABCA816_u -= 1) {
            auto7ABCA816_var = UnitGroupUnitFromEnd(auto7ABCA816_g, auto7ABCA816_u);
            if (auto7ABCA816_var == null) { break; }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach2", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, UnitGetPosition(auto7ABCA816_var));
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E89F91E89E82E694B6E8978FE5AEB6_Init () {
    libNEXS_gt_E89F91E89E82E694B6E8978FE5AEB6 = TriggerCreate("libNEXS_gt_E89F91E89E82E694B6E8978FE5AEB6_Func");
    TriggerEnable(libNEXS_gt_E89F91E89E82E694B6E8978FE5AEB6, false);
    TriggerAddEventUnitDied(libNEXS_gt_E89F91E89E82E694B6E8978FE5AEB6, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E68998E9A9ACE696AFE58D87E7BAA7E7B3BBE7BB9F_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, "NafashCar", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E68998E9A9ACE696AFE58D87E7BAA7E7B3BBE7BB9F_Init () {
    libNEXS_gt_E68998E9A9ACE696AFE58D87E7BAA7E7B3BBE7BB9F = TriggerCreate("libNEXS_gt_E68998E9A9ACE696AFE58D87E7BAA7E7B3BBE7BB9F_Func");
    TriggerEnable(libNEXS_gt_E68998E9A9ACE696AFE58D87E7BAA7E7B3BBE7BB9F, false);
    TriggerAddEventTimePeriodic(libNEXS_gt_E68998E9A9ACE696AFE58D87E7BAA7E7B3BBE7BB9F, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E78BACE79CBCE5B7A8E4BABAE7B4A7E680A5E68A98E8B783_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto524A71D4_g;
    int auto524A71D4_u;
    unit auto524A71D4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Hive3")) {
        auto524A71D4_g = UnitGroup("SIOverlord22", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto524A71D4_u = UnitGroupCount(auto524A71D4_g, c_unitCountAll);
        for (;; auto524A71D4_u -= 1) {
            auto524A71D4_var = UnitGroupUnitFromEnd(auto524A71D4_g, auto524A71D4_u);
            if (auto524A71D4_var == null) { break; }
            UnitRemove(auto524A71D4_var);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E78BACE79CBCE5B7A8E4BABAE7B4A7E680A5E68A98E8B783_Init () {
    libNEXS_gt_E78BACE79CBCE5B7A8E4BABAE7B4A7E680A5E68A98E8B783 = TriggerCreate("libNEXS_gt_E78BACE79CBCE5B7A8E4BABAE7B4A7E680A5E68A98E8B783_Func");
    TriggerEnable(libNEXS_gt_E78BACE79CBCE5B7A8E4BABAE7B4A7E680A5E68A98E8B783, false);
    TriggerAddEventUnitDied(libNEXS_gt_E78BACE79CBCE5B7A8E4BABAE7B4A7E680A5E68A98E8B783, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E586B0E586BBE78E8BE899ABE69D80E6ADBB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto07265FB2_g;
    int auto07265FB2_u;
    unit auto07265FB2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto07265FB2_g = UnitGroup("Hive3", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto07265FB2_u = UnitGroupCount(auto07265FB2_g, c_unitCountAll);
    for (;; auto07265FB2_u -= 1) {
        auto07265FB2_var = UnitGroupUnitFromEnd(auto07265FB2_g, auto07265FB2_u);
        if (auto07265FB2_var == null) { break; }
        UnitCreateEffectUnit(EventUnit(), "KerriganEpilogue03CreepTeleportPrepare2", auto07265FB2_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E586B0E586BBE78E8BE899ABE69D80E6ADBB_Init () {
    libNEXS_gt_E586B0E586BBE78E8BE899ABE69D80E6ADBB = TriggerCreate("libNEXS_gt_E586B0E586BBE78E8BE899ABE69D80E6ADBB_Func");
    TriggerEnable(libNEXS_gt_E586B0E586BBE78E8BE899ABE69D80E6ADBB, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E586B0E586BBE78E8BE899ABE69D80E6ADBB, null, "Blockinstinct22", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_Karass
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_DUT_Karass_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;
    int lv_karassEnermy;

    // Automatic Variable Declarations
    const int autoDC28D0CD_ae = 10;
    const int autoDC28D0CD_ai = 1;
    playergroup auto68C40BD2_g;
    int auto68C40BD2_var;

    // Variable Initialization
    lv_players = libCOMI_gf_PlayersOfCommander("NexusKarass");
    lv_karassEnermy = 6;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "CandaUpgrade1ST", c_techCountCompleteOnly) == 1)) {
        lv_karassEnermy = 3;
        for ( ; ( (autoDC28D0CD_ai >= 0 && lv_karassEnermy <= autoDC28D0CD_ae) || (autoDC28D0CD_ai < 0 && lv_karassEnermy >= autoDC28D0CD_ae) ) ; lv_karassEnermy += autoDC28D0CD_ai ) {
            TechTreeUpgradeAddLevel(lv_karassEnermy, "CandaUpgrade1ST", 1);
        }
    }

    CatalogFieldValueSet(c_gameCatalogBehavior, "WarpPrismPowerSource", "PowerLevel", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, IntToString(2));
    TriggerEnable(libNEXS_gt_E58DA1E68B89E696AFE4B88EE9AB98E7BAA7E58D95E4BD8DE8BF9BE585A5E59CB0E59BBE, true);
    TriggerEnable(libNEXS_gt_E58DA1E68B89E696AFE58D95E4BD8DE68A98E8B783E9A29CE889B2, true);
    TriggerEnable(libNEXS_gt_E98197E4B896E79FB3E7A291E9A29CE889B2, true);
    TriggerEnable(libNEXS_gt_E983A8E7BDB2E98197E4B896E79FB3E7A291, true);
    TriggerEnable(libNEXS_gt_E58FAFE4BBA5E983A8E7BDB2E98197E4B896E79FB3E7A291, true);
    TriggerEnable(libNEXS_gt_E58DA1E68B89E696AFE6ADBBE4BAA1, true);
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B12, true);
    TriggerEnable(libNEXS_gt_E58DA1E68B89E696AFE8999AE7A9BAE8A7A6E587BBE997AAE78EB0, true);
    TriggerEnable(libNEXS_gt_E69D80E7949FE4B89AE68AA5E58F96E587BA, true);
    TriggerEnable(libNEXS_gt_E6A380E6B58BE588B0, true);
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B14, true);
    TriggerEnable(libNEXS_gt_E689A7E694BFE5AE98E883BDE9878FE58F8DE89A80, true);
    TriggerEnable(libNEXS_gt_E8999AE7A9BAE5B7A8E5838FE587BBE69D80E58D95E4BD8DE8BDACE58C96, true);
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B15, true);
    TriggerEnable(libNEXS_gt_E9A38EE69AB4E5AEA3E8A880E781B5E883BDE9A38EE69AB4, true);
    TriggerEnable(libNEXS_gt_E98197E4B896E7A5ADE59D9BE883BDE9878FE59B9EE5A48D, true);
    TriggerEnable(libNEXS_gt_E6B3BDE5B0BCE696AFE6B0B4E699B6E58F8DE587BB, true);
    TriggerEnable(libNEXS_gt_E58DA1E68B89E696AFE5A48DE6B4BBE588A4E5AE9A, true);
    TriggerEnable(libNEXS_gt_E58DA1E68B89E696AFE6ADBBE4BAA1E588A4E5AE9A, true);
    TriggerEnable(libNEXS_gt_E58DA1E68B89E696AFE5889DE6ACA1E5A48DE6B4BBE588A4E5AE9A, true);
    TriggerEnable(libNEXS_gt_E6B3BDE5B0BCE696AFE6B0B4E699B6E887AAE58AA8E998B2E5BEA1E8819AE58F98E68993E587BB, true);
    TriggerEnable(libNEXS_gt_E6B3BDE5B0BCE696AFE6B0B4E699B6E5BBBAE980A0E5AE8CE6AF95, true);
    TriggerEnable(libNEXS_gt_E5AE88E68AA4E88085E6ADBBE4BAA1E586B7E58DB4, true);
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B18, true);
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B16, true);
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B17, true);
    TriggerEnable(libNEXS_gt_E6989FE781B5E69EA2E7BABDE699B6E4BD93E79FBFE58E8BE7BCA9, true);
    UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9), AbilityCommand("SOAPurifierBeam1022", 0), true);
    UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9), AbilityCommand("SOAPurifierBeam10224", 0), true);
    UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9), AbilityCommand("SOAPurifierBeam102242", 0), true);
    UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9), AbilityCommand("SOAPurifierBeam10223", 0), true);
    UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9), AbilityCommand("SOAPurifierBeam102233", 0), true);
    UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9), AbilityCommand("SOAPurifierBeam1022332", 0), true);
    UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9), AbilityCommand("SOAPurifierBeam102232", 0), true);
    UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9), AbilityCommand("SOAPurifierBeam1022323", 0), true);
    UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9), AbilityCommand("SOAPurifierBeam10223232", 0), true);
    UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9), AbilityCommand("SOAPurifierBeam1022322", 0), true);
    UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9), AbilityCommand("SOAPurifierBeam10223222", 0), true);
    UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9), AbilityCommand("SOAPurifierBeam102232222", 0), true);
    if (((true) || (true))) {
        Wait(2.2, c_timeGame);
        SoundPlayForPlayer(SoundLink("HH_FleetCallDown_Siren_2D9225322", -1), c_maxPlayers, PlayerGroupAll(), 80.0, 0.0);
        Wait(8.0, c_timeGame);
        SoundPlayForPlayer(SoundLink("HH_FleetCallDown_Siren_2D92253222", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
        Wait(7.0, c_timeGame);
        SoundPlayForPlayer(SoundLink("HH_FleetCallDown_Siren_2D922532222", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    auto68C40BD2_g = lv_players;
    auto68C40BD2_var = -1;
    while (true) {
        auto68C40BD2_var = PlayerGroupNextPlayer(auto68C40BD2_g, auto68C40BD2_var);
        if (auto68C40BD2_var < 0) { break; }
        libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9 = auto68C40BD2_var;
        if ((TechTreeUnitIsAllowed(auto68C40BD2_var, "KarassCaster") == true)) {
            libCOMI_gf_CreateACCaster(auto68C40BD2_var, "KarassCaster");
            libCOMI_gf_CU_GPInitCommonCaster(auto68C40BD2_var, "KarassCaster", "Coop_GlobalCastingTemplates/TerranCasterPanelTemplate", "Coop_GlobalCastingTemplates/TerranGlobalCommandPanelTemplate", 4, "Cutscenes\\CommanderGlobalPower_Karass.SC2Cutscene", "FourButtons");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_DUT_Karass_Init () {
    libNEXS_gt_DUT_Karass = TriggerCreate("libNEXS_gt_DUT_Karass_Func");
    TriggerAddEventGeneric(libNEXS_gt_DUT_Karass, libCOMI_gv_mISSIONINITIALIZED);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E58DA1E68B89E696AFE6ADBBE4BAA1E588A4E5AE9A_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Karass2")) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_064E1B33"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E58DA1E68B89E696AFE6ADBBE4BAA1E588A4E5AE9A_Init () {
    libNEXS_gt_E58DA1E68B89E696AFE6ADBBE4BAA1E588A4E5AE9A = TriggerCreate("libNEXS_gt_E58DA1E68B89E696AFE6ADBBE4BAA1E588A4E5AE9A_Func");
    TriggerEnable(libNEXS_gt_E58DA1E68B89E696AFE6ADBBE4BAA1E588A4E5AE9A, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E58DA1E68B89E696AFE6ADBBE4BAA1E588A4E5AE9A, null, "UnknownBehavior77", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E58DA1E68B89E696AFE5889DE6ACA1E5A48DE6B4BBE588A4E5AE9A_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_DCD87A64"));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E58DA1E68B89E696AFE5889DE6ACA1E5A48DE6B4BBE588A4E5AE9A_Init () {
    libNEXS_gt_E58DA1E68B89E696AFE5889DE6ACA1E5A48DE6B4BBE588A4E5AE9A = TriggerCreate("libNEXS_gt_E58DA1E68B89E696AFE5889DE6ACA1E5A48DE6B4BBE588A4E5AE9A_Func");
    TriggerEnable(libNEXS_gt_E58DA1E68B89E696AFE5889DE6ACA1E5A48DE6B4BBE588A4E5AE9A, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E58DA1E68B89E696AFE5889DE6ACA1E5A48DE6B4BBE588A4E5AE9A, null, "SOAMothershipWarpAway93", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E58DA1E68B89E696AFE5A48DE6B4BBE588A4E5AE9A_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Karass2")) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_5BD74AC6"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E58DA1E68B89E696AFE5A48DE6B4BBE588A4E5AE9A_Init () {
    libNEXS_gt_E58DA1E68B89E696AFE5A48DE6B4BBE588A4E5AE9A = TriggerCreate("libNEXS_gt_E58DA1E68B89E696AFE5A48DE6B4BBE588A4E5AE9A_Func");
    TriggerEnable(libNEXS_gt_E58DA1E68B89E696AFE5A48DE6B4BBE588A4E5AE9A, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E58DA1E68B89E696AFE5A48DE6B4BBE588A4E5AE9A, null, "UnknownBehavior77", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Karass??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_KarassE58DA1E68B89E696AFE58D87E7BAA7E9A1B9_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoA9D5B289_val;
    int auto75C76AF2_val;
    int auto4EDA2C1A_val;
    int auto04E2B29E_val;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "XelNagaTower2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "KarassOBBehaviour1") == true)) {
        if ((UnitIsAlive(EventUnit()) == true)) {
            UnitGroupAdd(libNEXS_gv_e98197E4B896E79FB3E7A291EFBC9AE58DA1E68B89E58D95E4BD8DE7BB84, EventUnit());
        }

    }

    if ((UnitHasBehavior2(EventUnit(), "KarassOBBehaviour12") == true)) {
        if ((UnitIsAlive(EventUnit()) == true)) {
            UnitGroupAdd(libNEXS_gv_e98197E4B896E79FB3E7A291EFBC9AE58780E58C96E58D95E4BD8DE7BB84, EventUnit());
        }

    }

    if ((UnitHasBehavior2(EventUnit(), "KarassOBBehaviour122") == true)) {
        if ((UnitIsAlive(EventUnit()) == true)) {
            UnitGroupAdd(libNEXS_gv_e98197E4B896E79FB3E7A291EFBC9AE8999AE7A9BAE58D95E4BD8DE7BB84, EventUnit());
        }

    }

    if ((UnitHasBehavior2(EventUnit(), "KarassOBBehaviour1222") == true)) {
        if ((UnitIsAlive(EventUnit()) == true)) {
            UnitGroupAdd(libNEXS_gv_e98197E4B896E79FB3E7A291EFBC9AE7A7A9E5BA8FE58D95E4BD8DE7BB84, EventUnit());
        }

    }

    autoA9D5B289_val = UnitGroupCount(libNEXS_gv_e98197E4B896E79FB3E7A291EFBC9AE58DA1E68B89E58D95E4BD8DE7BB84, c_unitCountAlive);
    if (autoA9D5B289_val == 0) {
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade267", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2672", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2673", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade280", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2802", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2803", 0);
    }
    else if (autoA9D5B289_val == 1) {
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade267", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2672", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2673", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade280", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2802", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2803", 0);
    }
    else if (autoA9D5B289_val == 2) {
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade267", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2672", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2673", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade280", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2802", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2803", 0);
    }
    else if (autoA9D5B289_val == 3) {
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade267", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2672", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2673", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade280", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2802", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2803", 1);
    }
    else {
    }
    auto75C76AF2_val = UnitGroupCount(libNEXS_gv_e98197E4B896E79FB3E7A291EFBC9AE58780E58C96E58D95E4BD8DE7BB84, c_unitCountAlive);
    if (auto75C76AF2_val == 0) {
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade268", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2682", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2683", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade278", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2782", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2783", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade274", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade275", 0);
    }
    else if (auto75C76AF2_val == 1) {
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade268", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2682", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2683", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade278", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2782", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2783", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade274", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade275", 0);
    }
    else if (auto75C76AF2_val == 2) {
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade268", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2682", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2683", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade278", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2782", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2783", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade274", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade275", 0);
    }
    else if (auto75C76AF2_val == 3) {
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade268", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2682", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2683", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade278", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2782", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2783", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade274", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade275", 1);
    }
    else {
    }
    auto4EDA2C1A_val = UnitGroupCount(libNEXS_gv_e98197E4B896E79FB3E7A291EFBC9AE8999AE7A9BAE58D95E4BD8DE7BB84, c_unitCountAlive);
    if (auto4EDA2C1A_val == 0) {
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade269", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2692", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2693", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade279", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2792", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2793", 0);
    }
    else if (auto4EDA2C1A_val == 1) {
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade269", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2692", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2693", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade279", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2792", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2793", 0);
    }
    else if (auto4EDA2C1A_val == 2) {
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade269", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2692", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2693", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade279", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2792", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2793", 0);
    }
    else if (auto4EDA2C1A_val == 3) {
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade269", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2692", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2693", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade279", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2792", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2793", 1);
    }
    else {
    }
    auto04E2B29E_val = UnitGroupCount(libNEXS_gv_e98197E4B896E79FB3E7A291EFBC9AE7A7A9E5BA8FE58D95E4BD8DE7BB84, c_unitCountAlive);
    if (auto04E2B29E_val == 0) {
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade276", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade270", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2702", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2703", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade281", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2812", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2813", 0);
    }
    else if (auto04E2B29E_val == 1) {
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade276", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade270", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2702", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2703", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade281", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2812", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2813", 0);
    }
    else if (auto04E2B29E_val == 2) {
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade276", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade270", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2702", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2703", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade281", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2812", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2813", 0);
    }
    else if (auto04E2B29E_val == 3) {
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade276", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade270", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2702", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2703", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade281", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2812", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2813", 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_KarassE58DA1E68B89E696AFE58D87E7BAA7E9A1B9_Init () {
    libNEXS_gt_KarassE58DA1E68B89E696AFE58D87E7BAA7E9A1B9 = TriggerCreate("libNEXS_gt_KarassE58DA1E68B89E696AFE58D87E7BAA7E9A1B9_Func");
    TriggerAddEventUnitDied(libNEXS_gt_KarassE58DA1E68B89E696AFE58D87E7BAA7E9A1B9, null);
    TriggerAddEventUnitRegion(libNEXS_gt_KarassE58DA1E68B89E696AFE58D87E7BAA7E9A1B9, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6B3BDE5B0BCE696AFE6B0B4E699B6E5BBBAE980A0E5AE8CE6AF95_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Pylon2242"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libNEXS_gv_karassPylonGroup, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6B3BDE5B0BCE696AFE6B0B4E699B6E5BBBAE980A0E5AE8CE6AF95_Init () {
    libNEXS_gt_E6B3BDE5B0BCE696AFE6B0B4E699B6E5BBBAE980A0E5AE8CE6AF95 = TriggerCreate("libNEXS_gt_E6B3BDE5B0BCE696AFE6B0B4E699B6E5BBBAE980A0E5AE8CE6AF95_Func");
    TriggerEnable(libNEXS_gt_E6B3BDE5B0BCE696AFE6B0B4E699B6E5BBBAE980A0E5AE8CE6AF95, false);
    TriggerAddEventUnitRegion(libNEXS_gt_E6B3BDE5B0BCE696AFE6B0B4E699B6E5BBBAE980A0E5AE8CE6AF95, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6B3BDE5B0BCE696AFE6B0B4E699B6E887AAE58AA8E998B2E5BEA1E8819AE58F98E68993E587BB_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e8A2ABE98089E68BA9E79A84E6B0B4E699B6E5A194;

    // Automatic Variable Declarations
    unitgroup auto14FB0392_g;
    int auto14FB0392_u;
    unit auto14FB0392_var;
    unitgroup auto3F3E056F_g;
    int auto3F3E056F_u;
    unit auto3F3E056F_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto14FB0392_g = UnitGroup("Pylon2242", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto14FB0392_u = UnitGroupCount(auto14FB0392_g, c_unitCountAll);
    for (;; auto14FB0392_u -= 1) {
        auto14FB0392_var = UnitGroupUnitFromEnd(auto14FB0392_g, auto14FB0392_u);
        if (auto14FB0392_var == null) { break; }
        if ((UnitGroupClosestToPoint(libNEXS_gv_karassPylonGroup, UnitGetPosition(EventUnit())) == auto14FB0392_var)) {
            lv_e8A2ABE98089E68BA9E79A84E6B0B4E699B6E5A194 = auto14FB0392_var;
            auto3F3E056F_g = UnitGroup("KarassNexus", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto3F3E056F_u = UnitGroupCount(auto3F3E056F_g, c_unitCountAll);
            for (;; auto3F3E056F_u -= 1) {
                auto3F3E056F_var = UnitGroupUnitFromEnd(auto3F3E056F_g, auto3F3E056F_u);
                if (auto3F3E056F_var == null) { break; }
                if ((UnitGetPropertyFixed(auto3F3E056F_var, c_unitPropEnergy, c_unitPropCurrent) >= 50.0)) {
                    UnitIssueOrder(auto3F3E056F_var, OrderTargetingUnit(AbilityCommand("PhotonOvercharge2", 0), lv_e8A2ABE98089E68BA9E79A84E6B0B4E699B6E5A194), c_orderQueueReplace);
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6B3BDE5B0BCE696AFE6B0B4E699B6E887AAE58AA8E998B2E5BEA1E8819AE58F98E68993E587BB_Init () {
    libNEXS_gt_E6B3BDE5B0BCE696AFE6B0B4E699B6E887AAE58AA8E998B2E5BEA1E8819AE58F98E68993E587BB = TriggerCreate("libNEXS_gt_E6B3BDE5B0BCE696AFE6B0B4E699B6E887AAE58AA8E998B2E5BEA1E8819AE58F98E68993E587BB_Func");
    TriggerEnable(libNEXS_gt_E6B3BDE5B0BCE696AFE6B0B4E699B6E887AAE58AA8E998B2E5BEA1E8819AE58F98E68993E587BB, false);
    TriggerAddEventUnitAbility(libNEXS_gt_E6B3BDE5B0BCE696AFE6B0B4E699B6E887AAE58AA8E998B2E5BEA1E8819AE58F98E68993E587BB, null, AbilityCommand("TacNukeStrike", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6B3BDE5B0BCE696AFE6B0B4E699B6E58F8DE587BB_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e6B3BDE5B0BCE696AFE6B0B4E699B6;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e6B3BDE5B0BCE696AFE6B0B4E699B6 = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitHasBehavior2(lv_e6B3BDE5B0BCE696AFE6B0B4E699B6, "Purify2") == true) && (UnitGetType(lv_e6B3BDE5B0BCE696AFE6B0B4E699B6) == "PylonOvercharged"))) {
        UnitCreateEffectPoint(lv_e6B3BDE5B0BCE696AFE6B0B4E699B6, "ZenithStonePsiStormCP33", UnitGetPosition(EventUnitDamageSourceUnit()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6B3BDE5B0BCE696AFE6B0B4E699B6E58F8DE587BB_Init () {
    libNEXS_gt_E6B3BDE5B0BCE696AFE6B0B4E699B6E58F8DE587BB = TriggerCreate("libNEXS_gt_E6B3BDE5B0BCE696AFE6B0B4E699B6E58F8DE587BB_Func");
    TriggerEnable(libNEXS_gt_E6B3BDE5B0BCE696AFE6B0B4E699B6E58F8DE587BB, false);
    TriggerAddEventUnitDamaged(libNEXS_gt_E6B3BDE5B0BCE696AFE6B0B4E699B6E58F8DE587BB, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E689A7E694BFE5AE98E883BDE9878FE58F8DE89A80_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_e4BCA4E5AEB3E883BDE9878FE580BC;

    // Automatic Variable Declarations
    unitgroup auto84E71B94_g;
    int auto84E71B94_u;
    unit auto84E71B94_var;

    // Variable Initialization
    lv_e4BCA4E5AEB3E883BDE9878FE580BC = EventUnitDamageAttempted();

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade276", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnitDamageSourceUnit()) == "DarkArchon2") || (UnitGetType(EventUnitDamageSourceUnit()) == "HighTemplar23"))) {
        auto84E71B94_g = UnitGroup(null, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, RegionCircle(UnitGetPosition(EventUnitDamageSourceUnit()), 4.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto84E71B94_u = UnitGroupCount(auto84E71B94_g, c_unitCountAll);
        for (;; auto84E71B94_u -= 1) {
            auto84E71B94_var = UnitGroupUnitFromEnd(auto84E71B94_g, auto84E71B94_u);
            if (auto84E71B94_var == null) { break; }
            UnitSetPropertyFixed(auto84E71B94_var, c_unitPropEnergy, (UnitGetPropertyFixed(auto84E71B94_var, c_unitPropEnergy, c_unitPropCurrent) + lv_e4BCA4E5AEB3E883BDE9878FE580BC));
            PlayerCreateEffectUnit(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "HybridFAoEStun32", auto84E71B94_var);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E689A7E694BFE5AE98E883BDE9878FE58F8DE89A80_Init () {
    libNEXS_gt_E689A7E694BFE5AE98E883BDE9878FE58F8DE89A80 = TriggerCreate("libNEXS_gt_E689A7E694BFE5AE98E883BDE9878FE58F8DE89A80_Func");
    TriggerEnable(libNEXS_gt_E689A7E694BFE5AE98E883BDE9878FE58F8DE89A80, false);
    TriggerAddEventUnitDamaged(libNEXS_gt_E689A7E694BFE5AE98E883BDE9878FE58F8DE89A80, null, c_unitDamageTypeAny, c_unitDamageEither, "Feedback");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E58DA1E68B89E696AFE4B88EE9AB98E7BAA7E58D95E4BD8DE8BF9BE585A5E59CB0E59BBE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e58DA1E68B89E696AFE58D95E4BD8D;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e58DA1E68B89E696AFE58D95E4BD8D = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "Karass2")) {
        UnitSetTeamColorIndex(lv_e58DA1E68B89E696AFE58D95E4BD8D, 0);
        UnitGroupAdd(libNEXS_gv_karassGroup, lv_e58DA1E68B89E696AFE58D95E4BD8D);
    }

    if (((UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "KarassReviveBeacon") || (UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "FenixTalisAdeptPhaseShift2") || (UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "PlaceWormholeUnit233") || (UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "DarkArchon2") || (UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "HighTemplar23") || (UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "TempestPurifier23"))) {
        UnitSetTeamColorIndex(lv_e58DA1E68B89E696AFE58D95E4BD8D, 0);
    }

    if (((UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "FenixKaldalisZealot3") || (UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "FenixKaldalisZealot32") || (UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "MothershipCore2"))) {
        UnitSetTeamColorIndex(lv_e58DA1E68B89E696AFE58D95E4BD8D, 2);
    }

    if (((UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "Phoenix3") || (UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "Tempest2") || (UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "WarpPrismPhasingTaldarim") || (UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "WarpPrismTaldarim") || (UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "DarkTemplarShakuras5") || (UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "DarkTemplarShakuras52") || (UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "KarassAdeptPhaseShift2") || (UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "MutatorStoneZealot2"))) {
        UnitSetTeamColorIndex(lv_e58DA1E68B89E696AFE58D95E4BD8D, 14);
    }

    if (((UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "Adept3") || (UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "Adept32") || (UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "ImmortalShakuras2"))) {
        UnitSetTeamColorIndex(lv_e58DA1E68B89E696AFE58D95E4BD8D, 6);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E58DA1E68B89E696AFE4B88EE9AB98E7BAA7E58D95E4BD8DE8BF9BE585A5E59CB0E59BBE_Init () {
    libNEXS_gt_E58DA1E68B89E696AFE4B88EE9AB98E7BAA7E58D95E4BD8DE8BF9BE585A5E59CB0E59BBE = TriggerCreate("libNEXS_gt_E58DA1E68B89E696AFE4B88EE9AB98E7BAA7E58D95E4BD8DE8BF9BE585A5E59CB0E59BBE_Func");
    TriggerEnable(libNEXS_gt_E58DA1E68B89E696AFE4B88EE9AB98E7BAA7E58D95E4BD8DE8BF9BE585A5E59CB0E59BBE, false);
    TriggerAddEventUnitRegion(libNEXS_gt_E58DA1E68B89E696AFE4B88EE9AB98E7BAA7E58D95E4BD8DE8BF9BE585A5E59CB0E59BBE, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E58DA1E68B89E696AFE58D95E4BD8DE68A98E8B783E9A29CE889B2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e58DA1E68B89E696AFE58D95E4BD8D;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e58DA1E68B89E696AFE58D95E4BD8D = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "HighTemplar23") || (UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "Karass2"))) {
        UnitSetTeamColorIndex(lv_e58DA1E68B89E696AFE58D95E4BD8D, 0);
    }

    if ((UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "FenixKaldalisZealot32")) {
        UnitSetTeamColorIndex(lv_e58DA1E68B89E696AFE58D95E4BD8D, 2);
    }

    if ((UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "DarkTemplarShakuras52")) {
        UnitSetTeamColorIndex(lv_e58DA1E68B89E696AFE58D95E4BD8D, 14);
    }

    if ((UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "Adept32")) {
        UnitSetTeamColorIndex(lv_e58DA1E68B89E696AFE58D95E4BD8D, 6);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E58DA1E68B89E696AFE58D95E4BD8DE68A98E8B783E9A29CE889B2_Init () {
    libNEXS_gt_E58DA1E68B89E696AFE58D95E4BD8DE68A98E8B783E9A29CE889B2 = TriggerCreate("libNEXS_gt_E58DA1E68B89E696AFE58D95E4BD8DE68A98E8B783E9A29CE889B2_Func");
    TriggerEnable(libNEXS_gt_E58DA1E68B89E696AFE58D95E4BD8DE68A98E8B783E9A29CE889B2, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E58DA1E68B89E696AFE58D95E4BD8DE68A98E8B783E9A29CE889B2, null, "ZeratulXelNagaConstruct_WarpIn2323", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E58DA1E68B89E696AFE58D95E4BD8DE68A98E8B783E9A29CE889B2, null, "ZeratulXelNagaConstruct_WarpIn2323", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E58DA1E68B89E696AFE6ADBBE4BAA1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e58DA1E68B89E696AFE58D95E4BD8D;

    // Automatic Variable Declarations
    unitgroup auto0380842F_g;
    int auto0380842F_u;
    unit auto0380842F_var;
    unitgroup auto6BCF0D1D_g;
    int auto6BCF0D1D_u;
    unit auto6BCF0D1D_var;

    // Variable Initialization
    lv_e58DA1E68B89E696AFE58D95E4BD8D = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "Karass2")) {
        UnitGroupRemove(libNEXS_gv_karassGroup, lv_e58DA1E68B89E696AFE58D95E4BD8D);
        auto0380842F_g = UnitGroup("FenixTalisAdeptPhaseShift2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0380842F_u = UnitGroupCount(auto0380842F_g, c_unitCountAll);
        for (;; auto0380842F_u -= 1) {
            auto0380842F_var = UnitGroupUnitFromEnd(auto0380842F_g, auto0380842F_u);
            if (auto0380842F_var == null) { break; }
            UnitRemove(auto0380842F_var);
        }
    }

    if ((UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "FenixTalisAdeptPhaseShift2")) {
        auto6BCF0D1D_g = UnitGroup("Karass2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6BCF0D1D_u = UnitGroupCount(auto6BCF0D1D_g, c_unitCountAll);
        for (;; auto6BCF0D1D_u -= 1) {
            auto6BCF0D1D_var = UnitGroupUnitFromEnd(auto6BCF0D1D_g, auto6BCF0D1D_u);
            if (auto6BCF0D1D_var == null) { break; }
            UnitBehaviorRemove(auto6BCF0D1D_var, "SelfKarassBlink3222", 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E58DA1E68B89E696AFE6ADBBE4BAA1_Init () {
    libNEXS_gt_E58DA1E68B89E696AFE6ADBBE4BAA1 = TriggerCreate("libNEXS_gt_E58DA1E68B89E696AFE6ADBBE4BAA1_Func");
    TriggerEnable(libNEXS_gt_E58DA1E68B89E696AFE6ADBBE4BAA1, false);
    TriggerAddEventUnitDied(libNEXS_gt_E58DA1E68B89E696AFE6ADBBE4BAA1, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E69D80E7949FE4B89AE68AA5E58F96E587BA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "MutatorKarmaIncreasedDamageVet") == true)) {
        UnitBehaviorRemove(EventUnit(), "MutatorKarmaIncreasedDamageVet", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E69D80E7949FE4B89AE68AA5E58F96E587BA_Init () {
    libNEXS_gt_E69D80E7949FE4B89AE68AA5E58F96E587BA = TriggerCreate("libNEXS_gt_E69D80E7949FE4B89AE68AA5E58F96E587BA_Func");
    TriggerEnable(libNEXS_gt_E69D80E7949FE4B89AE68AA5E58F96E587BA, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E69D80E7949FE4B89AE68AA5E58F96E587BA, null, "KarassPsiStorm522", c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E69D80E7949FE4B89AE68AA5E58F96E587BA, null, "KarassPsiStorm522", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B14_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoCFFB7B1B_g;
    int autoCFFB7B1B_u;
    unit autoCFFB7B1B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoCFFB7B1B_g = UnitGroup("FenixTalisAdeptPhaseShift2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCFFB7B1B_u = UnitGroupCount(autoCFFB7B1B_g, c_unitCountAll);
    for (;; autoCFFB7B1B_u -= 1) {
        autoCFFB7B1B_var = UnitGroupUnitFromEnd(autoCFFB7B1B_g, autoCFFB7B1B_u);
        if (autoCFFB7B1B_var == null) { break; }
        if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade268", c_techCountCompleteOnly) == 1)) {
            if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "CandaUpgrade1ST", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "PlaceWormholeUnit23224", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, UnitGetPosition(EventUnit()));
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "PlaceWormholeUnit2322", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, UnitGetPosition(EventUnit()));
            }
        }

        UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("HybridBlink32", 0), autoCFFB7B1B_var), c_orderQueueReplace);
        UnitKill(autoCFFB7B1B_var);
        PlayerAddCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "Abil/KarassShadow", (PlayerGetCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "Abil/KarassShadow") / -2.0));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B14_Init () {
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B14 = TriggerCreate("libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B14_Func");
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B14, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B14, null, "SelfKarassBlink322", c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B14, null, "SelfKarassBlink322", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6A380E6B58BE588B0_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_e58DA1E68B89E696AFE4BD8DE7BDAE;
    point lv_e58DA1E68B89E696AFE68A80E883BDE79BAEE6A087E782B9;
    fixed lv_e58DA1E68B89E696AF;
    fixed lv_e58DA1E68B89E696AFE68A80E883BDE8B79DE7A6BB;

    // Automatic Variable Declarations
    unitgroup auto797F86D3_g;
    int auto797F86D3_u;
    unit auto797F86D3_var;
    unitgroup auto1CFE29BC_g;
    int auto1CFE29BC_u;
    unit auto1CFE29BC_var;
    unitgroup auto25E7AB8D_g;
    int auto25E7AB8D_u;
    unit auto25E7AB8D_var;

    // Variable Initialization
    lv_e58DA1E68B89E696AFE4BD8DE7BDAE = UnitGetPosition(EventUnit());
    lv_e58DA1E68B89E696AFE68A80E883BDE79BAEE6A087E782B9 = EventUnitTargetPoint();
    lv_e58DA1E68B89E696AF = AngleBetweenPoints(lv_e58DA1E68B89E696AFE4BD8DE7BDAE, lv_e58DA1E68B89E696AFE68A80E883BDE79BAEE6A087E782B9);
    lv_e58DA1E68B89E696AFE68A80E883BDE8B79DE7A6BB = DistanceBetweenPoints(lv_e58DA1E68B89E696AFE4BD8DE7BDAE, lv_e58DA1E68B89E696AFE68A80E883BDE79BAEE6A087E782B9);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2783", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("DevastatingShot2", 0))) {
        auto797F86D3_g = UnitGroup("FenixTalisAdeptPhaseShift2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto797F86D3_u = UnitGroupCount(auto797F86D3_g, c_unitCountAll);
        for (;; auto797F86D3_u -= 1) {
            auto797F86D3_var = UnitGroupUnitFromEnd(auto797F86D3_g, auto797F86D3_u);
            if (auto797F86D3_var == null) { break; }
            UnitIssueOrder(auto797F86D3_var, OrderTargetingPoint(AbilityCommand("DevastatingShot22", 0), PointWithOffsetPolar(UnitGetPosition(auto797F86D3_var), lv_e58DA1E68B89E696AFE68A80E883BDE8B79DE7A6BB, lv_e58DA1E68B89E696AF)), c_orderQueueReplace);
        }
    }

    if ((EventUnitAbility() == AbilityCommand("EMP322", 0))) {
        auto1CFE29BC_g = UnitGroup("FenixTalisAdeptPhaseShift2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1CFE29BC_u = UnitGroupCount(auto1CFE29BC_g, c_unitCountAll);
        for (;; auto1CFE29BC_u -= 1) {
            auto1CFE29BC_var = UnitGroupUnitFromEnd(auto1CFE29BC_g, auto1CFE29BC_u);
            if (auto1CFE29BC_var == null) { break; }
            UnitIssueOrder(auto1CFE29BC_var, OrderTargetingPoint(AbilityCommand("EMP3222", 0), PointWithOffsetPolar(UnitGetPosition(auto1CFE29BC_var), lv_e58DA1E68B89E696AFE68A80E883BDE8B79DE7A6BB, lv_e58DA1E68B89E696AF)), c_orderQueueReplace);
        }
    }

    if ((EventUnitAbility() == AbilityCommand("KarassPsiStorm42", 0))) {
        auto25E7AB8D_g = UnitGroup("FenixTalisAdeptPhaseShift2", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto25E7AB8D_u = UnitGroupCount(auto25E7AB8D_g, c_unitCountAll);
        for (;; auto25E7AB8D_u -= 1) {
            auto25E7AB8D_var = UnitGroupUnitFromEnd(auto25E7AB8D_g, auto25E7AB8D_u);
            if (auto25E7AB8D_var == null) { break; }
            UnitIssueOrder(auto25E7AB8D_var, OrderTargetingPoint(AbilityCommand("KarassPsiStorm422", 0), PointWithOffsetPolar(UnitGetPosition(auto25E7AB8D_var), lv_e58DA1E68B89E696AFE68A80E883BDE8B79DE7A6BB, lv_e58DA1E68B89E696AF)), c_orderQueueReplace);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6A380E6B58BE588B0_Init () {
    libNEXS_gt_E6A380E6B58BE588B0 = TriggerCreate("libNEXS_gt_E6A380E6B58BE588B0_Func");
    TriggerEnable(libNEXS_gt_E6A380E6B58BE588B0, false);
    TriggerAddEventUnitAbility(libNEXS_gt_E6A380E6B58BE588B0, UnitRefFromUnit(UnitGroupUnit(libNEXS_gv_karassGroup, 1)), null, c_abilEffectStagePrep, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E58DA1E68B89E696AFE8999AE7A9BAE8A7A6E587BBE997AAE78EB0_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("move", 0)) && (UnitGetType(EventUnit()) == "Karass2") && (UnitHasBehavior2(EventUnit(), "SelfKarassBlink3") == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("HybridBlink3", 0), EventUnitTargetPoint()), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E58DA1E68B89E696AFE8999AE7A9BAE8A7A6E587BBE997AAE78EB0_Init () {
    libNEXS_gt_E58DA1E68B89E696AFE8999AE7A9BAE8A7A6E587BBE997AAE78EB0 = TriggerCreate("libNEXS_gt_E58DA1E68B89E696AFE8999AE7A9BAE8A7A6E587BBE997AAE78EB0_Func");
    TriggerEnable(libNEXS_gt_E58DA1E68B89E696AFE8999AE7A9BAE8A7A6E587BBE997AAE78EB0, false);
    TriggerAddEventUnitAbility(libNEXS_gt_E58DA1E68B89E696AFE8999AE7A9BAE8A7A6E587BBE997AAE78EB0, UnitRefFromUnit(UnitGroupUnit(libNEXS_gv_karassGroup, 1)), null, c_unitAbilStageAll, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B12_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2793", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerAddChargeUsed(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "Abil/DevastatingShot2", -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B12_Init () {
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B12 = TriggerCreate("libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B12_Func");
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B12, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B12, null, "SelfKarassBlink32", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B12, null, "SelfKarassBlink32", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6989FE781B5E69EA2E7BABDE699B6E4BD93E79FBFE58E8BE7BCA9_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, c_playerPropMinerals, c_playerPropOperAdd, 7);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6989FE781B5E69EA2E7BABDE699B6E4BD93E79FBFE58E8BE7BCA9_Init () {
    libNEXS_gt_E6989FE781B5E69EA2E7BABDE699B6E4BD93E79FBFE58E8BE7BCA9 = TriggerCreate("libNEXS_gt_E6989FE781B5E69EA2E7BABDE699B6E4BD93E79FBFE58E8BE7BCA9_Func");
    TriggerEnable(libNEXS_gt_E6989FE781B5E69EA2E7BABDE699B6E4BD93E79FBFE58E8BE7BCA9, false);
    TriggerAddEventTimePeriodic(libNEXS_gt_E6989FE781B5E69EA2E7BABDE699B6E4BD93E79FBFE58E8BE7BCA9, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6989FE781B5E69EA2E7BABDE9AB98E883BDE793A6E696AFE58E8BE7BCA9_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, c_playerPropVespene, c_playerPropOperAdd, 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6989FE781B5E69EA2E7BABDE9AB98E883BDE793A6E696AFE58E8BE7BCA9_Init () {
    libNEXS_gt_E6989FE781B5E69EA2E7BABDE9AB98E883BDE793A6E696AFE58E8BE7BCA9 = TriggerCreate("libNEXS_gt_E6989FE781B5E69EA2E7BABDE9AB98E883BDE793A6E696AFE58E8BE7BCA9_Func");
    TriggerEnable(libNEXS_gt_E6989FE781B5E69EA2E7BABDE9AB98E883BDE793A6E696AFE58E8BE7BCA9, false);
    TriggerAddEventTimePeriodic(libNEXS_gt_E6989FE781B5E69EA2E7BABDE9AB98E883BDE793A6E696AFE58E8BE7BCA9, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B16_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto63D7D319_g;
    int auto63D7D319_u;
    unit auto63D7D319_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_e6989FE781B5E69EA2E7BABDE8B584E6BA90E7A78DE7B1BBE588A4E5AE9A = 1;
    TriggerEnable(libNEXS_gt_E6989FE781B5E69EA2E7BABDE9AB98E883BDE793A6E696AFE58E8BE7BCA9, true);
    TriggerEnable(libNEXS_gt_E6989FE781B5E69EA2E7BABDE699B6E4BD93E79FBFE58E8BE7BCA9, false);
    auto63D7D319_g = UnitGroup("KarassNexus", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto63D7D319_u = UnitGroupCount(auto63D7D319_g, c_unitCountAll);
    for (;; auto63D7D319_u -= 1) {
        auto63D7D319_var = UnitGroupUnitFromEnd(auto63D7D319_g, auto63D7D319_u);
        if (auto63D7D319_var == null) { break; }
        if ((UnitHasBehavior2(auto63D7D319_var, "CloakField2232") == false)) {
            UnitBehaviorAddPlayer(auto63D7D319_var, "CloakField2232", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B16_Init () {
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B16 = TriggerCreate("libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B16_Func");
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B16, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B16, null, "CloakField2232", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B16, null, "CloakField2232", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B17_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoAA58CEDA_g;
    int autoAA58CEDA_u;
    unit autoAA58CEDA_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_E6989FE781B5E69EA2E7BABDE9AB98E883BDE793A6E696AFE58E8BE7BCA9, false);
    TriggerEnable(libNEXS_gt_E6989FE781B5E69EA2E7BABDE699B6E4BD93E79FBFE58E8BE7BCA9, true);
    libNEXS_gv_e6989FE781B5E69EA2E7BABDE8B584E6BA90E7A78DE7B1BBE588A4E5AE9A = 0;
    autoAA58CEDA_g = UnitGroup("KarassNexus", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAA58CEDA_u = UnitGroupCount(autoAA58CEDA_g, c_unitCountAll);
    for (;; autoAA58CEDA_u -= 1) {
        autoAA58CEDA_var = UnitGroupUnitFromEnd(autoAA58CEDA_g, autoAA58CEDA_u);
        if (autoAA58CEDA_var == null) { break; }
        if ((UnitHasBehavior2(autoAA58CEDA_var, "CloakField2232") == true)) {
            UnitBehaviorRemove(autoAA58CEDA_var, "CloakField2232", 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B17_Init () {
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B17 = TriggerCreate("libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B17_Func");
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B17, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B17, null, "CloakField2232", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B18_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNEXS_gv_e6989FE781B5E69EA2E7BABDE8B584E6BA90E7A78DE7B1BBE588A4E5AE9A == 1) && (UnitGetType(EventUnit()) == "KarassNexus")) {
        UnitBehaviorAddPlayer(EventUnit(), "CloakField2232", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B18_Init () {
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B18 = TriggerCreate("libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B18_Func");
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B18, false);
    TriggerAddEventUnitRegion(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B18, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E58FAFE4BBA5E983A8E7BDB2E98197E4B896E79FB3E7A291_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto895CECCD_g;
    int auto895CECCD_u;
    unit auto895CECCD_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto895CECCD_g = UnitGroup("KarassCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto895CECCD_u = UnitGroupCount(auto895CECCD_g, c_unitCountAll);
    for (;; auto895CECCD_u -= 1) {
        auto895CECCD_var = UnitGroupUnitFromEnd(auto895CECCD_g, auto895CECCD_u);
        if (auto895CECCD_var == null) { break; }
        UnitBehaviorAddPlayer(auto895CECCD_var, "CanApplyYSsb", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E58FAFE4BBA5E983A8E7BDB2E98197E4B896E79FB3E7A291_Init () {
    libNEXS_gt_E58FAFE4BBA5E983A8E7BDB2E98197E4B896E79FB3E7A291 = TriggerCreate("libNEXS_gt_E58FAFE4BBA5E983A8E7BDB2E98197E4B896E79FB3E7A291_Func");
    TriggerEnable(libNEXS_gt_E58FAFE4BBA5E983A8E7BDB2E98197E4B896E79FB3E7A291, false);
    TriggerAddEventTimer(libNEXS_gt_E58FAFE4BBA5E983A8E7BDB2E98197E4B896E79FB3E7A291, libNEXS_gv_e58DA1E68B89E696AFE79FB3E7A291E8AEA1E697B6E599A8);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E983A8E7BDB2E98197E4B896E79FB3E7A291_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9) && (EventUnitAbilityStage() == c_abilEffectStagePrep) && ((EventUnitAbility() == AbilityCommand("SOAPurifierBeam1022", 0)) || (EventUnitAbility() == AbilityCommand("SOAPurifierBeam10224", 0)) || (EventUnitAbility() == AbilityCommand("SOAPurifierBeam102242", 0)) || (EventUnitAbility() == AbilityCommand("SOAPurifierBeam10223", 0)) || (EventUnitAbility() == AbilityCommand("SOAPurifierBeam102233", 0)) || (EventUnitAbility() == AbilityCommand("SOAPurifierBeam1022332", 0)) || (EventUnitAbility() == AbilityCommand("SOAPurifierBeam102232", 0)) || (EventUnitAbility() == AbilityCommand("SOAPurifierBeam1022323", 0)) || (EventUnitAbility() == AbilityCommand("SOAPurifierBeam10223232", 0)) || (EventUnitAbility() == AbilityCommand("SOAPurifierBeam1022322", 0)) || (EventUnitAbility() == AbilityCommand("SOAPurifierBeam10223222", 0)) || (EventUnitAbility() == AbilityCommand("SOAPurifierBeam102232222", 0))))) {
        TimerStart(libNEXS_gv_e58DA1E68B89E696AFE79FB3E7A291E8AEA1E697B6E599A8, (180 - TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "KarassMasteryUpgrade13", c_techCountCompleteOnly)), false, c_timeGame);
        UnitBehaviorRemove(EventUnit(), "CanApplyYSsb", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E983A8E7BDB2E98197E4B896E79FB3E7A291_Init () {
    libNEXS_gt_E983A8E7BDB2E98197E4B896E79FB3E7A291 = TriggerCreate("libNEXS_gt_E983A8E7BDB2E98197E4B896E79FB3E7A291_Func");
    TriggerEnable(libNEXS_gt_E983A8E7BDB2E98197E4B896E79FB3E7A291, false);
    TriggerAddEventUnitAbility(libNEXS_gt_E983A8E7BDB2E98197E4B896E79FB3E7A291, null, null, c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E98197E4B896E79FB3E7A291E9A29CE889B2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "XelNagaTower2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "KarassOBBehaviour1") == true)) {
        UnitSetTeamColorIndex(EventUnit(), 2);
    }

    if ((UnitHasBehavior2(EventUnit(), "KarassOBBehaviour12") == true)) {
        UnitSetTeamColorIndex(EventUnit(), 6);
    }

    if ((UnitHasBehavior2(EventUnit(), "KarassOBBehaviour122") == true)) {
        UnitSetTeamColorIndex(EventUnit(), 14);
    }

    if ((UnitHasBehavior2(EventUnit(), "KarassOBBehaviour1222") == true)) {
        UnitSetTeamColorIndex(EventUnit(), 0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E98197E4B896E79FB3E7A291E9A29CE889B2_Init () {
    libNEXS_gt_E98197E4B896E79FB3E7A291E9A29CE889B2 = TriggerCreate("libNEXS_gt_E98197E4B896E79FB3E7A291E9A29CE889B2_Func");
    TriggerEnable(libNEXS_gt_E98197E4B896E79FB3E7A291E9A29CE889B2, false);
    TriggerAddEventUnitRegion(libNEXS_gt_E98197E4B896E79FB3E7A291E9A29CE889B2, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5AE88E68AA4E88085E6ADBBE4BAA1E586B7E58DB4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e58DA1E68B89E696AFE58D95E4BD8D;

    // Automatic Variable Declarations
    unitgroup auto1955858A_g;
    int auto1955858A_u;
    unit auto1955858A_var;
    unitgroup auto5CA4BBED_g;
    int auto5CA4BBED_u;
    unit auto5CA4BBED_var;
    unitgroup autoA8981F70_g;
    int autoA8981F70_u;
    unit autoA8981F70_var;
    unitgroup autoE5F681C6_g;
    int autoE5F681C6_u;
    unit autoE5F681C6_var;

    // Variable Initialization
    lv_e58DA1E68B89E696AFE58D95E4BD8D = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libNtve_gf_KillingUnit()) != "KarassCaster"))) {
            return false;
        }

        if (!((UnitGetType(libNtve_gf_KillingUnit()) != UnitGetType(EventUnit())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "MothershipCore2")) {
        auto1955858A_g = UnitGroup("KarassCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1955858A_u = UnitGroupCount(auto1955858A_g, c_unitCountAll);
        for (;; auto1955858A_u -= 1) {
            auto1955858A_var = UnitGroupUnitFromEnd(auto1955858A_g, auto1955858A_u);
            if (auto1955858A_var == null) { break; }
            UnitBehaviorRemove(auto1955858A_var, "ZeratulXelNagaConstruct_WarpIn273", 1);
        }
        PlayerAddCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "Abil/KarassDE", 240.0);
    }

    if ((UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "ImmortalShakuras2")) {
        auto5CA4BBED_g = UnitGroup("KarassCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto5CA4BBED_u = UnitGroupCount(auto5CA4BBED_g, c_unitCountAll);
        for (;; auto5CA4BBED_u -= 1) {
            auto5CA4BBED_var = UnitGroupUnitFromEnd(auto5CA4BBED_g, auto5CA4BBED_u);
            if (auto5CA4BBED_var == null) { break; }
            UnitBehaviorRemove(auto5CA4BBED_var, "ZeratulXelNagaConstruct_WarpIn2732", 1);
        }
        PlayerAddCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "Abil/KarassDE2", 240.0);
    }

    if ((UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "MutatorStoneZealot2")) {
        autoA8981F70_g = UnitGroup("KarassCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA8981F70_u = UnitGroupCount(autoA8981F70_g, c_unitCountAll);
        for (;; autoA8981F70_u -= 1) {
            autoA8981F70_var = UnitGroupUnitFromEnd(autoA8981F70_g, autoA8981F70_u);
            if (autoA8981F70_var == null) { break; }
            UnitBehaviorRemove(autoA8981F70_var, "ZeratulXelNagaConstruct_WarpIn27322", 1);
        }
        PlayerAddCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "Abil/KarassDE3", 240.0);
    }

    if ((UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "TempestPurifier23")) {
        autoE5F681C6_g = UnitGroup("KarassCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE5F681C6_u = UnitGroupCount(autoE5F681C6_g, c_unitCountAll);
        for (;; autoE5F681C6_u -= 1) {
            autoE5F681C6_var = UnitGroupUnitFromEnd(autoE5F681C6_g, autoE5F681C6_u);
            if (autoE5F681C6_var == null) { break; }
            UnitBehaviorRemove(autoE5F681C6_var, "ZeratulXelNagaConstruct_WarpIn273222", 1);
        }
        PlayerAddCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "Abil/KarassDE4", 240.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5AE88E68AA4E88085E6ADBBE4BAA1E586B7E58DB4_Init () {
    libNEXS_gt_E5AE88E68AA4E88085E6ADBBE4BAA1E586B7E58DB4 = TriggerCreate("libNEXS_gt_E5AE88E68AA4E88085E6ADBBE4BAA1E586B7E58DB4_Func");
    TriggerEnable(libNEXS_gt_E5AE88E68AA4E88085E6ADBBE4BAA1E586B7E58DB4, false);
    TriggerAddEventUnitDied(libNEXS_gt_E5AE88E68AA4E88085E6ADBBE4BAA1E586B7E58DB4, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E98197E4B896E7A5ADE59D9BE883BDE9878FE59B9EE5A48D_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e58DA1E68B89E696AFE58D95E4BD8D;

    // Automatic Variable Declarations
    unitgroup auto284FA961_g;
    int auto284FA961_u;
    unit auto284FA961_var;
    unitgroup autoC932DC08_g;
    int autoC932DC08_u;
    unit autoC932DC08_var;
    unitgroup auto7EFBA34F_g;
    int auto7EFBA34F_u;
    unit auto7EFBA34F_var;

    // Variable Initialization
    lv_e58DA1E68B89E696AFE58D95E4BD8D = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9) && (UnitHasBehavior2(EventUnit(), "PowerUserWarpable") == false)) {
        if (((UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "FenixKaldalisZealot32") || (UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "Adept32"))) {
            auto284FA961_g = UnitGroup("KarassCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto284FA961_u = UnitGroupCount(auto284FA961_g, c_unitCountAll);
            for (;; auto284FA961_u -= 1) {
                auto284FA961_var = UnitGroupUnitFromEnd(auto284FA961_g, auto284FA961_u);
                if (auto284FA961_var == null) { break; }
                UnitSetPropertyFixed(auto284FA961_var, c_unitPropEnergy, (UnitGetPropertyFixed(auto284FA961_var, c_unitPropEnergy, c_unitPropCurrent) + 1.0));
            }
        }
        else if (((UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "FenixKaldalisZealot3") || (UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "Adept3") || (UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "DarkTemplarShakuras52") || (UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "HighTemplar23"))) {
            autoC932DC08_g = UnitGroup("KarassCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoC932DC08_u = UnitGroupCount(autoC932DC08_g, c_unitCountAll);
            for (;; autoC932DC08_u -= 1) {
                autoC932DC08_var = UnitGroupUnitFromEnd(autoC932DC08_g, autoC932DC08_u);
                if (autoC932DC08_var == null) { break; }
                UnitSetPropertyFixed(autoC932DC08_var, c_unitPropEnergy, (UnitGetPropertyFixed(autoC932DC08_var, c_unitPropEnergy, c_unitPropCurrent) + 2.0));
            }
        }
        else if (((UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "DarkArchon2") || (UnitGetType(lv_e58DA1E68B89E696AFE58D95E4BD8D) == "DarkTemplarShakuras5"))) {
            auto7EFBA34F_g = UnitGroup("KarassCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto7EFBA34F_u = UnitGroupCount(auto7EFBA34F_g, c_unitCountAll);
            for (;; auto7EFBA34F_u -= 1) {
                auto7EFBA34F_var = UnitGroupUnitFromEnd(auto7EFBA34F_g, auto7EFBA34F_u);
                if (auto7EFBA34F_var == null) { break; }
                UnitSetPropertyFixed(auto7EFBA34F_var, c_unitPropEnergy, (UnitGetPropertyFixed(auto7EFBA34F_var, c_unitPropEnergy, c_unitPropCurrent) + 4.0));
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E98197E4B896E7A5ADE59D9BE883BDE9878FE59B9EE5A48D_Init () {
    libNEXS_gt_E98197E4B896E7A5ADE59D9BE883BDE9878FE59B9EE5A48D = TriggerCreate("libNEXS_gt_E98197E4B896E7A5ADE59D9BE883BDE9878FE59B9EE5A48D_Func");
    TriggerEnable(libNEXS_gt_E98197E4B896E7A5ADE59D9BE883BDE9878FE59B9EE5A48D, false);
    TriggerAddEventUnitDied(libNEXS_gt_E98197E4B896E7A5ADE59D9BE883BDE9878FE59B9EE5A48D, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E9A38EE69AB4E5AEA3E8A880E781B5E883BDE9A38EE69AB4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libNtve_gf_KillingUnit()) == "TempestPurifier23") && (UnitGetType(EventUnit()) != "TempestPurifier23")) {
        UnitCreateEffectPoint(libNtve_gf_KillingUnit(), "ZenithStonePsiStormCP24", UnitGetPosition(EventUnit()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E9A38EE69AB4E5AEA3E8A880E781B5E883BDE9A38EE69AB4_Init () {
    libNEXS_gt_E9A38EE69AB4E5AEA3E8A880E781B5E883BDE9A38EE69AB4 = TriggerCreate("libNEXS_gt_E9A38EE69AB4E5AEA3E8A880E781B5E883BDE9A38EE69AB4_Func");
    TriggerEnable(libNEXS_gt_E9A38EE69AB4E5AEA3E8A880E781B5E883BDE9A38EE69AB4, false);
    TriggerAddEventUnitDied(libNEXS_gt_E9A38EE69AB4E5AEA3E8A880E781B5E883BDE9A38EE69AB4, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8999AE7A9BAE5B7A8E5838FE587BBE69D80E58D95E4BD8DE8BDACE58C96_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2693", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false) && (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == false) && (UnitHasBehavior2(EventUnit(), "Hallucination243") == false) && (UnitHasBehavior2(EventUnit(), "Hallucination2") == false) && ((UnitGetType(libNtve_gf_KillingUnit()) == "MutatorStoneZealot2") || (UnitHasBehavior2(libNtve_gf_KillingUnit(), "Hallucination243") == true))) {
        UnitRevive(EventUnit());
        UnitSetOwner(EventUnit(), libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, false);
        UnitSetTeamColorIndex(EventUnit(), 14);
        UnitBehaviorAddPlayer(EventUnit(), "Hallucination243", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, 1);
        UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, 100.0);
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 100.0);
        AISetUnitSuicide(EventUnit(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8999AE7A9BAE5B7A8E5838FE587BBE69D80E58D95E4BD8DE8BDACE58C96_Init () {
    libNEXS_gt_E8999AE7A9BAE5B7A8E5838FE587BBE69D80E58D95E4BD8DE8BDACE58C96 = TriggerCreate("libNEXS_gt_E8999AE7A9BAE5B7A8E5838FE587BBE69D80E58D95E4BD8DE8BDACE58C96_Func");
    TriggerEnable(libNEXS_gt_E8999AE7A9BAE5B7A8E5838FE587BBE69D80E58D95E4BD8DE8BDACE58C96, false);
    TriggerAddEventUnitDied(libNEXS_gt_E8999AE7A9BAE5B7A8E5838FE587BBE69D80E58D95E4BD8DE8BDACE58C96, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B15_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e68190E683A7E58D95E4BD8D;
    point lv_e99A8FE69CBAE4BD8DE782B9;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e68190E683A7E58D95E4BD8D = EventUnit();

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID9, "UnknownUpgrade2693", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_e99A8FE69CBAE4BD8DE782B9 = PointWithOffsetPolar(UnitGetPosition(lv_e68190E683A7E58D95E4BD8D), 1.0, libNtve_gf_RandomAngle());
    UnitIssueOrder(lv_e68190E683A7E58D95E4BD8D, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_e68190E683A7E58D95E4BD8D), -5.0, lv_e99A8FE69CBAE4BD8DE782B9)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    while ((UnitHasBehavior2(lv_e68190E683A7E58D95E4BD8D, "MutatorFear322") == true) && (UnitHasBehavior2(lv_e68190E683A7E58D95E4BD8D, "Hallucination243") == false) && (UnitIsAlive(lv_e68190E683A7E58D95E4BD8D) == true)) {
        UnitIssueOrder(lv_e68190E683A7E58D95E4BD8D, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_e68190E683A7E58D95E4BD8D), 4.0))), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    UnitIssueOrder(lv_e68190E683A7E58D95E4BD8D, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B15_Init () {
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B15 = TriggerCreate("libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B15_Func");
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B15, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B15, null, "MutatorFear322", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B15, null, "MutatorFear322", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DUT_Hanson
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_DUT_Hanson_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup autoB30EED69_g;
    int autoB30EED69_var;

    // Variable Initialization
    lv_players = libCOMI_gf_PlayersOfCommander("NexusHanson");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_players) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_E58D95E4BD8DE5BC80E5A78BE6849FE69F93E5BA94E794A8, true);
    TriggerEnable(libNEXS_gt_E795B8E58F98E4BD93E99DA2E69DBFE7949FE68890, true);
    TriggerEnable(libNEXS_gt_E5A4AAE7A9BAE7AB99E883BDE9878FE88EB7E58F96, true);
    autoB30EED69_g = lv_players;
    autoB30EED69_var = -1;
    while (true) {
        autoB30EED69_var = PlayerGroupNextPlayer(autoB30EED69_g, autoB30EED69_var);
        if (autoB30EED69_var < 0) { break; }
        libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID = autoB30EED69_var;
        if ((TechTreeUnitIsAllowed(autoB30EED69_var, "HansonCaster") == true)) {
            libCOMI_gf_CreateACCaster(autoB30EED69_var, "HansonCaster");
            libCOMI_gf_CU_GPInitCommonCaster(autoB30EED69_var, "HansonCaster", "Coop_GlobalCastingTemplates/TerranCasterPanelTemplate", "Coop_GlobalCastingTemplates/TerranGlobalCommandPanelTemplate", 4, "Cutscenes\\CommanderGlobalPower_Hanson.SC2Cutscene", "FourButtons");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_DUT_Hanson_Init () {
    libNEXS_gt_DUT_Hanson = TriggerCreate("libNEXS_gt_DUT_Hanson_Func");
    TriggerAddEventGeneric(libNEXS_gt_DUT_Hanson, libCOMI_gv_mISSIONINITIALIZED);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E58D95E4BD8DE5BC80E5A78BE6849FE69F93E5BA94E794A8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogEffect, "GoliathAU", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, "12");
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, "HansonCommander", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, "HansonChokerCooldown", 1);
    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, "HansonGoliathHeavyDamage", 1);
    if (((true) || (true))) {
        Wait(6.0, c_timeGame);
        SoundPlayForPlayer(SoundLink("acAttackWave_Kerrigan_128222222232", -1), c_maxPlayers, PlayerGroupAll(), 250.0, 0.0);
        Wait(3.0, c_timeGame);
        SoundPlayForPlayer(SoundLink("acAttackWave_Kerrigan_1282222222322", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
        Wait(9.0, c_timeGame);
        SoundPlayForPlayer(SoundLink("acAttackWave_Kerrigan_12822222223222", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E58D95E4BD8DE5BC80E5A78BE6849FE69F93E5BA94E794A8_Init () {
    libNEXS_gt_E58D95E4BD8DE5BC80E5A78BE6849FE69F93E5BA94E794A8 = TriggerCreate("libNEXS_gt_E58D95E4BD8DE5BC80E5A78BE6849FE69F93E5BA94E794A8_Func");
    TriggerEnable(libNEXS_gt_E58D95E4BD8DE5BC80E5A78BE6849FE69F93E5BA94E794A8, false);
    TriggerAddEventTimeElapsed(libNEXS_gt_E58D95E4BD8DE5BC80E5A78BE6849FE69F93E5BA94E794A8, 64.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E795B8E58F98E4BD93E99DA2E69DBFE7949FE68890_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_supply;
    fixed lv_resource;
    unit lv_targetUnit;

    // Automatic Variable Declarations
    fixed auto4EEFFBA7_val;

    // Variable Initialization
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_supply = UnitTypeGetProperty(UnitGetType(lv_targetUnit), c_unitPropSuppliesUsed);
    lv_resource = UnitTypeGetCost(UnitGetType(lv_targetUnit), c_unitCostVespene);
    PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, c_playerPropVespene, c_playerPropOperAdd, FixedToInt((0.75 * lv_resource)));
    auto4EEFFBA7_val = lv_supply;
    if (auto4EEFFBA7_val == FixedToInt(3.0)) {
        UnitCreate(2, "InfestedAbomination2", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), RandomInt(0, 360));
    }
    else if (auto4EEFFBA7_val == FixedToInt(4.0)) {
        UnitCreate(2, "InfestedAbomination2", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), RandomInt(0, 360));
    }
    else if (auto4EEFFBA7_val == FixedToInt(5.0)) {
        UnitCreate(3, "InfestedAbomination2", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), RandomInt(0, 360));
    }
    else if (auto4EEFFBA7_val == FixedToInt(6.0)) {
        UnitCreate(3, "InfestedAbomination2", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), RandomInt(0, 360));
    }
    else {
        UnitCreate(1, "InfestedAbomination2", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), RandomInt(0, 360));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E795B8E58F98E4BD93E99DA2E69DBFE7949FE68890_Init () {
    libNEXS_gt_E795B8E58F98E4BD93E99DA2E69DBFE7949FE68890 = TriggerCreate("libNEXS_gt_E795B8E58F98E4BD93E99DA2E69DBFE7949FE68890_Func");
    TriggerEnable(libNEXS_gt_E795B8E58F98E4BD93E99DA2E69DBFE7949FE68890, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E795B8E58F98E4BD93E99DA2E69DBFE7949FE68890, c_playerAny, "HansonGeneMutateKRSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5A4AAE7A9BAE7AB99E883BDE9878FE88EB7E58F96_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto77E0E122_g;
    int auto77E0E122_u;
    unit auto77E0E122_var;
    const int autoEECD0CBC_n = 2;
    int autoEECD0CBC_i;
    const int autoA4405846_n = 3;
    int autoA4405846_i;
    const int auto2926ACC1_n = 6;
    int auto2926ACC1_i;

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) != true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNEXS_gv_spaceStation == null)) {
        auto77E0E122_g = UnitGroup("HansonScienceStationCrashed", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto77E0E122_u = UnitGroupCount(auto77E0E122_g, c_unitCountAll);
        for (;; auto77E0E122_u -= 1) {
            auto77E0E122_var = UnitGroupUnitFromEnd(auto77E0E122_g, auto77E0E122_u);
            if (auto77E0E122_var == null) { break; }
            libNEXS_gv_spaceStation = auto77E0E122_var;
        }
    }

    if (((UnitGetType(EventUnit()) == "HansonColonyGuardians") || (UnitGetType(EventUnit()) == "HansonMedivac"))) {
        PlayerCreateEffectUnit(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, "SoulAbsorptionMU4", libNEXS_gv_spaceStation);
    }

    if (((UnitGetType(EventUnit()) == "HansonGoliath") || (UnitGetType(EventUnit()) == "SIWraith"))) {
        for (autoEECD0CBC_i = 1; autoEECD0CBC_i <= autoEECD0CBC_n; autoEECD0CBC_i += 1) {
            PlayerCreateEffectUnit(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, "SoulAbsorptionMU4", libNEXS_gv_spaceStation);
        }
    }

    if (((UnitGetType(EventUnit()) == "InfestedSiegeBreaker") || (UnitGetType(EventUnit()) == "InfestedSiegeBreakerSieged") || (UnitGetType(EventUnit()) == "InfestedBanshee"))) {
        for (autoA4405846_i = 1; autoA4405846_i <= autoA4405846_n; autoA4405846_i += 1) {
            PlayerCreateEffectUnit(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, "SoulAbsorptionMU4", libNEXS_gv_spaceStation);
        }
    }

    if ((UnitGetType(EventUnit()) == "HansonHeavyGuardMecha")) {
        for (auto2926ACC1_i = 1; auto2926ACC1_i <= auto2926ACC1_n; auto2926ACC1_i += 1) {
            PlayerCreateEffectUnit(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, "SoulAbsorptionMU4", libNEXS_gv_spaceStation);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5A4AAE7A9BAE7AB99E883BDE9878FE88EB7E58F96_Init () {
    libNEXS_gt_E5A4AAE7A9BAE7AB99E883BDE9878FE88EB7E58F96 = TriggerCreate("libNEXS_gt_E5A4AAE7A9BAE7AB99E883BDE9878FE88EB7E58F96_Func");
    TriggerEnable(libNEXS_gt_E5A4AAE7A9BAE7AB99E883BDE9878FE88EB7E58F96, false);
    TriggerAddEventUnitDied(libNEXS_gt_E5A4AAE7A9BAE7AB99E883BDE9878FE88EB7E58F96, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????1??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6B189E6A3AEE5A881E69C9B1E5BC80E590AF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, "HansonPrestigeUndyingInfestation", 1);
    TechTreeAbilityAllow(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, AbilityCommand("CommandCenterTrain22", 5), false);
    TechTreeAbilityAllow(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, AbilityCommand("ArmoryResearchVoidCoop2", 23), false);
    TechTreeAbilityAllow(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, AbilityCommand("ArmoryResearchVoidCoop22", 23), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_1F31EAA6"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6B189E6A3AEE5A881E69C9B1E5BC80E590AF_Init () {
    libNEXS_gt_E6B189E6A3AEE5A881E69C9B1E5BC80E590AF = TriggerCreate("libNEXS_gt_E6B189E6A3AEE5A881E69C9B1E5BC80E590AF_Func");
    TriggerEnable(libNEXS_gt_E6B189E6A3AEE5A881E69C9B1E5BC80E590AF, false);
    TriggerAddEventChatMessage(libNEXS_gt_E6B189E6A3AEE5A881E69C9B1E5BC80E590AF, c_playerAny, "-Hanson1", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????2??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6B189E6A3AEE5A881E69C9B2E5BC80E590AF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, "HansonPrestigeUnendingWraith", 1);
    TriggerEnable(libNEXS_gt_E697A0E5B0BDE6ADBBE781B5E883BDE9878FE6A380E6B58B, true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_9968EB90"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6B189E6A3AEE5A881E69C9B2E5BC80E590AF_Init () {
    libNEXS_gt_E6B189E6A3AEE5A881E69C9B2E5BC80E590AF = TriggerCreate("libNEXS_gt_E6B189E6A3AEE5A881E69C9B2E5BC80E590AF_Func");
    TriggerEnable(libNEXS_gt_E6B189E6A3AEE5A881E69C9B2E5BC80E590AF, false);
    TriggerAddEventChatMessage(libNEXS_gt_E6B189E6A3AEE5A881E69C9B2E5BC80E590AF, c_playerAny, "-Hanson2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E697A0E5B0BDE6ADBBE781B5E883BDE9878FE6A380E6B58B_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto64AB395F_g;
    int auto64AB395F_u;
    unit auto64AB395F_var;
    unitgroup auto50A2D6EB_g;
    int auto50A2D6EB_u;
    unit auto50A2D6EB_var;
    unitgroup autoA2379736_g;
    int autoA2379736_u;
    unit autoA2379736_var;
    unitgroup autoA21BAC3F_g;
    int autoA21BAC3F_u;
    unit autoA21BAC3F_var;
    unitgroup auto5277CEC2_g;
    int auto5277CEC2_u;
    unit auto5277CEC2_var;
    unitgroup auto6C7547E5_g;
    int auto6C7547E5_u;
    unit auto6C7547E5_var;
    unitgroup autoD2EA54C8_g;
    int autoD2EA54C8_u;
    unit autoD2EA54C8_var;
    unitgroup auto54A5F053_g;
    int auto54A5F053_u;
    unit auto54A5F053_var;
    unitgroup auto702D65B1_g;
    int auto702D65B1_u;
    unit auto702D65B1_var;
    unitgroup auto15F402B2_g;
    int auto15F402B2_u;
    unit auto15F402B2_var;
    unitgroup autoBF1D4DE7_g;
    int autoBF1D4DE7_u;
    unit autoBF1D4DE7_var;
    unitgroup auto2EB0D9A9_g;
    int auto2EB0D9A9_u;
    unit auto2EB0D9A9_var;
    unitgroup auto2421949A_g;
    int auto2421949A_u;
    unit auto2421949A_var;
    unitgroup auto807E19ED_g;
    int auto807E19ED_u;
    unit auto807E19ED_var;
    unitgroup autoA062C021_g;
    int autoA062C021_u;
    unit autoA062C021_var;
    unitgroup auto589DD148_g;
    int auto589DD148_u;
    unit auto589DD148_var;
    unitgroup auto1482A020_g;
    int auto1482A020_u;
    unit auto1482A020_var;
    unitgroup auto73B70A47_g;
    int auto73B70A47_u;
    unit auto73B70A47_var;
    unitgroup auto0CB1365F_g;
    int auto0CB1365F_u;
    unit auto0CB1365F_var;
    unitgroup autoF3634A18_g;
    int autoF3634A18_u;
    unit autoF3634A18_var;
    unitgroup auto72950C68_g;
    int auto72950C68_u;
    unit auto72950C68_var;
    unitgroup auto8E186568_g;
    int auto8E186568_u;
    unit auto8E186568_var;
    unitgroup auto40C92AAA_g;
    int auto40C92AAA_u;
    unit auto40C92AAA_var;
    unitgroup auto074E451A_g;
    int auto074E451A_u;
    unit auto074E451A_var;
    unitgroup auto94A9AA7D_g;
    int auto94A9AA7D_u;
    unit auto94A9AA7D_var;
    unitgroup auto9015FBFE_g;
    int auto9015FBFE_u;
    unit auto9015FBFE_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HansonScienceStationCrashed"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 400.0))) {
        auto64AB395F_g = UnitGroup("HansonCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto64AB395F_u = UnitGroupCount(auto64AB395F_g, c_unitCountAll);
        for (;; auto64AB395F_u -= 1) {
            auto64AB395F_var = UnitGroupUnitFromEnd(auto64AB395F_g, auto64AB395F_u);
            if (auto64AB395F_var == null) { break; }
            UnitBehaviorRemove(auto64AB395F_var, "HansonDeathMan1", 25);
        }
    }
    else if (((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 400.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 800.0))) {
        auto50A2D6EB_g = UnitGroup("HansonCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto50A2D6EB_u = UnitGroupCount(auto50A2D6EB_g, c_unitCountAll);
        for (;; auto50A2D6EB_u -= 1) {
            auto50A2D6EB_var = UnitGroupUnitFromEnd(auto50A2D6EB_g, auto50A2D6EB_u);
            if (auto50A2D6EB_var == null) { break; }
            UnitBehaviorRemove(auto50A2D6EB_var, "HansonDeathMan1", 25);
            UnitBehaviorAddPlayer(auto50A2D6EB_var, "HansonDeathMan1", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, 1);
        }
    }
    else if (((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 800.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 1200.0))) {
        autoA2379736_g = UnitGroup("HansonCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        autoA2379736_u = UnitGroupCount(autoA2379736_g, c_unitCountAll);
        for (;; autoA2379736_u -= 1) {
            autoA2379736_var = UnitGroupUnitFromEnd(autoA2379736_g, autoA2379736_u);
            if (autoA2379736_var == null) { break; }
            UnitBehaviorRemove(autoA2379736_var, "HansonDeathMan1", 25);
            UnitBehaviorAddPlayer(autoA2379736_var, "HansonDeathMan1", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, 2);
        }
    }
    else if (((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 1200.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 1600.0))) {
        autoA21BAC3F_g = UnitGroup("HansonCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        autoA21BAC3F_u = UnitGroupCount(autoA21BAC3F_g, c_unitCountAll);
        for (;; autoA21BAC3F_u -= 1) {
            autoA21BAC3F_var = UnitGroupUnitFromEnd(autoA21BAC3F_g, autoA21BAC3F_u);
            if (autoA21BAC3F_var == null) { break; }
            UnitBehaviorRemove(autoA21BAC3F_var, "HansonDeathMan1", 25);
            UnitBehaviorAddPlayer(autoA21BAC3F_var, "HansonDeathMan1", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, 3);
        }
    }
    else if (((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 1600.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 2000.0))) {
        auto5277CEC2_g = UnitGroup("HansonCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto5277CEC2_u = UnitGroupCount(auto5277CEC2_g, c_unitCountAll);
        for (;; auto5277CEC2_u -= 1) {
            auto5277CEC2_var = UnitGroupUnitFromEnd(auto5277CEC2_g, auto5277CEC2_u);
            if (auto5277CEC2_var == null) { break; }
            UnitBehaviorRemove(auto5277CEC2_var, "HansonDeathMan1", 25);
            UnitBehaviorAddPlayer(auto5277CEC2_var, "HansonDeathMan1", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, 4);
        }
    }
    else if (((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 2000.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 2400.0))) {
        auto6C7547E5_g = UnitGroup("HansonCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto6C7547E5_u = UnitGroupCount(auto6C7547E5_g, c_unitCountAll);
        for (;; auto6C7547E5_u -= 1) {
            auto6C7547E5_var = UnitGroupUnitFromEnd(auto6C7547E5_g, auto6C7547E5_u);
            if (auto6C7547E5_var == null) { break; }
            UnitBehaviorRemove(auto6C7547E5_var, "HansonDeathMan1", 25);
            UnitBehaviorAddPlayer(auto6C7547E5_var, "HansonDeathMan1", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, 5);
        }
    }
    else if (((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 2400.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 2800.0))) {
        autoD2EA54C8_g = UnitGroup("HansonCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        autoD2EA54C8_u = UnitGroupCount(autoD2EA54C8_g, c_unitCountAll);
        for (;; autoD2EA54C8_u -= 1) {
            autoD2EA54C8_var = UnitGroupUnitFromEnd(autoD2EA54C8_g, autoD2EA54C8_u);
            if (autoD2EA54C8_var == null) { break; }
            UnitBehaviorRemove(autoD2EA54C8_var, "HansonDeathMan1", 25);
            UnitBehaviorAddPlayer(autoD2EA54C8_var, "HansonDeathMan1", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, 6);
        }
    }
    else if (((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 2800.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 3200.0))) {
        auto54A5F053_g = UnitGroup("HansonCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto54A5F053_u = UnitGroupCount(auto54A5F053_g, c_unitCountAll);
        for (;; auto54A5F053_u -= 1) {
            auto54A5F053_var = UnitGroupUnitFromEnd(auto54A5F053_g, auto54A5F053_u);
            if (auto54A5F053_var == null) { break; }
            UnitBehaviorRemove(auto54A5F053_var, "HansonDeathMan1", 25);
            UnitBehaviorAddPlayer(auto54A5F053_var, "HansonDeathMan1", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, 7);
        }
    }
    else if (((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 3200.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 3600.0))) {
        auto702D65B1_g = UnitGroup("HansonCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto702D65B1_u = UnitGroupCount(auto702D65B1_g, c_unitCountAll);
        for (;; auto702D65B1_u -= 1) {
            auto702D65B1_var = UnitGroupUnitFromEnd(auto702D65B1_g, auto702D65B1_u);
            if (auto702D65B1_var == null) { break; }
            UnitBehaviorRemove(auto702D65B1_var, "HansonDeathMan1", 25);
            UnitBehaviorAddPlayer(auto702D65B1_var, "HansonDeathMan1", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, 8);
        }
    }
    else if (((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 3600.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 4000.0))) {
        auto15F402B2_g = UnitGroup("HansonCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto15F402B2_u = UnitGroupCount(auto15F402B2_g, c_unitCountAll);
        for (;; auto15F402B2_u -= 1) {
            auto15F402B2_var = UnitGroupUnitFromEnd(auto15F402B2_g, auto15F402B2_u);
            if (auto15F402B2_var == null) { break; }
            UnitBehaviorRemove(auto15F402B2_var, "HansonDeathMan1", 25);
            UnitBehaviorAddPlayer(auto15F402B2_var, "HansonDeathMan1", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, 9);
        }
    }
    else if (((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 4000.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 4400.0))) {
        autoBF1D4DE7_g = UnitGroup("HansonCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        autoBF1D4DE7_u = UnitGroupCount(autoBF1D4DE7_g, c_unitCountAll);
        for (;; autoBF1D4DE7_u -= 1) {
            autoBF1D4DE7_var = UnitGroupUnitFromEnd(autoBF1D4DE7_g, autoBF1D4DE7_u);
            if (autoBF1D4DE7_var == null) { break; }
            UnitBehaviorRemove(autoBF1D4DE7_var, "HansonDeathMan1", 25);
            UnitBehaviorAddPlayer(autoBF1D4DE7_var, "HansonDeathMan1", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, 10);
        }
    }
    else if (((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 4400.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 4800.0))) {
        auto2EB0D9A9_g = UnitGroup("HansonCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto2EB0D9A9_u = UnitGroupCount(auto2EB0D9A9_g, c_unitCountAll);
        for (;; auto2EB0D9A9_u -= 1) {
            auto2EB0D9A9_var = UnitGroupUnitFromEnd(auto2EB0D9A9_g, auto2EB0D9A9_u);
            if (auto2EB0D9A9_var == null) { break; }
            UnitBehaviorRemove(auto2EB0D9A9_var, "HansonDeathMan1", 25);
            UnitBehaviorAddPlayer(auto2EB0D9A9_var, "HansonDeathMan1", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, 11);
        }
    }
    else if (((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 4800.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 5200.0))) {
        auto2421949A_g = UnitGroup("HansonCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto2421949A_u = UnitGroupCount(auto2421949A_g, c_unitCountAll);
        for (;; auto2421949A_u -= 1) {
            auto2421949A_var = UnitGroupUnitFromEnd(auto2421949A_g, auto2421949A_u);
            if (auto2421949A_var == null) { break; }
            UnitBehaviorRemove(auto2421949A_var, "HansonDeathMan1", 25);
            UnitBehaviorAddPlayer(auto2421949A_var, "HansonDeathMan1", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, 12);
        }
    }
    else if (((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 5200.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 5600.0))) {
        auto807E19ED_g = UnitGroup("HansonCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto807E19ED_u = UnitGroupCount(auto807E19ED_g, c_unitCountAll);
        for (;; auto807E19ED_u -= 1) {
            auto807E19ED_var = UnitGroupUnitFromEnd(auto807E19ED_g, auto807E19ED_u);
            if (auto807E19ED_var == null) { break; }
            UnitBehaviorRemove(auto807E19ED_var, "HansonDeathMan1", 25);
            UnitBehaviorAddPlayer(auto807E19ED_var, "HansonDeathMan1", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, 13);
        }
    }
    else if (((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 5600.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 6000.0))) {
        autoA062C021_g = UnitGroup("HansonCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        autoA062C021_u = UnitGroupCount(autoA062C021_g, c_unitCountAll);
        for (;; autoA062C021_u -= 1) {
            autoA062C021_var = UnitGroupUnitFromEnd(autoA062C021_g, autoA062C021_u);
            if (autoA062C021_var == null) { break; }
            UnitBehaviorRemove(autoA062C021_var, "HansonDeathMan1", 25);
            UnitBehaviorAddPlayer(autoA062C021_var, "HansonDeathMan1", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, 14);
        }
    }
    else if (((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 6000.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 6400.0))) {
        auto589DD148_g = UnitGroup("HansonCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto589DD148_u = UnitGroupCount(auto589DD148_g, c_unitCountAll);
        for (;; auto589DD148_u -= 1) {
            auto589DD148_var = UnitGroupUnitFromEnd(auto589DD148_g, auto589DD148_u);
            if (auto589DD148_var == null) { break; }
            UnitBehaviorRemove(auto589DD148_var, "HansonDeathMan1", 25);
            UnitBehaviorAddPlayer(auto589DD148_var, "HansonDeathMan1", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, 15);
        }
    }
    else if (((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 6400.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 6800.0))) {
        auto1482A020_g = UnitGroup("HansonCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto1482A020_u = UnitGroupCount(auto1482A020_g, c_unitCountAll);
        for (;; auto1482A020_u -= 1) {
            auto1482A020_var = UnitGroupUnitFromEnd(auto1482A020_g, auto1482A020_u);
            if (auto1482A020_var == null) { break; }
            UnitBehaviorRemove(auto1482A020_var, "HansonDeathMan1", 25);
            UnitBehaviorAddPlayer(auto1482A020_var, "HansonDeathMan1", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, 16);
        }
    }
    else if (((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 6800.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 7200.0))) {
        auto73B70A47_g = UnitGroup("HansonCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto73B70A47_u = UnitGroupCount(auto73B70A47_g, c_unitCountAll);
        for (;; auto73B70A47_u -= 1) {
            auto73B70A47_var = UnitGroupUnitFromEnd(auto73B70A47_g, auto73B70A47_u);
            if (auto73B70A47_var == null) { break; }
            UnitBehaviorRemove(auto73B70A47_var, "HansonDeathMan1", 25);
            UnitBehaviorAddPlayer(auto73B70A47_var, "HansonDeathMan1", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, 17);
        }
    }
    else if (((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 7200.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 7600.0))) {
        auto0CB1365F_g = UnitGroup("HansonCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto0CB1365F_u = UnitGroupCount(auto0CB1365F_g, c_unitCountAll);
        for (;; auto0CB1365F_u -= 1) {
            auto0CB1365F_var = UnitGroupUnitFromEnd(auto0CB1365F_g, auto0CB1365F_u);
            if (auto0CB1365F_var == null) { break; }
            UnitBehaviorRemove(auto0CB1365F_var, "HansonDeathMan1", 25);
            UnitBehaviorAddPlayer(auto0CB1365F_var, "HansonDeathMan1", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, 18);
        }
    }
    else if (((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 7600.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 8000.0))) {
        autoF3634A18_g = UnitGroup("HansonCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        autoF3634A18_u = UnitGroupCount(autoF3634A18_g, c_unitCountAll);
        for (;; autoF3634A18_u -= 1) {
            autoF3634A18_var = UnitGroupUnitFromEnd(autoF3634A18_g, autoF3634A18_u);
            if (autoF3634A18_var == null) { break; }
            UnitBehaviorRemove(autoF3634A18_var, "HansonDeathMan1", 25);
            UnitBehaviorAddPlayer(autoF3634A18_var, "HansonDeathMan1", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, 19);
        }
    }
    else if (((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 8000.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 8400.0))) {
        auto72950C68_g = UnitGroup("HansonCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto72950C68_u = UnitGroupCount(auto72950C68_g, c_unitCountAll);
        for (;; auto72950C68_u -= 1) {
            auto72950C68_var = UnitGroupUnitFromEnd(auto72950C68_g, auto72950C68_u);
            if (auto72950C68_var == null) { break; }
            UnitBehaviorRemove(auto72950C68_var, "HansonDeathMan1", 25);
            UnitBehaviorAddPlayer(auto72950C68_var, "HansonDeathMan1", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, 20);
        }
    }
    else if (((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 8400.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 8800.0))) {
        auto8E186568_g = UnitGroup("HansonCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto8E186568_u = UnitGroupCount(auto8E186568_g, c_unitCountAll);
        for (;; auto8E186568_u -= 1) {
            auto8E186568_var = UnitGroupUnitFromEnd(auto8E186568_g, auto8E186568_u);
            if (auto8E186568_var == null) { break; }
            UnitBehaviorRemove(auto8E186568_var, "HansonDeathMan1", 25);
            UnitBehaviorAddPlayer(auto8E186568_var, "HansonDeathMan1", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, 21);
        }
    }
    else if (((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 8800.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 9200.0))) {
        auto40C92AAA_g = UnitGroup("HansonCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto40C92AAA_u = UnitGroupCount(auto40C92AAA_g, c_unitCountAll);
        for (;; auto40C92AAA_u -= 1) {
            auto40C92AAA_var = UnitGroupUnitFromEnd(auto40C92AAA_g, auto40C92AAA_u);
            if (auto40C92AAA_var == null) { break; }
            UnitBehaviorRemove(auto40C92AAA_var, "HansonDeathMan1", 25);
            UnitBehaviorAddPlayer(auto40C92AAA_var, "HansonDeathMan1", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, 22);
        }
    }
    else if (((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 9200.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 9600.0))) {
        auto074E451A_g = UnitGroup("HansonCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto074E451A_u = UnitGroupCount(auto074E451A_g, c_unitCountAll);
        for (;; auto074E451A_u -= 1) {
            auto074E451A_var = UnitGroupUnitFromEnd(auto074E451A_g, auto074E451A_u);
            if (auto074E451A_var == null) { break; }
            UnitBehaviorRemove(auto074E451A_var, "HansonDeathMan1", 25);
            UnitBehaviorAddPlayer(auto074E451A_var, "HansonDeathMan1", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, 23);
        }
    }
    else if (((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 9600.0) && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) < 10000.0))) {
        auto94A9AA7D_g = UnitGroup("HansonCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto94A9AA7D_u = UnitGroupCount(auto94A9AA7D_g, c_unitCountAll);
        for (;; auto94A9AA7D_u -= 1) {
            auto94A9AA7D_var = UnitGroupUnitFromEnd(auto94A9AA7D_g, auto94A9AA7D_u);
            if (auto94A9AA7D_var == null) { break; }
            UnitBehaviorRemove(auto94A9AA7D_var, "HansonDeathMan1", 25);
            UnitBehaviorAddPlayer(auto94A9AA7D_var, "HansonDeathMan1", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, 24);
        }
    }
    else if (((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) == 10000.0))) {
        auto9015FBFE_g = UnitGroup("HansonCaster", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto9015FBFE_u = UnitGroupCount(auto9015FBFE_g, c_unitCountAll);
        for (;; auto9015FBFE_u -= 1) {
            auto9015FBFE_var = UnitGroupUnitFromEnd(auto9015FBFE_g, auto9015FBFE_u);
            if (auto9015FBFE_var == null) { break; }
            UnitBehaviorRemove(auto9015FBFE_var, "HansonDeathMan1", 25);
            UnitBehaviorAddPlayer(auto9015FBFE_var, "HansonDeathMan1", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, 25);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E697A0E5B0BDE6ADBBE781B5E883BDE9878FE6A380E6B58B_Init () {
    libNEXS_gt_E697A0E5B0BDE6ADBBE781B5E883BDE9878FE6A380E6B58B = TriggerCreate("libNEXS_gt_E697A0E5B0BDE6ADBBE781B5E883BDE9878FE6A380E6B58B_Func");
    TriggerEnable(libNEXS_gt_E697A0E5B0BDE6ADBBE781B5E883BDE9878FE6A380E6B58B, false);
    TriggerAddEventUnitProperty(libNEXS_gt_E697A0E5B0BDE6ADBBE781B5E883BDE9878FE6A380E6B58B, null, c_unitPropEnergy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????3??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E6B189E6A3AEE5A881E69C9B3E5BC80E590AF_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID, "HansonPrestigeUnexpectedHorror", 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_E0AC7402"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E6B189E6A3AEE5A881E69C9B3E5BC80E590AF_Init () {
    libNEXS_gt_E6B189E6A3AEE5A881E69C9B3E5BC80E590AF = TriggerCreate("libNEXS_gt_E6B189E6A3AEE5A881E69C9B3E5BC80E590AF_Func");
    TriggerEnable(libNEXS_gt_E6B189E6A3AEE5A881E69C9B3E5BC80E590AF, false);
    TriggerAddEventChatMessage(libNEXS_gt_E6B189E6A3AEE5A881E69C9B3E5BC80E590AF, c_playerAny, "-Hanson3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraNormalStasis SlowBuff Scale
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraNormalStasisSlowBuffScale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_slowBuffCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(EventUnit()) == true) && (UnitHasBehavior2(EventUnit(), "JinaraNormalStasisFieldSlowMark") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_slowBuffCount = UnitBehaviorCount(EventUnit(), "JinaraNormalStasisFieldSlowMark");
    if ((lv_slowBuffCount == 5)) {
        ActorCreate(ActorScopeFromUnit(EventUnit()), "JinaraNormalStasisFieldSlow5Layers", null, null, null);
    }

    ActorScopeSend(ActorScopeFromUnit(EventUnit()), libNtve_gf_Signal(IntToString(lv_slowBuffCount)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraNormalStasisSlowBuffScale_Init () {
    libNEXS_gt_JinaraNormalStasisSlowBuffScale = TriggerCreate("libNEXS_gt_JinaraNormalStasisSlowBuffScale_Func");
    TriggerEnable(libNEXS_gt_JinaraNormalStasisSlowBuffScale, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_JinaraNormalStasisSlowBuffScale, null, "JinaraNormalStasisFieldSlowMark", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraNormalStasisBeam_FlashOn
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraNormalStasisBeam_FlashOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonHighlighted(PlayerGroupSingle(lv_p), AbilityCommand("JinaraNormalStasisBeam", 0), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraNormalStasisBeam_FlashOn_Init () {
    libNEXS_gt_JinaraNormalStasisBeam_FlashOn = TriggerCreate("libNEXS_gt_JinaraNormalStasisBeam_FlashOn_Func");
    TriggerEnable(libNEXS_gt_JinaraNormalStasisBeam_FlashOn, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_JinaraNormalStasisBeam_FlashOn, null, "JinaraNormalMark", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraNormalStasisBeam_FlashOff
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraNormalStasisBeam_FlashOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonHighlighted(PlayerGroupSingle(lv_p), AbilityCommand("JinaraNormalStasisBeam", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraNormalStasisBeam_FlashOff_Init () {
    libNEXS_gt_JinaraNormalStasisBeam_FlashOff = TriggerCreate("libNEXS_gt_JinaraNormalStasisBeam_FlashOff_Func");
    TriggerEnable(libNEXS_gt_JinaraNormalStasisBeam_FlashOff, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_JinaraNormalStasisBeam_FlashOff, null, "JinaraNormalMark", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraRouteChoice
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraRouteChoice_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_upgrade;

    // Automatic Variable Declarations
    string auto43887622_val;

    // Variable Initialization
    lv_upgrade = EventUpgradeName();

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(libNEXS_gv_jinaraCaster, c_unitPropEnergy, 30.0);
    auto43887622_val = lv_upgrade;
    if (auto43887622_val == "JinaraChoiceRouteAir") {
        libNEXS_gf_JinaraAirRoute();
        libNtve_gf_SendActorMessageToUnit(libNEXS_gv_jinaraAltar, "Signal JinaraAirRoute");
        libNEXS_gf_JinaraGPUpdate(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15);
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else if (auto43887622_val == "JinaraChoiceRouteNormal") {
        libNEXS_gf_JinaraNormalRoute();
        libNtve_gf_SendActorMessageToUnit(libNEXS_gv_jinaraAltar, "Signal JinaraNormalRoute");
        libNEXS_gf_JinaraGPUpdate(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15);
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else if (auto43887622_val == "JinaraChoiceRouteScarlet") {
        libNEXS_gf_JinaraScarletRoute();
        libNtve_gf_SendActorMessageToUnit(libNEXS_gv_jinaraAltar, "Signal JinaraScarletRoute");
        libNEXS_gf_JinaraGPUpdate(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15);
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraRouteChoice_Init () {
    libNEXS_gt_JinaraRouteChoice = TriggerCreate("libNEXS_gt_JinaraRouteChoice_Func");
    TriggerEnable(libNEXS_gt_JinaraRouteChoice, false);
    TriggerAddEventUpgradeLevelChanged(libNEXS_gt_JinaraRouteChoice, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraRouteChoice HighLight
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraRouteChoiceHighLight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(120.0, c_timeGame);
    if ((TriggerIsEnabled(libNEXS_gt_JinaraRouteChoice) == true)) {
        TriggerExecute(libNEXS_gt_AbilityTransmissionJinaraRouteChoice, true, false);
        UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), AbilityCommand("JinaraRouteResearch", 0), true);
        UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), AbilityCommand("JinaraRouteResearch", 1), true);
        UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), AbilityCommand("JinaraRouteResearch", 2), true);
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }
    Wait(30.0, c_timeGame);
    while ((TriggerIsEnabled(libNEXS_gt_JinaraRouteChoice) == true)) {
        TriggerExecute(libNEXS_gt_AbilityTransmissionJinaraRouteChoice, true, false);
        Wait(20.0, c_timeGame);
    }
    UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), AbilityCommand("JinaraRouteResearch", 0), false);
    UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), AbilityCommand("JinaraRouteResearch", 1), false);
    UISetButtonHighlighted(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), AbilityCommand("JinaraRouteResearch", 2), false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraRouteChoiceHighLight_Init () {
    libNEXS_gt_JinaraRouteChoiceHighLight = TriggerCreate("libNEXS_gt_JinaraRouteChoiceHighLight_Func");
    TriggerEnable(libNEXS_gt_JinaraRouteChoiceHighLight, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AbilityTransmissionJinaraRouteChoice
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_AbilityTransmissionJinaraRouteChoice_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_JinaraCommanderVOSend(EventPlayer(), SoundLink("JinaraNormal_RouteChoice", -1), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_AbilityTransmissionJinaraRouteChoice_Init () {
    libNEXS_gt_AbilityTransmissionJinaraRouteChoice = TriggerCreate("libNEXS_gt_AbilityTransmissionJinaraRouteChoice_Func");
    TriggerEnable(libNEXS_gt_AbilityTransmissionJinaraRouteChoice, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AbilityTransmissionJinaraScarletEmpowerMe
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_AbilityTransmissionJinaraScarletEmpowerMe_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_AbilityTransmissionJinaraScarletEmpowerMe_Init () {
    libNEXS_gt_AbilityTransmissionJinaraScarletEmpowerMe = TriggerCreate("libNEXS_gt_AbilityTransmissionJinaraScarletEmpowerMe_Func");
    TriggerEnable(libNEXS_gt_AbilityTransmissionJinaraScarletEmpowerMe, false);
    TriggerAddEventUnitAbility(libNEXS_gt_AbilityTransmissionJinaraScarletEmpowerMe, null, AbilityCommand("JinaraScarletEmpower", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AbilityTransmissionJinaraScarletDeathFleet
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_AbilityTransmissionJinaraScarletDeathFleet_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(12.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_AbilityTransmissionJinaraScarletDeathFleet_Init () {
    libNEXS_gt_AbilityTransmissionJinaraScarletDeathFleet = TriggerCreate("libNEXS_gt_AbilityTransmissionJinaraScarletDeathFleet_Func");
    TriggerEnable(libNEXS_gt_AbilityTransmissionJinaraScarletDeathFleet, false);
    TriggerAddEventUnitAbility(libNEXS_gt_AbilityTransmissionJinaraScarletDeathFleet, null, AbilityCommand("JinaraDeathFleetVoidRay", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libNEXS_gt_AbilityTransmissionJinaraScarletDeathFleet, null, AbilityCommand("JinaraDeathFleetCarrier", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libNEXS_gt_AbilityTransmissionJinaraScarletDeathFleet, null, AbilityCommand("JinaraDeathFleetMotherShip", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AbilityTransmissionJinaraScarletUnitsSacrifice
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_AbilityTransmissionJinaraScarletUnitsSacrifice_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_JinaraCommanderVOSend(EventPlayer(), SoundLink("JinaraScarlet_UnitsSacrifice", -1), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_AbilityTransmissionJinaraScarletUnitsSacrifice_Init () {
    libNEXS_gt_AbilityTransmissionJinaraScarletUnitsSacrifice = TriggerCreate("libNEXS_gt_AbilityTransmissionJinaraScarletUnitsSacrifice_Func");
    TriggerEnable(libNEXS_gt_AbilityTransmissionJinaraScarletUnitsSacrifice, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AbilityTransmissionJinaraScarletUnitsTurn
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_AbilityTransmissionJinaraScarletUnitsTurn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_JinaraCommanderVOSend(EventPlayer(), SoundLink("JinaraScarlet_UnitsTurn", -1), PlayerGroupSingle(EventPlayer()));
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_AbilityTransmissionJinaraScarletUnitsTurn_Init () {
    libNEXS_gt_AbilityTransmissionJinaraScarletUnitsTurn = TriggerCreate("libNEXS_gt_AbilityTransmissionJinaraScarletUnitsTurn_Func");
    TriggerEnable(libNEXS_gt_AbilityTransmissionJinaraScarletUnitsTurn, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_AbilityTransmissionJinaraScarletUnitsTurn, null, "JinaraUnitsTurntoScarletColossus", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_AbilityTransmissionJinaraScarletUnitsTurn, null, "JinaraUnitsTurntoScarletDarkTemplar", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AbilityTransmissionJinaraScarletSacrifice
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_AbilityTransmissionJinaraScarletSacrifice_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_JinaraCommanderVOSend(EventPlayer(), SoundLink("JinaraScarlet_Eat", -1), PlayerGroupSingle(EventPlayer()));
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_AbilityTransmissionJinaraScarletSacrifice_Init () {
    libNEXS_gt_AbilityTransmissionJinaraScarletSacrifice = TriggerCreate("libNEXS_gt_AbilityTransmissionJinaraScarletSacrifice_Func");
    TriggerEnable(libNEXS_gt_AbilityTransmissionJinaraScarletSacrifice, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_AbilityTransmissionJinaraScarletSacrifice, c_playerAny, "JinaraScarletTheStrongestSurviveSearchImpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AbilityTransmissionJinaraNormalDelayBoom
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_AbilityTransmissionJinaraNormalDelayBoom_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_AbilityTransmissionJinaraNormalDelayBoom_Init () {
    libNEXS_gt_AbilityTransmissionJinaraNormalDelayBoom = TriggerCreate("libNEXS_gt_AbilityTransmissionJinaraNormalDelayBoom_Func");
    TriggerEnable(libNEXS_gt_AbilityTransmissionJinaraNormalDelayBoom, false);
    TriggerAddEventUnitAbility(libNEXS_gt_AbilityTransmissionJinaraNormalDelayBoom, null, AbilityCommand("JinaraNormalDelayBoom", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AbilityTransmissionJinaraNormalCallWarpPrism
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_AbilityTransmissionJinaraNormalCallWarpPrism_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(12.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_AbilityTransmissionJinaraNormalCallWarpPrism_Init () {
    libNEXS_gt_AbilityTransmissionJinaraNormalCallWarpPrism = TriggerCreate("libNEXS_gt_AbilityTransmissionJinaraNormalCallWarpPrism_Func");
    TriggerEnable(libNEXS_gt_AbilityTransmissionJinaraNormalCallWarpPrism, false);
    TriggerAddEventUnitAbility(libNEXS_gt_AbilityTransmissionJinaraNormalCallWarpPrism, null, AbilityCommand("JinaraCallWarpPrism", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AbilityTransmissionJinaraNormalRevive
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_AbilityTransmissionJinaraNormalRevive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_AbilityTransmissionJinaraNormalRevive_Init () {
    libNEXS_gt_AbilityTransmissionJinaraNormalRevive = TriggerCreate("libNEXS_gt_AbilityTransmissionJinaraNormalRevive_Func");
    TriggerEnable(libNEXS_gt_AbilityTransmissionJinaraNormalRevive, false);
    TriggerAddEventUnitAbility(libNEXS_gt_AbilityTransmissionJinaraNormalRevive, null, AbilityCommand("JinaraCallWarpPrismWithJinara", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AbilityTransmissionJinaraNormalUnitsSacrifice
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_AbilityTransmissionJinaraNormalUnitsSacrifice_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_JinaraCommanderVOSend(EventPlayer(), SoundLink("JinaraNormal_UnitsSacrifice", -1), PlayerGroupSingle(EventPlayer()));
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_AbilityTransmissionJinaraNormalUnitsSacrifice_Init () {
    libNEXS_gt_AbilityTransmissionJinaraNormalUnitsSacrifice = TriggerCreate("libNEXS_gt_AbilityTransmissionJinaraNormalUnitsSacrifice_Func");
    TriggerEnable(libNEXS_gt_AbilityTransmissionJinaraNormalUnitsSacrifice, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AbilityTransmissionJinaraNormalPissed
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_AbilityTransmissionJinaraNormalPissed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_JinaraCommanderVOSend(EventPlayer(), SoundLink("JinaraNormal_Pissed", -1), PlayerGroupSingle(EventPlayer()));
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_AbilityTransmissionJinaraNormalPissed_Init () {
    libNEXS_gt_AbilityTransmissionJinaraNormalPissed = TriggerCreate("libNEXS_gt_AbilityTransmissionJinaraNormalPissed_Func");
    TriggerEnable(libNEXS_gt_AbilityTransmissionJinaraNormalPissed, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AbilityTransmissionJinaraNormalSacrificeBuffUpgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_AbilityTransmissionJinaraNormalSacrificeBuffUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() == libNEXS_gv_jinara))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_JinaraCommanderVOSend(EventPlayer(), SoundLink("JinaraNormal_SacrificeBuffUpgrade", -1), PlayerGroupSingle(EventPlayer()));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_AbilityTransmissionJinaraNormalSacrificeBuffUpgrade_Init () {
    libNEXS_gt_AbilityTransmissionJinaraNormalSacrificeBuffUpgrade = TriggerCreate("libNEXS_gt_AbilityTransmissionJinaraNormalSacrificeBuffUpgrade_Func");
    TriggerEnable(libNEXS_gt_AbilityTransmissionJinaraNormalSacrificeBuffUpgrade, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_AbilityTransmissionJinaraNormalSacrificeBuffUpgrade, null, "JinaraAscendantSacrificeSelfBuffUpgrade", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraMotherShip Spawn
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraMotherShipSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_i;
    int lv_j;

    // Automatic Variable Declarations
    const int autoBAE39802_ae = 9;
    const int autoBAE39802_ai = 1;

    // Variable Initialization
    lv_i = UnitGetPropertyFixed(libNEXS_gv_jinaraCaster, c_unitPropEnergy, c_unitPropCurrent);

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_jinara = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    libNEXS_gf_SetHeroPanelUnit(1, libNEXS_gv_jinara, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15);
    UnitSetPropertyFixed(libNEXS_gv_jinara, c_unitPropEnergy, lv_i);
    UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_CBEDBB75"));
    UnitBehaviorAddPlayer(libNEXS_gv_jinara, "JinaraConjoinedEnergy", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, 1);
    UnitBehaviorAddPlayer(libNEXS_gv_jinaraCaster, "JinaraConjoinedEnergy", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, 1);
    lv_j = 0;
    for ( ; ( (autoBAE39802_ai >= 0 && lv_j <= autoBAE39802_ae) || (autoBAE39802_ai < 0 && lv_j >= autoBAE39802_ae) ) ; lv_j += autoBAE39802_ai ) {
        if ((libNEXS_gv_jinaraHeroControlGroup[lv_j] == true)) {
            UnitControlGroupAddUnit(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, lv_j, libNEXS_gv_jinara);
            libNEXS_gv_jinaraHeroControlGroup[lv_j] = false;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraMotherShipSpawn_Init () {
    libNEXS_gt_JinaraMotherShipSpawn = TriggerCreate("libNEXS_gt_JinaraMotherShipSpawn_Func");
    TriggerEnable(libNEXS_gt_JinaraMotherShipSpawn, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_JinaraMotherShipSpawn, c_playerAny, "JinaraMothershipCoreMorphComplete");
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraMotherShip Death
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraMotherShipDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "JinaraMotherShip"))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeMorph) != true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeCancel) != true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_44F774EA"));
    libNEXS_gv_jinara = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraMotherShipDeath_Init () {
    libNEXS_gt_JinaraMotherShipDeath = TriggerCreate("libNEXS_gt_JinaraMotherShipDeath_Func");
    TriggerEnable(libNEXS_gt_JinaraMotherShipDeath, false);
    TriggerAddEventUnitDied(libNEXS_gt_JinaraMotherShipDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraMotherShipGravityBomb Mark
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraMotherShipGravityBombMark_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_jinaraMotherShipGravityWellPosition = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    UnitBehaviorAddPlayer(libNEXS_gv_jinara, "JinaraMotherShipGravityWellMark", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraMotherShipGravityBombMark_Init () {
    libNEXS_gt_JinaraMotherShipGravityBombMark = TriggerCreate("libNEXS_gt_JinaraMotherShipGravityBombMark_Func");
    TriggerEnable(libNEXS_gt_JinaraMotherShipGravityBombMark, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_JinaraMotherShipGravityBombMark, c_playerAny, "JinaraMotherShipGravityWaveCreatePersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraMotherShipGravityTeleport
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraMotherShipGravityTeleport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeDestroy)) {
        UnitSetPosition(libNEXS_gv_jinara, libNEXS_gv_jinaraMotherShipGravityWellPosition, false);
        UnitCreateEffectPoint(libNEXS_gv_jinara, "JinaraMotherShipGravityWellSet", libNEXS_gv_jinaraMotherShipGravityWellPosition);
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
        libNtve_gf_CreateActorAtPoint("JinaraMotherShipGravityWellFluctuation", libNEXS_gv_jinaraMotherShipGravityWellPosition);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraMotherShipGravityTeleport_Init () {
    libNEXS_gt_JinaraMotherShipGravityTeleport = TriggerCreate("libNEXS_gt_JinaraMotherShipGravityTeleport_Func");
    TriggerEnable(libNEXS_gt_JinaraMotherShipGravityTeleport, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_JinaraMotherShipGravityTeleport, UnitRefFromVariable("libNEXS_gv_jinara"), "JinaraMotherShipGravityWellTriggerNotice", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraMotherShipLoad AB
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraMotherShipLoadAB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto666DE9A3_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto666DE9A3_val = UnitGetType(EventUnitCargo());
    if (auto666DE9A3_val == "JinaraProbe") {
        UnitBehaviorAddPlayer(libNEXS_gv_jinara, "JinaraMothershipLoadProbe", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, 1);
        UnitAbilityAddChargeUsed(libNEXS_gv_jinara, "JinaraMotherShipUnLoadProbe", "Abil/JinaraMotherShipUnLoadProbe", -1.0);
        libNEXS_gv_loadProbeCount += 1;
    }
    else if (auto666DE9A3_val == "JinaraSupplicant") {
        UnitBehaviorAddPlayer(libNEXS_gv_jinara, "JinaraMothershipLoadSupplicant", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, 1);
        UnitAbilityAddChargeUsed(libNEXS_gv_jinara, "JinaraMotherShipUnLoadSupplicant", "Abil/JinaraMotherShipUnLoadSupplicant", -1.0);
        libNEXS_gv_loadSupplicantCounts += 1;
        CatalogFieldValueSet(c_gameCatalogBehavior, "JinaraMothershipLoadSupplicantWeapon", "Period", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, FixedToString(((libNEXS_gv_weaponCycleSupplicant * libNEXS_gv_deceleration) / libNEXS_gv_loadSupplicantCounts), 2));
    }
    else if (auto666DE9A3_val == "JinaraMonitor") {
        UnitBehaviorAddPlayer(libNEXS_gv_jinara, "JinaraMothershipLoadMonitor", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, 1);
        UnitAbilityAddChargeUsed(libNEXS_gv_jinara, "JinaraMotherShipUnLoadMonitor", "Abil/JinaraMotherShipUnLoadMonitor", -1.0);
        libNEXS_gv_loadMonitorCounts += 1;
        CatalogFieldValueSet(c_gameCatalogEffect, "SOAMothershipLineAttackInitialCP", "PeriodicOffsetArray[" + IntToString(0) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, ("0," + (FixedToString((-10.0 - (libNEXS_gv_loadMonitorCounts * 0.3)), 1) + ",0")));
        CatalogFieldValueSet(c_gameCatalogEffect, "SOAMothershipLineAttackScanCP", "PeriodCount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, IntToString((10 + FixedToInt((libNEXS_gv_loadMonitorCounts / 4.0)))));
        CatalogFieldValueSet(c_gameCatalogEffect, "JinaraMotherShipBeamAttackRiftSearch", "AreaArray[" + IntToString(0) + "].RectangleHeight", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, FixedToString((10+(libNEXS_gv_loadMonitorCounts*0.35)), 2));
        CatalogFieldValueSet(c_gameCatalogEffect, "JinaraMotherShipBeamAttackRiftSearch", "AreaRelativeOffset", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, ("0," + FixedToString((-0.175*libNEXS_gv_loadMonitorCounts), 2)));
        CatalogFieldValueSet(c_gameCatalogEffect, "JinaraMotherShipBeamAttackRiftInitial", "InitialOffset", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, ("0," + (FixedToString((-5-(0.175*libNEXS_gv_loadMonitorCounts)), 2) + ",0")));
        CatalogFieldValueSet(c_gameCatalogActor, "JinaraMotherShipBeamAttackRift", "Scale", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, ("1," + (FixedToString((0.75+(libNEXS_gv_loadMonitorCounts*0.02)), 2) + ",1")));
    }
    else if (auto666DE9A3_val == "JinaraSlayer") {
        UnitBehaviorAddPlayer(libNEXS_gv_jinara, "JinaraMothershipLoadSlayer", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, 1);
        UnitAbilityAddChargeUsed(libNEXS_gv_jinara, "JinaraMotherShipUnLoadSlayer", "Abil/JinaraMotherShipUnLoadSlayer", -1.0);
        libNEXS_gv_loadSlayerCounts += 1;
        CatalogFieldValueSet(c_gameCatalogBehavior, "JinaraMothershipLoadSlayerWeapon", "Period", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, FixedToString(((libNEXS_gv_weaponCycleSlayer * libNEXS_gv_deceleration) / libNEXS_gv_loadSlayerCounts), 2));
    }
    else if (auto666DE9A3_val == "JinaraDarkTemplar") {
        UnitBehaviorAddPlayer(libNEXS_gv_jinara, "JinaraMothershipLoadDarkTemplar", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, 1);
        UnitAbilityAddChargeUsed(libNEXS_gv_jinara, "JinaraMotherShipUnLoadDarkTemplar", "Abil/JinaraMotherShipUnLoadDarkTemplar", -1.0);
        libNEXS_gv_loadDarkTemplarCounts += 1;
        CatalogFieldValueSet(c_gameCatalogBehavior, "JinaraMothershipLoadDarkTemplarWeapon", "Period", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, FixedToString(((libNEXS_gv_weaponCycleDarkTemplar * libNEXS_gv_deceleration) / libNEXS_gv_loadDarkTemplarCounts), 2));
    }
    else if (auto666DE9A3_val == "JinaraColossus") {
        UnitBehaviorAddPlayer(libNEXS_gv_jinara, "JinaraMothershipLoadColossus", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, 1);
        UnitAbilityAddChargeUsed(libNEXS_gv_jinara, "JinaraMotherShipUnLoadColossus", "Abil/JinaraMotherShipUnLoadColossus", -1.0);
        libNEXS_gv_loadColossusCounts += 1;
        CatalogFieldValueSet(c_gameCatalogBehavior, "JinaraMothershipLoadColossusWeapon", "Period", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, FixedToString(((libNEXS_gv_weaponCycleColossus * libNEXS_gv_deceleration) / libNEXS_gv_loadColossusCounts), 2));
    }
    else if (auto666DE9A3_val == "JinaraAscendant") {
        UnitBehaviorAddPlayer(libNEXS_gv_jinara, "JinaraMothershipLoadAscendant", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, 1);
        UnitAbilityAddChargeUsed(libNEXS_gv_jinara, "JinaraMotherShipUnLoadAscendant", "Abil/JinaraMotherShipUnLoadAscendant", -1.0);
        libNEXS_gv_loadAscendantCount += 1;
        UnitBehaviorAddPlayer(libNEXS_gv_jinaraApocalypticBeam, "JinaraMothershipBeamUpgrade", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, 1);
        UnitBehaviorAddPlayer(libNEXS_gv_jinaraCaster, "JinaraMothershipBeamUpgrade", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, 1);
    }
    else if (auto666DE9A3_val == "JinaraAvenger") {
        UnitBehaviorAddPlayer(libNEXS_gv_jinara, "JinaraMothershipLoadAvenger", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, 1);
        UnitAbilityAddChargeUsed(libNEXS_gv_jinara, "JinaraMotherShipUnLoadAvenger", "Abil/JinaraMotherShipUnLoadAvenger", -1.0);
        libNEXS_gv_loadAvengerCount += 1;
        UnitBehaviorAddPlayer(libNEXS_gv_jinaraApocalypticBeam, "JinaraMothershipBeamUpgrade", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, 1);
        UnitBehaviorAddPlayer(libNEXS_gv_jinaraCaster, "JinaraMothershipBeamUpgrade", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, 1);
    }
    else {
        UnitAbilityAddChargeUsed(libNEXS_gv_jinara, "JinaraMotherShipUnLoadExtraUnits", "Abil/JinaraMotherShipUnLoadExtraUnits", -1.0);
        UnitGroupAdd(libNEXS_gv_extraUnits, EventUnitCargo());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraMotherShipLoadAB_Init () {
    libNEXS_gt_JinaraMotherShipLoadAB = TriggerCreate("libNEXS_gt_JinaraMotherShipLoadAB_Func");
    TriggerEnable(libNEXS_gt_JinaraMotherShipLoadAB, false);
    TriggerAddEventUnitCargo(libNEXS_gt_JinaraMotherShipLoadAB, UnitRefFromVariable("libNEXS_gv_jinara"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraMotherShipUnload RB
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraMotherShipUnloadRB_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_motherShipHp;

    // Automatic Variable Declarations
    string autoBF8EB3F4_val;

    // Variable Initialization
    lv_motherShipHp = UnitGetPropertyFixed(libNEXS_gv_jinara, c_unitPropLife, c_unitPropCurrent);

    // Actions
    if (!runActions) {
        return true;
    }

    autoBF8EB3F4_val = UnitGetType(EventUnitCargo());
    if (autoBF8EB3F4_val == "JinaraProbe") {
        UnitBehaviorRemove(libNEXS_gv_jinara, "JinaraMothershipLoadProbe", 1);
    }
    else if (autoBF8EB3F4_val == "JinaraSupplicant") {
        UnitBehaviorRemove(libNEXS_gv_jinara, "JinaraMothershipLoadSupplicant", 1);
        libNEXS_gv_loadSupplicantCounts -= 1;
        if ((lv_motherShipHp > 200.0)) {
            UnitSetPropertyFixed(libNEXS_gv_jinara, c_unitPropLife, (lv_motherShipHp - 200.0));
        }
        else {
            UnitSetPropertyFixed(libNEXS_gv_jinara, c_unitPropLife, 1.0);
        }
        if ((libNEXS_gv_loadSupplicantCounts != 0)) {
            CatalogFieldValueSet(c_gameCatalogBehavior, "JinaraMothershipLoadSupplicantWeapon", "Period", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, FixedToString(((libNEXS_gv_weaponCycleSupplicant * libNEXS_gv_deceleration) / libNEXS_gv_loadSupplicantCounts), 2));
        }

    }
    else if (autoBF8EB3F4_val == "JinaraMonitor") {
        UnitBehaviorRemove(libNEXS_gv_jinara, "JinaraMothershipLoadMonitor", 1);
        CatalogFieldValueSet(c_gameCatalogEffect, "SOAMothershipLineAttackInitialCP", "PeriodicOffsetArray[" + IntToString(0) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, ("0," + (FixedToString((-10.0 - (libNEXS_gv_loadMonitorCounts * 0.3)), 1) + ",0")));
        CatalogFieldValueSet(c_gameCatalogEffect, "SOAMothershipLineAttackScanCP", "PeriodCount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, IntToString((10 + FixedToInt((libNEXS_gv_loadMonitorCounts / 4.0)))));
        CatalogFieldValueSet(c_gameCatalogEffect, "JinaraMotherShipBeamAttackRiftSearch", "AreaArray[" + IntToString(0) + "].RectangleHeight", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, FixedToString((10+(libNEXS_gv_loadMonitorCounts*0.35)), 2));
        CatalogFieldValueSet(c_gameCatalogEffect, "JinaraMotherShipBeamAttackRiftSearch", "AreaRelativeOffset", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, ("0," + FixedToString((-0.175*libNEXS_gv_loadMonitorCounts), 2)));
        CatalogFieldValueSet(c_gameCatalogEffect, "JinaraMotherShipBeamAttackRiftInitial", "InitialOffset", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, ("0," + (FixedToString((-5-(0.175*libNEXS_gv_loadMonitorCounts)), 2) + ",0")));
        CatalogFieldValueSet(c_gameCatalogActor, "JinaraMotherShipBeamAttackRift", "Scale", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, ("1," + (FixedToString((0.75+(libNEXS_gv_loadMonitorCounts*0.02)), 2) + ",1")));
        libNEXS_gv_loadMonitorCounts -= 1;
    }
    else if (autoBF8EB3F4_val == "JinaraSlayer") {
        UnitBehaviorRemove(libNEXS_gv_jinara, "JinaraMothershipLoadSlayer", 1);
        libNEXS_gv_loadSlayerCounts -= 1;
        if ((libNEXS_gv_loadSlayerCounts != 0)) {
            CatalogFieldValueSet(c_gameCatalogBehavior, "JinaraMothershipLoadSlayerWeapon", "Period", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, FixedToString(((libNEXS_gv_weaponCycleSlayer * libNEXS_gv_deceleration) / libNEXS_gv_loadSlayerCounts), 2));
        }

    }
    else if (autoBF8EB3F4_val == "JinaraDarkTemplar") {
        UnitBehaviorRemove(libNEXS_gv_jinara, "JinaraMothershipLoadDarkTemplar", 1);
        libNEXS_gv_loadDarkTemplarCounts -= 1;
        if ((libNEXS_gv_loadDarkTemplarCounts != 0)) {
            CatalogFieldValueSet(c_gameCatalogBehavior, "JinaraMothershipLoadDarkTemplarWeapon", "Period", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, FixedToString(((libNEXS_gv_weaponCycleDarkTemplar * libNEXS_gv_deceleration) / libNEXS_gv_loadDarkTemplarCounts), 2));
        }

    }
    else if (autoBF8EB3F4_val == "JinaraColossus") {
        UnitBehaviorRemove(libNEXS_gv_jinara, "JinaraMothershipLoadColossus", 1);
        libNEXS_gv_loadColossusCounts -= 1;
        if ((libNEXS_gv_loadColossusCounts != 0)) {
            CatalogFieldValueSet(c_gameCatalogBehavior, "JinaraMothershipLoadColossusWeapon", "Period", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, FixedToString(((libNEXS_gv_weaponCycleColossus * libNEXS_gv_deceleration) / libNEXS_gv_loadColossusCounts), 2));
        }

    }
    else if (autoBF8EB3F4_val == "JinaraAscendant") {
        UnitBehaviorRemove(libNEXS_gv_jinara, "JinaraMothershipLoadAscendant", 1);
        libNEXS_gv_loadAscendantCount -= 1;
        UnitBehaviorRemove(libNEXS_gv_jinaraApocalypticBeam, "JinaraMothershipBeamUpgrade", 1);
        UnitBehaviorRemove(libNEXS_gv_jinaraCaster, "JinaraMothershipBeamUpgrade", 1);
    }
    else if (autoBF8EB3F4_val == "JinaraAvenger") {
        UnitBehaviorRemove(libNEXS_gv_jinara, "JinaraMothershipLoadAvenger", 1);
        libNEXS_gv_loadAvengerCount -= 1;
        UnitBehaviorRemove(libNEXS_gv_jinaraApocalypticBeam, "JinaraMothershipBeamUpgrade", 1);
        UnitBehaviorRemove(libNEXS_gv_jinaraCaster, "JinaraMothershipBeamUpgrade", 1);
    }
    else {
        UnitGroupRemove(libNEXS_gv_extraUnits, EventUnitCargo());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraMotherShipUnloadRB_Init () {
    libNEXS_gt_JinaraMotherShipUnloadRB = TriggerCreate("libNEXS_gt_JinaraMotherShipUnloadRB_Func");
    TriggerEnable(libNEXS_gt_JinaraMotherShipUnloadRB, false);
    TriggerAddEventUnitCargo(libNEXS_gt_JinaraMotherShipUnloadRB, UnitRefFromVariable("libNEXS_gv_jinara"), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraMotherShipDying UnLoad
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraMotherShipDyingUnLoad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto1302BB20_ae = 9;
    const int auto1302BB20_ai = 1;
    unitgroup auto914B47DB_g;
    int auto914B47DB_u;
    unit auto914B47DB_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitStatusBarClearOverride(libNEXS_gv_jinara);
    lv_i = 0;
    for ( ; ( (auto1302BB20_ai >= 0 && lv_i <= auto1302BB20_ae) || (auto1302BB20_ai < 0 && lv_i >= auto1302BB20_ae) ) ; lv_i += auto1302BB20_ai ) {
        if ((UnitGroupHasUnit(UnitControlGroup(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, lv_i), libNEXS_gv_jinara) == true)) {
            libNEXS_gv_jinaraHeroControlGroup[lv_i] = true;
        }

        UnitControlGroupRemoveUnit(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, lv_i, libNEXS_gv_jinara);
    }
    UnitSelect(libNEXS_gv_jinara, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, false);
    auto914B47DB_g = UnitCargoGroup(libNEXS_gv_jinara);
    auto914B47DB_u = UnitGroupCount(auto914B47DB_g, c_unitCountAll);
    for (;; auto914B47DB_u -= 1) {
        auto914B47DB_var = UnitGroupUnitFromEnd(auto914B47DB_g, auto914B47DB_u);
        if (auto914B47DB_var == null) { break; }
        if ((RandomInt(0, 1) == 1)) {
            UnitSetPosition(auto914B47DB_var, UnitGetPosition(libNEXS_gv_jinara), false);
        }

        Wait(0.1, c_timeGame);
    }
    Wait(0.5, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_BAEF8BFC"));
    UnitBehaviorRemove(libNEXS_gv_jinaraApocalypticBeam, "JinaraMothershipBeamUpgrade", 24);
    UnitBehaviorRemove(libNEXS_gv_jinaraCaster, "JinaraMothershipBeamUpgrade", 24);
    libNEXS_gv_loadProbeCount = 0;
    libNEXS_gv_loadSupplicantCounts = 0;
    libNEXS_gv_loadSlayerCounts = 0;
    libNEXS_gv_loadMonitorCounts = 0;
    libNEXS_gv_loadDarkTemplarCounts = 0;
    libNEXS_gv_loadColossusCounts = 0;
    libNEXS_gv_loadAscendantCount = 0;
    libNEXS_gv_loadAvengerCount = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraMotherShipDyingUnLoad_Init () {
    libNEXS_gt_JinaraMotherShipDyingUnLoad = TriggerCreate("libNEXS_gt_JinaraMotherShipDyingUnLoad_Func");
    TriggerEnable(libNEXS_gt_JinaraMotherShipDyingUnLoad, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_JinaraMotherShipDyingUnLoad, UnitRefFromVariable("libNEXS_gv_jinara"), "JinaraMothershipDyingUnload", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnLoad Probe
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_UnLoadProbe_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6824E9F7_g;
    int auto6824E9F7_u;
    unit auto6824E9F7_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto6824E9F7_g = UnitCargoGroup(libNEXS_gv_jinara);
    auto6824E9F7_u = UnitGroupCount(auto6824E9F7_g, c_unitCountAll);
    for (;; auto6824E9F7_u -= 1) {
        auto6824E9F7_var = UnitGroupUnitFromEnd(auto6824E9F7_g, auto6824E9F7_u);
        if (auto6824E9F7_var == null) { break; }
        if ((UnitGetType(auto6824E9F7_var) == "JinaraProbe")) {
            UnitSetPosition(auto6824E9F7_var, UnitGetPosition(libNEXS_gv_jinara), false);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_UnLoadProbe_Init () {
    libNEXS_gt_UnLoadProbe = TriggerCreate("libNEXS_gt_UnLoadProbe_Func");
    TriggerEnable(libNEXS_gt_UnLoadProbe, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_UnLoadProbe, c_playerAny, "JinaraMotherShipUnLoadProbe");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnLoad Supplicant
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_UnLoadSupplicant_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto713A5056_g;
    int auto713A5056_u;
    unit auto713A5056_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto713A5056_g = UnitCargoGroup(libNEXS_gv_jinara);
    auto713A5056_u = UnitGroupCount(auto713A5056_g, c_unitCountAll);
    for (;; auto713A5056_u -= 1) {
        auto713A5056_var = UnitGroupUnitFromEnd(auto713A5056_g, auto713A5056_u);
        if (auto713A5056_var == null) { break; }
        if ((UnitGetType(auto713A5056_var) == "JinaraSupplicant")) {
            UnitSetPosition(auto713A5056_var, UnitGetPosition(libNEXS_gv_jinara), false);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_UnLoadSupplicant_Init () {
    libNEXS_gt_UnLoadSupplicant = TriggerCreate("libNEXS_gt_UnLoadSupplicant_Func");
    TriggerEnable(libNEXS_gt_UnLoadSupplicant, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_UnLoadSupplicant, c_playerAny, "JinaraMotherShipUnLoadSupplicant");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnLoad Monitor
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_UnLoadMonitor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto82440E81_g;
    int auto82440E81_u;
    unit auto82440E81_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto82440E81_g = UnitCargoGroup(libNEXS_gv_jinara);
    auto82440E81_u = UnitGroupCount(auto82440E81_g, c_unitCountAll);
    for (;; auto82440E81_u -= 1) {
        auto82440E81_var = UnitGroupUnitFromEnd(auto82440E81_g, auto82440E81_u);
        if (auto82440E81_var == null) { break; }
        if ((UnitGetType(auto82440E81_var) == "JinaraMonitor")) {
            UnitSetPosition(auto82440E81_var, UnitGetPosition(libNEXS_gv_jinara), false);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_UnLoadMonitor_Init () {
    libNEXS_gt_UnLoadMonitor = TriggerCreate("libNEXS_gt_UnLoadMonitor_Func");
    TriggerEnable(libNEXS_gt_UnLoadMonitor, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_UnLoadMonitor, c_playerAny, "JinaraMotherShipUnLoadMonitor");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnLoad Slayer
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_UnLoadSlayer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto404DCCA3_g;
    int auto404DCCA3_u;
    unit auto404DCCA3_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto404DCCA3_g = UnitCargoGroup(libNEXS_gv_jinara);
    auto404DCCA3_u = UnitGroupCount(auto404DCCA3_g, c_unitCountAll);
    for (;; auto404DCCA3_u -= 1) {
        auto404DCCA3_var = UnitGroupUnitFromEnd(auto404DCCA3_g, auto404DCCA3_u);
        if (auto404DCCA3_var == null) { break; }
        if ((UnitGetType(auto404DCCA3_var) == "JinaraSlayer")) {
            UnitSetPosition(auto404DCCA3_var, UnitGetPosition(libNEXS_gv_jinara), false);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_UnLoadSlayer_Init () {
    libNEXS_gt_UnLoadSlayer = TriggerCreate("libNEXS_gt_UnLoadSlayer_Func");
    TriggerEnable(libNEXS_gt_UnLoadSlayer, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_UnLoadSlayer, c_playerAny, "JinaraMotherShipUnLoadSlayer");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnLoad DarkTemplar
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_UnLoadDarkTemplar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1EF14A5E_g;
    int auto1EF14A5E_u;
    unit auto1EF14A5E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto1EF14A5E_g = UnitCargoGroup(libNEXS_gv_jinara);
    auto1EF14A5E_u = UnitGroupCount(auto1EF14A5E_g, c_unitCountAll);
    for (;; auto1EF14A5E_u -= 1) {
        auto1EF14A5E_var = UnitGroupUnitFromEnd(auto1EF14A5E_g, auto1EF14A5E_u);
        if (auto1EF14A5E_var == null) { break; }
        if ((UnitGetType(auto1EF14A5E_var) == "JinaraDarkTemplar")) {
            UnitSetPosition(auto1EF14A5E_var, UnitGetPosition(libNEXS_gv_jinara), false);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_UnLoadDarkTemplar_Init () {
    libNEXS_gt_UnLoadDarkTemplar = TriggerCreate("libNEXS_gt_UnLoadDarkTemplar_Func");
    TriggerEnable(libNEXS_gt_UnLoadDarkTemplar, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_UnLoadDarkTemplar, c_playerAny, "JinaraMotherShipUnLoadDarkTemplar");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnLoad Colossus
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_UnLoadColossus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6A098500_g;
    int auto6A098500_u;
    unit auto6A098500_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto6A098500_g = UnitCargoGroup(libNEXS_gv_jinara);
    auto6A098500_u = UnitGroupCount(auto6A098500_g, c_unitCountAll);
    for (;; auto6A098500_u -= 1) {
        auto6A098500_var = UnitGroupUnitFromEnd(auto6A098500_g, auto6A098500_u);
        if (auto6A098500_var == null) { break; }
        if ((UnitGetType(auto6A098500_var) == "JinaraColossus")) {
            UnitSetPosition(auto6A098500_var, UnitGetPosition(libNEXS_gv_jinara), false);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_UnLoadColossus_Init () {
    libNEXS_gt_UnLoadColossus = TriggerCreate("libNEXS_gt_UnLoadColossus_Func");
    TriggerEnable(libNEXS_gt_UnLoadColossus, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_UnLoadColossus, c_playerAny, "JinaraMotherShipUnLoadColossus");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnLoad Ascendant
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_UnLoadAscendant_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA8CFF101_g;
    int autoA8CFF101_u;
    unit autoA8CFF101_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA8CFF101_g = UnitCargoGroup(libNEXS_gv_jinara);
    autoA8CFF101_u = UnitGroupCount(autoA8CFF101_g, c_unitCountAll);
    for (;; autoA8CFF101_u -= 1) {
        autoA8CFF101_var = UnitGroupUnitFromEnd(autoA8CFF101_g, autoA8CFF101_u);
        if (autoA8CFF101_var == null) { break; }
        if ((UnitGetType(autoA8CFF101_var) == "JinaraAscendant")) {
            UnitSetPosition(autoA8CFF101_var, UnitGetPosition(libNEXS_gv_jinara), false);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_UnLoadAscendant_Init () {
    libNEXS_gt_UnLoadAscendant = TriggerCreate("libNEXS_gt_UnLoadAscendant_Func");
    TriggerEnable(libNEXS_gt_UnLoadAscendant, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_UnLoadAscendant, c_playerAny, "JinaraMotherShipUnLoadAscendant");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnLoad Avenger
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_UnLoadAvenger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF46421D7_g;
    int autoF46421D7_u;
    unit autoF46421D7_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoF46421D7_g = UnitCargoGroup(libNEXS_gv_jinara);
    autoF46421D7_u = UnitGroupCount(autoF46421D7_g, c_unitCountAll);
    for (;; autoF46421D7_u -= 1) {
        autoF46421D7_var = UnitGroupUnitFromEnd(autoF46421D7_g, autoF46421D7_u);
        if (autoF46421D7_var == null) { break; }
        if ((UnitGetType(autoF46421D7_var) == "JinaraAvenger")) {
            UnitSetPosition(autoF46421D7_var, UnitGetPosition(libNEXS_gv_jinara), false);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_UnLoadAvenger_Init () {
    libNEXS_gt_UnLoadAvenger = TriggerCreate("libNEXS_gt_UnLoadAvenger_Func");
    TriggerEnable(libNEXS_gt_UnLoadAvenger, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_UnLoadAvenger, c_playerAny, "JinaraMotherShipUnLoadAvenger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnLoad ExtraUnits
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_UnLoadExtraUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0CC93FF9_g;
    int auto0CC93FF9_u;
    unit auto0CC93FF9_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(libNEXS_gv_jinara, "JinaraMotherShipUnloading", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, 1);
    auto0CC93FF9_g = libNEXS_gv_extraUnits;
    auto0CC93FF9_u = UnitGroupCount(auto0CC93FF9_g, c_unitCountAll);
    for (;; auto0CC93FF9_u -= 1) {
        auto0CC93FF9_var = UnitGroupUnitFromEnd(auto0CC93FF9_g, auto0CC93FF9_u);
        if (auto0CC93FF9_var == null) { break; }
        if ((PathingType(UnitGetPosition(libNEXS_gv_jinara)) == c_pathingGround) && (PointPathingPassable(UnitGetPosition(libNEXS_gv_jinara)) == true)) {
            UnitSetPosition(auto0CC93FF9_var, UnitGetPosition(libNEXS_gv_jinara), false);
        }
        else {
            UnitSetPosition(auto0CC93FF9_var, libNEXS_gf_JinaraUnloadNearbyGroundPathablePoint(UnitGetPosition(libNEXS_gv_jinara), 8.0), false);
        }
        Wait(0.1, c_timeGame);
    }
    UnitBehaviorRemove(libNEXS_gv_jinara, "JinaraMotherShipUnloading", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_UnLoadExtraUnits_Init () {
    libNEXS_gt_UnLoadExtraUnits = TriggerCreate("libNEXS_gt_UnLoadExtraUnits_Func");
    TriggerEnable(libNEXS_gt_UnLoadExtraUnits, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_UnLoadExtraUnits, c_playerAny, "JinaraMotherShipUnLoadExtraUnits");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnLoad ALL
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_UnLoadALL_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8D8EFB8E_g;
    int auto8D8EFB8E_u;
    unit auto8D8EFB8E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(libNEXS_gv_jinara, "JinaraMotherShipUnloading", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, 1);
    auto8D8EFB8E_g = UnitCargoGroup(libNEXS_gv_jinara);
    auto8D8EFB8E_u = UnitGroupCount(auto8D8EFB8E_g, c_unitCountAll);
    for (;; auto8D8EFB8E_u -= 1) {
        auto8D8EFB8E_var = UnitGroupUnitFromEnd(auto8D8EFB8E_g, auto8D8EFB8E_u);
        if (auto8D8EFB8E_var == null) { break; }
        if ((PathingType(UnitGetPosition(libNEXS_gv_jinara)) == c_pathingGround) && (PointPathingPassable(UnitGetPosition(libNEXS_gv_jinara)) == true)) {
            UnitSetPosition(auto8D8EFB8E_var, UnitGetPosition(libNEXS_gv_jinara), false);
        }
        else {
            UnitSetPosition(auto8D8EFB8E_var, libNEXS_gf_JinaraUnloadNearbyGroundPathablePoint(UnitGetPosition(libNEXS_gv_jinara), 8.0), false);
        }
        Wait(0.1, c_timeGame);
    }
    UnitAbilityAddChargeUsed(libNEXS_gv_jinara, "JinaraMotherShipUnLoadProbe", "Abil/JinaraMotherShipUnLoadProbe", UnitAbilityChargeInfo(libNEXS_gv_jinara, AbilityCommand("JinaraMotherShipUnLoadProbe", 0), c_unitAbilChargeCountLeft));
    UnitAbilityAddChargeUsed(libNEXS_gv_jinara, "JinaraMotherShipUnLoadSupplicant", "Abil/JinaraMotherShipUnLoadSupplicant", UnitAbilityChargeInfo(libNEXS_gv_jinara, AbilityCommand("JinaraMotherShipUnLoadSupplicant", 0), c_unitAbilChargeCountLeft));
    UnitAbilityAddChargeUsed(libNEXS_gv_jinara, "JinaraMotherShipUnLoadMonitor", "Abil/JinaraMotherShipUnLoadMonitor", UnitAbilityChargeInfo(libNEXS_gv_jinara, AbilityCommand("JinaraMotherShipUnLoadMonitor", 0), c_unitAbilChargeCountLeft));
    UnitAbilityAddChargeUsed(libNEXS_gv_jinara, "JinaraMotherShipUnLoadSlayer", "Abil/JinaraMotherShipUnLoadSlayer", UnitAbilityChargeInfo(libNEXS_gv_jinara, AbilityCommand("JinaraMotherShipUnLoadSlayer", 0), c_unitAbilChargeCountLeft));
    UnitAbilityAddChargeUsed(libNEXS_gv_jinara, "JinaraMotherShipUnLoadDarkTemplar", "Abil/JinaraMotherShipUnLoadDarkTemplar", UnitAbilityChargeInfo(libNEXS_gv_jinara, AbilityCommand("JinaraMotherShipUnLoadDarkTemplar", 0), c_unitAbilChargeCountLeft));
    UnitAbilityAddChargeUsed(libNEXS_gv_jinara, "JinaraMotherShipUnLoadColossus", "Abil/JinaraMotherShipUnLoadColossus", UnitAbilityChargeInfo(libNEXS_gv_jinara, AbilityCommand("JinaraMotherShipUnLoadColossus", 0), c_unitAbilChargeCountLeft));
    UnitAbilityAddChargeUsed(libNEXS_gv_jinara, "JinaraMotherShipUnLoadAscendant", "Abil/JinaraMotherShipUnLoadAscendant", UnitAbilityChargeInfo(libNEXS_gv_jinara, AbilityCommand("JinaraMotherShipUnLoadAscendant", 0), c_unitAbilChargeCountLeft));
    UnitAbilityAddChargeUsed(libNEXS_gv_jinara, "JinaraMotherShipUnLoadAvenger", "Abil/JinaraMotherShipUnLoadAvenger", UnitAbilityChargeInfo(libNEXS_gv_jinara, AbilityCommand("JinaraMotherShipUnLoadAvenger", 0), c_unitAbilChargeCountLeft));
    UnitAbilityAddChargeUsed(libNEXS_gv_jinara, "JinaraMotherShipUnLoadExtraUnits", "Abil/JinaraMotherShipUnLoadExtraUnits", UnitAbilityChargeInfo(libNEXS_gv_jinara, AbilityCommand("JinaraMotherShipUnLoadExtraUnits", 0), c_unitAbilChargeCountLeft));
    UnitBehaviorRemove(libNEXS_gv_jinara, "JinaraMotherShipUnloading", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_UnLoadALL_Init () {
    libNEXS_gt_UnLoadALL = TriggerCreate("libNEXS_gt_UnLoadALL_Func");
    TriggerEnable(libNEXS_gt_UnLoadALL, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_UnLoadALL, c_playerAny, "JinaraMotherShipUnLoadALL");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init JinaraApocalyptic Beam
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_InitJinaraApocalypticBeam_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "JinaraApocalypticBeamUnit", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    libNEXS_gv_jinaraApocalypticBeam = UnitLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.75);
    PingSetUnit(PingLastCreated(), UnitLastCreated());
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_NEXS_64CB2D56"));
    UnitSetPropertyFixed(libNEXS_gv_jinaraApocalypticBeam, c_unitPropMovementSpeed, 0.6);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_InitJinaraApocalypticBeam_Init () {
    libNEXS_gt_InitJinaraApocalypticBeam = TriggerCreate("libNEXS_gt_InitJinaraApocalypticBeam_Func");
    TriggerEnable(libNEXS_gt_InitJinaraApocalypticBeam, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_InitJinaraApocalypticBeam, c_playerAny, "JinaraApocalypticBeamTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraApocalyptic Beam Shake
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraApocalypticBeamShake_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoEE9B09FC_ae = 2;
    const int autoEE9B09FC_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (autoEE9B09FC_ai >= 0 && lv_i <= autoEE9B09FC_ae) || (autoEE9B09FC_ai < 0 && lv_i >= autoEE9B09FC_ae) ) ; lv_i += autoEE9B09FC_ai ) {
        CameraShake(lv_i, "Light", "Tremor", 4.0, 4.0, 5.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraApocalypticBeamShake_Init () {
    libNEXS_gt_JinaraApocalypticBeamShake = TriggerCreate("libNEXS_gt_JinaraApocalypticBeamShake_Func");
    TriggerEnable(libNEXS_gt_JinaraApocalypticBeamShake, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_JinaraApocalypticBeamShake, null, "JinaraApocalypticBuildUp", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraApocalyptic Beam Controller
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraApocalypticBeamController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_currentPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    UnitIssueOrder(libNEXS_gv_jinaraApocalypticBeam, OrderTargetingPoint(AbilityCommand("move", 0), lv_currentPoint), c_orderQueueReplace);
    PathCreateForUnit(PlayerGroupAll(), libNEXS_gv_jinaraApocalypticBeam);
    PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
    PathSetLineWidth(PathLastCreated(), c_pathLocationMinimap, 10.0);
    PathSetColor(PathLastCreated(), c_pathLocationMinimap, Color(100.00, 0.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraApocalypticBeamController_Init () {
    libNEXS_gt_JinaraApocalypticBeamController = TriggerCreate("libNEXS_gt_JinaraApocalypticBeamController_Func");
    TriggerEnable(libNEXS_gt_JinaraApocalypticBeamController, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_JinaraApocalypticBeamController, c_playerAny, "JinaraApocalypticBeamMoveTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set JinaraDisplacement Beam Speed&Damage
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SetJinaraDisplacementBeamSpeedDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_percentage;
    fixed lv_speed;
    fixed lv_damage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_percentage = ((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) / 100.0) + 1.0);
    lv_speed = 0.6;
    lv_damage = 5.0;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(libNEXS_gv_jinaraApocalypticBeam, c_unitPropMovementSpeed, (lv_speed * lv_percentage));
    CatalogFieldValueSet(c_gameCatalogEffect, "JinaraApocalypticDamage", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, FixedToString((lv_damage * lv_percentage), 0));
    CatalogFieldValueSet(c_gameCatalogActor, "JinaraApocalypticTrail", "Scale", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, FixedToString(lv_percentage, 0));
    CatalogFieldValueSet(c_gameCatalogAccumulator, "JinaraMotherShipEnergyMark", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, FixedToString(lv_percentage, 2));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SetJinaraDisplacementBeamSpeedDamage_Init () {
    libNEXS_gt_SetJinaraDisplacementBeamSpeedDamage = TriggerCreate("libNEXS_gt_SetJinaraDisplacementBeamSpeedDamage_Func");
    TriggerEnable(libNEXS_gt_SetJinaraDisplacementBeamSpeedDamage, false);
    TriggerAddEventUnitProperty(libNEXS_gt_SetJinaraDisplacementBeamSpeedDamage, UnitRefFromVariable("libNEXS_gv_jinaraCaster"), c_unitPropEnergyPercent);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraBloodSoulSpawn
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraBloodSoulSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) == libNEXS_gv_jinara))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "JinaraBloodSoul", c_unitCreateIgnoreBirth, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    UnitBehaviorAddPlayer(UnitLastCreated(), "JinaraAscendantSacrificeSelfBuff", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, UnitBehaviorCount(libNEXS_gv_jinara, "JinaraAscendantSacrificeSelfBuff"));
    UnitBehaviorAddPlayer(UnitLastCreated(), "JinaraAscendantSacrificeSelfBuffUpgrade", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, UnitBehaviorCount(libNEXS_gv_jinara, "JinaraAscendantSacrificeSelfBuffUpgrade"));
    UnitGroupAdd(libNEXS_gv_jinaraBloodSoulUnitsGroup, UnitLastCreated());
    CatalogFieldValueSet(c_gameCatalogAccumulator, "JinaraBloodSoulCount", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, FixedToString((UnitGroupCount(libNEXS_gv_jinaraBloodSoulUnitsGroup, c_unitCountAlive)*0.1), 2));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraBloodSoulSpawn_Init () {
    libNEXS_gt_JinaraBloodSoulSpawn = TriggerCreate("libNEXS_gt_JinaraBloodSoulSpawn_Func");
    TriggerEnable(libNEXS_gt_JinaraBloodSoulSpawn, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_JinaraBloodSoulSpawn, c_playerAny, "JinaraNormalStasisBeamCasterFrenzyRBTriggerNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraBloodSoulDeath
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraBloodSoulDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogAccumulator, "JinaraBloodSoulCount", "Amount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, FixedToString((UnitGroupCount(libNEXS_gv_jinaraBloodSoulUnitsGroup, c_unitCountAlive)*0.1), 2));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraBloodSoulDeath_Init () {
    libNEXS_gt_JinaraBloodSoulDeath = TriggerCreate("libNEXS_gt_JinaraBloodSoulDeath_Func");
    TriggerEnable(libNEXS_gt_JinaraBloodSoulDeath, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_JinaraBloodSoulDeath, null, "JinaraBloodSoulSuicide", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraBloodSoulCopyAbilQ
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraBloodSoulCopyAbilQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2C08B449_g;
    int auto2C08B449_u;
    unit auto2C08B449_var;

    // Conditions
    if (testConds) {
        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) == libNEXS_gv_jinara))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2C08B449_g = libNEXS_gv_jinaraBloodSoulUnitsGroup;
    auto2C08B449_u = UnitGroupCount(auto2C08B449_g, c_unitCountAll);
    for (;; auto2C08B449_u -= 1) {
        auto2C08B449_var = UnitGroupUnitFromEnd(auto2C08B449_g, auto2C08B449_u);
        if (auto2C08B449_var == null) { break; }
        UnitIssueOrder(auto2C08B449_var, Order(AbilityCommand("JinaraBloodSoulStasisField", 0)), c_orderQueueReplace);
        UnitBehaviorSetDuration(auto2C08B449_var, "JinaraBloodSoulSuicide", (UnitBehaviorDuration(auto2C08B449_var, "JinaraBloodSoulSuicide")+1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraBloodSoulCopyAbilQ_Init () {
    libNEXS_gt_JinaraBloodSoulCopyAbilQ = TriggerCreate("libNEXS_gt_JinaraBloodSoulCopyAbilQ_Func");
    TriggerEnable(libNEXS_gt_JinaraBloodSoulCopyAbilQ, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_JinaraBloodSoulCopyAbilQ, c_playerAny, "JinaraNormalStasisFieldSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraBloodSoulCopyAbilE
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraBloodSoulCopyAbilE_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoAF280171_g;
    int autoAF280171_u;
    unit autoAF280171_var;

    // Conditions
    if (testConds) {
        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) == libNEXS_gv_jinara))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    autoAF280171_g = libNEXS_gv_jinaraBloodSoulUnitsGroup;
    autoAF280171_u = UnitGroupCount(autoAF280171_g, c_unitCountAll);
    for (;; autoAF280171_u -= 1) {
        autoAF280171_var = UnitGroupUnitFromEnd(autoAF280171_g, autoAF280171_u);
        if (autoAF280171_var == null) { break; }
        UnitIssueOrder(autoAF280171_var, Order(AbilityCommand("JinaraBloodSoulStasisBeam", 0)), c_orderQueueReplace);
        UnitBehaviorSetDuration(autoAF280171_var, "JinaraBloodSoulSuicide", (UnitBehaviorDuration(autoAF280171_var, "JinaraBloodSoulSuicide")+2));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraBloodSoulCopyAbilE_Init () {
    libNEXS_gt_JinaraBloodSoulCopyAbilE = TriggerCreate("libNEXS_gt_JinaraBloodSoulCopyAbilE_Func");
    TriggerEnable(libNEXS_gt_JinaraBloodSoulCopyAbilE, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_JinaraBloodSoulCopyAbilE, c_playerAny, "JinaraNormalSpurtSoulNewStasisSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraBloodSoulCopyAbilR
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraBloodSoulCopyAbilR_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoEFB7637B_g;
    int autoEFB7637B_u;
    unit autoEFB7637B_var;

    // Conditions
    if (testConds) {
        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) == libNEXS_gv_jinara))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoEFB7637B_g = libNEXS_gv_jinaraBloodSoulUnitsGroup;
    autoEFB7637B_u = UnitGroupCount(autoEFB7637B_g, c_unitCountAll);
    for (;; autoEFB7637B_u -= 1) {
        autoEFB7637B_var = UnitGroupUnitFromEnd(autoEFB7637B_g, autoEFB7637B_u);
        if (autoEFB7637B_var == null) { break; }
        UnitIssueOrder(autoEFB7637B_var, Order(AbilityCommand("JinaraBloodSoulDelayBoom", 0)), c_orderQueueReplace);
        UnitBehaviorSetDuration(autoEFB7637B_var, "JinaraBloodSoulSuicide", (UnitBehaviorDuration(autoEFB7637B_var, "JinaraBloodSoulSuicide")+5));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraBloodSoulCopyAbilR_Init () {
    libNEXS_gt_JinaraBloodSoulCopyAbilR = TriggerCreate("libNEXS_gt_JinaraBloodSoulCopyAbilR_Func");
    TriggerEnable(libNEXS_gt_JinaraBloodSoulCopyAbilR, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_JinaraBloodSoulCopyAbilR, c_playerAny, "JinaraNormalDelayBoomSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraBloodSoulCopyAbilD
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraBloodSoulCopyAbilD_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto91ED2A68_g;
    int auto91ED2A68_u;
    unit auto91ED2A68_var;

    // Conditions
    if (testConds) {
        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) == libNEXS_gv_jinara))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto91ED2A68_g = libNEXS_gv_jinaraBloodSoulUnitsGroup;
    auto91ED2A68_u = UnitGroupCount(auto91ED2A68_g, c_unitCountAll);
    for (;; auto91ED2A68_u -= 1) {
        auto91ED2A68_var = UnitGroupUnitFromEnd(auto91ED2A68_g, auto91ED2A68_u);
        if (auto91ED2A68_var == null) { break; }
        UnitIssueOrder(auto91ED2A68_var, Order(AbilityCommand("JinaraBloodSoulEnergyGush", 0)), c_orderQueueReplace);
        UnitBehaviorSetDuration(auto91ED2A68_var, "JinaraBloodSoulSuicide", (UnitBehaviorDuration(auto91ED2A68_var, "JinaraBloodSoulSuicide")+0.5));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraBloodSoulCopyAbilD_Init () {
    libNEXS_gt_JinaraBloodSoulCopyAbilD = TriggerCreate("libNEXS_gt_JinaraBloodSoulCopyAbilD_Func");
    TriggerEnable(libNEXS_gt_JinaraBloodSoulCopyAbilD, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_JinaraBloodSoulCopyAbilD, c_playerAny, "JinaraNormalEnergyGushPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraBloodSoulDamageHeal
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraBloodSoulDamageHeal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damage;
    fixed lv_jinaraShield;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_damage = EventUnitDamageAmount();
    lv_jinaraShield = UnitGetPropertyFixed(libNEXS_gv_jinara, c_unitPropShields, c_unitPropCurrent);

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() != libNEXS_gv_jinara))) {
            return false;
        }

        if (!((UnitIsAlive(libNEXS_gv_jinara) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "JinaraBloodSoul"))) {
            return false;
        }

        if (!((UnitGroupHasUnit(libNEXS_gv_jinaraBloodSoulUnitsGroup, EventUnitDamageSourceUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(libNEXS_gv_jinara, c_unitPropShields, (lv_jinaraShield+(lv_damage*0.25)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraBloodSoulDamageHeal_Init () {
    libNEXS_gt_JinaraBloodSoulDamageHeal = TriggerCreate("libNEXS_gt_JinaraBloodSoulDamageHeal_Func");
    TriggerEnable(libNEXS_gt_JinaraBloodSoulDamageHeal, false);
    TriggerAddEventUnitDamaged(libNEXS_gt_JinaraBloodSoulDamageHeal, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraBloodSoulStasisBeam Kill
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraBloodSoulStasisBeamKill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libNEXS_gv_jinaraBloodSoulUnitsGroup, EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true))) {
            return false;
        }

        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) != libNEXS_gv_jinara))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libNEXS_gv_jinara, "JinaraNormalStasisBeamCasterMU", libNEXS_gv_jinara);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraBloodSoulStasisBeamKill_Init () {
    libNEXS_gt_JinaraBloodSoulStasisBeamKill = TriggerCreate("libNEXS_gt_JinaraBloodSoulStasisBeamKill_Func");
    TriggerEnable(libNEXS_gt_JinaraBloodSoulStasisBeamKill, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_JinaraBloodSoulStasisBeamKill, c_playerAny, "JinaraNormalStasisBeamCasterMU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraNormal Death
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraNormalDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto6D72BE65_ae = 9;
    const int auto6D72BE65_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeMorph) != true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeCancel) != true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) != true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_20A06F2A"));
    lv_i = 0;
    for ( ; ( (auto6D72BE65_ai >= 0 && lv_i <= auto6D72BE65_ae) || (auto6D72BE65_ai < 0 && lv_i >= auto6D72BE65_ae) ) ; lv_i += auto6D72BE65_ai ) {
        if ((UnitGroupHasUnit(UnitControlGroup(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, lv_i), libNEXS_gv_jinara) == true)) {
            libNEXS_gv_jinaraHeroControlGroup[lv_i] = true;
        }

    }
    libNEXS_gv_jinara = null;
    TriggerEnable(libNEXS_gt_JinaraNormalBuyBackCostAdjustment, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraNormalDeath_Init () {
    libNEXS_gt_JinaraNormalDeath = TriggerCreate("libNEXS_gt_JinaraNormalDeath_Func");
    TriggerEnable(libNEXS_gt_JinaraNormalDeath, false);
    TriggerAddEventUnitDied(libNEXS_gt_JinaraNormalDeath, UnitRefFromVariable("libNEXS_gv_jinara"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraNormal Revive
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraNormalRevive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto581C8538_ae = 9;
    const int auto581C8538_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUnitCargo() == libNEXS_gv_jinara))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNEXS_gv_jinaraNormalReviveWarpPrism = null;
    lv_i = 0;
    for ( ; ( (auto581C8538_ai >= 0 && lv_i <= auto581C8538_ae) || (auto581C8538_ai < 0 && lv_i >= auto581C8538_ae) ) ; lv_i += auto581C8538_ai ) {
        if ((libNEXS_gv_jinaraHeroControlGroup[lv_i] == true)) {
            UnitControlGroupAddUnit(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, lv_i, libNEXS_gv_jinara);
            libNEXS_gv_jinaraHeroControlGroup[lv_i] = false;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraNormalRevive_Init () {
    libNEXS_gt_JinaraNormalRevive = TriggerCreate("libNEXS_gt_JinaraNormalRevive_Func");
    TriggerEnable(libNEXS_gt_JinaraNormalRevive, false);
    TriggerAddEventUnitCargo(libNEXS_gt_JinaraNormalRevive, UnitRefFromVariable("libNEXS_gv_jinaraNormalReviveWarpPrism"), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraNormal StasisField Kill
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraNormalStasisFieldKill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_KillingUnit() == libNEXS_gv_jinara) || (UnitGroupHasUnit(libNEXS_gv_jinaraBloodSoulUnitsGroup, libNtve_gf_KillingUnit()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityAddCooldown(libNEXS_gv_jinara, "JinaraNormalStasisField", "(Abil/JinaraNormalStasisField)", -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraNormalStasisFieldKill_Init () {
    libNEXS_gt_JinaraNormalStasisFieldKill = TriggerCreate("libNEXS_gt_JinaraNormalStasisFieldKill_Func");
    TriggerEnable(libNEXS_gt_JinaraNormalStasisFieldKill, false);
    TriggerAddEventUnitDamaged(libNEXS_gt_JinaraNormalStasisFieldKill, null, c_unitDamageTypeAny, c_unitDamageFatal, "JinaraNormalStasisFieldDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraNormalBuyBackCostAdjustment
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraNormalBuyBackCostAdjustment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed[1] lv_reviveTimer;
    int lv_reviveCostPerSecond;
    int lv_totalBuybackCost;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reviveCostPerSecond = 5;

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_jinaraNormalDeathTime += 1;
    lv_totalBuybackCost = (500 - (libNEXS_gv_jinaraNormalDeathTime * lv_reviveCostPerSecond));
    if ((lv_totalBuybackCost >= 0)) {
        CatalogFieldValueSet(c_gameCatalogAbil, "JinaraCallWarpPrismWithJinara", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeVespene) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, IntToString(lv_totalBuybackCost));
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraNormalBuyBackCostAdjustment_Init () {
    libNEXS_gt_JinaraNormalBuyBackCostAdjustment = TriggerCreate("libNEXS_gt_JinaraNormalBuyBackCostAdjustment_Func");
    TriggerEnable(libNEXS_gt_JinaraNormalBuyBackCostAdjustment, false);
    TriggerAddEventTimePeriodic(libNEXS_gt_JinaraNormalBuyBackCostAdjustment, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraCallWarpPrism Trigger
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraCallWarpPrismTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_JinaraNormalBuyBackCostAdjustment, false);
    CatalogFieldValueSet(c_gameCatalogAbil, "JinaraCallWarpPrismWithJinara", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeVespene) + "]", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, IntToString(500));
    libNEXS_gv_jinaraNormalDeathTime = 0;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "JinaraWarpPrismTransport", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    UnitBehaviorAddPlayer(UnitLastCreated(), "JinaraWarpPrismWarpin", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, 1);
    UnitCargoCreate(UnitLastCreated(), "JinaraNormal", 1);
    TriggerEnable(libNEXS_gt_JinaraNormalRevive, true);
    libNEXS_gv_jinara = UnitCargoLastCreated();
    UnitGroupAdd(libNEXS_gv_jinaraBloodSoulUnitsGroup, libNEXS_gv_jinara);
    libNEXS_gv_jinaraNormalReviveWarpPrism = UnitLastCreated();
    libNEXS_gf_SetHeroPanelUnit(1, libNEXS_gv_jinara, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15);
    UnitBehaviorAddPlayer(libNEXS_gv_jinara, "JinaraAscendantSacrificeSelfBuff", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, libNEXS_gv_jinaraNormalSuperGirl);
    UnitBehaviorAddPlayer(libNEXS_gv_jinara, "JinaraAscendantSacrificeSelfBuffUpgrade", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, libNEXS_gv_jinaraNormalSuperSuperGirl);
    UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_E722AB5F"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraCallWarpPrismTrigger_Init () {
    libNEXS_gt_JinaraCallWarpPrismTrigger = TriggerCreate("libNEXS_gt_JinaraCallWarpPrismTrigger_Func");
    TriggerEnable(libNEXS_gt_JinaraCallWarpPrismTrigger, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_JinaraCallWarpPrismTrigger, c_playerAny, "JinaraCallWarpPrismWithJinaraTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jinara Scarlet RespawnTargetSet
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraScarletRespawnTargetSet_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_jinaraScarletSpawnHoleUnitTarget = EventUnitTargetPoint();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraScarletRespawnTargetSet_Init () {
    libNEXS_gt_JinaraScarletRespawnTargetSet = TriggerCreate("libNEXS_gt_JinaraScarletRespawnTargetSet_Func");
    TriggerEnable(libNEXS_gt_JinaraScarletRespawnTargetSet, false);
    TriggerAddEventUnitAbility(libNEXS_gt_JinaraScarletRespawnTargetSet, UnitRefFromVariable("libNEXS_gv_jinaraScarletSpawnHoleUnit"), AbilityCommand("RallyReviveBeacon", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libNEXS_gt_JinaraScarletRespawnTargetSet, UnitRefFromVariable("libNEXS_gv_jinaraScarletSpawnHoleUnit"), AbilityCommand("RallyReviveBeacon", 2), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libNEXS_gt_JinaraScarletRespawnTargetSet, UnitRefFromVariable("libNEXS_gv_jinaraScarletSpawnHoleUnit"), AbilityCommand("RallyReviveBeacon", 1), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jinara Scarlet Altar Complete
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraScarletAltarComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libNEXS_gt_JinaraScarletDeath, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraScarletAltarComplete_Init () {
    libNEXS_gt_JinaraScarletAltarComplete = TriggerCreate("libNEXS_gt_JinaraScarletAltarComplete_Func");
    TriggerEnable(libNEXS_gt_JinaraScarletAltarComplete, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_JinaraScarletAltarComplete, UnitRefFromVariable("libNEXS_gv_jinaraAltar"), "JinaraAltarScarletRoute", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jinara Scarlet Death
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraScarletDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoDDDFB269_ae = 9;
    const int autoDDDFB269_ai = 1;
    unitgroup auto2E337033_g;
    int auto2E337033_u;
    unit auto2E337033_var;
    const int auto42B9597E_ae = 9;
    const int auto42B9597E_ai = 1;
    unitgroup autoDCC205B0_g;
    int autoDCC205B0_u;
    unit autoDCC205B0_var;
    const int autoABAA0308_ae = 9;
    const int autoABAA0308_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageDeathCheck(c_deathTypeMorph) != true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeCancel) != true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) != true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 0;
    for ( ; ( (autoDDDFB269_ai >= 0 && lv_i <= autoDDDFB269_ae) || (autoDDDFB269_ai < 0 && lv_i >= autoDDDFB269_ae) ) ; lv_i += autoDDDFB269_ai ) {
        if ((UnitGroupHasUnit(UnitControlGroup(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, lv_i), libNEXS_gv_jinara) == true)) {
            libNEXS_gv_jinaraHeroControlGroup[lv_i] = true;
        }

    }
    libNEXS_gv_jinara = null;
    if ((TechTreeUnitCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, "JinaraNexus", c_techCountCompleteOnly) == 0)) {
        if ((libNEXS_gv_jinaraScarletHeroBirthFirst == 1)) {
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_FD32D0E1"));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_7C7728A6"));
        }
        do {
            Wait(0.0625, c_timeGame);
            auto2E337033_g = UnitGroup("JinaraNexus", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
            auto2E337033_u = UnitGroupCount(auto2E337033_g, c_unitCountAll);
            for (;; auto2E337033_u -= 1) {
                auto2E337033_var = UnitGroupUnitFromEnd(auto2E337033_g, auto2E337033_u);
                if (auto2E337033_var == null) { break; }
                if ((UnitIsAlive(auto2E337033_var) == true) && (libNtve_gf_UnitIsUnderConstruction(auto2E337033_var) == false)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "JinaraPlaceHoleUnit", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, UnitGetPosition(auto2E337033_var));
                    libNEXS_gv_jinaraScarletSpawnHoleUnit = UnitLastCreated();
                    lv_i = 0;
                    for ( ; ( (auto42B9597E_ai >= 0 && lv_i <= auto42B9597E_ae) || (auto42B9597E_ai < 0 && lv_i >= auto42B9597E_ae) ) ; lv_i += auto42B9597E_ai ) {
                        if ((libNEXS_gv_jinaraHeroControlGroup[lv_i] == true)) {
                            UnitControlGroupAddUnit(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, lv_i, UnitLastCreated());
                            libNEXS_gv_jinaraHeroControlGroup[lv_i] = false;
                        }

                    }
                }

            }
        }while ((TechTreeUnitCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, "JinaraNexus", c_techCountCompleteOnly) == 0));
    }
    else {
        if ((libNEXS_gv_jinaraScarletHeroBirthFirst == 1)) {
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_4153B747"));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_CDAE4FBF"));
        }
        autoDCC205B0_g = UnitGroup("JinaraNexus", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
        autoDCC205B0_u = UnitGroupCount(autoDCC205B0_g, c_unitCountAll);
        for (;; autoDCC205B0_u -= 1) {
            autoDCC205B0_var = UnitGroupUnitFromEnd(autoDCC205B0_g, autoDCC205B0_u);
            if (autoDCC205B0_var == null) { break; }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "JinaraPlaceHoleUnit", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, UnitGetPosition(autoDCC205B0_var));
            libNEXS_gv_jinaraScarletSpawnHoleUnit = UnitLastCreated();
            lv_i = 0;
            for ( ; ( (autoABAA0308_ai >= 0 && lv_i <= autoABAA0308_ae) || (autoABAA0308_ai < 0 && lv_i >= autoABAA0308_ae) ) ; lv_i += autoABAA0308_ai ) {
                if ((libNEXS_gv_jinaraHeroControlGroup[lv_i] == true)) {
                    UnitControlGroupAddUnit(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, lv_i, UnitLastCreated());
                    libNEXS_gv_jinaraHeroControlGroup[lv_i] = false;
                }

            }
        }
    }
    if ((libNEXS_gv_jinaraScarletHeroBirthFirst == 1)) {
        UnitBehaviorSetDuration(UnitLastCreated(), "JinaraScarletSpawn", 148.5);
        libNEXS_gv_jinaraScarletHeroBirthFirst = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraScarletDeath_Init () {
    libNEXS_gt_JinaraScarletDeath = TriggerCreate("libNEXS_gt_JinaraScarletDeath_Func");
    TriggerEnable(libNEXS_gt_JinaraScarletDeath, false);
    TriggerAddEventUnitDied(libNEXS_gt_JinaraScarletDeath, UnitRefFromVariable("libNEXS_gv_jinara"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jinara Scarlet Revive
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraScarletRevive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_jinara = EventUnit();
    if ((libNEXS_gv_deathFleetHasVoidRay == false)) {
        UnitBehaviorRemove(libNEXS_gv_jinara, "JinaraDeathFleetVoidRayUseable", 1);
    }

    if ((libNEXS_gv_deathFleetHasCarrier == false)) {
        UnitBehaviorRemove(libNEXS_gv_jinara, "JinaraDeathFleetCarrierUseable", 1);
    }

    if ((libNEXS_gv_deathFleetHasMotherShip == false)) {
        UnitBehaviorRemove(libNEXS_gv_jinara, "JinaraDeathFleetMotherShipUseable", 1);
    }

    libNEXS_gf_SetHeroPanelUnit(1, libNEXS_gv_jinara, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15);
    UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_4E7C4EC0"));
    if ((libNEXS_gv_jinaraScarletSpawnHoleUnitTarget != null)) {
        UnitIssueOrder(libNEXS_gv_jinara, OrderTargetingPoint(AbilityCommand("attack", 0), libNEXS_gv_jinaraScarletSpawnHoleUnitTarget), c_orderQueueAddToEnd);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraScarletRevive_Init () {
    libNEXS_gt_JinaraScarletRevive = TriggerCreate("libNEXS_gt_JinaraScarletRevive_Func");
    TriggerEnable(libNEXS_gt_JinaraScarletRevive, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_JinaraScarletRevive, null, "JinaraRevive", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraScarletKillstoPower
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraScarletKillstoPower_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_i;
    fixed lv_killsSoul;
    fixed lv_seedSoul;
    int lv_destrutionSeedCount;
    int lv_chaosSeedCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = UnitGetPropertyFixed(libNEXS_gv_jinaraCaster, c_unitPropEnergy, c_unitPropCurrent);
    lv_destrutionSeedCount = UnitBehaviorCount(EventUnit(), "JinaraAscendantMark");
    lv_chaosSeedCount = UnitBehaviorCount(EventUnit(), "JinaraAvengerMark");

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingUnit() == libNEXS_gv_jinara))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "KerriganInfestBroodling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "StukovInfestBroodling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Broodling"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "Soulapplication") == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "Hallucination2") == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "Matryoshka") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitDamageDeathCheck(c_deathTypeEat) == true)) {
        if ((UnitFilterMatch(EventUnit(), libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true)) {
            lv_killsSoul = 5.0;
        }
        else {
            if ((UnitHasBehavior2(EventUnit(), "SupplyLT1") == true)) {
                lv_killsSoul = 0.25;
            }
            else {
                lv_killsSoul = (UnitGetPropertyFixed(EventUnit(), c_unitPropSuppliesUsed, c_unitPropNormal) * 0.5);
            }
        }
    }

    lv_seedSoul = ((IntToFixed(lv_destrutionSeedCount)/6+IntToFixed(lv_chaosSeedCount)/12)*lv_killsSoul);
    libNEXS_gf_JinaraScarletKillstoPower((lv_killsSoul + lv_seedSoul));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraScarletKillstoPower_Init () {
    libNEXS_gt_JinaraScarletKillstoPower = TriggerCreate("libNEXS_gt_JinaraScarletKillstoPower_Func");
    TriggerEnable(libNEXS_gt_JinaraScarletKillstoPower, false);
    TriggerAddEventUnitDied(libNEXS_gt_JinaraScarletKillstoPower, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraScarletLethalSwipe ShieldRefresh
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraScarletLethalSwipeShieldRefresh_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_jinaraScarletLethalSwipeShield += EventUnitDamageAmount();
    if ((UnitHasBehavior2(libNEXS_gv_jinara, "JinaraScarletLethalSwipeShield") == false)) {
        UnitBehaviorAddPlayer(libNEXS_gv_jinara, "JinaraScarletLethalSwipeShield", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraScarletLethalSwipeShieldRefresh_Init () {
    libNEXS_gt_JinaraScarletLethalSwipeShieldRefresh = TriggerCreate("libNEXS_gt_JinaraScarletLethalSwipeShieldRefresh_Func");
    TriggerEnable(libNEXS_gt_JinaraScarletLethalSwipeShieldRefresh, false);
    TriggerAddEventUnitDamaged(libNEXS_gt_JinaraScarletLethalSwipeShieldRefresh, null, c_unitDamageTypeAny, c_unitDamageEither, "JinaraScarletLethalSwipeDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraScarletLethalSwipe ShieldTakingDamage
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraScarletLethalSwipeShieldTakingDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_jinaraScarletLethalSwipeShield -= EventUnitDamageAbsorbed();
    if ((libNEXS_gv_jinaraScarletLethalSwipeShield <= 0.0)) {
        UnitBehaviorRemove(libNEXS_gv_jinara, "JinaraScarletLethalSwipeShield", 1);
        libNEXS_gv_jinaraScarletLethalSwipeShield = 0.0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraScarletLethalSwipeShieldTakingDamage_Init () {
    libNEXS_gt_JinaraScarletLethalSwipeShieldTakingDamage = TriggerCreate("libNEXS_gt_JinaraScarletLethalSwipeShieldTakingDamage_Func");
    TriggerEnable(libNEXS_gt_JinaraScarletLethalSwipeShieldTakingDamage, false);
    TriggerAddEventUnitDamageAbsorbed(libNEXS_gt_JinaraScarletLethalSwipeShieldTakingDamage, UnitRefFromVariable("libNEXS_gv_jinara"), "JinaraScarletLethalSwipeShield");
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraScarletLethalSwipe ShieldBreakdown
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraScarletLethalSwipeShieldBreakdown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(libNEXS_gv_jinara, "JinaraScarletLethalSwipeShield", 1);
    libNEXS_gv_jinaraScarletLethalSwipeShield = 0.0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraScarletLethalSwipeShieldBreakdown_Init () {
    libNEXS_gt_JinaraScarletLethalSwipeShieldBreakdown = TriggerCreate("libNEXS_gt_JinaraScarletLethalSwipeShieldBreakdown_Func");
    TriggerEnable(libNEXS_gt_JinaraScarletLethalSwipeShieldBreakdown, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_JinaraScarletLethalSwipeShieldBreakdown, UnitRefFromVariable("libNEXS_gv_jinara"), "JinaraScarletEmpowerCaster", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraScarletUnitsTeammateHealResponse
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraScarletUnitsTeammateHealResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_healAmount;
    fixed lv_targetShield;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetShield = UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent);

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnitHealLaunchUnit(), libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "JinaraAbadon") || (UnitGetType(EventUnit()) == "JinaraAzazle") || (UnitGetType(EventUnit()) == "JinaraSoulSupplicant")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_healAmount = EventUnitHealAmount();
    UnitSetPropertyFixed(EventUnit(), c_unitPropShields, (lv_targetShield - lv_healAmount));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraScarletUnitsTeammateHealResponse_Init () {
    libNEXS_gt_JinaraScarletUnitsTeammateHealResponse = TriggerCreate("libNEXS_gt_JinaraScarletUnitsTeammateHealResponse_Func");
    TriggerEnable(libNEXS_gt_JinaraScarletUnitsTeammateHealResponse, false);
    TriggerAddEventUnitHealed(libNEXS_gt_JinaraScarletUnitsTeammateHealResponse, null, c_unitVitalShields, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraScarletLightningStrikes Trigger
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraScarletLightningStrikesTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_i;
    fixed lv_seedSoul;
    fixed lv_killsSoul;
    int lv_destrutionSeedCount;

    // Automatic Variable Declarations
    unitgroup autoB6BE58AA_g;
    int autoB6BE58AA_u;
    unit autoB6BE58AA_var;

    // Variable Initialization
    lv_i = UnitGetPropertyFixed(libNEXS_gv_jinaraCaster, c_unitPropEnergy, c_unitPropCurrent);
    lv_destrutionSeedCount = UnitBehaviorCount(EventUnit(), "JinaraAscendantMark");

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() == libNEXS_gv_jinara))) {
            return false;
        }

        if (!((UnitIsAlive(libNEXS_gv_jinara) == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "JinaraAscendantMark") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libNEXS_gv_jinara, "JinaraScarletLightningStrikesSet", EventUnit());
    if ((UnitGetType(EventUnit()) == "KerriganInfestBroodling") && (UnitGetType(EventUnit()) == "StukovInfestBroodling") && (UnitGetType(EventUnit()) == "Broodling") && (UnitGetType(EventUnit()) == "InfestedCivilian") && (UnitHasBehavior2(EventUnit(), "Soulapplication") == true) && (UnitHasBehavior2(EventUnit(), "Hallucination2") == true) && (UnitHasBehavior2(EventUnit(), "Matryoshka") == true)) {
        return true;
    }

    if ((lv_destrutionSeedCount > 0)) {
        autoB6BE58AA_g = UnitGroupAlliance(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(libNEXS_gv_jinara), 6.0), UnitFilter(0, 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), (lv_destrutionSeedCount + 1));
        autoB6BE58AA_u = UnitGroupCount(autoB6BE58AA_g, c_unitCountAll);
        for (;; autoB6BE58AA_u -= 1) {
            autoB6BE58AA_var = UnitGroupUnitFromEnd(autoB6BE58AA_g, autoB6BE58AA_u);
            if (autoB6BE58AA_var == null) { break; }
            UnitCreateEffectUnit(libNEXS_gv_jinara, "JinaraScarletLightningStrikesDamage", autoB6BE58AA_var);
        }
    }

    if ((UnitFilterMatch(EventUnit(), libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true)) {
        lv_killsSoul = 5.0;
    }
    else {
        if ((UnitHasBehavior2(EventUnit(), "SupplyLT1") == true)) {
            lv_killsSoul = 0.25;
        }
        else {
            lv_killsSoul = (UnitGetPropertyFixed(EventUnit(), c_unitPropSuppliesUsed, c_unitPropNormal) * 0.5);
        }
    }
    lv_seedSoul = (IntToFixed(lv_destrutionSeedCount)/6*lv_killsSoul);
    libNEXS_gf_JinaraScarletKillstoPower(lv_seedSoul);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraScarletLightningStrikesTrigger_Init () {
    libNEXS_gt_JinaraScarletLightningStrikesTrigger = TriggerCreate("libNEXS_gt_JinaraScarletLightningStrikesTrigger_Func");
    TriggerEnable(libNEXS_gt_JinaraScarletLightningStrikesTrigger, false);
    TriggerAddEventUnitDamaged(libNEXS_gt_JinaraScarletLightningStrikesTrigger, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "JinaraScarletBaneBladesAoEDamage");
    TriggerAddEventUnitDamaged(libNEXS_gt_JinaraScarletLightningStrikesTrigger, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "JinaraScarletAADamage");
    TriggerAddEventUnitDamaged(libNEXS_gt_JinaraScarletLightningStrikesTrigger, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "JinaraScarletBaneBladesDamage");
    TriggerAddEventUnitDamaged(libNEXS_gt_JinaraScarletLightningStrikesTrigger, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "JinaraScarletLethalSwipeDamage");
    TriggerAddEventUnitDamaged(libNEXS_gt_JinaraScarletLightningStrikesTrigger, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "JinaraScarletACDeadlyChargeDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraScarletStormStrikes Trigger
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraScarletStormStrikesTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_i;
    fixed lv_seedSoul;
    fixed lv_killsSoul;
    int lv_chaosSeedCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = UnitGetPropertyFixed(libNEXS_gv_jinaraCaster, c_unitPropEnergy, c_unitPropCurrent);
    lv_chaosSeedCount = UnitBehaviorCount(EventUnit(), "JinaraAvengerMark");

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourceUnit() == libNEXS_gv_jinara))) {
            return false;
        }

        if (!((UnitIsAlive(libNEXS_gv_jinara) == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "JinaraAvengerMark") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libNEXS_gv_jinara, "JinaraScarletStormStrikesSet", EventUnit());
    if ((UnitGetType(EventUnit()) == "KerriganInfestBroodling") && (UnitGetType(EventUnit()) == "StukovInfestBroodling") && (UnitGetType(EventUnit()) == "Broodling") && (UnitGetType(EventUnit()) == "InfestedCivilian") && (UnitHasBehavior2(EventUnit(), "Soulapplication") == true) && (UnitHasBehavior2(EventUnit(), "Hallucination2") == true) && (UnitHasBehavior2(EventUnit(), "Matryoshka") == true)) {
        return true;
    }

    if ((UnitFilterMatch(EventUnit(), libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true)) {
        lv_killsSoul = 5.0;
    }
    else {
        if ((UnitHasBehavior2(EventUnit(), "SupplyLT1") == true)) {
            lv_killsSoul = 0.25;
        }
        else {
            lv_killsSoul = (UnitGetPropertyFixed(EventUnit(), c_unitPropSuppliesUsed, c_unitPropNormal) * 0.5);
        }
    }
    lv_seedSoul = (IntToFixed(lv_chaosSeedCount)/12*lv_killsSoul);
    libNEXS_gf_JinaraScarletKillstoPower(lv_seedSoul);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraScarletStormStrikesTrigger_Init () {
    libNEXS_gt_JinaraScarletStormStrikesTrigger = TriggerCreate("libNEXS_gt_JinaraScarletStormStrikesTrigger_Func");
    TriggerEnable(libNEXS_gt_JinaraScarletStormStrikesTrigger, false);
    TriggerAddEventUnitDamaged(libNEXS_gt_JinaraScarletStormStrikesTrigger, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraUnitsTurntoScarlet ApplySacrificeBuff
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraUnitsTurntoScarletApplySacrificeBuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_jinaraCasterEnergy;
    int lv_jinaraAscendantBuffCount;
    int lv_jinaraAscendantPrestigeBuffCount;
    int lv_jinaraCasterCountApply;
    int lv_jinaraAscendantCountRemain;
    int lv_jinaraAscendantPrestigeCountRemain;
    int lv_applyBuffCount;
    int lv_applyPrestigeBuffCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_jinaraCasterEnergy = UnitGetPropertyFixed(libNEXS_gv_jinaraCaster, c_unitPropEnergy, c_unitPropCurrent);
    lv_jinaraAscendantBuffCount = UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitTarget), "JinaraAscendantSacrificeSelfBuff");
    lv_jinaraAscendantPrestigeBuffCount = UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitTarget), "JinaraAscendantSacrificeSelfBuffUpgrade");

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_jinaraCasterCountApply = FixedToInt((lv_jinaraCasterEnergy / 10.0));
    lv_jinaraAscendantCountRemain = (10 - lv_jinaraAscendantBuffCount);
    if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, "JinaraRouteChoice2BonusUpgrade", c_techCountCompleteOnly) == 0)) {
        lv_applyBuffCount = MinI(lv_jinaraCasterCountApply, lv_jinaraAscendantCountRemain);
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "JinaraAscendantSacrificeSelfBuff", libNEXS_gv_jinaraCaster, lv_applyBuffCount);
    }
    else {
        lv_jinaraAscendantPrestigeCountRemain = (90 - lv_jinaraAscendantPrestigeBuffCount);
        lv_applyBuffCount = MinI(lv_jinaraCasterCountApply, lv_jinaraAscendantCountRemain);
        lv_applyPrestigeBuffCount = MinI((lv_jinaraCasterCountApply - lv_applyBuffCount), lv_jinaraAscendantPrestigeCountRemain);
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "JinaraAscendantSacrificeSelfBuff", libNEXS_gv_jinaraCaster, lv_applyBuffCount);
        if ((lv_applyPrestigeBuffCount > 0)) {
            UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "JinaraAscendantSacrificeSelfBuffUpgrade", libNEXS_gv_jinaraCaster, lv_applyPrestigeBuffCount);
        }

    }
    UnitSetPropertyFixed(libNEXS_gv_jinaraCaster, c_unitPropEnergy, (lv_jinaraCasterEnergy - (10 * (lv_applyBuffCount + lv_applyPrestigeBuffCount))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraUnitsTurntoScarletApplySacrificeBuff_Init () {
    libNEXS_gt_JinaraUnitsTurntoScarletApplySacrificeBuff = TriggerCreate("libNEXS_gt_JinaraUnitsTurntoScarletApplySacrificeBuff_Func");
    TriggerEnable(libNEXS_gt_JinaraUnitsTurntoScarletApplySacrificeBuff, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_JinaraUnitsTurntoScarletApplySacrificeBuff, c_playerAny, "JinaraUnitsTurntoScarletAscendantorAvenger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Call VoidRay
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CallVoidRay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_targetCandidates;
    point lv_casterPoint;
    point lv_targetPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetCandidates = UnitGroupEmpty();
    lv_casterPoint = EventPlayerEffectUsedPoint(c_effectLocationCasterUnit);
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_deathFleetHasVoidRay = false;
    lv_targetCandidates = UnitGroupAlliance(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, c_unitAllianceEnemy, RegionCircle(lv_targetPoint, 6.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 8);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "JinaraDeathFleetLightPerformer2", c_unitCreateIgnorePlacement, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "JinaraDeathFleetTargeter", c_unitCreateIgnorePlacement, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, Point(0.0, 0.0));
    libNEXS_gv_jinaraDeathFleetVoidRayTargeter = UnitLastCreated();
    libNEXS_gf_JinaraDeathFleetVoidRayCrash(lv_targetCandidates, UnitGroupCount(lv_targetCandidates, c_unitCountAlive), lv_casterPoint, lv_targetPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CallVoidRay_Init () {
    libNEXS_gt_CallVoidRay = TriggerCreate("libNEXS_gt_CallVoidRay_Func");
    TriggerEnable(libNEXS_gt_CallVoidRay, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_CallVoidRay, c_playerAny, "JinaraDeathFleetVoidRayTriggerNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Call Carrier
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CallCarrier_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;
    point[11] lv_attackPoints;
    int lv_randomAngle;
    int lv_count;

    // Automatic Variable Declarations
    const int autoCD01875B_ae = 3;
    const int autoCD01875B_ai = 1;
    const int autoC2A53632_ae = 5;
    const int autoC2A53632_ai = 1;
    const int autoA7E220AA_n = 10;
    int autoA7E220AA_i;
    const int auto6AA05611_ae = 5;
    const int auto6AA05611_ai = 1;

    // Variable Initialization
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_randomAngle = RandomInt(0, 180);

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_deathFleetHasCarrier = false;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "JinaraDeathFleetLightPerformer", c_unitCreateIgnorePlacement, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "JinaraDeathFleetTargeter", c_unitCreateIgnorePlacement, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, Point(0.0, 0.0));
    libNEXS_gv_jinaraDeathFleetCarrierTargeter = UnitLastCreated();
    lv_count = 1;
    for ( ; ( (autoCD01875B_ai >= 0 && lv_count <= autoCD01875B_ae) || (autoCD01875B_ai < 0 && lv_count >= autoCD01875B_ae) ) ; lv_count += autoCD01875B_ai ) {
        lv_attackPoints[lv_count] = PointWithOffsetPolar(lv_targetPoint, RandomFixed(3.0, 6.0), (lv_randomAngle + (lv_randomAngle * lv_count)));
    }
    lv_count = 4;
    for ( ; ( (autoC2A53632_ai >= 0 && lv_count <= autoC2A53632_ae) || (autoC2A53632_ai < 0 && lv_count >= autoC2A53632_ae) ) ; lv_count += autoC2A53632_ai ) {
        lv_attackPoints[lv_count] = RegionRandomPoint(RegionCircle(lv_targetPoint, 8.0));
    }
    for (autoA7E220AA_i = 1; autoA7E220AA_i <= autoA7E220AA_n; autoA7E220AA_i += 1) {
        lv_count = RandomInt(2, 5);
        lv_attackPoints[0] = lv_attackPoints[lv_count];
        lv_attackPoints[lv_count] = lv_attackPoints[1];
        lv_attackPoints[1] = lv_attackPoints[0];
    }
    lv_count = 1;
    for ( ; ( (auto6AA05611_ai >= 0 && lv_count <= auto6AA05611_ae) || (auto6AA05611_ai < 0 && lv_count >= auto6AA05611_ae) ) ; lv_count += auto6AA05611_ai ) {
        UnitIssueOrder(libNEXS_gv_jinaraDeathFleetCarrierTargeter, OrderTargetingPoint(AbilityCommand("JinaraDeathFleetCarrierTarget", 0), lv_attackPoints[lv_count]), c_orderQueueAddToFront);
        Wait(RandomFixed(0.5, 2.0), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CallCarrier_Init () {
    libNEXS_gt_CallCarrier = TriggerCreate("libNEXS_gt_CallCarrier_Func");
    TriggerEnable(libNEXS_gt_CallCarrier, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_CallCarrier, c_playerAny, "JinaraDeathFleetCarrierTriggerNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Carrier Have Supplicants
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CarrierHaveSupplicants_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto7A5AC995_n;
    int auto7A5AC995_i;

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RandomInt(1, 50) == 1)) {
        auto7A5AC995_n = RandomInt(1, 3);
        for (auto7A5AC995_i = 1; auto7A5AC995_i <= auto7A5AC995_n; auto7A5AC995_i += 1) {
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "JinaraSupplicant", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
        UnitDamage(UnitLastCreated(), "JinaraMotherShipGravityWaveDummyDamage", UnitLastCreated(), RandomInt(150, 190));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CarrierHaveSupplicants_Init () {
    libNEXS_gt_CarrierHaveSupplicants = TriggerCreate("libNEXS_gt_CarrierHaveSupplicants_Func");
    TriggerEnable(libNEXS_gt_CarrierHaveSupplicants, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_CarrierHaveSupplicants, c_playerAny, "JinaraDeathFleetCarrierImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Call MotherShip
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CallMotherShip_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_deathFleetHasMotherShip = false;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "JinaraDeathFleetLightPerformer3", c_unitCreateIgnorePlacement, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "JinaraDeathFleetTargeter", c_unitCreateIgnorePlacement, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, Point(0.0, 0.0));
    libNEXS_gv_jinaraDeathFleetMotherShipTargeter = UnitLastCreated();
    UnitIssueOrder(libNEXS_gv_jinaraDeathFleetMotherShipTargeter, OrderTargetingPoint(AbilityCommand("JinaraDeathFleetMotherShipTarget", 0), lv_targetPoint), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CallMotherShip_Init () {
    libNEXS_gt_CallMotherShip = TriggerCreate("libNEXS_gt_CallMotherShip_Func");
    TriggerEnable(libNEXS_gt_CallMotherShip, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_CallMotherShip, c_playerAny, "JinaraDeathFleetMotherShipTriggerNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership Crash Camera Shake
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_MothershipCrashCameraShake_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    fixed lv_distance;
    fixed[4] lv_cameraPosition;
    fixed[4] lv_effectPosition;
    int lv_player;
    point lv_effectTargetPoint;
    point lv_cameraTargetPoint;
    unit lv_mothership;

    // Automatic Variable Declarations
    playergroup auto9384BD8A_g;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());
    lv_effectTargetPoint = UnitGetPosition(EventUnit());
    lv_mothership = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "JinaraDeathFleetMotherShipCrashed"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.3, c_timeGame);
    lv_effectPosition[0] = PointGetX(lv_effectTargetPoint);
    lv_effectPosition[1] = PointGetY(lv_effectTargetPoint);
    lv_effectPosition[2] = WorldHeight(c_heightMapGround, lv_effectTargetPoint);
    auto9384BD8A_g = PlayerGroupActive();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto9384BD8A_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_cameraTargetPoint = CameraGetTarget(lv_player);
        lv_cameraPosition[0] = PointGetX(lv_cameraTargetPoint);
        lv_cameraPosition[1] = (PointGetY(lv_cameraTargetPoint)-(Cos(CameraGetPitch(lv_player))*CameraGetDistance(lv_player)));
        lv_cameraPosition[2] = (WorldHeight(c_heightMapGround, lv_cameraTargetPoint)+(Sin(CameraGetPitch(lv_player))*CameraGetDistance(lv_player)));
        lv_distance = SquareRoot((Pow((lv_cameraPosition[0]-lv_effectPosition[0]), 2.0) + Pow((lv_cameraPosition[1]-lv_effectPosition[1]), 2.0) + Pow((lv_cameraPosition[2]-lv_effectPosition[2]), 2.0)));
        CameraShakeStart(lv_player, c_cameraPositionTarget, c_cameraDirectionZ, MaxF((1-(lv_distance/50)), 0.0), 5.0, 100.0, 0.5);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_MothershipCrashCameraShake_Init () {
    libNEXS_gt_MothershipCrashCameraShake = TriggerCreate("libNEXS_gt_MothershipCrashCameraShake_Func");
    TriggerEnable(libNEXS_gt_MothershipCrashCameraShake, false);
    TriggerAddEventUnitDied(libNEXS_gt_MothershipCrashCameraShake, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraScarlet_SoulAbsorption_Impact
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraScarlet_SoulAbsorption_Impact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_missile;
    unit lv_jinaraScarlet;
    fixed lv_amout;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_missile = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_jinaraScarlet = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_amout = UnitGetCustomValue(lv_missile, 63);
    lv_p = UnitGetOwner(lv_jinaraScarlet);

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogReferenceSet("Effect,JinaraScarletSoulAbsorptionMU,VitalArray[Life].Change", lv_p, FixedToString(lv_amout, c_fixedPrecisionAny));
    CatalogReferenceSet("Effect,JinaraScarletSoulAbsorptionMU,VitalArray[Shields].Change", lv_p, FixedToString(lv_amout, c_fixedPrecisionAny));
    UnitCreateEffectUnit(lv_jinaraScarlet, libNEXS_gv_jinaraScarlet_SoulAbsorption_ScoreTrackerEffect, lv_jinaraScarlet);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraScarlet_SoulAbsorption_Impact_Init () {
    libNEXS_gt_JinaraScarlet_SoulAbsorption_Impact = TriggerCreate("libNEXS_gt_JinaraScarlet_SoulAbsorption_Impact_Func");
    TriggerEnable(libNEXS_gt_JinaraScarlet_SoulAbsorption_Impact, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_JinaraScarlet_SoulAbsorption_Impact, c_playerAny, libNEXS_gv_jinaraScarlet_SoulAbsorption_ImpactEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraScarlet_SoulAbsorption_Launch
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraScarlet_SoulAbsorption_Launch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_victimType;
    unit lv_missile;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_victimType = EventPlayerEffectUsedUnitType(c_effectUnitTarget);
    lv_missile = EventPlayerEffectUsedUnit(c_effectUnitSource);

    // Conditions
    if (testConds) {
        if (!((EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }

        if (!((lv_victimType != "KerriganInfestBroodling"))) {
            return false;
        }

        if (!((lv_victimType != "StukovInfestBroodling"))) {
            return false;
        }

        if (!((lv_victimType != "Broodling"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitTarget), "SupplyLT1") == true)) {
        UnitSetCustomValue(lv_missile, 63, (0.5 * libNEXS_gv_jinaraScarlet_SoulAbsorption_FoodFactor));
    }
    else {
        UnitSetCustomValue(lv_missile, 63, (UnitTypeGetProperty(lv_victimType, c_unitPropSuppliesUsed) * libNEXS_gv_jinaraScarlet_SoulAbsorption_FoodFactor));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraScarlet_SoulAbsorption_Launch_Init () {
    libNEXS_gt_JinaraScarlet_SoulAbsorption_Launch = TriggerCreate("libNEXS_gt_JinaraScarlet_SoulAbsorption_Launch_Func");
    TriggerEnable(libNEXS_gt_JinaraScarlet_SoulAbsorption_Launch, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_JinaraScarlet_SoulAbsorption_Launch, c_playerAny, libNEXS_gv_jinaraScarlet_SoulAbsorption_LaunchEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraScarlet_SoulAbsorption_ScarletUnitsBuff
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraScarlet_SoulAbsorption_ScarletUnitsBuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentStack;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentStack = UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitTarget), "JinaraUnitScarletBuff");

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "JinaraUnitScarletBuffDisplayMark", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    if ((lv_currentStack == 10)) {
    }
    else {
        if ((lv_currentStack == 0)) {
            UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "JinaraUnitScarletBuffDisplay", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
            libNtve_gf_SendActorMessageToUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "Create JinaraGlazeScarletBuff");
        }

        lv_currentStack = (lv_currentStack + 1);
        libNEXS_gf_SetUnitAttributePoints("JinaraUnitScarletBuff", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_currentStack);
        if ((lv_currentStack >= 8)) {
            ActorScopeSend(ActorScopeFromUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "Signal ScarletAnimGroupC");
        }
        else if ((lv_currentStack >= 4)) {
            ActorScopeSend(ActorScopeFromUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "Signal ScarletAnimGroupB");
        }
        else if (true) {
            ActorScopeSend(ActorScopeFromUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "Signal ScarletAnimGroupA");
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraScarlet_SoulAbsorption_ScarletUnitsBuff_Init () {
    libNEXS_gt_JinaraScarlet_SoulAbsorption_ScarletUnitsBuff = TriggerCreate("libNEXS_gt_JinaraScarlet_SoulAbsorption_ScarletUnitsBuff_Func");
    TriggerEnable(libNEXS_gt_JinaraScarlet_SoulAbsorption_ScarletUnitsBuff, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_JinaraScarlet_SoulAbsorption_ScarletUnitsBuff, c_playerAny, "JinaraTheStrongestSurviveScarletBuffTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set JinaraEmpowerMe Duration
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SetJinaraEmpowerMeDuration_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_extraDuration;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_extraDuration = (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) / 2.0);

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogBehavior, "JinaraScarletEmpowerCaster", "Duration", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, FixedToString(MaxF(lv_extraDuration, 10.0), 1));
    CatalogFieldValueSet(c_gameCatalogAbil, "JinaraScarletEmpower", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, FixedToString((60.0 + lv_extraDuration), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SetJinaraEmpowerMeDuration_Init () {
    libNEXS_gt_SetJinaraEmpowerMeDuration = TriggerCreate("libNEXS_gt_SetJinaraEmpowerMeDuration_Func");
    TriggerEnable(libNEXS_gt_SetJinaraEmpowerMeDuration, false);
    TriggerAddEventUnitProperty(libNEXS_gt_SetJinaraEmpowerMeDuration, UnitRefFromVariable("libNEXS_gv_jinaraCaster"), c_unitPropEnergyPercent);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraScarlet_EmpowerEnergyClear
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraScarlet_EmpowerEnergyClear_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(libNEXS_gv_jinaraCaster, c_unitPropEnergyPercent, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraScarlet_EmpowerEnergyClear_Init () {
    libNEXS_gt_JinaraScarlet_EmpowerEnergyClear = TriggerCreate("libNEXS_gt_JinaraScarlet_EmpowerEnergyClear_Func");
    TriggerEnable(libNEXS_gt_JinaraScarlet_EmpowerEnergyClear, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_JinaraScarlet_EmpowerEnergyClear, c_playerAny, "JinaraScarletEmpowerMe");
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraScarlet_EmpowerAdd
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraScarlet_EmpowerAdd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libNEXS_gv_jinaraScarlet_EmpowerSlaves[lv_p], lv_u);
    if ((TriggerIsEnabled(libNEXS_gt_JinaraScarlet_EmpowerUpdate) == true)) {
        TriggerExecute(libNEXS_gt_JinaraScarlet_EmpowerUpdate, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraScarlet_EmpowerAdd_Init () {
    libNEXS_gt_JinaraScarlet_EmpowerAdd = TriggerCreate("libNEXS_gt_JinaraScarlet_EmpowerAdd_Func");
    TriggerEnable(libNEXS_gt_JinaraScarlet_EmpowerAdd, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_JinaraScarlet_EmpowerAdd, c_playerAny, libNEXS_gv_jinaraScarlet_EmpowerAuraTargetPlayerStartEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraScarlet_EmpowerRemove
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraScarlet_EmpowerRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(libNEXS_gv_jinaraScarlet_EmpowerSlaves[lv_p], lv_u);
    ActorScopeSend(ActorScopeFromUnit(lv_u), (("Signal " + "Destroy" + IntToString(lv_p))));
    if ((TriggerIsEnabled(libNEXS_gt_JinaraScarlet_EmpowerUpdate) == true)) {
        TriggerExecute(libNEXS_gt_JinaraScarlet_EmpowerUpdate, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraScarlet_EmpowerRemove_Init () {
    libNEXS_gt_JinaraScarlet_EmpowerRemove = TriggerCreate("libNEXS_gt_JinaraScarlet_EmpowerRemove_Func");
    TriggerEnable(libNEXS_gt_JinaraScarlet_EmpowerRemove, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_JinaraScarlet_EmpowerRemove, c_playerAny, libNEXS_gv_jinaraScarlet_EmpowerAuraTargetPlayerFinalEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraScarlet_EmpowerUpdate
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraScarlet_EmpowerUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_slave;
    fixed[1] lv_totalSupply;
    int lv_player;
    fixed lv_abilityPower;
    fixed lv_attackDamage;

    // Automatic Variable Declarations
    const int autoB4CE2AC8_ae = 2;
    const int autoB4CE2AC8_ai = 1;
    unitgroup auto197CFCF3_g;
    int auto197CFCF3_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.0625, c_timeGame);
    lv_player = 1;
    for ( ; ( (autoB4CE2AC8_ai >= 0 && lv_player <= autoB4CE2AC8_ae) || (autoB4CE2AC8_ai < 0 && lv_player >= autoB4CE2AC8_ae) ) ; lv_player += autoB4CE2AC8_ai ) {
        auto197CFCF3_g = libNEXS_gv_jinaraScarlet_EmpowerSlaves[lv_player];
        auto197CFCF3_u = UnitGroupCount(auto197CFCF3_g, c_unitCountAll);
        for (;; auto197CFCF3_u -= 1) {
            lv_slave = UnitGroupUnitFromEnd(auto197CFCF3_g, auto197CFCF3_u);
            if (lv_slave == null) { break; }
            if ((UnitHasBehavior2(lv_slave, libNEXS_gv_jinaraScarlet_EmpowerAuraTarget) == true)) {
                if ((((UnitTypeGetProperty(UnitGetType(lv_slave), c_unitPropSuppliesUsed) == 0.0) && (UnitTypeTestAttribute(UnitGetType(lv_slave), c_unitAttributeHeroic) == true)) || (UnitHasBehavior2(lv_slave, "HHMercStarportCargoInstalled") == true))) {
                    lv_totalSupply[lv_player] += 10.0;
                }
                else if ((UnitHasBehavior2(lv_slave, "JinaraScarletUnits") == true)) {
                    lv_totalSupply[lv_player] += (UnitTypeGetProperty(UnitGetType(lv_slave), c_unitPropSuppliesUsed) * 1.5);
                }
                else if ((UnitHasBehavior2(lv_slave, "JinaraHalfScarletUnits") == true)) {
                    lv_totalSupply[lv_player] += UnitTypeGetProperty(UnitGetType(lv_slave), c_unitPropSuppliesUsed);
                }
                else if (true) {
                    lv_totalSupply[lv_player] += (UnitTypeGetProperty(UnitGetType(lv_slave), c_unitPropSuppliesUsed) * 0.5);
                }
            }
            else {
                UnitGroupRemove(libNEXS_gv_jinaraScarlet_EmpowerSlaves[lv_player], lv_slave);
            }
        }
        lv_attackDamage = (libNEXS_gv_jinaraScarlet_EmpowerBaseDmgInc * lv_totalSupply[lv_player]);
        lv_abilityPower = (libNEXS_gv_jinaraScarlet_EmpowerBaseSpellDmgeIncPercent * lv_totalSupply[lv_player]);
        CatalogFieldValueSet(c_gameCatalogBehavior, libNEXS_gv_jinaraScarlet_EmpowerBehaviorCaster, "Modification.DamageDealtFraction[Spell]", lv_player, FixedToString(lv_abilityPower, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, libNEXS_gv_jinaraScarlet_EmpowerBehaviorCaster, "Modification.DamageDealtUnscaled[Melee]", lv_player, FixedToString(lv_attackDamage, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, libNEXS_gv_jinaraScarlet_EmpowerBehaviorCaster, "Modification.DamageDealtUnscaled[Ranged]", lv_player, FixedToString(lv_attackDamage, c_fixedPrecisionAny));
        if ((lv_totalSupply[lv_player] > 0.0)) {
            TechTreeBehaviorAllow(lv_player, libNEXS_gv_jinaraScarlet_EmpowerBehaviorCaster, true);
        }
        else {
            TechTreeBehaviorAllow(lv_player, libNEXS_gv_jinaraScarlet_EmpowerBehaviorCaster, false);
        }
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraScarlet_EmpowerUpdate_Init () {
    libNEXS_gt_JinaraScarlet_EmpowerUpdate = TriggerCreate("libNEXS_gt_JinaraScarlet_EmpowerUpdate_Func");
    TriggerEnable(libNEXS_gt_JinaraScarlet_EmpowerUpdate, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraWarpPrismPhaseShiftRewind
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraWarpPrismPhaseShiftRewind_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoDCFEBE36_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoDCFEBE36_val = EventUnitBehaviorChange();
    if (autoDCFEBE36_val == c_unitBehaviorChangeCreate) {
        UnitSetCustomValue(EventUnit(), 23, UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent));
        UnitSetCustomValue(EventUnit(), 24, UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent));
    }
    else if (autoDCFEBE36_val == c_unitBehaviorChangeDestroy) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropLife, UnitGetCustomValue(EventUnit(), 23));
        UnitSetPropertyFixed(EventUnit(), c_unitPropShields, UnitGetCustomValue(EventUnit(), 24));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraWarpPrismPhaseShiftRewind_Init () {
    libNEXS_gt_JinaraWarpPrismPhaseShiftRewind = TriggerCreate("libNEXS_gt_JinaraWarpPrismPhaseShiftRewind_Func");
    TriggerEnable(libNEXS_gt_JinaraWarpPrismPhaseShiftRewind, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_JinaraWarpPrismPhaseShiftRewind, null, "JinaraWarpPrismPhaseShiftCaster", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_JinaraWarpPrismPhaseShiftRewind, null, "JinaraWarpPrismPhaseShiftCaster", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraUnitSacrificIncreaseUpgrade_Scale
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraUnitSacrificIncreaseUpgrade_Scale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sacrificeCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(EventUnit()) == true) && (EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15) && ((UnitHasBehavior2(EventUnit(), "JinaraHalfScarletUnitsMapBoss") == true) || (UnitHasBehavior2(EventUnit(), "JinaraHalfScarletUnitsHeroic") == true))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "JinaraAscendantSacrificeSelfBuffUpgrade", EventUnit(), 1);
    lv_sacrificeCount = UnitBehaviorCount(EventUnit(), "JinaraAscendantSacrificeSelfBuffUpgrade");
    if ((UnitGetType(EventUnit()) == "JinaraNormal") && (libNtve_gf_UnitIsInsideTransport(EventUnit()) == false)) {
        libNEXS_gv_jinaraNormalSuperSuperGirl += 1;
        libNtve_gf_SendActorMessageToUnit(EventUnit(), (("SetScale " + FixedToString(((lv_sacrificeCount*0.002)+1.2), 3))));
    }
    else {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), (("SetScale " + FixedToString(((lv_sacrificeCount*0.005)+1.5), 3))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraUnitSacrificIncreaseUpgrade_Scale_Init () {
    libNEXS_gt_JinaraUnitSacrificIncreaseUpgrade_Scale = TriggerCreate("libNEXS_gt_JinaraUnitSacrificIncreaseUpgrade_Scale_Func");
    TriggerEnable(libNEXS_gt_JinaraUnitSacrificIncreaseUpgrade_Scale, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_JinaraUnitSacrificIncreaseUpgrade_Scale, null, "JinaraAscendantSacrificeSelfBuffUpgrade", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraUnitSacrificIncrease_Scale
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraUnitSacrificIncrease_Scale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sacrificeCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(EventUnit()) == true) && (EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15) && (UnitHasBehavior2(EventUnit(), "JinaraAscendantSacrificeSelfBuff") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_sacrificeCount = UnitBehaviorCount(EventUnit(), "JinaraAscendantSacrificeSelfBuff");
    if ((UnitGetType(EventUnit()) == "JinaraNormal") && (libNtve_gf_UnitIsInsideTransport(EventUnit()) == false)) {
        libNEXS_gv_jinaraNormalSuperGirl += 1;
        libNtve_gf_SendActorMessageToUnit(EventUnit(), (("SetScale " + FixedToString(((0.02 * lv_sacrificeCount) + 1.0), 3))));
        if ((lv_sacrificeCount == 5)) {
            ActorCreate(ActorScopeFromUnit(EventUnit()), "JinaraAscendantSacrificeSelfBuff5Layers", null, null, null);
            CatalogFieldValueSet(c_gameCatalogAbil, "JinaraNormalSpurt", "Cost[" + IntToString(0) + "].Charge.CountMax", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, "2");
        }

        if ((lv_sacrificeCount == 10)) {
            UnitBehaviorAdd(EventUnit(), "JinaraHalfScarletUnitsMapBoss", EventUnit(), 1);
            CatalogFieldValueSet(c_gameCatalogAbil, "JinaraNormalSpurt", "Cost[" + IntToString(0) + "].Charge.CountMax", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, "3");
        }

    }
    else {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), (("SetScale " + FixedToString(((0.05 * lv_sacrificeCount) + 1.0), 3))));
        if ((lv_sacrificeCount == 5)) {
            ActorCreate(ActorScopeFromUnit(EventUnit()), "JinaraAscendantSacrificeSelfBuff5Layers", null, null, null);
            ActorScopeSend(ActorScopeFromUnit(EventUnit()), libNtve_gf_Signal("JinaraHalfScarletUnitsMapBoss"));
        }

        if ((lv_sacrificeCount == 10)) {
            UnitBehaviorAdd(EventUnit(), "JinaraHalfScarletUnitsHeroic", EventUnit(), 1);
        }

    }
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), libNtve_gf_Signal(("Sacrifice" + IntToString(lv_sacrificeCount))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraUnitSacrificIncrease_Scale_Init () {
    libNEXS_gt_JinaraUnitSacrificIncrease_Scale = TriggerCreate("libNEXS_gt_JinaraUnitSacrificIncrease_Scale_Func");
    TriggerEnable(libNEXS_gt_JinaraUnitSacrificIncrease_Scale, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_JinaraUnitSacrificIncrease_Scale, null, "JinaraAscendantSacrificeSelfBuff", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraColossusLockAttack Glaze
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraColossusLockAttackGlaze_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lockBuffCount;
    int lv_lockBuffText;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lockBuffText = c_textTagNone;

    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(EventUnit()) == true) && (UnitHasBehavior2(EventUnit(), "JinaraColossusLockAttack") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_lockBuffCount = UnitBehaviorCount(EventUnit(), "JinaraColossusLockAttack");
    TextExpressionSetToken("Param/Expression/lib_NEXS_117CDF98", "A", IntToText(lv_lockBuffCount));
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_NEXS_117CDF98"), 36, UnitGetPosition(EventUnit()), 6.0, true, false, PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15));
    lv_lockBuffText = TextTagLastCreated();
    TextTagSetColor(lv_lockBuffText, c_textTagColorText, Color(100.00, 0.00, 0.00));
    TextTagSetVelocity(lv_lockBuffText, 0.5, 90.0);
    if ((lv_lockBuffCount == 10)) {
        ActorCreate(ActorScopeFromUnit(EventUnit()), "JinaraColossusFullAttackLock", null, null, null);
    }
    else {
        if ((lv_lockBuffCount >= 3)) {
            ActorScopeSend(ActorScopeFromUnit(EventUnit()), libNtve_gf_Signal("PrestigeMechAnimGroupB"));
        }
        else {
            if ((lv_lockBuffCount >= 6)) {
                ActorScopeSend(ActorScopeFromUnit(EventUnit()), libNtve_gf_Signal("PrestigeMechAnimGroupC"));
            }
            else {
                ActorScopeSend(ActorScopeFromUnit(EventUnit()), libNtve_gf_Signal("PrestigeMechAnimGroupA"));
            }
        }
    }
    Wait(1.65, c_timeGame);
    TextTagDestroy(lv_lockBuffText);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraColossusLockAttackGlaze_Init () {
    libNEXS_gt_JinaraColossusLockAttackGlaze = TriggerCreate("libNEXS_gt_JinaraColossusLockAttackGlaze_Func");
    TriggerEnable(libNEXS_gt_JinaraColossusLockAttackGlaze, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_JinaraColossusLockAttackGlaze, null, "JinaraColossusLockAttack", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraSupplicant ShowBladeSwords
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraSupplicantShowBladeSwords_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    abilcmd auto6F284205_val;
    unitgroup autoAC999B9F_g;
    int autoAC999B9F_u;
    unit autoAC999B9F_var;
    unitgroup auto9D6084B5_g;
    int auto9D6084B5_u;
    unit auto9D6084B5_var;

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "JinaraSupplicant"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6F284205_val = EventUnitAbility();
    if (auto6F284205_val == AbilityCommand("JinaraSupplicantStartMelee", 0)) {
        libNEXS_gv_jinaraSupplicantBlades = true;
        autoAC999B9F_g = UnitGroup("JinaraSupplicant", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoAC999B9F_u = UnitGroupCount(autoAC999B9F_g, c_unitCountAll);
        for (;; autoAC999B9F_u -= 1) {
            autoAC999B9F_var = UnitGroupUnitFromEnd(autoAC999B9F_g, autoAC999B9F_u);
            if (autoAC999B9F_var == null) { break; }
            UnitBehaviorAdd(autoAC999B9F_var, "JinaraSupplicantMelee", autoAC999B9F_var, 1);
        }
    }
    else if (auto6F284205_val == AbilityCommand("JinaraSupplicantStartMelee", 1)) {
        libNEXS_gv_jinaraSupplicantBlades = false;
        PlayerAddCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, "Abil/JinaraSupplicantStartMelee", 3.0);
        auto9D6084B5_g = UnitGroup("JinaraSupplicant", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9D6084B5_u = UnitGroupCount(auto9D6084B5_g, c_unitCountAll);
        for (;; auto9D6084B5_u -= 1) {
            auto9D6084B5_var = UnitGroupUnitFromEnd(auto9D6084B5_g, auto9D6084B5_u);
            if (auto9D6084B5_var == null) { break; }
            UnitBehaviorRemove(auto9D6084B5_var, "JinaraSupplicantMelee", 1);
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraSupplicantShowBladeSwords_Init () {
    libNEXS_gt_JinaraSupplicantShowBladeSwords = TriggerCreate("libNEXS_gt_JinaraSupplicantShowBladeSwords_Func");
    TriggerEnable(libNEXS_gt_JinaraSupplicantShowBladeSwords, false);
    TriggerAddEventUnitAbility(libNEXS_gt_JinaraSupplicantShowBladeSwords, null, AbilityCommand("JinaraSupplicantStartMelee", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libNEXS_gt_JinaraSupplicantShowBladeSwords, null, AbilityCommand("JinaraSupplicantStartMelee", 1), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supplicant Warp Train
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SupplicantWarpTrain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_actualCreator;
    unit lv_warpGate;
    point lv_p;
    order lv_order1;
    order lv_order2;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnitCreatedUnit();
    lv_warpGate = EventUnit();
    lv_p = UnitGetPosition(lv_u);
    lv_order1 = OrderTargetingPoint(libNEXS_gv_supplicantWarpTrainActualCommand, PointWithOffset(lv_p, -0.5, 0.0));
    lv_order2 = OrderTargetingPoint(libNEXS_gv_supplicantWarpTrainActualCommand, PointWithOffset(lv_p, 0.5, 0.0));
    lv_player = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_u) == libNEXS_gv_supplicantWarpTrainDummyUnitLink))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, libNEXS_gv_supplicantWarpTrainCreatorUnitLink, c_unitCreateIgnorePlacement, lv_player, lv_p, 270.0);
    lv_actualCreator = UnitLastCreated();
    if ((UnitOrderIsValid(lv_actualCreator, lv_order1) == false) && (UnitOrderIsValid(lv_actualCreator, lv_order2) == false)) {
        UnitAbilityAddChargeUsed(lv_warpGate, libNEXS_gv_warpGateTrainAbility, "JinaraWarpGateTrain", -1.0);
        UnitRemove(lv_actualCreator);
    }
    else {
        UnitIssueOrder(lv_actualCreator, lv_order1, c_orderQueueAddToFront);
        UnitIssueOrder(lv_actualCreator, lv_order2, c_orderQueueAddToFront);
        UnitBehaviorAdd(lv_actualCreator, libNEXS_gv_supplicantWarpTrainCreatorWarpGateFinderBehaviorLink, lv_warpGate, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SupplicantWarpTrain_Init () {
    libNEXS_gt_SupplicantWarpTrain = TriggerCreate("libNEXS_gt_SupplicantWarpTrain_Func");
    TriggerEnable(libNEXS_gt_SupplicantWarpTrain, false);
    TriggerAddEventUnitCreated(libNEXS_gt_SupplicantWarpTrain, null, libNEXS_gv_warpGateTrainAbility, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supplicant Actual Train
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SupplicantActualTrain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_warpSource;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnitCreatedUnit();
    lv_warpSource = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_u, libNEXS_gv_supplicantWarpTrainWarpPowerCheckBehaviorLink, lv_warpSource, 1);
    UnitBehaviorAdd(lv_u, libNEXS_gv_supplicantWarpTrainCreatorFinderBehaviorLink, lv_warpSource, 1);
    if ((libNEXS_gv_jinaraSupplicantBlades == true)) {
        UnitBehaviorAdd(lv_u, "JinaraSupplicantMelee", lv_warpSource, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SupplicantActualTrain_Init () {
    libNEXS_gt_SupplicantActualTrain = TriggerCreate("libNEXS_gt_SupplicantActualTrain_Func");
    TriggerEnable(libNEXS_gt_SupplicantActualTrain, false);
    TriggerAddEventUnitCreated(libNEXS_gt_SupplicantActualTrain, null, libNEXS_gv_supplicantWarpTrainActualAbility, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supplicant Warp Finish
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SupplicantWarpFinish_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_supplicant;
    unit lv_creator;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_supplicant = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_supplicant, libNEXS_gv_supplicantWarpTrainCreatorFinderBehaviorLink) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_creator = UnitBehaviorEffectUnit(lv_supplicant, libNEXS_gv_supplicantWarpTrainCreatorFinderBehaviorLink, c_effectUnitCaster, 0);
    UnitBehaviorRemove(lv_supplicant, libNEXS_gv_supplicantWarpTrainCreatorFinderBehaviorLink, 1);
    UnitRemove(lv_creator);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SupplicantWarpFinish_Init () {
    libNEXS_gt_SupplicantWarpFinish = TriggerCreate("libNEXS_gt_SupplicantWarpFinish_Func");
    TriggerEnable(libNEXS_gt_SupplicantWarpFinish, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_SupplicantWarpFinish, c_playerAny, libNEXS_gv_supplicantWarpTrainActualUnitBirthEventLink);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supplicant Warp Cancel
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_SupplicantWarpCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_supplicant;
    unit lv_creator;
    unit lv_warpGate;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_supplicant = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_creator = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(lv_creator, libNEXS_gv_supplicantWarpTrainWarpRefundBehaviorLink) > 0)) {
        lv_warpGate = UnitBehaviorEffectUnit(lv_creator, libNEXS_gv_supplicantWarpTrainCreatorWarpGateFinderBehaviorLink, c_effectUnitCaster, 0);
        UnitAbilityAddChargeUsed(lv_warpGate, libNEXS_gv_warpGateTrainAbility, "WarpGateTrain", -1.0);
        UnitRemove(lv_creator);
    }
    else {
        UnitBehaviorAdd(lv_creator, libNEXS_gv_supplicantWarpTrainWarpRefundBehaviorLink, lv_supplicant, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_SupplicantWarpCancel_Init () {
    libNEXS_gt_SupplicantWarpCancel = TriggerCreate("libNEXS_gt_SupplicantWarpCancel_Func");
    TriggerEnable(libNEXS_gt_SupplicantWarpCancel, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_SupplicantWarpCancel, c_playerAny, libNEXS_gv_supplicantWarpTrainActualUnitCancelEventLink);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ulrezaj or Alarak EnterMap
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_UlrezajorAlarakEnterMap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnLocation;
    region lv_spawnRegion;
    string lv_glacierUnit;
    int lv_glacierUnitGroupNum;
    int lv_safetyInt;
    fixed lv_waitTime;
    int lv_i;

    // Automatic Variable Declarations
    const int auto06B96D4C_ae = 200;
    const int auto06B96D4C_ai = 1;

    // Variable Initialization
    lv_spawnRegion = RegionCircle(UnitGetPosition(libNEXS_gv_jinaraAltar), 12.0);
    lv_i = 1;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNEXS_gf_JinaraSoulGetRewards(libNEXS_ge_JinaraScarletRewards_TrueEndReward);
    lv_safetyInt = 1;
    for ( ; ( (auto06B96D4C_ai >= 0 && lv_safetyInt <= auto06B96D4C_ae) || (auto06B96D4C_ai < 0 && lv_safetyInt >= auto06B96D4C_ae) ) ; lv_safetyInt += auto06B96D4C_ai ) {
        lv_spawnLocation = RegionRandomPoint(lv_spawnRegion);
        if (((PathingType(lv_spawnLocation) != c_pathingGround) || (PointPathingIsConnected(lv_spawnLocation, PlayerStartLocation(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15)) == false) || (CliffLevel(lv_spawnLocation) != CliffLevel(PlayerStartLocation(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15))) || (UnitCountAlliance(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, c_unitAllianceAlly, RegionCircle(lv_spawnLocation, 1.5), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0) || (UnitCountAlliance(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, c_unitAllianceAlly, RegionCircle(lv_spawnLocation, 1.0), UnitFilter(0, (1 << (c_targetFilterHallucination - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0))) {
            continue;
        }
        else {
            UnitCreate(1, "JinaraNormalSoul", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, lv_spawnLocation, libNtve_gf_RandomAngle());
            libNEXS_gv_jinaraNormalSoul = UnitLastCreated();
            break;
        }
    }
    UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_9BE87EB1"));
    UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID12), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_1D5263C5"));
    UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID7), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_41E4F9FC"));
    MinimapPing(PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 5.0, Color(100.00, 50.20, 0.00));
    TransmissionSendForPlayerSelect(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15), TransmissionSourceFromModel("Jinara_Portrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "JinaraNormalSoulPortrait", "Talk", SoundLink("acObj_TDChampion_1254", -1), StringExternal("Param/Value/lib_NEXS_29F5001A"), StringExternal("Param/Value/lib_NEXS_5408CAAC"), 0.0, c_transmissionDurationAdd, false, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_UlrezajorAlarakEnterMap_Init () {
    libNEXS_gt_UlrezajorAlarakEnterMap = TriggerCreate("libNEXS_gt_UlrezajorAlarakEnterMap_Func");
    TriggerEnable(libNEXS_gt_UlrezajorAlarakEnterMap, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_UlrezajorAlarakEnterMap, null, "UlrezajCallDown", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_UlrezajorAlarakEnterMap, null, "UnknownBehavior272", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraUnitSacrifice Initial Point Set
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraUnitSacrificeInitialPointSet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = UnitGetPropertyFixed(libNEXS_gv_jinaraCaster, c_unitPropEnergy, c_unitPropCurrent);

    // Conditions
    if (testConds) {
        if (!((libNEXS_gv_jinaraSacrificePrestigeUpgrade == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "JinaraProbe")) {
        libNEXS_gf_JinaraSacrificedUnitSoulsWonder(EventPlayerEffectUsedUnitType(c_effectUnitTarget));
        UnitSetPropertyFixed(libNEXS_gv_jinaraCaster, c_unitPropEnergy, (lv_i + (1 * libNEXS_gv_jinaraSacrificeScarletExtraEnergy)));
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "JinaraProbeFrenzy", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "JinaraProbeFrenzyShield", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
        libNEXS_gf_JinaraUnitSacrificeResourceReturn("JinaraProbe");
    }
    else if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "JinaraSupplicant")) {
        libNEXS_gf_JinaraSacrificedUnitSoulsWonder(EventPlayerEffectUsedUnitType(c_effectUnitTarget));
        UnitSetPropertyFixed(libNEXS_gv_jinaraCaster, c_unitPropEnergy, (lv_i + (2 * libNEXS_gv_jinaraSacrificeScarletExtraEnergy)));
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "JinaraUnitSacrificeLimitiedLife", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
        libNEXS_gv_jinaraSacrificeUnitLife = FixedToInt(UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifePercent, c_unitPropCurrent));
        libNEXS_gv_jinaraSacrificeUnitShield = FixedToInt(UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropShieldsPercent, c_unitPropCurrent));
        libNEXS_gv_jinaraSacrificeUnitPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetUnit);
        libNEXS_gv_jinaraSacrificeUnitType = libNEXS_ge_SacrificeUnitType_JinaraSupplicant;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "JinaraUnitSacrificeTargeter", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, libNEXS_gv_jinaraSacrificeUnitPoint);
        libNEXS_gf_JinaraUnitSacrificeResourceReturn("JinaraSupplicant");
    }
    else if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "JinaraMonitor")) {
        libNEXS_gf_JinaraSacrificedUnitSoulsWonder(EventPlayerEffectUsedUnitType(c_effectUnitTarget));
        UnitSetPropertyFixed(libNEXS_gv_jinaraCaster, c_unitPropEnergy, (lv_i + (2 * libNEXS_gv_jinaraSacrificeScarletExtraEnergy)));
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "JinaraUnitSacrificeLimitiedLife", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
        libNEXS_gv_jinaraSacrificeUnitPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetUnit);
        libNEXS_gv_jinaraSacrificeUnitType = libNEXS_ge_SacrificeUnitType_JinaraMonitor;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "JinaraUnitSacrificeTargeter", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, libNEXS_gv_jinaraSacrificeUnitPoint);
        libNEXS_gf_JinaraUnitSacrificeResourceReturn("JinaraMonitor");
    }
    else if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "JinaraSlayer")) {
        libNEXS_gf_JinaraSacrificedUnitSoulsWonder(EventPlayerEffectUsedUnitType(c_effectUnitTarget));
        UnitSetPropertyFixed(libNEXS_gv_jinaraCaster, c_unitPropEnergy, (lv_i + (2 * libNEXS_gv_jinaraSacrificeScarletExtraEnergy)));
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "JinaraUnitSacrificeLimitiedLife", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
        libNEXS_gv_jinaraSacrificeUnitPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetUnit);
        libNEXS_gv_jinaraSacrificeUnitType = libNEXS_ge_SacrificeUnitType_JinaraSlayer;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "JinaraUnitSacrificeTargeter", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, libNEXS_gv_jinaraSacrificeUnitPoint);
        libNEXS_gf_JinaraUnitSacrificeResourceReturn("JinaraSlayer");
    }
    else if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "JinaraDarkTemplar")) {
        libNEXS_gf_JinaraSacrificedUnitSoulsWonder(EventPlayerEffectUsedUnitType(c_effectUnitTarget));
        UnitSetPropertyFixed(libNEXS_gv_jinaraCaster, c_unitPropEnergy, (lv_i + (3 * libNEXS_gv_jinaraSacrificeScarletExtraEnergy)));
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "JinaraUnitSacrificeLimitiedLife", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
        libNEXS_gv_jinaraSacrificeUnitPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetUnit);
        libNEXS_gv_jinaraSacrificeUnitType = libNEXS_ge_SacrificeUnitType_JinaraDarkTemplar;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "JinaraUnitSacrificeTargeter", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, libNEXS_gv_jinaraSacrificeUnitPoint);
        libNEXS_gf_JinaraUnitSacrificeResourceReturn("JinaraDarkTemplar");
    }
    else if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "JinaraColossus")) {
        libNEXS_gf_JinaraSacrificedUnitSoulsWonder(EventPlayerEffectUsedUnitType(c_effectUnitTarget));
        UnitSetPropertyFixed(libNEXS_gv_jinaraCaster, c_unitPropEnergy, (lv_i + (6 * libNEXS_gv_jinaraSacrificeScarletExtraEnergy)));
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "JinaraUnitSacrificeLimitiedLife", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
        libNEXS_gv_jinaraSacrificeUnitLife = FixedToInt(UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifeMax, c_unitPropCurrent));
        libNEXS_gv_jinaraSacrificeUnitShield = FixedToInt(UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropShieldsMax, c_unitPropCurrent));
        libNEXS_gv_jinaraSacrificeColossusBuffCount = UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitTarget), "JinaraColossusLockAttack");
        libNEXS_gv_jinaraSacrificeUnitPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetUnit);
        libNEXS_gv_jinaraSacrificeUnitType = libNEXS_ge_SacrificeUnitType_JinaraColossus;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "JinaraUnitSacrificeTargeter", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, libNEXS_gv_jinaraSacrificeUnitPoint);
        libNEXS_gf_JinaraUnitSacrificeResourceReturn("JinaraColossus");
    }
    else if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "JinaraWarpPrismTransport")) {
        UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitTarget), Order(AbilityCommand("JinaraWarpPrismPhasingMode", 0)), c_orderQueueReplace);
        UnitAbilityAddChargeUsed(libNEXS_gv_jinaraCaster, "JinaraUnitSacrifice", "JinaraUnitSacrifice", -1.0);
    }
    else if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "JinaraWarpPrismPhasing")) {
        UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitTarget), Order(AbilityCommand("JinaraWarpPrismTransportMode", 0)), c_orderQueueReplace);
        UnitAbilityAddChargeUsed(libNEXS_gv_jinaraCaster, "JinaraUnitSacrifice", "JinaraUnitSacrifice", -1.0);
    }
    else if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "JinaraAscendant")) {
        UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitTarget), Order(AbilityCommand("stop", 3)), c_orderQueueReplace);
        UnitAbilityAddChargeUsed(libNEXS_gv_jinaraCaster, "JinaraUnitSacrifice", "JinaraUnitSacrifice", -1.0);
    }
    else if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "JinaraAvenger")) {
        UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitTarget), Order(AbilityCommand("stop", 3)), c_orderQueueReplace);
        UnitAbilityAddChargeUsed(libNEXS_gv_jinaraCaster, "JinaraUnitSacrifice", "JinaraUnitSacrifice", -1.0);
    }
    else if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "JinaraMotherShip")) {
        if ((libNEXS_gv_jinaraMothershipFireworkColdDown == false)) {
            libNEXS_gv_jinaraMothershipFireworkColdDown = true;
            libNEXS_gf_JinaraMotherShipFireWork();
        }
        else {
            UnitAbilityAddChargeUsed(libNEXS_gv_jinaraCaster, "JinaraUnitSacrifice", "JinaraUnitSacrifice", -1.0);
        }
    }
    else if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "JinaraNormal")) {
        UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitTarget), Order(AbilityCommand("stop", 3)), c_orderQueueReplace);
        UnitAbilityAddChargeUsed(libNEXS_gv_jinaraCaster, "JinaraUnitSacrifice", "JinaraUnitSacrifice", -1.0);
        TriggerExecute(libNEXS_gt_AbilityTransmissionJinaraNormalPissed, true, false);
    }
    else if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "JinaraScarlet")) {
        libNEXS_gf_JinaraScarletFindsSelf(libNEXS_gv_jinaraScarletStatus);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraUnitSacrificeInitialPointSet_Init () {
    libNEXS_gt_JinaraUnitSacrificeInitialPointSet = TriggerCreate("libNEXS_gt_JinaraUnitSacrificeInitialPointSet_Func");
    TriggerEnable(libNEXS_gt_JinaraUnitSacrificeInitialPointSet, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_JinaraUnitSacrificeInitialPointSet, c_playerAny, "JinaraUnitSacrificeTriggerNotice");
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraUnitSacrifice Viscous
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraUnitSacrificeViscous_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_caster;

    // Automatic Variable Declarations
    int auto6F9D95FF_val;

    // Variable Initialization
    lv_caster = UnitBehaviorEffectPlayer(EventUnit(), EventUnitBehavior(), c_effectPlayerCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_jinaraSacrificeUnitTarget[lv_caster] = EventUnit();
    libNEXS_gv_jinaraSacrificeBuffTargetingGroup[lv_caster] = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
    libNEXS_gv_jinaraSacrificeTargetingPoint[lv_caster] = UnitGetPosition(libNEXS_gv_jinaraSacrificeUnitTarget[lv_caster]);
    auto6F9D95FF_val = libNEXS_gv_jinaraSacrificeUnitType;
    if (auto6F9D95FF_val == libNEXS_ge_SacrificeUnitType_JinaraSupplicant) {
        UISetTargetingOrder(PlayerGroupSingle(UnitGetOwner(libNEXS_gv_jinaraSacrificeUnitTarget[lv_caster])), libNEXS_gv_jinaraSacrificeBuffTargetingGroup[lv_caster], OrderTargetingUnit(AbilityCommand("JinaraUnitSacrificeSupplicantHeal", 0), libNEXS_gv_jinaraSacrificeUnitTarget[lv_caster]), false);
    }
    else if (auto6F9D95FF_val == libNEXS_ge_SacrificeUnitType_JinaraMonitor) {
        UISetTargetingOrder(PlayerGroupSingle(UnitGetOwner(libNEXS_gv_jinaraSacrificeUnitTarget[lv_caster])), libNEXS_gv_jinaraSacrificeBuffTargetingGroup[lv_caster], OrderTargetingPoint(AbilityCommand("JinaraUnitSacrificeMonitorScannerSweep", 0), UnitGetPosition(libNEXS_gv_jinaraSacrificeUnitTarget[lv_caster])), false);
    }
    else if (auto6F9D95FF_val == libNEXS_ge_SacrificeUnitType_JinaraSlayer) {
        UISetTargetingOrder(PlayerGroupSingle(UnitGetOwner(libNEXS_gv_jinaraSacrificeUnitTarget[lv_caster])), libNEXS_gv_jinaraSacrificeBuffTargetingGroup[lv_caster], OrderTargetingPoint(AbilityCommand("JinaraUnitSacrificeSlayerSearch", 0), UnitGetPosition(libNEXS_gv_jinaraSacrificeUnitTarget[lv_caster])), false);
    }
    else if (auto6F9D95FF_val == libNEXS_ge_SacrificeUnitType_JinaraDarkTemplar) {
        UISetTargetingOrder(PlayerGroupSingle(UnitGetOwner(libNEXS_gv_jinaraSacrificeUnitTarget[lv_caster])), libNEXS_gv_jinaraSacrificeBuffTargetingGroup[lv_caster], OrderTargetingPoint(AbilityCommand("JinaraUnitSacrificeDarkTemplarImprison", 0), UnitGetPosition(libNEXS_gv_jinaraSacrificeUnitTarget[lv_caster])), false);
    }
    else if (auto6F9D95FF_val == libNEXS_ge_SacrificeUnitType_JinaraColossus) {
        UISetTargetingOrder(PlayerGroupSingle(UnitGetOwner(libNEXS_gv_jinaraSacrificeUnitTarget[lv_caster])), libNEXS_gv_jinaraSacrificeBuffTargetingGroup[lv_caster], OrderTargetingUnit(AbilityCommand("JinaraUnitSacrificeColossusDamage", 0), libNEXS_gv_jinaraSacrificeUnitTarget[lv_caster]), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraUnitSacrificeViscous_Init () {
    libNEXS_gt_JinaraUnitSacrificeViscous = TriggerCreate("libNEXS_gt_JinaraUnitSacrificeViscous_Func");
    TriggerEnable(libNEXS_gt_JinaraUnitSacrificeViscous, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_JinaraUnitSacrificeViscous, null, "JinaraUnitSacrificeTargetingMark", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_JinaraUnitSacrificeViscous, null, "JinaraUnitSacrificeTargetingMark", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraUnitSacrifice SupplicantHeal
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraUnitSacrificeSupplicantHeal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_healTargetLife;
    fixed lv_healTargetLifeCount;
    fixed lv_healTargetShield;
    fixed lv_healTargetShieldCont;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_healTargetLife = UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifePercent, c_unitPropCurrent);
    lv_healTargetLifeCount = UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLife, c_unitPropCurrent);
    lv_healTargetShield = UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropShieldsPercent, c_unitPropCurrent);
    lv_healTargetShieldCont = UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropShields, c_unitPropCurrent);

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifeMax, c_unitPropCurrent) * (libNEXS_gv_jinaraSacrificeUnitLife / 100.0)) > 500.0)) {
        UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLife, (lv_healTargetLifeCount + 500.0));
    }
    else {
        lv_healTargetLife += libNEXS_gv_jinaraSacrificeUnitLife;
        UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifePercent, lv_healTargetLife);
    }
    if (((UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropShieldsMax, c_unitPropCurrent) * (libNEXS_gv_jinaraSacrificeUnitShield / 100.0)) > 500.0)) {
        UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropShields, (lv_healTargetShieldCont + 500.0));
    }
    else {
        lv_healTargetShield += libNEXS_gv_jinaraSacrificeUnitShield;
        UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropShieldsPercent, lv_healTargetShield);
    }
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "KarassPsiStorm522", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    PlayerCreateEffectUnit(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, "JinaraUnitSacrificeSupplicantVisionDummy", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraUnitSacrificeSupplicantHeal_Init () {
    libNEXS_gt_JinaraUnitSacrificeSupplicantHeal = TriggerCreate("libNEXS_gt_JinaraUnitSacrificeSupplicantHeal_Func");
    TriggerEnable(libNEXS_gt_JinaraUnitSacrificeSupplicantHeal, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_JinaraUnitSacrificeSupplicantHeal, c_playerAny, "JinaraUnitSacrificeSupplicantHealSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraUnitSacrifice SlayerBuff
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraUnitSacrificeSlayerBuff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0DAFAB56_g;
    int auto0DAFAB56_u;
    unit auto0DAFAB56_var;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerCreateEffectPoint(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, "JinaraUnitSacrificeSlayerVisionDummy", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    auto0DAFAB56_g = UnitGroup(null, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, RegionCircle(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 4.5), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0DAFAB56_u = UnitGroupCount(auto0DAFAB56_g, c_unitCountAll);
    for (;; auto0DAFAB56_u -= 1) {
        auto0DAFAB56_var = UnitGroupUnitFromEnd(auto0DAFAB56_g, auto0DAFAB56_u);
        if (auto0DAFAB56_var == null) { break; }
        UnitBehaviorAddPlayer(auto0DAFAB56_var, "JinaraSlayerNewBeeShield", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraUnitSacrificeSlayerBuff_Init () {
    libNEXS_gt_JinaraUnitSacrificeSlayerBuff = TriggerCreate("libNEXS_gt_JinaraUnitSacrificeSlayerBuff_Func");
    TriggerEnable(libNEXS_gt_JinaraUnitSacrificeSlayerBuff, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_JinaraUnitSacrificeSlayerBuff, c_playerAny, "JinaraUnitSacrificeSlayerBuffSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraUnitSacrifice MonitorSweep
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraUnitSacrificeMonitorSweep_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerCreateEffectPoint(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, "JinaraUnitSacrificeMonitorScannerSweep", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraUnitSacrificeMonitorSweep_Init () {
    libNEXS_gt_JinaraUnitSacrificeMonitorSweep = TriggerCreate("libNEXS_gt_JinaraUnitSacrificeMonitorSweep_Func");
    TriggerEnable(libNEXS_gt_JinaraUnitSacrificeMonitorSweep, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_JinaraUnitSacrificeMonitorSweep, c_playerAny, "JinaraUnitSacrificeMonitorScannerSweepSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraUnitSacrifice DarkTemplarImprison
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraUnitSacrificeDarkTemplarImprison_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerCreateEffectPoint(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID15, "JinaraUnitSacrificeDarkTemplarImprisonUpgrade", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraUnitSacrificeDarkTemplarImprison_Init () {
    libNEXS_gt_JinaraUnitSacrificeDarkTemplarImprison = TriggerCreate("libNEXS_gt_JinaraUnitSacrificeDarkTemplarImprison_Func");
    TriggerEnable(libNEXS_gt_JinaraUnitSacrificeDarkTemplarImprison, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_JinaraUnitSacrificeDarkTemplarImprison, c_playerAny, "JinaraUnitSacrificeDarkTemplarImprisonSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: JinaraUnitSacrifice ColossusDamage
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_JinaraUnitSacrificeColossusDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_damageWhole;
    int lv_damageCount;
    int lv_damageTimes;
    unit lv_targetPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_damageCount = libNEXS_gv_jinaraSacrificeColossusBuffCount;
    lv_targetPoint = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damageCount *= 2;
    libNEXS_gf_JinaraUnitSacrificeColossusBeamVision(lv_damageCount, lv_targetPoint);
    lv_damageWhole = libNEXS_gv_jinaraSacrificeUnitLife;
    while ((lv_damageTimes < lv_damageCount) && (UnitIsAlive(lv_targetPoint) == true)) {
        lv_damageTimes += 1;
        UnitBehaviorAdd(lv_targetPoint, "KarassPsiStorm52", lv_targetPoint, 1);
        UnitCreateEffectUnit(libNEXS_gv_jinaraCaster, "JinaraUnitSacrificeColossusDownCP", lv_targetPoint);
        Wait(0.7, c_timeGame);
        UnitDamage(libNEXS_gv_jinaraCaster, "JinaraUnitSacrificeColossusDamageImpact", lv_targetPoint, lv_damageWhole);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_JinaraUnitSacrificeColossusDamage_Init () {
    libNEXS_gt_JinaraUnitSacrificeColossusDamage = TriggerCreate("libNEXS_gt_JinaraUnitSacrificeColossusDamage_Func");
    TriggerEnable(libNEXS_gt_JinaraUnitSacrificeColossusDamage, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_JinaraUnitSacrificeColossusDamage, c_playerAny, "JinaraUnitSacrificeColossusDamageSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Niadra Infestor Corpse Explosion Trigger
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraInfestorCorpseExplosionTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damage;

    // Automatic Variable Declarations
    unitgroup autoB5920067_g;
    int autoB5920067_u;
    unit autoB5920067_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "NiadraInfestorCorpse") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damage = (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(UnitBehaviorCount(EventUnit(), "NiadraParasite")));
    lv_damage /= 100.0;
    autoB5920067_g = UnitGroupAlliance(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 3.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    autoB5920067_u = UnitGroupCount(autoB5920067_g, c_unitCountAll);
    for (;; autoB5920067_u -= 1) {
        autoB5920067_var = UnitGroupUnitFromEnd(autoB5920067_g, autoB5920067_u);
        if (autoB5920067_var == null) { break; }
        UnitDamage(EventUnit(), "NiadraInfestorCorpseDeathDamage", autoB5920067_var, lv_damage);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraInfestorCorpseExplosionTrigger_Init () {
    libNEXS_gt_NiadraInfestorCorpseExplosionTrigger = TriggerCreate("libNEXS_gt_NiadraInfestorCorpseExplosionTrigger_Func");
    TriggerEnable(libNEXS_gt_NiadraInfestorCorpseExplosionTrigger, false);
    TriggerAddEventUnitDied(libNEXS_gt_NiadraInfestorCorpseExplosionTrigger, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Niadra Carrier Target Response
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraCarrierTargetResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minstack;
    unit lv_minunit;

    // Automatic Variable Declarations
    unitgroup auto56458B29_g;
    int auto56458B29_u;
    unit auto56458B29_var;

    // Variable Initialization
    lv_minstack = 30;

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "NiadraCarrierTentacleTarget") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto56458B29_g = UnitGroup("NiadraCarrier", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, RegionCircle(UnitGetPosition(EventUnit()), 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto56458B29_u = UnitGroupCount(auto56458B29_g, c_unitCountAll);
    for (;; auto56458B29_u -= 1) {
        auto56458B29_var = UnitGroupUnitFromEnd(auto56458B29_g, auto56458B29_u);
        if (auto56458B29_var == null) { break; }
        if ((UnitBehaviorCount(auto56458B29_var, "NiadraCarrierTentacleCount") < lv_minstack)) {
            lv_minstack = UnitBehaviorCount(auto56458B29_var, "NiadraCarrierTentacleCount");
            lv_minunit = auto56458B29_var;
        }

    }
    if ((lv_minunit != null)) {
        UnitBehaviorAddPlayer(lv_minunit, "NiadraCarrierTentacleCount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, UnitBehaviorCount(EventUnit(), "NiadraParasite"));
        UnitCreateEffectUnit(EventUnit(), "NiadraCarrierTentacleTargetLaunchMissile", lv_minunit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraCarrierTargetResponse_Init () {
    libNEXS_gt_NiadraCarrierTargetResponse = TriggerCreate("libNEXS_gt_NiadraCarrierTargetResponse_Func");
    TriggerEnable(libNEXS_gt_NiadraCarrierTargetResponse, false);
    TriggerAddEventUnitDied(libNEXS_gt_NiadraCarrierTargetResponse, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Niadra Colossus Apply Temp Life
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraColossusApplyTempLife_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitTypeTestAttribute(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_unitAttributeUser1) == false) && (UnitTypeTestAttribute(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_unitAttributeMapBoss) == false) && (UnitTypeTestAttribute(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_unitAttributeHeroic) == false)) {
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "NiadraColossusExtraLife", EventPlayerEffectUsedUnit(c_effectUnitCaster), MaxI(UnitGetPropertyInt(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropSuppliesUsed, c_unitPropNormal), 1));
    }
    else {
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "NiadraColossusExtraLife", EventPlayerEffectUsedUnit(c_effectUnitCaster), 10);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraColossusApplyTempLife_Init () {
    libNEXS_gt_NiadraColossusApplyTempLife = TriggerCreate("libNEXS_gt_NiadraColossusApplyTempLife_Func");
    TriggerEnable(libNEXS_gt_NiadraColossusApplyTempLife, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_NiadraColossusApplyTempLife, c_playerAny, "NiadraColossusJumpImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Niadra Colossus Remove Temp Life
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraColossusRemoveTempLife_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "NiadraColossusUprootRemoveExtraLife", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraColossusRemoveTempLife_Init () {
    libNEXS_gt_NiadraColossusRemoveTempLife = TriggerCreate("libNEXS_gt_NiadraColossusRemoveTempLife_Func");
    TriggerEnable(libNEXS_gt_NiadraColossusRemoveTempLife, false);
    TriggerAddEventUnitAbility(libNEXS_gt_NiadraColossusRemoveTempLife, null, AbilityCommand("NiadraColossusMorphSitup", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libNEXS_gt_NiadraColossusRemoveTempLife, null, AbilityCommand("NiadraColossusJump", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Niadra Armor Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraArmorUpgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_upgrade;
    int lv_player;
    int lv_level;

    // Automatic Variable Declarations
    string autoBDE50E2F_val;

    // Variable Initialization
    lv_upgrade = EventUpgradeName();
    lv_player = EventPlayer();
    lv_level = TechTreeUpgradeCount(lv_player, lv_upgrade, c_techCountCompleteOnly);

    // Actions
    if (!runActions) {
        return true;
    }

    autoBDE50E2F_val = lv_upgrade;
    if (autoBDE50E2F_val == "NiadraLifeArmorLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "NiadraShieldArmorLevel1", lv_level);
    }
    else if (autoBDE50E2F_val == "NiadraLifeArmorLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "NiadraShieldArmorLevel2", lv_level);
    }
    else if (autoBDE50E2F_val == "NiadraLifeArmorLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "NiadraShieldArmorLevel3", lv_level);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraArmorUpgrade_Init () {
    libNEXS_gt_NiadraArmorUpgrade = TriggerCreate("libNEXS_gt_NiadraArmorUpgrade_Func");
    TriggerEnable(libNEXS_gt_NiadraArmorUpgrade, false);
    TriggerAddEventUpgradeLevelChanged(libNEXS_gt_NiadraArmorUpgrade, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Niadra Psi General
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraPsiGeneral_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourcePlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitDamageEffect() == "NiadraZerglingWeaponDamage")) {
        if ((RandomInt(0, 100) <= 15)) {
            PlayerCreateEffectPoint(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "NiadraPsiStormPersistentSmall", UnitGetPosition(EventUnit()));
        }

    }
    else if (((EventUnitDamageEffect() == "NiadraRoachRangedWeaponDamage") || (EventUnitDamageEffect() == "NiadraRoachMeleeWeaponDamage"))) {
        if ((RandomInt(0, 100) <= 15)) {
            PlayerCreateEffectPoint(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "NiadraPsiStormPersistentMedium", UnitGetPosition(EventUnit()));
        }

    }
    else if (((EventUnitDamageEffect() == "NiadraHydraliskRangedWeaponDamage") || (EventUnitDamageEffect() == "NiadraHydraliskMeleeWeaponDamage"))) {
        if ((RandomInt(0, 100) <= 15)) {
            PlayerCreateEffectPoint(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "NiadraPsiStormPersistentMedium", UnitGetPosition(EventUnit()));
        }

    }
    else if ((EventUnitDamageEffect() == "NiadraAbominationWeaponDamage")) {
        if ((RandomInt(0, 100) <= 25)) {
            PlayerCreateEffectPoint(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "NiadraPsiStormPersistentMedium", UnitGetPosition(EventUnit()));
        }

    }
    else if ((EventUnitDamageEffect() == "NiadraInfestorParasiteDamage")) {
        PlayerCreateEffectPoint(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "NiadraPsiStormPersistentSmall", UnitGetPosition(EventUnit()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraPsiGeneral_Init () {
    libNEXS_gt_NiadraPsiGeneral = TriggerCreate("libNEXS_gt_NiadraPsiGeneral_Func");
    TriggerEnable(libNEXS_gt_NiadraPsiGeneral, false);
    TriggerAddEventUnitDamaged(libNEXS_gt_NiadraPsiGeneral, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Niadra Psi Banelings
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraPsiBanelings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "NiadraBanelingBurrowmove", c_techCountCompleteOnly) >= 1)) {
        PlayerCreateEffectPoint(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "NiadraPsiStormPersistentLarge", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    }
    else {
        PlayerCreateEffectPoint(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "NiadraPsiStormPersistentMedium", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraPsiBanelings_Init () {
    libNEXS_gt_NiadraPsiBanelings = TriggerCreate("libNEXS_gt_NiadraPsiBanelings_Func");
    TriggerEnable(libNEXS_gt_NiadraPsiBanelings, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_NiadraPsiBanelings, 1, "NiadraBanelingWeaponAOESwitch");
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_NiadraPsiBanelings, 2, "NiadraBanelingWeaponAOESwitch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Niadra Psi Infestor Corpse
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraPsiInfestorCorpse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerCreateEffectPoint(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "NiadraPsiStormPersistentMedium", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraPsiInfestorCorpse_Init () {
    libNEXS_gt_NiadraPsiInfestorCorpse = TriggerCreate("libNEXS_gt_NiadraPsiInfestorCorpse_Func");
    TriggerEnable(libNEXS_gt_NiadraPsiInfestorCorpse, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_NiadraPsiInfestorCorpse, 1, "NiadraInfestorCorpseDeathSearchArea");
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_NiadraPsiInfestorCorpse, 2, "NiadraInfestorCorpseDeathSearchArea");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Niadra Picked Guardian Shell
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraPickedGuardianShell_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoCCC0AE2B_ae = 4;
    int autoCCC0AE2B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoCCC0AE2B_var = 0;
    for ( ; autoCCC0AE2B_var <= autoCCC0AE2B_ae; autoCCC0AE2B_var += 1 ) {
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, libNEXS_gv_niadraUpgradeMap[autoCCC0AE2B_var][1], 0);
    }
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, libNEXS_gv_niadraUpgradeMap[0][1], 1);
    libNEXS_gf_NiadraTurnPsiStormOnOff(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraPickedGuardianShell_Init () {
    libNEXS_gt_NiadraPickedGuardianShell = TriggerCreate("libNEXS_gt_NiadraPickedGuardianShell_Func");
    TriggerEnable(libNEXS_gt_NiadraPickedGuardianShell, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_NiadraPickedGuardianShell, 1, "NiadraPickGuardianShell");
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_NiadraPickedGuardianShell, 2, "NiadraPickGuardianShell");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Niadra Picked Chrono Boost
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraPickedChronoBoost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto87E23661_ae = 4;
    int auto87E23661_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto87E23661_var = 0;
    for ( ; auto87E23661_var <= auto87E23661_ae; auto87E23661_var += 1 ) {
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, libNEXS_gv_niadraUpgradeMap[auto87E23661_var][1], 0);
    }
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, libNEXS_gv_niadraUpgradeMap[1][1], 1);
    libNEXS_gf_NiadraTurnPsiStormOnOff(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraPickedChronoBoost_Init () {
    libNEXS_gt_NiadraPickedChronoBoost = TriggerCreate("libNEXS_gt_NiadraPickedChronoBoost_Func");
    TriggerEnable(libNEXS_gt_NiadraPickedChronoBoost, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_NiadraPickedChronoBoost, 1, "NiadraPickChronoBoost");
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_NiadraPickedChronoBoost, 2, "NiadraPickChronoBoost");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Niadra Picked Gravity Lift
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraPickedGravityLift_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoBEFFCCF7_ae = 4;
    int autoBEFFCCF7_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoBEFFCCF7_var = 0;
    for ( ; autoBEFFCCF7_var <= autoBEFFCCF7_ae; autoBEFFCCF7_var += 1 ) {
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, libNEXS_gv_niadraUpgradeMap[autoBEFFCCF7_var][1], 0);
    }
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, libNEXS_gv_niadraUpgradeMap[2][1], 1);
    libNEXS_gf_NiadraTurnPsiStormOnOff(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraPickedGravityLift_Init () {
    libNEXS_gt_NiadraPickedGravityLift = TriggerCreate("libNEXS_gt_NiadraPickedGravityLift_Func");
    TriggerEnable(libNEXS_gt_NiadraPickedGravityLift, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_NiadraPickedGravityLift, 1, "NiadraPickGravityLift");
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_NiadraPickedGravityLift, 2, "NiadraPickGravityLift");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Niadra Picked Cloaked
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraPickedCloaked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto88F04FC0_ae = 4;
    int auto88F04FC0_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto88F04FC0_var = 0;
    for ( ; auto88F04FC0_var <= auto88F04FC0_ae; auto88F04FC0_var += 1 ) {
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, libNEXS_gv_niadraUpgradeMap[auto88F04FC0_var][1], 0);
    }
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, libNEXS_gv_niadraUpgradeMap[3][1], 1);
    libNEXS_gf_NiadraTurnPsiStormOnOff(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraPickedCloaked_Init () {
    libNEXS_gt_NiadraPickedCloaked = TriggerCreate("libNEXS_gt_NiadraPickedCloaked_Func");
    TriggerEnable(libNEXS_gt_NiadraPickedCloaked, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_NiadraPickedCloaked, 1, "NiadraPickCloaked");
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_NiadraPickedCloaked, 2, "NiadraPickCloaked");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Niadra Picked Psi Storm
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraPickedPsiStorm_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto220F3799_ae = 4;
    int auto220F3799_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto220F3799_var = 0;
    for ( ; auto220F3799_var <= auto220F3799_ae; auto220F3799_var += 1 ) {
        libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, libNEXS_gv_niadraUpgradeMap[auto220F3799_var][1], 0);
    }
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, libNEXS_gv_niadraUpgradeMap[4][1], 1);
    libNEXS_gf_NiadraTurnPsiStormOnOff(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraPickedPsiStorm_Init () {
    libNEXS_gt_NiadraPickedPsiStorm = TriggerCreate("libNEXS_gt_NiadraPickedPsiStorm_Func");
    TriggerEnable(libNEXS_gt_NiadraPickedPsiStorm, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_NiadraPickedPsiStorm, 1, "NiadraPickPsiStorm");
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_NiadraPickedPsiStorm, 2, "NiadraPickPsiStorm");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Niadra Upgrade Purchased
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraUpgradePurchased_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto00A7A25F_val;
    const int auto2B904326_ae = 4;
    int auto2B904326_var;

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto00A7A25F_val = EventUpgradeName();
    if (auto00A7A25F_val == libNEXS_gv_niadraUpgradeMap[0][0]) {
        libNtve_gf_PlayerRemoveCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "NiadraForgePick");
        TriggerExecute(libNEXS_gt_NiadraPickedGuardianShell, false, false);
    }
    else if (auto00A7A25F_val == libNEXS_gv_niadraUpgradeMap[1][0]) {
        libNtve_gf_PlayerRemoveCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "NiadraForgePick");
        TriggerExecute(libNEXS_gt_NiadraPickedChronoBoost, false, false);
    }
    else if (auto00A7A25F_val == libNEXS_gv_niadraUpgradeMap[2][0]) {
        libNtve_gf_PlayerRemoveCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "NiadraForgePick");
        TriggerExecute(libNEXS_gt_NiadraPickedGravityLift, false, false);
    }
    else if (auto00A7A25F_val == libNEXS_gv_niadraUpgradeMap[3][0]) {
        libNtve_gf_PlayerRemoveCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "NiadraForgePick");
        TriggerExecute(libNEXS_gt_NiadraPickedCloaked, false, false);
    }
    else if (auto00A7A25F_val == libNEXS_gv_niadraUpgradeMap[4][0]) {
        libNtve_gf_PlayerRemoveCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "NiadraForgePick");
        TriggerExecute(libNEXS_gt_NiadraPickedPsiStorm, false, false);
    }
    else {
    }
    auto2B904326_var = 0;
    for ( ; auto2B904326_var <= auto2B904326_ae; auto2B904326_var += 1 ) {
        if ((TechTreeUpgradeCount(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, libNEXS_gv_niadraUpgradeMap[auto2B904326_var][0], c_techCountCompleteOnly) == 0)) {
            return true;
        }

    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraUpgradePurchased_Init () {
    libNEXS_gt_NiadraUpgradePurchased = TriggerCreate("libNEXS_gt_NiadraUpgradePurchased_Func");
    TriggerEnable(libNEXS_gt_NiadraUpgradePurchased, false);
    TriggerAddEventUpgradeLevelChanged(libNEXS_gt_NiadraUpgradePurchased, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Niadra Evol Spread Clicked
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraEvolSpreadClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_NiadraEvolSpreadClicked, false);
    TriggerEnable(libNEXS_gt_NiadraEvolBehaviourClicked, false);
    TriggerEnable(libNEXS_gt_NiadraEvolKillClicked, false);
    libNEXS_gf_NiadraUIUpdate(1);
    DialogControlSetVisible(libNEXS_gv_niadra_A_Frame, PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16), true);
    TriggerEnable(libNEXS_gt_NiadraE5AFB9E8AF9DE6A186TooltipE38081ExitE58AA8E4BD9C, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraEvolSpreadClicked_Init () {
    libNEXS_gt_NiadraEvolSpreadClicked = TriggerCreate("libNEXS_gt_NiadraEvolSpreadClicked_Func");
    TriggerEnable(libNEXS_gt_NiadraEvolSpreadClicked, false);
    TriggerAddEventUnitAbility(libNEXS_gt_NiadraEvolSpreadClicked, null, AbilityCommand("NiadraEvolSpread", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Niadra Evol Behaviour Clicked
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraEvolBehaviourClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_NiadraEvolSpreadClicked, false);
    TriggerEnable(libNEXS_gt_NiadraEvolBehaviourClicked, false);
    TriggerEnable(libNEXS_gt_NiadraEvolKillClicked, false);
    libNEXS_gf_NiadraUIUpdate(2);
    DialogControlSetVisible(libNEXS_gv_niadra_B_Frame, PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16), true);
    TriggerEnable(libNEXS_gt_NiadraE5AFB9E8AF9DE6A186TooltipE38081ExitE58AA8E4BD9C, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraEvolBehaviourClicked_Init () {
    libNEXS_gt_NiadraEvolBehaviourClicked = TriggerCreate("libNEXS_gt_NiadraEvolBehaviourClicked_Func");
    TriggerEnable(libNEXS_gt_NiadraEvolBehaviourClicked, false);
    TriggerAddEventUnitAbility(libNEXS_gt_NiadraEvolBehaviourClicked, null, AbilityCommand("NiadraEvolBehaviour", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Niadra Evol Kill Clicked
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraEvolKillClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_NiadraEvolSpreadClicked, false);
    TriggerEnable(libNEXS_gt_NiadraEvolBehaviourClicked, false);
    TriggerEnable(libNEXS_gt_NiadraEvolKillClicked, false);
    libNEXS_gf_NiadraUIUpdate(3);
    DialogControlSetVisible(libNEXS_gv_niadra_C_Frame, PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16), true);
    TriggerEnable(libNEXS_gt_NiadraE5AFB9E8AF9DE6A186TooltipE38081ExitE58AA8E4BD9C, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraEvolKillClicked_Init () {
    libNEXS_gt_NiadraEvolKillClicked = TriggerCreate("libNEXS_gt_NiadraEvolKillClicked_Func");
    TriggerEnable(libNEXS_gt_NiadraEvolKillClicked, false);
    TriggerAddEventUnitAbility(libNEXS_gt_NiadraEvolKillClicked, null, AbilityCommand("NiadraEvolKill", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Niadra Cell Storm Apply
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraCellStormApply_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) / 2.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraCellStormApply_Init () {
    libNEXS_gt_NiadraCellStormApply = TriggerCreate("libNEXS_gt_NiadraCellStormApply_Func");
    TriggerEnable(libNEXS_gt_NiadraCellStormApply, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_NiadraCellStormApply, null, "NiadraParasiteKillCellStormApplyDebuff", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5858DE796ABE5B4A9E6BA83E88EB7E58F96E587BBE69D80_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitBehaviorEnabled(libNtve_gf_KillingUnit(), "NiadraParasiteHandicapCollapseTriggerNotice") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeUser1) == false) && (UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeMapBoss) == false) && (UnitTypeTestAttribute(UnitGetType(libNtve_gf_KillingUnit()), c_unitAttributeHeroic) == false)) {
        UnitBehaviorAdd(libNtve_gf_KillingUnit(), "NiadraParasiteHandicapCollapseUnits", libNtve_gf_KillingUnit(), 1);
    }
    else {
        UnitBehaviorAdd(libNtve_gf_KillingUnit(), "NiadraParasiteHandicapCollapseHeroes", libNtve_gf_KillingUnit(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5858DE796ABE5B4A9E6BA83E88EB7E58F96E587BBE69D80_Init () {
    libNEXS_gt_E5858DE796ABE5B4A9E6BA83E88EB7E58F96E587BBE69D80 = TriggerCreate("libNEXS_gt_E5858DE796ABE5B4A9E6BA83E88EB7E58F96E587BBE69D80_Func");
    TriggerEnable(libNEXS_gt_E5858DE796ABE5B4A9E6BA83E88EB7E58F96E587BBE69D80, false);
    TriggerAddEventUnitDied(libNEXS_gt_E5858DE796ABE5B4A9E6BA83E88EB7E58F96E587BBE69D80, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E8828CE4BD93E59D8FE6ADBBE4BCA4E5AEB3E58F8DE599AC_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageAmount() > 0.0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) != c_playerAny))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnitDamageSourceUnit(), "NiadraParasiteKillMyonecrosis") == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnitDamageSourceUnit(), "NiadraParasiteKillMyonecrosisCD") == false))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "MutatorTempDamageReflect"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitDamageSourceUnit(), "NiadraParasiteKillMyonecrosisCD", EventUnitDamageSourceUnit(), 1);
    UnitDamage(EventUnitDamageSourceUnit(), "MutatorTempDamageReflect", EventUnitDamageSourceUnit(), EventUnitDamageAmount());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E8828CE4BD93E59D8FE6ADBBE4BCA4E5AEB3E58F8DE599AC_Init () {
    libNEXS_gt_E8828CE4BD93E59D8FE6ADBBE4BCA4E5AEB3E58F8DE599AC = TriggerCreate("libNEXS_gt_E8828CE4BD93E59D8FE6ADBBE4BCA4E5AEB3E58F8DE599AC_Func");
    TriggerEnable(libNEXS_gt_E8828CE4BD93E59D8FE6ADBBE4BCA4E5AEB3E58F8DE599AC, false);
    TriggerAddEventUnitDamaged(libNEXS_gt_E8828CE4BD93E59D8FE6ADBBE4BCA4E5AEB3E58F8DE599AC, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Niadra?????????Tooltip???Exit??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraE5AFB9E8AF9DE6A186TooltipE38081ExitE58AA8E4BD9C_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto87D97D13_ae = 7;
    const int auto87D97D13_ai = 1;
    const int auto2D8E007D_ae = 3;
    const int auto2D8E007D_ai = 1;
    const int auto83509DBD_ae = 2;
    const int auto83509DBD_ai = 1;
    const int auto8865FA5A_ae = 7;
    const int auto8865FA5A_ai = 1;
    const int auto9A496045_ae = 3;
    const int auto9A496045_ai = 1;
    const int autoFD245E47_ae = 2;
    const int autoFD245E47_ai = 1;
    const int autoC4532887_ae = 7;
    const int autoC4532887_ai = 1;
    const int autoF19D7AEA_ae = 3;
    const int autoF19D7AEA_ai = 1;
    const int auto8378FDA1_ae = 2;
    const int auto8378FDA1_ai = 1;
    const int autoC826150F_ae = 2;
    const int autoC826150F_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == libNEXS_gv_niadraUpdateUI))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControlEventType() == c_triggerControlEventTypeMouseEnter)) {
        lv_index = 1;
        for ( ; ( (auto87D97D13_ai >= 0 && lv_index <= auto87D97D13_ae) || (auto87D97D13_ai < 0 && lv_index >= auto87D97D13_ae) ) ; lv_index += auto87D97D13_ai ) {
            if ((EventDialogControl() == libNEXS_gv_niadra_A_Button[lv_index])) {
                libNEXS_gf_SetNiadraUpgradeTooltip(libNEXS_gv_niadra_A_Button_Data[lv_index]);
                DialogControlSetVisible(libNEXS_gv_niadra_Tooltip, PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetPositionRelative(libNEXS_gv_niadra_Tooltip, PlayerGroupSingle(EventPlayer()), c_anchorTop, libNEXS_gv_niadra_A_Button_Frame[lv_index], c_anchorBottom, 0, 0);
                return true;
            }

        }
        lv_index = 1;
        for ( ; ( (auto2D8E007D_ai >= 0 && lv_index <= auto2D8E007D_ae) || (auto2D8E007D_ai < 0 && lv_index >= auto2D8E007D_ae) ) ; lv_index += auto2D8E007D_ai ) {
            if ((EventDialogControl() == libNEXS_gv_niadra_B_Button[lv_index])) {
                libNEXS_gf_SetNiadraUpgradeTooltip(libNEXS_gv_niadra_B_Button_Data[lv_index]);
                DialogControlSetVisible(libNEXS_gv_niadra_Tooltip, PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetPositionRelative(libNEXS_gv_niadra_Tooltip, PlayerGroupSingle(EventPlayer()), c_anchorTop, libNEXS_gv_niadra_B_Button_Frame[lv_index], c_anchorBottom, 0, 0);
                return true;
            }
            else if ((EventDialogControl() == libNEXS_gv_niadra_B_Button2[lv_index])) {
                libNEXS_gf_SetNiadraUpgradeTooltip(libNEXS_gv_niadra_B_Button_Data2[lv_index]);
                DialogControlSetVisible(libNEXS_gv_niadra_Tooltip, PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetPositionRelative(libNEXS_gv_niadra_Tooltip, PlayerGroupSingle(EventPlayer()), c_anchorTop, libNEXS_gv_niadra_B_Button_Frame2[lv_index], c_anchorBottom, 0, 0);
                return true;
            }
        }
        lv_index = 1;
        for ( ; ( (auto83509DBD_ai >= 0 && lv_index <= auto83509DBD_ae) || (auto83509DBD_ai < 0 && lv_index >= auto83509DBD_ae) ) ; lv_index += auto83509DBD_ai ) {
            if ((EventDialogControl() == libNEXS_gv_niadra_B_Button3[lv_index])) {
                libNEXS_gf_SetNiadraUpgradeTooltip(libNEXS_gv_niadra_B_Button_Data3[lv_index]);
                DialogControlSetVisible(libNEXS_gv_niadra_Tooltip, PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetPositionRelative(libNEXS_gv_niadra_Tooltip, PlayerGroupSingle(EventPlayer()), c_anchorTop, libNEXS_gv_niadra_B_Button_Frame3[lv_index], c_anchorBottom, 0, 0);
                return true;
            }
            else if ((EventDialogControl() == libNEXS_gv_niadra_C_Button2[lv_index])) {
                libNEXS_gf_SetNiadraUpgradeTooltip(libNEXS_gv_niadra_C_Button_Data2[lv_index]);
                DialogControlSetVisible(libNEXS_gv_niadra_Tooltip, PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetPositionRelative(libNEXS_gv_niadra_Tooltip, PlayerGroupSingle(EventPlayer()), c_anchorTop, libNEXS_gv_niadra_C_Button_Frame2[lv_index], c_anchorBottom, 0, 0);
                return true;
            }
            else if ((EventDialogControl() == libNEXS_gv_niadra_C_Button3[lv_index])) {
                libNEXS_gf_SetNiadraUpgradeTooltip(libNEXS_gv_niadra_C_Button_Data3[lv_index]);
                DialogControlSetVisible(libNEXS_gv_niadra_Tooltip, PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetPositionRelative(libNEXS_gv_niadra_Tooltip, PlayerGroupSingle(EventPlayer()), c_anchorTop, libNEXS_gv_niadra_C_Button_Frame3[lv_index], c_anchorBottom, 0, 0);
                return true;
            }
            else if ((EventDialogControl() == libNEXS_gv_niadra_C_Button4[lv_index])) {
                libNEXS_gf_SetNiadraUpgradeTooltip(libNEXS_gv_niadra_C_Button_Data4[lv_index]);
                DialogControlSetVisible(libNEXS_gv_niadra_Tooltip, PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetPositionRelative(libNEXS_gv_niadra_Tooltip, PlayerGroupSingle(EventPlayer()), c_anchorTop, libNEXS_gv_niadra_C_Button_Frame4[lv_index], c_anchorBottom, 0, 0);
                return true;
            }
        }
        if ((EventDialogControl() == libNEXS_gv_niadra_C_Button)) {
            libNEXS_gf_SetNiadraUpgradeTooltip(libNEXS_gv_niadra_C_Button_Data);
            DialogControlSetVisible(libNEXS_gv_niadra_Tooltip, PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetPositionRelative(libNEXS_gv_niadra_Tooltip, PlayerGroupSingle(EventPlayer()), c_anchorTop, libNEXS_gv_niadra_C_Button_Frame, c_anchorBottom, 0, 0);
        }

    }
    else if ((EventDialogControlEventType() == c_triggerControlEventTypeMouseExit)) {
        lv_index = 1;
        for ( ; ( (auto8865FA5A_ai >= 0 && lv_index <= auto8865FA5A_ae) || (auto8865FA5A_ai < 0 && lv_index >= auto8865FA5A_ae) ) ; lv_index += auto8865FA5A_ai ) {
            if ((EventDialogControl() == libNEXS_gv_niadra_A_Button[lv_index])) {
                DialogControlSetVisible(libNEXS_gv_niadra_Tooltip, PlayerGroupSingle(EventPlayer()), false);
                return true;
            }

        }
        lv_index = 1;
        for ( ; ( (auto9A496045_ai >= 0 && lv_index <= auto9A496045_ae) || (auto9A496045_ai < 0 && lv_index >= auto9A496045_ae) ) ; lv_index += auto9A496045_ai ) {
            if ((EventDialogControl() == libNEXS_gv_niadra_B_Button[lv_index])) {
                DialogControlSetVisible(libNEXS_gv_niadra_Tooltip, PlayerGroupSingle(EventPlayer()), false);
                return true;
            }
            else if ((EventDialogControl() == libNEXS_gv_niadra_B_Button2[lv_index])) {
                DialogControlSetVisible(libNEXS_gv_niadra_Tooltip, PlayerGroupSingle(EventPlayer()), false);
                return true;
            }
        }
        lv_index = 1;
        for ( ; ( (autoFD245E47_ai >= 0 && lv_index <= autoFD245E47_ae) || (autoFD245E47_ai < 0 && lv_index >= autoFD245E47_ae) ) ; lv_index += autoFD245E47_ai ) {
            if ((EventDialogControl() == libNEXS_gv_niadra_B_Button3[lv_index])) {
                DialogControlSetVisible(libNEXS_gv_niadra_Tooltip, PlayerGroupSingle(EventPlayer()), false);
                return true;
            }
            else if ((EventDialogControl() == libNEXS_gv_niadra_C_Button2[lv_index])) {
                DialogControlSetVisible(libNEXS_gv_niadra_Tooltip, PlayerGroupSingle(EventPlayer()), false);
                return true;
            }
            else if ((EventDialogControl() == libNEXS_gv_niadra_C_Button3[lv_index])) {
                DialogControlSetVisible(libNEXS_gv_niadra_Tooltip, PlayerGroupSingle(EventPlayer()), false);
                return true;
            }
            else if ((EventDialogControl() == libNEXS_gv_niadra_C_Button4[lv_index])) {
                DialogControlSetVisible(libNEXS_gv_niadra_Tooltip, PlayerGroupSingle(EventPlayer()), false);
                return true;
            }
        }
        if ((EventDialogControl() == libNEXS_gv_niadra_C_Button)) {
            DialogControlSetVisible(libNEXS_gv_niadra_Tooltip, PlayerGroupSingle(EventPlayer()), false);
        }

    }
    else if ((EventDialogControlEventType() == c_triggerControlEventTypeClick)) {
        if ((EventDialogControl() == libNEXS_gv_niadra_A_ExitButton)) {
            DialogControlSetVisible(libNEXS_gv_niadra_A_Frame, PlayerGroupAll(), false);
            TriggerEnable(libNEXS_gt_NiadraEvolSpreadClicked, true);
            TriggerEnable(libNEXS_gt_NiadraEvolBehaviourClicked, true);
            TriggerEnable(libNEXS_gt_NiadraEvolKillClicked, true);
            TriggerEnable(libNEXS_gt_NiadraE5AFB9E8AF9DE6A186TooltipE38081ExitE58AA8E4BD9C, false);
        }
        else if ((EventDialogControl() == libNEXS_gv_niadra_B_ExitButton)) {
            DialogControlSetVisible(libNEXS_gv_niadra_B_Frame, PlayerGroupAll(), false);
            TriggerEnable(libNEXS_gt_NiadraEvolSpreadClicked, true);
            TriggerEnable(libNEXS_gt_NiadraEvolBehaviourClicked, true);
            TriggerEnable(libNEXS_gt_NiadraEvolKillClicked, true);
            TriggerEnable(libNEXS_gt_NiadraE5AFB9E8AF9DE6A186TooltipE38081ExitE58AA8E4BD9C, false);
        }
        else if ((EventDialogControl() == libNEXS_gv_niadra_C_ExitButton)) {
            DialogControlSetVisible(libNEXS_gv_niadra_C_Frame, PlayerGroupAll(), false);
            TriggerEnable(libNEXS_gt_NiadraEvolSpreadClicked, true);
            TriggerEnable(libNEXS_gt_NiadraEvolBehaviourClicked, true);
            TriggerEnable(libNEXS_gt_NiadraEvolKillClicked, true);
            TriggerEnable(libNEXS_gt_NiadraE5AFB9E8AF9DE6A186TooltipE38081ExitE58AA8E4BD9C, false);
        }
        lv_index = 1;
        for ( ; ( (autoC4532887_ai >= 0 && lv_index <= autoC4532887_ae) || (autoC4532887_ai < 0 && lv_index >= autoC4532887_ae) ) ; lv_index += autoC4532887_ai ) {
            if ((libNEXS_gv_niadra_A_Button[lv_index] == EventDialogControl())) {
                libNEXS_gf_NiadraGrantUpgradetoPlayer(libNEXS_gv_niadra_A_Button_Data[lv_index], 1);
                return true;
            }

        }
        lv_index = 1;
        for ( ; ( (autoF19D7AEA_ai >= 0 && lv_index <= autoF19D7AEA_ae) || (autoF19D7AEA_ai < 0 && lv_index >= autoF19D7AEA_ae) ) ; lv_index += autoF19D7AEA_ai ) {
            if ((libNEXS_gv_niadra_B_Button[lv_index] == EventDialogControl())) {
                libNEXS_gf_NiadraGrantUpgradetoPlayer(libNEXS_gv_niadra_B_Button_Data[lv_index], 2);
                return true;
            }

            if ((libNEXS_gv_niadra_B_Button2[lv_index] == EventDialogControl())) {
                libNEXS_gf_NiadraGrantUpgradetoPlayer(libNEXS_gv_niadra_B_Button_Data2[lv_index], 2);
                return true;
            }

        }
        lv_index = 1;
        for ( ; ( (auto8378FDA1_ai >= 0 && lv_index <= auto8378FDA1_ae) || (auto8378FDA1_ai < 0 && lv_index >= auto8378FDA1_ae) ) ; lv_index += auto8378FDA1_ai ) {
            if ((libNEXS_gv_niadra_B_Button3[lv_index] == EventDialogControl())) {
                libNEXS_gf_NiadraGrantUpgradetoPlayer(libNEXS_gv_niadra_B_Button_Data3[lv_index], 2);
                return true;
            }

        }
        lv_index = 1;
        for ( ; ( (autoC826150F_ai >= 0 && lv_index <= autoC826150F_ae) || (autoC826150F_ai < 0 && lv_index >= autoC826150F_ae) ) ; lv_index += autoC826150F_ai ) {
            if ((libNEXS_gv_niadra_C_Button2[lv_index] == EventDialogControl())) {
                libNEXS_gf_NiadraGrantUpgradetoPlayer(libNEXS_gv_niadra_C_Button_Data2[lv_index], 3);
                return true;
            }

            if ((libNEXS_gv_niadra_C_Button3[lv_index] == EventDialogControl())) {
                libNEXS_gf_NiadraGrantUpgradetoPlayer(libNEXS_gv_niadra_C_Button_Data3[lv_index], 3);
                return true;
            }

            if ((libNEXS_gv_niadra_C_Button4[lv_index] == EventDialogControl())) {
                libNEXS_gf_NiadraGrantUpgradetoPlayer(libNEXS_gv_niadra_C_Button_Data4[lv_index], 3);
                return true;
            }

        }
        if ((libNEXS_gv_niadra_C_Button == EventDialogControl())) {
            libNEXS_gf_NiadraGrantUpgradetoPlayer(libNEXS_gv_niadra_C_Button_Data, 3);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraE5AFB9E8AF9DE6A186TooltipE38081ExitE58AA8E4BD9C_Init () {
    libNEXS_gt_NiadraE5AFB9E8AF9DE6A186TooltipE38081ExitE58AA8E4BD9C = TriggerCreate("libNEXS_gt_NiadraE5AFB9E8AF9DE6A186TooltipE38081ExitE58AA8E4BD9C_Func");
    TriggerEnable(libNEXS_gt_NiadraE5AFB9E8AF9DE6A186TooltipE38081ExitE58AA8E4BD9C, false);
    TriggerAddEventDialogControl(libNEXS_gt_NiadraE5AFB9E8AF9DE6A186TooltipE38081ExitE58AA8E4BD9C, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NiadraTooltip??????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraTooltipE5AE9EE4BE8B_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_NiadraE68F8FE8BFB0(1, 0, 0, 175, StringExternal("Param/Value/lib_NEXS_BF6575B4"), StringExternal("Param/Value/lib_NEXS_9F12ACAF"), "SJHyperionHangerCheck", "SJHyperionOutOfCombat", "SJHyperionLightningStorm2", libNEXS_ge_NiadraE68F8FE8BFB0E58D87E7BAA7E7B1BBE588AB_E58D95E58D87E7BAA7);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraTooltipE5AE9EE4BE8B_Init () {
    libNEXS_gt_NiadraTooltipE5AE9EE4BE8B = TriggerCreate("libNEXS_gt_NiadraTooltipE5AE9EE4BE8B_Func");
    TriggerEnable(libNEXS_gt_NiadraTooltipE5AE9EE4BE8B, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5AE9AE4BD8DE5ADB5E58C96E59CBA_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hatchery;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hatchery = UnitBehaviorEffectUnit(EventUnit(), EventUnitBehavior(), c_effectUnitCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "NiadraHatcherySpawnLarvaSkillABCaster", lv_hatchery);
    UnitAbilityAddChargeUsed(lv_hatchery, "NiadraHatcherySpawnLarvaSkill", "Abil/NiadraHatcherySpawnLarvaSkill", -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5AE9AE4BD8DE5ADB5E58C96E59CBA_Init () {
    libNEXS_gt_E5AE9AE4BD8DE5ADB5E58C96E59CBA = TriggerCreate("libNEXS_gt_E5AE9AE4BD8DE5ADB5E58C96E59CBA_Func");
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E5AE9AE4BD8DE5ADB5E58C96E59CBA, null, "NiadraHatcherySpawnLarvaSkill", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E5AE9AE4BD8DE5ADB5E58C96E59CBA, null, "NiadraHatcherySpawnLarvaSkill", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5BC80E5A78BE5ADB5E58C96E68A80E883BD_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_larva;
    int lv_amount;
    unitgroup lv_larvaGroup;

    // Automatic Variable Declarations
    unitgroup auto4AD32FFC_g;
    int auto4AD32FFC_u;
    unit auto4AD32FFC_var;

    // Variable Initialization
    lv_larvaGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto4AD32FFC_g = UnitGroup("NiadraParasiteDrone", c_playerAny, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto4AD32FFC_u = UnitGroupCount(auto4AD32FFC_g, c_unitCountAll);
    for (;; auto4AD32FFC_u -= 1) {
        auto4AD32FFC_var = UnitGroupUnitFromEnd(auto4AD32FFC_g, auto4AD32FFC_u);
        if (auto4AD32FFC_var == null) { break; }
        UnitIssueOrder(auto4AD32FFC_var, Order(AbilityCommand("NiadraLarvaTrain", 0)), c_orderQueueReplace);
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "NiadraHatcherySpawnLarvaSkillCaster", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5BC80E5A78BE5ADB5E58C96E68A80E883BD_Init () {
    libNEXS_gt_E5BC80E5A78BE5ADB5E58C96E68A80E883BD = TriggerCreate("libNEXS_gt_E5BC80E5A78BE5ADB5E58C96E68A80E883BD_Func");
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E5BC80E5A78BE5ADB5E58C96E68A80E883BD, c_playerAny, "NiadraHatcherySpawnLarvaSkillInitial");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5AF84E7949FE68EA2E69CBAE5889DE5A78BE5889BE5BBBA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1C01C5A6_g;
    int auto1C01C5A6_u;
    unit auto1C01C5A6_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_niadraInitialStructure = EventUnit();
    UnitCreate(1, "NiadraProbeFly", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.7, 270.0), 270.0);
    UnitCreate(1, "NiadraProbeFly", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.7, 315.0), 315.0);
    UnitCreate(1, "NiadraProbeFly", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.7, 360.0), 360.0);
    UnitCreate(1, "NiadraProbeFly", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.7, 90.0), 90.0);
    UnitCreate(1, "NiadraProbeFly", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.7, 135.0), 135.0);
    UnitCreate(1, "NiadraProbeFly", 0, UnitGetOwner(EventUnit()), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.7, 180.0), 180.0);
    auto1C01C5A6_g = UnitGroup("NiadraProbeFly", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1C01C5A6_u = UnitGroupCount(auto1C01C5A6_g, c_unitCountAll);
    for (;; auto1C01C5A6_u -= 1) {
        auto1C01C5A6_var = UnitGroupUnitFromEnd(auto1C01C5A6_g, auto1C01C5A6_u);
        if (auto1C01C5A6_var == null) { break; }
        UnitGroupAdd(libNEXS_gv_niadraFreeProbe, auto1C01C5A6_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5AF84E7949FE68EA2E69CBAE5889DE5A78BE5889BE5BBBA_Init () {
    libNEXS_gt_E5AF84E7949FE68EA2E69CBAE5889DE5A78BE5889BE5BBBA = TriggerCreate("libNEXS_gt_E5AF84E7949FE68EA2E69CBAE5889DE5A78BE5889BE5BBBA_Func");
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E5AF84E7949FE68EA2E69CBAE5889DE5A78BE5889BE5BBBA, null, "NiadraUnknownStructureInitial", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5AF84E7949FE68EA2E69CBAE98787E99B86E58AA8E4BD9C_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_initialHatchery;
    unitgroup lv_minerals;

    // Automatic Variable Declarations
    unitgroup autoA677F869_g;
    int autoA677F869_u;
    unit autoA677F869_var;
    unitgroup auto299B1F9E_g;
    int auto299B1F9E_u;
    unit auto299B1F9E_var;
    unitgroup autoAD08A69F_g;
    int autoAD08A69F_u;
    unit autoAD08A69F_var;
    unitgroup auto0B6A3070_g;
    int auto0B6A3070_u;
    unit auto0B6A3070_var;

    // Variable Initialization
    lv_minerals = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NiadraProbeFly"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.0, UnitGetFacing(EventUnit()))), c_orderQueueReplace);
    Wait(0.3, c_timeAI);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("ProbeGround", 0)), c_orderQueueReplace);
    autoA677F869_g = UnitGroup("NiadraHatchery", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA677F869_u = UnitGroupCount(autoA677F869_g, c_unitCountAll);
    for (;; autoA677F869_u -= 1) {
        autoA677F869_var = UnitGroupUnitFromEnd(autoA677F869_g, autoA677F869_u);
        if (autoA677F869_var == null) { break; }
        lv_initialHatchery = autoA677F869_var;
    }
    auto299B1F9E_g = UnitGroup("MineralField", c_playerAny, RegionCircle(UnitGetPosition(lv_initialHatchery), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto299B1F9E_u = UnitGroupCount(auto299B1F9E_g, c_unitCountAll);
    for (;; auto299B1F9E_u -= 1) {
        auto299B1F9E_var = UnitGroupUnitFromEnd(auto299B1F9E_g, auto299B1F9E_u);
        if (auto299B1F9E_var == null) { break; }
        UnitGroupAdd(lv_minerals, auto299B1F9E_var);
    }
    autoAD08A69F_g = UnitGroup("UmojanLabMineralField", c_playerAny, RegionCircle(UnitGetPosition(lv_initialHatchery), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAD08A69F_u = UnitGroupCount(autoAD08A69F_g, c_unitCountAll);
    for (;; autoAD08A69F_u -= 1) {
        autoAD08A69F_var = UnitGroupUnitFromEnd(autoAD08A69F_g, autoAD08A69F_u);
        if (autoAD08A69F_var == null) { break; }
        UnitGroupAdd(lv_minerals, autoAD08A69F_var);
    }
    auto0B6A3070_g = UnitGroup("PurifierMineralField", c_playerAny, RegionCircle(UnitGetPosition(lv_initialHatchery), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0B6A3070_u = UnitGroupCount(auto0B6A3070_g, c_unitCountAll);
    for (;; auto0B6A3070_u -= 1) {
        auto0B6A3070_var = UnitGroupUnitFromEnd(auto0B6A3070_g, auto0B6A3070_u);
        if (auto0B6A3070_var == null) { break; }
        UnitGroupAdd(lv_minerals, auto0B6A3070_var);
    }
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("ProbeHarvest", 0), UnitGroupRandomUnit(lv_minerals, c_unitCountAlive)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5AF84E7949FE68EA2E69CBAE98787E99B86E58AA8E4BD9C_Init () {
    libNEXS_gt_E5AF84E7949FE68EA2E69CBAE98787E99B86E58AA8E4BD9C = TriggerCreate("libNEXS_gt_E5AF84E7949FE68EA2E69CBAE98787E99B86E58AA8E4BD9C_Func");
    TriggerAddEventUnitRegion(libNEXS_gt_E5AF84E7949FE68EA2E69CBAE98787E99B86E58AA8E4BD9C, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5AF84E7949FE68EA2E69CBAE5889DE5A78BE585B3E997AD_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_E5AF84E7949FE68EA2E69CBAE5889DE5A78BE5889BE5BBBA, false);
    TriggerEnable(libNEXS_gt_E5AF84E7949FE68EA2E69CBAE98787E99B86E58AA8E4BD9C, false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5AF84E7949FE68EA2E69CBAE5889DE5A78BE585B3E997AD_Init () {
    libNEXS_gt_E5AF84E7949FE68EA2E69CBAE5889DE5A78BE585B3E997AD = TriggerCreate("libNEXS_gt_E5AF84E7949FE68EA2E69CBAE5889DE5A78BE585B3E997AD_Func");
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E5AF84E7949FE68EA2E69CBAE5889DE5A78BE585B3E997AD, null, "NiadraUnknownStructureInitial", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5AF84E7949FE68EA2E69CBAE58F96E6B688E5BBBAE980A0E8BF94E8BF98_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitProgressUnit()) == "NiadraRoboticsFacility") || (UnitGetType(EventUnitProgressUnit()) == "NiadraForge") || (UnitGetType(EventUnitProgressUnit()) == "NiadraRoboticsBay") || (UnitGetType(EventUnitProgressUnit()) == "NiadraStargate") || (UnitGetType(EventUnitProgressUnit()) == "NiadraFleetBeacon") || (UnitGetType(EventUnitProgressUnit()) == "NiadraPhotonCannon")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NiadraProbe", 0, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, UnitGetPosition(EventUnitProgressUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5AF84E7949FE68EA2E69CBAE58F96E6B688E5BBBAE980A0E8BF94E8BF98_Init () {
    libNEXS_gt_E5AF84E7949FE68EA2E69CBAE58F96E6B688E5BBBAE980A0E8BF94E8BF98 = TriggerCreate("libNEXS_gt_E5AF84E7949FE68EA2E69CBAE58F96E6B688E5BBBAE980A0E8BF94E8BF98_Func");
    TriggerAddEventUnitConstructProgress(libNEXS_gt_E5AF84E7949FE68EA2E69CBAE58F96E6B688E5BBBAE980A0E8BF94E8BF98, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E58D95E4BD8DE6ADBBE4BAA1E7949FE789A9E8B4A8E9A29DE5A496E88EB7E58F96_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "NoBiomassDrop") == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "KerriganInfestBroodling"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(libNtve_gf_KillingPlayer(), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_AllyMutual) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "NidraFrigateApplySD") == true)) {
        libNEXS_gf_E5B0BCE99B85E5BEB7E68B89E7949FE789A9E8B4A8E8A786E8A789E58F8AE68E89E890BD(EventUnit());
    }

    libNEXS_gf_E5B0BCE99B85E5BEB7E68B89E7949FE789A9E8B4A8E8A786E8A789E58F8AE68E89E890BD(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E58D95E4BD8DE6ADBBE4BAA1E7949FE789A9E8B4A8E9A29DE5A496E88EB7E58F96_Init () {
    libNEXS_gt_E58D95E4BD8DE6ADBBE4BAA1E7949FE789A9E8B4A8E9A29DE5A496E88EB7E58F96 = TriggerCreate("libNEXS_gt_E58D95E4BD8DE6ADBBE4BAA1E7949FE789A9E8B4A8E9A29DE5A496E88EB7E58F96_Func");
    TriggerEnable(libNEXS_gt_E58D95E4BD8DE6ADBBE4BAA1E7949FE789A9E8B4A8E9A29DE5A496E88EB7E58F96, false);
    TriggerAddEventUnitDied(libNEXS_gt_E58D95E4BD8DE6ADBBE4BAA1E7949FE789A9E8B4A8E9A29DE5A496E88EB7E58F96, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5AF84E7949FE58D95E4BD8DE7949FE789A9E8B4A8E88EB7E58F96_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "NoBiomassDrop") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_E5B0BCE99B85E5BEB7E68B89E7949FE789A9E8B4A8E8A786E8A789E58F8AE68E89E890BD(EventUnit());
    libNEXS_gf_E5B0BCE99B85E5BEB7E68B89E7949FE789A9E8B4A8E8A786E8A789E58F8AE68E89E890BD(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5AF84E7949FE58D95E4BD8DE7949FE789A9E8B4A8E88EB7E58F96_Init () {
    libNEXS_gt_E5AF84E7949FE58D95E4BD8DE7949FE789A9E8B4A8E88EB7E58F96 = TriggerCreate("libNEXS_gt_E5AF84E7949FE58D95E4BD8DE7949FE789A9E8B4A8E88EB7E58F96_Func");
    TriggerEnable(libNEXS_gt_E5AF84E7949FE58D95E4BD8DE7949FE789A9E8B4A8E88EB7E58F96, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E5AF84E7949FE58D95E4BD8DE7949FE789A9E8B4A8E88EB7E58F96, null, "NiadraParasite", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5AF84E7949FE58D95E4BD8DE980A0E68890E4BCA4E5AEB3E7949FE789A9E8B4A8E88EB7E58F96_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnitDamageSourceUnit(), "ParasiticInvasion") == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, c_playerPropCustom, c_playerPropOperAdd, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5AF84E7949FE58D95E4BD8DE980A0E68890E4BCA4E5AEB3E7949FE789A9E8B4A8E88EB7E58F96_Init () {
    libNEXS_gt_E5AF84E7949FE58D95E4BD8DE980A0E68890E4BCA4E5AEB3E7949FE789A9E8B4A8E88EB7E58F96 = TriggerCreate("libNEXS_gt_E5AF84E7949FE58D95E4BD8DE980A0E68890E4BCA4E5AEB3E7949FE789A9E8B4A8E88EB7E58F96_Func");
    TriggerEnable(libNEXS_gt_E5AF84E7949FE58D95E4BD8DE980A0E68890E4BCA4E5AEB3E7949FE789A9E8B4A8E88EB7E58F96, false);
    TriggerAddEventUnitDamaged(libNEXS_gt_E5AF84E7949FE58D95E4BD8DE980A0E68890E4BCA4E5AEB3E7949FE789A9E8B4A8E88EB7E58F96, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E5909EE599ACE5AEBFE4B8BBE7949FE789A9E8B4A8E88EB7E58F96_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_supply;
    fixed lv_coefficient;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_coefficient = 2.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_supply = UnitTypeGetProperty(UnitGetType(EventUnit()), c_unitPropSuppliesUsed);
    if (((lv_supply > 6.0) || (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true) || (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMapBoss) == true))) {
        lv_supply = 6.0;
    }

    if ((lv_supply > 1.0)) {
        UnitCreateEffectPoint(EventUnit(), (("NiadraBiomassCreateLM" + IntToString(FixedToInt(lv_supply)))), RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), (1.2 + (0.3 * lv_supply)))));
        UnitCreateEffectPoint(EventUnit(), (("NiadraBiomassCreateLM" + IntToString(FixedToInt(lv_supply)))), RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), (1.2 + (0.3 * lv_supply)))));
    }
    else {
        if ((lv_supply > 0.0)) {
            UnitCreateEffectPoint(EventUnit(), ("NiadraBiomassCreateLM0"), RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 0.75)));
            UnitCreateEffectPoint(EventUnit(), ("NiadraBiomassCreateLM0"), RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 0.75)));
        }

    }
    Wait(0.3, c_timeAI);
    PlayerModifyPropertyInt(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, c_playerPropCustom, c_playerPropOperAdd, FixedToInt((lv_coefficient * lv_supply)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E5909EE599ACE5AEBFE4B8BBE7949FE789A9E8B4A8E88EB7E58F96_Init () {
    libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E5909EE599ACE5AEBFE4B8BBE7949FE789A9E8B4A8E88EB7E58F96 = TriggerCreate("libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E5909EE599ACE5AEBFE4B8BBE7949FE789A9E8B4A8E88EB7E58F96_Func");
    TriggerEnable(libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E5909EE599ACE5AEBFE4B8BBE7949FE789A9E8B4A8E88EB7E58F96, false);
    TriggerAddEventUnitAbility(libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E5909EE599ACE5AEBFE4B8BBE7949FE789A9E8B4A8E88EB7E58F96, null, AbilityCommand("Consume", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E5AF84E7949FE6A186E98089E8A686E79B96_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_SetHeroPanelUnit(1, EventUnit(), libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16);
    UnitAbilityAdd(EventUnit(), "Consume");
    UnitSetPropertyFixed(EventUnit(), c_unitPropKills, UnitGetPropertyFixed(libNEXS_gv_niadraHero, c_unitPropKills, c_unitPropCurrent));
    libNEXS_gf_E5B0BCE99B85E5BEB7E68B89E7949FE789A9E8B4A8E8A786E8A789E58F8AE68E89E890BD(EventUnit());
    libNEXS_gf_E5B0BCE99B85E5BEB7E68B89E7949FE789A9E8B4A8E8A786E8A789E58F8AE68E89E890BD(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E5AF84E7949FE6A186E98089E8A686E79B96_Init () {
    libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E5AF84E7949FE6A186E98089E8A686E79B96 = TriggerCreate("libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E5AF84E7949FE6A186E98089E8A686E79B96_Func");
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E5AF84E7949FE6A186E98089E8A686E79B96, null, "ParasiticInvasion", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E5AF84E7949FE6A186E98089E58F96E6B688_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityRemove(EventUnit(), "Consume");
    libNEXS_gf_SetHeroPanelUnit(1, libNEXS_gv_niadraHero, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16);
    PlayerAddCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "Abil/ParasiticInvasion", 4.0);
    UnitCreateEffectUnit(libNEXS_gv_niadraHero, "ParasiticInvasionRemoveandApplyBehavior", libNEXS_gv_niadraHero);
    UnitSetPropertyFixed(libNEXS_gv_niadraHero, c_unitPropKills, UnitGetPropertyFixed(EventUnit(), c_unitPropKills, c_unitPropCurrent));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E5AF84E7949FE6A186E98089E58F96E6B688_Init () {
    libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E5AF84E7949FE6A186E98089E58F96E6B688 = TriggerCreate("libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E5AF84E7949FE6A186E98089E58F96E6B688_Func");
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E5AF84E7949FE6A186E98089E58F96E6B688, null, "ParasiticInvasion", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E88BB1E99B84E6ADBBE4BAA1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoE7F48369_val;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2)) && (EventUnitDamageDeathCheck(c_deathTypeMorph) != true) && (EventUnitDamageDeathCheck(c_deathTypeCancel) != true) && (EventUnitDamageDeathCheck(c_deathTypeRemove) != true) && (EventUnitDamageDeathCheck(c_deathTypeUnderConstruction) != true) && ((UnitGetType(EventUnit()) == "NiadraLarvalQueen") || (UnitGetType(EventUnit()) == "SwarmQueen") || (UnitGetType(EventUnit()) == "LargeSwarmQueen") || (UnitGetType(EventUnit()) == "HugeSwarmQueen") || (UnitGetType(EventUnit()) == "UltimateSwarmQueen"))) {
        libNEXS_gv_niadraHero = null;
        if ((UnitGetType(EventUnit()) == "NiadraLarvalQueen")) {
            UnitBehaviorAddPlayer(libNEXS_gv_niadraInitialStructure, "NiadraHeroBirthInitial", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, 1);
        }
        else {
            UnitBehaviorAddPlayer(libNEXS_gv_niadraInitialStructure, "NiadraHeroRevive", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, 1);
        }
        autoE7F48369_val = libNEXS_gv_niadraHeroLevel;
        if (autoE7F48369_val == 1) {
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_CED3C62C"));
        }
        else if (autoE7F48369_val == 2) {
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_B2F88E1B"));
        }
        else if (autoE7F48369_val == 3) {
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_48DD4C5E"));
        }
        else if (autoE7F48369_val == 4) {
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_F0C45C6A"));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_A2CD9080"));
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E88BB1E99B84E6ADBBE4BAA1_Init () {
    libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E88BB1E99B84E6ADBBE4BAA1 = TriggerCreate("libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E88BB1E99B84E6ADBBE4BAA1_Func");
    TriggerAddEventUnitDied(libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E88BB1E99B84E6ADBBE4BAA1, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E88BB1E99B84E587BAE7949F_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto317BB29B_g;
    int auto317BB29B_u;
    unit auto317BB29B_var;

    // Conditions
    if (testConds) {
        if (!((libNEXS_gv_niadraHero == null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_NiadraHeroLv1, true);
    Wait(1.0, c_timeAI);
    if ((libNEXS_gv_niadraHeroFirst == 1)) {
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_8DE0F184"));
    }
    else {
        libNEXS_gv_niadraHeroFirst = 1;
        UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_2F52F82F"));
    }
    auto317BB29B_g = UnitGroup("NiadraLarvalQueen", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto317BB29B_u = UnitGroupCount(auto317BB29B_g, c_unitCountAll);
    for (;; auto317BB29B_u -= 1) {
        auto317BB29B_var = UnitGroupUnitFromEnd(auto317BB29B_g, auto317BB29B_u);
        if (auto317BB29B_var == null) { break; }
        libNEXS_gv_niadraHero = auto317BB29B_var;
        libNEXS_gf_SetHeroPanelUnit(1, auto317BB29B_var, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16);
    }
    UnitShowKillDisplay(libNEXS_gv_niadraHero, c_killDisplayAlways);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E88BB1E99B84E587BAE7949F_Init () {
    libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E88BB1E99B84E587BAE7949F = TriggerCreate("libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E88BB1E99B84E587BAE7949F_Func");
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E88BB1E99B84E587BAE7949F, null, "NiadraHeroBirthInitial", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E88BB1E99B84E5A48DE6B4BB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto3CEC15F8_val;

    // Conditions
    if (testConds) {
        if (!((libNEXS_gv_niadraHero == null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3CEC15F8_val = libNEXS_gv_niadraHeroLevel;
    if (auto3CEC15F8_val == 2) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "LargeSwarmQueen", c_unitCreateIgnorePlacement, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, UnitGetPosition(EventUnit()));
    }
    else if (auto3CEC15F8_val == 3) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HugeSwarmQueen", c_unitCreateIgnorePlacement, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, UnitGetPosition(EventUnit()));
    }
    else if (auto3CEC15F8_val == 4) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "UltimateSwarmQueen", c_unitCreateIgnorePlacement, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, UnitGetPosition(EventUnit()));
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SwarmQueen", c_unitCreateIgnorePlacement, libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, UnitGetPosition(EventUnit()));
    }
    libNEXS_gv_niadraHero = UnitLastCreated();
    UnitBehaviorAddPlayer(UnitLastCreated(), "NiadraHeroReviveActive", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, 1);
    UIDisplayMessage(PlayerGroupSingle(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16), c_messageAreaSubtitle, StringExternal("Param/Value/lib_NEXS_0F947DC8"));
    libNEXS_gf_SetHeroPanelUnit(1, UnitLastCreated(), libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E88BB1E99B84E5A48DE6B4BB_Init () {
    libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E88BB1E99B84E5A48DE6B4BB = TriggerCreate("libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E88BB1E99B84E5A48DE6B4BB_Func");
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E88BB1E99B84E5A48DE6B4BB, null, "NiadraHeroRevive", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????????????????????Debug
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E5B9BCE899ABE58F98E5BDA2Debug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SwarmQueen"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_SetHeroPanelUnit(1, EventUnit(), libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E5B9BCE899ABE58F98E5BDA2Debug_Init () {
    libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E5B9BCE899ABE58F98E5BDA2Debug = TriggerCreate("libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E5B9BCE899ABE58F98E5BDA2Debug_Func");
    TriggerAddEventUnitRegion(libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E5B9BCE899ABE58F98E5BDA2Debug, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Niadra Hero Cooldown Reduction
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraHeroCooldownReduction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const fixed lv_cooldownReduction = -0.375;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerAddChargeRegenRemaining(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "Abil/NiadraTopbarFrigateFalling", lv_cooldownReduction);
    PlayerAddChargeRegenRemaining(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "Abil/NiadraTopbarParasite", lv_cooldownReduction);
    PlayerAddChargeRegenRemaining(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "Abil/NiadraTopbarMothership", lv_cooldownReduction);
    PlayerAddChargeRegenRemaining(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "Abil/NiadraTopbarUrsadon", lv_cooldownReduction);
    PlayerAddCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "Abil/NiadraWildMutation", lv_cooldownReduction);
    PlayerAddCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "Abil/BrutaliskDeepBurrow", lv_cooldownReduction);
    PlayerAddCooldown(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "Abil/NyaStingerSprayTarget", lv_cooldownReduction);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraHeroCooldownReduction_Init () {
    libNEXS_gt_NiadraHeroCooldownReduction = TriggerCreate("libNEXS_gt_NiadraHeroCooldownReduction_Func");
    TriggerEnable(libNEXS_gt_NiadraHeroCooldownReduction, false);
    TriggerAddEventUnitDamaged(libNEXS_gt_NiadraHeroCooldownReduction, null, c_unitDamageTypeAny, c_unitDamageEither, "SwarmQueenAcidSpinesDamage");
    TriggerAddEventUnitDamaged(libNEXS_gt_NiadraHeroCooldownReduction, null, c_unitDamageTypeAny, c_unitDamageEither, "SwarmQueenAcidSpinesDamage2");
    TriggerAddEventUnitDamaged(libNEXS_gt_NiadraHeroCooldownReduction, null, c_unitDamageTypeAny, c_unitDamageEither, "SwarmQueenAcidSpinesDamageLv3");
    TriggerAddEventUnitDamaged(libNEXS_gt_NiadraHeroCooldownReduction, null, c_unitDamageTypeAny, c_unitDamageEither, "SwarmQueenAcidSpinesDamageLv4");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Niadra Hero Select Larva
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraHeroSelectLarva_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_larvaGroup;

    // Automatic Variable Declarations
    unitgroup auto5502B82C_g;
    int auto5502B82C_u;
    unit auto5502B82C_var;

    // Variable Initialization
    lv_larvaGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitClearSelection(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    auto5502B82C_g = UnitGroup("NiadraParasite", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), RegionCircle(UnitGroupCenterOfGroup(libNtve_gf_ConvertUnitToUnitGroup(EventPlayerEffectUsedUnit(c_effectUnitCaster))), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5502B82C_u = UnitGroupCount(auto5502B82C_g, c_unitCountAll);
    for (;; auto5502B82C_u -= 1) {
        auto5502B82C_var = UnitGroupUnitFromEnd(auto5502B82C_g, auto5502B82C_u);
        if (auto5502B82C_var == null) { break; }
        UnitGroupAdd(lv_larvaGroup, auto5502B82C_var);
    }
    UnitGroupSelect(lv_larvaGroup, EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraHeroSelectLarva_Init () {
    libNEXS_gt_NiadraHeroSelectLarva = TriggerCreate("libNEXS_gt_NiadraHeroSelectLarva_Func");
    TriggerEnable(libNEXS_gt_NiadraHeroSelectLarva, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_NiadraHeroSelectLarva, c_playerAny, "NiadraSelectLarvaAround15");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Niadra Hero Lv1
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraHeroLv1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SwarmQueen"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_niadraHeroLevel = 1;
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "NiadraHero1", 1);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libNEXS_gt_E5AF84E7949FE58D95E4BD8DE980A0E68890E4BCA4E5AEB3E7949FE789A9E8B4A8E88EB7E58F96, false);
    TriggerEnable(libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E5909EE599ACE5AEBFE4B8BBE7949FE789A9E8B4A8E88EB7E58F96, false);
    TriggerEnable(libNEXS_gt_NiadraHeroLv2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraHeroLv1_Init () {
    libNEXS_gt_NiadraHeroLv1 = TriggerCreate("libNEXS_gt_NiadraHeroLv1_Func");
    TriggerEnable(libNEXS_gt_NiadraHeroLv1, false);
    TriggerAddEventUnitRegion(libNEXS_gt_NiadraHeroLv1, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Niadra Hero Lv2
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraHeroLv2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_niadraHeroLevel = 2;
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "NiadraHero2", 1);
    libNtve_gf_UnitAbilityRemoveChargeUsed(libCOMI_gv_yY_GPCasterUnit[libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16], "NiadraTopbarParasite", "(Abil/NiadraTopbarParasite)");
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libNEXS_gt_NiadraHeroLv3, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraHeroLv2_Init () {
    libNEXS_gt_NiadraHeroLv2 = TriggerCreate("libNEXS_gt_NiadraHeroLv2_Func");
    TriggerEnable(libNEXS_gt_NiadraHeroLv2, false);
    TriggerAddEventUnitAbility(libNEXS_gt_NiadraHeroLv2, null, AbilityCommand("MorphToNiadraHeroQueenLv2", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Niadra Hero Lv3
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraHeroLv3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_niadraHeroLevel = 3;
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "NiadraHero3", 1);
    libNtve_gf_UnitAbilityRemoveChargeUsed(libCOMI_gv_yY_GPCasterUnit[libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16], "NiadraTopbarParasite", "(Abil/NiadraTopbarParasite)");
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libNEXS_gt_NiadraHeroLv4, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraHeroLv3_Init () {
    libNEXS_gt_NiadraHeroLv3 = TriggerCreate("libNEXS_gt_NiadraHeroLv3_Func");
    TriggerEnable(libNEXS_gt_NiadraHeroLv3, false);
    TriggerAddEventUnitAbility(libNEXS_gt_NiadraHeroLv3, null, AbilityCommand("MorphToNiadraHeroQueenLv3", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Niadra Hero Lv4
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraHeroLv4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gv_niadraHeroLevel = 4;
    libNtve_gf_SetUpgradeLevelForPlayer(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "NiadraHero4", 1);
    libNtve_gf_UnitAbilityRemoveChargeUsed(libCOMI_gv_yY_GPCasterUnit[libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16], "NiadraTopbarParasite", "(Abil/NiadraTopbarParasite)");
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraHeroLv4_Init () {
    libNEXS_gt_NiadraHeroLv4 = TriggerCreate("libNEXS_gt_NiadraHeroLv4_Func");
    TriggerEnable(libNEXS_gt_NiadraHeroLv4, false);
    TriggerAddEventUnitAbility(libNEXS_gt_NiadraHeroLv4, null, AbilityCommand("MorphToNiadraHeroQueenLv4", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Niadra Hatchery Doomed
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraHatcheryDoomed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto51A20138_g;
    int auto51A20138_u;
    unit auto51A20138_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "NiadraHatchery"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_UpdateNiadraTopBar1Cooldown();
    auto51A20138_g = UnitGroup("NiadraParasiteDrone", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto51A20138_u = UnitGroupCount(auto51A20138_g, c_unitCountAll);
    for (;; auto51A20138_u -= 1) {
        auto51A20138_var = UnitGroupUnitFromEnd(auto51A20138_g, auto51A20138_u);
        if (auto51A20138_var == null) { break; }
        UnitKill(auto51A20138_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraHatcheryDoomed_Init () {
    libNEXS_gt_NiadraHatcheryDoomed = TriggerCreate("libNEXS_gt_NiadraHatcheryDoomed_Func");
    TriggerEnable(libNEXS_gt_NiadraHatcheryDoomed, false);
    TriggerAddEventUnitDied(libNEXS_gt_NiadraHatcheryDoomed, null);
    TriggerAddEventUnitChangeOwner(libNEXS_gt_NiadraHatcheryDoomed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Niadra Hatchery Finished
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NiadraHatcheryFinished_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitProgressUnit()) == libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUnitType() == "NiadraHatchery"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_UpdateNiadraTopBar1Cooldown();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NiadraHatcheryFinished_Init () {
    libNEXS_gt_NiadraHatcheryFinished = TriggerCreate("libNEXS_gt_NiadraHatcheryFinished_Func");
    TriggerEnable(libNEXS_gt_NiadraHatcheryFinished, false);
    TriggerAddEventUnitConstructProgress(libNEXS_gt_NiadraHatcheryFinished, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????????????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E6AF8DE888B0E5AF84E7949FE888B1E5AEA4E9A29DE5A496E88EB7E58F96_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_supply;
    unit lv_targetUnit;

    // Automatic Variable Declarations
    unitgroup auto2A18D645_g;
    int auto2A18D645_u;
    unit auto2A18D645_var;

    // Variable Initialization
    lv_targetUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "NiadraMothershipPustules") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_supply = UnitTypeGetProperty(UnitGetType(lv_targetUnit), c_unitPropSuppliesUsed);
    if (((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true) || (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true) || (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMapBoss) == true))) {
        lv_supply = 6.0;
    }

    lv_supply /= 2.0;
    if ((lv_supply < 1) && (lv_supply > 0.0)) {
        lv_supply = 1.0;
    }

    auto2A18D645_g = UnitGroup("NiadraMothership", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, RegionCircle(UnitGetPosition(EventUnit()), 50.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto2A18D645_u = UnitGroupCount(auto2A18D645_g, c_unitCountAll);
    for (;; auto2A18D645_u -= 1) {
        auto2A18D645_var = UnitGroupUnitFromEnd(auto2A18D645_g, auto2A18D645_u);
        if (auto2A18D645_var == null) { break; }
        UnitBehaviorAddPlayer(auto2A18D645_var, "NiadraMothershipParasiticCount", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, FixedToInt(lv_supply));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E6AF8DE888B0E5AF84E7949FE888B1E5AEA4E9A29DE5A496E88EB7E58F96_Init () {
    libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E6AF8DE888B0E5AF84E7949FE888B1E5AEA4E9A29DE5A496E88EB7E58F96 = TriggerCreate("libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E6AF8DE888B0E5AF84E7949FE888B1E5AEA4E9A29DE5A496E88EB7E58F96_Func");
    TriggerEnable(libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E6AF8DE888B0E5AF84E7949FE888B1E5AEA4E9A29DE5A496E88EB7E58F96, false);
    TriggerAddEventUnitDied(libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E6AF8DE888B0E5AF84E7949FE888B1E5AEA4E9A29DE5A496E88EB7E58F96, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B22_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D;
    point lv_e99A8FE69CBAE4BD8DE782B9;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_e99A8FE69CBAE4BD8DE782B9 = PointWithOffsetPolar(UnitGetPosition(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D), 1.0, libNtve_gf_RandomAngle());
    UnitIssueOrder(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D), -5.0, lv_e99A8FE69CBAE4BD8DE782B9)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    while ((UnitHasBehavior2(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D, "NiadraUrsadonRoarFear") == true) && (UnitIsAlive(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D) == true)) {
        UnitIssueOrder(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D), 3.0))), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    UnitIssueOrder(lv_e8A2ABE99C87E68591E79A84E58D95E4BD8D, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B22_Init () {
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B22 = TriggerCreate("libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B22_Func");
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B22, false);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B22, null, "NiadraUrsadonRoarFear", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B22, null, "NiadraUrsadonRoarFear", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B23_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;
    unit lv_casterUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_casterUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_E5B0BCE99B85E5BEB7E68B89E7868AE9BDBFE585BDE5909EE599ACE58AA8E4BD9C(lv_targetUnit, lv_casterUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B23_Init () {
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B23 = TriggerCreate("libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B23_Func");
    TriggerEnable(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B23, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B23, c_playerAny, "NiadraUrsadonDevourDeathAssure");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????????????????????
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E7868AE9BDBFE585BDE587BAE7949F_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1BA57E9F_g;
    int auto1BA57E9F_u;
    unit auto1BA57E9F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, "NiadraUrsadonCooldown", 1);
    Wait(0.0625, c_timeAI);
    auto1BA57E9F_g = UnitGroup("NiadraUrsadon", libNEXS_gv_e4BDBFE794A8E6B189E6A3AEE68C87E68CA5E5AE98E79A84E78EA9E5AEB6E79A84ID16, RegionCircle(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 50.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto1BA57E9F_u = UnitGroupCount(auto1BA57E9F_g, c_unitCountAll);
    for (;; auto1BA57E9F_u -= 1) {
        auto1BA57E9F_var = UnitGroupUnitFromEnd(auto1BA57E9F_g, auto1BA57E9F_u);
        if (auto1BA57E9F_var == null) { break; }
        libNEXS_gf_E5B0BCE99B85E5BEB7E68B89E7868AE9BDBFE585BDE695B0E580BCE8AEBEE7BDAE(0, auto1BA57E9F_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E7868AE9BDBFE585BDE587BAE7949F_Init () {
    libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E7868AE9BDBFE585BDE587BAE7949F = TriggerCreate("libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E7868AE9BDBFE585BDE587BAE7949F_Func");
    TriggerEnable(libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E7868AE9BDBFE585BDE587BAE7949F, false);
    TriggerAddEventPlayerEffectUsed(libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E7868AE9BDBFE585BDE587BAE7949F, c_playerAny, "NiadraTopbarUrsadonCreateUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops A
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CovertOpsA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libNEXS_gt_CovertOpsATimer, true, false);
    TriggerEnable(libNEXS_gt_CovertOpsBattlecruiserAbility, true);
    TriggerEnable(libNEXS_gt_CovertOpsGhostAbility1, true);
    TriggerEnable(libNEXS_gt_CovertOpsLiberatorAbility, true);
    TriggerEnable(libNEXS_gt_CovertOpsRavenAbility, true);
    TriggerEnable(libNEXS_gt_CovertOpsTankAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CovertOpsA_Init () {
    libNEXS_gt_CovertOpsA = TriggerCreate("libNEXS_gt_CovertOpsA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops B
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CovertOpsB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libNEXS_gt_CovertOpsBTimer, true, false);
    TriggerEnable(libNEXS_gt_CovertOpsBattlecruiserAbility, true);
    TriggerEnable(libNEXS_gt_CovertOpsLiberatorAbility, true);
    TriggerEnable(libNEXS_gt_CovertOpsRavenAbility, true);
    TriggerEnable(libNEXS_gt_CovertOpsTankAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CovertOpsB_Init () {
    libNEXS_gt_CovertOpsB = TriggerCreate("libNEXS_gt_CovertOpsB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops Battlecruiser Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CovertOpsBattlecruiserAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CovertOpsBattlecruiser"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_CovertOpsBattlecruiserAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CovertOpsBattlecruiserAbility_Init () {
    libNEXS_gt_CovertOpsBattlecruiserAbility = TriggerCreate("libNEXS_gt_CovertOpsBattlecruiserAbility_Func");
    TriggerEnable(libNEXS_gt_CovertOpsBattlecruiserAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_CovertOpsBattlecruiserAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops Ghost Ability1
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CovertOpsGhostAbility1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CovertOpsGhost"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_CovertOpsGhostAbility1(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CovertOpsGhostAbility1_Init () {
    libNEXS_gt_CovertOpsGhostAbility1 = TriggerCreate("libNEXS_gt_CovertOpsGhostAbility1_Func");
    TriggerEnable(libNEXS_gt_CovertOpsGhostAbility1, false);
    TriggerAddEventUnitRegion(libNEXS_gt_CovertOpsGhostAbility1, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops Ghost Ability2
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CovertOpsGhostAbility2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CovertOpsGhost"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_CovertOpsGhostAbility2(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CovertOpsGhostAbility2_Init () {
    libNEXS_gt_CovertOpsGhostAbility2 = TriggerCreate("libNEXS_gt_CovertOpsGhostAbility2_Func");
    TriggerEnable(libNEXS_gt_CovertOpsGhostAbility2, false);
    TriggerAddEventUnitRegion(libNEXS_gt_CovertOpsGhostAbility2, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops Ghost Ability3
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CovertOpsGhostAbility3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CovertOpsGhost"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_CovertOpsGhostAbility3(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CovertOpsGhostAbility3_Init () {
    libNEXS_gt_CovertOpsGhostAbility3 = TriggerCreate("libNEXS_gt_CovertOpsGhostAbility3_Func");
    TriggerEnable(libNEXS_gt_CovertOpsGhostAbility3, false);
    TriggerAddEventUnitRegion(libNEXS_gt_CovertOpsGhostAbility3, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops Liberator Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CovertOpsLiberatorAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CovertOpsLiberatorAA"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_CovertOpsLiberatorAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CovertOpsLiberatorAbility_Init () {
    libNEXS_gt_CovertOpsLiberatorAbility = TriggerCreate("libNEXS_gt_CovertOpsLiberatorAbility_Func");
    TriggerEnable(libNEXS_gt_CovertOpsLiberatorAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_CovertOpsLiberatorAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops Raven Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CovertOpsRavenAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CovertOpsRaven"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_CovertOpsRavenAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CovertOpsRavenAbility_Init () {
    libNEXS_gt_CovertOpsRavenAbility = TriggerCreate("libNEXS_gt_CovertOpsRavenAbility_Func");
    TriggerEnable(libNEXS_gt_CovertOpsRavenAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_CovertOpsRavenAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops Tank Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CovertOpsTankAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CovertOpsSiegeTank"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_CovertOpsTankAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CovertOpsTankAbility_Init () {
    libNEXS_gt_CovertOpsTankAbility = TriggerCreate("libNEXS_gt_CovertOpsTankAbility_Func");
    TriggerEnable(libNEXS_gt_CovertOpsTankAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_CovertOpsTankAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops 5min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CovertOps5minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_CovertOps5minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_CovertOps5minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "CovertOpsInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsVehicleAndShipWeaponsLevel1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CovertOps5minUpgrade_Init () {
    libNEXS_gt_CovertOps5minUpgrade = TriggerCreate("libNEXS_gt_CovertOps5minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_CovertOps5minUpgrade, libNEXS_gv_covertOps5minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CovertOps10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_CovertOps10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_CovertOps10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "CovertOpsInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsVehicleAndShipWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsVehicleAndShipWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsVehicleAndShipWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsVehicleAndShipWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsVehicleAndShipWeaponsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CovertOps10minUpgrade_Init () {
    libNEXS_gt_CovertOps10minUpgrade = TriggerCreate("libNEXS_gt_CovertOps10minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_CovertOps10minUpgrade, libNEXS_gv_covertOps10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CovertOps15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_CovertOps15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_CovertOps15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "CovertOpsInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsVehicleAndShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsVehicleAndShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsVehicleAndShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsVehicleAndShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsVehicleAndShipArmorsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CovertOps15minUpgrade_Init () {
    libNEXS_gt_CovertOps15minUpgrade = TriggerCreate("libNEXS_gt_CovertOps15minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_CovertOps15minUpgrade, libNEXS_gv_covertOps15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops 20min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CovertOps20minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_CovertOps20minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_CovertOps20minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "CovertOpsInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsVehicleAndShipWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsVehicleAndShipWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsVehicleAndShipWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsVehicleAndShipWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsVehicleAndShipWeaponsLevel3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CovertOps20minUpgrade_Init () {
    libNEXS_gt_CovertOps20minUpgrade = TriggerCreate("libNEXS_gt_CovertOps20minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_CovertOps20minUpgrade, libNEXS_gv_covertOps20minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops A Timer
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CovertOpsATimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_CovertOpsATimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_CovertOpsATimer, false);
    TimerStart(libNEXS_gv_covertOpsA8minTimer, 480.0, false, c_timeAI);
    TimerStart(libNEXS_gv_covertOpsA10minTimer, 600.0, false, c_timeAI);
    TimerStart(libNEXS_gv_covertOpsA15minTimer, 900.0, false, c_timeAI);
    TimerStart(libNEXS_gv_covertOps5minTimer, 300.0, false, c_timeAI);
    TimerStart(libNEXS_gv_covertOps10minTimer, 600.0, false, c_timeAI);
    TimerStart(libNEXS_gv_covertOps15minTimer, 900.0, false, c_timeAI);
    TimerStart(libNEXS_gv_covertOps20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CovertOpsATimer_Init () {
    libNEXS_gt_CovertOpsATimer = TriggerCreate("libNEXS_gt_CovertOpsATimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops A 8min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CovertOpsA8minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_CovertOpsA8minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_CovertOpsA8minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "CovertOpsMarauderPunisherGrenades", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsMarauderPunisherGrenades", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsMarauderPunisherGrenades", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsMarauderPunisherGrenades", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsMarauderPunisherGrenades", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsMarineSuperStimpack", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsMarineSuperStimpack", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsMarineSuperStimpack", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsMarineSuperStimpack", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsMarineSuperStimpack", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CovertOpsA8minUpgrade_Init () {
    libNEXS_gt_CovertOpsA8minUpgrade = TriggerCreate("libNEXS_gt_CovertOpsA8minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_CovertOpsA8minUpgrade, libNEXS_gv_covertOpsA8minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops A 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CovertOpsA10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_CovertOpsA10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_CovertOpsA10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "CovertOpsGhostDeathSnipe", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsGhostDeathSnipe", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsGhostDeathSnipe", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsGhostDeathSnipe", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsGhostDeathSnipe", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsGhostEMP", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsGhostEMP", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsGhostEMP", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsGhostEMP", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsGhostEMP", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsGoliathLockdownMissile", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsGoliathLockdownMissile", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsGoliathLockdownMissile", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsGoliathLockdownMissile", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsGoliathLockdownMissile", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsSiegeTankSiegeModeProgressiveRangeIncease", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsSiegeTankSiegeModeProgressiveRangeIncease", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsSiegeTankSiegeModeProgressiveRangeIncease", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsSiegeTankSiegeModeProgressiveRangeIncease", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsSiegeTankSiegeModeProgressiveRangeIncease", 1);
    TriggerEnable(libNEXS_gt_CovertOpsGhostAbility1, false);
    TriggerEnable(libNEXS_gt_CovertOpsGhostAbility2, true);
    libNEXS_gv_covertOpsTankRange += 5;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CovertOpsA10minUpgrade_Init () {
    libNEXS_gt_CovertOpsA10minUpgrade = TriggerCreate("libNEXS_gt_CovertOpsA10minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_CovertOpsA10minUpgrade, libNEXS_gv_covertOpsA10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops A 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CovertOpsA15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_CovertOpsA15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_CovertOpsA15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "CovertOpsLiberatorMultiTaskMAFServos", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsLiberatorMultiTaskMAFServos", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsLiberatorMultiTaskMAFServos", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsLiberatorMultiTaskMAFServos", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsLiberatorMultiTaskMAFServos", 1);
    TriggerEnable(libNEXS_gt_CovertOpsGhostAbility2, false);
    TriggerEnable(libNEXS_gt_CovertOpsGhostAbility3, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CovertOpsA15minUpgrade_Init () {
    libNEXS_gt_CovertOpsA15minUpgrade = TriggerCreate("libNEXS_gt_CovertOpsA15minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_CovertOpsA15minUpgrade, libNEXS_gv_covertOpsA15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops B Timer
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CovertOpsBTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_CovertOpsBTimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_CovertOpsBTimer, false);
    TimerStart(libNEXS_gv_covertOpsB8minTimer, 480.0, false, c_timeAI);
    TimerStart(libNEXS_gv_covertOpsB10minTimer, 600.0, false, c_timeAI);
    TimerStart(libNEXS_gv_covertOpsB15minTimer, 900.0, false, c_timeAI);
    TimerStart(libNEXS_gv_covertOps5minTimer, 300.0, false, c_timeAI);
    TimerStart(libNEXS_gv_covertOps10minTimer, 600.0, false, c_timeAI);
    TimerStart(libNEXS_gv_covertOps15minTimer, 900.0, false, c_timeAI);
    TimerStart(libNEXS_gv_covertOps20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CovertOpsBTimer_Init () {
    libNEXS_gt_CovertOpsBTimer = TriggerCreate("libNEXS_gt_CovertOpsBTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops B 8min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CovertOpsB8minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_CovertOpsB8minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_CovertOpsB8minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "CovertOpsMarauderPunisherGrenades", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsMarauderPunisherGrenades", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsMarauderPunisherGrenades", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsMarauderPunisherGrenades", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsMarauderPunisherGrenades", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsMarineSuperStimpack", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsMarineSuperStimpack", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsMarineSuperStimpack", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsMarineSuperStimpack", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsMarineSuperStimpack", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CovertOpsB8minUpgrade_Init () {
    libNEXS_gt_CovertOpsB8minUpgrade = TriggerCreate("libNEXS_gt_CovertOpsB8minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_CovertOpsB8minUpgrade, libNEXS_gv_covertOpsB8minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops B 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CovertOpsB10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_CovertOpsB10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_CovertOpsB10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "CovertOpsGoliathLockdownMissile", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsGoliathLockdownMissile", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsGoliathLockdownMissile", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsGoliathLockdownMissile", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsGoliathLockdownMissile", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsSiegeTankSiegeModeProgressiveRangeIncease", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsSiegeTankSiegeModeProgressiveRangeIncease", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsSiegeTankSiegeModeProgressiveRangeIncease", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsSiegeTankSiegeModeProgressiveRangeIncease", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsSiegeTankSiegeModeProgressiveRangeIncease", 1);
    libNEXS_gv_covertOpsTankRange += 5;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CovertOpsB10minUpgrade_Init () {
    libNEXS_gt_CovertOpsB10minUpgrade = TriggerCreate("libNEXS_gt_CovertOpsB10minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_CovertOpsB10minUpgrade, libNEXS_gv_covertOpsB10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Covert Ops B 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_CovertOpsB15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_CovertOpsB15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_CovertOpsB15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "CovertOpsLiberatorMultiTaskMAFServos", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsLiberatorMultiTaskMAFServos", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsLiberatorMultiTaskMAFServos", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsLiberatorMultiTaskMAFServos", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsLiberatorMultiTaskMAFServos", 1);
    TechTreeUpgradeAddLevel(3, "CovertOpsBansheeAirstrike", 1);
    TechTreeUpgradeAddLevel(4, "CovertOpsBansheeAirstrike", 1);
    TechTreeUpgradeAddLevel(5, "CovertOpsBansheeAirstrike", 1);
    TechTreeUpgradeAddLevel(6, "CovertOpsBansheeAirstrike", 1);
    TechTreeUpgradeAddLevel(7, "CovertOpsBansheeAirstrike", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_CovertOpsB15minUpgrade_Init () {
    libNEXS_gt_CovertOpsB15minUpgrade = TriggerCreate("libNEXS_gt_CovertOpsB15minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_CovertOpsB15minUpgrade, libNEXS_gv_covertOpsB15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius A
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_MobiusA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libNEXS_gt_MobiusATimer, true, false);
    TriggerEnable(libNEXS_gt_MobiusRavenAbility, true);
    TriggerEnable(libNEXS_gt_MobiusThorAbility, true);
    TriggerEnable(libNEXS_gt_UnitsAttack, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_MobiusA_Init () {
    libNEXS_gt_MobiusA = TriggerCreate("libNEXS_gt_MobiusA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius B
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_MobiusB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libNEXS_gt_MobiusBTimer, true, false);
    TriggerEnable(libNEXS_gt_MobiusBansheeAbility, true);
    TriggerEnable(libNEXS_gt_MobiusBattlecruiserAbility, true);
    TriggerEnable(libNEXS_gt_MobiusRavenAbility, true);
    TriggerEnable(libNEXS_gt_MobiusVikingAbility, true);
    TriggerEnable(libNEXS_gt_MobiusVultureAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_MobiusB_Init () {
    libNEXS_gt_MobiusB = TriggerCreate("libNEXS_gt_MobiusB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius Banshee Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_MobiusBansheeAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MobiusBanshee"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_MobiusBansheeAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_MobiusBansheeAbility_Init () {
    libNEXS_gt_MobiusBansheeAbility = TriggerCreate("libNEXS_gt_MobiusBansheeAbility_Func");
    TriggerEnable(libNEXS_gt_MobiusBansheeAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_MobiusBansheeAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius Battlecruiser Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_MobiusBattlecruiserAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MobiusBattlecruiser"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_MobiusBattlecruiserAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_MobiusBattlecruiserAbility_Init () {
    libNEXS_gt_MobiusBattlecruiserAbility = TriggerCreate("libNEXS_gt_MobiusBattlecruiserAbility_Func");
    TriggerEnable(libNEXS_gt_MobiusBattlecruiserAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_MobiusBattlecruiserAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius Marauder Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_MobiusMarauderAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MobiusMarauder"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_MobiusMarauderAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_MobiusMarauderAbility_Init () {
    libNEXS_gt_MobiusMarauderAbility = TriggerCreate("libNEXS_gt_MobiusMarauderAbility_Func");
    TriggerEnable(libNEXS_gt_MobiusMarauderAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_MobiusMarauderAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius Medic Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_MobiusMedicAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MobiusMedic"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_MobiusMedicAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_MobiusMedicAbility_Init () {
    libNEXS_gt_MobiusMedicAbility = TriggerCreate("libNEXS_gt_MobiusMedicAbility_Func");
    TriggerEnable(libNEXS_gt_MobiusMedicAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_MobiusMedicAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius Raven Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_MobiusRavenAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MobiusRaven"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_MobiusRavenAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_MobiusRavenAbility_Init () {
    libNEXS_gt_MobiusRavenAbility = TriggerCreate("libNEXS_gt_MobiusRavenAbility_Func");
    TriggerEnable(libNEXS_gt_MobiusRavenAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_MobiusRavenAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius Spectre Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_MobiusSpectreAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MobiusSpectre"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_MobiusSpectreAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_MobiusSpectreAbility_Init () {
    libNEXS_gt_MobiusSpectreAbility = TriggerCreate("libNEXS_gt_MobiusSpectreAbility_Func");
    TriggerEnable(libNEXS_gt_MobiusSpectreAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_MobiusSpectreAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius Spectre II Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_MobiusSpectreIIAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SpectreII"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_MobiusSpectreIIAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_MobiusSpectreIIAbility_Init () {
    libNEXS_gt_MobiusSpectreIIAbility = TriggerCreate("libNEXS_gt_MobiusSpectreIIAbility_Func");
    TriggerEnable(libNEXS_gt_MobiusSpectreIIAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_MobiusSpectreIIAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius Thor Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_MobiusThorAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MobiusThor"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_MobiusThorAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_MobiusThorAbility_Init () {
    libNEXS_gt_MobiusThorAbility = TriggerCreate("libNEXS_gt_MobiusThorAbility_Func");
    TriggerEnable(libNEXS_gt_MobiusThorAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_MobiusThorAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius Viking Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_MobiusVikingAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MobiusVikingFighter"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_MobiusVikingAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_MobiusVikingAbility_Init () {
    libNEXS_gt_MobiusVikingAbility = TriggerCreate("libNEXS_gt_MobiusVikingAbility_Func");
    TriggerEnable(libNEXS_gt_MobiusVikingAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_MobiusVikingAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius Vulture Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_MobiusVultureAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MobiusVulture"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_MobiusVultureAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_MobiusVultureAbility_Init () {
    libNEXS_gt_MobiusVultureAbility = TriggerCreate("libNEXS_gt_MobiusVultureAbility_Func");
    TriggerEnable(libNEXS_gt_MobiusVultureAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_MobiusVultureAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius 5min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Mobius5minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_Mobius5minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_Mobius5minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MobiusInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "MobiusInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "MobiusInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "MobiusInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "MobiusInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "MobiusInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "MobiusInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "MobiusInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "MobiusInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "MobiusInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "MobiusVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "MobiusVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "MobiusVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "MobiusVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "MobiusVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "MobiusVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "MobiusVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "MobiusVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "MobiusVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "MobiusVehicleAndShipWeaponsLevel1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Mobius5minUpgrade_Init () {
    libNEXS_gt_Mobius5minUpgrade = TriggerCreate("libNEXS_gt_Mobius5minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_Mobius5minUpgrade, libNEXS_gv_mobius5minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Mobius10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_Mobius10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_Mobius10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MobiusInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "MobiusInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "MobiusInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "MobiusInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "MobiusInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "MobiusVehicleAndShipWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "MobiusVehicleAndShipWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "MobiusVehicleAndShipWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "MobiusVehicleAndShipWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "MobiusVehicleAndShipWeaponsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Mobius10minUpgrade_Init () {
    libNEXS_gt_Mobius10minUpgrade = TriggerCreate("libNEXS_gt_Mobius10minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_Mobius10minUpgrade, libNEXS_gv_mobius10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Mobius15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_Mobius15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_Mobius15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MobiusInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "MobiusInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "MobiusInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "MobiusInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "MobiusInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "MobiusVehicleAndShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "MobiusVehicleAndShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "MobiusVehicleAndShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "MobiusVehicleAndShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "MobiusVehicleAndShipArmorsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Mobius15minUpgrade_Init () {
    libNEXS_gt_Mobius15minUpgrade = TriggerCreate("libNEXS_gt_Mobius15minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_Mobius15minUpgrade, libNEXS_gv_mobius15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius 20min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Mobius20minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_Mobius20minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_Mobius20minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MobiusInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "MobiusInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "MobiusInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "MobiusInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "MobiusInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "MobiusInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "MobiusInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "MobiusInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "MobiusInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "MobiusInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "MobiusVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "MobiusVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "MobiusVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "MobiusVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "MobiusVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "MobiusVehicleAndShipWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "MobiusVehicleAndShipWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "MobiusVehicleAndShipWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "MobiusVehicleAndShipWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "MobiusVehicleAndShipWeaponsLevel3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Mobius20minUpgrade_Init () {
    libNEXS_gt_Mobius20minUpgrade = TriggerCreate("libNEXS_gt_Mobius20minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_Mobius20minUpgrade, libNEXS_gv_mobius20minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius A Timer
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_MobiusATimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_MobiusATimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_MobiusATimer, false);
    TimerStart(libNEXS_gv_mobiusA8minTimer, 480.0, false, c_timeAI);
    TimerStart(libNEXS_gv_mobiusA10minTimer, 600.0, false, c_timeAI);
    TimerStart(libNEXS_gv_mobius5minTimer, 300.0, false, c_timeAI);
    TimerStart(libNEXS_gv_mobius10minTimer, 600.0, false, c_timeAI);
    TimerStart(libNEXS_gv_mobius15minTimer, 900.0, false, c_timeAI);
    TimerStart(libNEXS_gv_mobius20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_MobiusATimer_Init () {
    libNEXS_gt_MobiusATimer = TriggerCreate("libNEXS_gt_MobiusATimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius A 8min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_MobiusA8minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_MobiusA8minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_MobiusA8minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MobiusMarauderStimpack", 1);
    TechTreeUpgradeAddLevel(4, "MobiusMarauderStimpack", 1);
    TechTreeUpgradeAddLevel(5, "MobiusMarauderStimpack", 1);
    TechTreeUpgradeAddLevel(6, "MobiusMarauderStimpack", 1);
    TechTreeUpgradeAddLevel(7, "MobiusMarauderStimpack", 1);
    TriggerEnable(libNEXS_gt_MobiusMarauderAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_MobiusA8minUpgrade_Init () {
    libNEXS_gt_MobiusA8minUpgrade = TriggerCreate("libNEXS_gt_MobiusA8minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_MobiusA8minUpgrade, libNEXS_gv_mobiusA8minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius A 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_MobiusA10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_MobiusA10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_MobiusA10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MobiusDiamondbackTriLithiumPowerCells", 1);
    TechTreeUpgradeAddLevel(4, "MobiusDiamondbackTriLithiumPowerCells", 1);
    TechTreeUpgradeAddLevel(5, "MobiusDiamondbackTriLithiumPowerCells", 1);
    TechTreeUpgradeAddLevel(6, "MobiusDiamondbackTriLithiumPowerCells", 1);
    TechTreeUpgradeAddLevel(7, "MobiusDiamondbackTriLithiumPowerCells", 1);
    TechTreeUpgradeAddLevel(3, "MobiusSpectreIIUltrasonicPulse", 1);
    TechTreeUpgradeAddLevel(4, "MobiusSpectreIIUltrasonicPulse", 1);
    TechTreeUpgradeAddLevel(5, "MobiusSpectreIIUltrasonicPulse", 1);
    TechTreeUpgradeAddLevel(6, "MobiusSpectreIIUltrasonicPulse", 1);
    TechTreeUpgradeAddLevel(7, "MobiusSpectreIIUltrasonicPulse", 1);
    TechTreeUpgradeAddLevel(3, "MobiusSpectreIIEnergyArmor", 1);
    TechTreeUpgradeAddLevel(4, "MobiusSpectreIIEnergyArmor", 1);
    TechTreeUpgradeAddLevel(5, "MobiusSpectreIIEnergyArmor", 1);
    TechTreeUpgradeAddLevel(6, "MobiusSpectreIIEnergyArmor", 1);
    TechTreeUpgradeAddLevel(7, "MobiusSpectreIIEnergyArmor", 1);
    TechTreeUpgradeAddLevel(3, "MobiusWarpInReinforcements", 1);
    TechTreeUpgradeAddLevel(4, "MobiusWarpInReinforcements", 1);
    TechTreeUpgradeAddLevel(5, "MobiusWarpInReinforcements", 1);
    TechTreeUpgradeAddLevel(6, "MobiusWarpInReinforcements", 1);
    TechTreeUpgradeAddLevel(7, "MobiusWarpInReinforcements", 1);
    TechTreeUpgradeAddLevel(3, "MobiusSpectreCloak", 1);
    TechTreeUpgradeAddLevel(4, "MobiusSpectreCloak", 1);
    TechTreeUpgradeAddLevel(5, "MobiusSpectreCloak", 1);
    TechTreeUpgradeAddLevel(6, "MobiusSpectreCloak", 1);
    TechTreeUpgradeAddLevel(7, "MobiusSpectreCloak", 1);
    TriggerEnable(libNEXS_gt_MobiusSpectreIIAbility, true);
    TriggerEnable(libNEXS_gt_MobiusMedicAbility, true);
    TriggerEnable(libNEXS_gt_UnitsAttack, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_MobiusA10minUpgrade_Init () {
    libNEXS_gt_MobiusA10minUpgrade = TriggerCreate("libNEXS_gt_MobiusA10minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_MobiusA10minUpgrade, libNEXS_gv_mobiusA10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius B Timer
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_MobiusBTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_MobiusBTimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_MobiusBTimer, false);
    TimerStart(libNEXS_gv_mobiusB8minTimer, 480.0, false, c_timeAI);
    TimerStart(libNEXS_gv_mobiusB10minTimer, 600.0, false, c_timeAI);
    TimerStart(libNEXS_gv_mobius5minTimer, 300.0, false, c_timeAI);
    TimerStart(libNEXS_gv_mobius10minTimer, 600.0, false, c_timeAI);
    TimerStart(libNEXS_gv_mobius15minTimer, 900.0, false, c_timeAI);
    TimerStart(libNEXS_gv_mobius20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_MobiusBTimer_Init () {
    libNEXS_gt_MobiusBTimer = TriggerCreate("libNEXS_gt_MobiusBTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius B 8min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_MobiusB8minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_MobiusB8minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_MobiusB8minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MobiusHunterJoriumArmor", 1);
    TechTreeUpgradeAddLevel(4, "MobiusHunterJoriumArmor", 1);
    TechTreeUpgradeAddLevel(5, "MobiusHunterJoriumArmor", 1);
    TechTreeUpgradeAddLevel(6, "MobiusHunterJoriumArmor", 1);
    TechTreeUpgradeAddLevel(7, "MobiusHunterJoriumArmor", 1);
    TechTreeUpgradeAddLevel(3, "MobiusPredatorRobotClawsRetributionStrike", 1);
    TechTreeUpgradeAddLevel(4, "MobiusPredatorRobotClawsRetributionStrike", 1);
    TechTreeUpgradeAddLevel(5, "MobiusPredatorRobotClawsRetributionStrike", 1);
    TechTreeUpgradeAddLevel(6, "MobiusPredatorRobotClawsRetributionStrike", 1);
    TechTreeUpgradeAddLevel(7, "MobiusPredatorRobotClawsRetributionStrike", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_MobiusB8minUpgrade_Init () {
    libNEXS_gt_MobiusB8minUpgrade = TriggerCreate("libNEXS_gt_MobiusB8minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_MobiusB8minUpgrade, libNEXS_gv_mobiusB8minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobius B 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_MobiusB10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_MobiusB10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_MobiusB10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MobiusSpectreIIUltrasonicPulse", 1);
    TechTreeUpgradeAddLevel(4, "MobiusSpectreIIUltrasonicPulse", 1);
    TechTreeUpgradeAddLevel(5, "MobiusSpectreIIUltrasonicPulse", 1);
    TechTreeUpgradeAddLevel(6, "MobiusSpectreIIUltrasonicPulse", 1);
    TechTreeUpgradeAddLevel(7, "MobiusSpectreIIUltrasonicPulse", 1);
    TechTreeUpgradeAddLevel(3, "MobiusSpectreCloak", 1);
    TechTreeUpgradeAddLevel(4, "MobiusSpectreCloak", 1);
    TechTreeUpgradeAddLevel(5, "MobiusSpectreCloak", 1);
    TechTreeUpgradeAddLevel(6, "MobiusSpectreCloak", 1);
    TechTreeUpgradeAddLevel(7, "MobiusSpectreCloak", 1);
    TriggerEnable(libNEXS_gt_MobiusSpectreAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_MobiusB10minUpgrade_Init () {
    libNEXS_gt_MobiusB10minUpgrade = TriggerCreate("libNEXS_gt_MobiusB10minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_MobiusB10minUpgrade, libNEXS_gv_mobiusB10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim A
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NerazimA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libNEXS_gt_NerazimATimer, true, false);
    TriggerEnable(libNEXS_gt_NerazimDarkArchonAbility1, true);
    TriggerEnable(libNEXS_gt_NerazimImmortalAbility, true);
    TriggerEnable(libNEXS_gt_NerazimStalkerAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NerazimA_Init () {
    libNEXS_gt_NerazimA = TriggerCreate("libNEXS_gt_NerazimA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim B
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NerazimB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libNEXS_gt_NerazimBTimer, true, false);
    TriggerEnable(libNEXS_gt_NerazimHTAbility, true);
    TriggerEnable(libNEXS_gt_NerazimImmortalAbility, true);
    TriggerEnable(libNEXS_gt_NerazimStalkerAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NerazimB_Init () {
    libNEXS_gt_NerazimB = TriggerCreate("libNEXS_gt_NerazimB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim C
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NerazimC_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libNEXS_gt_NerazimCTimer, true, false);
    TriggerEnable(libNEXS_gt_NerazimStalkerAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NerazimC_Init () {
    libNEXS_gt_NerazimC = TriggerCreate("libNEXS_gt_NerazimC_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim Corsair Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NerazimCorsairAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NerazimCorsair"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_NerazimCorsairAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NerazimCorsairAbility_Init () {
    libNEXS_gt_NerazimCorsairAbility = TriggerCreate("libNEXS_gt_NerazimCorsairAbility_Func");
    TriggerEnable(libNEXS_gt_NerazimCorsairAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_NerazimCorsairAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim Dark Archon Ability1
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NerazimDarkArchonAbility1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NerazimDarkArchon"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_NerazimDarkArchonAbility1(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NerazimDarkArchonAbility1_Init () {
    libNEXS_gt_NerazimDarkArchonAbility1 = TriggerCreate("libNEXS_gt_NerazimDarkArchonAbility1_Func");
    TriggerEnable(libNEXS_gt_NerazimDarkArchonAbility1, false);
    TriggerAddEventUnitRegion(libNEXS_gt_NerazimDarkArchonAbility1, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim Dark Archon Ability2
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NerazimDarkArchonAbility2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NerazimDarkArchon"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_NerazimDarkArchonAbility2(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NerazimDarkArchonAbility2_Init () {
    libNEXS_gt_NerazimDarkArchonAbility2 = TriggerCreate("libNEXS_gt_NerazimDarkArchonAbility2_Func");
    TriggerEnable(libNEXS_gt_NerazimDarkArchonAbility2, false);
    TriggerAddEventUnitRegion(libNEXS_gt_NerazimDarkArchonAbility2, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim DT Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NerazimDTAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NerazimShadowTemplar"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_NerazimDTAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NerazimDTAbility_Init () {
    libNEXS_gt_NerazimDTAbility = TriggerCreate("libNEXS_gt_NerazimDTAbility_Func");
    TriggerEnable(libNEXS_gt_NerazimDTAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_NerazimDTAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim HT Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NerazimHTAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NerazimHighTemplar"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_NerazimHTAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NerazimHTAbility_Init () {
    libNEXS_gt_NerazimHTAbility = TriggerCreate("libNEXS_gt_NerazimHTAbility_Func");
    TriggerEnable(libNEXS_gt_NerazimHTAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_NerazimHTAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim Immortal Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NerazimImmortalAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NerazimImmortal"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_NerazimImmortalAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NerazimImmortalAbility_Init () {
    libNEXS_gt_NerazimImmortalAbility = TriggerCreate("libNEXS_gt_NerazimImmortalAbility_Func");
    TriggerEnable(libNEXS_gt_NerazimImmortalAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_NerazimImmortalAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim Stalker Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NerazimStalkerAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NerazimStalker"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_NerazimStalkerAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NerazimStalkerAbility_Init () {
    libNEXS_gt_NerazimStalkerAbility = TriggerCreate("libNEXS_gt_NerazimStalkerAbility_Func");
    TriggerEnable(libNEXS_gt_NerazimStalkerAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_NerazimStalkerAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim 5min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Nerazim5minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_Nerazim5minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_Nerazim5minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NerazimGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "NerazimGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "NerazimGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "NerazimGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "NerazimGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "NerazimGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "NerazimGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "NerazimGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "NerazimGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "NerazimGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "NerazimShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "NerazimShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "NerazimShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "NerazimShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "NerazimShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "NerazimAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "NerazimAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "NerazimAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "NerazimAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "NerazimAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "NerazimAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "NerazimAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "NerazimAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "NerazimAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "NerazimAirWeaponsLevel1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Nerazim5minUpgrade_Init () {
    libNEXS_gt_Nerazim5minUpgrade = TriggerCreate("libNEXS_gt_Nerazim5minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_Nerazim5minUpgrade, libNEXS_gv_nerazim5minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Nerazim10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_Nerazim10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_Nerazim10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NerazimGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "NerazimGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "NerazimGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "NerazimGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "NerazimGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "NerazimAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "NerazimAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "NerazimAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "NerazimAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "NerazimAirWeaponsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Nerazim10minUpgrade_Init () {
    libNEXS_gt_Nerazim10minUpgrade = TriggerCreate("libNEXS_gt_Nerazim10minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_Nerazim10minUpgrade, libNEXS_gv_nerazim10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Nerazim15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_Nerazim15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_Nerazim15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NerazimGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "NerazimGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "NerazimGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "NerazimGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "NerazimGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "NerazimShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "NerazimShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "NerazimShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "NerazimShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "NerazimShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "NerazimAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "NerazimAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "NerazimAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "NerazimAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "NerazimAirArmorsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Nerazim15minUpgrade_Init () {
    libNEXS_gt_Nerazim15minUpgrade = TriggerCreate("libNEXS_gt_Nerazim15minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_Nerazim15minUpgrade, libNEXS_gv_nerazim15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim 20min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Nerazim20minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_Nerazim20minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_Nerazim20minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NerazimGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "NerazimGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "NerazimGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "NerazimGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "NerazimGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "NerazimGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "NerazimGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "NerazimGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "NerazimGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "NerazimGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "NerazimShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "NerazimShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "NerazimShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "NerazimShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "NerazimShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "NerazimAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "NerazimAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "NerazimAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "NerazimAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "NerazimAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "NerazimAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "NerazimAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "NerazimAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "NerazimAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "NerazimAirWeaponsLevel3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Nerazim20minUpgrade_Init () {
    libNEXS_gt_Nerazim20minUpgrade = TriggerCreate("libNEXS_gt_Nerazim20minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_Nerazim20minUpgrade, libNEXS_gv_nerazim20minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim A Timer
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NerazimATimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_NerazimATimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_NerazimATimer, false);
    TimerStart(libNEXS_gv_nerazimA8minTimer, 480.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nerazimA10minTimer, 600.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nerazimA15minTimer, 900.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nerazim5minTimer, 300.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nerazim10minTimer, 600.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nerazim15minTimer, 900.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nerazim20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NerazimATimer_Init () {
    libNEXS_gt_NerazimATimer = TriggerCreate("libNEXS_gt_NerazimATimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim A 8min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NerazimA8minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_NerazimA8minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_NerazimA8minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NerazimZealotShadowCharge", 1);
    TechTreeUpgradeAddLevel(4, "NerazimZealotShadowCharge", 1);
    TechTreeUpgradeAddLevel(5, "NerazimZealotShadowCharge", 1);
    TechTreeUpgradeAddLevel(6, "NerazimZealotShadowCharge", 1);
    TechTreeUpgradeAddLevel(7, "NerazimZealotShadowCharge", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NerazimA8minUpgrade_Init () {
    libNEXS_gt_NerazimA8minUpgrade = TriggerCreate("libNEXS_gt_NerazimA8minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_NerazimA8minUpgrade, libNEXS_gv_nerazimA8minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim A 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NerazimA10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_NerazimA10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_NerazimA10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NerazimShadowTemplarBlink", 1);
    TechTreeUpgradeAddLevel(4, "NerazimShadowTemplarBlink", 1);
    TechTreeUpgradeAddLevel(5, "NerazimShadowTemplarBlink", 1);
    TechTreeUpgradeAddLevel(6, "NerazimShadowTemplarBlink", 1);
    TechTreeUpgradeAddLevel(7, "NerazimShadowTemplarBlink", 1);
    TechTreeUpgradeAddLevel(3, "NerazimStalkerCloak", 1);
    TechTreeUpgradeAddLevel(4, "NerazimStalkerCloak", 1);
    TechTreeUpgradeAddLevel(5, "NerazimStalkerCloak", 1);
    TechTreeUpgradeAddLevel(6, "NerazimStalkerCloak", 1);
    TechTreeUpgradeAddLevel(7, "NerazimStalkerCloak", 1);
    TriggerEnable(libNEXS_gt_NerazimDTAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NerazimA10minUpgrade_Init () {
    libNEXS_gt_NerazimA10minUpgrade = TriggerCreate("libNEXS_gt_NerazimA10minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_NerazimA10minUpgrade, libNEXS_gv_nerazimA10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim A 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NerazimA15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_NerazimA15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_NerazimA15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NerazimDarkArchonMindControl", 1);
    TechTreeUpgradeAddLevel(4, "NerazimDarkArchonMindControl", 1);
    TechTreeUpgradeAddLevel(5, "NerazimDarkArchonMindControl", 1);
    TechTreeUpgradeAddLevel(6, "NerazimDarkArchonMindControl", 1);
    TechTreeUpgradeAddLevel(7, "NerazimDarkArchonMindControl", 1);
    TechTreeUpgradeAddLevel(3, "NerazimColossusIceThermalLance", 1);
    TechTreeUpgradeAddLevel(4, "NerazimColossusIceThermalLance", 1);
    TechTreeUpgradeAddLevel(5, "NerazimColossusIceThermalLance", 1);
    TechTreeUpgradeAddLevel(6, "NerazimColossusIceThermalLance", 1);
    TechTreeUpgradeAddLevel(7, "NerazimColossusIceThermalLance", 1);
    TechTreeUpgradeAddLevel(3, "NerazimImmortalBlinkHallucination", 1);
    TechTreeUpgradeAddLevel(4, "NerazimImmortalBlinkHallucination", 1);
    TechTreeUpgradeAddLevel(5, "NerazimImmortalBlinkHallucination", 1);
    TechTreeUpgradeAddLevel(6, "NerazimImmortalBlinkHallucination", 1);
    TechTreeUpgradeAddLevel(7, "NerazimImmortalBlinkHallucination", 1);
    TriggerEnable(libNEXS_gt_NerazimDarkArchonAbility1, false);
    TriggerEnable(libNEXS_gt_NerazimDarkArchonAbility2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NerazimA15minUpgrade_Init () {
    libNEXS_gt_NerazimA15minUpgrade = TriggerCreate("libNEXS_gt_NerazimA15minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_NerazimA15minUpgrade, libNEXS_gv_nerazimA15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim B Timer
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NerazimBTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_NerazimBTimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_NerazimBTimer, false);
    TimerStart(libNEXS_gv_nerazimB8minTimer, 480.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nerazimB10minTimer, 600.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nerazimB15minTimer, 900.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nerazim5minTimer, 300.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nerazim10minTimer, 600.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nerazim15minTimer, 900.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nerazim20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NerazimBTimer_Init () {
    libNEXS_gt_NerazimBTimer = TriggerCreate("libNEXS_gt_NerazimBTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim B 8min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NerazimB8minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_NerazimB8minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_NerazimB8minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NerazimZealotShadowCharge", 1);
    TechTreeUpgradeAddLevel(4, "NerazimZealotShadowCharge", 1);
    TechTreeUpgradeAddLevel(5, "NerazimZealotShadowCharge", 1);
    TechTreeUpgradeAddLevel(6, "NerazimZealotShadowCharge", 1);
    TechTreeUpgradeAddLevel(7, "NerazimZealotShadowCharge", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NerazimB8minUpgrade_Init () {
    libNEXS_gt_NerazimB8minUpgrade = TriggerCreate("libNEXS_gt_NerazimB8minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_NerazimB8minUpgrade, libNEXS_gv_nerazimB8minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim B 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NerazimB10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_NerazimB10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_NerazimB10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NerazimShadowTemplarBlink", 1);
    TechTreeUpgradeAddLevel(4, "NerazimShadowTemplarBlink", 1);
    TechTreeUpgradeAddLevel(5, "NerazimShadowTemplarBlink", 1);
    TechTreeUpgradeAddLevel(6, "NerazimShadowTemplarBlink", 1);
    TechTreeUpgradeAddLevel(7, "NerazimShadowTemplarBlink", 1);
    TechTreeUpgradeAddLevel(3, "NerazimStalkerCloak", 1);
    TechTreeUpgradeAddLevel(4, "NerazimStalkerCloak", 1);
    TechTreeUpgradeAddLevel(5, "NerazimStalkerCloak", 1);
    TechTreeUpgradeAddLevel(6, "NerazimStalkerCloak", 1);
    TechTreeUpgradeAddLevel(7, "NerazimStalkerCloak", 1);
    TriggerEnable(libNEXS_gt_NerazimDTAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NerazimB10minUpgrade_Init () {
    libNEXS_gt_NerazimB10minUpgrade = TriggerCreate("libNEXS_gt_NerazimB10minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_NerazimB10minUpgrade, libNEXS_gv_nerazimB10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim B 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NerazimB15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_NerazimB15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_NerazimB15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NerazimColossusIceThermalLance", 1);
    TechTreeUpgradeAddLevel(4, "NerazimColossusIceThermalLance", 1);
    TechTreeUpgradeAddLevel(5, "NerazimColossusIceThermalLance", 1);
    TechTreeUpgradeAddLevel(6, "NerazimColossusIceThermalLance", 1);
    TechTreeUpgradeAddLevel(7, "NerazimColossusIceThermalLance", 1);
    TechTreeUpgradeAddLevel(3, "NerazimImmortalBlinkHallucination", 1);
    TechTreeUpgradeAddLevel(4, "NerazimImmortalBlinkHallucination", 1);
    TechTreeUpgradeAddLevel(5, "NerazimImmortalBlinkHallucination", 1);
    TechTreeUpgradeAddLevel(6, "NerazimImmortalBlinkHallucination", 1);
    TechTreeUpgradeAddLevel(7, "NerazimImmortalBlinkHallucination", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NerazimB15minUpgrade_Init () {
    libNEXS_gt_NerazimB15minUpgrade = TriggerCreate("libNEXS_gt_NerazimB15minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_NerazimB15minUpgrade, libNEXS_gv_nerazimB15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim C Timer
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NerazimCTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_NerazimCTimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_NerazimCTimer, false);
    TimerStart(libNEXS_gv_nerazimC8minTimer, 480.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nerazimC10minTimer, 600.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nerazimC15minTimer, 900.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nerazim5minTimer, 300.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nerazim10minTimer, 600.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nerazim15minTimer, 900.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nerazim20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NerazimCTimer_Init () {
    libNEXS_gt_NerazimCTimer = TriggerCreate("libNEXS_gt_NerazimCTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim C 8min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NerazimC8minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_NerazimC8minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_NerazimC8minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NerazimZealotShadowCharge", 1);
    TechTreeUpgradeAddLevel(4, "NerazimZealotShadowCharge", 1);
    TechTreeUpgradeAddLevel(5, "NerazimZealotShadowCharge", 1);
    TechTreeUpgradeAddLevel(6, "NerazimZealotShadowCharge", 1);
    TechTreeUpgradeAddLevel(7, "NerazimZealotShadowCharge", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NerazimC8minUpgrade_Init () {
    libNEXS_gt_NerazimC8minUpgrade = TriggerCreate("libNEXS_gt_NerazimC8minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_NerazimC8minUpgrade, libNEXS_gv_nerazimC8minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim C 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NerazimC10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_NerazimC10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_NerazimC10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NerazimStalkerCloak", 1);
    TechTreeUpgradeAddLevel(4, "NerazimStalkerCloak", 1);
    TechTreeUpgradeAddLevel(5, "NerazimStalkerCloak", 1);
    TechTreeUpgradeAddLevel(6, "NerazimStalkerCloak", 1);
    TechTreeUpgradeAddLevel(7, "NerazimStalkerCloak", 1);
    TechTreeUpgradeAddLevel(3, "NerazimOracleCloak", 1);
    TechTreeUpgradeAddLevel(4, "NerazimOracleCloak", 1);
    TechTreeUpgradeAddLevel(5, "NerazimOracleCloak", 1);
    TechTreeUpgradeAddLevel(6, "NerazimOracleCloak", 1);
    TechTreeUpgradeAddLevel(7, "NerazimOracleCloak", 1);
    TechTreeUpgradeAddLevel(3, "NerazimCorsairDisruptionWeb", 1);
    TechTreeUpgradeAddLevel(4, "NerazimCorsairDisruptionWeb", 1);
    TechTreeUpgradeAddLevel(5, "NerazimCorsairDisruptionWeb", 1);
    TechTreeUpgradeAddLevel(6, "NerazimCorsairDisruptionWeb", 1);
    TechTreeUpgradeAddLevel(7, "NerazimCorsairDisruptionWeb", 1);
    TriggerEnable(libNEXS_gt_NerazimCorsairAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NerazimC10minUpgrade_Init () {
    libNEXS_gt_NerazimC10minUpgrade = TriggerCreate("libNEXS_gt_NerazimC10minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_NerazimC10minUpgrade, libNEXS_gv_nerazimC10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nerazim C 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NerazimC15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_NerazimC15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_NerazimC15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NerazimCorsairEnergy", 1);
    TechTreeUpgradeAddLevel(4, "NerazimCorsairEnergy", 1);
    TechTreeUpgradeAddLevel(5, "NerazimCorsairEnergy", 1);
    TechTreeUpgradeAddLevel(6, "NerazimCorsairEnergy", 1);
    TechTreeUpgradeAddLevel(7, "NerazimCorsairEnergy", 1);
    TechTreeUpgradeAddLevel(3, "NerazimVoidRaySpeedUpgrade", 1);
    TechTreeUpgradeAddLevel(4, "NerazimVoidRaySpeedUpgrade", 1);
    TechTreeUpgradeAddLevel(5, "NerazimVoidRaySpeedUpgrade", 1);
    TechTreeUpgradeAddLevel(6, "NerazimVoidRaySpeedUpgrade", 1);
    TechTreeUpgradeAddLevel(7, "NerazimVoidRaySpeedUpgrade", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NerazimC15minUpgrade_Init () {
    libNEXS_gt_NerazimC15minUpgrade = TriggerCreate("libNEXS_gt_NerazimC15minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_NerazimC15minUpgrade, libNEXS_gv_nerazimC15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest A
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NestA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libNEXS_gt_NestATimer, true, false);
    TriggerEnable(libNEXS_gt_NestDefilerAbility1, true);
    TriggerEnable(libNEXS_gt_NestLurkerAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NestA_Init () {
    libNEXS_gt_NestA = TriggerCreate("libNEXS_gt_NestA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest B
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NestB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libNEXS_gt_NestBTimer, true, false);
    TriggerEnable(libNEXS_gt_NestQueenAbility1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NestB_Init () {
    libNEXS_gt_NestB = TriggerCreate("libNEXS_gt_NestB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest Defiler Ability1
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NestDefilerAbility1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_alliedGroup;
    int lv_alliedCount;
    point lv_targetPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_alliedGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NestDefiler"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_NestDefilerAbility1(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NestDefilerAbility1_Init () {
    libNEXS_gt_NestDefilerAbility1 = TriggerCreate("libNEXS_gt_NestDefilerAbility1_Func");
    TriggerEnable(libNEXS_gt_NestDefilerAbility1, false);
    TriggerAddEventUnitRegion(libNEXS_gt_NestDefilerAbility1, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest Defiler Ability2
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NestDefilerAbility2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NestDefiler"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_NestDefilerAbility2(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NestDefilerAbility2_Init () {
    libNEXS_gt_NestDefilerAbility2 = TriggerCreate("libNEXS_gt_NestDefilerAbility2_Func");
    TriggerEnable(libNEXS_gt_NestDefilerAbility2, false);
    TriggerAddEventUnitRegion(libNEXS_gt_NestDefilerAbility2, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest Lurker Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NestLurkerAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NestLurker"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_NestLurkerAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NestLurkerAbility_Init () {
    libNEXS_gt_NestLurkerAbility = TriggerCreate("libNEXS_gt_NestLurkerAbility_Func");
    TriggerEnable(libNEXS_gt_NestLurkerAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_NestLurkerAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest Queen Ability1
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NestQueenAbility1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NestQueen"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_NestQueenAbility1(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NestQueenAbility1_Init () {
    libNEXS_gt_NestQueenAbility1 = TriggerCreate("libNEXS_gt_NestQueenAbility1_Func");
    TriggerEnable(libNEXS_gt_NestQueenAbility1, false);
    TriggerAddEventUnitRegion(libNEXS_gt_NestQueenAbility1, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest Queen Ability2
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NestQueenAbility2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NestQueen"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_NestQueenAbility2(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NestQueenAbility2_Init () {
    libNEXS_gt_NestQueenAbility2 = TriggerCreate("libNEXS_gt_NestQueenAbility2_Func");
    TriggerEnable(libNEXS_gt_NestQueenAbility2, false);
    TriggerAddEventUnitRegion(libNEXS_gt_NestQueenAbility2, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest 5min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Nest5minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_Nest5minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_Nest5minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NestGroundCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(4, "NestGroundCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(5, "NestGroundCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(6, "NestGroundCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(7, "NestGroundCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(3, "NestMeleeWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "NestMeleeWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "NestMeleeWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "NestMeleeWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "NestMeleeWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "NestFlyerCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(4, "NestFlyerCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(5, "NestFlyerCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(6, "NestFlyerCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(7, "NestFlyerCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(3, "NestAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "NestAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "NestAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "NestAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "NestAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "NestMissileWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "NestMissileWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "NestMissileWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "NestMissileWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "NestMissileWeaponsLevel1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Nest5minUpgrade_Init () {
    libNEXS_gt_Nest5minUpgrade = TriggerCreate("libNEXS_gt_Nest5minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_Nest5minUpgrade, libNEXS_gv_nest5minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Nest10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_Nest10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_Nest10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NestMeleeWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "NestMeleeWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "NestMeleeWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "NestMeleeWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "NestMeleeWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "NestAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "NestAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "NestAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "NestAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "NestAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "NestMissileWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "NestMissileWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "NestMissileWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "NestMissileWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "NestMissileWeaponsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Nest10minUpgrade_Init () {
    libNEXS_gt_Nest10minUpgrade = TriggerCreate("libNEXS_gt_Nest10minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_Nest10minUpgrade, libNEXS_gv_nest10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Nest15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_Nest15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_Nest15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NestGroundCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(4, "NestGroundCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(5, "NestGroundCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(6, "NestGroundCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(7, "NestGroundCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(3, "NestFlyerCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(4, "NestFlyerCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(5, "NestFlyerCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(6, "NestFlyerCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(7, "NestFlyerCarapacesLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Nest15minUpgrade_Init () {
    libNEXS_gt_Nest15minUpgrade = TriggerCreate("libNEXS_gt_Nest15minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_Nest15minUpgrade, libNEXS_gv_nest15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest 20min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Nest20minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_Nest20minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_Nest20minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NestGroundCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(4, "NestGroundCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(5, "NestGroundCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(6, "NestGroundCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(7, "NestGroundCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(3, "NestMeleeWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "NestMeleeWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "NestMeleeWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "NestMeleeWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "NestMeleeWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "NestFlyerCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(4, "NestFlyerCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(5, "NestFlyerCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(6, "NestFlyerCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(7, "NestFlyerCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(3, "NestAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "NestAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "NestAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "NestAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "NestAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "NestMissileWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "NestMissileWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "NestMissileWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "NestMissileWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "NestMissileWeaponsLevel3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Nest20minUpgrade_Init () {
    libNEXS_gt_Nest20minUpgrade = TriggerCreate("libNEXS_gt_Nest20minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_Nest20minUpgrade, libNEXS_gv_nest20minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest A Timer
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NestATimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_NestATimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_NestATimer, false);
    TimerStart(libNEXS_gv_nestA8minTimer, 480.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nestA10minTimer, 600.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nestA15minTimer, 900.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nest5minTimer, 300.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nest10minTimer, 600.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nest15minTimer, 900.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nest20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NestATimer_Init () {
    libNEXS_gt_NestATimer = TriggerCreate("libNEXS_gt_NestATimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest A 8min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NestA8minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_NestA8minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_NestA8minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NestHydraliskSpeed", 1);
    TechTreeUpgradeAddLevel(4, "NestHydraliskSpeed", 1);
    TechTreeUpgradeAddLevel(5, "NestHydraliskSpeed", 1);
    TechTreeUpgradeAddLevel(6, "NestHydraliskSpeed", 1);
    TechTreeUpgradeAddLevel(7, "NestHydraliskSpeed", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NestA8minUpgrade_Init () {
    libNEXS_gt_NestA8minUpgrade = TriggerCreate("libNEXS_gt_NestA8minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_NestA8minUpgrade, libNEXS_gv_nestA8minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest A 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NestA10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_NestA10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_NestA10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NestHydraliskAttackRange", 1);
    TechTreeUpgradeAddLevel(4, "NestHydraliskAttackRange", 1);
    TechTreeUpgradeAddLevel(5, "NestHydraliskAttackRange", 1);
    TechTreeUpgradeAddLevel(6, "NestHydraliskAttackRange", 1);
    TechTreeUpgradeAddLevel(7, "NestHydraliskAttackRange", 1);
    TechTreeUpgradeAddLevel(3, "NestScourgeVirulentSpores", 1);
    TechTreeUpgradeAddLevel(4, "NestScourgeVirulentSpores", 1);
    TechTreeUpgradeAddLevel(5, "NestScourgeVirulentSpores", 1);
    TechTreeUpgradeAddLevel(6, "NestScourgeVirulentSpores", 1);
    TechTreeUpgradeAddLevel(7, "NestScourgeVirulentSpores", 1);
    TechTreeUpgradeAddLevel(3, "NestDefilerEnergy", 1);
    TechTreeUpgradeAddLevel(4, "NestDefilerEnergy", 1);
    TechTreeUpgradeAddLevel(5, "NestDefilerEnergy", 1);
    TechTreeUpgradeAddLevel(6, "NestDefilerEnergy", 1);
    TechTreeUpgradeAddLevel(7, "NestDefilerEnergy", 1);
    TechTreeUpgradeAddLevel(3, "NestLurkerBurrowSpeed", 1);
    TechTreeUpgradeAddLevel(4, "NestLurkerBurrowSpeed", 1);
    TechTreeUpgradeAddLevel(5, "NestLurkerBurrowSpeed", 1);
    TechTreeUpgradeAddLevel(6, "NestLurkerBurrowSpeed", 1);
    TechTreeUpgradeAddLevel(7, "NestLurkerBurrowSpeed", 1);
    TechTreeUpgradeAddLevel(3, "NestMutaliskViciousGlaive", 1);
    TechTreeUpgradeAddLevel(4, "NestMutaliskViciousGlaive", 1);
    TechTreeUpgradeAddLevel(5, "NestMutaliskViciousGlaive", 1);
    TechTreeUpgradeAddLevel(6, "NestMutaliskViciousGlaive", 1);
    TechTreeUpgradeAddLevel(7, "NestMutaliskViciousGlaive", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NestA10minUpgrade_Init () {
    libNEXS_gt_NestA10minUpgrade = TriggerCreate("libNEXS_gt_NestA10minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_NestA10minUpgrade, libNEXS_gv_nestA10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest A 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NestA15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_NestA15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_NestA15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NestZerglingAdrenalGlands", 1);
    TechTreeUpgradeAddLevel(4, "NestZerglingAdrenalGlands", 1);
    TechTreeUpgradeAddLevel(5, "NestZerglingAdrenalGlands", 1);
    TechTreeUpgradeAddLevel(6, "NestZerglingAdrenalGlands", 1);
    TechTreeUpgradeAddLevel(7, "NestZerglingAdrenalGlands", 1);
    TechTreeUpgradeAddLevel(3, "NestDefilerPlague", 1);
    TechTreeUpgradeAddLevel(4, "NestDefilerPlague", 1);
    TechTreeUpgradeAddLevel(5, "NestDefilerPlague", 1);
    TechTreeUpgradeAddLevel(6, "NestDefilerPlague", 1);
    TechTreeUpgradeAddLevel(7, "NestDefilerPlague", 1);
    TechTreeUpgradeAddLevel(3, "NestLurkerSeismicSpines", 1);
    TechTreeUpgradeAddLevel(4, "NestLurkerSeismicSpines", 1);
    TechTreeUpgradeAddLevel(5, "NestLurkerSeismicSpines", 1);
    TechTreeUpgradeAddLevel(6, "NestLurkerSeismicSpines", 1);
    TechTreeUpgradeAddLevel(7, "NestLurkerSeismicSpines", 1);
    TechTreeUpgradeAddLevel(3, "NestUltraliskArmorAura", 1);
    TechTreeUpgradeAddLevel(4, "NestUltraliskArmorAura", 1);
    TechTreeUpgradeAddLevel(5, "NestUltraliskArmorAura", 1);
    TechTreeUpgradeAddLevel(6, "NestUltraliskArmorAura", 1);
    TechTreeUpgradeAddLevel(7, "NestUltraliskArmorAura", 1);
    TechTreeUpgradeAddLevel(3, "NestMutaliskRapidRegeneration", 1);
    TechTreeUpgradeAddLevel(4, "NestMutaliskRapidRegeneration", 1);
    TechTreeUpgradeAddLevel(5, "NestMutaliskRapidRegeneration", 1);
    TechTreeUpgradeAddLevel(6, "NestMutaliskRapidRegeneration", 1);
    TechTreeUpgradeAddLevel(7, "NestMutaliskRapidRegeneration", 1);
    libNEXS_gv_nestLurkerSearchArea += 2;
    TriggerEnable(libNEXS_gt_NestDefilerAbility1, false);
    TriggerEnable(libNEXS_gt_NestDefilerAbility2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NestA15minUpgrade_Init () {
    libNEXS_gt_NestA15minUpgrade = TriggerCreate("libNEXS_gt_NestA15minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_NestA15minUpgrade, libNEXS_gv_nestA15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest B Timer
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NestBTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_NestBTimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_NestBTimer, false);
    TimerStart(libNEXS_gv_nestB10minTimer, 600.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nestB15minTimer, 900.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nest5minTimer, 300.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nest10minTimer, 600.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nest15minTimer, 900.0, false, c_timeAI);
    TimerStart(libNEXS_gv_nest20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NestBTimer_Init () {
    libNEXS_gt_NestBTimer = TriggerCreate("libNEXS_gt_NestBTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest B 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NestB10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_NestB10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_NestB10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NestScourgeVirulentSpores", 1);
    TechTreeUpgradeAddLevel(4, "NestScourgeVirulentSpores", 1);
    TechTreeUpgradeAddLevel(5, "NestScourgeVirulentSpores", 1);
    TechTreeUpgradeAddLevel(6, "NestScourgeVirulentSpores", 1);
    TechTreeUpgradeAddLevel(7, "NestScourgeVirulentSpores", 1);
    TechTreeUpgradeAddLevel(3, "NestMutaliskViciousGlaive", 1);
    TechTreeUpgradeAddLevel(4, "NestMutaliskViciousGlaive", 1);
    TechTreeUpgradeAddLevel(5, "NestMutaliskViciousGlaive", 1);
    TechTreeUpgradeAddLevel(6, "NestMutaliskViciousGlaive", 1);
    TechTreeUpgradeAddLevel(7, "NestMutaliskViciousGlaive", 1);
    TechTreeUpgradeAddLevel(3, "NestQueenEnergy", 1);
    TechTreeUpgradeAddLevel(4, "NestQueenEnergy", 1);
    TechTreeUpgradeAddLevel(5, "NestQueenEnergy", 1);
    TechTreeUpgradeAddLevel(6, "NestQueenEnergy", 1);
    TechTreeUpgradeAddLevel(7, "NestQueenEnergy", 1);
    TechTreeUpgradeAddLevel(3, "NestDevourerMembranes", 1);
    TechTreeUpgradeAddLevel(4, "NestDevourerMembranes", 1);
    TechTreeUpgradeAddLevel(5, "NestDevourerMembranes", 1);
    TechTreeUpgradeAddLevel(6, "NestDevourerMembranes", 1);
    TechTreeUpgradeAddLevel(7, "NestDevourerMembranes", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NestB10minUpgrade_Init () {
    libNEXS_gt_NestB10minUpgrade = TriggerCreate("libNEXS_gt_NestB10minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_NestB10minUpgrade, libNEXS_gv_nestB10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nest B 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_NestB15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_NestB15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_NestB15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "NestZerglingAdrenalGlands", 1);
    TechTreeUpgradeAddLevel(4, "NestZerglingAdrenalGlands", 1);
    TechTreeUpgradeAddLevel(5, "NestZerglingAdrenalGlands", 1);
    TechTreeUpgradeAddLevel(6, "NestZerglingAdrenalGlands", 1);
    TechTreeUpgradeAddLevel(7, "NestZerglingAdrenalGlands", 1);
    TechTreeUpgradeAddLevel(3, "NestMutaliskRapidRegeneration", 1);
    TechTreeUpgradeAddLevel(4, "NestMutaliskRapidRegeneration", 1);
    TechTreeUpgradeAddLevel(5, "NestMutaliskRapidRegeneration", 1);
    TechTreeUpgradeAddLevel(6, "NestMutaliskRapidRegeneration", 1);
    TechTreeUpgradeAddLevel(7, "NestMutaliskRapidRegeneration", 1);
    TechTreeUpgradeAddLevel(3, "NestQueenBlastKill", 1);
    TechTreeUpgradeAddLevel(4, "NestQueenBlastKill", 1);
    TechTreeUpgradeAddLevel(5, "NestQueenBlastKill", 1);
    TechTreeUpgradeAddLevel(6, "NestQueenBlastKill", 1);
    TechTreeUpgradeAddLevel(7, "NestQueenBlastKill", 1);
    TechTreeUpgradeAddLevel(3, "NestDevourerImprovedOsmosis", 1);
    TechTreeUpgradeAddLevel(4, "NestDevourerImprovedOsmosis", 1);
    TechTreeUpgradeAddLevel(5, "NestDevourerImprovedOsmosis", 1);
    TechTreeUpgradeAddLevel(6, "NestDevourerImprovedOsmosis", 1);
    TechTreeUpgradeAddLevel(7, "NestDevourerImprovedOsmosis", 1);
    TechTreeUpgradeAddLevel(3, "NestGuardianDotDamage", 1);
    TechTreeUpgradeAddLevel(4, "NestGuardianDotDamage", 1);
    TechTreeUpgradeAddLevel(5, "NestGuardianDotDamage", 1);
    TechTreeUpgradeAddLevel(6, "NestGuardianDotDamage", 1);
    TechTreeUpgradeAddLevel(7, "NestGuardianDotDamage", 1);
    TriggerEnable(libNEXS_gt_NestQueenAbility1, false);
    TriggerEnable(libNEXS_gt_NestQueenAbility2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_NestB15minUpgrade_Init () {
    libNEXS_gt_NestB15minUpgrade = TriggerCreate("libNEXS_gt_NestB15minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_NestB15minUpgrade, libNEXS_gv_nestB15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim A
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_TaldarimA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libNEXS_gt_TaldarimATimer, true, false);
    TriggerEnable(libNEXS_gt_TaldarimStalkerAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_TaldarimA_Init () {
    libNEXS_gt_TaldarimA = TriggerCreate("libNEXS_gt_TaldarimA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim B
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_TaldarimB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libNEXS_gt_TaldarimBTimer, true, false);
    TriggerEnable(libNEXS_gt_TaldarimHTAbility1, true);
    TriggerEnable(libNEXS_gt_TaldarimSentryAbility, true);
    TriggerEnable(libNEXS_gt_TaldarimStalkerAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_TaldarimB_Init () {
    libNEXS_gt_TaldarimB = TriggerCreate("libNEXS_gt_TaldarimB_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim HT Ability1
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_TaldarimHTAbility1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TaldarimHighTemplar"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_TaldarimHTAbility1(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_TaldarimHTAbility1_Init () {
    libNEXS_gt_TaldarimHTAbility1 = TriggerCreate("libNEXS_gt_TaldarimHTAbility1_Func");
    TriggerEnable(libNEXS_gt_TaldarimHTAbility1, false);
    TriggerAddEventUnitRegion(libNEXS_gt_TaldarimHTAbility1, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim HT Ability2
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_TaldarimHTAbility2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TaldarimHighTemplar"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_TaldarimHTAbility2(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_TaldarimHTAbility2_Init () {
    libNEXS_gt_TaldarimHTAbility2 = TriggerCreate("libNEXS_gt_TaldarimHTAbility2_Func");
    TriggerEnable(libNEXS_gt_TaldarimHTAbility2, false);
    TriggerAddEventUnitRegion(libNEXS_gt_TaldarimHTAbility2, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim Mothership Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_TaldarimMothershipAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TaldarimMothership"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_TaldarimMothershipAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_TaldarimMothershipAbility_Init () {
    libNEXS_gt_TaldarimMothershipAbility = TriggerCreate("libNEXS_gt_TaldarimMothershipAbility_Func");
    TriggerEnable(libNEXS_gt_TaldarimMothershipAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_TaldarimMothershipAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim Mothership Core Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_TaldarimMothershipCoreAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TaldarimMothershipCore"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_TaldarimMothershipCoreAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_TaldarimMothershipCoreAbility_Init () {
    libNEXS_gt_TaldarimMothershipCoreAbility = TriggerCreate("libNEXS_gt_TaldarimMothershipCoreAbility_Func");
    TriggerEnable(libNEXS_gt_TaldarimMothershipCoreAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_TaldarimMothershipCoreAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim Sentry Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_TaldarimSentryAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TaldarimSentry"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_TaldarimSentryAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_TaldarimSentryAbility_Init () {
    libNEXS_gt_TaldarimSentryAbility = TriggerCreate("libNEXS_gt_TaldarimSentryAbility_Func");
    TriggerEnable(libNEXS_gt_TaldarimSentryAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_TaldarimSentryAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim Stalker Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_TaldarimStalkerAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TaldarimStalker"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_TaldarimStalkerAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_TaldarimStalkerAbility_Init () {
    libNEXS_gt_TaldarimStalkerAbility = TriggerCreate("libNEXS_gt_TaldarimStalkerAbility_Func");
    TriggerEnable(libNEXS_gt_TaldarimStalkerAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_TaldarimStalkerAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim Zealot Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_TaldarimZealotAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TaldarimZealot"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_TaldarimZealotAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_TaldarimZealotAbility_Init () {
    libNEXS_gt_TaldarimZealotAbility = TriggerCreate("libNEXS_gt_TaldarimZealotAbility_Func");
    TriggerEnable(libNEXS_gt_TaldarimZealotAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_TaldarimZealotAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim 5min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Taldarim5minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_Taldarim5minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_Taldarim5minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "TaldarimGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimAirWeaponsLevel1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Taldarim5minUpgrade_Init () {
    libNEXS_gt_Taldarim5minUpgrade = TriggerCreate("libNEXS_gt_Taldarim5minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_Taldarim5minUpgrade, libNEXS_gv_taldarim5minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Taldarim10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_Taldarim10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_Taldarim10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "TaldarimGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimAirWeaponsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Taldarim10minUpgrade_Init () {
    libNEXS_gt_Taldarim10minUpgrade = TriggerCreate("libNEXS_gt_Taldarim10minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_Taldarim10minUpgrade, libNEXS_gv_taldarim10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Taldarim15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_Taldarim15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_Taldarim15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "TaldarimGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimAirArmorsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Taldarim15minUpgrade_Init () {
    libNEXS_gt_Taldarim15minUpgrade = TriggerCreate("libNEXS_gt_Taldarim15minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_Taldarim15minUpgrade, libNEXS_gv_taldarim15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim 20min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Taldarim20minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_Taldarim20minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_Taldarim20minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "TaldarimGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimAirWeaponsLevel3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Taldarim20minUpgrade_Init () {
    libNEXS_gt_Taldarim20minUpgrade = TriggerCreate("libNEXS_gt_Taldarim20minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_Taldarim20minUpgrade, libNEXS_gv_taldarim20minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim A Timer
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_TaldarimATimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_TaldarimATimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_TaldarimATimer, false);
    TimerStart(libNEXS_gv_taldarimA8minTimer, 480.0, false, c_timeAI);
    TimerStart(libNEXS_gv_taldarimA15minTimer, 900.0, false, c_timeAI);
    TimerStart(libNEXS_gv_taldarim5minTimer, 300.0, false, c_timeAI);
    TimerStart(libNEXS_gv_taldarim10minTimer, 600.0, false, c_timeAI);
    TimerStart(libNEXS_gv_taldarim15minTimer, 900.0, false, c_timeAI);
    TimerStart(libNEXS_gv_taldarim20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_TaldarimATimer_Init () {
    libNEXS_gt_TaldarimATimer = TriggerCreate("libNEXS_gt_TaldarimATimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim A 8min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_TaldarimA8minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_TaldarimA8minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_TaldarimA8minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "TaldarimZealotShockwave", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimZealotShockwave", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimZealotShockwave", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimZealotShockwave", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimZealotShockwave", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimScoutWeaponRange", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimScoutWeaponRange", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimScoutWeaponRange", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimScoutWeaponRange", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimScoutWeaponRange", 1);
    TriggerEnable(libNEXS_gt_TaldarimZealotAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_TaldarimA8minUpgrade_Init () {
    libNEXS_gt_TaldarimA8minUpgrade = TriggerCreate("libNEXS_gt_TaldarimA8minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_TaldarimA8minUpgrade, libNEXS_gv_taldarimA8minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim A 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_TaldarimA15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_TaldarimA15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_TaldarimA15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "TaldarimStalkerPhasingArmor", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimStalkerPhasingArmor", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimStalkerPhasingArmor", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimStalkerPhasingArmor", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimStalkerPhasingArmor", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimMothershipTemporalField", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimMothershipTemporalField", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimMothershipTemporalField", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimMothershipTemporalField", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimMothershipTemporalField", 1);
    TriggerEnable(libNEXS_gt_TaldarimMothershipCoreAbility, true);
    TriggerEnable(libNEXS_gt_TaldarimMothershipAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_TaldarimA15minUpgrade_Init () {
    libNEXS_gt_TaldarimA15minUpgrade = TriggerCreate("libNEXS_gt_TaldarimA15minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_TaldarimA15minUpgrade, libNEXS_gv_taldarimA15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim B Timer
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_TaldarimBTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_TaldarimBTimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_TaldarimBTimer, false);
    TimerStart(libNEXS_gv_taldarimB8minTimer, 480.0, false, c_timeAI);
    TimerStart(libNEXS_gv_taldarimB10minTimer, 600.0, false, c_timeAI);
    TimerStart(libNEXS_gv_taldarimB15minTimer, 900.0, false, c_timeAI);
    TimerStart(libNEXS_gv_taldarimB20minTimer, 1200.0, false, c_timeAI);
    TimerStart(libNEXS_gv_taldarimB25minTimer, 1500.0, false, c_timeAI);
    TimerStart(libNEXS_gv_taldarimB30minTimer, 1800.0, false, c_timeAI);
    TimerStart(libNEXS_gv_taldarimB35minTimer, 2100.0, false, c_timeAI);
    TimerStart(libNEXS_gv_taldarim5minTimer, 300.0, false, c_timeAI);
    TimerStart(libNEXS_gv_taldarim10minTimer, 600.0, false, c_timeAI);
    TimerStart(libNEXS_gv_taldarim15minTimer, 900.0, false, c_timeAI);
    TimerStart(libNEXS_gv_taldarim20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_TaldarimBTimer_Init () {
    libNEXS_gt_TaldarimBTimer = TriggerCreate("libNEXS_gt_TaldarimBTimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim B 8min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_TaldarimB8minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_TaldarimB8minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_TaldarimB8minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "TaldarimZealotShockwave", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimZealotShockwave", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimZealotShockwave", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimZealotShockwave", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimZealotShockwave", 1);
    TriggerEnable(libNEXS_gt_TaldarimZealotAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_TaldarimB8minUpgrade_Init () {
    libNEXS_gt_TaldarimB8minUpgrade = TriggerCreate("libNEXS_gt_TaldarimB8minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_TaldarimB8minUpgrade, libNEXS_gv_taldarimB8minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim B 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_TaldarimB10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_TaldarimB10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_TaldarimB10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "TaldarimSentrySquadSight", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimSentrySquadSight", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimSentrySquadSight", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimSentrySquadSight", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimSentrySquadSight", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimHighTemplarMindBlast", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimHighTemplarMindBlast", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimHighTemplarMindBlast", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimHighTemplarMindBlast", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimHighTemplarMindBlast", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimHighTemplarDamageUpgrade1", 1);
    TriggerEnable(libNEXS_gt_TaldarimHTAbility1, false);
    TriggerEnable(libNEXS_gt_TaldarimHTAbility2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_TaldarimB10minUpgrade_Init () {
    libNEXS_gt_TaldarimB10minUpgrade = TriggerCreate("libNEXS_gt_TaldarimB10minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_TaldarimB10minUpgrade, libNEXS_gv_taldarimB10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim B 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_TaldarimB15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_TaldarimB15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_TaldarimB15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "TaldarimStalkerPhasingArmor", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimStalkerPhasingArmor", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimStalkerPhasingArmor", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimStalkerPhasingArmor", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimStalkerPhasingArmor", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimHighTemplarEmpower", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimHighTemplarEmpower", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimHighTemplarEmpower", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimHighTemplarEmpower", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimHighTemplarEmpower", 1);
    TechTreeUpgradeAddLevel(3, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimHighTemplarDamageUpgrade1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_TaldarimB15minUpgrade_Init () {
    libNEXS_gt_TaldarimB15minUpgrade = TriggerCreate("libNEXS_gt_TaldarimB15minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_TaldarimB15minUpgrade, libNEXS_gv_taldarimB15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim B 20min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_TaldarimB20minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_TaldarimB20minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_TaldarimB20minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimHighTemplarDamageUpgrade1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_TaldarimB20minUpgrade_Init () {
    libNEXS_gt_TaldarimB20minUpgrade = TriggerCreate("libNEXS_gt_TaldarimB20minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_TaldarimB20minUpgrade, libNEXS_gv_taldarimB20minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim B 25min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_TaldarimB25minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_TaldarimB25minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_TaldarimB25minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimHighTemplarDamageUpgrade1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_TaldarimB25minUpgrade_Init () {
    libNEXS_gt_TaldarimB25minUpgrade = TriggerCreate("libNEXS_gt_TaldarimB25minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_TaldarimB25minUpgrade, libNEXS_gv_taldarimB25minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim B 30min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_TaldarimB30minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_TaldarimB30minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_TaldarimB30minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimHighTemplarDamageUpgrade1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_TaldarimB30minUpgrade_Init () {
    libNEXS_gt_TaldarimB30minUpgrade = TriggerCreate("libNEXS_gt_TaldarimB30minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_TaldarimB30minUpgrade, libNEXS_gv_taldarimB30minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Taldarim B 35min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_TaldarimB35minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_TaldarimB35minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_TaldarimB35minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(4, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(5, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(6, "TaldarimHighTemplarDamageUpgrade1", 1);
    TechTreeUpgradeAddLevel(7, "TaldarimHighTemplarDamageUpgrade1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_TaldarimB35minUpgrade_Init () {
    libNEXS_gt_TaldarimB35minUpgrade = TriggerCreate("libNEXS_gt_TaldarimB35minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_TaldarimB35minUpgrade, libNEXS_gv_taldarimB35minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KelMorian A
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_KelMorianA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libNEXS_gt_KelMorianATimer, true, false);
    TriggerEnable(libNEXS_gt_KelMorianAPCAbility, true);
    TriggerEnable(libNEXS_gt_KelMorianNukeTrackAbility, true);
    TriggerEnable(libNEXS_gt_KelMorianRavenAbility, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_KelMorianA_Init () {
    libNEXS_gt_KelMorianA = TriggerCreate("libNEXS_gt_KelMorianA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KelMorian B
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_KelMorianB_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_randomPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameAttributeGameValue("[bnet:Nexus Coop Data Basis/0.0/310318,file:Mods\\Nexus Coop Dependency Basis.SC2Mod]1") != "0002") && (GameIsOnline() == true)) {
        Wait(RandomInt(30, 60), c_timeGame);
        do {
            lv_randomPoint = RegionRandomPoint(RegionCircle(Point(20.0, 20.0), 1.0));
            TriggerExecute(libNEXS_gt_KelMorianB, false, false);
            TriggerExecute(libNEXS_gt_KelMorianB, false, false);
        }while ((RegionContainsPoint(RegionRect(0.0, 0.0, 1.0, 1.0), lv_randomPoint) == false));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DukeCoopCaster", 0, 1, lv_randomPoint);
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_KelMorianB_Init () {
    libNEXS_gt_KelMorianB = TriggerCreate("libNEXS_gt_KelMorianB_Func");
    TriggerAddEventUnitDamaged(libNEXS_gt_KelMorianB, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KelMorian APC Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_KelMorianAPCAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "KelMorianColonistTransport"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_KelMorianAPCAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_KelMorianAPCAbility_Init () {
    libNEXS_gt_KelMorianAPCAbility = TriggerCreate("libNEXS_gt_KelMorianAPCAbility_Func");
    TriggerEnable(libNEXS_gt_KelMorianAPCAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_KelMorianAPCAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KelMorian Raven Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_KelMorianRavenAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "KelMorianRaven"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_KelMorianRavenAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_KelMorianRavenAbility_Init () {
    libNEXS_gt_KelMorianRavenAbility = TriggerCreate("libNEXS_gt_KelMorianRavenAbility_Func");
    TriggerEnable(libNEXS_gt_KelMorianRavenAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_KelMorianRavenAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KelMorian NukeTrack Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_KelMorianNukeTrackAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "KelMorianTRUCK"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_KelMorianNukeTrackAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_KelMorianNukeTrackAbility_Init () {
    libNEXS_gt_KelMorianNukeTrackAbility = TriggerCreate("libNEXS_gt_KelMorianNukeTrackAbility_Func");
    TriggerEnable(libNEXS_gt_KelMorianNukeTrackAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_KelMorianNukeTrackAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KelMorian 5min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_KelMorian5minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_KelMorian5minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_KelMorian5minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "KelMorianInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianInfantryArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "KelMorianInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "KelMorianVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianVehicleAndShipArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "KelMorianVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianVehicleAndShipWeaponsLevel1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_KelMorian5minUpgrade_Init () {
    libNEXS_gt_KelMorian5minUpgrade = TriggerCreate("libNEXS_gt_KelMorian5minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_KelMorian5minUpgrade, libNEXS_gv_kelMorian5minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KelMorian 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_KelMorian10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_KelMorian10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_KelMorian10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "KelMorianInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianInfantryWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "KelMorianVehicleAndShipWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianVehicleAndShipWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianVehicleAndShipWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianVehicleAndShipWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianVehicleAndShipWeaponsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_KelMorian10minUpgrade_Init () {
    libNEXS_gt_KelMorian10minUpgrade = TriggerCreate("libNEXS_gt_KelMorian10minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_KelMorian10minUpgrade, libNEXS_gv_kelMorian10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KelMorian 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_KelMorian15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_KelMorian15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_KelMorian15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "KelMorianInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianInfantryArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "KelMorianVehicleAndShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianVehicleAndShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianVehicleAndShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianVehicleAndShipArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianVehicleAndShipArmorsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_KelMorian15minUpgrade_Init () {
    libNEXS_gt_KelMorian15minUpgrade = TriggerCreate("libNEXS_gt_KelMorian15minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_KelMorian15minUpgrade, libNEXS_gv_kelMorian15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KelMorian 20min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_KelMorian20minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_KelMorian20minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_KelMorian20minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "KelMorianInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianInfantryArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "KelMorianInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianInfantryWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "KelMorianVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianVehicleAndShipArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "KelMorianVehicleAndShipWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianVehicleAndShipWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianVehicleAndShipWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianVehicleAndShipWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianVehicleAndShipWeaponsLevel3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_KelMorian20minUpgrade_Init () {
    libNEXS_gt_KelMorian20minUpgrade = TriggerCreate("libNEXS_gt_KelMorian20minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_KelMorian20minUpgrade, libNEXS_gv_kelMorian20minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KelMorian A Timer
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_KelMorianATimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_KelMorianATimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_KelMorianATimer, false);
    TimerStart(libNEXS_gv_kelMorianA12minTimer, 720.0, false, c_timeAI);
    TimerStart(libNEXS_gv_kelMorianA20minTimer, 1200.0, false, c_timeAI);
    TimerStart(libNEXS_gv_kelMorian5minTimer, 300.0, false, c_timeAI);
    TimerStart(libNEXS_gv_kelMorian10minTimer, 600.0, false, c_timeAI);
    TimerStart(libNEXS_gv_kelMorian15minTimer, 900.0, false, c_timeAI);
    TimerStart(libNEXS_gv_kelMorian20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_KelMorianATimer_Init () {
    libNEXS_gt_KelMorianATimer = TriggerCreate("libNEXS_gt_KelMorianATimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: KelMorian A 12min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_KelMorianA12minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_KelMorianA12minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_KelMorianA12minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "KelMorianMinerT330", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianMinerT330", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianMinerT330", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianMinerT330", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianMinerT330", 1);
    TechTreeUpgradeAddLevel(3, "KelMorianCivilianMolotov", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianCivilianMolotov", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianCivilianMolotov", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianCivilianMolotov", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianCivilianMolotov", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_KelMorianA12minUpgrade_Init () {
    libNEXS_gt_KelMorianA12minUpgrade = TriggerCreate("libNEXS_gt_KelMorianA12minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_KelMorianA12minUpgrade, libNEXS_gv_kelMorianA12minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KelMorian A 20min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_KelMorianA20minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_KelMorianA20minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_KelMorianA20minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "KelMorianHERCResurgence", 1);
    TechTreeUpgradeAddLevel(4, "KelMorianHERCResurgence", 1);
    TechTreeUpgradeAddLevel(5, "KelMorianHERCResurgence", 1);
    TechTreeUpgradeAddLevel(6, "KelMorianHERCResurgence", 1);
    TechTreeUpgradeAddLevel(7, "KelMorianHERCResurgence", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_KelMorianA20minUpgrade_Init () {
    libNEXS_gt_KelMorianA20minUpgrade = TriggerCreate("libNEXS_gt_KelMorianA20minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_KelMorianA20minUpgrade, libNEXS_gv_kelMorianA20minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha A
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_MechaA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libNEXS_gt_MechaATimer, true, false);
    TriggerEnable(libNEXS_gt_MechaBroodLordAbility, true);
    TriggerEnable(libNEXS_gt_MechaCorruptorAbility, true);
    TriggerEnable(libNEXS_gt_MechaOverlordAbility, true);
    TriggerEnable(libNEXS_gt_MechaViperAbility, true);
    TriggerEnable(libNEXS_gt_UnitsAttack, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_MechaA_Init () {
    libNEXS_gt_MechaA = TriggerCreate("libNEXS_gt_MechaA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha Brood Lord Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_MechaBroodLordAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MechaBroodLord"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_MechaBroodLordAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_MechaBroodLordAbility_Init () {
    libNEXS_gt_MechaBroodLordAbility = TriggerCreate("libNEXS_gt_MechaBroodLordAbility_Func");
    TriggerEnable(libNEXS_gt_MechaBroodLordAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_MechaBroodLordAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha Corruptor Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_MechaCorruptorAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MechaCorruptor"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_MechaCorruptorAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_MechaCorruptorAbility_Init () {
    libNEXS_gt_MechaCorruptorAbility = TriggerCreate("libNEXS_gt_MechaCorruptorAbility_Func");
    TriggerEnable(libNEXS_gt_MechaCorruptorAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_MechaCorruptorAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha Overlord Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_MechaOverlordAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MechaOverlord"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_MechaOverlordAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_MechaOverlordAbility_Init () {
    libNEXS_gt_MechaOverlordAbility = TriggerCreate("libNEXS_gt_MechaOverlordAbility_Func");
    TriggerEnable(libNEXS_gt_MechaOverlordAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_MechaOverlordAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha Viper Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_MechaViperAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MechaViper"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_MechaViperAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_MechaViperAbility_Init () {
    libNEXS_gt_MechaViperAbility = TriggerCreate("libNEXS_gt_MechaViperAbility_Func");
    TriggerEnable(libNEXS_gt_MechaViperAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_MechaViperAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha 5min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Mecha5minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_Mecha5minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_Mecha5minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MechaGroundCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(4, "MechaGroundCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(5, "MechaGroundCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(6, "MechaGroundCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(7, "MechaGroundCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(3, "MechaMeleeWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "MechaMeleeWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "MechaMeleeWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "MechaMeleeWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "MechaMeleeWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "MechaMissileWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "MechaMissileWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "MechaMissileWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "MechaMissileWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "MechaMissileWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "MechaFlyerCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(4, "MechaFlyerCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(5, "MechaFlyerCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(6, "MechaFlyerCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(7, "MechaFlyerCarapacesLevel1", 1);
    TechTreeUpgradeAddLevel(3, "MechaAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "MechaAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "MechaAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "MechaAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "MechaAirWeaponsLevel1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Mecha5minUpgrade_Init () {
    libNEXS_gt_Mecha5minUpgrade = TriggerCreate("libNEXS_gt_Mecha5minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_Mecha5minUpgrade, libNEXS_gv_mecha5minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Mecha10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_Mecha10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_Mecha10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MechaMeleeWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "MechaMeleeWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "MechaMeleeWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "MechaMeleeWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "MechaMeleeWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "MechaMissileWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "MechaMissileWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "MechaMissileWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "MechaMissileWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "MechaMissileWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "MechaAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "MechaAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "MechaAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "MechaAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "MechaAirWeaponsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Mecha10minUpgrade_Init () {
    libNEXS_gt_Mecha10minUpgrade = TriggerCreate("libNEXS_gt_Mecha10minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_Mecha10minUpgrade, libNEXS_gv_mecha10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Mecha15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_Mecha15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_Mecha15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MechaGroundCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(4, "MechaGroundCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(5, "MechaGroundCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(6, "MechaGroundCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(7, "MechaGroundCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(3, "MechaFlyerCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(4, "MechaFlyerCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(5, "MechaFlyerCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(6, "MechaFlyerCarapacesLevel2", 1);
    TechTreeUpgradeAddLevel(7, "MechaFlyerCarapacesLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Mecha15minUpgrade_Init () {
    libNEXS_gt_Mecha15minUpgrade = TriggerCreate("libNEXS_gt_Mecha15minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_Mecha15minUpgrade, libNEXS_gv_mecha5minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha 20min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Mecha20minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_Mecha20minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_Mecha20minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MechaGroundCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(4, "MechaGroundCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(5, "MechaGroundCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(6, "MechaGroundCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(7, "MechaGroundCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(3, "MechaMeleeWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "MechaMeleeWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "MechaMeleeWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "MechaMeleeWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "MechaMeleeWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "MechaMissileWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "MechaMissileWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "MechaMissileWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "MechaMissileWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "MechaMissileWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "MechaFlyerCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(4, "MechaFlyerCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(5, "MechaFlyerCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(6, "MechaFlyerCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(7, "MechaFlyerCarapacesLevel3", 1);
    TechTreeUpgradeAddLevel(3, "MechaAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "MechaAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "MechaAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "MechaAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "MechaAirWeaponsLevel3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Mecha20minUpgrade_Init () {
    libNEXS_gt_Mecha20minUpgrade = TriggerCreate("libNEXS_gt_Mecha20minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_Mecha20minUpgrade, libNEXS_gv_mecha20minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha A Timer
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_MechaATimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_MechaATimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_MechaATimer, false);
    TimerStart(libNEXS_gv_mechaA8minTimer, 480.0, false, c_timeAI);
    TimerStart(libNEXS_gv_mechaA10minTimer, 600.0, false, c_timeAI);
    TimerStart(libNEXS_gv_mecha5minTimer, 300.0, false, c_timeAI);
    TimerStart(libNEXS_gv_mecha10minTimer, 600.0, false, c_timeAI);
    TimerStart(libNEXS_gv_mecha15minTimer, 900.0, false, c_timeAI);
    TimerStart(libNEXS_gv_mecha20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_MechaATimer_Init () {
    libNEXS_gt_MechaATimer = TriggerCreate("libNEXS_gt_MechaATimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha A 8min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_MechaA8minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_MechaA8minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_MechaA8minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MechaZerglingSpeed", 1);
    TechTreeUpgradeAddLevel(4, "MechaZerglingSpeed", 1);
    TechTreeUpgradeAddLevel(5, "MechaZerglingSpeed", 1);
    TechTreeUpgradeAddLevel(6, "MechaZerglingSpeed", 1);
    TechTreeUpgradeAddLevel(7, "MechaZerglingSpeed", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_MechaA8minUpgrade_Init () {
    libNEXS_gt_MechaA8minUpgrade = TriggerCreate("libNEXS_gt_MechaA8minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_MechaA8minUpgrade, libNEXS_gv_mechaA8minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mecha A 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_MechaA10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_MechaA10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_MechaA10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "MechaZerglingFrenzy", 1);
    TechTreeUpgradeAddLevel(4, "MechaZerglingFrenzy", 1);
    TechTreeUpgradeAddLevel(5, "MechaZerglingFrenzy", 1);
    TechTreeUpgradeAddLevel(6, "MechaZerglingFrenzy", 1);
    TechTreeUpgradeAddLevel(7, "MechaZerglingFrenzy", 1);
    TechTreeUpgradeAddLevel(3, "MechaBanelingSpeed", 1);
    TechTreeUpgradeAddLevel(4, "MechaBanelingSpeed", 1);
    TechTreeUpgradeAddLevel(5, "MechaBanelingSpeed", 1);
    TechTreeUpgradeAddLevel(6, "MechaBanelingSpeed", 1);
    TechTreeUpgradeAddLevel(7, "MechaBanelingSpeed", 1);
    TechTreeUpgradeAddLevel(3, "MechaHydraliskTarget", 1);
    TechTreeUpgradeAddLevel(4, "MechaHydraliskTarget", 1);
    TechTreeUpgradeAddLevel(5, "MechaHydraliskTarget", 1);
    TechTreeUpgradeAddLevel(6, "MechaHydraliskTarget", 1);
    TechTreeUpgradeAddLevel(7, "MechaHydraliskTarget", 1);
    TechTreeUpgradeAddLevel(3, "MechaViperParasiticBombSlow", 1);
    TechTreeUpgradeAddLevel(4, "MechaViperParasiticBombSlow", 1);
    TechTreeUpgradeAddLevel(5, "MechaViperParasiticBombSlow", 1);
    TechTreeUpgradeAddLevel(6, "MechaViperParasiticBombSlow", 1);
    TechTreeUpgradeAddLevel(7, "MechaViperParasiticBombSlow", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_MechaA10minUpgrade_Init () {
    libNEXS_gt_MechaA10minUpgrade = TriggerCreate("libNEXS_gt_MechaA10minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_MechaA10minUpgrade, libNEXS_gv_mechaA10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Golden A
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_GoldenA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libNEXS_gt_GoldenATimer, true, false);
    TriggerEnable(libNEXS_gt_GoldenMothershipAbility, true);
    TriggerEnable(libNEXS_gt_GoldenMothershipCoreAbility, true);
    TriggerEnable(libNEXS_gt_GoldenWarpPrismAbility, true);
    TriggerEnable(libNEXS_gt_UnitsAttack, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_GoldenA_Init () {
    libNEXS_gt_GoldenA = TriggerCreate("libNEXS_gt_GoldenA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Golden Mothership Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_GoldenMothershipAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "GoldenMothership"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_GoldenMothershipAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_GoldenMothershipAbility_Init () {
    libNEXS_gt_GoldenMothershipAbility = TriggerCreate("libNEXS_gt_GoldenMothershipAbility_Func");
    TriggerEnable(libNEXS_gt_GoldenMothershipAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_GoldenMothershipAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Golden Mothership Core Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_GoldenMothershipCoreAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "GoldenMothershipCore"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_GoldenMothershipCoreAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_GoldenMothershipCoreAbility_Init () {
    libNEXS_gt_GoldenMothershipCoreAbility = TriggerCreate("libNEXS_gt_GoldenMothershipCoreAbility_Func");
    TriggerEnable(libNEXS_gt_GoldenMothershipCoreAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_GoldenMothershipCoreAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Golden Warp Prism Ability
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_GoldenWarpPrismAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "GoldenWarpPrism"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4) || (UnitGetOwner(EventUnit()) == 5) || (UnitGetOwner(EventUnit()) == 6) || (UnitGetOwner(EventUnit()) == 7)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNEXS_gf_GoldenWarpPrismAbility(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_GoldenWarpPrismAbility_Init () {
    libNEXS_gt_GoldenWarpPrismAbility = TriggerCreate("libNEXS_gt_GoldenWarpPrismAbility_Func");
    TriggerEnable(libNEXS_gt_GoldenWarpPrismAbility, false);
    TriggerAddEventUnitRegion(libNEXS_gt_GoldenWarpPrismAbility, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Golden 5min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Golden5minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_Golden5minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_Golden5minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "GoldenGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "GoldenGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "GoldenGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "GoldenGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "GoldenGroundWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "GoldenGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "GoldenGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "GoldenGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "GoldenGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "GoldenGroundArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "GoldenAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "GoldenAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "GoldenAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "GoldenAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "GoldenAirWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "GoldenAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "GoldenAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "GoldenAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "GoldenAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "GoldenAirArmorsLevel1", 1);
    TechTreeUpgradeAddLevel(3, "GoldenShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(4, "GoldenShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "GoldenShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(6, "GoldenShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(7, "GoldenShieldsLevel1", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Golden5minUpgrade_Init () {
    libNEXS_gt_Golden5minUpgrade = TriggerCreate("libNEXS_gt_Golden5minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_Golden5minUpgrade, libNEXS_gv_golden5minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Golden 10min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Golden10minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_Golden10minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_Golden10minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "GoldenGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "GoldenGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "GoldenGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "GoldenGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "GoldenGroundWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "GoldenAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "GoldenAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "GoldenAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "GoldenAirWeaponsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "GoldenAirWeaponsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Golden10minUpgrade_Init () {
    libNEXS_gt_Golden10minUpgrade = TriggerCreate("libNEXS_gt_Golden10minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_Golden10minUpgrade, libNEXS_gv_golden10minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Golden 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Golden15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_Golden15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_Golden15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "GoldenGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "GoldenGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "GoldenGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "GoldenGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "GoldenGroundArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "GoldenAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "GoldenAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "GoldenAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "GoldenAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "GoldenAirArmorsLevel2", 1);
    TechTreeUpgradeAddLevel(3, "GoldenShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(4, "GoldenShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(5, "GoldenShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(6, "GoldenShieldsLevel2", 1);
    TechTreeUpgradeAddLevel(7, "GoldenShieldsLevel2", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Golden15minUpgrade_Init () {
    libNEXS_gt_Golden15minUpgrade = TriggerCreate("libNEXS_gt_Golden15minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_Golden15minUpgrade, libNEXS_gv_golden15minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Golden 20min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_Golden20minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_Golden20minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_Golden20minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "GoldenGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "GoldenGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "GoldenGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "GoldenGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "GoldenGroundWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "GoldenGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "GoldenGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "GoldenGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "GoldenGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "GoldenGroundArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "GoldenAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "GoldenAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "GoldenAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "GoldenAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "GoldenAirWeaponsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "GoldenAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "GoldenAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "GoldenAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "GoldenAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "GoldenAirArmorsLevel3", 1);
    TechTreeUpgradeAddLevel(3, "GoldenShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(4, "GoldenShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(5, "GoldenShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(6, "GoldenShieldsLevel3", 1);
    TechTreeUpgradeAddLevel(7, "GoldenShieldsLevel3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_Golden20minUpgrade_Init () {
    libNEXS_gt_Golden20minUpgrade = TriggerCreate("libNEXS_gt_Golden20minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_Golden20minUpgrade, libNEXS_gv_golden20minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Golden A Timer
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_GoldenATimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_GoldenATimer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_GoldenATimer, false);
    TimerStart(libNEXS_gv_goldenA8minTimer, 480.0, false, c_timeAI);
    TimerStart(libNEXS_gv_goldenA15minTimer, 900.0, false, c_timeAI);
    TimerStart(libNEXS_gv_golden5minTimer, 300.0, false, c_timeAI);
    TimerStart(libNEXS_gv_golden10minTimer, 600.0, false, c_timeAI);
    TimerStart(libNEXS_gv_golden15minTimer, 900.0, false, c_timeAI);
    TimerStart(libNEXS_gv_golden20minTimer, 1200.0, false, c_timeAI);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_GoldenATimer_Init () {
    libNEXS_gt_GoldenATimer = TriggerCreate("libNEXS_gt_GoldenATimer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Golden A 8min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_GoldenA8minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_GoldenA8minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_GoldenA8minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "GoldenZealotCharge", 1);
    TechTreeUpgradeAddLevel(4, "GoldenZealotCharge", 1);
    TechTreeUpgradeAddLevel(5, "GoldenZealotCharge", 1);
    TechTreeUpgradeAddLevel(6, "GoldenZealotCharge", 1);
    TechTreeUpgradeAddLevel(7, "GoldenZealotCharge", 1);
    TechTreeUpgradeAddLevel(3, "GoldenDragoonArmor", 1);
    TechTreeUpgradeAddLevel(4, "GoldenDragoonArmor", 1);
    TechTreeUpgradeAddLevel(5, "GoldenDragoonArmor", 1);
    TechTreeUpgradeAddLevel(6, "GoldenDragoonArmor", 1);
    TechTreeUpgradeAddLevel(7, "GoldenDragoonArmor", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_GoldenA8minUpgrade_Init () {
    libNEXS_gt_GoldenA8minUpgrade = TriggerCreate("libNEXS_gt_GoldenA8minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_GoldenA8minUpgrade, libNEXS_gv_goldenA8minTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Golden A 15min Upgrade
//--------------------------------------------------------------------------------------------------
bool libNEXS_gt_GoldenA15minUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libNEXS_gt_GoldenA15minUpgrade) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libNEXS_gt_GoldenA15minUpgrade, false);
    TechTreeUpgradeAddLevel(3, "GoldenZealotLightningash", 1);
    TechTreeUpgradeAddLevel(4, "GoldenZealotLightningash", 1);
    TechTreeUpgradeAddLevel(5, "GoldenZealotLightningash", 1);
    TechTreeUpgradeAddLevel(6, "GoldenZealotLightningash", 1);
    TechTreeUpgradeAddLevel(7, "GoldenZealotLightningash", 1);
    TechTreeUpgradeAddLevel(3, "GoldenImmortalBarrier", 1);
    TechTreeUpgradeAddLevel(4, "GoldenImmortalBarrier", 1);
    TechTreeUpgradeAddLevel(5, "GoldenImmortalBarrier", 1);
    TechTreeUpgradeAddLevel(6, "GoldenImmortalBarrier", 1);
    TechTreeUpgradeAddLevel(7, "GoldenImmortalBarrier", 1);
    TechTreeUpgradeAddLevel(3, "GoldenCarrierInterceptorHangar", 1);
    TechTreeUpgradeAddLevel(4, "GoldenCarrierInterceptorHangar", 1);
    TechTreeUpgradeAddLevel(5, "GoldenCarrierInterceptorHangar", 1);
    TechTreeUpgradeAddLevel(6, "GoldenCarrierInterceptorHangar", 1);
    TechTreeUpgradeAddLevel(7, "GoldenCarrierInterceptorHangar", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNEXS_gt_GoldenA15minUpgrade_Init () {
    libNEXS_gt_GoldenA15minUpgrade = TriggerCreate("libNEXS_gt_GoldenA15minUpgrade_Func");
    TriggerAddEventTimer(libNEXS_gt_GoldenA15minUpgrade, libNEXS_gv_goldenA15minTimer);
}

void libNEXS_InitTriggers () {
    libNEXS_gt_ExtraUpgrade_Init();
    libNEXS_gt_UnitsAttack_Init();
    libNEXS_gt_PrintHandle_Init();
    libNEXS_gt_Sharedherounitsenterthemap_Init();
    libNEXS_gt_Sharedherounitsleavethemap_Init();
    libNEXS_gt_ZeratulsWarpCompleteJudgment_Init();
    libNEXS_gt_Stetmansbirth_Init();
    libNEXS_gt_ToshAirdropJudgment_Init();
    libNEXS_gt_CU_HeroPanelUpdate_Init();
    libNEXS_gt_CU_HeroUnitDamaged_Init();
    libNEXS_gt_CU_HeroUnitVitalChange_Init();
    libNEXS_gt_CU_HeroMouseHoverText_Init();
    libNEXS_gt_E699AEE7BD97E7B1B3E4BFAEE696AFE789B9E6AE8AE5AD97E7ACA6_Init();
    libNEXS_gt_E699AEE7BD97E7B1B3E4BFAEE696AFE9A29CE889B2_Init();
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B2_Init();
    libNEXS_gt_E99381E5B995E68AA4E79BBEE58F8DE587BBE5AFBCE5BCB9_Init();
    libNEXS_gt_E5889BE5BBBAE79B97E5AE9DE59CB0E7B2BE_Init();
    libNEXS_gt_E79B97E5AE9DE59CB0E7B2BEE8A2ABE694BBE587BB_Init();
    libNEXS_gt_E79B97E5AE9DE59CB0E7B2BEE6ADBBE4BAA1_Init();
    libNEXS_gt_DUT_Tassadar_Init();
    libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8001_Init();
    libNEXS_gt_TassadarE5BEAAE78EAFE58AA8E4BD9C05S_Init();
    libNEXS_gt_DUT_Zhakul_Init();
    libNEXS_gt_E889BEE5B094E694AFE68FB4E998B5E890A5E9A29CE889B2_Init();
    libNEXS_gt_E889BEE5B094E694AFE68FB4E99B86E7BB93E782B9_Init();
    libNEXS_gt_E889BEE5B094E694AFE68FB4E694BBE587BB_Init();
    libNEXS_gt_E889BEE5B094E694AFE68FB4E6ADBBE4BAA1_Init();
    libNEXS_gt_E8999AE697A0E69A97E5BDB1E696A9_Init();
    libNEXS_gt_XelnagaArtifactUpgradeInitial_Init();
    libNEXS_gt_XelnagaArtifactPickup_Init();
    libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B1E5BC80E590AF_Init();
    libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B4E7A59EE599A8E588B7E696B0_Init();
    libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B4E58E9FE5A78BE58D87E7BAA7E68C89E992AEE99A90E8978F_Init();
    libNEXS_gt_E6B3BDE68B89E59BBEE5A881E69C9B2E5BC80E590AF_Init();
    libNEXS_gt_E6B3BDE5A881E69C9B3E5BC80E590AF_Init();
    libNEXS_gt_DUT_Rohana_Init();
    libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8002_Init();
    libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8003_Init();
    libNEXS_gt_E5A4A7E4B8BBE69599E88BB1E99B84E6ADBBE4BAA1E68F90E7A4BA_Init();
    libNEXS_gt_E88BB1E99B84E58D95E4BD8DE8BF9BE585A5E59CB0E59BBE_Init();
    libNEXS_gt_E587AFE68B89E5858BE696AFE78783E783A7BUGE4BFAEE5A48D_Init();
    libNEXS_gt_E998BFE5A194E5B0BCE696AFE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98_Init();
    libNEXS_gt_E998BFE68B89E7BAB3E5858BE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98_Init();
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98_Init();
    libNEXS_gt_E6B283E68B89E5B08AE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98_Init();
    libNEXS_gt_E587AFE68B89E5858BE696AFE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98_Init();
    libNEXS_gt_E6B49BE59388E5A89CE5A48DE6B4BBE4BBB7E6A0BCE694B9E58F98_Init();
    libNEXS_gt_E697B6E7A9BAE8A382E99A99E4B88EE697B6E7A9BAE4B98BE997A8E8BF9BE585A5E59CB0E59BBE_Init();
    libNEXS_gt_E697B6E7A9BAE4B98BE997A8E68A98E8B783_Init();
    libNEXS_gt_E697B6E7A9BAE4B98BE997A8E8A2ABE691A7E6AF81_Init();
    libNEXS_gt_E697B6E7A9BAE4B98BE997A8E4BDBFE794A8E697B6E7A9BAE8A382E99A99_Init();
    libNEXS_gt_E697B6E7A9BAE4B98BE997A8E586B7E58DB4E5AE8CE68890_Init();
    libNEXS_gt_E697B6E7A9BAE4B98BE997A8E4BDBFE794A8E9A9ACE794B2E68A80E883BD_Init();
    libNEXS_gt_E697B6E7A9BAE4B98BE997A8E5B7B2E9878AE694BE_Init();
    libNEXS_gt_E5A48DE4BB87E88085E99C87E68591_Init();
    libNEXS_gt_E697B6E7A9BAE79FA9E998B5E7B298E6BB9EE5BA94E794A8_Init();
    libNEXS_gt_E697B6E7A9BAE79FA9E998B5E69A82E5819CE8BF90E8BE93_Init();
    libNEXS_gt_E697B6E7A9BAE79FA9E998B5E697B6E99990E8BF87E69C9F_Init();
    libNEXS_gt_E697B6E7A9BAE79FA9E998B5E7A9BAE4B8ADE5BA94E794A8E588A4E696AD_Init();
    libNEXS_gt_E697B6E7A9BAE79FA9E998B5E59CB0E99DA2E5BA94E794A8E588A4E696AD_Init();
    libNEXS_gt_E697B6E7A9BAE79FA9E998B5E8BF90E8BE93E58DB8E8BDBD_Init();
    libNEXS_gt_E6B283E68B89E5B08AE69D80E6ADBBE58D95E4BD8D_Init();
    libNEXS_gt_E9BC93E8889EE88085E8BF9CE7A6BBE997AAE78EB0_Init();
    libNEXS_gt_E6B283E68B89E5B08AE694BBE587BBE58D95E4BD8D_Init();
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B_Init();
    libNEXS_gt_DUT_Ulrezaj_Init();
    libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE8BF9BE585A5E59CB0E59BBE_Init();
    libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE6ADBBE4BAA1E8B584E6BA90E4B88EE883BDE9878FE88EB7E58F96_Init();
    libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE587BBE69D80E883BDE9878FE88EB7E58F96_Init();
    libNEXS_gt_E6ACA7E99BB7E58AA0E68A80E883BDE69588E69E9CE883BDE9878FE88EB7E58F96_Init();
    libNEXS_gt_E6ACA7E99BB7E58AA0E58D95E4BD8DE58D87E6A0BCE883BDE9878FE88EB7E58F96_Init();
    libNEXS_gt_E6ACA7E99BB7E58AA0E883BDE9878FE9998DE4BD8E_Init();
    libNEXS_gt_E6ACA7E99BB7E58AA0E5AD98E6B4BBE7B2BEE9809AE883BDE9878FE8BF94E8BF98_Init();
    libNEXS_gt_E998BFE588A9E890A8E68A98E8B783E997A8E58585E883BD_Init();
    libNEXS_gt_E5B18FE99A9CE4BCA4E5AEB3E590B8E694B6E4B88EE883BDE9878FE88EB7E58F96_Init();
    libNEXS_gt_E8999AE7A9BAE8BDBDE4BD93E883BDE9878FE5878FE5B091E4B88EE5B9BBE5BDB1E7949FE68890_Init();
    libNEXS_gt_E6ACA7E99BB7E58AA0E5B9BBE5BDB1E887AAE58AA8E8B5A0E4BA88_Init();
    libNEXS_gt_E6ACA7E99BB7E58AA0E5B9BBE5BDB1E68A98E8B783_Init();
    libNEXS_gt_E6ACA7E99BB7E58AA0E5B9BBE5BDB1E5AD98E59CA8E58F8DE9A688E887B3E9A1B6E983A8E99DA2E69DBF_Init();
    libNEXS_gt_E6ACA7E99BB7E58AA0E8BF9BE585A5E59CB0E59BBE_Init();
    libNEXS_gt_E6ACA7E99BB7E58AA0E7A6BBE5BC80E59CB0E59BBE_Init();
    libNEXS_gt_E6ACA7E99BB7E58AA0E4B887E781B5E5BD92E4B880E697B6E997B4E588B7E696B0_Init();
    libNEXS_gt_E6ACA7E99BB7E58AA0E68EA7E588B6E883BDE9878FE88EB7E58F96_Init();
    libNEXS_gt_E6ACA7E99BB7E58AA0E68A80E883BDE586B7E58DB4E5878FE5B091_Init();
    libNEXS_gt_E6ACA7E99BB7E58AA0E588BBE58DB0E883BDE9878FE88EB7E58F96_Init();
    libNEXS_gt_E6ACA7E99BB7E58AA0E998B2E883BDE9998DE4BD8EE5BC80E590AFE4B88EE69D80E6ADBBE5B9BBE5BDB1_Init();
    libNEXS_gt_E6ACA7E99BB7E58AA0E998B2E883BDE9998DE4BD8EE585B3E997AD_Init();
    libNEXS_gt_E998BFE588A9E890A8E5AE88E58DABE58F8DE5BCB9E58F91E5B084E789A9_Init();
    libNEXS_gt_E998BFE588A9E890A8E5AE88E58DABE99D9EE79BB4E68EA5E58F91E5B084E789A9E980A0E68890E4BCA4E5AEB3_Init();
    libNEXS_gt_E998BFE588A9E890A8E588BAE5AEA2E9878DE7BDAEE68A80E883BDE586B7E58DB4_Init();
    libNEXS_gt_E998BFE588A9E890A8E588BAE5AEA2E9AB98E5BAA6E694B9E58F98Debug_Init();
    libNEXS_gt_DUT_Selendis_Init();
    libNEXS_gt_SelendisGlobalPowerAbilityTrigger_Init();
    libNEXS_gt_Selendis_Platform_Create_Init();
    libNEXS_gt_Selendis_Platform_TrainChange_Init();
    libNEXS_gt_Selendis_Platform_UnitDeath_Init();
    libNEXS_gt_Selendis_Platform_RemakeDestroy_Init();
    libNEXS_gt_Selendis_Platform_Upgrade_Init();
    libNEXS_gt_SelendisBuildingCancel_Init();
    libNEXS_gt_SelendisHeroBirth_Init();
    libNEXS_gt_SelendisHeroUpgrade_Init();
    libNEXS_gt_SelendisHeroTrans_Init();
    libNEXS_gt_SelendisHeroDeath_Init();
    libNEXS_gt_SelendisMothershipAttack_Init();
    libNEXS_gt_SelendisColossusGATrigger_Init();
    libNEXS_gt_SelendisColossusGAInitial_Init();
    libNEXS_gt_SelendisCarrierGATrigger_Init();
    libNEXS_gt_SelendisCarrierGAOrbitalStrike_Init();
    libNEXS_gt_SelendisCarrierGAInterceptorGet_Init();
    libNEXS_gt_SelendisPhoenixHeightChange_Init();
    libNEXS_gt_SelendisColossusWeaponTargetMove_Init();
    libNEXS_gt_SelendisColossusWeaponTargetBirth_Init();
    libNEXS_gt_SelendisColossusWeaponTargetBuff_Init();
    libNEXS_gt_SelendisGlobalCasterStart1_Init();
    libNEXS_gt_SelendisGlobalCasterStart2_Init();
    libNEXS_gt_SelendisGlobalCasterStart3_Init();
    libNEXS_gt_SelendisGlobalCasterStart4_Init();
    libNEXS_gt_SelendisGlobalCasterStart5_Init();
    libNEXS_gt_SelendisGlobalCasterStart6_Init();
    libNEXS_gt_SelendisGlobalCasterStart7_Init();
    libNEXS_gt_SelendisGlobalCasterStart8_Init();
    libNEXS_gt_SelendisUnitAttack1_Init();
    libNEXS_gt_SelendisUnitAttack2_Init();
    libNEXS_gt_SelendisUnitAttack3_Init();
    libNEXS_gt_SelendisUnitAttack4_Init();
    libNEXS_gt_SelendisUnitAttack5_Init();
    libNEXS_gt_SelendisUnitAttack6_Init();
    libNEXS_gt_SelendisUnitAttack7_Init();
    libNEXS_gt_SelendisUnitAttack8_Init();
    libNEXS_gt_SelendisWarBeginning_Init();
    libNEXS_gt_SelendisUnitAttackCommand_Init();
    libNEXS_gt_SelendisUnitCheck_Init();
    libNEXS_gt_SelendisRecall_Init();
    libNEXS_gt_DUT_Reigel_Init();
    libNEXS_gt_E5BCB9E88DAFE8A1A5E7BB99E5BA93E8BF9BE585A5E59CB0E59BBEE8BF85E69EAAE8BF9EE587BB2_Init();
    libNEXS_gt_E99BB7E8AFBAE5A881E69C9B1E5BC80E590AF_Init();
    libNEXS_gt_E99B87E4BDA3E585B5E7BB99E4BA88E5BCB9E88DAF2_Init();
    libNEXS_gt_E5BCB9E88DAFE588B6E980A0E7BB99E4BA88E8A18CE4B8BA_Init();
    libNEXS_gt_E5BCB9E88DAFE4BDBFE794A8E5898AE5878FE8A18CE4B8BA_Init();
    libNEXS_gt_E5BCB9E88DAFE5BA93E8A18CE4B8BAE7BB99E4BA88E8B584E6BA90_Init();
    libNEXS_gt_E99BB7E8AFBAE5A881E69C9B2E5BC80E590AF_Init();
    libNEXS_gt_E699B6E4BD93E79FBFE793A6E696AFE588A4E696AD_Init();
    libNEXS_gt_E8A385E5A487E59BBEE7BAB8E587BBE69D80E68E89E890BDE5A881E69C9B3_Init();
    libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68E89E890BDE6A682E78E87E6B885E999A4E5A881E69C9B3_Init();
    libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96E588A4E696ADE5A881E69C9B3_Init();
    libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96E5A881E69C9B3_Init();
    libNEXS_gt_E99BB7E8AFBAE4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3_Init();
    libNEXS_gt_E99BB7E8AFBAE38081E587AFE7919EE79498E6ADBBE4BAA1E4B88EE8A1A5E7BB99E5BA93E691A7E6AF81E5A881E69C9B3_Init();
    libNEXS_gt_E8A385E794B2E4BCA0E98081E8A385E5A487E5A881E69C9B3_Init();
    libNEXS_gt_E8B685E7BAA7E8B5ABE5858BE4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3_Init();
    libNEXS_gt_E8B685E7BAA7E8B5ABE5858BE8A2ABE691A7E6AF81E5A881E69C9B3_Init();
    libNEXS_gt_E6AF81E781ADE68898E5A3ABE4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3_Init();
    libNEXS_gt_E6AF81E781ADE68898E5A3ABE8A2ABE691A7E6AF81E5A881E69C9B3_Init();
    libNEXS_gt_E992A2E99381E8A385E794B2E4BFA1E6A087E5A48DE6B4BBE5A881E69C9B3_Init();
    libNEXS_gt_E992A2E99381E8A385E794B2E8A2ABE691A7E6AF81E5A881E69C9B3_Init();
    libNEXS_gt_E99BB7E8AFBAE5A881E69C9B3E5BC80E590AF_Init();
    libNEXS_gt_E99BB7E8AFBAE794B5E6B1A0E588B7E696B0_Init();
    libNEXS_gt_E99BB7E8AFBAE794B5E6B1A0E588B7E696B0E7BB88E6ADA2_Init();
    libNEXS_gt_E99BB7E8AFBAE794B5E6B1A0E68BBEE58F96_Init();
    libNEXS_gt_E8A385E5A487E59BBEE7BAB8E587BBE69D80E68E89E890BD_Init();
    libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68E89E890BDE6A682E78E87E6B885E999A4_Init();
    libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96E588A4E696AD_Init();
    libNEXS_gt_E8A385E5A487E59BBEE7BAB8E68BBEE58F96_Init();
    libNEXS_gt_E99BB7E8AFBAE5889DE5A78BE6BC94E7AE97E4BD93E58D87E7BAA7_Init();
    libNEXS_gt_E99BB7E8AFBAE4BCA0E98081E8A385E5A487_Init();
    libNEXS_gt_E99BB7E8AFBAE4BFA1E6A087E5A48DE6B4BB_Init();
    libNEXS_gt_E587AFE7919EE79498E5A48DE6B4BB_Init();
    libNEXS_gt_E587AFE7919EE79498E59FBAE59CB0E998B2E5BEA1_Init();
    libNEXS_gt_E5BCB9E88DAFE8A1A5E7BB99E5BA93E8BF9BE585A5E59CB0E59BBE_Init();
    libNEXS_gt_E8A2ABE6849FE69F93E79A84E6B3B0E587AFE696AFE5889BE5BBBA_Init();
    libNEXS_gt_E5BCB9E4BB93E69C80E5A4A7E8AEA1E695B0E5A29EE58AA0_Init();
    libNEXS_gt_E99BB7E8AFBAE38081E587AFE7919EE79498E6ADBBE4BAA1E4B88EE8A1A5E7BB99E5BA93E691A7E6AF81_Init();
    libNEXS_gt_E99BB7E8AFBAE79A84E9A38EE69AB4E88BB1E99B84E5BDA9E89B8B_Init();
    libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8006_Init();
    libNEXS_gt_E99BB7E8AFBAE8A385E794B2Debug_Init();
    libNEXS_gt_E99BB7E8AFBAE68EA7E588B6Debug_Init();
    libNEXS_gt_SuperIRONE992A2E99381E993A0E794B2E59B9EE5A48DE883BDE9878F_Init();
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B20_Init();
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B19_Init();
    libNEXS_gt_CGunE7BB88E69C89E4B880E6ADBBE78886E782B8_Init();
    libNEXS_gt_CGunE7BB88E69C89E4B880E6ADBBE5BCB9E88DAFE8A385E5A1AB_Init();
    libNEXS_gt_E587AFE69292E8A18CE6989FE8A681E5A19EE59DA0E890BD_Init();
    libNEXS_gt_E5B084E587BBE58AA9E6898BE5A1ABE8A385_Init();
    libNEXS_gt_E789B9E6AE8AE69CBAE794B2E5A1ABE8A385_Init();
    libNEXS_gt_E6898BE99BB7E4BD8DE7BDAEE7A1AEE8AEA4_Init();
    libNEXS_gt_E5889BE5BBBAE8BF90E8BE93E888B9E59B9EE5AEB6_Init();
    libNEXS_gt_E99BB7E8AFBAE8BF9BE585A5E59CB0E5A0A1_Init();
    libNEXS_gt_E99BB7E8AFBAE7A6BBE5BC80E59CB0E5A0A1_Init();
    libNEXS_gt_E6898BE99BB7E4BA8CE6ACA1E5BCB9E5B084_Init();
    libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E5A4A7E5928CE782AEE69AB4E587BB3_Init();
    libNEXS_gt_E6B8B8E9AA91E585B5E68EA7E588B6E69D83E7A7BBE4BAA4_Init();
    libNEXS_gt_E681B6E9AD94E78AACE781ABE784B0E5BCB9E58F8DE5BCB9_Init();
    libNEXS_gt_E99B87E4BDA3E585B5E58585E883BDE8BF94E8BF98_Init();
    libNEXS_gt_DUT_Gerard_Init();
    libNEXS_gt_UEDE5BC80E590AFE99DA2E69DBFE68A80E883BDE58585E883BD_Init();
    libNEXS_gt_UEDE5BC80E590AFE99DA2E69DBFE68A80E883BDE58585E883BD2_Init();
    libNEXS_gt_UEDE58D95E4BD8DE6ADBBE4BAA1_Init();
    libNEXS_gt_UEDE5BEAAE78EAF_Init();
    libNEXS_gt_UEDE998BFE5B094E6B395E58F8DE587BBE997AAE794B5_Init();
    libNEXS_gt_UEDE5BEAAE78EAF2_Init();
    libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E5A4A7E5928CE782AEE69AB4E587BB_Init();
    libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E699AEE694BBE69AB4E587BB_Init();
    libNEXS_gt_VAE5BBBAE980A0E5AE8CE68890_Init();
    libNEXS_gt_VCE5BBBAE980A0E5AE8CE68890_Init();
    libNEXS_gt_UEDBCE79FBFE9AAA1_Init();
    libNEXS_gt_E596B7E6B094E8838CE58C85E887AAE58AA8E8B7B3E8B783_Init();
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B4_Init();
    libNEXS_gt_E8B584E6BA90E68E89E890BD_Init();
    libNEXS_gt_UEDE4BA9AE58E86E5B1B1E5A4A7E58D87E7BAA7_Init();
    libNEXS_gt_UEDE7A9BAE997B4E7AB99E58F98E5BC82_Init();
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B3_Init();
    libNEXS_gt_DUT_Tosh_Init();
    libNEXS_gt_ToshE6ADBBE4BAA1_Init();
    libNEXS_gt_ToshE58D95E4BD8DE8BF94E888AA_Init();
    libNEXS_gt_ToshE8BF90E8BE93E888B9E8BF94E888AA_Init();
    libNEXS_gt_ToshE78684E781AF_Init();
    libNEXS_gt_ogsqnldbcwiysagv_Init();
    libNEXS_gt_ToshE78684E781AFE7949FE591BDE5BA94E794A8_Init();
    libNEXS_gt_ToshE78684E781AFE8A686E58699_Init();
    libNEXS_gt_E5A881E69C9B1E5BC80E590AF_Init();
    libNEXS_gt_ToshE78684E781AFE59CB0E597AAE78B82E783ADE5BC80E590AF_Init();
    libNEXS_gt_ToshE78684E781AFbuffE5A29EE58AA0_Init();
    libNEXS_gt_E5A881E69C9B2E5BC80E590AF_Init();
    libNEXS_gt_E5A881E69C9B3E5BC80E590AF_Init();
    libNEXS_gt_E69C89E5809FE4B88DE8BF98E888B0E9989FE586B7E58DB4E5878FE5B091_Init();
    libNEXS_gt_DUT_Gestalt_Init();
    libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E587BAE7949FE5BDA9E89B8B_Init();
    libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E6ADBBE4BAA1_Init();
    libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E883BDE9878F_Init();
    libNEXS_gt_E6A0BCE5BC8FE5A194E88BB1E99B84E9A38EE78886_Init();
    libNEXS_gt_E9A284E8AEBEE782B9E59FBAE7AB99E588B7E696B0_Init();
    libNEXS_gt_E59FBAE7AB99E58DA0E9A286_Init();
    libNEXS_gt_E59FBAE7AB99E8B584E6BA90E88EB7E58F96_Init();
    libNEXS_gt_E59FBAE7AB99E4BF9DE68AA4E58A9BE59CBA_Init();
    libNEXS_gt_E699B6E4BD93E79FBFE98787E99B86E8A385E7BDAEE588B7E696B0E5889DE5A78BE5BC80E590AF_Init();
    libNEXS_gt_E699B6E4BD93E79FBFE98787E99B86E8BF87E5BAA6_Init();
    libNEXS_gt_E9AB98E883BDE793A6E696AFE98787E99B86E8BDACE68DA2_Init();
    libNEXS_gt_E99BB6E5B08FE9989FE7BB8FE9AA8CE580BCE88EB7E58F96_Init();
    libNEXS_gt_E99BB6E5B08FE9989FE7AD89E7BAA7E68F90E9AB98_Init();
    libNEXS_gt_E99BB6E5B08FE9989FE9989FE995BFE5889BE5BBBA_Init();
    libNEXS_gt_E99BB6E5B08FE9989FE9989FE59198E5BCB9E4BB93E587BAE7949F_Init();
    libNEXS_gt_E99BB6E5B08FE9989FE8A180E9878FE58D87E7BAA7E98082E9858D_Init();
    libNEXS_gt_E99BB6E5B08FE9989FE8A180E9878FE68C81E7BBADE8AEA1E7AE97_Init();
    libNEXS_gt_E99BB6E5B08FE9989FE8A180E9878FE997B2E69A87E8AEA1E7AE97_Init();
    libNEXS_gt_E99BB6E5B08FE9989FE9989FE995BFE9878AE694BEE9809AE794A8E68A80E883BD_Init();
    libNEXS_gt_E8BDB0E782B8E69CBAE887AAE5AE9AE4B989E8BF94E59B9EE8BDA8E8BFB9_Init();
    libNEXS_gt_E8BDB0E782B8E69CBAE5889BE5BBBAE7BB91E5AE9A_Init();
    libNEXS_gt_E8BDB0E782B8E69CBAE5BCB9E88DAFE8A385E5A1ABE5AE8CE6AF95_Init();
    libNEXS_gt_E8BDB0E782B8E69CBAE6ADBBE4BAA1_Init();
    libNEXS_gt_E8BDB0E782B8E69CBAE9998DE890BD_Init();
    libNEXS_gt_E8BDB0E782B8E69CBAE5B9B3E58FB0E691A7E6AF81_Init();
    libNEXS_gt_E8BDB0E782B8E69CBAE7B2BEE58786E8BDB0E782B8_Init();
    libNEXS_gt_E8BDB0E782B8E69CBAE5B9BFE59F9FE8BDB0E782B8_Init();
    libNEXS_gt_E8BDB0E782B8E69CBAE58FACE59B9EE4B88EE5B9BFE59F9FE58F96E6B688_Init();
    libNEXS_gt_E8BDB0E782B8E69CBAE887AAE58AA8E998B2E5BEA1_Init();
    libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE8BF90E8A18C1_Init();
    libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE8BF90E8A18C2_Init();
    libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE8BF90E8A18C3_Init();
    libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E58585E883BDE4BDBFE794A8_Init();
    libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E8BF9BE585A5E59CB0E59BBE_Init();
    libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E5BC80E5A78BE4B88BE89B8B_Init();
    libNEXS_gt_E9A38EE69AB4E7A9BAE9998DE888B1E7B3BBE7BB9FE58D87E7BAA7_Init();
    libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE7B298E6BB9E_Init();
    libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE5889DE5A78BE782B9_Init();
    libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE79BAEE6A087E782B9_Init();
    libNEXS_gt_E78C8EE9B9B0E4BEA6E5AF9FE69CBAE7A6BBE5BC80E99990E588B6E58CBAE59F9F_Init();
    libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE5889DE5A78BE586B7E58DB4_Init();
    libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE587BAE7949F_Init();
    libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE5889BE5BBBA_Init();
    libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE68C87E4BBA4_Init();
    libNEXS_gt_E6A0B8E5AD90E8BDB0E782B8E69CBAE8BF94E59B9E_Init();
    libNEXS_gt_E585B5E890A5E5BBBAE980A0E5AE8CE68890_Init();
    libNEXS_gt_E69CBAE6A2B0E58D95E4BD8DE8B584E6BA90E8BF94E8BF98_Init();
    libNEXS_gt_DUT_Valerian_Init();
    libNEXS_gt_ValerianGlobalTextForUnit_Init();
    libNEXS_gt_ValerianGlobalTextForBuilding_Init();
    libNEXS_gt_ValerianGlobalTextForAbility_Init();
    libNEXS_gt_ValerianGlobalTextForCooldown_Init();
    libNEXS_gt_ValerianGlobalTextForDeath_Init();
    libNEXS_gt_E5AE99E696AFE983A8E7BDB2E58786E5A487E5B0B1E7BBAA_Init();
    libNEXS_gt_E5AE99E696AFE4BFAEE5A48DE5AE8CE6AF95_Init();
    libNEXS_gt_E5AE99E696AFE8A2ABE691A7E6AF81_Init();
    libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E99DA2E69DBFE5889DE5A78BE68A98E8B783_Init();
    libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E99DA2E69DBFE4BBA3E69BBFE69CACE4BD93E68A98E8B783_Init();
    libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E7A6BBE5BC80E697B6E7A681E794A8E68A98E8B783E68A80E883BD_Init();
    libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E69CACE4BD93E68A98E8B783E4B88EE586B7E58DB4_Init();
    libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E58DABE6989FE689ABE68F8FE68C81E7BBADE697B6E997B4_Init();
    libNEXS_gt_E9A38EE69AB4E7A59EE9B9B0E58DABE6989FE689ABE68F8FE4BCA4E5AEB3_Init();
    libNEXS_gt_E8A18CE6989FE998B2E5BEA1E9A39EE5BCB9E7B298E6BB9E_Init();
    libNEXS_gt_E5858BE68B89E882AFE58E9FE59E8BE69CBAE689A7E8A18CE5AFB9E782B9E8BDB0E782B8_Init();
    libNEXS_gt_E5858BE68B89E882AFE58E9FE59E8BE69CBAE5AFB9E782B9E8BDB0E782B8E5819CE6ADA2_Init();
    libNEXS_gt_E8A782E5AF9FE88085E68A98E8B783_Init();
    libNEXS_gt_E8A782E5AF9FE88085E5AD90E68A98E8B783_Init();
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B13_Init();
    libNEXS_gt_E5A5A5E4B881E8A2ABE6848FE5A496E691A7E6AF81Debug_Init();
    libNEXS_gt_E5A5A5E4B881E4BFAEE5A48DE5AE8CE6AF95_Init();
    libNEXS_gt_E5A5A5E4B881E8A2ABE691A7E6AF81_Init();
    libNEXS_gt_E89299E696AFE5858BE5A881E69C9B1E5BC80E590AF_Init();
    libNEXS_gt_E89299E696AFE5858BE5A881E69C9B2E5BC80E590AF_Init();
    libNEXS_gt_E89299E696AFE5858BE7A681E794A8E5A881E69C9B2E68A80E883BD_Init();
    libNEXS_gt_DUT_Overmind_Init();
    libNEXS_gt_OvermindE6ADBBE4BAA1_Init();
    libNEXS_gt_OvermindE9A29CE889B2_Init();
    libNEXS_gt_E4B8BBE5AEB0E5A881E69C9B1E5BC80E590AF_Init();
    libNEXS_gt_E4B8BBE5AEB0E5A881E69C9B2E5BC80E590AF_Init();
    libNEXS_gt_E4B8BBE5AEB0E5A881E69C9B3E5BC80E590AF_Init();
    libNEXS_gt_DUT_Stetmann_Init();
    libNEXS_gt_E7A59EE7BB8FE79785E5958AE58D95E4BD8DE6ADBBE4BAA1_Init();
    libNEXS_gt_RaynorsUnit_Init();
    libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8005_Init();
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B11_Init();
    libNEXS_gt_E58D95E4BD8DE98080E58C96E8BF94E8BF98_Init();
    libNEXS_gt_E696AFE58FB0E789B9E69BBCE58D95E4BD8DE9A29CE889B2_Init();
    libNEXS_gt_E5B08FE7B2BEE781B5E983A8E7BDB2E7A7BBE58AA8_Init();
    libNEXS_gt_E7A791E7A094E7AB99E6ADBBE4BAA1_Init();
    libNEXS_gt_E7A791E7A094E7AB99E59DA0E890BDE9959CE5A4B4E69983E58AA8_Init();
    libNEXS_gt_E98787E99B86E69CBAE599A8E4BABAE5908DE5AD97_Init();
    libNEXS_gt_E983A8E7BDB2E69CBAE6A2B0E4BFA1E6A087E58F8AE591BDE4BBA4E694BBE587BB_Init();
    libNEXS_gt_E58CBBE79697E8BF90E8BE93E69CBAE7A7BBE58AA8E58DB8E8BDBD_Init();
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B9_Init();
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B7_Init();
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B8_Init();
    libNEXS_gt_E5A194E8BEBEE69E97E6ADBBE4BAA1E888B0E9989FE58FACE594A4_Init();
    libNEXS_gt_E5A4A7E58A9BE7A59EE5889BE5BBBA_Init();
    libNEXS_gt_E696AFE58FB0E789B9E69BBCE6ADBBE4BAA1_Init();
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B10_Init();
    libNEXS_gt_E68898E58897E5B7A1E888AAE888B0E5A4A7E5928CE782AEE69AB4E587BB2_Init();
    libNEXS_gt_E69CBAE6A2B0E5909EE599ACE88085E58F98E5BC82E8A385E5A1ABHydra_Init();
    libNEXS_gt_E69CBAE6A2B0E5909EE599ACE88085E58F98E5BC82E8A385E5A1ABChimz_Init();
    libNEXS_gt_E69CBAE6A2B0E5909EE599ACE88085E68A80E883BDE8A1A5E58585E8A385E5A1AB_Init();
    libNEXS_gt_DUT_Nafash_Init();
    libNEXS_gt_E89C82E5B7A2E5889DE5A78BE58C96_Init();
    libNEXS_gt_E696B0E89C82E5B7A2E5BC80E590AFE585A5E4BEB5_Init();
    libNEXS_gt_E5BC80E590AFE887AAE58AA8E585A5E4BEB5_Init();
    libNEXS_gt_E585B3E997ADE887AAE58AA8E585A5E4BEB5_Init();
    libNEXS_gt_E89D97E899ABE8AEA1E695B0E4BCA0E692ADE99990E588B6_Init();
    libNEXS_gt_E89D97E899ABE58F91E5B084E789A9E69588E69E9CE8A2ABE4BDBFE794A8_Init();
    libNEXS_gt_E89C82E5B7A2E5B08FE59CB0E59BBEE4BCA0E8BE93E789B9E69588_Init();
    libNEXS_gt_E89C82E5B7A2E4BBB7E6A0BCE69BB4E58F98_Init();
    libNEXS_gt_E89C82E5B7A2E68A80E883BDE8A2ABE4BDBFE794A8_Init();
    libNEXS_gt_E89C82E5B7A2E68A80E883BDE58585E883BDE6ACA1E695B0E69BB4E58F98_Init();
    libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E4B88EE88A82E782B9E8BF9BE8A18CE7BB91E5AE9A_Init();
    libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E7949FE4BAA7_Init();
    libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E6ADBBE4BAA1_Init();
    libNEXS_gt_E7949FE4BAA7E5BBBAE7AD91E7BB91E5AE9AE88A82E782B9E691A7E6AF81_Init();
    libNEXS_gt_E5A19EE4BCAFE9B281E696AFE695B0E68DAEE6B581E58887E68DA2_Init();
    libNEXS_gt_E5A19EE4BCAFE9B281E696AFE695B0E68DAEE6B581E58585E883BD_Init();
    libNEXS_gt_E5A19EE4BCAFE9B281E696AFE695B0E68DAEE6B581E58585E883BDE5878FE5B091_Init();
    libNEXS_gt_E5A19EE4BCAFE9B281E696AFE4BABAE5B7A5E699BAE883BDE8AF86E588AB_Init();
    libNEXS_gt_E5A19EE4BCAFE9B281E696AFE59D91E98193E899ABE58585E883BDE58D87E7BAA7_Init();
    libNEXS_gt_E5A19EE4BCAFE9B281E696AFE59D91E98193E899ABE58585E883BDE58F96E6B688_Init();
    libNEXS_gt_E5A19EE4BCAFE9B281E696AFE59D91E98193E899ABE8A385E5A1AB_Init();
    libNEXS_gt_E998BFE5A588E4BCBDE5BBBAE7AD91E68EA7E588B6E4BABAE58FA3E58DA0E794A8_Init();
    libNEXS_gt_E998BFE5A588E4BCBDE5BBBAE7AD91E68EA7E588B6E58F96E6B688_Init();
    libNEXS_gt_E998BFE5A588E4BCBDE5BBBAE7AD91E68EA7E588B6E89C82E5B7A2E6909CE7B4A2_Init();
    libNEXS_gt_E6849FE69F93E88085E7989FE796ABE4BCA4E5AEB3_Init();
    libNEXS_gt_E7ACACE4B880E58FAAE7BAB3E6B395E8AEB8_Init();
    libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8007_Init();
    libNEXS_gt_E697A0E6A087E9A298E79A84E8A7A6E58F91E599A8008_Init();
    libNEXS_gt_E5A19EE4BCAFE9B281E696AFE4B8BBE5B7A2E4B88EE89C82E5B7A2E695B0E9878FE698BEE7A4BADebug_Init();
    libNEXS_gt_E89C82E5B7A2E5B08FE59CB0E59BBEDebug_Init();
    libNEXS_gt_E89C82E5B7A2E5B08FE59CB0E59BBEE68F90E7A4BADebug_Init();
    libNEXS_gt_E586B0E59D97E5889BE5BBBAE5B8B8E9A9BB_Init();
    libNEXS_gt_E89F91E89E82E694B6E8978FE5AEB6_Init();
    libNEXS_gt_E68998E9A9ACE696AFE58D87E7BAA7E7B3BBE7BB9F_Init();
    libNEXS_gt_E78BACE79CBCE5B7A8E4BABAE7B4A7E680A5E68A98E8B783_Init();
    libNEXS_gt_E586B0E586BBE78E8BE899ABE69D80E6ADBB_Init();
    libNEXS_gt_DUT_Karass_Init();
    libNEXS_gt_E58DA1E68B89E696AFE6ADBBE4BAA1E588A4E5AE9A_Init();
    libNEXS_gt_E58DA1E68B89E696AFE5889DE6ACA1E5A48DE6B4BBE588A4E5AE9A_Init();
    libNEXS_gt_E58DA1E68B89E696AFE5A48DE6B4BBE588A4E5AE9A_Init();
    libNEXS_gt_KarassE58DA1E68B89E696AFE58D87E7BAA7E9A1B9_Init();
    libNEXS_gt_E6B3BDE5B0BCE696AFE6B0B4E699B6E5BBBAE980A0E5AE8CE6AF95_Init();
    libNEXS_gt_E6B3BDE5B0BCE696AFE6B0B4E699B6E887AAE58AA8E998B2E5BEA1E8819AE58F98E68993E587BB_Init();
    libNEXS_gt_E6B3BDE5B0BCE696AFE6B0B4E699B6E58F8DE587BB_Init();
    libNEXS_gt_E689A7E694BFE5AE98E883BDE9878FE58F8DE89A80_Init();
    libNEXS_gt_E58DA1E68B89E696AFE4B88EE9AB98E7BAA7E58D95E4BD8DE8BF9BE585A5E59CB0E59BBE_Init();
    libNEXS_gt_E58DA1E68B89E696AFE58D95E4BD8DE68A98E8B783E9A29CE889B2_Init();
    libNEXS_gt_E58DA1E68B89E696AFE6ADBBE4BAA1_Init();
    libNEXS_gt_E69D80E7949FE4B89AE68AA5E58F96E587BA_Init();
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B14_Init();
    libNEXS_gt_E6A380E6B58BE588B0_Init();
    libNEXS_gt_E58DA1E68B89E696AFE8999AE7A9BAE8A7A6E587BBE997AAE78EB0_Init();
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B12_Init();
    libNEXS_gt_E6989FE781B5E69EA2E7BABDE699B6E4BD93E79FBFE58E8BE7BCA9_Init();
    libNEXS_gt_E6989FE781B5E69EA2E7BABDE9AB98E883BDE793A6E696AFE58E8BE7BCA9_Init();
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B16_Init();
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B17_Init();
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B18_Init();
    libNEXS_gt_E58FAFE4BBA5E983A8E7BDB2E98197E4B896E79FB3E7A291_Init();
    libNEXS_gt_E983A8E7BDB2E98197E4B896E79FB3E7A291_Init();
    libNEXS_gt_E98197E4B896E79FB3E7A291E9A29CE889B2_Init();
    libNEXS_gt_E5AE88E68AA4E88085E6ADBBE4BAA1E586B7E58DB4_Init();
    libNEXS_gt_E98197E4B896E7A5ADE59D9BE883BDE9878FE59B9EE5A48D_Init();
    libNEXS_gt_E9A38EE69AB4E5AEA3E8A880E781B5E883BDE9A38EE69AB4_Init();
    libNEXS_gt_E8999AE7A9BAE5B7A8E5838FE587BBE69D80E58D95E4BD8DE8BDACE58C96_Init();
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B15_Init();
    libNEXS_gt_DUT_Hanson_Init();
    libNEXS_gt_E58D95E4BD8DE5BC80E5A78BE6849FE69F93E5BA94E794A8_Init();
    libNEXS_gt_E795B8E58F98E4BD93E99DA2E69DBFE7949FE68890_Init();
    libNEXS_gt_E5A4AAE7A9BAE7AB99E883BDE9878FE88EB7E58F96_Init();
    libNEXS_gt_E6B189E6A3AEE5A881E69C9B1E5BC80E590AF_Init();
    libNEXS_gt_E6B189E6A3AEE5A881E69C9B2E5BC80E590AF_Init();
    libNEXS_gt_E697A0E5B0BDE6ADBBE781B5E883BDE9878FE6A380E6B58B_Init();
    libNEXS_gt_E6B189E6A3AEE5A881E69C9B3E5BC80E590AF_Init();
    libNEXS_gt_JinaraNormalStasisSlowBuffScale_Init();
    libNEXS_gt_JinaraNormalStasisBeam_FlashOn_Init();
    libNEXS_gt_JinaraNormalStasisBeam_FlashOff_Init();
    libNEXS_gt_JinaraRouteChoice_Init();
    libNEXS_gt_JinaraRouteChoiceHighLight_Init();
    libNEXS_gt_AbilityTransmissionJinaraRouteChoice_Init();
    libNEXS_gt_AbilityTransmissionJinaraScarletEmpowerMe_Init();
    libNEXS_gt_AbilityTransmissionJinaraScarletDeathFleet_Init();
    libNEXS_gt_AbilityTransmissionJinaraScarletUnitsSacrifice_Init();
    libNEXS_gt_AbilityTransmissionJinaraScarletUnitsTurn_Init();
    libNEXS_gt_AbilityTransmissionJinaraScarletSacrifice_Init();
    libNEXS_gt_AbilityTransmissionJinaraNormalDelayBoom_Init();
    libNEXS_gt_AbilityTransmissionJinaraNormalCallWarpPrism_Init();
    libNEXS_gt_AbilityTransmissionJinaraNormalRevive_Init();
    libNEXS_gt_AbilityTransmissionJinaraNormalUnitsSacrifice_Init();
    libNEXS_gt_AbilityTransmissionJinaraNormalPissed_Init();
    libNEXS_gt_AbilityTransmissionJinaraNormalSacrificeBuffUpgrade_Init();
    libNEXS_gt_JinaraMotherShipSpawn_Init();
    libNEXS_gt_JinaraMotherShipDeath_Init();
    libNEXS_gt_JinaraMotherShipGravityBombMark_Init();
    libNEXS_gt_JinaraMotherShipGravityTeleport_Init();
    libNEXS_gt_JinaraMotherShipLoadAB_Init();
    libNEXS_gt_JinaraMotherShipUnloadRB_Init();
    libNEXS_gt_JinaraMotherShipDyingUnLoad_Init();
    libNEXS_gt_UnLoadProbe_Init();
    libNEXS_gt_UnLoadSupplicant_Init();
    libNEXS_gt_UnLoadMonitor_Init();
    libNEXS_gt_UnLoadSlayer_Init();
    libNEXS_gt_UnLoadDarkTemplar_Init();
    libNEXS_gt_UnLoadColossus_Init();
    libNEXS_gt_UnLoadAscendant_Init();
    libNEXS_gt_UnLoadAvenger_Init();
    libNEXS_gt_UnLoadExtraUnits_Init();
    libNEXS_gt_UnLoadALL_Init();
    libNEXS_gt_InitJinaraApocalypticBeam_Init();
    libNEXS_gt_JinaraApocalypticBeamShake_Init();
    libNEXS_gt_JinaraApocalypticBeamController_Init();
    libNEXS_gt_SetJinaraDisplacementBeamSpeedDamage_Init();
    libNEXS_gt_JinaraBloodSoulSpawn_Init();
    libNEXS_gt_JinaraBloodSoulDeath_Init();
    libNEXS_gt_JinaraBloodSoulCopyAbilQ_Init();
    libNEXS_gt_JinaraBloodSoulCopyAbilE_Init();
    libNEXS_gt_JinaraBloodSoulCopyAbilR_Init();
    libNEXS_gt_JinaraBloodSoulCopyAbilD_Init();
    libNEXS_gt_JinaraBloodSoulDamageHeal_Init();
    libNEXS_gt_JinaraBloodSoulStasisBeamKill_Init();
    libNEXS_gt_JinaraNormalDeath_Init();
    libNEXS_gt_JinaraNormalRevive_Init();
    libNEXS_gt_JinaraNormalStasisFieldKill_Init();
    libNEXS_gt_JinaraNormalBuyBackCostAdjustment_Init();
    libNEXS_gt_JinaraCallWarpPrismTrigger_Init();
    libNEXS_gt_JinaraScarletRespawnTargetSet_Init();
    libNEXS_gt_JinaraScarletAltarComplete_Init();
    libNEXS_gt_JinaraScarletDeath_Init();
    libNEXS_gt_JinaraScarletRevive_Init();
    libNEXS_gt_JinaraScarletKillstoPower_Init();
    libNEXS_gt_JinaraScarletLethalSwipeShieldRefresh_Init();
    libNEXS_gt_JinaraScarletLethalSwipeShieldTakingDamage_Init();
    libNEXS_gt_JinaraScarletLethalSwipeShieldBreakdown_Init();
    libNEXS_gt_JinaraScarletUnitsTeammateHealResponse_Init();
    libNEXS_gt_JinaraScarletLightningStrikesTrigger_Init();
    libNEXS_gt_JinaraScarletStormStrikesTrigger_Init();
    libNEXS_gt_JinaraUnitsTurntoScarletApplySacrificeBuff_Init();
    libNEXS_gt_CallVoidRay_Init();
    libNEXS_gt_CallCarrier_Init();
    libNEXS_gt_CarrierHaveSupplicants_Init();
    libNEXS_gt_CallMotherShip_Init();
    libNEXS_gt_MothershipCrashCameraShake_Init();
    libNEXS_gt_JinaraScarlet_SoulAbsorption_Impact_Init();
    libNEXS_gt_JinaraScarlet_SoulAbsorption_Launch_Init();
    libNEXS_gt_JinaraScarlet_SoulAbsorption_ScarletUnitsBuff_Init();
    libNEXS_gt_SetJinaraEmpowerMeDuration_Init();
    libNEXS_gt_JinaraScarlet_EmpowerEnergyClear_Init();
    libNEXS_gt_JinaraScarlet_EmpowerAdd_Init();
    libNEXS_gt_JinaraScarlet_EmpowerRemove_Init();
    libNEXS_gt_JinaraScarlet_EmpowerUpdate_Init();
    libNEXS_gt_JinaraWarpPrismPhaseShiftRewind_Init();
    libNEXS_gt_JinaraUnitSacrificIncreaseUpgrade_Scale_Init();
    libNEXS_gt_JinaraUnitSacrificIncrease_Scale_Init();
    libNEXS_gt_JinaraColossusLockAttackGlaze_Init();
    libNEXS_gt_JinaraSupplicantShowBladeSwords_Init();
    libNEXS_gt_SupplicantWarpTrain_Init();
    libNEXS_gt_SupplicantActualTrain_Init();
    libNEXS_gt_SupplicantWarpFinish_Init();
    libNEXS_gt_SupplicantWarpCancel_Init();
    libNEXS_gt_UlrezajorAlarakEnterMap_Init();
    libNEXS_gt_JinaraUnitSacrificeInitialPointSet_Init();
    libNEXS_gt_JinaraUnitSacrificeViscous_Init();
    libNEXS_gt_JinaraUnitSacrificeSupplicantHeal_Init();
    libNEXS_gt_JinaraUnitSacrificeSlayerBuff_Init();
    libNEXS_gt_JinaraUnitSacrificeMonitorSweep_Init();
    libNEXS_gt_JinaraUnitSacrificeDarkTemplarImprison_Init();
    libNEXS_gt_JinaraUnitSacrificeColossusDamage_Init();
    libNEXS_gt_NiadraInfestorCorpseExplosionTrigger_Init();
    libNEXS_gt_NiadraCarrierTargetResponse_Init();
    libNEXS_gt_NiadraColossusApplyTempLife_Init();
    libNEXS_gt_NiadraColossusRemoveTempLife_Init();
    libNEXS_gt_NiadraArmorUpgrade_Init();
    libNEXS_gt_NiadraPsiGeneral_Init();
    libNEXS_gt_NiadraPsiBanelings_Init();
    libNEXS_gt_NiadraPsiInfestorCorpse_Init();
    libNEXS_gt_NiadraPickedGuardianShell_Init();
    libNEXS_gt_NiadraPickedChronoBoost_Init();
    libNEXS_gt_NiadraPickedGravityLift_Init();
    libNEXS_gt_NiadraPickedCloaked_Init();
    libNEXS_gt_NiadraPickedPsiStorm_Init();
    libNEXS_gt_NiadraUpgradePurchased_Init();
    libNEXS_gt_NiadraEvolSpreadClicked_Init();
    libNEXS_gt_NiadraEvolBehaviourClicked_Init();
    libNEXS_gt_NiadraEvolKillClicked_Init();
    libNEXS_gt_NiadraCellStormApply_Init();
    libNEXS_gt_E5858DE796ABE5B4A9E6BA83E88EB7E58F96E587BBE69D80_Init();
    libNEXS_gt_E8828CE4BD93E59D8FE6ADBBE4BCA4E5AEB3E58F8DE599AC_Init();
    libNEXS_gt_NiadraE5AFB9E8AF9DE6A186TooltipE38081ExitE58AA8E4BD9C_Init();
    libNEXS_gt_NiadraTooltipE5AE9EE4BE8B_Init();
    libNEXS_gt_E5AE9AE4BD8DE5ADB5E58C96E59CBA_Init();
    libNEXS_gt_E5BC80E5A78BE5ADB5E58C96E68A80E883BD_Init();
    libNEXS_gt_E5AF84E7949FE68EA2E69CBAE5889DE5A78BE5889BE5BBBA_Init();
    libNEXS_gt_E5AF84E7949FE68EA2E69CBAE98787E99B86E58AA8E4BD9C_Init();
    libNEXS_gt_E5AF84E7949FE68EA2E69CBAE5889DE5A78BE585B3E997AD_Init();
    libNEXS_gt_E5AF84E7949FE68EA2E69CBAE58F96E6B688E5BBBAE980A0E8BF94E8BF98_Init();
    libNEXS_gt_E58D95E4BD8DE6ADBBE4BAA1E7949FE789A9E8B4A8E9A29DE5A496E88EB7E58F96_Init();
    libNEXS_gt_E5AF84E7949FE58D95E4BD8DE7949FE789A9E8B4A8E88EB7E58F96_Init();
    libNEXS_gt_E5AF84E7949FE58D95E4BD8DE980A0E68890E4BCA4E5AEB3E7949FE789A9E8B4A8E88EB7E58F96_Init();
    libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E5909EE599ACE5AEBFE4B8BBE7949FE789A9E8B4A8E88EB7E58F96_Init();
    libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E5AF84E7949FE6A186E98089E8A686E79B96_Init();
    libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E5AF84E7949FE6A186E98089E58F96E6B688_Init();
    libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E88BB1E99B84E6ADBBE4BAA1_Init();
    libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E88BB1E99B84E587BAE7949F_Init();
    libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E88BB1E99B84E5A48DE6B4BB_Init();
    libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E5B9BCE899ABE58F98E5BDA2Debug_Init();
    libNEXS_gt_NiadraHeroCooldownReduction_Init();
    libNEXS_gt_NiadraHeroSelectLarva_Init();
    libNEXS_gt_NiadraHeroLv1_Init();
    libNEXS_gt_NiadraHeroLv2_Init();
    libNEXS_gt_NiadraHeroLv3_Init();
    libNEXS_gt_NiadraHeroLv4_Init();
    libNEXS_gt_NiadraHatcheryDoomed_Init();
    libNEXS_gt_NiadraHatcheryFinished_Init();
    libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E6AF8DE888B0E5AF84E7949FE888B1E5AEA4E9A29DE5A496E88EB7E58F96_Init();
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B22_Init();
    libNEXS_gt_E88FB2E5B0BCE5858BE696AFE99C87E68591E586B2E9948B23_Init();
    libNEXS_gt_E5B0BCE99B85E5BEB7E68B89E7868AE9BDBFE585BDE587BAE7949F_Init();
    libNEXS_gt_CovertOpsA_Init();
    libNEXS_gt_CovertOpsB_Init();
    libNEXS_gt_CovertOpsBattlecruiserAbility_Init();
    libNEXS_gt_CovertOpsGhostAbility1_Init();
    libNEXS_gt_CovertOpsGhostAbility2_Init();
    libNEXS_gt_CovertOpsGhostAbility3_Init();
    libNEXS_gt_CovertOpsLiberatorAbility_Init();
    libNEXS_gt_CovertOpsRavenAbility_Init();
    libNEXS_gt_CovertOpsTankAbility_Init();
    libNEXS_gt_CovertOps5minUpgrade_Init();
    libNEXS_gt_CovertOps10minUpgrade_Init();
    libNEXS_gt_CovertOps15minUpgrade_Init();
    libNEXS_gt_CovertOps20minUpgrade_Init();
    libNEXS_gt_CovertOpsATimer_Init();
    libNEXS_gt_CovertOpsA8minUpgrade_Init();
    libNEXS_gt_CovertOpsA10minUpgrade_Init();
    libNEXS_gt_CovertOpsA15minUpgrade_Init();
    libNEXS_gt_CovertOpsBTimer_Init();
    libNEXS_gt_CovertOpsB8minUpgrade_Init();
    libNEXS_gt_CovertOpsB10minUpgrade_Init();
    libNEXS_gt_CovertOpsB15minUpgrade_Init();
    libNEXS_gt_MobiusA_Init();
    libNEXS_gt_MobiusB_Init();
    libNEXS_gt_MobiusBansheeAbility_Init();
    libNEXS_gt_MobiusBattlecruiserAbility_Init();
    libNEXS_gt_MobiusMarauderAbility_Init();
    libNEXS_gt_MobiusMedicAbility_Init();
    libNEXS_gt_MobiusRavenAbility_Init();
    libNEXS_gt_MobiusSpectreAbility_Init();
    libNEXS_gt_MobiusSpectreIIAbility_Init();
    libNEXS_gt_MobiusThorAbility_Init();
    libNEXS_gt_MobiusVikingAbility_Init();
    libNEXS_gt_MobiusVultureAbility_Init();
    libNEXS_gt_Mobius5minUpgrade_Init();
    libNEXS_gt_Mobius10minUpgrade_Init();
    libNEXS_gt_Mobius15minUpgrade_Init();
    libNEXS_gt_Mobius20minUpgrade_Init();
    libNEXS_gt_MobiusATimer_Init();
    libNEXS_gt_MobiusA8minUpgrade_Init();
    libNEXS_gt_MobiusA10minUpgrade_Init();
    libNEXS_gt_MobiusBTimer_Init();
    libNEXS_gt_MobiusB8minUpgrade_Init();
    libNEXS_gt_MobiusB10minUpgrade_Init();
    libNEXS_gt_NerazimA_Init();
    libNEXS_gt_NerazimB_Init();
    libNEXS_gt_NerazimC_Init();
    libNEXS_gt_NerazimCorsairAbility_Init();
    libNEXS_gt_NerazimDarkArchonAbility1_Init();
    libNEXS_gt_NerazimDarkArchonAbility2_Init();
    libNEXS_gt_NerazimDTAbility_Init();
    libNEXS_gt_NerazimHTAbility_Init();
    libNEXS_gt_NerazimImmortalAbility_Init();
    libNEXS_gt_NerazimStalkerAbility_Init();
    libNEXS_gt_Nerazim5minUpgrade_Init();
    libNEXS_gt_Nerazim10minUpgrade_Init();
    libNEXS_gt_Nerazim15minUpgrade_Init();
    libNEXS_gt_Nerazim20minUpgrade_Init();
    libNEXS_gt_NerazimATimer_Init();
    libNEXS_gt_NerazimA8minUpgrade_Init();
    libNEXS_gt_NerazimA10minUpgrade_Init();
    libNEXS_gt_NerazimA15minUpgrade_Init();
    libNEXS_gt_NerazimBTimer_Init();
    libNEXS_gt_NerazimB8minUpgrade_Init();
    libNEXS_gt_NerazimB10minUpgrade_Init();
    libNEXS_gt_NerazimB15minUpgrade_Init();
    libNEXS_gt_NerazimCTimer_Init();
    libNEXS_gt_NerazimC8minUpgrade_Init();
    libNEXS_gt_NerazimC10minUpgrade_Init();
    libNEXS_gt_NerazimC15minUpgrade_Init();
    libNEXS_gt_NestA_Init();
    libNEXS_gt_NestB_Init();
    libNEXS_gt_NestDefilerAbility1_Init();
    libNEXS_gt_NestDefilerAbility2_Init();
    libNEXS_gt_NestLurkerAbility_Init();
    libNEXS_gt_NestQueenAbility1_Init();
    libNEXS_gt_NestQueenAbility2_Init();
    libNEXS_gt_Nest5minUpgrade_Init();
    libNEXS_gt_Nest10minUpgrade_Init();
    libNEXS_gt_Nest15minUpgrade_Init();
    libNEXS_gt_Nest20minUpgrade_Init();
    libNEXS_gt_NestATimer_Init();
    libNEXS_gt_NestA8minUpgrade_Init();
    libNEXS_gt_NestA10minUpgrade_Init();
    libNEXS_gt_NestA15minUpgrade_Init();
    libNEXS_gt_NestBTimer_Init();
    libNEXS_gt_NestB10minUpgrade_Init();
    libNEXS_gt_NestB15minUpgrade_Init();
    libNEXS_gt_TaldarimA_Init();
    libNEXS_gt_TaldarimB_Init();
    libNEXS_gt_TaldarimHTAbility1_Init();
    libNEXS_gt_TaldarimHTAbility2_Init();
    libNEXS_gt_TaldarimMothershipAbility_Init();
    libNEXS_gt_TaldarimMothershipCoreAbility_Init();
    libNEXS_gt_TaldarimSentryAbility_Init();
    libNEXS_gt_TaldarimStalkerAbility_Init();
    libNEXS_gt_TaldarimZealotAbility_Init();
    libNEXS_gt_Taldarim5minUpgrade_Init();
    libNEXS_gt_Taldarim10minUpgrade_Init();
    libNEXS_gt_Taldarim15minUpgrade_Init();
    libNEXS_gt_Taldarim20minUpgrade_Init();
    libNEXS_gt_TaldarimATimer_Init();
    libNEXS_gt_TaldarimA8minUpgrade_Init();
    libNEXS_gt_TaldarimA15minUpgrade_Init();
    libNEXS_gt_TaldarimBTimer_Init();
    libNEXS_gt_TaldarimB8minUpgrade_Init();
    libNEXS_gt_TaldarimB10minUpgrade_Init();
    libNEXS_gt_TaldarimB15minUpgrade_Init();
    libNEXS_gt_TaldarimB20minUpgrade_Init();
    libNEXS_gt_TaldarimB25minUpgrade_Init();
    libNEXS_gt_TaldarimB30minUpgrade_Init();
    libNEXS_gt_TaldarimB35minUpgrade_Init();
    libNEXS_gt_KelMorianA_Init();
    libNEXS_gt_KelMorianB_Init();
    libNEXS_gt_KelMorianAPCAbility_Init();
    libNEXS_gt_KelMorianRavenAbility_Init();
    libNEXS_gt_KelMorianNukeTrackAbility_Init();
    libNEXS_gt_KelMorian5minUpgrade_Init();
    libNEXS_gt_KelMorian10minUpgrade_Init();
    libNEXS_gt_KelMorian15minUpgrade_Init();
    libNEXS_gt_KelMorian20minUpgrade_Init();
    libNEXS_gt_KelMorianATimer_Init();
    libNEXS_gt_KelMorianA12minUpgrade_Init();
    libNEXS_gt_KelMorianA20minUpgrade_Init();
    libNEXS_gt_MechaA_Init();
    libNEXS_gt_MechaBroodLordAbility_Init();
    libNEXS_gt_MechaCorruptorAbility_Init();
    libNEXS_gt_MechaOverlordAbility_Init();
    libNEXS_gt_MechaViperAbility_Init();
    libNEXS_gt_Mecha5minUpgrade_Init();
    libNEXS_gt_Mecha10minUpgrade_Init();
    libNEXS_gt_Mecha15minUpgrade_Init();
    libNEXS_gt_Mecha20minUpgrade_Init();
    libNEXS_gt_MechaATimer_Init();
    libNEXS_gt_MechaA8minUpgrade_Init();
    libNEXS_gt_MechaA10minUpgrade_Init();
    libNEXS_gt_GoldenA_Init();
    libNEXS_gt_GoldenMothershipAbility_Init();
    libNEXS_gt_GoldenMothershipCoreAbility_Init();
    libNEXS_gt_GoldenWarpPrismAbility_Init();
    libNEXS_gt_Golden5minUpgrade_Init();
    libNEXS_gt_Golden10minUpgrade_Init();
    libNEXS_gt_Golden15minUpgrade_Init();
    libNEXS_gt_Golden20minUpgrade_Init();
    libNEXS_gt_GoldenATimer_Init();
    libNEXS_gt_GoldenA8minUpgrade_Init();
    libNEXS_gt_GoldenA15minUpgrade_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libNEXS_InitLib_completed = false;

void libNEXS_InitLib () {
    if (libNEXS_InitLib_completed) {
        return;
    }

    libNEXS_InitLib_completed = true;

    libNEXS_InitLibraries();
    libNEXS_InitVariables();
    libNEXS_InitTriggers();
}

