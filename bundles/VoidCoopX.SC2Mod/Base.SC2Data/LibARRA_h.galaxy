include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Library: Utilities - Triggers
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libARRA_ge__UnitDataType_Actor = 0;
const int libARRA_ge__UnitDataType_TextTag = 1;
const int libARRA_ge__UnitDataType_Point = 2;
const int libARRA_ge__UnitDataType_Ping = 3;
const int libARRA_ge_SearchMode_Units = 0;
const int libARRA_ge_SearchMode_Agressive = 1;
const int libARRA_ge_SearchMode_Detection = 2;
const int libARRA_ge_SearchMode_Ability = 3;
const int libARRA_ge_MonobattleUnitGroup_Disabled = 0;
const int libARRA_ge_MonobattleUnitGroup_Pacific = 1;
const int libARRA_ge_MonobattleUnitGroup_Danger = 2;
const int libARRA_ge_UT_Camera_Keys_Q = 0;
const int libARRA_ge_UT_Camera_Keys_W = 1;
const int libARRA_ge_UT_Camera_Keys_E = 2;
const int libARRA_ge_UT_Camera_Keys_A = 3;
const int libARRA_ge_UT_Camera_Keys_S = 4;
const int libARRA_ge_UT_Camera_Keys_D = 5;
const int libARRA_ge_UT_DevCommandTypes_Visual = 0;
const int libARRA_ge_UT_DevCommandTypes_Gamealtering = 1;
const int libARRA_ge_UT_DevCommandTypes_No = 2;
const int libARRA_ge_GraphStyle_Comparative = 0;
const int libARRA_ge_GraphStyle_Differential = 1;
const int libARRA_ge_DamageHeal_Damage = 0;
const int libARRA_ge_DamageHeal_Heal = 1;
const int libARRA_ge_ListenerType_Task = 0;
const int libARRA_ge_ListenerType_Tracker = 1;

// Constants
const int libARRA_gv_c_PINGMAXCOUNT = 3;
const fixed libARRA_gv_c_PINGRESETTIME = 2.0;
const fixed libARRA_gv_c_PINGSUPPRESSIONTIME = 0.25;
const fixed libARRA_gv_c_PINGLOCKOUTTIME = 5.0;
const string libARRA_gv_starCraftEventsEventTable = "SCEvent_Events";
const int libARRA_gv_cAbilityArmMagazine = 5;
const int libARRA_gv_cAbilityAttack = 6;
const int libARRA_gv_cAbilityAugment = 7;
const int libARRA_gv_cAbilityBehavior = 11;
const int libARRA_gv_cAbilityBuild = 12;
const int libARRA_gv_cAbilityBuildable = 13;
const int libARRA_gv_cAbilityEffectInstant = 14;
const int libARRA_gv_cAbilityEffectTarget = 15;
const int libARRA_gv_cAbilityMerge = 20;
const int libARRA_gv_cAbilityMergable = 21;
const int libARRA_gv_cAbilityMorph = 22;
const int libARRA_gv_cAbilityMove = 24;
const int libARRA_gv_cAbilityQueue = 26;
const int libARRA_gv_cAbilityRally = 27;
const int libARRA_gv_cAbilityStop = 33;
const int libARRA_gv_cAbilityTrain = 34;
const int libARRA_gv_cAbilityTransport = 35;
const int libARRA_gv_cEffectApplyBehavior = 6;
const int libARRA_gv_cEffectCreateHealer = 10;
const int libARRA_gv_cEffectCreatePersistent = 12;
const int libARRA_gv_cEffectCreateUnit = 14;
const int libARRA_gv_cEffectDamage = 15;
const int libARRA_gv_cEffectSearchArea = 18;
const int libARRA_gv_cEffectIssueOrder = 25;
const int libARRA_gv_cEffectLaunchMissile = 26;
const int libARRA_gv_cEffectModifyUnit = 28;
const int libARRA_gv_cEffectSet = 35;
const int libARRA_gv_cEffectSwitch = 36;
const int libARRA_gv_cEffectTeleport = 37;
const int libARRA_gv_cValidatorCombine = 1;
const int libARRA_gv_cValidatorPlayerReqirement = 30;
const int libARRA_gv_cRequirementEq = 5;
const int libARRA_gv_cRequirementOr = 8;
const int libARRA_gv_cRequirementGTE = 3;
const int libARRA_gv_cRequirementGT = 1;
const int libARRA_gv_cBehaviorBuff = 4;
const int libARRA_gv_cBehaviorCreep = 7;
const int libARRA_gv_cBehaviorSpawn = 13;
const int libARRA_gv_cONST_CACHE_SIZE = 1000;
const int libARRA_gv_pLAYERS = 15;
const int libARRA_gv_uT_HotkeyStoreLength = 10;
const int libARRA_gv_uT_TextTagPositionNormal = 6;
const int libARRA_gv_uT_TextTagPositionHidden = 7;
const int libARRA_gv_uT_MAXEMOTES = 50;
const int libARRA_gv_uT_DummyCustomValue = 35;
const int libARRA_gv_uT_DPS_MaxUnits = 100;
const int libARRA_gv_uT_DPS_CustomValueIndex = 34;
const int libARRA_gv_uT_DL_MaxUnits = 50;
const int libARRA_gv_maxHistogramEntries = 100;
const int libARRA_gv_maxGraphs = 5;
const int libARRA_gv_graphsTotalNodes = 100;
const string libARRA_gv_nPCALLY = "NPC-ALLY";
const string libARRA_gv_nPCENEMY = "NPC-ENEMY";
const string libARRA_gv_nPCNEUTRAL = "NPC-NEUTRAL";
const string libARRA_gv_nPCBONUS = "NPC-BONUS";
const string libARRA_gv_nPCHOSTILE = "NPC-HOSTILE";
const int libARRA_gv_stateUnitialized = 0;
const int libARRA_gv_stateActive = 2;
const int libARRA_gv_stateUndiscovered = 1;
const int libARRA_gv_stateCompleted = 3;
const int libARRA_gv_stateFailed = 4;
const int libARRA_gv_stateEnded = 5;

// Structures
struct libARRA_gs_AutoRevealerData {
    revealer[64] lv_revealers;
    region[64] lv_triggeringRegions;
    int[64] lv_triggeringPlayers;
    int lv_count;
};

struct libARRA_gs_UT_DL_DamageFormat {
    fixed lv_real;
    int lv_integer;
    string lv_unitType;
};

struct libARRA_gs_HistogramData {
    text[libARRA_gv_maxHistogramEntries + 1] lv_labels;
    int[libARRA_gv_maxHistogramEntries + 1] lv_data;
};

struct libARRA_gs_GraphsGeneral {
    bool lv_active;
    int lv_playerLeft;
    int lv_playerRight;
    int lv_teamLeft;
    int lv_teamRight;
    int lv_currentInterval;
    int lv_totalGraphs;
    int lv_intervals;
    int lv_container;
    int lv_currentNode;
};

struct libARRA_gs_GraphsData {
    int lv_graph;
    int lv_highFrame;
    int lv_title;
    string lv_scoreType;
    int lv_style;
    fixed lv_minimumValue;
    fixed lv_rangeBase;
    fixed lv_rangeIncrement;
    int lv_maxValue;
    int[3][7] lv_tempValues;
    int[3] lv_value;
    int lv_team;
};

// Variable Declarations
bool[16] libARRA_gv_unitTransmissionActive;
sound libARRA_gv_soundLinkAsMusic;
int libARRA_gv_soundLinkAsMusicCurrentlyPlaying;
bool libARRA_gv_soundLinkAsMusicLoopForever;
timer[17] libARRA_gv_pingResetTimer;
timer[17] libARRA_gv_pingSuppressionTimer;
timer[17] libARRA_gv_pingLockoutTimer;
int[17] libARRA_gv_pingRecentCount;
playergroup libARRA_gv_pingValidPlayers;
int libARRA_gv_pingPanelMinimapButton;
playergroup libARRA_gv_meleeSurrender_PlayersSurrendering;
playergroup[17] libARRA_gv_meleeSurrender_PlayersAnswered;
playergroup libARRA_gv_meleeSurrender_PlayersTried;
int[33] libARRA_gv_meleeSurrender_Dialog;
int[33] libARRA_gv_meleeSurrender_BtnYes;
int[33] libARRA_gv_meleeSurrender_BtnNo;
int[33] libARRA_gv_meleeSurrender_Title;
int libARRA_gv_meleeSurrender_FlashingPlayer;
unit libARRA_gv_transportUnit_Param;
point libARRA_gv_transportTargetPoint_Param;
point libARRA_gv_transportDespawnPoint_Param;
libARRA_gs_AutoRevealerData libARRA_gv_autoRevealers;
int libARRA_gv_cRequirementAnd;
int libARRA_gv_cRequirementCountUnit;
int libARRA_gv_cRequirementCountUpgrade;
string libARRA_gv_byPassUnits;
abilcmd libARRA_gv_bYPASS_SEARCH_ABILITY_COMMAND;
int libARRA_gv_sEARCHMODE;
int libARRA_gv_cACHE_TMPEFFECTS_SIZE;
string[1001] libARRA_gv_cACHE_TMPEFFECTS;
int libARRA_gv_cACHESIZE_WEAPONS;
int libARRA_gv_cACHESIZE_UPGRADES;
int libARRA_gv_cACHESIZE_EFFECTS;
int libARRA_gv_cACHESIZE_BEHAVIORS;
int libARRA_gv_cACHESIZE_ABILITIES;
int libARRA_gv_cACHESIZE_UNITS;
int libARRA_gv_cACHESIZE_REQUIREMENT;
string[libARRA_gv_cONST_CACHE_SIZE + 1] libARRA_gv_cACHE_WEAPONS;
string[libARRA_gv_cONST_CACHE_SIZE + 1] libARRA_gv_cACHE_REQUIREMENT;
string[libARRA_gv_cONST_CACHE_SIZE + 1] libARRA_gv_cACHE_UPGRADES;
string[libARRA_gv_cONST_CACHE_SIZE + 1] libARRA_gv_cACHE_BEHAVIORS;
string[libARRA_gv_cONST_CACHE_SIZE + 1] libARRA_gv_cACHE_EFFECTS;
string[libARRA_gv_cONST_CACHE_SIZE + 1] libARRA_gv_cACHE_ABILITIES;
string[libARRA_gv_cONST_CACHE_SIZE + 1] libARRA_gv_cACHE_UNITS;
string libARRA_gv_cACHE_DANGER_UNITS;
string libARRA_gv_cACHE_DANGER_ABILITIES;
string libARRA_gv_cACHE_DANGER_BEHAVIOR;
string libARRA_gv_cACHE_SAFE_UNITS;
string libARRA_gv_cACHE_SAFE_ABILITIES;
string libARRA_gv_cACHE_SAFE_BEHAVIOR;
playergroup libARRA_gv_startactiveplayers;
string[libARRA_gv_pLAYERS + 1] libARRA_gv_unitSelection;
string[libARRA_gv_pLAYERS + 1] libARRA_gv_mBRules;
playergroup[16] libARRA_gv_teams;
int libARRA_gv_utilityPlayer;
int libARRA_gv_uT_InfoDialog;
int libARRA_gv_uT_InfoButton;
playergroup libARRA_gv_uT_UI_Hidden;
playergroup libARRA_gv_uT_ButtonUsagePlayerGroup;
string[libARRA_gv_uT_HotkeyStoreLength + 1][3] libARRA_gv_uT_HotkeyToStoreButton;
string[libARRA_gv_uT_HotkeyStoreLength + 1][3] libARRA_gv_uT_HotkeyToStoreValue;
bool libARRA_gv_uT_GodMode;
bool libARRA_gv_uT_FastBuildCheat;
bool libARRA_gv_uT_EconomyTest;
string[libARRA_gv_uT_MAXEMOTES + 1] libARRA_gv_uT_SC_Emoticons;
string[libARRA_gv_uT_MAXEMOTES + 1] libARRA_gv_uT_CS_Emoticons;
int libARRA_gv_uT_Emote_Dialog;
int libARRA_gv_uT_Emote_CloseButton;
timer libARRA_gv_uT_SoundEmoteTimer;
fixed libARRA_gv_uT_SoundEmoteCooldownLength;
int libARRA_gv_uT_LighIndex;
int libARRA_gv_mIssilePlayer;
unitgroup libARRA_gv_uT_MissileCreators;
bool libARRA_gv_uT_Camera_CameraActive;
bool[7][3] libARRA_gv_uT_Camera_ActiveKeys;
fixed[3] libARRA_gv_uT_Camera_Rotation;
fixed[3] libARRA_gv_uT_Camera_AngleofAttack;
unit[21] libARRA_gv_uT_DummyUnits;
unitgroup libARRA_gv_uT_Dummies;
fixed[21][2] libARRA_gv_uT_DummyDamage;
timer[21][2] libARRA_gv_uT_DummyTimer;
unitgroup libARRA_gv_uT_DPS_UG;
unitgroup libARRA_gv_uT_DPS_UG_Summoned;
unit[libARRA_gv_uT_DPS_MaxUnits + 1] libARRA_gv_uT_DPS_Units;
fixed[libARRA_gv_uT_DPS_MaxUnits + 1][3] libARRA_gv_uT_DPS_Damage;
timer[libARRA_gv_uT_DPS_MaxUnits + 1][3] libARRA_gv_uT_DPS_Timer;
fixed[libARRA_gv_uT_DPS_MaxUnits + 1] libARRA_gv_uT_DPS_Avg;
revealer libARRA_gv_uT_Revealer;
bool libARRA_gv_uT_Revealed;
playergroup libARRA_gv_uT_PlayersWithNumbers;
playergroup libARRA_gv_uT_DL_LoggingPlayers;
int libARRA_gv_uT_DL_LogDialog;
int libARRA_gv_uT_DL_LogDialogItem;
int[3] libARRA_gv_uT_DL_PlayerData;
libARRA_gs_UT_DL_DamageFormat[libARRA_gv_uT_DL_MaxUnits + 1][2][3] libARRA_gv_uT_DL_Data;
int[21] libARRA_gv_uT_DevCommands;
bool libARRA_gv_uT_CheatUsed;
int libARRA_gv_uT_Graph_ButtonDialog;
int libARRA_gv_uT_Graph_Button;
libARRA_gs_GraphsGeneral libARRA_gv_graphsGeneral;
libARRA_gs_GraphsData[libARRA_gv_maxGraphs + 1] libARRA_gv_graphsData;
int[3][3] libARRA_gv_uT_Pie;
playergroup libARRA_gv_aF_SlimUI_PlayerGroup;
int[16] libARRA_gv_cU_MinimapAllyViewPing;
bool libARRA_gv_cU_MinimapAllyViewEnabled;
int libARRA_gv_pointsListsCreated;
int libARRA_gv_routesListsCreated;
point[16] libARRA_gv_playerStartPosition;
string[libARRA_gv_pLAYERS + 1] libARRA_gv_cACHE_DISARMED;
string[libARRA_gv_pLAYERS + 1] libARRA_gv_cACHE_ARMED;
string libARRA_gv_listTypes;
int libARRA_gv_tasksCreated;
int libARRA_gv_global;
int libARRA_gv_mission;
int libARRA_gv_amon;
int libARRA_gv_task;
int libARRA_gv_parent;
int libARRA_gv_eventListenersCreated;
int libARRA_gv_listener;
string libARRA_gv_emittedEvent;
int libARRA_gv_emittedTask;
int libARRA_gv_emittedTracker;
string libARRA_gv_emittedMessage;
string libARRA_gv_pERIODICEVENTS;
trigger libARRA_gv_pickedPeridocEventTrigger;
int libARRA_gv_periodicEventsCreated;
int libARRA_gv_triggeringPeriodicEvent;
trigger libARRA_gv_taskTimeoutTrigger;
fixed libARRA_gv_taskTimeoutDelay;
string libARRA_gv_tIMERTRACKERSLIST;
int libARRA_gv_timerTrackersCreated;
unitgroup libARRA_gv_pickedUnits;
point libARRA_gv_pickedPoint;
fixed libARRA_gv_pickedPrecision;
int libARRA_gv_tracker;
int libARRA_gv_unitTrackersCreated;
string libARRA_gv_tRACKERS;
string libARRA_gv_lOG;

// Function Declarations
playergroup libARRA_gf_HumanControllingPlayers (int lp_player);
playergroup libARRA_gf_HumanPlayers ();
void libARRA_gf_PlayUnitTransmission (string lp_transmission, unit lp_unit);
int libARRA_gf_DifficultyValueInt2 (int lp_casual, int lp_normal, int lp_hard, int lp_brutal);
fixed libARRA_gf_DifficultyValueFixed2 (fixed lp_casual, fixed lp_normal, fixed lp_hard, fixed lp_brutal);
string libARRA_gf_DifficultyValueVoidUnitType (string lp_casual, string lp_normal, string lp_hard, string lp_brutal);
bool libARRA_gf_DifficultyValueVoidBoolean (bool lp_casual, bool lp_normal, bool lp_hard, bool lp_brutal);
int libARRA_gf_DifficultyValueInt3 (int lp_easy, int lp_normal, int lp_hard);
fixed libARRA_gf_DifficultyValueFixed3 (fixed lp_easy, fixed lp_normal, fixed lp_hard);
string libARRA_gf_DifficultyValueSwarmUnitType (string lp_easy, string lp_normal, string lp_hard);
bool libARRA_gf_DifficultyValueSwarmBoolean (bool lp_easy, bool lp_normal, bool lp_hard);
void libARRA_gf_PlaySoundLinkasMusic (soundlink lp_soundLink, bool lp_loopForever, bool lp_unpauseSountrackAfter);
void libARRA_gf_StopSoundLinkCurrentlyPlayingasMusic ();
string libARRA_gf__UnitDataName2 (int lp_type, unit lp_unit, int lp_index);
void libARRA_gf_StoreActorForUnit (unit lp_unit, int lp_index, actor lp_actor);
actor libARRA_gf_ActorForUnit (unit lp_unit, int lp_index);
void libARRA_gf_StorePointForUnit (unit lp_unit, int lp_index, point lp_point);
point libARRA_gf_PointStoredForUnit (unit lp_unit, int lp_index);
void libARRA_gf_StorePingForUnit (unit lp_unit, int lp_index, int lp_ping);
int libARRA_gf_PingStoredForUnit (unit lp_unit, int lp_index);
void libARRA_gf_StoreTextTagForUnit (unit lp_unit, int lp_index, int lp_textTag);
int libARRA_gf_TextTagForUnit (unit lp_unit, int lp_index);
void libARRA_gf_PingPlay (int lp_pingType, int lp_player, point lp_pingLocation, int lp_gameUser, string lp_pingTargetType, point lp_pingTargetPosition, int lp_pingTargetOwner);
void libARRA_gf_PingPlayUnit (string lp_pingTargetType, point lp_pingTargetPosition, int lp_pingTargetOwner, int lp_player, int lp_gameUser);
void libARRA_gf_PingBeaconAdd (string lp_beaconEffect, point lp_location, int lp_player);
void libARRA_gf_PingMinimapButtonUpdate ();
void libARRA_gf_EnableDisablePingPanel (bool lp_enableDisable, playergroup lp_players);
void libARRA_gf_MeleeSurrender_AIWantToSurrender (int lp_player);
void libARRA_gf_MeleeSurrender_UpdateDialogs ();
point libARRA_gf_ValidatedPoint (point lp_point);
void libARRA_gf_PlayAnnouncerNumberSound (int lp_number, playergroup lp_players, fixed lp_volume);
void libARRA_gf_PlayTransmissionCueSound (playergroup lp_playerGroup);
void libARRA_gf_SetAllSoundChannelVolumesStandardTiming (int lp_mode, playergroup lp_players);
void libARRA_gf_OrderWorkerstoGatherNearbyResources (region lp_region, int lp_player);
void libARRA_gf_OrderTransporttoUnloadAllthenDespawn (unit lp_transport, point lp_targetPoint, point lp_despawnPoint);
void libARRA_gf_AutoRevealRegion (region lp_visibilityRegion, region lp_triggeringRegion, int lp_player);
bool libARRA_gf_FilterEnemyisExcluded (string lp_filter);
void libARRA_gf_ClearCache ();
void libARRA_gf_CacheUnit (int lp_player, string lp_unit, bool lp_scan);
void libARRA_gf_CheckAbilityCommand (int lp_player, string lp_ability, int lp_command);
void libARRA_gf_CacheUpgrade (int lp_player, string lp_upgrade, bool lp_scan);
void libARRA_gf_CacheAbility (int lp_player, string lp_ability, bool lp_scan);
void libARRA_gf_CacheWeapon (int lp_player, string lp_weapon);
void libARRA_gf_CacheBehavior (int lp_player, string lp_behavior);
void libARRA_gf_CacheEffect (int lp_player, string lp_effect);
void libARRA_gf_CacheValidator (int lp_player, string lp_validator);
void libARRA_gf_CacheRequirement (int lp_player, string lp_requirement);
void libARRA_gf_CacheRequirementNode (int lp_player, string lp_requirementNode);
bool libARRA_gf_ByPassBehavior (int lp_player, string lp_behavior);
bool libARRA_gf_ByPassEffect (int lp_player, string lp_effect);
bool libARRA_gf_ByPassAbility (int lp_player, string lp_ability);
bool libARRA_gf_UpgradeIsUsefulForPlayer (int lp_player, string lp_upgrade);
string libARRA_gf_GetUpgradeRace (string lp_upgrade);
bool libARRA_gf_UnitIsDanger (int lp_player, string lp_unit);
bool libARRA_gf_UnitisDetector (int lp_player, string lp_unitType);
bool libARRA_gf_AbilityIsDanger (int lp_player, string lp_ability);
bool libARRA_gf_AbilityIsDetector (int lp_player, string lp_ability);
bool libARRA_gf_BehaviorisDanger (int lp_player, string lp_behavior);
bool libARRA_gf_BehaviorisDetector (int lp_player, string lp_behavior);
bool libARRA_gf_BehaviorUsesAbilityCommand (int lp_player, string lp_behavior, abilcmd lp_abil);
bool libARRA_gf_Canbebuilton (unit lp_unit, point lp_point);
bool libARRA_gf_Canbebuiltonabranch (point lp_point, int lp_number);
void libARRA_gf_ResolveUnitAffectedUpgrades (int lp_player);
bool libARRA_gf_AbilityIsIgnored (int lp_player, string lp_ability);
text libARRA_gf_UTC_NameOfUnitType (string lp_pUnitType);
string libARRA_gf_UT_StageToString (int lp_pStage);
void libARRA_gf_UT_Rise (unit lp_pUnit);
string libARRA_gf_UT_SeparatedSubstring (string lp_pString, int lp_pN, string lp_pSeparator);
int libARRA_gf_UT_SingleHexToInt (string lp_pString);
void libARRA_gf_UT_DialogCounting (int lp_pFrom, int lp_pTo, fixed lp_pTime, int lp_pDialogLabel, text lp_pTextBefore, text lp_pTextAfter, playergroup lp_pPlayers);
int libARRA_gf_UT_1StringToInteger (string lp_pLetter);
int libARRA_gf_UT_3StringsToInteger (string lp_pString);
string libARRA_gf_UT_AddStringsInfront (int lp_pDigits, string lp_pString, fixed lp_pInputReal, int lp_pPrecision);
text libARRA_gf_UT_AddStringsInfronttext (int lp_pDigits, string lp_pString, int lp_pInputNumber);
string libARRA_gf_UT_FormatInteger (int lp_pNumber, string lp_pDividingSymbol);
text libARRA_gf_UT_RealSecondsIntoTimeFormat (fixed lp_pTimeSeconds);
color libARRA_gf_ProgressColor (int lp_minValue, int lp_maxValue, int lp_progress, color lp_color1, color lp_color2, color lp_color3, int lp_steps);
color libARRA_gf_UT_HexToColor (string lp_pString);
int libARRA_gf_UT_HexToInt (string lp_pString);
color libARRA_gf_UT_NewColor (int lp_pColorNumber);
playergroup libARRA_gf_GetTeamPlayers (int lp_team);
int libARRA_gf_GetPlayerTeam (int lp_player);
playergroup libARRA_gf_PlayersofRace (string lp_race);
void libARRA_gf_ShowUI (playergroup lp_players);
void libARRA_gf_HideUI (playergroup lp_players);
bool libARRA_gf_UT_HotkeyStore (bank lp_pBank, int lp_pPlayer);
void libARRA_gf_UT_HotkeyLoad (bank lp_pBank, int lp_pPlayer);
void libARRA_gf_UT_UpdateUnitInfo (unit lp_pUnit);
void libARRA_gf_UT_RemoveUnitInfo (unit lp_pUnit);
void libARRA_gf_EnableFastBuild (int lp_player);
void libARRA_gf_DisableFastBuild (int lp_player);
void libARRA_gf_UT_PostStringWithIcons (string lp_pString);
void libARRA_gf_UT_Init_Emoticons ();
string libARRA_gf_UT_ReplaceEmotes (string lp_pString);
void libARRA_gf_UT_DL_DialogCreate ();
void libARRA_gf_UT_DL_DialogUpdate (int lp_pPlayerData, int lp_pPlayerShow);
void libARRA_gf_UT_DL_AddHealingDamage (int lp_pIndex, int lp_pDamageHeal, int lp_pPlayer, fixed lp_pAdd_Amount);
int libARRA_gf_UT_DL_SumHealingDamage (int lp_pIndex, int lp_pDamageHeal, int lp_pPlayer);
void libARRA_gf_UT_DL_LogClear (int lp_pPlayer);
bool libARRA_gf_UT_DevCommandsActive (int lp_pDevCommandType, int lp_pPlayer);
void libARRA_gf_UT_Cheat ();
int libARRA_gf_HookUpDialogItemandshowforplayers (string lp_name, int lp_type, int lp_parent, playergroup lp_players);
void libARRA_gf_HistogramHorizontalCreate (color lp_pColor, structref<libARRA_gs_HistogramData> lp_pData, bool lp_pShowCounts, bool lp_pBackground, int lp_pCenter, int lp_pVertical, bool lp_pPercent, int lp_pTotal);
void libARRA_gf_HistogramVerticalCreate (color lp_pColor, structref<libARRA_gs_HistogramData> lp_pData, bool lp_pShowCounts, bool lp_pBackground, int lp_pCenter, int lp_pTotal, bool lp_pPercent);
void libARRA_gf_UT_Graph_DefineGraph (int lp_iD, text lp_title, string lp_string, string lp_scoreType, int lp_style, fixed lp_minimumValue, fixed lp_rangeBase, fixed lp_rangeIncrement);
void libARRA_gf_UT_Graph_UpdateDataDifferential (int lp_graph);
void libARRA_gf_UT_Graph_UpdateDataComparative (int lp_graph);
void libARRA_gf_UT_Graph_HideAllGraphsExcept (int lp_pGraph, int lp_pPlayer);
int libARRA_gf_UT_TotalDamageHeal (int lp_pPlayer, int lp_pDamageHeal);
void libARRA_gf_UT_CreatePieChartfromDamageLog (int lp_pPlayer, int lp_pOffsetX, int lp_pOffsetY, int lp_pAnchor, int lp_pColorShift);
void libARRA_gf_UT_CreatePieChart (int lp_pOffsetX, int lp_pOffsetY, int lp_pAnchor, int lp_pColorShift, text lp_pTitle, color lp_pTitleColor, text lp_pSubTitle, int lp_pPlayer, text lp_pLabel1, int lp_pDamage1, text lp_pLabel2, int lp_pDamage2, text lp_pLabel3, int lp_pDamage3, text lp_pLabel4, int lp_pDamage4, text lp_pLabel5, int lp_pDamage5, text lp_pLabel6, int lp_pDamage6, text lp_pLabel7, int lp_pDamage7, text lp_pLabel8, int lp_pDamage8, text lp_pLabel9, int lp_pDamage9, text lp_pLabel10, int lp_pDamage10, text lp_pLabel11, int lp_pDamage11, text lp_pLabel12, int lp_pDamage12, text lp_pLabel13, int lp_pDamage13, text lp_pLabel14, int lp_pDamage14, text lp_pLabel15, int lp_pDamage15);
color libARRA_gf_UT_NewColorOld (int lp_pColorNumber);
color libARRA_gf_UT_NewColorMuted (int lp_pColorNumber);
bool libARRA_gf_UT_LabelsTooClose (int lp_pIterX, int lp_pIterY, int lp_pBaseX, int lp_pBaseY);
bool libARRA_gf_UT_PercentsTooClose (int lp_pIterX, int lp_pIterY, int lp_pBaseX, int lp_pBaseY);
void libARRA_gf_CU_MinimapAllyViewInit ();
void libARRA_gf_ToggleAllyMinimapFrustrum (bool lp_enabled);
point libARRA_gf_Thenearestbuildablepointtothepoint (point lp_point, int lp_numberofscales);
point libARRA_gf_UT_FindPointWithPathingTo (point lp_vInitPoint, point lp_vTargetPoint);
string libARRA_gf_UT_PointXYToString (point lp_pPoint, string lp_pDelimiter, int lp_pPrecision);
point libARRA_gf_GetPoint (string lp_suffix, int lp_route);
string libARRA_gf_PointsSingle (string lp_suffix, int lp_index1);
string libARRA_gf_PointsSinglePoint (point lp_point);
string libARRA_gf_PointsRange (string lp_suffix, int lp_index1, int lp_index2);
string libARRA_gf_PointsAll (string lp_suffix);
string libARRA_gf_PointsString (string lp_suffix, string lp_spawns);
string libARRA_gf_Points (string lp_spawns);
string libARRA_gf_GetRoute (string lp_suffix, int lp_routeIndex);
string libARRA_gf_RoutesSingle (string lp_suffix, int lp_index);
string libARRA_gf_RoutesRange (string lp_suffix, int lp_index1, int lp_index2);
string libARRA_gf_RoutesAll (string lp_suffix);
string libARRA_gf_RoutesString (string lp_suffix, string lp_spawns);
string libARRA_gf_Routes (string lp_spawns);
point libARRA_gf_GetPlayerStartPosition (int lp_player);
void libARRA_gf_AddRegionByNameIfExists (region lp_sourceRegion, string lp_targetRegionName);
void libARRA_gf_AddRegionIfExists (region lp_sourceRegion, region lp_targetRegion);
void libARRA_gf_ClearArmedCache (int lp_player);
void libARRA_gf_Armunit (int lp_player, unit lp_unit);
void libARRA_gf_Disarmunit (int lp_player, unit lp_unit);
void libARRA_gf_ArmUnitType (int lp_player, string lp_unit);
void libARRA_gf_Disarmunittype (int lp_player, string lp_unit);
bool libARRA_gf_UnitTypeisArmed (int lp_player, string lp_unit);
bool libARRA_gf_UnitTypeisDisArmed (int lp_player, string lp_unit);
unitgroup libARRA_gf_GetResourcesNearPoint (point lp_point, fixed lp_radius, int lp_type);
bool libARRA_gf_CM_Resources_IsSaturated (unit lp_resourceNodeorTownHall);
void libARRA_gf_CM_Resources_FindWork (unit lp_worker, unit lp_townHall, fixed lp_workRadius);
bool libARRA_gf_UnitIsAntiAir (string lp_unit, int lp_player);
bool libARRA_gf_UnitIsAir (string lp_unit, int lp_player);
unitgroup libARRA_gf_UnitsInRegionWithSpecifiedTypes (int lp_player, string lp_units, region lp_region);
fixed libARRA_gf_CombinedPropertyofUnitGroup (unitgroup lp_unitGroup, int lp_unitProperty, bool lp_currentDefault);
void libARRA_gf_CopyBehaviorToMagazineAmmos (unit lp_unit, string lp_behavior);
bool libARRA_gf_UT_AreMorphUnits (string lp_pUnitTypeA, string lp_pUnitTypeB);
string libARRA_gf_GetUnitRace (unit lp_unit);
string libARRA_gf_GetUnitRace2 (string lp_unit);
int libARRA_gf_GetUnitCargoSize (unit lp_unit);
bool libARRA_gf_StructureIsFlying (unit lp_unit);
unit libARRA_gf_LowestVitalityUnitfromUnitGroup (unitgroup lp_canidates);
bool libARRA_gf_AnyUnitOfPlayerGroupInRegion (playergroup lp_playergroup, region lp_region);
bool libARRA_gf_AllUnitsFromUnitGroupInRegion (unitgroup lp_units, region lp_region);
string libARRA_gf_GetCardLayoutButtonForUnit (unit lp_unit, int lp_column, int lp_row, int lp_layout);
abilcmd libARRA_gf_GetCardLayoutAbilityCommandForUnit (unit lp_unit, int lp_column, int lp_row, int lp_layout);
bool libARRA_gf_IIF13 (int lp_condition);
point libARRA_gf_IIF7 (point lp_iF, point lp_eLSE);
region libARRA_gf_IIF11 (region lp_iF, region lp_eLSE);
int libARRA_gf_IIF8 (int lp_iF, int lp_eLSE);
string libARRA_gf_IIF4 (string lp_iF, string lp_eLSE);
unit libARRA_gf_IIF6 (unit lp_iF, unit lp_eLSE);
string libARRA_gf_IIF5 (string lp_iF, string lp_iF2);
string libARRA_gf_IIF12 (bool lp_condition, string lp_iF, string lp_iF2);
string libARRA_gf_IIF (bool lp_condition, string lp_iF, string lp_eLSE);
string libARRA_gf_IIF10 (int lp_condition, string lp_iF, string lp_eLSE);
int libARRA_gf_IIF2 (bool lp_condition, int lp_iF, int lp_eLSE);
int libARRA_gf_IIF9 (int lp_condition, int lp_iF, int lp_eLSE);
string libARRA_gf_IIF3 (bool lp_condition, string lp_iF, string lp_eLSE);
string libARRA_gf_ListGetType (string lp_list);
void libARRA_gf_ListSetType (string lp_list, string lp_newType);
void libARRA_gf_ListDestroy (string lp_list);
void libARRA_gf_ListSort (string lp_sortableList, string lp_prriorityList);
void libARRA_gf_ListCreate (string lp_list);
void libARRA_gf_ListClear (string lp_list);
void libARRA_gf_ListPopBack (string lp_list);
int libARRA_gf_ListSize (string lp_list);
bool libARRA_gf_ListIsEmpty (string lp_list);
string libARRA_gf_ListGetDatabaseName (string lp_arrayName, int lp_index);
void libARRA_gf_ListCreateIfNotExists (string lp_list);
bool libARRA_gf_ListIsExist (string lp_list);
region libARRA_gf_ListRegionGet (string lp_list, int lp_index);
int libARRA_gf_ListRegionIndexOf (string lp_list, region lp_value);
bool libARRA_gf_ListRegionIncludes (string lp_list, region lp_value);
void libARRA_gf_ListRegionPush (string lp_list, region lp_value);
void libARRA_gf_ListRegionSet (string lp_list, int lp_index, region lp_value);
void libARRA_gf_ListRegionInclude (string lp_list, region lp_value);
void libARRA_gf_ListRegionInsertAt (string lp_list, int lp_index, region lp_value);
void libARRA_gf_ListRegionRemoveAt (string lp_list, int lp_index);
void libARRA_gf_ListRegionExclude (string lp_list, region lp_value);
void libARRA_gf_MapRegionSet (string lp_unit, string lp_index, region lp_actor);
region libARRA_gf_MapRegionGet (string lp_unit, string lp_index);
string libARRA_gf_MapRegionIndexes (string lp_unit);
bool libARRA_gf_MapRegionIncludes (string lp_unit, string lp_index);
void libARRA_gf_MapRevealerSet (string lp_unit, string lp_index, revealer lp_actor);
revealer libARRA_gf_MapRevealerGet (string lp_unit, string lp_index);
string libARRA_gf_MapRevealerIndexes (string lp_unit);
bool libARRA_gf_MapRevealerIncludes (string lp_unit, string lp_index);
string libARRA_gf_MapPingIndexes (string lp_unit);
void libARRA_gf_MapPingSet (string lp_unit, string lp_index, int lp_actor);
int libARRA_gf_MapPingGet (string lp_unit, string lp_index);
bool libARRA_gf_MapPingIncludes (string lp_unit, string lp_index);
void libARRA_gf_MapActorSet (string lp_unit, string lp_index, actor lp_actor);
actor libARRA_gf_MapActorGet (string lp_unit, string lp_index);
string libARRA_gf_MapActorIndexes (string lp_unit);
bool libARRA_gf_MapActorIncludes (string lp_unit, string lp_index);
void libARRA_gf_MapUnitSet (string lp_map, string lp_index, unit lp_actor);
unit libARRA_gf_MapUnitGet (string lp_map, string lp_index);
string libARRA_gf_MapUnitIndexes (string lp_unit);
bool libARRA_gf_MapUnitIncludes (string lp_unit, string lp_index);
unitgroup libARRA_gf_ListUnitGroupGet (string lp_list, int lp_index);
int libARRA_gf_ListUnitGroupIndexOf (string lp_list, unitgroup lp_value);
bool libARRA_gf_ListUnitGroupIncludes (string lp_list, unitgroup lp_value);
void libARRA_gf_ListUnitGroupPush (string lp_list, unitgroup lp_value);
void libARRA_gf_ListUnitGroupSet (string lp_list, int lp_index, unitgroup lp_value);
void libARRA_gf_ListUnitGroupInclude (string lp_list, unitgroup lp_value);
void libARRA_gf_ListUnitGroupInsertAt (string lp_list, int lp_index, unitgroup lp_value);
void libARRA_gf_ListUnitGroupRemoveAt (string lp_list, int lp_index);
void libARRA_gf_ListUnitGroupExclude (string lp_list, unitgroup lp_value);
void libARRA_gf_MapUnitGroupSet (string lp_map, string lp_index, unitgroup lp_actor);
unitgroup libARRA_gf_MapUnitGroupGet (string lp_map, string lp_index);
string libARRA_gf_MapUnitGroupIndexes (string lp_unit);
bool libARRA_gf_MapUnitGroupIncludes (string lp_unit, string lp_index);
void libARRA_gf_MapTimerSet (string lp_map, string lp_index, timer lp_actor);
timer libARRA_gf_MapTimerGet (string lp_map, string lp_index);
string libARRA_gf_MapTimerIndexes (string lp_unit);
bool libARRA_gf_MapTimerIncludes (string lp_unit, string lp_index);
void libARRA_gf_MapTriggerSet (string lp_map, string lp_index, trigger lp_actor);
trigger libARRA_gf_MapTriggerGet (string lp_map, string lp_index);
string libARRA_gf_MapTriggerIndexes (string lp_unit);
bool libARRA_gf_MapTriggerIncludes (string lp_unit, string lp_index);
void libARRA_gf_MapObjectiveSet (string lp_map, string lp_index, int lp_actor);
int libARRA_gf_MapObjectiveGet (string lp_map, string lp_index);
string libARRA_gf_MapObjectiveIndexes (string lp_unit);
bool libARRA_gf_MapObjectiveIncludes (string lp_unit, string lp_index);
void libARRA_gf_MapTextSet (string lp_map, string lp_index, text lp_actor);
text libARRA_gf_MapTextGet (string lp_map, string lp_index);
string libARRA_gf_MapTextIndexes (string lp_unit);
bool libARRA_gf_MapTextIncludes (string lp_unit, string lp_index);
fixed libARRA_gf_ListRealGet (string lp_list, int lp_index);
int libARRA_gf_ListRealIndexOf (string lp_list, fixed lp_value);
bool libARRA_gf_ListRealIncludes (string lp_list, fixed lp_value);
void libARRA_gf_ListRealSet (string lp_list, int lp_index, fixed lp_value);
void libARRA_gf_ListRealPush (string lp_list, fixed lp_value);
void libARRA_gf_ListRealInclude (string lp_list, fixed lp_value);
void libARRA_gf_ListRealInsertAt (string lp_list, int lp_index, fixed lp_value);
void libARRA_gf_ListRealRemoveAt (string lp_list, int lp_index);
void libARRA_gf_ListRealExclude (string lp_list, fixed lp_value);
void libARRA_gf_MapRealSet (string lp_map, string lp_index, fixed lp_actor);
fixed libARRA_gf_MapRealGet (string lp_map, string lp_index);
string libARRA_gf_MapRealIndexes (string lp_unit);
bool libARRA_gf_MapRealIncludes (string lp_unit, string lp_index);
void libARRA_gf_ListIntCopy (string lp_source, string lp_target);
int libARRA_gf_ListIntGet (string lp_list, int lp_index);
int libARRA_gf_ListIntIndexOf (string lp_list, int lp_value);
bool libARRA_gf_ListIntIncludes (string lp_list, int lp_value);
void libARRA_gf_ListIntSet (string lp_list, int lp_index, int lp_value);
void libARRA_gf_ListIntPush (string lp_list, int lp_value);
void libARRA_gf_ListIntInclude (string lp_list, int lp_value);
void libARRA_gf_ListIntInsertAt (string lp_list, int lp_index, int lp_value);
void libARRA_gf_ListIntRemoveAt (string lp_list, int lp_index);
void libARRA_gf_ListIntExclude (string lp_list, int lp_value);
void libARRA_gf_MapIntSet (string lp_map, string lp_index, int lp_actor);
int libARRA_gf_MapIntGet (string lp_map, string lp_index);
string libARRA_gf_MapIntIndexes (string lp_unit);
bool libARRA_gf_MapIntIncludes (string lp_unit, string lp_index);
text libARRA_gf_ListStringtoText (string lp_list);
void libARRA_gf_ListStringCopy (string lp_source, string lp_target);
string libARRA_gf_ListStringGet (string lp_list, int lp_index);
int libARRA_gf_ListStringIndexOf (string lp_list, string lp_value);
bool libARRA_gf_ListStringIncludes (string lp_list, string lp_value);
void libARRA_gf_ListStringSet (string lp_list, int lp_index, string lp_value);
void libARRA_gf_ListStringPush (string lp_list, string lp_addedValue);
void libARRA_gf_ListStringInclude (string lp_list, string lp_addedValue);
void libARRA_gf_ListStringInsertAt (string lp_list, int lp_index, string lp_value);
void libARRA_gf_ListStringRemoveAt (string lp_list, int lp_index);
void libARRA_gf_ListStringExclude (string lp_list, string lp_value);
void libARRA_gf_MapStringSet (string lp_map, string lp_index, string lp_actor);
void libARRA_gf_MapStringUnset (string lp_map, string lp_index);
string libARRA_gf_MapStringGet (string lp_map, string lp_index);
string libARRA_gf_MapStringIndexes (string lp_unit);
bool libARRA_gf_MapStringIncludes (string lp_unit, string lp_index);
abilcmd libARRA_gf_ListAbilCmdGet (string lp_list, int lp_index);
int libARRA_gf_ListAbilCmdIndexOf (string lp_list, abilcmd lp_value);
bool libARRA_gf_ListAbilCmdIncludes (string lp_list, abilcmd lp_value);
void libARRA_gf_ListAbilCmdSet (string lp_list, int lp_index, abilcmd lp_value);
void libARRA_gf_ListAbilCmdPush (string lp_list, abilcmd lp_value);
void libARRA_gf_ListAbilCmdInclude (string lp_list, abilcmd lp_value);
void libARRA_gf_ListAbilCmdInsertAt (string lp_list, int lp_index, abilcmd lp_value);
void libARRA_gf_ListAbilCmdRemoveAt (string lp_list, int lp_index);
void libARRA_gf_ListAbilCmdExclude (string lp_list, abilcmd lp_value);
point libARRA_gf_ListPointGet (string lp_list, int lp_index);
int libARRA_gf_ListPointIndexOf (string lp_list, point lp_value);
bool libARRA_gf_ListPointIncludes (string lp_list, point lp_value);
void libARRA_gf_ListPointSet (string lp_list, int lp_index, point lp_value);
void libARRA_gf_ListPointPush (string lp_list, point lp_addedValue);
void libARRA_gf_ListPointInclude (string lp_list, point lp_value);
void libARRA_gf_ListPointInsertAt (string lp_list, int lp_index, point lp_value);
void libARRA_gf_ListPointRemoveAt (string lp_list, int lp_index);
void libARRA_gf_ListPointExclude (string lp_list, point lp_value);
void libARRA_gf_MapPointSet (string lp_unit, string lp_index, point lp_actor);
point libARRA_gf_MapPointGet (string lp_unit, string lp_index);
string libARRA_gf_MapPointIndexes (string lp_unit);
bool libARRA_gf_MapPointIncludes (string lp_unit, string lp_index);
void libARRA_gf_LOGTask (int lp_task);
string libARRA_gf_TaskToString (int lp_task);
void libARRA_gf_SetTriggeringTask (int lp_task);
void libARRA_gf_CreateTask (string lp_id);
void libARRA_gf_TaskFree (int lp_task);
void libARRA_gf_TaskRun (int lp_task, trigger lp_trigger, bool lp_wait);
void libARRA_gf_TaskIncrementValue (int lp_task, string lp_index);
void libARRA_gf_TaskIncreaseValueInt (int lp_task, string lp_index, int lp_value);
void libARRA_gf_TaskIncreaseValueReal (int lp_task, string lp_index, fixed lp_value);
string libARRA_gf_TaskType (int lp_task);
int libARRA_gf_TaskParent (int lp_task);
int libARRA_gf_TaskTeam (int lp_task);
int libARRA_gf_TaskState (int lp_task);
bool libARRA_gf_TaskActive (int lp_task);
void libARRA_gf_TaskStart (int lp_task);
void libARRA_gf_TaskComplete (int lp_task);
void libARRA_gf_TaskFail (int lp_task);
void libARRA_gf_TaskIncreaseProgress (int lp_task);
void libARRA_gf_TaskIncreaseFail (int lp_task);
void libARRA_gf_TaskIncreaseGoal (int lp_task);
int libARRA_gf_TaskGoal (int lp_task);
int libARRA_gf_TaskProgress (int lp_task);
int libARRA_gf_TaskFails (int lp_task);
void libARRA_gf_TaskUpdateObjective (int lp_task);
text libARRA_gf_TaskObjectiveText (int lp_objective2);
void libARRA_gf_TaskObjective (int lp_task, string lp_objective, bool lp_objectiveType);
void libARRA_gf_ListernerCreate (int lp_subscriber, int lp_observableType, int lp_observable, string lp_event, trigger lp_trigger);
void libARRA_gf_ListenerOff (int lp_listener);
void libARRA_gf_ListenerOn (int lp_listener);
string libARRA_gf_EventListenerstoString (string lp_eventString);
string libARRA_gf_GetMessageParameter (string lp_index);
void libARRA_gf_TrackerEmit (int lp_tracker, string lp_event, string lp_message);
void libARRA_gf_TaskEmit (int lp_task, string lp_event, string lp_message);
void libARRA_gf_Emit (int lp_task, int lp_type, string lp_event, string lp_message);
void libARRA_gf_TaskOnTask (int lp_thisTask, int lp_observableTask, string lp_event, trigger lp_trigger);
void libARRA_gf_TaskOnTracker (int lp_thisTask, int lp_observableTracker, string lp_event, trigger lp_trigger);
void libARRA_gf_TaskOn (int lp_thisTask, string lp_event, trigger lp_trigger);
void libARRA_gf_RunMissionVictorySequence4 (int lp_task, fixed lp_period, trigger lp_trigger);
void libARRA_gf_RunMissionVictorySequence5 (int lp_periodic);
int libARRA_gf_TriggeringPeriodic ();
void libARRA_gf_RunMissionVictorySequence6 (int lp_task, fixed lp_delay, trigger lp_trigger);
void libARRA_gf_RunMissionVictorySequence7 (int lp_task, fixed lp_delay, trigger lp_completeTrigger);
void libARRA_gf_TaskTimer (int lp_task, string lp_index, fixed lp_delay, trigger lp_trigger);
void libARRA_gf_TrackerCreateUnit (unit lp_unit, string lp_id);
void libARRA_gf_TrackerCreate (unitgroup lp_units, string lp_id);
void libARRA_gf_TaskEmergency (int lp_task, region lp_region, trigger lp_trigger);
string libARRA_gf_StringForTask (int lp_unit, string lp_index);
fixed libARRA_gf_RealForTask (int lp_unit, string lp_index);
int libARRA_gf_IntegerForTask (int lp_unit, string lp_index);
region libARRA_gf_RegionForTask (int lp_unit, string lp_index);
text libARRA_gf_TextForTask (int lp_unit, string lp_index);
unit libARRA_gf_UnitForTask (int lp_unit, string lp_index);
actor libARRA_gf_ActorForTask (int lp_unit, string lp_index);
point libARRA_gf_PointStoredForTask (int lp_unit, string lp_index);
int libARRA_gf_PingStoredForTask (int lp_unit, string lp_index);
revealer libARRA_gf_RevealerStoredForTask (int lp_unit, string lp_index);
unitgroup libARRA_gf_UnitGroupStoredForTask (int lp_unit, string lp_index);
trigger libARRA_gf_TriggerStoredForTask (int lp_unit, string lp_index);
int libARRA_gf_ObjectiveStoredForTask (int lp_unit, string lp_index);
timer libARRA_gf_TimerStoredForTask (int lp_unit, string lp_index);
string libARRA_gf_StringForTask2 (int lp_unit, string lp_index);
fixed libARRA_gf_RealForTask2 (int lp_unit, string lp_index);
int libARRA_gf_IntegerForTask2 (int lp_unit, string lp_index);
region libARRA_gf_RegionForTask2 (int lp_unit, string lp_index);
text libARRA_gf_TextForTask2 (int lp_unit, string lp_index);
unit libARRA_gf_UnitForTask2 (int lp_unit, string lp_index);
actor libARRA_gf_ActorForTask2 (int lp_unit, string lp_index);
point libARRA_gf_PointStoredForTask2 (int lp_unit, string lp_index);
int libARRA_gf_PingStoredForTask2 (int lp_unit, string lp_index);
revealer libARRA_gf_RevealerStoredForTask2 (int lp_unit, string lp_index);
unitgroup libARRA_gf_UnitGroupStoredForTask2 (int lp_unit, string lp_index);
trigger libARRA_gf_TriggerStoredForTask2 (int lp_unit, string lp_index);
int libARRA_gf_ObjectiveStoredForTask2 (int lp_unit, string lp_index);
timer libARRA_gf_TimerStoredForTask2 (int lp_unit, string lp_index);
void libARRA_gf_StoreStringForTask (int lp_unit, string lp_index, string lp_actor);
void libARRA_gf_StoreRealForTask (int lp_unit, string lp_index, fixed lp_actor);
void libARRA_gf_StoreIntegerForTask (int lp_unit, string lp_index, int lp_actor);
void libARRA_gf_StoreRegionForTask (int lp_unit, string lp_index, region lp_actor);
void libARRA_gf_StoreTextForTask (int lp_unit, string lp_index, text lp_actor);
void libARRA_gf_StoreUnitForTask (int lp_task, string lp_index, unit lp_unit);
void libARRA_gf_StoreActorForTask (int lp_unit, string lp_index, actor lp_actor);
void libARRA_gf_StorePointForTask (int lp_unit, string lp_index, point lp_point);
void libARRA_gf_StorePingForTask (int lp_unit, string lp_index, int lp_ping);
void libARRA_gf_StoreRevealerForTask (int lp_unit, string lp_index, revealer lp_ping);
void libARRA_gf_StoreUnitGroupForTask (int lp_task, string lp_index, unitgroup lp_actor);
void libARRA_gf_StoreTriggerForTask (int lp_task, string lp_index, trigger lp_actor);
void libARRA_gf_StoreObjectiveForTask (int lp_task, string lp_index, int lp_actor);
void libARRA_gf_StoreObjectiveForTask2 (int lp_task, string lp_index, timer lp_timer);
void libARRA_gf_LOGPoint (point lp_value);
void libARRA_gf_LOGString (string lp_value);
void libARRA_gf_LOGAbilCmd (abilcmd lp_lOG);
void libARRA_gf_LOGInteger (int lp_lOG);
void libARRA_gf_LOGUpgrade (string lp_lOG);
void libARRA_gf_LOGUnit (string lp_lOG);
void libARRA_gf_LOGUnitGroup (unitgroup lp_lOG);
void libARRA_gf_LOGReal (fixed lp_lOG);
void libARRA_gf_LOGTrigger (trigger lp_lOG);
void libARRA_gf_LOGListInt (string lp_list);
void libARRA_gf_LOGListString (string lp_list);
void libARRA_gf_LOGListAbilCmd (string lp_list);
void libARRA_gf_LOGListPoint (string lp_list);

// Trigger Declarations
trigger libARRA_gt_PingUsed;
trigger libARRA_gt_PingResetTimerExprires;
trigger libARRA_gt_PingPanelAutoDisable;
trigger libARRA_gt_MeleeSurrender_Surrender;
trigger libARRA_gt_MeleeSurrender_SurrenderClickedButton;
trigger libARRA_gt_MeleeSurrender_FlashDialog;
trigger libARRA_gt_StarCraftEvents;
trigger libARRA_gt_TransportController;
trigger libARRA_gt_AutoRevealRegionController;
trigger libARRA_gt_UT_InfoSave;
trigger libARRA_gt_UT_Info;
trigger libARRA_gt_UT_InfoButton;
trigger libARRA_gt_UT_InfoCreate;
trigger libARRA_gt_UT_UI;
trigger libARRA_gt_UT_UI_CtrlH;
trigger libARRA_gt_UT_ButtonMonitor;
trigger libARRA_gt_UT_ButtonUsage;
trigger libARRA_gt_UT_HotkeyChange;
trigger libARRA_gt_UT_Godmode;
trigger libARRA_gt_UT_Godmode_unit_created;
trigger libARRA_gt_UT_UnitInfo;
trigger libARRA_gt_UT_UnitInfoUpdate;
trigger libARRA_gt_UT_FastConstruction;
trigger libARRA_gt_UT_FastTrain;
trigger libARRA_gt_UT_FastResearch;
trigger libARRA_gt_UT_FastArrm;
trigger libARRA_gt_UT_FastRevive;
trigger libARRA_gt_UT_FastBuild;
trigger libARRA_gt_UT_ToggleEco;
trigger libARRA_gt_UT_EconomyValue;
trigger libARRA_gt_UT_WorkerSaturation;
trigger libARRA_gt_UT_ListEmotes;
trigger libARRA_gt_UT_Emote_ButtonClicked;
trigger libARRA_gt_UpgradeChanged;
trigger libARRA_gt_UT_Debug;
trigger libARRA_gt_AbilityUsed;
trigger libARRA_gt_UnitCreated;
trigger libARRA_gt_UnitDied;
trigger libARRA_gt_UnitRevived;
trigger libARRA_gt_EffectUsed;
trigger libARRA_gt_BehaviorChanged;
trigger libARRA_gt_EffectDealingDamage;
trigger libARRA_gt_UT_Trace;
trigger libARRA_gt_UT_Tracing;
trigger libARRA_gt_UT_DeTracing;
trigger libARRA_gt_UT_CopyPaste;
trigger libARRA_gt_UT_CTRLC;
trigger libARRA_gt_UT_CTRLV;
trigger libARRA_gt_UT_PathCheck;
trigger libARRA_gt_UT_PathCheckTAB;
trigger libARRA_gt_UT_Light;
trigger libARRA_gt_UT_Plus;
trigger libARRA_gt_UT_Minus;
trigger libARRA_gt_UT_MissileMovers;
trigger libARRA_gt_UT_MissileCreated;
trigger libARRA_gt_UT_Height;
trigger libARRA_gt_UT_AttackSpeed;
trigger libARRA_gt_UT_Life;
trigger libARRA_gt_UT_Energy;
trigger libARRA_gt_UT_MovementSpeed;
trigger libARRA_gt_UT_Acceleration;
trigger libARRA_gt_UT_Range;
trigger libARRA_gt_UT_ARange;
trigger libARRA_gt_UT_Armor;
trigger libARRA_gt_UT_TintColor;
trigger libARRA_gt_UT_Scale;
trigger libARRA_gt_UT_TimeScale;
trigger libARRA_gt_UT_ActorMsg;
trigger libARRA_gt_UT_AirGround;
trigger libARRA_gt_UT_Camera_TurnOnOff;
trigger libARRA_gt_UT_Camera_Reset;
trigger libARRA_gt_UT_Camera_Top;
trigger libARRA_gt_UT_Camera_KeyUp;
trigger libARRA_gt_UT_Camera_KeyDown;
trigger libARRA_gt_UT_Camera_PeriodicUpdate;
trigger libARRA_gt_UT_Dummy;
trigger libARRA_gt_UT_DummyTakesDamage;
trigger libARRA_gt_UT_DummyUpdate;
trigger libARRA_gt_UT_DummyDestroyed;
trigger libARRA_gt_UT_DPS;
trigger libARRA_gt_UT_DPS_Stop;
trigger libARRA_gt_UT_DPS_DealsDamage;
trigger libARRA_gt_UT_DPS_Summon;
trigger libARRA_gt_UT_DPS_Dies;
trigger libARRA_gt_UT_DPS_PauseGlobal;
trigger libARRA_gt_UT_Vision;
trigger libARRA_gt_UT_Numberstoggle;
trigger libARRA_gt_UT_NumbersDamage;
trigger libARRA_gt_UT_NumbersHeal;
trigger libARRA_gt_UT_DL_LogDisplay;
trigger libARRA_gt_UT_DL_PeriodicUpdate;
trigger libARRA_gt_UT_DL_DamageLogging;
trigger libARRA_gt_UT_DL_HealLogging;
trigger libARRA_gt_UT_EnableDevCommands;
trigger libARRA_gt_UT_DisableDevCommandsforally;
trigger libARRA_gt_UT_Rad;
trigger libARRA_gt_UT_XP;
trigger libARRA_gt_UT_ListDead;
trigger libARRA_gt_UT_ListHidden;
trigger libARRA_gt_UT_ListMissile;
trigger libARRA_gt_UT_ListAll;
trigger libARRA_gt_UT_Teleport;
trigger libARRA_gt_UT_Restart;
trigger libARRA_gt_UT_GetID;
trigger libARRA_gt_UT_Restore;
trigger libARRA_gt_UT_Pause;
trigger libARRA_gt_UT_Money;
trigger libARRA_gt_UT_Look;
trigger libARRA_gt_UT_sight;
trigger libARRA_gt_UT_Kill;
trigger libARRA_gt_UT_Remove;
trigger libARRA_gt_UT_PauseAI;
trigger libARRA_gt_UT_Speed;
trigger libARRA_gt_UT_Supply;
trigger libARRA_gt_UT_Give;
trigger libARRA_gt_UT_SwitchOwner;
trigger libARRA_gt_UT_Cost;
trigger libARRA_gt_UT_clearscreen;
trigger libARRA_gt_UT_ClearEnemy;
trigger libARRA_gt_UT_SpawnUnits;
trigger libARRA_gt_UT_Control;
trigger libARRA_gt_UT_Resource;
trigger libARRA_gt_UT_DebugApplySkin;
trigger libARRA_gt_UT_DebugMode;
trigger libARRA_gt_UT_Graph_ButtonCreate;
trigger libARRA_gt_UT_Clicked;
trigger libARRA_gt_UT_Graph_Initialization;
trigger libARRA_gt_UT_Graph_Timer;
trigger libARRA_gt_UT_Graph_ShowIncome;
trigger libARRA_gt_UT_Graph_ShowArmyValue;
trigger libARRA_gt_UT_Graph_ShowAPM;
trigger libARRA_gt_UT_Graph_ShowKills;
trigger libARRA_gt_UT_Graph_ShowValueLost;
trigger libARRA_gt_UT_Pie;
trigger libARRA_gt_AF_SlimUI;
trigger libARRA_gt_CU_MinimapAllyViewUpdate;
trigger libARRA_gt_CU_MinimapAllyPlayerLeaves;
trigger libARRA_gt_CU_MinimapAllyViewCamera;
trigger libARRA_gt_TaskFail;
trigger libARRA_gt_TaskComplete;
trigger libARRA_gt_TaskStart;
trigger libARRA_gt_TaskIncreaseProgress;
trigger libARRA_gt_TaskIncreaseFail;
trigger libARRA_gt_UpdateObjective;
trigger libARRA_gt_CreatePeridocEvent;
trigger libARRA_gt_TaskTimeoutTrigger;
trigger libARRA_gt_TrackerTimerExpired;
trigger libARRA_gt_SendUnitsToPoint;
trigger libARRA_gt_TrackerUnitDies;
trigger libARRA_gt_TrackerUnitDamaged;
trigger libARRA_gt_CheckEmergencyStartRegion;

// Library Initialization
void libARRA_InitVariables ();

