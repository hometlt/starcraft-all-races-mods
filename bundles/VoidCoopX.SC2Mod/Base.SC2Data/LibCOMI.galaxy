include "TriggerLibs/NativeLib"
include "LibARRA_h"

include "LibCOMI_h"

//--------------------------------------------------------------------------------------------------
// Library: COOP
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libCOMI_InitLibraries () {
    libNtve_InitVariables();
    libARRA_InitVariables();
}

// Variable Initialization
bool libCOMI_InitVariables_completed = false;

void libCOMI_InitVariables () {
    int init_i;
    int init_j;

    if (libCOMI_InitVariables_completed) {
        return;
    }

    libCOMI_InitVariables_completed = true;

    libCOMI_gv_gameMode = 2;
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cCX_PlayerMasteryLevel[init_i] = 90;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cC_PlayerMasteryEnabled[init_i] = true;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        libCOMI_gv_cM_CoopAI_CachedUpgradeData[init_i].lv_cachedDifficulty = 6;
    }
    libCOMI_gv_vU_Enemies = PlayerGroupEmpty();
    libCOMI_gv_vU_Allies = PlayerGroupEmpty();
    libCOMI_gv_vU_EnemyPlayers = PlayerGroupEmpty();
    libCOMI_gv_vU_EnemyAI = PlayerGroupEmpty();
    libCOMI_gv_vU_AlliedCommanders = PlayerGroupEmpty();
    libCOMI_gv_vU_HumanPlayers = PlayerGroupEmpty();
    libCOMI_gv_vU_SlotsPlayers = PlayerGroupEmpty();
    libCOMI_gv_vU_SlotsEnemy = PlayerGroupEmpty();
    libCOMI_gv_vU_AllyNPC = PlayerGroupEmpty();
    libCOMI_gv_vU_BonusNPC = PlayerGroupEmpty();
    libCOMI_gv_vU_EnemyNPC = PlayerGroupEmpty();
    libCOMI_gv_vU_NeutralNPC = PlayerGroupEmpty();
    libCOMI_gv_vU_HostileNPC = PlayerGroupEmpty();
    libCOMI_gv_all = PlayerGroupAll();
    libCOMI_gv_vU_PLAYER_HOSTILE = 15;
    libCOMI_gv_observerGroup = PlayerGroupSingle(CatalogFieldValueGetAsInt(c_gameCatalogGameUI, "Dflt", "DefaultObservedPlayerId", c_playerAny));
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_SharedVisionPlayers[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_playerColor[init_i] = 15;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_VisionShareUnits[init_i] = UnitGroupEmpty();
    }
    libCOMI_gv_cM_VisionShareEnabled = true;
    libCOMI_gv_heroUnits = UnitGroupEmpty();
    for (init_i = 0; init_i <= libCOMI_gv_mAX_HERO_UNITS; init_i += 1) {
        libCOMI_gv_heroUnitsData[init_i].lv_reviveTimer = 60.0;
        libCOMI_gv_heroUnitsData[init_i].lv_deathCount = -1;
    }
    libCOMI_gv_cU_HeroCooldownTime = 60.0;
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOMI_gv_cU_HeroPositionX[init_i][init_j] = 20;
        }
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOMI_gv_cU_HeroPositionY[init_i][init_j] = 30;
        }
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogBorderImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogBorderImageNoEnergy[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogBorderImageAll[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogIconImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogCooldownImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogDamageTakenImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogDamageTakenLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogNameLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogLevelLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogHealthBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogHealthBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogShieldBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogShieldBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogEnergyBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogEnergyBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogHealthLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogEnergyLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogShieldLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogLevelBox[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOMI_gv_cU_VoidHeroUIRevivable[init_i][init_j] = true;
        }
    }
    libCOMI_gv_cU_HeroAutomaticIndex = 1;
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOMI_gv_oBSOLETE_CU_HeroReviveTimer[init_i][init_j] = UserDataGetFixed("GameSettings", "GameValues", "HeroReviveTime", 1);
        }
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_yY_GPCasterGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOMI_gv_cU_GPCmdButtonBackgroundImage[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOMI_gv_cU_GPCmdButtonActiveImage[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOMI_gv_cU_GPCmdButtonArrows[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOMI_gv_cU_GPCmdButtons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_GPCutscene[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_GPCmdPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_GPCmdPanelUnitStatus[init_i] = c_invalidDialogControlId;
    }
    libCOMI_gv_cU_GPPanelHolder = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_GPPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_GPCutsceneFilter[init_i] = "";
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOMI_gv_cU_GPUnitEnergyLinks[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_GPEnergyLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_GPEnergyGlassScene[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_GPEnergyBarScene[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_GPEnergyTooltip[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_GPEnergyBar[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            libCOMI_gv_topbarButton[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    libCOMI_gv__FadeDialog = c_invalidDialogId;
    libCOMI_gv__FadeImage = c_invalidDialogControlId;
    libCOMI_gv_wEBSITE = StringExternal("Param/Value/lib_COMI_4D0EA868");
    libCOMI_gv_enemyFactionsCount = 1;
    libCOMI_gv_vU_CommanderEnemyFactionPulldown = c_invalidDialogControlId;
    libCOMI_gv_amonFactionsDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= libCOMI_gv_mAX_FACTIONS; init_i += 1) {
        libCOMI_gv_raceButton[init_i] = c_invalidDialogControlId;
    }
    libCOMI_gv_aF_CS_PatchDialog = c_invalidDialogId;
    libCOMI_gv_aF_CS_News = StringExternal("Param/Value/lib_COMI_2500A4A0");
    libCOMI_gv_aF_CS_NewsDialog = c_invalidDialogId;
    libCOMI_gv_aF_CS_NewsControlButton = c_invalidDialogControlId;
    libCOMI_gv_aF_CS_NewsDialogPanel = c_invalidDialogControlId;
    libCOMI_gv_cC_WorldCoverDlg = c_invalidDialogId;
    for (init_i = 0; init_i <= 1; init_i += 1) {
        libCOMI_gv_aF_CS_CutsceneDialog[init_i] = c_invalidDialogId;
    }
    libCOMI_gv_aF_CS_CommanderMiraDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_aF_CS_CommanderCutscenes[init_i] = c_cutsceneNone;
    }
    libCOMI_gv_uT_CommandsButton = c_invalidDialogControlId;
    libCOMI_gv_playAmonButton = c_invalidDialogControlId;
    libCOMI_gv_playRandomButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        libCOMI_gv_chosenTeam[init_i] = 1;
    }
    for (init_i = 0; init_i <= libCOMI_gv_mAX_COMMANDERCOUNT; init_i += 1) {
        libCOMI_gv_commanderOption[init_i].lv_button = c_invalidDialogControlId;
        libCOMI_gv_commanderOption[init_i].lv_portrait = c_invalidDialogControlId;
        libCOMI_gv_commanderOption[init_i].lv_title = c_invalidDialogControlId;
        libCOMI_gv_commanderOption[init_i].lv_selection = c_invalidDialogControlId;
        libCOMI_gv_commanderOption[init_i].lv_lock = c_invalidDialogControlId;
        libCOMI_gv_commanderOption[init_i].lv_ready = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        libCOMI_gv_amonOption[init_i].lv_button = c_invalidDialogControlId;
        libCOMI_gv_amonOption[init_i].lv_portrait = c_invalidDialogControlId;
        libCOMI_gv_amonOption[init_i].lv_title = c_invalidDialogControlId;
        libCOMI_gv_amonOption[init_i].lv_selection = c_invalidDialogControlId;
        libCOMI_gv_amonOption[init_i].lv_lock = c_invalidDialogControlId;
        libCOMI_gv_amonOption[init_i].lv_ready = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        libCOMI_gv_randomOption[init_i].lv_button = c_invalidDialogControlId;
        libCOMI_gv_randomOption[init_i].lv_portrait = c_invalidDialogControlId;
        libCOMI_gv_randomOption[init_i].lv_title = c_invalidDialogControlId;
        libCOMI_gv_randomOption[init_i].lv_selection = c_invalidDialogControlId;
        libCOMI_gv_randomOption[init_i].lv_lock = c_invalidDialogControlId;
        libCOMI_gv_randomOption[init_i].lv_ready = c_invalidDialogControlId;
    }
    libCOMI_gv_cU_CommanderSelectionPanel = c_invalidDialogControlId;
    libCOMI_gv_uT_AllyMasteryButton = c_invalidDialogControlId;
    libCOMI_gv_vU_DetailsContainer = c_invalidDialogControlId;
    libCOMI_gv_vU_DetailsTabControl = c_invalidDialogControlId;
    libCOMI_gv_vU_DetailsTabInfoButton = c_invalidDialogControlId;
    libCOMI_gv_vU_DetailsTabUnitsButton = c_invalidDialogControlId;
    libCOMI_gv_vU_DetailsTabResearchButton = c_invalidDialogControlId;
    libCOMI_gv_vU_DetailsBackground = c_invalidDialogControlId;
    libCOMI_gv_vU_DetailsInfoContainer = c_invalidDialogControlId;
    libCOMI_gv_vU_DetailsUnitsContainer = c_invalidDialogControlId;
    libCOMI_gv_vU_DetailsResearchContainer = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderDialog = c_invalidDialogId;
    libCOMI_gv_cU_CommanderPanel = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderReadyButton = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderReadyCheckMark = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderReadyLabelSelf = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderInfoPanel = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderSelectedNameSelf = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderAccountNameSelf = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderSelectedPrestigeSelf = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderLevelLabelSelf = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderMasteryLabelSelf = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOMI_gv_cUC_UNITSMAXCOUNT; init_i += 1) {
        libCOMI_gv_cU_CommanderAbilitiesButtons[init_i].lv_button = c_invalidDialogControlId;
        libCOMI_gv_cU_CommanderAbilitiesButtons[init_i].lv_icon = c_invalidDialogControlId;
        libCOMI_gv_cU_CommanderAbilitiesButtons[init_i].lv_title = c_invalidDialogControlId;
        libCOMI_gv_cU_CommanderAbilitiesButtons[init_i].lv_description = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cUC_UNITSMAXCOUNT; init_i += 1) {
        libCOMI_gv_cU_CommanderUnitsButtons[init_i].lv_button = c_invalidDialogControlId;
        libCOMI_gv_cU_CommanderUnitsButtons[init_i].lv_icon = c_invalidDialogControlId;
        libCOMI_gv_cU_CommanderUnitsButtons[init_i].lv_title = c_invalidDialogControlId;
        libCOMI_gv_cU_CommanderUnitsButtons[init_i].lv_description = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cUC_UNITSMAXCOUNT; init_i += 1) {
        libCOMI_gv_cU_CommanderUpgradesButtons[init_i].lv_button = c_invalidDialogControlId;
        libCOMI_gv_cU_CommanderUpgradesButtons[init_i].lv_icon = c_invalidDialogControlId;
        libCOMI_gv_cU_CommanderUpgradesButtons[init_i].lv_title = c_invalidDialogControlId;
        libCOMI_gv_cU_CommanderUpgradesButtons[init_i].lv_description = c_invalidDialogControlId;
    }
    libCOMI_gv_cU_CommanderLevelUpButton = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderLevelDownButton = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderPanelUpgrade = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderMasteryButton = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderMasteryCheckbox = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOMI_gv_cCC_PLAYERPRESTIGEMAXRANK; init_i += 1) {
        libCOMI_gv_cU_CommanderPrestigesButtons[init_i].lv_button = c_invalidDialogControlId;
        libCOMI_gv_cU_CommanderPrestigesButtons[init_i].lv_icon = c_invalidDialogControlId;
        libCOMI_gv_cU_CommanderPrestigesButtons[init_i].lv_title = c_invalidDialogControlId;
        libCOMI_gv_cU_CommanderPrestigesButtons[init_i].lv_description = c_invalidDialogControlId;
    }
    libCOMI_gv_aF_CS_AllyPrestigeButton = c_invalidDialogControlId;
    libCOMI_gv_cU_MasteryDialog = c_invalidDialogId;
    libCOMI_gv_cU_MasteryPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MASTERIES_PER_COMMANDER; init_i += 1) {
        libCOMI_gv_cU_MasteryItemPanels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MASTERIES_PER_COMMANDER; init_i += 1) {
        libCOMI_gv_cU_MasteryNameLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MASTERIES_PER_COMMANDER; init_i += 1) {
        libCOMI_gv_cU_MasteryPointLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MASTERIES_PER_COMMANDER; init_i += 1) {
        libCOMI_gv_cU_MasteryValueLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MASTERIES_PER_COMMANDER; init_i += 1) {
        libCOMI_gv_cU_MasteryPlusButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MASTERIES_PER_COMMANDER; init_i += 1) {
        libCOMI_gv_cU_MasteryMinusButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MASTERY_CATEGORIES; init_i += 1) {
        libCOMI_gv_cU_MasteryCategoryPoints[init_i] = c_invalidDialogControlId;
    }
    libCOMI_gv_cU_MasteryAcceptButton = c_invalidDialogControlId;
    libCOMI_gv_cU_MasteryResetButton = c_invalidDialogControlId;
    libCOMI_gv_cU_MasteryLevelUpButton = c_invalidDialogControlId;
    libCOMI_gv_cU_MasteryLevelDownButton = c_invalidDialogControlId;
    libCOMI_gv_cU_MasteryLevelLabel = c_invalidDialogControlId;
    libCOMI_gv_vU_GameModePulldown = c_invalidDialogControlId;
    libCOMI_gv_vU_CommanderDifficultyPulldown = c_invalidDialogControlId;
    libCOMI_gv_vU_CommanderPanelSettings = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderMutatorButton = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderMutatorCountLabel = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderMutatorChallengePulldown = c_invalidDialogControlId;
    libCOMI_gv_cU_ArmyButton = c_invalidDialogControlId;
    libCOMI_gv_cU_ArmyButtonTipPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_targetingTemplate[init_i] = "LotV_GameUI/SoATargetingUITemplate";
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_SoATargetingAlreadyCanceled[init_i] = true;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_SoATargetingDirectionGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_TargetingOverlayDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_TargetingOverlayPortrait[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_TargetingAbilityDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_TargetingPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_TargetingCancelButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_TargetingChargesPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_TargetingInstructionsLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOMI_gv_cU_TargetingChargeSinglePanel[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    libCOMI_gv_cM_VOResourceReqSendButton = c_invalidDialogControlId;
    libCOMI_gv_cM_TransmissionPrimaryPlayers = PlayerGroupEmpty();
    libCOMI_gv_cM_TransmissionSecondaryPlayers = PlayerGroupEmpty();
    libCOMI_gv_cM_SendTransmissionCampaignPortrait = c_invalidPortraitId;
    libCOMI_gv_cM_SendTransmissionCampaignPlayingTick = 3;
    libCOMI_gv_cM_SendTransmissionCampaignChatBubbleOn = true;
    libCOMI_gv_cM_CoopAI_WavePingShowAll = true;
    libCOMI_gv_cM_CoopAI_DontPingUnits = UnitGroupEmpty();
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_CombinedPing[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_CombinedPing_APlayer[init_i] = -1;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_CombinedPing_AWave[init_i] = -1;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_CombinedPing_BPlayer[init_i] = -1;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_CombinedPing_BWave[init_i] = -1;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_PingGroups[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_PingGroupPing[init_i] = c_invalidPingId;
    }
    libCOMI_gv_cM_CoopAI_DontPingPlayers = PlayerGroupEmpty();
    libCOMI_gv_cC_CoopBankName = "viscoop";
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_ScreenMode[init_i] = c_uiModeConsole;
    }
    libCOMI_gv_selectedDifficulty = libNtve_gf_DifficultyValueInt(1, 2, 3, 4);
    libCOMI_gv_cM_CybCoreTextTag = c_textTagNone;
    libCOMI_gv_uT_Horde_UG_Wave = UnitGroupEmpty();
    libCOMI_gv_uT_Horde_UG = UnitGroupEmpty();
    libCOMI_gv_uT_encompsDialogs = c_invalidDialogId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        libCOMI_gv_uT_MasteryBoxes[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        libCOMI_gv_uT_MasteryLabels[init_i] = c_invalidDialogControlId;
    }
    libCOMI_gv_uT_MasteryButton = c_invalidDialogControlId;
    libCOMI_gv_uT_MasteryDialog = c_invalidDialogId;
    libCOMI_gv_uT_LastAttackWave = UnitGroupEmpty();
    libCOMI_gv_cM_DebugAITargetSpawners = true;
    libCOMI_gv_uT_Bank_UnitFilter = UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
}

// Presets
// Functions
void libCOMI_gf_LoadCoopMission (string lp_map, trigger lp_startTrigger) {
    // Variable Declarations
    int lv_player;
    int lv_registeredplayers;
    int lv_registeredenemyplayers;
    int lv_aienemy;
    string lv_indexMasteryUpgrade;
    bank lv_bank;
    int lv_indexPlayer;
    int lv_itemIndex;
    int lv_masteryIndex;
    int lv_vTotalMastery;
    string lv_briefingSoundtrack;

    // Automatic Variable Declarations
    playergroup auto5D8F9B9D_g;

    // Variable Initialization
    lv_briefingSoundtrack = UserDataGetGameLink("MissionSettings", "CurrentMission", "BriefingSoundtrack", 1);

    // Implementation
    if ((lv_briefingSoundtrack != null)) {
        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_briefingSoundtrack, c_soundtrackCueAny, c_soundtrackIndexAny);
    }

    libCOMI_gf_RegisterPlayers();
    libCOMI_gv_gameMode = MinI(PlayerGroupCount(libCOMI_gv_vU_SlotsPlayers), PlayerGroupCount(libCOMI_gv_vU_HumanPlayers));
    libCOMI_gf_CC_LoadAllTransitionData();
    TransmissionSetOption(c_transmissionOptionHideAlertPanel, true);
    auto5D8F9B9D_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto5D8F9B9D_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        PlayerSetState(lv_indexPlayer, c_playerStateContinueEnabled, false);
        PlayerOptionOverride(lv_indexPlayer, "simplecommandcard", "0");
        if ((PlayerType(lv_indexPlayer) != c_playerTypeUser)) {
            PlayerSetState(lv_indexPlayer, c_playerStateDisplayInLeaderPanel, false);
            PlayerSetState(lv_indexPlayer, c_playerStateDisplayInViewMenu, false);
            PlayerSetState(lv_indexPlayer, c_playerStateShowScore, false);
        }

    }
    libCOMI_gf_CC_InitNonDefeatedPlayers();
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogAbortButton, false);
    libCOMI_gf_CreateGameBriefingRoom();
}

void libCOMI_gf_ApplyMissionTime () {
    // Variable Declarations
    string lv_time;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_time = UserDataGetString("MissionSettings", "CurrentMission", "Time", 1);

    // Implementation
    if ((lv_time != null)) {
        GameTimeOfDaySet(lv_time);
    }
    else {
        GameTimeOfDaySet("08:00:00");
    }
}

void libCOMI_gf_AllowToBuildOnCreep (int lp_player, bool lp_allow) {
    // Variable Declarations
    string lv_entry;
    string lv_value;

    // Automatic Variable Declarations
    int auto1B727854_ae;
    int auto1B727854_var;

    // Variable Initialization
    lv_value = "";

    // Implementation
    auto1B727854_ae = CatalogEntryCount(c_gameCatalogFootprint);
    auto1B727854_var = 1;
    for ( ; auto1B727854_var <= auto1B727854_ae; auto1B727854_var += 1 ) {
        lv_entry = CatalogEntryGet(c_gameCatalogFootprint, auto1B727854_var);
        if ((lp_allow == true)) {
            lv_value = "0";
        }
        else {
            lv_value = CatalogFieldValueGet(c_gameCatalogFootprint, lv_entry, "Layers[" + IntToString(0) + "].Sets[" + IntToString(0) + "].Negative[" + IntToString(c_placementTestCreepMask) + "]", c_playerAny);
        }
        CatalogFieldValueSet(c_gameCatalogFootprint, lv_entry, "Layers[" + IntToString(0) + "].Sets[" + IntToString(0) + "].Negative[" + IntToString(c_placementTestCreepMask) + "]", lp_player, lv_value);
    }
}

bool libCOMI_gf_TechUnitAvailable (int lp_player, string lp_unit) {
    // Variable Declarations
    string lv_techUnitsArrayName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_techUnitsArrayName = ("TechUnits" + IntToString(lp_player));

    // Implementation
    if ((libARRA_gf_ListStringIncludes(lv_techUnitsArrayName, (lp_unit)) == true)) {
        return true;
    }
    else {
        return false;
    }
}

void libCOMI_gf_CC_ApplyTechNew (int lp_player, int lp_player2, string lp_commander, string lp_prestige) {
    // Variable Declarations
    int lv_i;
    string lv_playerCommander;
    string lv_playerCommanderFaction;
    string lv_factionCommander;
    string lv_playerCommanderRace;
    string lv_playerPrestige;
    int lv_playerLevel;
    string lv_techInstance;
    string lv_techUpgrade;
    string lv_techUnit;
    abilcmd lv_techAbility;
    string lv_techBehavior;
    string lv_techPrestige;
    string lv_techCommander;
    int lv_techLevel;
    int lv_techValue;
    string lv_techUnitsArrayName;
    string lv_techAbilitiesArrayName;
    string lv_techDisabledAbilitiesArrayName;
    string lv_techUpgradesArrayName;
    string lv_techBehaviorsArrayName;

    // Automatic Variable Declarations
    string auto039F9621_userType;
    int auto039F9621_i;
    int auto6E31F6A3_ae;
    int auto6E31F6A3_var;
    int autoDCCFE03B_ae;
    int autoDCCFE03B_var;
    string auto18C67634_userType;
    int auto18C67634_i;
    int auto7CFBDB4F_ae;
    int auto7CFBDB4F_var;
    int autoC752E0E6_ae;
    int autoC752E0E6_var;
    int autoEA91D502_ae;
    int autoEA91D502_var;
    int auto6C48D36C_ae;
    int auto6C48D36C_var;
    int auto0852F0BF_ae;
    const int auto0852F0BF_ai = 1;
    int auto987A9276_ae;
    const int auto987A9276_ai = 1;

    // Variable Initialization
    lv_playerCommander = lp_commander;
    lv_playerCommanderFaction = UserDataGetUserInstance("Commanders", lp_commander, "Faction", 1);
    lv_factionCommander = UserDataGetGameLink("Factions", lv_playerCommanderFaction, "Console", 1);
    lv_playerCommanderRace = UserDataGetGameLink("Commanders", lp_commander, "Race", 1);
    lv_playerPrestige = lp_prestige;
    lv_playerLevel = lp_player2;
    lv_techUnitsArrayName = ("TechUnits" + IntToString(lp_player));
    lv_techAbilitiesArrayName = ("TechAbilities" + IntToString(lp_player));
    lv_techDisabledAbilitiesArrayName = ("TechDisabledAbilities" + IntToString(lp_player));
    lv_techUpgradesArrayName = ("TechUpgrades" + IntToString(lp_player));
    lv_techBehaviorsArrayName = ("TechBehaviors" + IntToString(lp_player));

    // Implementation
    TechTreeRestrictionsEnable(lp_player, true);
    TechTreeRequirementsEnable(lp_player, true);
    PlayerSetRace(lp_player, lv_playerCommanderRace);
    PlayerSetCommander(lp_player, lv_factionCommander);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ARC@CommanderLevel", lv_playerLevel);
    libARRA_gf_ListCreate(lv_techDisabledAbilitiesArrayName);
    auto039F9621_userType = "Tech";
    auto039F9621_i = 1;
    for ( ; auto039F9621_i <= UserDataInstanceCount(auto039F9621_userType) ; auto039F9621_i += 1 ) {
        lv_techInstance = UserDataInstance(auto039F9621_userType, auto039F9621_i);
        lv_techValue = UserDataGetInt("Tech", lv_techInstance, "value", 1);
        if ((lv_techValue >= 0)) {
            lv_techUpgrade = UserDataGetUpgrade("Tech", lv_techInstance, "upgrade", 1);
            if ((lv_techUpgrade != null) && (lv_techUpgrade != "NONE")) {
                TechTreeUpgradeAllow(lp_player, lv_techUpgrade, false);
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_techUpgrade, 0);
                auto6E31F6A3_ae = TechTreeUpgradeProducedAbilCmdCount(lv_techUpgrade);
                auto6E31F6A3_var = 1;
                for ( ; auto6E31F6A3_var <= auto6E31F6A3_ae; auto6E31F6A3_var += 1 ) {
                    TechTreeAbilityAllow(lp_player, TechTreeUpgradeProducedAbilCmd(lv_techUpgrade, auto6E31F6A3_var), false);
                }
            }

            lv_techUnit = UserDataGetUnit("Tech", lv_techInstance, "unit", 1);
            if ((lv_techUnit != null) && (lv_techUnit != "NONE")) {
                TechTreeUnitAllow(lp_player, lv_techUnit, false);
                autoDCCFE03B_ae = TechTreeUnitProducedAbilCmdCount(lv_techUnit);
                autoDCCFE03B_var = 1;
                for ( ; autoDCCFE03B_var <= autoDCCFE03B_ae; autoDCCFE03B_var += 1 ) {
                    TechTreeAbilityAllow(lp_player, TechTreeUnitProducedAbilCmd(lv_techUnit, autoDCCFE03B_var), false);
                }
            }

            lv_techAbility = UserDataGetAbilCmd("Tech", lv_techInstance, "ability", 1);
            if ((lv_techAbility != null)) {
                TechTreeAbilityAllow(lp_player, lv_techAbility, false);
                libARRA_gf_ListAbilCmdInclude(lv_techDisabledAbilitiesArrayName, lv_techAbility);
            }

            lv_techBehavior = UserDataGetGameLink("Tech", lv_techInstance, "behavior", 1);
            if ((lv_techBehavior != null)) {
                TechTreeBehaviorAllow(lp_player, lv_techBehavior, false);
            }

        }

    }
    auto18C67634_userType = "Tech";
    auto18C67634_i = 1;
    for ( ; auto18C67634_i <= UserDataInstanceCount(auto18C67634_userType) ; auto18C67634_i += 1 ) {
        lv_techInstance = UserDataInstance(auto18C67634_userType, auto18C67634_i);
        lv_techCommander = UserDataGetUserInstance("Tech", lv_techInstance, "commander", 1);
        lv_techPrestige = UserDataGetUserInstance("Tech", lv_techInstance, "prestige", 1);
        if (((lv_techCommander == lv_playerCommander) || (lv_techCommander == null)) && (lv_techLevel <= lv_playerLevel) && ((lv_techPrestige == null) || (lv_techPrestige == lv_playerPrestige))) {
            lv_techValue = UserDataGetInt("Tech", lv_techInstance, "value", 1);
            lv_techUpgrade = UserDataGetUpgrade("Tech", lv_techInstance, "upgrade", 1);
            if ((lv_techUpgrade != null) && (lv_techUpgrade != "NONE")) {
                if ((lv_techValue == -1)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_techUpgrade, 0);
                    TechTreeUpgradeAllow(lp_player, lv_techUpgrade, false);
                    libARRA_gf_ListStringExclude(lv_techUpgradesArrayName, (lv_techUpgrade));
                    autoC752E0E6_ae = TechTreeUpgradeProducedAbilCmdCount(lv_techUpgrade);
                    autoC752E0E6_var = 1;
                    for ( ; autoC752E0E6_var <= autoC752E0E6_ae; autoC752E0E6_var += 1 ) {
                        if ((libARRA_gf_ListAbilCmdIncludes(lv_techAbilitiesArrayName, TechTreeUpgradeProducedAbilCmd(lv_techUpgrade, autoC752E0E6_var)) == true)) {
                            TechTreeAbilityAllow(lp_player, TechTreeUpgradeProducedAbilCmd(lv_techUpgrade, autoC752E0E6_var), false);
                        }

                    }
                }
                else {
                    TechTreeUpgradeAllow(lp_player, lv_techUpgrade, true);
                    libARRA_gf_ListStringInclude(lv_techUpgradesArrayName, (lv_techUpgrade));
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_techUpgrade, lv_techValue);
                    auto7CFBDB4F_ae = TechTreeUpgradeProducedAbilCmdCount(lv_techUpgrade);
                    auto7CFBDB4F_var = 1;
                    for ( ; auto7CFBDB4F_var <= auto7CFBDB4F_ae; auto7CFBDB4F_var += 1 ) {
                        if ((libARRA_gf_ListAbilCmdIncludes(lv_techDisabledAbilitiesArrayName, TechTreeUpgradeProducedAbilCmd(lv_techUpgrade, auto7CFBDB4F_var)) == true)) {
                            TechTreeAbilityAllow(lp_player, TechTreeUpgradeProducedAbilCmd(lv_techUpgrade, auto7CFBDB4F_var), true);
                        }

                    }
                }
            }

            lv_techUnit = UserDataGetUnit("Tech", lv_techInstance, "unit", 1);
            if ((lv_techUnit != null) && (lv_techUnit != "NONE")) {
                if ((lv_techValue >= 0)) {
                    TechTreeUnitAllow(lp_player, lv_techUnit, true);
                    libARRA_gf_ListStringInclude(lv_techUnitsArrayName, (lv_techUnit));
                    auto6C48D36C_ae = TechTreeUnitProducedAbilCmdCount(lv_techUnit);
                    auto6C48D36C_var = 1;
                    for ( ; auto6C48D36C_var <= auto6C48D36C_ae; auto6C48D36C_var += 1 ) {
                        if ((libARRA_gf_ListAbilCmdIncludes(lv_techDisabledAbilitiesArrayName, TechTreeUnitProducedAbilCmd(lv_techUnit, auto6C48D36C_var)) == true)) {
                            TechTreeAbilityAllow(lp_player, TechTreeUnitProducedAbilCmd(lv_techUnit, auto6C48D36C_var), true);
                        }

                    }
                }
                else {
                    TechTreeUnitAllow(lp_player, lv_techUnit, false);
                    libARRA_gf_ListStringExclude(lv_techUnitsArrayName, (lv_techUnit));
                    autoEA91D502_ae = TechTreeUnitProducedAbilCmdCount(lv_techUnit);
                    autoEA91D502_var = 1;
                    for ( ; autoEA91D502_var <= autoEA91D502_ae; autoEA91D502_var += 1 ) {
                        if ((libARRA_gf_ListAbilCmdIncludes(lv_techAbilitiesArrayName, TechTreeUnitProducedAbilCmd(lv_techUnit, autoEA91D502_var)) == true)) {
                            TechTreeAbilityAllow(lp_player, TechTreeUnitProducedAbilCmd(lv_techUnit, autoEA91D502_var), false);
                        }

                    }
                }
            }

            lv_techAbility = UserDataGetAbilCmd("Tech", lv_techInstance, "ability", 1);
            if ((lv_techAbility != null)) {
                if ((lv_techValue >= 0)) {
                    TechTreeAbilityAllow(lp_player, lv_techAbility, true);
                    libARRA_gf_ListAbilCmdInclude(lv_techAbilitiesArrayName, lv_techAbility);
                    libARRA_gf_ListAbilCmdExclude(lv_techDisabledAbilitiesArrayName, lv_techAbility);
                }
                else {
                    TechTreeAbilityAllow(lp_player, lv_techAbility, false);
                    libARRA_gf_ListAbilCmdExclude(lv_techAbilitiesArrayName, lv_techAbility);
                    libARRA_gf_ListAbilCmdInclude(lv_techDisabledAbilitiesArrayName, lv_techAbility);
                }
            }

            lv_techBehavior = UserDataGetGameLink("Tech", lv_techInstance, "behavior", 1);
            if ((lv_techBehavior != null)) {
                if ((lv_techValue >= 0)) {
                    TechTreeBehaviorAllow(lp_player, lv_techBehavior, true);
                    libARRA_gf_ListStringInclude(lv_techBehaviorsArrayName, (lv_techBehavior));
                }
                else {
                    TechTreeBehaviorAllow(lp_player, lv_techBehavior, false);
                    libARRA_gf_ListStringExclude(lv_techBehaviorsArrayName, (lv_techBehavior));
                }
            }

        }

    }
    if ((lv_playerPrestige != null)) {
        auto0852F0BF_ae = UserDataFieldValueCount("Prestiges", "PlayerResponses");
        lv_i = 1;
        for ( ; ( (auto0852F0BF_ai >= 0 && lv_i <= auto0852F0BF_ae) || (auto0852F0BF_ai < 0 && lv_i >= auto0852F0BF_ae) ) ; lv_i += auto0852F0BF_ai ) {
            libCOMI_gf_CC_PlayerResponseEnable(lp_player, UserDataGetUserInstance("Prestiges", lv_playerPrestige, "PlayerResponses", lv_i), true);
        }
        auto987A9276_ae = UserDataFieldValueCount("Prestiges", "ZZ_UpgradeSupplements");
        lv_i = 1;
        for ( ; ( (auto987A9276_ai >= 0 && lv_i <= auto987A9276_ae) || (auto987A9276_ai < 0 && lv_i >= auto987A9276_ae) ) ; lv_i += auto987A9276_ai ) {
            libCOMI_gf_CC_ApplyUpgradeSupplemental(lp_player, UserDataGetUserInstance("Prestiges", lv_playerPrestige, "ZZ_UpgradeSupplements", lv_i));
        }
    }

    libCOMI_gf_CC_ApplyMasteryTech(lp_player);
    libARRA_gf_ListDestroy(lv_techDisabledAbilitiesArrayName);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ARC@OrbitalCommandSupplyDepotDrop", 0), false);
}

void libCOMI_gf_CC_PlayerResponseEnable (int lp_player, string lp_response, bool lp_enforceMinLvl) {
    // Variable Declarations
    int lv_ally;
    playergroup lv_allygroup;

    // Automatic Variable Declarations
    playergroup auto19EDC5B2_g;

    // Variable Initialization
    lv_allygroup = PlayerGroupEmpty();

    // Implementation
    if ((lp_enforceMinLvl == true) && (libCOMI_gf_CC_CommanderLevel(lp_player, libCOMI_gf_ActiveCommanderForPlayer(lp_player)) < UserDataGetInt("PlayerResponse", lp_response, "MinLvl", 1))) {
        return ;
    }

    if ((UserDataGetInt("PlayerResponse", lp_response, "Self", 1) == 1)) {
        PlayerAddResponse(lp_player, UserDataGetGameLink("PlayerResponse", lp_response, "Response", 1));
    }

    if ((UserDataGetInt("PlayerResponse", lp_response, "Ally", 1) == 1)) {
        lv_allygroup = libCOMI_gf_GetAlliedCommandersPlayersCopy();
        PlayerGroupRemove(lv_allygroup, lp_player);
        auto19EDC5B2_g = lv_allygroup;
        lv_ally = -1;
        while (true) {
            lv_ally = PlayerGroupNextPlayer(auto19EDC5B2_g, lv_ally);
            if (lv_ally < 0) { break; }
            PlayerAddResponse(lv_ally, UserDataGetGameLink("PlayerResponse", lp_response, "Response", 1));
        }
    }

}

string libCOMI_gf_CC_CommanderPrestigeIndexFace (string lp_commander, int lp_index) {
    // Variable Declarations
    int lv_prestigeindex;
    string lv_prestigefacestring;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_prestigefacestring = "";

    // Implementation
    if ((lp_commander != null) && ((lp_index >= 1) && (lp_index <= libCOMI_gv_cCC_PLAYERPRESTIGEMAXRANK)) && (CatalogEntryIsValid(c_gameCatalogCommander, lp_commander) == true) && (CatalogFieldValueCount(c_gameCatalogCommander, lp_commander, "PrestigeArray", c_playerAny) >= lp_index)) {
        lv_prestigefacestring = CatalogFieldValueGet(c_gameCatalogCommander, lp_commander, "PrestigeArray[" + IntToString((lp_index - 1)) + "]", c_playerAny);
        if ((CatalogEntryIsValid(c_gameCatalogButton, lv_prestigefacestring) == true)) {
            return (lv_prestigefacestring);
        }

    }

    if ((lp_index == 0)) {
        return "ARC@CommanderPrestige";
    }
    else {
        return null;
    }
}

int libCOMI_gf_CC_PlayerActivePrestigeIndex (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cCX_PlayerPrestigeIndex[lp_player];
}

string libCOMI_gf_CC_PlayerActivePrestigeInstance (int lp_player) {
    // Variable Declarations
    string lv_commander;
    string lv_commander2;
    int lv_commander3;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_commander = libCOMI_gf_ActiveCommanderForPlayer(lp_player);

    // Implementation
    if ((lv_commander != null)) {
        lv_commander3 = libCOMI_gf_CC_PlayerActivePrestigeIndex(lp_player);
        return UserDataGetUserInstance("Commanders", lv_commander, "Prestige", lv_commander3);
    }

    return null;
}

string libCOMI_gf_CC_PrestigeCommanderTableKey (string lp_commander, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return ("PRESTIGE" + "_" + IntToString(lp_player) + "_" + (lp_commander));
}

void libCOMI_gf_CC_SetPlayerPrestigeIndex (int lp_player, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cCX_PlayerPrestigeIndex[lp_player] = libNtve_gf_ArithmeticIntClamp(lp_index, 0, libCOMI_gv_cCC_PLAYERPRESTIGEMAXRANK);
}

int libCOMI_gf_CC_PlayerMasteryLevel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cCX_PlayerMasteryLevel[lp_player];
}

int libCOMI_gf_CC_PlayerMasteryCategory (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("MasteryUpgrades", lp_masteryUpgrade, "Category", 1);
}

int libCOMI_gf_CC_PlayerMasteryCategoryPointsAtLevel (int lp_player, int lp_categoryIndex, int lp_level) {
    // Variable Declarations
    int lv_categoryPoints;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_categoryPoints = (lp_level / libCOMI_gv_cCC_MASTERY_CATEGORIES);
    if ((ModI(lp_level, libCOMI_gv_cCC_MASTERY_CATEGORIES) >= lp_categoryIndex)) {
        lv_categoryPoints += 1;
    }

    return lv_categoryPoints;
}

int libCOMI_gf_CC_PlayerMasteryCategoryPointsSpent (int lp_player, int lp_categoryIndex) {
    // Variable Declarations
    int lv_pointsSpent;
    string lv_indexMasteryUpgrade;

    // Automatic Variable Declarations
    int auto069D912F_ai;
    int auto069D912F_ae;
    int auto069D912F_ac;

    // Variable Initialization

    // Implementation
    auto069D912F_ai = 0;
    auto069D912F_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (auto069D912F_ai < auto069D912F_ae) {
        auto069D912F_ai = auto069D912F_ai+1;
        auto069D912F_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", auto069D912F_ai), "Category", 1);
        if( auto069D912F_ac == lp_categoryIndex &&
        libCOMI_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", auto069D912F_ai),"Commander",1) ) {
            lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", auto069D912F_ai);
            lv_pointsSpent += libCOMI_gf_CC_PlayerMasteryUpgradeLevel(lp_player, lv_indexMasteryUpgrade);
        }    
    }
    return lv_pointsSpent;
}

int libCOMI_gf_CC_PlayerMasteryCategoryPointsAvailable (int lp_player, int lp_categoryIndex) {
    // Automatic Variable Declarations
    // Implementation
    return (libCOMI_gf_CC_PlayerMasteryCategoryPointsAtLevel(lp_player, lp_categoryIndex, 0) - libCOMI_gf_CC_PlayerMasteryCategoryPointsSpent(lp_player, lp_categoryIndex));
}

int libCOMI_gf_CC_PlayerMasteryUpgradeLevel (int lp_player, string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cCX_PlayerMasteryPointsSpent[lp_player][libCOMI_gf_CC_CommanderInternalIndex(libCOMI_gf_CC_PlayerMasteryCommander(lp_masteryUpgrade))][libCOMI_gf_CC_PlayerMasteryInternalIndex(lp_masteryUpgrade)];
}

string libCOMI_gf_CC_PlayerMasteryCommander (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetUserInstance("MasteryUpgrades", lp_masteryUpgrade, "Commander", 1);
}

string libCOMI_gf_CC_PlayerMasteryUpgradeData (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetUpgrade("MasteryUpgrades", lp_masteryUpgrade, "Upgrade", 1);
}

string libCOMI_gf_CC_PlayerMasteryTalent (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("MasteryUpgrades", lp_masteryUpgrade, "TalentData", 1);
}

int libCOMI_gf_CC_PlayerMasteryInternalIndex (string lp_masteryUpgrade) {
    // Variable Declarations
    int lv_internalIndex;
    int lv_talentIndex;

    // Automatic Variable Declarations
    int auto24ADA236_ae;
    const int auto24ADA236_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_masteryUpgrade == null)) {
        return 0;
    }

    lv_internalIndex = UserDataGetInt("MasteryUpgrades", lp_masteryUpgrade, "InternalIndex", 1);
    if ((lv_internalIndex == 0)) {
        auto24ADA236_ae = (CatalogFieldValueCount(c_gameCatalogCommander, libCOMI_gf_CC_CommanderData(libCOMI_gf_CC_PlayerMasteryCommander(lp_masteryUpgrade)), "MasteryTalentArray", c_playerAny)-1);
        lv_talentIndex = 0;
        for ( ; ( (auto24ADA236_ai >= 0 && lv_talentIndex <= auto24ADA236_ae) || (auto24ADA236_ai < 0 && lv_talentIndex >= auto24ADA236_ae) ) ; lv_talentIndex += auto24ADA236_ai ) {
            lv_internalIndex += 1;
            if (((CatalogFieldValueGet(c_gameCatalogCommander, libCOMI_gf_CC_CommanderData(libCOMI_gf_CC_PlayerMasteryCommander(lp_masteryUpgrade)), "MasteryTalentArray[" + IntToString(lv_talentIndex) + "].Talent", c_playerAny)) == libCOMI_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade))) {
                UserDataSetInt("MasteryUpgrades", lp_masteryUpgrade, "InternalIndex", 1, lv_internalIndex);
                return lv_internalIndex;
                break;
            }

        }
    }
    else {
        return lv_internalIndex;
    }
    return 0;
}

text libCOMI_gf_CC_PlayerMasteryName (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade) == null)) {
        return StringToText((lp_masteryUpgrade));
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogButton, CatalogFieldValueGet(c_gameCatalogTalent, libCOMI_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade), "Face", c_playerAny), "Name", c_playerAny));
}

text libCOMI_gf_CC_PlayerMasteryTooltip (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade) == null)) {
        return StringToText((lp_masteryUpgrade));
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogButton, CatalogFieldValueGet(c_gameCatalogTalent, libCOMI_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade), "Face", c_playerAny), "Tooltip", c_playerAny));
}

text libCOMI_gf_CC_PlayerMasteryValueFormat (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("MasteryUpgrades", lp_masteryUpgrade, "ValueFormat", 1);
}

fixed libCOMI_gf_CC_PlayerMasteryValueIncrement (string lp_masteryUpgrade, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetFixed("MasteryUpgrades", lp_masteryUpgrade, "PointIncrement", lp_index);
}

bool libCOMI_gf_CC_PlayerMasteryEnabled (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cC_PlayerMasteryEnabled[lp_player];
}

void libCOMI_gf_CC_PlayerMasteryUpgradeLevelSet (int lp_player, string lp_masteryUpgrade, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cCX_PlayerMasteryPointsSpent[lp_player][libCOMI_gf_CC_CommanderInternalIndex(libCOMI_gf_CC_PlayerMasteryCommander(lp_masteryUpgrade))][libCOMI_gf_CC_PlayerMasteryInternalIndex(lp_masteryUpgrade)] = lp_level;
}

void libCOMI_gf_CC_PlayerMasteryLevelSet (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cCX_PlayerMasteryLevel[lp_player] = lp_level;
}

void libCOMI_gf_CC_PlayerMasteryEnabledSet (int lp_player, bool lp_enabled) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cC_PlayerMasteryEnabled[lp_player] = lp_enabled;
}

void libCOMI_gf_CC_ApplyMasteryTech (int lp_player) {
    // Variable Declarations
    string lv_indexMasteryUpgrade;

    // Automatic Variable Declarations
    int auto73C199C1_ai;
    int auto73C199C1_ae;
    int auto73C199C1_ac;

    // Variable Initialization

    // Implementation
    if ((libCOMI_gv_cC_PlayerMasteryEnabled[lp_player] == false)) {
        return ;
    }

    auto73C199C1_ai = 0;
    auto73C199C1_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (auto73C199C1_ai < auto73C199C1_ae) {
        auto73C199C1_ai = auto73C199C1_ai+1;
        auto73C199C1_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", auto73C199C1_ai), "Category", 1);
        if( libCOMI_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", auto73C199C1_ai),"Commander",1) ) {
            lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", auto73C199C1_ai);
            if ((libCOMI_gf_CC_PlayerMasteryUpgradeData(lv_indexMasteryUpgrade) != null)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libCOMI_gf_CC_PlayerMasteryUpgradeData(lv_indexMasteryUpgrade), libCOMI_gf_CC_PlayerMasteryUpgradeLevel(lp_player, lv_indexMasteryUpgrade));
            }

        }    
    }
}

void libCOMI_gf_CC_SharedUpgradesEnable () {
    // Variable Declarations
    string lv_indexSharedUpgrade;

    // Automatic Variable Declarations
    int auto13331E50_ai;
    int auto13331E50_ae;

    // Variable Initialization

    // Implementation
    auto13331E50_ai = 1;
    auto13331E50_ae = UserDataInstanceCount("SharedUpgrades")+1;
    while (auto13331E50_ai < auto13331E50_ae) {
        lv_indexSharedUpgrade = UserDataInstance("SharedUpgrades", auto13331E50_ai);
        auto13331E50_ai = auto13331E50_ai+1;
        if ((UserDataGetUpgrade("SharedUpgrades", lv_indexSharedUpgrade, "Upgrade", 1) != null)) {
            libCOMI_gf_CC_SharedUpgradesCheckAndApply(UserDataGetUpgrade("SharedUpgrades", lv_indexSharedUpgrade, "Upgrade", 1));
        }

    }
}

void libCOMI_gf_CC_SharedUpgradesCheckAndApply (string lp_checkUpgrade) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itPlayerApplyTarget;

    // Automatic Variable Declarations
    playergroup auto7B79B30F_g;
    playergroup auto46C6D368_g;

    // Variable Initialization

    // Implementation
    auto7B79B30F_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto7B79B30F_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((TechTreeUpgradeCount(lv_itPlayer, lp_checkUpgrade, c_techCountCompleteOnly) >= 1)) {
            auto46C6D368_g = libCOMI_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(lv_itPlayer);
            lv_itPlayerApplyTarget = -1;
            while (true) {
                lv_itPlayerApplyTarget = PlayerGroupNextPlayer(auto46C6D368_g, lv_itPlayerApplyTarget);
                if (lv_itPlayerApplyTarget < 0) { break; }
                if ((TechTreeUpgradeCount(lv_itPlayer, lp_checkUpgrade, c_techCountCompleteOnly) > TechTreeUpgradeCount(lv_itPlayerApplyTarget, lp_checkUpgrade, c_techCountCompleteOnly))) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lv_itPlayerApplyTarget, lp_checkUpgrade, TechTreeUpgradeCount(lv_itPlayer, lp_checkUpgrade, c_techCountCompleteOnly));
                }

            }
        }

    }
}

void libCOMI_gf_CC_ApplyUpgradeSupplemental (int lp_player, string lp_upgradeSupplemental) {
    // Variable Declarations
    string lv_upgrade;
    string lv_supplement;
    string lv_script;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_upgrade = UserDataGetGameLink("PlayerPrestigeUpgradeSupplements", lp_upgradeSupplemental, "Upgrade", 1);
    lv_supplement = UserDataGetGameLink("PlayerPrestigeUpgradeSupplements", lp_upgradeSupplemental, "Supplement", 1);
    lv_script = "";

    // Implementation
    if ((lp_upgradeSupplemental != null) && (CatalogEntryIsValid(c_gameCatalogUpgrade, lv_upgrade) == true) && (CatalogEntryIsValid(c_gameCatalogUpgrade, lv_supplement) == true) && (TechTreeUpgradeCount(lp_player, lv_upgrade, c_techCountCompleteOnly) > 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_supplement, TechTreeUpgradeCount(lp_player, lv_upgrade, c_techCountCompleteOnly));
    }

}

void libCOMI_gf_CM_CoopAI_CacheUpgradeData (int lp_player, int lp_difficulty) {
    // Variable Declarations
    int lv_upgradeIter;
    string lv_faction;
    int lv_i;
    int lv_factionCommanderIter;
    int lv_k;
    string lv_coopAIUpgrade;
    string lv_upgrade;
    string lv_coopAILevelUpgrade;
    string lv_commader;
    string lv_commaderFaction;
    int lv_totalUpgrades;
    int lv_totalLevelUpgrades;
    fixed lv_time;
    int lv_activeUpgrades;

    // Automatic Variable Declarations
    int auto4D34C418_ae;
    const int auto4D34C418_ai = 1;
    int autoA719D967_ae;
    int autoA719D967_var;
    int auto93DD5DF8_ae;
    const int auto93DD5DF8_ai = 1;

    // Variable Initialization
    lv_commaderFaction = UserDataGetUserInstance("Compositions", lv_commader, "Faction", 1);
    lv_totalUpgrades = UserDataInstanceCount("CoopAIUpgrade");
    lv_totalLevelUpgrades = UserDataInstanceCount("CoopAILevelUpgrades");

    // Implementation
    auto4D34C418_ae = lv_totalLevelUpgrades;
    lv_upgradeIter = 1;
    for ( ; ( (auto4D34C418_ai >= 0 && lv_upgradeIter <= auto4D34C418_ae) || (auto4D34C418_ai < 0 && lv_upgradeIter >= auto4D34C418_ae) ) ; lv_upgradeIter += auto4D34C418_ai ) {
        lv_coopAILevelUpgrade = UserDataInstance("CoopAILevelUpgrades", lv_upgradeIter);
        lv_faction = UserDataGetUserInstance("CoopAILevelUpgrades", lv_coopAILevelUpgrade, "Faction", 1);
        if ((lv_faction != null) && (lv_faction != lv_commaderFaction)) {
            continue;
        }

        autoA719D967_ae = UserDataFieldValueCount("CoopAILevelUpgrades", "Upgrade");
        autoA719D967_var = 1;
        for ( ; autoA719D967_var <= autoA719D967_ae; autoA719D967_var += 1 ) {
            lv_upgrade = UserDataGetUpgrade("CoopAILevelUpgrades", lv_coopAILevelUpgrade, "Upgrade", autoA719D967_var);
            lv_time = UserDataGetFixed("CoopAILevelUpgradesTimings", UserDataInstance("CoopAILevelUpgradesTimings", autoA719D967_var), "TimePerDifficult", lp_difficulty);
            if ((lv_time < 0.0)) {
                continue;
            }

            if ((lv_activeUpgrades >= libCOMI_gv_cMC_CoopAI_MaxNumUpgrades)) {
                TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_4A925500"), true);
                break;
            }
            else {
                lv_activeUpgrades += 1;
                libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_time[lv_activeUpgrades] = lv_time;
                libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_upgrade[lv_activeUpgrades] = lv_upgrade;
            }
        }
    }
    auto93DD5DF8_ae = lv_totalUpgrades;
    lv_upgradeIter = 1;
    for ( ; ( (auto93DD5DF8_ai >= 0 && lv_upgradeIter <= auto93DD5DF8_ae) || (auto93DD5DF8_ai < 0 && lv_upgradeIter >= auto93DD5DF8_ae) ) ; lv_upgradeIter += auto93DD5DF8_ai ) {
        lv_coopAIUpgrade = UserDataInstance("CoopAIUpgrade", lv_upgradeIter);
        lv_faction = UserDataGetUserInstance("CoopAIUpgrade", lv_coopAIUpgrade, "Faction", 1);
        if ((lv_faction != null) && (lv_faction != lv_commaderFaction)) {
            continue;
        }

        lv_time = UserDataGetFixed("CoopAIUpgrade", lv_coopAIUpgrade, "TimePerDifficult", lp_difficulty);
        if ((lv_time < 0.0)) {
            continue;
        }

        if ((UserDataGetUserInstance("CoopAIUpgrade", lv_coopAIUpgrade, "Exclusive", 1) != null) && (UserDataGetUserInstance("CoopAIUpgrade", lv_coopAIUpgrade, "Exclusive", 1) != "None") && (UserDataGetUserInstance("CoopAIUpgrade", lv_coopAIUpgrade, "Exclusive", 1) != lv_commader)) {
            continue;
        }

        if ((lv_activeUpgrades >= libCOMI_gv_cMC_CoopAI_MaxNumUpgrades)) {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_CDE8D4FE"), true);
            break;
        }
        else {
            lv_activeUpgrades += 1;
            libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_time[lv_activeUpgrades] = lv_time;
            libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_upgrade[lv_activeUpgrades] = UserDataGetUpgrade("CoopAIUpgrade", lv_coopAIUpgrade, "Upgrade", 1);
        }
    }
    libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_numUpgrades = lv_activeUpgrades;
    libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_initialized = true;
    libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_cachedDifficulty = lp_difficulty;
}

void libCOMI_gf_CM_CoopAI_Upgrades (int lp_player) {
    // Variable Declarations
    int lv_upgradeIter;
    fixed lv_time;
    string lv_upgrade;
    int lv_difficulty;
    int lv_exclusiveCommanderIter;

    // Automatic Variable Declarations
    int auto56C5C2AA_ae;
    const int auto56C5C2AA_ai = 1;
    int auto3A3C35EB_ae;
    const int auto3A3C35EB_ai = 1;

    // Variable Initialization
    lv_difficulty = 2;

    // Implementation
    lv_difficulty = libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player);
    if (((libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_initialized == false) || (libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_cachedDifficulty != lv_difficulty))) {
        libCOMI_gf_CM_CoopAI_CacheUpgradeData(lp_player, lv_difficulty);
    }

    auto56C5C2AA_ae = libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_numUpgrades;
    lv_upgradeIter = 1;
    for ( ; ( (auto56C5C2AA_ai >= 0 && lv_upgradeIter <= auto56C5C2AA_ae) || (auto56C5C2AA_ai < 0 && lv_upgradeIter >= auto56C5C2AA_ae) ) ; lv_upgradeIter += auto56C5C2AA_ai ) {
        lv_upgrade = libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_upgrade[lv_upgradeIter];
        lv_time = libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_time[lv_upgradeIter];
        if ((lv_time >= 0.0) && (lv_time < GameGetMissionTime()) && (TechTreeUpgradeCount(lp_player, lv_upgrade, c_techCountQueuedOrBetter) == 0)) {
            auto3A3C35EB_ae = UserDataFieldValueCount("CoopAIUpgrade", "Exclusive");
            lv_exclusiveCommanderIter = 1;
            for ( ; ( (auto3A3C35EB_ai >= 0 && lv_exclusiveCommanderIter <= auto3A3C35EB_ae) || (auto3A3C35EB_ai < 0 && lv_exclusiveCommanderIter >= auto3A3C35EB_ae) ) ; lv_exclusiveCommanderIter += auto3A3C35EB_ai ) {
                if (((UserDataGetUserInstance("CoopAIUpgrade", UserDataInstance("CoopAIUpgrade", lv_upgradeIter), "Exclusive", lv_exclusiveCommanderIter) == null) || (UserDataGetUserInstance("CoopAIUpgrade", UserDataInstance("CoopAIUpgrade", lv_upgradeIter), "Exclusive", lv_exclusiveCommanderIter) == "None"))) {
                    TechTreeUpgradeAddLevel(lp_player, lv_upgrade, 1);
                    break;
                }

            }
        }

    }
}

void libCOMI_gf_CM_MasteryResearchCostReduction (int lp_player, string lp_masteryUpgrade, fixed lp_percentReductionPerPoint) {
    // Variable Declarations
    string lv_ability;
    int lv_i;
    int lv_costMinerals;
    int lv_costVespene;
    int lv_upgradeCount;
    fixed lv_r;

    // Automatic Variable Declarations
    int auto0FE65364_ae;
    int auto0FE65364_ai;
    const int auto6642A659_ae = 29;
    const int auto6642A659_ai = 1;

    // Variable Initialization
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, lp_masteryUpgrade, c_techCountCompleteOnly);

    // Implementation
    auto0FE65364_ae = CatalogEntryCount(c_gameCatalogAbil);
    auto0FE65364_ai = 1;
    while (auto0FE65364_ai <= auto0FE65364_ae) {
        lv_ability = CatalogEntryGet(c_gameCatalogAbil, auto0FE65364_ai);
        auto0FE65364_ai = auto0FE65364_ai + 1;
        if ((AbilityClass(lv_ability) == c_classIdCAbilResearch)) {
            lv_i = 0;
            for ( ; ( (auto6642A659_ai >= 0 && lv_i <= auto6642A659_ae) || (auto6642A659_ai < 0 && lv_i >= auto6642A659_ae) ) ; lv_i += auto6642A659_ai ) {
                lv_costMinerals = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Resource[" + IntToString(0) + "]", libCOMI_gv_vU_PLAYER_NEUTRAL);
                lv_costVespene = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Resource[" + IntToString(1) + "]", libCOMI_gv_vU_PLAYER_NEUTRAL);
                if (((lv_costMinerals > 0) || (lv_costVespene > 0))) {
                    lv_r = (100.0 - (lv_upgradeCount * lp_percentReductionPerPoint));
                    lv_costMinerals = FixedToInt(RoundI(((lv_costMinerals * lv_r) / 100.0)));
                    lv_costVespene = FixedToInt(RoundI(((lv_costVespene * lv_r) / 100.0)));
                    CatalogFieldValueSet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(lv_costMinerals));
                    CatalogFieldValueSet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Resource[" + IntToString(1) + "]", lp_player, IntToString(lv_costVespene));
                }

            }
        }

    }
}

void libCOMI_gf_PlayersandAllienceSettings () {
    // Variable Declarations
    int lv_player;
    int lv_chosenPlyer;
    int lv_teamIndex;

    // Automatic Variable Declarations
    playergroup auto3C872793_g;
    playergroup auto0BE22A83_g;
    playergroup autoAFF8CCC7_g;
    int autoAFF8CCC7_var;
    playergroup auto1A11DCE8_g;
    playergroup auto3AA67E67_g;
    int auto3AA67E67_var;
    playergroup autoA14B3FB7_g;
    int autoA14B3FB7_var;
    playergroup auto019EE0A4_g;
    int auto019EE0A4_var;
    playergroup autoFB2244D6_g;
    int autoFB2244D6_var;
    playergroup autoDD8C7461_g;
    playergroup auto7F3B4A0E_g;
    playergroup auto94C6747B_g;
    playergroup autoF08381C5_g;
    playergroup auto075016DE_g;
    playergroup auto1412CFF6_g;
    int auto1412CFF6_var;
    playergroup auto2C44AD1F_g;
    int auto2C44AD1F_var;

    // Variable Initialization

    // Implementation
    auto3C872793_g = libCOMI_gv_vU_AllyNPC;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto3C872793_g, lv_player);
        if (lv_player < 0) { break; }
    }
    libCOMI_gf_SetPlayerGroupAlliance(libCOMI_gv_vU_BonusNPC, libNtve_ge_AllianceSetting_Neutral);
    libCOMI_gf_SetPlayerGroupAlliance(libCOMI_gv_vU_HostileNPC, libNtve_ge_AllianceSetting_Enemy);
    libCOMI_gf_SetPlayerGroupAlliance(libCOMI_gv_vU_Enemies, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAllianceAspectForPlayerGroup(libCOMI_gv_vU_Enemies, c_allianceIdPower, true);
    libCOMI_gf_SetPlayerGroupAlliance(libCOMI_gv_vU_Allies, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAllianceAspectForPlayerGroup(libCOMI_gv_vU_Allies, c_allianceIdPower, true);
    libNtve_gf_SetAllianceAspectForPlayerGroup(libCOMI_gf_GetAlliedCommandersPlayers(), c_allianceIdTrade, true);
    libNtve_gf_SetAllianceAspectForPlayerGroup(libCOMI_gf_GetAlliedCommandersPlayers(), c_allianceIdDefeat, true);
    libNtve_gf_SetAllianceAspectForPlayerGroup(libCOMI_gv_vU_EnemyPlayers, c_allianceIdDefeat, true);
    libNtve_gf_SetAllianceAspectForPlayerGroup(libCOMI_gf_GetAlliedCommandersPlayers(), c_allianceIdDefeat, true);
    libNtve_gf_SetAllianceAspectForPlayerGroup(libCOMI_gv_vU_EnemyPlayers, c_allianceIdDefeat, true);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(libCOMI_gv_vU_Enemies, libCOMI_gv_vU_Allies, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(libCOMI_gv_vU_Enemies, libCOMI_gv_vU_BonusNPC, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(libCOMI_gv_vU_Allies, libCOMI_gv_vU_Enemies, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(libCOMI_gf_GetAlliedCommandersPlayers(), libCOMI_gv_vU_BonusNPC, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(libCOMI_gv_vU_AllyNPC, libCOMI_gv_vU_BonusNPC, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(libCOMI_gv_vU_BonusNPC, libCOMI_gv_vU_Enemies, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(libCOMI_gv_vU_BonusNPC, libCOMI_gv_vU_AllyNPC, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(libCOMI_gv_vU_BonusNPC, libCOMI_gf_GetAlliedCommandersPlayers(), libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(libCOMI_gv_vU_NeutralNPC, libCOMI_gv_all, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(libCOMI_gv_all, libCOMI_gv_vU_NeutralNPC, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(libCOMI_gv_all, libCOMI_gv_vU_HostileNPC, libNtve_ge_AllianceSetting_Enemy);
    auto0BE22A83_g = libCOMI_gf_GetAlliedCommandersPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto0BE22A83_g, lv_player);
        if (lv_player < 0) { break; }
        autoAFF8CCC7_g = libCOMI_gf_GetAlliedCommandersPlayers();
        autoAFF8CCC7_var = -1;
        while (true) {
            autoAFF8CCC7_var = PlayerGroupNextPlayer(autoAFF8CCC7_g, autoAFF8CCC7_var);
            if (autoAFF8CCC7_var < 0) { break; }
            if ((lv_player != autoAFF8CCC7_var)) {
                if ((PlayerType(autoAFF8CCC7_var) == c_playerTypeUser)) {
                    libCOMI_gf_SetAllianceOneWayCoop(lv_player, autoAFF8CCC7_var, libNtve_ge_AllianceSetting_AllyWithSharedVision);
                }
                else {
                    libCOMI_gf_SetAllianceOneWayCoop(lv_player, autoAFF8CCC7_var, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
                }
                if ((PlayerType(lv_player) == c_playerTypeUser)) {
                    libCOMI_gf_SetAllianceOneWayCoop(autoAFF8CCC7_var, lv_player, libNtve_ge_AllianceSetting_AllyWithSharedVision);
                }
                else {
                    libCOMI_gf_SetAllianceOneWayCoop(autoAFF8CCC7_var, lv_player, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
                }
            }

        }
    }
    auto1A11DCE8_g = libCOMI_gv_vU_EnemyAI;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto1A11DCE8_g, lv_player);
        if (lv_player < 0) { break; }
        auto3AA67E67_g = libCOMI_gv_vU_EnemyAI;
        auto3AA67E67_var = -1;
        while (true) {
            auto3AA67E67_var = PlayerGroupNextPlayer(auto3AA67E67_g, auto3AA67E67_var);
            if (auto3AA67E67_var < 0) { break; }
            if ((lv_player != auto3AA67E67_var)) {
                libNtve_gf_SetAlliance(lv_player, auto3AA67E67_var, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
                libNtve_gf_SetAlliance(auto3AA67E67_var, lv_player, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
            }

        }
        autoA14B3FB7_g = libCOMI_gv_vU_EnemyPlayers;
        autoA14B3FB7_var = -1;
        while (true) {
            autoA14B3FB7_var = PlayerGroupNextPlayer(autoA14B3FB7_g, autoA14B3FB7_var);
            if (autoA14B3FB7_var < 0) { break; }
            if ((lv_player != autoA14B3FB7_var)) {
                libNtve_gf_SetAlliance(lv_player, autoA14B3FB7_var, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
                libNtve_gf_SetAlliance(autoA14B3FB7_var, lv_player, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
            }

        }
    }
    auto019EE0A4_g = libCOMI_gv_vU_EnemyPlayers;
    auto019EE0A4_var = -1;
    while (true) {
        auto019EE0A4_var = PlayerGroupNextPlayer(auto019EE0A4_g, auto019EE0A4_var);
        if (auto019EE0A4_var < 0) { break; }
        PlayerSetState(auto019EE0A4_var, c_playerStateFoodIgnored, true);
    }
    autoFB2244D6_g = libCOMI_gv_vU_Enemies;
    autoFB2244D6_var = -1;
    while (true) {
        autoFB2244D6_var = PlayerGroupNextPlayer(autoFB2244D6_g, autoFB2244D6_var);
        if (autoFB2244D6_var < 0) { break; }
        PlayerSetState(autoFB2244D6_var, c_playerStateFoodIgnored, true);
    }
    autoDD8C7461_g = libCOMI_gv_vU_EnemyAI;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoDD8C7461_g, lv_player);
        if (lv_player < 0) { break; }
        PlayerSetState(lv_player, c_playerStateFoodIgnored, true);
        PlayerSetState(lv_player, c_playerStateMineralCostIgnored, true);
        PlayerSetState(lv_player, c_playerStateVespeneCostIgnored, true);
        PlayerSetState(lv_player, c_playerStateCustomCostIgnored, true);
        PlayerSetState(lv_player, c_playerStateTerrazineCostIgnored, true);
        PlayerSetColorIndex(lv_player, libCOMI_gf_EnemyPlayerColor(), true);
    }
    auto7F3B4A0E_g = libCOMI_gv_vU_BonusNPC;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto7F3B4A0E_g, lv_player);
        if (lv_player < 0) { break; }
        PlayerSetColorIndex(lv_player, libCOMI_gf_EnemyPlayerColor(), true);
    }
    auto94C6747B_g = libCOMI_gv_vU_AllyNPC;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto94C6747B_g, lv_player);
        if (lv_player < 0) { break; }
        PlayerSetColorIndex(lv_player, libCOMI_gf_AllyPlayerColor(), true);
    }
    autoF08381C5_g = libCOMI_gf_GetAlliedCommandersPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoF08381C5_g, lv_player);
        if (lv_player < 0) { break; }
        if (((PlayerStatus(lv_player) == c_playerStatusLeft) || (PlayerType(lv_player) == c_playerTypeNone))) {
            libNtve_gf_SetAllianceBetweenTwoPlayerGroups(PlayerGroupSingle(lv_player), libCOMI_gf_GetTeammates(lv_player), libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
        }

    }
    auto075016DE_g = libCOMI_gv_all;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto075016DE_g, lv_player);
        if (lv_player < 0) { break; }
        libNtve_gf_SetAlliance(lv_player, libCOMI_gv_vU_PLAYER_NEUTRAL, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(libCOMI_gv_vU_PLAYER_NEUTRAL, lv_player, libNtve_ge_AllianceSetting_Neutral);
        if ((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), lv_player) == false)) {
            libNtve_gf_SetAlliance(lv_player, libCOMI_gv_vU_PLAYER_HOSTILE, libNtve_ge_AllianceSetting_Neutral);
            libNtve_gf_SetAlliance(libCOMI_gv_vU_PLAYER_HOSTILE, lv_player, libNtve_ge_AllianceSetting_Neutral);
        }

    }
    auto1412CFF6_g = libCOMI_gf_GetAlliesPlayers();
    auto1412CFF6_var = -1;
    while (true) {
        auto1412CFF6_var = PlayerGroupNextPlayer(auto1412CFF6_g, auto1412CFF6_var);
        if (auto1412CFF6_var < 0) { break; }
        PlayerGroupAdd(libARRA_gv_teams[1], auto1412CFF6_var);
    }
    auto2C44AD1F_g = PlayerGroupAll();
    auto2C44AD1F_var = -1;
    while (true) {
        auto2C44AD1F_var = PlayerGroupNextPlayer(auto2C44AD1F_g, auto2C44AD1F_var);
        if (auto2C44AD1F_var < 0) { break; }
        if ((auto2C44AD1F_var == 0)) {
            PlayerGroupAdd(libARRA_gv_teams[0], auto2C44AD1F_var);
        }
        else if ((PlayerGroupHasPlayer(libCOMI_gf_GetAlliesPlayers(), auto2C44AD1F_var) == true)) {
            PlayerGroupAdd(libARRA_gv_teams[1], auto2C44AD1F_var);
        }
        else if ((PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), auto2C44AD1F_var) == true)) {
            PlayerGroupAdd(libARRA_gv_teams[2], auto2C44AD1F_var);
        }
        else if (true) {
            PlayerGroupAdd(libARRA_gv_teams[3], auto2C44AD1F_var);
        }
    }
}

void libCOMI_gf_ShareVisionAmongPlayers (playergroup lp_players) {
    // Variable Declarations
    int lv_indexPlayer1;
    int lv_indexPlayer2;

    // Automatic Variable Declarations
    playergroup autoE1FC9780_g;
    playergroup auto201B96D5_g;

    // Variable Initialization

    // Implementation
    autoE1FC9780_g = lp_players;
    lv_indexPlayer1 = -1;
    while (true) {
        lv_indexPlayer1 = PlayerGroupNextPlayer(autoE1FC9780_g, lv_indexPlayer1);
        if (lv_indexPlayer1 < 0) { break; }
        auto201B96D5_g = lp_players;
        lv_indexPlayer2 = -1;
        while (true) {
            lv_indexPlayer2 = PlayerGroupNextPlayer(auto201B96D5_g, lv_indexPlayer2);
            if (lv_indexPlayer2 < 0) { break; }
            if ((lv_indexPlayer1 != lv_indexPlayer2)) {
                PlayerSetAlliance(lv_indexPlayer1, c_allianceIdVision, lv_indexPlayer2, true);
            }

        }
    }
}

void libCOMI_gf_SetAllianceCoop (int lp_sourcePlayer, int lp_targetPlayer, int lp_alliance) {
    // Variable Declarations
    int lv_humanPlayer;
    int lv_aIPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_SetAlliance(lp_sourcePlayer, lp_targetPlayer, lp_alliance);
    if ((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), lp_sourcePlayer) == true) && (PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), lp_targetPlayer) == false)) {
        lv_humanPlayer = lp_sourcePlayer;
        lv_aIPlayer = lp_targetPlayer;
    }
    else if ((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), lp_sourcePlayer) == false) && (PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), lp_targetPlayer) == true)) {
        lv_humanPlayer = lp_targetPlayer;
        lv_aIPlayer = lp_sourcePlayer;
    }
    else if (true) {
        return ;
    }
    if ((PlayerGetAlliance(lv_aIPlayer, c_allianceIdVision, lv_humanPlayer) == true)) {
        PlayerGroupAdd(libCOMI_gv_cM_SharedVisionPlayers[lv_humanPlayer], lv_aIPlayer);
        if ((libCOMI_gv_cM_VisionShareEnabled == false)) {
            PlayerSetAlliance(lv_aIPlayer, c_allianceIdVision, lv_humanPlayer, false);
        }

    }
    else {
        PlayerGroupRemove(libCOMI_gv_cM_SharedVisionPlayers[lv_humanPlayer], lv_aIPlayer);
    }
}

void libCOMI_gf_SetAllianceOneWayCoop (int lp_sourcePlayer, int lp_targetPlayer, int lp_alliance) {
    // Automatic Variable Declarations
    int auto9570F556_val;

    // Implementation
    if ((lp_sourcePlayer != lp_targetPlayer)) {
        libNtve_gf_ClearAlliance(lp_sourcePlayer, lp_targetPlayer);
        libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, false);
        auto9570F556_val = lp_alliance;
        if (auto9570F556_val == libNtve_ge_AllianceSetting_Ally) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_AllyWithSharedVision) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
            libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
            libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPushable, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
            libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPushable, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdControl, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
            libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPushable, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdControl, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdSpend, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_Neutral) {
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_NeutralWithSharedVision) {
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_NeutralWithSharedVisionAndPushable) {
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer, true);
            libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPushable, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_Enemy) {
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_EnemyWithSharedVision) {
            libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
        }
        else {
        }
    }

}

void libCOMI_gf_SetAllianceAspectCoop (int lp_inSourcePlayer, int lp_inAllianceId, int lp_inTargetPlayer, bool lp_ally) {
    // Variable Declarations
    int lv_humanPlayer;
    int lv_aIPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_inAllianceId != c_allianceIdVision)) {
        PlayerSetAlliance(lp_inSourcePlayer, lp_inAllianceId, lp_inTargetPlayer, lp_ally);
        return ;
    }

    if ((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), lp_inSourcePlayer) == false) && (PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), lp_inTargetPlayer) == true)) {
        if ((lp_ally == true)) {
            PlayerGroupAdd(libCOMI_gv_cM_SharedVisionPlayers[lp_inTargetPlayer], lp_inSourcePlayer);
        }
        else {
            PlayerGroupRemove(libCOMI_gv_cM_SharedVisionPlayers[lp_inTargetPlayer], lp_inSourcePlayer);
        }
        if ((libCOMI_gv_cM_VisionShareEnabled == false)) {
            PlayerSetAlliance(lp_inSourcePlayer, c_allianceIdVision, lp_inTargetPlayer, false);
            return ;
        }

    }

    PlayerSetAlliance(lp_inSourcePlayer, lp_inAllianceId, lp_inTargetPlayer, lp_ally);
}

void libCOMI_gf_SetPlayerGroupAlliance (playergroup lp_players, int lp_alliance) {
    // Variable Declarations
    int lv_player1;
    int lv_player2;

    // Automatic Variable Declarations
    playergroup auto8B275F3C_g;
    playergroup auto764B97E8_g;

    // Variable Initialization

    // Implementation
    auto8B275F3C_g = lp_players;
    lv_player1 = -1;
    while (true) {
        lv_player1 = PlayerGroupNextPlayer(auto8B275F3C_g, lv_player1);
        if (lv_player1 < 0) { break; }
        auto764B97E8_g = lp_players;
        lv_player2 = -1;
        while (true) {
            lv_player2 = PlayerGroupNextPlayer(auto764B97E8_g, lv_player2);
            if (lv_player2 < 0) { break; }
            if ((lv_player1 != lv_player2)) {
                libCOMI_gf_SetAllianceOneWayCoop(lv_player1, lv_player2, lp_alliance);
            }

        }
    }
}

void libCOMI_gf_CM_RestorePlayerVision () {
    // Automatic Variable Declarations
}

void libCOMI_gf_SetPlayerColors () {
    int init_i;

    // Variable Declarations
    int lv_enemyPlayers;
    int[9] lv_enemyPlayersColors;

    // Automatic Variable Declarations
    playergroup auto891FF788_g;
    int auto891FF788_var;
    playergroup autoBAA07AA5_g;
    int autoBAA07AA5_var;
    playergroup auto64551B50_g;
    int auto64551B50_var;
    string auto0179D2A8_val;

    // Variable Initialization
    for (init_i = 0; init_i <= 8; init_i += 1) {
        lv_enemyPlayersColors[init_i] = 1;
    }

    // Implementation
    lv_enemyPlayersColors[1] = 14;
    lv_enemyPlayersColors[2] = 10;
    lv_enemyPlayersColors[3] = 15;
    lv_enemyPlayersColors[4] = 9;
    auto891FF788_g = libCOMI_gf_GetEnemyPlayers();
    auto891FF788_var = -1;
    while (true) {
        auto891FF788_var = PlayerGroupNextPlayer(auto891FF788_g, auto891FF788_var);
        if (auto891FF788_var < 0) { break; }
        lv_enemyPlayers += 1;
        PlayerSetColorIndex(auto891FF788_var, lv_enemyPlayersColors[lv_enemyPlayers], true);
    }
    lv_enemyPlayers = 0;
    autoBAA07AA5_g = libCOMI_gf_GetEnemyHumanPlayers();
    autoBAA07AA5_var = -1;
    while (true) {
        autoBAA07AA5_var = PlayerGroupNextPlayer(autoBAA07AA5_g, autoBAA07AA5_var);
        if (autoBAA07AA5_var < 0) { break; }
        lv_enemyPlayers += 1;
        PlayerSetColorIndex(autoBAA07AA5_var, lv_enemyPlayersColors[lv_enemyPlayers], true);
    }
    auto64551B50_g = libCOMI_gf_GetAlliedCommandersPlayers();
    auto64551B50_var = -1;
    while (true) {
        auto64551B50_var = PlayerGroupNextPlayer(auto64551B50_g, auto64551B50_var);
        if (auto64551B50_var < 0) { break; }
        auto0179D2A8_val = UserDataGetUserInstance("Commanders", libCOMI_gv_cCX_PlayerCommander[auto64551B50_var], "Color", 1);
        if (auto0179D2A8_val == "Aquamarine") {
            libCOMI_gv_playerColor[auto64551B50_var] = 7;
        }
        else if (auto0179D2A8_val == "Blue") {
            libCOMI_gv_playerColor[auto64551B50_var] = 2;
        }
        else if (auto0179D2A8_val == "Lavender") {
            libCOMI_gv_playerColor[auto64551B50_var] = 8;
        }
        else if (auto0179D2A8_val == "Magenta") {
            libCOMI_gv_playerColor[auto64551B50_var] = 15;
        }
        else if (auto0179D2A8_val == "Mengsk") {
            libCOMI_gv_playerColor[auto64551B50_var] = 16;
        }
        else if (auto0179D2A8_val == "Navy") {
            libCOMI_gv_playerColor[auto64551B50_var] = 13;
        }
        else if (auto0179D2A8_val == "Orange") {
            libCOMI_gv_playerColor[auto64551B50_var] = 6;
        }
        else if (auto0179D2A8_val == "Purple") {
            libCOMI_gv_playerColor[auto64551B50_var] = 4;
        }
        else if (auto0179D2A8_val == "Red") {
            libCOMI_gv_playerColor[auto64551B50_var] = 1;
        }
        else if (auto0179D2A8_val == "Rose") {
            libCOMI_gv_playerColor[auto64551B50_var] = 11;
        }
        else if (auto0179D2A8_val == "Sangria") {
            libCOMI_gv_playerColor[auto64551B50_var] = 14;
        }
        else if (auto0179D2A8_val == "Silver") {
            libCOMI_gv_playerColor[auto64551B50_var] = 12;
        }
        else if (auto0179D2A8_val == "Teal") {
            libCOMI_gv_playerColor[auto64551B50_var] = 3;
        }
        else if (auto0179D2A8_val == "Tuscary") {
            libCOMI_gv_playerColor[auto64551B50_var] = 10;
        }
        else if (auto0179D2A8_val == "Violet") {
            libCOMI_gv_playerColor[auto64551B50_var] = 9;
        }
        else if (auto0179D2A8_val == "Yellow") {
            libCOMI_gv_playerColor[auto64551B50_var] = 5;
        }
        else if (auto0179D2A8_val == "White") {
            libCOMI_gv_playerColor[auto64551B50_var] = 0;
        }
        else {
        }
        PlayerSetColorIndex(auto64551B50_var, libCOMI_gv_playerColor[auto64551B50_var], true);
    }
}

int libCOMI_gf_EnemyPlayerColor () {
    // Automatic Variable Declarations
    // Implementation
    return 1;
}

int libCOMI_gf_AllyPlayerColor () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int libCOMI_gf_CC_CommanderLevel (int lp_player, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cC_PlayerLevel[lp_player][libCOMI_gf_CC_CommanderInternalIndex(lp_commander)];
}

string libCOMI_gf_CC_PlayerLevelCommander (string lp_playerLevel) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetUserInstance("X_PlayerLevels", lp_playerLevel, "Commander", 1);
}

int libCOMI_gf_CC_PlayerLevelValue (string lp_playerLevel) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("X_PlayerLevels", lp_playerLevel, "Level", 1);
}

int libCOMI_gf_CC_PlayerExperience (int lp_player, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cCX_PlayerExperience[lp_player][libCOMI_gf_CC_CommanderInternalIndex(lp_commander)];
}

fixed libCOMI_gf_CC_PlayerExperienceResultModifier (int lp_result) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_result == c_gameOverVictory)) {
        return 1.0;
    }

    return UserDataGetFixed("GameSettings", "GameValues", "ExperienceLossMaxMultiplier", 1);
}

fixed libCOMI_gf_CC_PlayerExperienceInLevelPct (int lp_player, string lp_commander) {
    // Variable Declarations
    int lv_xPStart;
    int lv_xPInLevel;
    int lv_currentLevel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_currentLevel = libCOMI_gf_CC_CommanderLevel(lp_player, lp_commander);
    if ((lv_currentLevel == libCOMI_gv_mAX_PLAYERLEVEL)) {
        return 100.0;
    }

    lv_xPStart = libCOMI_gf_CC_PlayerLevelExperienceNeededTotal(lv_currentLevel);
    lv_xPInLevel = (libCOMI_gf_CC_PlayerExperience(lp_player, lp_commander)-lv_xPStart);
    return (IntToFixed(lv_xPInLevel) / IntToFixed(libCOMI_gf_CC_PlayerLevelExperienceNeededDelta((lv_currentLevel+1))));
}

int libCOMI_gf_CC_PlayerExperienceToNextLevel (int lp_player, string lp_commander) {
    // Variable Declarations
    int lv_xPStart;
    int lv_xPInLevel;
    int lv_currentLevel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_currentLevel = libCOMI_gf_CC_CommanderLevel(lp_player, lp_commander);
    if ((lv_currentLevel == libCOMI_gv_mAX_PLAYERLEVEL)) {
        return 0;
    }

    return (libCOMI_gf_CC_PlayerLevelExperienceNeededTotal((lv_currentLevel+1))-libCOMI_gf_CC_PlayerExperience(lp_player, lp_commander));
}

int libCOMI_gf_CC_PlayerLevelExperienceNeededDelta (int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level == 0)) {
        return 0;
    }

    return UserDataGetInt("GameSettings", "GameValues", "ExperienceToLevel", lp_level);
}

int libCOMI_gf_CC_PlayerLevelExperienceNeededTotal (int lp_level) {
    // Variable Declarations
    int lv_levelIndex;
    int lv_maxLevel;
    int lv_xPTotal;

    // Automatic Variable Declarations
    int auto5436029F_ae;
    const int auto5436029F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_maxLevel = MinI(lp_level, libCOMI_gv_mAX_PLAYERLEVEL);
    auto5436029F_ae = lv_maxLevel;
    lv_levelIndex = 1;
    for ( ; ( (auto5436029F_ai >= 0 && lv_levelIndex <= auto5436029F_ae) || (auto5436029F_ai < 0 && lv_levelIndex >= auto5436029F_ae) ) ; lv_levelIndex += auto5436029F_ai ) {
        lv_xPTotal += libCOMI_gf_CC_PlayerLevelExperienceNeededDelta(lv_levelIndex);
    }
    return lv_xPTotal;
}

int libCOMI_gf_CC_PlayerLevelFromExperience (int lp_experience) {
    // Variable Declarations
    int lv_levelIndex;
    int lv_xPRemaining;

    // Automatic Variable Declarations
    const int auto5CDF23EE_ae = libCOMI_gv_mAX_PLAYERLEVEL;
    const int auto5CDF23EE_ai = 1;

    // Variable Initialization

    // Implementation
    lv_xPRemaining = lp_experience;
    lv_levelIndex = 1;
    for ( ; ( (auto5CDF23EE_ai >= 0 && lv_levelIndex <= auto5CDF23EE_ae) || (auto5CDF23EE_ai < 0 && lv_levelIndex >= auto5CDF23EE_ae) ) ; lv_levelIndex += auto5CDF23EE_ai ) {
        if ((lv_xPRemaining < libCOMI_gf_CC_PlayerLevelExperienceNeededDelta(lv_levelIndex))) {
            return (lv_levelIndex-1);
        }

        lv_xPRemaining -= libCOMI_gf_CC_PlayerLevelExperienceNeededDelta(lv_levelIndex);
    }
    return libCOMI_gv_mAX_PLAYERLEVEL;
}

void libCOMI_gf_CC_PlayerAwardMissionXP (int lp_result, int lp_player) {
    // Variable Declarations
    int lv_baseXP;
    int lv_objectiveXP;
    int lv_totalXP;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GameIsOnline() == true)) {
        libCOMI_gf_CC_PlayerSetXPScores(lp_result, lp_player);
    }
    else {
        lv_totalXP = (lv_totalXP + lv_objectiveXP);
        libCOMI_gf_CC_PlayerExperienceAdd(lp_player, lv_totalXP);
        libCOMI_gf_CC_UpdatePlayerLevel(lp_player);
    }
}

void libCOMI_gf_CC_PlayerSetXPScores (int lp_result, int lp_player) {
    // Variable Declarations
    int lv_baseXP;
    int lv_objectiveXP;
    int lv_totalXP;
    int lv_objectiveXPGained;

    // Automatic Variable Declarations
    // Variable Initialization

}

void libCOMI_gf_CC_PlayerExperienceSet (int lp_player, int lp_experience, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cCX_PlayerExperience[lp_player][libCOMI_gf_CC_CommanderInternalIndex(lp_commander)] = lp_experience;
}

void libCOMI_gf_CC_PlayerCommanderSet (int lp_player, string lp_commander) {
    // Variable Declarations
    string lv_commander;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCOMI_gf_ActiveCommanderForPlayer(lp_player) != lp_commander)) {
        lv_commander = libCOMI_gf_CC_CommanderData(lp_commander);
        PlayerSetCommander(lp_player, lv_commander);
    }

    libCOMI_gv_cCX_PlayerCommander[lp_player] = lp_commander;
}

void libCOMI_gf_CC_UpdatePlayerLevel (int lp_player) {
    // Variable Declarations
    string lv_indexCommander;

    // Automatic Variable Declarations
    int autoB689B60D_ai;
    int autoB689B60D_ae;

    // Variable Initialization

    // Implementation
    autoB689B60D_ai = 1;
    autoB689B60D_ae = UserDataInstanceCount("PlayerCommander")+1;
    while (autoB689B60D_ai < autoB689B60D_ae) {
        lv_indexCommander = UserDataInstance("PlayerCommander", autoB689B60D_ai);
        autoB689B60D_ai = autoB689B60D_ai+1;
        libCOMI_gf_CC_PlayerLevelSet(lp_player, libCOMI_gf_CC_PlayerLevelFromExperience(libCOMI_gf_CC_PlayerExperience(lp_player, lv_indexCommander)), lv_indexCommander);
    }
}

void libCOMI_gf_CC_PlayerLevelSet (int lp_player, int lp_level, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cC_PlayerLevel[lp_player][libCOMI_gf_CC_CommanderInternalIndex(lp_commander)] = MinI(lp_level, libCOMI_gv_mAX_PLAYERLEVEL);
}

void libCOMI_gf_CC_PlayerExperienceAdd (int lp_player, int lp_experience) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CC_PlayerExperienceSet(lp_player, (libCOMI_gf_CC_PlayerExperience(lp_player, libCOMI_gf_ActiveCommanderForPlayer(lp_player))+lp_experience), libCOMI_gf_ActiveCommanderForPlayer(lp_player));
}

void libCOMI_gf_CC_PlayerExperienceSetToLevel (int lp_player, int lp_level, string lp_commander) {
    // Variable Declarations
    int lv_levelCount;
    int lv_xPCount;
    string lv_indexLevel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCOMI_gf_CC_PlayerExperienceSet(lp_player, libCOMI_gf_CC_PlayerLevelExperienceNeededTotal(lp_level), lp_commander);
}

void libCOMI_gf_CC_ResetCurrency (int lp_player) {
    // Variable Declarations
    int lv_raceIndex;
    string lv_indexCommander;

    // Automatic Variable Declarations
    int auto23EEA78D_ai;
    int auto23EEA78D_ae;

    // Variable Initialization

    // Implementation
    auto23EEA78D_ai = 1;
    auto23EEA78D_ae = UserDataInstanceCount("PlayerCommander")+1;
    while (auto23EEA78D_ai < auto23EEA78D_ae) {
        lv_indexCommander = UserDataInstance("PlayerCommander", auto23EEA78D_ai);
        auto23EEA78D_ai = auto23EEA78D_ai+1;
        libCOMI_gf_CC_PlayerExperienceSetToLevel(lp_player, 0, lv_indexCommander);
    }
}

playergroup libCOMI_gf_CC_PlayersOfCommander (string lp_commander) {
    // Variable Declarations
    int lv_indexPlayer;
    playergroup lv_playerGroup;

    // Automatic Variable Declarations
    playergroup autoCC7A7428_g;

    // Variable Initialization
    lv_playerGroup = PlayerGroupEmpty();

    // Implementation
    autoCC7A7428_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoCC7A7428_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOMI_gf_ActiveCommanderForPlayer(lv_indexPlayer) == lp_commander)) {
            PlayerGroupAdd(lv_playerGroup, lv_indexPlayer);
        }

    }
    return lv_playerGroup;
}

playergroup libCOMI_gf_GetAlliedCommandersPlayers () {
    // Automatic Variable Declarations
    // Implementation
    return PlayerGroupCopy(libCOMI_gv_vU_AlliedCommanders);
}

int libCOMI_gf_GetRolePlayer (int lp_slot) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()) < lp_slot)) {
        return PlayerGroupPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), 1);
    }
    else {
        return PlayerGroupPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), lp_slot);
    }
}

playergroup libCOMI_gf_GetAlliedCommandersPlayersCopy () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gf_GetAlliedCommandersPlayers();
}

playergroup libCOMI_gf_HumanPlayers () {
    // Variable Declarations
    playergroup lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((PlayerGroupCount(libCOMI_gv_vU_HumanPlayers) == 0)) {
        PlayerGroupAdd(lv_result, 1);
        PlayerGroupAdd(lv_result, 2);
        PlayerGroupAdd(lv_result, 12);
        return lv_result;
    }
    else {
        return libCOMI_gv_vU_HumanPlayers;
    }
}

int libCOMI_gf_CC_PlayerAlly (int lp_player) {
    // Variable Declarations
    playergroup lv_group;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = libCOMI_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(lp_player);

    // Implementation
    PlayerGroupRemove(lv_group, lp_player);
    if ((PlayerGroupCount(lv_group) > 0)) {
        return PlayerGroupPlayer(lv_group, 1);
    }

    if ((lp_player == 1)) {
        return 2;
    }
    else {
        return 1;
    }
}

int libCOMI_gf_CC_PlayerAllyNew (int lp_player) {
    // Variable Declarations
    playergroup lv_group;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = libCOMI_gf_GetAlliedCommandersPlayers();

    // Implementation
    PlayerGroupRemove(lv_group, lp_player);
    if ((PlayerGroupCount(lv_group) >= 1)) {
        return PlayerGroupPlayer(lv_group, 1);
    }
    else {
        return 0;
    }
}

int libCOMI_gf_CC_PlayerAllyNew2 (int lp_player) {
    // Variable Declarations
    playergroup lv_group;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = libCOMI_gf_GetAlliedCommandersPlayers();

    // Implementation
    PlayerGroupRemove(lv_group, lp_player);
    if ((PlayerGroupCount(lv_group) >= 2)) {
        return PlayerGroupPlayer(lv_group, 2);
    }
    else {
        return 0;
    }
}

playergroup libCOMI_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf (int lp_player) {
    // Variable Declarations
    playergroup lv_playerGroup;
    playergroup lv_playerGroupAllies;
    playergroup lv_playerGroupCommnaders;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerGroupAllies = libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_AllyMutual, lp_player);
    lv_playerGroupCommnaders = libCOMI_gf_GetAlliedCommandersPlayersCopy();

    // Implementation
    lv_playerGroup = libNtve_gf_IntersectionOfPlayerGroups(lv_playerGroupAllies, lv_playerGroupCommnaders);
    return lv_playerGroup;
}

bool libCOMI_gf_PlayerIsCommander (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gf_GetPlayerCommanderGameLink(lp_player) != null)) {
        return true;
    }

    if ((TechTreeUpgradeCount(lp_player, "ARC@IsPlayerCommanderUpgrade", c_techCountCompleteOnly) > 0)) {
        return true;
    }

    return false;
}

string libCOMI_gf_ActiveCommanderForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cCX_PlayerCommander[lp_player];
}

string libCOMI_gf_GetPlayerCommanderGameLink (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Commanders", libCOMI_gv_cCX_PlayerCommander[lp_player], "ZZ_CommanderData", 1);
}

string libCOMI_gf_GetCommanderRace (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Commanders", lp_commander, "Race", 1);
}

string libCOMI_gf_GetPlayerRaceVO (int lp_player) {
    // Variable Declarations
    string lv_faction;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return UserDataGetGameLink("Factions", lv_faction, "VORace", 1);
}

playergroup libCOMI_gf_GetEnemyPlayers () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_vU_Enemies;
}

playergroup libCOMI_gf_GetAlliesPlayers () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_vU_Allies;
}

playergroup libCOMI_gf_GetEnemyHumanPlayers () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_vU_EnemyPlayers;
}

playergroup libCOMI_gf_GetEnemyAIPlayers () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_vU_EnemyAI;
}

void libCOMI_gf_AddAlliedCommanderPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    PlayerGroupAdd(libCOMI_gv_vU_AlliedCommanders, lp_player);
}

playergroup libCOMI_gf_GetHumanPlayers () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_vU_HumanPlayers;
}

void libCOMI_gf_RegisterPlayers () {
    // Variable Declarations
    int lv_player;
    int lv_allyPositions;

    // Automatic Variable Declarations
    playergroup autoE0D34AB5_g;
    string autoA1A4D665_val;

    // Variable Initialization

    // Implementation
    autoE0D34AB5_g = libCOMI_gv_all;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoE0D34AB5_g, lv_player);
        if (lv_player < 0) { break; }
        if ((PlayerType(lv_player) == c_playerTypeUser)) {
            PlayerGroupAdd(libCOMI_gv_vU_HumanPlayers, lv_player);
        }

        autoA1A4D665_val = PlayerRace(lv_player);
        if (autoA1A4D665_val == "ARC@@PlayerAlly") {
            PlayerGroupAdd(libCOMI_gv_vU_Allies, lv_player);
            PlayerGroupAdd(libCOMI_gv_vU_AllyNPC, lv_player);
        }
        else if (autoA1A4D665_val == "ARC@@AmonPlayer") {
            PlayerGroupAdd(libCOMI_gv_vU_Enemies, lv_player);
            PlayerGroupAdd(libCOMI_gv_vU_EnemyAI, lv_player);
            PlayerGroupAdd(libCOMI_gv_vU_SlotsEnemy, lv_player);
        }
        else if (autoA1A4D665_val == "ARC@@Amon") {
            PlayerGroupAdd(libCOMI_gv_vU_Enemies, lv_player);
            PlayerGroupAdd(libCOMI_gv_vU_EnemyAI, lv_player);
        }
        else if (autoA1A4D665_val == "ARC@@AmonAlly") {
            PlayerGroupAdd(libCOMI_gv_vU_Enemies, lv_player);
            PlayerGroupAdd(libCOMI_gv_vU_EnemyNPC, lv_player);
        }
        else if (autoA1A4D665_val == "ARC@@Neutral") {
            PlayerGroupAdd(libCOMI_gv_vU_NeutralNPC, lv_player);
        }
        else if (autoA1A4D665_val == "ARC@@Hostile") {
            PlayerGroupAdd(libCOMI_gv_vU_HostileNPC, lv_player);
        }
        else if (autoA1A4D665_val == "ARC@@Bonus") {
            PlayerGroupAdd(libCOMI_gv_vU_BonusNPC, lv_player);
        }
        else if (autoA1A4D665_val == "ARC@@Player") {
            PlayerGroupAdd(libCOMI_gv_vU_SlotsPlayers, lv_player);
        }
        else {
            if ((PlayerRace(lv_player) == null) && (lv_player > 0) && (lv_player <= 5) && (PlayerType(lv_player) == c_playerTypeNone)) {
                PlayerGroupAdd(libCOMI_gv_vU_SlotsPlayers, lv_player);
            }

        }
    }
    libCOMI_gv_maxAmonPlayersOnMap = PlayerGroupCount(libCOMI_gv_vU_SlotsEnemy);
    libCOMI_gv_maxAlliesPlayersOnMap = PlayerGroupCount(libCOMI_gv_vU_SlotsPlayers);
    libCOMI_gv_totalPlayersOnMap = libCOMI_gv_maxAlliesPlayersOnMap;
}

int libCOMI_gf_GetAlliedPlayer (int lp_slot) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()) == 0)) {
        return 1;
    }
    else {
        if ((PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()) < lp_slot)) {
            return PlayerGroupPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), lp_slot);
        }
        else {
            return PlayerGroupPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), 1);
        }
    }
}

playergroup libCOMI_gf_GetNonDefeatedPlayers () {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCOMI_gv_cC_NondefeatedPlayerGroup == null)) {
        libCOMI_gf_CC_InitNonDefeatedPlayers();
    }

    return libCOMI_gv_cC_NondefeatedPlayerGroup;
}

void libCOMI_gf_CC_InitNonDefeatedPlayers () {
    // Variable Declarations
    int lv_indexPlayer;
    playergroup lv_commanderPlayers;
    int lv_commanderPlayersCount;

    // Automatic Variable Declarations
    playergroup auto4772DE68_g;

    // Variable Initialization
    lv_commanderPlayers = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_commanderPlayersCount = PlayerGroupCount(lv_commanderPlayers);

    // Implementation
    if ((lv_commanderPlayersCount == 0)) {
        return ;
    }

    libCOMI_gv_cC_NondefeatedPlayerGroup = PlayerGroupEmpty();
    auto4772DE68_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto4772DE68_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerStatus(lv_indexPlayer) == c_playerStatusActive) && (libCOMI_gf_PlayerIsCommander(lv_indexPlayer) == true)) {
            PlayerGroupAdd(libCOMI_gv_cC_NondefeatedPlayerGroup, lv_indexPlayer);
        }

    }
}

void libCOMI_gf_SetPlayerDefeated (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    PlayerGroupRemove(libCOMI_gv_cC_NondefeatedPlayerGroup, lp_player);
}

void libCOMI_gf_TurnPlayerFlagOnOffForGroup (playergroup lp_players, int lp_playerFlag, bool lp_onOff) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoB6C32126_g;

    // Variable Initialization

    // Implementation
    autoB6C32126_g = lp_players;
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoB6C32126_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        PlayerSetState(lv_indexPlayer, lp_playerFlag, lp_onOff);
    }
}

playergroup libCOMI_gf_GetTeammates (int lp_player) {
    // Variable Declarations
    playergroup lv_team;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_team = PlayerGroupEmpty();

    // Implementation
    if ((PlayerGroupHasPlayer(libCOMI_gf_GetAlliesPlayers(), lp_player) == true)) {
        lv_team = libCOMI_gf_GetAlliesPlayers();
    }

    if ((PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), lp_player) == true)) {
        lv_team = libCOMI_gf_GetEnemyPlayers();
    }

    PlayerGroupRemove(lv_team, lp_player);
    return lv_team;
}

playergroup libCOMI_gf_PlayersOfCommander (string lp_commander) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup autoA90FCD99_g;
    int autoA90FCD99_var;

    // Variable Initialization
    lv_players = PlayerGroupEmpty();

    // Implementation
    autoA90FCD99_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    autoA90FCD99_var = -1;
    while (true) {
        autoA90FCD99_var = PlayerGroupNextPlayer(autoA90FCD99_g, autoA90FCD99_var);
        if (autoA90FCD99_var < 0) { break; }
        if ((libCOMI_gf_ActiveCommanderForPlayer(autoA90FCD99_var) == lp_commander)) {
            PlayerGroupAdd(lv_players, autoA90FCD99_var);
        }

    }
    return lv_players;
}

playergroup libCOMI_gf_PlayersOfCommanderInaTeam (string lp_commander, int lp_team) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup autoFC09FBA3_g;
    int autoFC09FBA3_var;

    // Variable Initialization
    lv_players = PlayerGroupEmpty();

    // Implementation
    autoFC09FBA3_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    autoFC09FBA3_var = -1;
    while (true) {
        autoFC09FBA3_var = PlayerGroupNextPlayer(autoFC09FBA3_g, autoFC09FBA3_var);
        if (autoFC09FBA3_var < 0) { break; }
        if ((libCOMI_gf_ActiveCommanderForPlayer(autoFC09FBA3_var) == lp_commander) && (((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), autoFC09FBA3_var) == true) && (lp_team == 1)) || ((PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), autoFC09FBA3_var) == true) && (lp_team == 2)))) {
            PlayerGroupAdd(lv_players, autoFC09FBA3_var);
        }

    }
    return lv_players;
}

int libCOMI_gf_GetNearestCommanderPlayerInATeam (string lp_commander, int lp_player, point lp_point) {
    // Variable Declarations
    unitgroup lv_units;

    // Automatic Variable Declarations
    playergroup auto41315724_g;
    int auto41315724_var;

    // Variable Initialization
    lv_units = UnitGroupEmpty();

    // Implementation
    if ((lp_player == c_playerAny)) {
        return c_playerAny;
    }

    if ((libCOMI_gf_ActiveCommanderForPlayer(lp_player) == lp_commander)) {
        return lp_player;
    }
    else {
        auto41315724_g = libCOMI_gf_PlayersOfCommanderInaTeam(lp_commander, libARRA_gf_GetPlayerTeam(lp_player));
        auto41315724_var = -1;
        while (true) {
            auto41315724_var = PlayerGroupNextPlayer(auto41315724_g, auto41315724_var);
            if (auto41315724_var < 0) { break; }
            UnitGroupAdd(lv_units, UnitGroupClosestToPoint(UnitGroup(null, auto41315724_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lp_point));
        }
        if ((UnitGroupCount(lv_units, c_unitCountAlive) > 0)) {
            return UnitGetOwner(UnitGroupClosestToPoint(lv_units, lp_point));
        }

        return c_playerAny;
    }
}

bool libCOMI_gf_PlayerIsInCombat (int lp_player) {
    // Variable Declarations
    fixed lv_combatTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libNtve_gf_PlayerInCinematicMode(lp_player) == true)) {
        return false;
    }

    lv_combatTime = MaxF(PlayerGetPropertyFixed(lp_player, c_playerPropDamageDealtTime), PlayerGetPropertyFixed(lp_player, c_playerPropDamageTakenTime));
    lv_combatTime = (TimerGetElapsed(libCOMI_gv_cM_CombatTimer) - lv_combatTime);
    return (lv_combatTime < 4.0);
}

void libCOMI_gf_ShareVisionofUnitCoop (unit lp_unit, bool lp_shareUnshare, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), lp_player) == true)) {
        if ((lp_shareUnshare == true)) {
            UnitGroupAdd(libCOMI_gv_cM_VisionShareUnits[lp_player], lp_unit);
            if ((libCOMI_gv_cM_VisionShareEnabled == false)) {
                return ;
            }

        }
        else {
            UnitGroupRemove(libCOMI_gv_cM_VisionShareUnits[lp_player], lp_unit);
        }
    }

    libNtve_gf_ShareVisionofUnit(lp_unit, lp_shareUnshare, lp_player);
}

void libCOMI_gf_ShareVisionofUnitWithHumansCoop (unit lp_unit, bool lp_shareUnshare) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto5067DF11_g;

    // Variable Initialization

    // Implementation
    auto5067DF11_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto5067DF11_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOMI_gf_ShareVisionofUnitCoop(lp_unit, lp_shareUnshare, lv_indexPlayer);
    }
}

void libCOMI_gf_CM_VisionShareEnable (bool lp_enable) {
    // Variable Declarations
    unit lv_indexUnit;
    int lv_indexPlayer;
    bool lv_shareUnshare;
    int lv_aIPlayer;

    // Automatic Variable Declarations
    playergroup auto1DE572BF_g;
    unitgroup auto9D7EC34C_g;
    int auto9D7EC34C_u;
    playergroup autoD3C255DD_g;

    // Variable Initialization

    // Implementation
    libCOMI_gv_cM_VisionShareEnabled = lp_enable;
    if ((lp_enable == true)) {
        lv_shareUnshare = true;
    }
    else {
        lv_shareUnshare = false;
    }
    auto1DE572BF_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto1DE572BF_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        auto9D7EC34C_g = libCOMI_gv_cM_VisionShareUnits[lv_indexPlayer];
        auto9D7EC34C_u = UnitGroupCount(auto9D7EC34C_g, c_unitCountAll);
        for (;; auto9D7EC34C_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(auto9D7EC34C_g, auto9D7EC34C_u);
            if (lv_indexUnit == null) { break; }
            libNtve_gf_ShareVisionofUnit(lv_indexUnit, lv_shareUnshare, lv_indexPlayer);
        }
        autoD3C255DD_g = libCOMI_gv_cM_SharedVisionPlayers[lv_indexPlayer];
        lv_aIPlayer = -1;
        while (true) {
            lv_aIPlayer = PlayerGroupNextPlayer(autoD3C255DD_g, lv_aIPlayer);
            if (lv_aIPlayer < 0) { break; }
            libCOMI_gf_SetAllianceAspectCoop(lv_aIPlayer, c_allianceIdVision, lv_indexPlayer, true);
        }
    }
}

void libCOMI_gf_InheritDmgandAttackSpeedFromParenttoChild (unit lp_parent, unit lp_child) {
    // Variable Declarations
    string lv_b;
    int lv_bstackcount;
    fixed lv_totaldmgmultiplier;
    fixed lv_totalattackratemultiplier;
    int lv_behaviorplayer;

    // Automatic Variable Declarations
    unit autoE98657EB_u;
    int autoE98657EB_i;

    // Variable Initialization

    // Implementation
    lv_totaldmgmultiplier = 0.0;
    lv_totalattackratemultiplier = 1.0;
    autoE98657EB_u = lp_parent;
    autoE98657EB_i = 1;
    for ( ; autoE98657EB_i <= UnitBehaviorCountAll(autoE98657EB_u) ; autoE98657EB_i += BoolToInt(lv_b == UnitBehaviorGet(autoE98657EB_u, autoE98657EB_i)) ) {
        lv_b = UnitBehaviorGet(autoE98657EB_u, autoE98657EB_i);
        lv_bstackcount = UnitBehaviorCount(lp_parent, lv_b);
        if ((CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lv_b, "BehaviorCategories[" + IntToString(c_unitBehaviorFlagFast) + "]", c_playerAny) == 1)) {
            lv_behaviorplayer = UnitBehaviorEffectPlayer(lp_parent, lv_b, c_effectPlayerOrigin, 0);
            lv_totaldmgmultiplier += (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_b, "Modification.DamageDealtFraction[" + IntToString(0) + "]", lv_behaviorplayer) * lv_bstackcount);
            lv_totalattackratemultiplier *= Pow(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_b, "Modification.AttackSpeedMultiplier", lv_behaviorplayer), lv_bstackcount);
        }

    }
    libCOMI_gf_SetUnitBuffMultiplier(lp_child, lv_totalattackratemultiplier, "ARC@TriggerAttackRate", 1.01, libCOMI_ge_UnitBuffMultiplierMethod_Exponential);
    libCOMI_gf_SetUnitBuffMultiplier(lp_child, lv_totaldmgmultiplier, "ARC@TriggerDamageMultiplier", 0.01, libCOMI_ge_UnitBuffMultiplierMethod_Linear);
}

bool libCOMI_gf_CC_UnitTypeIsTownHall (string lp_unitType) {
    // Variable Declarations
    string lv_townHallIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "FlagArray[" + IntToString(16) + "]", c_playerAny) == 1)) {
        return true;
    }
    else {
        return false;
    }
}

unitgroup libCOMI_gf_CC_TownHallsForPlayer (int lp_player) {
    // Variable Declarations
    unitgroup lv_townHallGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_townHallGroup = UnitGroupEmpty();

    // Implementation
    UnitGroupAddUnitGroup(lv_townHallGroup, UnitGroup(null, lp_player, null, UnitFilter((1 << c_targetFilterPreventReveal), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    return lv_townHallGroup;
}

unit libCOMI_gf_CM_PrimaryTownHall (int lp_player) {
    // Variable Declarations
    fixed lv_distance;
    unitgroup lv_hatcheryGroup;
    unit lv_closestHatchery;
    unit lv_indexTownHall;

    // Automatic Variable Declarations
    unitgroup autoC0868BF8_g;
    int autoC0868BF8_u;

    // Variable Initialization
    lv_distance = 500.0;
    lv_hatcheryGroup = UnitGroupEmpty();

    // Implementation
    if (((UnitIsAlive(libCOMI_gv_cM_PrimaryTownHall[lp_player]) == false) || (UnitFilterMatch(libCOMI_gv_cM_PrimaryTownHall[lp_player], lp_player, UnitFilter((1 << c_targetFilterGround), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false))) {
        lv_hatcheryGroup = libCOMI_gf_CC_TownHallsForPlayer(lp_player);
        autoC0868BF8_g = lv_hatcheryGroup;
        autoC0868BF8_u = UnitGroupCount(autoC0868BF8_g, c_unitCountAll);
        for (;; autoC0868BF8_u -= 1) {
            lv_indexTownHall = UnitGroupUnitFromEnd(autoC0868BF8_g, autoC0868BF8_u);
            if (lv_indexTownHall == null) { break; }
            if ((DistanceBetweenPoints(libARRA_gf_GetPlayerStartPosition(lp_player), UnitGetPosition(lv_indexTownHall)) < lv_distance)) {
                lv_distance = DistanceBetweenPoints(libARRA_gf_GetPlayerStartPosition(lp_player), UnitGetPosition(lv_indexTownHall));
                lv_closestHatchery = lv_indexTownHall;
            }

        }
        if ((lv_closestHatchery != null)) {
            libCOMI_gv_cM_PrimaryTownHall[lp_player] = lv_closestHatchery;
        }
        else {
            libCOMI_gv_cM_PrimaryTownHall[lp_player] = null;
        }
    }

    return libCOMI_gv_cM_PrimaryTownHall[lp_player];
}

void libCOMI_gf_SpawnLarvaForHatchery (unit lp_hatchery, int lp_larvaCount) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorSpawn(lp_hatchery, "ARC@SpawnLarva", lp_larvaCount);
}

void libCOMI_gf_CreateStartingUnitsForPlayer (int lp_player, point lp_location) {
    // Variable Declarations
    actor lv_actor;
    string lv_commander;
    string lv_faction;
    string lv_uNIT_TOWNHALL;
    string lv_uNIT_SUPPORT;
    string lv_uNIT_REFINERY;
    string lv_uNIT_WORKER;
    unitgroup lv_minerals;
    unitgroup lv_vespene;
    unit lv_townhall;
    string lv_behavior;
    int lv_iteration;
    int lv_round;
    unit lv_mineralUnit;
    unit lv_workerUnit;
    point lv_mineralPoint;
    point lv_targetPoint;
    string lv_actorInstance;
    string lv_ability;
    abilcmd lv_abilityCommand;
    int lv_abilityCommandIndex;
    string lv_unitUserData;

    // Automatic Variable Declarations
    int auto8B953206_ae;
    int auto8B953206_var;
    unitgroup autoE49DCEAB_g;
    int autoE49DCEAB_u;
    unit autoE49DCEAB_var;
    const int autoF1B59A7F_ae = 12;
    int autoF1B59A7F_var;

    // Variable Initialization
    lv_commander = libCOMI_gf_ActiveCommanderForPlayer(lp_player);
    lv_faction = UserDataGetUserInstance("Commanders", lv_commander, "Faction", 1);
    lv_uNIT_TOWNHALL = UserDataGetUnit("Factions", lv_faction, "UnitTownHall", 1);
    lv_uNIT_SUPPORT = UserDataGetUnit("Factions", lv_faction, "UnitExtra", 1);
    lv_uNIT_REFINERY = UserDataGetUnit("Factions", lv_faction, "UnitRefinery", 1);
    lv_uNIT_WORKER = UserDataGetUnit("Factions", lv_faction, "UnitPeon", 1);
    lv_minerals = libARRA_gf_GetResourcesNearPoint(lp_location, libCOMI_gf_ResourcesRadius(), c_resourceTypeMinerals);
    lv_vespene = libARRA_gf_GetResourcesNearPoint(lp_location, libCOMI_gf_ResourcesRadius(), c_resourceTypeVespene);
    lv_iteration = 1;
    lv_round = 1;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_uNIT_TOWNHALL, 0, lp_player, lp_location);
    lv_townhall = UnitLastCreated();
    libCOMI_gv_cM_PrimaryTownHall[lp_player] = lv_townhall;
    lv_ability = libNtve_gf_UnitAbilityGetByType(lv_townhall, c_classIdCAbilRally, 1);
    lv_unitUserData = libCOMI_gf_UnitUserData(lv_uNIT_TOWNHALL);
    lv_abilityCommandIndex = UserDataGetInt("UnitData", lv_unitUserData, "WorkersRallyIndex", 1);
    lv_abilityCommand = AbilityCommand(lv_ability, lv_abilityCommandIndex);
    UnitGroupIssueOrder(libNtve_gf_ConvertUnitToUnitGroup(lv_townhall), OrderTargetingUnit(lv_abilityCommand, UnitGroupClosestToPoint(lv_minerals, lp_location)), c_orderQueueAddToFront);
    auto8B953206_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT_TOWNHALL, "BehaviorArray", lp_player) - 1);
    auto8B953206_var = 0;
    for ( ; auto8B953206_var <= auto8B953206_ae; auto8B953206_var += 1 ) {
        lv_behavior = (CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT_TOWNHALL, "BehaviorArray[" + IntToString(auto8B953206_var) + "].Link", lp_player));
        if ((CatalogEntryClass(c_gameCatalogBehavior, lv_behavior) == libARRA_gv_cBehaviorCreep)) {
            CreepModify(UnitGetPosition(lv_townhall), 11.0, true, false);
        }

    }
    lv_actorInstance = UserDataGetUserInstance("MissionSettings", "CurrentMission", "AllyTownHallActor", 1);
    if ((lv_uNIT_SUPPORT != null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_uNIT_SUPPORT, 0, lp_player, libNtve_gf_PointOffsetTowardsPoint(UnitGroupCenterOfGroup(lv_minerals), 11.0, lp_location));
    }

    lv_actorInstance = UserDataGetUserInstance("MissionSettings", "CurrentMission", "AllyRefineryActor", 1);
    autoE49DCEAB_g = lv_vespene;
    autoE49DCEAB_u = UnitGroupCount(autoE49DCEAB_g, c_unitCountAll);
    for (;; autoE49DCEAB_u -= 1) {
        autoE49DCEAB_var = UnitGroupUnitFromEnd(autoE49DCEAB_g, autoE49DCEAB_u);
        if (autoE49DCEAB_var == null) { break; }
    }
    autoF1B59A7F_var = 1;
    for ( ; autoF1B59A7F_var <= autoF1B59A7F_ae; autoF1B59A7F_var += 1 ) {
        lv_mineralUnit = UnitGroupUnit(lv_minerals, lv_iteration);
        lv_mineralPoint = UnitGetPosition(lv_mineralUnit);
        if ((lv_round == 1)) {
            lv_targetPoint = PointInterpolate(lp_location, lv_mineralPoint, 0.8);
        }
        else {
            lv_targetPoint = PointInterpolate(lp_location, lv_mineralPoint, 0.3);
        }
        libNtve_gf_UnitCreateFacingPoint(1, lv_uNIT_WORKER, 0, lp_player, lv_targetPoint, lv_mineralPoint);
        lv_workerUnit = UnitLastCreated();
        lv_abilityCommand = AbilityCommand(libNtve_gf_UnitAbilityGetByType(lv_workerUnit, c_classIdCAbilHarvest, 1), 0);
        UnitIssueOrder(lv_workerUnit, OrderTargetingUnit(lv_abilityCommand, lv_mineralUnit), c_orderQueueReplace);
        libNtve_gf_PauseUnit(lv_workerUnit, true);
        lv_iteration += 1;
        if ((UnitGroupCount(lv_minerals, c_unitCountAlive) < lv_iteration)) {
            lv_iteration = 1;
            lv_round += 1;
        }

    }
}

string libCOMI_gf_UnitUserData (string lp_unit) {
    // Variable Declarations
    string lv_instance;

    // Automatic Variable Declarations
    int autoFEC7078E_ae;
    int autoFEC7078E_var;

    // Variable Initialization

    // Implementation
    autoFEC7078E_ae = UserDataInstanceCount("UnitData");
    autoFEC7078E_var = 1;
    for ( ; autoFEC7078E_var <= autoFEC7078E_ae; autoFEC7078E_var += 1 ) {
        lv_instance = UserDataInstance("UnitData", autoFEC7078E_var);
        if ((UserDataGetUnit("UnitData", lv_instance, "Unit", 1) == lp_unit)) {
            return lv_instance;
        }

    }
    return UserDataInstance("UnitData", 1);
}

bool libCOMI_gf_UnitMoverExists (string lp_unitType, string lp_mover) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "Mover", c_playerAny) == lp_mover)) {
        return true;
    }
    else {
        return false;
    }
}

string libCOMI_gf_TraingingUnitTypeInAbilCommand (abilcmd lp_abilityCommand, int lp_p, int lp_unitIndex) {
    // Variable Declarations
    string lv_link;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_link = AbilityCommandGetAbility(lp_abilityCommand);
    lv_index = AbilityCommandGetCommand(lp_abilityCommand);

    // Implementation
    return UnitTypeFromString(CatalogFieldValueGet(c_gameCatalogAbil, lv_link, "InfoArray[" + IntToString(lv_index) + "].Unit[" + IntToString(lp_unitIndex) + "]", lp_p));
}

bool libCOMI_gf_HeroCanSpendSkillPoint (unit lp_hero, string lp_learnAbility) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    order lv_order;

    // Automatic Variable Declarations
    int auto8C1B49B3_ae;
    const int auto8C1B49B3_ai = 1;

    // Variable Initialization
    lv_c = 19;

    // Implementation
    auto8C1B49B3_ae = lv_c;
    lv_i = 0;
    for ( ; ( (auto8C1B49B3_ai >= 0 && lv_i <= auto8C1B49B3_ae) || (auto8C1B49B3_ai < 0 && lv_i >= auto8C1B49B3_ae) ) ; lv_i += auto8C1B49B3_ai ) {
        lv_order = Order(AbilityCommand(lp_learnAbility, lv_i));
        if ((UnitOrderIsValid(lp_hero, lv_order) == true)) {
            return true;
        }

    }
    return false;
}

void libCOMI_gf_SetUnitBuffMultiplier (unit lp_unit, fixed lp_multiplierAmount, string lp_behavior, fixed lp_baseValue, int lp_method) {
    // Variable Declarations
    fixed lv_multiplierStack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitBehaviorRemove(lp_unit, lp_behavior, c_unitBehaviorCountAll);
    if ((lp_method == libCOMI_ge_UnitBuffMultiplierMethod_Exponential) && (lp_multiplierAmount != 1.0)) {
        lv_multiplierStack = libNtve_gf_Log(lp_multiplierAmount, lp_baseValue);
        CatalogFieldValueSet(c_gameCatalogBehavior, lp_behavior, "MinPoints", UnitGetOwner(lp_unit), IntToString(CeilingI(lv_multiplierStack)));
        UnitBehaviorAddPlayer(lp_unit, lp_behavior, UnitGetOwner(lp_unit), 1);
    }
    else if ((lp_method == libCOMI_ge_UnitBuffMultiplierMethod_Linear) && (lp_multiplierAmount != 0.0)) {
        lv_multiplierStack = (lp_multiplierAmount / lp_baseValue);
        CatalogFieldValueSet(c_gameCatalogBehavior, lp_behavior, "MinPoints", UnitGetOwner(lp_unit), IntToString(CeilingI(lv_multiplierStack)));
        UnitBehaviorAddPlayer(lp_unit, lp_behavior, UnitGetOwner(lp_unit), 1);
    }
}

void libCOMI_gf_SetUnitAttributePoints (string lp_attribute, unit lp_unit, int lp_points) {
    // Variable Declarations
    int lv_originalminpoints;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_originalminpoints = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lp_attribute, "MinPoints", UnitGetOwner(lp_unit));

    // Implementation
    CatalogFieldValueSet(c_gameCatalogBehavior, lp_attribute, "MinPoints", UnitGetOwner(lp_unit), IntToString(lp_points));
    UnitBehaviorRemove(lp_unit, lp_attribute, 1);
    UnitBehaviorAdd(lp_unit, lp_attribute, lp_unit, 1);
    CatalogFieldValueSet(c_gameCatalogBehavior, lp_attribute, "MinPoints", UnitGetOwner(lp_unit), IntToString(lv_originalminpoints));
}

void libCOMI_gf_PlayerApplySkinSignal (int lp_player, string lp_skin, bool lp_activateDeactivate, string lp_extraMessage) {
    // Variable Declarations
    string lv_modelOld;
    int lv_i;
    int lv_c;
    string lv_entry;
    actor lv_ar;
    string lv_fromPath;
    string lv_toPath;
    string lv_replacementType;

    // Automatic Variable Declarations
    int auto26807F49_ae;
    const int auto26807F49_ai = 1;

    // Variable Initialization
    lv_modelOld = "";
    lv_c = (CatalogFieldValueCount(c_gameCatalogSkin, lp_skin, "ReplacementArray", c_playerAny) - 1);
    lv_fromPath = "From";
    lv_toPath = "To";

    // Implementation
    PlayerApplySkin(lp_player, lp_skin, lp_activateDeactivate);
    if ((lp_activateDeactivate == false)) {
        lv_fromPath = "To";
        lv_toPath = "From";
    }

    ActorRegionCreate(null, "TriggerRegion", RegionEntireMap());
    lv_ar = libNtve_gf_ActorLastCreated();
    auto26807F49_ae = lv_c;
    lv_i = 0;
    for ( ; ( (auto26807F49_ai >= 0 && lv_i <= auto26807F49_ae) || (auto26807F49_ai < 0 && lv_i >= auto26807F49_ae) ) ; lv_i += auto26807F49_ai ) {
        lv_replacementType = CatalogFieldValueGet(c_gameCatalogSkin, lp_skin, "ReplacementArray[" + IntToString(lv_i) + "].Catalog", c_playerAny);
        if ((lv_replacementType == "Model")) {
            lv_modelOld = CatalogFieldValueGet(c_gameCatalogSkin, lp_skin, (("ReplacementArray[" + IntToString(lv_i) + "]." + lv_fromPath)), c_playerAny);
            if ((lp_extraMessage != null)) {
                ActorRegionSend(lv_ar, c_actorIntersectAgainstRadiusContact, lp_extraMessage, "Model", ("ModelName " + lv_modelOld + "; PlayerId " + IntToString(lp_player) + " " + IntToString(lp_player)));
                ActorRegionSend(lv_ar, c_actorIntersectAgainstRadiusContact, lp_extraMessage, "Unit", ("ModelName " + lv_modelOld + "; PlayerId " + IntToString(lp_player) + " " + IntToString(lp_player)));
            }

        }

    }
    ActorSend(lv_ar, "Destroy");
}

void libCOMI_gf_ButtonReplacement (int lp_player, string lp_button, string lp_buttonReplacement) {
    // Variable Declarations
    string lv_pathName;
    string lv_pathTooltip;
    string lv_pathAlertTooltip;
    string lv_pathHotkey;
    string lv_pathIcon;
    string lv_pathAlertIcon;
    string lv_itPath;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pathName = "Name";
    lv_pathTooltip = "Tooltip";
    lv_pathAlertTooltip = "AlertTooltip";
    lv_pathHotkey = "Hotkey";
    lv_pathIcon = "Icon";
    lv_pathAlertIcon = "AlertIcon";
    lv_itPath = "";

    // Implementation
    lv_itPath = lv_pathName;
    CatalogFieldValueSet(c_gameCatalogButton, lp_button, lv_itPath, lp_player, CatalogFieldValueGet(c_gameCatalogButton, lp_buttonReplacement, lv_itPath, lp_player));
    lv_itPath = lv_pathTooltip;
    CatalogFieldValueSet(c_gameCatalogButton, lp_button, lv_itPath, lp_player, CatalogFieldValueGet(c_gameCatalogButton, lp_buttonReplacement, lv_itPath, lp_player));
    lv_itPath = lv_pathAlertTooltip;
    CatalogFieldValueSet(c_gameCatalogButton, lp_button, lv_itPath, lp_player, CatalogFieldValueGet(c_gameCatalogButton, lp_buttonReplacement, lv_itPath, lp_player));
    lv_itPath = lv_pathIcon;
    CatalogFieldValueSet(c_gameCatalogButton, lp_button, lv_itPath, lp_player, CatalogFieldValueGet(c_gameCatalogButton, lp_buttonReplacement, lv_itPath, lp_player));
    lv_itPath = lv_pathAlertIcon;
    CatalogFieldValueSet(c_gameCatalogButton, lp_button, lv_itPath, lp_player, CatalogFieldValueGet(c_gameCatalogButton, lp_buttonReplacement, lv_itPath, lp_player));
}

unitgroup libCOMI_gf_ConjoinedTrainsofTrainCar (unit lp_trainCar) {
    // Variable Declarations
    fixed lv_trainID;
    unit lv_indexTrain;
    unitgroup lv_trainCars;

    // Automatic Variable Declarations
    unitgroup auto255B490F_g;
    int auto255B490F_u;

    // Variable Initialization
    lv_trainCars = UnitGroupEmpty();

    // Implementation
    lv_trainID = UnitGetCustomValue(lp_trainCar, 2);
    lv_trainCars = UnitGroup("Caboose", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_trainCars, UnitGroup("TarsonisEngineFast", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_trainCars, UnitGroup("TarsonisEngine", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_trainCars, UnitGroup("FreightCar", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto255B490F_g = lv_trainCars;
    auto255B490F_u = UnitGroupCount(auto255B490F_g, c_unitCountAll);
    for (;; auto255B490F_u -= 1) {
        lv_indexTrain = UnitGroupUnitFromEnd(auto255B490F_g, auto255B490F_u);
        if (lv_indexTrain == null) { break; }
        if ((UnitGetCustomValue(lv_indexTrain, 2) != lv_trainID)) {
            UnitGroupRemove(lv_trainCars, lv_indexTrain);
        }

    }
    return lv_trainCars;
}

trigger auto_libCOMI_gf_SynchronizeConjoinedTrainHealth_Trigger = null;
unitgroup auto_libCOMI_gf_SynchronizeConjoinedTrainHealth_lp_trainCars;
fixed auto_libCOMI_gf_SynchronizeConjoinedTrainHealth_lp_maxHealth;

void libCOMI_gf_SynchronizeConjoinedTrainHealth (unitgroup lp_trainCars, fixed lp_maxHealth) {
    auto_libCOMI_gf_SynchronizeConjoinedTrainHealth_lp_trainCars = lp_trainCars;
    auto_libCOMI_gf_SynchronizeConjoinedTrainHealth_lp_maxHealth = lp_maxHealth;

    if (auto_libCOMI_gf_SynchronizeConjoinedTrainHealth_Trigger == null) {
        auto_libCOMI_gf_SynchronizeConjoinedTrainHealth_Trigger = TriggerCreate("auto_libCOMI_gf_SynchronizeConjoinedTrainHealth_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_SynchronizeConjoinedTrainHealth_Trigger, false, false);
}

bool auto_libCOMI_gf_SynchronizeConjoinedTrainHealth_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_trainCars = auto_libCOMI_gf_SynchronizeConjoinedTrainHealth_lp_trainCars;
    fixed lp_maxHealth = auto_libCOMI_gf_SynchronizeConjoinedTrainHealth_lp_maxHealth;

    // Variable Declarations
    fixed lv_lastseenhealth;
    int lv_lastseentrainsalive;
    fixed lv_healthdelta;
    int lv_trainsalive;
    int lv_trainsdead;
    unit lv_traincar;

    // Automatic Variable Declarations
    unitgroup auto2DAA9981_g;
    int auto2DAA9981_u;
    unitgroup auto6F300234_g;
    int auto6F300234_u;
    unitgroup autoBBEEF069_g;
    int autoBBEEF069_u;

    // Variable Initialization
    lv_lastseenhealth = lp_maxHealth;
    lv_lastseentrainsalive = UnitGroupCount(lp_trainCars, c_unitCountAlive);

    // Implementation
    while ((UnitGroupCount(lp_trainCars, c_unitCountAlive) > 0)) {
        lv_trainsalive = UnitGroupCount(lp_trainCars, c_unitCountAlive);
        lv_trainsdead = UnitGroupCount(lp_trainCars, c_unitCountDead);
        if ((lv_trainsalive == lv_lastseentrainsalive)) {
        }
        else if ((lv_trainsalive > 0) && (lv_trainsdead > 0)) {
            auto2DAA9981_g = lp_trainCars;
            auto2DAA9981_u = UnitGroupCount(auto2DAA9981_g, c_unitCountAll);
            for (;; auto2DAA9981_u -= 1) {
                lv_traincar = UnitGroupUnitFromEnd(auto2DAA9981_g, auto2DAA9981_u);
                if (lv_traincar == null) { break; }
                UnitKill(lv_traincar);
            }
            break;
        }
        else if ((lv_trainsalive > lv_lastseentrainsalive)) {
            lv_lastseentrainsalive = lv_trainsalive;
        }
        else if ((lv_trainsalive > 0)) {
            lv_lastseentrainsalive = lv_trainsalive;
        }
        else if (true) {
            break;
        }
        lv_healthdelta = 0.0;
        auto6F300234_g = UnitGroupFilter(null, c_playerAny, lp_trainCars, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6F300234_u = UnitGroupCount(auto6F300234_g, c_unitCountAll);
        for (;; auto6F300234_u -= 1) {
            lv_traincar = UnitGroupUnitFromEnd(auto6F300234_g, auto6F300234_u);
            if (lv_traincar == null) { break; }
            lv_healthdelta += (lv_lastseenhealth - UnitGetPropertyFixed(lv_traincar, c_unitPropLife, c_unitPropCurrent));
        }
        lv_lastseenhealth -= lv_healthdelta;
        if ((UnitGroupCount(UnitGroupFilter(null, c_playerAny, lp_trainCars, UnitFilter(0, (1 << (c_targetFilterInvulnerable - 32)), 0, 0), 0), c_unitCountAlive) == 0)) {
            lv_lastseenhealth = MinF(lv_lastseenhealth, lp_maxHealth);
            autoBBEEF069_g = lp_trainCars;
            autoBBEEF069_u = UnitGroupCount(autoBBEEF069_g, c_unitCountAll);
            for (;; autoBBEEF069_u -= 1) {
                lv_traincar = UnitGroupUnitFromEnd(autoBBEEF069_g, autoBBEEF069_u);
                if (lv_traincar == null) { break; }
                UnitSetPropertyFixed(lv_traincar, c_unitPropLife, lv_lastseenhealth);
            }
        }

        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_libCOMI_gf_FindandAttackNearestEnemy_Trigger = null;
unit auto_libCOMI_gf_FindandAttackNearestEnemy_lp_attacker;
fixed auto_libCOMI_gf_FindandAttackNearestEnemy_lp_searchRadius;
fixed auto_libCOMI_gf_FindandAttackNearestEnemy_lp_satisfiedPathingDistance;
fixed auto_libCOMI_gf_FindandAttackNearestEnemy_lp_thinkPeriod;
unitfilter auto_libCOMI_gf_FindandAttackNearestEnemy_lp_targetFilter;
unitfilter auto_libCOMI_gf_FindandAttackNearestEnemy_lp_fallbackTargetFilter;

void libCOMI_gf_FindandAttackNearestEnemy (unit lp_attacker, fixed lp_searchRadius, fixed lp_satisfiedPathingDistance, fixed lp_thinkPeriod, unitfilter lp_targetFilter, unitfilter lp_fallbackTargetFilter) {
    auto_libCOMI_gf_FindandAttackNearestEnemy_lp_attacker = lp_attacker;
    auto_libCOMI_gf_FindandAttackNearestEnemy_lp_searchRadius = lp_searchRadius;
    auto_libCOMI_gf_FindandAttackNearestEnemy_lp_satisfiedPathingDistance = lp_satisfiedPathingDistance;
    auto_libCOMI_gf_FindandAttackNearestEnemy_lp_thinkPeriod = lp_thinkPeriod;
    auto_libCOMI_gf_FindandAttackNearestEnemy_lp_targetFilter = lp_targetFilter;
    auto_libCOMI_gf_FindandAttackNearestEnemy_lp_fallbackTargetFilter = lp_fallbackTargetFilter;

    if (auto_libCOMI_gf_FindandAttackNearestEnemy_Trigger == null) {
        auto_libCOMI_gf_FindandAttackNearestEnemy_Trigger = TriggerCreate("auto_libCOMI_gf_FindandAttackNearestEnemy_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_FindandAttackNearestEnemy_Trigger, false, false);
}

bool auto_libCOMI_gf_FindandAttackNearestEnemy_TriggerFunc (bool testConds, bool runActions) {
    unit lp_attacker = auto_libCOMI_gf_FindandAttackNearestEnemy_lp_attacker;
    fixed lp_searchRadius = auto_libCOMI_gf_FindandAttackNearestEnemy_lp_searchRadius;
    fixed lp_satisfiedPathingDistance = auto_libCOMI_gf_FindandAttackNearestEnemy_lp_satisfiedPathingDistance;
    fixed lp_thinkPeriod = auto_libCOMI_gf_FindandAttackNearestEnemy_lp_thinkPeriod;
    unitfilter lp_targetFilter = auto_libCOMI_gf_FindandAttackNearestEnemy_lp_targetFilter;
    unitfilter lp_fallbackTargetFilter = auto_libCOMI_gf_FindandAttackNearestEnemy_lp_fallbackTargetFilter;

    // Variable Declarations
    fixed lv_safethinkperiod;
    point lv_attacktargetpoint;
    unit lv_bestattacktargetunit;
    fixed lv_bestpathingdistance;
    unit lv_currentattacktargetunit;
    fixed lv_currentpathingdistance;

    // Automatic Variable Declarations
    unitgroup auto75294CD3_g;
    int auto75294CD3_u;

    // Variable Initialization
    lv_safethinkperiod = MaxF(lp_thinkPeriod, 0.5);

    // Implementation
    while ((UnitIsAlive(lp_attacker) == true)) {
        lv_bestpathingdistance = 10000.0;
        auto75294CD3_g = UnitGroupAlliance(UnitGetOwner(lp_attacker), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_attacker), lp_searchRadius), lp_targetFilter, 0);
        auto75294CD3_u = UnitGroupCount(auto75294CD3_g, c_unitCountAll);
        for (;; auto75294CD3_u -= 1) {
            lv_currentattacktargetunit = UnitGroupUnitFromEnd(auto75294CD3_g, auto75294CD3_u);
            if (lv_currentattacktargetunit == null) { break; }
            if ((libNtve_gf_UnitCanCreateEffectOnUnit(lv_currentattacktargetunit, "ARC@ThreatTest", lp_attacker) == true) && ((UnitFilterMatch(lv_currentattacktargetunit, UnitGetOwner(lp_attacker), UnitFilter(0, 0, (1 << c_targetFilterCloaked), 0)) == true) || (libNtve_gf_UnitIsVisibleToPlayer(lv_currentattacktargetunit, UnitGetOwner(lp_attacker)) == true))) {
                lv_currentpathingdistance = AIPathingCostUnit(lp_attacker, UnitGetPosition(lv_currentattacktargetunit), c_ignoreEnemyBuildings);
                if ((lv_currentpathingdistance < lp_satisfiedPathingDistance)) {
                    lv_bestattacktargetunit = lv_currentattacktargetunit;
                    break;
                }
                else if ((lv_currentpathingdistance < lv_bestpathingdistance)) {
                    lv_bestpathingdistance = lv_currentpathingdistance;
                    lv_bestattacktargetunit = lv_currentattacktargetunit;
                }
            }

        }
        if ((UnitIsAlive(lv_bestattacktargetunit) == false)) {
            lv_bestattacktargetunit = UnitGroupClosestToPoint(UnitGroupAlliance(UnitGetOwner(lp_attacker), c_unitAllianceEnemy, RegionEntireMap(), lp_fallbackTargetFilter, 0), UnitGetPosition(lp_attacker));
        }

        if ((UnitIsAlive(lv_bestattacktargetunit) == true) && (libNtve_gf_UnitCanCreateEffectOnUnit(lv_bestattacktargetunit, "ARC@ThreatTest", lp_attacker) == true) && ((UnitFilterMatch(lv_bestattacktargetunit, UnitGetOwner(lp_attacker), UnitFilter(0, 0, (1 << c_targetFilterCloaked), 0)) == true) || (libNtve_gf_UnitIsVisibleToPlayer(lv_bestattacktargetunit, UnitGetOwner(lp_attacker)) == true))) {
            while ((UnitIsAlive(lp_attacker) == true) && (UnitIsAlive(lv_bestattacktargetunit) == true) && (libNtve_gf_UnitCanCreateEffectOnUnit(lv_bestattacktargetunit, "ARC@ThreatTest", lp_attacker) == true) && ((UnitFilterMatch(lv_bestattacktargetunit, UnitGetOwner(lp_attacker), UnitFilter(0, 0, (1 << c_targetFilterCloaked), 0)) == true) || (libNtve_gf_UnitIsVisibleToPlayer(lv_bestattacktargetunit, UnitGetOwner(lp_attacker)) == true))) {
                UnitIssueOrder(lp_attacker, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_bestattacktargetunit)), c_orderQueueReplace);
                Wait((lv_safethinkperiod + RandomFixed(-0.125, 0.125)), c_timeGame);
            }
        }
        else {
            Wait((lv_safethinkperiod + RandomFixed(-0.125, 0.125)), c_timeGame);
        }
    }
    return true;
}

void libCOMI_gf_InitializePathDisplay (int lp_path) {
    // Variable Declarations
    string lv_stepIconAsModel;
    string lv_stepIconAsImage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_stepIconAsModel = "Assets\\Units\\Test\\InvisibleUnit\\InvisibleUnit.m3";
    lv_stepIconAsImage = lv_stepIconAsModel;
    PathSetStepModel(lp_path, c_pathLocationWorld, lv_stepIconAsImage);
    PathSetColor(lp_path, c_pathLocationAll, Color(100.00, 100.00, 100.00));
    PathSetVisible(lp_path, c_pathLocationMinimap, false);
    PathSetMinimumLinearDistance(lp_path, 0.0);
    if (true) {
        PathSetVisible(lp_path, c_pathLocationAll, false);
    }

}

void libCOMI_gf_SleepWakeUpUnitCoop (unit lp_unit, bool lp_sleepWakeUp, int lp_alwaysExclusions) {
    // Variable Declarations
    string lv_typeOfSleepyUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_sleepWakeUp == true) && (lp_alwaysExclusions == libCOMI_ge_SleepWakeUpExcludeOption_RespectExclusions)) {
        if ((lv_typeOfSleepyUnit != "ARC@OrbitalCommand") && (lv_typeOfSleepyUnit != "ARC@CommandCenter")) {
            libNtve_gf_SleepUnit(lp_unit, lp_sleepWakeUp);
        }

    }
    else {
        libNtve_gf_SleepUnit(lp_unit, lp_sleepWakeUp);
    }
}

void libCOMI_gf_SetHeroPanelUnit (int lp_index, unit lp_heroUnit, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_index != 2)) {
        libCOMI_gf_SetHeroPanelUnitOverride(lp_index, lp_heroUnit, lp_player);
    }
    else if (true) {
        libCOMI_gf_SetHeroPanelUnitOverride(lp_index, lp_heroUnit, lp_player);
    }
    else if (true) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_2268A908"), false);
    }
}

void libCOMI_gf_SetHeroPanelUnitOverride (int lp_index, unit lp_heroUnit, int lp_player) {
    // Variable Declarations
    bool lv_noValidHeroes;
    int lv_heroHotkey;
    playergroup lv_heroGroup;
    string lv_heroGroup2;
    string lv_heroGroup3;
    string lv_heroGroup4;

    // Automatic Variable Declarations
    unit autoCFE0773D_val;
    int autoEDB3F93B_val;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();
    lv_heroGroup2 = libCOMI_gf_ActiveCommanderForPlayer(lp_player);
    lv_heroGroup3 = UserDataGetUserInstance("Commanders", lv_heroGroup2, "Faction", 1);
    lv_heroGroup4 = UserDataGetGameLink("Factions", lv_heroGroup3, "MainRace", 1);

    // Implementation
    lv_heroGroup = PlayerGroupSingle(lp_player);
    libCOMI_gv_cU_HeroUnit[lp_index][lp_player] = lp_heroUnit;
    libCOMI_gf_CU_UpdateHeroPanel(lp_index, lp_player);
    if ((lv_heroGroup4 == "ARC@Zerg")) {
        DialogControlSendAnimationEvent(libCOMI_gv_cU_HeroPanel[lp_index], PlayerGroupSingle(lp_player), "SwitchZerg");
    }
    else if ((lv_heroGroup4 == "ARC@Terr")) {
        DialogControlSendAnimationEvent(libCOMI_gv_cU_HeroPanel[lp_index], PlayerGroupSingle(lp_player), "SwitchTerran");
    }
    else if ((UnitGetPropertyFixed(lp_heroUnit, c_unitPropEnergyMax, c_unitPropCurrent) == 0)) {
        DialogControlSendAnimationEvent(libCOMI_gv_cU_HeroPanel[lp_index], PlayerGroupSingle(lp_player), "DefaultBarOffset");
    }
    else if (true) {
        DialogControlSendAnimationEvent(libCOMI_gv_cU_HeroPanel[lp_index], PlayerGroupSingle(lp_player), "EnergyBarOffset");
    }
    libCOMI_gv_cU_HeroExists[lp_player][lp_index] = true;
    if ((libCOMI_gv_cU_HeroUnit[lp_index][lp_player] == null)) {
        libCOMI_gv_cU_HeroExists[lp_player][lp_index] = false;
    }
    else {
        TriggerEnable(libCOMI_gt_CU_HeroPanelUpdate, true);
        TriggerEnable(libCOMI_gt_CU_HeroUnitDamaged, true);
        TriggerEnable(libCOMI_gt_CU_HeroMouseHoverText, true);
        TriggerEnable(libCOMI_gt_CU_HeroUnitVitalChange, true);
        autoCFE0773D_val = lp_heroUnit;
        {
            libNtve_gf_SetDialogItemAnimationDuration(libCOMI_gv_cU_HeroDialogCooldownImage[lp_index], 60.0, lv_heroGroup);
        }
        autoEDB3F93B_val = lp_index;
        if (autoEDB3F93B_val == 1) {
            lv_heroHotkey = c_hotkeyHeroSelect0;
        }
        else if (autoEDB3F93B_val == 2) {
            lv_heroHotkey = c_hotkeyHeroSelect1;
        }
        else {
        }
        if ((lp_index <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount)) {
            libNtve_gf_SetDialogItemHotkey(libCOMI_gv_cU_HeroDialogButton[lp_index], lv_heroHotkey, lv_heroGroup);
        }
        else {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_1FA97249"), false);
        }
    }
}

void libCOMI_gf_CU_ShowHideHeroPanel (bool lp_showHide, int lp_index) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCOMI_gv_cU_HeroPanel[lp_index] != c_invalidDialogControlId)) {
        DialogControlSetVisible(libCOMI_gv_cU_HeroPanel[lp_index], PlayerGroupAll(), lp_showHide);
    }

}

void libCOMI_gf_CU_CreateHeroPanel (int lp_index) {
    // Automatic Variable Declarations
    int auto6F96EF6D_val;

    // Implementation
    if ((lp_index == 1)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/VoidHeroUnitFrame");
    }
    else {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/SecondaryVoidHeroUnitFrame");
    }
    libCOMI_gv_cU_HeroPanel[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BorderImage");
    libCOMI_gv_cU_HeroDialogBorderImage[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BorderNoEnergyImage");
    libCOMI_gv_cU_HeroDialogBorderImageNoEnergy[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BorderImageAll");
    libCOMI_gv_cU_HeroDialogBorderImageAll[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "LevelBox");
    libCOMI_gv_cU_HeroDialogLevelBox[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(libCOMI_gv_cU_HeroDialogLevelBox[lp_index], PlayerGroupAll(), false);
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "LevelLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "CooldownImage");
    libCOMI_gv_cU_HeroDialogCooldownImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "DamageTakenImage");
    libCOMI_gv_cU_HeroDialogDamageTakenImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "EnergyBarImage");
    libCOMI_gv_cU_HeroDialogEnergyBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "EnergyBarBackground");
    libCOMI_gv_cU_HeroDialogEnergyBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "HealthBarImage");
    libCOMI_gv_cU_HeroDialogHealthBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BarBackground");
    libCOMI_gv_cU_HeroDialogHealthBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "ShieldBarImage");
    libCOMI_gv_cU_HeroDialogShieldBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "ShieldBarBackground");
    libCOMI_gv_cU_HeroDialogShieldBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "IconImage");
    libCOMI_gv_cU_HeroDialogIconImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "DamageTakenLabel");
    libCOMI_gv_cU_HeroDialogDamageTakenLabel[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_HeroDialogDamageTakenLabel[lp_index], StringToText(""), PlayerGroupAll());
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "EnergyLabel");
    libCOMI_gv_cU_HeroDialogEnergyLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "HealthLabel");
    libCOMI_gv_cU_HeroDialogHealthLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "ShieldLabel");
    libCOMI_gv_cU_HeroDialogShieldLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "LevelLabel");
    libCOMI_gv_cU_HeroDialogLevelLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "NameLabel");
    libCOMI_gv_cU_HeroDialogNameLabel[lp_index] = DialogControlLastCreated();
    auto6F96EF6D_val = lp_index;
    if (auto6F96EF6D_val == 1) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/VoidHeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect0, PlayerGroupAll());
    }
    else if (auto6F96EF6D_val == 2) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/SecondaryVoidHeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect1, PlayerGroupAll());
    }
    else {
    }
    libCOMI_gv_cU_HeroDialogButton[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(libCOMI_gv_cU_HeroDialogDamageTakenImage[lp_index], PlayerGroupAll(), false);
    DialogControlSetVisible(libCOMI_gv_cU_HeroDialogCooldownImage[lp_index], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemRenderPriority(libCOMI_gv_cU_HeroDialogEnergyBarBackground[lp_index], 505, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(libCOMI_gv_cU_HeroDialogHealthBarBackground[lp_index], 505, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(libCOMI_gv_cU_HeroDialogShieldBarImage[lp_index], 511, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(libCOMI_gv_cU_HeroDialogShieldBarBackground[lp_index], 510, PlayerGroupAll());
}

void libCOMI_gf_CU_UpdateHeroPanel (int lp_index, int lp_player) {
    // Variable Declarations
    text lv_hotkey;
    int lv_life;
    int lv_shields;
    int lv_energy;
    playergroup lv_updateGroup;
    int lv_heroUnitIndex;
    string lv_heroUnitUserDataInstance;
    string lv_heroUnitActor;
    string lv_heroReviveLink;

    // Automatic Variable Declarations
    int autoC70421CF_val;

    // Variable Initialization
    lv_updateGroup = PlayerGroupEmpty();
    lv_heroReviveLink = "";

    // Implementation
    lv_updateGroup = PlayerGroupSingle(lp_player);
    if ((libCOMI_gv_cU_HeroUnit[lp_index][lp_player] == null)) {
        if ((libCOMI_gv_cU_HeroPanel[lp_index] != c_invalidDialogControlId)) {
            DialogControlSetVisible(libCOMI_gv_cU_HeroPanel[lp_index], lv_updateGroup, false);
        }

        return ;
    }

    if ((libCOMI_gv_cU_HeroPanel[lp_index] == c_invalidDialogControlId)) {
        libCOMI_gf_CU_CreateHeroPanel(lp_index);
    }

    DialogControlSetVisible(libCOMI_gv_cU_HeroPanel[lp_index], lv_updateGroup, true);
    autoC70421CF_val = lp_index;
    if (autoC70421CF_val == 1) {
        lv_hotkey = StringExternal("Param/Value/lib_COMI_435B6348");
    }
    else if (autoC70421CF_val == 2) {
        lv_hotkey = StringExternal("Param/Value/lib_COMI_E81C0E89");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_COMI_8743E7EB", "A", UnitGetName(libCOMI_gv_cU_HeroUnit[lp_index][lp_player]));
    TextExpressionSetToken("Param/Expression/lib_COMI_8743E7EB", "B", lv_hotkey);
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_HeroDialogNameLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_COMI_8743E7EB"), lv_updateGroup);
    lv_heroUnitIndex = libCOMI_gf_GetHeroUnitIndex(libCOMI_gv_cU_HeroUnit[lp_index][lp_player]);
    lv_heroUnitUserDataInstance = libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_userData;
    lv_heroUnitActor = ((UnitGetType(libCOMI_gv_cU_HeroUnit[lp_index][lp_player])));
    libNtve_gf_SetDialogItemImage(libCOMI_gv_cU_HeroDialogIconImage[lp_index], (CatalogFieldValueGet(c_gameCatalogActor, lv_heroUnitActor, "HeroIcon", c_playerAny)), lv_updateGroup);
    TextExpressionSetToken("Param/Expression/lib_COMI_F450DB7C", "CurrentLife", FixedToText(UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropLife, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_COMI_F450DB7C", "MaxLife", FixedToText(UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropLifeMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_HeroDialogHealthLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_COMI_F450DB7C"), lv_updateGroup);
    lv_life = FixedToInt((UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropLifePercent, c_unitPropCurrent) * (IntToFixed(libCOMI_gv_cUC_HEROUIBARWIDTH) / 100.0)));
    if ((lv_life > 0)) {
        DialogControlSetSize(libCOMI_gv_cU_HeroDialogHealthBarImage[lp_index], lv_updateGroup, lv_life, libCOMI_gv_cUC_HEROUILIFEBARHEIGHT);
        DialogControlSetVisible(libCOMI_gv_cU_HeroDialogHealthBarImage[lp_index], lv_updateGroup, true);
    }
    else {
        DialogControlSetVisible(libCOMI_gv_cU_HeroDialogHealthBarImage[lp_index], lv_updateGroup, false);
    }
    if ((UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropShieldsMax, c_unitPropCurrent) > 0)) {
        DialogControlSetVisible(libCOMI_gv_cU_HeroDialogShieldBarBackground[lp_index], lv_updateGroup, true);
        TextExpressionSetToken("Param/Expression/lib_COMI_958DABAE", "CurrentLife", FixedToText(UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropShields, c_unitPropCurrent), 0));
        TextExpressionSetToken("Param/Expression/lib_COMI_958DABAE", "MaxLife", FixedToText(UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropShieldsMax, c_unitPropCurrent), 0));
        libNtve_gf_SetDialogItemText(libCOMI_gv_cU_HeroDialogShieldLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_COMI_958DABAE"), lv_updateGroup);
        lv_shields = FixedToInt((UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropShieldsPercent, c_unitPropCurrent) * (IntToFixed(libCOMI_gv_cUC_HEROUIBARWIDTH) / 100.0)));
        if ((lv_shields > 0)) {
            DialogControlSetSize(libCOMI_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, lv_shields, libCOMI_gv_cUC_HEROUISHIELDBARHEIGHT);
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, true);
        }
        else {
            DialogControlSetSize(libCOMI_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, 1, libCOMI_gv_cUC_HEROUISHIELDBARHEIGHT);
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, false);
        }
    }
    else {
        DialogControlSetVisible(libCOMI_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, false);
        DialogControlSetVisible(libCOMI_gv_cU_HeroDialogShieldBarBackground[lp_index], lv_updateGroup, false);
    }
    TextExpressionSetToken("Param/Expression/lib_COMI_AA9BB8FA", "CurrentEnergy", FixedToText(UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropEnergy, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_COMI_AA9BB8FA", "MaxEnergy", FixedToText(UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropEnergyMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_HeroDialogEnergyLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_COMI_AA9BB8FA"), lv_updateGroup);
    if ((UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropEnergyMax, c_unitPropCurrent) == 0)) {
        lv_energy = 0;
        if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, (UnitGetType(libCOMI_gv_cU_HeroUnit[lp_index][lp_player])), "ShieldsMax", c_playerAny) > 0.0)) {
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogBorderImageNoEnergy[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogBorderImage[lp_index], lv_updateGroup, true);
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogBorderImageAll[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogEnergyBarBackground[lp_index], lv_updateGroup, false);
        }
        else {
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogBorderImageNoEnergy[lp_index], lv_updateGroup, true);
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogBorderImage[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogBorderImageAll[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogEnergyBarBackground[lp_index], lv_updateGroup, false);
        }
    }
    else {
        lv_energy = FixedToInt((UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropEnergyPercent, c_unitPropCurrent) * (IntToFixed(libCOMI_gv_cUC_HEROUIBARWIDTH) / 100.0)));
        if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, (UnitGetType(libCOMI_gv_cU_HeroUnit[lp_index][lp_player])), "ShieldsMax", c_playerAny) > 0.0)) {
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogBorderImageAll[lp_index], lv_updateGroup, true);
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogBorderImageNoEnergy[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogBorderImage[lp_index], lv_updateGroup, false);
        }
        else {
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogBorderImageAll[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogBorderImageNoEnergy[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogBorderImage[lp_index], lv_updateGroup, true);
        }
        DialogControlSetVisible(libCOMI_gv_cU_HeroDialogEnergyBarBackground[lp_index], lv_updateGroup, true);
    }
    if ((lv_energy > 0)) {
        DialogControlSetSize(libCOMI_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, lv_energy, libCOMI_gv_cUC_HEROUIENERGYBARHEIGHT);
        DialogControlSetVisible(libCOMI_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, true);
    }
    else {
        DialogControlSetVisible(libCOMI_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, false);
    }
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_HeroDialogLevelLabel[lp_index], IntToText(libCOMI_gf_CC_CommanderLevel(lp_player, libCOMI_gf_ActiveCommanderForPlayer(lp_player))), lv_updateGroup);
    if ((libCOMI_gv_cU_VoidHeroUIDamageTimer[lp_index][lp_player] > 0.0)) {
        libCOMI_gv_cU_VoidHeroUIDamageTimer[lp_index][lp_player] -= libCOMI_gv_cUC_HeroUpdateFrequency;
        if ((libCOMI_gv_cU_VoidHeroUIDamageTimer[lp_index][lp_player] <= 0.0)) {
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogDamageTakenLabel[lp_index], lv_updateGroup, false);
            DialogControlFadeTransparency(libCOMI_gv_cU_HeroDialogDamageTakenImage[lp_index], lv_updateGroup, 1.0, 100.0);
        }

    }

    if ((UnitIsAlive(libCOMI_gv_cU_HeroUnit[lp_index][lp_player]) == false)) {
        lv_heroReviveLink = libCOMI_gf_GetHeroReviveLink(libCOMI_gv_cU_HeroUnit[lp_index][lp_player]);
        if ((libCOMI_gv_cU_VoidHeroUIRevivable[lp_index][lp_player] == true) && (PlayerGetCooldown(lp_player, lv_heroReviveLink) > 0.0)) {
            libNtve_gf_SetDialogItemAnimationTime(libCOMI_gv_cU_HeroDialogCooldownImage[lp_index], (60.0 * (1 - PlayerGetCooldown(lp_player, lv_heroReviveLink)/libCOMI_gv_oBSOLETE_CU_HeroReviveTimer[lp_index][lp_player]) ), lv_updateGroup);
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogCooldownImage[lp_index], lv_updateGroup, true);
        }
        else if (true) {
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogCooldownImage[lp_index], lv_updateGroup, false);
        }
        if ((UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, false);
        }

    }
    else {
        DialogControlSetVisible(libCOMI_gv_cU_HeroDialogCooldownImage[lp_index], lv_updateGroup, false);
    }
    libNtve_gf_SetDialogItemUnit(libCOMI_gv_cU_HeroDialogButton[lp_index], libCOMI_gv_cU_HeroUnit[lp_index][lp_player], lv_updateGroup);
}

void libCOMI_gf_CreateHeroes () {
    // Variable Declarations
    int lv_hi;
    int lv_teamIndex;
    point lv_spawnPoint;
    string lv_heroUnitType;
    string lv_heroUnitInstance;
    playergroup lv_players;

    // Automatic Variable Declarations
    string auto99430FA5_userType;
    int auto99430FA5_i;
    playergroup autoE52CE10D_g;
    int autoE52CE10D_var;

    // Variable Initialization
    lv_hi = UnitGroupCount(libCOMI_gv_heroUnits, c_unitCountAll);
    lv_players = PlayerGroupEmpty();

    // Implementation
    libNtve_gf_AddPlayerGroupToPlayerGroup(libCOMI_gf_GetAlliedCommandersPlayers(), lv_players);
    libNtve_gf_AddPlayerGroupToPlayerGroup(libCOMI_gf_GetEnemyAIPlayers(), lv_players);
    libNtve_gf_AddPlayerGroupToPlayerGroup(libCOMI_gf_GetEnemyHumanPlayers(), lv_players);
    auto99430FA5_userType = "Heroes";
    auto99430FA5_i = 1;
    for ( ; auto99430FA5_i <= UserDataInstanceCount(auto99430FA5_userType) ; auto99430FA5_i += 1 ) {
        lv_heroUnitInstance = UserDataInstance(auto99430FA5_userType, auto99430FA5_i);
        autoE52CE10D_g = lv_players;
        autoE52CE10D_var = -1;
        while (true) {
            autoE52CE10D_var = PlayerGroupNextPlayer(autoE52CE10D_g, autoE52CE10D_var);
            if (autoE52CE10D_var < 0) { break; }
            lv_heroUnitType = UserDataGetUnit("Heroes", lv_heroUnitInstance, "unitHero", 1);
            if ((libARRA_gf_ListStringIncludes(("TechUnits" + IntToString(autoE52CE10D_var)), (lv_heroUnitType)) == true)) {
                UnitCreate(1, lv_heroUnitType, 0, autoE52CE10D_var, UnitGetPosition(libCOMI_gf_CM_PrimaryTownHall(autoE52CE10D_var)), 270.0);
                UnitGroupAdd(libCOMI_gv_heroUnits, UnitLastCreated());
                lv_hi += 1;
                libCOMI_gv_heroUnitsData[lv_hi].lv_heroUnit = UnitLastCreated();
                libCOMI_gv_heroUnitsData[lv_hi].lv_userData = libCOMI_gf_GetHeroUserDataInstanceByUnitType(lv_heroUnitType);
                libCOMI_gf_SetHeroPanelUnit(1, UnitLastCreated(), autoE52CE10D_var);
                UnitSetPosition(UnitLastCreated(), Point(0.0, 0.0), false);
                UnitBehaviorAdd(UnitLastCreated(), "ARC@ZergGenericDeath", UnitLastCreated(), 1);
                UnitKill(UnitLastCreated());
            }

        }
    }
}

trigger auto_libCOMI_gf_HeroHandleDeath_Trigger = null;
unit auto_libCOMI_gf_HeroHandleDeath_lp_heroUnit;

void libCOMI_gf_HeroHandleDeath (unit lp_heroUnit) {
    auto_libCOMI_gf_HeroHandleDeath_lp_heroUnit = lp_heroUnit;

    if (auto_libCOMI_gf_HeroHandleDeath_Trigger == null) {
        auto_libCOMI_gf_HeroHandleDeath_Trigger = TriggerCreate("auto_libCOMI_gf_HeroHandleDeath_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_HeroHandleDeath_Trigger, false, false);
}

bool auto_libCOMI_gf_HeroHandleDeath_TriggerFunc (bool testConds, bool runActions) {
    unit lp_heroUnit = auto_libCOMI_gf_HeroHandleDeath_lp_heroUnit;

    // Variable Declarations
    text lv_tip;
    text lv_subtip;
    int lv_player;
    int lv_heroUnitIndex;
    string lv_heroUnitType;
    string lv_heroUnitUserDataInstance;
    string lv_spawnerUnitType;
    string lv_reviverUnitType;
    string lv_behaviorFirst;
    string lv_behaviorNormal;
    fixed lv_reviveDuration;
    unit lv_spawnerUnit;
    unit lv_reviverUnit;
    text lv_messageHeroDied;
    text lv_messageHeroRevived;
    string lv_reviveAbilityLink;
    abilcmd lv_reviveAbilityCommand;
    point lv_reviveFallbackPoint;
    string lv_commander;
    bool lv_isInitialDeath;

    // Automatic Variable Declarations
    unitgroup auto9FB1FFED_g;
    int auto9FB1FFED_u;
    unit auto9FB1FFED_var;

    // Variable Initialization
    lv_player = UnitGetOwner(lp_heroUnit);
    lv_heroUnitIndex = libCOMI_gf_GetHeroUnitIndex(lp_heroUnit);
    lv_heroUnitType = UnitGetType(lp_heroUnit);
    lv_heroUnitUserDataInstance = libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_userData;
    lv_spawnerUnitType = UserDataGetUnit("Heroes", lv_heroUnitUserDataInstance, "unitSpawner", 1);
    lv_reviverUnitType = UserDataGetUnit("Heroes", lv_heroUnitUserDataInstance, "unitReviver", 1);
    lv_behaviorFirst = UserDataGetGameLink("Heroes", lv_heroUnitUserDataInstance, "ReviveBehaviorFirst", 1);
    lv_behaviorNormal = UserDataGetGameLink("Heroes", lv_heroUnitUserDataInstance, "ReviveBehaviorNormal", 1);
    lv_reviveDuration = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, lv_behaviorNormal, "Duration", lv_player));
    lv_reviveAbilityLink = UserDataGetString("Heroes", lv_heroUnitUserDataInstance, "ReviveLink", 1);
    lv_reviveAbilityCommand = UserDataGetAbilCmd("Heroes", lv_heroUnitUserDataInstance, "ReviveAbilityCommand", 1);

    // Implementation
    if ((libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_deathCount == -1)) {
        lv_isInitialDeath = true;
    }

    if ((lv_spawnerUnitType == null)) {
        lv_spawnerUnit = libCOMI_gf_CM_PrimaryTownHall(lv_player);
    }
    else {
        lv_spawnerUnit = UnitGroupUnit(UnitGroup(lv_spawnerUnitType, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_deathCount += 1;
    libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_reviveTimer = lv_reviveDuration;
    if ((lv_isInitialDeath == false)) {
        if ((lv_spawnerUnit == null)) {
            lv_messageHeroDied = UserDataGetText("Heroes", lv_heroUnitUserDataInstance, "messageNoSpawningUnit", 1);
        }
        else {
            lv_messageHeroDied = UserDataGetText("Heroes", lv_heroUnitUserDataInstance, "messageDied", 1);
            lv_messageHeroDied = TextReplaceWord(lv_messageHeroDied, StringExternal("Param/Value/lib_COMI_9DF7C196"), FixedToText(lv_reviveDuration, 0), c_stringReplaceAll, c_stringNoCase);
        }
        lv_messageHeroDied = TextReplaceWord(lv_messageHeroDied, StringExternal("Param/Value/lib_COMI_C66A2957"), UnitTypeGetName(lv_heroUnitType), c_stringReplaceAll, c_stringNoCase);
        if ((lv_spawnerUnitType != "")) {
            lv_messageHeroDied = TextReplaceWord(lv_messageHeroDied, StringExternal("Param/Value/lib_COMI_796115ED"), UnitTypeGetName(lv_spawnerUnitType), c_stringReplaceAll, c_stringNoCase);
        }

        if ((lv_reviverUnitType != "")) {
            lv_messageHeroDied = TextReplaceWord(lv_messageHeroDied, StringExternal("Param/Value/lib_COMI_BB5EEA9B"), UnitTypeGetName(lv_reviverUnitType), c_stringReplaceAll, c_stringNoCase);
        }

        libCOMI_gv_diedHeroUnit = lp_heroUnit;
        TriggerSendEvent("Hero Death");
        libNtve_gf_PlayerRemoveCooldown(lv_player, lv_reviveAbilityLink);
        Wait(2.0, c_timeGame);
    }
    else {
        libCOMI_gv_diedHeroUnit = lp_heroUnit;
        TriggerSendEvent("Hero Initial Death");
        libNtve_gf_PlayerRemoveCooldown(lv_player, lv_reviveAbilityLink);
        Wait(0.0625, c_timeGame);
    }
    while ((lv_spawnerUnit == null)) {
        Wait(1.0, c_timeGame);
        lv_spawnerUnit = UnitGroupUnit(UnitGroup(lv_spawnerUnitType, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    if ((UnitIsAlive(lp_heroUnit) == true)) {
        return true;
    }

    if ((lv_spawnerUnitType != lv_reviverUnitType)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_reviverUnitType, 0, lv_player, UnitGetPosition(lv_spawnerUnit));
        lv_reviverUnit = UnitLastCreated();
    }
    else {
        lv_reviverUnit = lv_spawnerUnit;
    }
    libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_deathCount += 1;
    libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_reviverUnit = lv_reviverUnit;
    UnitCreateEffectUnit(lv_reviverUnit, "CopyTargetSelectionAndControlGroups", lp_heroUnit);
    if ((PlayerRace(lv_player) == "ARC@Zerg")) {
        UnitCreateEffectUnit(lv_spawnerUnit, "ARC@CopyHatcheryRally", lv_reviverUnit);
    }

    libCOMI_gf_SetHeroPanelUnit(1, lv_reviverUnit, lv_player);
    if ((lv_isInitialDeath == false)) {
        UnitBehaviorAdd(lv_reviverUnit, lv_behaviorNormal, lv_reviverUnit, 1);
        libNtve_gf_PlayerRemoveCooldown(lv_player, lv_reviveAbilityLink);
        PlayerAddCooldown(lv_player, lv_reviveAbilityLink, lv_reviveDuration);
    }
    else {
        UnitBehaviorAdd(lv_reviverUnit, lv_behaviorFirst, lv_reviverUnit, 1);
        lv_reviveDuration = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, lv_behaviorFirst, "Duration", lv_player));
        libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_reviveTimer = lv_reviveDuration;
        libNtve_gf_PlayerRemoveCooldown(lv_player, lv_reviveAbilityLink);
        PlayerAddCooldown(lv_player, lv_reviveAbilityLink, lv_reviveDuration);
    }
    UnitIssueOrder(lv_reviverUnit, OrderTargetingUnit(AbilityCommand("ARC@RallyHatchery", 1), lv_reviverUnit), c_orderQueueReplace);
    UnitIssueOrder(lv_reviverUnit, OrderTargetingUnit(AbilityCommand("ARC@RallyHatchery", 2), lv_reviverUnit), c_orderQueueReplace);
    UnitSetFacing(lp_heroUnit, UnitGetFacing(lv_reviverUnit), 0.0);
    if ((lv_isInitialDeath == false)) {
        UnitSetState(lv_reviverUnit, c_unitStateTooltipable, true);
        lv_tip = UnitTypeGetName(lv_reviverUnitType);
        libCOMI_gf_SetUnitInfoTextCampaign(lv_reviverUnit, null, lv_tip, lv_subtip);
    }

    UnitSetPropertyFixed(lv_reviverUnit, c_unitPropLife, 0.1);
    UnitSetPropertyFixed(lv_reviverUnit, c_unitPropLifeRegen, (UnitGetPropertyFixed(lv_reviverUnit, c_unitPropLifeMax, c_unitPropCurrent)/lv_reviveDuration));
    if ((lv_isInitialDeath == false)) {
        libCOMI_gv_diedHeroUnit = lp_heroUnit;
        TriggerSendEvent("Hero Reviving");
    }
    else {
        libCOMI_gv_diedHeroUnit = lp_heroUnit;
        TriggerSendEvent("Hero Initial Reviving");
    }
    while (!((PlayerGetCooldown(lv_player, lv_reviveAbilityLink) == 0.0))) {
        Wait(1.0, c_timeGame);
    }
    if (true) {
        return true;
    }

    UnitBehaviorAdd(lp_heroUnit, "ARC@SuppressCollisionRevive", lp_heroUnit, 1);
    if ((libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_reviveTargetLocation != null)) {
        UnitIssueOrder(lv_reviverUnit, libNtve_gf_ReviveOrderTargetingPoint(AbilityCommand("ARC@NovaRevive", 20), libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_reviveTargetLocation, lp_heroUnit), c_orderQueueReplace);
        lv_reviveFallbackPoint = libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_reviveTargetLocation;
        libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_reviveTargetLocation = null;
    }
    else {
        UnitIssueOrder(lv_reviverUnit, libNtve_gf_ReviveOrderWithNoTarget(lv_reviveAbilityCommand, lp_heroUnit), c_orderQueueReplace);
        lv_reviveFallbackPoint = UnitGetPosition(lv_reviverUnit);
    }
    libCOMI_gf_SetHeroPanelUnit(1, lp_heroUnit, lv_player);
    Wait(0.125, c_timeGame);
    if ((UnitIsAlive(lp_heroUnit) == false)) {
        UnitRevive(lp_heroUnit);
        UnitCreateEffectUnit(lp_heroUnit, "ARC@KerriganReviveHeal", lp_heroUnit);
        if ((RegionContainsPoint(RegionPlayableMap(), lv_reviveFallbackPoint) == true)) {
            UnitSetPosition(lp_heroUnit, lv_reviveFallbackPoint, false);
        }

    }

    auto9FB1FFED_g = UnitGroupSelected(lv_player);
    auto9FB1FFED_u = UnitGroupCount(auto9FB1FFED_g, c_unitCountAll);
    for (;; auto9FB1FFED_u -= 1) {
        auto9FB1FFED_var = UnitGroupUnitFromEnd(auto9FB1FFED_g, auto9FB1FFED_u);
        if (auto9FB1FFED_var == null) { break; }
        if ((auto9FB1FFED_var == lv_reviverUnit)) {
            UnitSelect(lp_heroUnit, lv_player, true);
        }

    }
    UnitSelect(lv_reviverUnit, lv_player, false);
    if ((lv_spawnerUnitType != lv_reviverUnitType)) {
        UnitCreateEffectUnit(lp_heroUnit, "CopyTargetSelectionAndControlGroups", lv_reviverUnit);
        UnitKill(lv_reviverUnit);
    }
    else {
        libNtve_gf_SendActorMessageToUnit(lv_reviverUnit, "Signal HeroRevive");
        UnitBehaviorRemove(lv_reviverUnit, lv_behaviorFirst, c_unitBehaviorCountAll);
        UnitBehaviorRemove(lv_reviverUnit, lv_behaviorNormal, c_unitBehaviorCountAll);
    }
    if ((lv_isInitialDeath == false)) {
        lv_messageHeroRevived = UserDataGetText("Heroes", lv_heroUnitUserDataInstance, "messageRevived", 1);
    }
    else {
        lv_messageHeroRevived = UserDataGetText("Heroes", lv_heroUnitUserDataInstance, "messageReady", 1);
    }
    lv_messageHeroRevived = TextReplaceWord(lv_messageHeroRevived, StringExternal("Param/Value/lib_COMI_14A52DB3"), StringToText(CatalogFieldValueGet(c_gameCatalogUnit, lv_heroUnitType, "Name", lv_player)), c_stringReplaceAll, c_stringNoCase);
    if ((lv_spawnerUnitType != "")) {
        lv_messageHeroRevived = TextReplaceWord(lv_messageHeroRevived, StringExternal("Param/Value/lib_COMI_17E287A6"), StringToText(CatalogFieldValueGet(c_gameCatalogUnit, lv_spawnerUnitType, "Name", lv_player)), c_stringReplaceAll, c_stringNoCase);
    }

    if ((lv_reviverUnitType != "")) {
        lv_messageHeroRevived = TextReplaceWord(lv_messageHeroRevived, StringExternal("Param/Value/lib_COMI_175187BA"), StringToText(CatalogFieldValueGet(c_gameCatalogUnit, lv_reviverUnitType, "Name", lv_player)), c_stringReplaceAll, c_stringNoCase);
    }

    libCOMI_gv_diedHeroUnit = lp_heroUnit;
    TriggerSendEvent("Hero Revived");
    return true;
}

unit libCOMI_gf_OBSOLETE_AF_GetHeroUnit (int lp_pPlayer) {
    // Variable Declarations
    unit lv_vUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vUnit = libCOMI_gv_oBSOLETE_CM_HeroUnit[lp_pPlayer];

    // Implementation
    return lv_vUnit;
}

unit libCOMI_gf_GetHeroUnitBad (int lp_player, string lp_unit) {
    // Variable Declarations
    int lv_heroPlayer;
    string lv_heroUnitType;
    unit lv_heroUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroPlayer = lp_player;
    lv_heroUnitType = lp_unit;
    lv_heroUnit = UnitGroupUnit(UnitGroup(lv_heroUnitType, lp_player, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 1), 1);

    // Implementation
    return lv_heroUnit;
}

unit libCOMI_gf_GetHeroUnit (int lp_player, string lp_hero) {
    // Automatic Variable Declarations
    int autoB6EA2779_ae;
    int autoB6EA2779_var;

    // Implementation
    autoB6EA2779_ae = UnitGroupCount(libCOMI_gv_heroUnits, c_unitCountAll);
    autoB6EA2779_var = 1;
    for ( ; autoB6EA2779_var <= autoB6EA2779_ae; autoB6EA2779_var += 1 ) {
        if ((libCOMI_gv_heroUnitsData[autoB6EA2779_var].lv_userData == lp_hero)) {
            return UnitGroupUnit(libCOMI_gv_heroUnits, autoB6EA2779_var);
        }

    }
    return null;
}

int libCOMI_gf_GetHeroUnitIndex (unit lp_unit) {
    // Automatic Variable Declarations
    int auto5B69EEDE_ae;
    int auto5B69EEDE_var;

    // Implementation
    auto5B69EEDE_ae = UnitGroupCount(libCOMI_gv_heroUnits, c_unitCountAll);
    auto5B69EEDE_var = 1;
    for ( ; auto5B69EEDE_var <= auto5B69EEDE_ae; auto5B69EEDE_var += 1 ) {
        if ((UnitGroupUnit(libCOMI_gv_heroUnits, auto5B69EEDE_var) == lp_unit)) {
            return auto5B69EEDE_var;
        }

    }
    return 0;
}

string libCOMI_gf_GetHeroUserDataInstance (unit lp_unit) {
    // Variable Declarations
    int lv_heroUnitIndex;
    string lv_heroUnitUserDataInstance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroUnitIndex = libCOMI_gf_GetHeroUnitIndex(lp_unit);
    lv_heroUnitUserDataInstance = libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_userData;

    // Implementation
    return lv_heroUnitUserDataInstance;
}

unit libCOMI_gf_GetHeroReviverUnit (unit lp_unit) {
    // Variable Declarations
    int lv_heroUnitIndex;
    unit lv_reviver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroUnitIndex = libCOMI_gf_GetHeroUnitIndex(lp_unit);
    lv_reviver = libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_reviverUnit;

    // Implementation
    return lv_reviver;
}

string libCOMI_gf_GetHeroReviveLink (unit lp_unit) {
    // Variable Declarations
    string lv_instance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_instance = libCOMI_gf_GetHeroUserDataInstance(lp_unit);

    // Implementation
    return libCOMI_gf_HeroReviveLink(lv_instance);
}

string libCOMI_gf_GetHeroUserDataInstanceByUnitType (string lp_unit) {
    // Variable Declarations
    string lv_instance;

    // Automatic Variable Declarations
    int autoA5D4A5DB_ae;
    int autoA5D4A5DB_var;

    // Variable Initialization

    // Implementation
    autoA5D4A5DB_ae = UserDataInstanceCount("Heroes");
    autoA5D4A5DB_var = 1;
    for ( ; autoA5D4A5DB_var <= autoA5D4A5DB_ae; autoA5D4A5DB_var += 1 ) {
        lv_instance = UserDataInstance("Heroes", autoA5D4A5DB_var);
        if ((UserDataGetUnit("Heroes", lv_instance, "unitHero", 1) == lp_unit)) {
            return lv_instance;
        }

    }
    return null;
}

abilcmd libCOMI_gf_HeroReviveAbilityCommand (string lp_heroUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetAbilCmd("Heroes", lp_heroUnit, "ReviveAbilityCommand", 1);
}

string libCOMI_gf_HeroUnitType (string lp_heroUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Heroes", lp_heroUnit, "unitHero", 1);
}

string libCOMI_gf_HeroUnitSpawner (string lp_heroUnit) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitType = UserDataGetGameLink("Heroes", lp_heroUnit, "unitSpawner", 1);

    // Implementation
    if ((lv_unitType != null)) {
        return lv_unitType;
    }

    return "";
}

string libCOMI_gf_HeroUnitReviver (string lp_heroUnit) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitType = UserDataGetGameLink("Heroes", lp_heroUnit, "unitReviver", 1);

    // Implementation
    if ((lv_unitType != null)) {
        return lv_unitType;
    }

    return "";
}

string libCOMI_gf_HeroReviveLink (string lp_heroUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetString("Heroes", lp_heroUnit, "ReviveLink", 1);
}

string libCOMI_gf_HeroFirstReviveBehavior (string lp_heroUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Heroes", lp_heroUnit, "ReviveBehaviorFirst", 1);
}

string libCOMI_gf_HeroNormalReviveBehavior (string lp_heroUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Heroes", lp_heroUnit, "ReviveBehaviorNormal", 1);
}

void libCOMI_gf_CreateACStructure (int lp_player, string lp_heroUnit) {
    // Variable Declarations
    int lv_teamIndex;
    point lv_spawnPoint;
    unit lv_townhall;
    point lv_point;
    unitgroup lv_resources;
    int lv_actorTarmacSplatHero;
    unit lv_heroUnit;
    string lv_actorInstance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_townhall = libCOMI_gf_CM_PrimaryTownHall(lp_player);
    lv_point = UnitGetPosition(lv_townhall);
    lv_resources = libARRA_gf_GetResourcesNearPoint(lv_point, 12.0, c_resourceTypeCustom);

    // Implementation
    if ((libCOMI_gf_TechUnitAvailable(lp_player, lp_heroUnit) == false)) {
        return ;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_heroUnit, 0, lp_player, libNtve_gf_PointOffsetTowardsPoint(UnitGroupCenterOfGroup(lv_resources), 12.0, lv_point));
    lv_heroUnit = UnitLastCreated();
    lv_actorInstance = UserDataGetUserInstance("MissionSettings", "CurrentMission", "AllyHeroActor", 1);
}

void libCOMI_gf_CreateACCaster (int lp_player, string lp_heroUnit) {
    // Variable Declarations
    unit lv_caster;

    // Automatic Variable Declarations
    unitgroup autoB905AC50_g;
    int autoB905AC50_u;
    unit autoB905AC50_var;

    // Variable Initialization

    // Implementation
    if ((libARRA_gf_ListStringIncludes(("TechUnits" + IntToString(lp_player)), (lp_heroUnit)) == false)) {
        return ;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_heroUnit, c_unitCreateIgnorePlacement, lp_player, Point(0.0, 0.0));
    lv_caster = UnitLastCreated();
    libCOMI_gv_yY_GPCasterUnit[lp_player] = lv_caster;
    UnitSetState(lv_caster, c_unitStateSelectable, false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/GlobalCastingPanel");
    libCOMI_gv_cU_GPPanelHolder = DialogControlLastCreated();
    DialogControlSetVisible(libCOMI_gv_cU_GPPanelHolder, PlayerGroupAll(), false);
    libCOMI_gf_CU_GPInitCommonCaster(lp_player, lp_heroUnit, "Coop_GlobalCastingTemplates/TerranCasterPanelTemplate", "Coop_GlobalCastingTemplates/RaynorGlobalCommandPanelTemplate", 2, "Cutscenes\\UI_TerranCastingPanel.SC2Cutscene", "TwoButtons");
    autoB905AC50_g = libCOMI_gv_yY_GPCasterGroup[lp_player];
    autoB905AC50_u = UnitGroupCount(autoB905AC50_g, c_unitCountAll);
    for (;; autoB905AC50_u -= 1) {
        autoB905AC50_var = UnitGroupUnitFromEnd(autoB905AC50_g, autoB905AC50_u);
        if (autoB905AC50_var == null) { break; }
        UnitGroupRemove(libCOMI_gv_yY_GPCasterGroup[lp_player], autoB905AC50_var);
    }
    UnitGroupAdd(libCOMI_gv_yY_GPCasterGroup[lp_player], libCOMI_gv_yY_GPCasterUnit[lp_player]);
    libNtve_gf_SetDialogItemUnitGroup(libCOMI_gv_cU_GPCmdPanel[lp_player], libCOMI_gv_yY_GPCasterGroup[lp_player], PlayerGroupSingle(lp_player));
}

unit libCOMI_gf_CM_PlayerGetGlobalCaster2 (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_yY_GPCasterUnit[lp_player];
}

void libCOMI_gf_CU_GPShowHide (bool lp_showHide, int lp_player, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cU_GPVisible[lp_player] = (lp_showHide == true);
    libCOMI_gf_CU_GPVisibilitySet(lp_showHide, lp_player, lp_duration);
}

void libCOMI_gf_CU_GPVisibilityAutoUpdate (bool lp_showHide, int lp_player, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv_cU_GPVisible[lp_player] == false)) {
        return ;
    }

    libCOMI_gf_CU_GPVisibilitySet(lp_showHide, lp_player, lp_duration);
}

void libCOMI_gf_CU_GPVisibilitySet (bool lp_showHide, int lp_player, fixed lp_duration) {
    // Variable Declarations
    playergroup lv_updatePlayers;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int autoA77BDFE9_ae = 4;
    const int autoA77BDFE9_ai = 1;
    const int auto16AE58D5_ae = 4;
    const int auto16AE58D5_ai = 1;

    // Variable Initialization
    lv_updatePlayers = PlayerGroupEmpty();

    // Implementation
    lv_updatePlayers = PlayerGroupSingle(lp_player);
    if ((libCOMI_gv_cU_GPPanel[lp_player] == c_invalidDialogControlId)) {
        return ;
    }

    if ((libCOMI_gv_cU_GlobalCast2D[lp_player] == true)) {
        DialogControlSetVisible(libCOMI_gv_cU_GPPanel[lp_player], lv_updatePlayers, lp_showHide);
        return ;
    }

    if ((libCOMI_gv_cU_GPCutsceneFilter[lp_player] != "")) {
        CutsceneAddFilter(CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lp_player]), libCOMI_gv_cU_GPCutsceneFilter[lp_player]);
    }

    if ((lp_showHide == true)) {
        DialogControlSetVisible(libCOMI_gv_cU_GPPanelHolder, lv_updatePlayers, lp_showHide);
        DialogControlSetVisible(libCOMI_gv_cU_GPPanel[lp_player], lv_updatePlayers, lp_showHide);
        if ((libCOMI_gv_cU_GPCutscene[lp_player] == c_invalidDialogControlId)) {
            return ;
        }

        CutsceneSetTime(CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lp_player]), 0);
        CutscenePlay(CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lp_player]));
        if ((libCOMI_gv_cU_GPEnergyBarScene[lp_player] != c_invalidDialogControlId)) {
            CutsceneSetTime(CutsceneGetTriggerControl(libCOMI_gv_cU_GPEnergyBarScene[lp_player]), 0);
        }

        if ((libCOMI_gv_cU_GPEnergyGlassScene[lp_player] != c_invalidDialogControlId)) {
            CutsceneSetTime(CutsceneGetTriggerControl(libCOMI_gv_cU_GPEnergyGlassScene[lp_player]), 0);
        }

        if ((lp_duration == c_transitionDurationImmediate)) {
            lv_buttonIndex = 1;
            for ( ; ( (auto16AE58D5_ai >= 0 && lv_buttonIndex <= auto16AE58D5_ae) || (auto16AE58D5_ai < 0 && lv_buttonIndex >= auto16AE58D5_ae) ) ; lv_buttonIndex += auto16AE58D5_ai ) {
                if ((libCOMI_gv_cU_GPButtonHighlighted[lv_buttonIndex][lp_player] == true) && (libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player], lv_updatePlayers, true);
                }

            }
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lp_player]), "LoopStart");
            if ((libCOMI_gv_cU_GPEnergyBarScene[lp_player] != c_invalidDialogControlId)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPEnergyBarScene[lp_player]), "LoopStart");
            }

            if ((libCOMI_gv_cU_GPEnergyGlassScene[lp_player] != c_invalidDialogControlId)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPEnergyGlassScene[lp_player]), "LoopStart");
            }

            DialogControlSetVisible(libCOMI_gv_cU_GPCmdPanel[lp_player], lv_updatePlayers, lp_showHide);
            if ((libCOMI_gv_cU_GPEnergyLabel[lp_player] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libCOMI_gv_cU_GPEnergyLabel[lp_player], lv_updatePlayers, lp_showHide);
            }

        }
        else {
            DialogControlSetVisible(libCOMI_gv_cU_GPCmdPanel[lp_player], lv_updatePlayers, false);
            if ((libCOMI_gv_cU_GPEnergyLabel[lp_player] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libCOMI_gv_cU_GPEnergyLabel[lp_player], lv_updatePlayers, false);
            }

        }
    }
    else {
        if ((lp_duration == c_transitionDurationImmediate)) {
            lv_buttonIndex = 1;
            for ( ; ( (autoA77BDFE9_ai >= 0 && lv_buttonIndex <= autoA77BDFE9_ae) || (autoA77BDFE9_ai < 0 && lv_buttonIndex >= autoA77BDFE9_ae) ) ; lv_buttonIndex += autoA77BDFE9_ai ) {
                if ((libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player], lv_updatePlayers, false);
                }

            }
            DialogControlSetVisible(libCOMI_gv_cU_GPPanelHolder, lv_updatePlayers, lp_showHide);
            DialogControlSetVisible(libCOMI_gv_cU_GPPanel[lp_player], lv_updatePlayers, lp_showHide);
            DialogControlSetVisible(libCOMI_gv_cU_GPCmdPanel[lp_player], lv_updatePlayers, lp_showHide);
            if ((libCOMI_gv_cU_GPEnergyLabel[lp_player] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libCOMI_gv_cU_GPEnergyLabel[lp_player], lv_updatePlayers, lp_showHide);
            }

            if ((libCOMI_gv_cU_GPEnergyTooltip[lp_player] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libCOMI_gv_cU_GPEnergyTooltip[lp_player], lv_updatePlayers, lp_showHide);
            }

        }
        else {
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lp_player]), "Death");
            if ((libCOMI_gv_cU_GPEnergyBarScene[lp_player] != c_invalidDialogControlId)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPEnergyBarScene[lp_player]), "Death");
            }

            if ((libCOMI_gv_cU_GPEnergyGlassScene[lp_player] != c_invalidDialogControlId)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPEnergyGlassScene[lp_player]), "Death");
            }

        }
    }
}

abilcmd libCOMI_gf_CU_GPActiveAbilityCommand (int lp_slot, int lp_player) {
    // Variable Declarations
    int lv_cardIndex;
    int lv_buttonIndex;
    string lv_path;
    abilcmd lv_command;

    // Automatic Variable Declarations
    int auto806EA1DA_ae;
    const int auto806EA1DA_ai = 1;
    int autoD78A3C51_ae;
    const int autoD78A3C51_ai = 1;

    // Variable Initialization
    lv_path = "";

    // Implementation
    auto806EA1DA_ae = (CatalogFieldValueCount(c_gameCatalogUnit, "SoACaster", "CardLayouts", lp_player)-1);
    lv_cardIndex = 0;
    for ( ; ( (auto806EA1DA_ai >= 0 && lv_cardIndex <= auto806EA1DA_ae) || (auto806EA1DA_ai < 0 && lv_cardIndex >= auto806EA1DA_ae) ) ; lv_cardIndex += auto806EA1DA_ai ) {
        autoD78A3C51_ae = (CatalogFieldValueCount(c_gameCatalogUnit, "SoACaster", (("CardLayouts[" + IntToString(lv_cardIndex) + "].LayoutButtons")), lp_player)-1);
        lv_buttonIndex = 0;
        for ( ; ( (autoD78A3C51_ai >= 0 && lv_buttonIndex <= autoD78A3C51_ae) || (autoD78A3C51_ai < 0 && lv_buttonIndex >= autoD78A3C51_ae) ) ; lv_buttonIndex += autoD78A3C51_ai ) {
            lv_path = ("CardLayouts[" + IntToString(lv_cardIndex) + "].LayoutButtons[" + IntToString(lv_buttonIndex) + "]");
            if ((CatalogFieldValueGet(c_gameCatalogUnit, "SoACaster", ((lv_path + ".Type")), lp_player) == "AbilCmd") && (CatalogFieldValueGetAsInt(c_gameCatalogUnit, "SoACaster", ((lv_path + ".Row")), lp_player) == 0) && (CatalogFieldValueGetAsInt(c_gameCatalogUnit, "SoACaster", ((lv_path + ".Column")), lp_player) == (lp_slot-1))) {
                lv_command = StringToAbilCmd(CatalogFieldValueGet(c_gameCatalogUnit, "SoACaster", ((lv_path + ".AbilCmd")), lp_player));
                if ((TechTreeAbilityIsAllowed(lp_player, lv_command) == true)) {
                    return lv_command;
                }

            }

        }
    }
    return null;
}

void libCOMI_gf_CU_GPHighlightButton (int lp_slot, bool lp_on, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv_cU_GPCmdButtonArrows[lp_slot][lp_player] == c_invalidDialogControlId)) {
        return ;
    }

    libCOMI_gv_cU_GPButtonHighlighted[lp_slot][lp_player] = lp_on;
    if ((lp_on == true) && (DialogControlIsVisible(libCOMI_gv_cU_GPPanel[lp_player], lp_player) == true)) {
        DialogControlSetVisible(libCOMI_gv_cU_GPCmdButtonArrows[lp_slot][lp_player], PlayerGroupSingle(lp_player), true);
    }
    else {
        DialogControlSetVisible(libCOMI_gv_cU_GPCmdButtonArrows[lp_slot][lp_player], PlayerGroupSingle(lp_player), false);
    }
}

void libCOMI_gf_CU_GPInitCommonCaster (int lp_player, string lp_heroUnit, string lp_holderTemplate, string lp_template, int lp_buttons, string lp_cutscene, string lp_cutsceneFilter) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    int autoF11E2415_ae;
    const int autoF11E2415_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    if ((libARRA_gf_ListStringIncludes(("TechUnits" + IntToString(lp_player)), (lp_heroUnit)) == false)) {
        return ;
    }

    DialogControlCreateInPanelFromTemplate(libCOMI_gv_cU_GPPanelHolder, c_triggerControlTypePanel, "Coop_GlobalCastingTemplates/TerranCasterPanelTemplate");
    libCOMI_gv_cU_GPPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypeCutscene, "TerranCommandCutscene");
    libCOMI_gv_cU_GPCutscene[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "ButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, lp_template);
    libCOMI_gv_cU_GPCmdPanel[lp_player] = DialogControlLastCreated();
    autoF11E2415_ae = lp_buttons;
    lv_buttonIndex = 1;
    for ( ; ( (autoF11E2415_ai >= 0 && lv_buttonIndex <= autoF11E2415_ae) || (autoF11E2415_ai < 0 && lv_buttonIndex >= autoF11E2415_ae) ) ; lv_buttonIndex += autoF11E2415_ai ) {
        DialogControlHookup(libCOMI_gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libCOMI_gv_cU_GPCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "AbilityArrow0" + IntToString(lv_buttonIndex));
        libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlSetPositionRelative(libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player], PlayerGroupSingle(lp_player), c_anchorTop, libCOMI_gv_cU_GPCmdButtons[lv_buttonIndex][lp_player], c_anchorBottom, 0, 15);
    }
    DialogControlSetVisible(libCOMI_gv_cU_GPPanel[lp_player], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemCutscene(libCOMI_gv_cU_GPCutscene[lp_player], lp_cutscene, PlayerGroupAll());
    libCOMI_gv_cU_GPCutsceneFilter[lp_player] = lp_cutsceneFilter;
    CutscenePlay(CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lp_player]));
}

void libCOMI_gf_LinkUnitEnergyToGlobalCasterButton (unit lp_unit, int lp_player, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemUnit(libCOMI_gv_cU_GPUnitEnergyLinks[lp_index][lp_player], lp_unit, PlayerGroupSingle(lp_player));
    DialogControlSetVisible(libCOMI_gv_cU_GPUnitEnergyLinks[lp_index][lp_player], PlayerGroupSingle(lp_player), true);
}

void libCOMI_gf_CU_GPInitEnergyCaster (int lp_player, string lp_heroUnit) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int autoE0F92619_ae = 4;
    const int autoE0F92619_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    if ((TechTreeUnitIsAllowed(lp_player, lp_heroUnit) == false)) {
        return ;
    }

    TriggerEnable(libCOMI_gt_CU_GPVitalChanges, true);
    DialogControlCreateInPanelFromTemplate(libCOMI_gv_cU_GPPanelHolder, c_triggerControlTypePanel, "Coop_GlobalCastingTemplates/ProtossCasterPanelTemplate");
    libCOMI_gv_cU_GPPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "SoAButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "LotV_SoAMissionUIPanel/SoACommandPanelTemplate");
    libCOMI_gv_cU_GPCmdPanel[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (autoE0F92619_ai >= 0 && lv_buttonIndex <= autoE0F92619_ae) || (autoE0F92619_ai < 0 && lv_buttonIndex >= autoE0F92619_ae) ) ; lv_buttonIndex += autoE0F92619_ai ) {
        DialogControlHookup(libCOMI_gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libCOMI_gv_cU_GPCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "SoAAbilityArrow0" + IntToString(lv_buttonIndex));
        libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlSetPositionRelative(libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player], PlayerGroupSingle(lp_player), c_anchorTop, libCOMI_gv_cU_GPCmdButtons[lv_buttonIndex][lp_player], c_anchorBottom, 0, 15);
    }
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "SoAEnergyTooltipHitFrame");
    libCOMI_gv_cU_GPEnergyTooltip[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "SoAEnergyBarFill");
    libCOMI_gv_cU_GPEnergyBar[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypeLabel, "SoAEnergyLabel");
    libCOMI_gv_cU_GPEnergyLabel[lp_player] = DialogControlLastCreated();
    DialogControlSetVisible(libCOMI_gv_cU_GPPanel[lp_player], PlayerGroupAll(), false);
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypeCutscene, "SoACommandCutscene");
    libCOMI_gv_cU_GPCutscene[lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemCutscene(libCOMI_gv_cU_GPCutscene[lp_player], "Cutscenes\\UI_SoAMission.SC2Cutscene", PlayerGroupAll());
    CutscenePlay(CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lp_player]));
    DialogControlHookup(libCOMI_gv_cU_GPEnergyBar[lp_player], c_triggerControlTypeCutscene, "SoAFillScene");
    libCOMI_gv_cU_GPEnergyBarScene[lp_player] = DialogControlLastCreated();
    CutscenePlay(CutsceneGetTriggerControl(libCOMI_gv_cU_GPEnergyBarScene[lp_player]));
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypeCutscene, "SoAOverlayCutscene");
    libCOMI_gv_cU_GPEnergyGlassScene[lp_player] = DialogControlLastCreated();
    CutscenePlay(CutsceneGetTriggerControl(libCOMI_gv_cU_GPEnergyGlassScene[lp_player]));
}

void libCOMI_gf_CU_GPCheckForEnergyHighlight (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetPropertyFixed(libCOMI_gv_yY_GPCasterUnit[lp_player], c_unitPropEnergyMax, c_unitPropCurrent) == 0.0)) {
        return ;
    }

    if ((UnitGetPropertyFixed(libCOMI_gv_yY_GPCasterUnit[lp_player], c_unitPropEnergyPercent, c_unitPropCurrent) == 100.0)) {
        libCOMI_gf_CU_GPEnergyHighlight(true, lp_player);
    }
    else {
        libCOMI_gf_CU_GPEnergyHighlight(false, lp_player);
    }
}

void libCOMI_gf_CU_GPEnergyHighlight (bool lp_enable, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_enable == true)) {
        libCOMI_gv_cU_GPEnergyHighlighting[lp_player] = true;
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPEnergyGlassScene[lp_player]), "PowerUp");
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPEnergyBarScene[lp_player]), "PowerUp");
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lp_player]), "PowerUp");
    }
    else {
        if ((libCOMI_gv_cU_GPEnergyHighlighting[lp_player] == true)) {
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPEnergyGlassScene[lp_player]), "PowerDown");
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPEnergyBarScene[lp_player]), "PowerDown");
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lp_player]), "PowerDown");
            libCOMI_gv_cU_GPEnergyHighlighting[lp_player] = false;
        }

    }
}

void libCOMI_gf_CU_GPSoAUpdateVitals (int lp_player) {
    // Variable Declarations
    playergroup lv_soAPlayers;
    int lv_orbHeight;
    fixed lv_energyFloored;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_soAPlayers = PlayerGroupEmpty();

    // Implementation
    lv_energyFloored = Floor(UnitGetPropertyFixed(libCOMI_gv_yY_GPCasterUnit[lp_player], c_unitPropEnergy, c_unitPropCurrent));
    if ((lv_energyFloored == libCOMI_gv_cU_GPLastEnergyUpdate[lp_player])) {
        return ;
    }

    libCOMI_gv_cU_GPLastEnergyUpdate[lp_player] = lv_energyFloored;
    lv_soAPlayers = PlayerGroupSingle(lp_player);
    TextExpressionSetToken("Param/Expression/lib_COMI_4F19AFD0", "A", IntToText(FixedToInt(lv_energyFloored)));
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_GPEnergyLabel[lp_player], TextExpressionAssemble("Param/Expression/lib_COMI_4F19AFD0"), lv_soAPlayers);
    DialogControlSendAnimationEvent(libCOMI_gv_cU_GPEnergyBarScene[lp_player], PlayerGroupAll(), "SetEnergyPlay");
    DialogControlSetAnimationTime(libCOMI_gv_cU_GPEnergyBarScene[lp_player], PlayerGroupAll(), "EnergyLevel", UnitGetPropertyFixed(libCOMI_gv_yY_GPCasterUnit[lp_player], c_unitPropEnergyPercent, c_unitPropCurrent));
    DialogControlSendAnimationEvent(libCOMI_gv_cU_GPEnergyBarScene[lp_player], PlayerGroupAll(), "SetEnergyPause");
    libCOMI_gf_CU_GPCheckForEnergyHighlight(lp_player);
}

void libCOMI_gf_CM_GPReminderDisable (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv_cM_GPRemindersOn[lp_player] == false)) {
        return ;
    }

    libCOMI_gv_cM_GPRemindersOn[lp_player] = false;
    libCOMI_gf_CU_GPHighlightButton(1, false, lp_player);
    libCOMI_gf_CU_GPHighlightButton(2, false, lp_player);
    libCOMI_gf_CU_GPHighlightButton(3, false, lp_player);
    libCOMI_gf_CU_GPHighlightButton(4, false, lp_player);
}

string libCOMI_gf_GetCasterDataForUnit (string lp_caster) {
    // Variable Declarations
    string lv_casterData;

    // Automatic Variable Declarations
    int auto48F7D5FC_ae;
    int auto48F7D5FC_var;

    // Variable Initialization

    // Implementation
    auto48F7D5FC_ae = UserDataInstanceCount("Casters");
    auto48F7D5FC_var = 1;
    for ( ; auto48F7D5FC_var <= auto48F7D5FC_ae; auto48F7D5FC_var += 1 ) {
        lv_casterData = UserDataInstance("Casters", auto48F7D5FC_var);
        if ((UserDataGetUnit("Casters", lv_casterData, "UnitCaster", 1) == lp_caster)) {
            return lv_casterData;
        }
    }
    return null;
}

void libCOMI_gf_TopBarNotificationsInitialization (int lp_player) {
    // Variable Declarations
    int lv_vButton;

    // Automatic Variable Declarations
    const int auto555A5723_ae = 4;
    const int auto555A5723_ai = 1;

    // Variable Initialization

    // Implementation
    Wait(1.0, c_timeGame);
    if ((libCOMI_gv_cU_GPCmdPanel[lp_player] != c_invalidDialogControlId)) {
        lv_vButton = 0;
        for ( ; ( (auto555A5723_ai >= 0 && lv_vButton <= auto555A5723_ae) || (auto555A5723_ai < 0 && lv_vButton >= auto555A5723_ae) ) ; lv_vButton += auto555A5723_ai ) {
            DialogControlHookup(libCOMI_gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_vButton));
            libCOMI_gv_topbarButton[lv_vButton][lp_player] = DialogControlLastCreated();
        }
    }

    TriggerSendEvent("Notifications Initialized");
}

int libCOMI_gf_GetClickedTopBarButtonIndex (int lp_button, int lp_player) {
    // Automatic Variable Declarations
    const int autoB4E0DC03_ae = 4;
    int autoB4E0DC03_var;

    // Implementation
    autoB4E0DC03_var = 0;
    for ( ; autoB4E0DC03_var <= autoB4E0DC03_ae; autoB4E0DC03_var += 1 ) {
        if ((lp_button == libCOMI_gv_topbarButton[autoB4E0DC03_var][lp_player])) {
            return autoB4E0DC03_var;
        }
    }
    return -1;
}

text libCOMI_gf_TooltipTextofButton (int lp_player, string lp_button) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COMI_9B053B02", "NAME", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lp_button, "Name", lp_player)));
    TextExpressionSetToken("Param/Expression/lib_COMI_9B053B02", "DESCRIPTION", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lp_button, "Tooltip", lp_player)));
    return TextExpressionAssemble("Param/Expression/lib_COMI_9B053B02");
}

void libCOMI_gf_CinematicFade (bool lp_fadeIn, fixed lp_duration, color lp_color, bool lp_waitUntilDone) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_waitUntilDone == true)) {
        libCOMI_gf_CinematicFade3(lp_fadeIn, lp_duration, lp_color);
    }
    else {
        libCOMI_gf_CinematicFade4(lp_fadeIn, lp_duration, lp_color);
    }
}

void libCOMI_gf_CinematicFade3 (bool lp_fadeIn, fixed lp_duration, color lp_color) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_fadeIn == true)) {
        if ((libCOMI_gv__FadeImage != c_invalidDialogControlId)) {
            libNtve_gf_SetDialogItemColor(libCOMI_gv__FadeImage, lp_color, PlayerGroupAll());
            DialogControlFadeTransparency(libCOMI_gv__FadeImage, PlayerGroupAll(), lp_duration, 100.0);
        }

    }
    else {
        libCOMI_gf__FadeCreateDialog();
        libNtve_gf_SetDialogItemColor(libCOMI_gv__FadeImage, lp_color, PlayerGroupAll());
        DialogControlFadeTransparency(libCOMI_gv__FadeImage, PlayerGroupAll(), 0.0, 100.0);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        DialogControlFadeTransparency(libCOMI_gv__FadeImage, PlayerGroupAll(), lp_duration, 0.0);
    }
    if ((lp_duration > 0.0)) {
        Wait(lp_duration, c_timeGame);
    }

}

trigger auto_libCOMI_gf_CinematicFade4_Trigger = null;
bool auto_libCOMI_gf_CinematicFade4_lp_fadeIn;
fixed auto_libCOMI_gf_CinematicFade4_lp_duration;
color auto_libCOMI_gf_CinematicFade4_lp_color;

void libCOMI_gf_CinematicFade4 (bool lp_fadeIn, fixed lp_duration, color lp_color) {
    auto_libCOMI_gf_CinematicFade4_lp_fadeIn = lp_fadeIn;
    auto_libCOMI_gf_CinematicFade4_lp_duration = lp_duration;
    auto_libCOMI_gf_CinematicFade4_lp_color = lp_color;

    if (auto_libCOMI_gf_CinematicFade4_Trigger == null) {
        auto_libCOMI_gf_CinematicFade4_Trigger = TriggerCreate("auto_libCOMI_gf_CinematicFade4_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CinematicFade4_Trigger, false, false);
}

bool auto_libCOMI_gf_CinematicFade4_TriggerFunc (bool testConds, bool runActions) {
    bool lp_fadeIn = auto_libCOMI_gf_CinematicFade4_lp_fadeIn;
    fixed lp_duration = auto_libCOMI_gf_CinematicFade4_lp_duration;
    color lp_color = auto_libCOMI_gf_CinematicFade4_lp_color;

    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CinematicFade3(lp_fadeIn, lp_duration, lp_color);
    return true;
}

void libCOMI_gf__FadeCreateDialog () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv__FadeDialog != c_invalidDialogId)) {
        DialogDestroy(libCOMI_gv__FadeDialog);
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    libCOMI_gv__FadeDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libCOMI_gv__FadeImage = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
}

void libCOMI_gf_VU_UpdateEnemyFactionsList () {
    // Variable Declarations
    string lv_faction;
    string lv_personality;
    int lv_i;
    string lv_race;
    int lv_j;
    int lv_k;
    bool lv_allowed;

    // Automatic Variable Declarations
    int auto06A886A6_ae;
    const int auto06A886A6_ai = 1;

    // Variable Initialization

    // Implementation
    libCOMI_gv_enemyFactionsCount = 0;
    auto06A886A6_ae = UserDataInstanceCount("Factions");
    lv_i = 1;
    for ( ; ( (auto06A886A6_ai >= 0 && lv_i <= auto06A886A6_ae) || (auto06A886A6_ai < 0 && lv_i >= auto06A886A6_ae) ) ; lv_i += auto06A886A6_ai ) {
        lv_faction = UserDataInstance("Factions", lv_i);
        if ((UserDataGetInt("Factions", lv_faction, "Hidden", 1) == 1)) {
            continue;
        }

        if ((UserDataGetInt("Factions", lv_faction, "AllowedOnMap", 1) == 1)) {
            libCOMI_gv_enemyFactionsCount += 1;
            libCOMI_gv_vU_EnemyFactionsList[libCOMI_gv_enemyFactionsCount] = lv_faction;
            DialogControlAddItem(libCOMI_gv_vU_CommanderEnemyFactionPulldown, libCOMI_gv_all, UserDataGetText("Factions", lv_faction, "Name", 1));
        }

    }
    libCOMI_gv_vU_EnemyFactionsList[1] = "_Random_";
}

void libCOMI_gf_VU_SetEnemyFaction (string lp_faction) {
    // Automatic Variable Declarations
    int auto9720909B_ae;
    int auto9720909B_var;

    // Implementation
    if ((libCOMI_gv_vU_CommanderEnemyFactionPulldown == c_invalidDialogControlId)) {
        return ;
    }

    auto9720909B_ae = libCOMI_gv_enemyFactionsCount;
    auto9720909B_var = 0;
    for ( ; auto9720909B_var <= auto9720909B_ae; auto9720909B_var += 1 ) {
        if (true) {
            DialogControlSelectItem(libCOMI_gv_vU_CommanderEnemyFactionPulldown, libCOMI_gv_all, auto9720909B_var);
        }

    }
}

void libCOMI_gf_CreateFactionsDialog () {
    // Variable Declarations
    int lv_offsetX;
    int lv_offsetY;
    int lv_x;
    string lv_map;
    int lv_y;
    int lv_image;
    string lv_faction;

    // Automatic Variable Declarations
    int auto713042BC_ae;
    int auto713042BC_var;

    // Variable Initialization
    lv_offsetX = 10;
    lv_offsetY = -60;
    lv_image = c_invalidDialogControlId;

    // Implementation
    DialogCreate(1800, 100, c_anchorBottomLeft, 130, 30, true);
    libCOMI_gv_amonFactionsDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    auto713042BC_ae = UserDataInstanceCount("Factions");
    auto713042BC_var = 4;
    for ( ; auto713042BC_var <= auto713042BC_ae; auto713042BC_var += 1 ) {
        lv_faction = UserDataInstance("Factions", auto713042BC_var);
        if ((UserDataGetInt("Factions", lv_faction, "Hidden", 1) == 1)) {
            continue;
        }

        if ((auto713042BC_var > libCOMI_gv_mAX_FACTIONS)) {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_5C0911D5"), true);
            break;
        }

        libCOMI_gv_totalFactions += 1;
        DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeButton, "Coop_CommanderSelection/UnitIconFrameTemplate");
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 60, 60);
        DialogControlSetPosition(DialogControlLastCreated(), libCOMI_gv_all, c_anchorBottomLeft, (130 + (libCOMI_gv_totalFactions * 70)), 0);
        libCOMI_gv_raceFaction[libCOMI_gv_totalFactions] = lv_faction;
        libCOMI_gv_raceButton[libCOMI_gv_totalFactions] = DialogControlLastCreated();
        lv_image = libARRA_gf_HookUpDialogItemandshowforplayers("Icon", c_triggerControlTypeImage, libCOMI_gv_raceButton[libCOMI_gv_totalFactions], libCOMI_gv_all);
        libNtve_gf_SetDialogItemImage(lv_image, UserDataGetImagePath("Factions", lv_faction, "Icon", 1), libCOMI_gv_all);
        libNtve_gf_SetDialogItemTooltip(libCOMI_gv_raceButton[libCOMI_gv_totalFactions], UserDataGetText("Factions", lv_faction, "Name", 1), libCOMI_gv_all);
    }
    DialogSetVisible(libCOMI_gv_amonFactionsDialog, PlayerGroupAll(), true);
}

void libCOMI_gf_CreateGameBriefingRoom () {
    int init_i;

    // Variable Declarations
    int lv_indexPlayer;
    int lv_activePlayers;
    string lv_vCommander;
    int[6] lv_colors;

    // Automatic Variable Declarations
    playergroup auto4B235758_g;
    int auto5CB4E62D_ae;
    int auto5CB4E62D_var;
    playergroup autoDD3B7D96_g;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_colors[init_i] = 1;
    }

    // Implementation
    lv_colors[1] = 1;
    lv_colors[2] = 2;
    lv_colors[3] = 7;
    lv_colors[4] = 5;
    lv_colors[5] = 6;
    libCOMI_gf_Pause();
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    auto4B235758_g = libCOMI_gv_vU_SlotsPlayers;
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto4B235758_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) == c_playerTypeNone)) {
            PlayerSetDifficulty(lv_indexPlayer, 2);
        }

        libCOMI_gf_ShowHideWorldCover(true, 0.0, lv_indexPlayer);
    }
    auto5CB4E62D_ae = PlayerGroupCount(libCOMI_gv_vU_SlotsPlayers);
    auto5CB4E62D_var = 1;
    for ( ; auto5CB4E62D_var <= auto5CB4E62D_ae; auto5CB4E62D_var += 1 ) {
        PlayerSetColorIndex(PlayerGroupPlayer(libCOMI_gv_vU_SlotsPlayers, auto5CB4E62D_var), lv_colors[auto5CB4E62D_var], true);
    }
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeLabel, "Coop_CommanderSelection/CommanderSelectionTemplate/Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), GameMapName(), PlayerGroupAll());
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeLabel, "Coop_CommanderSelection/CommanderSelectionTemplate/Objective");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), GameMapDescription(), PlayerGroupAll());
    libCOMI_gf_CreateCommandersList();
    libCOMI_gf_UpdateDifficultiesList();
    libCOMI_gf_UpdateGameModeList();
    libCOMI_gf_CreateCommandersList();
    libCOMI_gf_VU_UpdateEnemyFactionsList();
    libCOMI_gf_VU_SetEnemyFaction("_Random_");
    DialogControlSelectItem(libCOMI_gv_vU_CommanderEnemyFactionPulldown, libCOMI_gv_all, 1);
    DialogControlHookup(libCOMI_gv_cU_CommanderPanel, c_triggerControlTypeImage, "BackgroundImage");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    Wait(0.0, c_timeGame);
    PlayerSetRace(1, "ARC@Prot");
    PlayerSetRace(2, "ARC@Prot");
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    libCOMI_gv_aF_CS_CutsceneDialog[0] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetVisible(DialogLastCreated(), libCOMI_gf_UT_ActiveCommanderPlayers(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeCutscene);
    libNtve_gf_SetDialogItemCutscene(DialogControlLastCreated(), "Cutscenes\\UI_Screens_CampaignMode_Background.SC2Cutscene", PlayerGroupAll());
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libCOMI_gv_aF_CS_CommanderCutscenes[0] = CutsceneGetTriggerControl(DialogControlLastCreated());
    CutscenePlay(CutsceneGetTriggerControl(DialogControlLastCreated()));
    libCOMI_gf_AF_CS_MiraDialogCreate();
    Wait(0.2, c_timeGame);
    libCOMI_gf_AF_CS_CommanderCutscenes();
    libCOMI_gf_CU_MasteryCreate();
    autoDD3B7D96_g = libCOMI_gv_vU_SlotsPlayers;
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoDD3B7D96_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOMI_gf_SetFreeCommander(lv_indexPlayer, libCOMI_gv_cCX_PlayerCommander[lv_indexPlayer]);
        libCOMI_gf_CU_MasteryInitFromData(lv_indexPlayer);
        libCOMI_gf_CU_MasteryUpdatePoints(lv_indexPlayer);
        libCOMI_gf_CU_MasteryUpdate(lv_indexPlayer);
        libCOMI_gv_cU_CommanderSelect_RefCount += 1;
        if ((PlayerType(lv_indexPlayer) != c_playerTypeUser)) {
            libCOMI_gf_CU_CommanderPlayerReadySet(lv_indexPlayer, true);
        }

        libCOMI_gf_UpdatePlayerCommander(lv_indexPlayer);
    }
    libCOMI_gf_UpdateCommandersList();
    Wait(0.0, c_timeGame);
    libARRA_gf_UT_Init_Emoticons();
    TriggerExecute(libARRA_gt_UT_InfoSave, true, false);
    TriggerExecute(libCOMI_gt_UT_RefillInit, true, false);
    libNtve_gf_AddPlayerGroupToPlayerGroup(libCOMI_gv_vU_HumanPlayers, libARRA_gv_uT_DL_LoggingPlayers);
    TriggerEnable(libARRA_gt_UT_DL_DamageLogging, true);
    TriggerEnable(libARRA_gt_UT_DL_HealLogging, true);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    TriggerEnable(libCOMI_gt_ReadyButtonClicked, true);
    TriggerEnable(libCOMI_gt_CommanderButtonClicked, true);
    TriggerEnable(libCOMI_gt_CU_CommandeAllyLeft, true);
    TriggerEnable(libCOMI_gt_CU_CommanderLevelUpClicked, true);
    TriggerEnable(libCOMI_gt_CU_CommanderLevelDownClicked, true);
    TriggerEnable(libCOMI_gt_CU_CommanderMasteryClicked, true);
    TriggerEnable(libCOMI_gt_CU_CommanderMasteryCheckboxToggle, true);
    TriggerEnable(libCOMI_gt_CU_CommanderMutatorChallengeSelected, true);
    TriggerEnable(libCOMI_gt_CU_PrestigeButtonClicked, true);
    TriggerEnable(libCOMI_gt_CU_MasteryLevelUpPressed, true);
    TriggerEnable(libCOMI_gt_CU_MasteryLevelDownPressed, true);
    TriggerEnable(libCOMI_gt_CU_MasteryItemPlusPressed, true);
    TriggerEnable(libCOMI_gt_CU_MasteryItemMinusPressed, true);
    TriggerEnable(libCOMI_gt_CU_MasteryResetPressed, true);
    TriggerEnable(libCOMI_gt_CU_MasteryAcceptPressed, true);
    TriggerEnable(libCOMI_gt_CU_MasteryShiftTrackUp, true);
    TriggerEnable(libCOMI_gt_CU_MasteryShiftTrackDown, true);
}

void libCOMI_gf_CreateCommandersList () {
    // Variable Declarations
    int lv_commanderIndex;
    int lv_commanderButtons;
    int lv_tierIndex;
    int lv_index;
    int lv_levelFrame;
    int lv_compositionSelf;
    int lv_compositionAlly;
    int lv_lastFrame;
    int lv_commandersCount;
    playergroup lv_nobody;
    playergroup lv_all;
    playergroup lv_leaderPlayer;
    int lv_commIndex;
    string lv_indexCommander;
    playergroup lv_team1;
    playergroup lv_team2;

    // Automatic Variable Declarations
    const int auto1E444FC9_ae = libCOMI_gv_mAX_COMMANDERCOUNT;
    const int auto1E444FC9_ai = 1;
    const int auto53A52C30_ae = libCOMI_gv_mAX_TEAM_PLAYERS;
    const int auto53A52C30_ai = 1;
    const int auto553B751C_ae = libCOMI_gv_mAX_TEAM_PLAYERS;
    const int auto553B751C_ai = 1;
    playergroup autoC9EBF833_g;
    int autoC9EBF833_var;
    const int autoC27D320D_ae = libCOMI_gv_cUC_UNITSMAXCOUNT;
    const int autoC27D320D_ai = 1;
    const int auto5781F990_ae = libCOMI_gv_mAX_PLAYERLEVEL;
    const int auto5781F990_ai = 1;
    const int auto69CB188C_ae = libCOMI_gv_cUC_ABILITIESMAXCOUNT;
    const int auto69CB188C_ai = 1;
    const int auto6AC015A9_ae = libCOMI_gv_cCC_PLAYERPRESTIGEMAXRANK;
    const int auto6AC015A9_ai = 1;

    // Variable Initialization
    lv_commanderButtons = c_invalidDialogControlId;
    lv_levelFrame = c_invalidDialogControlId;
    lv_compositionSelf = c_invalidDialogControlId;
    lv_compositionAlly = c_invalidDialogControlId;
    lv_lastFrame = c_invalidDialogControlId;
    lv_nobody = PlayerGroupEmpty();
    lv_all = PlayerGroupAll();
    lv_leaderPlayer = PlayerGroupSingle(1);
    lv_team1 = GameAttributePlayersForTeam(1);
    lv_team2 = GameAttributePlayersForTeam(2);

    // Implementation
    if ((libCOMI_gv_cU_CommanderDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libCOMI_gv_cU_CommanderDialog = DialogLastCreated();
    DialogSetVisible(libCOMI_gv_cU_CommanderDialog, libCOMI_gv_vU_HumanPlayers, true);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "Coop_CommanderSelection/CommanderSelectionTemplate");
    libCOMI_gv_cU_CommanderPanel = DialogControlLastCreated();
    lv_commanderButtons = libARRA_gf_HookUpDialogItemandshowforplayers("CommanderButtons", c_triggerControlTypePanel, libCOMI_gv_cU_CommanderPanel, lv_all);
    libCOMI_gv_playAmonButton = libARRA_gf_HookUpDialogItemandshowforplayers("PlayAmon", c_triggerControlTypeButton, libCOMI_gv_cU_CommanderPanel, lv_team1);
    libCOMI_gv_playRandomButton = libARRA_gf_HookUpDialogItemandshowforplayers("PlayRandom", c_triggerControlTypeButton, libCOMI_gv_cU_CommanderPanel, lv_team1);
    lv_commandersCount = UserDataInstanceCount("Commanders");
    lv_commanderIndex = 1;
    for ( ; ( (auto1E444FC9_ai >= 0 && lv_commanderIndex <= auto1E444FC9_ae) || (auto1E444FC9_ai < 0 && lv_commanderIndex >= auto1E444FC9_ae) ) ; lv_commanderIndex += auto1E444FC9_ai ) {
        libCOMI_gv_commanderOption[lv_commanderIndex].lv_button = libARRA_gf_HookUpDialogItemandshowforplayers("CommanderButton" + IntToString(lv_commanderIndex), c_triggerControlTypeButton, lv_commanderButtons, lv_team1);
        libCOMI_gv_commanderOption[lv_commanderIndex].lv_portrait = libARRA_gf_HookUpDialogItemandshowforplayers("CommanderPortrait", c_triggerControlTypePortrait, libCOMI_gv_commanderOption[lv_commanderIndex].lv_button, lv_team1);
        libCOMI_gv_commanderOption[lv_commanderIndex].lv_title = libARRA_gf_HookUpDialogItemandshowforplayers("CommanderName", c_triggerControlTypeLabel, libCOMI_gv_commanderOption[lv_commanderIndex].lv_button, lv_team1);
        libCOMI_gv_commanderOption[lv_commanderIndex].lv_selection = libARRA_gf_HookUpDialogItemandshowforplayers("SelectionBorder", c_triggerControlTypeImage, libCOMI_gv_commanderOption[lv_commanderIndex].lv_button, lv_team1);
        libCOMI_gv_commanderOption[lv_commanderIndex].lv_lock = libARRA_gf_HookUpDialogItemandshowforplayers("Locked", c_triggerControlTypeImage, libCOMI_gv_commanderOption[lv_commanderIndex].lv_button, lv_team1);
        libCOMI_gv_commanderOption[lv_commanderIndex].lv_ready = libARRA_gf_HookUpDialogItemandshowforplayers("CheckMark", c_triggerControlTypeImage, libCOMI_gv_commanderOption[lv_commanderIndex].lv_button, lv_nobody);
        DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commanderIndex].lv_ready, lv_all, false);
        DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commanderIndex].lv_selection, lv_all, false);
        if ((UserDataGetInt("Commanders", UserDataInstance("Commanders", lv_commanderIndex), "hidden", 1) == 1)) {
            DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commanderIndex].lv_button, lv_all, false);
            DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commanderIndex].lv_portrait, lv_all, false);
            DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commanderIndex].lv_title, lv_all, false);
            DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commanderIndex].lv_selection, lv_all, false);
            DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commanderIndex].lv_ready, lv_all, false);
        }
        else {
            if ((UserDataGetInt("Commanders", UserDataInstance("Commanders", lv_commanderIndex), "locked", 1) == 1)) {
                DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commanderIndex].lv_lock, lv_all, true);
            }
            else {
                DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commanderIndex].lv_lock, lv_all, false);
            }
        }
        if ((lv_commanderIndex > lv_commandersCount)) {
            DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commanderIndex].lv_button, lv_all, false);
            DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commanderIndex].lv_portrait, lv_all, false);
            DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commanderIndex].lv_title, lv_all, false);
            DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commanderIndex].lv_selection, lv_all, false);
        }

        libCOMI_gv_cU_CommanderList[lv_commanderIndex] = UserDataInstance("Commanders", lv_commanderIndex);
        PortraitSetModel(PortraitGetTriggerControl(libCOMI_gv_commanderOption[lv_commanderIndex].lv_portrait), libCOMI_gf_CC_CommanderPortraitModel(libCOMI_gv_cU_CommanderList[lv_commanderIndex]), false);
        if ((libCOMI_gf_CC_CommanderPortraitActor(libCOMI_gv_cU_CommanderList[lv_commanderIndex]) != null)) {
            PortraitSetActor(PortraitGetTriggerControl(libCOMI_gv_commanderOption[lv_commanderIndex].lv_portrait), libCOMI_gf_CC_CommanderPortraitActor(libCOMI_gv_cU_CommanderList[lv_commanderIndex]));
        }
        else {
            PortraitSetActor(PortraitGetTriggerControl(libCOMI_gv_commanderOption[lv_commanderIndex].lv_portrait), "PortraitActor");
        }
    }
    lv_commanderIndex = 1;
    for ( ; ( (auto53A52C30_ai >= 0 && lv_commanderIndex <= auto53A52C30_ae) || (auto53A52C30_ai < 0 && lv_commanderIndex >= auto53A52C30_ae) ) ; lv_commanderIndex += auto53A52C30_ai ) {
        libCOMI_gv_amonOption[lv_commanderIndex].lv_button = libARRA_gf_HookUpDialogItemandshowforplayers("CommanderButtonAmon" + IntToString(lv_commanderIndex), c_triggerControlTypeButton, lv_commanderButtons, lv_all);
        libCOMI_gv_amonOption[lv_commanderIndex].lv_selection = libARRA_gf_HookUpDialogItemandshowforplayers("SelectionBorder", c_triggerControlTypeImage, libCOMI_gv_amonOption[lv_commanderIndex].lv_button, lv_nobody);
        libCOMI_gv_amonOption[lv_commanderIndex].lv_lock = libARRA_gf_HookUpDialogItemandshowforplayers("Icon", c_triggerControlTypeImage, libCOMI_gv_amonOption[lv_commanderIndex].lv_button, lv_nobody);
        libCOMI_gv_amonOption[lv_commanderIndex].lv_ready = libARRA_gf_HookUpDialogItemandshowforplayers("CheckMark", c_triggerControlTypeImage, libCOMI_gv_amonOption[lv_commanderIndex].lv_button, lv_nobody);
        DialogControlSetVisible(libCOMI_gv_amonOption[lv_commanderIndex].lv_button, lv_all, false);
        libNtve_gf_SetDialogItemImage(libCOMI_gv_amonOption[lv_commanderIndex].lv_lock, "Assets\\Factions\\AmonsArmadaLogo.dds", lv_all);
        DialogControlSetVisible(libCOMI_gv_amonOption[lv_commanderIndex].lv_lock, lv_all, true);
        DialogControlSetVisible(libCOMI_gv_amonOption[lv_commanderIndex].lv_ready, lv_all, false);
        DialogControlSetVisible(libCOMI_gv_amonOption[lv_commanderIndex].lv_selection, libCOMI_gv_all, false);
    }
    lv_commanderIndex = 1;
    for ( ; ( (auto553B751C_ai >= 0 && lv_commanderIndex <= auto553B751C_ae) || (auto553B751C_ai < 0 && lv_commanderIndex >= auto553B751C_ae) ) ; lv_commanderIndex += auto553B751C_ai ) {
        libCOMI_gv_randomOption[lv_commanderIndex].lv_button = libARRA_gf_HookUpDialogItemandshowforplayers("CommanderButtonRandom" + IntToString(lv_commanderIndex), c_triggerControlTypeButton, lv_commanderButtons, lv_all);
        libCOMI_gv_randomOption[lv_commanderIndex].lv_selection = libARRA_gf_HookUpDialogItemandshowforplayers("SelectionBorder", c_triggerControlTypeImage, libCOMI_gv_randomOption[lv_commanderIndex].lv_button, lv_nobody);
        libCOMI_gv_randomOption[lv_commanderIndex].lv_lock = libARRA_gf_HookUpDialogItemandshowforplayers("Icon", c_triggerControlTypeImage, libCOMI_gv_randomOption[lv_commanderIndex].lv_button, lv_nobody);
        libCOMI_gv_randomOption[lv_commanderIndex].lv_ready = libARRA_gf_HookUpDialogItemandshowforplayers("CheckMark", c_triggerControlTypeImage, libCOMI_gv_randomOption[lv_commanderIndex].lv_button, lv_nobody);
        DialogControlSetVisible(libCOMI_gv_randomOption[lv_commanderIndex].lv_button, lv_all, false);
        libNtve_gf_SetDialogItemImage(libCOMI_gv_randomOption[lv_commanderIndex].lv_lock, "Assets\\Textures\\ui_commanderportrait_random.dds", lv_all);
        DialogControlSetVisible(libCOMI_gv_randomOption[lv_commanderIndex].lv_lock, lv_all, true);
        DialogControlSetVisible(libCOMI_gv_randomOption[lv_commanderIndex].lv_ready, lv_all, false);
        DialogControlSetVisible(libCOMI_gv_randomOption[lv_commanderIndex].lv_selection, libCOMI_gv_all, false);
    }
    libCOMI_gv_cU_CommanderInfoPanel = libARRA_gf_HookUpDialogItemandshowforplayers("CompositionInfoSelf", c_triggerControlTypePanel, libCOMI_gv_cU_CommanderPanel, lv_all);
    libCOMI_gv_cU_CommanderSelectedNameSelf = libARRA_gf_HookUpDialogItemandshowforplayers("CommanderLabel", c_triggerControlTypeLabel, libCOMI_gv_cU_CommanderInfoPanel, lv_all);
    libCOMI_gv_cU_CommanderSelectedPrestigeSelf = libARRA_gf_HookUpDialogItemandshowforplayers("PrestigeLabel", c_triggerControlTypeLabel, libCOMI_gv_cU_CommanderInfoPanel, lv_all);
    libCOMI_gv_cU_CommanderAccountNameSelf = libARRA_gf_HookUpDialogItemandshowforplayers("AccountLabel", c_triggerControlTypeLabel, libCOMI_gv_cU_CommanderInfoPanel, lv_all);
    autoC9EBF833_g = libCOMI_gf_GetHumanPlayers();
    autoC9EBF833_var = -1;
    while (true) {
        autoC9EBF833_var = PlayerGroupNextPlayer(autoC9EBF833_g, autoC9EBF833_var);
        if (autoC9EBF833_var < 0) { break; }
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), PlayerName(autoC9EBF833_var), PlayerGroupSingle(autoC9EBF833_var));
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoC9EBF833_var, false)), PlayerGroupSingle(autoC9EBF833_var));
    }
    libCOMI_gv_vU_DetailsContainer = libARRA_gf_HookUpDialogItemandshowforplayers("DetailsContainer", c_triggerControlTypePanel, libCOMI_gv_cU_CommanderPanel, lv_all);
    libCOMI_gv_vU_DetailsTabControl = libARRA_gf_HookUpDialogItemandshowforplayers("TabControl", c_triggerControlTypePanel, libCOMI_gv_vU_DetailsContainer, lv_all);
    libCOMI_gv_vU_DetailsTabInfoButton = libARRA_gf_HookUpDialogItemandshowforplayers("InfoButton", c_triggerControlTypeButton, libCOMI_gv_vU_DetailsContainer, lv_all);
    libCOMI_gv_vU_DetailsTabUnitsButton = libARRA_gf_HookUpDialogItemandshowforplayers("UnitsButton", c_triggerControlTypeButton, libCOMI_gv_vU_DetailsContainer, lv_all);
    libCOMI_gv_vU_DetailsTabResearchButton = libARRA_gf_HookUpDialogItemandshowforplayers("ResearchButton", c_triggerControlTypeButton, libCOMI_gv_vU_DetailsContainer, lv_all);
    libCOMI_gv_vU_DetailsInfoContainer = libARRA_gf_HookUpDialogItemandshowforplayers("InfoContainer", c_triggerControlTypePanel, libCOMI_gv_vU_DetailsContainer, lv_nobody);
    libCOMI_gv_vU_DetailsUnitsContainer = libARRA_gf_HookUpDialogItemandshowforplayers("UnitsContainer", c_triggerControlTypePanel, libCOMI_gv_vU_DetailsContainer, lv_nobody);
    libCOMI_gv_vU_DetailsResearchContainer = libARRA_gf_HookUpDialogItemandshowforplayers("ResearchContainer", c_triggerControlTypePanel, libCOMI_gv_vU_DetailsContainer, lv_nobody);
    lv_tierIndex = 1;
    for ( ; ( (autoC27D320D_ai >= 0 && lv_tierIndex <= autoC27D320D_ae) || (autoC27D320D_ai < 0 && lv_tierIndex >= autoC27D320D_ae) ) ; lv_tierIndex += autoC27D320D_ai ) {
        libCOMI_gv_cU_CommanderUnitsButtons[lv_tierIndex].lv_button = libARRA_gf_HookUpDialogItemandshowforplayers("Unit" + IntToString(lv_tierIndex), c_triggerControlTypeButton, libCOMI_gv_vU_DetailsUnitsContainer, lv_all);
        libCOMI_gv_cU_CommanderUnitsButtons[lv_tierIndex].lv_icon = libARRA_gf_HookUpDialogItemandshowforplayers("Icon", c_triggerControlTypeImage, libCOMI_gv_cU_CommanderUnitsButtons[lv_tierIndex].lv_button, lv_all);
        libCOMI_gv_cU_CommanderUnitsButtons[lv_tierIndex].lv_title = libARRA_gf_HookUpDialogItemandshowforplayers("Title", c_triggerControlTypeLabel, libCOMI_gv_cU_CommanderUnitsButtons[lv_tierIndex].lv_button, lv_nobody);
        libCOMI_gv_cU_CommanderUnitsButtons[lv_tierIndex].lv_description = libARRA_gf_HookUpDialogItemandshowforplayers("Description", c_triggerControlTypeLabel, libCOMI_gv_cU_CommanderUnitsButtons[lv_tierIndex].lv_button, lv_nobody);
    }
    lv_tierIndex = 1;
    for ( ; ( (auto5781F990_ai >= 0 && lv_tierIndex <= auto5781F990_ae) || (auto5781F990_ai < 0 && lv_tierIndex >= auto5781F990_ae) ) ; lv_tierIndex += auto5781F990_ai ) {
        libCOMI_gv_cU_CommanderUpgradesButtons[lv_tierIndex].lv_button = libARRA_gf_HookUpDialogItemandshowforplayers("Upgrade" + IntToString(lv_tierIndex), c_triggerControlTypeButton, libCOMI_gv_vU_DetailsUnitsContainer, lv_all);
        libCOMI_gv_cU_CommanderUpgradesButtons[lv_tierIndex].lv_icon = libARRA_gf_HookUpDialogItemandshowforplayers("Icon", c_triggerControlTypeImage, libCOMI_gv_cU_CommanderUpgradesButtons[lv_tierIndex].lv_button, lv_all);
        libCOMI_gv_cU_CommanderUpgradesButtons[lv_tierIndex].lv_title = libARRA_gf_HookUpDialogItemandshowforplayers("Title", c_triggerControlTypeLabel, libCOMI_gv_cU_CommanderUpgradesButtons[lv_tierIndex].lv_button, lv_nobody);
        libCOMI_gv_cU_CommanderUpgradesButtons[lv_tierIndex].lv_description = libARRA_gf_HookUpDialogItemandshowforplayers("Description", c_triggerControlTypeLabel, libCOMI_gv_cU_CommanderUpgradesButtons[lv_tierIndex].lv_button, lv_nobody);
    }
    lv_tierIndex = 1;
    for ( ; ( (auto69CB188C_ai >= 0 && lv_tierIndex <= auto69CB188C_ae) || (auto69CB188C_ai < 0 && lv_tierIndex >= auto69CB188C_ae) ) ; lv_tierIndex += auto69CB188C_ai ) {
        libCOMI_gv_cU_CommanderAbilitiesButtons[lv_tierIndex].lv_button = libARRA_gf_HookUpDialogItemandshowforplayers("Ability" + IntToString(lv_tierIndex), c_triggerControlTypeButton, libCOMI_gv_vU_DetailsUnitsContainer, lv_all);
        libCOMI_gv_cU_CommanderAbilitiesButtons[lv_tierIndex].lv_icon = libARRA_gf_HookUpDialogItemandshowforplayers("Icon", c_triggerControlTypeImage, libCOMI_gv_cU_CommanderAbilitiesButtons[lv_tierIndex].lv_button, lv_all);
        libCOMI_gv_cU_CommanderAbilitiesButtons[lv_tierIndex].lv_title = libARRA_gf_HookUpDialogItemandshowforplayers("Title", c_triggerControlTypeLabel, libCOMI_gv_cU_CommanderAbilitiesButtons[lv_tierIndex].lv_button, lv_nobody);
        libCOMI_gv_cU_CommanderAbilitiesButtons[lv_tierIndex].lv_description = libARRA_gf_HookUpDialogItemandshowforplayers("Description", c_triggerControlTypeLabel, libCOMI_gv_cU_CommanderAbilitiesButtons[lv_tierIndex].lv_button, lv_nobody);
    }
    lv_tierIndex = 1;
    for ( ; ( (auto6AC015A9_ai >= 0 && lv_tierIndex <= auto6AC015A9_ae) || (auto6AC015A9_ai < 0 && lv_tierIndex >= auto6AC015A9_ae) ) ; lv_tierIndex += auto6AC015A9_ai ) {
        libCOMI_gv_cU_CommanderPrestigesButtons[lv_tierIndex].lv_button = libARRA_gf_HookUpDialogItemandshowforplayers(libNtve_gf_ConvertStringToUILayoutFrameName(("Prestige" + IntToString(lv_tierIndex))), c_triggerControlTypeButton, libCOMI_gv_vU_DetailsResearchContainer, lv_all);
        libCOMI_gv_cU_CommanderPrestigesButtons[lv_tierIndex].lv_icon = libARRA_gf_HookUpDialogItemandshowforplayers("Icon", c_triggerControlTypeImage, libCOMI_gv_cU_CommanderPrestigesButtons[lv_tierIndex].lv_button, lv_all);
        libCOMI_gv_cU_CommanderPrestigesButtons[lv_tierIndex].lv_title = libARRA_gf_HookUpDialogItemandshowforplayers("Title", c_triggerControlTypeLabel, libCOMI_gv_cU_CommanderPrestigesButtons[lv_tierIndex].lv_button, lv_nobody);
        libCOMI_gv_cU_CommanderPrestigesButtons[lv_tierIndex].lv_description = libARRA_gf_HookUpDialogItemandshowforplayers("Description", c_triggerControlTypeLabel, libCOMI_gv_cU_CommanderPrestigesButtons[lv_tierIndex].lv_button, lv_nobody);
    }
    libCOMI_gv_cU_CommanderMasteryButton = libARRA_gf_HookUpDialogItemandshowforplayers("MasterySetButton", c_triggerControlTypeButton, libCOMI_gv_vU_DetailsResearchContainer, lv_nobody);
    libCOMI_gv_cU_CommanderMasteryCheckbox = libARRA_gf_HookUpDialogItemandshowforplayers("MasteryCheckbox", c_triggerControlTypeCheckBox, libCOMI_gv_vU_DetailsResearchContainer, lv_nobody);
    libNtve_gf_SetDialogItemChecked(libCOMI_gv_cU_CommanderMasteryCheckbox, true, PlayerGroupAll());
    libCOMI_gv_cU_CommanderLevelUpButton = libARRA_gf_HookUpDialogItemandshowforplayers("LevelUpButton", c_triggerControlTypeButton, libCOMI_gv_vU_DetailsResearchContainer, lv_all);
    libCOMI_gv_cU_CommanderLevelDownButton = libARRA_gf_HookUpDialogItemandshowforplayers("LevelDownButton", c_triggerControlTypeButton, libCOMI_gv_vU_DetailsResearchContainer, lv_all);
    libCOMI_gv_vU_CommanderPanelSettings = libARRA_gf_HookUpDialogItemandshowforplayers("SettingsList", c_triggerControlTypePanel, libCOMI_gv_cU_CommanderPanel, lv_leaderPlayer);
    libCOMI_gv_cU_CommanderMutatorButton = libARRA_gf_HookUpDialogItemandshowforplayers("MutatorButton", c_triggerControlTypeButton, libCOMI_gv_cU_CommanderPanel, lv_leaderPlayer);
    libCOMI_gv_vU_CommanderDifficultyPulldown = libARRA_gf_HookUpDialogItemandshowforplayers("DifficultyPulldown", c_triggerControlTypePulldown, libCOMI_gv_cU_CommanderPanel, lv_all);
    libCOMI_gv_vU_CommanderEnemyFactionPulldown = libARRA_gf_HookUpDialogItemandshowforplayers("EnemyFactionPulldown", c_triggerControlTypePulldown, libCOMI_gv_vU_CommanderPanelSettings, lv_leaderPlayer);
    libCOMI_gv_vU_GameModePulldown = libARRA_gf_HookUpDialogItemandshowforplayers("GameModPulldown", c_triggerControlTypePulldown, libCOMI_gv_vU_CommanderPanelSettings, lv_leaderPlayer);
    lv_compositionSelf = libARRA_gf_HookUpDialogItemandshowforplayers("CompositionInfoSelf", c_triggerControlTypePanel, libCOMI_gv_cU_CommanderPanel, lv_all);
    libCOMI_gv_cU_CommanderReadyButton = libARRA_gf_HookUpDialogItemandshowforplayers("ReadyButton", c_triggerControlTypeButton, libCOMI_gv_cU_CommanderPanel, lv_all);
    lv_levelFrame = libARRA_gf_HookUpDialogItemandshowforplayers("CommanderLevelLabel", c_triggerControlTypePanel, lv_compositionSelf, lv_all);
    libCOMI_gv_cU_CommanderLevelLabelSelf = libARRA_gf_HookUpDialogItemandshowforplayers("LevelLabel", c_triggerControlTypeLabel, lv_levelFrame, lv_all);
    libCOMI_gv_cU_CommanderMasteryLabelSelf = libARRA_gf_HookUpDialogItemandshowforplayers("MasteryLevelLabel", c_triggerControlTypeLabel, lv_levelFrame, lv_all);
    libCOMI_gv_cU_CommanderReadyButton = libARRA_gf_HookUpDialogItemandshowforplayers("ReadyButton", c_triggerControlTypeButton, libCOMI_gv_cU_CommanderPanel, lv_all);
    libCOMI_gv_cU_CommanderReadyCheckMark = libARRA_gf_HookUpDialogItemandshowforplayers("CheckMark", c_triggerControlTypeImage, libCOMI_gv_cU_CommanderReadyButton, lv_nobody);
}

trigger auto_libCOMI_gf_AF_CS_NewsCreate_Trigger = null;

void libCOMI_gf_AF_CS_NewsCreate () {
    if (auto_libCOMI_gf_AF_CS_NewsCreate_Trigger == null) {
        auto_libCOMI_gf_AF_CS_NewsCreate_Trigger = TriggerCreate("auto_libCOMI_gf_AF_CS_NewsCreate_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_AF_CS_NewsCreate_Trigger, false, false);
}

bool auto_libCOMI_gf_AF_CS_NewsCreate_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(600, 600, c_anchorTopRight, 0, -40, true);
    libCOMI_gv_aF_CS_NewsDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 1024);
    DialogSetVisible(DialogLastCreated(), libCOMI_gf_UT_ActiveCommanderPlayers(), true);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "AF_CommanderSelectionScreen/NewsSection");
    libCOMI_gv_aF_CS_NewsDialogPanel = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_aF_CS_NewsDialogPanel, c_triggerControlTypeLabel, "NewsText");
    TextExpressionSetToken("Param/Expression/lib_COMI_15AD7BE4", "A", libCOMI_gv_aF_CS_News);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_COMI_15AD7BE4"), PlayerGroupAll());
    DialogControlHookup(libCOMI_gv_aF_CS_NewsDialogPanel, c_triggerControlTypeButton, "ControlButton");
    libCOMI_gv_aF_CS_NewsControlButton = DialogControlLastCreated();
    DialogCreate(200, 50, c_anchorBottomRight, 0, 0, true);
    libCOMI_gv_aF_CS_PatchDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 1024);
    DialogSetVisible(DialogLastCreated(), libCOMI_gf_UT_ActiveCommanderPlayers(), true);
    TextExpressionSetToken("Param/Expression/lib_COMI_40DD3816", "A", StringToText(FixedToString(libCOMI_gv_cURRENT_VERSION, c_fixedPrecisionAny)));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorBottomRight, 10, 10, TextExpressionAssemble("Param/Expression/lib_COMI_40DD3816"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "PatchStyle", PlayerGroupAll());
    Wait(3.5, c_timeGame);
    DialogControlSendAnimationEvent(libCOMI_gv_aF_CS_NewsDialogPanel, PlayerGroupAll(), "ShowEv");
    Wait(20.0, c_timeGame);
    if ((libCOMI_gv_aF_CS_NewsControlButtonClicked == false)) {
        DialogControlSendAnimationEvent(libCOMI_gv_aF_CS_NewsDialogPanel, PlayerGroupAll(), "HideEv");
    }

    return true;
}

void libCOMI_gf_ShowHideWorldCover (bool lp_showHide, fixed lp_transparency, int lp_player) {
    // Variable Declarations
    playergroup lv_coverPlayers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_coverPlayers = PlayerGroupEmpty();

    // Implementation
    lv_coverPlayers = PlayerGroupSingle(lp_player);
    if ((libCOMI_gv_cC_WorldCoverDlg == c_invalidDialogId)) {
        if ((lp_showHide == true)) {
            DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
            libCOMI_gv_cC_WorldCoverDlg = DialogLastCreated();
            DialogSetFullscreen(DialogLastCreated(), true);
            DialogSetImageVisible(DialogLastCreated(), false);
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
            libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
            DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\white32.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 0.00, 0.00), PlayerGroupAll());
            libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1, PlayerGroupAll());
            libNtve_gf_SetDialogItemRenderType(DialogControlLastCreated(), c_triggerRenderTypeHDR, PlayerGroupAll());
        }
        else {
            return ;
        }
    }

    if ((lp_showHide == true)) {
        DialogSetTransparency(libCOMI_gv_cC_WorldCoverDlg, lp_transparency);
    }

    DialogSetVisible(libCOMI_gv_cC_WorldCoverDlg, lv_coverPlayers, lp_showHide);
}

void libCOMI_gf_AF_CS_CommanderCutscenes () {
    // Variable Declarations
    int lv_vA;
    string lv_commander;

    // Automatic Variable Declarations
    const int auto709C2A81_ae = 2;
    const int auto709C2A81_ai = 1;

    // Variable Initialization

    // Implementation
    DialogCreate(1000, 1050, c_anchorBottomRight, 0, -75, true);
    libCOMI_gv_aF_CS_CutsceneDialog[1] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), libCOMI_gf_UT_ActiveCommanderPlayers(), true);
    CutsceneSetGlobalFilter("Standard");
    lv_vA = 1;
    for ( ; ( (auto709C2A81_ai >= 0 && lv_vA <= auto709C2A81_ae) || (auto709C2A81_ai < 0 && lv_vA >= auto709C2A81_ae) ) ; lv_vA += auto709C2A81_ai ) {
        if ((PlayerStatus(lv_vA) == c_playerStatusActive)) {
            libCOMI_gv_cutsceneLastActiveCommander[lv_vA] = libCOMI_gf_ActiveCommanderForPlayer(lv_vA);
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypeCutscene);
            DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemCutscene(DialogControlLastCreated(), "Cutscenes\\UI_Screens_AlliedCommander_Foreground.SC2Cutscene", PlayerGroupAll());
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(libCOMI_gf_UT_OtherPlayer(lv_vA)), false);
            libCOMI_gv_aF_CS_CommanderCutscenes[lv_vA] = CutsceneGetTriggerControl(DialogControlLastCreated());
            if ((libCOMI_gv_cutsceneLastActiveCommander[lv_vA] != null)) {
                if ((libCOMI_gv_cutsceneLastActiveCommander[lv_vA] == "Horner")) {
                    DialogSetVisible(libCOMI_gv_aF_CS_CommanderMiraDialog, PlayerGroupSingle(lv_vA), true);
                    CutsceneSetFilter(libCOMI_gv_aF_CS_CommanderCutscenes[lv_vA], "");
                }
                else {
                    CutsceneSetFilter(libCOMI_gv_aF_CS_CommanderCutscenes[lv_vA], (libCOMI_gv_cutsceneLastActiveCommander[lv_vA]));
                }
            }

            CutsceneGoToBookmark(libCOMI_gv_aF_CS_CommanderCutscenes[lv_vA], "CharacterLoopStart");
            CutscenePlay(libCOMI_gv_aF_CS_CommanderCutscenes[lv_vA]);
        }

    }
}

void libCOMI_gf_AF_CS_MiraDialogCreate () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(500, 500, c_anchorRight, 200, 0, true);
    libCOMI_gv_aF_CS_CommanderMiraDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "AF_CommanderSelectionScreen/MiraBRB");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "MiraLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UserDataGetText("Commanders", "Horner", "AlternativeCutscenemessage", 1), PlayerGroupAll());
}

void libCOMI_gf_SetFreeCommander (int lp_player, string lp_commander) {
    // Variable Declarations
    bool lv_isOccupied;
    int lv_indexPlayer;
    int lv_indexCommander;
    string lv_indexCommanderInstance;

    // Automatic Variable Declarations
    playergroup autoB7558480_g;
    int auto0CE52DFE_ae;
    const int auto0CE52DFE_ai = 1;
    playergroup autoB08BD026_g;

    // Variable Initialization

    // Implementation
    if ((lp_commander != null)) {
        autoB7558480_g = libCOMI_gv_vU_SlotsPlayers;
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoB7558480_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            if ((lv_indexPlayer == lp_player)) {
                break;
            }

            if ((libCOMI_gv_cCX_PlayerCommander[lv_indexPlayer] == libCOMI_gv_cCX_PlayerCommander[lp_player])) {
                lv_isOccupied = true;
                break;
            }

        }
    }
    else {
        lv_isOccupied = true;
    }
    if ((lv_isOccupied == false)) {
        libCOMI_gf_CU_CommanderSelect(lp_player, libCOMI_gv_cCX_PlayerCommander[lp_player]);
    }
    else {
        auto0CE52DFE_ae = UserDataInstanceCount("Commanders");
        lv_indexCommander = 1;
        for ( ; ( (auto0CE52DFE_ai >= 0 && lv_indexCommander <= auto0CE52DFE_ae) || (auto0CE52DFE_ai < 0 && lv_indexCommander >= auto0CE52DFE_ae) ) ; lv_indexCommander += auto0CE52DFE_ai ) {
            lv_indexCommanderInstance = UserDataInstance("Commanders", lv_indexCommander);
            lv_isOccupied = false;
            autoB08BD026_g = libCOMI_gv_vU_SlotsPlayers;
            lv_indexPlayer = -1;
            while (true) {
                lv_indexPlayer = PlayerGroupNextPlayer(autoB08BD026_g, lv_indexPlayer);
                if (lv_indexPlayer < 0) { break; }
                if ((lv_indexPlayer == lp_player)) {
                    break;
                }

                if ((libCOMI_gv_cCX_PlayerCommander[lv_indexPlayer] == lv_indexCommanderInstance)) {
                    lv_isOccupied = true;
                    break;
                }

            }
            if ((lv_isOccupied == false)) {
                libCOMI_gf_CU_CommanderSelect(lp_player, lv_indexCommanderInstance);
                return ;
            }

        }
    }
}

playergroup libCOMI_gf_GetPlayingPlayers () {
    // Variable Declarations
    playergroup lv_playingPlayers;

    // Automatic Variable Declarations
    playergroup autoECDB2232_g;
    int autoECDB2232_var;
    playergroup auto844EB7CB_g;
    int auto844EB7CB_var;

    // Variable Initialization
    lv_playingPlayers = PlayerGroupEmpty();

    // Implementation
    autoECDB2232_g = libCOMI_gv_vU_SlotsPlayers;
    autoECDB2232_var = -1;
    while (true) {
        autoECDB2232_var = PlayerGroupNextPlayer(autoECDB2232_g, autoECDB2232_var);
        if (autoECDB2232_var < 0) { break; }
        if ((PlayerType(autoECDB2232_var) == c_playerTypeUser) && (PlayerStatus(autoECDB2232_var) != c_playerStatusLeft)) {
            PlayerGroupAdd(lv_playingPlayers, autoECDB2232_var);
        }

    }
    auto844EB7CB_g = libCOMI_gv_vU_SlotsPlayers;
    auto844EB7CB_var = -1;
    while (true) {
        auto844EB7CB_var = PlayerGroupNextPlayer(auto844EB7CB_g, auto844EB7CB_var);
        if (auto844EB7CB_var < 0) { break; }
        if (((PlayerType(auto844EB7CB_var) != c_playerTypeUser) || (PlayerStatus(auto844EB7CB_var) == c_playerStatusLeft)) && (libCOMI_gv_gameMode > PlayerGroupCount(lv_playingPlayers))) {
            PlayerGroupAdd(lv_playingPlayers, auto844EB7CB_var);
        }

    }
    return lv_playingPlayers;
}

void libCOMI_gf_UpdateCommandersList () {
    // Variable Declarations
    text lv_commanderDscription;
    int lv_commIndex;
    playergroup lv_otherPlayers;
    playergroup lv_chosenPlayer;
    text lv_availableTooltip;
    text lv_unavailableTooltip;
    int lv_owner;
    int lv_alliesPlayersCount;
    int lv_ownerIndex;
    string lv_commander;
    playergroup lv_playingPlayers;

    // Automatic Variable Declarations
    const int auto44167AAA_ae = libCOMI_gv_mAX_COMMANDERCOUNT;
    const int auto44167AAA_ai = 1;
    playergroup auto697667B7_g;
    int auto697667B7_var;
    playergroup auto4B859BC7_g;
    int auto4B859BC7_var;
    const int auto029FC9E9_ae = libCOMI_gv_mAX_TEAM_PLAYERS;
    int auto029FC9E9_var;
    playergroup auto6E88B9B5_g;
    int auto6E88B9B5_var;
    playergroup auto2E96F5A2_g;
    int auto2E96F5A2_var;
    const int autoDF1652A7_ae = libCOMI_gv_mAX_TEAM_PLAYERS;
    int autoDF1652A7_var;
    playergroup auto44E50460_g;
    int auto44E50460_var;

    // Variable Initialization
    lv_otherPlayers = PlayerGroupEmpty();
    lv_chosenPlayer = PlayerGroupEmpty();
    TextExpressionSetToken("Param/Expression/lib_COMI_496155C5", "A", lv_availableTooltip);
    lv_unavailableTooltip = TextExpressionAssemble("Param/Expression/lib_COMI_496155C5");
    lv_playingPlayers = libCOMI_gf_GetPlayingPlayers();

    // Implementation
    if ((libCOMI_gv_cU_CommanderDialog == c_invalidDialogId)) {
        return ;
    }

    lv_commIndex = 1;
    for ( ; ( (auto44167AAA_ai >= 0 && lv_commIndex <= auto44167AAA_ae) || (auto44167AAA_ai < 0 && lv_commIndex >= auto44167AAA_ae) ) ; lv_commIndex += auto44167AAA_ai ) {
        lv_commander = libCOMI_gv_cU_CommanderList[lv_commIndex];
        if ((lv_commander == null)) {
            continue;
        }

        lv_owner = 0;
        lv_ownerIndex = 0;
        auto697667B7_g = lv_playingPlayers;
        auto697667B7_var = -1;
        while (true) {
            auto697667B7_var = PlayerGroupNextPlayer(auto697667B7_g, auto697667B7_var);
            if (auto697667B7_var < 0) { break; }
            lv_ownerIndex += 1;
            if ((libCOMI_gv_cU_CommanderList[lv_commIndex] == libCOMI_gv_cCX_PlayerCommander[auto697667B7_var])) {
                lv_owner = auto697667B7_var;
                break;
            }

        }
        TextExpressionSetToken("Param/Expression/lib_COMI_4965F6C6", "A", libCOMI_gf_CC_CommanderName(UserDataInstance("Commanders", lv_commIndex)));
        TextExpressionSetToken("Param/Expression/lib_COMI_4965F6C6", "B", StringExternal(CatalogFieldValueGet(c_gameCatalogRace, libCOMI_gf_CC_CommanderRace(UserDataInstance("Commanders", lv_commIndex)), "Name", c_playerAny)));
        TextExpressionSetToken("Param/Expression/lib_COMI_4965F6C6", "C", lv_commanderDscription);
        lv_availableTooltip = TextExpressionAssemble("Param/Expression/lib_COMI_4965F6C6");
        if ((lv_owner != 0)) {
            lv_otherPlayers = PlayerGroupAll();
            PlayerGroupRemove(lv_otherPlayers, lv_owner);
            lv_chosenPlayer = PlayerGroupSingle(lv_owner);
            libNtve_gf_SetDialogItemToggled(libCOMI_gv_commanderOption[lv_commIndex].lv_button, true, libCOMI_gv_all);
            libNtve_gf_SetDialogItemPaused(libCOMI_gv_commanderOption[lv_commIndex].lv_portrait, false, libCOMI_gv_all);
            libNtve_gf_SetDialogItemTooltip(libCOMI_gv_commanderOption[lv_commIndex].lv_button, lv_availableTooltip, lv_chosenPlayer);
            libNtve_gf_SetDialogItemTooltip(libCOMI_gv_commanderOption[lv_commIndex].lv_button, lv_unavailableTooltip, lv_otherPlayers);
            libNtve_gf_SetDialogItemTintColor(libCOMI_gv_commanderOption[lv_commIndex].lv_portrait, Color(100,100,100), lv_chosenPlayer);
            libNtve_gf_SetDialogItemTintColor(libCOMI_gv_commanderOption[lv_commIndex].lv_portrait, Color(100.00, 0.00, 0.00), lv_otherPlayers);
            DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commIndex].lv_selection, libCOMI_gv_all, true);
            libNtve_gf_SetDialogItemColor(libCOMI_gv_commanderOption[lv_commIndex].lv_selection, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_owner, false)), libCOMI_gv_all);
            if (((libCOMI_gv_cU_CommanderSelect_PlayerReady[lv_owner] == true) || (PlayerType(lv_owner) != c_playerTypeUser))) {
                DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commIndex].lv_ready, libCOMI_gv_all, true);
            }
            else {
                DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commIndex].lv_ready, libCOMI_gv_all, false);
            }
        }
        else {
            DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commIndex].lv_selection, libCOMI_gv_all, false);
            libNtve_gf_SetDialogItemTooltip(libCOMI_gv_commanderOption[lv_commIndex].lv_button, lv_availableTooltip, libCOMI_gv_all);
            libNtve_gf_SetDialogItemTintColor(libCOMI_gv_commanderOption[lv_commIndex].lv_portrait, Color(100,100,100), libCOMI_gv_all);
            libNtve_gf_SetDialogItemToggled(libCOMI_gv_commanderOption[lv_commIndex].lv_button, false, libCOMI_gv_all);
            libNtve_gf_SetDialogItemPaused(libCOMI_gv_commanderOption[lv_commIndex].lv_portrait, true, libCOMI_gv_all);
        }
    }
    libCOMI_gv_randomPlayersCount = 0;
    auto4B859BC7_g = lv_playingPlayers;
    auto4B859BC7_var = -1;
    while (true) {
        auto4B859BC7_var = PlayerGroupNextPlayer(auto4B859BC7_g, auto4B859BC7_var);
        if (auto4B859BC7_var < 0) { break; }
        if ((libCOMI_gv_cCX_PlayerCommander[auto4B859BC7_var] == null) && (libCOMI_gv_chosenTeam[auto4B859BC7_var] == 1)) {
            libCOMI_gv_randomPlayersCount += 1;
            libCOMI_gv_randomPlayers[libCOMI_gv_amonPlayersCount] = auto4B859BC7_var;
            libNtve_gf_SetDialogItemToggled(libCOMI_gv_randomOption[libCOMI_gv_randomPlayersCount].lv_button, true, libCOMI_gv_all);
            libNtve_gf_SetDialogItemColor(libCOMI_gv_randomOption[libCOMI_gv_randomPlayersCount].lv_selection, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto4B859BC7_var, false)), libCOMI_gv_all);
            libNtve_gf_SetDialogItemTooltip(libCOMI_gv_randomOption[libCOMI_gv_randomPlayersCount].lv_button, lv_availableTooltip, lv_chosenPlayer);
            libNtve_gf_SetDialogItemTooltip(libCOMI_gv_randomOption[libCOMI_gv_randomPlayersCount].lv_button, lv_unavailableTooltip, lv_otherPlayers);
            DialogControlSetVisible(libCOMI_gv_randomOption[libCOMI_gv_randomPlayersCount].lv_selection, libCOMI_gv_all, true);
            DialogControlSetVisible(libCOMI_gv_randomOption[libCOMI_gv_randomPlayersCount].lv_button, libCOMI_gv_all, true);
            if (((libCOMI_gv_cU_CommanderSelect_PlayerReady[auto4B859BC7_var] == true) || (PlayerType(auto4B859BC7_var) != c_playerTypeUser))) {
                DialogControlSetVisible(libCOMI_gv_randomOption[libCOMI_gv_randomPlayersCount].lv_ready, libCOMI_gv_all, true);
            }
            else {
                DialogControlSetVisible(libCOMI_gv_randomOption[libCOMI_gv_randomPlayersCount].lv_ready, libCOMI_gv_all, false);
            }
        }

    }
    auto029FC9E9_var = (libCOMI_gv_randomPlayersCount + 1);
    for ( ; auto029FC9E9_var <= auto029FC9E9_ae; auto029FC9E9_var += 1 ) {
        DialogControlSetVisible(libCOMI_gv_randomOption[auto029FC9E9_var].lv_selection, libCOMI_gv_all, false);
        DialogControlSetVisible(libCOMI_gv_randomOption[auto029FC9E9_var].lv_button, libCOMI_gv_all, false);
    }
    if ((libCOMI_gv_randomPlayersCount >= libCOMI_gv_maxAlliesPlayersOnMap)) {
        DialogControlSetVisible(libCOMI_gv_playRandomButton, PlayerGroupAll(), false);
    }
    else {
        auto6E88B9B5_g = lv_playingPlayers;
        auto6E88B9B5_var = -1;
        while (true) {
            auto6E88B9B5_var = PlayerGroupNextPlayer(auto6E88B9B5_g, auto6E88B9B5_var);
            if (auto6E88B9B5_var < 0) { break; }
            if ((libCOMI_gv_cCX_PlayerCommander[auto6E88B9B5_var] == null) && (libCOMI_gv_chosenTeam[auto6E88B9B5_var] == 1)) {
                DialogControlSetVisible(libCOMI_gv_playRandomButton, PlayerGroupSingle(auto6E88B9B5_var), false);
            }
            else {
                DialogControlSetVisible(libCOMI_gv_playRandomButton, PlayerGroupSingle(auto6E88B9B5_var), true);
            }
        }
    }
    libCOMI_gv_amonPlayersCount = 0;
    auto2E96F5A2_g = lv_playingPlayers;
    auto2E96F5A2_var = -1;
    while (true) {
        auto2E96F5A2_var = PlayerGroupNextPlayer(auto2E96F5A2_g, auto2E96F5A2_var);
        if (auto2E96F5A2_var < 0) { break; }
        if ((libCOMI_gv_chosenTeam[auto2E96F5A2_var] == 2)) {
            libCOMI_gv_amonPlayersCount += 1;
            libCOMI_gv_amonPlayers[libCOMI_gv_amonPlayersCount] = auto2E96F5A2_var;
            libNtve_gf_SetDialogItemToggled(libCOMI_gv_amonOption[libCOMI_gv_amonPlayersCount].lv_button, true, libCOMI_gv_all);
            libNtve_gf_SetDialogItemColor(libCOMI_gv_amonOption[libCOMI_gv_amonPlayersCount].lv_selection, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto2E96F5A2_var, false)), libCOMI_gv_all);
            libNtve_gf_SetDialogItemTooltip(libCOMI_gv_amonOption[libCOMI_gv_amonPlayersCount].lv_button, lv_availableTooltip, lv_chosenPlayer);
            libNtve_gf_SetDialogItemTooltip(libCOMI_gv_amonOption[libCOMI_gv_amonPlayersCount].lv_button, lv_unavailableTooltip, lv_otherPlayers);
            DialogControlSetVisible(libCOMI_gv_amonOption[libCOMI_gv_amonPlayersCount].lv_selection, libCOMI_gv_all, true);
            DialogControlSetVisible(libCOMI_gv_amonOption[libCOMI_gv_amonPlayersCount].lv_button, libCOMI_gv_all, true);
            if (((libCOMI_gv_cU_CommanderSelect_PlayerReady[auto2E96F5A2_var] == true) || (PlayerType(auto2E96F5A2_var) != c_playerTypeUser))) {
                DialogControlSetVisible(libCOMI_gv_amonOption[libCOMI_gv_amonPlayersCount].lv_ready, libCOMI_gv_all, true);
            }
            else {
                DialogControlSetVisible(libCOMI_gv_amonOption[libCOMI_gv_amonPlayersCount].lv_ready, libCOMI_gv_all, false);
            }
        }
        else {
            lv_alliesPlayersCount += 1;
        }
    }
    autoDF1652A7_var = (libCOMI_gv_amonPlayersCount + 1);
    for ( ; autoDF1652A7_var <= autoDF1652A7_ae; autoDF1652A7_var += 1 ) {
        DialogControlSetVisible(libCOMI_gv_amonOption[autoDF1652A7_var].lv_selection, libCOMI_gv_all, false);
        DialogControlSetVisible(libCOMI_gv_amonOption[autoDF1652A7_var].lv_button, libCOMI_gv_all, false);
    }
    if ((libCOMI_gv_amonPlayersCount >= libCOMI_gv_maxAmonPlayersOnMap)) {
        DialogControlSetVisible(libCOMI_gv_playAmonButton, PlayerGroupAll(), false);
    }
    else {
        auto44E50460_g = lv_playingPlayers;
        auto44E50460_var = -1;
        while (true) {
            auto44E50460_var = PlayerGroupNextPlayer(auto44E50460_g, auto44E50460_var);
            if (auto44E50460_var < 0) { break; }
            if ((libCOMI_gv_chosenTeam[auto44E50460_var] == 2)) {
                DialogControlSetVisible(libCOMI_gv_playAmonButton, PlayerGroupSingle(auto44E50460_var), false);
            }
            else {
                DialogControlSetVisible(libCOMI_gv_playAmonButton, PlayerGroupSingle(auto44E50460_var), true);
            }
        }
    }
    if (((libCOMI_gv_amonPlayersCount > libCOMI_gv_maxAmonPlayersOnMap) || (lv_alliesPlayersCount > libCOMI_gv_maxAlliesPlayersOnMap))) {
        DialogControlSetVisible(libCOMI_gv_cU_CommanderReadyButton, libCOMI_gv_all, false);
    }
    else {
        DialogControlSetVisible(libCOMI_gv_cU_CommanderReadyButton, libCOMI_gv_all, true);
    }
}

void libCOMI_gf_CU_CommanderSelect (int lp_player, string lp_chosenCommander) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CC_PlayerCommanderSet(lp_player, lp_chosenCommander);
    libCOMI_gf_CU_PrestigeSelect(lp_player, DataTableGetInt(true, libCOMI_gf_CC_PrestigeCommanderTableKey(lp_chosenCommander, lp_player)));
    if ((PlayerType(lp_player) == c_playerTypeUser)) {
        libCOMI_gf_CU_CommanderPlayerReadySet(lp_player, false);
    }
    else {
        libCOMI_gf_CU_CommanderPlayerReadySet(lp_player, true);
    }
    if ((UserDataGetInt("Commanders", lp_chosenCommander, "locked", 1) == 1)) {
        DialogControlSetEnabled(libCOMI_gv_cU_CommanderReadyButton, PlayerGroupSingle(lp_player), false);
    }
    else {
        DialogControlSetEnabled(libCOMI_gv_cU_CommanderReadyButton, PlayerGroupSingle(lp_player), true);
    }
    if ((lp_chosenCommander != null)) {
        libCOMI_gf_CU_MasteryInitFromData(lp_player);
        libCOMI_gf_CU_MasteryUpdatePoints(lp_player);
        libCOMI_gf_CU_MasteryUpdate(lp_player);
    }

    libCOMI_gf_UpdatePlayerCommander(lp_player);
    Wait(0.0, c_timeGame);
    if ((lp_chosenCommander != libCOMI_gv_cutsceneLastActiveCommander[lp_player])) {
        CutsceneSetFilter(libCOMI_gv_aF_CS_CommanderCutscenes[lp_player], (lp_chosenCommander));
        libCOMI_gv_cutsceneLastActiveCommander[lp_player] = libCOMI_gf_ActiveCommanderForPlayer(lp_player);
        CutsceneGoToBookmark(libCOMI_gv_aF_CS_CommanderCutscenes[lp_player], "CharacterBirthStart");
        if ((lp_chosenCommander == "Horner")) {
            DialogSetVisible(libCOMI_gv_aF_CS_CommanderMiraDialog, PlayerGroupSingle(lp_player), true);
            CutscenePause(libCOMI_gv_aF_CS_CommanderCutscenes[lp_player]);
        }
        else {
            DialogSetVisible(libCOMI_gv_aF_CS_CommanderMiraDialog, PlayerGroupSingle(lp_player), false);
            CutscenePlay(libCOMI_gv_aF_CS_CommanderCutscenes[lp_player]);
        }
    }

}

void libCOMI_gf_UpdatePlayerCommander (int lp_player) {
    // Variable Declarations
    playergroup lv_playerSelf;
    playergroup lv_playerAlly;
    int lv_tierIndex;
    string lv_indexPerk;
    text lv_PerkName;
    text lv_PerkDescription;
    text lv_PerkTooltip;
    string lv_perkLevel;
    string lv_playerCommander;
    text lv_playerPrestigeText;
    text lv_playerAllyPrestigeText;
    int lv_upgradesCuunt;
    string lv_perkIcon;
    string lv_perkButton;

    // Automatic Variable Declarations
    const int auto2D6C99DD_ae = libCOMI_gv_mAX_PLAYERLEVEL;
    const int auto2D6C99DD_ai = 1;
    int auto286B5DD7_ae;
    int auto286B5DD7_var;

    // Variable Initialization
    lv_playerSelf = PlayerGroupEmpty();
    lv_playerAlly = PlayerGroupEmpty();

    // Implementation
    if ((libCOMI_gv_cU_CommanderDialog == c_invalidDialogId)) {
        return ;
    }

    lv_playerSelf = PlayerGroupSingle(lp_player);
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderLevelLabelSelf, IntToText(libCOMI_gf_CC_CommanderLevel(lp_player, libCOMI_gf_ActiveCommanderForPlayer(lp_player))), lv_playerSelf);
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderMasteryLabelSelf, IntToText(libCOMI_gv_cU_MasteryLevelCurrent[lp_player]), lv_playerSelf);
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderSelectedNameSelf, libCOMI_gf_CC_CommanderName(libCOMI_gf_ActiveCommanderForPlayer(lp_player)), lv_playerSelf);
    libCOMI_gf_CU_CommanderUpdatePrestigeLabels(lp_player);
    lv_upgradesCuunt = 0;
    lv_playerCommander = libCOMI_gf_ActiveCommanderForPlayer(lp_player);
    lv_tierIndex = 1;
    for ( ; ( (auto2D6C99DD_ai >= 0 && lv_tierIndex <= auto2D6C99DD_ae) || (auto2D6C99DD_ai < 0 && lv_tierIndex >= auto2D6C99DD_ae) ) ; lv_tierIndex += auto2D6C99DD_ai ) {
        DialogControlSetVisible(libCOMI_gv_cU_CommanderUpgradesButtons[lv_tierIndex].lv_button, lv_playerSelf, false);
    }
    auto286B5DD7_ae = UserDataFieldValueCount("Commanders", "PerkButton");
    auto286B5DD7_var = 1;
    for ( ; auto286B5DD7_var <= auto286B5DD7_ae; auto286B5DD7_var += 1 ) {
        lv_perkButton = UserDataGetGameLink("Commanders", lv_playerCommander, "PerkButton", auto286B5DD7_var);
        if ((lv_perkButton == null)) {
            continue;
        }

        lv_perkIcon = (CatalogFieldValueGet(c_gameCatalogButton, lv_perkButton, "Icon", c_playerAny));
        if ((lv_perkIcon == null)) {
            lv_perkIcon = "Assets\\Textures\\btn-missing-kaeo.dds";
        }

        lv_PerkName = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_perkButton, "Name", c_playerAny));
        lv_PerkDescription = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_perkButton, "Tooltip", c_playerAny));
        TextExpressionSetToken("Param/Expression/lib_COMI_6475462F", "NAME", lv_PerkName);
        TextExpressionSetToken("Param/Expression/lib_COMI_6475462F", "DESCRIPTION", lv_PerkDescription);
        lv_PerkTooltip = TextExpressionAssemble("Param/Expression/lib_COMI_6475462F");
        libNtve_gf_SetDialogItemImage(libCOMI_gv_cU_CommanderUpgradesButtons[auto286B5DD7_var].lv_icon, lv_perkIcon, lv_playerSelf);
        libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderUpgradesButtons[auto286B5DD7_var].lv_title, lv_PerkName, PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderUpgradesButtons[auto286B5DD7_var].lv_description, lv_PerkDescription, PlayerGroupAll());
        DialogControlSetVisible(libCOMI_gv_cU_CommanderUpgradesButtons[auto286B5DD7_var].lv_button, lv_playerSelf, true);
        if ((auto286B5DD7_var <= libCOMI_gf_CC_CommanderLevel(lp_player, libCOMI_gf_ActiveCommanderForPlayer(lp_player)))) {
            libNtve_gf_SetDialogItemToggled(libCOMI_gv_cU_CommanderUpgradesButtons[auto286B5DD7_var].lv_button, true, lv_playerSelf);
        }
        else {
            libNtve_gf_SetDialogItemToggled(libCOMI_gv_cU_CommanderUpgradesButtons[auto286B5DD7_var].lv_button, false, lv_playerSelf);
        }
    }
    libCOMI_gf_CU_PrestigeUpdate2(lp_player);
    libCOMI_gf_CU_PrestigeUpdate3(lp_player);
    if (true) {
        libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderMutatorButton, StringExternal("Param/Value/lib_COMI_2334AC7B"), lv_playerSelf);
    }

    libCOMI_gf_CU_PrestigeUpdate(lp_player);
}

void libCOMI_gf_PreparingMapProgress (text lp_text) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderReadyButton, lp_text, PlayerGroupAll());
    Wait(0.0, c_timeGame);
}

void libCOMI_gf_CU_CommanderClosed (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libCOMI_gv_cUC_CommChoiceEventClosed);
}

void libCOMI_gf_CU_CommanderPlayerReadySet (int lp_player, bool lp_ready) {
    // Automatic Variable Declarations
    playergroup autoF6738DE3_g;
    int autoF6738DE3_var;

    // Implementation
    if ((libCOMI_gv_cU_CommanderSelect_PlayerReady[lp_player] == lp_ready)) {
        return ;
    }

    libCOMI_gv_cU_CommanderSelect_PlayerReady[lp_player] = lp_ready;
    libCOMI_gf_UpdateCommandersList();
    if ((libCOMI_gv_cU_CommanderSelect_PlayerReady[lp_player] == true)) {
        DialogControlSetVisible(libCOMI_gv_cU_CommanderReadyCheckMark, PlayerGroupSingle(lp_player), true);
        autoF6738DE3_g = libCOMI_gf_GetHumanPlayers();
        autoF6738DE3_var = -1;
        while (true) {
            autoF6738DE3_var = PlayerGroupNextPlayer(autoF6738DE3_g, autoF6738DE3_var);
            if (autoF6738DE3_var < 0) { break; }
            if ((PlayerType(autoF6738DE3_var) == c_playerTypeUser) && (PlayerStatus(autoF6738DE3_var) == c_playerStatusActive) && (libCOMI_gv_cU_CommanderSelect_PlayerReady[autoF6738DE3_var] == false)) {
                return ;
            }

        }
        libCOMI_gf_VU_Ready();
    }
    else {
        DialogControlSetVisible(libCOMI_gv_cU_CommanderReadyCheckMark, PlayerGroupSingle(lp_player), false);
    }
}

void libCOMI_gf_VU_Ready () {
    // Variable Declarations
    int lv_slotIndex;
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto7E99CF15_g;
    playergroup autoCDFF0134_g;

    // Variable Initialization

    // Implementation
    TriggerEnable(libCOMI_gt_AF_CS_NewsControlButtonClicked, false);
    TriggerDebugOutputEnable(true);
    TriggerEnable(libCOMI_gt_UT_CommanderClicked, false);
    TriggerEnable(libCOMI_gt_ReadyButtonClicked, false);
    TriggerEnable(libCOMI_gt_CommanderButtonClicked, false);
    TriggerEnable(libCOMI_gt_CU_CommandeAllyLeft, false);
    TriggerEnable(libCOMI_gt_CU_CommanderMasteryClicked, false);
    TriggerEnable(libCOMI_gt_CU_CommanderLevelDownClicked, false);
    TriggerEnable(libCOMI_gt_CU_CommanderLevelUpClicked, false);
    TriggerEnable(libCOMI_gt_CU_CommanderMasteryCheckboxToggle, false);
    TriggerEnable(libCOMI_gt_CU_CommanderMutatorChallengeSelected, false);
    TriggerEnable(libCOMI_gt_CU_PrestigeButtonClicked, false);
    libCOMI_gf_PreparingMapProgress(StringExternal("Param/Value/lib_COMI_15F390A4"));
    auto7E99CF15_g = libCOMI_gf_GetPlayingPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto7E99CF15_g, lv_player);
        if (lv_player < 0) { break; }
        if ((libCOMI_gv_chosenTeam[lv_player] == 2)) {
            PlayerGroupAdd(libCOMI_gv_vU_EnemyPlayers, lv_player);
            PlayerGroupAdd(libCOMI_gv_vU_Enemies, lv_player);
        }
        else {
            if ((libCOMI_gv_cCX_PlayerCommander[lv_player] == null)) {
                libCOMI_gv_cCX_PlayerCommander[lv_player] = libCOMI_gf_RandomCommander();
                libCOMI_gv_cCX_PlayerPrestigeIndex[lv_player] = DataTableGetInt(true, libCOMI_gf_CC_PrestigeCommanderTableKey(libCOMI_gv_cCX_PlayerCommander[lv_player], lv_player));
                libCOMI_gf_CU_MasteryInitFromData(lv_player);
                libCOMI_gf_CU_MasteryUpdatePoints(lv_player);
                libCOMI_gf_CU_MasteryUpdate(lv_player);
            }

            PlayerGroupAdd(libCOMI_gv_vU_Allies, lv_player);
            libCOMI_gf_AddAlliedCommanderPlayer(lv_player);
            libCOMI_gf_CC_PlayerMasteryEnabledSet(lv_player, libNtve_gf_DialogItemIsChecked(libCOMI_gv_cU_CommanderMasteryCheckbox, lv_player));
        }
    }
    libCOMI_gf_CC_SaveAllTransitionData();
    TriggerSendEvent(libCOMI_gv_cUC_CommChoiceEventClosed);
    Wait(0.0, c_timeGame);
    TriggerExecute(libCOMI_gt_CM_CampaignMissionInitialize, true, true);
    Wait(0.0, c_timeGame);
    TriggerExecute(libCOMI_gt_CM_CampaignMissionInitialize2, true, false);
    Wait(0.0, c_timeGame);
    CutsceneStop(libCOMI_gv_aF_CS_CommanderCutscenes[0]);
    CutsceneStop(libCOMI_gv_aF_CS_CommanderCutscenes[1]);
    CutsceneStop(libCOMI_gv_aF_CS_CommanderCutscenes[2]);
    CutsceneClearGlobalFilters();
    DialogSetVisible(libCOMI_gv_aF_CS_CutsceneDialog[1], PlayerGroupAll(), false);
    DialogSetVisible(libCOMI_gv_aF_CS_CommanderMiraDialog, PlayerGroupAll(), false);
    DialogSetVisible(libCOMI_gv_cU_CommanderDialog, libCOMI_gv_all, false);
    autoCDFF0134_g = libCOMI_gv_all;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoCDFF0134_g, lv_player);
        if (lv_player < 0) { break; }
        libCOMI_gf_ShowHideWorldCover(false, 0.0, lv_player);
    }
    DialogSetVisible(libCOMI_gv_aF_CS_CutsceneDialog[0], PlayerGroupAll(), false);
}

void libCOMI_gf_UT_ChangeAllyPrestige () {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerStatus(2) != c_playerStatusActive)) {
        if (libCOMI_gv_uT_PrestigeIndex >= 3) {
            libCOMI_gv_uT_PrestigeIndex = 0;
        }
        else {
            libCOMI_gv_uT_PrestigeIndex = libCOMI_gv_uT_PrestigeIndex + 1;
        }
        libCOMI_gv_cCX_PlayerPrestigeIndex[2] = libCOMI_gv_uT_PrestigeIndex;
        libCOMI_gf_CU_CommanderUpdatePrestigeLabels(1);
        libCOMI_gf_CU_CommanderUpdatePrestigeLabels(2);
        TriggerEnable(libCOMI_gt_UT_CommanderClicked, true);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_3BB57D52"));
    }
}

string libCOMI_gf_CC_CommanderPrestigeIndexFace3 (string lp_commander, int lp_index) {
    // Variable Declarations
    int lv_prestigeindex;
    string lv_prestigefacestring;
    string lv_prestigefacestring4;
    string lv_prestigefacestring2;
    int lv_image;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_prestigefacestring = "";
    lv_prestigefacestring2 = "";

    // Implementation
    if ((lp_commander != null) && ((lp_index >= 1) && (lp_index <= libCOMI_gv_cUC_UNITSMAXCOUNT)) && (CatalogEntryIsValid(c_gameCatalogCommander, lp_commander) == true) && (CatalogFieldValueCount(c_gameCatalogCommander, lp_commander, "UnitArray", c_playerAny) >= lp_index)) {
        lv_prestigefacestring = CatalogFieldValueGet(c_gameCatalogCommander, lp_commander, "UnitArray[" + IntToString((lp_index - 1)) + "].Unit", c_playerAny);
        lv_prestigefacestring4 = (lv_prestigefacestring);
        if ((CatalogEntryIsValid(c_gameCatalogActor, lv_prestigefacestring4) == true)) {
            return (CatalogFieldValueGet(c_gameCatalogActor, lv_prestigefacestring4, "UnitIcon", c_playerAny));
        }

    }

    return null;
}

text libCOMI_gf_CC_CommanderPrestigeIndexFace2 (string lp_commander, int lp_index) {
    // Variable Declarations
    int lv_prestigeindex;
    string lv_prestigefacestring5;
    string lv_prestigefacestring2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_prestigefacestring2 = "";

    // Implementation
    if ((lp_commander != null) && ((lp_index >= 1) && (lp_index <= libCOMI_gv_cUC_UNITSMAXCOUNT)) && (CatalogEntryIsValid(c_gameCatalogCommander, lp_commander) == true) && (CatalogFieldValueCount(c_gameCatalogCommander, lp_commander, "UnitArray", c_playerAny) >= lp_index)) {
        lv_prestigefacestring5 = (CatalogFieldValueGet(c_gameCatalogCommander, lp_commander, "UnitArray[" + IntToString((lp_index - 1)) + "].Unit", c_playerAny));
        if ((CatalogEntryIsValid(c_gameCatalogUnit, lv_prestigefacestring5) == true)) {
            TextExpressionSetToken("Param/Expression/lib_COMI_AECF6E2E", "NAME", StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_prestigefacestring5, "Name", c_playerAny)));
            TextExpressionSetToken("Param/Expression/lib_COMI_AECF6E2E", "DESCRIPTION", StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_prestigefacestring5, "Description", c_playerAny)));
            return TextExpressionAssemble("Param/Expression/lib_COMI_AECF6E2E");
        }

    }

    return null;
}

void libCOMI_gf_CU_PrestigeUpdate2 (int lp_player) {
    // Variable Declarations
    text lv_tooltip;
    int lv_itemIndex;
    string lv_face;
    string lv_commander;
    int lv_prestigeindex;
    string lv_prestigefacestring;
    string lv_actor;
    playergroup lv_playerSelf;

    // Automatic Variable Declarations
    const int auto8F8DEAF5_ae = libCOMI_gv_cUC_UNITSMAXCOUNT;
    const int auto8F8DEAF5_ai = 1;

    // Variable Initialization
    lv_prestigefacestring = "";
    lv_playerSelf = PlayerGroupSingle(lp_player);

    // Implementation
    lv_commander = libCOMI_gf_GetPlayerCommanderGameLink(lp_player);
    lv_itemIndex = 1;
    for ( ; ( (auto8F8DEAF5_ai >= 0 && lv_itemIndex <= auto8F8DEAF5_ae) || (auto8F8DEAF5_ai < 0 && lv_itemIndex >= auto8F8DEAF5_ae) ) ; lv_itemIndex += auto8F8DEAF5_ai ) {
        lv_face = libCOMI_gf_CC_CommanderPrestigeIndexFace4(lv_commander, lv_itemIndex);
        if ((lv_face == null)) {
            DialogControlSetVisible(libCOMI_gv_cU_CommanderUnitsButtons[lv_itemIndex].lv_button, lv_playerSelf, false);
        }
        else {
            DialogControlSetVisible(libCOMI_gv_cU_CommanderUnitsButtons[lv_itemIndex].lv_button, lv_playerSelf, true);
            lv_prestigefacestring = CatalogFieldValueGet(c_gameCatalogCommander, lv_commander, "UnitArray[" + IntToString((lv_itemIndex - 1)) + "].Unit", c_playerAny);
            lv_actor = (lv_prestigefacestring);
            if ((CatalogEntryIsValid(c_gameCatalogActor, lv_actor) == true)) {
                libNtve_gf_SetDialogItemImage(libCOMI_gv_cU_CommanderUnitsButtons[lv_itemIndex].lv_icon, (CatalogFieldValueGet(c_gameCatalogActor, lv_actor, "UnitIcon", c_playerAny)), lv_playerSelf);
            }
            else {
                libNtve_gf_SetDialogItemImage(libCOMI_gv_cU_CommanderUnitsButtons[lv_itemIndex].lv_icon, "Assets\\Textures\\umojanlabzergdisplay_05.dds", lv_playerSelf);
            }
            libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderUnitsButtons[lv_itemIndex].lv_title, StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_face, "Name", c_playerAny)), lv_playerSelf);
            libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderUnitsButtons[lv_itemIndex].lv_description, StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_face, "Description", c_playerAny)), lv_playerSelf);
        }
    }
}

void libCOMI_gf_CU_PrestigeUpdate3 (int lp_player) {
    // Variable Declarations
    text lv_tooltip;
    int lv_itemIndex;
    string lv_face;
    string lv_commander;
    playergroup lv_playerSelf;

    // Automatic Variable Declarations
    const int autoBA8A0672_ae = libCOMI_gv_cUC_ABILITIESMAXCOUNT;
    const int autoBA8A0672_ai = 1;

    // Variable Initialization
    lv_playerSelf = PlayerGroupSingle(lp_player);

    // Implementation
    lv_commander = libCOMI_gf_GetPlayerCommanderGameLink(lp_player);
    lv_itemIndex = 1;
    for ( ; ( (autoBA8A0672_ai >= 0 && lv_itemIndex <= autoBA8A0672_ae) || (autoBA8A0672_ai < 0 && lv_itemIndex >= autoBA8A0672_ae) ) ; lv_itemIndex += autoBA8A0672_ai ) {
        lv_face = libCOMI_gf_CC_CommanderPrestigeIndexFace5(lv_commander, lv_itemIndex);
        if ((lv_face == null)) {
            DialogControlSetVisible(libCOMI_gv_cU_CommanderAbilitiesButtons[lv_itemIndex].lv_button, lv_playerSelf, false);
        }
        else {
            DialogControlSetVisible(libCOMI_gv_cU_CommanderAbilitiesButtons[lv_itemIndex].lv_button, lv_playerSelf, true);
            libNtve_gf_SetDialogItemImage(libCOMI_gv_cU_CommanderAbilitiesButtons[lv_itemIndex].lv_icon, (CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Icon", c_playerAny)), lv_playerSelf);
            libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderAbilitiesButtons[lv_itemIndex].lv_title, StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Name", c_playerAny)), lv_playerSelf);
            libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderAbilitiesButtons[lv_itemIndex].lv_description, StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Tooltip", c_playerAny)), lv_playerSelf);
        }
    }
}

string libCOMI_gf_RandomCommander () {
    // Variable Declarations
    string lv_commander;

    // Automatic Variable Declarations
    playergroup autoC92B8547_g;
    int autoC92B8547_var;

    // Variable Initialization
    lv_commander = UserDataInstance("Commanders", RandomInt(1, UserDataInstanceCount("Commanders")));

    // Implementation
    autoC92B8547_g = libCOMI_gv_vU_SlotsPlayers;
    autoC92B8547_var = -1;
    while (true) {
        autoC92B8547_var = PlayerGroupNextPlayer(autoC92B8547_g, autoC92B8547_var);
        if (autoC92B8547_var < 0) { break; }
        if (((lv_commander == libCOMI_gv_cCX_PlayerCommander[autoC92B8547_var]) || (UserDataGetInt("Commanders", lv_commander, "Standard", 1) == 0))) {
            return libCOMI_gf_RandomCommander();
        }

    }
    return lv_commander;
}

void libCOMI_gf_CU_MasteryDisplay (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CU_MasteryCreate();
    libCOMI_gf_CU_MasteryInitFromData(lp_player);
    libCOMI_gf_CU_MasteryUpdatePoints(lp_player);
    libCOMI_gf_CU_MasteryUpdate(lp_player);
    libCOMI_gv_cU_MasteryRefCount += 1;
    DialogSetVisible(libCOMI_gv_cU_MasteryDialog, PlayerGroupSingle(lp_player), true);
    TriggerEnable(libCOMI_gt_CU_MasteryLevelUpPressed, true);
    TriggerEnable(libCOMI_gt_CU_MasteryLevelDownPressed, true);
    TriggerEnable(libCOMI_gt_CU_MasteryItemPlusPressed, true);
    TriggerEnable(libCOMI_gt_CU_MasteryItemMinusPressed, true);
    TriggerEnable(libCOMI_gt_CU_MasteryResetPressed, true);
    TriggerEnable(libCOMI_gt_CU_MasteryAcceptPressed, true);
    TriggerEnable(libCOMI_gt_CU_MasteryShiftTrackUp, true);
    TriggerEnable(libCOMI_gt_CU_MasteryShiftTrackDown, true);
}

void libCOMI_gf_CU_MasteryCreate () {
    // Variable Declarations
    bool lv_inline;
    int lv_itemIndex;
    int lv_categoryIndex;
    int lv_listPanel;
    playergroup lv_all;

    // Automatic Variable Declarations
    const int autoAF5A14DB_ae = libCOMI_gv_cCC_MASTERIES_PER_COMMANDER;
    const int autoAF5A14DB_ai = 1;
    const int autoEBF8261C_ae = libCOMI_gv_cCC_MASTERY_CATEGORIES;
    const int autoEBF8261C_ai = 1;
    const int auto0A31F750_ae = libCOMI_gv_cCC_MASTERIES_PER_COMMANDER;
    const int auto0A31F750_ai = 1;
    const int auto6FE270B8_ae = libCOMI_gv_cCC_MASTERY_CATEGORIES;
    const int auto6FE270B8_ai = 1;

    // Variable Initialization
    lv_inline = true;
    lv_listPanel = c_invalidDialogControlId;
    lv_all = PlayerGroupAll();

    // Implementation
    if ((lv_inline == true)) {
        lv_listPanel = libARRA_gf_HookUpDialogItemandshowforplayers("MasteryList", c_triggerControlTypePanel, libCOMI_gv_vU_DetailsResearchContainer, lv_all);
        lv_itemIndex = 1;
        for ( ; ( (autoAF5A14DB_ai >= 0 && lv_itemIndex <= autoAF5A14DB_ae) || (autoAF5A14DB_ai < 0 && lv_itemIndex >= autoAF5A14DB_ae) ) ; lv_itemIndex += autoAF5A14DB_ai ) {
            libCOMI_gv_cU_MasteryItemPanels[lv_itemIndex] = libARRA_gf_HookUpDialogItemandshowforplayers("Item" + IntToString(lv_itemIndex), c_triggerControlTypePanel, lv_listPanel, lv_all);
            libCOMI_gv_cU_MasteryPlusButtons[lv_itemIndex] = libARRA_gf_HookUpDialogItemandshowforplayers("PlusButton", c_triggerControlTypeButton, libCOMI_gv_cU_MasteryItemPanels[lv_itemIndex], lv_all);
            libCOMI_gv_cU_MasteryMinusButtons[lv_itemIndex] = libARRA_gf_HookUpDialogItemandshowforplayers("MinusButton", c_triggerControlTypeButton, libCOMI_gv_cU_MasteryItemPanels[lv_itemIndex], lv_all);
            libCOMI_gv_cU_MasteryNameLabels[lv_itemIndex] = libARRA_gf_HookUpDialogItemandshowforplayers("NameLabel", c_triggerControlTypeLabel, libCOMI_gv_cU_MasteryItemPanels[lv_itemIndex], lv_all);
            libCOMI_gv_cU_MasteryValueLabels[lv_itemIndex] = libARRA_gf_HookUpDialogItemandshowforplayers("ValueLabel", c_triggerControlTypeLabel, libCOMI_gv_cU_MasteryItemPanels[lv_itemIndex], lv_all);
            libCOMI_gv_cU_MasteryPointLabels[lv_itemIndex] = libARRA_gf_HookUpDialogItemandshowforplayers("PointsLabel", c_triggerControlTypeLabel, libCOMI_gv_cU_MasteryItemPanels[lv_itemIndex], lv_all);
        }
        libCOMI_gv_cU_MasteryLevelUpButton = libARRA_gf_HookUpDialogItemandshowforplayers("MasteryLevelPlusButton", c_triggerControlTypeButton, libCOMI_gv_vU_DetailsResearchContainer, lv_all);
        libCOMI_gv_cU_MasteryLevelLabel = libARRA_gf_HookUpDialogItemandshowforplayers("MasteryLevelLabel", c_triggerControlTypeLabel, libCOMI_gv_vU_DetailsResearchContainer, lv_all);
        lv_categoryIndex = 1;
        for ( ; ( (autoEBF8261C_ai >= 0 && lv_categoryIndex <= autoEBF8261C_ae) || (autoEBF8261C_ai < 0 && lv_categoryIndex >= autoEBF8261C_ae) ) ; lv_categoryIndex += autoEBF8261C_ai ) {
            libCOMI_gv_cU_MasteryCategoryPoints[lv_categoryIndex] = libARRA_gf_HookUpDialogItemandshowforplayers("Category" + IntToString(lv_categoryIndex)+ "Points", c_triggerControlTypeLabel, lv_listPanel, lv_all);
        }
        libCOMI_gv_cU_MasteryLevelDownButton = libARRA_gf_HookUpDialogItemandshowforplayers("MasteryLevelMinusButton", c_triggerControlTypeButton, libCOMI_gv_vU_DetailsResearchContainer, lv_all);
    }
    else {
        DialogCreate(1000, 800, c_anchorBottomLeft, 0, 0, true);
        DialogSetFullscreen(DialogLastCreated(), true);
        DialogSetImageVisible(DialogLastCreated(), false);
        libCOMI_gv_cU_MasteryDialog = DialogLastCreated();
        DialogControlCreateFromTemplate(libCOMI_gv_cU_MasteryDialog, c_triggerControlTypePanel, "Coop_CommanderMasterySelection/MasteryLevelTemplate");
        libCOMI_gv_cU_MasteryPanel = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_MasteryPanel, c_triggerControlTypePanel, "MasteryList");
        lv_listPanel = DialogControlLastCreated();
        lv_itemIndex = 1;
        for ( ; ( (auto0A31F750_ai >= 0 && lv_itemIndex <= auto0A31F750_ae) || (auto0A31F750_ai < 0 && lv_itemIndex >= auto0A31F750_ae) ) ; lv_itemIndex += auto0A31F750_ai ) {
            DialogControlHookup(lv_listPanel, c_triggerControlTypePanel, "Item" + IntToString(lv_itemIndex));
            libCOMI_gv_cU_MasteryItemPanels[lv_itemIndex] = DialogControlLastCreated();
            DialogControlHookup(libCOMI_gv_cU_MasteryItemPanels[lv_itemIndex], c_triggerControlTypeButton, "PlusButton");
            libCOMI_gv_cU_MasteryPlusButtons[lv_itemIndex] = DialogControlLastCreated();
            DialogControlHookup(libCOMI_gv_cU_MasteryItemPanels[lv_itemIndex], c_triggerControlTypeButton, "MinusButton");
            libCOMI_gv_cU_MasteryMinusButtons[lv_itemIndex] = DialogControlLastCreated();
            DialogControlHookup(libCOMI_gv_cU_MasteryItemPanels[lv_itemIndex], c_triggerControlTypeLabel, "NameLabel");
            libCOMI_gv_cU_MasteryNameLabels[lv_itemIndex] = DialogControlLastCreated();
            DialogControlHookup(libCOMI_gv_cU_MasteryItemPanels[lv_itemIndex], c_triggerControlTypeLabel, "ValueLabel");
            libCOMI_gv_cU_MasteryValueLabels[lv_itemIndex] = DialogControlLastCreated();
            DialogControlHookup(libCOMI_gv_cU_MasteryItemPanels[lv_itemIndex], c_triggerControlTypeLabel, "PointsLabel");
            libCOMI_gv_cU_MasteryPointLabels[lv_itemIndex] = DialogControlLastCreated();
        }
        DialogControlHookup(libCOMI_gv_cU_MasteryPanel, c_triggerControlTypeButton, "MasteryLevelPlusButton");
        libCOMI_gv_cU_MasteryLevelUpButton = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_MasteryPanel, c_triggerControlTypeButton, "MasteryLevelMinusButton");
        libCOMI_gv_cU_MasteryLevelDownButton = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_MasteryPanel, c_triggerControlTypeLabel, "MasteryLevelLabel");
        libCOMI_gv_cU_MasteryLevelLabel = DialogControlLastCreated();
        lv_categoryIndex = 1;
        for ( ; ( (auto6FE270B8_ai >= 0 && lv_categoryIndex <= auto6FE270B8_ae) || (auto6FE270B8_ai < 0 && lv_categoryIndex >= auto6FE270B8_ae) ) ; lv_categoryIndex += auto6FE270B8_ai ) {
            DialogControlHookup(lv_listPanel, c_triggerControlTypeLabel, "Category" + IntToString(lv_categoryIndex)+ "Points");
            libCOMI_gv_cU_MasteryCategoryPoints[lv_categoryIndex] = DialogControlLastCreated();
        }
        DialogControlHookup(libCOMI_gv_cU_MasteryPanel, c_triggerControlTypeButton, "AcceptButton");
        libCOMI_gv_cU_MasteryAcceptButton = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_MasteryPanel, c_triggerControlTypeButton, "ResetButton");
        libCOMI_gv_cU_MasteryResetButton = DialogControlLastCreated();
    }
}

void libCOMI_gf_CU_MasteryUpdateData (int lp_player) {
    // Variable Declarations
    int lv_itemIndex;

    // Automatic Variable Declarations
    const int auto92A45083_ae = libCOMI_gv_cCC_MASTERIES_PER_COMMANDER;
    const int auto92A45083_ai = 1;

    // Variable Initialization

    // Implementation
    libCOMI_gf_CC_PlayerMasteryLevelSet(lp_player, libCOMI_gv_cU_MasteryLevelCurrent[lp_player]);
    lv_itemIndex = 1;
    for ( ; ( (auto92A45083_ai >= 0 && lv_itemIndex <= auto92A45083_ae) || (auto92A45083_ai < 0 && lv_itemIndex >= auto92A45083_ae) ) ; lv_itemIndex += auto92A45083_ai ) {
        libCOMI_gf_CC_PlayerMasteryUpgradeLevelSet(lp_player, libCOMI_gv_cU_MasteryUpgrades[lv_itemIndex][lp_player], libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][lp_player]);
    }
}

void libCOMI_gf_CU_MasteryInitFromData (int lp_player) {
    // Variable Declarations
    string lv_indexMasteryUpgrade;
    int lv_masteryIndex;

    // Automatic Variable Declarations
    int autoFFEB9740_ae;
    const int autoFFEB9740_ai = 1;

    // Variable Initialization

    // Implementation
    libCOMI_gv_cU_MasteryShiftPressed[lp_player] = false;
    libCOMI_gv_cU_MasteryLevelCurrent[lp_player] = libCOMI_gf_CC_PlayerMasteryLevel(lp_player);
    autoFFEB9740_ae = UserDataFieldValueCount("Commanders", "Mastery");
    lv_masteryIndex = 1;
    for ( ; ( (autoFFEB9740_ai >= 0 && lv_masteryIndex <= autoFFEB9740_ae) || (autoFFEB9740_ai < 0 && lv_masteryIndex >= autoFFEB9740_ae) ) ; lv_masteryIndex += autoFFEB9740_ai ) {
        lv_indexMasteryUpgrade = UserDataGetUserInstance("Commanders", libCOMI_gv_cCX_PlayerCommander[lp_player], "Mastery", lv_masteryIndex);
        if ((lv_indexMasteryUpgrade != null)) {
            libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_masteryIndex][lp_player] = libCOMI_gf_CC_PlayerMasteryUpgradeLevel(lp_player, lv_indexMasteryUpgrade);
            libCOMI_gv_cU_MasteryUpgrades[lv_masteryIndex][lp_player] = lv_indexMasteryUpgrade;
            libNtve_gf_SetDialogItemText(libCOMI_gv_cU_MasteryNameLabels[lv_masteryIndex], libCOMI_gf_CC_PlayerMasteryName(lv_indexMasteryUpgrade), PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemTooltip(libCOMI_gv_cU_MasteryNameLabels[lv_masteryIndex], libCOMI_gf_CC_PlayerMasteryTooltip(lv_indexMasteryUpgrade), PlayerGroupSingle(lp_player));
        }

    }
}

void libCOMI_gf_CU_MasteryClose (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoE8A7A29E_g;

    // Variable Initialization

    // Implementation
    DialogSetVisible(libCOMI_gv_cU_MasteryDialog, PlayerGroupSingle(lp_player), false);
    libCOMI_gv_cU_MasteryRefCount -= 1;
    if ((libCOMI_gv_cU_MasteryRefCount == 0)) {
        TriggerEnable(libCOMI_gt_CU_MasteryLevelUpPressed, false);
        TriggerEnable(libCOMI_gt_CU_MasteryLevelDownPressed, false);
        TriggerEnable(libCOMI_gt_CU_MasteryItemPlusPressed, false);
        TriggerEnable(libCOMI_gt_CU_MasteryItemMinusPressed, false);
        TriggerEnable(libCOMI_gt_CU_MasteryResetPressed, false);
        TriggerEnable(libCOMI_gt_CU_MasteryAcceptPressed, false);
        TriggerEnable(libCOMI_gt_CU_MasteryShiftTrackUp, false);
        TriggerEnable(libCOMI_gt_CU_MasteryShiftTrackDown, false);
    }

    autoE8A7A29E_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoE8A7A29E_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOMI_gf_UpdatePlayerCommander(lv_indexPlayer);
    }
}

void libCOMI_gf_CU_MasteryUpdate (int lp_player) {
    // Variable Declarations
    int lv_itemIndex;
    int lv_categoryIndex;
    playergroup lv_updatePlayers;
    string lv_expressionId;

    // Automatic Variable Declarations
    const int autoCB6E46F6_ae = libCOMI_gv_cCC_MASTERIES_PER_COMMANDER;
    const int autoCB6E46F6_ai = 1;
    const int auto04FF26DF_ae = libCOMI_gv_cCC_MASTERY_CATEGORIES;
    const int auto04FF26DF_ai = 1;

    // Variable Initialization
    lv_updatePlayers = PlayerGroupEmpty();
    lv_expressionId = "";

    // Implementation
    lv_updatePlayers = PlayerGroupSingle(lp_player);
    if ((libCOMI_gv_cU_MasteryLevelCurrent[lp_player] <= 0)) {
        DialogControlSetEnabled(libCOMI_gv_cU_MasteryLevelDownButton, lv_updatePlayers, false);
    }
    else {
        DialogControlSetEnabled(libCOMI_gv_cU_MasteryLevelDownButton, lv_updatePlayers, true);
    }
    if ((libCOMI_gv_cU_MasteryLevelCurrent[lp_player] >= libCOMI_gv_cCC_MASTERY_MAX_LEVEL)) {
        DialogControlSetEnabled(libCOMI_gv_cU_MasteryLevelUpButton, lv_updatePlayers, false);
    }
    else {
        DialogControlSetEnabled(libCOMI_gv_cU_MasteryLevelUpButton, lv_updatePlayers, true);
    }
    TextExpressionSetToken("Param/Expression/lib_COMI_7B1B3B5D", "A", IntToText(libCOMI_gv_cU_MasteryLevelCurrent[lp_player]));
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_MasteryLevelLabel, TextExpressionAssemble("Param/Expression/lib_COMI_7B1B3B5D"), lv_updatePlayers);
    lv_itemIndex = 1;
    for ( ; ( (autoCB6E46F6_ai >= 0 && lv_itemIndex <= autoCB6E46F6_ae) || (autoCB6E46F6_ai < 0 && lv_itemIndex >= autoCB6E46F6_ae) ) ; lv_itemIndex += autoCB6E46F6_ai ) {
        TextExpressionSetToken("Param/Expression/lib_COMI_099E8831", "A", IntToText(libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][lp_player]));
        TextExpressionSetToken("Param/Expression/lib_COMI_099E8831", "B", IntToText(libCOMI_gv_cCC_MASTERY_UPGRADE_MAX_LEVEL));
        libNtve_gf_SetDialogItemText(libCOMI_gv_cU_MasteryPointLabels[lv_itemIndex], TextExpressionAssemble("Param/Expression/lib_COMI_099E8831"), lv_updatePlayers);
        lv_expressionId = ("UserData/MasteryUpgrades/" + (libCOMI_gv_cU_MasteryUpgrades[lv_itemIndex][lp_player]) + "_ValueFormat");
        TextExpressionSetToken(lv_expressionId, "A", FixedToText((libCOMI_gf_CC_PlayerMasteryValueIncrement(libCOMI_gv_cU_MasteryUpgrades[lv_itemIndex][lp_player], 1) * libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][lp_player]), 0));
        TextExpressionSetToken(lv_expressionId, "B", FixedToText((libCOMI_gf_CC_PlayerMasteryValueIncrement(libCOMI_gv_cU_MasteryUpgrades[lv_itemIndex][lp_player], 2) * libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][lp_player]), 0));
        libNtve_gf_SetDialogItemText(libCOMI_gv_cU_MasteryValueLabels[lv_itemIndex], TextExpressionAssemble(lv_expressionId), lv_updatePlayers);
        if (((libCOMI_gv_cU_MasteryCategoryPointsLeft[libCOMI_gf_CC_PlayerMasteryCategory(libCOMI_gv_cU_MasteryUpgrades[lv_itemIndex][lp_player])][lp_player] <= 0) || (libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][lp_player] >= libCOMI_gv_cCC_MASTERY_UPGRADE_MAX_LEVEL))) {
            DialogControlSetEnabled(libCOMI_gv_cU_MasteryPlusButtons[lv_itemIndex], lv_updatePlayers, false);
        }
        else {
            DialogControlSetEnabled(libCOMI_gv_cU_MasteryPlusButtons[lv_itemIndex], lv_updatePlayers, true);
        }
        if ((libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][lp_player] <= 0)) {
            DialogControlSetEnabled(libCOMI_gv_cU_MasteryMinusButtons[lv_itemIndex], lv_updatePlayers, false);
        }
        else {
            DialogControlSetEnabled(libCOMI_gv_cU_MasteryMinusButtons[lv_itemIndex], lv_updatePlayers, true);
        }
    }
    lv_categoryIndex = 1;
    for ( ; ( (auto04FF26DF_ai >= 0 && lv_categoryIndex <= auto04FF26DF_ae) || (auto04FF26DF_ai < 0 && lv_categoryIndex >= auto04FF26DF_ae) ) ; lv_categoryIndex += auto04FF26DF_ai ) {
        libNtve_gf_SetDialogItemText(libCOMI_gv_cU_MasteryCategoryPoints[lv_categoryIndex], IntToText(libCOMI_gv_cU_MasteryCategoryPointsLeft[lv_categoryIndex][lp_player]), lv_updatePlayers);
    }
}

void libCOMI_gf_CU_MasteryUpdatePoints (int lp_player) {
    // Variable Declarations
    int lv_categoryIndex;
    int lv_itemIndex;

    // Automatic Variable Declarations
    const int auto78484FFD_ae = libCOMI_gv_cCC_MASTERY_CATEGORIES;
    const int auto78484FFD_ai = 1;
    const int auto91934D34_ae = libCOMI_gv_cCC_MASTERIES_PER_COMMANDER;
    const int auto91934D34_ai = 1;

    // Variable Initialization

    // Implementation
    lv_categoryIndex = 1;
    for ( ; ( (auto78484FFD_ai >= 0 && lv_categoryIndex <= auto78484FFD_ae) || (auto78484FFD_ai < 0 && lv_categoryIndex >= auto78484FFD_ae) ) ; lv_categoryIndex += auto78484FFD_ai ) {
        libCOMI_gv_cU_MasteryCategoryPointsLeft[lv_categoryIndex][lp_player] = libCOMI_gf_CC_PlayerMasteryCategoryPointsAtLevel(lp_player, lv_categoryIndex, libCOMI_gv_cU_MasteryLevelCurrent[lp_player]);
    }
    lv_itemIndex = 1;
    for ( ; ( (auto91934D34_ai >= 0 && lv_itemIndex <= auto91934D34_ae) || (auto91934D34_ai < 0 && lv_itemIndex >= auto91934D34_ae) ) ; lv_itemIndex += auto91934D34_ai ) {
        libCOMI_gv_cU_MasteryCategoryPointsLeft[libCOMI_gf_CC_PlayerMasteryCategory(libCOMI_gv_cU_MasteryUpgrades[lv_itemIndex][lp_player])][lp_player] -= libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][lp_player];
        if ((libCOMI_gv_cU_MasteryCategoryPointsLeft[libCOMI_gf_CC_PlayerMasteryCategory(libCOMI_gv_cU_MasteryUpgrades[lv_itemIndex][lp_player])][lp_player] < 0)) {
            libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][lp_player] += libCOMI_gv_cU_MasteryCategoryPointsLeft[libCOMI_gf_CC_PlayerMasteryCategory(libCOMI_gv_cU_MasteryUpgrades[lv_itemIndex][lp_player])][lp_player];
            libCOMI_gv_cU_MasteryCategoryPointsLeft[libCOMI_gf_CC_PlayerMasteryCategory(libCOMI_gv_cU_MasteryUpgrades[lv_itemIndex][lp_player])][lp_player] = 0;
        }

    }
}

void libCOMI_gf_CU_CommanderUpdatePrestigeLabels (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderSelectedPrestigeSelf, libCOMI_gf_GetPlayerPrestigeName(lp_player), PlayerGroupSingle(lp_player));
}

text libCOMI_gf_GetPlayerPrestigeName (int lp_player) {
    // Variable Declarations
    string lv_playerCommander;
    int lv_prestigeSelf;
    text lv_playerPrestigeText;
    string lv_face;
    string lv_prestige;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerCommander = libCOMI_gv_cCX_PlayerCommander[lp_player];
    lv_prestigeSelf = libCOMI_gf_CC_PlayerActivePrestigeIndex(lp_player);

    // Implementation
    if ((lv_prestigeSelf == 0)) {
        lv_playerPrestigeText = null;
    }
    else {
        lv_prestige = UserDataGetUserInstance("Commanders", lv_playerCommander, "Prestige", lv_prestigeSelf);
        lv_face = UserDataGetGameLink("Prestiges", lv_prestige, "Icon", 1);
        lv_playerPrestigeText = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Name", lp_player));
    }
    return lv_playerPrestigeText;
}

void libCOMI_gf_CU_PrestigeUpdate (int lp_player) {
    // Variable Declarations
    int lv_prestigeCount;
    int lv_masteryTalentsCount;
    int lv_itemIndex;
    string lv_face;
    string lv_face2;
    playergroup lv_playerSelf;
    string lv_commander;
    string lv_perkButton;
    string lv_prestige;

    // Automatic Variable Declarations
    const int autoFAE6CD1D_ae = libCOMI_gv_cCC_PLAYERPRESTIGEMAXRANK;
    const int autoFAE6CD1D_ai = 1;

    // Variable Initialization
    lv_playerSelf = PlayerGroupSingle(lp_player);

    // Implementation
    lv_commander = UserDataGetGameLink("Commanders", libCOMI_gv_cCX_PlayerCommander[lp_player], "ZZ_CommanderData", 1);
    lv_itemIndex = 1;
    for ( ; ( (autoFAE6CD1D_ai >= 0 && lv_itemIndex <= autoFAE6CD1D_ae) || (autoFAE6CD1D_ai < 0 && lv_itemIndex >= autoFAE6CD1D_ae) ) ; lv_itemIndex += autoFAE6CD1D_ai ) {
        lv_prestige = UserDataGetUserInstance("Commanders", libCOMI_gv_cCX_PlayerCommander[lp_player], "Prestige", lv_itemIndex);
        if ((lv_prestige == null)) {
            DialogControlSetVisible(libCOMI_gv_cU_CommanderPrestigesButtons[lv_itemIndex].lv_button, lv_playerSelf, false);
            continue;
        }

        lv_face = UserDataGetGameLink("Prestiges", lv_prestige, "Icon", 1);
        DialogControlSetVisible(libCOMI_gv_cU_CommanderPrestigesButtons[lv_itemIndex].lv_button, lv_playerSelf, true);
        libNtve_gf_SetDialogItemImage(libCOMI_gv_cU_CommanderPrestigesButtons[lv_itemIndex].lv_icon, (CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Icon", c_playerAny)), lv_playerSelf);
        libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderPrestigesButtons[lv_itemIndex].lv_title, StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Name", lp_player)), lv_playerSelf);
        libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderPrestigesButtons[lv_itemIndex].lv_description, StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Tooltip", lp_player)), lv_playerSelf);
    }
}

void libCOMI_gf_CU_PrestigeSelect (int lp_player, int lp_index) {
    // Variable Declarations
    int lv_boundedIndex;
    int lv_itemIndex;
    string lv_state;
    int lv_playerAlly;
    text lv_playerPrestigeText;
    text lv_playerAllyPrestigeText;

    // Automatic Variable Declarations
    const int auto9A19BC1E_ae = libCOMI_gv_cCC_PLAYERPRESTIGEMAXRANK;
    const int auto9A19BC1E_ai = 1;

    // Variable Initialization
    lv_boundedIndex = libNtve_gf_ArithmeticIntClamp(lp_index, 0, libCOMI_gv_cCC_PLAYERPRESTIGEMAXRANK);
    lv_state = "";
    lv_playerAlly = libCOMI_gf_CC_PlayerAlly(lp_player);

    // Implementation
    lv_itemIndex = 1;
    for ( ; ( (auto9A19BC1E_ai >= 0 && lv_itemIndex <= auto9A19BC1E_ae) || (auto9A19BC1E_ai < 0 && lv_itemIndex >= auto9A19BC1E_ae) ) ; lv_itemIndex += auto9A19BC1E_ai ) {
        if ((lv_itemIndex == lv_boundedIndex)) {
            lv_state = "Toggled";
        }
        else {
            lv_state = "NotToggled";
        }
        DialogControlSetAnimationState(libCOMI_gv_cU_CommanderPrestigesButtons[lv_itemIndex].lv_button, PlayerGroupSingle(lp_player), "ToggledState", lv_state);
    }
    libCOMI_gf_CC_SetPlayerPrestigeIndex(lp_player, lv_boundedIndex);
    libCOMI_gf_CU_CommanderUpdatePrestigeLabels(lp_player);
}

string libCOMI_gf_CC_CommanderPrestigeIndexFace5 (string lp_commander, int lp_index) {
    // Variable Declarations
    string lv_prestigefacestring5;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_commander != null) && ((lp_index >= 1) && (lp_index <= libCOMI_gv_cUC_ABILITIESMAXCOUNT)) && (CatalogEntryIsValid(c_gameCatalogCommander, lp_commander) == true) && (CatalogFieldValueCount(c_gameCatalogCommander, lp_commander, "CommanderAbilArray", c_playerAny) >= lp_index)) {
        lv_prestigefacestring5 = (CatalogFieldValueGet(c_gameCatalogCommander, lp_commander, "CommanderAbilArray[" + IntToString((lp_index - 1)) + "].Button", c_playerAny));
        if ((CatalogEntryIsValid(c_gameCatalogButton, lv_prestigefacestring5) == true)) {
            return lv_prestigefacestring5;
        }

    }

    return null;
}

string libCOMI_gf_CC_CommanderPrestigeIndexFace4 (string lp_commander, int lp_index) {
    // Variable Declarations
    string lv_prestigefacestring5;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_commander != null) && ((lp_index >= 1) && (lp_index <= libCOMI_gv_cUC_UNITSMAXCOUNT)) && (CatalogEntryIsValid(c_gameCatalogCommander, lp_commander) == true) && (CatalogFieldValueCount(c_gameCatalogCommander, lp_commander, "UnitArray", c_playerAny) >= lp_index)) {
        lv_prestigefacestring5 = (CatalogFieldValueGet(c_gameCatalogCommander, lp_commander, "UnitArray[" + IntToString((lp_index - 1)) + "].Unit", c_playerAny));
        if ((CatalogEntryIsValid(c_gameCatalogUnit, lv_prestigefacestring5) == true)) {
            return lv_prestigefacestring5;
        }

    }

    return null;
}

void libCOMI_gf_SetGameMode (int lp_gamemode) {
    // Variable Declarations
    playergroup lv_all;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_all = PlayerGroupAll();

    // Implementation
    libCOMI_gv_gameMode = lp_gamemode;
    TriggerEnable(libCOMI_gt_GameModePulldownUsed, false);
    DialogControlSelectItem(libCOMI_gv_vU_GameModePulldown, lv_all, lp_gamemode);
    TriggerEnable(libCOMI_gt_GameModePulldownUsed, true);
    libCOMI_gf_UpdateCommandersList();
}

void libCOMI_gf_UpdateGameModeList () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto107AAD20_ae;
    const int auto107AAD20_ai = 1;

    // Variable Initialization

    // Implementation
    DialogControlRemoveAllItems(libCOMI_gv_vU_GameModePulldown, libCOMI_gv_all);
    auto107AAD20_ae = libCOMI_gv_totalPlayersOnMap;
    lv_i = 1;
    for ( ; ( (auto107AAD20_ai >= 0 && lv_i <= auto107AAD20_ae) || (auto107AAD20_ai < 0 && lv_i >= auto107AAD20_ae) ) ; lv_i += auto107AAD20_ai ) {
        TextExpressionSetToken("Param/Expression/lib_COMI_7B047753", "A", IntToText(lv_i));
        DialogControlAddItem(libCOMI_gv_vU_GameModePulldown, libCOMI_gv_all, TextExpressionAssemble("Param/Expression/lib_COMI_7B047753"));
    }
    libCOMI_gf_SetGameMode(libCOMI_gv_gameMode);
}

void libCOMI_gf_SetDifficulty (int lp_difficulty) {
    // Variable Declarations
    playergroup lv_all;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_all = PlayerGroupAll();

    // Implementation
    libCOMI_gv_selectedDifficulty = lp_difficulty;
    TriggerEnable(libCOMI_gt_DifficultyPulldownUsed, false);
    DialogControlSelectItem(libCOMI_gv_vU_CommanderDifficultyPulldown, lv_all, lp_difficulty);
    TriggerEnable(libCOMI_gt_DifficultyPulldownUsed, true);
}

void libCOMI_gf_UpdateDifficultiesList () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlRemoveAllItems(libCOMI_gv_vU_CommanderDifficultyPulldown, libCOMI_gv_all);
    DialogControlAddItem(libCOMI_gv_vU_CommanderDifficultyPulldown, libCOMI_gv_all, StringExternal("Param/Value/lib_COMI_7779130F"));
    DialogControlAddItem(libCOMI_gv_vU_CommanderDifficultyPulldown, libCOMI_gv_all, StringExternal("Param/Value/lib_COMI_7ABBF39A"));
    DialogControlAddItem(libCOMI_gv_vU_CommanderDifficultyPulldown, libCOMI_gv_all, StringExternal("Param/Value/lib_COMI_3045EA12"));
    DialogControlAddItem(libCOMI_gv_vU_CommanderDifficultyPulldown, libCOMI_gv_all, StringExternal("Param/Value/lib_COMI_904C23E1"));
    libCOMI_gf_SetDifficulty(libCOMI_gv_selectedDifficulty);
}

trigger auto_libCOMI_gf_DisplayArmyButton_Trigger = null;
bool auto_libCOMI_gf_DisplayArmyButton_lp_doDoNot;

void libCOMI_gf_DisplayArmyButton (bool lp_doDoNot) {
    auto_libCOMI_gf_DisplayArmyButton_lp_doDoNot = lp_doDoNot;

    if (auto_libCOMI_gf_DisplayArmyButton_Trigger == null) {
        auto_libCOMI_gf_DisplayArmyButton_Trigger = TriggerCreate("auto_libCOMI_gf_DisplayArmyButton_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_DisplayArmyButton_Trigger, false, false);
}

bool auto_libCOMI_gf_DisplayArmyButton_TriggerFunc (bool testConds, bool runActions) {
    bool lp_doDoNot = auto_libCOMI_gf_DisplayArmyButton_lp_doDoNot;

    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv_cU_ArmyButton != c_invalidDialogControlId)) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypeFlash, "UIContainer/ConsoleUIContainer/ArmyButtonTipEffects");
    libCOMI_gv_cU_ArmyButtonTipPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/ArmyButton");
    libCOMI_gv_cU_ArmyButton = DialogControlLastCreated();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, true);
    TriggerEnable(libCOMI_gt_CU_ArmyButtonUsed, true);
    if ((lp_doDoNot == true)) {
        Wait(3.0, c_timeReal);
        TriggerQueueEnter();
        TriggerExecute(libCOMI_gt_CU_FlashArmyButtonHelpTip, true, false);
        TriggerQueueExit();
    }

    return true;
}

void libCOMI_gf_CU_TargetingCancel (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libCOMI_gv_cUC_TargetingEventCancel);
}

int libCOMI_gf_CU_TargetingTriggeringPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libCOMI_gv_cUC_TargetingEventCancel, libCOMI_gv_cUC_TargetingParamPlayer));
}

void libCOMI_gf_PU_TargetingUI_EnterTargetingMode (bool lp_showHide, bool lp_instant, int lp_player) {
    // Variable Declarations
    int lv_index;
    playergroup lv_uIPlayers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uIPlayers = PlayerGroupEmpty();

    // Implementation
    lv_uIPlayers = PlayerGroupSingle(lp_player);
    libCOMI_gf_CU_TargetingCreate(lp_player);
    if ((lp_showHide == true)) {
        libCOMI_gf_SetScreenModeCoop(c_uiModeFullscreen, 0.35, lp_player);
        DialogSetVisible(libCOMI_gv_cU_TargetingAbilityDialog[lp_player], lv_uIPlayers, true);
        if ((PlayerRace(lp_player) == "ARC@Prot")) {
            DialogSetVisible(libCOMI_gv_cU_TargetingOverlayDialog[lp_player], lv_uIPlayers, true);
            libNtve_gf_SetDialogItemAnimation(libCOMI_gv_cU_TargetingOverlayPortrait[lp_player], "Birth", lv_uIPlayers);
        }

    }
    else {
        libCOMI_gv_cU_TargetingCurrentCharges[lp_player] = 0;
        if ((lp_instant == false)) {
            libCOMI_gf_SetScreenModeCoop(c_uiModeConsole, 0.25, lp_player);
        }

        if ((PlayerRace(lp_player) == "ARC@Prot")) {
            DialogSetVisible(libCOMI_gv_cU_TargetingOverlayDialog[lp_player], lv_uIPlayers, false);
        }

        DialogSetVisible(libCOMI_gv_cU_TargetingAbilityDialog[lp_player], lv_uIPlayers, false);
    }
}

void libCOMI_gf_CU_TargetingCreate (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv_cU_TargetingAbilityDialog[lp_player] != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(500, 150, c_anchorBottom, 3, 160, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    libCOMI_gv_cU_TargetingAbilityDialog[lp_player] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, libCOMI_gv_targetingTemplate[lp_player]);
    libCOMI_gv_cU_TargetingPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_TargetingPanel[lp_player], c_triggerControlTypeLabel, "Instructions");
    libCOMI_gv_cU_TargetingInstructionsLabel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_TargetingPanel[lp_player], c_triggerControlTypeButton, "CancelButton");
    libCOMI_gv_cU_TargetingCancelButton[lp_player] = DialogControlLastCreated();
    if ((libCOMI_gv_cM_SoATargetingChargesTotal[lp_player] > 0)) {
        DialogControlHookup(libCOMI_gv_cU_TargetingPanel[lp_player], c_triggerControlTypePanel, "ChargesContainer");
        libCOMI_gv_cU_TargetingChargesPanel[lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_TargetingChargesPanel[lp_player], c_triggerControlTypePanel, "Charge1");
        libCOMI_gv_cU_TargetingChargeSinglePanel[1][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_TargetingChargesPanel[lp_player], c_triggerControlTypePanel, "Charge2");
        libCOMI_gv_cU_TargetingChargeSinglePanel[2][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_TargetingChargesPanel[lp_player], c_triggerControlTypePanel, "Charge3");
        libCOMI_gv_cU_TargetingChargeSinglePanel[3][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_TargetingChargesPanel[lp_player], c_triggerControlTypePanel, "Charge4");
        libCOMI_gv_cU_TargetingChargeSinglePanel[4][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_TargetingChargesPanel[lp_player], c_triggerControlTypePanel, "Charge5");
        libCOMI_gv_cU_TargetingChargeSinglePanel[5][lp_player] = DialogControlLastCreated();
        DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
        libCOMI_gv_cU_TargetingOverlayDialog[lp_player] = DialogLastCreated();
        DialogSetFullscreen(DialogLastCreated(), true);
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePortrait, "LotV_GameUI/SoAOverlayTemplate");
        PortraitUseTransition(PortraitGetTriggerControl(DialogControlLastCreated()), false);
        libNtve_gf_SetDialogItemModel(DialogControlLastCreated(), "ARC@SOA_Calldown_UI", PlayerGroupAll());
        libCOMI_gv_cU_TargetingOverlayPortrait[lp_player] = DialogControlLastCreated();
    }

    TriggerEnable(libCOMI_gt_CU_TargetingCancelButtonUsed, true);
}

void libCOMI_gf_CU_TargetingSetCharges (int lp_current, int lp_max, int lp_player) {
    // Variable Declarations
    int lv_indexCharge;
    playergroup lv_uIPlayers;

    // Automatic Variable Declarations
    int auto1E411E65_ae;
    const int auto1E411E65_ai = 1;
    int auto61400EA8_ae;
    const int auto61400EA8_ai = 1;
    const int auto8D6D93FB_ae = libCOMI_gv_cMC_SOATARGETCOUNTMAX;
    const int auto8D6D93FB_ai = 1;

    // Variable Initialization
    lv_uIPlayers = PlayerGroupEmpty();

    // Implementation
    lv_uIPlayers = PlayerGroupSingle(lp_player);
    libCOMI_gf_CU_TargetingCreate(lp_player);
    if ((libCOMI_gv_cM_SoATargetingChargesTotal[lp_player] == 0)) {
        return ;
    }

    auto1E411E65_ae = lp_current;
    lv_indexCharge = 1;
    for ( ; ( (auto1E411E65_ai >= 0 && lv_indexCharge <= auto1E411E65_ae) || (auto1E411E65_ai < 0 && lv_indexCharge >= auto1E411E65_ae) ) ; lv_indexCharge += auto1E411E65_ai ) {
        if ((libCOMI_gv_cU_TargetingCurrentCharges[lp_player] < lv_indexCharge)) {
            DialogControlSetVisible(libCOMI_gv_cU_TargetingChargeSinglePanel[(lp_max-lv_indexCharge+1)][lp_player], lv_uIPlayers, false);
            DialogControlSetVisible(libCOMI_gv_cU_TargetingChargeSinglePanel[(lp_max-lv_indexCharge+1)][lp_player], lv_uIPlayers, true);
        }

    }
    auto61400EA8_ae = lp_max;
    lv_indexCharge = (lp_current+1);
    for ( ; ( (auto61400EA8_ai >= 0 && lv_indexCharge <= auto61400EA8_ae) || (auto61400EA8_ai < 0 && lv_indexCharge >= auto61400EA8_ae) ) ; lv_indexCharge += auto61400EA8_ai ) {
        if ((lv_indexCharge <= libCOMI_gv_cU_TargetingCurrentCharges[lp_player])) {
            DialogControlSendAnimationEvent(libCOMI_gv_cU_TargetingChargeSinglePanel[(lp_max-lv_indexCharge+1)][lp_player], lv_uIPlayers, "Consume");
        }

    }
    lv_indexCharge = (lp_max+1);
    for ( ; ( (auto8D6D93FB_ai >= 0 && lv_indexCharge <= auto8D6D93FB_ae) || (auto8D6D93FB_ai < 0 && lv_indexCharge >= auto8D6D93FB_ae) ) ; lv_indexCharge += auto8D6D93FB_ai ) {
        DialogControlSetVisible(libCOMI_gv_cU_TargetingChargeSinglePanel[lv_indexCharge][lp_player], lv_uIPlayers, false);
    }
    if ((lp_max == 3)) {
        DialogControlSendAnimationEvent(libCOMI_gv_cU_TargetingChargesPanel[lp_player], lv_uIPlayers, "ThreeCharges");
    }
    else {
        DialogControlSendAnimationEvent(libCOMI_gv_cU_TargetingChargesPanel[lp_player], lv_uIPlayers, "FiveCharges");
    }
    libCOMI_gv_cU_TargetingCurrentCharges[lp_player] = lp_current;
}

void libCOMI_gf_CU_TargetingSetInstructionText (text lp_instructions, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_TargetingInstructionsLabel[lp_player], lp_instructions, PlayerGroupSingle(lp_player));
}

void libCOMI_gf_CM_SoATargetingModeEnter (int lp_player) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCOMI_gv_cM_SoATargetingUnrefundableStageEntered[lp_player] = false;
    libCOMI_gv_cM_SoATargetingAlreadyCanceled[lp_player] = false;
    while (!((libCOMI_gv_cM_SoATargetingTransitioning[lp_player] == false))) {
        Wait(0.0625, c_timeGame);
    }
    if ((libCOMI_gf_PlayerInCinematicModeCampaign() == true)) {
        return ;
    }

    libCOMI_gv_cM_SoAExitInstantly = false;
    libCOMI_gv_cM_SoATargetingUsageCount += 1;
    libCOMI_gv_cM_SoATargetingChargesSpent[lp_player] = 0;
    libCOMI_gf_CU_TargetingSetCharges(libCOMI_gv_cM_SoATargetingChargesTotal[lp_player], libCOMI_gv_cM_SoATargetingChargesTotal[lp_player], lp_player);
    libCOMI_gv_targetingPlayer = lp_player;
    TriggerSendEvent("Targeting Mode Enter");
    if ((libCOMI_gv_cM_SoATargetingOrder[lp_player] != null)) {
        UISetTargetingOrder(PlayerGroupSingle(lp_player), libCOMI_gv_yY_GPCasterGroup[lp_player], libCOMI_gv_cM_SoATargetingOrder[lp_player], false);
        libCOMI_gv_cM_SoATargetingPhase[lp_player] = libCOMI_ge_CM_SoATargetingPhaseType_Location;
    }
    else {
        libCOMI_gv_cM_SoATargetingPhase[lp_player] = libCOMI_ge_CM_SoATargetingPhaseType_None;
    }
    libCOMI_gv_cM_SoATargetingTransitioning[lp_player] = true;
    libCOMI_gf_PU_TargetingUI_EnterTargetingMode(true, false, lp_player);
    libCOMI_gf_CU_TargetingSetInstructionText(libCOMI_gv_cM_SoATargetingInstructionsPrimary[lp_player], lp_player);
    libCOMI_gf_CM_SetFogAlphaOverTime(100.0, 0.5, lp_player);
    CameraSetValue(lp_player, c_cameraValueDistance, 50.0, 1.0, -1, 10.0);
    CameraSetValue(lp_player, c_cameraValuePitch, 70.0, 1.0, -1, 10.0);
    CameraSetData(PlayerGroupSingle(lp_player), "SOATargetingModeCamera");
    libCOMI_gv_cM_SoATargetingTransitioning[lp_player] = false;
    libCOMI_gv_cM_SoATargetingCycling[lp_player] = false;
}

void libCOMI_gf_CM_SoATargetingModeExit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cM_SoATargetingPhase[lp_player] = libCOMI_ge_CM_SoATargetingPhaseType_None;
    while (!((libCOMI_gv_cM_SoATargetingTransitioning[lp_player] == false))) {
        Wait(0.0625, c_timeGame);
    }
    libCOMI_gv_cM_SoATargetingTransitioning[lp_player] = true;
    if ((libCOMI_gv_cM_SoAExitInstantly == true)) {
        CameraSetValue(lp_player, c_cameraValueDistance, 34.0, 0.0, -1, 10.0);
        CameraSetValue(lp_player, c_cameraValuePitch, 56.0, 0.0, -1, 10.0);
    }
    else {
        CameraSetValue(lp_player, c_cameraValueDistance, 34.0, 0.5, -1, 10.0);
        CameraSetValue(lp_player, c_cameraValuePitch, 56.0, 0.5, -1, 10.0);
    }
    CameraSetData(PlayerGroupSingle(lp_player), "Dflt");
    if ((libCOMI_gv_cM_SoAExitInstantly == true)) {
        VisResetFoWAlpha(lp_player);
        libCOMI_gf_PU_TargetingUI_EnterTargetingMode(false, true, lp_player);
    }
    else {
        libCOMI_gf_CM_ResetFogAlphaOverTime(0.5, lp_player);
        libCOMI_gf_PU_TargetingUI_EnterTargetingMode(false, false, lp_player);
    }
    libNtve_gf_RestoreUnitSelection(lp_player);
    libCOMI_gv_cM_SoATargetingActivateAbility[lp_player] = null;
    libCOMI_gv_cM_SoATargetingTransitioning[lp_player] = false;
    libCOMI_gv_cM_SoATargetingUsageCount -= 1;
    if ((libCOMI_gv_cM_SoATargetingUsageCount == 0)) {
        libCOMI_gv_targetingPlayer = lp_player;
        TriggerSendEvent("Targeting Mode Exit");
    }

}

void libCOMI_gf_CM_SoATargetingCleanupActorsAndUnits (int lp_player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto614ACFCA_ae = libCOMI_gv_cMC_SOATARGETCOUNTMAX;
    const int auto614ACFCA_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto614ACFCA_ai >= 0 && lv_index <= auto614ACFCA_ae) || (auto614ACFCA_ai < 0 && lv_index >= auto614ACFCA_ae) ) ; lv_index += auto614ACFCA_ai ) {
        if ((libCOMI_gv_cM_SoATargetingActors[lv_index][lp_player] != null)) {
            ActorSend(libCOMI_gv_cM_SoATargetingActors[lv_index][lp_player], "Signal Destroy");
            libCOMI_gv_cM_SoATargetingActors[lv_index][lp_player] = null;
        }

        if ((libCOMI_gv_cM_SoATargetingUnit[lv_index][lp_player] != null)) {
            UnitRemove(libCOMI_gv_cM_SoATargetingUnit[lv_index][lp_player]);
            libCOMI_gv_cM_SoATargetingUnit[lv_index][lp_player] = null;
        }

    }
}

trigger auto_libCOMI_gf_CM_SetFogAlphaOverTime_Trigger = null;
fixed auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_targetAlpha;
fixed auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_duration;
int auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_player;

void libCOMI_gf_CM_SetFogAlphaOverTime (fixed lp_targetAlpha, fixed lp_duration, int lp_player) {
    auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_targetAlpha = lp_targetAlpha;
    auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_duration = lp_duration;
    auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_SetFogAlphaOverTime_Trigger == null) {
        auto_libCOMI_gf_CM_SetFogAlphaOverTime_Trigger = TriggerCreate("auto_libCOMI_gf_CM_SetFogAlphaOverTime_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_SetFogAlphaOverTime_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_SetFogAlphaOverTime_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_targetAlpha = auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_targetAlpha;
    fixed lp_duration = auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_duration;
    int lp_player = auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_player;

    // Variable Declarations
    fixed lv_currentAlpha;
    fixed lv_alphaIncrement;
    fixed lv_incrementFrequency;
    int lv_increments;

    // Automatic Variable Declarations
    int auto03C30BA1_n;
    int auto03C30BA1_i;

    // Variable Initialization

    // Implementation
    if ((true)) {
        return true;
    }

    lv_incrementFrequency = 0.05;
    lv_currentAlpha = VisGetFoWAlpha(lp_player);
    lv_increments = AbsI(FixedToInt((lp_duration / lv_incrementFrequency)));
    lv_alphaIncrement = ((lp_targetAlpha-lv_currentAlpha)/IntToFixed(lv_increments));
    auto03C30BA1_n = lv_increments;
    for (auto03C30BA1_i = 1; auto03C30BA1_i <= auto03C30BA1_n; auto03C30BA1_i += 1) {
        Wait(lv_incrementFrequency, c_timeGame);
        lv_currentAlpha += lv_alphaIncrement;
        VisSetFoWAlpha(lp_player, lv_currentAlpha);
    }
    VisSetFoWAlpha(lp_player, lp_targetAlpha);
    return true;
}

trigger auto_libCOMI_gf_CM_ResetFogAlphaOverTime_Trigger = null;
fixed auto_libCOMI_gf_CM_ResetFogAlphaOverTime_lp_duration;
int auto_libCOMI_gf_CM_ResetFogAlphaOverTime_lp_player;

void libCOMI_gf_CM_ResetFogAlphaOverTime (fixed lp_duration, int lp_player) {
    auto_libCOMI_gf_CM_ResetFogAlphaOverTime_lp_duration = lp_duration;
    auto_libCOMI_gf_CM_ResetFogAlphaOverTime_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_ResetFogAlphaOverTime_Trigger == null) {
        auto_libCOMI_gf_CM_ResetFogAlphaOverTime_Trigger = TriggerCreate("auto_libCOMI_gf_CM_ResetFogAlphaOverTime_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_ResetFogAlphaOverTime_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_ResetFogAlphaOverTime_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_duration = auto_libCOMI_gf_CM_ResetFogAlphaOverTime_lp_duration;
    int lp_player = auto_libCOMI_gf_CM_ResetFogAlphaOverTime_lp_player;

    // Variable Declarations
    fixed lv_currentAlpha;
    fixed lv_alphaIncrement;
    fixed lv_incrementFrequency;
    int lv_increments;
    fixed lv_targetAlpha;

    // Automatic Variable Declarations
    int auto56E2CCBE_n;
    int auto56E2CCBE_i;

    // Variable Initialization

    // Implementation
    if ((true)) {
        return true;
    }

    lv_incrementFrequency = 0.05;
    lv_currentAlpha = VisGetFoWAlpha(lp_player);
    VisResetFoWAlpha(lp_player);
    lv_targetAlpha = VisGetFoWAlpha(lp_player);
    lv_increments = AbsI(FixedToInt((lp_duration / lv_incrementFrequency)));
    lv_alphaIncrement = ((lv_targetAlpha-lv_currentAlpha)/IntToFixed(lv_increments));
    VisSetFoWAlpha(lp_player, lv_currentAlpha);
    auto56E2CCBE_n = lv_increments;
    for (auto56E2CCBE_i = 1; auto56E2CCBE_i <= auto56E2CCBE_n; auto56E2CCBE_i += 1) {
        Wait(lv_incrementFrequency, c_timeGame);
        lv_currentAlpha += lv_alphaIncrement;
        VisSetFoWAlpha(lp_player, lv_currentAlpha);
    }
    VisResetFoWAlpha(lp_player);
    return true;
}

void libCOMI_gf_CM_SoATargetingCancel (int lp_player) {
    // Variable Declarations
    string lv_cost;
    string lv_costField;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cost = "";
    lv_costField = "";

    // Implementation
    UnitIssueOrder(libCOMI_gv_yY_GPCasterUnit[lp_player], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libCOMI_gv_cM_SoATargetingAlreadyCanceled[lp_player] = true;
    libCOMI_gf_CM_SoATargetingCleanupActorsAndUnits(lp_player);
    if ((libCOMI_gv_cM_SoATargetingUnitType[lp_player] != null) && (libCOMI_gv_cM_SoATargetingPhase[lp_player] == libCOMI_ge_CM_SoATargetingPhaseType_Direction)) {
        libCOMI_gv_cM_SoATargetingChargesSpent[lp_player] -= 1;
    }

    if ((libCOMI_gv_cM_SoATargetingChargesSpent[lp_player] == 0) && (libCOMI_gv_cM_SoATargetingUnrefundableStageEntered[lp_player] == false)) {
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_yY_GPCasterUnit[lp_player], libCOMI_gv_cM_SoATargetingActivateAbility[lp_player], libCOMI_gv_cM_SoATargetingCooldown[lp_player]);
        lv_costField = ("Cost[0].Vital[" + "Energy" + "]");
        lv_cost = CatalogFieldValueGet(c_gameCatalogAbil, libCOMI_gv_cM_SoATargetingActivateAbility[lp_player], (lv_costField), lp_player);
        UnitSetPropertyFixed(libCOMI_gv_yY_GPCasterUnit[lp_player], c_unitPropEnergy, (UnitGetPropertyFixed(libCOMI_gv_yY_GPCasterUnit[lp_player], c_unitPropEnergy, c_unitPropCurrent) + StringToFixed(lv_cost)));
        libCOMI_gv_targetingPlayer = lp_player;
        TriggerSendEvent("Targeting Cancel");
    }

    UnitBehaviorRemove(libCOMI_gv_yY_GPCasterUnit[lp_player], libCOMI_gv_cM_SoATargetingBehavior[lp_player], 1);
    libCOMI_gv_cM_SoATargetingUnrefundableStageEntered[lp_player] = true;
}

void libCOMI_gf_TaskTransmission (int lp_task, string lp_transmission, fixed lp_delay, fixed lp_defer) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_defferedTransmissionLink = lp_transmission;
    libCOMI_gv_defferedTransmissionDefer = lp_defer;
    libCOMI_gv_defferedTransmissionDelay = lp_delay;
    libCOMI_gv_defferedTask = lp_task;
    TriggerExecute(libCOMI_gt_DefferedTransmission, true, false);
}

void libCOMI_gf_DefferedTransmission (string lp_transmission, fixed lp_defer) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_defferedTransmissionLink = lp_transmission;
    libCOMI_gv_defferedTransmissionDefer = lp_defer;
    libCOMI_gv_defferedTransmissionDelay = 0.0;
    libCOMI_gv_defferedTask = 0;
    TriggerExecute(libCOMI_gt_DefferedTransmission, true, false);
}

void libCOMI_gf_ThankYou (int lp_caster, int lp_target) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CM_CommanderVOSend(lp_caster, libCOMI_gf_CC_CommanderVOLine(libCOMI_gf_ActiveCommanderForPlayer(lp_target), libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOThankyou), PlayerGroupSingle(lp_target));
}

void libCOMI_gf_TeamThankYou (int lp_caster) {
    // Variable Declarations
    playergroup lv_team;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_team = libCOMI_gf_GetTeammates(lp_caster);

    // Implementation
    if ((PlayerGroupCount(lv_team) > 0)) {
        lv_player = PlayerGroupPlayer(lv_team, RandomInt(1, PlayerGroupCount(lv_team)));
        libCOMI_gf_CM_CommanderVOSend(lp_caster, libCOMI_gf_CC_CommanderVOLine(libCOMI_gf_ActiveCommanderForPlayer(lv_player), libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOThankyou), PlayerGroupSingle(lv_player));
    }

}

void libCOMI_gf_CM_CommanderVOSend (int lp_listenerPlayer, soundlink lp_vOSound, playergroup lp_targetPlayers) {
    // Automatic Variable Declarations
    // Implementation
    SoundSetListenerGender(lp_vOSound, libCOMI_gf_CC_CommanderGender(libCOMI_gf_ActiveCommanderForPlayer(lp_listenerPlayer)));
    SoundPlayForPlayer(lp_vOSound, 1, lp_targetPlayers, 100.0, 0.0);
}

trigger auto_libCOMI_gf_CM_CommanderVOAbilityWatch_Trigger = null;
int auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_player;
soundlink auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_vOSound;
string auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_cooldownLink;
unit auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_unit;
abilcmd auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_abilityCommand;

void libCOMI_gf_CM_CommanderVOAbilityWatch (int lp_player, soundlink lp_vOSound, string lp_cooldownLink, unit lp_unit, abilcmd lp_abilityCommand) {
    auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_player = lp_player;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_vOSound = lp_vOSound;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_cooldownLink = lp_cooldownLink;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_unit = lp_unit;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_abilityCommand = lp_abilityCommand;

    if (auto_libCOMI_gf_CM_CommanderVOAbilityWatch_Trigger == null) {
        auto_libCOMI_gf_CM_CommanderVOAbilityWatch_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CommanderVOAbilityWatch_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CommanderVOAbilityWatch_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CommanderVOAbilityWatch_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_player;
    soundlink lp_vOSound = auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_vOSound;
    string lp_cooldownLink = auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_cooldownLink;
    unit lp_unit = auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_unit;
    abilcmd lp_abilityCommand = auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_abilityCommand;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_abilityCommand != null) && (TechTreeAbilityIsAllowed(lp_player, lp_abilityCommand) == false)) {
        return true;
    }

    while (true) {
        while (!((PlayerGetCooldown(lp_player, lp_cooldownLink) > 0.0))) {
            Wait(1.0, c_timeGame);
        }
        while (!((PlayerGetCooldown(lp_player, lp_cooldownLink) <= 0.0))) {
            Wait(1.0, c_timeGame);
        }
        if (((lp_unit == null) || (UnitIsAlive(lp_unit) == true))) {
            libCOMI_gf_CM_CommanderVOSend(lp_player, lp_vOSound, PlayerGroupSingle(lp_player));
        }

    }
    return true;
}

trigger auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_Trigger = null;
int auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_player;
soundlink auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_vOSound;
string auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_cooldownLink;
unit auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_unit;
string auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_ability;

void libCOMI_gf_CM_CommanderVOAbilityWatchUnit (int lp_player, soundlink lp_vOSound, string lp_cooldownLink, unit lp_unit, string lp_ability) {
    auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_player = lp_player;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_vOSound = lp_vOSound;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_cooldownLink = lp_cooldownLink;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_unit = lp_unit;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_ability = lp_ability;

    if (auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_Trigger == null) {
        auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_player;
    soundlink lp_vOSound = auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_vOSound;
    string lp_cooldownLink = auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_cooldownLink;
    unit lp_unit = auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_unit;
    string lp_ability = auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_ability;

    // Automatic Variable Declarations
    // Implementation
    while (true) {
        while (!(((UnitAbilityGetCooldown(lp_unit, lp_ability, lp_cooldownLink) > 20.0) || ((UnitAbilityChargeInfo(lp_unit, AbilityCommand(lp_ability, 0), c_unitAbilChargeCountLeft) == 0.0) && (UnitAbilityGetChargeRegen(lp_unit, lp_ability, lp_cooldownLink) > 20.0))))) {
            Wait(1.0, c_timeGame);
        }
        while (!((UnitAbilityGetCooldown(lp_unit, lp_ability, lp_cooldownLink) <= 0.0) && ((UnitAbilityGetChargeRegen(lp_unit, lp_ability, lp_cooldownLink) <= 0.0) || (UnitAbilityChargeInfo(lp_unit, AbilityCommand(lp_ability, 0), c_unitAbilChargeCountLeft) > 0.0)))) {
            Wait(1.0, c_timeGame);
        }
        if ((UnitIsAlive(lp_unit) == true)) {
            libCOMI_gf_CM_CommanderVOSend(lp_player, lp_vOSound, PlayerGroupSingle(lp_player));
        }

    }
    return true;
}

soundlink libCOMI_gf_CC_CommanderVOLine (string lp_commander, int lp_line) {
    // Variable Declarations
    string lv_vOSound;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_vOSound = UserDataGetSound("Commanders", lp_commander, "StandardVO", (lp_line));
    if ((lv_vOSound == null)) {
        return null;
    }

    return SoundLink(lv_vOSound, c_soundIndexAny);
}

void libCOMI_gf_CM_CommanderVOInit () {
    // Variable Declarations
    int lv_indexPlayer;
    string lv_indexCommander;

    // Automatic Variable Declarations
    playergroup auto24DB78C3_g;
    int auto53C20295_ai;
    int auto53C20295_ae;
    playergroup auto8051EF80_g;

    // Variable Initialization

    // Implementation
    libCOMI_gv_cM_VOGroupGender = c_genderFemale;
    auto24DB78C3_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto24DB78C3_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOMI_gf_CC_CommanderGender(libCOMI_gf_ActiveCommanderForPlayer(lv_indexPlayer)) == c_genderMale)) {
            libCOMI_gv_cM_VOGroupGender = c_genderMale;
            break;
        }

    }
    ConversationDataSetListenerGender("acObj", libCOMI_gv_cM_VOGroupGender);
    ConversationDataSetListenerGender("acResponses", libCOMI_gv_cM_VOGroupGender);
    ConversationDataRegisterPortrait("char_TerranAdjutant", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ProtossExecutor", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_Izsha", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_SgtHammer", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACScientist", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_DominionOfficer", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ShakurasAlly", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_Hill", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_TDChampion", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_Vermillion", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_BelshirScientist", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_StetmannCommander", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_MengskCommander", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACJarbanMiner", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACMeinhoffMedic", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACAiurSiege", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACCybrosEscort", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACPartAndParcel", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_Stone", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    auto53C20295_ai = 1;
    auto53C20295_ae = UserDataInstanceCount("PlayerCommander")+1;
    while (auto53C20295_ai < auto53C20295_ae) {
        lv_indexCommander = UserDataInstance("PlayerCommander", auto53C20295_ai);
        auto53C20295_ai = auto53C20295_ai+1;
        ConversationDataRegisterPortrait(libCOMI_gf_CC_CommanderConversationLink(lv_indexCommander), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    }
    ConversationDataRegisterPortrait("char_Han", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    libCOMI_gf_CM_VOResourceInit();
    TriggerEnable(libCOMI_gt_CM_VOEnemySpotted, true);
    TriggerExecute(libCOMI_gt_CM_VOUnitsLostCheck, true, false);
    auto8051EF80_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto8051EF80_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer) != 2)) {
            TriggerEnable(libCOMI_gt_CM_VOEnemyCloakedSpotted, true);
        }

    }
}

void libCOMI_gf_CC_MuteUnmuteExclusive (bool lp_muteUnmute, int lp_muteChannel, int lp_ignoredChannel, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_muteChannel != lp_ignoredChannel)) {
        SoundChannelMute(lp_players, lp_muteChannel, lp_muteUnmute);
    }

}

void libCOMI_gf_SetAllSoundChannelVolumesCampaign (int lp_mode) {
    // Automatic Variable Declarations
    int auto307A9BAC_val;

    // Implementation
    auto307A9BAC_val = lp_mode;
    if (auto307A9BAC_val == libCOMI_ge_VolumeChannelModeCampaign_Cinematic) {
        libARRA_gf_SetAllSoundChannelVolumesStandardTiming(libNtve_ge_VolumeChannelMode_Cinematic, PlayerGroupAll());
    }
    else if (auto307A9BAC_val == libCOMI_ge_VolumeChannelModeCampaign_Game) {
        libCOMI_gv_cC_VolumeChannelModeInSpeech = false;
        if ((libCOMI_gv_cC_VolumeChannelModeInLowHP == true)) {
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_LowHealthBegin);
            return ;
        }

        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.5);
    }
    else if (auto307A9BAC_val == libCOMI_ge_VolumeChannelModeCampaign_Game2) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.25);
    }
    else if (auto307A9BAC_val == libCOMI_ge_VolumeChannelModeCampaign_Game3) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.25);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.1);
    }
    else if (auto307A9BAC_val == libCOMI_ge_VolumeChannelModeCampaign_LowHealthBegin) {
        libCOMI_gv_cC_VolumeChannelModeInLowHP = true;
        if ((libCOMI_gv_cC_VolumeChannelModeInSpeech == true)) {
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
            return ;
        }

        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 80.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 25.0, 2.0);
    }
    else if (auto307A9BAC_val == libCOMI_ge_VolumeChannelModeCampaign_LowHealthEnd) {
        libCOMI_gv_cC_VolumeChannelModeInLowHP = false;
        if ((libCOMI_gv_cC_VolumeChannelModeInSpeech == true)) {
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
            return ;
        }

        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 1.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 1.0);
    }
    else if (auto307A9BAC_val == libCOMI_ge_VolumeChannelModeCampaign_Speech) {
        libCOMI_gv_cC_VolumeChannelModeInSpeech = true;
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 2.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 0.5);
    }
    else if (auto307A9BAC_val == libCOMI_ge_VolumeChannelModeCampaign_Speech2) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 60.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 50.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto307A9BAC_val == libCOMI_ge_VolumeChannelModeCampaign_Speech3) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 60.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 50.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto307A9BAC_val == libCOMI_ge_VolumeChannelModeCampaign_SpeechAndMusicNoEffects) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 12.5, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 50.0, 0.05);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 3.125, 0.05);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 12.5, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 3.125, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto307A9BAC_val == libCOMI_ge_VolumeChannelModeCampaign_MissionLaunchUI) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Victory, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.5);
    }
    else if (auto307A9BAC_val == libCOMI_ge_VolumeChannelModeCampaign_Victory) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Victory, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 0.5);
    }
    else if (auto307A9BAC_val == libCOMI_ge_VolumeChannelModeCampaign_EvolutionUI) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Victory, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, 0.5);
    }
    else {
    }
}

void libCOMI_gf_SetAllSoundChannelVolumesForPlayerGroupCampaign (int lp_mode, playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    int auto5366794A_val;

    // Implementation
    auto5366794A_val = lp_mode;
    if (auto5366794A_val == libCOMI_ge_VolumeChannelModeCampaign_Cinematic) {
        libARRA_gf_SetAllSoundChannelVolumesStandardTiming(libNtve_ge_VolumeChannelMode_Cinematic, lp_playerGroup);
    }
    else if (auto5366794A_val == libCOMI_ge_VolumeChannelModeCampaign_Game) {
        libCOMI_gv_cC_VolumeChannelModeInSpeech = false;
        if ((libCOMI_gv_cC_VolumeChannelModeInLowHP == true)) {
            libCOMI_gf_SetAllSoundChannelVolumesForPlayerGroupCampaign(libCOMI_ge_VolumeChannelModeCampaign_LowHealthBegin, lp_playerGroup);
            return ;
        }

        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, lp_playerGroup, 1.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 100.0, 0.5);
    }
    else if (auto5366794A_val == libCOMI_ge_VolumeChannelModeCampaign_Game2) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, lp_playerGroup, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 100.0, 0.25);
    }
    else if (auto5366794A_val == libCOMI_ge_VolumeChannelModeCampaign_Game3) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, lp_playerGroup, 0.25);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 100.0, 0.1);
    }
    else if (auto5366794A_val == libCOMI_ge_VolumeChannelModeCampaign_LowHealthBegin) {
        libCOMI_gv_cC_VolumeChannelModeInLowHP = true;
        if ((libCOMI_gv_cC_VolumeChannelModeInSpeech == true)) {
            libCOMI_gf_SetAllSoundChannelVolumesForPlayerGroupCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech, lp_playerGroup);
            return ;
        }

        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAmbient, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDeath, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDoodad, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFlames, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMusic, 80.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySpell, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 25.0, 2.0);
    }
    else if (auto5366794A_val == libCOMI_ge_VolumeChannelModeCampaign_LowHealthEnd) {
        libCOMI_gv_cC_VolumeChannelModeInLowHP = false;
        if ((libCOMI_gv_cC_VolumeChannelModeInSpeech == true)) {
            libCOMI_gf_SetAllSoundChannelVolumesForPlayerGroupCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech, lp_playerGroup);
            return ;
        }

        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, lp_playerGroup, 1.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 100.0, 1.0);
    }
    else if (auto5366794A_val == libCOMI_ge_VolumeChannelModeCampaign_Speech) {
        libCOMI_gv_cC_VolumeChannelModeInSpeech = true;
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, lp_playerGroup, 2.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 0.0, 0.5);
    }
    else if (auto5366794A_val == libCOMI_ge_VolumeChannelModeCampaign_Speech2) {
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAmbient, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDeath, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDoodad, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFlames, 60.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySpell, 50.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto5366794A_val == libCOMI_ge_VolumeChannelModeCampaign_Speech3) {
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAmbient, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDeath, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDoodad, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFlames, 60.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySpell, 50.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto5366794A_val == libCOMI_ge_VolumeChannelModeCampaign_SpeechAndMusicNoEffects) {
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAmbient, 12.5, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryBuild, 6.25, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryCombat, 50.0, 0.05);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDeath, 3.125, 0.05);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDoodad, 6.25, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFlames, 12.5, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFoley, 6.25, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryGather, 6.25, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryME, 0.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovement, 6.25, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovie, 0.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryReady, 6.25, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySAmbient, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySEmitters, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySPieces, 0.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySpell, 3.125, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryTV, 0.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto5366794A_val == libCOMI_ge_VolumeChannelModeCampaign_MissionLaunchUI) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Victory, lp_playerGroup, 1.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDialogue, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAmbient, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySEmitters, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySAmbient, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovie, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMission, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySpell, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMusic, 100.0, 0.5);
    }
    else if (auto5366794A_val == libCOMI_ge_VolumeChannelModeCampaign_Victory) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Victory, lp_playerGroup, 1.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 0.0, 0.5);
    }
    else if (auto5366794A_val == libCOMI_ge_VolumeChannelModeCampaign_EvolutionUI) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Victory, lp_playerGroup, 1.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDialogue, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAmbient, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySEmitters, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySAmbient, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovie, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMission, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySpell, 100.0, 0.5);
    }
    else {
    }
}

void libCOMI_gf_MuteUnmuteAllSoundChannelsExcept (bool lp_muteUnmute, int lp_ignoredChannel, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryAlert, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryAmbient, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryBuild, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryCombat, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryDeath, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryDialogue, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryDoodad, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryFlames, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryFoley, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryGather, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryME, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMission, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMovement, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMovie, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMusic, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryOther, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryReady, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySAmbient, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySEmitters, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySPieces, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySpell, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryTV, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryUI, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryVoice, lp_ignoredChannel, lp_players);
}

bool libCOMI_gf_ValidAntiAirUnitIsNearUnit (int lp_player, unit lp_unit) {
    // Variable Declarations
    bool lv_validAttackerFound;
    point lv_unitPosition;

    // Automatic Variable Declarations
    unitgroup auto4C6B244C_g;
    int auto4C6B244C_u;
    unit auto4C6B244C_var;
    unitgroup auto89AFDACF_g;
    int auto89AFDACF_u;
    unit auto89AFDACF_var;

    // Variable Initialization

    // Implementation
    lv_unitPosition = UnitGetPosition(lp_unit);
    auto4C6B244C_g = UnitGroup(null, lp_player, RegionCircle(lv_unitPosition, 16.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4C6B244C_u = UnitGroupCount(auto4C6B244C_g, c_unitCountAll);
    for (;; auto4C6B244C_u -= 1) {
        auto4C6B244C_var = UnitGroupUnitFromEnd(auto4C6B244C_g, auto4C6B244C_u);
        if (auto4C6B244C_var == null) { break; }
        if ((UnitCanAttackTarget(auto4C6B244C_var, lp_unit) == true)) {
            lv_validAttackerFound = true;
            break;
        }

    }
    if ((lv_validAttackerFound == false)) {
        auto89AFDACF_g = UnitGroup(null, lp_player, RegionCircle(lv_unitPosition, 8.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto89AFDACF_u = UnitGroupCount(auto89AFDACF_g, c_unitCountAll);
        for (;; auto89AFDACF_u -= 1) {
            auto89AFDACF_var = UnitGroupUnitFromEnd(auto89AFDACF_g, auto89AFDACF_u);
            if (auto89AFDACF_var == null) { break; }
            if ((UnitCanAttackTarget(auto89AFDACF_var, lp_unit) == true)) {
                lv_validAttackerFound = true;
                break;
            }

        }
    }

    return lv_validAttackerFound;
}

trigger auto_libCOMI_gf_RemindPlayertoCreateAntiAirUnits_Trigger = null;

void libCOMI_gf_RemindPlayertoCreateAntiAirUnits () {
    if (auto_libCOMI_gf_RemindPlayertoCreateAntiAirUnits_Trigger == null) {
        auto_libCOMI_gf_RemindPlayertoCreateAntiAirUnits_Trigger = TriggerCreate("auto_libCOMI_gf_RemindPlayertoCreateAntiAirUnits_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_RemindPlayertoCreateAntiAirUnits_Trigger, false, false);
}

bool auto_libCOMI_gf_RemindPlayertoCreateAntiAirUnits_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_currentUnit;
    bool lv_sendTransmission;

    // Automatic Variable Declarations
    unitgroup auto78DC738F_g;
    int auto78DC738F_u;

    // Variable Initialization

    // Implementation
    while (true) {
        auto78DC738F_g = UnitGroupAlliance(PlayerGroupPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), 1), c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterPassive - 32))), 0);
        auto78DC738F_u = UnitGroupCount(auto78DC738F_g, c_unitCountAll);
        for (;; auto78DC738F_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(auto78DC738F_g, auto78DC738F_u);
            if (lv_currentUnit == null) { break; }
            if ((UnitGroupCount(UnitGroup(null, 1, RegionCircle(UnitGetPosition(lv_currentUnit), 4.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                if ((libCOMI_gf_ValidAntiAirUnitIsNearUnit(1, lv_currentUnit) == false)) {
                    Wait(5.0, c_timeAI);
                    if ((UnitIsAlive(lv_currentUnit) == true)) {
                        if ((UnitGroupCount(UnitGroup(null, 1, RegionCircle(UnitGetPosition(lv_currentUnit), 4.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) && (libCOMI_gf_ValidAntiAirUnitIsNearUnit(1, lv_currentUnit) == false)) {
                            lv_sendTransmission = true;
                        }

                    }

                }

                break;
            }

            Wait(0.1, c_timeAI);
        }
        if ((lv_sendTransmission == true)) {
            break;
        }

        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    if (true) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

trigger auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_Trigger = null;
soundlink auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_lp_soundLink;
fixed auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_lp_soundDelay;
playergroup auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_lp_listeningPlayers;

void libCOMI_gf_CM_HeroReviveQueue_PlaySound (soundlink lp_soundLink, fixed lp_soundDelay, playergroup lp_listeningPlayers) {
    auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_lp_soundLink = lp_soundLink;
    auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_lp_soundDelay = lp_soundDelay;
    auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_lp_listeningPlayers = lp_listeningPlayers;

    if (auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_Trigger == null) {
        auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_Trigger = TriggerCreate("auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_TriggerFunc (bool testConds, bool runActions) {
    soundlink lp_soundLink = auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_lp_soundLink;
    fixed lp_soundDelay = auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_lp_soundDelay;
    playergroup lp_listeningPlayers = auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_lp_listeningPlayers;

    // Variable Declarations
    fixed lv_maxsounddelay;
    timer lv_sounddelaytimer;
    timer lv_maxsounddelaytimer;
    fixed lv_soundtaildelay;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_maxsounddelay = 15.0;
    lv_sounddelaytimer = TimerCreate();
    lv_maxsounddelaytimer = TimerCreate();

    // Implementation
    TimerStart(lv_sounddelaytimer, lp_soundDelay, false, c_timeReal);
    TimerStart(lv_maxsounddelaytimer, lv_maxsounddelay, false, c_timeReal);
    while (!((((libCOMI_gv_cM_HeroReviveQueue_ActiveListeners == false) && (TimerGetRemaining(lv_sounddelaytimer) <= 0.0)) || (TimerGetRemaining(lv_maxsounddelaytimer) <= 0.0)))) {
        Wait(0.25, c_timeReal);
    }
    if ((TimerGetRemaining(lv_maxsounddelaytimer) <= 0.0)) {
        return true;
    }

    libCOMI_gv_cM_HeroReviveQueue_ActiveListeners = true;
    SoundPlayForPlayer(lp_soundLink, 1, lp_listeningPlayers, 100.0, 0.0);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    Wait(lv_soundtaildelay, c_timeReal);
    libCOMI_gv_cM_HeroReviveQueue_ActiveListeners = false;
    return true;
}

trigger auto_libCOMI_gf_CM_VOResourceInit_Trigger = null;

void libCOMI_gf_CM_VOResourceInit () {
    if (auto_libCOMI_gf_CM_VOResourceInit_Trigger == null) {
        auto_libCOMI_gf_CM_VOResourceInit_Trigger = TriggerCreate("auto_libCOMI_gf_CM_VOResourceInit_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_VOResourceInit_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_VOResourceInit_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cM_VOResourceReqSendButton = DialogControlLastCreated();
    TriggerEnable(libCOMI_gt_CM_VOResourceSent, true);
    TriggerEnable(libCOMI_gt_CM_VOResourceRequest, true);
    return true;
}

void libCOMI_gf_SendMissionTransmission (string lp_transmissionType, bool lp_waitUntilDone, int lp_sourcePlayer) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cM_TransmissionCurrentType = lp_transmissionType;
    libCOMI_gv_cM_TransmissionSource = lp_sourcePlayer;
    TriggerExecute(libCOMI_gt_CM_TransmissionSend, true, lp_waitUntilDone);
}

void libCOMI_gf_SendVictoryTransmission (string lp_mapVictoryTransmission) {
    // Variable Declarations
    int lv_source;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_source = RandomInt(0, PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()));

    // Implementation
    if ((lv_source == 0)) {
        libCOMI_gf_SendMissionTransmission(lp_mapVictoryTransmission, false, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("Victory", false, lv_source);
    }
}

void libCOMI_gf_SendSplitMissionTransmission (string lp_transmissionType, bool lp_waitUntilDone, int lp_primaryPlayer, int lp_sourcePlayer) {
    // Variable Declarations
    int lv_indexPlayer;
    playergroup lv_primaryPlayers;
    playergroup lv_secondaryPlayers;

    // Automatic Variable Declarations
    playergroup auto0346F589_g;

    // Variable Initialization
    lv_primaryPlayers = PlayerGroupEmpty();
    lv_secondaryPlayers = PlayerGroupEmpty();

    // Implementation
    libCOMI_gv_cM_TransmissionPrimaryPlayers = PlayerGroupEmpty();
    libCOMI_gv_cM_TransmissionSecondaryPlayers = PlayerGroupEmpty();
    auto0346F589_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto0346F589_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerStatus(lv_indexPlayer) == c_playerStatusLeft)) {
            continue;
        }

        if ((lv_indexPlayer == lp_primaryPlayer)) {
            PlayerGroupAdd(libCOMI_gv_cM_TransmissionPrimaryPlayers, lv_indexPlayer);
        }
        else {
            PlayerGroupAdd(libCOMI_gv_cM_TransmissionSecondaryPlayers, lv_indexPlayer);
        }
    }
    libCOMI_gf_SendMissionTransmission(lp_transmissionType, lp_waitUntilDone, lp_sourcePlayer);
}

void libCOMI_gf_WaitForMissionTransmission () {
    // Variable Declarations
    int lv_originalCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((TriggerActiveCount(libCOMI_gt_CM_TransmissionSend) == 0)) {
        return ;
    }

    lv_originalCount = libCOMI_gv_cM_TransmissionCount;
    while (!(((lv_originalCount != libCOMI_gv_cM_TransmissionCount) || (libCOMI_gv_cM_TransmissionCurrentType == null)))) {
        Wait(0.0625, c_timeGame);
    }
}

void libCOMI_gf_CM_TransmissionUpdateConvoPlayers (string lp_conversation) {
    // Variable Declarations
    playergroup lv_terranPlayers;
    playergroup lv_zergPlayers;
    playergroup lv_protossPlayers;
    playergroup lv_primaryTerranPlayers;
    playergroup lv_primaryZergPlayers;
    playergroup lv_primaryProtossPlayers;
    playergroup lv_secondaryTerranPlayers;
    playergroup lv_secondaryZergPlayers;
    playergroup lv_secondaryProtossPlayers;
    playergroup lv_alarakPlayers;
    playergroup lv_notAlarakPlayers;
    int lv_indexPlayer;
    string lv_adjutantRace;

    // Automatic Variable Declarations
    playergroup auto6088D53C_g;
    string auto085E9DF9_val;
    string auto11F928C9_val;

    // Variable Initialization
    lv_terranPlayers = PlayerGroupEmpty();
    lv_zergPlayers = PlayerGroupEmpty();
    lv_protossPlayers = PlayerGroupEmpty();
    lv_primaryTerranPlayers = PlayerGroupEmpty();
    lv_primaryZergPlayers = PlayerGroupEmpty();
    lv_primaryProtossPlayers = PlayerGroupEmpty();
    lv_secondaryTerranPlayers = PlayerGroupEmpty();
    lv_secondaryZergPlayers = PlayerGroupEmpty();
    lv_secondaryProtossPlayers = PlayerGroupEmpty();
    lv_alarakPlayers = PlayerGroupEmpty();
    lv_notAlarakPlayers = PlayerGroupEmpty();

    // Implementation
    auto6088D53C_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto6088D53C_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerStatus(lv_indexPlayer) == c_playerStatusLeft)) {
            continue;
        }

        if ((lp_conversation == "acVictory")) {
            ConversationDataLineSetPlayers("acVictory", (libCOMI_gf_CC_CommanderConvoTag(libCOMI_gf_ActiveCommanderForPlayer(libCOMI_gf_CC_PlayerAlly(lv_indexPlayer)))), PlayerGroupSingle(lv_indexPlayer));
        }

        lv_adjutantRace = UserDataGetGameLink("Commanders", libCOMI_gf_CC_CommanderUserInstance(libCOMI_gf_GetPlayerCommanderGameLink(lv_indexPlayer)), "AdjutantRace", 1);
        auto085E9DF9_val = lv_adjutantRace;
        if (auto085E9DF9_val == "ARC@Terr") {
            lv_adjutantRace = "ARC@Terr";
        }
        else if (auto085E9DF9_val == "ARC@Prot") {
            lv_adjutantRace = "ARC@Prot";
        }
        else if (auto085E9DF9_val == "ARC@Zerg") {
            lv_adjutantRace = "ARC@Zerg";
        }
        else {
            lv_adjutantRace = PlayerRace(lv_indexPlayer);
        }
        auto11F928C9_val = lv_adjutantRace;
        if (auto11F928C9_val == "ARC@Terr") {
            PlayerGroupAdd(lv_terranPlayers, lv_indexPlayer);
            if ((PlayerGroupHasPlayer(libCOMI_gv_cM_TransmissionPrimaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_primaryTerranPlayers, lv_indexPlayer);
            }

            if ((PlayerGroupHasPlayer(libCOMI_gv_cM_TransmissionSecondaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_secondaryTerranPlayers, lv_indexPlayer);
            }

        }
        else if (auto11F928C9_val == "ARC@Prot") {
            PlayerGroupAdd(lv_protossPlayers, lv_indexPlayer);
            if ((PlayerGroupHasPlayer(libCOMI_gv_cM_TransmissionPrimaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_primaryProtossPlayers, lv_indexPlayer);
            }

            if ((PlayerGroupHasPlayer(libCOMI_gv_cM_TransmissionSecondaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_secondaryProtossPlayers, lv_indexPlayer);
            }

        }
        else if (auto11F928C9_val == "ARC@Zerg") {
            PlayerGroupAdd(lv_zergPlayers, lv_indexPlayer);
            if ((PlayerGroupHasPlayer(libCOMI_gv_cM_TransmissionPrimaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_primaryZergPlayers, lv_indexPlayer);
            }

            if ((PlayerGroupHasPlayer(libCOMI_gv_cM_TransmissionSecondaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_secondaryZergPlayers, lv_indexPlayer);
            }

        }
        else {
            PlayerGroupAdd(lv_terranPlayers, lv_indexPlayer);
        }
    }
    ConversationDataLineSetPlayers(lp_conversation, ("Protoss"), lv_protossPlayers);
    ConversationDataLineSetPlayers(lp_conversation, ("Terran"), lv_terranPlayers);
    ConversationDataLineSetPlayers(lp_conversation, ("Zerg"), lv_zergPlayers);
    if ((PlayerGroupCount(libCOMI_gv_cM_TransmissionPrimaryPlayers) > 0)) {
        ConversationDataLineSetPlayers(lp_conversation, ("PrimaryProtoss"), lv_primaryProtossPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("PrimaryZerg"), lv_primaryZergPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("PrimaryTerran"), lv_primaryTerranPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("SecondaryProtoss"), lv_secondaryProtossPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("SecondaryZerg"), lv_secondaryZergPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("SecondaryTerran"), lv_secondaryTerranPlayers);
    }

    if ((libCOMI_gf_CC_CurrentMap() == "AC_SlaynPayload")) {
        lv_notAlarakPlayers = libCOMI_gf_GetAlliedCommandersPlayersCopy();
        lv_alarakPlayers = libCOMI_gf_CC_PlayersOfCommander("Alarak");
        libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_alarakPlayers, lv_notAlarakPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("Alarak"), lv_alarakPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("NotAlarak"), lv_notAlarakPlayers);
    }

    if ((libCOMI_gf_CC_CurrentMap() == "AC_BelshirEscort") && (PlayerGroupCount(libCOMI_gf_CC_PlayersOfCommander("Stetmann")) > 0)) {
        ConversationDataLineSetPlayers(lp_conversation, ("Stetmann"), libCOMI_gf_GetAlliedCommandersPlayersCopy());
        ConversationDataLineSetPlayers(lp_conversation, ("NotStetmann"), PlayerGroupSingle(0));
    }

}

bool libCOMI_gf_CM_PlayerHasTransmission (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerStatus(lp_player) != c_playerStatusActive)) {
        return false;
    }

    if ((TransmissionPlayerHasActiveTransmission(lp_player) == false)) {
        return false;
    }

    return true;
}

void libCOMI_gf_CM_SendTransmissionCampaignInternal (bool lp_isPlaceHolder, unit lp_unit, string lp_model, soundlink lp_sound, text lp_speaker, text lp_message, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption, string lp_portraitActor) {
    // Variable Declarations
    int lv_portrait;
    transmissionsource lv_source;
    int lv_localIndex;
    unit lv_oldSpeaker;
    trigger lv_oldTrigger;
    actor lv_talkBubble;
    actor lv_talkRing;
    int lv_ping;
    bool lv_flashOption;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_portrait = c_invalidPortraitId;
    lv_source = TransmissionSource();
    lv_ping = c_invalidPingId;
    lv_flashOption = true;

    // Implementation
    if ((lp_sound == null)) {
        return ;
    }

    libCOMI_gv_cM_SendTransmissionCampaignIndex += 1;
    lv_localIndex = libCOMI_gv_cM_SendTransmissionCampaignIndex;
    lv_oldSpeaker = libCOMI_gv_cM_SendTransmissionCampaignSpeaker;
    libCOMI_gv_cM_SendTransmissionCampaignSpeaker = lp_unit;
    lv_oldTrigger = libCOMI_gv_cM_SendTransmissionCampaignTrigger;
    libCOMI_gv_cM_SendTransmissionCampaignTrigger = TriggerGetCurrent();
    if ((lp_keepPortraitVisible != libCOMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait) && ((lp_model != null) || ((lp_model == null) && (SoundPortraitModel(lp_sound) != null)) || ((lp_isPlaceHolder == true) && (lp_unit != null)))) {
        if ((libNtve_gf_PlayerInCinematicMode(1) == false) && (libNtve_gf_PlayerInStoryMode(1) == false)) {
            lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft);
        }
        else {
            lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft);
        }
    }
    else {
        lv_portrait = c_invalidPortraitId;
    }
    if (((lp_cueSoundOption == libCOMI_ge_MissionTransmissionCueSoundOptions_PlayCueSound) || ((lp_cueSoundOption == libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior) && (libNtve_gf_PlayerInCinematicMode(1) == false) && (lv_portrait != c_invalidPortraitId) && (PortraitVisible(libCOMI_gv_cM_SendTransmissionCampaignPortrait, 1) == false)))) {
        libARRA_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    libCOMI_gv_cM_SendTransmissionCampaignPortrait = lv_portrait;
    if ((libCOMI_gv_cM_SendTransmissionCampaignPortrait != c_invalidPortraitId)) {
        PortraitSetVisible(libCOMI_gv_cM_SendTransmissionCampaignPortrait, PlayerGroupAll(), true, false);
    }

    libCOMI_gv_cM_SendTransmissionCampaignPlayingTick = 3;
    if ((lp_unit == null)) {
        if ((lv_portrait == c_invalidPortraitId)) {
            lv_source = TransmissionSource();
        }
        else {
            if ((lp_model == null)) {
                lv_source = TransmissionSourceFromModel(null);
            }
            else {
                lv_source = TransmissionSourceFromModel(lp_model);
            }
        }
    }
    else {
        if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
            lv_flashOption = false;
        }
        else {
            lv_flashOption = true;
        }
        if ((lp_isPlaceHolder == false)) {
            lv_source = TransmissionSourceFromUnit(lp_unit, lv_flashOption, false, "Talk");
        }
        else {
            if ((lp_model == null)) {
                if ((PlayerType(UnitGetOwner(lp_unit)) == c_playerTypeUser)) {
                    lv_source = TransmissionSourceFromUnit(lp_unit, lv_flashOption, true, "Talk");
                }

            }
            else {
                lv_source = TransmissionSourceFromModel(lp_model);
            }
        }
    }
    if ((lp_unit != null) && (lp_unit != lv_oldSpeaker) && (UnitIsAlive(lp_unit) == true)) {
        if ((libCOMI_gv_cM_SendTransmissionCampaignChatBubbleOn == true)) {
            if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
                if (((UnitGetType(lp_unit) == "ARC@Marine") || (UnitGetType(lp_unit) == "ARC@WarPig") || (UnitGetType(lp_unit) == "ARC@MengskMarine") || (UnitGetType(lp_unit) == "ARC@Medic") || (UnitGetType(lp_unit) == "ARC@Firebat") || (UnitGetType(lp_unit) == "ARC@Marauder"))) {
                    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelAdditionHarness TalkIconBubble {Overhead 0} 0.000000,0.000000,0.500000");
                }
                else {
                    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelAdditionHarness TalkIconBubble {Overhead 0} 0.000000,0.000000,0.600000");
                }
            }
            else {
                ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelAdditionHarness TalkIconBubble {Overhead 0} 0.000000,0.000000,0.600000");
            }
            lv_talkBubble = ActorFrom("::LastCreatedActual");
            libNtve_gf_AttachModelToUnit(lp_unit, "TalkIconRing", "Ref_Origin");
            lv_talkRing = libNtve_gf_ActorLastCreated();
        }

        if ((libNtve_gf_UnitIsVisibleToPlayer(lp_unit, PlayerGroupPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), 1)) == true)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "TalkIcon", PointWithOffset(UnitGetPosition(lp_unit), 0.5, 3.5), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 2.0, 270.0);
            lv_ping = PingLastCreated();
            PingSetScale(PingLastCreated(), 0.3);
        }

    }

    TransmissionSendAdvanced(PlayerGroupAll(), lv_source, lv_portrait, lp_portraitActor, "Talk", lp_sound, lp_speaker, lp_message, lp_duration, lp_durationType, lp_waitUntilDone);
    if ((lp_waitUntilDone == false)) {
        libCOMI_gf_CM_SendTransmissionCampaignCleanUp(TransmissionLastSent(), lp_keepPortraitVisible, lv_portrait, lv_talkBubble, lv_ping, lv_localIndex);
    }
    else {
        libCOMI_gf_CM_SendTransmissionCampaignCleanUp(c_invalidTransmissionId, lp_keepPortraitVisible, lv_portrait, lv_talkBubble, lv_ping, lv_localIndex);
    }
}

trigger auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_Trigger = null;
int auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_transmission;
int auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible;
int auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_portrait;
actor auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_talkIcon;
int auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_ping;
int auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_localIndex;

void libCOMI_gf_CM_SendTransmissionCampaignCleanUp (int lp_transmission, int lp_keepPortraitVisible, int lp_portrait, actor lp_talkIcon, int lp_ping, int lp_localIndex) {
    auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_transmission = lp_transmission;
    auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible = lp_keepPortraitVisible;
    auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_portrait = lp_portrait;
    auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_talkIcon = lp_talkIcon;
    auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_ping = lp_ping;
    auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_localIndex = lp_localIndex;

    if (auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_Trigger == null) {
        auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_Trigger = TriggerCreate("auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_TriggerFunc (bool testConds, bool runActions) {
    int lp_transmission = auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_transmission;
    int lp_keepPortraitVisible = auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible;
    int lp_portrait = auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_portrait;
    actor lp_talkIcon = auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_talkIcon;
    int lp_ping = auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_ping;
    int lp_localIndex = auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_localIndex;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_transmission != c_invalidTransmissionId)) {
        TransmissionWait(lp_transmission, 0.0);
    }

    Wait(0.75, c_timeReal);
    if ((lp_localIndex != libCOMI_gv_cM_SendTransmissionCampaignIndex)) {
        if ((libCOMI_gv_cM_SendTransmissionCampaignPortrait != lp_portrait) && (lp_portrait != c_invalidPortraitId) && (lp_keepPortraitVisible == libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter)) {
            PortraitSetModel(lp_portrait, "StaticPortrait", false);
            PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
        }

        return true;
    }

    libCOMI_gv_cM_SendTransmissionCampaignIndex = 0;
    libCOMI_gv_cM_SendTransmissionCampaignSpeaker = null;
    TriggerExecute(libCOMI_gt_CM_SendTransmissionCampaignTick, true, false);
    if ((lp_keepPortraitVisible == libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter) && (lp_portrait != c_invalidPortraitId)) {
        PortraitSetModel(lp_portrait, "StaticPortrait", false);
        PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    }

    if ((lp_talkIcon != null)) {
        libNtve_gf_KillModel(lp_talkIcon);
    }

    if ((lp_ping != c_invalidPingId)) {
        PingDestroy(lp_ping);
    }

    return true;
}

void libCOMI_gf_HideCampaignTransmissionPortrait () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_HideAllCinematicPortraits(PlayerGroupAll());
}

void libCOMI_gf_TurnTransmissionOptionsOnOffCampaign (int lp_option, bool lp_onOff) {
    // Automatic Variable Declarations
    int auto664A67F5_val;

    // Implementation
    auto664A67F5_val = lp_option;
    if (auto664A67F5_val == libCOMI_ge_MissionTransmissionOptions_ChatBubble) {
        libCOMI_gv_cM_SendTransmissionCampaignChatBubbleOn = lp_onOff;
    }
    else {
    }
}

fixed libCOMI_gf_ConvesationLineDuration (string lp_conversationLine) {
    // Variable Declarations
    soundlink lv_sound;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);

    // Implementation
    lv_sound = SoundLink(ConversationDataGetSound(lp_conversationLine, true), c_soundIndexAny);
    return SoundLengthSync(lv_sound);
}

void libCOMI_gf_SendTransmissionCampaign (unit lp_unit, string lp_conversationLine, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption) {
    // Variable Declarations
    soundlink lv_sound;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);

    // Implementation
    lv_sound = SoundLink(ConversationDataGetSound(lp_conversationLine, true), c_soundIndexAny);
    if ((lv_sound == null)) {
        return ;
    }

    libCOMI_gf_CM_SendTransmissionCampaignInternal(false, lp_unit, null, lv_sound, null, null, lp_durationType, lp_duration, lp_waitUntilDone, lp_keepPortraitVisible, lp_cueSoundOption, CatalogFieldValueGet(c_gameCatalogSound, ConversationDataGetSound(lp_conversationLine, true), "AssetArray[" + IntToString(0) + "].PortraitActor", c_playerAny));
}

void libCOMI_gf_SendTransmissionCampaignPlaceHolder (unit lp_unit, string lp_model, text lp_speaker, text lp_message, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption) {
    // Variable Declarations
    soundlink lv_sound;
    string lv_portraitActor;

    // Automatic Variable Declarations
    string auto41A5E975_val;

    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_portraitActor = "";

    // Implementation
    auto41A5E975_val = UnitGetType(lp_unit);
    if (auto41A5E975_val == "ARC@KerriganVoidUlnar02") {
        lv_portraitActor = "KerriganPrimalPortrait";
    }
    else if (auto41A5E975_val == "ARC@KerriganVoidBurrowed") {
        lv_portraitActor = "KerriganPrimalPortrait";
    }
    else if (auto41A5E975_val == "ARC@KerriganEpilogue02") {
        lv_portraitActor = "KerriganPrimalPortrait";
    }
    else {
    }
    lv_sound = SoundLink("PlaceholderSoundFile", c_soundIndexAny);
    libCOMI_gf_CM_SendTransmissionCampaignInternal(true, lp_unit, lp_model, lv_sound, lp_speaker, (StringExternal("Param/Value/lib_COMI_19071613") + lp_message), c_transmissionDurationSet, lp_duration, lp_waitUntilDone, lp_keepPortraitVisible, lp_cueSoundOption, lv_portraitActor);
}

void libCOMI_gf_EnableDisableCoopAIWavePings (bool lp_enableDisable) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cM_CoopAI_WavePingShowAll = lp_enableDisable;
}

trigger auto_libCOMI_gf_EnableDisableCoopAIWavePing_Trigger = null;
wave auto_libCOMI_gf_EnableDisableCoopAIWavePing_lp_attackWave;
bool auto_libCOMI_gf_EnableDisableCoopAIWavePing_lp_enableDisable;

void libCOMI_gf_EnableDisableCoopAIWavePing (wave lp_attackWave, bool lp_enableDisable) {
    auto_libCOMI_gf_EnableDisableCoopAIWavePing_lp_attackWave = lp_attackWave;
    auto_libCOMI_gf_EnableDisableCoopAIWavePing_lp_enableDisable = lp_enableDisable;

    if (auto_libCOMI_gf_EnableDisableCoopAIWavePing_Trigger == null) {
        auto_libCOMI_gf_EnableDisableCoopAIWavePing_Trigger = TriggerCreate("auto_libCOMI_gf_EnableDisableCoopAIWavePing_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_EnableDisableCoopAIWavePing_Trigger, false, false);
}

bool auto_libCOMI_gf_EnableDisableCoopAIWavePing_TriggerFunc (bool testConds, bool runActions) {
    wave lp_attackWave = auto_libCOMI_gf_EnableDisableCoopAIWavePing_lp_attackWave;
    bool lp_enableDisable = auto_libCOMI_gf_EnableDisableCoopAIWavePing_lp_enableDisable;

    // Variable Declarations
    int lv_attackWavePlayerIterPrimary;
    int lv_attackWavePingIterPrimary;

    // Automatic Variable Declarations
    fixed autoF7E66F8C_at;

    // Variable Initialization

    // Implementation
    autoF7E66F8C_at = 0;
    while (!((lp_attackWave != null) && (AIWaveGetUnits(lp_attackWave) != UnitGroupEmpty()) && (AIWaveGetUnits(lp_attackWave) != null) && (UnitGroupCount(AIWaveGetUnits(lp_attackWave), c_unitCountAlive) > 0)) && autoF7E66F8C_at <= 90.0) {
        Wait(0.1, c_timeGame);
        autoF7E66F8C_at = autoF7E66F8C_at + 0.1;
    }
    UnitGroupAddUnitGroup(libCOMI_gv_cM_CoopAI_DontPingUnits, AIWaveGetUnits(lp_attackWave));
    while (!((lp_attackWave == null))) {
        Wait(1.0, c_timeGame);
    }
    if ((lv_attackWavePlayerIterPrimary >= 0) && (lv_attackWavePingIterPrimary >= 0)) {
        libCOMI_gv_cM_CoopAI_DontPingWaves[lv_attackWavePlayerIterPrimary][lv_attackWavePingIterPrimary] = false;
    }

    return true;
}

void libCOMI_gf_EnableDisableCoopAIPlayerAttackPings (playergroup lp_players, bool lp_enableDisable) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_enableDisable == false)) {
        libNtve_gf_AddPlayerGroupToPlayerGroup(lp_players, libCOMI_gv_cM_CoopAI_DontPingPlayers);
    }
    else {
        libNtve_gf_RemovePlayerGroupFromPlayerGroup(lp_players, libCOMI_gv_cM_CoopAI_DontPingPlayers);
    }
}

bool libCOMI_gf_CM_CoopAI_PingWorthyUnit (unit lp_pingableUnit) {
    // Variable Declarations
    string lv_unitTypeIter;
    string lv_pingableUnitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_pingableUnitType = UnitGetType(lp_pingableUnit);
    return true;
}

bool libCOMI_gf_VU_isPingException (string lp_unit) {
    // Variable Declarations
    string lv_pingWorthlessUnitTypeIter;
    int lv_index;

    // Automatic Variable Declarations
    int auto968A26F4_ae;
    const int auto968A26F4_ai = 1;

    // Variable Initialization

    // Implementation
    auto968A26F4_ae = UserDataFieldValueCount("CoopAIPingWorthlessUnits", "Unit");
    lv_index = 1;
    for ( ; ( (auto968A26F4_ai >= 0 && lv_index <= auto968A26F4_ae) || (auto968A26F4_ai < 0 && lv_index >= auto968A26F4_ae) ) ; lv_index += auto968A26F4_ai ) {
        lv_pingWorthlessUnitTypeIter = UserDataGetUnit("CoopAIPingWorthlessUnits", UserDataInstance("CoopAIPingWorthlessUnits", lv_index), "Unit", 1);
        if ((lv_pingWorthlessUnitTypeIter == null)) {
            break;
        }

        if ((lp_unit == lv_pingWorthlessUnitTypeIter)) {
            continue;
        }
        else {
            return true;
        }
    }
    return false;
}

bool libCOMI_gf_UnitisValidforanAttackWavePing (unit lp_pingableUnit) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gf_CM_CoopAI_PingWorthyUnit(lp_pingableUnit);
}

int libCOMI_gf_PingTypeFromObjectiveType (bool lp_objectiveType) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_objectiveType == true)) {
        return libCOMI_ge_ObjectivePingType_Primary;
    }

    return libCOMI_ge_ObjectivePingType_Secondary;
}

trigger auto_libCOMI_gf_AttentionGrabbingObjectivePing_Trigger = null;
point auto_libCOMI_gf_AttentionGrabbingObjectivePing_lp_pingLocation;

void libCOMI_gf_AttentionGrabbingObjectivePing (point lp_pingLocation) {
    auto_libCOMI_gf_AttentionGrabbingObjectivePing_lp_pingLocation = lp_pingLocation;

    if (auto_libCOMI_gf_AttentionGrabbingObjectivePing_Trigger == null) {
        auto_libCOMI_gf_AttentionGrabbingObjectivePing_Trigger = TriggerCreate("auto_libCOMI_gf_AttentionGrabbingObjectivePing_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_AttentionGrabbingObjectivePing_Trigger, false, false);
}

bool auto_libCOMI_gf_AttentionGrabbingObjectivePing_TriggerFunc (bool testConds, bool runActions) {
    point lp_pingLocation = auto_libCOMI_gf_AttentionGrabbingObjectivePing_lp_pingLocation;

    // Variable Declarations
    int lv_scaleIter;
    fixed lv_pingScale;
    int lv_spiningShrinkingPing;

    // Automatic Variable Declarations
    const int autoE898793D_ae = 20;
    const int autoE898793D_ai = -1;

    // Variable Initialization
    lv_spiningShrinkingPing = c_invalidPingId;

    // Implementation
    libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), lp_pingLocation, 270.0, "PingObjective", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    lv_spiningShrinkingPing = PingLastCreated();
    PingSetScale(lv_spiningShrinkingPing, 3.0);
    lv_scaleIter = 40;
    for ( ; ( (autoE898793D_ai >= 0 && lv_scaleIter <= autoE898793D_ae) || (autoE898793D_ai < 0 && lv_scaleIter >= autoE898793D_ae) ) ; lv_scaleIter += autoE898793D_ai ) {
        lv_pingScale = (lv_scaleIter * 0.1);
        PingSetScale(lv_spiningShrinkingPing, lv_pingScale);
        PingSetRotation(lv_spiningShrinkingPing, (360 - (ModF(lv_scaleIter, 10.0) * 36)));
        Wait(0.1, c_timeReal);
    }
    libCOMI_gf_DestroyPingCoop(lv_spiningShrinkingPing);
    return true;
}

void libCOMI_gf_CreateObjectivePing (bool lp_objectiveType, point lp_position, text lp_tooltip) {
    // Automatic Variable Declarations
    // Deprecated
    libCOMI_gf_CreateObjectivePingAC(libCOMI_gf_PingTypeFromObjectiveType(lp_objectiveType), lp_position, lp_tooltip);
}

void libCOMI_gf_CreateObjectivePingAC (int lp_objectiveType, point lp_position, text lp_tooltip) {
    // Variable Declarations
    color lv_color;
    fixed lv_scale;
    string lv_model;
    fixed lv_angle;

    // Automatic Variable Declarations
    int auto7500AD90_val;

    // Variable Initialization
    lv_color = Color(0,0,0);

    // Implementation
    auto7500AD90_val = lp_objectiveType;
    if (auto7500AD90_val == libCOMI_ge_ObjectivePingType_Primary) {
        lv_color = Color(0.00, 100.00, 0.00);
        lv_scale = 1.0;
        lv_model = "PingObjective";
        lv_angle = 270.0;
    }
    else if (auto7500AD90_val == libCOMI_ge_ObjectivePingType_Secondary) {
        lv_color = Color(100.00, 100.00, 0.00);
        lv_scale = 0.4;
        lv_model = "PingTriangle";
        lv_angle = 90.0;
    }
    else if (auto7500AD90_val == libCOMI_ge_ObjectivePingType_POI) {
        lv_color = Color(0.00, 100.00, 0.00);
        lv_scale = 0.4;
        lv_model = "PingSimple";
        lv_angle = 90.0;
    }
    else {
    }
    libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), lp_position, lv_angle, lv_model, lv_color, 0.0);
    PingSetScale(PingLastCreated(), lv_scale);
    PingSetTooltip(PingLastCreated(), lp_tooltip);
    TriggerExecute(libCOMI_gt_VoidPingSound, true, false);
}

trigger auto_libCOMI_gf_PingMinimapCampaign_Trigger = null;
playergroup auto_libCOMI_gf_PingMinimapCampaign_lp_players;
point auto_libCOMI_gf_PingMinimapCampaign_lp_pos;
fixed auto_libCOMI_gf_PingMinimapCampaign_lp_dur;
color auto_libCOMI_gf_PingMinimapCampaign_lp_color;

void libCOMI_gf_PingMinimapCampaign (playergroup lp_players, point lp_pos, fixed lp_dur, color lp_color) {
    auto_libCOMI_gf_PingMinimapCampaign_lp_players = lp_players;
    auto_libCOMI_gf_PingMinimapCampaign_lp_pos = lp_pos;
    auto_libCOMI_gf_PingMinimapCampaign_lp_dur = lp_dur;
    auto_libCOMI_gf_PingMinimapCampaign_lp_color = lp_color;

    if (auto_libCOMI_gf_PingMinimapCampaign_Trigger == null) {
        auto_libCOMI_gf_PingMinimapCampaign_Trigger = TriggerCreate("auto_libCOMI_gf_PingMinimapCampaign_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_PingMinimapCampaign_Trigger, false, false);
}

bool auto_libCOMI_gf_PingMinimapCampaign_TriggerFunc (bool testConds, bool runActions) {
    playergroup lp_players = auto_libCOMI_gf_PingMinimapCampaign_lp_players;
    point lp_pos = auto_libCOMI_gf_PingMinimapCampaign_lp_pos;
    fixed lp_dur = auto_libCOMI_gf_PingMinimapCampaign_lp_dur;
    color lp_color = auto_libCOMI_gf_PingMinimapCampaign_lp_color;

    // Automatic Variable Declarations
    playergroup autoC51461E9_g;
    int autoC51461E9_var;
    string autoC47256CC_val;

    // Implementation
    libCOMI_gf_CreatePingFacingAngleCoop(lp_players, lp_pos, 270.0, "PingAlert", lp_color, lp_dur);
    autoC51461E9_g = lp_players;
    autoC51461E9_var = -1;
    while (true) {
        autoC51461E9_var = PlayerGroupNextPlayer(autoC51461E9_g, autoC51461E9_var);
        if (autoC51461E9_var < 0) { break; }
        autoC47256CC_val = PlayerRace(autoC51461E9_var);
        if (autoC47256CC_val == "ARC@Prot") {
            SoundPlay(SoundLink("UI_TerranPing", -1), lp_players, 100.0, 0.0);
        }
        else if (autoC47256CC_val == "ARC@Terr") {
            SoundPlay(SoundLink("UI_TerranPing", -1), lp_players, 100.0, 0.0);
        }
        else if (autoC47256CC_val == "ARC@Zerg") {
            SoundPlay(SoundLink("UI_ZergWarningPing", -1), lp_players, 100.0, 0.0);
        }
        else {
        }
    }
    Wait(lp_dur, c_timeGame);
    libCOMI_gf_DestroyPingCoop(PingLastCreated());
    return true;
}

void libCOMI_gf_DestroyPingCoop (int lp_ping) {
    // Automatic Variable Declarations
    // Implementation
    PingDestroy(lp_ping);
}

void libCOMI_gf_CreatePingFacingAngleCoop (playergroup lp_players, point lp_position, fixed lp_angle, string lp_model, color lp_color, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreatePingFacingAngle(lp_players, lp_model, lp_position, lp_color, lp_duration, lp_angle);
    if ((true)) {
        PingSetUsePlayerVision(PingLastCreated(), true);
    }

}

void libCOMI_gf_CreatePingWithPointFacingCoop (playergroup lp_players, string lp_model, point lp_position, color lp_color, fixed lp_duration, int lp_playerId) {
    // Automatic Variable Declarations
    // Implementation
    PingCreateWithPlayerId(lp_players, lp_model, lp_position, lp_color, lp_duration, lp_playerId);
    if ((true)) {
        PingSetUsePlayerVision(PingLastCreated(), true);
    }

}

void libCOMI_gf_CreatePingCoop (playergroup lp_players, string lp_model, point lp_position, color lp_color, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CreatePingWithPointFacingCoop(lp_players, lp_model, lp_position, lp_color, lp_duration, 0);
}

void libCOMI_gf_ShowHidePingCoop (int lp_ping, bool lp_visible) {
    // Automatic Variable Declarations
    // Implementation
    PingSetVisible(lp_ping, lp_visible);
}

void libCOMI_gf_CreateAlertAtPointCampaign (string lp_alertType, text lp_text, string lp_icon, point lp_point) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto30CC37A9_g;

    // Variable Initialization

    // Implementation
    auto30CC37A9_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto30CC37A9_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        UIAlertPoint(lp_alertType, lv_indexPlayer, lp_text, lp_icon, lp_point);
    }
}

void libCOMI_gf_CreateAlertAtUnitCampaign (string lp_alertType, text lp_text, string lp_icon, unit lp_unit) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto0BE3493B_g;

    // Variable Initialization

    // Implementation
    auto0BE3493B_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto0BE3493B_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        UIAlertUnit(lp_alertType, lv_indexPlayer, lp_text, lp_icon, lp_unit);
    }
}

void libCOMI_gf_CC_SaveAllTransitionData () {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoB6E4376E_g;

    // Variable Initialization

    // Implementation
    autoB6E4376E_g = libCOMI_gf_GetHumanPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoB6E4376E_g, lv_player);
        if (lv_player < 0) { break; }
        libCOMI_gf_CC_OpenCoopBank(lv_player);
        libCOMI_gf_CC_SaveTransitionVars(lv_player, libCOMI_gv_cC_CoopBank[lv_player]);
        libCOMI_gf_CC_SaveCoopBank(lv_player);
    }
}

void libCOMI_gf_CC_LoadAllTransitionData () {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoB4A79B02_g;

    // Variable Initialization

    // Implementation
    autoB4A79B02_g = libCOMI_gf_GetHumanPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoB4A79B02_g, lv_player);
        if (lv_player < 0) { break; }
        if ((libCOMI_gf_CC_CoopBankExists(lv_player) == false)) {
            TextExpressionSetToken("Param/Expression/lib_COMI_36BB0BCB", "A", IntToText(lv_player));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_36BB0BCB"), false);
        }
        else {
            libCOMI_gf_CC_OpenCoopBank(lv_player);
            if ((libCOMI_gv_cCX_PlayerBankVersion[lv_player] < libCOMI_gv_cC_BankVersion)) {
                TextExpressionSetToken("Param/Expression/lib_COMI_E6F1C8B8", "A", IntToText(lv_player));
                TextExpressionSetToken("Param/Expression/lib_COMI_E6F1C8B8", "B", IntToText(libCOMI_gv_cCX_PlayerBankVersion[lv_player]));
                TextExpressionSetToken("Param/Expression/lib_COMI_E6F1C8B8", "C", IntToText(libCOMI_gv_cC_BankVersion));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_E6F1C8B8"), false);
                libCOMI_gf_ResetCampaignData(lv_player);
            }

        }
        libCOMI_gf_CC_LoadTransitionVars(lv_player, libCOMI_gv_cC_CoopBank[lv_player]);
    }
}

void libCOMI_gf_ResetCampaignData (int lp_player) {
    // Variable Declarations
    bank lv_bank;
    string lv_section;

    // Automatic Variable Declarations
    const int auto30F31E38_ae = 0;
    int auto30F31E38_var;

    // Variable Initialization
    lv_bank = libCOMI_gv_cC_CoopBank[lp_player];
    lv_section = "";

    // Implementation
    auto30F31E38_var = (BankSectionCount(lv_bank) - 1);
    for ( ; auto30F31E38_var <= auto30F31E38_ae; auto30F31E38_var += 1 ) {
        lv_section = BankSectionName(lv_bank, auto30F31E38_var);
        BankSectionRemove(lv_bank, lv_section);
    }
}

void libCOMI_gf_CC_OpenCoopBank (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv_cC_CoopBank[lp_player] != null)) {
        return ;
    }

    BankLoad(libCOMI_gv_cC_CoopBankName, lp_player);
    libCOMI_gv_cC_CoopBank[lp_player] = BankLastCreated();
    libCOMI_gv_cCX_PlayerBankVersion[lp_player] = libCOMI_gf_CC_LoadTransitionVarInteger(libCOMI_gv_cC_CoopBank[lp_player], "INFO", "BANK_VERSION", 0);
}

bool libCOMI_gf_CC_CoopBankExists (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return BankExists(libCOMI_gv_cC_CoopBankName, lp_player);
}

void libCOMI_gf_CC_SaveCoopBank (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv_cC_CoopBank[lp_player] == null)) {
        return ;
    }

    libCOMI_gf_CC_SaveTransitionVarInteger(libCOMI_gv_cC_CoopBank[lp_player], "INFO", "BANK_VERSION", libCOMI_gv_cC_BankVersion, 0);
    BankSave(libCOMI_gv_cC_CoopBank[lp_player]);
}

int libCOMI_gf_CC_LoadTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_bank == null) || (BankKeyExists(lp_bank, lp_section, lp_key) == false))) {
        return lp_default;
    }
    else {
        return BankValueGetAsInt(lp_bank, lp_section, lp_key);
    }
}

bool libCOMI_gf_CC_LoadTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_bank == null) || (BankKeyExists(lp_bank, lp_section, lp_key) == false))) {
        return lp_default;
    }
    else {
        return BankValueGetAsFlag(lp_bank, lp_section, lp_key);
    }
}

string libCOMI_gf_CC_LoadTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_bank == null) || (BankKeyExists(lp_bank, lp_section, lp_key) == false))) {
        return lp_default;
    }
    else {
        return BankValueGetAsString(lp_bank, lp_section, lp_key);
    }
}

void libCOMI_gf_CC_SaveTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_value, int lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromInt(lp_bank, lp_section, lp_key, lp_value);
    }
}

void libCOMI_gf_CC_SaveTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_value, bool lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromFlag(lp_bank, lp_section, lp_key, lp_value);
    }
}

void libCOMI_gf_CC_SaveTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_value, string lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromString(lp_bank, lp_section, lp_key, lp_value);
    }
}

void libCOMI_gf_CC_SaveTransitionVars (int lp_player, bank lp_targetBank) {
    // Variable Declarations
    int lv_masteryIndex;
    string lv_commander;
    int lv_commanderIndex;
    string lv_commanderName;

    // Automatic Variable Declarations
    int autoBD493C5F_ae;
    const int autoBD493C5F_ai = 1;
    const int auto20EB0272_ae = libCOMI_gv_cCC_MASTERIES_PER_COMMANDER;
    const int auto20EB0272_ai = 1;

    // Variable Initialization
    lv_commanderName = "";

    // Implementation
    libCOMI_gf_CC_SaveTransitionVarInteger(lp_targetBank, "INFO", "BANK_VERSION", 1, 0);
    libCOMI_gf_CC_SaveTransitionVarString(lp_targetBank, "Player", "commander", (libCOMI_gv_cCX_PlayerCommander[lp_player]), "");
    autoBD493C5F_ae = UserDataInstanceCount("Commanders");
    lv_commanderIndex = 1;
    for ( ; ( (autoBD493C5F_ai >= 0 && lv_commanderIndex <= autoBD493C5F_ae) || (autoBD493C5F_ai < 0 && lv_commanderIndex >= autoBD493C5F_ae) ) ; lv_commanderIndex += autoBD493C5F_ai ) {
        lv_commander = UserDataInstance("Commanders", lv_commanderIndex);
        lv_commanderName = (lv_commander);
        libCOMI_gf_CC_SaveTransitionVarInteger(lp_targetBank, lv_commanderName, "prestige", DataTableGetInt(true, libCOMI_gf_CC_PrestigeCommanderTableKey(lv_commander, lp_player)), 0);
        libCOMI_gf_CC_SaveTransitionVarInteger(lp_targetBank, lv_commanderName, "experience", libCOMI_gv_cCX_PlayerExperience[lp_player][lv_commanderIndex], 0);
        libCOMI_gf_CC_SaveTransitionVarInteger(lp_targetBank, lv_commanderName, "level", libCOMI_gv_cC_PlayerLevel[lp_player][lv_commanderIndex], 0);
        lv_masteryIndex = 1;
        for ( ; ( (auto20EB0272_ai >= 0 && lv_masteryIndex <= auto20EB0272_ae) || (auto20EB0272_ai < 0 && lv_masteryIndex >= auto20EB0272_ae) ) ; lv_masteryIndex += auto20EB0272_ai ) {
            libCOMI_gf_CC_SaveTransitionVarInteger(lp_targetBank, lv_commanderName, ("Mastery" + IntToString(lv_masteryIndex)), libCOMI_gv_cCX_PlayerMasteryPointsSpent[lp_player][lv_commanderIndex][lv_masteryIndex], 0);
        }
    }
}

void libCOMI_gf_CC_LoadTransitionVars (int lp_player, bank lp_sourceBank) {
    // Variable Declarations
    int lv_masteryIndex;
    string lv_commander;
    int lv_commanderIndex;
    string lv_commanderName;
    int lv_commanderPrestige;
    int lv_commanderLevel;
    int lv_commanderExperience;

    // Automatic Variable Declarations
    int autoD977FBC8_ae;
    const int autoD977FBC8_ai = 1;
    const int auto59C2B3AB_ae = libCOMI_gv_cCC_MASTERIES_PER_COMMANDER;
    const int auto59C2B3AB_ai = 1;

    // Variable Initialization
    lv_commanderName = "";

    // Implementation
    libCOMI_gv_cCX_PlayerCommander[lp_player] = (libCOMI_gf_CC_LoadTransitionVarString(lp_sourceBank, "Player", "commander", ""));
    autoD977FBC8_ae = UserDataInstanceCount("Commanders");
    lv_commanderIndex = 1;
    for ( ; ( (autoD977FBC8_ai >= 0 && lv_commanderIndex <= autoD977FBC8_ae) || (autoD977FBC8_ai < 0 && lv_commanderIndex >= autoD977FBC8_ae) ) ; lv_commanderIndex += autoD977FBC8_ai ) {
        lv_commander = UserDataInstance("Commanders", lv_commanderIndex);
        lv_commanderName = (lv_commander);
        lv_commanderPrestige = libCOMI_gf_CC_LoadTransitionVarInteger(lp_sourceBank, lv_commanderName, "prestige", 1);
        lv_commanderLevel = libCOMI_gf_CC_LoadTransitionVarInteger(lp_sourceBank, lv_commanderName, "level", 15);
        lv_commanderExperience = libCOMI_gf_CC_LoadTransitionVarInteger(lp_sourceBank, lv_commanderName, "experience", 999999);
        DataTableSetInt(true, libCOMI_gf_CC_PrestigeCommanderTableKey(lv_commander, lp_player), lv_commanderPrestige);
        libCOMI_gf_CC_PlayerExperienceSetToLevel(lp_player, 15, lv_commander);
        libCOMI_gf_CC_PlayerLevelSet(lp_player, 15, lv_commander);
        lv_masteryIndex = 1;
        for ( ; ( (auto59C2B3AB_ai >= 0 && lv_masteryIndex <= auto59C2B3AB_ae) || (auto59C2B3AB_ai < 0 && lv_masteryIndex >= auto59C2B3AB_ae) ) ; lv_masteryIndex += auto59C2B3AB_ai ) {
            libCOMI_gv_cCX_PlayerMasteryPointsSpent[lp_player][lv_commanderIndex][lv_masteryIndex] = libCOMI_gf_CC_LoadTransitionVarInteger(lp_sourceBank, lv_commanderName, ("Mastery" + IntToString(lv_masteryIndex)), 15);
        }
    }
}

fixed libCOMI_gf_ResourcesRadius () {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetFixed("MissionSettings", "CurrentMission", "ResourcesRadius", 1);
}

fixed libCOMI_gf_SafetyRadius () {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetFixed("MissionSettings", "CurrentMission", "SafetyRadius", 1);
}

string libCOMI_gf_CC_CurrentMap () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cC_CurrentMap;
}

void libCOMI_gf_SetCurrentMap (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cC_CurrentMap = lp_map;
}

string libCOMI_gf_CC_MapAchievementTerm (string lp_map, int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return null;
    }

    return UserDataGetGameLink("Maps", libCOMI_gf_CC_MapUserDataInstance(lp_map), "CompletionAchievementTerms", libCOMI_gf_CC_DifficultyIndex(lp_difficulty));
}

string libCOMI_gf_CC_CampaignMapFile (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return "";
    }

    return CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "File", libCOMI_gv_cCC_DISREGARDPLAYER);
}

text libCOMI_gf_CC_CampaignMapName (string lp_map, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_COMI_0D78EA39");
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "Name", lp_player));
}

string libCOMI_gf_CC_MapScoreStatistic (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Maps", libCOMI_gf_CC_MapUserDataInstance(lp_map), "ScoreStatistic", 1);
}

string libCOMI_gf_CC_MapUserDataInstance (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "UserReference", libCOMI_gv_cCC_DISREGARDPLAYER));
}

bool libCOMI_gf_PlayerInCinematicModeCampaign () {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto26F8757F_g;

    // Variable Initialization

    // Implementation
    auto26F8757F_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto26F8757F_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) == c_playerTypeUser) && (libNtve_gf_PlayerInCinematicMode(lv_indexPlayer) == false)) {
            return false;
        }

    }
    return true;
}

void libCOMI_gf_SetScreenModeCoop (int lp_mode, fixed lp_duration, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv_cM_ScreenMode[lp_player] == c_uiModeConsole) && (lp_mode != c_uiModeConsole)) {
        libCOMI_gf_CU_GPVisibilityAutoUpdate(false, lp_player, lp_duration);
    }
    else if ((libCOMI_gv_cM_ScreenMode[lp_player] != c_uiModeConsole) && (lp_mode == c_uiModeConsole)) {
        libCOMI_gf_CU_GPVisibilityAutoUpdate(true, lp_player, lp_duration);
    }
    UISetMode(PlayerGroupSingle(lp_player), lp_mode, lp_duration);
    libCOMI_gv_cM_ScreenMode[lp_player] = lp_mode;
}

void libCOMI_gf_CinematicModeCampaign (bool lp_onOff, fixed lp_duration, bool lp_waitOptions) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_onOff == true)) {
        libCOMI_gv_cM_InCinematic = true;
    }
    else {
        libCOMI_gv_cM_InCinematic = false;
    }
    if ((lp_waitOptions == false)) {
        libCOMI_gf_CM_CinematicModeNoWait(lp_onOff, lp_duration);
    }
    else {
        libCOMI_gf_CM_CinematicModeInternal(lp_onOff, lp_duration);
    }
}

trigger auto_libCOMI_gf_CM_CinematicModeNoWait_Trigger = null;
bool auto_libCOMI_gf_CM_CinematicModeNoWait_lp_onOff;
fixed auto_libCOMI_gf_CM_CinematicModeNoWait_lp_duration;

void libCOMI_gf_CM_CinematicModeNoWait (bool lp_onOff, fixed lp_duration) {
    auto_libCOMI_gf_CM_CinematicModeNoWait_lp_onOff = lp_onOff;
    auto_libCOMI_gf_CM_CinematicModeNoWait_lp_duration = lp_duration;

    if (auto_libCOMI_gf_CM_CinematicModeNoWait_Trigger == null) {
        auto_libCOMI_gf_CM_CinematicModeNoWait_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CinematicModeNoWait_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CinematicModeNoWait_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CinematicModeNoWait_TriggerFunc (bool testConds, bool runActions) {
    bool lp_onOff = auto_libCOMI_gf_CM_CinematicModeNoWait_lp_onOff;
    fixed lp_duration = auto_libCOMI_gf_CM_CinematicModeNoWait_lp_duration;

    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CM_CinematicModeInternal(lp_onOff, lp_duration);
    return true;
}

void libCOMI_gf_CM_CinematicModeInternal (bool lp_onOff, fixed lp_duration) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto7BC2F114_g;
    playergroup autoA04AE8FB_g;
    playergroup auto311CBA6C_g;

    // Variable Initialization
    lv_indexPlayer = 1;

    // Implementation
    if ((lp_onOff == true)) {
        auto7BC2F114_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto7BC2F114_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCOMI_gf_CU_GPVisibilityAutoUpdate(false, lv_indexPlayer, lp_duration);
        }
        UISetMode(PlayerGroupAll(), c_uiModeFullscreen, lp_duration);
        if ((lp_duration > 0.0) && (lp_duration != c_transitionDurationImmediate)) {
            Wait(lp_duration, c_timeReal);
        }

        libCOMI_gf_CM_CinematicModeActivate();
        libNtve_gf_GlobalCinematicSettingFixedSeedOnOff(true, false);
        auto311CBA6C_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto311CBA6C_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            PlayerScoreValueEnableAll(lv_indexPlayer, true);
        }
    }
    else {
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lp_duration);
        libNtve_gf_GlobalCinematicSetting(false);
        autoA04AE8FB_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoA04AE8FB_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCOMI_gf_CU_GPVisibilityAutoUpdate(true, lv_indexPlayer, lp_duration);
        }
        if ((lp_duration > 0.0) && (lp_duration != c_transitionDurationImmediate)) {
            Wait(lp_duration, c_timeReal);
        }

    }
}

void libCOMI_gf_CM_CinematicModeActivate () {
    // Variable Declarations
    playergroup lv_validPlayers;
    int lv_pickedPlayer;

    // Automatic Variable Declarations
    playergroup autoB3D6D2ED_g;
    playergroup auto375744B4_g;
    playergroup auto162A8743_g;
    playergroup auto54EA3DBC_g;

    // Variable Initialization
    lv_validPlayers = PlayerGroupEmpty();

    // Implementation
    lv_validPlayers = PlayerGroupAll();
    autoB3D6D2ED_g = lv_validPlayers;
    lv_pickedPlayer = -1;
    while (true) {
        lv_pickedPlayer = PlayerGroupNextPlayer(autoB3D6D2ED_g, lv_pickedPlayer);
        if (lv_pickedPlayer < 0) { break; }
        if ((libNtve_gf_PlayerInCinematicMode(lv_pickedPlayer) == true)) {
            PlayerGroupRemove(lv_validPlayers, lv_pickedPlayer);
        }

    }
    if ((PlayerGroupCount(lv_validPlayers) == 0)) {
        return ;
    }

    UISetHotkeyAllowed(lv_validPlayers, c_hotkeyCameraFollow, false);
    libNtve_gf__CineModeTurnOnOffForPlayerGroup(lv_validPlayers, true);
    libNtve_gf__CineModeHideUI(lv_validPlayers);
    CinematicMode(lv_validPlayers, true, 0.0);
    UISetCursorVisible(lv_validPlayers, false);
    libNtve_gf_ShowHidePlacementModels(false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Cinematic, lv_validPlayers, MaxF(0.0, 1.5));
    auto375744B4_g = lv_validPlayers;
    lv_pickedPlayer = -1;
    while (true) {
        lv_pickedPlayer = PlayerGroupNextPlayer(auto375744B4_g, lv_pickedPlayer);
        if (lv_pickedPlayer < 0) { break; }
        UISetMode(PlayerGroupSingle(lv_pickedPlayer), c_uiModeLetterboxed, 0.0);
    }
    auto162A8743_g = lv_validPlayers;
    lv_pickedPlayer = -1;
    while (true) {
        lv_pickedPlayer = PlayerGroupNextPlayer(auto162A8743_g, lv_pickedPlayer);
        if (lv_pickedPlayer < 0) { break; }
        PlayerPauseAllCharges(lv_pickedPlayer, true);
        PlayerPauseAllCooldowns(lv_pickedPlayer, true);
    }
    auto54EA3DBC_g = lv_validPlayers;
    lv_pickedPlayer = -1;
    while (true) {
        lv_pickedPlayer = PlayerGroupNextPlayer(auto54EA3DBC_g, lv_pickedPlayer);
        if (lv_pickedPlayer < 0) { break; }
        PlayerScoreValueEnableAll(lv_pickedPlayer, false);
    }
    UIFlyerHelperOverride(lv_validPlayers, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayNone);
    TriggerSendEvent("CinematicModeOn");
}

string libCOMI_gf_CM_SoundDataTableName () {
    // Automatic Variable Declarations
    // Implementation
    return (libCOMI_gv_pMC_SoundDataTableIdentifier + IntToString(libCOMI_gv_cM_SoundDataTableIndex));
}

void libCOMI_gf_PlaySoundCinematic (soundlink lp_soundLink, playergroup lp_players, fixed lp_volume, fixed lp_offset) {
    // Variable Declarations
    bool lv_playerInCinematic;
    int lv_playerIndex;

    // Automatic Variable Declarations
    playergroup autoEDCAAF8F_g;

    // Variable Initialization

    // Implementation
    autoEDCAAF8F_g = lp_players;
    lv_playerIndex = -1;
    while (true) {
        lv_playerIndex = PlayerGroupNextPlayer(autoEDCAAF8F_g, lv_playerIndex);
        if (lv_playerIndex < 0) { break; }
        if ((libNtve_gf_PlayerInCinematicMode(lv_playerIndex) == true)) {
            lv_playerInCinematic = true;
            break;
        }

    }
    if ((lv_playerInCinematic == false)) {
        return ;
    }

    SoundPlay(lp_soundLink, lp_players, lp_volume, lp_offset);
    libCOMI_gv_cM_SoundDataTableIndex += 1;
    DataTableSetSound(true, libCOMI_gf_CM_SoundDataTableName(), SoundLastPlayed());
}

void libCOMI_gf_StopCinematicSounds () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((libCOMI_gv_cM_SoundDataTableIndex > 0)) {
        SoundStop(DataTableGetSound(true, libCOMI_gf_CM_SoundDataTableName()), true);
        libCOMI_gv_cM_SoundDataTableIndex -= 1;
    }
}

void libCOMI_gf_MoveCameraForAllPlayers (point lp_point, fixed lp_time) {
    // Automatic Variable Declarations
    playergroup auto0E9199B0_g;
    int auto0E9199B0_var;

    // Implementation
    if ((lp_point == null)) {
        return ;
    }

    auto0E9199B0_g = libCOMI_gf_GetHumanPlayers();
    auto0E9199B0_var = -1;
    while (true) {
        auto0E9199B0_var = PlayerGroupNextPlayer(auto0E9199B0_g, auto0E9199B0_var);
        if (auto0E9199B0_var < 0) { break; }
        CameraLockInput(auto0E9199B0_var, true);
        CameraApplyInfo(auto0E9199B0_var, CameraInfoDefault(), lp_time, -1, 10.0, true);
        CameraPan(auto0E9199B0_var, lp_point, lp_time, -1, 10.0, false);
    }
}

int libCOMI_gf_CC_DifficultyIndex (int lp_difficulty) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoED602D01_val;

    // Variable Initialization

    // Implementation
    autoED602D01_val = lp_difficulty;
    if (autoED602D01_val == 1) {
        return 1;
    }
    else if (autoED602D01_val == 2) {
        return 2;
    }
    else if (autoED602D01_val == 3) {
        return 3;
    }
    else if (autoED602D01_val == 4) {
        return 4;
    }
    else if (autoED602D01_val == 5) {
        return 5;
    }
    else if (autoED602D01_val == 6) {
        return 6;
    }
    else {
        return 0;
    }
}

int libCOMI_gf_CC_DifficultyFromIndex (int lp_index) {
    // Automatic Variable Declarations
    int autoDD9138E6_val;

    // Implementation
    autoDD9138E6_val = lp_index;
    if (autoDD9138E6_val == libCOMI_gf_CC_DifficultyIndex(1)) {
        return 1;
    }
    else if (autoDD9138E6_val == libCOMI_gf_CC_DifficultyIndex(2)) {
        return 2;
    }
    else if (autoDD9138E6_val == libCOMI_gf_CC_DifficultyIndex(3)) {
        return 3;
    }
    else if (autoDD9138E6_val == libCOMI_gf_CC_DifficultyIndex(4)) {
        return 4;
    }
    else {
        return 2;
    }
}

void libCOMI_gf_InitDifficulty () {
    // Variable Declarations
    int lv_i;
    int lv_player;
    int lv_i2;
    int lv_i3;
    int lv_difficulty;
    int lv_brutalPlusDiff;
    int lv_brutalPlusPoints;
    string lv_difficultyinstance;
    int lv_mutatorCount;
    int lv_retrymutatorindex;
    int lv_enemyAI1;
    int lv_enemyAI2;

    // Automatic Variable Declarations
    playergroup auto42AAC6CE_g;
    playergroup autoAC65407A_g;
    int autoAC65407A_var;
    const int auto1DB1ED34_ae = 2;
    const int auto1DB1ED34_ai = 1;
    const int auto389E0899_ae = 3;
    const int auto389E0899_ai = 1;
    string auto9578433B_userType;
    int auto9578433B_i;

    // Variable Initialization
    lv_difficulty = 2;
    lv_enemyAI1 = PlayerGroupPlayer(libCOMI_gf_GetEnemyAIPlayers(), 1);
    lv_enemyAI2 = PlayerGroupPlayer(libCOMI_gf_GetEnemyAIPlayers(), 2);

    // Implementation
    lv_difficulty = libCOMI_gf_IntegerToDifficulty(libCOMI_gv_selectedDifficulty);
    auto42AAC6CE_g = libCOMI_gv_all;
    lv_i = -1;
    while (true) {
        lv_i = PlayerGroupNextPlayer(auto42AAC6CE_g, lv_i);
        if (lv_i < 0) { break; }
        PlayerSetDifficulty(lv_i, lv_difficulty);
    }
    SetNextMissionDifficulty(PlayerGroupAll(), lv_difficulty);
    if (((libCOMI_gf_CC_DifficultyIndex(PlayerDifficulty(lv_enemyAI1)) != 0))) {
        autoAC65407A_g = libCOMI_gf_GetAlliedCommandersPlayers();
        autoAC65407A_var = -1;
        while (true) {
            autoAC65407A_var = PlayerGroupNextPlayer(autoAC65407A_g, autoAC65407A_var);
            if (autoAC65407A_var < 0) { break; }
            PlayerSetDifficulty(autoAC65407A_var, PlayerDifficulty(lv_enemyAI1));
        }
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_E7447647"), false);
    lv_brutalPlusDiff = PlayerBrutalPlusDifficulty(1);
    lv_player = 1;
    for ( ; ( (auto1DB1ED34_ai >= 0 && lv_player <= auto1DB1ED34_ae) || (auto1DB1ED34_ai < 0 && lv_player >= auto1DB1ED34_ae) ) ; lv_player += auto1DB1ED34_ai ) {
        TextExpressionSetToken("Param/Expression/lib_COMI_6AC7A3D8", "B", IntToText(lv_player));
        TextExpressionSetToken("Param/Expression/lib_COMI_6AC7A3D8", "A", StringToText(libARRA_gf_IIF((libCOMI_gf_DifficultyLevelForPlayerCoop(lv_player) == 4), "BRUTAL", "NOT BRUTAL")));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_6AC7A3D8"), false);
    }
    TextExpressionSetToken("Param/Expression/lib_COMI_6AB5C1A4", "A", IntToText(lv_brutalPlusDiff));
    TextExpressionSetToken("Param/Expression/lib_COMI_6AB5C1A4", "B", StringToText(libARRA_gf_IIF(((lv_brutalPlusDiff >= 1) && (lv_brutalPlusDiff <= UserDataInstanceCount("XMM_MutationDifficultyLevels"))), "WITHIN BOUNDS", "OUT OF BOUNDS")));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_6AB5C1A4"), false);
    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(1) == 4) && ((lv_brutalPlusDiff >= 1) && (lv_brutalPlusDiff <= UserDataInstanceCount("XMM_MutationDifficultyLevels")))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_4F9E6618"), false);
        TextExpressionSetToken("Param/Expression/lib_COMI_C8E147FC", "A", IntToText(PlayerRetryMutation(1, 1)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_C8E147FC"), false);
        if ((PlayerRetryMutation(1, 0) > 0)) {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_519C94CF"), false);
            lv_mutatorCount = 0;
            for ( ; ( (auto389E0899_ai >= 0 && lv_mutatorCount <= auto389E0899_ae) || (auto389E0899_ai < 0 && lv_mutatorCount >= auto389E0899_ae) ) ; lv_mutatorCount += auto389E0899_ai ) {
                if ((PlayerRetryMutation(1, lv_mutatorCount) > 0)) {
                    lv_retrymutatorindex = PlayerRetryMutation(1, lv_mutatorCount);
                }

            }
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_3789E61C"), false);
            auto9578433B_userType = "XMM_MutationDifficultyLevels";
            auto9578433B_i = 1;
            for ( ; auto9578433B_i <= UserDataInstanceCount(auto9578433B_userType) ; auto9578433B_i += 1 ) {
                lv_difficultyinstance = UserDataInstance(auto9578433B_userType, auto9578433B_i);
                if (((lv_brutalPlusPoints >= UserDataGetInt("XMM_MutationDifficultyLevels", lv_difficultyinstance, "PointsMin", 1)) && (lv_brutalPlusPoints <= UserDataGetInt("XMM_MutationDifficultyLevels", lv_difficultyinstance, "PointsMax", 1)))) {
                    TextExpressionSetToken("Param/Expression/lib_COMI_6F012790", "A", IntToText(libNtve_gf_UserDataInstanceGetIndex("XMM_MutationDifficultyLevels", lv_difficultyinstance)));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_6F012790"), false);
                    break;
                }

            }
        }
        else {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_F79488DF"), false);
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_9515D9BA"), false);
        }
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COMI_56E4E616", "A", IntToText(UserDataInstanceCount("XMM_MutationDifficultyLevels")));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_56E4E616"), false);
    }
}

void libCOMI_gf_CM_DifficultyApplySettings (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
}

int libCOMI_gf_GetMissionDifficulty () {
    // Variable Declarations
    fixed lv_difficulty;
    int lv_returnDiff;
    int lv_player01;
    int lv_player02;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_returnDiff = 2;
    lv_player01 = 1;
    lv_player02 = 2;

    // Implementation
    if ((PlayerType(2) == c_playerTypeNone)) {
        return libCOMI_gf_DifficultyLevelForPlayerCoop(lv_player01);
    }

    lv_difficulty = ((libCOMI_gf_DifficultyLevelForPlayerCoop(lv_player01) + libCOMI_gf_DifficultyLevelForPlayerCoop(lv_player02)) * 0.5);
    lv_returnDiff = RoundI(lv_difficulty);;
    return lv_returnDiff;
}

int libCOMI_gf_DifficultyLevelForPlayerCoop (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gf_IntegerToDifficulty(libCOMI_gv_selectedDifficulty);
}

int libCOMI_gf_GetDifficulty () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_selectedDifficulty;
}

int libCOMI_gf_DifficultyAsInteger (int lp_player) {
    // Variable Declarations
    int lv_difficulty;
    int lv_difficultyAsInt;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_difficulty = 2;

    // Implementation
    lv_difficulty = libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player);
    lv_difficultyAsInt = lv_difficulty;
    return lv_difficultyAsInt;
}

int libCOMI_gf_IntegerToDifficulty (int lp_difficulty) {
    // Variable Declarations
    int lv_difficulty;

    // Automatic Variable Declarations
    int autoF1DEBD5D_val;

    // Variable Initialization
    lv_difficulty = 2;

    // Implementation
    autoF1DEBD5D_val = lp_difficulty;
    if (autoF1DEBD5D_val == 1) {
        lv_difficulty = 1;
    }
    else if (autoF1DEBD5D_val == 2) {
        lv_difficulty = 2;
    }
    else if (autoF1DEBD5D_val == 3) {
        lv_difficulty = 3;
    }
    else if (autoF1DEBD5D_val == 4) {
        lv_difficulty = 4;
    }
    else if (autoF1DEBD5D_val == 5) {
        lv_difficulty = 5;
    }
    else if (autoF1DEBD5D_val == 6) {
        lv_difficulty = 6;
    }
    else {
    }
    return lv_difficulty;
}

int libCOMI_gf_DifficultyValueInt2 (int lp_difficulty, int lp_beginner, int lp_normal, int lp_advanced, int lp_expert, int lp_virtuoso, int lp_master) {
    // Automatic Variable Declarations
    int autoA10F946A_val;

    // Implementation
    autoA10F946A_val = lp_difficulty;
    if (autoA10F946A_val == 1) {
        return lp_beginner;
    }
    else if (autoA10F946A_val == 2) {
        return lp_normal;
    }
    else if (autoA10F946A_val == 3) {
        return lp_advanced;
    }
    else if (autoA10F946A_val == 4) {
        return lp_expert;
    }
    else if (autoA10F946A_val == 5) {
        return lp_virtuoso;
    }
    else if (autoA10F946A_val == 6) {
        return lp_master;
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_1BD6E20E"), true);
        return -1;
    }
}

fixed libCOMI_gf_DifficultyValueFixed2 (int lp_difficulty, fixed lp_beginner, fixed lp_normal, fixed lp_advanced, fixed lp_expert, fixed lp_virtuoso, fixed lp_master) {
    // Automatic Variable Declarations
    int auto0E3D2A41_val;

    // Implementation
    auto0E3D2A41_val = lp_difficulty;
    if (auto0E3D2A41_val == 1) {
        return lp_beginner;
    }
    else if (auto0E3D2A41_val == 2) {
        return lp_normal;
    }
    else if (auto0E3D2A41_val == 3) {
        return lp_advanced;
    }
    else if (auto0E3D2A41_val == 4) {
        return lp_expert;
    }
    else if (auto0E3D2A41_val == 5) {
        return lp_virtuoso;
    }
    else if (auto0E3D2A41_val == 6) {
        return lp_master;
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_AC873AC0"), true);
        return -1.0;
    }
}

string libCOMI_gf_DifficultyValueFixed3 (int lp_difficulty, string lp_beginner, string lp_normal, string lp_advanced, string lp_expert, string lp_virtuoso, string lp_master) {
    // Automatic Variable Declarations
    int autoB51CE0AB_val;

    // Implementation
    autoB51CE0AB_val = lp_difficulty;
    if (autoB51CE0AB_val == 1) {
        return lp_beginner;
    }
    else if (autoB51CE0AB_val == 2) {
        return lp_normal;
    }
    else if (autoB51CE0AB_val == 3) {
        return lp_advanced;
    }
    else if (autoB51CE0AB_val == 4) {
        return lp_expert;
    }
    else if (autoB51CE0AB_val == 5) {
        return lp_virtuoso;
    }
    else if (autoB51CE0AB_val == 6) {
        return lp_master;
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_68A54BFE"), true);
        return null;
    }
}

bool libCOMI_gf_DifficultyValueFixed4 (int lp_difficulty, bool lp_beginner, bool lp_normal, bool lp_advanced, bool lp_expert, bool lp_virtuoso, bool lp_master) {
    // Automatic Variable Declarations
    int auto76AE2043_val;

    // Implementation
    auto76AE2043_val = lp_difficulty;
    if (auto76AE2043_val == 1) {
        return lp_beginner;
    }
    else if (auto76AE2043_val == 2) {
        return lp_normal;
    }
    else if (auto76AE2043_val == 3) {
        return lp_advanced;
    }
    else if (auto76AE2043_val == 4) {
        return lp_expert;
    }
    else if (auto76AE2043_val == 5) {
        return lp_virtuoso;
    }
    else if (auto76AE2043_val == 6) {
        return lp_master;
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_74421686"), true);
        return false;
    }
}

int libCOMI_gf_MinimumDifficultyValueCoopInteger (int lp_casual, int lp_normal, int lp_hard, int lp_brutal, int lp_extreme, int lp_unlikely) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerDifficulty(1) <= libCOMI_gf_DifficultyLevelForPlayerCoop(2)) == true)) {
        return libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(1), lp_casual, lp_normal, lp_hard, lp_brutal, lp_extreme, lp_unlikely);
    }

    return libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(2), lp_casual, lp_normal, lp_hard, lp_brutal, lp_extreme, lp_unlikely);
}

fixed libCOMI_gf_MinimumDifficultyValueCoopReal (fixed lp_beginner, fixed lp_normal, fixed lp_advanced, fixed lp_expert, fixed lp_virtuoso, fixed lp_master) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerDifficulty(1) <= libCOMI_gf_DifficultyLevelForPlayerCoop(2)) == true)) {
        return libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(1), lp_beginner, lp_normal, lp_advanced, lp_expert, lp_virtuoso, lp_master);
    }

    return libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(2), lp_beginner, lp_normal, lp_advanced, lp_expert, lp_virtuoso, lp_master);
}

string libCOMI_gf_CC_CommanderUserInstance (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogCommander, lp_commander) == false)) {
        return null;
    }

    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogCommander, (lp_commander), "UserReference", libCOMI_gv_cCC_DISREGARDPLAYER));
}

string libCOMI_gf_CC_CommanderData (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Commanders", lp_commander, "ZZ_CommanderData", 1);
}

string libCOMI_gf_CC_CommanderRace (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Commanders", lp_commander, "Race", 1);
}

int libCOMI_gf_CC_CommanderInternalIndex (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("Commanders", lp_commander, "ZZ_UniqueIndex", 1);
}

string libCOMI_gf_CC_CommanderConversationLink (string lp_characterInstance) {
    // Automatic Variable Declarations
    string auto217CEA32_val;

    // Implementation
    auto217CEA32_val = lp_characterInstance;
    if (auto217CEA32_val == "Raiders") {
        return "char_Raynor";
    }
    else if (auto217CEA32_val == "Swann") {
        return "char_Swann";
    }
    else if (auto217CEA32_val == "Kerrigan") {
        return "char_Kerrigan";
    }
    else if (auto217CEA32_val == "Zagara") {
        return "char_Zagara";
    }
    else if (auto217CEA32_val == "Artanis") {
        return "char_Artanis";
    }
    else if (auto217CEA32_val == "Vorazun") {
        return "char_Vorazun";
    }
    else if (auto217CEA32_val == "Karax") {
        return "char_Karax";
    }
    else if (auto217CEA32_val == "Abathur") {
        return "char_Abathur";
    }
    else if (auto217CEA32_val == "Alarak") {
        return "char_Alarak";
    }
    else if (auto217CEA32_val == "Nova") {
        return "char_Nova";
    }
    else if (auto217CEA32_val == "Stukov") {
        return "char_Stukov";
    }
    else if (auto217CEA32_val == "Fenix") {
        return "char_ProtossAI";
    }
    else if (auto217CEA32_val == "Dehaka") {
        return "char_Dehaka";
    }
    else if (auto217CEA32_val == "Horner") {
        return "char_Horner";
    }
    else if (auto217CEA32_val == "Tychus") {
        return "char_Tychus";
    }
    else if (auto217CEA32_val == "Zeratul") {
        return "char_ZeratulAC";
    }
    else if (auto217CEA32_val == "Stetmann") {
        return "char_BelshirScientist";
    }
    else if (auto217CEA32_val == "Mengsk") {
        return "char_MengskCommander";
    }
    else {
    }
    return "char_TerranAdjutant";
}

string libCOMI_gf_CC_CommanderPortraitModel (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetModel("Commanders", lp_commander, "PortraitModel", 1);
}

string libCOMI_gf_CC_CommanderPortraitActor (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Commanders", lp_commander, "PortraitActor", 1);
}

string libCOMI_gf_CC_CommanderCustomImage (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("Commanders", lp_commander, "CustomImage", 1);
}

text libCOMI_gf_CC_CommanderName (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Commanders", lp_commander, "Name", 1);
}

int libCOMI_gf_CC_CommanderGender (string lp_commander) {
    // Variable Declarations
    int lv_genderIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_genderIndex = UserDataGetInt("Commanders", lp_commander, "Gender", 1);
    return lv_genderIndex;
}

text libCOMI_gf_CC_CommanderDescription (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Commanders", lp_commander, "Description", 1);
}

string libCOMI_gf_CC_CommanderSelectCutscene (string lp_commander) {
    // Variable Declarations
    string lv_sceneName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sceneName = "";

    // Implementation
    lv_sceneName = UserDataGetString("Commanders", lp_commander, "ZZ_SelectionScene", 1);
    return "Cutscenes\\" + lv_sceneName + ".SC2Cutscene";
}

string libCOMI_gf_CC_CommanderConvoTag (string lp_commander) {
    // Automatic Variable Declarations
    string autoDCF2BF00_val;

    // Implementation
    autoDCF2BF00_val = lp_commander;
    if (autoDCF2BF00_val == "Artanis") {
        return "Artanis";
    }
    else if (autoDCF2BF00_val == "Vorazun") {
        return "Vorazun";
    }
    else if (autoDCF2BF00_val == "Kerrigan") {
        return "Kerrigan";
    }
    else if (autoDCF2BF00_val == "Zagara") {
        return "Zagara";
    }
    else if (autoDCF2BF00_val == "Raiders") {
        return "Raynor";
    }
    else if (autoDCF2BF00_val == "Swann") {
        return "Swann";
    }
    else if (autoDCF2BF00_val == "Abathur") {
        return "Abathur";
    }
    else if (autoDCF2BF00_val == "Fenix") {
        return "Fenix";
    }
    else if (autoDCF2BF00_val == "Dehaka") {
        return "Dehaka";
    }
    else if (autoDCF2BF00_val == "Horner") {
        return "Horner";
    }
    else if (autoDCF2BF00_val == "Tychus") {
        return "Tychus";
    }
    else if (autoDCF2BF00_val == "Zeratul") {
        return "Zeratul";
    }
    else if (autoDCF2BF00_val == "Stetmann") {
        return "Stetmann";
    }
    else if (autoDCF2BF00_val == "Mengsk") {
        return "Mengsk";
    }
    else {
    }
    return "Raynor";
}

bool libCOMI_gf_CC_CommanderInGame (string lp_commander) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoC6869C70_g;

    // Variable Initialization

    // Implementation
    autoC6869C70_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoC6869C70_g, lv_player);
        if (lv_player < 0) { break; }
        if ((libCOMI_gf_ActiveCommanderForPlayer(lv_player) == lp_commander)) {
            return true;
        }

    }
    return false;
}

text libCOMI_gf_CC_CommanderGeneralTipTitle (string lp_tipID) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("X_GeneralTips", lp_tipID, "TipTitle", 1);
}

text libCOMI_gf_CC_CommanderGeneralTipDetails (string lp_tipID) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("X_GeneralTips", lp_tipID, "TipDetails", 1);
}

string libCOMI_gf_CC_CommanderGeneralTipIcon (string lp_tipID) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("X_GeneralTips", lp_tipID, "TipIcon", 1);
}

void libCOMI_gf_CreateExplosionatPointAdvanced (point lp_point, string lp_actor, soundlink lp_sound) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_point != null)) {
        if ((lp_actor != null)) {
            libNtve_gf_CreateActorAtPoint(lp_actor, lp_point);
        }

        if ((lp_sound != null)) {
            SoundPlayAtPoint(lp_sound, PlayerGroupAll(), lp_point, 0.0, 100.0, 0.0);
        }

    }

}

void libCOMI_gf_ResourcePickupAlly (int lp_player, int lp_minerals, int lp_vespene) {
    // Automatic Variable Declarations
    // Implementation
    PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperAdd, lp_minerals);
    PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperAdd, lp_vespene);
    SoundPlayForPlayer(SoundLink("UI_ResourcePickup", -1), lp_player, PlayerGroupSingle(lp_player), 100.0, 0.0);
}

void libCOMI_gf_SendActorMessageToDoodadsInRegion (string lp_message, string lp_doodadType, region lp_target) {
    // Variable Declarations
    actor lv_actorRegion;
    string lv_terms;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_terms = "";

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", lp_target);
    lv_actorRegion = libNtve_gf_ActorLastCreated();
    if ((lp_doodadType != null)) {
        lv_terms = ("ScopeContains " + lp_doodadType);
    }

    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, lp_message, "Doodad", lv_terms);
    ActorScopeKill(ActorScopeFromActor(lv_actorRegion));
}

void libCOMI_gf_DestroyCacheAndGivePlayerResources (unit lp_cacheUnit, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_GivePlayerResources(UnitGetPosition(lp_cacheUnit), lp_resourceType, lp_resourceAmount, lp_resourceIcon, lp_resourceText, lp_player);
    UnitKill(lp_cacheUnit);
}

void libCOMI_gf_GivePlayerResources (point lp_location, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player) {
    // Variable Declarations
    text lv_text;

    // Automatic Variable Declarations
    int auto8ED25223_val;

    // Variable Initialization

    // Implementation
    auto8ED25223_val = lp_resourceType;
    if (auto8ED25223_val == libCOMI_ge_CacheResourceType_Mineral) {
        PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperAdd, lp_resourceAmount);
    }
    else if (auto8ED25223_val == libCOMI_ge_CacheResourceType_Vespene) {
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperAdd, lp_resourceAmount);
    }
    else {
    }
    libCOMI_gf_DisplayRewardFloatingText(lp_location, lp_resourceType, lp_resourceAmount, lp_resourceIcon, lp_resourceText, lp_player);
}

void libCOMI_gf_DisplayRewardFloatingText (point lp_location, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player) {
    // Variable Declarations
    text lv_text;
    text lv_signPrefix;

    // Automatic Variable Declarations
    int auto2128925C_val;
    int autoC4309F63_val;

    // Variable Initialization

    // Implementation
    if ((lp_resourceAmount >= 0)) {
        lv_signPrefix = StringExternal("Param/Value/lib_COMI_3E03BDBE");
    }

    auto2128925C_val = lp_resourceType;
    if (auto2128925C_val == libCOMI_ge_CacheResourceType_Mineral) {
        TextExpressionSetToken("Param/Expression/lib_COMI_FA2F2D3B", "A", StringToText(("Kicker_Minerals")));
        TextExpressionSetToken("Param/Expression/lib_COMI_FA2F2D3B", "SIGN", lv_signPrefix);
        TextExpressionSetToken("Param/Expression/lib_COMI_FA2F2D3B", "B", IntToText(lp_resourceAmount));
        lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_FA2F2D3B");
    }
    else if (auto2128925C_val == libCOMI_ge_CacheResourceType_Vespene) {
        TextExpressionSetToken("Param/Expression/lib_COMI_3D845762", "A", StringToText(("Kicker_Gas")));
        TextExpressionSetToken("Param/Expression/lib_COMI_3D845762", "SIGN", lv_signPrefix);
        TextExpressionSetToken("Param/Expression/lib_COMI_3D845762", "B", IntToText(lp_resourceAmount));
        lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_3D845762");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COMI_261E2441", "A", StringToText(("Kicker_Zerg")));
        TextExpressionSetToken("Param/Expression/lib_COMI_261E2441", "B", IntToText(lp_resourceAmount));
        lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_261E2441");
    }
    if ((lp_resourceIcon != null)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_F881F2B7", "A", lv_text);
        TextExpressionSetToken("Param/Expression/lib_COMI_F881F2B7", "B", StringToText(lp_resourceIcon));
        lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_F881F2B7");
    }
    else {
        autoC4309F63_val = lp_resourceType;
        if (autoC4309F63_val == libCOMI_ge_CacheResourceType_Mineral) {
            TextExpressionSetToken("Param/Expression/lib_COMI_C99B9DE4", "A", lv_text);
            lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_C99B9DE4");
        }
        else if (autoC4309F63_val == libCOMI_ge_CacheResourceType_Vespene) {
            TextExpressionSetToken("Param/Expression/lib_COMI_6CB2A27A", "A", lv_text);
            lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_6CB2A27A");
        }
        else {
        }
    }
    if (((lp_resourceText != null) == true)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_A8624C75", "A", lv_text);
        TextExpressionSetToken("Param/Expression/lib_COMI_A8624C75", "B", lp_resourceText);
        lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_A8624C75");
    }

    if ((lp_resourceAmount >= 0)) {
        SoundPlay(SoundLink("UI_ResourcePickup", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
    }
    else {
        SoundPlay(SoundLink("UI_Mutator_MicroTransactions", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
    }
    TextTagCreate(lv_text, 24, lp_location, 2.0, true, false, PlayerGroupSingle(lp_player));
    TextTagSetVelocity(TextTagLastCreated(), 0.7, 90.0);
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\blank.dds", true);
    TextTagShowBackground(TextTagLastCreated(), true);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
}

text libCOMI_gf_FormatTimeCampaign (int lp_second) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_second < 3600)) {
        return TextTimeFormat(StringExternal("Param/Value/lib_COMI_D49AC1F7"), lp_second);
    }
    else {
        return TextTimeFormat(StringExternal("Param/Value/lib_COMI_F86CDF9E"), lp_second);
    }
}

void libCOMI_gf_PauseAITimeCampaign (bool lp_pauseUnpause) {
    // Automatic Variable Declarations
    // Implementation
    AITimePause(lp_pauseUnpause);
    libCOMI_gv_cC_TimeAIPaused = lp_pauseUnpause;
}

void libCOMI_gf_CC_TimeAITemporarySet (bool lp_pauseUnpause) {
    // Variable Declarations
    bool lv_originalPauseState;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_originalPauseState = true;

    // Implementation
    lv_originalPauseState = libCOMI_gv_cC_TimeAIPaused;
    libCOMI_gf_PauseAITimeCampaign(lp_pauseUnpause);
    libCOMI_gv_cC_TimeAIPaused = lv_originalPauseState;
}

void libCOMI_gf_CC_TimeAITemporaryRestore () {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_PauseAITimeCampaign(libCOMI_gv_cC_TimeAIPaused);
}

void libCOMI_gf_PauseMissionTimeCampaign (bool lp_pauseUnpause) {
    // Automatic Variable Declarations
    // Implementation
    GameSetMissionTimePaused(lp_pauseUnpause);
    libCOMI_gv_cC_TimeMissionPaused = lp_pauseUnpause;
}

void libCOMI_gf_CC_TimeMissionTemporarySet (bool lp_pauseUnpause) {
    // Variable Declarations
    bool lv_originalPauseState;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_originalPauseState = true;

    // Implementation
    lv_originalPauseState = libCOMI_gv_cC_TimeMissionPaused;
    libCOMI_gf_PauseMissionTimeCampaign(lp_pauseUnpause);
    libCOMI_gv_cC_TimeMissionPaused = lv_originalPauseState;
}

void libCOMI_gf_CC_TimeMissionTemporaryRestore () {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_PauseMissionTimeCampaign(libCOMI_gv_cC_TimeMissionPaused);
}

void libCOMI_gf_Unpause () {
    // Automatic Variable Declarations
    // Implementation
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, false, true);
    GameSetMissionTimePaused(false);
    AITimePause(false);
    UnitPauseAll(false);
}

void libCOMI_gf_Pause () {
    // Automatic Variable Declarations
    // Implementation
    GameSetMissionTimePaused(true);
    AITimePause(true);
    UnitPauseAll(true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, false);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, false);
}

void libCOMI_gf_CM_UseUnitNameAsUnitTip (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "ARC@ZergDropPod") || (UnitGetType(lp_unit) == "ARC@ZergDropPodLarge") || (UnitGetType(lp_unit) == "ARC@TerranDropPod") || (UnitGetType(lp_unit) == "ARC@ZergDropPodCreep"))) {
        return ;
    }

    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void libCOMI_gf_CM_ApplyCampaignTeachingToUnit (unit lp_teachUnit) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_teachingUnit = lp_teachUnit;
    TriggerSendEvent("Unit Teaching");
}

void libCOMI_gf_SetUnitInfoTextCampaign (unit lp_unit, text lp_info, text lp_tip, text lp_subTip) {
    // Variable Declarations
    text lv_tipStyled;
    text lv_subTipStyled;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_tip != null)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_3704A828", "A", lp_tip);
        lv_tipStyled = TextExpressionAssemble("Param/Expression/lib_COMI_3704A828");
    }
    else {
        lv_tipStyled = lp_tip;
    }
    if ((lp_subTip != null)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_50F2381C", "A", lp_subTip);
        lv_subTipStyled = TextExpressionAssemble("Param/Expression/lib_COMI_50F2381C");
    }
    else {
        lv_subTipStyled = lp_subTip;
    }
    UnitSetInfoText(lp_unit, lp_info, lv_tipStyled, lv_subTipStyled);
    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void libCOMI_gf_SetUnitInfoTextCampaignDetailed (unit lp_unit, text lp_info, text lp_tip, text lp_subTip) {
    // Variable Declarations
    text lv_tipStyled;
    text lv_subTipStyled;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_tip != null)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_1C88F6E4", "A", lp_tip);
        lv_tipStyled = TextExpressionAssemble("Param/Expression/lib_COMI_1C88F6E4");
    }
    else {
        lv_tipStyled = lp_tip;
    }
    if ((lp_subTip != null)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_08BB63F6", "A", lp_subTip);
        lv_subTipStyled = TextExpressionAssemble("Param/Expression/lib_COMI_08BB63F6");
    }
    else {
        lv_subTipStyled = lp_subTip;
    }
    UnitSetInfoText(lp_unit, lp_info, lv_tipStyled, lv_subTipStyled);
    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void libCOMI_gf_CM_MissionAutoSave (text lp_description) {
    // Variable Declarations
    text lv_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = StringToText("");

    // Implementation
    libCOMI_gv_cM_MissionAutoSaveIndex += 1;
    TextExpressionSetToken("Param/Expression/lib_COMI_87B2D44D", "A", libCOMI_gf_CC_CampaignMapName(libCOMI_gf_CC_CurrentMap(), 1));
    lv_name = TextExpressionAssemble("Param/Expression/lib_COMI_87B2D44D");
    GameSaveCreate(lv_name, lp_description, "", true);
    Wait(1.0, c_timeGame);
    libCOMI_gv_cM_MissionAutoSaveDone = true;
}

void libCOMI_gf_CreateMissionAutosavePoint (text lp_description) {
    // Variable Declarations
    text lv_name;
    int lv_autosaveDialog;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = StringToText("");
    lv_autosaveDialog = c_invalidDialogId;

    // Implementation
    if ((libCOMI_gf_CC_CurrentMap() == null)) {
        return ;
    }

    libCOMI_gv_cM_MissionAutoSaveDone = false;
    libCOMI_gf_CM_MissionAutoSave(lp_description);
}

trigger auto_libCOMI_gf_CreateWarpInEffect_Trigger = null;
unit auto_libCOMI_gf_CreateWarpInEffect_lp_unit;

void libCOMI_gf_CreateWarpInEffect (unit lp_unit) {
    auto_libCOMI_gf_CreateWarpInEffect_lp_unit = lp_unit;

    if (auto_libCOMI_gf_CreateWarpInEffect_Trigger == null) {
        auto_libCOMI_gf_CreateWarpInEffect_Trigger = TriggerCreate("auto_libCOMI_gf_CreateWarpInEffect_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CreateWarpInEffect_Trigger, false, false);
}

bool auto_libCOMI_gf_CreateWarpInEffect_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libCOMI_gf_CreateWarpInEffect_lp_unit;

    // Variable Declarations
    actor lv_model;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitAbilityEnable(lp_unit, "move", false);
    UnitAbilityEnable(lp_unit, "attack", false);
    if (((UnitGetType(lp_unit) == "ARC@HybridDestroyer") || (UnitGetType(lp_unit) == "ARC@HybridDominatorVoid") || (UnitGetType(lp_unit) == "ARC@HybridReaver") || (UnitGetType(lp_unit) == "ARC@HybridBehemoth") || (UnitGetType(lp_unit) == "ARC@HybridNemesis"))) {
        libNtve_gf_AttachModelToUnit(lp_unit, "ARC@HybridWarpInEffect", "Ref_Center");
    }
    else {
        libNtve_gf_AttachModelToUnit(lp_unit, "ARC@ProtossGenericWarpInOut", "Ref_Center");
    }
    lv_model = libNtve_gf_ActorLastCreated();
    Wait(5.0, c_timeAI);
    libNtve_gf_KillModel(lv_model);
    UnitAbilityEnable(lp_unit, "move", true);
    UnitAbilityEnable(lp_unit, "attack", true);
    return true;
}

trigger auto_libCOMI_gf_RunTriggeratMissionTime_Trigger = null;
fixed auto_libCOMI_gf_RunTriggeratMissionTime_lp_time;
trigger auto_libCOMI_gf_RunTriggeratMissionTime_lp_trigger;

void libCOMI_gf_RunTriggeratMissionTime (fixed lp_time, trigger lp_trigger) {
    auto_libCOMI_gf_RunTriggeratMissionTime_lp_time = lp_time;
    auto_libCOMI_gf_RunTriggeratMissionTime_lp_trigger = lp_trigger;

    if (auto_libCOMI_gf_RunTriggeratMissionTime_Trigger == null) {
        auto_libCOMI_gf_RunTriggeratMissionTime_Trigger = TriggerCreate("auto_libCOMI_gf_RunTriggeratMissionTime_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_RunTriggeratMissionTime_Trigger, false, false);
}

bool auto_libCOMI_gf_RunTriggeratMissionTime_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_time = auto_libCOMI_gf_RunTriggeratMissionTime_lp_time;
    trigger lp_trigger = auto_libCOMI_gf_RunTriggeratMissionTime_lp_trigger;

    // Automatic Variable Declarations
    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if (true) {
        TriggerExecute(lp_trigger, true, false);
    }

    return true;
}

point libCOMI_gf_CM_NearbyGroundPathablePoint (point lp_initialDropPoint, fixed lp_distanceOffsetMin, fixed lp_distanceOffsetMax) {
    // Variable Declarations
    point lv_returnedDropPoint;
    point lv_testDropPoint;
    int lv_moveAttempts;

    // Automatic Variable Declarations
    const int auto773DC6B0_ae = 100;
    const int auto773DC6B0_ai = 1;

    // Variable Initialization

    // Implementation
    lv_returnedDropPoint = lp_initialDropPoint;
    lv_moveAttempts = 1;
    for ( ; ( (auto773DC6B0_ai >= 0 && lv_moveAttempts <= auto773DC6B0_ae) || (auto773DC6B0_ai < 0 && lv_moveAttempts >= auto773DC6B0_ae) ) ; lv_moveAttempts += auto773DC6B0_ai ) {
        lv_testDropPoint = PointWithOffsetPolar(lp_initialDropPoint, RandomFixed(lp_distanceOffsetMin, lp_distanceOffsetMax), libNtve_gf_RandomAngle());
        if ((PathingType(lv_testDropPoint) == c_pathingGround) && (PointPathingIsConnected(lv_testDropPoint, lp_initialDropPoint) == true) && (PointPathingPassable(lv_testDropPoint) == true)) {
            lv_returnedDropPoint = lv_testDropPoint;
            break;
        }

    }
    return lv_returnedDropPoint;
}

void libCOMI_gf_CM_DetectionUpgradesApply () {
    // Variable Declarations
    int lv_i;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoFA1078A4_g;
    const int auto4E1B22AE_ae = 15;
    const int auto4E1B22AE_ai = 1;

    // Variable Initialization

    // Implementation
    autoFA1078A4_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoFA1078A4_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(lv_itPlayer, "ARC@DetectionFriendly", 1);
    }
    lv_i = 3;
    for ( ; ( (auto4E1B22AE_ai >= 0 && lv_i <= auto4E1B22AE_ae) || (auto4E1B22AE_ai < 0 && lv_i >= auto4E1B22AE_ae) ) ; lv_i += auto4E1B22AE_ai ) {
        if (((libNtve_gf_PlayerIsEnemy(1, lv_i, libNtve_ge_PlayerRelation_Enemy) == true) || (libNtve_gf_PlayerIsEnemy(1, lv_i, libNtve_ge_PlayerRelation_EnemyMutual) == true)) && (libCOMI_gf_PlayerIsCommander(lv_i) == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "ARC@DetectionEnemy", 1);
        }

    }
}

fixed libCOMI_gf_Lerp (fixed lp_valueZero, fixed lp_valueOne, fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    return ((1 - lp_amount) * lp_valueZero + lp_amount*lp_valueOne);
}

string libCOMI_gf_CC_CatalogGetFieldArrayValue (int lp_catalog, string lp_entry, string lp_field, int lp_index, int lp_player) {
    // Variable Declarations
    string lv_fieldPath;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fieldPath = "";

    // Implementation
    lv_fieldPath = (lp_field + "[" + IntToString((lp_index - 1)) + "]");
    return CatalogFieldValueGet(lp_catalog, lp_entry, lv_fieldPath, lp_player);
}

string libCOMI_gf_CC_AICommanderByUniqueIndex (int lp_uniqueIndex) {
    // Variable Declarations
    string lv_aicommanderinstance;

    // Automatic Variable Declarations
    string autoB4244EC2_userType;
    int autoB4244EC2_i;

    // Variable Initialization

    // Implementation
    autoB4244EC2_userType = "Compositions";
    autoB4244EC2_i = 1;
    for ( ; autoB4244EC2_i <= UserDataInstanceCount(autoB4244EC2_userType) ; autoB4244EC2_i += 1 ) {
        lv_aicommanderinstance = UserDataInstance(autoB4244EC2_userType, autoB4244EC2_i);
        if ((UserDataGetInt("Compositions", lv_aicommanderinstance, "X_UniqueIndex", 1) == lp_uniqueIndex)) {
            return lv_aicommanderinstance;
        }

    }
    return null;
}

void libCOMI_gf_UT_Cooldown (int lp_pPlayer) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoFA2943E7_g;
    int autoFA2943E7_u;
    unit autoFA2943E7_var;
    int autoAE54DD76_ae;
    int autoAE54DD76_var;

    // Variable Initialization

    // Implementation
    UnitSetPropertyFixed(libCOMI_gf_CM_PlayerGetGlobalCaster3(lp_pPlayer), c_unitPropEnergyPercent, 100.0);
    autoFA2943E7_g = UnitGroup(null, lp_pPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFA2943E7_u = UnitGroupCount(autoFA2943E7_g, c_unitCountAll);
    for (;; autoFA2943E7_u -= 1) {
        autoFA2943E7_var = UnitGroupUnitFromEnd(autoFA2943E7_g, autoFA2943E7_u);
        if (autoFA2943E7_var == null) { break; }
        lv_unit = autoFA2943E7_var;
        UnitClearCooldowns(lv_unit, true);
        autoAE54DD76_ae = UnitAbilityCount(lv_unit);
        autoAE54DD76_var = 1;
        for ( ; autoAE54DD76_var <= autoAE54DD76_ae; autoAE54DD76_var += 1 ) {
            UnitAbilityReset(lv_unit, AbilityCommand(UnitAbilityGet(lv_unit, autoAE54DD76_var), 0), c_spendLocationAll);
        }
        if ((UnitGetProgressComplete(autoFA2943E7_var, 1) < 99.0)) {
            UnitSetProgressComplete(autoFA2943E7_var, 1, 99);
        }

        UnitBehaviorSetDurationRemaining(autoFA2943E7_var, "ARC@StargateMorph", 0.5);
        UnitBehaviorSetDurationRemaining(autoFA2943E7_var, "ARC@StargateWarpMorph", 0.5);
        UnitBehaviorSetDurationRemaining(autoFA2943E7_var, "ARC@StargateWarpMorphInstant", 0.5);
        UnitBehaviorSetDurationRemaining(autoFA2943E7_var, "ARC@StargateWarpMorphInstant", 0.5);
    }
    libARRA_gv_utilityPlayer = lp_pPlayer;
    TriggerSendEvent("Utility Cooldown");
}

void libCOMI_gf_UT_Horde_Multiply (unit lp_pUnit, fixed lp_pCoef) {
    // Variable Declarations
    int lv_vAmount;
    point lv_vIndexPoint;
    int lv_enemyPlayer;

    // Automatic Variable Declarations
    const int auto98028E52_ae = 1000;
    int auto98028E52_var;

    // Variable Initialization
    lv_enemyPlayer = libCOMI_gv_horde_Owner_Player;

    // Implementation
    if ((UnitGroupHasUnit(libCOMI_gv_uT_Horde_UG, lp_pUnit) == true)) {
        return ;
    }

    if ((PointPathingIsConnected(UnitGetPosition(lp_pUnit), libARRA_gf_GetPlayerStartPosition(EventPlayer())) == false)) {
        auto98028E52_var = 2;
        for ( ; auto98028E52_var <= auto98028E52_ae; auto98028E52_var += 1 ) {
            lv_vIndexPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_pUnit), (auto98028E52_var * 2), libARRA_gf_GetPlayerStartPosition(EventPlayer()));
            if ((PathingType(lv_vIndexPoint) == c_pathingGround) && (PointPathingIsConnected(lv_vIndexPoint, libARRA_gf_GetPlayerStartPosition(EventPlayer())) == true)) {
                break;
            }

        }
    }
    else {
        lv_vIndexPoint = UnitGetPosition(lp_pUnit);
    }
    lv_vAmount = (TruncI(lp_pCoef) - 1);
    if ((lv_vAmount >= 1)) {
        UnitCreate(lv_vAmount, UnitGetType(lp_pUnit), 0, lv_enemyPlayer, lv_vIndexPoint, UnitGetFacing(lp_pUnit));
        UnitGroupAddUnitGroup(libCOMI_gv_uT_Horde_UG, UnitLastCreatedGroup());
    }

    if ((RandomFixed(0.0, 1.0) <= (lp_pCoef - Trunc(lp_pCoef)))) {
        UnitCreate(1, UnitGetType(lp_pUnit), 0, lv_enemyPlayer, lv_vIndexPoint, UnitGetFacing(lp_pUnit));
        UnitGroupAdd(libCOMI_gv_uT_Horde_UG, UnitLastCreated());
    }

}

void libCOMI_gf_UT_MasteryPointsUpdate (int lp_pTargetPlayer) {
    // Variable Declarations
    string lv_indexMasteryUpgrade;
    int lv_vIndex;
    int lv_vTotalMastery;

    // Automatic Variable Declarations
    int autoBD94830E_ai;
    int autoBD94830E_ae;
    int autoBD94830E_ac;

    // Variable Initialization

    // Implementation
    autoBD94830E_ai = 0;
    autoBD94830E_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (autoBD94830E_ai < autoBD94830E_ae) {
        autoBD94830E_ai = autoBD94830E_ai+1;
        autoBD94830E_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", autoBD94830E_ai), "Category", 1);
        if( libCOMI_gf_ActiveCommanderForPlayer(lp_pTargetPlayer) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", autoBD94830E_ai),"Commander",1) ) {
            lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", autoBD94830E_ai);
            lv_vIndex += 1;
            libCOMI_gf_UT_PlayerMasteryUpgradeLevelSet(lp_pTargetPlayer, lv_indexMasteryUpgrade, StringToInt(libNtve_gf_DialogItemEditValue(libCOMI_gv_uT_MasteryBoxes[lv_vIndex], 1)));
            lv_vTotalMastery += StringToInt(libNtve_gf_DialogItemEditValue(libCOMI_gv_uT_MasteryBoxes[lv_vIndex], 1));
        }    
    }
    if ((GameGetMissionTime() >= 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_43AB5B7B"));
        libCOMI_gf_UT_ApplyMasteryTech(lp_pTargetPlayer);
    }
    else {
        if ((PlayerStatus(2) != c_playerStatusActive)) {
            DialogControlHookup(libCOMI_gv_cU_CommanderPanel, c_triggerControlTypeLabel, "CompositionInfoAlly/Level/MasteryLevelLabel");
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(lv_vTotalMastery), PlayerGroupAll());
        }

    }
}

void libCOMI_gf_UT_MasteryChoiceCreateUpdate (int lp_vTargetPlayer) {
    // Variable Declarations
    string lv_indexMasteryUpgrade;
    int lv_vIndex;
    int lv_vXButtonOffset;
    int lv_vYButtonOffset;

    // Automatic Variable Declarations
    int auto5E613333_ai;
    int auto5E613333_ae;
    int auto5E613333_ac;
    int auto0B882DFD_ai;
    int auto0B882DFD_ae;
    int auto0B882DFD_ac;

    // Variable Initialization
    lv_vXButtonOffset = 45;
    lv_vYButtonOffset = 45;

    // Implementation
    if ((libCOMI_gv_uT_MasteryDialog == c_invalidDialogId)) {
        TriggerEnable(libCOMI_gt_UT_MasteryButtonClicked, true);
        DialogCreate(600, 460, c_anchorRight, 250, -75, true);
        libCOMI_gv_uT_MasteryDialog = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetRenderPriority(DialogLastCreated(), 1050);
        DialogSetFullscreen(DialogLastCreated(), true);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 610, 420, c_anchorCenter, 0, 38, StringToText(""), "Assets\\Textures\\ui_ingame_resourcesharing_frame_message_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
        TextExpressionSetToken("Param/Expression/lib_COMI_D7D6BBB4", "A", IntToText(libCOMI_gv_uT_MasteryTargetPlayer));
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 910, 38, c_anchorCenter, 194, -142, TextExpressionAssemble("Param/Expression/lib_COMI_D7D6BBB4"), ColorWithAlpha(0,0,0,0), false, 2.0);
        auto0B882DFD_ai = 0;
        auto0B882DFD_ae = UserDataInstanceCount("MasteryUpgrades")+1;
        while (auto0B882DFD_ai < auto0B882DFD_ae) {
            auto0B882DFD_ai = auto0B882DFD_ai+1;
            auto0B882DFD_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", auto0B882DFD_ai), "Category", 1);
            if( libCOMI_gf_ActiveCommanderForPlayer(lp_vTargetPlayer) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", auto0B882DFD_ai),"Commander",1) ) {
                lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", auto0B882DFD_ai);
                lv_vIndex += 1;
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 50, c_anchorCenter, -10, (-125 + (50 * lv_vIndex)), libCOMI_gf_UT_PlayerMasteryName(lv_indexMasteryUpgrade), ColorWithAlpha(0,0,0,0), false, 2.0);
                libCOMI_gv_uT_MasteryLabels[lv_vIndex] = DialogControlLastCreated();
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), libCOMI_gf_CC_PlayerMasteryTooltip(lv_indexMasteryUpgrade), PlayerGroupAll());
                DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 65, 65);
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 200, (50*lv_vIndex -140));
                DialogControlCreateInPanel(DialogControlLastCreated(), c_triggerControlTypeEditBox);
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 65, 50);
                libCOMI_gv_uT_MasteryBoxes[lv_vIndex] = DialogControlLastCreated();
                libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(libCOMI_gf_UT_PlayerMasteryUpgradeLevel(lp_vTargetPlayer, lv_indexMasteryUpgrade)), PlayerGroupAll());
            }    
        }
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 50, c_anchorCenter, 0, 210, StringToText(""), StringExternal("Param/Value/lib_COMI_617CB2B5"), "");
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ButtonFont", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\protoss-border-button-game.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\protoss-border-button-game.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
        libCOMI_gv_uT_MasteryButton = DialogControlLastCreated();
    }
    else {
        auto5E613333_ai = 0;
        auto5E613333_ae = UserDataInstanceCount("MasteryUpgrades")+1;
        while (auto5E613333_ai < auto5E613333_ae) {
            auto5E613333_ai = auto5E613333_ai+1;
            auto5E613333_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", auto5E613333_ai), "Category", 1);
            if( libCOMI_gf_ActiveCommanderForPlayer(lp_vTargetPlayer) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", auto5E613333_ai),"Commander",1) ) {
                lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", auto5E613333_ai);
                lv_vIndex += 1;
                libNtve_gf_SetDialogItemText(libCOMI_gv_uT_MasteryLabels[lv_vIndex], libCOMI_gf_UT_PlayerMasteryName(lv_indexMasteryUpgrade), PlayerGroupAll());
                libNtve_gf_SetDialogItemTooltip(libCOMI_gv_uT_MasteryLabels[lv_vIndex], libCOMI_gf_CC_PlayerMasteryTooltip(lv_indexMasteryUpgrade), PlayerGroupAll());
                libNtve_gf_SetDialogItemEditorValue(libCOMI_gv_uT_MasteryBoxes[lv_vIndex], IntToString(libCOMI_gf_UT_PlayerMasteryUpgradeLevel(lp_vTargetPlayer, lv_indexMasteryUpgrade)), PlayerGroupAll());
            }    
        }
    }
}

void libCOMI_gf_UT_ApplyMasteryTech (int lp_player) {
    // Variable Declarations
    string lv_indexMasteryUpgrade;

    // Automatic Variable Declarations
    int autoF36430B0_ai;
    int autoF36430B0_ae;
    int autoF36430B0_ac;

    // Variable Initialization

    // Implementation
    autoF36430B0_ai = 0;
    autoF36430B0_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (autoF36430B0_ai < autoF36430B0_ae) {
        autoF36430B0_ai = autoF36430B0_ai+1;
        autoF36430B0_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", autoF36430B0_ai), "Category", 1);
        if( libCOMI_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", autoF36430B0_ai),"Commander",1) ) {
            lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", autoF36430B0_ai);
            if ((libCOMI_gf_CC_PlayerMasteryUpgradeData(lv_indexMasteryUpgrade) != null)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libCOMI_gf_CC_PlayerMasteryUpgradeData(lv_indexMasteryUpgrade), libCOMI_gf_CC_PlayerMasteryUpgradeLevel(lp_player, lv_indexMasteryUpgrade));
            }

        }    
    }
}

void libCOMI_gf_UT_PlayerMasteryUpgradeLevelSet (int lp_player, string lp_masteryUpgrade, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cCX_PlayerMasteryPointsSpent[lp_player][libCOMI_gf_CC_CommanderInternalIndex(libCOMI_gf_CC_PlayerMasteryCommander(lp_masteryUpgrade))][libCOMI_gf_CC_PlayerMasteryInternalIndex(lp_masteryUpgrade)] = lp_level;
}

int libCOMI_gf_UT_PlayerMasteryUpgradeLevel (int lp_player, string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cCX_PlayerMasteryPointsSpent[lp_player][libCOMI_gf_CC_CommanderInternalIndex(libCOMI_gf_CC_PlayerMasteryCommander(lp_masteryUpgrade))][libCOMI_gf_CC_PlayerMasteryInternalIndex(lp_masteryUpgrade)];
}

text libCOMI_gf_UT_PlayerMasteryName (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade) == null)) {
        return StringToText((lp_masteryUpgrade));
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogButton, CatalogFieldValueGet(c_gameCatalogTalent, libCOMI_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade), "Face", c_playerAny), "Name", 1));
}

bool libCOMI_gf_UT_GL_ScoreUsed (string lp_pScore) {
    // Automatic Variable Declarations
    const int autoFB058A3A_ae = 100;
    int autoFB058A3A_var;

    // Implementation
    autoFB058A3A_var = 0;
    for ( ; autoFB058A3A_var <= autoFB058A3A_ae; autoFB058A3A_var += 1 ) {
        if ((lp_pScore == libCOMI_gv_uT_GL_ScoresUsed[autoFB058A3A_var])) {
            return true;
        }

    }
    return false;
}

string libCOMI_gf_UT_GL_PlayerMasteryTalent (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("MasteryUpgrades", lp_masteryUpgrade, "TalentData", 1);
}

text libCOMI_gf_UT_GL_MasteryButtonName (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade) == null)) {
        return StringToText((lp_masteryUpgrade));
    }

    TextExpressionSetToken("Param/Expression/lib_COMI_BBCA0567", "A", StringToText(CatalogFieldValueGet(c_gameCatalogButton, libCOMI_gf_UT_GL_PlayerMasteryTalent(lp_masteryUpgrade), "Name", c_playerAny)));
    return TextExpressionAssemble("Param/Expression/lib_COMI_BBCA0567");
}

text libCOMI_gf_UT_GL_AddScoreValueToText (text lp_pText, string lp_pScore, int lp_pIndex) {
    // Variable Declarations
    text lv_vText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_pScore == "KorhalRiftDamage") || (lp_pScore == "DamageDealtToVoidShards") || (lp_pScore == "KaldirShuttleDamage") || (lp_pScore == "TarsonisTrainDamage") || (lp_pScore == "JarbanPointCaptureKills") || (lp_pScore == "PartAndParcelCollection") || (lp_pScore == "MeinhoffDayNightInfestedKills") || (lp_pScore == "CradleOfDeathDamageDealttoConstructs"))) {
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "A", lp_pText);
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_F889ADA8");
    }
    else if (((lp_pScore == "ZeratulDamage") || (lp_pScore == "AlarakDamage") || (lp_pScore == "FenixChampionDamage") || (lp_pScore == "DehakaDamage") || (lp_pScore == "VorazunCloakedDamage") || (lp_pScore == "SwannDrillDamage") || (lp_pScore == "FenixSuitDamage") || (lp_pScore == "ZagaraFrenzyDamage") || (lp_pScore == "RaynorHyperionDamage") || (lp_pScore == "StukovInfestedDamage") || (lp_pScore == "KerriganDamage") || (lp_pScore == "HornerMagMineDamage") || (lp_pScore == "NovaDamage") || (lp_pScore == "ArtanisSoADamage") || (lp_pScore == "AbathurMonsterDamage") || (lp_pScore == "VorazunBlackHoleDamage") || (lp_pScore == "ZagaraSuicideDamage") || (lp_pScore == "StukovMonstrosityDamage") || (lp_pScore == "StetmannGaryDamage") || (lp_pScore == "TychusReaperBombDamage") || (lp_pScore == "TychusGhostDominatedDamage") || (lp_pScore == "TychusOdinDamage") || (lp_pScore == "TychusFirebatOilDamage") || (lp_pScore == "TychusGrenadeDamage") || (lp_pScore == "TychusSpectrePulseDamage") || (lp_pScore == "TychusWarhoundTurretDamage") || (lp_pScore == "MengskRoyalGuardDamage") || (lp_pScore == "MengskTrooperDamage"))) {
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "A", lp_pText);
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_16A90BEF");
    }
    else if ((lp_pScore == "Devouroffcooldown")) {
        TextExpressionSetToken("Param/Expression/lib_COMI_148B4663", "A", lp_pText);
        TextExpressionSetToken("Param/Expression/lib_COMI_148B4663", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_148B4663", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_148B4663", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_148B4663", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_148B4663", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_148B4663", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_148B4663", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_COMI_148B4663", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_148B4663", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_148B4663", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_148B4663", "B", IntToText(lp_pIndex));
        lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_148B4663");
    }
    else if ((lp_pScore == "DamageDealtbyContaminatedStrike")) {
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "A", lp_pText);
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_A0F11326");
    }
    else if (true) {
        if ((libCOMI_gf_UT_GL_IsSharedMissionScore(lp_pScore) == true)) {
            TextExpressionSetToken("Param/Expression/lib_COMI_5C7A1C02", "A", lp_pText);
            TextExpressionSetToken("Param/Expression/lib_COMI_5C7A1C02", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_5C7A1C02", "D", IntToText((lp_pIndex + 1)));
            TextExpressionSetToken("Param/Expression/lib_COMI_5C7A1C02", "C", StringToText((lp_pScore)));
            TextExpressionSetToken("Param/Expression/lib_COMI_5C7A1C02", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_5C7A1C02", "D", IntToText((lp_pIndex + 1)));
            TextExpressionSetToken("Param/Expression/lib_COMI_5C7A1C02", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_5C7A1C02", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_5C7A1C02", "C", StringToText((lp_pScore)));
            TextExpressionSetToken("Param/Expression/lib_COMI_5C7A1C02", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_5C7A1C02", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_5C7A1C02", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_5C7A1C02", "B", IntToText(lp_pIndex));
            lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_5C7A1C02");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_COMI_21C9D3B1", "A", lp_pText);
            TextExpressionSetToken("Param/Expression/lib_COMI_21C9D3B1", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_21C9D3B1", "D", IntToText((lp_pIndex + 1)));
            TextExpressionSetToken("Param/Expression/lib_COMI_21C9D3B1", "C", StringToText((lp_pScore)));
            TextExpressionSetToken("Param/Expression/lib_COMI_21C9D3B1", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_21C9D3B1", "D", IntToText((lp_pIndex + 1)));
            TextExpressionSetToken("Param/Expression/lib_COMI_21C9D3B1", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_21C9D3B1", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_21C9D3B1", "C", StringToText((lp_pScore)));
            TextExpressionSetToken("Param/Expression/lib_COMI_21C9D3B1", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_21C9D3B1", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_21C9D3B1", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_21C9D3B1", "B", IntToText(lp_pIndex));
            lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_21C9D3B1");
        }
    }
    return lv_vText;
}

text libCOMI_gf_UT_GL_AddVariableValueToText (text lp_pText, text lp_pVariable, text lp_pVariableDescription, int lp_pIndex) {
    // Variable Declarations
    text lv_vText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COMI_1FCBE922", "A", lp_pText);
    TextExpressionSetToken("Param/Expression/lib_COMI_1FCBE922", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_COMI_1FCBE922", "D", IntToText((lp_pIndex + 1)));
    TextExpressionSetToken("Param/Expression/lib_COMI_1FCBE922", "C", lp_pVariableDescription);
    TextExpressionSetToken("Param/Expression/lib_COMI_1FCBE922", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_COMI_1FCBE922", "D", IntToText((lp_pIndex + 1)));
    TextExpressionSetToken("Param/Expression/lib_COMI_1FCBE922", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_COMI_1FCBE922", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_COMI_1FCBE922", "E", lp_pVariable);
    TextExpressionSetToken("Param/Expression/lib_COMI_1FCBE922", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_COMI_1FCBE922", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_COMI_1FCBE922", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_COMI_1FCBE922", "B", IntToText(lp_pIndex));
    lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_1FCBE922");
    return lv_vText;
}

bool libCOMI_gf_UT_GL_IsSharedMissionScore (string lp_pScore) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_pScore == "MSFortressLifeRemaining") || (lp_pScore == "MSHarvestingBotLifeRemaining") || (lp_pScore == "MSLockOverloadTime") || (lp_pScore == "MSScientistHealthRemaining") || (lp_pScore == "MSShuttleUptime") || (lp_pScore == "MSTempleLifeRemaining") || (lp_pScore == "ShakurasTempleLife") || (lp_pScore == "MSThrasherUptime") || (lp_pScore == "MSTrainDuration") || (lp_pScore == "SlaynPush") || (lp_pScore == "BelshirEscortHarvesterDamage") || (lp_pScore == "UlnarOverload") || (lp_pScore == "CharThrasherLife"))) {
        return true;
    }
    else {
        return false;
    }
}

void libCOMI_gf_UT_GL_GenerateNewLayout () {
    // Variable Declarations
    text lv_vText;
    int lv_vA;
    string lv_vMap;
    string lv_vMasteryUpgradeInstance;
    string lv_vCommanderInstance;
    int lv_vMasteryIndex;
    string lv_vCurrentScore;

    // Automatic Variable Declarations
    string autoB3CB654E_userType;
    int autoB3CB654E_i;
    int auto6F0366D6_ai;
    int auto6F0366D6_ae;
    int auto6F0366D6_ac;
    const int autoAB1D5940_ae = 6;
    int autoAB1D5940_var;
    string auto6AD9CA80_userType;
    int auto6AD9CA80_i;
    int autoC9CF5070_catalog;
    int autoC9CF5070_i;
    const int auto6B5E5959_ae = 2;
    int auto6B5E5959_var;
    string autoC43EC64E_userType;
    int autoC43EC64E_i;
    string autoDC0872E8_userType;
    int autoDC0872E8_i;

    // Variable Initialization
    lv_vText = StringToText("");

    // Implementation
    BankLoad("ReplayUILayouts", 1);
    TextExpressionSetToken("Param/Expression/lib_COMI_8060C82F", "A", lv_vText);
    lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_8060C82F");
    autoB3CB654E_userType = "Commanders";
    autoB3CB654E_i = 1;
    for ( ; autoB3CB654E_i <= UserDataInstanceCount(autoB3CB654E_userType) ; autoB3CB654E_i += 1 ) {
        lv_vCommanderInstance = UserDataInstance(autoB3CB654E_userType, autoB3CB654E_i);
        TextExpressionSetToken("Param/Expression/lib_COMI_7E8C5873", "C", lv_vText);
        TextExpressionSetToken("Param/Expression/lib_COMI_7E8C5873", "A", UserDataGetText("Commanders", lv_vCommanderInstance, "Name", 1));
        TextExpressionSetToken("Param/Expression/lib_COMI_7E8C5873", "B", IntToText(UserDataGetInt("Commanders", lv_vCommanderInstance, "ZZ_UniqueIndex", 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_7E8C5873", "A", UserDataGetText("Commanders", lv_vCommanderInstance, "Name", 1));
        lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_7E8C5873");
        lv_vMasteryIndex = 1;
        if ((lv_vCommanderInstance == "Mengsk")) {
            autoAB1D5940_var = 1;
            for ( ; autoAB1D5940_var <= autoAB1D5940_ae; autoAB1D5940_var += 1 ) {
                TextExpressionSetToken("Param/Expression/lib_COMI_B9E3AD23", "A", lv_vText);
                TextExpressionSetToken("Param/Expression/lib_COMI_B9E3AD23", "C", IntToText(lv_vMasteryIndex));
                TextExpressionSetToken("Param/Expression/lib_COMI_B9E3AD23", "B", IntToText(autoAB1D5940_var));
                lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_B9E3AD23");
                lv_vMasteryIndex += 1;
            }
        }
        else {
            auto6F0366D6_ai = 0;
            auto6F0366D6_ae = UserDataInstanceCount("MasteryUpgrades")+1;
            while (auto6F0366D6_ai < auto6F0366D6_ae) {
                auto6F0366D6_ai = auto6F0366D6_ai+1;
                auto6F0366D6_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", auto6F0366D6_ai), "Category", 1);
                if( lv_vCommanderInstance == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", auto6F0366D6_ai),"Commander",1) ) {
                    lv_vMasteryUpgradeInstance = UserDataInstance("MasteryUpgrades", auto6F0366D6_ai);
                    TextExpressionSetToken("Param/Expression/lib_COMI_46AA3484", "A", lv_vText);
                    TextExpressionSetToken("Param/Expression/lib_COMI_46AA3484", "C", IntToText(lv_vMasteryIndex));
                    TextExpressionSetToken("Param/Expression/lib_COMI_46AA3484", "B", libCOMI_gf_UT_GL_MasteryButtonName(lv_vMasteryUpgradeInstance));
                    lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_46AA3484");
                    lv_vMasteryIndex += 1;
                }    
            }
        }
        TextExpressionSetToken("Param/Expression/lib_COMI_569A223E", "A", lv_vText);
        lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_569A223E");
    }
    TextExpressionSetToken("Param/Expression/lib_COMI_54C883DD", "A", lv_vText);
    lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_54C883DD");
    auto6AD9CA80_userType = "Commanders";
    auto6AD9CA80_i = 1;
    for ( ; auto6AD9CA80_i <= UserDataInstanceCount(auto6AD9CA80_userType) ; auto6AD9CA80_i += 1 ) {
        lv_vCommanderInstance = UserDataInstance(auto6AD9CA80_userType, auto6AD9CA80_i);
        if ((lv_vCommanderInstance != "Tychus")) {
            auto6B5E5959_var = 1;
            for ( ; auto6B5E5959_var <= auto6B5E5959_ae; auto6B5E5959_var += 1 ) {
                if ((lv_vCurrentScore != null) && (libCOMI_gf_UT_GL_ScoreUsed(lv_vCurrentScore) == false)) {
                    lv_vA += 1;
                    lv_vText = libCOMI_gf_UT_GL_AddScoreValueToText(lv_vText, lv_vCurrentScore, lv_vA);
                    libCOMI_gv_uT_GL_ScoresUsed[lv_vA] = lv_vCurrentScore;
                }

            }
            lv_vCurrentScore = "Devouroffcooldown";
            if ((lv_vCommanderInstance == "Dehaka") && (libCOMI_gf_UT_GL_ScoreUsed(lv_vCurrentScore) == false)) {
                lv_vA += 1;
                lv_vText = libCOMI_gf_UT_GL_AddScoreValueToText(lv_vText, lv_vCurrentScore, lv_vA);
                libCOMI_gv_uT_GL_ScoresUsed[lv_vA] = lv_vCurrentScore;
            }

            lv_vCurrentScore = "DamageDealtbyContaminatedStrike";
            if ((lv_vCommanderInstance == "TerranMengsk") && (libCOMI_gf_UT_GL_ScoreUsed(lv_vCurrentScore) == false)) {
                lv_vA += 1;
                lv_vText = libCOMI_gf_UT_GL_AddScoreValueToText(lv_vText, lv_vCurrentScore, lv_vA);
                libCOMI_gv_uT_GL_ScoresUsed[lv_vA] = lv_vCurrentScore;
            }

        }
        else {
            autoC9CF5070_catalog = c_gameCatalogScoreValue;
            autoC9CF5070_i = 1;
            for ( ; autoC9CF5070_i <= CatalogEntryCount(c_gameCatalogScoreValue) ; autoC9CF5070_i += 1 ) {
                lv_vCurrentScore = CatalogEntryGet(autoC9CF5070_catalog, autoC9CF5070_i);
                if ((StringSub((lv_vCurrentScore), 1, 6) == "Tychus")) {
                    if ((lv_vCurrentScore != null) && (libCOMI_gf_UT_GL_ScoreUsed(lv_vCurrentScore) == false)) {
                        lv_vA += 1;
                        lv_vText = libCOMI_gf_UT_GL_AddScoreValueToText(lv_vText, lv_vCurrentScore, lv_vA);
                        libCOMI_gv_uT_GL_ScoresUsed[lv_vA] = lv_vCurrentScore;
                    }

                }

            }
        }
    }
    autoC43EC64E_userType = "Maps";
    autoC43EC64E_i = 1;
    for ( ; autoC43EC64E_i <= UserDataInstanceCount(autoC43EC64E_userType) ; autoC43EC64E_i += 1 ) {
        lv_vMap = UserDataInstance(autoC43EC64E_userType, autoC43EC64E_i);
        lv_vCurrentScore = UserDataGetGameLink("Maps", lv_vMap, "ScoreStatistic", 1);
        if ((lv_vCurrentScore != null) && (libCOMI_gf_UT_GL_ScoreUsed(lv_vCurrentScore) == false) && (libCOMI_gf_UT_GL_IsSharedMissionScore(lv_vCurrentScore) == false)) {
            lv_vA += 1;
            lv_vText = libCOMI_gf_UT_GL_AddScoreValueToText(lv_vText, lv_vCurrentScore, lv_vA);
            libCOMI_gv_uT_GL_ScoresUsed[lv_vA] = lv_vCurrentScore;
        }

    }
    lv_vA += 1;
    TextExpressionSetToken("Param/Expression/lib_COMI_8DF61F6B", "A", lv_vText);
    TextExpressionSetToken("Param/Expression/lib_COMI_8DF61F6B", "B", IntToText(lv_vA));
    lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_8DF61F6B");
    BankValueSetFromText(BankLastCreated(), "A", "PlayerScores", lv_vText);
    lv_vText = StringToText("");
    lv_vA = 0;
    autoDC0872E8_userType = "Maps";
    autoDC0872E8_i = 1;
    for ( ; autoDC0872E8_i <= UserDataInstanceCount(autoDC0872E8_userType) ; autoDC0872E8_i += 1 ) {
        lv_vMap = UserDataInstance(autoDC0872E8_userType, autoDC0872E8_i);
        lv_vCurrentScore = UserDataGetGameLink("Maps", lv_vMap, "ScoreStatistic", 1);
        if ((lv_vCurrentScore != null) && (libCOMI_gf_UT_GL_ScoreUsed(lv_vCurrentScore) == false) && (libCOMI_gf_UT_GL_IsSharedMissionScore(lv_vCurrentScore) == true)) {
            lv_vA += 1;
            lv_vText = libCOMI_gf_UT_GL_AddScoreValueToText(lv_vText, lv_vCurrentScore, lv_vA);
            libCOMI_gv_uT_GL_ScoresUsed[lv_vA] = lv_vCurrentScore;
        }

    }
    lv_vA += 1;
    lv_vText = libCOMI_gf_UT_GL_AddVariableValueToText(lv_vText, StringExternal("Param/Value/lib_COMI_6D6D943D"), StringExternal("Param/Value/lib_COMI_80A5717F"), lv_vA);
    lv_vA += 1;
    lv_vText = libCOMI_gf_UT_GL_AddVariableValueToText(lv_vText, StringExternal("Param/Value/lib_COMI_9A81E614"), StringExternal("Param/Value/lib_COMI_39232BF7"), lv_vA);
    lv_vA += 1;
    lv_vText = libCOMI_gf_UT_GL_AddVariableValueToText(lv_vText, StringExternal("Param/Value/lib_COMI_2B37AC46"), StringExternal("Param/Value/lib_COMI_0EF09523"), lv_vA);
    lv_vA += 1;
    lv_vText = libCOMI_gf_UT_GL_AddVariableValueToText(lv_vText, StringExternal("Param/Value/lib_COMI_7E52D2B5"), StringExternal("Param/Value/lib_COMI_0738FC84"), lv_vA);
    lv_vA += 1;
    TextExpressionSetToken("Param/Expression/lib_COMI_8F2F72F6", "A", lv_vText);
    TextExpressionSetToken("Param/Expression/lib_COMI_8F2F72F6", "B", IntToText(lv_vA));
    lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_8F2F72F6");
    BankValueSetFromText(BankLastCreated(), "A", "SharedMissionMutatorScores", lv_vText);
    BankSave(BankLastCreated());
}

string libCOMI_gf_ActiveCommanderForPlayer3 (int lp_player) {
    // Variable Declarations
    string lv_commanderInstance;

    // Automatic Variable Declarations
    string auto68643B21_val;

    // Variable Initialization
    lv_commanderInstance = libCOMI_gv_cCX_PlayerCommander[lp_player];

    // Implementation
    auto68643B21_val = libCOMI_gv_cCX_PlayerCommander[lp_player];
    if (auto68643B21_val == "Abathur") {
        return "ARC@Abathur";
    }
    else if (auto68643B21_val == "Alarak") {
        return "ARC@Alarak";
    }
    else if (auto68643B21_val == "Artanis") {
        return "ARC@Artanis";
    }
    else if (auto68643B21_val == "Dehaka") {
        return "ARC@Dehaka";
    }
    else if (auto68643B21_val == "Fenix") {
        return "ARC@Fenix";
    }
    else if (auto68643B21_val == "Horner") {
        return "ARC@Horner";
    }
    else if (auto68643B21_val == "Karax") {
        return "ARC@Karax";
    }
    else if (auto68643B21_val == "Kerrigan") {
        return "ARC@Kerrigan";
    }
    else if (auto68643B21_val == "Nova") {
        return "ARC@Nova";
    }
    else if (auto68643B21_val == "Raiders") {
        return "ARC@Raynor";
    }
    else if (auto68643B21_val == "Stukov") {
        return "ARC@Stukov";
    }
    else if (auto68643B21_val == "Swann") {
        return "ARC@Swann";
    }
    else if (auto68643B21_val == "Tychus") {
        return "ARC@Tychus";
    }
    else if (auto68643B21_val == "Vorazun") {
        return "ARC@Vorazun";
    }
    else if (auto68643B21_val == "Zagara") {
        return "ARC@Zagara";
    }
    else if (auto68643B21_val == "Zeratul") {
        return "ARC@Zeratul";
    }
    else if (auto68643B21_val == "Stetmann") {
        return "ARC@Stetmann";
    }
    else if (auto68643B21_val == "Mengsk") {
        return "ARC@Mengsk";
    }
    else {
        return null;
    }
}

playergroup libCOMI_gf_UT_ActiveCommanderPlayers () {
    // Variable Declarations
    playergroup lv_vPG;

    // Automatic Variable Declarations
    const int autoFD53754A_ae = 2;
    int autoFD53754A_var;

    // Variable Initialization
    lv_vPG = PlayerGroupEmpty();

    // Implementation
    autoFD53754A_var = 1;
    for ( ; autoFD53754A_var <= autoFD53754A_ae; autoFD53754A_var += 1 ) {
        if ((PlayerStatus(autoFD53754A_var) == c_playerStatusActive)) {
            PlayerGroupAdd(lv_vPG, autoFD53754A_var);
        }

    }
    return lv_vPG;
}

string libCOMI_gf_UT_CommanderLoadingImage (string lp_pCommander) {
    // Automatic Variable Declarations
    string auto05888844_val;

    // Implementation
    auto05888844_val = lp_pCommander;
    if (auto05888844_val == "ARC@Abathur") {
        return "Assets\\Textures\\ui_loading_coop_hero_abathur.dds";
    }
    else if (auto05888844_val == "ARC@Alarak") {
        return "Assets\\Textures\\ui_loading_coop_hero_alarak.dds";
    }
    else if (auto05888844_val == "ARC@Artanis") {
        return "Assets\\Textures\\ui_loading_coop_hero_artanis.dds";
    }
    else if (auto05888844_val == "ARC@Dehaka") {
        return "Assets\\Textures\\ui_loading_coop_hero_dehaka.dds";
    }
    else if (auto05888844_val == "ARC@Fenix") {
        return "Assets\\Textures\\ui_loading_coop_hero_fenix.dds";
    }
    else if (auto05888844_val == "ARC@Horner") {
        return "Assets\\Textures\\ui_loading_coop_hero_hanandhorner.dds";
    }
    else if (auto05888844_val == "ARC@Karax") {
        return "Assets\\Textures\\ui_loading_coop_hero_karax.dds";
    }
    else if (auto05888844_val == "ARC@Kerrigan") {
        return "Assets\\Textures\\ui_loading_coop_hero_kerrigan.dds";
    }
    else if (auto05888844_val == "ARC@Nova") {
        return "Assets\\Textures\\ui_loading_coop_hero_nova.dds";
    }
    else if (auto05888844_val == "ARC@Raynor") {
        return "Assets\\Textures\\ui_loading_coop_hero_raynor.dds";
    }
    else if (auto05888844_val == "ARC@Stukov") {
        return "Assets\\Textures\\ui_loading_coop_hero_stukov.dds";
    }
    else if (auto05888844_val == "ARC@Swann") {
        return "Assets\\Textures\\ui_loading_coop_hero_swann.dds";
    }
    else if (auto05888844_val == "ARC@Tychus") {
        return "Assets\\Textures\\ui_loading_coop_hero_tychus.dds";
    }
    else if (auto05888844_val == "ARC@Vorazun") {
        return "Assets\\Textures\\ui_loading_coop_hero_vorazun.dds";
    }
    else if (auto05888844_val == "ARC@Zagara") {
        return "Assets\\Textures\\ui_loading_coop_hero_zagara.dds";
    }
    else if (auto05888844_val == "ARC@Zeratul") {
        return "Assets\\Textures\\ui_loading_coop_hero_zeratul.dds";
    }
    else if (auto05888844_val == "ARC@Stetmann") {
        return "Assets\\Textures\\ui_loading_coop_hero_stetmann.dds";
    }
    else if (auto05888844_val == "ARC@Mengsk") {
        return "Assets\\Textures\\ui_loading_coop_hero_mengsk.dds";
    }
    else {
        return "Assets\\Textures\\blank.dds";
    }
}

string libCOMI_gf_ActiveCommanderForPlayer2 (string lp_pUserDataInstance) {
    // Automatic Variable Declarations
    string autoAFC49AC5_val;

    // Implementation
    autoAFC49AC5_val = lp_pUserDataInstance;
    if (autoAFC49AC5_val == "Abathur") {
        return "ARC@Abathur";
    }
    else if (autoAFC49AC5_val == "Alarak") {
        return "ARC@Alarak";
    }
    else if (autoAFC49AC5_val == "Artanis") {
        return "ARC@Artanis";
    }
    else if (autoAFC49AC5_val == "Dehaka") {
        return "ARC@Dehaka";
    }
    else if (autoAFC49AC5_val == "Fenix") {
        return "ARC@Fenix";
    }
    else if (autoAFC49AC5_val == "Horner") {
        return "ARC@Horner";
    }
    else if (autoAFC49AC5_val == "Karax") {
        return "ARC@Karax";
    }
    else if (autoAFC49AC5_val == "Kerrigan") {
        return "ARC@Kerrigan";
    }
    else if (autoAFC49AC5_val == "Nova") {
        return "ARC@Nova";
    }
    else if (autoAFC49AC5_val == "Raiders") {
        return "ARC@Raynor";
    }
    else if (autoAFC49AC5_val == "Stukov") {
        return "ARC@Stukov";
    }
    else if (autoAFC49AC5_val == "Swann") {
        return "ARC@Swann";
    }
    else if (autoAFC49AC5_val == "Tychus") {
        return "ARC@Tychus";
    }
    else if (autoAFC49AC5_val == "Vorazun") {
        return "ARC@Vorazun";
    }
    else if (autoAFC49AC5_val == "Zagara") {
        return "ARC@Zagara";
    }
    else if (autoAFC49AC5_val == "Zeratul") {
        return "ARC@Zeratul";
    }
    else if (autoAFC49AC5_val == "Stetmann") {
        return "ARC@Stetmann";
    }
    else if (autoAFC49AC5_val == "Mengsk") {
        return "ARC@Mengsk";
    }
    else {
        return null;
    }
}

int libCOMI_gf_UT_OtherPlayer (int lp_pPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_pPlayer == 1)) {
        return 2;
    }
    else {
        return 1;
    }
}

unit libCOMI_gf_CM_PlayerGetGlobalCaster3 (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_yY_GPCasterUnit[lp_player];
}

void libCOMI_gf_UT_CommanderHide (int lp_pCommanderMax) {
    // Variable Declarations
    int lv_commanderIndex;
    int lv_commanderButtons;

    // Automatic Variable Declarations
    const int auto6034FEA3_ae = libCOMI_gv_mAX_COMMANDERCOUNT;
    const int auto6034FEA3_ai = 1;

    // Variable Initialization
    lv_commanderButtons = c_invalidDialogControlId;

    // Implementation
    DialogControlHookup(libCOMI_gv_cU_CommanderPanel, c_triggerControlTypePanel, "CommanderButtons");
    lv_commanderButtons = DialogControlLastCreated();
    lv_commanderIndex = (lp_pCommanderMax + 1);
    for ( ; ( (auto6034FEA3_ai >= 0 && lv_commanderIndex <= auto6034FEA3_ae) || (auto6034FEA3_ai < 0 && lv_commanderIndex >= auto6034FEA3_ae) ) ; lv_commanderIndex += auto6034FEA3_ai ) {
        DialogControlHookup(lv_commanderButtons, c_triggerControlTypeButton, "CommanderButton" + IntToString(lv_commanderIndex));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
}

bool libCOMI_gf_UT_Bank_UnitExcluded (unit lp_pUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_pUnit != libCOMI_gf_CM_PlayerGetGlobalCaster2(1)) && (lp_pUnit != libCOMI_gf_CM_PlayerGetGlobalCaster2(2)) && (lp_pUnit != libCOMI_gf_OBSOLETE_AF_GetHeroUnit(1)) && (lp_pUnit != libCOMI_gf_OBSOLETE_AF_GetHeroUnit(2))) {
        return false;
    }
    else {
        return true;
    }
}

void libCOMI_gf_UT_Bank_SaveBank (int lp_pPlayer, string lp_pSaveName, string lp_pBankName) {
    // Variable Declarations
    int lv_vPlayer;
    int lv_vA;
    int lv_vB;
    string lv_vUpgrade;
    string lv_vUnitSection;
    string lv_vUpgradeSection;
    const int lv_vSecLength = 6;

    // Automatic Variable Declarations
    const int auto60B37C9E_ae = libCOMI_gv_uT_Bank_MaxPlayers;
    int auto60B37C9E_var;
    unitgroup auto46BA53E6_g;
    int auto46BA53E6_u;
    unit auto46BA53E6_var;

    // Variable Initialization
    lv_vUnitSection = ("Units_" + (libCOMI_gf_CC_CurrentMap()) + "_" + lp_pSaveName);
    lv_vUpgradeSection = ("Upgrades_" + (libCOMI_gf_CC_CurrentMap()) + "_" + lp_pSaveName);

    // Implementation
    BankLoad(lp_pBankName, lp_pPlayer);
    BankSectionRemove(BankLastCreated(), lv_vUnitSection);
    auto60B37C9E_var = 1;
    for ( ; auto60B37C9E_var <= auto60B37C9E_ae; auto60B37C9E_var += 1 ) {
        auto46BA53E6_g = UnitGroup(null, auto60B37C9E_var, RegionEntireMap(), libCOMI_gv_uT_Bank_UnitFilter, 0);
        auto46BA53E6_u = UnitGroupCount(auto46BA53E6_g, c_unitCountAll);
        for (;; auto46BA53E6_u -= 1) {
            auto46BA53E6_var = UnitGroupUnitFromEnd(auto46BA53E6_g, auto46BA53E6_u);
            if (auto46BA53E6_var == null) { break; }
            if ((libCOMI_gf_UT_Bank_UnitExcluded(auto46BA53E6_var) == false)) {
                BankValueSetFromString(BankLastCreated(), lv_vUnitSection, IntToString(lv_vA), (FixedToString(PointGetX(UnitGetPosition(auto46BA53E6_var)), c_fixedPrecisionAny) + "," + FixedToString(PointGetY(UnitGetPosition(auto46BA53E6_var)), c_fixedPrecisionAny) + "," + FixedToString(UnitGetFacing(auto46BA53E6_var), c_fixedPrecisionAny) + "," + FixedToString(UnitGetPropertyFixed(auto46BA53E6_var, c_unitPropLife, c_unitPropCurrent), c_fixedPrecisionAny) + "," + FixedToString(UnitGetPropertyFixed(auto46BA53E6_var, c_unitPropShields, c_unitPropCurrent), c_fixedPrecisionAny) + "," + FixedToString(UnitGetPropertyFixed(auto46BA53E6_var, c_unitPropEnergy, c_unitPropCurrent), c_fixedPrecisionAny) + "," + FixedToString(UnitGetPropertyFixed(auto46BA53E6_var, c_unitPropKills, c_unitPropCurrent), c_fixedPrecisionAny) + "," + IntToString(BoolToInt(libNtve_gf_UnitIsHidden(auto46BA53E6_var))) + "," + IntToString(UnitGetOwner(auto46BA53E6_var)) + "," + (UnitGetType(auto46BA53E6_var))));
                lv_vA += 1;
            }

        }
    }
    BankValueSetFromInt(BankLastCreated(), lv_vUnitSection, "MaxUnits", lv_vA);
    BankSave(BankLastCreated());
}

void libCOMI_gf_UT_Bank_RestoreBank (int lp_pPlayer, string lp_pSaveName, playergroup lp_pPlayerGroup, string lp_pBankName) {
    // Variable Declarations
    int lv_vA;
    int lv_vB;
    int lv_vMaxUnits;
    int lv_vMaxUpgrades;
    unitgroup lv_vUGRemoveTheseUnitsLater;
    unitgroup lv_vUGKeepTheseUnits;
    string lv_vUpgrade;
    string lv_vUnitSection;
    string lv_vUpgradeSection;
    string lv_vString;
    string lv_vUnitType;
    point lv_vPosition;
    int lv_vPlayer;
    unitgroup lv_vUGSameUnitsClose;
    unit lv_vUnit;

    // Automatic Variable Declarations
    int auto94EA2118_ae;
    const int auto94EA2118_ai = 1;
    playergroup auto490607D7_g;
    int auto490607D7_var;
    unitgroup autoCDD0299D_g;
    int autoCDD0299D_u;
    unit autoCDD0299D_var;
    unitgroup auto1C26FBAB_g;
    int auto1C26FBAB_u;
    unit auto1C26FBAB_var;

    // Variable Initialization
    lv_vUGRemoveTheseUnitsLater = UnitGroupEmpty();
    lv_vUGKeepTheseUnits = UnitGroupEmpty();
    lv_vUnitSection = ("Units_" + (libCOMI_gf_CC_CurrentMap()) + "_" + lp_pSaveName);
    lv_vUpgradeSection = ("Upgrades_" + (libCOMI_gf_CC_CurrentMap()) + "_" + lp_pSaveName);
    lv_vString = "";
    lv_vUGSameUnitsClose = UnitGroupEmpty();

    // Implementation
    BankLoad(lp_pBankName, lp_pPlayer);
    lv_vMaxUnits = BankValueGetAsInt(BankLastCreated(), lv_vUnitSection, "MaxUnits");
    auto94EA2118_ae = (lv_vMaxUnits-1);
    lv_vA = 0;
    for ( ; ( (auto94EA2118_ai >= 0 && lv_vA <= auto94EA2118_ae) || (auto94EA2118_ai < 0 && lv_vA >= auto94EA2118_ae) ) ; lv_vA += auto94EA2118_ai ) {
        lv_vString = BankValueGetAsString(BankLastCreated(), lv_vUnitSection, IntToString(lv_vA));
        lv_vUnitType = UnitTypeFromString(libARRA_gf_UT_SeparatedSubstring(lv_vString, 10, ","));
        lv_vPosition = Point(StringToFixed(libARRA_gf_UT_SeparatedSubstring(lv_vString, 1, ",")), StringToFixed(libARRA_gf_UT_SeparatedSubstring(lv_vString, 2, ",")));
        lv_vPlayer = StringToInt(libARRA_gf_UT_SeparatedSubstring(lv_vString, 9, ","));
        lv_vUGSameUnitsClose = UnitGroup(lv_vUnitType, lv_vPlayer, RegionCircle(lv_vPosition, 0.2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        if ((PlayerGroupHasPlayer(lp_pPlayerGroup, lv_vPlayer) == true) && (UnitGroupCount(lv_vUGSameUnitsClose, c_unitCountAlive) == 0)) {
            lv_vB += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_vUnitType, c_unitCreateIgnorePlacement, lv_vPlayer, lv_vPosition);
            UnitGroupAdd(lv_vUGKeepTheseUnits, UnitLastCreated());
            UnitSetFacing(UnitLastCreated(), StringToFixed(libARRA_gf_UT_SeparatedSubstring(lv_vString, 3, ",")), 0.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, StringToFixed(libARRA_gf_UT_SeparatedSubstring(lv_vString, 4, ",")));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShields, StringToFixed(libARRA_gf_UT_SeparatedSubstring(lv_vString, 5, ",")));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergy, StringToFixed(libARRA_gf_UT_SeparatedSubstring(lv_vString, 6, ",")));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropKills, StringToFixed(libARRA_gf_UT_SeparatedSubstring(lv_vString, 7, ",")));
            if ((libARRA_gf_UT_SeparatedSubstring(lv_vString, 8, ",") == "1")) {
                libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
            }

        }
        else if ((PlayerGroupHasPlayer(lp_pPlayerGroup, lv_vPlayer) == true) && (UnitGroupCount(lv_vUGSameUnitsClose, c_unitCountAlive) >= 1)) {
            lv_vUnit = UnitGroupRandomUnit(lv_vUGSameUnitsClose, c_unitCountAlive);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, StringToFixed(libARRA_gf_UT_SeparatedSubstring(lv_vString, 4, ",")));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShields, StringToFixed(libARRA_gf_UT_SeparatedSubstring(lv_vString, 5, ",")));
            UnitGroupAdd(lv_vUGKeepTheseUnits, lv_vUnit);
        }
    }
    auto490607D7_g = lp_pPlayerGroup;
    auto490607D7_var = -1;
    while (true) {
        auto490607D7_var = PlayerGroupNextPlayer(auto490607D7_g, auto490607D7_var);
        if (auto490607D7_var < 0) { break; }
        autoCDD0299D_g = UnitGroup(null, auto490607D7_var, RegionEntireMap(), libCOMI_gv_uT_Bank_UnitFilter, 0);
        autoCDD0299D_u = UnitGroupCount(autoCDD0299D_g, c_unitCountAll);
        for (;; autoCDD0299D_u -= 1) {
            autoCDD0299D_var = UnitGroupUnitFromEnd(autoCDD0299D_g, autoCDD0299D_u);
            if (autoCDD0299D_var == null) { break; }
            if ((libCOMI_gf_UT_Bank_UnitExcluded(autoCDD0299D_var) == false) && (UnitGroupHasUnit(lv_vUGKeepTheseUnits, autoCDD0299D_var) == false)) {
                UnitRemove(autoCDD0299D_var);
            }

        }
    }
    auto1C26FBAB_g = lv_vUGRemoveTheseUnitsLater;
    auto1C26FBAB_u = UnitGroupCount(auto1C26FBAB_g, c_unitCountAll);
    for (;; auto1C26FBAB_u -= 1) {
        auto1C26FBAB_var = UnitGroupUnitFromEnd(auto1C26FBAB_g, auto1C26FBAB_u);
        if (auto1C26FBAB_var == null) { break; }
        UnitRemove(auto1C26FBAB_var);
    }
    TextExpressionSetToken("Param/Expression/lib_COMI_FEE0C551", "A", IntToText(lv_vB));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_FEE0C551"));
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Default Map Initialize Trigger
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_DefaultMapInitializeTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = UserDataGetGameLink("MissionSettings", "CurrentMission", "Map", 1);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_map != null)) {
        libCOMI_gf_LoadCoopMission(lv_map, libCOMI_gt_DefaultGameStartTrigger);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_DefaultMapInitializeTrigger_Init () {
    libCOMI_gt_DefaultMapInitializeTrigger = TriggerCreate("libCOMI_gt_DefaultMapInitializeTrigger_Func");
    TriggerAddEventMapInit(libCOMI_gt_DefaultMapInitializeTrigger);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Default Game Start Trigger
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_DefaultGameStartTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_DefaultGameStartTrigger_Init () {
    libCOMI_gt_DefaultGameStartTrigger = TriggerCreate("libCOMI_gt_DefaultGameStartTrigger_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initial Exploration
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_InitialExploration_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_allyReveal;
    region lv_amonReveal;
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoF7AF8F9B_g;
    playergroup autoE19D999D_g;

    // Variable Initialization
    lv_amonReveal = RegionFromName("Amon Initial Exploration");

    // Conditions
    if (testConds) {
        if (!((lv_allyReveal != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(3.0, c_timeReal);
    if ((lv_allyReveal != null)) {
        autoF7AF8F9B_g = libCOMI_gf_GetAlliedCommandersPlayers();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoF7AF8F9B_g, lv_player);
            if (lv_player < 0) { break; }
            VisExploreArea(lv_player, lv_allyReveal, true, false);
        }
    }

    if ((lv_amonReveal != null)) {
        autoE19D999D_g = libCOMI_gv_vU_EnemyPlayers;
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoE19D999D_g, lv_player);
            if (lv_player < 0) { break; }
            VisExploreArea(lv_player, lv_amonReveal, true, false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_InitialExploration_Init () {
    libCOMI_gt_InitialExploration = TriggerCreate("libCOMI_gt_InitialExploration_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Campaign Mission Initialize
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignMissionInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_indexPlayer;
    int lv_itPlayer;
    int lv_playerInTeam;
    camerainfo lv_camera;
    point lv_point;
    int lv_expansionIndex;
    int lv_mAX_RECOMMENDED_ALLIED_PLAYERS;

    // Automatic Variable Declarations
    playergroup autoFD1992CB_g;
    playergroup auto6B1E1E16_g;
    playergroup auto4B79EFEC_g;
    playergroup auto12247ED8_g;
    playergroup auto6159EA35_g;
    playergroup autoFBC5769B_g;
    playergroup autoF780711E_g;
    int autoF780711E_var;

    // Variable Initialization
    lv_camera = CameraInfoDefault();
    lv_mAX_RECOMMENDED_ALLIED_PLAYERS = 3;

    // Actions
    if (!runActions) {
        return true;
    }

    autoFD1992CB_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoFD1992CB_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        TechTreeUpgradeAddLevel(lv_indexPlayer, "ARC@IsPlayerCommanderUpgrade", 1);
    }
    libCOMI_gf_PreparingMapProgress(StringExternal("Param/Value/lib_COMI_8B843D5A"));
    libCOMI_gf_ApplyMissionTime();
    TriggerExecute(libARRA_gt_UT_Graph_Initialization, true, false);
    libCOMI_gf_PreparingMapProgress(StringExternal("Param/Value/lib_COMI_F4C70C8D"));
    libCOMI_gf_PlayersandAllienceSettings();
    libCOMI_gf_PreparingMapProgress(StringExternal("Param/Value/lib_COMI_65842B6C"));
    auto6B1E1E16_g = libCOMI_gf_GetAlliedCommandersPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto6B1E1E16_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "ARC@IsPlayerCommanderUpgrade", 1);
        libCOMI_gf_CC_ApplyTechNew(lv_indexPlayer, libCOMI_gv_cC_PlayerLevel[lv_indexPlayer][libCOMI_gf_CC_CommanderInternalIndex(libCOMI_gf_ActiveCommanderForPlayer(lv_indexPlayer))], libCOMI_gf_ActiveCommanderForPlayer(lv_indexPlayer), libCOMI_gf_CC_PlayerActivePrestigeInstance(lv_indexPlayer));
    }
    libCOMI_gf_CC_SharedUpgradesEnable();
    libCOMI_gf_CM_DetectionUpgradesApply();
    libCOMI_gf_SetPlayerColors();
    TriggerEnable(libCOMI_gt_CC_PrestigeUpgradeSupplement, true);
    libCOMI_gv_cM_CombatTimer = TimerCreate();
    TimerStart(libCOMI_gv_cM_CombatTimer, 86400.0, false, c_timeGame);
    UnitEventSetNullVariableInvalid(true);
    TriggerSendEvent(libCOMI_gv_mISSIONPREPARED);
    lv_playerInTeam = 0;
    auto4B79EFEC_g = libCOMI_gf_GetAlliedCommandersPlayers();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto4B79EFEC_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_playerInTeam += 1;
        PlayerSetRace(lv_itPlayer, libCOMI_gf_GetCommanderRace(libCOMI_gf_ActiveCommanderForPlayer(lv_itPlayer)));
        libARRA_gv_playerStartPosition[lv_itPlayer] = lv_point;
        libCOMI_gf_CreateStartingUnitsForPlayer(lv_itPlayer, lv_point);
        CameraInfoSetTarget(lv_camera, lv_point);
        CameraApplyInfo(lv_itPlayer, lv_camera, 0.0, -1, 0.0, true);
        lv_expansionIndex = 1;
        while ((lv_point != null) && (lv_playerInTeam <= lv_mAX_RECOMMENDED_ALLIED_PLAYERS)) {
            lv_expansionIndex += 1;
        }
    }
    lv_playerInTeam = 0;
    auto12247ED8_g = libCOMI_gv_vU_EnemyAI;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto12247ED8_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_playerInTeam += 1;
        lv_point = PlayerStartLocation(PlayerGroupPlayer(libCOMI_gv_vU_EnemyAI, lv_playerInTeam));
        libARRA_gv_playerStartPosition[lv_itPlayer] = lv_point;
    }
    lv_playerInTeam = 0;
    auto6159EA35_g = libCOMI_gv_vU_EnemyPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto6159EA35_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_playerInTeam += 1;
        lv_point = PlayerStartLocation(PlayerGroupPlayer(libCOMI_gv_vU_SlotsEnemy, lv_playerInTeam));
        libARRA_gv_playerStartPosition[lv_itPlayer] = lv_point;
        lv_camera = CameraInfoDefault();
        CameraInfoSetTarget(lv_camera, lv_point);
        CameraApplyInfo(lv_player, lv_camera, 0.0, -1, 0.0, true);
    }
    autoFBC5769B_g = libCOMI_gf_GetAlliedCommandersPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoFBC5769B_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        MeleeSetOption(lv_indexPlayer, c_meleeOptionPoints, true);
        PlayerSetState(lv_indexPlayer, c_playerStateXPGain, true);
        UserDataSetInt("Commanders", libCOMI_gf_ActiveCommanderForPlayer(lv_indexPlayer), "InThisMission", 1, 1);
        libCOMI_gf_CM_DifficultyApplySettings(lv_indexPlayer);
    }
    libCOMI_gf_CM_CommanderVOInit();
    libCOMI_gf_PreparingMapProgress(StringExternal("Param/Value/lib_COMI_D1ACB22F"));
    TriggerSendEvent(libCOMI_gv_mISSIONINITIALIZED);
    libCOMI_gf_CreateHeroes();
    autoF780711E_g = libCOMI_gf_GetHumanPlayers();
    autoF780711E_var = -1;
    while (true) {
        autoF780711E_var = PlayerGroupNextPlayer(autoF780711E_g, autoF780711E_var);
        if (autoF780711E_var < 0) { break; }
        libCOMI_gf_TopBarNotificationsInitialization(autoF780711E_var);
        if ((UnitGroupCount(libCOMI_gv_yY_GPCasterGroup[autoF780711E_var], c_unitCountAlive) > 0)) {
            libNtve_gf_SetDialogItemUnitGroup(libCOMI_gv_cU_GPCmdPanel[autoF780711E_var], libCOMI_gv_yY_GPCasterGroup[autoF780711E_var], PlayerGroupSingle(autoF780711E_var));
        }

    }
    TriggerExecute(libCOMI_gt_CheckStartingSupplies, true, false);
    TriggerExecute(libCOMI_gt_CheckStartingResources, true, false);
    Wait(0.625, c_timeGame);
    TriggerSendEvent(libCOMI_gv_mISSIONREADY);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignMissionInitialize_Init () {
    libCOMI_gt_CM_CampaignMissionInitialize = TriggerCreate("libCOMI_gt_CM_CampaignMissionInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Campaign Mission Start
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignMissionInitialize2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_gameSoundtrack;

    // Automatic Variable Declarations
    playergroup auto0957704D_g;
    playergroup auto0EDF980D_g;

    // Variable Initialization
    lv_gameSoundtrack = UserDataGetGameLink("MissionSettings", "CurrentMission", "GameSoundtrack", 1);

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    libARRA_gf_EnableDisablePingPanel(true, libCOMI_gv_all);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTipAlertPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/ObjectivePanel");
    libARRA_gf_CU_MinimapAllyViewInit();
    Wait(0.0, c_timeGame);
    libCOMI_gv_gameHasBegun = true;
    TriggerExecute(libCOMI_gt_CM_CampaignMissionIntroZoomIn, true, true);
    Wait(0.0, c_timeGame);
    TriggerExecute(libCOMI_gt_InitialExploration, true, false);
    libCOMI_gf_Unpause();
    auto0957704D_g = libCOMI_gf_GetAlliedCommandersPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto0957704D_g, lv_player);
        if (lv_player < 0) { break; }
        UIAlertPoint("Trigger", lv_player, StringExternal("Param/Value/lib_COMI_17C147D7"), null, libARRA_gf_GetPlayerStartPosition(lv_player));
        libCOMI_gf_CU_GPShowHide(true, lv_player, c_transitionDurationDefault);
    }
    auto0EDF980D_g = libCOMI_gv_vU_EnemyPlayers;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto0EDF980D_g, lv_player);
        if (lv_player < 0) { break; }
        UIAlertPoint("Trigger", lv_player, StringExternal("Param/Value/lib_COMI_4CE3C5EB"), null, libARRA_gf_GetPlayerStartPosition(lv_player));
        libCOMI_gf_CU_GPShowHide(true, lv_player, c_transitionDurationDefault);
    }
    TriggerExecute(libCOMI_gv_cM_CampaignMissionStartTrigger, true, false);
    TriggerSendEvent(libCOMI_gv_COOP_MISSION_STARTED_EVENT);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignMissionInitialize2_Init () {
    libCOMI_gt_CM_CampaignMissionInitialize2 = TriggerCreate("libCOMI_gt_CM_CampaignMissionInitialize2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check Starting Resources
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CheckStartingResources_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    playergroup autoD580D410_g;
    int autoD580D410_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoD580D410_g = libCOMI_gf_GetHumanPlayers();
    autoD580D410_var = -1;
    while (true) {
        autoD580D410_var = PlayerGroupNextPlayer(autoD580D410_g, autoD580D410_var);
        if (autoD580D410_var < 0) { break; }
        PlayerModifyPropertyInt(autoD580D410_var, c_playerPropMinerals, c_playerPropOperSetTo, 50);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CheckStartingResources_Init () {
    libCOMI_gt_CheckStartingResources = TriggerCreate("libCOMI_gt_CheckStartingResources_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check Starting Supplies
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CheckStartingSupplies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    playergroup auto1E3B2A2E_g;
    int auto1E3B2A2E_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto1E3B2A2E_g = PlayerGroupAll();
    auto1E3B2A2E_var = -1;
    while (true) {
        auto1E3B2A2E_var = PlayerGroupNextPlayer(auto1E3B2A2E_g, auto1E3B2A2E_var);
        if (auto1E3B2A2E_var < 0) { break; }
        lv_count = TechTreeUpgradeCount(auto1E3B2A2E_var, "SuppliesMax", c_techCountCompleteOnly);
        if ((lv_count > 0)) {
            PlayerModifyPropertyInt(auto1E3B2A2E_var, c_playerPropSuppliesLimit, c_playerPropOperSetTo, (lv_count * 5));
        }
        else {
            PlayerModifyPropertyInt(auto1E3B2A2E_var, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 200);
        }
        lv_count = TechTreeUpgradeCount(auto1E3B2A2E_var, "SuppliesMade", c_techCountCompleteOnly);
        if ((lv_count > 0)) {
            PlayerModifyPropertyInt(auto1E3B2A2E_var, c_playerPropSuppliesMade, c_playerPropOperSetTo, (lv_count * 5));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CheckStartingSupplies_Init () {
    libCOMI_gt_CheckStartingSupplies = TriggerCreate("libCOMI_gt_CheckStartingSupplies_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SuppliesMaxUpgrades
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_SuppliesMaxUpgrades_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "SuppliesMax"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(lv_player, c_playerPropSuppliesLimit, c_playerPropOperSetTo, TechTreeUpgradeCount(lv_player, "SuppliesMax", c_techCountCompleteOnly));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_SuppliesMaxUpgrades_Init () {
    libCOMI_gt_SuppliesMaxUpgrades = TriggerCreate("libCOMI_gt_SuppliesMaxUpgrades_Func");
    TriggerEnable(libCOMI_gt_SuppliesMaxUpgrades, false);
    TriggerAddEventUpgradeLevelChanged(libCOMI_gt_SuppliesMaxUpgrades, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SuppliesMadeUpgrades
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_SuppliesMadeUpgrades_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "SuppliesMade"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(lv_player, c_playerPropSuppliesMade, c_playerPropOperSetTo, TechTreeUpgradeCount(lv_player, "SuppliesMade", c_techCountCompleteOnly));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_SuppliesMadeUpgrades_Init () {
    libCOMI_gt_SuppliesMadeUpgrades = TriggerCreate("libCOMI_gt_SuppliesMadeUpgrades_Func");
    TriggerEnable(libCOMI_gt_SuppliesMadeUpgrades, false);
    TriggerAddEventUpgradeLevelChanged(libCOMI_gt_SuppliesMadeUpgrades, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_SharedUpgradesRecheck
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CC_SharedUpgradesRecheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CC_SharedUpgradesEnable();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CC_SharedUpgradesRecheck_Init () {
    libCOMI_gt_CC_SharedUpgradesRecheck = TriggerCreate("libCOMI_gt_CC_SharedUpgradesRecheck_Func");
    TriggerAddEventUnitResearchProgress(libCOMI_gt_CC_SharedUpgradesRecheck, null, c_unitProgressStageComplete);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CC_SharedUpgradesRecheck, c_playerAny, "RefreshSharedUpgrades");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_PrestigeUpgradeSupplement
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CC_PrestigeUpgradeSupplement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_prestige;
    string lv_supplemental;
    int lv_index;

    // Automatic Variable Declarations
    int auto30C434F5_ae;
    const int auto30C434F5_ai = 1;

    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayersCopy(), lv_player) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_prestige = libCOMI_gf_CC_PlayerActivePrestigeInstance(lv_player);
    if ((lv_prestige == null)) {
        return true;
    }

    auto30C434F5_ae = UserDataFieldValueCount("Prestiges", "ZZ_UpgradeSupplements");
    lv_index = 1;
    for ( ; ( (auto30C434F5_ai >= 0 && lv_index <= auto30C434F5_ae) || (auto30C434F5_ai < 0 && lv_index >= auto30C434F5_ae) ) ; lv_index += auto30C434F5_ai ) {
        lv_supplemental = UserDataGetUserInstance("Prestiges", lv_prestige, "ZZ_UpgradeSupplements", lv_index);
        if ((UserDataGetGameLink("PlayerPrestigeUpgradeSupplements", lv_supplemental, "Upgrade", 1) == EventUpgradeName())) {
            libCOMI_gf_CC_ApplyUpgradeSupplemental(lv_player, lv_supplemental);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CC_PrestigeUpgradeSupplement_Init () {
    libCOMI_gt_CC_PrestigeUpgradeSupplement = TriggerCreate("libCOMI_gt_CC_PrestigeUpgradeSupplement_Func");
    TriggerEnable(libCOMI_gt_CC_PrestigeUpgradeSupplement, false);
    TriggerAddEventUpgradeLevelChanged(libCOMI_gt_CC_PrestigeUpgradeSupplement, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SkinUpgrades
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_SkinUpgrades_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_upgrade;
    int lv_delta;
    string lv_inInstance;
    string lv_unitType;
    string lv_factionSkin;
    string lv_skin;

    // Automatic Variable Declarations
    int auto5C53C02A_ae;
    int auto5C53C02A_var;
    int auto7D243EEC_ae;
    int auto7D243EEC_var;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_upgrade = EventUpgradeName();
    lv_delta = EventUpgradeLevelDelta();

    // Conditions
    if (testConds) {
        if (!((lv_delta > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto5C53C02A_ae = UserDataInstanceCount("Skins");
    auto5C53C02A_var = 1;
    for ( ; auto5C53C02A_var <= auto5C53C02A_ae; auto5C53C02A_var += 1 ) {
        if ((UserDataGetGameLink("Skins", UserDataInstance("Skins", auto5C53C02A_var), "Upgrade", 1) == EventUpgradeName())) {
            lv_factionSkin = UserDataInstance("Skins", auto5C53C02A_var);
            break;
        }

    }
    if ((lv_factionSkin == null)) {
        return true;
    }

    auto7D243EEC_ae = UserDataFieldValueCount("Skins", "Supplement");
    auto7D243EEC_var = 1;
    for ( ; auto7D243EEC_var <= auto7D243EEC_ae; auto7D243EEC_var += 1 ) {
        lv_skin = UserDataGetGameLink("Skins", lv_factionSkin, "Supplement", auto7D243EEC_var);
        if ((lv_skin != null)) {
            if ((lv_delta > 0)) {
                libNtve_gf_PlayerApplySkinReplacingExistingUnit(EventPlayer(), lv_skin, true);
            }
            else {
                libNtve_gf_PlayerApplySkinReplacingExistingUnit(EventPlayer(), lv_skin, false);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_SkinUpgrades_Init () {
    libCOMI_gt_SkinUpgrades = TriggerCreate("libCOMI_gt_SkinUpgrades_Func");
    TriggerAddEventUpgradeLevelChanged(libCOMI_gt_SkinUpgrades, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Autocasting
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_Autocasting_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto3B14A1D2_ae;
    const int auto3B14A1D2_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "ARC@Autocasting"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3B14A1D2_ae = UserDataInstanceCount("X_AutocastedAbilities");
    lv_i = 1;
    for ( ; ( (auto3B14A1D2_ai >= 0 && lv_i <= auto3B14A1D2_ae) || (auto3B14A1D2_ai < 0 && lv_i >= auto3B14A1D2_ae) ) ; lv_i += auto3B14A1D2_ai ) {
        TechTreeAbilityAllow(EventPlayer(), UserDataGetAbilCmd("X_AutocastedAbilities", UserDataInstance("X_AutocastedAbilities", lv_i), "Ability", 1), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_Autocasting_Init () {
    libCOMI_gt_Autocasting = TriggerCreate("libCOMI_gt_Autocasting_Func");
    TriggerAddEventUpgradeLevelChanged(libCOMI_gt_Autocasting, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: set observer
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_setobserver_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto5518A09E_g;
    int auto5518A09E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UIUnitColorStyleOverride(libCOMI_gv_observerGroup, c_unitColorStyleNormal);
    auto5518A09E_g = PlayerGroupActive();
    auto5518A09E_var = -1;
    while (true) {
        auto5518A09E_var = PlayerGroupNextPlayer(auto5518A09E_g, auto5518A09E_var);
        if (auto5518A09E_var < 0) { break; }
        libNtve_gf_SetAllianceOneWay(libCOMI_gv_observer, auto5518A09E_var, libNtve_ge_AllianceSetting_Neutral);
        PlayerSetAlliance(auto5518A09E_var, c_allianceIdDefeat, libCOMI_gv_observer, true);
        PlayerSetAlliance(auto5518A09E_var, c_allianceIdPassive, libCOMI_gv_observer, true);
        PlayerSetAlliance(auto5518A09E_var, c_allianceIdControl, libCOMI_gv_observer, true);
        PlayerSetAlliance(auto5518A09E_var, c_allianceIdVision, libCOMI_gv_observer, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_setobserver_Init () {
    libCOMI_gt_setobserver = TriggerCreate("libCOMI_gt_setobserver_Func");
    TriggerAddEventMapInit(libCOMI_gt_setobserver);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Fast Buff Hack
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AttackFastBuffHack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_unit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityExists(lv_unit, "ARC@BroodLordHangar") == true)) {
        libCOMI_gf_SetUnitBuffMultiplier(lv_unit, (1.0 / UnitWeaponSpeedMultiplier(lv_unit, 1)), "ARC@TriggerQueueableRate", 1.01, libCOMI_ge_UnitBuffMultiplierMethod_Exponential);
    }

    UnitCreateEffectUnit(lv_unit, "TriggerInheritRateIterateMagazine", lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AttackFastBuffHack_Init () {
    libCOMI_gt_AttackFastBuffHack = TriggerCreate("libCOMI_gt_AttackFastBuffHack_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libCOMI_gt_AttackFastBuffHack, null, c_unitBehaviorFlagFast, c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChangeFromCategory(libCOMI_gt_AttackFastBuffHack, null, c_unitBehaviorFlagFast, c_unitBehaviorChangeDecrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dmg and Attack Speed Inherit New
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_DmgandAttackSpeedInheritNew_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_child;
    unit lv_parent;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_child = EventUnitCreatedUnit();
    lv_parent = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_child, "ARC@TriggerInheritsParentBuffs") == true))) {
            return false;
        }

        if (!((UnitIsValid(lv_parent) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_InheritDmgandAttackSpeedFromParenttoChild(lv_parent, lv_child);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_DmgandAttackSpeedInheritNew_Init () {
    libCOMI_gt_DmgandAttackSpeedInheritNew = TriggerCreate("libCOMI_gt_DmgandAttackSpeedInheritNew_Func");
    TriggerAddEventUnitCreated(libCOMI_gt_DmgandAttackSpeedInheritNew, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dmg and Attack Speed Inherit Existing
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_DmgandAttackSpeedInheritExisting_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_child;
    unit lv_parent;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_child = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_parent = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_child, "ARC@TriggerInheritsParentBuffs") == true))) {
            return false;
        }

        if (!((UnitIsValid(lv_parent) == true))) {
            return false;
        }

        if (!((lv_child != lv_parent))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_InheritDmgandAttackSpeedFromParenttoChild(lv_parent, lv_child);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_DmgandAttackSpeedInheritExisting_Init () {
    libCOMI_gt_DmgandAttackSpeedInheritExisting = TriggerCreate("libCOMI_gt_DmgandAttackSpeedInheritExisting_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_DmgandAttackSpeedInheritExisting, c_playerAny, "TriggerInheritRateDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CargoDeath
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CargoDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_cargoUnit;
    unit lv_transportUnit;
    point lv_landingPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cargoUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_transportUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_cargoUnit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideUnit(lv_cargoUnit, false);
    lv_landingPoint = UnitTypePlacementTestsFromPoint(UnitGetType(lv_cargoUnit), EventPlayer(), UnitGetPosition(lv_transportUnit), 3.0, c_placementTestCliffMask);
    if (((lv_landingPoint == null) || (PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayersCopy(), EventPlayer()) != true))) {
        UnitSetPropertyFixed(lv_cargoUnit, c_unitPropShields, 0.0);
        UnitCreateEffectUnit(lv_cargoUnit, libCOMI_gv_cM_CargoDeathKillEffect, lv_cargoUnit);
    }
    else {
        libNtve_gf_ShowHideUnit(lv_cargoUnit, true);
        UnitSetPosition(lv_transportUnit, lv_landingPoint, false);
    }
    if ((UnitIsValid(lv_cargoUnit) == true)) {
        libNtve_gf_ShowHideUnit(lv_cargoUnit, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CargoDeath_Init () {
    libCOMI_gt_CM_CargoDeath = TriggerCreate("libCOMI_gt_CM_CargoDeath_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_CargoDeath, c_playerAny, libCOMI_gv_cM_CargoDeathNotifyEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Behaviors
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UnitBehaviors_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "ARC@AllUnitBehaviorController") == false) && (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false)) {
        UnitBehaviorAdd(EventUnit(), "ARC@AllUnitBehaviorController", EventUnit(), 1);
    }

    if ((UnitHasBehavior2(EventUnit(), "ARC@ChronoBoostTarget") == false) && (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true) && ((libNtve_gf_UnitAbilityGetByType(EventUnit(), c_classIdCAbilWarpTrain, 1) != null) || (libNtve_gf_UnitAbilityGetByType(EventUnit(), c_classIdCAbilTrain, 1) != null) || (libNtve_gf_UnitAbilityGetByType(EventUnit(), c_classIdCAbilResearch, 1) != null))) {
        UnitBehaviorAdd(EventUnit(), "ARC@ChronoBoostTarget", EventUnit(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UnitBehaviors_Init () {
    libCOMI_gt_UnitBehaviors = TriggerCreate("libCOMI_gt_UnitBehaviors_Func");
    TriggerAddEventUnitRegion(libCOMI_gt_UnitBehaviors, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Behavior Permanently Changes Owner
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_BehaviorPermanentlyChangesOwner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mindcontrolunit;
    string lv_mindcontrolbehavior;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mindcontrolunit = EventUnit();
    lv_mindcontrolbehavior = EventUnitBehavior();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(lv_mindcontrolunit, UnitBehaviorEffectPlayer(lv_mindcontrolunit, lv_mindcontrolbehavior, c_effectPlayerCaster, 0), true);
    if ((UnitHasBehavior2(lv_mindcontrolunit, "ARC@OnDeathControllerDeathPrevent") == false)) {
        UnitBehaviorAdd(lv_mindcontrolunit, "ARC@AllUnitBehaviorController", lv_mindcontrolunit, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_BehaviorPermanentlyChangesOwner_Init () {
    libCOMI_gt_BehaviorPermanentlyChangesOwner = TriggerCreate("libCOMI_gt_BehaviorPermanentlyChangesOwner_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libCOMI_gt_BehaviorPermanentlyChangesOwner, null, c_unitBehaviorFlagUser8, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libCOMI_gt_BehaviorPermanentlyChangesOwner, null, c_unitBehaviorFlagUser8, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death Prevent Grant Kill Credit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_DeathPreventGrantKillCredit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_creditedunit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_creditedunit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_creditedunit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(lv_creditedunit, c_unitPropKills, (UnitGetPropertyFixed(lv_creditedunit, c_unitPropKills, c_unitPropCurrent) + 1.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_DeathPreventGrantKillCredit_Init () {
    libCOMI_gt_DeathPreventGrantKillCredit = TriggerCreate("libCOMI_gt_DeathPreventGrantKillCredit_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_DeathPreventGrantKillCredit, c_playerAny, "GrantKillCreditDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroPanelUpdate
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_HeroPanelUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto1344F8FC_g;
    const int auto02E55A1D_ae = libCOMI_gv_oBSOLETE_CUC_HeroMaxCount;
    int auto02E55A1D_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto1344F8FC_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto1344F8FC_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        auto02E55A1D_var = 1;
        for ( ; auto02E55A1D_var <= auto02E55A1D_ae; auto02E55A1D_var += 1 ) {
            if ((libCOMI_gv_cU_HeroExists[lv_indexPlayer][auto02E55A1D_var] == true)) {
                libCOMI_gf_CU_UpdateHeroPanel(auto02E55A1D_var, lv_indexPlayer);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_HeroPanelUpdate_Init () {
    libCOMI_gt_CU_HeroPanelUpdate = TriggerCreate("libCOMI_gt_CU_HeroPanelUpdate_Func");
    TriggerEnable(libCOMI_gt_CU_HeroPanelUpdate, false);
    TriggerAddEventTimePeriodic(libCOMI_gt_CU_HeroPanelUpdate, libCOMI_gv_cUC_HeroUpdateFrequency, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroUnitDamaged
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_HeroUnitDamaged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_indexPlayer;
    int lv_player;
    playergroup lv_heroGroup;

    // Automatic Variable Declarations
    playergroup autoF27784D0_g;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoF27784D0_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoF27784D0_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((EventUnit() == libCOMI_gv_cU_HeroUnit[1][lv_indexPlayer])) {
            lv_index = 1;
            lv_player = lv_indexPlayer;
            break;
        }
        else if ((EventUnit() == libCOMI_gv_cU_HeroUnit[2][lv_indexPlayer])) {
            lv_index = 2;
            lv_player = lv_indexPlayer;
            break;
        }
    }
    if ((lv_index == 0)) {
        return true;
    }

    lv_heroGroup = PlayerGroupSingle(lv_player);
    DialogControlSetVisible(libCOMI_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, true);
    if ((libCOMI_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] <= 0.0)) {
    }
    else {
        DialogControlFadeTransparency(libCOMI_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 0.25, 0.0);
    }
    if ((EventUnitDamageAmount() < 5.0)) {
        if ((libCOMI_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] <= 0.25)) {
            libCOMI_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] = 0.26;
            DialogControlFadeTransparency(libCOMI_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 0.25, 0.0);
        }

    }
    else {
        if ((EventUnitDamageAmount() >= 5.0) && (EventUnitDamageAmount() <= 15.0)) {
            if ((libCOMI_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] <= 0.5)) {
                libCOMI_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] = 0.51;
                DialogControlFadeTransparency(libCOMI_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 0.5, 0.0);
            }

        }
        else {
            if ((libCOMI_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] <= 1.0)) {
                libCOMI_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] = 1.01;
                DialogControlFadeTransparency(libCOMI_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 1.0, 0.0);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_HeroUnitDamaged_Init () {
    libCOMI_gt_CU_HeroUnitDamaged = TriggerCreate("libCOMI_gt_CU_HeroUnitDamaged_Func");
    TriggerEnable(libCOMI_gt_CU_HeroUnitDamaged, false);
    TriggerAddEventUnitDamaged(libCOMI_gt_CU_HeroUnitDamaged, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[1][1]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libCOMI_gt_CU_HeroUnitDamaged, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[1][2]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libCOMI_gt_CU_HeroUnitDamaged, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[2][1]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libCOMI_gt_CU_HeroUnitDamaged, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[2][2]"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroUnitVitalChange
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_HeroUnitVitalChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_indexPlayer;
    int lv_player;
    playergroup lv_heroGroup;
    int lv_damageBar;
    int lv_damageBarWidth;
    int lv_damageBarHeight;

    // Automatic Variable Declarations
    playergroup auto39C38B3F_g;
    unit auto61B03EF3_val;
    int autoEDF6E590_val;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();
    lv_damageBar = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((EventUnitPropertyChangeFixed() < 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto39C38B3F_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto39C38B3F_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        auto61B03EF3_val = EventUnit();
        if (auto61B03EF3_val == libCOMI_gv_cU_HeroUnit[1][lv_indexPlayer]) {
            lv_index = 1;
            lv_player = lv_indexPlayer;
            break;
        }
        else if (auto61B03EF3_val == libCOMI_gv_cU_HeroUnit[2][lv_indexPlayer]) {
            lv_index = 2;
            lv_player = lv_indexPlayer;
            break;
        }
        else {
        }
    }
    if ((lv_index == 0)) {
        return true;
    }

    lv_heroGroup = PlayerGroupSingle(lv_player);
    autoEDF6E590_val = EventUnitProperty();
    if (autoEDF6E590_val == c_unitPropEnergy) {
        DialogControlCreateInPanelFromTemplate(libCOMI_gv_cU_HeroPanel[lv_index], c_triggerControlTypeImage, "HotS_GameUnitFrame/HeroEnergyBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_heroGroup, c_anchorLeft, libCOMI_gv_cU_HeroDialogEnergyBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropEnergy, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropEnergyMax, c_unitPropCurrent)) * IntToFixed(libCOMI_gv_cUC_HEROUIBARWIDTH)));
        lv_damageBarHeight = DialogControlGetHeight(libCOMI_gv_cU_HeroDialogEnergyBarImage[lv_index], lv_player);
    }
    else if (autoEDF6E590_val == c_unitPropLife) {
        DialogControlCreateInPanelFromTemplate(libCOMI_gv_cU_HeroPanel[lv_index], c_triggerControlTypeImage, "HotS_GameUnitFrame/HeroHealthBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_heroGroup, c_anchorLeft, libCOMI_gv_cU_HeroDialogHealthBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropLife, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropLifeMax, c_unitPropCurrent)) * IntToFixed(libCOMI_gv_cUC_HEROUIBARWIDTH)));
        lv_damageBarHeight = DialogControlGetHeight(libCOMI_gv_cU_HeroDialogHealthBarImage[lv_index], lv_player);
    }
    else if (autoEDF6E590_val == c_unitPropShields) {
        DialogControlCreateInPanelFromTemplate(libCOMI_gv_cU_HeroPanel[lv_index], c_triggerControlTypeImage, "HotS_GameUnitFrame/HeroHealthBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_heroGroup, c_anchorLeft, libCOMI_gv_cU_HeroDialogShieldBarImage[lv_index], c_anchorLeft, 0, 0);
        if ((UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropShieldsMax, c_unitPropCurrent) != 0.0)) {
            lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropShields, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropShieldsMax, c_unitPropCurrent)) * IntToFixed(libCOMI_gv_cUC_HEROUIBARWIDTH)));
        }
        else {
            lv_damageBarWidth = 0;
        }
        lv_damageBarHeight = DialogControlGetHeight(libCOMI_gv_cU_HeroDialogShieldBarImage[lv_index], lv_player);
    }
    else {
    }
    lv_damageBar = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(lv_damageBar, 506, lv_heroGroup);
    DialogControlSetVisible(lv_damageBar, PlayerGroupAll(), false);
    DialogControlSetVisible(lv_damageBar, lv_heroGroup, true);
    DialogControlSetSize(lv_damageBar, PlayerGroupAll(), MaxI(MinI(lv_damageBarWidth, 244), 1), lv_damageBarHeight);
    Wait(1.0, c_timeReal);
    DialogControlFadeTransparency(lv_damageBar, lv_heroGroup, 1.0, 100.0);
    Wait(1.1, c_timeReal);
    DialogControlDestroy(lv_damageBar);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_HeroUnitVitalChange_Init () {
    libCOMI_gt_CU_HeroUnitVitalChange = TriggerCreate("libCOMI_gt_CU_HeroUnitVitalChange_Func");
    TriggerEnable(libCOMI_gt_CU_HeroUnitVitalChange, false);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[1][1]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[2][1]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[1][1]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[2][1]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[1][1]"), c_unitPropShields);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[2][1]"), c_unitPropShields);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[1][2]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[2][2]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[1][2]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[2][2]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[1][2]"), c_unitPropShields);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[2][2]"), c_unitPropShields);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroMouseHoverText
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_HeroMouseHoverText_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    playergroup lv_heroGroup;

    // Automatic Variable Declarations
    int auto1970325F_val;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libCOMI_gv_cU_HeroDialogBorderImage[1]) || (EventDialogControl() == libCOMI_gv_cU_HeroDialogBorderImageNoEnergy[1]) || (EventDialogControl() == libCOMI_gv_cU_HeroDialogBorderImage[2]) || (EventDialogControl() == libCOMI_gv_cU_HeroDialogBorderImageNoEnergy[2]) || (EventDialogControl() == libCOMI_gv_cU_HeroDialogButton[1]) || (EventDialogControl() == libCOMI_gv_cU_HeroDialogButton[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroGroup = PlayerGroupSingle(EventPlayer());
    if (((EventDialogControl() == libCOMI_gv_cU_HeroDialogBorderImage[1]) || (EventDialogControl() == libCOMI_gv_cU_HeroDialogBorderImageNoEnergy[1]) || (EventDialogControl() == libCOMI_gv_cU_HeroDialogButton[1]))) {
        lv_index = 1;
    }
    else {
        if (((EventDialogControl() == libCOMI_gv_cU_HeroDialogBorderImage[2]) || (EventDialogControl() == libCOMI_gv_cU_HeroDialogBorderImageNoEnergy[2]) || (EventDialogControl() == libCOMI_gv_cU_HeroDialogButton[2]))) {
            lv_index = 2;
        }
        else {
            return true;
        }
    }
    auto1970325F_val = EventDialogControlEventType();
    if (auto1970325F_val == c_triggerControlEventTypeMouseEnter) {
        if ((UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lv_index][EventPlayer()], c_unitPropLifeMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogHealthLabel[lv_index], lv_heroGroup, true);
        }

        if ((UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lv_index][EventPlayer()], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogEnergyLabel[lv_index], lv_heroGroup, true);
        }

        if ((UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lv_index][EventPlayer()], c_unitPropShieldsMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogShieldLabel[lv_index], lv_heroGroup, true);
        }

    }
    else if (auto1970325F_val == c_triggerControlEventTypeMouseExit) {
        DialogControlSetVisible(libCOMI_gv_cU_HeroDialogHealthLabel[lv_index], lv_heroGroup, false);
        DialogControlSetVisible(libCOMI_gv_cU_HeroDialogEnergyLabel[lv_index], lv_heroGroup, false);
        DialogControlSetVisible(libCOMI_gv_cU_HeroDialogShieldLabel[lv_index], lv_heroGroup, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_HeroMouseHoverText_Init () {
    libCOMI_gt_CU_HeroMouseHoverText = TriggerCreate("libCOMI_gt_CU_HeroMouseHoverText_Func");
    TriggerEnable(libCOMI_gt_CU_HeroMouseHoverText, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_HeroMouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
    TriggerAddEventDialogControl(libCOMI_gt_CU_HeroMouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Died
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_HeroDied_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libCOMI_gv_heroUnits, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_HeroHandleDeath(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_HeroDied_Init () {
    libCOMI_gt_HeroDied = TriggerCreate("libCOMI_gt_HeroDied_Func");
    TriggerAddEventUnitDied(libCOMI_gt_HeroDied, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Same Place Revive
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_SamePlaceRevive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_beacon;
    point lv_beaconPoint;
    unit lv_hero;
    fixed lv_facing;
    point lv_rally;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_beacon = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_beaconPoint = EventPlayerEffectUsedPoint(c_effectLocationCasterUnit);
    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_facing = UnitGetFacing(lv_beacon);
    lv_rally = UnitRallyPointTargetPoint(lv_beacon, 1, 1);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(lv_hero, lv_beaconPoint, false);
    UnitSetFacing(lv_hero, lv_facing, 0.0);
    Wait(0.125, c_timeGame);
    UnitSetPosition(lv_hero, lv_beaconPoint, false);
    UnitSetFacing(lv_hero, lv_facing, 0.0);
    if ((lv_rally != null)) {
        UnitIssueOrder(lv_hero, OrderTargetingPoint(AbilityCommand("attack", 0), lv_rally), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_SamePlaceRevive_Init () {
    libCOMI_gt_SamePlaceRevive = TriggerCreate("libCOMI_gt_SamePlaceRevive_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_SamePlaceRevive, c_playerAny, "PortToMyCenter");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_InstantRevive
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_InstantRevive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_LOGString("!!!");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_InstantRevive_Init () {
    libCOMI_gt_CM_InstantRevive = TriggerCreate("libCOMI_gt_CM_InstantRevive_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_InstantRevive, c_playerAny, "HeroInstantRevive");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_GPBirthFinished
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_GPBirthFinished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_updatePlayers;
    int lv_indexPlayer;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    playergroup auto3C7AD604_g;
    const int auto63439A9B_ae = 4;
    const int auto63439A9B_ai = 1;

    // Variable Initialization
    lv_updatePlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto3C7AD604_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto3C7AD604_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOMI_gv_cU_GPCutscene[lv_indexPlayer] != c_invalidDialogControlId) && (EventCutsceneId() == CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lv_indexPlayer]))) {
            lv_updatePlayers = PlayerGroupSingle(lv_indexPlayer);
            lv_buttonIndex = 1;
            for ( ; ( (auto63439A9B_ai >= 0 && lv_buttonIndex <= auto63439A9B_ae) || (auto63439A9B_ai < 0 && lv_buttonIndex >= auto63439A9B_ae) ) ; lv_buttonIndex += auto63439A9B_ai ) {
                if ((libCOMI_gv_cU_GPButtonHighlighted[lv_buttonIndex][lv_indexPlayer] == true) && (libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lv_indexPlayer] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lv_indexPlayer], lv_updatePlayers, true);
                }

            }
            if ((libCOMI_gv_cU_GPEnergyLabel[lv_indexPlayer] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libCOMI_gv_cU_GPEnergyLabel[lv_indexPlayer], lv_updatePlayers, true);
            }

            if ((libCOMI_gv_cU_GPEnergyTooltip[lv_indexPlayer] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libCOMI_gv_cU_GPEnergyTooltip[lv_indexPlayer], lv_updatePlayers, true);
            }

            DialogControlSetVisible(libCOMI_gv_cU_GPCmdPanel[lv_indexPlayer], lv_updatePlayers, true);
            libCOMI_gf_CU_GPCheckForEnergyHighlight(lv_indexPlayer);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_GPBirthFinished_Init () {
    libCOMI_gt_CU_GPBirthFinished = TriggerCreate("libCOMI_gt_CU_GPBirthFinished_Func");
    TriggerAddEventCutsceneBookmarkFired(libCOMI_gt_CU_GPBirthFinished, c_cutsceneNone, "2DBirth");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_GPDeathRemove2D
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_GPDeathRemove2D_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    playergroup lv_updatePlayers;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    playergroup auto29B9C757_g;
    const int autoD5722FFF_ae = 4;
    const int autoD5722FFF_ai = 1;

    // Variable Initialization
    lv_updatePlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto29B9C757_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto29B9C757_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOMI_gv_cU_GPCutscene[lv_indexPlayer] != c_invalidDialogControlId) && (EventCutsceneId() == CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lv_indexPlayer]))) {
            lv_updatePlayers = PlayerGroupSingle(lv_indexPlayer);
            lv_buttonIndex = 1;
            for ( ; ( (autoD5722FFF_ai >= 0 && lv_buttonIndex <= autoD5722FFF_ae) || (autoD5722FFF_ai < 0 && lv_buttonIndex >= autoD5722FFF_ae) ) ; lv_buttonIndex += autoD5722FFF_ai ) {
                if ((libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lv_indexPlayer] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lv_indexPlayer], lv_updatePlayers, false);
                }

            }
            DialogControlSetVisible(libCOMI_gv_cU_GPCmdPanel[lv_indexPlayer], lv_updatePlayers, false);
            if ((libCOMI_gv_cU_GPEnergyLabel[lv_indexPlayer] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libCOMI_gv_cU_GPEnergyLabel[lv_indexPlayer], lv_updatePlayers, false);
            }

            if ((libCOMI_gv_cU_GPEnergyTooltip[lv_indexPlayer] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libCOMI_gv_cU_GPEnergyTooltip[lv_indexPlayer], lv_updatePlayers, false);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_GPDeathRemove2D_Init () {
    libCOMI_gt_CU_GPDeathRemove2D = TriggerCreate("libCOMI_gt_CU_GPDeathRemove2D_Func");
    TriggerAddEventCutsceneBookmarkFired(libCOMI_gt_CU_GPDeathRemove2D, c_cutsceneNone, "2DDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_GPVitalChanges
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_GPVitalChanges_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == libCOMI_gv_yY_GPCasterUnit[1]) || (EventUnit() == libCOMI_gv_yY_GPCasterUnit[2]) || (EventUnit() == libCOMI_gv_yY_GPCasterUnit[3]) || (EventUnit() == libCOMI_gv_yY_GPCasterUnit[4]) || (EventUnit() == libCOMI_gv_yY_GPCasterUnit[5])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CU_GPSoAUpdateVitals(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_GPVitalChanges_Init () {
    libCOMI_gt_CU_GPVitalChanges = TriggerCreate("libCOMI_gt_CU_GPVitalChanges_Func");
    TriggerEnable(libCOMI_gt_CU_GPVitalChanges, false);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_GPVitalChanges, null, c_unitPropEnergy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TopBar Notifications Enable/Disable
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_TopBarNotificationsEnableDisable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libCOMI_gt_AF_TopBarClicked) == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_30742E10"));
        TriggerEnable(libCOMI_gt_AF_TopBarClicked, true);
        TriggerEnable(libCOMI_gt_AF_MouseEntersTopBar, true);
        TriggerEnable(libCOMI_gt_AF_MouseExitsTopBar, true);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_48CA3A24"));
        TriggerEnable(libCOMI_gt_AF_TopBarClicked, false);
        TriggerEnable(libCOMI_gt_AF_MouseEntersTopBar, false);
        TriggerEnable(libCOMI_gt_AF_MouseExitsTopBar, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_TopBarNotificationsEnableDisable_Init () {
    libCOMI_gt_TopBarNotificationsEnableDisable = TriggerCreate("libCOMI_gt_TopBarNotificationsEnableDisable_Func");
    TriggerAddEventChatMessage(libCOMI_gt_TopBarNotificationsEnableDisable, c_playerAny, "-topbar", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_TopBar Clicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AF_TopBarClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;
    int lv_vButtonIndex;
    string lv_vCommander;
    string lv_vCaster;
    string lv_vUnitTypeCaster;
    string lv_vUnitTypeHero;
    string lv_vAbility;
    abilcmd lv_vAbilityCommand;
    int lv_vAbilityCooldown;
    fixed lv_vAbilityCost;
    fixed lv_vAbilityCharges;
    string lv_vAbilityCooldownLocation;
    string lv_vAbilityChargesLocation;
    string lv_vCooldownLink;
    text lv_vColor;
    text lv_vColorReady;
    soundlink lv_vSound;
    fixed lv_vCharges;
    int lv_vNotificationsActive;
    bool lv_vAbilityIsAvailable;
    fixed lv_vRemainingCooldown;
    unit lv_vUnitHero;
    unit lv_vUnitCaster;
    string lv_vButton;
    string lv_vButtonText;

    // Automatic Variable Declarations
    string autoC5694E41_val;

    // Variable Initialization
    lv_vPlayer = EventPlayer();
    lv_vButtonIndex = libCOMI_gf_GetClickedTopBarButtonIndex(c_invalidDialogControlId, lv_vPlayer);
    lv_vAbilityCooldownLocation = "";
    lv_vAbilityChargesLocation = "";
    lv_vCooldownLink = "";
    lv_vColor = StringExternal("Param/Value/lib_COMI_CF929640");
    lv_vColorReady = StringExternal("Param/Value/lib_COMI_8E6ACFC5");
    lv_vSound = SoundLink("UI_CampaignHintNotify", -1);
    lv_vButtonText = "";

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((lv_vButtonIndex != -1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vCommander = libCOMI_gf_ActiveCommanderForPlayer(lv_vPlayer);
    lv_vCaster = libCOMI_gf_GetCasterDataForUnit(UnitGetType(libCOMI_gf_CM_PlayerGetGlobalCaster2(lv_vPlayer)));
    lv_vUnitTypeHero = UserDataGetUnit("Casters", lv_vCaster, "UnitHero", lv_vButtonIndex);
    lv_vUnitTypeCaster = UserDataGetUnit("Casters", lv_vCaster, "UnitCaster", lv_vButtonIndex);
    lv_vAbility = UserDataGetGameLink("Casters", lv_vCaster, "Ability", lv_vButtonIndex);
    lv_vNotificationsActive = UserDataGetInt("Casters", lv_vCaster, "Notifications", lv_vButtonIndex);
    if (((lv_vAbility == null) || (lv_vNotificationsActive == 0))) {
        return true;
    }
    lv_vAbilityCooldown = CatalogFieldValueGetFlagsAsInt(c_gameCatalogAbil, lv_vAbility, "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lv_vPlayer);
    lv_vAbilityCharges = CatalogFieldValueGetFlagsAsInt(c_gameCatalogAbil, lv_vAbility, "Cost[" + IntToString(0) + "].Charge.CountMax", lv_vPlayer);
    lv_vAbilityCost = CatalogFieldValueGetFlagsAsInt(c_gameCatalogAbil, lv_vAbility, "Cost[" + IntToString(0) + "].Vital[" + IntToString(c_unitVitalEnergy) + "]", lv_vPlayer);
    lv_vAbilityCooldownLocation = CatalogFieldValueGet(c_gameCatalogAbil, lv_vAbility, "Cost[" + IntToString(0) + "].Cooldown.Location", lv_vPlayer);
    lv_vAbilityChargesLocation = CatalogFieldValueGet(c_gameCatalogAbil, lv_vAbility, "Cost[" + IntToString(0) + "].Charge.Location", lv_vPlayer);
    lv_vAbilityCommand = libARRA_gf_GetCardLayoutAbilityCommandForUnit(lv_vUnitCaster, lv_vButtonIndex, 0, 0);
    lv_vButton = libARRA_gf_GetCardLayoutButtonForUnit(lv_vUnitCaster, lv_vButtonIndex, 0, 0);
    lv_vButtonText = CatalogFieldValueGet(c_gameCatalogButton, lv_vButton, "Name", lv_vPlayer);
    if ((lv_vAbilityCooldownLocation == "Unit") && (UnitAbilityExists(lv_vUnitCaster, lv_vAbility) == false) && (UnitAbilityExists(lv_vUnitHero, lv_vAbility) == true)) {
        if ((UnitAbilityCheck(lv_vUnitHero, lv_vAbility, true) == true)) {
            lv_vAbilityIsAvailable = true;
        }
    }
    else {
        if ((UnitAbilityCheck(lv_vUnitCaster, lv_vAbility, true) == true)) {
            lv_vAbilityIsAvailable = true;
        }
    }
    if ((lv_vUnitTypeHero != null)) {
        lv_vUnitHero = libCOMI_gf_GetHeroUnitBad(lv_vPlayer, lv_vUnitTypeHero);
    }
    if ((lv_vUnitTypeCaster != null)) {
        lv_vUnitCaster = libCOMI_gf_CM_PlayerGetGlobalCaster2(lv_vPlayer);
    }
    if (((lv_vButton == null) || ((lv_vAbilityCooldownLocation == "Unit") && (UnitAbilityExists(lv_vUnitCaster, lv_vAbility) == false) && (UnitAbilityExists(lv_vUnitHero, lv_vAbility) == true) && (UnitGroupUnit(UnitSubgroupSelected(lv_vPlayer), 1) != lv_vUnitHero)))) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoC5694E41_val = lv_vAbilityCooldownLocation;
    if (autoC5694E41_val == "Player") {
        if ((lv_vAbilityCharges > 0.0)) {
            lv_vRemainingCooldown = PlayerGetChargeRegen(lv_vPlayer, lv_vCooldownLink);
        }
        else {
            lv_vRemainingCooldown = PlayerGetCooldown(lv_vPlayer, lv_vCooldownLink);
        }
    }
    else if (autoC5694E41_val == "Unit") {
        if ((UnitAbilityExists(lv_vUnitCaster, lv_vAbility) == true)) {
            if ((lv_vAbilityCharges > 0.0)) {
                lv_vRemainingCooldown = UnitGetChargeRegen(lv_vUnitCaster, lv_vCooldownLink);
            }
            else {
                lv_vRemainingCooldown = UnitGetCooldown(lv_vUnitCaster, lv_vCooldownLink);
            }
        }
        else {
            if ((lv_vAbilityCharges > 0.0)) {
                lv_vRemainingCooldown = UnitGetChargeRegen(lv_vUnitHero, lv_vCooldownLink);
            }
            else {
                lv_vRemainingCooldown = UnitGetCooldown(lv_vUnitHero, lv_vCooldownLink);
            }
        }
    }
    else if (autoC5694E41_val == "Ability") {
        if ((UnitAbilityExists(lv_vUnitCaster, lv_vAbility) == true)) {
            if ((lv_vAbilityCharges > 0.0)) {
                lv_vRemainingCooldown = UnitAbilityGetChargeRegen(lv_vUnitCaster, lv_vAbility, lv_vCooldownLink);
            }
            else {
                lv_vRemainingCooldown = UnitAbilityGetCooldown(lv_vUnitCaster, lv_vAbility, lv_vCooldownLink);
            }
        }
        else {
            if ((lv_vAbilityCharges > 0.0)) {
                lv_vRemainingCooldown = UnitAbilityGetChargeRegen(lv_vUnitHero, lv_vAbility, lv_vCooldownLink);
            }
            else {
                lv_vRemainingCooldown = UnitAbilityGetCooldown(lv_vUnitHero, lv_vAbility, lv_vCooldownLink);
            }
        }
    }
    else {
    }
    if ((lv_vAbilityCharges > 0.0)) {
        if ((UnitAbilityExists(lv_vUnitCaster, lv_vAbility) == true)) {
            lv_vCharges = UnitAbilityChargeInfo(lv_vUnitCaster, lv_vAbilityCommand, c_unitAbilChargeCountLeft);
        }
        else {
            lv_vCharges = UnitAbilityChargeInfo(lv_vUnitHero, lv_vAbilityCommand, c_unitAbilChargeCountLeft);
        }
    }

    if ((lv_vAbilityIsAvailable == false)) {
        SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        TextExpressionSetToken("Param/Expression/lib_COMI_AAA31BFF", "C", lv_vColor);
        TextExpressionSetToken("Param/Expression/lib_COMI_AAA31BFF", "B", StringExternal(lv_vButtonText));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_AAA31BFF"));
    }
    else if ((lv_vCharges > 0.0)) {
        SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        TextExpressionSetToken("Param/Expression/lib_COMI_DFE941DE", "C", lv_vColorReady);
        TextExpressionSetToken("Param/Expression/lib_COMI_DFE941DE", "B", StringExternal(lv_vButtonText));
        TextExpressionSetToken("Param/Expression/lib_COMI_DFE941DE", "C", lv_vColorReady);
        TextExpressionSetToken("Param/Expression/lib_COMI_DFE941DE", "A", FixedToText(lv_vCharges, 0));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_DFE941DE"));
    }
    else if ((((!(((lv_vAbilityCooldown > 0) && (lv_vAbilityCost > 0)))) && (lv_vRemainingCooldown == 0.0)) || (((lv_vAbilityCooldown > 0) && (lv_vAbilityCost > 0)) && (lv_vRemainingCooldown == 0.0) && (lv_vAbilityCost <= UnitGetPropertyFixed(lv_vUnitCaster, c_unitPropEnergy, c_unitPropCurrent))))) {
        SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        TextExpressionSetToken("Param/Expression/lib_COMI_5AEDA22B", "C", lv_vColorReady);
        TextExpressionSetToken("Param/Expression/lib_COMI_5AEDA22B", "B", StringExternal(lv_vButtonText));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_5AEDA22B"));
    }
    else if ((lv_vRemainingCooldown > 0.0)) {
        SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        TextExpressionSetToken("Param/Expression/lib_COMI_5A3C2E55", "C", lv_vColor);
        TextExpressionSetToken("Param/Expression/lib_COMI_5A3C2E55", "B", StringExternal(lv_vButtonText));
        TextExpressionSetToken("Param/Expression/lib_COMI_5A3C2E55", "C", lv_vColor);
        TextExpressionSetToken("Param/Expression/lib_COMI_5A3C2E55", "A", FixedToText(lv_vRemainingCooldown, 0));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_5A3C2E55"));
    }
    else if (true) {
        if ((lv_vAbilityCost <= UnitGetPropertyFixed(lv_vUnitCaster, c_unitPropEnergy, c_unitPropCurrent))) {
            SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
            TextExpressionSetToken("Param/Expression/lib_COMI_E2692B72", "B", lv_vColorReady);
            TextExpressionSetToken("Param/Expression/lib_COMI_E2692B72", "C", StringExternal(lv_vButtonText));
            TextExpressionSetToken("Param/Expression/lib_COMI_E2692B72", "B", lv_vColorReady);
            TextExpressionSetToken("Param/Expression/lib_COMI_E2692B72", "A", FixedToText(UnitGetPropertyFixed(lv_vUnitCaster, c_unitPropEnergy, c_unitPropCurrent), 0));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_E2692B72"));
        }
        else {
            SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
            TextExpressionSetToken("Param/Expression/lib_COMI_180F7ACC", "B", lv_vColor);
            TextExpressionSetToken("Param/Expression/lib_COMI_180F7ACC", "C", StringExternal(lv_vButtonText));
            TextExpressionSetToken("Param/Expression/lib_COMI_180F7ACC", "B", lv_vColor);
            TextExpressionSetToken("Param/Expression/lib_COMI_180F7ACC", "A", FixedToText(UnitGetPropertyFixed(lv_vUnitCaster, c_unitPropEnergy, c_unitPropCurrent), 0));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_180F7ACC"));
        }
    }
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AF_TopBarClicked_Init () {
    libCOMI_gt_AF_TopBarClicked = TriggerCreate("libCOMI_gt_AF_TopBarClicked_Func");
    TriggerEnable(libCOMI_gt_AF_TopBarClicked, false);
    TriggerAddEventDialogControl(libCOMI_gt_AF_TopBarClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeHotkeyPressed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_MouseEntersTopBar
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AF_MouseEntersTopBar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libCOMI_gv_topbarButton[0][EventPlayer()]) || (EventDialogControl() == libCOMI_gv_topbarButton[1][EventPlayer()]) || (EventDialogControl() == libCOMI_gv_topbarButton[2][EventPlayer()]) || (EventDialogControl() == libCOMI_gv_topbarButton[3][EventPlayer()]) || (EventDialogControl() == libCOMI_gv_topbarButton[4][EventPlayer()])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetCommandAllowed(PlayerGroupSingle(EventPlayer()), c_uiCommandAllowSmartClick, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AF_MouseEntersTopBar_Init () {
    libCOMI_gt_AF_MouseEntersTopBar = TriggerCreate("libCOMI_gt_AF_MouseEntersTopBar_Func");
    TriggerEnable(libCOMI_gt_AF_MouseEntersTopBar, false);
    TriggerAddEventDialogControl(libCOMI_gt_AF_MouseEntersTopBar, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_MouseExitsTopBar
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AF_MouseExitsTopBar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libCOMI_gv_topbarButton[0][EventPlayer()]) || (EventDialogControl() == libCOMI_gv_topbarButton[1][EventPlayer()]) || (EventDialogControl() == libCOMI_gv_topbarButton[2][EventPlayer()]) || (EventDialogControl() == libCOMI_gv_topbarButton[3][EventPlayer()]) || (EventDialogControl() == libCOMI_gv_topbarButton[4][EventPlayer()])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetCommandAllowed(PlayerGroupSingle(EventPlayer()), c_uiCommandAllowSmartClick, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AF_MouseExitsTopBar_Init () {
    libCOMI_gt_AF_MouseExitsTopBar = TriggerCreate("libCOMI_gt_AF_MouseExitsTopBar_Func");
    TriggerEnable(libCOMI_gt_AF_MouseExitsTopBar, false);
    TriggerAddEventDialogControl(libCOMI_gt_AF_MouseExitsTopBar, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VU_EnemyFactionChanged
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_VU_EnemyFactionChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_newValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_newValue = libCOMI_gv_vU_EnemyFactionsList[DialogControlGetSelectedItem(libCOMI_gv_vU_CommanderEnemyFactionPulldown, EventPlayer())];

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_vU_CommanderEnemyFactionPulldown))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (true) {
        return true;
    }

    libCOMI_gf_VU_SetEnemyFaction(lv_newValue);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_VU_EnemyFactionChanged_Init () {
    libCOMI_gt_VU_EnemyFactionChanged = TriggerCreate("libCOMI_gt_VU_EnemyFactionChanged_Func");
    TriggerAddEventDialogControl(libCOMI_gt_VU_EnemyFactionChanged, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Faction Button Clicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_FactionButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_new;
    string lv_old;
    int lv_i;

    // Automatic Variable Declarations
    int autoE964CBFC_ae;
    const int autoE964CBFC_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE964CBFC_ae = libCOMI_gv_totalFactions;
    lv_i = 1;
    for ( ; ( (autoE964CBFC_ai >= 0 && lv_i <= autoE964CBFC_ae) || (autoE964CBFC_ai < 0 && lv_i >= autoE964CBFC_ae) ) ; lv_i += autoE964CBFC_ai ) {
        if ((EventDialogControl() == libCOMI_gv_raceButton[lv_i])) {
            lv_new = libCOMI_gv_raceFaction[lv_i];
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_FactionButtonClicked_Init () {
    libCOMI_gt_FactionButtonClicked = TriggerCreate("libCOMI_gt_FactionButtonClicked_Func");
    TriggerAddEventDialogControl(libCOMI_gt_FactionButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_CS_NewsControlButtonClicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AF_CS_NewsControlButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_aF_CS_NewsControlButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_aF_CS_NewsControlButtonClicked = true;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AF_CS_NewsControlButtonClicked_Init () {
    libCOMI_gt_AF_CS_NewsControlButtonClicked = TriggerCreate("libCOMI_gt_AF_CS_NewsControlButtonClicked_Func");
    TriggerAddEventDialogControl(libCOMI_gt_AF_CS_NewsControlButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_CommandsButtonClicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_CommandsButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_uT_CommandsButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libARRA_gt_UT_Info, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_CommandsButtonClicked_Init () {
    libCOMI_gt_UT_CommandsButtonClicked = TriggerCreate("libCOMI_gt_UT_CommandsButtonClicked_Func");
    TriggerAddEventDialogControl(libCOMI_gt_UT_CommandsButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_PlayerLeftInLobby
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_PlayerLeftInLobby_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gv_gameHasBegun == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_UpdateCommandersList();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_PlayerLeftInLobby_Init () {
    libCOMI_gt_CU_PlayerLeftInLobby = TriggerCreate("libCOMI_gt_CU_PlayerLeftInLobby_Func");
    TriggerAddEventPlayerLeft(libCOMI_gt_CU_PlayerLeftInLobby, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Commander Button Clicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CommanderButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_commIndex;
    int lv_oldPlayer;

    // Automatic Variable Declarations
    const int auto574C97CB_ae = libCOMI_gv_mAX_COMMANDERCOUNT;
    const int auto574C97CB_ai = 1;
    playergroup autoBF87CBE0_g;
    int autoBF87CBE0_var;
    const int auto39B6E204_ae = libCOMI_gv_mAX_TEAM_PLAYERS;
    const int auto39B6E204_ai = 1;
    const int auto7FCE6C74_ae = libCOMI_gv_mAX_TEAM_PLAYERS;
    const int auto7FCE6C74_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_commIndex = 1;
    for ( ; ( (auto574C97CB_ai >= 0 && lv_commIndex <= auto574C97CB_ae) || (auto574C97CB_ai < 0 && lv_commIndex >= auto574C97CB_ae) ) ; lv_commIndex += auto574C97CB_ai ) {
        if ((EventDialogControl() == libCOMI_gv_commanderOption[lv_commIndex].lv_button)) {
            autoBF87CBE0_g = libCOMI_gv_vU_SlotsPlayers;
            autoBF87CBE0_var = -1;
            while (true) {
                autoBF87CBE0_var = PlayerGroupNextPlayer(autoBF87CBE0_g, autoBF87CBE0_var);
                if (autoBF87CBE0_var < 0) { break; }
                if ((libCOMI_gv_cU_CommanderList[lv_commIndex] == libCOMI_gv_cCX_PlayerCommander[autoBF87CBE0_var])) {
                    lv_oldPlayer = autoBF87CBE0_var;
                    break;
                }

            }
            if ((lv_oldPlayer != 0)) {
                if ((PlayerType(lv_oldPlayer) == c_playerTypeUser)) {
                    return true;
                }
                else {
                    libCOMI_gv_chosenTeam[lv_oldPlayer] = libCOMI_gv_chosenTeam[EventPlayer()];
                    libCOMI_gf_CU_CommanderSelect(lv_oldPlayer, libCOMI_gv_cCX_PlayerCommander[EventPlayer()]);
                }
            }

            libCOMI_gv_chosenTeam[EventPlayer()] = 1;
            libCOMI_gv_cCX_PlayerCommander[EventPlayer()] = libCOMI_gv_cU_CommanderList[lv_commIndex];
            libCOMI_gf_UpdateCommandersList();
            libCOMI_gf_CU_CommanderSelect(EventPlayer(), libCOMI_gv_cCX_PlayerCommander[EventPlayer()]);
        }

    }
    if (((libCOMI_gv_cCX_PlayerCommander[EventPlayer()] != null) || (libCOMI_gv_chosenTeam[EventPlayer()] != 1))) {
        if ((EventDialogControl() == libCOMI_gv_playRandomButton)) {
            libCOMI_gv_chosenTeam[EventPlayer()] = 1;
            libCOMI_gf_CU_CommanderSelect(EventPlayer(), null);
            libCOMI_gf_UpdateCommandersList();
        }

        lv_commIndex = 1;
        for ( ; ( (auto39B6E204_ai >= 0 && lv_commIndex <= auto39B6E204_ae) || (auto39B6E204_ai < 0 && lv_commIndex >= auto39B6E204_ae) ) ; lv_commIndex += auto39B6E204_ai ) {
            if ((EventDialogControl() == libCOMI_gv_randomOption[lv_commIndex].lv_button)) {
                lv_oldPlayer = libCOMI_gv_randomPlayers[lv_commIndex];
                if ((lv_oldPlayer != 0)) {
                    if ((PlayerType(lv_oldPlayer) == c_playerTypeUser)) {
                        return true;
                    }
                    else {
                        libCOMI_gv_chosenTeam[lv_oldPlayer] = libCOMI_gv_chosenTeam[EventPlayer()];
                        libCOMI_gf_CU_CommanderSelect(lv_oldPlayer, libCOMI_gv_cCX_PlayerCommander[EventPlayer()]);
                    }
                }

                libCOMI_gv_chosenTeam[EventPlayer()] = 1;
                libCOMI_gf_CU_CommanderSelect(EventPlayer(), null);
                libCOMI_gf_UpdateCommandersList();
            }

        }
    }

    if ((libCOMI_gv_chosenTeam[EventPlayer()] != 2)) {
        if ((EventDialogControl() == libCOMI_gv_playAmonButton)) {
            libCOMI_gv_chosenTeam[EventPlayer()] = 2;
            libCOMI_gf_CU_CommanderSelect(EventPlayer(), null);
            libCOMI_gf_UpdateCommandersList();
        }

        lv_commIndex = 1;
        for ( ; ( (auto7FCE6C74_ai >= 0 && lv_commIndex <= auto7FCE6C74_ae) || (auto7FCE6C74_ai < 0 && lv_commIndex >= auto7FCE6C74_ae) ) ; lv_commIndex += auto7FCE6C74_ai ) {
            if ((EventDialogControl() == libCOMI_gv_amonOption[lv_commIndex].lv_button)) {
                lv_oldPlayer = libCOMI_gv_amonPlayers[lv_commIndex];
                if ((lv_oldPlayer != 0)) {
                    if ((PlayerType(lv_oldPlayer) == c_playerTypeUser)) {
                        return true;
                    }
                    else {
                        libCOMI_gv_chosenTeam[lv_oldPlayer] = libCOMI_gv_chosenTeam[EventPlayer()];
                        libCOMI_gf_CU_CommanderSelect(lv_oldPlayer, libCOMI_gv_cCX_PlayerCommander[EventPlayer()]);
                    }
                }

                libCOMI_gv_chosenTeam[EventPlayer()] = 2;
                libCOMI_gf_CU_CommanderSelect(EventPlayer(), null);
                libCOMI_gf_UpdateCommandersList();
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CommanderButtonClicked_Init () {
    libCOMI_gt_CommanderButtonClicked = TriggerCreate("libCOMI_gt_CommanderButtonClicked_Func");
    TriggerAddEventDialogControl(libCOMI_gt_CommanderButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_PrestigeAlly
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_PrestigeAlly_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_UT_ChangeAllyPrestige();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_PrestigeAlly_Init () {
    libCOMI_gt_UT_PrestigeAlly = TriggerCreate("libCOMI_gt_UT_PrestigeAlly_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_PrestigeAlly, c_playerAny, "-pnext", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_CommanderClicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_CommanderClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_commIndex;

    // Automatic Variable Declarations
    const int auto77CB66EC_ae = libCOMI_gv_mAX_COMMANDERCOUNT;
    const int auto77CB66EC_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_commIndex = 1;
    for ( ; ( (auto77CB66EC_ai >= 0 && lv_commIndex <= auto77CB66EC_ae) || (auto77CB66EC_ai < 0 && lv_commIndex >= auto77CB66EC_ae) ) ; lv_commIndex += auto77CB66EC_ai ) {
        if (true) {
            if ((libCOMI_gv_cCX_PlayerCommander[libCOMI_gf_CC_PlayerAlly(EventPlayer())] == libCOMI_gv_cU_CommanderList[lv_commIndex])) {
                libCOMI_gv_uT_PrestigeIndex = 0;
                break;
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_CommanderClicked_Init () {
    libCOMI_gt_UT_CommanderClicked = TriggerCreate("libCOMI_gt_UT_CommanderClicked_Func");
    TriggerEnable(libCOMI_gt_UT_CommanderClicked, false);
    TriggerAddEventDialogControl(libCOMI_gt_UT_CommanderClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_CommanderLevelUpClicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_CommanderLevelUpClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_current;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_current = libCOMI_gf_CC_CommanderLevel(EventPlayer(), libCOMI_gf_ActiveCommanderForPlayer(EventPlayer()));

    // Conditions
    if (testConds) {
        if (!((lv_current < 15))) {
            return false;
        }

        if (!((EventDialogControl() == libCOMI_gv_cU_CommanderLevelUpButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CC_PlayerLevelSet(EventPlayer(), (lv_current+1), libCOMI_gf_ActiveCommanderForPlayer(EventPlayer()));
    libCOMI_gf_UpdatePlayerCommander(EventPlayer());
    libCOMI_gf_UpdateCommandersList();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_CommanderLevelUpClicked_Init () {
    libCOMI_gt_CU_CommanderLevelUpClicked = TriggerCreate("libCOMI_gt_CU_CommanderLevelUpClicked_Func");
    TriggerAddEventDialogControl(libCOMI_gt_CU_CommanderLevelUpClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_CommanderLevelDownClicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_CommanderLevelDownClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_current;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_current = libCOMI_gf_CC_CommanderLevel(EventPlayer(), libCOMI_gf_ActiveCommanderForPlayer(EventPlayer()));

    // Conditions
    if (testConds) {
        if (!((lv_current > 1))) {
            return false;
        }

        if (!((EventDialogControl() == libCOMI_gv_cU_CommanderLevelDownButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CC_PlayerLevelSet(EventPlayer(), (lv_current-1), libCOMI_gf_ActiveCommanderForPlayer(EventPlayer()));
    libCOMI_gf_UpdatePlayerCommander(EventPlayer());
    libCOMI_gf_UpdateCommandersList();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_CommanderLevelDownClicked_Init () {
    libCOMI_gt_CU_CommanderLevelDownClicked = TriggerCreate("libCOMI_gt_CU_CommanderLevelDownClicked_Func");
    TriggerAddEventDialogControl(libCOMI_gt_CU_CommanderLevelDownClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_CommanderMutatorChallengeSelected
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_CommanderMutatorChallengeSelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexMutator;
    int lv_challengeMutatorIndex;
    string lv_selectedChallenge;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    int auto6BBBA997_ae;
    const int auto6BBBA997_ai = 1;
    playergroup autoBCE896D9_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_cU_CommanderMutatorChallengePulldown))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlGetSelectedItem(libCOMI_gv_cU_CommanderMutatorChallengePulldown, EventPlayer()) <= 1)) {
    }
    else {
        lv_selectedChallenge = libCOMI_gv_cU_CommanderMutatorChallengeList[(DialogControlGetSelectedItem(libCOMI_gv_cU_CommanderMutatorChallengePulldown, EventPlayer())-1)];
        auto6BBBA997_ae = UserDataFieldValueCount("MutatorChallenges", "Mutators");
        lv_challengeMutatorIndex = 1;
        for ( ; ( (auto6BBBA997_ai >= 0 && lv_challengeMutatorIndex <= auto6BBBA997_ae) || (auto6BBBA997_ai < 0 && lv_challengeMutatorIndex >= auto6BBBA997_ae) ) ; lv_challengeMutatorIndex += auto6BBBA997_ai ) {
            if ((UserDataGetUserInstance("MutatorChallenges", lv_selectedChallenge, "Mutators", lv_challengeMutatorIndex) != null)) {
            }
            else {
                break;
            }
        }
    }
    autoBCE896D9_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoBCE896D9_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOMI_gf_UpdatePlayerCommander(lv_indexPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_CommanderMutatorChallengeSelected_Init () {
    libCOMI_gt_CU_CommanderMutatorChallengeSelected = TriggerCreate("libCOMI_gt_CU_CommanderMutatorChallengeSelected_Func");
    TriggerAddEventDialogControl(libCOMI_gt_CU_CommanderMutatorChallengeSelected, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_CS_AllyPrestigeChanged
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AF_CS_AllyPrestigeChanged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_aF_CS_AllyPrestigeButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_UT_ChangeAllyPrestige();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AF_CS_AllyPrestigeChanged_Init () {
    libCOMI_gt_AF_CS_AllyPrestigeChanged = TriggerCreate("libCOMI_gt_AF_CS_AllyPrestigeChanged_Func");
    TriggerAddEventDialogControl(libCOMI_gt_AF_CS_AllyPrestigeChanged, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_AllyMasteryButtonClicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_AllyMasteryButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerStatus(2) != c_playerStatusActive))) {
            return false;
        }

        if (!((EventDialogControl() == libCOMI_gv_uT_AllyMasteryButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(libCOMI_gv_uT_MasteryDialog, EventPlayer()) == true)) {
        TriggerExecute(libCOMI_gt_UT_MasteryButtonClicked, false, false);
    }
    else {
        TriggerEnable(libCOMI_gt_UT_CommanderSwitched, true);
        libCOMI_gv_uT_MasteryTargetPlayer = 2;
        libCOMI_gf_UT_MasteryChoiceCreateUpdate(libCOMI_gv_uT_MasteryTargetPlayer);
        DialogSetVisible(libCOMI_gv_uT_MasteryDialog, PlayerGroupAll(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_AllyMasteryButtonClicked_Init () {
    libCOMI_gt_UT_AllyMasteryButtonClicked = TriggerCreate("libCOMI_gt_UT_AllyMasteryButtonClicked_Func");
    TriggerAddEventDialogControl(libCOMI_gt_UT_AllyMasteryButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_CommanderMasteryClicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_CommanderMasteryClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_cU_CommanderMasteryButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CU_MasteryDisplay(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_CommanderMasteryClicked_Init () {
    libCOMI_gt_CU_CommanderMasteryClicked = TriggerCreate("libCOMI_gt_CU_CommanderMasteryClicked_Func");
    TriggerAddEventDialogControl(libCOMI_gt_CU_CommanderMasteryClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_CommanderMasteryCheckboxToggle
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_CommanderMasteryCheckboxToggle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoD4BD7D8B_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_cU_CommanderMasteryCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD4BD7D8B_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoD4BD7D8B_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOMI_gf_UpdatePlayerCommander(lv_indexPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_CommanderMasteryCheckboxToggle_Init () {
    libCOMI_gt_CU_CommanderMasteryCheckboxToggle = TriggerCreate("libCOMI_gt_CU_CommanderMasteryCheckboxToggle_Func");
    TriggerAddEventDialogControl(libCOMI_gt_CU_CommanderMasteryCheckboxToggle, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ReadyButtonClicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_ReadyButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    string lv_indexPerk;
    int[libCOMI_gv_mAX_PLAYERLEVEL + 1] lv_perkCount;
    int lv_ally;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ally = libCOMI_gf_CC_PlayerAlly(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_cU_CommanderReadyButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CU_CommanderPlayerReadySet(EventPlayer(), !(libCOMI_gv_cU_CommanderSelect_PlayerReady[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_ReadyButtonClicked_Init () {
    libCOMI_gt_ReadyButtonClicked = TriggerCreate("libCOMI_gt_ReadyButtonClicked_Func");
    TriggerAddEventDialogControl(libCOMI_gt_ReadyButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_CommandeAllyLeft
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_CommandeAllyLeft_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_CommandeAllyLeft_Init () {
    libCOMI_gt_CU_CommandeAllyLeft = TriggerCreate("libCOMI_gt_CU_CommandeAllyLeft_Func");
    TriggerAddEventPlayerLeft(libCOMI_gt_CU_CommandeAllyLeft, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MasteryShiftTrackDown
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_MasteryShiftTrackDown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cU_MasteryShiftPressed[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_MasteryShiftTrackDown_Init () {
    libCOMI_gt_CU_MasteryShiftTrackDown = TriggerCreate("libCOMI_gt_CU_MasteryShiftTrackDown_Func");
    TriggerEnable(libCOMI_gt_CU_MasteryShiftTrackDown, false);
    TriggerAddEventKeyPressed(libCOMI_gt_CU_MasteryShiftTrackDown, c_playerAny, c_keyShift, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MasteryShiftTrackUp
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_MasteryShiftTrackUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cU_MasteryShiftPressed[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_MasteryShiftTrackUp_Init () {
    libCOMI_gt_CU_MasteryShiftTrackUp = TriggerCreate("libCOMI_gt_CU_MasteryShiftTrackUp_Func");
    TriggerEnable(libCOMI_gt_CU_MasteryShiftTrackUp, false);
    TriggerAddEventKeyPressed(libCOMI_gt_CU_MasteryShiftTrackUp, c_playerAny, c_keyShift, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MasteryLevelUpPressed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_MasteryLevelUpPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_cU_MasteryLevelUpButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_cU_MasteryShiftPressed[EventPlayer()] == true)) {
        libCOMI_gv_cU_MasteryLevelCurrent[EventPlayer()] += 10;
        if ((libCOMI_gv_cU_MasteryLevelCurrent[EventPlayer()] > libCOMI_gv_cCC_MASTERY_MAX_LEVEL)) {
            libCOMI_gv_cU_MasteryLevelCurrent[EventPlayer()] = libCOMI_gv_cCC_MASTERY_MAX_LEVEL;
        }

    }
    else {
        libCOMI_gv_cU_MasteryLevelCurrent[EventPlayer()] += 1;
    }
    libCOMI_gf_CU_MasteryUpdatePoints(EventPlayer());
    libCOMI_gf_CU_MasteryUpdate(EventPlayer());
    libCOMI_gf_CU_MasteryUpdateData(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_MasteryLevelUpPressed_Init () {
    libCOMI_gt_CU_MasteryLevelUpPressed = TriggerCreate("libCOMI_gt_CU_MasteryLevelUpPressed_Func");
    TriggerEnable(libCOMI_gt_CU_MasteryLevelUpPressed, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_MasteryLevelUpPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MasteryLevelDownPressed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_MasteryLevelDownPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_cU_MasteryLevelDownButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_cU_MasteryShiftPressed[EventPlayer()] == true)) {
        libCOMI_gv_cU_MasteryLevelCurrent[EventPlayer()] -= 10;
        if ((libCOMI_gv_cU_MasteryLevelCurrent[EventPlayer()] < 0)) {
            libCOMI_gv_cU_MasteryLevelCurrent[EventPlayer()] = 0;
        }

    }
    else {
        libCOMI_gv_cU_MasteryLevelCurrent[EventPlayer()] -= 1;
    }
    libCOMI_gf_CU_MasteryUpdatePoints(EventPlayer());
    libCOMI_gf_CU_MasteryUpdate(EventPlayer());
    libCOMI_gf_CU_MasteryUpdateData(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_MasteryLevelDownPressed_Init () {
    libCOMI_gt_CU_MasteryLevelDownPressed = TriggerCreate("libCOMI_gt_CU_MasteryLevelDownPressed_Func");
    TriggerEnable(libCOMI_gt_CU_MasteryLevelDownPressed, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_MasteryLevelDownPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MasteryItemPlusPressed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_MasteryItemPlusPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itemIndex;

    // Automatic Variable Declarations
    const int autoBCC3E184_ae = libCOMI_gv_cCC_MASTERIES_PER_COMMANDER;
    const int autoBCC3E184_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itemIndex = 1;
    for ( ; ( (autoBCC3E184_ai >= 0 && lv_itemIndex <= autoBCC3E184_ae) || (autoBCC3E184_ai < 0 && lv_itemIndex >= autoBCC3E184_ae) ) ; lv_itemIndex += autoBCC3E184_ai ) {
        if ((EventDialogControl() == libCOMI_gv_cU_MasteryPlusButtons[lv_itemIndex])) {
            if ((libCOMI_gv_cU_MasteryShiftPressed[EventPlayer()] == true)) {
                libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][EventPlayer()] += MinI(libCOMI_gv_cU_MasteryCategoryPointsLeft[libCOMI_gf_CC_PlayerMasteryCategory(libCOMI_gv_cU_MasteryUpgrades[lv_itemIndex][EventPlayer()])][EventPlayer()], 10);
                if ((libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][EventPlayer()] > libCOMI_gv_cCC_MASTERY_UPGRADE_MAX_LEVEL)) {
                    libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][EventPlayer()] = libCOMI_gv_cCC_MASTERY_UPGRADE_MAX_LEVEL;
                }

            }
            else {
                libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][EventPlayer()] += 1;
            }
            libCOMI_gf_CU_MasteryUpdatePoints(EventPlayer());
        }

    }
    libCOMI_gf_CU_MasteryUpdate(EventPlayer());
    libCOMI_gf_CU_MasteryUpdateData(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_MasteryItemPlusPressed_Init () {
    libCOMI_gt_CU_MasteryItemPlusPressed = TriggerCreate("libCOMI_gt_CU_MasteryItemPlusPressed_Func");
    TriggerEnable(libCOMI_gt_CU_MasteryItemPlusPressed, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_MasteryItemPlusPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MasteryItemMinusPressed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_MasteryItemMinusPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itemIndex;

    // Automatic Variable Declarations
    const int auto58A3D77D_ae = libCOMI_gv_cCC_MASTERIES_PER_COMMANDER;
    const int auto58A3D77D_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itemIndex = 1;
    for ( ; ( (auto58A3D77D_ai >= 0 && lv_itemIndex <= auto58A3D77D_ae) || (auto58A3D77D_ai < 0 && lv_itemIndex >= auto58A3D77D_ae) ) ; lv_itemIndex += auto58A3D77D_ai ) {
        if ((EventDialogControl() == libCOMI_gv_cU_MasteryMinusButtons[lv_itemIndex])) {
            if ((libCOMI_gv_cU_MasteryShiftPressed[EventPlayer()] == true)) {
                libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][EventPlayer()] -= 10;
                if ((libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][EventPlayer()] < 0)) {
                    libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][EventPlayer()] = 0;
                }

            }
            else {
                libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][EventPlayer()] -= 1;
            }
            libCOMI_gf_CU_MasteryUpdatePoints(EventPlayer());
        }

    }
    libCOMI_gf_CU_MasteryUpdate(EventPlayer());
    libCOMI_gf_CU_MasteryUpdateData(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_MasteryItemMinusPressed_Init () {
    libCOMI_gt_CU_MasteryItemMinusPressed = TriggerCreate("libCOMI_gt_CU_MasteryItemMinusPressed_Func");
    TriggerEnable(libCOMI_gt_CU_MasteryItemMinusPressed, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_MasteryItemMinusPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MasteryResetPressed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_MasteryResetPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itemIndex;

    // Automatic Variable Declarations
    const int auto21362FD9_ae = libCOMI_gv_cCC_MASTERIES_PER_COMMANDER;
    const int auto21362FD9_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_cU_MasteryResetButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itemIndex = 1;
    for ( ; ( (auto21362FD9_ai >= 0 && lv_itemIndex <= auto21362FD9_ae) || (auto21362FD9_ai < 0 && lv_itemIndex >= auto21362FD9_ae) ) ; lv_itemIndex += auto21362FD9_ai ) {
        libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][EventPlayer()] = 0;
    }
    libCOMI_gf_CU_MasteryUpdatePoints(EventPlayer());
    libCOMI_gf_CU_MasteryUpdate(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_MasteryResetPressed_Init () {
    libCOMI_gt_CU_MasteryResetPressed = TriggerCreate("libCOMI_gt_CU_MasteryResetPressed_Func");
    TriggerEnable(libCOMI_gt_CU_MasteryResetPressed, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_MasteryResetPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MasteryAcceptPressed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_MasteryAcceptPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itemIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_cU_MasteryAcceptButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CU_MasteryUpdateData(EventPlayer());
    libCOMI_gf_CU_MasteryClose(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_MasteryAcceptPressed_Init () {
    libCOMI_gt_CU_MasteryAcceptPressed = TriggerCreate("libCOMI_gt_CU_MasteryAcceptPressed_Func");
    TriggerEnable(libCOMI_gt_CU_MasteryAcceptPressed, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_MasteryAcceptPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_PrestigeButtonClicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_PrestigeButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto013548D1_ae = libCOMI_gv_cCC_PLAYERPRESTIGEMAXRANK;
    const int auto013548D1_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 0;
    for ( ; ( (auto013548D1_ai >= 0 && lv_index <= auto013548D1_ae) || (auto013548D1_ai < 0 && lv_index >= auto013548D1_ae) ) ; lv_index += auto013548D1_ai ) {
        if ((libCOMI_gv_cU_CommanderPrestigesButtons[lv_index].lv_button == EventDialogControl())) {
            libCOMI_gf_CU_PrestigeSelect(EventPlayer(), lv_index);
            DataTableSetInt(true, libCOMI_gf_CC_PrestigeCommanderTableKey(libCOMI_gf_ActiveCommanderForPlayer(EventPlayer()), EventPlayer()), lv_index);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_PrestigeButtonClicked_Init () {
    libCOMI_gt_CU_PrestigeButtonClicked = TriggerCreate("libCOMI_gt_CU_PrestigeButtonClicked_Func");
    TriggerEnable(libCOMI_gt_CU_PrestigeButtonClicked, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_PrestigeButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameModePulldownUsed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_GameModePulldownUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_vU_GameModePulldown))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SetGameMode(DialogControlGetSelectedItem(libCOMI_gv_vU_GameModePulldown, EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_GameModePulldownUsed_Init () {
    libCOMI_gt_GameModePulldownUsed = TriggerCreate("libCOMI_gt_GameModePulldownUsed_Func");
    TriggerEnable(libCOMI_gt_GameModePulldownUsed, false);
    TriggerAddEventDialogControl(libCOMI_gt_GameModePulldownUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DifficultyPulldownUsed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_DifficultyPulldownUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_vU_CommanderDifficultyPulldown))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SetDifficulty(DialogControlGetSelectedItem(libCOMI_gv_vU_CommanderDifficultyPulldown, EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_DifficultyPulldownUsed_Init () {
    libCOMI_gt_DifficultyPulldownUsed = TriggerCreate("libCOMI_gt_DifficultyPulldownUsed_Func");
    TriggerEnable(libCOMI_gt_DifficultyPulldownUsed, false);
    TriggerAddEventDialogControl(libCOMI_gt_DifficultyPulldownUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_SlimUI_Delayed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AF_SlimUI_Delayed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((GameGetMissionTime() >= 5.0))) {
        Wait(0.5, c_timeGame);
    }
    UISetFrameVisible(libARRA_gv_aF_SlimUI_PlayerGroup, c_syncFrameTypeConsolePanel, false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
    DialogControlSendAnimationEvent(DialogControlLastCreated(), libARRA_gv_aF_SlimUI_PlayerGroup, "SlimUI_On");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AF_SlimUI_Delayed_Init () {
    libCOMI_gt_AF_SlimUI_Delayed = TriggerCreate("libCOMI_gt_AF_SlimUI_Delayed_Func");
    libCOMI_gf_CU_CommanderClosed(libCOMI_gt_AF_SlimUI_Delayed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_FlashArmyButtonHelpTip
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_FlashArmyButtonHelpTip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlInvokeAsText(libCOMI_gv_cU_ArmyButtonTipPanel, PlayerGroupAll(), "PlayArmyTip_Zerg", StringExternal("Param/Value/lib_COMI_2910AE3F"), null, null, null);
    TriggerEnable(libCOMI_gt_CU_ArmyButtonUsed, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_FlashArmyButtonHelpTip_Init () {
    libCOMI_gt_CU_FlashArmyButtonHelpTip = TriggerCreate("libCOMI_gt_CU_FlashArmyButtonHelpTip_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_ArmyButtonUsed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_ArmyButtonUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libCOMI_gv_cU_ArmyButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlInvokeAsText(libCOMI_gv_cU_ArmyButtonTipPanel, PlayerGroupAll(), "CloseArmyTip_Zerg", StringExternal("Param/Value/lib_COMI_0F577014"), null, null, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_ArmyButtonUsed_Init () {
    libCOMI_gt_CU_ArmyButtonUsed = TriggerCreate("libCOMI_gt_CU_ArmyButtonUsed_Func");
    TriggerEnable(libCOMI_gt_CU_ArmyButtonUsed, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_ArmyButtonUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_ArmyButtonMissionInit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CS_ArmyButtonMissionInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    if ((true == true)) {
        if ((libCOMI_gf_DifficultyValueInt2(2, 1, 0, 0, 0, 0, 0) == 1)) {
            Wait(1.0, c_timeGame);
            while (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
                Wait(0.5, c_timeGame);
            }
            Wait(0.5, c_timeGame);
            libCOMI_gf_DisplayArmyButton(false);
            libCOMI_gv_cU_ArmyButtonTipReady = true;
        }
        else {
            UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CS_ArmyButtonMissionInit_Init () {
    libCOMI_gt_CS_ArmyButtonMissionInit = TriggerCreate("libCOMI_gt_CS_ArmyButtonMissionInit_Func");
    TriggerEnable(libCOMI_gt_CS_ArmyButtonMissionInit, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_TargetingCancelButtonUsed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_TargetingCancelButtonUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_cU_TargetingCancelButton[EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DataTableSetInt(false, TriggerEventParamName(libCOMI_gv_cUC_TargetingEventCancel, libCOMI_gv_cUC_TargetingParamPlayer), EventPlayer());
    TriggerSendEvent(libCOMI_gv_cUC_TargetingEventCancel);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_TargetingCancelButtonUsed_Init () {
    libCOMI_gt_CU_TargetingCancelButtonUsed = TriggerCreate("libCOMI_gt_CU_TargetingCancelButtonUsed_Func");
    TriggerEnable(libCOMI_gt_CU_TargetingCancelButtonUsed, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_TargetingCancelButtonUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingForceOff
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoATargetingForceOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto252FCEF8_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_SoAExitInstantly = true;
    auto252FCEF8_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto252FCEF8_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOMI_gv_cM_SoATargetingPhase[lv_indexPlayer] != libCOMI_ge_CM_SoATargetingPhaseType_None)) {
            libCOMI_gv_cM_SoATargetingTransitioning[lv_indexPlayer] = false;
            UISetTargetingOrder(PlayerGroupSingle(lv_indexPlayer), libCOMI_gv_yY_GPCasterGroup[lv_indexPlayer], null, false);
            libCOMI_gf_CM_SoATargetingCancel(lv_indexPlayer);
            libCOMI_gv_targetingPlayer = lv_indexPlayer;
            TriggerSendEvent("Targeting Mode Exit");
        }

    }
    libCOMI_gv_cM_SoATargetingUsageCount = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoATargetingForceOff_Init () {
    libCOMI_gt_CM_SoATargetingForceOff = TriggerCreate("libCOMI_gt_CM_SoATargetingForceOff_Func");
    TriggerAddEventGeneric(libCOMI_gt_CM_SoATargetingForceOff, "CinematicModeOn");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingCancelFromUI
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoATargetingCancelFromUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_SoATargetingCancel(libCOMI_gf_CU_TargetingTriggeringPlayer());
    UISetTargetingOrder(PlayerGroupSingle(libCOMI_gf_CU_TargetingTriggeringPlayer()), libNtve_gf_ConvertUnitToUnitGroup(libCOMI_gv_yY_GPCasterUnit[libCOMI_gf_CU_TargetingTriggeringPlayer()]), null, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoATargetingCancelFromUI_Init () {
    libCOMI_gt_CM_SoATargetingCancelFromUI = TriggerCreate("libCOMI_gt_CM_SoATargetingCancelFromUI_Func");
    libCOMI_gf_CU_TargetingCancel(libCOMI_gt_CM_SoATargetingCancelFromUI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deffered Transmission
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_DefferedTransmission_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_defferedTransmissionLinkLocal;
    fixed lv_defferedTransmissionDelayLocal;
    fixed lv_defferedTransmissionDeferlocal;
    int lv_defferedTaskLocal;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_defferedTransmissionLinkLocal = libCOMI_gv_defferedTransmissionLink;
    lv_defferedTransmissionDelayLocal = libCOMI_gv_defferedTransmissionDelay;
    lv_defferedTransmissionDeferlocal = libCOMI_gv_defferedTransmissionDefer;
    lv_defferedTaskLocal = libCOMI_gv_defferedTask;

    // Conditions
    if (testConds) {
        if (!((UserDataGetInt("MissionTransmission", lv_defferedTransmissionLinkLocal, "Deffered", 1) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UserDataSetInt("MissionTransmission", lv_defferedTransmissionLinkLocal, "Deffered", 1, 1);
    Wait(libCOMI_gv_defferedTransmissionDelay, c_timeReal);
    TriggerQueueEnter();
    if ((((lv_defferedTaskLocal != 0) && (libARRA_gf_TaskActive(lv_defferedTaskLocal) == false)))) {
        UserDataSetInt("MissionTransmission", lv_defferedTransmissionLinkLocal, "Deffered", 1, 0);
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission(lv_defferedTransmissionLinkLocal, true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(lv_defferedTransmissionDeferlocal, c_timeReal);
    UserDataSetInt("MissionTransmission", lv_defferedTransmissionLinkLocal, "Deffered", 1, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_DefferedTransmission_Init () {
    libCOMI_gt_DefferedTransmission = TriggerCreate("libCOMI_gt_DefferedTransmission_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_HeroReviveQueue_HeroRevived
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_HeroReviveQueue_HeroRevived_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_herounit;
    int lv_owner;
    string lv_herorevivesoundinstance;

    // Automatic Variable Declarations
    string auto5BDC1380_userType;
    int auto5BDC1380_i;

    // Variable Initialization
    lv_herounit = EventUnit();
    lv_owner = UnitGetOwner(lv_herounit);

    // Actions
    if (!runActions) {
        return true;
    }

    auto5BDC1380_userType = "HeroReviveSounds";
    auto5BDC1380_i = 1;
    for ( ; auto5BDC1380_i <= UserDataInstanceCount(auto5BDC1380_userType) ; auto5BDC1380_i += 1 ) {
        lv_herorevivesoundinstance = UserDataInstance(auto5BDC1380_userType, auto5BDC1380_i);
        if ((UserDataGetUnit("HeroReviveSounds", lv_herorevivesoundinstance, "HeroUnit", 1) == UnitGetType(lv_herounit)) && ((UserDataGetUpgrade("HeroReviveSounds", lv_herorevivesoundinstance, "RequiredUpgrade", 1) == null) || (TechTreeUpgradeCount(lv_owner, UserDataGetUpgrade("HeroReviveSounds", lv_herorevivesoundinstance, "RequiredUpgrade", 1), c_techCountCompleteOnly) > 0))) {
            libCOMI_gf_CM_HeroReviveQueue_PlaySound(SoundLink(UserDataGetSound("HeroReviveSounds", lv_herorevivesoundinstance, "HeroSound", 1), c_soundIndexAny), UserDataGetFixed("HeroReviveSounds", lv_herorevivesoundinstance, "HeroSoundDelay", 1), libCOMI_gf_GetAlliedCommandersPlayersCopy());
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_HeroReviveQueue_HeroRevived_Init () {
    libCOMI_gt_CM_HeroReviveQueue_HeroRevived = TriggerCreate("libCOMI_gt_CM_HeroReviveQueue_HeroRevived_Func");
    TriggerAddEventUnitRevive(libCOMI_gt_CM_HeroReviveQueue_HeroRevived, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_VOResourceSent
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_VOResourceSent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventResourceTradeAmount(c_resourceTypeMinerals) == 0)) {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(EventPlayer()), libCOMI_gf_CC_CommanderVOLine(libCOMI_gf_ActiveCommanderForPlayer(EventPlayer()), libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOVespeneSent), PlayerGroupSingle(EventResourceTradeRecipient()));
    }
    else if ((EventResourceTradeAmount(c_resourceTypeVespene) == 0)) {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(EventPlayer()), libCOMI_gf_CC_CommanderVOLine(libCOMI_gf_ActiveCommanderForPlayer(EventPlayer()), libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOMineralsSent), PlayerGroupSingle(EventResourceTradeRecipient()));
    }
    else if (true) {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(EventPlayer()), libCOMI_gf_CC_CommanderVOLine(libCOMI_gf_ActiveCommanderForPlayer(EventPlayer()), libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOResourcesSent), PlayerGroupSingle(EventResourceTradeRecipient()));
    }
    libCOMI_gf_ThankYou(EventPlayer(), EventResourceTradeRecipient());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_VOResourceSent_Init () {
    libCOMI_gt_CM_VOResourceSent = TriggerCreate("libCOMI_gt_CM_VOResourceSent_Func");
    TriggerEnable(libCOMI_gt_CM_VOResourceSent, false);
    TriggerAddEventResourceTrade(libCOMI_gt_CM_VOResourceSent, c_playerAny, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_VOResourceRequest
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_VOResourceRequest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventResourceRequestAmount(c_resourceTypeMinerals) == 0)) {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(EventPlayer()), libCOMI_gf_CC_CommanderVOLine(libCOMI_gf_ActiveCommanderForPlayer(EventPlayer()), libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOVespeneRequested), PlayerGroupSingle(libCOMI_gf_CC_PlayerAlly(EventPlayer())));
    }
    else if ((EventResourceRequestAmount(c_resourceTypeVespene) == 0)) {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(EventPlayer()), libCOMI_gf_CC_CommanderVOLine(libCOMI_gf_ActiveCommanderForPlayer(EventPlayer()), libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOMineralsRequested), PlayerGroupSingle(libCOMI_gf_CC_PlayerAlly(EventPlayer())));
    }
    else if (true) {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(EventPlayer()), libCOMI_gf_CC_CommanderVOLine(libCOMI_gf_ActiveCommanderForPlayer(EventPlayer()), libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOResourcesRequested), PlayerGroupSingle(libCOMI_gf_CC_PlayerAlly(EventPlayer())));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_VOResourceRequest_Init () {
    libCOMI_gt_CM_VOResourceRequest = TriggerCreate("libCOMI_gt_CM_VOResourceRequest_Func");
    TriggerEnable(libCOMI_gt_CM_VOResourceRequest, false);
    TriggerAddEventResourceRequest(libCOMI_gt_CM_VOResourceRequest, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_VOUnitsLostCheck
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_VOUnitsLostCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed[libCOMI_gv_cCC_MAXPLAYERS + 1] lv_lastKnownArmySize;
    fixed[libCOMI_gv_cCC_MAXPLAYERS + 1] lv_highestArmySize;
    fixed lv_currentArmySize;
    int lv_indexPlayer;
    unit lv_indexUnit;
    fixed[libCOMI_gv_cCC_MAXPLAYERS + 1] lv_percentThreshold;

    // Automatic Variable Declarations
    playergroup auto6F85AF09_g;
    playergroup autoBA9689F6_g;
    unitgroup auto7D09EFD3_g;
    int auto7D09EFD3_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto6F85AF09_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto6F85AF09_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOMI_gf_ActiveCommanderForPlayer(lv_indexPlayer) == "Zagara")) {
            lv_percentThreshold[lv_indexPlayer] = 0.2;
        }
        else {
            lv_percentThreshold[lv_indexPlayer] = 0.4;
        }
    }
    while (true) {
        Wait(10.0, c_timeGame);
        if (true) {
            return true;
        }

        autoBA9689F6_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoBA9689F6_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            lv_currentArmySize = 0;
            auto7D09EFD3_g = UnitGroup(null, lv_indexPlayer, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
            auto7D09EFD3_u = UnitGroupCount(auto7D09EFD3_g, c_unitCountAll);
            for (;; auto7D09EFD3_u -= 1) {
                lv_indexUnit = UnitGroupUnitFromEnd(auto7D09EFD3_g, auto7D09EFD3_u);
                if (lv_indexUnit == null) { break; }
                if (((UnitTestState(lv_indexUnit, c_unitStateUsingSupply) == false) || ((libNtve_gf_UnitIsHidden(lv_indexUnit) == true) && (libNtve_gf_UnitIsInsideTransport(lv_indexUnit) == false)))) {
                    continue;
                }
                else if ((UnitFilterMatch(lv_indexUnit, lv_indexPlayer, UnitFilter((1 << c_targetFilterWorker), 0, 0, 0)) == true) && (UnitGetType(lv_indexUnit) != "ARC@SCVMengsk")) {
                    continue;
                }
                lv_currentArmySize += UnitGetPropertyFixed(lv_indexUnit, c_unitPropSuppliesUsed, c_unitPropCurrent);
            }
            if ((lv_currentArmySize > lv_highestArmySize[lv_indexPlayer])) {
                lv_highestArmySize[lv_indexPlayer] = lv_currentArmySize;
                continue;
            }

            if (((lv_lastKnownArmySize[lv_indexPlayer] - lv_currentArmySize) >= 10.0) && ((lv_currentArmySize / lv_highestArmySize[lv_indexPlayer]) <= lv_percentThreshold[lv_indexPlayer]) && ((lv_highestArmySize[lv_indexPlayer] - lv_currentArmySize) >= 20.0)) {
                libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(lv_indexPlayer), libCOMI_gf_CC_CommanderVOLine(libCOMI_gf_ActiveCommanderForPlayer(lv_indexPlayer), libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOArmyLost), PlayerGroupAll());
                Wait(60.0, c_timeGame);
                TriggerExecute(libCOMI_gt_CM_VOUnitsLostCheck, true, false);
                return true;
            }

            lv_lastKnownArmySize[lv_indexPlayer] = lv_currentArmySize;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_VOUnitsLostCheck_Init () {
    libCOMI_gt_CM_VOUnitsLostCheck = TriggerCreate("libCOMI_gt_CM_VOUnitsLostCheck_Func");
    TriggerEnable(libCOMI_gt_CM_VOUnitsLostCheck, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_VOEnemySpotted
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_VOEnemySpotted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enemyPlayer;
    int lv_userPlayer;
    unit lv_enemyUnit;
    unit lv_attackingUnit;
    unit lv_attackedUnit;
    int lv_attackingPlayer;
    int lv_attackedPlayer;

    // Automatic Variable Declarations
    string auto14B6B300_val;

    // Variable Initialization
    lv_attackingUnit = EventUnitTarget();
    lv_attackedUnit = EventUnit();
    lv_attackingPlayer = UnitGetOwner(lv_attackingUnit);
    lv_attackedPlayer = UnitGetOwner(lv_attackedUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), lv_attackedPlayer) == true) && ((PlayerGroupHasPlayer(libCOMI_gf_GetEnemyAIPlayers(), lv_attackingPlayer) == true) || (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyHumanPlayers(), lv_attackingPlayer) == true))) {
        lv_enemyPlayer = lv_attackingPlayer;
        lv_enemyUnit = lv_attackingUnit;
        lv_userPlayer = lv_attackedPlayer;
    }
    else if ((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), lv_attackingPlayer) == true) && ((PlayerGroupHasPlayer(libCOMI_gf_GetEnemyAIPlayers(), lv_attackedPlayer) == true) || (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyHumanPlayers(), lv_attackedPlayer) == true))) {
        lv_enemyPlayer = lv_attackedPlayer;
        lv_enemyUnit = lv_attackedUnit;
        lv_userPlayer = lv_attackingPlayer;
    }
    else if (true) {
        return true;
    }
    if (((libARRA_gf_GetUnitRace(lv_enemyUnit) == "Hybr") || (libARRA_gf_GetUnitRace(lv_enemyUnit) == "Neut"))) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto14B6B300_val = PlayerRace(lv_enemyPlayer);
    if (auto14B6B300_val == "ARC@Prot") {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(lv_userPlayer), libCOMI_gf_CC_CommanderVOLine(libCOMI_gf_ActiveCommanderForPlayer(lv_userPlayer), libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOEnemyIsProtoss), PlayerGroupAll());
    }
    else if (auto14B6B300_val == "ARC@Terr") {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(lv_userPlayer), libCOMI_gf_CC_CommanderVOLine(libCOMI_gf_ActiveCommanderForPlayer(lv_userPlayer), libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOEnemyIsTerran), PlayerGroupAll());
    }
    else if (auto14B6B300_val == "ARC@Zerg") {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(lv_userPlayer), libCOMI_gf_CC_CommanderVOLine(libCOMI_gf_ActiveCommanderForPlayer(lv_userPlayer), libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOEnemyIsZerg), PlayerGroupAll());
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_VOEnemySpotted_Init () {
    libCOMI_gt_CM_VOEnemySpotted = TriggerCreate("libCOMI_gt_CM_VOEnemySpotted_Func");
    TriggerEnable(libCOMI_gt_CM_VOEnemySpotted, false);
    TriggerAddEventUnitAttacked2(libCOMI_gt_CM_VOEnemySpotted, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_VOEnemyCloakedSpotted
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_VOEnemyCloakedSpotted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_userPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitFilterMatch(EventUnitTarget(), EventPlayer(), UnitFilter((1 << c_targetFilterCloaked), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) || (PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayersCopy(), UnitGetOwner(EventUnitTarget())) == true) || (libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnitTarget()), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == false) || (TriggerQueueIsEmpty() == false))) {
        return true;
    }

    lv_userPlayer = EventPlayer();
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "BeaconDetectPing", UnitGetPosition(EventUnitTarget()), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 10.0, 270.0);
    libCOMI_gf_SendMissionTransmission("CloakedUnitsSpotted", true, lv_userPlayer);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_VOEnemyCloakedSpotted_Init () {
    libCOMI_gt_CM_VOEnemyCloakedSpotted = TriggerCreate("libCOMI_gt_CM_VOEnemyCloakedSpotted_Func");
    TriggerEnable(libCOMI_gt_CM_VOEnemyCloakedSpotted, false);
    TriggerAddEventUnitAttacked2(libCOMI_gt_CM_VOEnemyCloakedSpotted, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TransmissionSend
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_TransmissionSend_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UserDataSetInt("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "PlayingNow", 1, 1);
    if ((libCOMI_gv_cM_TransmissionSource != -1) && (PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayersCopy(), libCOMI_gv_cM_TransmissionSource) == true)) {
        if (((libCOMI_gv_cM_TransmissionCurrentType == "AttackWave") || (libCOMI_gv_cM_TransmissionCurrentType == "CloakedUnitsSpotted"))) {
            ConversationDataSetListenerGender("acAttackWave", libCOMI_gf_CC_CommanderGender(libCOMI_gf_ActiveCommanderForPlayer(libCOMI_gf_CC_PlayerAlly(libCOMI_gv_cM_TransmissionSource))));
        }

        UserDataSetInt("Commanders", libCOMI_gf_ActiveCommanderForPlayer(libCOMI_gv_cM_TransmissionSource), "SendingTransmission", 1, 1);
    }
    else {
        if (((libCOMI_gv_cM_TransmissionCurrentType == "AttackWave") || (libCOMI_gv_cM_TransmissionCurrentType == "CloakedUnitsSpotted"))) {
            ConversationDataSetListenerGender("acAttackWave", c_genderDefault);
        }

    }
    libCOMI_gf_CM_TransmissionUpdateConvoPlayers(UserDataGetGameLink("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "Conversation", 1));
    ConversationDataRun(UserDataGetGameLink("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "Conversation", 1), libCOMI_gf_GetNonDefeatedPlayers(), c_conversationSkipNone, true);
    while (!((libCOMI_gf_CM_PlayerHasTransmission(1) == false) && (libCOMI_gf_CM_PlayerHasTransmission(2) == false))) {
        Wait(0.0625, c_timeGame);
    }
    if ((RandomInt(1, 100) <= UserDataGetInt("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "ResponseChance", 1))) {
        ConversationDataRun("acResponses", libCOMI_gf_GetNonDefeatedPlayers(), c_conversationSkipNone, true);
        while (!((libCOMI_gf_CM_PlayerHasTransmission(1) == false) && (libCOMI_gf_CM_PlayerHasTransmission(2) == false))) {
            Wait(0.0625, c_timeGame);
        }
    }

    UserDataSetInt("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "PlayingNow", 1, 0);
    libCOMI_gv_cM_TransmissionCurrentType = null;
    if ((libCOMI_gv_cM_TransmissionSource != -1) && (PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayersCopy(), libCOMI_gv_cM_TransmissionSource) == true)) {
        UserDataSetInt("Commanders", libCOMI_gf_ActiveCommanderForPlayer(libCOMI_gv_cM_TransmissionSource), "SendingTransmission", 1, 0);
    }

    libCOMI_gv_cM_TransmissionCount += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_TransmissionSend_Init () {
    libCOMI_gt_CM_TransmissionSend = TriggerCreate("libCOMI_gt_CM_TransmissionSend_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SendTransmissionCampaignTick
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SendTransmissionCampaignTick_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((libCOMI_gv_cM_SendTransmissionCampaignIndex == 0) && (libCOMI_gv_cM_SendTransmissionCampaignPlayingTick > 0)) {
            libCOMI_gv_cM_SendTransmissionCampaignPlayingTick -= 1;
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SendTransmissionCampaignTick_Init () {
    libCOMI_gt_CM_SendTransmissionCampaignTick = TriggerCreate("libCOMI_gt_CM_SendTransmissionCampaignTick_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CoopAI_AttackWavePingManager
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CoopAI_AttackWavePingManager_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pingGroupIter;
    int lv_attackWavePlayerIterPrimary;
    int lv_attackWavePingIterPrimary;
    unit lv_pingableUnitIter;
    bool lv_addedUnitToGroup;
    bool lv_foundWorthyUnit;

    // Automatic Variable Declarations
    const int autoFAE2A104_ae = libCOMI_gv_cMC_CoopAI_MaxPingCount;
    const int autoFAE2A104_ai = 1;
    const int auto57362279_ae = libCOMI_gv_cMC_CoopAI_MaxPingCount;
    const int auto57362279_ai = 1;
    unitgroup auto04F62776_g;
    int auto04F62776_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pingGroupIter = 0;
    for ( ; ( (autoFAE2A104_ai >= 0 && lv_pingGroupIter <= autoFAE2A104_ae) || (autoFAE2A104_ai < 0 && lv_pingGroupIter >= autoFAE2A104_ae) ) ; lv_pingGroupIter += autoFAE2A104_ai ) {
        UnitGroupClear(libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter]);
    }
    lv_pingGroupIter = 0;
    for ( ; ( (auto57362279_ai >= 0 && lv_pingGroupIter <= auto57362279_ae) || (auto57362279_ai < 0 && lv_pingGroupIter >= auto57362279_ae) ) ; lv_pingGroupIter += auto57362279_ai ) {
        lv_foundWorthyUnit = false;
        auto04F62776_g = libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter];
        auto04F62776_u = UnitGroupCount(auto04F62776_g, c_unitCountAll);
        for (;; auto04F62776_u -= 1) {
            lv_pingableUnitIter = UnitGroupUnitFromEnd(auto04F62776_g, auto04F62776_u);
            if (lv_pingableUnitIter == null) { break; }
            if ((libCOMI_gf_CM_CoopAI_PingWorthyUnit(lv_pingableUnitIter) == true)) {
                lv_foundWorthyUnit = true;
                break;
            }

        }
        if ((lv_foundWorthyUnit == true)) {
            if ((libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter] == c_invalidPingId)) {
                libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), libARRA_gf_GetPlayerStartPosition(UnitGetOwner(UnitGroupUnit(libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter], 1))), 270.0, "PingDiamond", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
                libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter] = PingLastCreated();
                PingSetTooltip(libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter], StringExternal("Param/Value/lib_COMI_488AE332"));
                PingSetScale(libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter], 0.3);
            }

            PingSetPosition(libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter], UnitGroupCenterOfGroup(libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter]));
        }
        else {
            PingDestroy(libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter]);
            libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter] = c_invalidPingId;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CoopAI_AttackWavePingManager_Init () {
    libCOMI_gt_CM_CoopAI_AttackWavePingManager = TriggerCreate("libCOMI_gt_CM_CoopAI_AttackWavePingManager_Func");
    TriggerEnable(libCOMI_gt_CM_CoopAI_AttackWavePingManager, false);
    TriggerAddEventTimePeriodic(libCOMI_gt_CM_CoopAI_AttackWavePingManager, 0.5625, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Ping Sound
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_VoidPingSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("UI_TerranPing", -1)), c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_VoidPingSound_Init () {
    libCOMI_gt_VoidPingSound = TriggerCreate("libCOMI_gt_VoidPingSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CinematicModeOn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CinematicModeOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CinematicModeOn_Init () {
    libCOMI_gt_CM_CinematicModeOn = TriggerCreate("libCOMI_gt_CM_CinematicModeOn_Func");
    TriggerAddEventGeneric(libCOMI_gt_CM_CinematicModeOn, "CinematicModeOn");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CinematicModeOff
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CinematicModeOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CinematicModeOff_Init () {
    libCOMI_gt_CM_CinematicModeOff = TriggerCreate("libCOMI_gt_CM_CinematicModeOff_Func");
    TriggerAddEventGeneric(libCOMI_gt_CM_CinematicModeOff, "CinematicModeOff");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignMissionIntroZoomIn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignMissionIntroZoomIn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_originalDistance;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto3DF840ED_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(true);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    CinematicFade(true, 1.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    auto3DF840ED_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto3DF840ED_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        lv_originalDistance = CameraGetDistance(lv_indexPlayer);
        CameraSetValue(lv_indexPlayer, c_cameraValueDistance, (lv_originalDistance+8.0), 0.0, -1, 10.0);
        CameraSetValue(lv_indexPlayer, c_cameraValueDistance, lv_originalDistance, 1.5, -1, 10.0);
    }
    Wait(1.5, c_timeGame);
    libCOMI_gf_CinematicModeCampaign(false, 1.0, false);
    UnitPauseAll(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignMissionIntroZoomIn_Init () {
    libCOMI_gt_CM_CampaignMissionIntroZoomIn = TriggerCreate("libCOMI_gt_CM_CampaignMissionIntroZoomIn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ResourcePickupAllyNew
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_ResourcePickupAllyNew_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minerals;
    int lv_gas;
    int lv_itAllyPlayer;
    int lv_itPickupPlayer;

    // Automatic Variable Declarations
    playergroup auto8B695647_g;

    // Variable Initialization
    lv_minerals = CatalogFieldValueGetAsInt(c_gameCatalogEffect, EventPlayerEffectUsed(), "Resources[Minerals]", c_playerAny);
    lv_gas = CatalogFieldValueGetAsInt(c_gameCatalogEffect, EventPlayerEffectUsed(), "Resources[Vespene]", c_playerAny);
    lv_itPickupPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    auto8B695647_g = libCOMI_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(lv_itPickupPlayer);
    lv_itAllyPlayer = -1;
    while (true) {
        lv_itAllyPlayer = PlayerGroupNextPlayer(auto8B695647_g, lv_itAllyPlayer);
        if (lv_itAllyPlayer < 0) { break; }
        if ((lv_itPickupPlayer != lv_itAllyPlayer)) {
            libCOMI_gf_ResourcePickupAlly(lv_itAllyPlayer, lv_minerals, lv_gas);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_ResourcePickupAllyNew_Init () {
    libCOMI_gt_ResourcePickupAllyNew = TriggerCreate("libCOMI_gt_ResourcePickupAllyNew_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "ARC@PickupMinerals50");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "ARC@PickupEnvelopeMinerals50");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "PickupMinerals100");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "ARC@PickupMinerals250");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "PickupPalletMinerals");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "PickupGas50");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "ARC@PickupEnvelopeGas50");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "PickupGas100");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "ARC@PickupGas200");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "PickupPalletGas");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "ARC@MutatorPickupGas50");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignUnitTeaching
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignUnitTeaching_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoD03D3C7E_g;
    int autoD03D3C7E_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoD03D3C7E_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoD03D3C7E_u = UnitGroupCount(autoD03D3C7E_g, c_unitCountAll);
    for (;; autoD03D3C7E_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoD03D3C7E_g, autoD03D3C7E_u);
        if (lv_indexUnit == null) { break; }
        if ((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), UnitGetOwner(lv_indexUnit)) == true)) {
            libCOMI_gf_CM_UseUnitNameAsUnitTip(lv_indexUnit);
            libCOMI_gf_CM_ApplyCampaignTeachingToUnit(lv_indexUnit);
        }

        if (((UnitFilterMatch(lv_indexUnit, 1, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true) || (UnitFilterMatch(lv_indexUnit, 1, UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            libCOMI_gf_CM_UseUnitNameAsUnitTip(lv_indexUnit);
        }

    }
    TriggerEnable(libCOMI_gt_CM_CampaignUnitCreated, true);
    TriggerEnable(libCOMI_gt_CM_CampaignUnitChangeOwner, true);
    TriggerEnable(libCOMI_gt_CM_CampaignUnitInfoUnitMorphes, true);
    TriggerSendEvent("Unit Teaching Initiailize");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignUnitTeaching_Init () {
    libCOMI_gt_CM_CampaignUnitTeaching = TriggerCreate("libCOMI_gt_CM_CampaignUnitTeaching_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignUnitCreated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignUnitCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayersCopy(), UnitGetOwner(EventUnitCreatedUnit())) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitCreatedUnit(), UnitGetOwner(EventUnitCreatedUnit()), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_UseUnitNameAsUnitTip(EventUnitCreatedUnit());
    libCOMI_gf_CM_ApplyCampaignTeachingToUnit(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignUnitCreated_Init () {
    libCOMI_gt_CM_CampaignUnitCreated = TriggerCreate("libCOMI_gt_CM_CampaignUnitCreated_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignUnitCreated, false);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_CampaignUnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignUnitChangeOwner
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignUnitChangeOwner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_UseUnitNameAsUnitTip(EventUnit());
    libCOMI_gf_CM_ApplyCampaignTeachingToUnit(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignUnitChangeOwner_Init () {
    libCOMI_gt_CM_CampaignUnitChangeOwner = TriggerCreate("libCOMI_gt_CM_CampaignUnitChangeOwner_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignUnitChangeOwner, false);
    TriggerAddEventUnitChangeOwner(libCOMI_gt_CM_CampaignUnitChangeOwner, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignUnitInfoUnitMorphes
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignUnitInfoUnitMorphes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_UseUnitNameAsUnitTip(EventUnit());
    libCOMI_gf_CM_ApplyCampaignTeachingToUnit(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignUnitInfoUnitMorphes_Init () {
    libCOMI_gt_CM_CampaignUnitInfoUnitMorphes = TriggerCreate("libCOMI_gt_CM_CampaignUnitInfoUnitMorphes_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignUnitInfoUnitMorphes, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Cooldown
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_Cooldown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_UT_Cooldown(EventPlayer());
    if ((PlayerGetAlliance(1, c_allianceIdControl, 2) == true)) {
        libCOMI_gf_UT_Cooldown(2);
    }

    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_Cooldown_Init () {
    libCOMI_gt_UT_Cooldown = TriggerCreate("libCOMI_gt_UT_Cooldown_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_Cooldown, c_playerAny, "-cdr", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Horde_Init
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_Horde_Init_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto00F46C53_g;
    int auto00F46C53_u;
    unit auto00F46C53_var;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_uT_Horde_Chance = StringToFixed(StringWord(EventChatMessage(false), 2));
    libCOMI_gv_horde_Owner_Player = PlayerGroupPlayer(PlayerGroupAlliance(c_playerGroupEnemy, EventPlayer()), 1);
    libCOMI_gv_horde_Target_Player = EventPlayer();
    auto00F46C53_g = UnitGroupAlliance(EventPlayer(), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    auto00F46C53_u = UnitGroupCount(auto00F46C53_g, c_unitCountAll);
    for (;; auto00F46C53_u -= 1) {
        auto00F46C53_var = UnitGroupUnitFromEnd(auto00F46C53_g, auto00F46C53_u);
        if (auto00F46C53_var == null) { break; }
        libCOMI_gf_UT_Horde_Multiply(auto00F46C53_var, libCOMI_gv_uT_Horde_Chance);
    }
    TextExpressionSetToken("Param/Expression/lib_COMI_A8B3022A", "A", IntToText(UnitGroupCount(libCOMI_gv_uT_Horde_UG, c_unitCountAlive)));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_A8B3022A"));
    TriggerEnable(libCOMI_gt_UT_Horde_UnitCreated, true);
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_Horde_Init_Init () {
    libCOMI_gt_UT_Horde_Init = TriggerCreate("libCOMI_gt_UT_Horde_Init_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_Horde_Init, c_playerAny, "-horde", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Horde_Remove
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_Horde_Remove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vAmount;
    int lv_vCreated;

    // Automatic Variable Declarations
    unitgroup auto7B429B4F_g;
    int auto7B429B4F_u;
    unit auto7B429B4F_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto7B429B4F_g = libCOMI_gv_uT_Horde_UG;
    auto7B429B4F_u = UnitGroupCount(auto7B429B4F_g, c_unitCountAll);
    for (;; auto7B429B4F_u -= 1) {
        auto7B429B4F_var = UnitGroupUnitFromEnd(auto7B429B4F_g, auto7B429B4F_u);
        if (auto7B429B4F_var == null) { break; }
        UnitRemove(auto7B429B4F_var);
        UnitGroupRemove(libCOMI_gv_uT_Horde_UG, auto7B429B4F_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_Horde_Remove_Init () {
    libCOMI_gt_UT_Horde_Remove = TriggerCreate("libCOMI_gt_UT_Horde_Remove_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_Horde_Remove, c_playerAny, "-remhorde", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Horde_Unit Created
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_Horde_UnitCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_vIndexPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(UnitGroupAlliance(libCOMI_gv_horde_Target_Player, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterWorker) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0), EventUnitCreatedUnit()) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(libCOMI_gv_uT_Horde_UG, EventUnitCreatedUnit()) == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ARC@Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ARC@InterceptorAiur"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ARC@Larva"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ARC@DehakaLarva"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ARC@KerriganInfestBroodling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ARC@Broodling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ARC@StukovInfestBroodling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ARC@BroodlingEscort"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_UT_Horde_Multiply(EventUnitCreatedUnit(), libCOMI_gv_uT_Horde_Chance);
    UnitGroupAddUnitGroup(libCOMI_gv_uT_Horde_UG_Wave, UnitLastCreatedGroup());
    TriggerExecute(libCOMI_gt_UT_Horde_SendWave, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_Horde_UnitCreated_Init () {
    libCOMI_gt_UT_Horde_UnitCreated = TriggerCreate("libCOMI_gt_UT_Horde_UnitCreated_Func");
    TriggerEnable(libCOMI_gt_UT_Horde_UnitCreated, false);
    TriggerAddEventUnitCreated(libCOMI_gt_UT_Horde_UnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Horde_SendWave
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_Horde_SendWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(5.0, c_timeAI);
    AIAttackWaveUseGroup(libCOMI_gv_horde_Owner_Player, libCOMI_gv_uT_Horde_UG_Wave);
    AIAttackWaveSetGatherPoint(libCOMI_gv_horde_Owner_Player, UnitGroupCenterOfGroup(libCOMI_gv_uT_Horde_UG_Wave));
    AIAttackWaveSetTargetPoint(libCOMI_gv_horde_Owner_Player, libARRA_gf_GetPlayerStartPosition(libCOMI_gv_horde_Target_Player));
    AIAttackWaveSend(libCOMI_gv_horde_Owner_Player, 1, false);
    UnitGroupClear(libCOMI_gv_uT_Horde_UG_Wave);
    Wait(2.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_Horde_SendWave_Init () {
    libCOMI_gt_UT_Horde_SendWave = TriggerCreate("libCOMI_gt_UT_Horde_SendWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_encomps
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_encomps_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_offsetBase = 50;
    int lv_offsetX;
    int lv_offsetY;
    const int lv_buttonSize = 54;
    int lv_iconSize;
    int lv_compositionCounter;
    int lv_iconCounter;
    string lv_enemyComp;
    color lv_color1;
    color lv_color2;
    color lv_color3;
    playergroup lv_vPG;

    // Automatic Variable Declarations
    fixed autoE084DC24_at;
    string auto4AE2C039_userType;
    int auto4AE2C039_i;
    const int auto9B7F0435_ae = 9;
    const int auto9B7F0435_ai = 1;
    int auto687C4102_val;
    int autoE95D26AB_val;

    // Variable Initialization
    lv_iconSize = (lv_buttonSize-4);
    lv_enemyComp = "BioMechStar";
    lv_color1 = Color(1.57, 55.69, 100.00);
    lv_color2 = Color(0.00, 80.39, 22.75);
    lv_color3 = Color(90.59, 33.73, 12.16);
    lv_vPG = PlayerGroupSingle(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameGetMissionTime() < 2.0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        autoE084DC24_at = 0;
        while (!((GameGetMissionTime() >= 2.0)) && autoE084DC24_at <= 5.0) {
            Wait(0.5, c_timeGame);
            autoE084DC24_at = autoE084DC24_at + 0.5;
        }
        TriggerEnable(TriggerGetCurrent(), true);
    }

    if ((DialogIsVisible(libCOMI_gv_uT_encompsDialogs, EventPlayer()) == true)) {
        DialogSetVisible(libCOMI_gv_uT_encompsDialogs, lv_vPG, false);
        libNtve_gf_HideGameUI(true, lv_vPG);
        return true;
    }

    if ((libCOMI_gv_uT_encompsDialogs != c_invalidDialogId)) {
        DialogSetVisible(libCOMI_gv_uT_encompsDialogs, lv_vPG, true);
        libNtve_gf_HideGameUI(false, lv_vPG);
        return true;
    }

    libNtve_gf_HideGameUI(false, lv_vPG);
    DialogCreate(1920, 1120, c_anchorCenter, 0, -10, false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), lv_vPG, true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libCOMI_gv_uT_encompsDialogs = DialogLastCreated();
    auto4AE2C039_userType = "XUT_encomps_CoopEnemyUnitsFormation";
    auto4AE2C039_i = 1;
    for ( ; auto4AE2C039_i <= UserDataInstanceCount(auto4AE2C039_userType) ; auto4AE2C039_i += 1 ) {
        lv_enemyComp = UserDataInstance(auto4AE2C039_userType, auto4AE2C039_i);
        lv_iconCounter = 1;
        for ( ; ( (auto9B7F0435_ai >= 0 && lv_iconCounter <= auto9B7F0435_ae) || (auto9B7F0435_ai < 0 && lv_iconCounter >= auto9B7F0435_ae) ) ; lv_iconCounter += auto9B7F0435_ai ) {
            if ((UserDataGetInt("XUT_encomps_CoopEnemyUnitsFormation", lv_enemyComp, "Units", lv_iconCounter) >= 1)) {
                lv_offsetX = (lv_offsetBase+lv_buttonSize*(lv_iconCounter - 1) - 10);
                lv_offsetY = (lv_offsetBase+lv_buttonSize*lv_compositionCounter);
                auto687C4102_val = UserDataGetInt("XUT_encomps_CoopEnemyUnitsFormation", lv_enemyComp, "Race", 1);
                if (auto687C4102_val == 1) {
                    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeButton, "UT_Button/StandardGlueButtonP");
                }
                else if (auto687C4102_val == 2) {
                    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeButton, "UT_Button/StandardGlueButtonT");
                }
                else if (auto687C4102_val == 3) {
                    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeButton, "UT_Button/StandardGlueButtonZ");
                }
                else {
                }
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_buttonSize, lv_buttonSize);
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lv_offsetX, lv_offsetY);
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 33.0);
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_iconSize, lv_iconSize, c_anchorTop, lv_offsetX, lv_offsetY, StringToText(""), UserDataGetImagePath("XUT_encomps_CoopEnemyUnits", UserDataInstance("XUT_encomps_CoopEnemyUnits", UserDataGetInt("XUT_encomps_CoopEnemyUnitsFormation", lv_enemyComp, "Units", lv_iconCounter)), "Unit", 1), c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "EnemyCompStyle", PlayerGroupAll());
                autoE95D26AB_val = UserDataGetInt("XUT_encomps_CoopEnemyUnitsFormation", lv_enemyComp, "Race", 1);
                if (autoE95D26AB_val == 1) {
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_color1, PlayerGroupAll());
                }
                else if (autoE95D26AB_val == 2) {
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_color2, PlayerGroupAll());
                }
                else if (autoE95D26AB_val == 3) {
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_color3, PlayerGroupAll());
                }
                else {
                }
            }
            else {
                break;
            }
        }
        lv_compositionCounter = (lv_compositionCounter+1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_encomps_Init () {
    libCOMI_gt_UT_encomps = TriggerCreate("libCOMI_gt_UT_encomps_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_encomps, c_playerAny, "-encomps", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Mastery
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_Mastery_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_v2String;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_v2String = StringWord(EventChatMessage(false), 2);

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_v2String == null)) {
        libCOMI_gv_uT_MasteryTargetPlayer = 1;
    }
    else {
        libCOMI_gv_uT_MasteryTargetPlayer = StringToInt(lv_v2String);
    }
    TriggerEnable(libCOMI_gt_UT_CommanderSwitched, true);
    libCOMI_gf_UT_MasteryChoiceCreateUpdate(libCOMI_gv_uT_MasteryTargetPlayer);
    DialogSetVisible(libCOMI_gv_uT_MasteryDialog, PlayerGroupSingle(EventPlayer()), true);
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_Mastery_Init () {
    libCOMI_gt_UT_Mastery = TriggerCreate("libCOMI_gt_UT_Mastery_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_Mastery, c_playerAny, "-mastery", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_MasteryButtonClicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_MasteryButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_uT_MasteryButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_UT_MasteryPointsUpdate(libCOMI_gv_uT_MasteryTargetPlayer);
    DialogSetVisible(libCOMI_gv_uT_MasteryDialog, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_MasteryButtonClicked_Init () {
    libCOMI_gt_UT_MasteryButtonClicked = TriggerCreate("libCOMI_gt_UT_MasteryButtonClicked_Func");
    TriggerEnable(libCOMI_gt_UT_MasteryButtonClicked, false);
    TriggerAddEventDialogControl(libCOMI_gt_UT_MasteryButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_CommanderSwitched
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_CommanderSwitched_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_commIndex;

    // Automatic Variable Declarations
    const int auto937433C1_ae = libCOMI_gv_mAX_COMMANDERCOUNT;
    const int auto937433C1_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_commIndex = 1;
    for ( ; ( (auto937433C1_ai >= 0 && lv_commIndex <= auto937433C1_ae) || (auto937433C1_ai < 0 && lv_commIndex >= auto937433C1_ae) ) ; lv_commIndex += auto937433C1_ai ) {
        if (true) {
            libCOMI_gf_UT_MasteryPointsUpdate(libCOMI_gv_uT_MasteryTargetPlayer);
            libCOMI_gf_UT_MasteryChoiceCreateUpdate(libCOMI_gv_uT_MasteryTargetPlayer);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_CommanderSwitched_Init () {
    libCOMI_gt_UT_CommanderSwitched = TriggerCreate("libCOMI_gt_UT_CommanderSwitched_Func");
    TriggerEnable(libCOMI_gt_UT_CommanderSwitched, false);
    TriggerAddEventDialogControl(libCOMI_gt_UT_CommanderSwitched, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Spawn Attack Wave
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_SpawnAttackWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vTech;
    int lv_vSize;
    fixed lv_vSupply;
    fixed lv_vVitals;
    int lv_vCost;

    // Automatic Variable Declarations
    string autoEBD9EF7A_val;
    string auto50EA72DD_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoEBD9EF7A_val = StringWord(EventChatMessage(false), 2);
    if (autoEBD9EF7A_val == "1") {
    }
    else if (autoEBD9EF7A_val == "2") {
    }
    else if (autoEBD9EF7A_val == "3") {
    }
    else if (autoEBD9EF7A_val == "4") {
    }
    else if (autoEBD9EF7A_val == "5") {
    }
    else if (autoEBD9EF7A_val == "6") {
    }
    else {
    }
    auto50EA72DD_val = StringWord(EventChatMessage(false), 3);
    if (auto50EA72DD_val == "1") {
    }
    else if (auto50EA72DD_val == "2") {
    }
    else if (auto50EA72DD_val == "3") {
    }
    else if (auto50EA72DD_val == "4") {
    }
    else if (auto50EA72DD_val == "5") {
    }
    else if (auto50EA72DD_val == "6") {
    }
    else {
    }
    if ((StringContains(EventChatMessage(false), "none", c_stringAnywhere, c_stringNoCase) == false)) {
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 30.0);
        TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_SpawnAttackWave_Init () {
    libCOMI_gt_UT_SpawnAttackWave = TriggerCreate("libCOMI_gt_UT_SpawnAttackWave_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_SpawnAttackWave, c_playerAny, "-aw", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_AttackWaveAttack
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_AttackWaveAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;
    unitgroup lv_vUG;

    // Automatic Variable Declarations
    const int auto7A797A3E_ae = 4;
    const int auto7A797A3E_ai = 1;

    // Variable Initialization
    lv_vUG = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((AITimeIsPaused() == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_98F3F3B8"));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_F7F415BF"));
        lv_vPlayer = 3;
        for ( ; ( (auto7A797A3E_ai >= 0 && lv_vPlayer <= auto7A797A3E_ae) || (auto7A797A3E_ai < 0 && lv_vPlayer >= auto7A797A3E_ae) ) ; lv_vPlayer += auto7A797A3E_ai ) {
            lv_vUG = UnitGroupFilterPlayer(libCOMI_gv_uT_LastAttackWave, lv_vPlayer, 0);
            AIAttackWaveUseGroup(lv_vPlayer, lv_vUG);
            AIAttackWaveSetGatherPoint(lv_vPlayer, UnitGroupCenterOfGroup(lv_vUG));
            AIAttackWaveSetTargetPoint(lv_vPlayer, libARRA_gf_GetPlayerStartPosition(EventPlayer()));
            AIAttackWaveSend(lv_vPlayer, 0, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_AttackWaveAttack_Init () {
    libCOMI_gt_UT_AttackWaveAttack = TriggerCreate("libCOMI_gt_UT_AttackWaveAttack_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_AttackWaveAttack, c_playerAny, "-attack", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Remove Wave
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_RemoveWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto24B00911_g;
    int auto24B00911_u;
    unit auto24B00911_var;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto24B00911_g = libCOMI_gv_uT_LastAttackWave;
    auto24B00911_u = UnitGroupCount(auto24B00911_g, c_unitCountAll);
    for (;; auto24B00911_u -= 1) {
        auto24B00911_var = UnitGroupUnitFromEnd(auto24B00911_g, auto24B00911_u);
        if (auto24B00911_var == null) { break; }
        UnitRemove(auto24B00911_var);
        UnitGroupRemove(libCOMI_gv_uT_LastAttackWave, auto24B00911_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_RemoveWave_Init () {
    libCOMI_gt_UT_RemoveWave = TriggerCreate("libCOMI_gt_UT_RemoveWave_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_RemoveWave, c_playerAny, "-remw", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_NukeTest
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_NukeTest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnLocation;
    region lv_spawnRegion;
    int lv_safetyInt;
    fixed lv_waitTime;

    // Automatic Variable Declarations
    const int auto39AB56E2_n = 20000;
    int auto39AB56E2_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawnRegion = RegionPlayableMap();
    if ((GameIsOnline() == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_280C5318"));
    }

    for (auto39AB56E2_i = 1; auto39AB56E2_i <= auto39AB56E2_n; auto39AB56E2_i += 1) {
        lv_spawnLocation = RegionRandomPoint(lv_spawnRegion);
        if (((PathingType(lv_spawnLocation) != c_pathingGround) || (!(libARRA_gf_AnyUnitOfPlayerGroupInRegion(libCOMI_gf_GetAlliedCommandersPlayers(), RegionCircle(lv_spawnLocation, 50.0)))))) {
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_NukeTest_Init () {
    libCOMI_gt_UT_NukeTest = TriggerCreate("libCOMI_gt_UT_NukeTest_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_NukeTest, c_playerAny, "-nuketest", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_BileLauncherBombardment
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AF_BileLauncherBombardment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeAbilityIsAllowed(EventPlayer(), AbilityCommand("ARC@AdvancedBombardment", 0)) == false)) {
        TechTreeAbilityAllow(EventPlayer(), AbilityCommand("ARC@AdvancedBombardment", 0), true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_FCBCAB0F"));
    }
    else {
        TechTreeAbilityAllow(EventPlayer(), AbilityCommand("ARC@AdvancedBombardment", 0), false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_1F09A68D"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AF_BileLauncherBombardment_Init () {
    libCOMI_gt_AF_BileLauncherBombardment = TriggerCreate("libCOMI_gt_AF_BileLauncherBombardment_Func");
    TriggerAddEventChatMessage(libCOMI_gt_AF_BileLauncherBombardment, c_playerAny, "-bile", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle AI Debug Messages
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_ToggleAIDebugMessages_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_showAIDebugging == true)) {
        libCOMI_gv_showAIDebugging = false;
    }
    else {
        libCOMI_gv_showAIDebugging = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_ToggleAIDebugMessages_Init () {
    libCOMI_gt_ToggleAIDebugMessages = TriggerCreate("libCOMI_gt_ToggleAIDebugMessages_Func");
    TriggerAddEventChatMessage(libCOMI_gt_ToggleAIDebugMessages, c_playerAny, "togaidebug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CoopAI_InitAIDebugging
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CoopAI_InitAIDebugging_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugSetTypeFile(3, "CoopAIDebug.txt");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CoopAI_InitAIDebugging_Init () {
    libCOMI_gt_CM_CoopAI_InitAIDebugging = TriggerCreate("libCOMI_gt_CM_CoopAI_InitAIDebugging_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CM_CoopAI_InitAIDebugging, c_playerAny, "aidebug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_DebugMovieCaptureModeToggle
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_DebugMovieCaptureModeToggle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cU_DebugMovieCaptureMode = !(libCOMI_gv_cU_DebugMovieCaptureMode);
    if ((libCOMI_gv_cU_DebugMovieCaptureMode == true)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_8E643243"), true);
        TriggerExecute(libCOMI_gt_CU_DebugMovieCaptureModeSuppressCC, true, false);
        TriggerExecute(libCOMI_gt_CU_DebugMovieCaptureModeSupressUnits, true, false);
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_3AA59240"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_DebugMovieCaptureModeToggle_Init () {
    libCOMI_gt_CU_DebugMovieCaptureModeToggle = TriggerCreate("libCOMI_gt_CU_DebugMovieCaptureModeToggle_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CU_DebugMovieCaptureModeToggle, c_playerAny, "-capturemode", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_DebugMutatorSelect
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_DebugMutatorSelect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool[101] lv_mutatorChoices;
    int lv_mutatorIndex;

    // Automatic Variable Declarations
    const int autoBD5619AB_ae = 100;
    const int autoBD5619AB_ai = 1;
    const int auto95E02179_ae = 100;
    const int auto95E02179_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mutatorIndex = 1;
    for ( ; ( (autoBD5619AB_ai >= 0 && lv_mutatorIndex <= autoBD5619AB_ae) || (autoBD5619AB_ai < 0 && lv_mutatorIndex >= autoBD5619AB_ae) ) ; lv_mutatorIndex += autoBD5619AB_ai ) {
    }
    while (!((true))) {
        Wait(0.5, c_timeGame);
    }
    lv_mutatorIndex = 1;
    for ( ; ( (auto95E02179_ai >= 0 && lv_mutatorIndex <= auto95E02179_ae) || (auto95E02179_ai < 0 && lv_mutatorIndex >= auto95E02179_ae) ) ; lv_mutatorIndex += auto95E02179_ai ) {
        if (true) {
            TriggerSendEvent(("Mutator " + (UserDataInstance("Mutators", lv_mutatorIndex)) + " Initialize"));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_DebugMutatorSelect_Init () {
    libCOMI_gt_CU_DebugMutatorSelect = TriggerCreate("libCOMI_gt_CU_DebugMutatorSelect_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CU_DebugMutatorSelect, c_playerAny, "mutsel", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_DebugRandomMutationSelect
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_DebugRandomMutationSelect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_cU_CommanderSelect_RefCount == 0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_099C8D0A"), true);
    }

    if ((EventPlayer() != 1)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_EE667A8C"), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_DebugRandomMutationSelect_Init () {
    libCOMI_gt_CU_DebugRandomMutationSelect = TriggerCreate("libCOMI_gt_CU_DebugRandomMutationSelect_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CU_DebugRandomMutationSelect, c_playerAny, "randommutation", true);
    TriggerAddEventChatMessage(libCOMI_gt_CU_DebugRandomMutationSelect, c_playerAny, "randmut", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_DebugCinMode
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_DebugCinMode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto318A2942_val;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto318A2942_val = StringWord(EventChatMessage(false), 2);
    if (auto318A2942_val == "1") {
        libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
    }
    else if (auto318A2942_val == "0") {
        libCOMI_gf_CinematicModeCampaign(false, c_transitionDurationDefault, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_DebugCinMode_Init () {
    libCOMI_gt_CU_DebugCinMode = TriggerCreate("libCOMI_gt_CU_DebugCinMode_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CU_DebugCinMode, c_playerAny, "-cinmode", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_DebugScreenmode
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_DebugScreenmode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto8ABE455D_val;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8ABE455D_val = StringWord(EventChatMessage(false), 2);
    if (auto8ABE455D_val == "full") {
        libCOMI_gf_SetScreenModeCoop(c_uiModeFullscreen, c_transitionDurationDefault, EventPlayer());
    }
    else if (auto8ABE455D_val == "normal") {
        libCOMI_gf_SetScreenModeCoop(c_uiModeConsole, c_transitionDurationDefault, EventPlayer());
    }
    else if (auto8ABE455D_val == "letter") {
        libCOMI_gf_SetScreenModeCoop(c_uiModeLetterboxed, c_transitionDurationDefault, EventPlayer());
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_DebugScreenmode_Init () {
    libCOMI_gt_CU_DebugScreenmode = TriggerCreate("libCOMI_gt_CU_DebugScreenmode_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CU_DebugScreenmode, c_playerAny, "-screenmode", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_DebugTogSoA
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_DebugTogSoA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_cU_GPVisible[EventPlayer()] == false)) {
        libCOMI_gf_CU_GPShowHide(true, EventPlayer(), c_transitionDurationDefault);
    }
    else {
        libCOMI_gf_CU_GPShowHide(false, EventPlayer(), c_transitionDurationDefault);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_DebugTogSoA_Init () {
    libCOMI_gt_CU_DebugTogSoA = TriggerCreate("libCOMI_gt_CU_DebugTogSoA_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CU_DebugTogSoA, c_playerAny, "-togsoa", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugTargetSpawnersSet
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DebugTargetSpawnersSet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_parameter;

    // Automatic Variable Declarations
    string auto2C90CD67_val;
    playergroup autoE85E0ABA_g;
    int autoE85E0ABA_var;

    // Variable Initialization
    lv_parameter = "";

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_parameter = StringWord(EventChatMessage(false), 2);
    lv_parameter = StringCase(lv_parameter, false);
    auto2C90CD67_val = lv_parameter;
    if (auto2C90CD67_val == "on") {
        libCOMI_gv_cM_DebugAITargetSpawners = true;
    }
    else if (auto2C90CD67_val == "off") {
        libCOMI_gv_cM_DebugAITargetSpawners = false;
    }
    else if (auto2C90CD67_val == "random") {
        if ((RandomInt(0, 1) == 1)) {
            libCOMI_gv_cM_DebugAITargetSpawners = true;
        }
        else {
            libCOMI_gv_cM_DebugAITargetSpawners = false;
        }
    }
    else {
        return true;
    }
    autoE85E0ABA_g = PlayerGroupAll();
    autoE85E0ABA_var = -1;
    while (true) {
        autoE85E0ABA_var = PlayerGroupNextPlayer(autoE85E0ABA_g, autoE85E0ABA_var);
        if (autoE85E0ABA_var < 0) { break; }
        AISetDifficulty(autoE85E0ABA_var, c_diffTargetSpawners, libCOMI_gv_cM_DebugAITargetSpawners);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DebugTargetSpawnersSet_Init () {
    libCOMI_gt_CM_DebugTargetSpawnersSet = TriggerCreate("libCOMI_gt_CM_DebugTargetSpawnersSet_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CM_DebugTargetSpawnersSet, c_playerAny, "-TargetSpawners", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugSelectCommanders
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CT_DebugSelectCommanders_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_LoadCoopMission("COOP_Placeholder", libCOMI_gt_UT_StartTrigger);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CT_DebugSelectCommanders_Init () {
    libCOMI_gt_CT_DebugSelectCommanders = TriggerCreate("libCOMI_gt_CT_DebugSelectCommanders_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CT_DebugSelectCommanders, c_playerAny, "select commanders", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VU_Drop
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_SimpleDropAttackExample2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto4B2F174C_g;
    int auto4B2F174C_u;
    int autoC2ED8588_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4B2F174C_g = UnitGroup(null, c_playerAny, RegionCircle(RegionGetCenter(RegionPlayableMap()), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4B2F174C_u = UnitGroupCount(auto4B2F174C_g, c_unitCountAll);
    for (;; auto4B2F174C_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto4B2F174C_g, auto4B2F174C_u);
        if (lv_unit == null) { break; }
        UnitKill(lv_unit);
    }
    autoC2ED8588_val = StringToInt(StringWord(EventChatMessage(false), 2));
    if (autoC2ED8588_val == 1) {
    }
    else if (autoC2ED8588_val == 2) {
    }
    else if (autoC2ED8588_val == 3) {
    }
    else if (autoC2ED8588_val == 4) {
    }
    else if (autoC2ED8588_val == 5) {
    }
    else if (autoC2ED8588_val == 6) {
    }
    else if (autoC2ED8588_val == 7) {
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_SimpleDropAttackExample2_Init () {
    libCOMI_gt_SimpleDropAttackExample2 = TriggerCreate("libCOMI_gt_SimpleDropAttackExample2_Func");
    TriggerAddEventChatMessage(libCOMI_gt_SimpleDropAttackExample2, c_playerAny, "-drop", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugVictoryS
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DebugVictoryS_Func (bool testConds, bool runActions) {
    // Variable Declarations
    trigger lv_cineTrigger;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueClear(c_triggerQueueKill);
    TransmissionClearAll();
    libCOMI_gf_HideCampaignTransmissionPortrait();
    while (!(true)) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueClear(c_triggerQueueKill);
    lv_cineTrigger = TriggerCreate("gt_VictorySequence_Func");
    TriggerExecute(lv_cineTrigger, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DebugVictoryS_Init () {
    libCOMI_gt_CM_DebugVictoryS = TriggerCreate("libCOMI_gt_CM_DebugVictoryS_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CM_DebugVictoryS, c_playerAny, "VICTORYS", true);
    TriggerAddEventChatMessage(libCOMI_gt_CM_DebugVictoryS, c_playerAny, "VICTORYSEQUENCE", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignMissionPerfLog
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignMissionPerfLog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeReal);
        PerfTestGetFPS();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignMissionPerfLog_Init () {
    libCOMI_gt_CM_CampaignMissionPerfLog = TriggerCreate("libCOMI_gt_CM_CampaignMissionPerfLog_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CM_CampaignMissionPerfLog, c_playerAny, "logperf", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DebugMutatorSelect
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_DebugMutatorSelect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool[101] lv_mutatorChoices;
    int lv_mutatorIndex;

    // Automatic Variable Declarations
    const int auto352EA358_ae = 100;
    const int auto352EA358_ai = 1;
    const int auto3A1EE682_ae = 100;
    const int auto3A1EE682_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_UT_Cheat();
    lv_mutatorIndex = 1;
    for ( ; ( (auto352EA358_ai >= 0 && lv_mutatorIndex <= auto352EA358_ae) || (auto352EA358_ai < 0 && lv_mutatorIndex >= auto352EA358_ae) ) ; lv_mutatorIndex += auto352EA358_ai ) {
    }
    while (!((true))) {
        Wait(0.5, c_timeGame);
    }
    lv_mutatorIndex = 1;
    for ( ; ( (auto3A1EE682_ai >= 0 && lv_mutatorIndex <= auto3A1EE682_ae) || (auto3A1EE682_ai < 0 && lv_mutatorIndex >= auto3A1EE682_ae) ) ; lv_mutatorIndex += auto3A1EE682_ai ) {
        if (true) {
            TriggerSendEvent(("Mutator " + (UserDataInstance("Mutators", lv_mutatorIndex)) + " Initialize"));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_DebugMutatorSelect_Init () {
    libCOMI_gt_UT_DebugMutatorSelect = TriggerCreate("libCOMI_gt_UT_DebugMutatorSelect_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_DebugMutatorSelect, c_playerAny, "-mutsel", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Share Control
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_ShareControl_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetAlliance(2, c_allianceIdSpend, 1) == true)) {
        libNtve_gf_SetAlliance(1, 2, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_57E89B93"));
    }
    else {
        libNtve_gf_SetAlliance(1, 2, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_B775FCC6"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_ShareControl_Init () {
    libCOMI_gt_UT_ShareControl = TriggerCreate("libCOMI_gt_UT_ShareControl_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_ShareControl, c_playerAny, "-share", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_AllySupply
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_AllySupply_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/AllySupplyPanel");
    if ((DialogControlIsVisible(EventDialogControl(), EventPlayer()) == false)) {
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(EventPlayer()), true);
    }
    else {
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_AllySupply_Init () {
    libCOMI_gt_UT_AllySupply = TriggerCreate("libCOMI_gt_UT_AllySupply_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_AllySupply, c_playerAny, "-allysupply", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Unlock
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_Unlock_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, true);
    CameraLockInput(EventPlayer(), false);
    UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayer()), c_localSelectionTypeUnknown, true);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_Unlock_Init () {
    libCOMI_gt_UT_Unlock = TriggerCreate("libCOMI_gt_UT_Unlock_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_Unlock, c_playerAny, "-unlock", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Trigdebug
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_Trigdebug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugWindowOpen(true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_7D8527FB"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_Trigdebug_Init () {
    libCOMI_gt_UT_Trigdebug = TriggerCreate("libCOMI_gt_UT_Trigdebug_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_Trigdebug, c_playerAny, "-trigdebug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Ally
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_Ally_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;
    int lv_b;

    // Automatic Variable Declarations
    playergroup autoD0721955_g;
    playergroup autoFCDB2F3D_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD0721955_g = libCOMI_gf_GetAlliedCommandersPlayers();
    lv_a = -1;
    while (true) {
        lv_a = PlayerGroupNextPlayer(autoD0721955_g, lv_a);
        if (lv_a < 0) { break; }
        autoFCDB2F3D_g = libCOMI_gf_GetAlliedCommandersPlayers();
        lv_b = -1;
        while (true) {
            lv_b = PlayerGroupNextPlayer(autoFCDB2F3D_g, lv_b);
            if (lv_b < 0) { break; }
            if ((lv_a == lv_b)) {
                continue;
            }

            if ((PlayerGetAlliance(lv_a, c_allianceIdControl, lv_b) == false)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_90CDBC78"));
                PlayerSetAlliance(lv_b, c_allianceIdControl, lv_a, true);
                PlayerSetAlliance(lv_a, c_allianceIdControl, lv_b, true);
                PlayerSetAlliance(lv_b, c_allianceIdPushable, lv_a, true);
                PlayerSetAlliance(lv_a, c_allianceIdPushable, lv_b, true);
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_09AE04FD"));
                PlayerSetAlliance(lv_b, c_allianceIdControl, lv_a, false);
                PlayerSetAlliance(lv_a, c_allianceIdControl, lv_b, false);
                PlayerSetAlliance(lv_b, c_allianceIdPushable, lv_a, false);
                PlayerSetAlliance(lv_a, c_allianceIdPushable, lv_b, false);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_Ally_Init () {
    libCOMI_gt_UT_Ally = TriggerCreate("libCOMI_gt_UT_Ally_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_Ally, c_playerAny, "-ally", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_PvP
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_PvP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_PlayerIsEnemy(1, 2, libNtve_ge_PlayerRelation_Enemy) == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_88EFB3BF"));
        if (((PlayerGetAlliance(2, c_allianceIdControl, 1) == true) || (PlayerGetAlliance(3, c_allianceIdControl, EventPlayer()) == true))) {
            libNtve_gf_SetAlliance(1, 2, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
            PlayerSetAlliance(2, c_allianceIdControl, 1, true);
            PlayerSetAlliance(1, c_allianceIdControl, 2, true);
            PlayerSetAlliance(2, c_allianceIdSpend, 1, true);
            PlayerSetAlliance(1, c_allianceIdSpend, 2, true);
        }
        else {
            libNtve_gf_SetAlliance(1, 2, libNtve_ge_AllianceSetting_Enemy);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_9B30526B"));
        if ((PlayerGetAlliance(2, c_allianceIdControl, 1) == true)) {
            libNtve_gf_SetAlliance(1, 2, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
        }
        else {
            libNtve_gf_SetAlliance(1, 2, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_PvP_Init () {
    libCOMI_gt_UT_PvP = TriggerCreate("libCOMI_gt_UT_PvP_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_PvP, c_playerAny, "-pvp", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_DebugMovieCaptureModeSuppressCC
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_DebugMovieCaptureModeSuppressCC_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_commandPanel;
    int lv_tooltipAnchor;
    int[17] lv_commandButtons;
    int lv_indexPlayer;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int autoDF3CE1DC_ae = 14;
    const int autoDF3CE1DC_ai = 1;
    const int auto1C1CB097_ae = 14;
    const int auto1C1CB097_ai = 1;
    const int autoD5510AEA_ae = 4;
    const int autoD5510AEA_ai = 1;
    playergroup autoDA2D7F69_g;

    // Variable Initialization
    lv_commandPanel = c_invalidDialogControlId;
    lv_tooltipAnchor = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        lv_commandButtons[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/CommandPanel");
    lv_commandPanel = DialogControlLastCreated();
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeTooltip);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1, 1);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, -100, -100);
    lv_tooltipAnchor = DialogControlLastCreated();
    lv_buttonIndex = 0;
    for ( ; ( (autoDF3CE1DC_ai >= 0 && lv_buttonIndex <= autoDF3CE1DC_ae) || (autoDF3CE1DC_ai < 0 && lv_buttonIndex >= autoDF3CE1DC_ae) ) ; lv_buttonIndex += autoDF3CE1DC_ai ) {
        if ((lv_buttonIndex < 10)) {
            DialogControlHookup(lv_commandPanel, c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex));
        }
        else {
            DialogControlHookup(lv_commandPanel, c_triggerControlTypeButton, "CommandButton" + IntToString(lv_buttonIndex));
        }
        lv_commandButtons[lv_buttonIndex] = DialogControlLastCreated();
    }
    while ((libCOMI_gv_cU_DebugMovieCaptureMode == true)) {
        lv_buttonIndex = 0;
        for ( ; ( (auto1C1CB097_ai >= 0 && lv_buttonIndex <= auto1C1CB097_ae) || (auto1C1CB097_ai < 0 && lv_buttonIndex >= auto1C1CB097_ae) ) ; lv_buttonIndex += auto1C1CB097_ai ) {
            libNtve_gf_SetDialogItemCustomTooltip(lv_commandButtons[lv_buttonIndex], lv_tooltipAnchor, PlayerGroupAll());
        }
        lv_buttonIndex = 1;
        for ( ; ( (autoD5510AEA_ai >= 0 && lv_buttonIndex <= autoD5510AEA_ae) || (autoD5510AEA_ai < 0 && lv_buttonIndex >= autoD5510AEA_ae) ) ; lv_buttonIndex += autoD5510AEA_ai ) {
            autoDA2D7F69_g = libCOMI_gf_HumanPlayers();
            lv_indexPlayer = -1;
            while (true) {
                lv_indexPlayer = PlayerGroupNextPlayer(autoDA2D7F69_g, lv_indexPlayer);
                if (lv_indexPlayer < 0) { break; }
                if ((libCOMI_gv_cU_GPCmdButtons[lv_buttonIndex][lv_indexPlayer] != c_invalidDialogControlId)) {
                    libNtve_gf_SetDialogItemCustomTooltip(libCOMI_gv_cU_GPCmdButtons[lv_buttonIndex][lv_indexPlayer], lv_tooltipAnchor, PlayerGroupAll());
                }

            }
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_DebugMovieCaptureModeSuppressCC_Init () {
    libCOMI_gt_CU_DebugMovieCaptureModeSuppressCC = TriggerCreate("libCOMI_gt_CU_DebugMovieCaptureModeSuppressCC_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_DebugMovieCaptureModeSupressUnits
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_DebugMovieCaptureModeSupressUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto4C54D223_g;
    int auto4C54D223_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto4C54D223_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto4C54D223_u = UnitGroupCount(auto4C54D223_g, c_unitCountAll);
    for (;; auto4C54D223_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto4C54D223_g, auto4C54D223_u);
        if (lv_indexUnit == null) { break; }
        UnitSetState(lv_indexUnit, c_unitStateTooltipable, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_DebugMovieCaptureModeSupressUnits_Init () {
    libCOMI_gt_CU_DebugMovieCaptureModeSupressUnits = TriggerCreate("libCOMI_gt_CU_DebugMovieCaptureModeSupressUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_StartTrigger
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_StartTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_StartTrigger_Init () {
    libCOMI_gt_UT_StartTrigger = TriggerCreate("libCOMI_gt_UT_StartTrigger_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_-sbank
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_sbank_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_UT_Bank_SaveBank(EventPlayer(), StringWord(EventChatMessage(false), 2), libCOMI_gv_uT_Bank_DefaultBankName);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_A9DD11EC"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_sbank_Init () {
    libCOMI_gt_UT_sbank = TriggerCreate("libCOMI_gt_UT_sbank_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_sbank, c_playerAny, "-sbank", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_-rbank
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_rbank_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_vPG;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vPG = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 3) == "")) {
        lv_vPG = PlayerGroupAll();
    }
    else {
        lv_vPG = PlayerGroupSingle(StringToInt(StringWord(EventChatMessage(false), 3)));
    }
    libCOMI_gf_UT_Bank_RestoreBank(EventPlayer(), StringWord(EventChatMessage(false), 2), lv_vPG, libCOMI_gv_uT_Bank_DefaultBankName);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_rbank_Init () {
    libCOMI_gt_UT_rbank = TriggerCreate("libCOMI_gt_UT_rbank_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_rbank, c_playerAny, "-rbank", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Refill Init
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_RefillInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    libCOMI_gf_UT_Bank_SaveBank(1, libCOMI_gv_uT_Bank_RefillSectionName, libCOMI_gv_uT_Bank_DefaultBankName);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_RefillInit_Init () {
    libCOMI_gt_UT_RefillInit = TriggerCreate("libCOMI_gt_UT_RefillInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Refill
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_Refill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_UT_Bank_RestoreBank(1, libCOMI_gv_uT_Bank_RefillSectionName, libCOMI_gf_GetEnemyPlayers(), libCOMI_gv_uT_Bank_DefaultBankName);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_Refill_Init () {
    libCOMI_gt_UT_Refill = TriggerCreate("libCOMI_gt_UT_Refill_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_Refill, c_playerAny, "-refill", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_UI
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_UI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_vShowHide;
    playergroup lv_vPGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vShowHide = true;
    lv_vPGroup = PlayerGroupSingle(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libCOMI_gt_UT_UI_CtrlH) == false)) {
        TriggerEnable(libCOMI_gt_UT_UI_CtrlH, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_1E3289C5"));
    }
    else {
        TriggerEnable(libCOMI_gt_UT_UI_CtrlH, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_A4D26979"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_UI_Init () {
    libCOMI_gt_UT_UI = TriggerCreate("libCOMI_gt_UT_UI_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_UI, c_playerAny, "-uicoop", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_UI_Ctrl+H
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_UI_CtrlH_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_vShowHide;
    playergroup lv_vPGroup;

    // Automatic Variable Declarations
    bool autoCF3DDC40_val;

    // Variable Initialization
    lv_vShowHide = true;
    lv_vPGroup = PlayerGroupSingle(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoCF3DDC40_val = PlayerGroupHasPlayer(libARRA_gv_uT_UI_Hidden, EventPlayer());
    if (autoCF3DDC40_val == false) {
        PlayerGroupAdd(libARRA_gv_uT_UI_Hidden, EventPlayer());
        libCOMI_gf_CU_GPVisibilitySet(false, EventPlayer(), 1.0);
        DialogControlSetVisible(libCOMI_gv_cU_GPPanel[EventPlayer()], lv_vPGroup, false);
        lv_vShowHide = false;
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer");
        DialogControlSetPosition(DialogControlLastCreated(), lv_vPGroup, c_anchorTopLeft, 0, -3000);
    }
    else if (autoCF3DDC40_val == true) {
        PlayerGroupRemove(libARRA_gv_uT_UI_Hidden, EventPlayer());
        libCOMI_gf_CU_GPVisibilitySet(true, EventPlayer(), 1.0);
        Wait(1.0, c_timeReal);
        DialogControlSetVisible(libCOMI_gv_cU_GPPanel[EventPlayer()], lv_vPGroup, true);
        lv_vShowHide = true;
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer");
        DialogControlSetPosition(DialogControlLastCreated(), lv_vPGroup, c_anchorTopLeft, 0, 0);
    }
    else {
    }
    UISetFrameVisible(lv_vPGroup, c_syncFrameTypeConsolePanel, lv_vShowHide);
    UISetFrameVisible(lv_vPGroup, c_syncFrameTypeSupply, lv_vShowHide);
    UISetFrameVisible(lv_vPGroup, c_syncFrameTypeMenuBar, lv_vShowHide);
    UISetFrameVisible(lv_vPGroup, c_syncFrameTypeResourcePanel, lv_vShowHide);
    UISetFrameVisible(lv_vPGroup, c_syncFrameTypeObjectivePanel, lv_vShowHide);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_UI_CtrlH_Init () {
    libCOMI_gt_UT_UI_CtrlH = TriggerCreate("libCOMI_gt_UT_UI_CtrlH_Func");
    TriggerEnable(libCOMI_gt_UT_UI_CtrlH, false);
    TriggerAddEventKeyPressed(libCOMI_gt_UT_UI_CtrlH, c_playerAny, c_keyH, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_UnitDeath 8
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_MM_UnitDeath8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_UT_RemoveUnitInfo(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_MM_UnitDeath8_Init () {
    libCOMI_gt_MM_UnitDeath8 = TriggerCreate("libCOMI_gt_MM_UnitDeath8_Func");
    TriggerAddEventUnitDied(libCOMI_gt_MM_UnitDeath8, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_UnitRemoved Fix 2
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_MM_UnitRemovedFix2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_UT_RemoveUnitInfo(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_MM_UnitRemovedFix2_Init () {
    libCOMI_gt_MM_UnitRemovedFix2 = TriggerCreate("libCOMI_gt_MM_UnitRemovedFix2_Func");
    TriggerAddEventUnitRemoved(libCOMI_gt_MM_UnitRemovedFix2, null);
}

void libCOMI_InitTriggers () {
    libCOMI_gt_DefaultMapInitializeTrigger_Init();
    libCOMI_gt_DefaultGameStartTrigger_Init();
    libCOMI_gt_InitialExploration_Init();
    libCOMI_gt_CM_CampaignMissionInitialize_Init();
    libCOMI_gt_CM_CampaignMissionInitialize2_Init();
    libCOMI_gt_CheckStartingResources_Init();
    libCOMI_gt_CheckStartingSupplies_Init();
    libCOMI_gt_SuppliesMaxUpgrades_Init();
    libCOMI_gt_SuppliesMadeUpgrades_Init();
    libCOMI_gt_CC_SharedUpgradesRecheck_Init();
    libCOMI_gt_CC_PrestigeUpgradeSupplement_Init();
    libCOMI_gt_SkinUpgrades_Init();
    libCOMI_gt_Autocasting_Init();
    libCOMI_gt_setobserver_Init();
    libCOMI_gt_AttackFastBuffHack_Init();
    libCOMI_gt_DmgandAttackSpeedInheritNew_Init();
    libCOMI_gt_DmgandAttackSpeedInheritExisting_Init();
    libCOMI_gt_CM_CargoDeath_Init();
    libCOMI_gt_UnitBehaviors_Init();
    libCOMI_gt_BehaviorPermanentlyChangesOwner_Init();
    libCOMI_gt_DeathPreventGrantKillCredit_Init();
    libCOMI_gt_CU_HeroPanelUpdate_Init();
    libCOMI_gt_CU_HeroUnitDamaged_Init();
    libCOMI_gt_CU_HeroUnitVitalChange_Init();
    libCOMI_gt_CU_HeroMouseHoverText_Init();
    libCOMI_gt_HeroDied_Init();
    libCOMI_gt_SamePlaceRevive_Init();
    libCOMI_gt_CM_InstantRevive_Init();
    libCOMI_gt_CU_GPBirthFinished_Init();
    libCOMI_gt_CU_GPDeathRemove2D_Init();
    libCOMI_gt_CU_GPVitalChanges_Init();
    libCOMI_gt_TopBarNotificationsEnableDisable_Init();
    libCOMI_gt_AF_TopBarClicked_Init();
    libCOMI_gt_AF_MouseEntersTopBar_Init();
    libCOMI_gt_AF_MouseExitsTopBar_Init();
    libCOMI_gt_VU_EnemyFactionChanged_Init();
    libCOMI_gt_FactionButtonClicked_Init();
    libCOMI_gt_AF_CS_NewsControlButtonClicked_Init();
    libCOMI_gt_UT_CommandsButtonClicked_Init();
    libCOMI_gt_CU_PlayerLeftInLobby_Init();
    libCOMI_gt_CommanderButtonClicked_Init();
    libCOMI_gt_UT_PrestigeAlly_Init();
    libCOMI_gt_UT_CommanderClicked_Init();
    libCOMI_gt_CU_CommanderLevelUpClicked_Init();
    libCOMI_gt_CU_CommanderLevelDownClicked_Init();
    libCOMI_gt_CU_CommanderMutatorChallengeSelected_Init();
    libCOMI_gt_AF_CS_AllyPrestigeChanged_Init();
    libCOMI_gt_UT_AllyMasteryButtonClicked_Init();
    libCOMI_gt_CU_CommanderMasteryClicked_Init();
    libCOMI_gt_CU_CommanderMasteryCheckboxToggle_Init();
    libCOMI_gt_ReadyButtonClicked_Init();
    libCOMI_gt_CU_CommandeAllyLeft_Init();
    libCOMI_gt_CU_MasteryShiftTrackDown_Init();
    libCOMI_gt_CU_MasteryShiftTrackUp_Init();
    libCOMI_gt_CU_MasteryLevelUpPressed_Init();
    libCOMI_gt_CU_MasteryLevelDownPressed_Init();
    libCOMI_gt_CU_MasteryItemPlusPressed_Init();
    libCOMI_gt_CU_MasteryItemMinusPressed_Init();
    libCOMI_gt_CU_MasteryResetPressed_Init();
    libCOMI_gt_CU_MasteryAcceptPressed_Init();
    libCOMI_gt_CU_PrestigeButtonClicked_Init();
    libCOMI_gt_GameModePulldownUsed_Init();
    libCOMI_gt_DifficultyPulldownUsed_Init();
    libCOMI_gt_AF_SlimUI_Delayed_Init();
    libCOMI_gt_CU_FlashArmyButtonHelpTip_Init();
    libCOMI_gt_CU_ArmyButtonUsed_Init();
    libCOMI_gt_CS_ArmyButtonMissionInit_Init();
    libCOMI_gt_CU_TargetingCancelButtonUsed_Init();
    libCOMI_gt_CM_SoATargetingForceOff_Init();
    libCOMI_gt_CM_SoATargetingCancelFromUI_Init();
    libCOMI_gt_DefferedTransmission_Init();
    libCOMI_gt_CM_HeroReviveQueue_HeroRevived_Init();
    libCOMI_gt_CM_VOResourceSent_Init();
    libCOMI_gt_CM_VOResourceRequest_Init();
    libCOMI_gt_CM_VOUnitsLostCheck_Init();
    libCOMI_gt_CM_VOEnemySpotted_Init();
    libCOMI_gt_CM_VOEnemyCloakedSpotted_Init();
    libCOMI_gt_CM_TransmissionSend_Init();
    libCOMI_gt_CM_SendTransmissionCampaignTick_Init();
    libCOMI_gt_CM_CoopAI_AttackWavePingManager_Init();
    libCOMI_gt_VoidPingSound_Init();
    libCOMI_gt_CM_CinematicModeOn_Init();
    libCOMI_gt_CM_CinematicModeOff_Init();
    libCOMI_gt_CM_CampaignMissionIntroZoomIn_Init();
    libCOMI_gt_ResourcePickupAllyNew_Init();
    libCOMI_gt_CM_CampaignUnitTeaching_Init();
    libCOMI_gt_CM_CampaignUnitCreated_Init();
    libCOMI_gt_CM_CampaignUnitChangeOwner_Init();
    libCOMI_gt_CM_CampaignUnitInfoUnitMorphes_Init();
    libCOMI_gt_UT_Cooldown_Init();
    libCOMI_gt_UT_Horde_Init_Init();
    libCOMI_gt_UT_Horde_Remove_Init();
    libCOMI_gt_UT_Horde_UnitCreated_Init();
    libCOMI_gt_UT_Horde_SendWave_Init();
    libCOMI_gt_UT_encomps_Init();
    libCOMI_gt_UT_Mastery_Init();
    libCOMI_gt_UT_MasteryButtonClicked_Init();
    libCOMI_gt_UT_CommanderSwitched_Init();
    libCOMI_gt_UT_SpawnAttackWave_Init();
    libCOMI_gt_UT_AttackWaveAttack_Init();
    libCOMI_gt_UT_RemoveWave_Init();
    libCOMI_gt_UT_NukeTest_Init();
    libCOMI_gt_AF_BileLauncherBombardment_Init();
    libCOMI_gt_ToggleAIDebugMessages_Init();
    libCOMI_gt_CM_CoopAI_InitAIDebugging_Init();
    libCOMI_gt_CU_DebugMovieCaptureModeToggle_Init();
    libCOMI_gt_CU_DebugMutatorSelect_Init();
    libCOMI_gt_CU_DebugRandomMutationSelect_Init();
    libCOMI_gt_CU_DebugCinMode_Init();
    libCOMI_gt_CU_DebugScreenmode_Init();
    libCOMI_gt_CU_DebugTogSoA_Init();
    libCOMI_gt_CM_DebugTargetSpawnersSet_Init();
    libCOMI_gt_CT_DebugSelectCommanders_Init();
    libCOMI_gt_SimpleDropAttackExample2_Init();
    libCOMI_gt_CM_DebugVictoryS_Init();
    libCOMI_gt_CM_CampaignMissionPerfLog_Init();
    libCOMI_gt_UT_DebugMutatorSelect_Init();
    libCOMI_gt_UT_ShareControl_Init();
    libCOMI_gt_UT_AllySupply_Init();
    libCOMI_gt_UT_Unlock_Init();
    libCOMI_gt_UT_Trigdebug_Init();
    libCOMI_gt_UT_Ally_Init();
    libCOMI_gt_UT_PvP_Init();
    libCOMI_gt_CU_DebugMovieCaptureModeSuppressCC_Init();
    libCOMI_gt_CU_DebugMovieCaptureModeSupressUnits_Init();
    libCOMI_gt_UT_StartTrigger_Init();
    libCOMI_gt_UT_sbank_Init();
    libCOMI_gt_UT_rbank_Init();
    libCOMI_gt_UT_RefillInit_Init();
    libCOMI_gt_UT_Refill_Init();
    libCOMI_gt_UT_UI_Init();
    libCOMI_gt_UT_UI_CtrlH_Init();
    libCOMI_gt_MM_UnitDeath8_Init();
    libCOMI_gt_MM_UnitRemovedFix2_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libCOMI_InitLib_completed = false;

void libCOMI_InitLib () {
    if (libCOMI_InitLib_completed) {
        return;
    }

    libCOMI_InitLib_completed = true;

    libCOMI_InitLibraries();
    libCOMI_InitVariables();
    libCOMI_InitTriggers();
}

include "LibARRA"

