include "TriggerLibs/NativeLib"

include "LibDRAG_h"

//--------------------------------------------------------------------------------------------------
// Library: Factions - Dragons
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libDRAG_InitLibraries () {
    libNtve_InitVariables();
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: Fission
//--------------------------------------------------------------------------------------------------
trigger Fission;
bool FissionF(bool testConds,bool runActions){
    unit Target=EventUnitTargetUnit();
    string TargetType=UnitGetType(Target);
    int TargetOwner=UnitGetOwner(Target);
    point TargetPoint=UnitGetPosition(Target);
    fixed TargetFacing=UnitGetFacing(Target);
    fixed TargetEnergy=UnitGetPropertyFixed(Target,c_unitPropEnergy,c_unitPropCurrent)/2;
    order TargetOrder=UnitOrder(Target,0);
    abilcmd TargetAbilityCommand=OrderGetAbilityCommand(TargetOrder);
    unit u1;
    unit u2;
    unitgroup Minerals;
    unit MineralField;
    UnitCreate(1,TargetType,c_unitCreateIgnorePlacement,TargetOwner,TargetPoint,TargetFacing);
    u1=UnitLastCreated();
    UnitCreate(1,TargetType,c_unitCreateIgnorePlacement,TargetOwner,TargetPoint,TargetFacing);
    u2=UnitLastCreated();
    UnitSetPropertyFixed(u1,c_unitPropLifePercent,40);
    UnitSetPropertyFixed(u2,c_unitPropLifePercent,40);
    UnitBehaviorAdd(u1,"DragonFission",u1,1);
    UnitBehaviorAdd(u2,"DragonFission",u2,1);
    UnitSetPropertyFixed(u1,c_unitPropEnergy,TargetEnergy);
    UnitSetPropertyFixed(u2,c_unitPropEnergy,TargetEnergy);
    if(TargetAbilityCommand==AbilityCommand("DroneHarvest",1)){
        Minerals=UnitGroupSearch(null,c_playerAny,TargetPoint,10,UnitFilter(1<<c_targetFilterHarvestableResource,0,0,0),0);
        MineralField=UnitGroupClosestToPoint(Minerals,TargetPoint);
        if(MineralField!=null){
            UnitIssueOrder(u1,OrderTargetingUnit(AbilityCommand("DroneHarvest",0),MineralField),c_orderQueueAddToEnd);
            UnitIssueOrder(u2,OrderTargetingUnit(AbilityCommand("DroneHarvest",0),MineralField),c_orderQueueAddToEnd);
        }
    }
    else{
        UnitIssueOrder(u1,TargetOrder,c_orderQueueReplace);
        UnitIssueOrder(u2,TargetOrder,c_orderQueueReplace);
    }
    if(UnitIsSelected(Target,TargetOwner)){
        UnitSelect(u1,TargetOwner,true);
        UnitSelect(u2,TargetOwner,true);
    }
    UnitCreateEffectUnit(Target,"TimedLifeFate",Target);
    return true;
}
void FissionI(){
    Fission=TriggerCreate("FissionF");
    TriggerAddEventUnitAbility(Fission,null,AbilityCommand("DragonFission",0),c_abilEffectStageCast,true);
    TriggerAddEventUnitAbility(Fission,null,AbilityCommand("DragonAscendedFission",0),c_abilEffectStageCast,true);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BrimstoneDemolisher
//--------------------------------------------------------------------------------------------------
trigger BrimstoneDemolisher;
trigger AscendedBrimstoneDemolisher;
bool BrimstoneDemolisherF(bool testConds,bool runActions){
    unit u=EventUnit();
    if(UnitCheckAbilCmdState(u,AbilityCommand("BrimstoneDemolisherScorchingBlaze",0),c_cmdStateIsAutoCast)){
        UnitBehaviorAdd(u,"BrimstoneDemolisherScorchingBlaze1",u,1);
    }
    else{
        UnitBehaviorRemove(u,"BrimstoneDemolisherScorchingBlaze1",1);
    }
    return true;
}
fixed ABD_Factor=0.014770507813;
bool AscendedBrimstoneDemolisherF(bool testConds,bool runActions){
    unit u=EventUnit();
    fixed d=EventUnitDamageAmount();
    if(d>0&&UnitGetType(u)=="AscendedBrimstoneDemolisher"&&CatalogFieldValueGet(c_gameCatalogEffect,EventUnitDamageEffect(),"Kind",c_playerAny)!="Spell"){
        UnitSetPropertyFixed(u,c_unitPropLife,UnitGetPropertyFixed(u,c_unitPropLife,c_unitPropCurrent)+d-d*Pow2(-d*ABD_Factor));
        return true;
    }
    return false;
    
}
void BrimstoneDemolisherI(){
    BrimstoneDemolisher=TriggerCreate("BrimstoneDemolisherF");
    AscendedBrimstoneDemolisher=TriggerCreate("AscendedBrimstoneDemolisherF");
    TriggerAddEventUnitAbilityAutoCastChange(BrimstoneDemolisher,null,AbilityCommand("BrimstoneDemolisherScorchingBlaze",0),c_unitAbilAutoCastChangeAll,false);
    TriggerAddEventUnitDamaged(AscendedBrimstoneDemolisher,null,c_unitDamageTypeAny,c_unitDamageNonFatal,null);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Horned Magus
//--------------------------------------------------------------------------------------------------
trigger HornedMagus;
bool HornedMagusF(bool testConds,bool runActions){
    actorscope scope=ActorScopeFromUnit(EventUnit());
    string s="SetScale "+FixedToString(UnitGetPropertyFixed(EventUnit(),c_unitPropRadius,c_unitPropCurrent)+1,5);
    ActorSend(ActorCreate(scope,"HornedMagusFireShieldModel1",null,null,null),s);
    ActorSend(ActorCreate(scope,"HornedMagusFireShieldModel2",null,null,null),s);
    ActorSend(ActorCreate(scope,"HornedMagusFireShieldModel3",null,null,null),s);
    ActorSend(ActorCreate(scope,"HornedMagusFireShieldModel4",null,null,null),s);
    return true;
}
void HornedMagusI(){
    HornedMagus=TriggerCreate("HornedMagusF");
    TriggerAddEventUnitBehaviorChange(HornedMagus,null,"HornedMagusFireShield",c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SunkenGuardian
//--------------------------------------------------------------------------------------------------
unit SunkenGuardianCaster;
unit SunkenGuardianTarget;
trigger SunkenGuardianAttack;
trigger SunkenGuardianMissile;
bool SunkenGuardianAttackF(bool testConds,bool runActions){
    SunkenGuardianCaster=EventUnitTarget();
    SunkenGuardianTarget=EventUnit();
    return true;
}
void SunkenGuardian(unit u,unit v,unit m){
    actor a=ActorFromScope(ActorScopeFromUnit(u),"::Main");
    point p=UnitGetPosition(v);
    fixed r=DistanceBetweenPoints(p,UnitGetPosition(m));
    UnitBehaviorAdd(u,"SunkenGuardian",u,1);
    while(UnitIsAlive(u)&&UnitIsAlive(m)&&r>.15){
        if(r>=10.5){
            r=.5;
        }
        else{
            r=1-r/21;
        }
        ActorSend(a,"AnimSetTime Attack "+FixedToString(r,c_fixedPrecisionAny));
        Wait(.0625,c_timeGame);
        if(UnitIsAlive(v)){
            p=UnitGetPosition(v);
        }
        r=DistanceBetweenPoints(p,UnitGetPosition(m));
    }
    ActorSend(a,"AnimSetTimeScale Attack .75");
    ActorSend(a,"AnimSetTime Attack 1.046875");
    Wait(.4375,c_timeGame);
    ActorSend(a,"AnimSetTimeScale Attack 1");
    while(UnitIsAlive(u)&&UnitIsAlive(m)&&r<500){
        r=DistanceBetweenPoints(UnitGetPosition(u),UnitGetPosition(m));
        if(r>0.15){
            if(r>=10.5){
                r=1.375;
            }
            else{
                r=1.75-r/28;
            }
            ActorSend(a,"AnimSetTime Attack "+FixedToString(r,c_fixedPrecisionAny));
            Wait(.0625,c_timeGame);
        }
        else{
            r=500;
        }
    }
    Wait(.125,c_timeGame);
    ActorSend(a,"AnimClear Attack .25");
    Wait(.0625,c_timeGame);
    UnitBehaviorRemove(u,"SunkenGuardian",1);
}
bool SunkenGuardianMissileF(bool testConds,bool runActions){
    unit u=EventUnit();
    if(UnitGetType(u)!="SunkenGuardianAttackMissile"){
        return false;
    }
    SunkenGuardian(SunkenGuardianCaster,SunkenGuardianTarget,u);
    return true;
}
void SunkenGuardianI(){
    SunkenGuardianAttack=TriggerCreate("SunkenGuardianAttackF");
    TriggerAddEventUnitAttacked2(SunkenGuardianAttack,null,"SunkenGuardianImpale1");
    SunkenGuardianMissile=TriggerCreate("SunkenGuardianMissileF");
    TriggerAddEventUnitRegion(SunkenGuardianMissile,null,RegionEntireMap(),true);
}

void libDRAG_InitCustomScript () {
}

// Functions
void libDRAG_gf_NoRage (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    UISetResourceVisible(PlayerGroupSingle(lp_player), c_resourceTypeCustom, false);
    PlayerModifyPropertyInt(lp_player, c_playerPropCustom, c_playerPropOperSetTo, 0);
}

string libDRAG_gf_GetUnitTypeRace (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "Race", c_playerAny));
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Dragons Race
//--------------------------------------------------------------------------------------------------
bool libDRAG_gt_InitializeDragonsRace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto4BACA602_g;
    int auto4BACA602_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libDRAG_gt_RageCreate, true);
    TriggerEnable(libDRAG_gt_RageResearch, true);
    TriggerEnable(libDRAG_gt_RageKill, true);
    TriggerEnable(libDRAG_gt_RageKill2, true);
    TriggerEnable(libDRAG_gt_RageKill3, true);
    BrimstoneDemolisherI();
    HornedMagusI();
    SunkenGuardianI();
    FissionI();
    auto4BACA602_g = PlayerGroupAll();
    auto4BACA602_var = -1;
    while (true) {
        auto4BACA602_var = PlayerGroupNextPlayer(auto4BACA602_g, auto4BACA602_var);
        if (auto4BACA602_var < 0) { break; }
        if ((PlayerRace(auto4BACA602_var) == "Dragon")) {
            UISetResourceVisible(PlayerGroupSingle(auto4BACA602_var), c_resourceTypeCustom, true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDRAG_gt_InitializeDragonsRace_Init () {
    libDRAG_gt_InitializeDragonsRace = TriggerCreate("libDRAG_gt_InitializeDragonsRace_Func");
    TriggerAddEventGeneric(libDRAG_gt_InitializeDragonsRace, "GAME START");
}

//--------------------------------------------------------------------------------------------------
// Trigger: RageCreate
//--------------------------------------------------------------------------------------------------
bool libDRAG_gt_RageCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unit;
    int lv_owner;
    fixed lv_rage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = libNtve_gf_TriggeringProgressUnitType();
    lv_owner = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libDRAG_gf_GetUnitTypeRace(lv_unit) == "Dragon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rage = (UnitTypeGetCost(lv_unit, c_unitCostMinerals) + (UnitTypeGetCost(lv_unit, c_unitCostVespene) * 2.4));
    if ((lv_rage > 0.0)) {
        UISetResourceVisible(PlayerGroupSingle(lv_owner), c_resourceTypeCustom, true);
        PlayerModifyPropertyInt(lv_owner, c_playerPropCustom, c_playerPropOperAdd, FixedToInt((lv_rage / 5.0)));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libDRAG_gt_RageCreate_Init () {
    libDRAG_gt_RageCreate = TriggerCreate("libDRAG_gt_RageCreate_Func");
    TriggerEnable(libDRAG_gt_RageCreate, false);
    TriggerAddEventUnitTrainProgress(libDRAG_gt_RageCreate, null, c_unitProgressStageComplete);
    TriggerAddEventUnitConstructProgress(libDRAG_gt_RageCreate, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RageResearch
//--------------------------------------------------------------------------------------------------
bool libDRAG_gt_RageResearch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    fixed lv_rage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libDRAG_gf_GetUnitTypeRace(UnitGetType(EventUnit())) == "Dragon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rage = (CatalogFieldValueGetAsInt(c_gameCatalogUpgrade, libNtve_gf_TriggeringProgressUpgrade(), "ScoreAmount", c_playerAny) / 5.0);
    if ((lv_rage > 0.0)) {
        UISetResourceVisible(PlayerGroupSingle(lv_owner), c_resourceTypeCustom, true);
        PlayerModifyPropertyInt(lv_owner, c_playerPropCustom, c_playerPropOperAdd, FixedToInt(lv_rage));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libDRAG_gt_RageResearch_Init () {
    libDRAG_gt_RageResearch = TriggerCreate("libDRAG_gt_RageResearch_Func");
    TriggerEnable(libDRAG_gt_RageResearch, false);
    TriggerAddEventUnitResearchProgress(libDRAG_gt_RageResearch, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RageKill
//--------------------------------------------------------------------------------------------------
bool libDRAG_gt_RageKill_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unit;
    int lv_ownerPlayer;
    int lv_killer;
    fixed lv_rage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = UnitGetType(EventUnit());
    lv_ownerPlayer = EventPlayer();
    lv_killer = EventUnitDamageSourcePlayer();

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingUnit() != null))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() != 16))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() != 0))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, EventPlayer()), libNtve_gf_KillingPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rage = ((UnitTypeGetCost(lv_unit, c_unitCostMinerals) * 0.2) + (UnitTypeGetCost(lv_unit, c_unitCostVespene) * 0.48));
    if ((lv_rage > 0.0)) {
        if ((libDRAG_gf_GetUnitTypeRace(UnitGetType(libNtve_gf_KillingUnit())) == "Dragon")) {
            UISetResourceVisible(PlayerGroupSingle(lv_killer), c_resourceTypeCustom, true);
            PlayerModifyPropertyInt(lv_killer, c_playerPropCustom, c_playerPropOperAdd, FixedToInt((lv_rage * 3.0)));
        }

        if ((libDRAG_gf_GetUnitTypeRace(lv_unit) == "Dragon") && (UnitHasBehavior2(EventUnit(), "DragonAscended") == true)) {
            UISetResourceVisible(PlayerGroupSingle(lv_ownerPlayer), c_resourceTypeCustom, true);
            PlayerModifyPropertyInt(lv_ownerPlayer, c_playerPropCustom, c_playerPropOperAdd, FixedToInt(lv_rage));
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libDRAG_gt_RageKill_Init () {
    libDRAG_gt_RageKill = TriggerCreate("libDRAG_gt_RageKill_Func");
    TriggerEnable(libDRAG_gt_RageKill, false);
    TriggerAddEventUnitDied(libDRAG_gt_RageKill, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DragonDies
//--------------------------------------------------------------------------------------------------
bool libDRAG_gt_RageKill2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_units;

    // Automatic Variable Declarations
    unitgroup autoF686952C_g;
    int autoF686952C_u;
    unit autoF686952C_var;

    // Variable Initialization
    lv_units = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((PlayerRace(EventPlayer()) != "Dragon"))) {
            return false;
        }

        if (!((libDRAG_gf_GetUnitTypeRace(UnitGetType(EventUnit())) == "Dragon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_units = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF686952C_g = lv_units;
    autoF686952C_u = UnitGroupCount(autoF686952C_g, c_unitCountAll);
    for (;; autoF686952C_u -= 1) {
        autoF686952C_var = UnitGroupUnitFromEnd(autoF686952C_g, autoF686952C_u);
        if (autoF686952C_var == null) { break; }
        if ((libDRAG_gf_GetUnitTypeRace(UnitGetType(autoF686952C_var)) == "Dragon")) {
            return true;
        }

    }
    libDRAG_gf_NoRage(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDRAG_gt_RageKill2_Init () {
    libDRAG_gt_RageKill2 = TriggerCreate("libDRAG_gt_RageKill2_Func");
    TriggerEnable(libDRAG_gt_RageKill2, false);
    TriggerAddEventUnitDied(libDRAG_gt_RageKill2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DragonOwnerChange
//--------------------------------------------------------------------------------------------------
bool libDRAG_gt_RageKill3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_units;

    // Automatic Variable Declarations
    unitgroup autoA7BBFDB1_g;
    int autoA7BBFDB1_u;
    unit autoA7BBFDB1_var;

    // Variable Initialization
    lv_units = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((PlayerRace(EventUnitOwnerOld()) != "Dragon"))) {
            return false;
        }

        if (!((libDRAG_gf_GetUnitTypeRace(UnitGetType(EventUnit())) == "Dragon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_units = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA7BBFDB1_g = lv_units;
    autoA7BBFDB1_u = UnitGroupCount(autoA7BBFDB1_g, c_unitCountAll);
    for (;; autoA7BBFDB1_u -= 1) {
        autoA7BBFDB1_var = UnitGroupUnitFromEnd(autoA7BBFDB1_g, autoA7BBFDB1_u);
        if (autoA7BBFDB1_var == null) { break; }
        if ((libDRAG_gf_GetUnitTypeRace(UnitGetType(autoA7BBFDB1_var)) == "Dragon")) {
            return true;
        }

    }
    libDRAG_gf_NoRage(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDRAG_gt_RageKill3_Init () {
    libDRAG_gt_RageKill3 = TriggerCreate("libDRAG_gt_RageKill3_Func");
    TriggerEnable(libDRAG_gt_RageKill3, false);
    TriggerAddEventUnitChangeOwner(libDRAG_gt_RageKill3, null);
}

void libDRAG_InitTriggers () {
    libDRAG_gt_InitializeDragonsRace_Init();
    libDRAG_gt_RageCreate_Init();
    libDRAG_gt_RageResearch_Init();
    libDRAG_gt_RageKill_Init();
    libDRAG_gt_RageKill2_Init();
    libDRAG_gt_RageKill3_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libDRAG_InitLib_completed = false;

void libDRAG_InitLib () {
    if (libDRAG_InitLib_completed) {
        return;
    }

    libDRAG_InitLib_completed = true;

    libDRAG_InitLibraries();
    libDRAG_InitCustomScript();
    libDRAG_InitTriggers();
}

