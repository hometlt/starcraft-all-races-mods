include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "LibNXMI"

include "Lib7FDEA08C_h"

//--------------------------------------------------------------------------------------------------
// Library: trigger
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib7FDEA08C_InitLibraries () {
    libNtve_InitVariables();
    libHots_InitVariables();
    libNXMI_InitVariables();
}

// Variable Initialization
bool lib7FDEA08C_InitVariables_completed = false;

void lib7FDEA08C_InitVariables () {
    if (lib7FDEA08C_InitVariables_completed) {
        return;
    }

    lib7FDEA08C_InitVariables_completed = true;

    lib7FDEA08C_gv_uT_MissileCreators = UnitGroupEmpty();
    lib7FDEA08C_gv_cM_MengskTransmissionTimerDirtyBomb = TimerCreate();
    lib7FDEA08C_gv_cM_MengskTransmissionTimerForcedConscription = TimerCreate();
    lib7FDEA08C_gv_CM_Mengsk_VeteranUnits = UnitGroupEmpty();
    lib7FDEA08C_gv_SCC_Mengsk_XPHungryUnits = UnitGroupEmpty();
    lib7FDEA08C_gv_CM_Mengsk_ReturningWorkers = UnitGroupEmpty();
    lib7FDEA08C_gv_casterPanel = c_invalidDialogControlId;
    lib7FDEA08C_gv_globalContainer = c_invalidDialogControlId;
    lib7FDEA08C_gv_animPanel = c_invalidDialogControlId;
    lib7FDEA08C_gv_energyPanel = c_invalidDialogControlId;
    lib7FDEA08C_gv_mengskTopbar = c_invalidDialogControlId;
    lib7FDEA08C_gv_globalCasterGroup = UnitGroupEmpty();
    lib7FDEA08C_gv_cU_GPMengskEnergyContainer = c_invalidDialogControlId;
    lib7FDEA08C_gv_cU_GPMengskEnergyRegenRoyalGuardContainer = c_invalidDialogControlId;
    lib7FDEA08C_gv_cU_GPMengskEnergyRegenTrooperContainer = c_invalidDialogControlId;
    lib7FDEA08C_gv_cM_Mengsk_PropagandaUnits = UnitGroupEmpty();
    lib7FDEA08C_gv_stormtroopergroupwithequipment = UnitGroupEmpty();
    lib7FDEA08C_gv_cM_Mengsk_ReturningWorkers = UnitGroupEmpty();
    lib7FDEA08C_gv_cM_Mengsk_ArtilleryExperimentalStrikeRange = 4.0;
    lib7FDEA08C_gv_xanthosminimaptips = c_invalidPingId;
}

// Presets
// Functions
void lib7FDEA08C_gf_CM_CommanderVOSend (int lp_player, soundlink lp_soundeffects, playergroup lp_targetplayers) {
    // Automatic Variable Declarations
    // Implementation
    SoundSetListenerGender(lp_soundeffects, c_genderDefault);
    SoundPlayForPlayer(lp_soundeffects, 1, lp_targetplayers, 100.0, 0.0);
}

trigger auto_lib7FDEA08C_gf_CM_AbilityTransmission_MengskReminders_Trigger = null;
int auto_lib7FDEA08C_gf_CM_AbilityTransmission_MengskReminders_lp_mengskPlayer;

void lib7FDEA08C_gf_CM_AbilityTransmission_MengskReminders (int lp_mengskPlayer) {
    auto_lib7FDEA08C_gf_CM_AbilityTransmission_MengskReminders_lp_mengskPlayer = lp_mengskPlayer;

    if (auto_lib7FDEA08C_gf_CM_AbilityTransmission_MengskReminders_Trigger == null) {
        auto_lib7FDEA08C_gf_CM_AbilityTransmission_MengskReminders_Trigger = TriggerCreate("auto_lib7FDEA08C_gf_CM_AbilityTransmission_MengskReminders_TriggerFunc");
    }

    TriggerExecute(auto_lib7FDEA08C_gf_CM_AbilityTransmission_MengskReminders_Trigger, false, false);
}

bool auto_lib7FDEA08C_gf_CM_AbilityTransmission_MengskReminders_TriggerFunc (bool testConds, bool runActions) {
    int lp_mengskPlayer = auto_lib7FDEA08C_gf_CM_AbilityTransmission_MengskReminders_lp_mengskPlayer;

    // Variable Declarations
    fixed lv_trooperremindertime;
    fixed lv_eliteremindertime;
    fixed lv_artilleryreminder;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_trooperremindertime = (60 * 5);
    lv_eliteremindertime = (60 * 7);
    lv_artilleryreminder = (60 * 10);

    // Implementation
    while (!((GameGetMissionTime() >= lv_trooperremindertime))) {
        Wait(1.0, c_timeGame);
    }
    if ((lib7FDEA08C_gv_cM_MengskTrooperEquipped == false)) {
        lib7FDEA08C_gf_CM_CommanderVOSend(lp_mengskPlayer, SoundLink("MengskCommander_EquipTroopsReminder", -1), PlayerGroupSingle(lp_mengskPlayer));
    }

    while (!((GameGetMissionTime() >= lv_eliteremindertime))) {
        Wait(1.0, c_timeGame);
    }
    if ((lib7FDEA08C_gv_cM_MengskEliteBuilt == false)) {
        lib7FDEA08C_gf_CM_CommanderVOSend(lp_mengskPlayer, SoundLink("MengskCommander_TrainVeteranReminder", -1), PlayerGroupSingle(lp_mengskPlayer));
    }

    while (!((GameGetMissionTime() >= lv_artilleryreminder))) {
        Wait(1.0, c_timeGame);
    }
    if ((lib7FDEA08C_gv_cM_MengskArtilleryBuilt == false)) {
        lib7FDEA08C_gf_CM_CommanderVOSend(lp_mengskPlayer, SoundLink("MengskCommander_BuildArtilleryReminder", -1), PlayerGroupSingle(lp_mengskPlayer));
    }

    return true;
}

bool lib7FDEA08C_gf_CM_Mengsk_IsTheRoyalGuard (unit lp_unit) {
    // Automatic Variable Declarations
    string auto0B52DACC_val;

    // Implementation
    auto0B52DACC_val = UnitGetType(lp_unit);
    if (auto0B52DACC_val == "MarineMengsk") {
        return true;
    }
    else if (auto0B52DACC_val == "MedicMengsk") {
        return true;
    }
    else if (auto0B52DACC_val == "MarauderMengsk") {
        return true;
    }
    else if (auto0B52DACC_val == "FirebatMengsk") {
        return true;
    }
    else if (auto0B52DACC_val == "GhostMengsk") {
        return true;
    }
    else if (auto0B52DACC_val == "WarhoundMengsk") {
        return true;
    }
    else if (auto0B52DACC_val == "HellionMengsk") {
        return true;
    }
    else if (auto0B52DACC_val == "HellionMengskTank") {
        return true;
    }
    else if (auto0B52DACC_val == "DiamondbackMengsk") {
        return true;
    }
    else if (auto0B52DACC_val == "GoliathMengsk") {
        return true;
    }
    else if (auto0B52DACC_val == "SiegeTankMengsk") {
        return true;
    }
    else if (auto0B52DACC_val == "SiegeTankMengskSieged") {
        return true;
    }
    else if (auto0B52DACC_val == "ThorMengsk") {
        return true;
    }
    else if (auto0B52DACC_val == "ThorMengskSieged") {
        return true;
    }
    else if (auto0B52DACC_val == "VikingMengskAssault") {
        return true;
    }
    else if (auto0B52DACC_val == "VikingMengskFighter") {
        return true;
    }
    else if (auto0B52DACC_val == "WraithMengsk") {
        return true;
    }
    else if (auto0B52DACC_val == "BansheeMengsk") {
        return true;
    }
    else if (auto0B52DACC_val == "BattlecruiserMengsk") {
        return true;
    }
    else if (auto0B52DACC_val == "Mengsk") {
        return true;
    }
    else if (auto0B52DACC_val == "ScienceVesselMengsk") {
        return true;
    }
    else if (auto0B52DACC_val == "OdinMengsk") {
        return true;
    }
    else if (auto0B52DACC_val == "DrakkenLaserDrillMengsk") {
        return true;
    }
    else if (auto0B52DACC_val == "ArchAngelMengskPnPAssault") {
        return true;
    }
    else if (auto0B52DACC_val == "ArchAngelMengskPnPFighter") {
        return true;
    }
    else if (auto0B52DACC_val == "SuperStarAriesMengsk") {
        return true;
    }
    else if (auto0B52DACC_val == "MengskXanthosAssault") {
        return true;
    }
    else if (auto0B52DACC_val == "NovaMengskHero") {
        return true;
    }
    else {
        return false;
    }
}

void lib7FDEA08C_gf_FlameMissile (unit lp_barrios, point lp_target) {
    // Variable Declarations
    int lv_angle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitIssueOrder(lp_barrios, OrderTargetingPoint(AbilityCommand("ArchAngelMengskMissileShootTrigger", 0), PointWithOffsetPolar(lp_target, 3.0, 0.0)), c_orderQueueAddToEnd);
    UnitIssueOrder(lp_barrios, OrderTargetingPoint(AbilityCommand("ArchAngelMengskMissileShootTrigger", 0), PointWithOffsetPolar(lp_target, 3.0, 60.0)), c_orderQueueAddToEnd);
    UnitIssueOrder(lp_barrios, OrderTargetingPoint(AbilityCommand("ArchAngelMengskMissileShootTrigger", 0), PointWithOffsetPolar(lp_target, 3.0, 120.0)), c_orderQueueAddToEnd);
    UnitIssueOrder(lp_barrios, OrderTargetingPoint(AbilityCommand("ArchAngelMengskMissileShootTrigger", 0), PointWithOffsetPolar(lp_target, 3.0, 180.0)), c_orderQueueAddToEnd);
    UnitIssueOrder(lp_barrios, OrderTargetingPoint(AbilityCommand("ArchAngelMengskMissileShootTrigger", 0), PointWithOffsetPolar(lp_target, 3.0, 240.0)), c_orderQueueAddToEnd);
    UnitIssueOrder(lp_barrios, OrderTargetingPoint(AbilityCommand("ArchAngelMengskMissileShootTrigger", 0), PointWithOffsetPolar(lp_target, 3.0, 300.0)), c_orderQueueAddToEnd);
    UnitIssueOrder(lp_barrios, OrderTargetingPoint(AbilityCommand("ArchAngelMengskMissileShootTrigger", 0), PointWithOffsetPolar(lp_target, 3.0, 360.0)), c_orderQueueAddToEnd);
    lv_angle = RandomInt(0, 90);
    UnitIssueOrder(lp_barrios, OrderTargetingPoint(AbilityCommand("ArchAngelMengskMissileShootTrigger", 0), lp_target), c_orderQueueAddToEnd);
    UnitIssueOrder(lp_barrios, OrderTargetingPoint(AbilityCommand("ArchAngelMengskMissileShootTrigger", 0), PointWithOffsetPolar(lp_target, 3.0, lv_angle)), c_orderQueueAddToEnd);
    UnitIssueOrder(lp_barrios, OrderTargetingPoint(AbilityCommand("ArchAngelMengskMissileShootTrigger", 0), PointWithOffsetPolar(lp_target, 3.0, (lv_angle + 90))), c_orderQueueAddToEnd);
    UnitIssueOrder(lp_barrios, OrderTargetingPoint(AbilityCommand("ArchAngelMengskMissileShootTrigger", 0), PointWithOffsetPolar(lp_target, 3.0, (lv_angle + 180))), c_orderQueueAddToEnd);
    UnitIssueOrder(lp_barrios, OrderTargetingPoint(AbilityCommand("ArchAngelMengskMissileShootTrigger", 0), PointWithOffsetPolar(lp_target, 3.0, (lv_angle + 270))), c_orderQueueAddToEnd);
    UnitIssueOrder(lp_barrios, OrderTargetingPoint(AbilityCommand("ArchAngelMengskMissileShootTrigger", 0), PointWithOffsetPolar(lp_target, 3.0, (lv_angle + 360))), c_orderQueueAddToEnd);
}

bool lib7FDEA08C_gf_CM_Resources_IsSaturated (unit lp_resourceNodeorTownHall) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitCurrentWorkerCount(lp_resourceNodeorTownHall) >= UnitIdealWorkerCount(lp_resourceNodeorTownHall));
}

void lib7FDEA08C_gf_CM_Resources_FindWork (unit lp_worker, unit lp_townHall, fixed lp_workRadius) {
    // Variable Declarations
    region lv_workregion;
    unitgroup lv_nearbyminerals;
    unitgroup lv_nearbygeysers;
    unit lv_resourcenode;

    // Automatic Variable Declarations
    unitgroup autoE8B5F78F_g;
    int autoE8B5F78F_u;

    // Variable Initialization
    lv_workregion = RegionCircle(UnitGetPosition(lp_townHall), lp_workRadius);
    lv_nearbyminerals = UnitGroup(null, 0, lv_workregion, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_nearbygeysers = UnitGroup(null, UnitGetOwner(lp_worker), lv_workregion, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Implementation
    autoE8B5F78F_g = lv_nearbygeysers;
    autoE8B5F78F_u = UnitGroupCount(autoE8B5F78F_g, c_unitCountAll);
    for (;; autoE8B5F78F_u -= 1) {
        lv_resourcenode = UnitGroupUnitFromEnd(autoE8B5F78F_g, autoE8B5F78F_u);
        if (lv_resourcenode == null) { break; }
        if ((lib7FDEA08C_gf_CM_Resources_IsSaturated(lv_resourcenode) == false)) {
            UnitIssueOrder(lp_worker, OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), lv_resourcenode), c_orderQueueReplace);
            return ;
        }

    }
    if ((UnitGroupCount(lv_nearbyminerals, c_unitCountAlive) > 0) && (lib7FDEA08C_gf_CM_Resources_IsSaturated(lp_townHall) == false)) {
        UnitIssueOrder(lp_worker, OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitGroupUnit(lv_nearbyminerals, RandomInt(1, UnitGroupCount(lv_nearbyminerals, c_unitCountAlive)))), c_orderQueueReplace);
    }

}

fixed lib7FDEA08C_gf_CM_Mengsk_SupplyLevel (unitgroup lp_unitGroup) {
    // Variable Declarations
    unit lv_unititer;
    fixed lv_totalproperty;

    // Automatic Variable Declarations
    unitgroup autoDCFB46F9_g;
    int autoDCFB46F9_u;

    // Variable Initialization

    // Implementation
    autoDCFB46F9_g = lp_unitGroup;
    autoDCFB46F9_u = UnitGroupCount(autoDCFB46F9_g, c_unitCountAll);
    for (;; autoDCFB46F9_u -= 1) {
        lv_unititer = UnitGroupUnitFromEnd(autoDCFB46F9_g, autoDCFB46F9_u);
        if (lv_unititer == null) { break; }
        if ((UnitIsAlive(lv_unititer) == true)) {
            lv_totalproperty += (UnitGetPropertyFixed(lv_unititer, c_unitPropSuppliesUsed, c_unitPropCurrent) *  (1+UnitXPGetCurrentLevel(lv_unititer, null)));
        }

    }
    return lv_totalproperty;
}

void lib7FDEA08C_gf_CM_Mengsk_EnergyChanged (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemMaximumValue(lib7FDEA08C_gv_energyPanel, UnitGetPropertyFixed(lib7FDEA08C_gv_globalCaster, c_unitPropEnergyMax, c_unitPropCurrent), PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(lib7FDEA08C_gv_energyPanel, UnitGetPropertyFixed(lib7FDEA08C_gv_globalCaster, c_unitPropEnergy, c_unitPropCurrent), PlayerGroupAll());
}

trigger auto_lib7FDEA08C_gf_CM_Mengsk_GlobalCasterEnergyRegen_Trigger = null;
unit auto_lib7FDEA08C_gf_CM_Mengsk_GlobalCasterEnergyRegen_lp_mengskGlobalCaster;

void lib7FDEA08C_gf_CM_Mengsk_GlobalCasterEnergyRegen (unit lp_mengskGlobalCaster) {
    auto_lib7FDEA08C_gf_CM_Mengsk_GlobalCasterEnergyRegen_lp_mengskGlobalCaster = lp_mengskGlobalCaster;

    if (auto_lib7FDEA08C_gf_CM_Mengsk_GlobalCasterEnergyRegen_Trigger == null) {
        auto_lib7FDEA08C_gf_CM_Mengsk_GlobalCasterEnergyRegen_Trigger = TriggerCreate("auto_lib7FDEA08C_gf_CM_Mengsk_GlobalCasterEnergyRegen_TriggerFunc");
    }

    TriggerExecute(auto_lib7FDEA08C_gf_CM_Mengsk_GlobalCasterEnergyRegen_Trigger, false, false);
}

bool auto_lib7FDEA08C_gf_CM_Mengsk_GlobalCasterEnergyRegen_TriggerFunc (bool testConds, bool runActions) {
    unit lp_mengskGlobalCaster = auto_lib7FDEA08C_gf_CM_Mengsk_GlobalCasterEnergyRegen_lp_mengskGlobalCaster;

    // Variable Declarations
    fixed lv_baseenergyregen;
    fixed lv_bonusenergyregenfactor;
    fixed lv_totalenergyregen;
    int lv_lastseenmoraleindex;
    bool lv_moralecapped;
    fixed lv_moralecappedremindercooldown;
    timer lv_moralecappedreminder;
    int lv_mengskplayer;

    // Automatic Variable Declarations
    int auto5E4BE795_val;

    // Variable Initialization
    lv_baseenergyregen = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, "CoopCasterMengsk", "EnergyRegenRate", c_playerAny);
    lv_bonusenergyregenfactor = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "TopbarMengskBonusRegenFactorDummy", "Amount", UnitGetOwner(lp_mengskGlobalCaster));
    lv_moralecappedremindercooldown = 180.0;
    lv_moralecappedreminder = TimerCreate();
    lv_mengskplayer = UnitGetOwner(lp_mengskGlobalCaster);

    // Implementation
    while (true) {
        lv_totalenergyregen = MaxF((lv_baseenergyregen + (lib7FDEA08C_gv_cM_Mengsk_EnergyRegenRoyalGuard + lib7FDEA08C_gv_cM_Mengsk_EnergyRegenTrooper)), 0.01);
        Wait((lv_bonusenergyregenfactor / lv_totalenergyregen), c_timeGame);
        lib7FDEA08C_gv_globalcasterenergy = RoundI((UnitGetPropertyFixed(lp_mengskGlobalCaster, c_unitPropEnergy, c_unitPropCurrent) + 1));
        UnitSetPropertyFixed(lp_mengskGlobalCaster, c_unitPropEnergy, lib7FDEA08C_gv_globalcasterenergy);
        lib7FDEA08C_gf_CM_Mengsk_EnergyChanged(lv_mengskplayer);
        lib7FDEA08C_gv_moraleindex = 1;
        if ((lib7FDEA08C_gv_globalcasterenergy >= 100)) {
            lib7FDEA08C_gv_moraleindex = 2;
        }

        if ((lib7FDEA08C_gv_globalcasterenergy >= 500.0)) {
            lib7FDEA08C_gv_moraleindex = 3;
        }

        if ((lib7FDEA08C_gv_globalcasterenergy >= 1000)) {
            lib7FDEA08C_gv_moraleindex = 4;
        }

        if ((lib7FDEA08C_gv_globalcasterenergy >= 2000)) {
            lib7FDEA08C_gv_moraleindex = 5;
        }

        if ((lv_lastseenmoraleindex != lib7FDEA08C_gv_moraleindex)) {
            auto5E4BE795_val = lib7FDEA08C_gv_moraleindex;
            if (auto5E4BE795_val == 1) {
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Attack", "TrooperMengsk_Attack_MoraleLow");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_What", "TrooperMengsk_What_MoraleLow");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Yes", "TrooperMengsk_Yes_MoraleLow");
                libNtve_gf_SetUpgradeLevelForPlayer(lv_mengskplayer, "MasteryMengskTopPanelPower", 10);
                libNtve_gf_SetUpgradeLevelForPlayer(lv_mengskplayer, "ZergMengskCalldownLevel", 1);
            }
            else if (auto5E4BE795_val == 2) {
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Attack", "TrooperMengsk_Attack_MoraleLow");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_What", "TrooperMengsk_What_MoraleLow");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Yes", "TrooperMengsk_Yes_MoraleLow");
                libNtve_gf_SetUpgradeLevelForPlayer(lv_mengskplayer, "MasteryMengskTopPanelPower", 20);
                libNtve_gf_SetUpgradeLevelForPlayer(lv_mengskplayer, "ZergMengskCalldownLevel", 2);
            }
            else if (auto5E4BE795_val == 3) {
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Attack", "TrooperMengsk_Attack");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_What", "TrooperMengsk_What");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Yes", "TrooperMengsk_Yes");
                libNtve_gf_SetUpgradeLevelForPlayer(lv_mengskplayer, "MasteryMengskTopPanelPower", 30);
                libNtve_gf_SetUpgradeLevelForPlayer(lv_mengskplayer, "ZergMengskCalldownLevel", 3);
            }
            else if (auto5E4BE795_val == 4) {
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Attack", "TrooperMengsk_Attack");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_What", "TrooperMengsk_What");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Yes", "TrooperMengsk_Yes");
                libNtve_gf_SetUpgradeLevelForPlayer(lv_mengskplayer, "MasteryMengskTopPanelPower", 40);
                libNtve_gf_SetUpgradeLevelForPlayer(lv_mengskplayer, "ZergMengskCalldownLevel", 4);
            }
            else if (auto5E4BE795_val == 5) {
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Attack", "TrooperMengsk_Attack_MoraleHigh");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_What", "TrooperMengsk_What_MoraleHigh");
                CatalogLinkReplace(lv_mengskplayer, c_gameCatalogSound, "TrooperMengsk_Yes", "TrooperMengsk_Yes_MoraleHigh");
                libNtve_gf_SetUpgradeLevelForPlayer(lv_mengskplayer, "MasteryMengskTopPanelPower", 50);
                libNtve_gf_SetUpgradeLevelForPlayer(lv_mengskplayer, "ZergMengskCalldownLevel", 5);
            }
            else {
            }
        }

        lv_lastseenmoraleindex = lib7FDEA08C_gv_moraleindex;
        if ((lib7FDEA08C_gv_globalcasterenergy >= 2000)) {
            if ((TimerGetRemaining(lv_moralecappedreminder) <= 0.0)) {
                SoundPlayForPlayer(SoundLink("MengskCommander_PublicPerceptionCapped", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                TimerStart(lv_moralecappedreminder, lv_moralecappedremindercooldown, false, c_timeReal);
            }

        }

    }
    return true;
}

void lib7FDEA08C_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateRoyalGuard (int lp_mengskPlayer) {
    // Variable Declarations
    fixed lv_imperialsupportperroyalguardsupplylevel;
    fixed lv_energyregenperroyalguardsupplylevel;
    fixed lv_roundeddisplay;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_imperialsupportperroyalguardsupplylevel = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "RoyalGuardMengskTopbarRegenDummy", "Amount", lp_mengskPlayer);
    lv_energyregenperroyalguardsupplylevel = (lv_imperialsupportperroyalguardsupplylevel * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MasteryMengskRoyalGuardImperialMandateRegenerationFactorDummy", "Amount", lp_mengskPlayer));

    // Implementation
    lib7FDEA08C_gv_cM_Mengsk_EnergyRegenRoyalGuard = (lv_energyregenperroyalguardsupplylevel * lib7FDEA08C_gf_CM_Mengsk_SupplyLevel(lib7FDEA08C_gv_CM_Mengsk_VeteranUnits));
    lv_roundeddisplay = Round(lib7FDEA08C_gv_cM_Mengsk_EnergyRegenRoyalGuard);
    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, "MengskTopBarEnergyRegenRoyalGuardDummy", "Amount", lp_mengskPlayer, lv_roundeddisplay);
    DialogControlHookup(lib7FDEA08C_gv_cU_GPMengskEnergyRegenRoyalGuardContainer, c_triggerControlTypeLabel, "Value");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), FixedToText(lv_roundeddisplay, 0), PlayerGroupAll());
}

void lib7FDEA08C_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateTrooper (int lp_mengskPlayer) {
    // Variable Declarations
    fixed lv_imperialsupportpertrooper;
    fixed lv_energyregenperpropagandaunit;
    fixed lv_theamountofsupporteachwellequippedstormtrooperprovides;
    fixed lv_energyregenerationrateprovidedbyeachwellequippedStormtrooper;
    fixed lv_roundeddisplay;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_imperialsupportpertrooper = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "PropagandaMengskTopbarRegenDummy", "Amount", lp_mengskPlayer);
    lv_energyregenperpropagandaunit = (lv_imperialsupportpertrooper * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MasteryMengskTrooperImperialMandateRegenerationFactorDummy", "Amount", lp_mengskPlayer));
    lv_theamountofsupporteachwellequippedstormtrooperprovides = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "CommanderPrestigeMengskTroopersTopbarRegenDummy", "Amount", lp_mengskPlayer);
    lv_energyregenerationrateprovidedbyeachwellequippedStormtrooper = (lv_imperialsupportpertrooper * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MasteryMengskTrooperImperialMandateRegenerationFactorDummy", "Amount", lp_mengskPlayer));

    // Implementation
    lib7FDEA08C_gv_cM_Mengsk_EnergyRegenTrooper = ((lv_energyregenperpropagandaunit * UnitGroupCount(lib7FDEA08C_gv_cM_Mengsk_PropagandaUnits, c_unitCountAlive)) + (lv_energyregenerationrateprovidedbyeachwellequippedStormtrooper * UnitGroupCount(lib7FDEA08C_gv_stormtroopergroupwithequipment, c_unitCountAlive)));
    lv_roundeddisplay = Round(lib7FDEA08C_gv_cM_Mengsk_EnergyRegenTrooper);
    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, "MengskTopBarEnergyRegenTrooperDummy", "Amount", lp_mengskPlayer, lv_roundeddisplay);
    DialogControlHookup(lib7FDEA08C_gv_cU_GPMengskEnergyRegenTrooperContainer, c_triggerControlTypeLabel, "Value");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), FixedToText(lv_roundeddisplay, 0), PlayerGroupAll());
}

void lib7FDEA08C_gf_SetUnitAttributePoints (string lp_attribute, unit lp_unit, int lp_points) {
    // Variable Declarations
    int lv_originalminpoints;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_originalminpoints = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lp_attribute, "MinPoints", UnitGetOwner(lp_unit));

    // Implementation
    CatalogFieldValueSet(c_gameCatalogBehavior, lp_attribute, "MinPoints", UnitGetOwner(lp_unit), IntToString(lp_points));
    UnitBehaviorRemove(lp_unit, lp_attribute, 1);
    UnitBehaviorAdd(lp_unit, lp_attribute, lp_unit, 1);
    CatalogFieldValueSet(c_gameCatalogBehavior, lp_attribute, "MinPoints", UnitGetOwner(lp_unit), IntToString(lv_originalminpoints));
}

trigger auto_lib7FDEA08C_gf_FindandAttackNearestEnemy_Trigger = null;
unit auto_lib7FDEA08C_gf_FindandAttackNearestEnemy_lp_attacker;
fixed auto_lib7FDEA08C_gf_FindandAttackNearestEnemy_lp_searchRadius;
fixed auto_lib7FDEA08C_gf_FindandAttackNearestEnemy_lp_satisfiedPathingDistance;
fixed auto_lib7FDEA08C_gf_FindandAttackNearestEnemy_lp_thinkPeriod;
unitfilter auto_lib7FDEA08C_gf_FindandAttackNearestEnemy_lp_targetFilter;
unitfilter auto_lib7FDEA08C_gf_FindandAttackNearestEnemy_lp_fallbackTargetFilter;

void lib7FDEA08C_gf_FindandAttackNearestEnemy (unit lp_attacker, fixed lp_searchRadius, fixed lp_satisfiedPathingDistance, fixed lp_thinkPeriod, unitfilter lp_targetFilter, unitfilter lp_fallbackTargetFilter) {
    auto_lib7FDEA08C_gf_FindandAttackNearestEnemy_lp_attacker = lp_attacker;
    auto_lib7FDEA08C_gf_FindandAttackNearestEnemy_lp_searchRadius = lp_searchRadius;
    auto_lib7FDEA08C_gf_FindandAttackNearestEnemy_lp_satisfiedPathingDistance = lp_satisfiedPathingDistance;
    auto_lib7FDEA08C_gf_FindandAttackNearestEnemy_lp_thinkPeriod = lp_thinkPeriod;
    auto_lib7FDEA08C_gf_FindandAttackNearestEnemy_lp_targetFilter = lp_targetFilter;
    auto_lib7FDEA08C_gf_FindandAttackNearestEnemy_lp_fallbackTargetFilter = lp_fallbackTargetFilter;

    if (auto_lib7FDEA08C_gf_FindandAttackNearestEnemy_Trigger == null) {
        auto_lib7FDEA08C_gf_FindandAttackNearestEnemy_Trigger = TriggerCreate("auto_lib7FDEA08C_gf_FindandAttackNearestEnemy_TriggerFunc");
    }

    TriggerExecute(auto_lib7FDEA08C_gf_FindandAttackNearestEnemy_Trigger, false, false);
}

bool auto_lib7FDEA08C_gf_FindandAttackNearestEnemy_TriggerFunc (bool testConds, bool runActions) {
    unit lp_attacker = auto_lib7FDEA08C_gf_FindandAttackNearestEnemy_lp_attacker;
    fixed lp_searchRadius = auto_lib7FDEA08C_gf_FindandAttackNearestEnemy_lp_searchRadius;
    fixed lp_satisfiedPathingDistance = auto_lib7FDEA08C_gf_FindandAttackNearestEnemy_lp_satisfiedPathingDistance;
    fixed lp_thinkPeriod = auto_lib7FDEA08C_gf_FindandAttackNearestEnemy_lp_thinkPeriod;
    unitfilter lp_targetFilter = auto_lib7FDEA08C_gf_FindandAttackNearestEnemy_lp_targetFilter;
    unitfilter lp_fallbackTargetFilter = auto_lib7FDEA08C_gf_FindandAttackNearestEnemy_lp_fallbackTargetFilter;

    // Variable Declarations
    fixed lv_safethinkperiod;
    point lv_attacktargetpoint;
    unit lv_bestattacktargetunit;
    fixed lv_bestpathingdistance;
    unit lv_currentattacktargetunit;
    fixed lv_currentpathingdistance;

    // Automatic Variable Declarations
    unitgroup auto0A49C726_g;
    int auto0A49C726_u;

    // Variable Initialization
    lv_safethinkperiod = MaxF(lp_thinkPeriod, 0.5);

    // Implementation
    while ((UnitIsAlive(lp_attacker) == true)) {
        lv_bestpathingdistance = 10000.0;
        auto0A49C726_g = UnitGroupAlliance(UnitGetOwner(lp_attacker), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_attacker), lp_searchRadius), lp_targetFilter, 0);
        auto0A49C726_u = UnitGroupCount(auto0A49C726_g, c_unitCountAll);
        for (;; auto0A49C726_u -= 1) {
            lv_currentattacktargetunit = UnitGroupUnitFromEnd(auto0A49C726_g, auto0A49C726_u);
            if (lv_currentattacktargetunit == null) { break; }
            if ((libNtve_gf_UnitCanCreateEffectOnUnit(lv_currentattacktargetunit, "ThreatTest", lp_attacker) == true) && ((UnitFilterMatch(lv_currentattacktargetunit, UnitGetOwner(lp_attacker), UnitFilter(0, 0, (1 << c_targetFilterCloaked), 0)) == true) || (libNtve_gf_UnitIsVisibleToPlayer(lv_currentattacktargetunit, UnitGetOwner(lp_attacker)) == true))) {
                lv_currentpathingdistance = AIPathingCostUnit(lp_attacker, UnitGetPosition(lv_currentattacktargetunit), c_ignoreEnemyBuildings);
                if ((lv_currentpathingdistance < lp_satisfiedPathingDistance)) {
                    lv_bestattacktargetunit = lv_currentattacktargetunit;
                    break;
                }
                else if ((lv_currentpathingdistance < lv_bestpathingdistance)) {
                    lv_bestpathingdistance = lv_currentpathingdistance;
                    lv_bestattacktargetunit = lv_currentattacktargetunit;
                }
            }

        }
        if ((UnitIsAlive(lv_bestattacktargetunit) == false)) {
            lv_bestattacktargetunit = UnitGroupClosestToPoint(UnitGroupAlliance(UnitGetOwner(lp_attacker), c_unitAllianceEnemy, RegionEntireMap(), lp_fallbackTargetFilter, 0), UnitGetPosition(lp_attacker));
        }

        if ((UnitIsAlive(lv_bestattacktargetunit) == true) && (libNtve_gf_UnitCanCreateEffectOnUnit(lv_bestattacktargetunit, "ThreatTest", lp_attacker) == true) && ((UnitFilterMatch(lv_bestattacktargetunit, UnitGetOwner(lp_attacker), UnitFilter(0, 0, (1 << c_targetFilterCloaked), 0)) == true) || (libNtve_gf_UnitIsVisibleToPlayer(lv_bestattacktargetunit, UnitGetOwner(lp_attacker)) == true))) {
            while ((UnitIsAlive(lp_attacker) == true) && (UnitIsAlive(lv_bestattacktargetunit) == true) && (libNtve_gf_UnitCanCreateEffectOnUnit(lv_bestattacktargetunit, "ThreatTest", lp_attacker) == true) && ((UnitFilterMatch(lv_bestattacktargetunit, UnitGetOwner(lp_attacker), UnitFilter(0, 0, (1 << c_targetFilterCloaked), 0)) == true) || (libNtve_gf_UnitIsVisibleToPlayer(lv_bestattacktargetunit, UnitGetOwner(lp_attacker)) == true))) {
                UnitIssueOrder(lp_attacker, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_bestattacktargetunit)), c_orderQueueReplace);
                Wait((lv_safethinkperiod + RandomFixed(-0.125, 0.125)), c_timeGame);
            }
        }
        else {
            Wait((lv_safethinkperiod + RandomFixed(-0.125, 0.125)), c_timeGame);
        }
    }
    return true;
}

void lib7FDEA08C_gf_Connecttheunitmodeltotheunit (unit lp_attachedunit, unit lp_targetunit, string lp_attachmentpoint, fixed lp_xoffset, fixed lp_yoffset, fixed lp_zoffset, string lp_facingAdjustment) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_attachedunit, "RefSet ::global.XanthosNewPart ::Self");
    libNtve_gf_SendActorMessageToUnit(lp_targetunit, "RefSet ::global.XanthosBody ::Self");
    libNtve_gf_SendActorMessageToUnit(lp_attachedunit, "RefSet ::actor.MainBody ::global.XanthosBody");
    libNtve_gf_SendActorMessageToUnit(lp_attachedunit, "Signal BaselineHook");
    libNtve_gf_SendActorMessageToUnit(lp_targetunit, (("AttachOffset ::global.XanthosNewPart {" + (lp_attachmentpoint) + "} " + FixedToString(lp_xoffset, c_fixedPrecisionAny) + "," + FixedToString(lp_yoffset, c_fixedPrecisionAny) + "," + FixedToString(lp_zoffset, c_fixedPrecisionAny) + " {} {" + (lp_facingAdjustment) + "}")));
    ActorSend(ActorFromActor(libNtve_gf_MainActorofUnit(lp_targetunit), "XanthosPartList"), "ListAdd ::global.XanthosNewPart");
}

void lib7FDEA08C_gf_Setturretstatus (unit lp_turretunit, int lp_turretstatus) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_turretstatus == lib7FDEA08C_ge_PRESETTurretState_active)) {
        if ((UnitHasBehavior2(lp_turretunit, "XanthosTurretInactive") == true)) {
            UnitBehaviorRemove(lp_turretunit, "XanthosTurretInactive", 1);
        }

    }
    else {
        if ((UnitHasBehavior2(lp_turretunit, "XanthosTurretInactive") == false)) {
            UnitBehaviorAdd(lp_turretunit, "XanthosTurretInactive", lp_turretunit, 1);
        }

    }
}

bool lib7FDEA08C_gf_AllActiveTurretsDisabled () {
    // Variable Declarations
    int lv_turretIter;

    // Automatic Variable Declarations
    const int autoEC1D8033_ae = 6;
    const int autoEC1D8033_ai = 1;

    // Variable Initialization

    // Implementation
    lv_turretIter = 1;
    for ( ; ( (autoEC1D8033_ai >= 0 && lv_turretIter <= autoEC1D8033_ae) || (autoEC1D8033_ai < 0 && lv_turretIter >= autoEC1D8033_ae) ) ; lv_turretIter += autoEC1D8033_ai ) {
        if ((UnitIsAlive(lib7FDEA08C_gv_xanthosTurretUnit[lv_turretIter]) == true) && (UnitHasBehavior2(lib7FDEA08C_gv_xanthosTurretUnit[lv_turretIter], "MengskXThosCovered") == false) && (UnitHasBehavior2(lib7FDEA08C_gv_xanthosTurretUnit[lv_turretIter], "XanthosTurretInactive") == false)) {
            return false;
        }

    }
    return true;
}

trigger auto_lib7FDEA08C_gf_AttachturrettoXanthos_Trigger = null;
unit auto_lib7FDEA08C_gf_AttachturrettoXanthos_lp_turretunit;
fixed auto_lib7FDEA08C_gf_AttachturrettoXanthos_lp_offsetangle;
fixed auto_lib7FDEA08C_gf_AttachturrettoXanthos_lp_offsetdistance;

void lib7FDEA08C_gf_AttachturrettoXanthos (unit lp_turretunit, fixed lp_offsetangle, fixed lp_offsetdistance) {
    auto_lib7FDEA08C_gf_AttachturrettoXanthos_lp_turretunit = lp_turretunit;
    auto_lib7FDEA08C_gf_AttachturrettoXanthos_lp_offsetangle = lp_offsetangle;
    auto_lib7FDEA08C_gf_AttachturrettoXanthos_lp_offsetdistance = lp_offsetdistance;

    if (auto_lib7FDEA08C_gf_AttachturrettoXanthos_Trigger == null) {
        auto_lib7FDEA08C_gf_AttachturrettoXanthos_Trigger = TriggerCreate("auto_lib7FDEA08C_gf_AttachturrettoXanthos_TriggerFunc");
    }

    TriggerExecute(auto_lib7FDEA08C_gf_AttachturrettoXanthos_Trigger, false, false);
}

bool auto_lib7FDEA08C_gf_AttachturrettoXanthos_TriggerFunc (bool testConds, bool runActions) {
    unit lp_turretunit = auto_lib7FDEA08C_gf_AttachturrettoXanthos_lp_turretunit;
    fixed lp_offsetangle = auto_lib7FDEA08C_gf_AttachturrettoXanthos_lp_offsetangle;
    fixed lp_offsetdistance = auto_lib7FDEA08C_gf_AttachturrettoXanthos_lp_offsetdistance;

    // Automatic Variable Declarations
    // Implementation
    while ((UnitIsAlive(lp_turretunit) == true) && (UnitIsAlive(lib7FDEA08C_gv_xantos) == true)) {
        UnitIssueOrder(lp_turretunit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lib7FDEA08C_gv_xantos), lp_offsetdistance, (UnitGetFacing(lib7FDEA08C_gv_xantos) + lp_offsetangle))), c_orderQueueReplace);
        UnitSetFacing(lp_turretunit, UnitGetFacing(lib7FDEA08C_gv_xantos), 0.0);
        if ((AbilityCommandGetAbility(OrderGetAbilityCommand(UnitOrder(lib7FDEA08C_gv_xantos, 0))) == "NovaXanthosJump")) {
            libNtve_gf_MakeUnitInvulnerable(lp_turretunit, true);
        }
        else {
            libNtve_gf_MakeUnitInvulnerable(lp_turretunit, false);
        }
        Wait(0.0625, c_timeGame);
    }
    if ((UnitIsAlive(lp_turretunit) == true) && (UnitIsAlive(lib7FDEA08C_gv_xantos) == false)) {
        UnitKill(lp_turretunit);
    }

    return true;
}

trigger auto_lib7FDEA08C_gf_AttachTurretToXanthosLocalXYOffset_Trigger = null;
unit auto_lib7FDEA08C_gf_AttachTurretToXanthosLocalXYOffset_lp_attachingUnit;
fixed auto_lib7FDEA08C_gf_AttachTurretToXanthosLocalXYOffset_lp_localOffsetX;
fixed auto_lib7FDEA08C_gf_AttachTurretToXanthosLocalXYOffset_lp_localOffsetY;

void lib7FDEA08C_gf_AttachTurretToXanthosLocalXYOffset (unit lp_attachingUnit, fixed lp_localOffsetX, fixed lp_localOffsetY) {
    auto_lib7FDEA08C_gf_AttachTurretToXanthosLocalXYOffset_lp_attachingUnit = lp_attachingUnit;
    auto_lib7FDEA08C_gf_AttachTurretToXanthosLocalXYOffset_lp_localOffsetX = lp_localOffsetX;
    auto_lib7FDEA08C_gf_AttachTurretToXanthosLocalXYOffset_lp_localOffsetY = lp_localOffsetY;

    if (auto_lib7FDEA08C_gf_AttachTurretToXanthosLocalXYOffset_Trigger == null) {
        auto_lib7FDEA08C_gf_AttachTurretToXanthosLocalXYOffset_Trigger = TriggerCreate("auto_lib7FDEA08C_gf_AttachTurretToXanthosLocalXYOffset_TriggerFunc");
    }

    TriggerExecute(auto_lib7FDEA08C_gf_AttachTurretToXanthosLocalXYOffset_Trigger, false, false);
}

bool auto_lib7FDEA08C_gf_AttachTurretToXanthosLocalXYOffset_TriggerFunc (bool testConds, bool runActions) {
    unit lp_attachingUnit = auto_lib7FDEA08C_gf_AttachTurretToXanthosLocalXYOffset_lp_attachingUnit;
    fixed lp_localOffsetX = auto_lib7FDEA08C_gf_AttachTurretToXanthosLocalXYOffset_lp_localOffsetX;
    fixed lp_localOffsetY = auto_lib7FDEA08C_gf_AttachTurretToXanthosLocalXYOffset_lp_localOffsetY;

    // Variable Declarations
    point lv_mainBodyCenterPoint;
    fixed lv_mainBodyFacing;
    point lv_targetPoint;
    fixed lv_polarOffsetDegreeX;
    point lv_currentPoint;
    fixed lv_distance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_SetBehaviorCount(lp_attachingUnit, "KillsToCaster", lib7FDEA08C_gv_xantos, 1);
    while ((UnitIsAlive(lp_attachingUnit) == true) && (UnitIsAlive(lib7FDEA08C_gv_xantos) == true)) {
        lv_mainBodyCenterPoint = UnitGetPosition(lib7FDEA08C_gv_xantos);
        lv_mainBodyFacing = UnitGetFacing(lib7FDEA08C_gv_xantos);
        lv_polarOffsetDegreeX = (lv_mainBodyFacing - 90.0);
        lv_targetPoint = PointWithOffsetPolar(lv_mainBodyCenterPoint, lp_localOffsetY, lv_mainBodyFacing);
        lv_targetPoint = PointWithOffsetPolar(lv_targetPoint, lp_localOffsetX, lv_polarOffsetDegreeX);
        lv_currentPoint = UnitGetPosition(lp_attachingUnit);
        lv_distance = DistanceBetweenPoints(lv_targetPoint, lv_currentPoint);
        if ((lv_distance < 1)) {
            if ((lv_distance > 0.0)) {
                UnitCreateEffectUnit(lp_attachingUnit, "RemoveMoveOrder", lp_attachingUnit);
                UnitSetPosition(lp_attachingUnit, lv_targetPoint, false);
            }

        }
        else {
            UnitIssueOrder(lp_attachingUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPoint), c_orderQueueReplace);
        }
        UnitSetFacing(lp_attachingUnit, UnitGetFacing(lib7FDEA08C_gv_xantos), 0.0);
        if ((AbilityCommandGetAbility(OrderGetAbilityCommand(UnitOrder(lib7FDEA08C_gv_xantos, 0))) == "NovaXanthosJump")) {
            libNtve_gf_MakeUnitInvulnerable(lp_attachingUnit, true);
        }
        else {
            libNtve_gf_MakeUnitInvulnerable(lp_attachingUnit, false);
        }
        if ((UnitHasBehavior(lib7FDEA08C_gv_xantos, "MengskXanthosTravelMode") == true)) {
            libNtve_gf_SetBehaviorCount(lp_attachingUnit, "MengskXanthosTravelMode", lib7FDEA08C_gv_xantos, 1);
        }
        else {
            libNtve_gf_SetBehaviorCount(lp_attachingUnit, "MengskXanthosTravelMode", lib7FDEA08C_gv_xantos, 0);
        }
        Wait(0.0625, c_timeGame);
    }
    if ((UnitIsAlive(lp_attachingUnit) == true) && (UnitIsAlive(lib7FDEA08C_gv_xantos) == false)) {
        UnitKill(lp_attachingUnit);
    }

    return true;
}

trigger auto_lib7FDEA08C_gf_SetLegLookAtToXanthos_Trigger = null;
unit auto_lib7FDEA08C_gf_SetLegLookAtToXanthos_lp_attachingUnit;

void lib7FDEA08C_gf_SetLegLookAtToXanthos (unit lp_attachingUnit) {
    auto_lib7FDEA08C_gf_SetLegLookAtToXanthos_lp_attachingUnit = lp_attachingUnit;

    if (auto_lib7FDEA08C_gf_SetLegLookAtToXanthos_Trigger == null) {
        auto_lib7FDEA08C_gf_SetLegLookAtToXanthos_Trigger = TriggerCreate("auto_lib7FDEA08C_gf_SetLegLookAtToXanthos_TriggerFunc");
    }

    TriggerExecute(auto_lib7FDEA08C_gf_SetLegLookAtToXanthos_Trigger, false, false);
}

bool auto_lib7FDEA08C_gf_SetLegLookAtToXanthos_TriggerFunc (bool testConds, bool runActions) {
    unit lp_attachingUnit = auto_lib7FDEA08C_gf_SetLegLookAtToXanthos_lp_attachingUnit;

    // Variable Declarations
    fixed lv_lastFacingMain;
    fixed lv_lastFacingLeg;
    fixed lv_currectFacingMain;
    const fixed lv_offset = 5.0;
    fixed lv_nextFacingLeg;
    const fixed lv_delta = 2.0;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lastFacingMain = UnitGetFacing(lib7FDEA08C_gv_xantos);
    lv_lastFacingLeg = UnitGetFacing(lib7FDEA08C_gv_xantos);

    // Implementation
    while ((UnitIsAlive(lp_attachingUnit) == true) && (UnitIsAlive(lib7FDEA08C_gv_xantos) == true)) {
        lv_currectFacingMain = UnitGetFacing(lib7FDEA08C_gv_xantos);
        if (((lv_currectFacingMain - lv_lastFacingLeg) > lv_delta)) {
            lv_nextFacingLeg = (lv_currectFacingMain + lv_delta);
        }
        else if (((lv_lastFacingLeg - lv_currectFacingMain) > lv_delta)) {
            lv_nextFacingLeg = (lv_currectFacingMain - lv_delta);
        }
        else if (true) {
            lv_nextFacingLeg = lv_currectFacingMain;
        }
        UnitSetPosition(lp_attachingUnit, PointWithOffsetPolar(UnitGetPosition(lib7FDEA08C_gv_xantos), lv_offset, lv_nextFacingLeg), true);
        lv_lastFacingLeg = lv_nextFacingLeg;
        Wait(0.0625, c_timeGame);
    }
    if ((UnitIsAlive(lp_attachingUnit) == true) && (UnitIsAlive(lib7FDEA08C_gv_xantos) == false)) {
        UnitKill(lp_attachingUnit);
    }

    return true;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: CC Auto Gather Resource
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_CCAutoGatherResource_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoCF153AB4_g;
    int autoCF153AB4_u;
    unit autoCF153AB4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    if (((UnitGetOwner(EventUnit()) != 1) || (UnitIsAlive(EventUnit()) == false))) {
        return true;
    }

    autoCF153AB4_g = UnitGroup(null, UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(EventUnit()), 8.0), UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCF153AB4_u = UnitGroupCount(autoCF153AB4_g, c_unitCountAll);
    for (;; autoCF153AB4_u -= 1) {
        autoCF153AB4_var = UnitGroupUnitFromEnd(autoCF153AB4_g, autoCF153AB4_u);
        if (autoCF153AB4_var == null) { break; }
        if ((UnitOrderCount(autoCF153AB4_var) == 0)) {
            UnitIssueOrder(autoCF153AB4_var, OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitGroupClosestToPoint(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(autoCF153AB4_var), 12.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(autoCF153AB4_var))), c_orderQueueReplace);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_CCAutoGatherResource_Init () {
    lib7FDEA08C_gt_CCAutoGatherResource = TriggerCreate("lib7FDEA08C_gt_CCAutoGatherResource_Func");
    TriggerAddEventUnitBehaviorChange(lib7FDEA08C_gt_CCAutoGatherResource, null, "AutoGatherResourceDummy", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Author - clear all messages
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_Authorclearallmessages_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_Authorclearallmessages_Init () {
    lib7FDEA08C_gt_Authorclearallmessages = TriggerCreate("lib7FDEA08C_gt_Authorclearallmessages_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_Authorclearallmessages, c_playerAny, "-clc", true);
    TriggerAddEventChatMessage(lib7FDEA08C_gt_Authorclearallmessages, c_playerAny, "clc", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Author - modify behavior
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_Authormodifybehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vAmount;
    int lv_vPlayer;

    // Automatic Variable Declarations
    unitgroup auto072747AE_g;
    int auto072747AE_u;
    unit auto072747AE_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "")) {
        return true;
    }
    else {
        if ((StringWord(EventChatMessage(false), 3) == "")) {
            lv_vAmount = 1;
        }
        else {
            lv_vAmount = StringToInt(StringWord(EventChatMessage(false), 3));
        }
        if ((StringWord(EventChatMessage(false), 4) == "")) {
            lv_vPlayer = EventPlayer();
        }
        else {
            lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 4));
        }
        auto072747AE_g = UnitGroupSelected(EventPlayer());
        auto072747AE_u = UnitGroupCount(auto072747AE_g, c_unitCountAll);
        for (;; auto072747AE_u -= 1) {
            auto072747AE_var = UnitGroupUnitFromEnd(auto072747AE_g, auto072747AE_u);
            if (auto072747AE_var == null) { break; }
            if ((StringWord(EventChatMessage(false), 1) == "-ab")) {
                UnitBehaviorAddPlayer(auto072747AE_var, (StringWord(EventChatMessage(false), 2)), lv_vPlayer, lv_vAmount);
            }

            if ((StringWord(EventChatMessage(false), 1) == "-db")) {
                UnitBehaviorRemove(auto072747AE_var, (StringWord(EventChatMessage(false), 2)), lv_vAmount);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_Authormodifybehavior_Init () {
    lib7FDEA08C_gt_Authormodifybehavior = TriggerCreate("lib7FDEA08C_gt_Authormodifybehavior_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_Authormodifybehavior, c_playerAny, "-ab", false);
    TriggerAddEventChatMessage(lib7FDEA08C_gt_Authormodifybehavior, c_playerAny, "-rb", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Author - Modification and Upgrade
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_AuthorModificationandUpgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vAmount;
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "")) {
        return true;
    }
    else {
        if ((StringWord(EventChatMessage(false), 3) == "")) {
            lv_vAmount = 1;
        }
        else {
            lv_vAmount = StringToInt(StringWord(EventChatMessage(false), 3));
        }
        if ((StringWord(EventChatMessage(false), 4) == "")) {
            lv_vPlayer = EventPlayer();
        }
        else {
            lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 4));
        }
        libNtve_gf_SetUpgradeLevelForPlayer(lv_vPlayer, (StringWord(EventChatMessage(false), 2)), lv_vAmount);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_AuthorModificationandUpgrade_Init () {
    lib7FDEA08C_gt_AuthorModificationandUpgrade = TriggerCreate("lib7FDEA08C_gt_AuthorModificationandUpgrade_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_AuthorModificationandUpgrade, c_playerAny, "-su", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Author - create effect
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_Authorcreateeffect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vAmount;
    int lv_vPlayer;

    // Automatic Variable Declarations
    int autoFED3901F_n;
    int autoFED3901F_i;
    unitgroup auto6D88C37A_g;
    int auto6D88C37A_u;
    unit auto6D88C37A_var;
    int autoB22CA784_n;
    int autoB22CA784_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "")) {
        return true;
    }
    else {
        if ((StringWord(EventChatMessage(false), 3) == "")) {
            lv_vPlayer = EventPlayer();
        }
        else {
            lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 3));
        }
        if ((StringWord(EventChatMessage(false), 4) == "")) {
            lv_vAmount = 1;
        }
        else {
            lv_vAmount = StringToInt(StringWord(EventChatMessage(false), 4));
        }
        if ((StringWord(EventChatMessage(false), 1) == "-ep")) {
            autoFED3901F_n = lv_vAmount;
            for (autoFED3901F_i = 1; autoFED3901F_i <= autoFED3901F_n; autoFED3901F_i += 1) {
                PlayerCreateEffectPoint(lv_vPlayer, (StringWord(EventChatMessage(false), 2)), CameraGetTarget(EventPlayer()));
            }
        }

        if ((StringWord(EventChatMessage(false), 1) == "-eu")) {
            auto6D88C37A_g = UnitGroupSelected(EventPlayer());
            auto6D88C37A_u = UnitGroupCount(auto6D88C37A_g, c_unitCountAll);
            for (;; auto6D88C37A_u -= 1) {
                auto6D88C37A_var = UnitGroupUnitFromEnd(auto6D88C37A_g, auto6D88C37A_u);
                if (auto6D88C37A_var == null) { break; }
                autoB22CA784_n = lv_vAmount;
                for (autoB22CA784_i = 1; autoB22CA784_i <= autoB22CA784_n; autoB22CA784_i += 1) {
                    PlayerCreateEffectUnit(lv_vPlayer, (StringWord(EventChatMessage(false), 2)), auto6D88C37A_var);
                }
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_Authorcreateeffect_Init () {
    lib7FDEA08C_gt_Authorcreateeffect = TriggerCreate("lib7FDEA08C_gt_Authorcreateeffect_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_Authorcreateeffect, c_playerAny, "-ep", false);
    TriggerAddEventChatMessage(lib7FDEA08C_gt_Authorcreateeffect, c_playerAny, "-eu", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Author - Modify skill command
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_AuthorModifyskillcommand_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vAmount;
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "")) {
        return true;
    }
    else {
        if ((StringWord(EventChatMessage(false), 3) == "")) {
            lv_vPlayer = EventPlayer();
        }
        else {
            lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 4));
        }
        if ((StringWord(EventChatMessage(false), 2) == "-ea")) {
            TechTreeAbilityAllow(lv_vPlayer, StringToAbilCmd(StringWord(EventChatMessage(false), 2)), true);
        }

        if ((StringWord(EventChatMessage(false), 2) == "-da")) {
            TechTreeAbilityAllow(lv_vPlayer, StringToAbilCmd(StringWord(EventChatMessage(false), 2)), true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_AuthorModifyskillcommand_Init () {
    lib7FDEA08C_gt_AuthorModifyskillcommand = TriggerCreate("lib7FDEA08C_gt_AuthorModifyskillcommand_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_AuthorModifyskillcommand, c_playerAny, "-ea", false);
    TriggerAddEventChatMessage(lib7FDEA08C_gt_AuthorModifyskillcommand, c_playerAny, "-da", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Author - Data Template
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_AuthorDataTemplate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vAmount;
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "")) {
        return true;
    }
    else {
        if ((StringWord(EventChatMessage(false), 3) == "")) {
            return true;
        }
        else {
            lv_vAmount = StringToInt(StringWord(EventChatMessage(false), 3));
        }
        if ((StringWord(EventChatMessage(false), 4) == "")) {
            lv_vPlayer = EventPlayer();
        }
        else {
            lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 4));
        }
        CatalogReferenceSet(((StringWord(EventChatMessage(false), 2))), lv_vPlayer, StringWord(EventChatMessage(false), 3));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_AuthorDataTemplate_Init () {
    lib7FDEA08C_gt_AuthorDataTemplate = TriggerCreate("lib7FDEA08C_gt_AuthorDataTemplate_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_AuthorDataTemplate, c_playerAny, "-cs", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Author - player attributes
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_Authorplayerattributes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vAmount;
    int lv_vPlayer;
    string lv_string;
    int lv_int;

    // Automatic Variable Declarations
    string auto4CF9365F_val;

    // Variable Initialization
    lv_string = "";

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "")) {
        return true;
    }
    else {
        lv_string = StringCase(StringWord(EventChatMessage(false), 2), false);
        if ((StringWord(EventChatMessage(false), 3) == "")) {
            return true;
        }
        else {
            lv_vAmount = StringToInt(StringWord(EventChatMessage(false), 3));
        }
        if ((StringWord(EventChatMessage(false), 4) == "")) {
            lv_vPlayer = EventPlayer();
        }
        else {
            lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 4));
        }
        auto4CF9365F_val = lv_string;
        if (auto4CF9365F_val == "minerals") {
            lv_int = 0;
        }
        else if (auto4CF9365F_val == "vespene") {
            lv_int = 1;
        }
        else if (auto4CF9365F_val == "terrazine") {
            lv_int = 2;
        }
        else if (auto4CF9365F_val == "custom") {
            lv_int = 3;
        }
        else if (auto4CF9365F_val == "suppliesused") {
            lv_int = 4;
        }
        else if (auto4CF9365F_val == "suppliesmade") {
            lv_int = 5;
        }
        else if (auto4CF9365F_val == "supplieslimit") {
            lv_int = 6;
        }
        else if (auto4CF9365F_val == "credits") {
            lv_int = 7;
        }
        else if (auto4CF9365F_val == "creditsspent") {
            lv_int = 8;
        }
        else if (auto4CF9365F_val == "researchpoints") {
            lv_int = 9;
        }
        else if (auto4CF9365F_val == "researchpointsspent") {
            lv_int = 10;
        }
        else if (auto4CF9365F_val == "curriculumscore") {
            lv_int = 11;
        }
        else if (auto4CF9365F_val == "handicap") {
            lv_int = 11;
        }
        else if (auto4CF9365F_val == "mineralscollected") {
            lv_int = 12;
        }
        else if (auto4CF9365F_val == "vespenecolllected") {
            lv_int = 13;
        }
        else if (auto4CF9365F_val == "terrazinecolllected") {
            lv_int = 14;
        }
        else if (auto4CF9365F_val == "customcolllected") {
            lv_int = 15;
        }
        else if (auto4CF9365F_val == "percentagedamagedealt") {
            lv_int = 16;
        }
        else if (auto4CF9365F_val == "percentagedamagetaken") {
            lv_int = 17;
        }
        else {
            return true;
        }
        PlayerModifyPropertyInt(lv_vPlayer, (lv_int), c_playerPropOperSetTo, lv_vAmount);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_Authorplayerattributes_Init () {
    lib7FDEA08C_gt_Authorplayerattributes = TriggerCreate("lib7FDEA08C_gt_Authorplayerattributes_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_Authorplayerattributes, c_playerAny, "-ps", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Author - Modify weapons
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_AuthorModifyweapons_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vTurret;
    int lv_vPlayer;

    // Automatic Variable Declarations
    unitgroup auto433D39BA_g;
    int auto433D39BA_u;
    unit auto433D39BA_var;

    // Variable Initialization
    lv_vTurret = "";

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "")) {
        return true;
    }
    else {
        if ((StringWord(EventChatMessage(false), 3) == "")) {
            lv_vTurret = "";
        }
        else {
            lv_vTurret = StringWord(EventChatMessage(false), 3);
        }
        auto433D39BA_g = UnitGroupSelected(EventPlayer());
        auto433D39BA_u = UnitGroupCount(auto433D39BA_g, c_unitCountAll);
        for (;; auto433D39BA_u -= 1) {
            auto433D39BA_var = UnitGroupUnitFromEnd(auto433D39BA_g, auto433D39BA_u);
            if (auto433D39BA_var == null) { break; }
            if ((StringWord(EventChatMessage(false), 1) == "-aw")) {
                UnitWeaponAdd(auto433D39BA_var, (StringWord(EventChatMessage(false), 2)), (lv_vTurret));
            }

            if ((StringWord(EventChatMessage(false), 1) == "-rw")) {
                UnitWeaponRemove(auto433D39BA_var, (StringWord(EventChatMessage(false), 2)));
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_AuthorModifyweapons_Init () {
    lib7FDEA08C_gt_AuthorModifyweapons = TriggerCreate("lib7FDEA08C_gt_AuthorModifyweapons_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_AuthorModifyweapons, c_playerAny, "-aw", false);
    TriggerAddEventChatMessage(lib7FDEA08C_gt_AuthorModifyweapons, c_playerAny, "-rw", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Author - modify skills
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_Authormodifyskills_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vAmount;
    int lv_vPlayer;

    // Automatic Variable Declarations
    unitgroup auto66E5CB56_g;
    int auto66E5CB56_u;
    unit auto66E5CB56_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "")) {
        return true;
    }
    else {
        auto66E5CB56_g = UnitGroupSelected(EventPlayer());
        auto66E5CB56_u = UnitGroupCount(auto66E5CB56_g, c_unitCountAll);
        for (;; auto66E5CB56_u -= 1) {
            auto66E5CB56_var = UnitGroupUnitFromEnd(auto66E5CB56_g, auto66E5CB56_u);
            if (auto66E5CB56_var == null) { break; }
            if ((StringWord(EventChatMessage(false), 2) == ("-" + "aa"))) {
                UnitAbilityAdd(auto66E5CB56_var, (StringWord(EventChatMessage(false), 2)));
            }

            if ((StringWord(EventChatMessage(false), 2) == ("-" + "ra"))) {
                UnitAbilityRemove(auto66E5CB56_var, (StringWord(EventChatMessage(false), 2)));
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_Authormodifyskills_Init () {
    lib7FDEA08C_gt_Authormodifyskills = TriggerCreate("lib7FDEA08C_gt_Authormodifyskills_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_Authormodifyskills, c_playerAny, "-aa", false);
    TriggerAddEventChatMessage(lib7FDEA08C_gt_Authormodifyskills, c_playerAny, "-ra", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Kill Units
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_KillUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    unitgroup autoD65957CA_g;
    int autoD65957CA_u;
    unit autoD65957CA_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 2));
    autoD65957CA_g = UnitGroupSelected(EventPlayer());
    autoD65957CA_u = UnitGroupCount(autoD65957CA_g, c_unitCountAll);
    for (;; autoD65957CA_u -= 1) {
        autoD65957CA_var = UnitGroupUnitFromEnd(autoD65957CA_g, autoD65957CA_u);
        if (autoD65957CA_var == null) { break; }
        PlayerCreateEffectUnit(lv_vPlayer, "Damage", autoD65957CA_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_KillUnits_Init () {
    lib7FDEA08C_gt_UT_KillUnits = TriggerCreate("lib7FDEA08C_gt_UT_KillUnits_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_UT_KillUnits, c_playerAny, "-kill", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Remove
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_Remove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vInnerUnit;

    // Automatic Variable Declarations
    unitgroup autoB589D48D_g;
    int autoB589D48D_u;
    unit autoB589D48D_var;
    const int auto3392E0E5_ae = 10;
    int auto3392E0E5_var;
    unitgroup autoED6769A2_g;
    int autoED6769A2_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB589D48D_g = UnitGroupSelected(EventPlayer());
    autoB589D48D_u = UnitGroupCount(autoB589D48D_g, c_unitCountAll);
    for (;; autoB589D48D_u -= 1) {
        autoB589D48D_var = UnitGroupUnitFromEnd(autoB589D48D_g, autoB589D48D_u);
        if (autoB589D48D_var == null) { break; }
        auto3392E0E5_var = 0;
        for ( ; auto3392E0E5_var <= auto3392E0E5_ae; auto3392E0E5_var += 1 ) {
            if ((libHots_gf_TextTagForUnit(autoB589D48D_var, auto3392E0E5_var) != c_textTagNone)) {
                TextTagDestroy(libHots_gf_TextTagForUnit(autoB589D48D_var, auto3392E0E5_var));
            }

        }
        autoED6769A2_g = UnitCargoGroup(autoB589D48D_var);
        autoED6769A2_u = UnitGroupCount(autoED6769A2_g, c_unitCountAll);
        for (;; autoED6769A2_u -= 1) {
            lv_vInnerUnit = UnitGroupUnitFromEnd(autoED6769A2_g, autoED6769A2_u);
            if (lv_vInnerUnit == null) { break; }
            UnitRemove(lv_vInnerUnit);
        }
        UnitRemove(autoB589D48D_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_Remove_Init () {
    lib7FDEA08C_gt_UT_Remove = TriggerCreate("lib7FDEA08C_gt_UT_Remove_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_UT_Remove, c_playerAny, "-remove", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Supply
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_Supply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vSupply;
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vSupply = StringToInt(StringWord(EventChatMessage(false), 2));
    lv_vPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringToInt(StringWord(EventChatMessage(false), 3)) >= 2)) {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 3));
    }

    PlayerModifyPropertyInt(lv_vPlayer, c_playerPropSuppliesLimit, c_playerPropOperSetTo, lv_vSupply);
    TextExpressionSetToken("Param/Expression/lib_7FDEA08C_1436768C", "A", IntToText(lv_vSupply));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_7FDEA08C_1436768C"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_Supply_Init () {
    lib7FDEA08C_gt_UT_Supply = TriggerCreate("lib7FDEA08C_gt_UT_Supply_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_UT_Supply, c_playerAny, "-supply", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Give
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_Give_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        lv_vPlayer = 3;
    }
    else {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 2));
    }
    libNtve_gf_RescueUnit2(UnitGroupSelected(EventPlayer()), lv_vPlayer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_Give_Init () {
    lib7FDEA08C_gt_UT_Give = TriggerCreate("lib7FDEA08C_gt_UT_Give_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_UT_Give, c_playerAny, "-give", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Spawn Units
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_SpawnUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vAmount;
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((StringWord(EventChatMessage(false), 2) != ""))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 3) == "")) {
        lv_vAmount = 1;
    }
    else {
        lv_vAmount = StringToInt(StringWord(EventChatMessage(false), 3));
    }
    if ((StringWord(EventChatMessage(false), 4) == "")) {
        lv_vPlayer = EventPlayer();
    }
    else {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 4));
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(lv_vAmount, UnitTypeFromString(StringWord(EventChatMessage(false), 2)), 0, lv_vPlayer, CameraGetTarget(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_SpawnUnits_Init () {
    lib7FDEA08C_gt_UT_SpawnUnits = TriggerCreate("lib7FDEA08C_gt_UT_SpawnUnits_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_UT_SpawnUnits, c_playerAny, "-spawn", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Teleport
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_Teleport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8D755917_g;
    int auto8D755917_u;
    unit auto8D755917_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto8D755917_g = UnitGroupSelected(EventPlayer());
    auto8D755917_u = UnitGroupCount(auto8D755917_g, c_unitCountAll);
    for (;; auto8D755917_u -= 1) {
        auto8D755917_var = UnitGroupUnitFromEnd(auto8D755917_g, auto8D755917_u);
        if (auto8D755917_var == null) { break; }
        UnitSetPosition(auto8D755917_var, CameraGetTarget(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_Teleport_Init () {
    lib7FDEA08C_gt_UT_Teleport = TriggerCreate("lib7FDEA08C_gt_UT_Teleport_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_UT_Teleport, c_playerAny, "-teleport", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_XP
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_XP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vXPAmount;

    // Automatic Variable Declarations
    unitgroup autoCC107801_g;
    int autoCC107801_u;
    unit autoCC107801_var;

    // Variable Initialization
    lv_vXPAmount = StringToFixed(StringWord(EventChatMessage(false), 2));

    // Actions
    if (!runActions) {
        return true;
    }

    autoCC107801_g = UnitGroupSelected(EventPlayer());
    autoCC107801_u = UnitGroupCount(autoCC107801_g, c_unitCountAll);
    for (;; autoCC107801_u -= 1) {
        autoCC107801_var = UnitGroupUnitFromEnd(autoCC107801_g, autoCC107801_u);
        if (autoCC107801_var == null) { break; }
        UnitXPAddXP(autoCC107801_var, null, lv_vXPAmount);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_XP_Init () {
    lib7FDEA08C_gt_UT_XP = TriggerCreate("lib7FDEA08C_gt_UT_XP_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_UT_XP, c_playerAny, "-xp", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_MissileMovers
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_MissileMovers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogBehavior, "MissileCoef", "Modification.TimeScale", EventPlayer(), StringWord(EventChatMessage(false), 2));
    UnitGroupAddUnitGroup(lib7FDEA08C_gv_uT_MissileCreators, UnitGroupSelected(EventPlayer()));
    TriggerEnable(lib7FDEA08C_gt_UT_MissileCreated, true);
    if ((StringWord(EventChatMessage(false), 2) == "clear")) {
        UnitGroupClear(lib7FDEA08C_gv_uT_MissileCreators);
        TriggerEnable(lib7FDEA08C_gt_UT_MissileCreated, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_MissileMovers_Init () {
    lib7FDEA08C_gt_UT_MissileMovers = TriggerCreate("lib7FDEA08C_gt_UT_MissileMovers_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_UT_MissileMovers, c_playerAny, "-mm", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_MissileCreated
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_MissileCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib7FDEA08C_gv_uT_MissileCreators, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnitCreatedUnit()), c_unitFlagMissile) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnitCreatedUnit(), "MissileCoef", 1, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_MissileCreated_Init () {
    lib7FDEA08C_gt_UT_MissileCreated = TriggerCreate("lib7FDEA08C_gt_UT_MissileCreated_Func");
    TriggerEnable(lib7FDEA08C_gt_UT_MissileCreated, false);
    TriggerAddEventUnitCreated(lib7FDEA08C_gt_UT_MissileCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Height
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_Height_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto22545660_g;
    int auto22545660_u;
    unit auto22545660_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto22545660_g = UnitGroupSelected(EventPlayer());
    auto22545660_u = UnitGroupCount(auto22545660_g, c_unitCountAll);
    for (;; auto22545660_u -= 1) {
        auto22545660_var = UnitGroupUnitFromEnd(auto22545660_g, auto22545660_u);
        if (auto22545660_var == null) { break; }
        UnitSetPropertyFixed(auto22545660_var, c_unitPropHeight, StringToFixed(StringWord(EventChatMessage(false), 2)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_Height_Init () {
    lib7FDEA08C_gt_UT_Height = TriggerCreate("lib7FDEA08C_gt_UT_Height_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_UT_Height, c_playerAny, "-height", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_AttackSpeed
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_AttackSpeed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    unitgroup autoEA6434CF_g;
    int autoEA6434CF_u;
    unit autoEA6434CF_var;
    int autoBC92E7EF_ae;
    const int autoBC92E7EF_ai = 1;
    unitgroup autoB179CD82_g;
    int autoB179CD82_u;
    unit autoB179CD82_var;
    int auto9046445E_ae;
    const int auto9046445E_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        autoB179CD82_g = UnitGroupSelected(EventPlayer());
        autoB179CD82_u = UnitGroupCount(autoB179CD82_g, c_unitCountAll);
        for (;; autoB179CD82_u -= 1) {
            autoB179CD82_var = UnitGroupUnitFromEnd(autoB179CD82_g, autoB179CD82_u);
            if (autoB179CD82_var == null) { break; }
            auto9046445E_ae = UnitWeaponCount(autoB179CD82_var);
            lv_a = 1;
            for ( ; ( (auto9046445E_ai >= 0 && lv_a <= auto9046445E_ae) || (auto9046445E_ai < 0 && lv_a >= auto9046445E_ae) ) ; lv_a += auto9046445E_ai ) {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(autoB179CD82_var, lv_a), "RateMultiplier", UnitGetOwner(autoB179CD82_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
        }
    }
    else {
        autoEA6434CF_g = UnitGroupSelected(EventPlayer());
        autoEA6434CF_u = UnitGroupCount(autoEA6434CF_g, c_unitCountAll);
        for (;; autoEA6434CF_u -= 1) {
            autoEA6434CF_var = UnitGroupUnitFromEnd(autoEA6434CF_g, autoEA6434CF_u);
            if (autoEA6434CF_var == null) { break; }
            autoBC92E7EF_ae = UnitWeaponCount(autoEA6434CF_var);
            lv_a = 1;
            for ( ; ( (autoBC92E7EF_ai >= 0 && lv_a <= autoBC92E7EF_ae) || (autoBC92E7EF_ai < 0 && lv_a >= autoBC92E7EF_ae) ) ; lv_a += autoBC92E7EF_ai ) {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(autoEA6434CF_var, lv_a), "RateMultiplier", UnitGetOwner(autoEA6434CF_var), "1", c_upgradeOperationSet);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_AttackSpeed_Init () {
    lib7FDEA08C_gt_UT_AttackSpeed = TriggerCreate("lib7FDEA08C_gt_UT_AttackSpeed_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_UT_AttackSpeed, c_playerAny, "-as", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Damage
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_Damage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_percent;

    // Automatic Variable Declarations
    unitgroup auto45A01D67_g;
    int auto45A01D67_u;
    unit auto45A01D67_var;

    // Variable Initialization
    lv_percent = StringToInt(StringWord(EventChatMessage(false), 2));

    // Actions
    if (!runActions) {
        return true;
    }

    lv_percent /= 10;
    lv_percent *= 10;
    auto45A01D67_g = UnitGroupSelected(EventPlayer());
    auto45A01D67_u = UnitGroupCount(auto45A01D67_g, c_unitCountAll);
    for (;; auto45A01D67_u -= 1) {
        auto45A01D67_var = UnitGroupUnitFromEnd(auto45A01D67_g, auto45A01D67_u);
        if (auto45A01D67_var == null) { break; }
        UnitBehaviorRemovePlayer(auto45A01D67_var, "DamageMultiplied", UnitGetOwner(auto45A01D67_var), UnitBehaviorCount(auto45A01D67_var, "DamageMultiplied"));
        UnitBehaviorRemovePlayer(auto45A01D67_var, "DamageMultipliedNegative", UnitGetOwner(auto45A01D67_var), UnitBehaviorCount(auto45A01D67_var, "DamageMultipliedNegative"));
        if ((lv_percent <= 90)) {
            UnitBehaviorAddPlayer(auto45A01D67_var, "DamageMultipliedNegative", UnitGetOwner(auto45A01D67_var), (((100 - lv_percent) / 10)));
        }
        else {
            UnitBehaviorAddPlayer(auto45A01D67_var, "DamageMultiplied", UnitGetOwner(auto45A01D67_var), (((lv_percent - 100) / 10)));
        }
    }
    TextExpressionSetToken("Param/Expression/lib_7FDEA08C_9FF8848E", "A", IntToText(lv_percent));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_7FDEA08C_9FF8848E"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_Damage_Init () {
    lib7FDEA08C_gt_UT_Damage = TriggerCreate("lib7FDEA08C_gt_UT_Damage_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_UT_Damage, c_playerAny, "-dmg", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Life
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_Life_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoCE49CBE8_g;
    int autoCE49CBE8_u;
    unit autoCE49CBE8_var;
    unitgroup autoE8E8032C_g;
    int autoE8E8032C_u;
    unit autoE8E8032C_var;
    unitgroup auto6E33BD1E_g;
    int auto6E33BD1E_u;
    unit auto6E33BD1E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        autoCE49CBE8_g = UnitGroupSelected(EventPlayer());
        autoCE49CBE8_u = UnitGroupCount(autoCE49CBE8_g, c_unitCountAll);
        for (;; autoCE49CBE8_u -= 1) {
            autoCE49CBE8_var = UnitGroupUnitFromEnd(autoCE49CBE8_g, autoCE49CBE8_u);
            if (autoCE49CBE8_var == null) { break; }
            UnitSetPropertyFixed(autoCE49CBE8_var, c_unitPropLifeMax, UnitTypeGetProperty(UnitGetType(autoCE49CBE8_var), c_unitPropLifeMax));
            UnitSetPropertyFixed(autoCE49CBE8_var, c_unitPropShieldsMax, UnitTypeGetProperty(UnitGetType(autoCE49CBE8_var), c_unitPropShieldsMax));
            UnitSetPropertyFixed(autoCE49CBE8_var, c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(autoCE49CBE8_var, c_unitPropShieldsPercent, 100.0);
        }
    }
    else {
        if ((StringWord(EventChatMessage(false), 3) == "2")) {
            autoE8E8032C_g = UnitGroupSelected(EventPlayer());
            autoE8E8032C_u = UnitGroupCount(autoE8E8032C_g, c_unitCountAll);
            for (;; autoE8E8032C_u -= 1) {
                autoE8E8032C_var = UnitGroupUnitFromEnd(autoE8E8032C_g, autoE8E8032C_u);
                if (autoE8E8032C_var == null) { break; }
                UnitSetPropertyFixed(autoE8E8032C_var, c_unitPropShieldsMax, StringToFixed(StringWord(EventChatMessage(false), 2)));
                UnitSetPropertyFixed(autoE8E8032C_var, c_unitPropShieldsPercent, 100.0);
            }
        }
        else {
            auto6E33BD1E_g = UnitGroupSelected(EventPlayer());
            auto6E33BD1E_u = UnitGroupCount(auto6E33BD1E_g, c_unitCountAll);
            for (;; auto6E33BD1E_u -= 1) {
                auto6E33BD1E_var = UnitGroupUnitFromEnd(auto6E33BD1E_g, auto6E33BD1E_u);
                if (auto6E33BD1E_var == null) { break; }
                UnitSetPropertyFixed(auto6E33BD1E_var, c_unitPropLifeMax, StringToFixed(StringWord(EventChatMessage(false), 2)));
                UnitSetPropertyFixed(auto6E33BD1E_var, c_unitPropLifePercent, 100.0);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_Life_Init () {
    lib7FDEA08C_gt_UT_Life = TriggerCreate("lib7FDEA08C_gt_UT_Life_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_UT_Life, c_playerAny, "-life", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Energy
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_Energy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto9F11A172_g;
    int auto9F11A172_u;
    unit auto9F11A172_var;
    unitgroup auto84B314B2_g;
    int auto84B314B2_u;
    unit auto84B314B2_var;
    unitgroup auto09AB251D_g;
    int auto09AB251D_u;
    unit auto09AB251D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        auto9F11A172_g = UnitGroupSelected(EventPlayer());
        auto9F11A172_u = UnitGroupCount(auto9F11A172_g, c_unitCountAll);
        for (;; auto9F11A172_u -= 1) {
            auto9F11A172_var = UnitGroupUnitFromEnd(auto9F11A172_g, auto9F11A172_u);
            if (auto9F11A172_var == null) { break; }
            UnitSetPropertyFixed(auto9F11A172_var, c_unitPropEnergyMax, UnitTypeGetProperty(UnitGetType(auto9F11A172_var), c_unitPropEnergyMax));
            UnitSetPropertyFixed(auto9F11A172_var, c_unitPropLifeRegen, UnitTypeGetProperty(UnitGetType(auto9F11A172_var), c_unitPropEnergyRegen));
            UnitSetPropertyFixed(auto9F11A172_var, c_unitPropEnergyPercent, 100.0);
        }
    }
    else {
        if ((StringWord(EventChatMessage(false), 3) == "regen")) {
            auto84B314B2_g = UnitGroupSelected(EventPlayer());
            auto84B314B2_u = UnitGroupCount(auto84B314B2_g, c_unitCountAll);
            for (;; auto84B314B2_u -= 1) {
                auto84B314B2_var = UnitGroupUnitFromEnd(auto84B314B2_g, auto84B314B2_u);
                if (auto84B314B2_var == null) { break; }
                UnitSetPropertyFixed(auto84B314B2_var, c_unitPropEnergyRegen, StringToFixed(StringWord(EventChatMessage(false), 2)));
            }
        }
        else {
            auto09AB251D_g = UnitGroupSelected(EventPlayer());
            auto09AB251D_u = UnitGroupCount(auto09AB251D_g, c_unitCountAll);
            for (;; auto09AB251D_u -= 1) {
                auto09AB251D_var = UnitGroupUnitFromEnd(auto09AB251D_g, auto09AB251D_u);
                if (auto09AB251D_var == null) { break; }
                UnitSetPropertyFixed(auto09AB251D_var, c_unitPropEnergyMax, StringToFixed(StringWord(EventChatMessage(false), 2)));
                UnitSetPropertyFixed(auto09AB251D_var, c_unitPropEnergyPercent, 100.0);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_Energy_Init () {
    lib7FDEA08C_gt_UT_Energy = TriggerCreate("lib7FDEA08C_gt_UT_Energy_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_UT_Energy, c_playerAny, "-energy", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Movement Speed
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_MovementSpeed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7469166C_g;
    int auto7469166C_u;
    unit auto7469166C_var;
    unitgroup auto4EF5C5BB_g;
    int auto4EF5C5BB_u;
    unit auto4EF5C5BB_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        auto7469166C_g = UnitGroupSelected(EventPlayer());
        auto7469166C_u = UnitGroupCount(auto7469166C_g, c_unitCountAll);
        for (;; auto7469166C_u -= 1) {
            auto7469166C_var = UnitGroupUnitFromEnd(auto7469166C_g, auto7469166C_u);
            if (auto7469166C_var == null) { break; }
            UnitSetPropertyFixed(auto7469166C_var, c_unitPropMovementSpeed, UnitTypeGetProperty(UnitGetType(auto7469166C_var), c_unitPropMovementSpeed));
        }
    }
    else {
        auto4EF5C5BB_g = UnitGroupSelected(EventPlayer());
        auto4EF5C5BB_u = UnitGroupCount(auto4EF5C5BB_g, c_unitCountAll);
        for (;; auto4EF5C5BB_u -= 1) {
            auto4EF5C5BB_var = UnitGroupUnitFromEnd(auto4EF5C5BB_g, auto4EF5C5BB_u);
            if (auto4EF5C5BB_var == null) { break; }
            UnitSetPropertyFixed(auto4EF5C5BB_var, c_unitPropMovementSpeed, StringToFixed(StringWord(EventChatMessage(false), 2)));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_MovementSpeed_Init () {
    lib7FDEA08C_gt_UT_MovementSpeed = TriggerCreate("lib7FDEA08C_gt_UT_MovementSpeed_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_UT_MovementSpeed, c_playerAny, "-ms", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Acceleration
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_Acceleration_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto20EB9986_g;
    int auto20EB9986_u;
    unit auto20EB9986_var;
    unitgroup autoBE370916_g;
    int autoBE370916_u;
    unit autoBE370916_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        auto20EB9986_g = UnitGroupSelected(EventPlayer());
        auto20EB9986_u = UnitGroupCount(auto20EB9986_g, c_unitCountAll);
        for (;; auto20EB9986_u -= 1) {
            auto20EB9986_var = UnitGroupUnitFromEnd(auto20EB9986_g, auto20EB9986_u);
            if (auto20EB9986_var == null) { break; }
            CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(auto20EB9986_var), "Acceleration", EventPlayer(), CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(auto20EB9986_var), "Acceleration", 7), c_upgradeOperationSet);
            TextTagCreate(StringToText(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(auto20EB9986_var), "Acceleration", 3)), 24, UnitGetPosition(auto20EB9986_var), 1.0, true, false, PlayerGroupAll());
            TextTagAttachToUnit(TextTagLastCreated(), auto20EB9986_var, 1.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 15.0);
            TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
        }
    }
    else {
        autoBE370916_g = UnitGroupSelected(EventPlayer());
        autoBE370916_u = UnitGroupCount(autoBE370916_g, c_unitCountAll);
        for (;; autoBE370916_u -= 1) {
            autoBE370916_var = UnitGroupUnitFromEnd(autoBE370916_g, autoBE370916_u);
            if (autoBE370916_var == null) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(autoBE370916_var), "Acceleration", EventPlayer(), StringWord(EventChatMessage(false), 2));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_Acceleration_Init () {
    lib7FDEA08C_gt_UT_Acceleration = TriggerCreate("lib7FDEA08C_gt_UT_Acceleration_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_UT_Acceleration, c_playerAny, "-acc", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Range
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_Range_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto57C4653D_g;
    int auto57C4653D_u;
    unit auto57C4653D_var;
    int autoEC8E62D8_ae;
    const int autoEC8E62D8_ai = 1;
    unitgroup auto9806965B_g;
    int auto9806965B_u;
    unit auto9806965B_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        auto9806965B_g = UnitGroupSelected(EventPlayer());
        auto9806965B_u = UnitGroupCount(auto9806965B_g, c_unitCountAll);
        for (;; auto9806965B_u -= 1) {
            auto9806965B_var = UnitGroupUnitFromEnd(auto9806965B_g, auto9806965B_u);
            if (auto9806965B_var == null) { break; }
            if ((StringWord(EventChatMessage(false), 3) != null)) {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(auto9806965B_var, StringToInt(StringWord(EventChatMessage(false), 3))), "Range", UnitGetOwner(auto9806965B_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
            else {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(auto9806965B_var, 1), "Range", UnitGetOwner(auto9806965B_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
        }
    }
    else {
        auto57C4653D_g = UnitGroupSelected(EventPlayer());
        auto57C4653D_u = UnitGroupCount(auto57C4653D_g, c_unitCountAll);
        for (;; auto57C4653D_u -= 1) {
            auto57C4653D_var = UnitGroupUnitFromEnd(auto57C4653D_g, auto57C4653D_u);
            if (auto57C4653D_var == null) { break; }
            autoEC8E62D8_ae = UnitWeaponCount(auto57C4653D_var);
            lv_i = 1;
            for ( ; ( (autoEC8E62D8_ai >= 0 && lv_i <= autoEC8E62D8_ae) || (autoEC8E62D8_ai < 0 && lv_i >= autoEC8E62D8_ae) ) ; lv_i += autoEC8E62D8_ai ) {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(auto57C4653D_var, lv_i), "Range", UnitGetOwner(auto57C4653D_var), CatalogFieldValueGet(c_gameCatalogWeapon, UnitWeaponGet(auto57C4653D_var, lv_i), "Range", 7), c_upgradeOperationSet);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_Range_Init () {
    lib7FDEA08C_gt_UT_Range = TriggerCreate("lib7FDEA08C_gt_UT_Range_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_UT_Range, c_playerAny, "-range", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ARange
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_ARange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vAbility;
    string lv_vv;

    // Automatic Variable Declarations
    unitgroup autoB7805D2C_g;
    int autoB7805D2C_u;
    unit autoB7805D2C_var;
    unit autoBEBE33A8_unit;
    int autoBEBE33A8_i;
    unitgroup autoB8BFF5D2_g;
    int autoB8BFF5D2_u;
    unit autoB8BFF5D2_var;
    unit auto10A68C96_unit;
    int auto10A68C96_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        autoB7805D2C_g = UnitGroupSelected(EventPlayer());
        autoB7805D2C_u = UnitGroupCount(autoB7805D2C_g, c_unitCountAll);
        for (;; autoB7805D2C_u -= 1) {
            autoB7805D2C_var = UnitGroupUnitFromEnd(autoB7805D2C_g, autoB7805D2C_u);
            if (autoB7805D2C_var == null) { break; }
            autoBEBE33A8_unit = autoB7805D2C_var;
            autoBEBE33A8_i = 1;
            for ( ; autoBEBE33A8_i <= UnitAbilityCount(autoBEBE33A8_unit) ; autoBEBE33A8_i += 1 ) {
                lv_vAbility = UnitAbilityGet(autoBEBE33A8_unit, autoBEBE33A8_i);
                if ((AbilityClass(lv_vAbility) != c_classIdCAbilAttack) && (AbilityClass(lv_vAbility) != c_classIdCAbilMove) && (AbilityClass(lv_vAbility) != c_classIdCAbilStop) && (AbilityClass(lv_vAbility) != c_classIdCAbilMorph) && (AbilityClass(lv_vAbility) != c_classIdCAbilRally)) {
                    lv_vv = (lv_vAbility);
                    CatalogFieldValueSet(c_gameCatalogAbil, lv_vv, "Range[" + IntToString(0) + "]", UnitGetOwner(autoB7805D2C_var), StringWord(EventChatMessage(false), 2));
                    TextExpressionSetToken("Param/Expression/lib_7FDEA08C_8F1331E2", "A", StringToText((lv_vAbility)));
                    TextExpressionSetToken("Param/Expression/lib_7FDEA08C_8F1331E2", "C", StringToText(StringWord(EventChatMessage(false), 2)));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_7FDEA08C_8F1331E2"), true);
                }

            }
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_7FDEA08C_4658E387"));
        autoB8BFF5D2_g = UnitGroupSelected(EventPlayer());
        autoB8BFF5D2_u = UnitGroupCount(autoB8BFF5D2_g, c_unitCountAll);
        for (;; autoB8BFF5D2_u -= 1) {
            autoB8BFF5D2_var = UnitGroupUnitFromEnd(autoB8BFF5D2_g, autoB8BFF5D2_u);
            if (autoB8BFF5D2_var == null) { break; }
            auto10A68C96_unit = autoB8BFF5D2_var;
            auto10A68C96_i = 1;
            for ( ; auto10A68C96_i <= UnitAbilityCount(auto10A68C96_unit) ; auto10A68C96_i += 1 ) {
                lv_vAbility = UnitAbilityGet(auto10A68C96_unit, auto10A68C96_i);
                if ((AbilityClass(lv_vAbility) != c_classIdCAbilAttack) && (AbilityClass(lv_vAbility) != c_classIdCAbilMove) && (AbilityClass(lv_vAbility) != c_classIdCAbilStop) && (AbilityClass(lv_vAbility) != c_classIdCAbilMorph) && (AbilityClass(lv_vAbility) != c_classIdCAbilRally)) {
                    lv_vv = (lv_vAbility);
                    CatalogFieldValueSet(c_gameCatalogAbil, lv_vv, "Range[" + IntToString(0) + "]", UnitGetOwner(autoB8BFF5D2_var), CatalogFieldValueGet(c_gameCatalogAbil, lv_vv, "Range[" + IntToString(0) + "]", 0));
                    TextExpressionSetToken("Param/Expression/lib_7FDEA08C_9F4E09B3", "A", StringToText((lv_vAbility)));
                    TextExpressionSetToken("Param/Expression/lib_7FDEA08C_9F4E09B3", "C", StringToText(StringWord(EventChatMessage(false), 2)));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_7FDEA08C_9F4E09B3"), false);
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_ARange_Init () {
    lib7FDEA08C_gt_UT_ARange = TriggerCreate("lib7FDEA08C_gt_UT_ARange_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_UT_ARange, c_playerAny, "-arange", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Armor
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_Armor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4F17E96A_g;
    int auto4F17E96A_u;
    unit auto4F17E96A_var;
    unitgroup auto921B0CAC_g;
    int auto921B0CAC_u;
    unit auto921B0CAC_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        auto921B0CAC_g = UnitGroupSelected(EventPlayer());
        auto921B0CAC_u = UnitGroupCount(auto921B0CAC_g, c_unitCountAll);
        for (;; auto921B0CAC_u -= 1) {
            auto921B0CAC_var = UnitGroupUnitFromEnd(auto921B0CAC_g, auto921B0CAC_u);
            if (auto921B0CAC_var == null) { break; }
            if ((StringWord(EventChatMessage(false), 3) != null)) {
                CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(auto921B0CAC_var), "ShieldArmor", UnitGetOwner(auto921B0CAC_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
            else {
                CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(auto921B0CAC_var), "LifeArmor", UnitGetOwner(auto921B0CAC_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
        }
    }
    else {
        auto4F17E96A_g = UnitGroupSelected(EventPlayer());
        auto4F17E96A_u = UnitGroupCount(auto4F17E96A_g, c_unitCountAll);
        for (;; auto4F17E96A_u -= 1) {
            auto4F17E96A_var = UnitGroupUnitFromEnd(auto4F17E96A_g, auto4F17E96A_u);
            if (auto4F17E96A_var == null) { break; }
            CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(auto4F17E96A_var), "LifeArmor", UnitGetOwner(auto4F17E96A_var), CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(auto4F17E96A_var), "LifeArmor", 7), c_upgradeOperationSet);
            CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(auto4F17E96A_var), "ShieldArmor", UnitGetOwner(auto4F17E96A_var), CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(auto4F17E96A_var), "ShieldArmor", 7), c_upgradeOperationSet);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_Armor_Init () {
    lib7FDEA08C_gt_UT_Armor = TriggerCreate("lib7FDEA08C_gt_UT_Armor_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_UT_Armor, c_playerAny, "-armor", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_TintColor
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_TintColor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0BBDF0C6_g;
    int auto0BBDF0C6_u;
    unit auto0BBDF0C6_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto0BBDF0C6_g = UnitGroupSelected(EventPlayer());
    auto0BBDF0C6_u = UnitGroupCount(auto0BBDF0C6_g, c_unitCountAll);
    for (;; auto0BBDF0C6_u -= 1) {
        auto0BBDF0C6_var = UnitGroupUnitFromEnd(auto0BBDF0C6_g, auto0BBDF0C6_u);
        if (auto0BBDF0C6_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto0BBDF0C6_var, (("SetTintColor " + StringWord(EventChatMessage(false), 2))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_TintColor_Init () {
    lib7FDEA08C_gt_UT_TintColor = TriggerCreate("lib7FDEA08C_gt_UT_TintColor_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_UT_TintColor, c_playerAny, "-tint", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Behavior
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_Behavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vBehavior;
    int lv_vAmount;

    // Automatic Variable Declarations
    unitgroup autoF67B4367_g;
    int autoF67B4367_u;
    unit autoF67B4367_var;
    unitgroup autoD8409604_g;
    int autoD8409604_u;
    unit autoD8409604_var;

    // Variable Initialization
    lv_vBehavior = (StringWord(EventChatMessage(false), 2));
    lv_vAmount = StringToInt(StringWord(EventChatMessage(false), 1));

    // Conditions
    if (testConds) {
        if (!((lv_vBehavior != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_vAmount == 0)) {
        lv_vAmount = 1;
    }

    if ((lv_vAmount > 0)) {
        TextExpressionSetToken("Param/Expression/lib_7FDEA08C_74919490", "A", IntToText(lv_vAmount));
        TextExpressionSetToken("Param/Expression/lib_7FDEA08C_74919490", "B", StringToText((lv_vBehavior)));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_7FDEA08C_74919490"));
        autoF67B4367_g = UnitGroupSelected(EventPlayer());
        autoF67B4367_u = UnitGroupCount(autoF67B4367_g, c_unitCountAll);
        for (;; autoF67B4367_u -= 1) {
            autoF67B4367_var = UnitGroupUnitFromEnd(autoF67B4367_g, autoF67B4367_u);
            if (autoF67B4367_var == null) { break; }
            UnitBehaviorAddPlayer(autoF67B4367_var, lv_vBehavior, EventPlayer(), 1);
        }
    }
    else if ((lv_vAmount < 0)) {
        TextExpressionSetToken("Param/Expression/lib_7FDEA08C_677F9FEE", "A", IntToText(lv_vAmount));
        TextExpressionSetToken("Param/Expression/lib_7FDEA08C_677F9FEE", "B", StringToText((lv_vBehavior)));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_7FDEA08C_677F9FEE"));
        autoD8409604_g = UnitGroupSelected(EventPlayer());
        autoD8409604_u = UnitGroupCount(autoD8409604_g, c_unitCountAll);
        for (;; autoD8409604_u -= 1) {
            autoD8409604_var = UnitGroupUnitFromEnd(autoD8409604_g, autoD8409604_u);
            if (autoD8409604_var == null) { break; }
            UnitBehaviorRemovePlayer(autoD8409604_var, lv_vBehavior, EventPlayer(), lv_vAmount);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_Behavior_Init () {
    lib7FDEA08C_gt_UT_Behavior = TriggerCreate("lib7FDEA08C_gt_UT_Behavior_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_UT_Behavior, c_playerAny, "-behavior", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Scale
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_Scale_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3189E2F0_g;
    int auto3189E2F0_u;
    unit auto3189E2F0_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto3189E2F0_g = UnitGroupSelected(EventPlayer());
    auto3189E2F0_u = UnitGroupCount(auto3189E2F0_g, c_unitCountAll);
    for (;; auto3189E2F0_u -= 1) {
        auto3189E2F0_var = UnitGroupUnitFromEnd(auto3189E2F0_g, auto3189E2F0_u);
        if (auto3189E2F0_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto3189E2F0_var, (("SetScale " + StringWord(EventChatMessage(false), 2))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_Scale_Init () {
    lib7FDEA08C_gt_UT_Scale = TriggerCreate("lib7FDEA08C_gt_UT_Scale_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_UT_Scale, c_playerAny, "-scale", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ActorMsg
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_ActorMsg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1F794692_g;
    int auto1F794692_u;
    unit auto1F794692_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto1F794692_g = UnitGroupSelected(EventPlayer());
    auto1F794692_u = UnitGroupCount(auto1F794692_g, c_unitCountAll);
    for (;; auto1F794692_u -= 1) {
        auto1F794692_var = UnitGroupUnitFromEnd(auto1F794692_g, auto1F794692_u);
        if (auto1F794692_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto1F794692_var, (StringSub(EventChatMessage(false), (StringLength(StringWord(EventChatMessage(false), 1))+1), StringLength(EventChatMessage(false)))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_ActorMsg_Init () {
    lib7FDEA08C_gt_UT_ActorMsg = TriggerCreate("lib7FDEA08C_gt_UT_ActorMsg_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_UT_ActorMsg, c_playerAny, "-actorsend", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastConstruction
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_FastConstruction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib7FDEA08C_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitProgressUnit()) == 1) || (UnitGetOwner(EventUnitProgressUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnitProgressUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_FastConstruction_Init () {
    lib7FDEA08C_gt_UT_FastConstruction = TriggerCreate("lib7FDEA08C_gt_UT_FastConstruction_Func");
    TriggerEnable(lib7FDEA08C_gt_UT_FastConstruction, false);
    TriggerAddEventUnitConstructProgress(lib7FDEA08C_gt_UT_FastConstruction, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastTrain
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_FastTrain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib7FDEA08C_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    UnitSetProgressComplete(EventUnit(), 2, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_FastTrain_Init () {
    lib7FDEA08C_gt_UT_FastTrain = TriggerCreate("lib7FDEA08C_gt_UT_FastTrain_Func");
    TriggerEnable(lib7FDEA08C_gt_UT_FastTrain, false);
    TriggerAddEventUnitTrainProgress(lib7FDEA08C_gt_UT_FastTrain, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastResearch
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_FastResearch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib7FDEA08C_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_FastResearch_Init () {
    lib7FDEA08C_gt_UT_FastResearch = TriggerCreate("lib7FDEA08C_gt_UT_FastResearch_Func");
    TriggerEnable(lib7FDEA08C_gt_UT_FastResearch, false);
    TriggerAddEventUnitResearchProgress(lib7FDEA08C_gt_UT_FastResearch, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastArrm
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_FastArrm_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib7FDEA08C_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_FastArrm_Init () {
    lib7FDEA08C_gt_UT_FastArrm = TriggerCreate("lib7FDEA08C_gt_UT_FastArrm_Func");
    TriggerEnable(lib7FDEA08C_gt_UT_FastArrm, false);
    TriggerAddEventUnitArmMagazineProgress(lib7FDEA08C_gt_UT_FastArrm, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastRevive
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_FastRevive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib7FDEA08C_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_FastRevive_Init () {
    lib7FDEA08C_gt_UT_FastRevive = TriggerCreate("lib7FDEA08C_gt_UT_FastRevive_Func");
    TriggerEnable(lib7FDEA08C_gt_UT_FastRevive, false);
    TriggerAddEventUnitReviveProgress(lib7FDEA08C_gt_UT_FastRevive, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastBuild
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_UT_FastBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib7FDEA08C_gv_uT_FastBuildCheat == false)) {
        lib7FDEA08C_gv_uT_FastBuildCheat = true;
        TechTreeUpgradeAddLevel(1, "FastBuild", 1);
        TechTreeUpgradeAddLevel(2, "FastBuild", 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_7FDEA08C_458AB7C7"));
        TriggerEnable(lib7FDEA08C_gt_UT_FastArrm, true);
        TriggerEnable(lib7FDEA08C_gt_UT_FastConstruction, true);
        TriggerEnable(lib7FDEA08C_gt_UT_FastResearch, true);
        TriggerEnable(lib7FDEA08C_gt_UT_FastRevive, true);
        TriggerEnable(lib7FDEA08C_gt_UT_FastTrain, true);
    }
    else {
        lib7FDEA08C_gv_uT_FastBuildCheat = false;
        libNtve_gf_SetUpgradeLevelForPlayer(1, "FastBuild", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(2, "FastBuild", 0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_7FDEA08C_2270DC13"));
        TriggerEnable(lib7FDEA08C_gt_UT_FastArrm, false);
        TriggerEnable(lib7FDEA08C_gt_UT_FastConstruction, false);
        TriggerEnable(lib7FDEA08C_gt_UT_FastResearch, false);
        TriggerEnable(lib7FDEA08C_gt_UT_FastRevive, false);
        TriggerEnable(lib7FDEA08C_gt_UT_FastTrain, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_UT_FastBuild_Init () {
    lib7FDEA08C_gt_UT_FastBuild = TriggerCreate("lib7FDEA08C_gt_UT_FastBuild_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_UT_FastBuild, c_playerAny, "-fastbuild", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Earth shattering cannon
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_Earthshatteringcannon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "ArtilleryMengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib7FDEA08C_gf_CM_CommanderVOSend(UnitGetOwner(EventUnitProgressUnit()), SoundLink("MengskCommander_ArtilleryReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnitProgressUnit())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_Earthshatteringcannon_Init () {
    lib7FDEA08C_gt_Earthshatteringcannon = TriggerCreate("lib7FDEA08C_gt_Earthshatteringcannon_Func");
    TriggerAddEventUnitConstructProgress(lib7FDEA08C_gt_Earthshatteringcannon, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ground Breaker Cannon Completed
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_GroundBreakerCannonCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "ArtilleryMengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib7FDEA08C_gv_cM_MengskArtilleryBuilt = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_GroundBreakerCannonCompleted_Init () {
    lib7FDEA08C_gt_GroundBreakerCannonCompleted = TriggerCreate("lib7FDEA08C_gt_GroundBreakerCannonCompleted_Func");
    TriggerAddEventUnitConstructProgress(lib7FDEA08C_gt_GroundBreakerCannonCompleted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nuclear bomb disaster
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_Nuclearbombdisaster_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib7FDEA08C_gf_CM_CommanderVOSend(EventPlayer(), SoundLink("MengskCommander_NuclearAnnihilationUsed", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_Nuclearbombdisaster_Init () {
    lib7FDEA08C_gt_Nuclearbombdisaster = TriggerCreate("lib7FDEA08C_gt_Nuclearbombdisaster_Func");
    TriggerAddEventUnitAbility(lib7FDEA08C_gt_Nuclearbombdisaster, null, AbilityCommand("NuclearAnnihilationMengsk", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Contaminated Strike
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_ContaminatedStrike_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TimerGetRemaining(lib7FDEA08C_gv_cM_MengskTransmissionTimerDirtyBomb) <= 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lib7FDEA08C_gv_cM_MengskTransmissionTimerDirtyBomb, 120.0, false, c_timeReal);
    lib7FDEA08C_gf_CM_CommanderVOSend(EventPlayer(), SoundLink("MengskCommander_DirtyBombUsed", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_ContaminatedStrike_Init () {
    lib7FDEA08C_gt_ContaminatedStrike = TriggerCreate("lib7FDEA08C_gt_ContaminatedStrike_Func");
    TriggerAddEventUnitAbility(lib7FDEA08C_gt_ContaminatedStrike, null, AbilityCommand("ArtilleryMengskGlobalExperimentalStrike", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: war dogs
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_wardogs_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib7FDEA08C_gf_CM_CommanderVOSend(EventPlayer(), SoundLink("MengskCommander_ZergCalldownUsed", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_wardogs_Init () {
    lib7FDEA08C_gt_wardogs = TriggerCreate("lib7FDEA08C_gt_wardogs_Func");
    TriggerAddEventUnitAbility(lib7FDEA08C_gt_wardogs, null, AbilityCommand("MengskZergCalldownLevel1", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib7FDEA08C_gt_wardogs, null, AbilityCommand("MengskZergCalldownLevel2", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib7FDEA08C_gt_wardogs, null, AbilityCommand("MengskZergCalldownLevel3", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(lib7FDEA08C_gt_wardogs, null, AbilityCommand("MengskZergCalldownLevel4", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: compulsory recruitment
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_compulsoryrecruitment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TimerGetRemaining(lib7FDEA08C_gv_cM_MengskTransmissionTimerForcedConscription) <= 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lib7FDEA08C_gv_cM_MengskTransmissionTimerForcedConscription, 120.0, false, c_timeReal);
    lib7FDEA08C_gf_CM_CommanderVOSend(EventPlayer(), SoundLink("MengskCommander_ForcedConscriptionUsed", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_compulsoryrecruitment_Init () {
    lib7FDEA08C_gt_compulsoryrecruitment = TriggerCreate("lib7FDEA08C_gt_compulsoryrecruitment_Func");
    TriggerAddEventUnitAbility(lib7FDEA08C_gt_compulsoryrecruitment, null, AbilityCommand("BunkerDepotMengskDrop", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: death of royal guard
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_deathofroyalguard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib7FDEA08C_gv_CM_Mengsk_VeteranUnits, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib7FDEA08C_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateRoyalGuard(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_deathofroyalguard_Init () {
    lib7FDEA08C_gt_deathofroyalguard = TriggerCreate("lib7FDEA08C_gt_deathofroyalguard_Func");
    TriggerAddEventUnitDied(lib7FDEA08C_gt_deathofroyalguard, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Royal Guard experience gain
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_SCC_Mengsk_VeterancyEarned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dyingunit;
    fixed lv_xp;
    unitgroup lv_veteranunits;
    int lv_veterancount;
    fixed lv_xppersupplyratio;
    fixed lv_heroicxpoverride;
    fixed lv_minimumearnedxp;
    fixed lv_xpradius;

    // Automatic Variable Declarations
    unitgroup auto064F97A4_g;
    int auto064F97A4_u;
    unit auto064F97A4_var;

    // Variable Initialization
    lv_dyingunit = EventUnit();
    lv_veteranunits = UnitGroupEmpty();
    lv_xppersupplyratio = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MengskRoyalGuardExperienceGainDummy", "Amount", UnitGetOwner(EventUnit()));
    lv_heroicxpoverride = 1500.0;
    lv_minimumearnedxp = 1.0;
    lv_xpradius = 15.0;

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(lv_dyingunit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterHallucination - 32)))) == true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_veteranunits = UnitGroupFilterRegion(lib7FDEA08C_gv_SCC_Mengsk_XPHungryUnits, RegionCircle(UnitGetPosition(lv_dyingunit), lv_xpradius), 0);
    lv_veterancount = UnitGroupCount(lv_veteranunits, c_unitCountAlive);
    lv_xp = (UnitTypeGetProperty(UnitGetType(lv_dyingunit), c_unitPropSuppliesUsed) * lv_xppersupplyratio);
    if ((lv_xp <= 0.0) && (UnitFilterMatch(lv_dyingunit, 1, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0)) == true)) {
        lv_xp = lv_heroicxpoverride;
    }
    else if ((lv_xp <= 0.0)) {
        return true;
    }
    if ((lv_veterancount == 0)) {
        lv_veteranunits = UnitGroupCopy(lib7FDEA08C_gv_SCC_Mengsk_XPHungryUnits);
        lv_veterancount = UnitGroupCount(lv_veteranunits, c_unitCountAlive);
        if ((lv_veterancount == 0)) {
            return true;
        }

    }

    lv_xp = MaxF(Round((lv_xp / lv_veterancount)), lv_minimumearnedxp);
    auto064F97A4_g = lv_veteranunits;
    auto064F97A4_u = UnitGroupCount(auto064F97A4_g, c_unitCountAll);
    for (;; auto064F97A4_u -= 1) {
        auto064F97A4_var = UnitGroupUnitFromEnd(auto064F97A4_g, auto064F97A4_u);
        if (auto064F97A4_var == null) { break; }
        UnitSetPropertyFixed(auto064F97A4_var, c_unitPropXP, (UnitGetPropertyFixed(auto064F97A4_var, c_unitPropXP, c_unitPropCurrent) + lv_xp));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_SCC_Mengsk_VeterancyEarned_Init () {
    lib7FDEA08C_gt_SCC_Mengsk_VeterancyEarned = TriggerCreate("lib7FDEA08C_gt_SCC_Mengsk_VeterancyEarned_Func");
    TriggerAddEventUnitDied(lib7FDEA08C_gt_SCC_Mengsk_VeterancyEarned, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Royal Guard Upgrade
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_SCC_Mengsk_VeteranDing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_levellingunit;
    int lv_statusframe;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_levellingunit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_statusframe = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "HealthBar", lv_levellingunit);
    lv_statusframe = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_statusframe, PlayerGroupAll(), "Rank", IntToString(UnitXPGetCurrentLevel(lv_levellingunit, null)));
    lib7FDEA08C_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateRoyalGuard(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_SCC_Mengsk_VeteranDing_Init () {
    lib7FDEA08C_gt_SCC_Mengsk_VeteranDing = TriggerCreate("lib7FDEA08C_gt_SCC_Mengsk_VeteranDing_Func");
    TriggerAddEventPlayerEffectUsed(lib7FDEA08C_gt_SCC_Mengsk_VeteranDing, c_playerAny, "MengskVeteranLevelUpDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: The Royal Guard exits the experience acquisition queue when it reaches full level
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_SCC_Mengsk_RemoveVeteranUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_levellingunit;
    int lv_statusframe;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_levellingunit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_statusframe = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "HealthBar", lv_levellingunit);
    lv_statusframe = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_statusframe, PlayerGroupAll(), "Rank", IntToString(UnitXPGetCurrentLevel(lv_levellingunit, null)));
    UnitGroupRemove(lib7FDEA08C_gv_SCC_Mengsk_XPHungryUnits, lv_levellingunit);
    lib7FDEA08C_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateRoyalGuard(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_SCC_Mengsk_RemoveVeteranUnit_Init () {
    lib7FDEA08C_gt_SCC_Mengsk_RemoveVeteranUnit = TriggerCreate("lib7FDEA08C_gt_SCC_Mengsk_RemoveVeteranUnit_Func");
    TriggerAddEventPlayerEffectUsed(lib7FDEA08C_gt_SCC_Mengsk_RemoveVeteranUnit, c_playerAny, "MengskVeteranMaxedTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Royal Guards Unit Registration
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_SCC_Mengsk_RegisterVeteranUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lib7FDEA08C_gv_SCC_Mengsk_XPHungryUnits, EventPlayerEffectUsedUnit(c_effectUnitCaster));
    UnitGroupAdd(lib7FDEA08C_gv_CM_Mengsk_VeteranUnits, EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lib7FDEA08C_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateRoyalGuard(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_SCC_Mengsk_RegisterVeteranUnit_Init () {
    lib7FDEA08C_gt_SCC_Mengsk_RegisterVeteranUnit = TriggerCreate("lib7FDEA08C_gt_SCC_Mengsk_RegisterVeteranUnit_Func");
    TriggerAddEventPlayerEffectUsed(lib7FDEA08C_gt_SCC_Mengsk_RegisterVeteranUnit, c_playerAny, "MengskVeteranTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Switch equipment
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_Switchequipment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNXMI_gf_LockUnlockNovaEquipment(false, "EQPSuitItem4");
    libNXMI_gf_LockUnlockNovaEquipment(false, "EQPHelmetItem4");
    libNXMI_gf_LockUnlockNovaEquipment(false, "EQPWeaponItem3");
    libNXMI_gf_LockUnlockNovaEquipment(false, "EQPWeaponItem2");
    libNXMI_gf_LockUnlockNovaEquipment(false, "EQPWeaponItem4");
    libNXMI_gf_LockUnlockNovaEquipment(false, "EQPGadgetItem7");
    libNXMI_gf_LockUnlockNovaEquipment(false, "EQPGadgetItem1");
    libNXMI_gf_LockUnlockNovaEquipment(false, "EQPHelmetItem5");
    libNXMI_gf_LockUnlockNovaEquipment(false, "EQPGadgetItem5");
    libNXMI_gf_LockUnlockNovaEquipment(false, "EQPGadgetItem6");
    libNXMI_gf_LockUnlockNovaEquipment(false, "EQPGadgetItem4");
    libNXMI_gf_LockUnlockNovaEquipment(false, "EQPWeaponItem5");
    libNXMI_gf_LockUnlockNovaEquipment(false, "EQPSuitItem2");
    libNXMI_gf_LockUnlockNovaEquipment(false, "EQPSuitItem5");
    libNXMI_gf_LockUnlockNovaEquipment(false, "EQPHelmetItem1");
    libNXMI_gf_LockUnlockNovaEquipment(false, "EQPSuitItem1");
    libNXMI_gf_LockUnlockNovaEquipment(false, "EQPWeaponItem1");
    libNXMI_gf_OpenNovaEquipmentScreen();
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_Switchequipment_Init () {
    lib7FDEA08C_gt_Switchequipment = TriggerCreate("lib7FDEA08C_gt_Switchequipment_Func");
    TriggerAddEventUnitAbility(lib7FDEA08C_gt_Switchequipment, null, AbilityCommand("NovaMengskSwitchingEquipment", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: white star
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_Initialization2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SuperStarAriesMengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropXP, 150000.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_Initialization2_Init () {
    lib7FDEA08C_gt_Initialization2 = TriggerCreate("lib7FDEA08C_gt_Initialization2_Func");
    TriggerAddEventUnitRegion(lib7FDEA08C_gt_Initialization2, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Red Snake Chariot
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_RedSnakeChariot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(10.0, c_timeGame);
    UnitSetHeight(EventUnit(), UnitGetPropertyFixed(EventUnit(), c_unitPropHeight, c_unitPropNormal), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_RedSnakeChariot_Init () {
    lib7FDEA08C_gt_RedSnakeChariot = TriggerCreate("lib7FDEA08C_gt_RedSnakeChariot_Func");
    TriggerAddEventUnitBehaviorChange(lib7FDEA08C_gt_RedSnakeChariot, null, "DiamondbackMengskPsychicSuppressor", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: observer ?? time
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_observerCEB1time_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB6BF1F99_g;
    int autoB6BF1F99_u;
    unit autoB6BF1F99_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB6BF1F99_g = UnitGroup("ScienceVesselMengsk", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB6BF1F99_u = UnitGroupCount(autoB6BF1F99_g, c_unitCountAll);
    for (;; autoB6BF1F99_u -= 1) {
        autoB6BF1F99_var = UnitGroupUnitFromEnd(autoB6BF1F99_g, autoB6BF1F99_u);
        if (autoB6BF1F99_var == null) { break; }
        if ((UnitCount("ScienceVesselMengsk", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 1) && (UnitXPGetCurrentLevel(autoB6BF1F99_var, "MengskVeterancyScienceVesselMengsk") == 5)) {
            VisRevealerCreate(1, RegionPlayableMap());
            VisRevealerEnable(VisRevealerLastCreated(), true);
        }
        else {
            VisRevealerDestroy(VisRevealerLastCreated());
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_observerCEB1time_Init () {
    lib7FDEA08C_gt_observerCEB1time = TriggerCreate("lib7FDEA08C_gt_observerCEB1time_Func");
    TriggerAddEventTimePeriodic(lib7FDEA08C_gt_observerCEB1time, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Balius Fire Missile
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_BaliusFireMissile_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_target;
    unit lv_barrios;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target = EventUnitTargetPoint();
    lv_barrios = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lib7FDEA08C_gf_FlameMissile(lv_barrios, PointWithOffsetPolar(lv_target, RandomFixed(0.2, 0.5), libNtve_gf_RandomAngle()));
    if ((UnitXPGetCurrentLevel(lv_barrios, "MengskVeterancyArchAngelMengsk") >= 4)) {
        lib7FDEA08C_gf_FlameMissile(lv_barrios, PointWithOffsetPolar(lv_target, RandomFixed(1.0, 2.0), libNtve_gf_RandomAngle()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_BaliusFireMissile_Init () {
    lib7FDEA08C_gt_BaliusFireMissile = TriggerCreate("lib7FDEA08C_gt_BaliusFireMissile_Func");
    TriggerAddEventUnitAbility(lib7FDEA08C_gt_BaliusFireMissile, null, AbilityCommand("ArchAngelMengskMissileShoot", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: bombing of barrios
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_bombingofbarrios_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto1381C331_val;
    unitgroup autoC9504BED_g;
    int autoC9504BED_u;
    unit autoC9504BED_var;

    // Conditions
    if (testConds) {
        if (!((UnitXPGetCurrentLevel(EventPlayerEffectUsedUnit(c_effectUnitCaster), "MengskVeterancyArchAngelMengsk") >= 4))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto1381C331_val = RandomInt(0, 3);
    if (auto1381C331_val == 0) {
        libNtve_gf_UnitCreateFacingPoint(3, "TrooperMengsk", 0, 1, RegionRandomPoint(RegionCircle(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), RandomInt(1, 5))), UnitGetPosition(EventUnit()));
        autoC9504BED_g = UnitLastCreatedGroup();
        autoC9504BED_u = UnitGroupCount(autoC9504BED_g, c_unitCountAll);
        for (;; autoC9504BED_u -= 1) {
            autoC9504BED_var = UnitGroupUnitFromEnd(autoC9504BED_g, autoC9504BED_u);
            if (autoC9504BED_var == null) { break; }
            UnitBehaviorAddPlayer(autoC9504BED_var, "ArchAngelMengskPnPTimedLife", 1, 1);
            PlayerCreateEffectUnit(1, "DropTrainSet", autoC9504BED_var);
        }
    }
    else if (auto1381C331_val == 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "TrooperMengskAA", 0, 1, RegionRandomPoint(RegionCircle(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), RandomInt(1, 5))), UnitGetPosition(EventUnit()));
        UnitBehaviorAddPlayer(UnitLastCreated(), "ArchAngelMengskPnPTimedLife", 1, 1);
        PlayerCreateEffectUnit(1, "DropTrainSet", UnitLastCreated());
    }
    else if (auto1381C331_val == 2) {
        libNtve_gf_UnitCreateFacingPoint(1, "TrooperMengskFlamethrower", 0, 1, RegionRandomPoint(RegionCircle(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), RandomInt(1, 5))), UnitGetPosition(EventUnit()));
        UnitBehaviorAddPlayer(UnitLastCreated(), "ArchAngelMengskPnPTimedLife", 1, 1);
        PlayerCreateEffectUnit(1, "DropTrainSet", UnitLastCreated());
    }
    else if (auto1381C331_val == 3) {
        libNtve_gf_UnitCreateFacingPoint(1, "TrooperMengskImproved", 0, 1, RegionRandomPoint(RegionCircle(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), RandomInt(1, 5))), UnitGetPosition(EventUnit()));
        UnitBehaviorAddPlayer(UnitLastCreated(), "ArchAngelMengskPnPTimedLife", 1, 1);
        PlayerCreateEffectUnit(1, "DropTrainSet", UnitLastCreated());
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_bombingofbarrios_Init () {
    lib7FDEA08C_gt_bombingofbarrios = TriggerCreate("lib7FDEA08C_gt_bombingofbarrios_Func");
    TriggerAddEventPlayerEffectUsed(lib7FDEA08C_gt_bombingofbarrios, 1, "ArchAngelMengskPnPFighterBombardmentDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Xanthos Lockdown Cleanup
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_XanthosLockdownCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF008D10F_g;
    int autoF008D10F_u;
    unit autoF008D10F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoF008D10F_g = UnitGroup("MengskSeeker", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF008D10F_u = UnitGroupCount(autoF008D10F_g, c_unitCountAll);
    for (;; autoF008D10F_u -= 1) {
        autoF008D10F_var = UnitGroupUnitFromEnd(autoF008D10F_g, autoF008D10F_u);
        if (autoF008D10F_var == null) { break; }
        UnitRemove(autoF008D10F_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_XanthosLockdownCleanup_Init () {
    lib7FDEA08C_gt_XanthosLockdownCleanup = TriggerCreate("lib7FDEA08C_gt_XanthosLockdownCleanup_Func");
    TriggerAddEventTimePeriodic(lib7FDEA08C_gt_XanthosLockdownCleanup, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: return to work
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_returntowork_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_worker;
    unit lv_nearbytownhall;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitOrderCount(EventUnit()) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lib7FDEA08C_gv_CM_Mengsk_ReturningWorkers, EventUnit());
    if ((TriggerActiveCount(TriggerGetCurrent()) > 1)) {
        return true;
    }

    while ((UnitGroupCount(lib7FDEA08C_gv_CM_Mengsk_ReturningWorkers, c_unitCountAlive) > 0)) {
        lv_worker = UnitGroupUnit(lib7FDEA08C_gv_CM_Mengsk_ReturningWorkers, 1);
        Wait(0.0625, c_timeGame);
        if ((UnitIsAlive(lv_worker) == true)) {
            UnitGroupRemove(lib7FDEA08C_gv_CM_Mengsk_ReturningWorkers, lv_worker);
            lv_nearbytownhall = UnitGroupClosestToPoint(UnitGroup("CommandCenterMengsk", UnitGetOwner(lv_worker), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_worker));
            if ((UnitIsAlive(lv_nearbytownhall) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_worker), UnitGetPosition(lv_nearbytownhall)) < 8.0)) {
                lib7FDEA08C_gf_CM_Resources_FindWork(lv_worker, lv_nearbytownhall, 12.0);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_returntowork_Init () {
    lib7FDEA08C_gt_returntowork = TriggerCreate("lib7FDEA08C_gt_returntowork_Func");
    TriggerAddEventUnitAbility(lib7FDEA08C_gt_returntowork, null, AbilityCommand("TrooperMengskEnlist", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Report begins
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_Reportbegins_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "TrooperMengskEnlistingAB", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_Reportbegins_Init () {
    lib7FDEA08C_gt_Reportbegins = TriggerCreate("lib7FDEA08C_gt_Reportbegins_Func");
    TriggerAddEventUnitAbility(lib7FDEA08C_gt_Reportbegins, null, AbilityCommand("TrooperMengskEnlist", 0), c_abilEffectStageApproach, false);
    TriggerAddEventUnitAbility(lib7FDEA08C_gt_Reportbegins, null, AbilityCommand("SCVMengskEnlist", 0), c_abilEffectStageApproach, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reporting stopped
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_Reportingstopped_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "TrooperMengskEnlistingRB", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_Reportingstopped_Init () {
    lib7FDEA08C_gt_Reportingstopped = TriggerCreate("lib7FDEA08C_gt_Reportingstopped_Func");
    TriggerAddEventUnitAbility(lib7FDEA08C_gt_Reportingstopped, null, AbilityCommand("TrooperMengskEnlist", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(lib7FDEA08C_gt_Reportingstopped, null, AbilityCommand("SCVMengskEnlist", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(lib7FDEA08C_gt_Reportingstopped, null, AbilityCommand("TrooperMengskEnlist", 0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(lib7FDEA08C_gt_Reportingstopped, null, AbilityCommand("SCVMengskEnlist", 0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(lib7FDEA08C_gt_Reportingstopped, null, AbilityCommand("TrooperMengskEnlist", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib7FDEA08C_gt_Reportingstopped, null, AbilityCommand("SCVMengskEnlist", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: panel
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_panel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_styleClose;
    text lv_tooltipHeaderOpen;
    text lv_tooltipOpen;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_styleClose = StringToText("</s>");
    lv_tooltipHeaderOpen = StringToText("<s val=\"@@@StandardTooltipHeader\">");
    lv_tooltipOpen = StringToText("<s val=\"StandardTooltipHalfSize\"><n/><n/></s><s val=\"@@@StandardTooltip\">");

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CoopCasterMengsk", c_unitCreateIgnorePlacement, 1, PlayerStartLocation(1));
    lib7FDEA08C_gv_globalCaster = UnitLastCreated();
    lib7FDEA08C_gv_globalCasterGroup = libNtve_gf_ConvertUnitToUnitGroup(lib7FDEA08C_gv_globalCaster);
    UnitSetPosition(lib7FDEA08C_gv_globalCaster, RegionGetBoundsMax(RegionEntireMap()), false);
    libNtve_gf_ShowHideUnit(lib7FDEA08C_gv_globalCaster, false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/MSKGlobalCastingPanel");
    lib7FDEA08C_gv_globalContainer = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lib7FDEA08C_gv_globalContainer, c_triggerControlTypePanel, "Coop_TopBar_Mengsk/MengskTopBar");
    lib7FDEA08C_gv_casterPanel = DialogControlLastCreated();
    DialogControlHookup(lib7FDEA08C_gv_casterPanel, c_triggerControlTypeProgressBar, "EnergyProgressBar");
    lib7FDEA08C_gv_energyPanel = DialogControlLastCreated();
    DialogControlHookup(lib7FDEA08C_gv_casterPanel, c_triggerControlTypePanel, "ImperialMandateContainer");
    lib7FDEA08C_gv_cU_GPMengskEnergyContainer = DialogControlLastCreated();
    DialogControlHookup(lib7FDEA08C_gv_casterPanel, c_triggerControlTypePanel, "MightoftheEmpireContainer");
    lib7FDEA08C_gv_cU_GPMengskEnergyRegenRoyalGuardContainer = DialogControlLastCreated();
    DialogControlHookup(lib7FDEA08C_gv_casterPanel, c_triggerControlTypePanel, "WillofthePeopleContainer");
    lib7FDEA08C_gv_cU_GPMengskEnergyRegenTrooperContainer = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lib7FDEA08C_gv_casterPanel, c_triggerControlTypeCommandPanel, "Coop_TopBar_Mengsk/MengskGlobalCommandPanelTemplate");
    lib7FDEA08C_gv_mengskTopbar = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemUnitGroup(lib7FDEA08C_gv_mengskTopbar, lib7FDEA08C_gv_globalCasterGroup, PlayerGroupSingle(1));
    DialogControlSetVisible(lib7FDEA08C_gv_globalContainer, PlayerGroupSingle(1), true);
    DialogControlSetVisible(lib7FDEA08C_gv_casterPanel, PlayerGroupSingle(1), true);
    DialogControlSetVisible(lib7FDEA08C_gv_mengskTopbar, PlayerGroupSingle(1), true);
    lib7FDEA08C_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateRoyalGuard(1);
    lib7FDEA08C_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateTrooper(1);
    lib7FDEA08C_gf_CM_Mengsk_GlobalCasterEnergyRegen(lib7FDEA08C_gv_globalCaster);
    if ((TechTreeUpgradeCount(1, "MasteryMengskStartingImperialMandate", c_techCountCompleteOnly) > 0)) {
        libNtve_gf_SetDialogItemTooltip(lib7FDEA08C_gv_cU_GPMengskEnergyContainer, (lv_tooltipHeaderOpen + StringExternal("Param/Value/lib_7FDEA08C_E1CB4BB6") + lv_styleClose + lv_tooltipOpen + StringExternal("Param/Value/lib_7FDEA08C_FF61E296") + StringExternal("Param/Value/lib_7FDEA08C_BAAF8477") + lv_styleClose), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemTooltip(lib7FDEA08C_gv_cU_GPMengskEnergyContainer, (lv_tooltipHeaderOpen + StringExternal("Param/Value/lib_7FDEA08C_897DB6DE") + lv_styleClose + lv_tooltipOpen + StringExternal("Param/Value/lib_7FDEA08C_B97C71EA") + lv_styleClose), PlayerGroupAll());
    }
    if ((TechTreeUpgradeCount(1, "MasteryMengskRoyalGuardImperialMandateRegeneration", c_techCountCompleteOnly) > 0)) {
        libNtve_gf_SetDialogItemTooltip(lib7FDEA08C_gv_cU_GPMengskEnergyRegenRoyalGuardContainer, (lv_tooltipHeaderOpen + StringExternal("Param/Value/lib_7FDEA08C_36293878") + lv_styleClose + lv_tooltipOpen + StringExternal("Param/Value/lib_7FDEA08C_5563DCB4") + StringExternal("Param/Value/lib_7FDEA08C_1812D87C") + lv_styleClose), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemTooltip(lib7FDEA08C_gv_cU_GPMengskEnergyRegenRoyalGuardContainer, (lv_tooltipHeaderOpen + StringExternal("Param/Value/lib_7FDEA08C_EAD20037") + lv_styleClose + lv_tooltipOpen + StringExternal("Param/Value/lib_7FDEA08C_9F9C855C") + lv_styleClose), PlayerGroupAll());
    }
    if ((TechTreeUpgradeCount(1, "MasteryMengskTrooperImperialMandateRegeneration", c_techCountCompleteOnly) > 0)) {
        libNtve_gf_SetDialogItemTooltip(lib7FDEA08C_gv_cU_GPMengskEnergyRegenTrooperContainer, (lv_tooltipHeaderOpen + StringExternal("Param/Value/lib_7FDEA08C_0905DD55") + lv_styleClose + lv_tooltipOpen + StringExternal("Param/Value/lib_7FDEA08C_8BC98106") + StringExternal("Param/Value/lib_7FDEA08C_6381ACF4") + lv_styleClose), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemTooltip(lib7FDEA08C_gv_cU_GPMengskEnergyRegenTrooperContainer, (lv_tooltipHeaderOpen + StringExternal("Param/Value/lib_7FDEA08C_36186082") + lv_styleClose + lv_tooltipOpen + StringExternal("Param/Value/lib_7FDEA08C_43056C57") + lv_styleClose), PlayerGroupAll());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_panel_Init () {
    lib7FDEA08C_gt_panel = TriggerCreate("lib7FDEA08C_gt_panel_Func");
    TriggerAddEventChatMessage(lib7FDEA08C_gt_panel, c_playerAny, "!mianban", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sepi Dragon King
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_SepiDragonKing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "FirebatMengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RandomInt(1, 100) == 1)) {
        UnitSetInfoText(EventUnitProgressUnit(), StringExternal("Param/Value/lib_7FDEA08C_C78B8E8E"), StringToText(""), StringToText(""));
        UnitXPAddXP(EventUnitProgressUnit(), "MengskVeterancyFirebatMengsk", 10000.0);
        UnitSetPropertyFixed(EventUnitProgressUnit(), c_unitPropBaseMovementSpeed, 1.5);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_SepiDragonKing_Init () {
    lib7FDEA08C_gt_SepiDragonKing = TriggerCreate("lib7FDEA08C_gt_SepiDragonKing_Func");
    TriggerAddEventUnitTrainProgress(lib7FDEA08C_gt_SepiDragonKing, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Arcturus Mengsk
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_ArcturusMengsk_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "SCVMengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RandomInt(1, 100) == 1)) {
        UnitSetInfoText(EventUnitProgressUnit(), StringExternal("Param/Value/lib_7FDEA08C_B8346BF9"), StringToText(""), StringToText(""));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_ArcturusMengsk_Init () {
    lib7FDEA08C_gt_ArcturusMengsk = TriggerCreate("lib7FDEA08C_gt_ArcturusMengsk_Func");
    TriggerAddEventUnitTrainProgress(lib7FDEA08C_gt_ArcturusMengsk, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WoM Initialization
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto05821D93_g;
    int auto05821D93_u;
    unit auto05821D93_var;
    unitgroup autoABBB6D18_g;
    int autoABBB6D18_u;
    unit autoABBB6D18_var;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerSetRace(1, "Terr");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/lib_7FDEA08C_9BCA96A4"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/lib_7FDEA08C_457251D6"), StringExternal("Param/Value/lib_7FDEA08C_1E55B04A"), "Assets\\Textures\\btn-tips-tutorial.dds");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/lib_7FDEA08C_C28A3C4F"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/lib_7FDEA08C_560F592D"), StringExternal("Param/Value/lib_7FDEA08C_FA7F897E"), "Assets\\Textures\\btn-tips-tutorial.dds");
    libNtve_gf_SetUpgradeLevelForPlayer(1, "MengskCommander", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "NuclearAnnihilationMengskNumberMissiles", 1);
    TechTreeUpgradeAddLevel(1, "MasteryMengskRoyalGuardExperienceGainRate", libNtve_gf_DifficultyValueInt(100, 50, 10, 0));
    auto05821D93_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto05821D93_u = UnitGroupCount(auto05821D93_g, c_unitCountAll);
    for (;; auto05821D93_u -= 1) {
        auto05821D93_var = UnitGroupUnitFromEnd(auto05821D93_g, auto05821D93_u);
        if (auto05821D93_var == null) { break; }
        if ((lib7FDEA08C_gf_CM_Mengsk_IsTheRoyalGuard(auto05821D93_var) == true)) {
            UnitGroupAdd(lib7FDEA08C_gv_SCC_Mengsk_XPHungryUnits, auto05821D93_var);
            UnitGroupAdd(lib7FDEA08C_gv_CM_Mengsk_VeteranUnits, auto05821D93_var);
            lib7FDEA08C_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateRoyalGuard(UnitGetOwner(auto05821D93_var));
        }

        if ((UnitGetType(auto05821D93_var) == "SuperStarAriesMengsk")) {
            UnitSetPropertyFixed(auto05821D93_var, c_unitPropXP, 150000.0);
        }

    }
    autoABBB6D18_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoABBB6D18_u = UnitGroupCount(autoABBB6D18_g, c_unitCountAll);
    for (;; autoABBB6D18_u -= 1) {
        autoABBB6D18_var = UnitGroupUnitFromEnd(autoABBB6D18_g, autoABBB6D18_u);
        if (autoABBB6D18_var == null) { break; }
        if ((UnitHasBehavior(autoABBB6D18_var, "AutoGatherResourceDummy") == true)) {
            UnitBehaviorAdd(autoABBB6D18_var, "AutoGatherResourceDummySupress", autoABBB6D18_var, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_Initialization_Init () {
    lib7FDEA08C_gt_Initialization = TriggerCreate("lib7FDEA08C_gt_Initialization_Func");
    TriggerAddEventMapInit(lib7FDEA08C_gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ground Shatter Cannon Bombing Effect Application
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_E5A4A7E59CB0E7A28EE8A382E782AEE8BDB0E782B8E69588E69E9CE5BA94E794A8_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;
    fixed lv_radiusMaximumSlop;

    // Automatic Variable Declarations
    unitgroup auto25B1366E_g;
    int auto25B1366E_u;
    unit auto25B1366E_var;

    // Variable Initialization
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_radiusMaximumSlop = 7.5;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsedUnitType(c_effectUnitCaster) == "ArchAngelMengskPnPAssault")) {
        auto25B1366E_g = UnitGroup("ArtilleryMengsk", EventPlayer(), RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterStunned - 32))), 0);
        auto25B1366E_u = UnitGroupCount(auto25B1366E_g, c_unitCountAll);
        for (;; auto25B1366E_u -= 1) {
            auto25B1366E_var = UnitGroupUnitFromEnd(auto25B1366E_g, auto25B1366E_u);
            if (auto25B1366E_var == null) { break; }
            UnitCreateEffectPoint(auto25B1366E_var, "ArtilleryMengskBombardmentDummy", lv_targetPoint);
            libNtve_gf_SendActorMessageToUnit(auto25B1366E_var, "AnimPlay Attack Attack FullMatch");
        }
    }
    else {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "ArtilleryMengskBombardmentDropDelayCP", RegionRandomPoint(RegionCircle(lv_targetPoint, lv_radiusMaximumSlop)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_E5A4A7E59CB0E7A28EE8A382E782AEE8BDB0E782B8E69588E69E9CE5BA94E794A8_Init () {
    lib7FDEA08C_gt_E5A4A7E59CB0E7A28EE8A382E782AEE8BDB0E782B8E69588E69E9CE5BA94E794A8 = TriggerCreate("lib7FDEA08C_gt_E5A4A7E59CB0E7A28EE8A382E782AEE8BDB0E782B8E69588E69E9CE5BA94E794A8_Func");
    TriggerAddEventPlayerEffectUsed(lib7FDEA08C_gt_E5A4A7E59CB0E7A28EE8A382E782AEE8BDB0E782B8E69588E69E9CE5BA94E794A8, c_playerAny, "ArtilleryMengskBombardmentDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Radiation strike effect application
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_Radiationstrikeeffectapplication_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "ArtilleryMengskExperimentalStrikeDropDeplayCP", RegionRandomPoint(RegionCircle(lv_targetPoint, lib7FDEA08C_gv_cM_Mengsk_ArtilleryExperimentalStrikeRange)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_Radiationstrikeeffectapplication_Init () {
    lib7FDEA08C_gt_Radiationstrikeeffectapplication = TriggerCreate("lib7FDEA08C_gt_Radiationstrikeeffectapplication_Func");
    TriggerAddEventPlayerEffectUsed(lib7FDEA08C_gt_Radiationstrikeeffectapplication, c_playerAny, "ArtilleryMengskExperimentalStrikeDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Global Radiation Strike Launched
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_GlobalRadiationStrikeLaunched_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_artillery;
    abilcmd lv_abilityCommand;
    point lv_targetPoint;

    // Automatic Variable Declarations
    unitgroup autoAAE6D61F_g;
    int autoAAE6D61F_u;

    // Variable Initialization
    lv_abilityCommand = AbilityCommand("ArtilleryMengskExperimentalStrike", 0);
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);

    // Actions
    if (!runActions) {
        return true;
    }

    lib7FDEA08C_gv_cM_Mengsk_ArtilleryExperimentalStrikeRange = 4.0;
    autoAAE6D61F_g = UnitGroup("ArtilleryMengsk", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterStunned - 32))), 0);
    autoAAE6D61F_u = UnitGroupCount(autoAAE6D61F_g, c_unitCountAll);
    for (;; autoAAE6D61F_u -= 1) {
        lv_artillery = UnitGroupUnitFromEnd(autoAAE6D61F_g, autoAAE6D61F_u);
        if (lv_artillery == null) { break; }
        UnitIssueOrder(lv_artillery, OrderTargetingPoint(lv_abilityCommand, lv_targetPoint), c_orderQueueAddToFront);
        if ((lib7FDEA08C_gv_cM_Mengsk_ArtilleryExperimentalStrikeRange <= 7.0)) {
            lib7FDEA08C_gv_cM_Mengsk_ArtilleryExperimentalStrikeRange += 0.5;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_GlobalRadiationStrikeLaunched_Init () {
    lib7FDEA08C_gt_GlobalRadiationStrikeLaunched = TriggerCreate("lib7FDEA08C_gt_GlobalRadiationStrikeLaunched_Func");
    TriggerAddEventPlayerEffectUsed(lib7FDEA08C_gt_GlobalRadiationStrikeLaunched, c_playerAny, "ArtilleryMengskGlobalExperimentalStrikeDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Co-op mission caster skill usage check
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_Coopmissioncasterskillusagecheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CoopCasterMengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib7FDEA08C_gf_CM_Mengsk_EnergyChanged(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_Coopmissioncasterskillusagecheck_Init () {
    lib7FDEA08C_gt_Coopmissioncasterskillusagecheck = TriggerCreate("lib7FDEA08C_gt_Coopmissioncasterskillusagecheck_Func");
    TriggerAddEventUnitAbility(lib7FDEA08C_gt_Coopmissioncasterskillusagecheck, null, null, c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: nuclear bomb catastrophe small nuclear bomb
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_E6A0B8E5BCB9E5A4A9E58AABE5B08FE6A0B8E5BCB9_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;
    fixed lv_smallNukeMaxPlacementRadius;
    int lv_numSmallNukes;
    int lv_nukeCounter;
    fixed lv_nukeDelay;

    // Automatic Variable Declarations
    int autoED0CA1E5_ae;
    const int autoED0CA1E5_ai = 1;

    // Variable Initialization
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_smallNukeMaxPlacementRadius = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "NuclearAnnihilationMengskSmallNukeDummyCP", "RevealRadius", EventPlayer());
    lv_numSmallNukes = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "NuclearAnnihilationMengskSmallNukeDummyCP", "PeriodCount", EventPlayer());
    lv_nukeCounter = 1;
    lv_nukeDelay = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "NuclearAnnihilationMengskSmallNukeDummyCP", "PeriodicPeriodArray[" + IntToString(0) + "]", EventPlayer());

    // Actions
    if (!runActions) {
        return true;
    }

    autoED0CA1E5_ae = (lv_numSmallNukes + (lib7FDEA08C_gv_globalcasterenergy / 100));
    lv_nukeCounter = 1;
    for ( ; ( (autoED0CA1E5_ai >= 0 && lv_nukeCounter <= autoED0CA1E5_ae) || (autoED0CA1E5_ai < 0 && lv_nukeCounter >= autoED0CA1E5_ae) ) ; lv_nukeCounter += autoED0CA1E5_ai ) {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "NuclearAnnihilationMengskSmallNukeDropDelayCP", RegionRandomPoint(RegionCircle(lv_targetPoint, lv_smallNukeMaxPlacementRadius)));
        Wait(lv_nukeDelay, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_E6A0B8E5BCB9E5A4A9E58AABE5B08FE6A0B8E5BCB9_Init () {
    lib7FDEA08C_gt_E6A0B8E5BCB9E5A4A9E58AABE5B08FE6A0B8E5BCB9 = TriggerCreate("lib7FDEA08C_gt_E6A0B8E5BCB9E5A4A9E58AABE5B08FE6A0B8E5BCB9_Func");
    TriggerAddEventPlayerEffectUsed(lib7FDEA08C_gt_E6A0B8E5BCB9E5A4A9E58AABE5B08FE6A0B8E5BCB9, c_playerAny, "NuclearAnnihilationMengskBigNukeDropDelayCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: fear app
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_fearapp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_scaredUnit;
    point lv_attackLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scaredUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackLocation = PointWithOffsetPolar(UnitGetPosition(lv_scaredUnit), 1.0, libNtve_gf_RandomAngle());
    UnitIssueOrder(lv_scaredUnit, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_scaredUnit), -5.0, lv_attackLocation)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    while ((UnitHasBehavior2(lv_scaredUnit, "ArtilleryMengskFear") == true) && (UnitIsAlive(lv_scaredUnit) == true)) {
        UnitIssueOrder(lv_scaredUnit, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_scaredUnit), 3.0))), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    UnitIssueOrder(lv_scaredUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_fearapp_Init () {
    lib7FDEA08C_gt_fearapp = TriggerCreate("lib7FDEA08C_gt_fearapp_Func");
    TriggerAddEventUnitBehaviorChange(lib7FDEA08C_gt_fearapp, null, "ArtilleryMengskFear", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Earth Shatter Cannon loadout changes
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_E5A4A7E59CB0E7A28EE8A382E782AEE8BDBDE789A9E58F98E69BB4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_artillery;
    int lv_cargoCount;
    string lv_cargoCountBehavior;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_artillery = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_cargoCount = UnitGroupCount(UnitCargoGroup(lv_artillery), c_unitCountAlive);
    lv_cargoCountBehavior = "ArtilleryMengskCargo";

    // Actions
    if (!runActions) {
        return true;
    }

    lib7FDEA08C_gf_SetUnitAttributePoints(lv_cargoCountBehavior, lv_artillery, lv_cargoCount);
    if ((lv_cargoCount == 0)) {
        UnitBehaviorRemove(lv_artillery, "ArtilleryMengskCargoGlobal", 1);
    }
    else {
        UnitBehaviorAdd(lv_artillery, "ArtilleryMengskCargoGlobal", lv_artillery, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_E5A4A7E59CB0E7A28EE8A382E782AEE8BDBDE789A9E58F98E69BB4_Init () {
    lib7FDEA08C_gt_E5A4A7E59CB0E7A28EE8A382E782AEE8BDBDE789A9E58F98E69BB4 = TriggerCreate("lib7FDEA08C_gt_E5A4A7E59CB0E7A28EE8A382E782AEE8BDBDE789A9E58F98E69BB4_Func");
    TriggerAddEventPlayerEffectUsed(lib7FDEA08C_gt_E5A4A7E59CB0E7A28EE8A382E782AEE8BDBDE789A9E58F98E69BB4, c_playerAny, "ArtilleryMengskCargoTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Register taught stormtroopers and laborers
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_Registertaughtstormtroopersandlaborers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "SCVMengsk") || (UnitGetType(EventUnit()) == "TrooperMengsk") || (UnitGetType(EventUnit()) == "TrooperMengskAA") || (UnitGetType(EventUnit()) == "TrooperMengskFlamethrower") || (UnitGetType(EventUnit()) == "TrooperMengskImproved")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lib7FDEA08C_gv_cM_Mengsk_PropagandaUnits, EventUnit());
    lib7FDEA08C_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateTrooper(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_Registertaughtstormtroopersandlaborers_Init () {
    lib7FDEA08C_gt_Registertaughtstormtroopersandlaborers = TriggerCreate("lib7FDEA08C_gt_Registertaughtstormtroopersandlaborers_Func");
    TriggerAddEventUnitBehaviorChange(lib7FDEA08C_gt_Registertaughtstormtroopersandlaborers, null, "PropagandaBlastMengsk", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib7FDEA08C_gt_Registertaughtstormtroopersandlaborers, null, "PropagandaBlastMengskPermanent", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Registered Death Dealer stormtroopers and laborers
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_RegisteredDeathDealerstormtroopersandlaborers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto43C51C8D_g;
    int auto43C51C8D_u;
    unit auto43C51C8D_var;
    string autoBD0DC074_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto43C51C8D_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto43C51C8D_u = UnitGroupCount(auto43C51C8D_g, c_unitCountAll);
    for (;; auto43C51C8D_u -= 1) {
        auto43C51C8D_var = UnitGroupUnitFromEnd(auto43C51C8D_g, auto43C51C8D_u);
        if (auto43C51C8D_var == null) { break; }
        autoBD0DC074_val = UnitGetType(auto43C51C8D_var);
        if (autoBD0DC074_val == "TrooperMengskAA") {
            UnitGroupAdd(lib7FDEA08C_gv_stormtroopergroupwithequipment, auto43C51C8D_var);
        }
        else if (autoBD0DC074_val == "TrooperMengskFlamethrower") {
            UnitGroupAdd(lib7FDEA08C_gv_stormtroopergroupwithequipment, auto43C51C8D_var);
        }
        else if (autoBD0DC074_val == "TrooperMengskImproved") {
            UnitGroupAdd(lib7FDEA08C_gv_stormtroopergroupwithequipment, auto43C51C8D_var);
        }
        else {
        }
        lib7FDEA08C_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateTrooper(UnitGetOwner(auto43C51C8D_var));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_RegisteredDeathDealerstormtroopersandlaborers_Init () {
    lib7FDEA08C_gt_RegisteredDeathDealerstormtroopersandlaborers = TriggerCreate("lib7FDEA08C_gt_RegisteredDeathDealerstormtroopersandlaborers_Func");
    TriggerEnable(lib7FDEA08C_gt_RegisteredDeathDealerstormtroopersandlaborers, false);
    TriggerAddEventTimePeriodic(lib7FDEA08C_gt_RegisteredDeathDealerstormtroopersandlaborers, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Removed taught stormtroopers and laborers
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_Removedtaughtstormtroopersandlaborers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(EventUnit(), "PropagandaBlastMengsk") < 1))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "PropagandaBlastMengskPermanent") < 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(lib7FDEA08C_gv_cM_Mengsk_PropagandaUnits, EventUnit());
    lib7FDEA08C_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateTrooper(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_Removedtaughtstormtroopersandlaborers_Init () {
    lib7FDEA08C_gt_Removedtaughtstormtroopersandlaborers = TriggerCreate("lib7FDEA08C_gt_Removedtaughtstormtroopersandlaborers_Func");
    TriggerAddEventUnitBehaviorChange(lib7FDEA08C_gt_Removedtaughtstormtroopersandlaborers, null, "PropagandaBlastMengsk", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib7FDEA08C_gt_Removedtaughtstormtroopersandlaborers, null, "PropagandaBlastMengskPermanent", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Empire support changes - related to being taught
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_Empiresupportchangesrelatedtobeingtaught_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "BlimpMengskTopbarRegen"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib7FDEA08C_gf_CM_Mengsk_GlobalCasterEnergyRegenCalculateTrooper(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_Empiresupportchangesrelatedtobeingtaught_Init () {
    lib7FDEA08C_gt_Empiresupportchangesrelatedtobeingtaught = TriggerCreate("lib7FDEA08C_gt_Empiresupportchangesrelatedtobeingtaught_Func");
    TriggerAddEventUpgradeLevelChanged(lib7FDEA08C_gt_Empiresupportchangesrelatedtobeingtaught, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Imperial Arbitration Machine Airlift
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_ImperialArbitrationMachineAirlift_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medivac;
    unit lv_siegetank;
    int lv_statusframe;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_medivac = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_siegetank = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_statusframe = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "MedivacMengskSiegeTankAirliftLoadTrigger")) {
        UnitBehaviorAdd(lv_medivac, "MedivacMengskSiegeTankAirlift", lv_medivac, 1);
        lib7FDEA08C_gf_SetUnitAttributePoints("MedivacMengskSiegeTankAirliftLevel", lv_medivac, (UnitXPGetCurrentLevel(lv_siegetank, null) - 1));
        DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "HealthBar", lv_medivac);
        lv_statusframe = DialogControlLastCreated();
        DialogControlSetAnimationState(lv_statusframe, PlayerGroupAll(), "Rank", IntToString(UnitXPGetCurrentLevel(lv_siegetank, null)));
    }
    else {
        UnitBehaviorRemove(lv_medivac, "MedivacMengskSiegeTankAirlift", 1);
        UnitBehaviorRemove(lv_medivac, "MedivacMengskSiegeTankAirliftLevel", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_ImperialArbitrationMachineAirlift_Init () {
    lib7FDEA08C_gt_ImperialArbitrationMachineAirlift = TriggerCreate("lib7FDEA08C_gt_ImperialArbitrationMachineAirlift_Func");
    TriggerAddEventPlayerEffectUsed(lib7FDEA08C_gt_ImperialArbitrationMachineAirlift, c_playerAny, "MedivacMengskSiegeTankAirliftLoadTrigger");
    TriggerAddEventPlayerEffectUsed(lib7FDEA08C_gt_ImperialArbitrationMachineAirlift, c_playerAny, "MedivacMengskSiegeTankAirliftUnloadTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Imperial Arbitration Machine Air Transport Ding
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_ImperialArbitrationMachineAirTransportDing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_siegetank;
    unit lv_medivac;
    int lv_statusframe;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_siegetank = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_medivac = UnitTransport(lv_siegetank);
    lv_statusframe = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_siegetank) == "SiegeTankMengskSieged"))) {
            return false;
        }

        if (!((lv_medivac != null))) {
            return false;
        }

        if (!((UnitGetType(lv_medivac) == "MedivacMengsk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib7FDEA08C_gf_SetUnitAttributePoints("MedivacMengskSiegeTankAirliftLevel", lv_medivac, (UnitXPGetCurrentLevel(lv_siegetank, null) - 1));
    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "HealthBar", lv_medivac);
    lv_statusframe = DialogControlLastCreated();
    DialogControlSetAnimationState(lv_statusframe, PlayerGroupAll(), "Rank", IntToString(UnitXPGetCurrentLevel(lv_siegetank, null)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_ImperialArbitrationMachineAirTransportDing_Init () {
    lib7FDEA08C_gt_ImperialArbitrationMachineAirTransportDing = TriggerCreate("lib7FDEA08C_gt_ImperialArbitrationMachineAirTransportDing_Func");
    TriggerAddEventPlayerEffectUsed(lib7FDEA08C_gt_ImperialArbitrationMachineAirTransportDing, c_playerAny, "MengskVeteranLevelUpDummy");
    TriggerAddEventPlayerEffectUsed(lib7FDEA08C_gt_ImperialArbitrationMachineAirTransportDing, c_playerAny, "MengskVeteranMaxedTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hounds of War-Zerg Thralls Destroyed
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_HoundsofWarZergThrallsDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib7FDEA08C_gf_FindandAttackNearestEnemy(EventPlayerEffectUsedUnit(c_effectUnitCaster), 30.0, 6.0, 2.0, UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32))), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_HoundsofWarZergThrallsDestroyed_Init () {
    lib7FDEA08C_gt_HoundsofWarZergThrallsDestroyed = TriggerCreate("lib7FDEA08C_gt_HoundsofWarZergThrallsDestroyed_Func");
    TriggerAddEventPlayerEffectUsed(lib7FDEA08C_gt_HoundsofWarZergThrallsDestroyed, c_playerAny, "MengskSeekDestroyTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: War Hounds - Create Zergling Servants
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_WarHoundsCreateZerglingServants_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "ZerglingMengsk", 0, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), (SquareRoot(RandomFixed(0.0, 1.0)) * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MengskZergCalldownAreaDummy", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny)), RandomFixed(0.0, 360.0)), RandomFixed(0.0, 360.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_WarHoundsCreateZerglingServants_Init () {
    lib7FDEA08C_gt_WarHoundsCreateZerglingServants = TriggerCreate("lib7FDEA08C_gt_WarHoundsCreateZerglingServants_Func");
    TriggerAddEventPlayerEffectUsed(lib7FDEA08C_gt_WarHoundsCreateZerglingServants, c_playerAny, "ZerglingMengskSpawnTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: War Hounds - Create Hydralisk Servants
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_WarHoundsCreateHydraliskServants_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "HydraliskMengsk", 0, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), (SquareRoot(RandomFixed(0.0, 1.0)) * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MengskZergCalldownAreaDummy", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny)), RandomFixed(0.0, 360.0)), RandomFixed(0.0, 360.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_WarHoundsCreateHydraliskServants_Init () {
    lib7FDEA08C_gt_WarHoundsCreateHydraliskServants = TriggerCreate("lib7FDEA08C_gt_WarHoundsCreateHydraliskServants_Func");
    TriggerAddEventPlayerEffectUsed(lib7FDEA08C_gt_WarHoundsCreateHydraliskServants, c_playerAny, "HydraliskMengskSpawnTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hounds of War-Create Mutalisk Servants
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_HoundsofWarCreateMutaliskServants_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "MutaliskMengsk", 0, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), (SquareRoot(RandomFixed(0.0, 1.0)) * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MengskZergCalldownAreaDummy", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny)), RandomFixed(0.0, 360.0)), RandomFixed(0.0, 360.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_HoundsofWarCreateMutaliskServants_Init () {
    lib7FDEA08C_gt_HoundsofWarCreateMutaliskServants = TriggerCreate("lib7FDEA08C_gt_HoundsofWarCreateMutaliskServants_Func");
    TriggerAddEventPlayerEffectUsed(lib7FDEA08C_gt_HoundsofWarCreateMutaliskServants, c_playerAny, "MutaliskMengskSpawnTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hounds of War-Create Thunder Beast Servants
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_E68898E4BA89E681B6E78AACE5889BE5BBBAE99BB7E585BDE5A5B4E4BB86_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "UltraliskMengsk", 0, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), (SquareRoot(RandomFixed(0.0, 1.0)) * libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MengskZergCalldownAreaDummy", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny)), RandomFixed(0.0, 360.0)), RandomFixed(0.0, 360.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_E68898E4BA89E681B6E78AACE5889BE5BBBAE99BB7E585BDE5A5B4E4BB86_Init () {
    lib7FDEA08C_gt_E68898E4BA89E681B6E78AACE5889BE5BBBAE99BB7E585BDE5A5B4E4BB86 = TriggerCreate("lib7FDEA08C_gt_E68898E4BA89E681B6E78AACE5889BE5BBBAE99BB7E585BDE5A5B4E4BB86_Func");
    TriggerAddEventPlayerEffectUsed(lib7FDEA08C_gt_E68898E4BA89E681B6E78AACE5889BE5BBBAE99BB7E585BDE5A5B4E4BB86, c_playerAny, "UltraliskMengskSpawnTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dogs of War-Death Swarm
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_E68898E4BA89E681B6E78AACE5889BE5BBBAE99BB7E585BDE5A5B4E4B1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_random;
    unit lv_deadunit;

    // Automatic Variable Declarations
    string autoBC1635EC_val;

    // Variable Initialization
    lv_deadunit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((lib7FDEA08C_gv_moraleindex >= 5))) {
            return false;
        }

        if (!(((UnitGetType(lv_deadunit) == "ZerglingMengsk") || (UnitGetType(lv_deadunit) == "ZerglingMengskBurrowed") || (UnitGetType(lv_deadunit) == "HydraliskMengsk") || (UnitGetType(lv_deadunit) == "HydraliskMengskBurrowed") || (UnitGetType(lv_deadunit) == "UltraliskMengsk") || (UnitGetType(lv_deadunit) == "MutaliskMengsk")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBC1635EC_val = UnitGetType(lv_deadunit);
    if (autoBC1635EC_val == "ZerglingMengsk") {
        lv_random = RandomInt(0, 100);
        if ((lv_random <= 50)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CommanderPrestigeMengskTrooperBoom", 0, UnitGetOwner(lv_deadunit), UnitGroupCenterOfGroup(libNtve_gf_ConvertUnitToUnitGroup(lv_deadunit)));
        }
        else {
            return true;
        }
    }
    else if (autoBC1635EC_val == "ZerglingMengskBurrowed") {
        lv_random = RandomInt(0, 100);
        if ((lv_random <= 50)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CommanderPrestigeMengskTrooperBoom", 0, UnitGetOwner(lv_deadunit), UnitGroupCenterOfGroup(libNtve_gf_ConvertUnitToUnitGroup(lv_deadunit)));
        }
        else {
            return true;
        }
    }
    else if (autoBC1635EC_val == "HydraliskMengsk") {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CommanderPrestigeMengskTrooperBoom", 0, UnitGetOwner(lv_deadunit), UnitGroupCenterOfGroup(libNtve_gf_ConvertUnitToUnitGroup(lv_deadunit)));
    }
    else if (autoBC1635EC_val == "HydraliskMengskBurrowed") {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CommanderPrestigeMengskTrooperBoom", 0, UnitGetOwner(lv_deadunit), UnitGroupCenterOfGroup(libNtve_gf_ConvertUnitToUnitGroup(lv_deadunit)));
    }
    else if (autoBC1635EC_val == "MutaliskMengsk") {
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "CommanderPrestigeMengskTrooperBoom", 0, UnitGetOwner(lv_deadunit), UnitGroupCenterOfGroup(libNtve_gf_ConvertUnitToUnitGroup(lv_deadunit)));
    }
    else if (autoBC1635EC_val == "UltraliskMengsk") {
        libNtve_gf_CreateUnitsWithDefaultFacing(4, "CommanderPrestigeMengskTrooperBoom", 0, UnitGetOwner(lv_deadunit), UnitGroupCenterOfGroup(libNtve_gf_ConvertUnitToUnitGroup(lv_deadunit)));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_E68898E4BA89E681B6E78AACE5889BE5BBBAE99BB7E585BDE5A5B4E4B1_Init () {
    lib7FDEA08C_gt_E68898E4BA89E681B6E78AACE5889BE5BBBAE99BB7E585BDE5A5B4E4B1 = TriggerCreate("lib7FDEA08C_gt_E68898E4BA89E681B6E78AACE5889BE5BBBAE99BB7E585BDE5A5B4E4B1_Func");
    TriggerAddEventUnitDied(lib7FDEA08C_gt_E68898E4BA89E681B6E78AACE5889BE5BBBAE99BB7E585BDE5A5B4E4B1, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creation of cargo inside the airdrop bunker
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_Creationofcargoinsidetheairdropbunker_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bunkerdepot;
    int lv_troopercargosize;
    int lv_bunkerdepotcargocapacity;
    int lv_bunkerdepotcargomaxcount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bunkerdepot = EventUnit();
    lv_troopercargosize = CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TrooperMengsk", "CargoSize", EventPlayer());
    lv_bunkerdepotcargocapacity = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "BunkerMengskTransport", "TotalCargoSpace", EventPlayer());
    lv_bunkerdepotcargomaxcount = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "BunkerMengskTransport", "MaxCargoCount", EventPlayer());

    // Conditions
    if (testConds) {
        if (!((lv_troopercargosize != 0))) {
            return false;
        }

        if (!((lv_bunkerdepotcargocapacity != 0))) {
            return false;
        }

        if (!((lv_bunkerdepotcargomaxcount != 0))) {
            return false;
        }

        if (!((UnitHasBehavior2(lv_bunkerdepot, "BunkerDepotMengskDrop") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib7FDEA08C_gv_moraleindex == 1)) {
        UnitCargoCreate(lv_bunkerdepot, "TrooperMengsk", 3);
    }

    if ((lib7FDEA08C_gv_moraleindex == 2)) {
        UnitCargoCreate(lv_bunkerdepot, "TrooperMengsk", 6);
    }

    if ((lib7FDEA08C_gv_moraleindex == 3)) {
        UnitCargoCreate(lv_bunkerdepot, "TrooperMengsk", 3);
        UnitCargoCreate(lv_bunkerdepot, "TrooperMengskAA", 1);
        UnitCargoCreate(lv_bunkerdepot, "TrooperMengskFlamethrower", 1);
        UnitCargoCreate(lv_bunkerdepot, "TrooperMengskImproved", 1);
    }

    if ((lib7FDEA08C_gv_moraleindex == 4)) {
        UnitCargoCreate(lv_bunkerdepot, "TrooperMengskAA", 2);
        UnitCargoCreate(lv_bunkerdepot, "TrooperMengskFlamethrower", 2);
        UnitCargoCreate(lv_bunkerdepot, "TrooperMengskImproved", 2);
    }

    if ((lib7FDEA08C_gv_moraleindex == 5)) {
        UnitCargoCreate(lv_bunkerdepot, "TrooperMengskAA", 2);
        UnitCargoCreate(lv_bunkerdepot, "TrooperMengskFlamethrower", 2);
        UnitCargoCreate(lv_bunkerdepot, "TrooperMengskImproved", 2);
        UnitBehaviorAdd(lv_bunkerdepot, "FirebatMengskShield", lv_bunkerdepot, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_Creationofcargoinsidetheairdropbunker_Init () {
    lib7FDEA08C_gt_Creationofcargoinsidetheairdropbunker = TriggerCreate("lib7FDEA08C_gt_Creationofcargoinsidetheairdropbunker_Func");
    TriggerAddEventUnitAbility(lib7FDEA08C_gt_Creationofcargoinsidetheairdropbunker, null, AbilityCommand("BunkerDepotMengskDropMorph", 0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Radiation strike sound effect enhancement
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_Radiationstrikesoundeffectenhancement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup("ArtilleryMengsk", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterStunned - 32))), 0), c_unitCountAlive) > 4))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.5, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("UI_Mengsk_TopBar_Stinger_Up", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
    Wait(3.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("UI_Mengsk_TopBar_Stinger_Down", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
    Wait(16.5, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_Radiationstrikesoundeffectenhancement_Init () {
    lib7FDEA08C_gt_Radiationstrikesoundeffectenhancement = TriggerCreate("lib7FDEA08C_gt_Radiationstrikesoundeffectenhancement_Func");
    TriggerAddEventUnitAbility(lib7FDEA08C_gt_Radiationstrikesoundeffectenhancement, null, AbilityCommand("ArtilleryMengskGlobalExperimentalStrike", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: XanthosInit
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_gt_XanthosInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "MengskXanthosAssault"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib7FDEA08C_gv_xantos = EventUnitProgressUnit();
    UnitBehaviorAdd(lib7FDEA08C_gv_xantos, "ConjoinedTrainCar", lib7FDEA08C_gv_xantos, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MengskXThosExposedWeaknessUnit", 0, 1, UnitGetPosition(lib7FDEA08C_gv_xantos));
    lib7FDEA08C_gv_xanthosTurretUnit[7] = UnitLastCreated();
    UnitBehaviorAdd(UnitLastCreated(), "ConjoinedTrainCar", UnitLastCreated(), 1);
    UnitSetCustomValue(UnitLastCreated(), 0, 0.0);
    lib7FDEA08C_gf_Connecttheunitmodeltotheunit(UnitLastCreated(), lib7FDEA08C_gv_xantos, "Ref_Hardpoint 05", 0.0, 0.0, 0.0, "");
    lib7FDEA08C_gf_AttachTurretToXanthosLocalXYOffset(UnitLastCreated(), 0.0, 1.0);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "RefSet ::global.XanthosCore ::Self");
    libNtve_gf_SendActorMessageToUnit(lib7FDEA08C_gv_xantos, "RefSet ::actor.XanthosCore ::global.XanthosCore");
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MengskXanthosFlameTurret", 0, 1, UnitGetPosition(lib7FDEA08C_gv_xantos));
    lib7FDEA08C_gv_xanthosTurretUnit[1] = UnitLastCreated();
    lib7FDEA08C_gf_Setturretstatus(UnitLastCreated(), lib7FDEA08C_ge_PRESETTurretState_active);
    lib7FDEA08C_gf_Connecttheunitmodeltotheunit(UnitLastCreated(), lib7FDEA08C_gv_xantos, "Ref_Hardpoint 01", 0.0, 0.0, 0.0, "");
    lib7FDEA08C_gf_AttachTurretToXanthosLocalXYOffset(UnitLastCreated(), -2.0, 0.25);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MengskXanthosRailGunTurret", 0, 1, UnitGetPosition(lib7FDEA08C_gv_xantos));
    lib7FDEA08C_gv_xanthosTurretUnit[2] = UnitLastCreated();
    lib7FDEA08C_gf_Setturretstatus(UnitLastCreated(), lib7FDEA08C_ge_PRESETTurretState_active);
    lib7FDEA08C_gf_Connecttheunitmodeltotheunit(UnitLastCreated(), lib7FDEA08C_gv_xantos, "Ref_Hardpoint 02", 0.0, 0.0, 0.0, "");
    lib7FDEA08C_gf_AttachTurretToXanthosLocalXYOffset(UnitLastCreated(), 2.0, 0.25);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MengskXThosFighterLaunchBayUnit", 0, 1, UnitGetPosition(lib7FDEA08C_gv_xantos));
    lib7FDEA08C_gv_xanthosTurretUnit[3] = UnitLastCreated();
    lib7FDEA08C_gf_Setturretstatus(UnitLastCreated(), lib7FDEA08C_ge_PRESETTurretState_active);
    lib7FDEA08C_gf_Connecttheunitmodeltotheunit(UnitLastCreated(), lib7FDEA08C_gv_xantos, "Ref_Hardpoint 03", 0.0, 0.0, 0.0, "");
    lib7FDEA08C_gf_AttachTurretToXanthosLocalXYOffset(UnitLastCreated(), 0.0, -0.78);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MengskXanthosRocketBarrage", 0, 1, UnitGetPosition(lib7FDEA08C_gv_xantos));
    lib7FDEA08C_gv_xanthosTurretUnit[4] = UnitLastCreated();
    lib7FDEA08C_gf_Setturretstatus(UnitLastCreated(), lib7FDEA08C_ge_PRESETTurretState_active);
    lib7FDEA08C_gf_Connecttheunitmodeltotheunit(UnitLastCreated(), lib7FDEA08C_gv_xantos, "Ref_Hardpoint", 0.0, 0.0, 0.0, "");
    lib7FDEA08C_gf_AttachTurretToXanthosLocalXYOffset(UnitLastCreated(), 0.0, -2.13);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib7FDEA08C_gt_XanthosInit_Init () {
    lib7FDEA08C_gt_XanthosInit = TriggerCreate("lib7FDEA08C_gt_XanthosInit_Func");
    TriggerAddEventUnitTrainProgress(lib7FDEA08C_gt_XanthosInit, null, c_unitProgressStageComplete);
}

void lib7FDEA08C_InitTriggers () {
    lib7FDEA08C_gt_CCAutoGatherResource_Init();
    lib7FDEA08C_gt_Authorclearallmessages_Init();
    lib7FDEA08C_gt_Authormodifybehavior_Init();
    lib7FDEA08C_gt_AuthorModificationandUpgrade_Init();
    lib7FDEA08C_gt_Authorcreateeffect_Init();
    lib7FDEA08C_gt_AuthorModifyskillcommand_Init();
    lib7FDEA08C_gt_AuthorDataTemplate_Init();
    lib7FDEA08C_gt_Authorplayerattributes_Init();
    lib7FDEA08C_gt_AuthorModifyweapons_Init();
    lib7FDEA08C_gt_Authormodifyskills_Init();
    lib7FDEA08C_gt_UT_KillUnits_Init();
    lib7FDEA08C_gt_UT_Remove_Init();
    lib7FDEA08C_gt_UT_Supply_Init();
    lib7FDEA08C_gt_UT_Give_Init();
    lib7FDEA08C_gt_UT_SpawnUnits_Init();
    lib7FDEA08C_gt_UT_Teleport_Init();
    lib7FDEA08C_gt_UT_XP_Init();
    lib7FDEA08C_gt_UT_MissileMovers_Init();
    lib7FDEA08C_gt_UT_MissileCreated_Init();
    lib7FDEA08C_gt_UT_Height_Init();
    lib7FDEA08C_gt_UT_AttackSpeed_Init();
    lib7FDEA08C_gt_UT_Damage_Init();
    lib7FDEA08C_gt_UT_Life_Init();
    lib7FDEA08C_gt_UT_Energy_Init();
    lib7FDEA08C_gt_UT_MovementSpeed_Init();
    lib7FDEA08C_gt_UT_Acceleration_Init();
    lib7FDEA08C_gt_UT_Range_Init();
    lib7FDEA08C_gt_UT_ARange_Init();
    lib7FDEA08C_gt_UT_Armor_Init();
    lib7FDEA08C_gt_UT_TintColor_Init();
    lib7FDEA08C_gt_UT_Behavior_Init();
    lib7FDEA08C_gt_UT_Scale_Init();
    lib7FDEA08C_gt_UT_ActorMsg_Init();
    lib7FDEA08C_gt_UT_FastConstruction_Init();
    lib7FDEA08C_gt_UT_FastTrain_Init();
    lib7FDEA08C_gt_UT_FastResearch_Init();
    lib7FDEA08C_gt_UT_FastArrm_Init();
    lib7FDEA08C_gt_UT_FastRevive_Init();
    lib7FDEA08C_gt_UT_FastBuild_Init();
    lib7FDEA08C_gt_Earthshatteringcannon_Init();
    lib7FDEA08C_gt_GroundBreakerCannonCompleted_Init();
    lib7FDEA08C_gt_Nuclearbombdisaster_Init();
    lib7FDEA08C_gt_ContaminatedStrike_Init();
    lib7FDEA08C_gt_wardogs_Init();
    lib7FDEA08C_gt_compulsoryrecruitment_Init();
    lib7FDEA08C_gt_deathofroyalguard_Init();
    lib7FDEA08C_gt_SCC_Mengsk_VeterancyEarned_Init();
    lib7FDEA08C_gt_SCC_Mengsk_VeteranDing_Init();
    lib7FDEA08C_gt_SCC_Mengsk_RemoveVeteranUnit_Init();
    lib7FDEA08C_gt_SCC_Mengsk_RegisterVeteranUnit_Init();
    lib7FDEA08C_gt_Switchequipment_Init();
    lib7FDEA08C_gt_Initialization2_Init();
    lib7FDEA08C_gt_RedSnakeChariot_Init();
    lib7FDEA08C_gt_observerCEB1time_Init();
    lib7FDEA08C_gt_BaliusFireMissile_Init();
    lib7FDEA08C_gt_bombingofbarrios_Init();
    lib7FDEA08C_gt_XanthosLockdownCleanup_Init();
    lib7FDEA08C_gt_returntowork_Init();
    lib7FDEA08C_gt_Reportbegins_Init();
    lib7FDEA08C_gt_Reportingstopped_Init();
    lib7FDEA08C_gt_panel_Init();
    lib7FDEA08C_gt_SepiDragonKing_Init();
    lib7FDEA08C_gt_ArcturusMengsk_Init();
    lib7FDEA08C_gt_Initialization_Init();
    lib7FDEA08C_gt_E5A4A7E59CB0E7A28EE8A382E782AEE8BDB0E782B8E69588E69E9CE5BA94E794A8_Init();
    lib7FDEA08C_gt_Radiationstrikeeffectapplication_Init();
    lib7FDEA08C_gt_GlobalRadiationStrikeLaunched_Init();
    lib7FDEA08C_gt_Coopmissioncasterskillusagecheck_Init();
    lib7FDEA08C_gt_E6A0B8E5BCB9E5A4A9E58AABE5B08FE6A0B8E5BCB9_Init();
    lib7FDEA08C_gt_fearapp_Init();
    lib7FDEA08C_gt_E5A4A7E59CB0E7A28EE8A382E782AEE8BDBDE789A9E58F98E69BB4_Init();
    lib7FDEA08C_gt_Registertaughtstormtroopersandlaborers_Init();
    lib7FDEA08C_gt_RegisteredDeathDealerstormtroopersandlaborers_Init();
    lib7FDEA08C_gt_Removedtaughtstormtroopersandlaborers_Init();
    lib7FDEA08C_gt_Empiresupportchangesrelatedtobeingtaught_Init();
    lib7FDEA08C_gt_ImperialArbitrationMachineAirlift_Init();
    lib7FDEA08C_gt_ImperialArbitrationMachineAirTransportDing_Init();
    lib7FDEA08C_gt_HoundsofWarZergThrallsDestroyed_Init();
    lib7FDEA08C_gt_WarHoundsCreateZerglingServants_Init();
    lib7FDEA08C_gt_WarHoundsCreateHydraliskServants_Init();
    lib7FDEA08C_gt_HoundsofWarCreateMutaliskServants_Init();
    lib7FDEA08C_gt_E68898E4BA89E681B6E78AACE5889BE5BBBAE99BB7E585BDE5A5B4E4BB86_Init();
    lib7FDEA08C_gt_E68898E4BA89E681B6E78AACE5889BE5BBBAE99BB7E585BDE5A5B4E4B1_Init();
    lib7FDEA08C_gt_Creationofcargoinsidetheairdropbunker_Init();
    lib7FDEA08C_gt_Radiationstrikesoundeffectenhancement_Init();
    lib7FDEA08C_gt_XanthosInit_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib7FDEA08C_InitLib_completed = false;

void lib7FDEA08C_InitLib () {
    if (lib7FDEA08C_InitLib_completed) {
        return;
    }

    lib7FDEA08C_InitLib_completed = true;

    lib7FDEA08C_InitLibraries();
    lib7FDEA08C_InitVariables();
    lib7FDEA08C_InitTriggers();
}

